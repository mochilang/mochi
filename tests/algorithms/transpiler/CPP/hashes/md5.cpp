// Generated by Mochi transpiler v0.10.61 on 2025-08-08 16:02:19 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <type_traits>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <stdexcept>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
template<typename V> decltype(auto) _index(const V& v, int64_t i) {
    if (i < 0) i += v.size();
    return v[static_cast<size_t>(i)];
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

int64_t ord(std::string ch);
std::string to_little_endian(std::string s);
std::string int_to_bits(int64_t n, int64_t width);
int64_t bits_to_int(std::string bits);
std::string to_hex(int64_t n);
std::string reformat_hex(int64_t i);
std::string preprocess(std::string message);
std::vector<std::vector<int64_t>> get_block_words(std::string bit_string);
int64_t bit_and(int64_t a, int64_t b);
int64_t bit_or(int64_t a, int64_t b);
int64_t bit_xor(int64_t a, int64_t b);
int64_t not_32(int64_t i);
int64_t sum_32(int64_t a, int64_t b);
int64_t lshift(int64_t num, int64_t k);
int64_t rshift(int64_t num, int64_t k);
int64_t left_rotate_32(int64_t i, int64_t shift);
std::string md5_me(std::string message);
int main();

int64_t MOD = int64_t(4294967296);
std::string ASCII = std::string(" !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~");

int64_t ord(std::string ch) {
    int64_t i = int64_t(0);
    while ((i < ASCII.size())) {
        if ((([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(i, (i + int64_t(1)) - i); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+i, __v.begin()+(i + int64_t(1))); })(ASCII) == ch)) {
            return (int64_t(32) + i);
        }
        i = (i + int64_t(1));
    }
    return int64_t(0);
}

std::string to_little_endian(std::string s) {
    if ((s.size() != int64_t(32))) {
        throw std::runtime_error(std::string("Input must be of length 32"));
    }
    return (((([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(int64_t(24), int64_t(32) - int64_t(24)); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+int64_t(24), __v.begin()+int64_t(32)); })(s) + ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(int64_t(16), int64_t(24) - int64_t(16)); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+int64_t(16), __v.begin()+int64_t(24)); })(s)) + ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(int64_t(8), int64_t(16) - int64_t(8)); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+int64_t(8), __v.begin()+int64_t(16)); })(s)) + ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(int64_t(0), int64_t(8) - int64_t(0)); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+int64_t(0), __v.begin()+int64_t(8)); })(s));
}

std::string int_to_bits(int64_t n, int64_t width) {
    std::string bits = std::string("");
    int64_t num = n;
    while ((num > int64_t(0))) {
        bits = (([&]{ std::ostringstream ss; ss << std::boolalpha << (num % int64_t(2)); return ss.str(); }()) + bits);
        num = (num / int64_t(2));
    }
    while ((bits.size() < width)) {
        bits = (std::string("0") + bits);
    }
    if ((bits.size() > width)) {
        bits = ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr((bits.size() - width), bits.size() - (bits.size() - width)); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+(bits.size() - width), __v.begin()+bits.size()); })(bits);
    }
    return bits;
}

int64_t bits_to_int(std::string bits) {
    int64_t num = int64_t(0);
    int64_t i = int64_t(0);
    while ((i < bits.size())) {
        if ((([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(i, (i + int64_t(1)) - i); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+i, __v.begin()+(i + int64_t(1))); })(bits) == std::string("1"))) {
            num = ((num * int64_t(2)) + int64_t(1));
        } else {
            num = (num * int64_t(2));
        }
        i = (i + int64_t(1));
    }
    return num;
}

std::string to_hex(int64_t n) {
    std::string digits = std::string("0123456789abcdef");
    if ((n == int64_t(0))) {
        return std::string("0");
    }
    int64_t num = n;
    std::string s = std::string("");
    while ((num > int64_t(0))) {
        int64_t d = (num % int64_t(16));
        s = (([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(d, (d + int64_t(1)) - d); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+d, __v.begin()+(d + int64_t(1))); })(digits) + s);
        num = (num / int64_t(16));
    }
    return s;
}

std::string reformat_hex(int64_t i) {
    if ((i < int64_t(0))) {
        throw std::runtime_error(std::string("Input must be non-negative"));
    }
    std::string hex = to_hex(i);
    while ((hex.size() < int64_t(8))) {
        hex = (std::string("0") + hex);
    }
    if ((hex.size() > int64_t(8))) {
        hex = ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr((hex.size() - int64_t(8)), hex.size() - (hex.size() - int64_t(8))); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+(hex.size() - int64_t(8)), __v.begin()+hex.size()); })(hex);
    }
    std::string le = std::string("");
    int64_t j = (hex.size() - int64_t(2));
    while ((j >= int64_t(0))) {
        le = (le + ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(j, (j + int64_t(2)) - j); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+j, __v.begin()+(j + int64_t(2))); })(hex));
        j = (j - int64_t(2));
    }
    return le;
}

std::string preprocess(std::string message) {
    std::string bit_string = std::string("");
    int64_t i = int64_t(0);
    while ((i < message.size())) {
        std::string ch = ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(i, (i + int64_t(1)) - i); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+i, __v.begin()+(i + int64_t(1))); })(message);
        bit_string = (bit_string + int_to_bits(ord(ch), int64_t(8)));
        i = (i + int64_t(1));
    }
    std::string start_len = int_to_bits((int64_t)(bit_string.size()), int64_t(64));
    bit_string = (bit_string + std::string("1"));
    while (((bit_string.size() % int64_t(512)) != int64_t(448))) {
        bit_string = (bit_string + std::string("0"));
    }
    bit_string = ((bit_string + to_little_endian(([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(int64_t(32), int64_t(64) - int64_t(32)); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+int64_t(32), __v.begin()+int64_t(64)); })(start_len))) + to_little_endian(([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(int64_t(0), int64_t(32) - int64_t(0)); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+int64_t(0), __v.begin()+int64_t(32)); })(start_len)));
    return bit_string;
}

std::vector<std::vector<int64_t>> get_block_words(std::string bit_string) {
    if (((bit_string.size() % int64_t(512)) != int64_t(0))) {
        throw std::runtime_error(std::string("Input must have length that's a multiple of 512"));
    }
    std::vector<std::vector<int64_t>> blocks = {};
    int64_t pos = int64_t(0);
    while ((pos < bit_string.size())) {
        std::vector<int64_t> block = {};
        int64_t i = int64_t(0);
        while ((i < int64_t(512))) {
            std::string part = ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr((pos + i), ((pos + i) + int64_t(32)) - (pos + i)); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+(pos + i), __v.begin()+((pos + i) + int64_t(32))); })(bit_string);
            int64_t word = bits_to_int(to_little_endian(part));
            block = ([&]{ auto& __tmp = block; __tmp.push_back(word); return __tmp; }());
            i = (i + int64_t(32));
        }
        blocks = ([&]{ auto& __tmp = blocks; __tmp.push_back(block); return __tmp; }());
        pos = (pos + int64_t(512));
    }
    return blocks;
}

int64_t bit_and(int64_t a, int64_t b) {
    int64_t x = a;
    int64_t y = b;
    int64_t res = int64_t(0);
    int64_t bit = int64_t(1);
    int64_t i = int64_t(0);
    while ((i < int64_t(32))) {
        if ((((x % int64_t(2)) == int64_t(1)) && ((y % int64_t(2)) == int64_t(1)))) {
            res = (res + bit);
        }
        x = (x / int64_t(2));
        y = (y / int64_t(2));
        bit = (bit * int64_t(2));
        i = (i + int64_t(1));
    }
    return res;
}

int64_t bit_or(int64_t a, int64_t b) {
    int64_t x = a;
    int64_t y = b;
    int64_t res = int64_t(0);
    int64_t bit = int64_t(1);
    int64_t i = int64_t(0);
    while ((i < int64_t(32))) {
        int64_t abit = (x % int64_t(2));
        int64_t bbit = (y % int64_t(2));
        if (((abit == int64_t(1)) || (bbit == int64_t(1)))) {
            res = (res + bit);
        }
        x = (x / int64_t(2));
        y = (y / int64_t(2));
        bit = (bit * int64_t(2));
        i = (i + int64_t(1));
    }
    return res;
}

int64_t bit_xor(int64_t a, int64_t b) {
    int64_t x = a;
    int64_t y = b;
    int64_t res = int64_t(0);
    int64_t bit = int64_t(1);
    int64_t i = int64_t(0);
    while ((i < int64_t(32))) {
        int64_t abit = (x % int64_t(2));
        int64_t bbit = (y % int64_t(2));
        if ((((abit + bbit) % int64_t(2)) == int64_t(1))) {
            res = (res + bit);
        }
        x = (x / int64_t(2));
        y = (y / int64_t(2));
        bit = (bit * int64_t(2));
        i = (i + int64_t(1));
    }
    return res;
}

int64_t not_32(int64_t i) {
    if ((i < int64_t(0))) {
        throw std::runtime_error(std::string("Input must be non-negative"));
    }
    return (int64_t(4294967295) - i);
}

int64_t sum_32(int64_t a, int64_t b) {
    return ((a + b) % MOD);
}

int64_t lshift(int64_t num, int64_t k) {
    int64_t result = (num % MOD);
    int64_t i = int64_t(0);
    while ((i < k)) {
        result = ((result * int64_t(2)) % MOD);
        i = (i + int64_t(1));
    }
    return result;
}

int64_t rshift(int64_t num, int64_t k) {
    int64_t result = num;
    int64_t i = int64_t(0);
    while ((i < k)) {
        result = (result / int64_t(2));
        i = (i + int64_t(1));
    }
    return result;
}

int64_t left_rotate_32(int64_t i, int64_t shift) {
    if ((i < int64_t(0))) {
        throw std::runtime_error(std::string("Input must be non-negative"));
    }
    if ((shift < int64_t(0))) {
        throw std::runtime_error(std::string("Shift must be non-negative"));
    }
    int64_t left = lshift(i, shift);
    int64_t right = rshift(i, (int64_t(32) - shift));
    return ((left + right) % MOD);
}

std::string md5_me(std::string message) {
    std::string bit_string = preprocess(message);
    std::vector<int64_t> added_consts = std::vector<int64_t>{int64_t(3614090360), int64_t(3905402710), int64_t(606105819), int64_t(3250441966), int64_t(4118548399), int64_t(1200080426), int64_t(2821735955), int64_t(4249261313), int64_t(1770035416), int64_t(2336552879), int64_t(4294925233), int64_t(2304563134), int64_t(1804603682), int64_t(4254626195), int64_t(2792965006), int64_t(1236535329), int64_t(4129170786), int64_t(3225465664), int64_t(643717713), int64_t(3921069994), int64_t(3593408605), int64_t(38016083), int64_t(3634488961), int64_t(3889429448), int64_t(568446438), int64_t(3275163606), int64_t(4107603335), int64_t(1163531501), int64_t(2850285829), int64_t(4243563512), int64_t(1735328473), int64_t(2368359562), int64_t(4294588738), int64_t(2272392833), int64_t(1839030562), int64_t(4259657740), int64_t(2763975236), int64_t(1272893353), int64_t(4139469664), int64_t(3200236656), int64_t(681279174), int64_t(3936430074), int64_t(3572445317), int64_t(76029189), int64_t(3654602809), int64_t(3873151461), int64_t(530742520), int64_t(3299628645), int64_t(4096336452), int64_t(1126891415), int64_t(2878612391), int64_t(4237533241), int64_t(1700485571), int64_t(2399980690), int64_t(4293915773), int64_t(2240044497), int64_t(1873313359), int64_t(4264355552), int64_t(2734768916), int64_t(1309151649), int64_t(4149444226), int64_t(3174756917), int64_t(718787259), int64_t(3951481745)};
    std::vector<int64_t> shift_amounts = std::vector<int64_t>{int64_t(7), int64_t(12), int64_t(17), int64_t(22), int64_t(7), int64_t(12), int64_t(17), int64_t(22), int64_t(7), int64_t(12), int64_t(17), int64_t(22), int64_t(7), int64_t(12), int64_t(17), int64_t(22), int64_t(5), int64_t(9), int64_t(14), int64_t(20), int64_t(5), int64_t(9), int64_t(14), int64_t(20), int64_t(5), int64_t(9), int64_t(14), int64_t(20), int64_t(5), int64_t(9), int64_t(14), int64_t(20), int64_t(4), int64_t(11), int64_t(16), int64_t(23), int64_t(4), int64_t(11), int64_t(16), int64_t(23), int64_t(4), int64_t(11), int64_t(16), int64_t(23), int64_t(4), int64_t(11), int64_t(16), int64_t(23), int64_t(6), int64_t(10), int64_t(15), int64_t(21), int64_t(6), int64_t(10), int64_t(15), int64_t(21), int64_t(6), int64_t(10), int64_t(15), int64_t(21), int64_t(6), int64_t(10), int64_t(15), int64_t(21)};
    int64_t a0 = int64_t(1732584193);
    int64_t b0 = int64_t(4023233417);
    int64_t c0 = int64_t(2562383102);
    int64_t d0 = int64_t(271733878);
    std::vector<std::vector<int64_t>> blocks = get_block_words(bit_string);
    int64_t bi = int64_t(0);
    while ((bi < blocks.size())) {
        std::vector<int64_t> block = _index(blocks, bi);
        int64_t a = a0;
        int64_t b = b0;
        int64_t c = c0;
        int64_t d = d0;
        int64_t i = int64_t(0);
        while ((i < int64_t(64))) {
            int64_t f = int64_t(0);
            int64_t g = int64_t(0);
            if ((i <= int64_t(15))) {
                f = bit_xor(d, bit_and(b, bit_xor(c, d)));
                g = i;
            } else             if ((i <= int64_t(31))) {
                f = bit_xor(c, bit_and(d, bit_xor(b, c)));
                g = (((int64_t(5) * i) + int64_t(1)) % int64_t(16));
            } else             if ((i <= int64_t(47))) {
                f = bit_xor(bit_xor(b, c), d);
                g = (((int64_t(3) * i) + int64_t(5)) % int64_t(16));
            } else {
                f = bit_xor(c, bit_or(b, not_32(d)));
                g = ((int64_t(7) * i) % int64_t(16));
            }


            f = sum_32(f, a);
            f = sum_32(f, _index(added_consts, i));
            f = sum_32(f, _index(block, g));
            int64_t rotated = left_rotate_32(f, _index(shift_amounts, i));
            int64_t new_b = sum_32(b, rotated);
            a = d;
            d = c;
            c = b;
            b = new_b;
            i = (i + int64_t(1));
        }
        a0 = sum_32(a0, a);
        b0 = sum_32(b0, b);
        c0 = sum_32(c0, c);
        d0 = sum_32(d0, d);
        bi = (bi + int64_t(1));
    }
    std::string digest = (((reformat_hex(a0) + reformat_hex(b0)) + reformat_hex(c0)) + reformat_hex(d0));
    return digest;
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
    }
    return 0;
}
