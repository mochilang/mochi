// Generated by Mochi transpiler v0.10.63 on 2025-08-12 08:44:44 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <type_traits>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <limits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
template<typename V> decltype(auto) _index(V& v, int64_t i) {
    if (i < 0) i += v.size();
    return v[static_cast<size_t>(i)];
}
template<typename V> decltype(auto) _index(const V& v, int64_t i) {
    if (i < 0) i += v.size();
    return v[static_cast<size_t>(i)];
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    if constexpr(std::is_same_v<T, double>) {
        std::ostringstream ss;
        ss << std::defaultfloat << std::setprecision(15) << v;
        auto s = ss.str();
        auto pos = s.find('.');
        if(pos != std::string::npos){
            while(!s.empty() && s.back() == '0') s.pop_back();
            if(!s.empty() && s.back() == '.') s.pop_back();
        }
        return s;
    } else {
        std::ostringstream ss;
        ss << std::boolalpha << v;
        return ss.str();
    }
}
struct DecodeResult;

std::ostream& operator<<(std::ostream&, const DecodeResult&);


struct DecodeResult {
    std::vector<int64_t> data;
    bool ack;
    auto operator<=>(const DecodeResult&) const = default;
};

std::ostream& operator<<(std::ostream& os, const DecodeResult& v) {
    os << '{' << "'data': "<< "["; for(size_t i=0;i<v.data.size();++i){ if(i>0) os << ", "; os << v.data[i]; } os << "]"
 << ", " << "'ack': "<< v.ack
 << '}';
    return os;
}

int64_t index_of(std::string s, std::string ch);
int64_t ord(std::string ch);
std::string chr(int64_t n);
std::string text_to_bits(std::string text);
std::string text_from_bits(std::string bits);
std::string bool_to_string(bool b);
std::vector<int64_t> string_to_bitlist(std::string s);
std::string bitlist_to_string(const std::vector<int64_t>& bits);
bool is_power_of_two(int64_t x);
bool list_eq(const std::vector<int64_t>& a, const std::vector<int64_t>& b);
int64_t pow2(int64_t e);
bool has_bit(int64_t n, int64_t b);
std::vector<int64_t> hamming_encode(int64_t r, const std::vector<int64_t>& data_bits);
DecodeResult hamming_decode(int64_t r, const std::vector<int64_t>& code);
int main();

int64_t index_of(std::string s, std::string ch) {
    int64_t i = int64_t(0);
    while ((i < s.size())) {
        if ((([&](const auto& __s){ auto __i = i; if (__i < 0) __i += __s.size(); return std::string(1, __s[static_cast<size_t>(__i)]); })(s) == ch)) {
            return i;
        }
        i = (i + int64_t(1));
    }
    return -int64_t(1);
}

int64_t ord(std::string ch) {
    std::string upper = std::string("ABCDEFGHIJKLMNOPQRSTUVWXYZ");
    std::string lower = std::string("abcdefghijklmnopqrstuvwxyz");
    int64_t idx = index_of(upper, ch);
    if ((idx >= int64_t(0))) {
        return (int64_t(65) + idx);
    }
    idx = index_of(lower, ch);
    if ((idx >= int64_t(0))) {
        return (int64_t(97) + idx);
    }
    return int64_t(0);
}

std::string chr(int64_t n) {
    std::string upper = std::string("ABCDEFGHIJKLMNOPQRSTUVWXYZ");
    std::string lower = std::string("abcdefghijklmnopqrstuvwxyz");
    if (((n >= int64_t(65)) && (n < int64_t(91)))) {
        return ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr((n - int64_t(65)), (n - int64_t(64)) - (n - int64_t(65))); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+(n - int64_t(65)), __v.begin()+(n - int64_t(64))); })(upper);
    }
    if (((n >= int64_t(97)) && (n < int64_t(123)))) {
        return ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr((n - int64_t(97)), (n - int64_t(96)) - (n - int64_t(97))); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+(n - int64_t(97)), __v.begin()+(n - int64_t(96))); })(lower);
    }
    return std::string("?");
}

std::string text_to_bits(std::string text) {
    std::string bits = std::string("");
    int64_t i = int64_t(0);
    while ((i < text.size())) {
        int64_t code = ord(([&](const auto& __s){ auto __i = i; if (__i < 0) __i += __s.size(); return std::string(1, __s[static_cast<size_t>(__i)]); })(text));
        int64_t j = int64_t(7);
        while ((j >= int64_t(0))) {
            int64_t p = pow2(j);
            if ((((code / p) % int64_t(2)) == int64_t(1))) {
                bits = (bits + std::string("1"));
            } else {
                bits = (bits + std::string("0"));
            }
            j = (j - int64_t(1));
        }
        i = (i + int64_t(1));
    }
    return bits;
}

std::string text_from_bits(std::string bits) {
    std::string text = std::string("");
    int64_t i = int64_t(0);
    while ((i < bits.size())) {
        int64_t code = int64_t(0);
        int64_t j = int64_t(0);
        while (((j < int64_t(8)) && ((i + j) < bits.size()))) {
            code = (code * int64_t(2));
            if ((([&](const auto& __s){ auto __i = (i + j); if (__i < 0) __i += __s.size(); return std::string(1, __s[static_cast<size_t>(__i)]); })(bits) == std::string("1"))) {
                code = (code + int64_t(1));
            }
            j = (j + int64_t(1));
        }
        text = (text + chr(code));
        i = (i + int64_t(8));
    }
    return text;
}

std::string bool_to_string(bool b) {
    if (b) {
        return std::string("True");
    }
    return std::string("False");
}

std::vector<int64_t> string_to_bitlist(std::string s) {
    std::vector<int64_t> res = {};
    int64_t i = int64_t(0);
    while ((i < s.size())) {
        if ((([&](const auto& __s){ auto __i = i; if (__i < 0) __i += __s.size(); return std::string(1, __s[static_cast<size_t>(__i)]); })(s) == std::string("1"))) {
            res = ([&]{ auto __tmp = res; __tmp.push_back(int64_t(1)); return __tmp; }());
        } else {
            res = ([&]{ auto __tmp = res; __tmp.push_back(int64_t(0)); return __tmp; }());
        }
        i = (i + int64_t(1));
    }
    return res;
}

std::string bitlist_to_string(const std::vector<int64_t>& bits) {
    std::string s = std::string("");
    int64_t i = int64_t(0);
    while ((i < bits.size())) {
        if ((_index(bits, i) == int64_t(1))) {
            s = (s + std::string("1"));
        } else {
            s = (s + std::string("0"));
        }
        i = (i + int64_t(1));
    }
    return s;
}

bool is_power_of_two(int64_t x) {
    if ((x < int64_t(1))) {
        return false;
    }
    int64_t p = int64_t(1);
    while ((p < x)) {
        p = (p * int64_t(2));
    }
    return (p == x);
}

bool list_eq(const std::vector<int64_t>& a, const std::vector<int64_t>& b) {
    if ((a.size() != b.size())) {
        return false;
    }
    int64_t i = int64_t(0);
    while ((i < a.size())) {
        if ((_index(a, i) != _index(b, i))) {
            return false;
        }
        i = (i + int64_t(1));
    }
    return true;
}

int64_t pow2(int64_t e) {
    int64_t res = int64_t(1);
    int64_t i = int64_t(0);
    while ((i < e)) {
        res = (res * int64_t(2));
        i = (i + int64_t(1));
    }
    return res;
}

bool has_bit(int64_t n, int64_t b) {
    int64_t p = pow2(b);
    if ((((n / p) % int64_t(2)) == int64_t(1))) {
        return true;
    }
    return false;
}

std::vector<int64_t> hamming_encode(int64_t r, const std::vector<int64_t>& data_bits) {
    int64_t total = (r + data_bits.size());
    std::vector<int64_t> data_ord = {};
    int64_t cont_data = int64_t(0);
    int64_t x = int64_t(1);
    while ((x <= total)) {
        if (is_power_of_two(x)) {
            data_ord = ([&]{ auto __tmp = data_ord; __tmp.push_back(-int64_t(1)); return __tmp; }());
        } else {
            data_ord = ([&]{ auto __tmp = data_ord; __tmp.push_back(_index(data_bits, cont_data)); return __tmp; }());
            cont_data = (cont_data + int64_t(1));
        }
        x = (x + int64_t(1));
    }
    std::vector<int64_t> parity = {};
    int64_t bp = int64_t(0);
    while ((bp < r)) {
        int64_t cont_bo = int64_t(0);
        int64_t j = int64_t(0);
        while ((j < data_ord.size())) {
            int64_t bit = _index(data_ord, j);
            if ((bit >= int64_t(0))) {
                int64_t pos = (j + int64_t(1));
                if ((has_bit(pos, bp) && (bit == int64_t(1)))) {
                    cont_bo = (cont_bo + int64_t(1));
                }
            }
            j = (j + int64_t(1));
        }
        parity = ([&]{ auto __tmp = parity; __tmp.push_back((cont_bo % int64_t(2))); return __tmp; }());
        bp = (bp + int64_t(1));
    }
    std::vector<int64_t> result = {};
    int64_t cont_bp = int64_t(0);
    int64_t i = int64_t(0);
    while ((i < data_ord.size())) {
        if ((_index(data_ord, i) < int64_t(0))) {
            result = ([&]{ auto __tmp = result; __tmp.push_back(_index(parity, cont_bp)); return __tmp; }());
            cont_bp = (cont_bp + int64_t(1));
        } else {
            result = ([&]{ auto __tmp = result; __tmp.push_back(_index(data_ord, i)); return __tmp; }());
        }
        i = (i + int64_t(1));
    }
    return result;
}

DecodeResult hamming_decode(int64_t r, const std::vector<int64_t>& code) {
    std::vector<int64_t> data_output = {};
    std::vector<int64_t> parity_received = {};
    int64_t i = int64_t(1);
    int64_t idx = int64_t(0);
    while ((i <= code.size())) {
        if (is_power_of_two(i)) {
            parity_received = ([&]{ auto __tmp = parity_received; __tmp.push_back(_index(code, idx)); return __tmp; }());
        } else {
            data_output = ([&]{ auto __tmp = data_output; __tmp.push_back(_index(code, idx)); return __tmp; }());
        }
        idx = (idx + int64_t(1));
        i = (i + int64_t(1));
    }
    std::vector<int64_t> recomputed = hamming_encode(r, data_output);
    std::vector<int64_t> parity_calc = {};
    int64_t j = int64_t(0);
    while ((j < recomputed.size())) {
        if (is_power_of_two((j + int64_t(1)))) {
            parity_calc = ([&]{ auto __tmp = parity_calc; __tmp.push_back(_index(recomputed, j)); return __tmp; }());
        }
        j = (j + int64_t(1));
    }
    bool ack = list_eq(parity_received, parity_calc);
    return DecodeResult{.data = data_output, .ack = ack};
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        int64_t sizePari = int64_t(4);
        int64_t be = int64_t(2);
        std::string text = std::string("Message01");
        std::string binary = text_to_bits(text);
        std::cout << ((std::string("Text input in binary is '") + binary) + std::string("'"));
        std::cout << std::endl;
        std::vector<int64_t> data_bits = string_to_bitlist(binary);
        std::vector<int64_t> encoded = hamming_encode(sizePari, data_bits);
        std::cout << (std::string("Data converted ----------> ") + bitlist_to_string(encoded));
        std::cout << std::endl;
        DecodeResult decoded = hamming_decode(sizePari, encoded);
        std::cout << (((std::string("Data receive ------------> ") + bitlist_to_string(decoded.data)) + std::string(" -- Data integrity: ")) + bool_to_string(decoded.ack));
        std::cout << std::endl;
        std::vector<int64_t> corrupted = {};
        int64_t i = int64_t(0);
        while ((i < encoded.size())) {
            corrupted = ([&]{ auto __tmp = corrupted; __tmp.push_back(_index(encoded, i)); return __tmp; }());
            i = (i + int64_t(1));
        }
        int64_t pos = (be - int64_t(1));
        if ((_index(corrupted, pos) == int64_t(0))) {
            corrupted[pos] = int64_t(1);
        } else {
            corrupted[pos] = int64_t(0);
        }
        DecodeResult decoded_err = hamming_decode(sizePari, corrupted);
        std::cout << (((std::string("Data receive (error) ----> ") + bitlist_to_string(decoded_err.data)) + std::string(" -- Data integrity: ")) + bool_to_string(decoded_err.ack));
        std::cout << std::endl;
    }
    return 0;
}
