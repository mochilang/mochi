// Generated by Mochi transpiler v0.10.71 on 2025-08-23 16:01:14 GMT+7
#include <boost/multiprecision/cpp_int.hpp>
using cpp_int = boost::multiprecision::cpp_int;
#include <iostream>
#include <string>
#include <sstream>
#include <vector>
#include <iomanip>
#include <cmath>
#include <optional>
#include <cstdint>
#include <any>
#include <type_traits>
#include <limits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <map>


static std::string _cpp_int_to_string(cpp_int v) {
    if(v == 0) return "0";
    bool neg = v < 0;
    if(neg) v = -v;
    std::string s;
    while(v > 0){ int d = int(v % 10); s = char('0'+d) + s; v /= 10; }
    if(neg) s = '-' + s;
    return s;
}
inline std::ostream& operator<<(std::ostream& os, cpp_int v){ os << _cpp_int_to_string(v); return os; }
static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static cpp_int _parse_int_str(const std::string& s, long base) {
    if(s.empty()) return 0;
    cpp_int r = 0;
    bool neg = false; size_t i = 0;
    if(s[0]=='-'){ neg = true; i = 1; }
    for(; i < s.size(); ++i){
        char c = s[i];
        int digit = 0;
        if(c >= '0' && c <= '9') digit = c - '0';
        else if(c >= 'a' && c <= 'z') digit = c - 'a' + 10;
        else if(c >= 'A' && c <= 'Z') digit = c - 'A' + 10;
        else continue;
        r *= base;
        r += digit;
    }
    return neg ? -r : r;
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(cpp_int)) os << _cpp_int_to_string(std::any_cast<cpp_int>(val));
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << " : "; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(int64_t)) return (double)std::any_cast<int64_t>(v);
    if(v.type() == typeid(cpp_int)) return (double)std::any_cast<cpp_int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(cpp_int)) return _cpp_int_to_string(std::any_cast<cpp_int>(v));
    if(v.type() == typeid(double)) {
        std::ostringstream ss;
        ss << std::defaultfloat << std::setprecision(17) << std::any_cast<double>(v);
        auto s = ss.str();
        auto epos = s.find('e');
        if(epos == std::string::npos) epos = s.find('E');
        std::string exp;
        if(epos != std::string::npos){ exp = s.substr(epos); s = s.substr(0, epos); }
        auto pos = s.find('.');
        if(pos != std::string::npos){ while(!s.empty() && s.back() == '0') s.pop_back(); if(!s.empty() && s.back() == '.') s.pop_back(); }
        return s + exp;
    }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    if constexpr(std::is_same_v<T, cpp_int>) {
        return _cpp_int_to_string(v);
    } else if constexpr(std::is_same_v<T, double>) {
        std::ostringstream ss;
        ss << std::defaultfloat << std::setprecision(17) << v;
        auto s = ss.str();
        auto epos = s.find('e');
        if(epos == std::string::npos) epos = s.find('E');
        std::string exp;
        if(epos != std::string::npos){ exp = s.substr(epos); s = s.substr(0, epos); }
        auto pos = s.find('.');
        if(pos != std::string::npos){
            while(!s.empty() && s.back() == '0') s.pop_back();
            if(!s.empty() && s.back() == '.') s.pop_back();
        }
        return s + exp;
    } else {
        std::ostringstream ss;
        ss << std::boolalpha << v;
        return ss.str();
    }
}

cpp_int parse_int(std::string s);
std::vector<std::vector<cpp_int>> digit_replacements(const cpp_int& number);
bool is_prime(const cpp_int& num);
cpp_int solution(const cpp_int& family_length);
int main();

cpp_int parse_int(std::string s) {
    cpp_int value = int64_t(0);
    cpp_int i = int64_t(0);
    while ((i < s.size())) {
        value = ((value * int64_t(10)) + cpp_int(([&](const auto& __s){ auto __i = i; if (__i < 0) __i += __s.size(); return __s[static_cast<size_t>(__i)]; })(s) - '0'));
        i = (i + int64_t(1));
    }
    return value;
}

std::vector<std::vector<cpp_int>> digit_replacements(const cpp_int& number) {
    std::string num_str = ([&]{ std::ostringstream ss; ss << std::boolalpha << number; return ss.str(); }());
    std::vector<cpp_int> counts = std::vector<cpp_int>{int64_t(0), int64_t(0), int64_t(0), int64_t(0), int64_t(0), int64_t(0), int64_t(0), int64_t(0), int64_t(0), int64_t(0)};
    cpp_int i = int64_t(0);
    while ((i < num_str.size())) {
        cpp_int d = cpp_int(([&](const auto& __s){ auto __i = i; if (__i < 0) __i += __s.size(); return __s[static_cast<size_t>(__i)]; })(num_str) - '0');
        counts[static_cast<size_t>(d)] = (counts[static_cast<size_t>(d)] + int64_t(1));
        i = (i + int64_t(1));
    }
    std::vector<std::vector<cpp_int>> result = {};
    std::string digits = std::string("0123456789");
    cpp_int digit = int64_t(0);
    while ((digit < int64_t(10))) {
        if ((counts[static_cast<size_t>(digit)] > int64_t(1))) {
            std::vector<cpp_int> family = {};
            cpp_int repl = int64_t(0);
            while ((repl < int64_t(10))) {
                std::string new_str = std::string("");
                cpp_int j = int64_t(0);
                while ((j < num_str.size())) {
                    std::string c = std::string(1, num_str[static_cast<size_t>(j)]);
                    if ((c == std::string(1, digits[static_cast<size_t>(digit)]))) {
                        new_str = (new_str + std::string(1, digits[static_cast<size_t>(repl)]));
                    } else {
                        new_str = (new_str + c);
                    }
                    j = (j + int64_t(1));
                }
                family = ([&]{ auto __tmp = family; __tmp.push_back(parse_int(new_str)); return __tmp; }());
                repl = (repl + int64_t(1));
            }
            result = ([&]{ auto __tmp = result; __tmp.push_back(family); return __tmp; }());
        }
        digit = (digit + int64_t(1));
    }
    return result;
}

bool is_prime(const cpp_int& num) {
    if ((num < int64_t(2))) {
        return false;
    }
    if (((num % int64_t(2)) == int64_t(0))) {
        return (num == int64_t(2));
    }
    cpp_int i = int64_t(3);
    while (((i * i) <= num)) {
        if (((num % i) == int64_t(0))) {
            return false;
        }
        i = (i + int64_t(2));
    }
    return true;
}

cpp_int solution(const cpp_int& family_length) {
    cpp_int candidate = int64_t(121313);
    if (!is_prime(candidate)) {
        return -int64_t(1);
    }
    std::vector<std::vector<cpp_int>> reps = digit_replacements(candidate);
    cpp_int r = int64_t(0);
    while ((r < reps.size())) {
        std::vector<cpp_int> family = reps[static_cast<size_t>(r)];
        cpp_int count = int64_t(0);
        cpp_int min_prime = int64_t(0);
        bool first = true;
        cpp_int i = int64_t(0);
        while ((i < family.size())) {
            cpp_int num = family[static_cast<size_t>(i)];
            if (is_prime(num)) {
                if (first) {
                    min_prime = num;
                    first = false;
                } else {
                    if ((num < min_prime)) {
                        min_prime = num;
                    }
                }
                count = (count + int64_t(1));
            }
            i = (i + int64_t(1));
        }
        if ((count == family_length)) {
            return min_prime;
        }
        r = (r + int64_t(1));
    }
    return -int64_t(1);
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        std::cout << ([&]{ std::ostringstream ss; ss << std::boolalpha << solution(int64_t(8)); return ss.str(); }());
        std::cout << std::endl;
    }
    return 0;
}
