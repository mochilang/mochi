// Generated by Mochi transpiler v0.10.70 on 2025-08-23 01:40:06 GMT+7
using cpp_int = __int128;
#include <iostream>
#include <string>
#include <vector>
#include <type_traits>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <cstdint>
#include <any>
#include <limits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <map>


static std::string _cpp_int_to_string(cpp_int v) {
    if(v == 0) return "0";
    bool neg = v < 0;
    if(neg) v = -v;
    std::string s;
    while(v > 0){ int d = int(v % 10); s = char('0'+d) + s; v /= 10; }
    if(neg) s = '-' + s;
    return s;
}
inline std::ostream& operator<<(std::ostream& os, cpp_int v){ os << _cpp_int_to_string(v); return os; }
static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(cpp_int)) os << _cpp_int_to_string(std::any_cast<cpp_int>(val));
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << " : "; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(int64_t)) return (double)std::any_cast<int64_t>(v);
    if(v.type() == typeid(cpp_int)) return (double)std::any_cast<cpp_int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(cpp_int)) return _cpp_int_to_string(std::any_cast<cpp_int>(v));
    if(v.type() == typeid(double)) {
        std::ostringstream ss;
        ss << std::defaultfloat << std::setprecision(17) << std::any_cast<double>(v);
        auto s = ss.str();
        auto epos = s.find('e');
        if(epos == std::string::npos) epos = s.find('E');
        std::string exp;
        if(epos != std::string::npos){ exp = s.substr(epos); s = s.substr(0, epos); }
        auto pos = s.find('.');
        if(pos != std::string::npos){ while(!s.empty() && s.back() == '0') s.pop_back(); if(!s.empty() && s.back() == '.') s.pop_back(); }
        return s + exp;
    }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    if constexpr(std::is_same_v<T, cpp_int>) {
        return _cpp_int_to_string(v);
    } else if constexpr(std::is_same_v<T, double>) {
        std::ostringstream ss;
        ss << std::defaultfloat << std::setprecision(17) << v;
        auto s = ss.str();
        auto epos = s.find('e');
        if(epos == std::string::npos) epos = s.find('E');
        std::string exp;
        if(epos != std::string::npos){ exp = s.substr(epos); s = s.substr(0, epos); }
        auto pos = s.find('.');
        if(pos != std::string::npos){
            while(!s.empty() && s.back() == '0') s.pop_back();
            if(!s.empty() && s.back() == '.') s.pop_back();
        }
        return s + exp;
    } else {
        std::ostringstream ss;
        ss << std::boolalpha << v;
        return ss.str();
    }
}

cpp_int _xor(const cpp_int& a, const cpp_int& b);
std::string chr(const cpp_int& code);
cpp_int ord(std::string ch);
bool is_valid_ascii(const cpp_int& code);
std::string try_key(const std::vector<cpp_int>& ciphertext, const std::vector<cpp_int>& key);
std::vector<std::string> filter_valid_chars(const std::vector<cpp_int>& ciphertext);
bool contains(std::string s, std::string sub);
std::vector<std::string> filter_common_word(const std::vector<std::string>& possibles, std::string common_word);
cpp_int solution(const std::vector<cpp_int>& ciphertext);
int main();

std::string ascii_chars = std::string(" !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~");
std::vector<cpp_int> LOWERCASE_INTS = {};
cpp_int i = int64_t(97);
std::vector<std::string> COMMON_WORDS = std::vector<std::string>{std::string("the"), std::string("be"), std::string("to"), std::string("of"), std::string("and"), std::string("in"), std::string("that"), std::string("have")};
std::vector<cpp_int> ciphertext = std::vector<cpp_int>{int64_t(17), int64_t(6), int64_t(1), int64_t(69), int64_t(12), int64_t(1), int64_t(69), int64_t(26), int64_t(11), int64_t(69), int64_t(1), int64_t(2), int64_t(69), int64_t(15), int64_t(10), int64_t(1), int64_t(78), int64_t(13), int64_t(11), int64_t(78), int64_t(16), int64_t(13), int64_t(15), int64_t(16), int64_t(69), int64_t(6), int64_t(5), int64_t(19), int64_t(11)};

cpp_int _xor(const cpp_int& a, const cpp_int& b) {
    cpp_int res = int64_t(0);
    cpp_int bit = int64_t(1);
    cpp_int x = a;
    cpp_int y = b;
    while (((x > int64_t(0)) || (y > int64_t(0)))) {
        cpp_int abit = (x % int64_t(2));
        cpp_int bbit = (y % int64_t(2));
        if ((abit != bbit)) {
            res = (res + bit);
        }
        x = (x / int64_t(2));
        y = (y / int64_t(2));
        bit = (bit * int64_t(2));
    }
    return res;
}

std::string chr(const cpp_int& code) {
    if ((code == int64_t(10))) {
        return std::string("\n");
    }
    if ((code == int64_t(13))) {
        return std::string("\r");
    }
    if ((code == int64_t(9))) {
        return std::string("\t");
    }
    if (((code >= int64_t(32)) && (code < int64_t(127)))) {
        return ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr((code - int64_t(32)), (code - int64_t(31)) - (code - int64_t(32))); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+(code - int64_t(32)), __v.begin()+(code - int64_t(31))); })(ascii_chars);
    }
    return std::string("");
}

cpp_int ord(std::string ch) {
    if ((ch == std::string("\n"))) {
        return int64_t(10);
    }
    if ((ch == std::string("\r"))) {
        return int64_t(13);
    }
    if ((ch == std::string("\t"))) {
        return int64_t(9);
    }
    cpp_int i = int64_t(0);
    while ((i < ascii_chars.size())) {
        if ((([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(i, (i + int64_t(1)) - i); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+i, __v.begin()+(i + int64_t(1))); })(ascii_chars) == ch)) {
            return (int64_t(32) + i);
        }
        i = (i + int64_t(1));
    }
    return int64_t(0);
}

bool is_valid_ascii(const cpp_int& code) {
    if (((code >= int64_t(32)) && (code <= int64_t(126)))) {
        return true;
    }
    if ((((code == int64_t(9)) || (code == int64_t(10))) || (code == int64_t(13)))) {
        return true;
    }
    return false;
}

std::string try_key(const std::vector<cpp_int>& ciphertext, const std::vector<cpp_int>& key) {
    std::string decoded = std::string("");
    cpp_int i = int64_t(0);
    int64_t klen = key.size();
    while ((i < ciphertext.size())) {
        cpp_int decodedchar = _xor(ciphertext[static_cast<size_t>(i)], key[static_cast<size_t>((i % klen))]);
        if (!is_valid_ascii(decodedchar)) {
            return std::string("");
        }
        decoded = (decoded + chr(decodedchar));
        i = (i + int64_t(1));
    }
    return decoded;
}

std::vector<std::string> filter_valid_chars(const std::vector<cpp_int>& ciphertext) {
    std::vector<std::string> possibles = {};
    cpp_int i = int64_t(0);
    while ((i < LOWERCASE_INTS.size())) {
        cpp_int j = int64_t(0);
        while ((j < LOWERCASE_INTS.size())) {
            cpp_int k = int64_t(0);
            while ((k < LOWERCASE_INTS.size())) {
                std::vector<cpp_int> key = std::vector<cpp_int>{LOWERCASE_INTS[static_cast<size_t>(i)], LOWERCASE_INTS[static_cast<size_t>(j)], LOWERCASE_INTS[static_cast<size_t>(k)]};
                std::string decoded = try_key(ciphertext, key);
                if ((decoded != any_to_string(nullptr))) {
                    possibles = ([&]{ auto __tmp = possibles; __tmp.push_back(decoded); return __tmp; }());
                }
                k = (k + int64_t(1));
            }
            j = (j + int64_t(1));
        }
        i = (i + int64_t(1));
    }
    return possibles;
}

bool contains(std::string s, std::string sub) {
    int64_t n = s.size();
    int64_t m = sub.size();
    if ((m == int64_t(0))) {
        return true;
    }
    cpp_int i = int64_t(0);
    while ((i <= (n - m))) {
        cpp_int j = int64_t(0);
        bool is_match = true;
        while ((j < m)) {
            if ((std::string(1, s[static_cast<size_t>((i + j))]) != std::string(1, sub[static_cast<size_t>(j)]))) {
                is_match = false;
                break;
            }
            j = (j + int64_t(1));
        }
        if (is_match) {
            return true;
        }
        i = (i + int64_t(1));
    }
    return false;
}

std::vector<std::string> filter_common_word(const std::vector<std::string>& possibles, std::string common_word) {
    std::vector<std::string> res = {};
    cpp_int i = int64_t(0);
    while ((i < possibles.size())) {
        std::string p = possibles[static_cast<size_t>(i)];
        if (contains(([&]{ std::string __s = p; for(auto &__c : __s){ __c = std::tolower(static_cast<unsigned char>(__c)); } return __s; }()), common_word)) {
            res = ([&]{ auto __tmp = res; __tmp.push_back(p); return __tmp; }());
        }
        i = (i + int64_t(1));
    }
    return res;
}

cpp_int solution(const std::vector<cpp_int>& ciphertext) {
    std::vector<std::string> possibles = filter_valid_chars(ciphertext);
    cpp_int i = int64_t(0);
    while ((i < COMMON_WORDS.size())) {
        std::string word = COMMON_WORDS[static_cast<size_t>(i)];
        possibles = filter_common_word(possibles, word);
        if ((possibles.size() == int64_t(1))) {
            break;
        }
        i = (i + int64_t(1));
    }
    std::string decoded_text = possibles[static_cast<size_t>(int64_t(0))];
    cpp_int sum = int64_t(0);
    cpp_int j = int64_t(0);
    while ((j < decoded_text.size())) {
        sum = (sum + ord(([&]{ std::string __s = decoded_text; long long __start = static_cast<long long>(j); long long __end = static_cast<long long>((j + int64_t(1))); if(__start < 0) __start = 0; if(__end < __start) __end = __start; if(__start > static_cast<long long>(__s.size())) __start = __s.size(); if(__end > static_cast<long long>(__s.size())) __end = __s.size(); return __s.substr(static_cast<size_t>(__start), static_cast<size_t>(__end - __start)); })()));
        j = (j + int64_t(1));
    }
    return sum;
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        while ((i <= int64_t(122))) {
            LOWERCASE_INTS = ([&]{ auto __tmp = LOWERCASE_INTS; __tmp.push_back(i); return __tmp; }());
            i = (i + int64_t(1));
        }
        std::cout << ([&]{ std::ostringstream ss; ss << std::boolalpha << solution(ciphertext); return ss.str(); }());
        std::cout << std::endl;
    }
    return 0;
}
