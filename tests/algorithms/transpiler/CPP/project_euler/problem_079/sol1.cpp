// Generated by Mochi transpiler v0.10.63 on 2025-08-11 16:23:12 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
template<typename V> decltype(auto) _index(V& v, int64_t i) {
    if (i < 0) i += v.size();
    return v[static_cast<size_t>(i)];
}
template<typename V> decltype(auto) _index(const V& v, int64_t i) {
    if (i < 0) i += v.size();
    return v[static_cast<size_t>(i)];
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

int64_t parse_int(std::string s);
std::string join(const std::vector<std::string>& xs);
bool contains(const std::vector<std::string>& xs, std::string c);
int64_t index_of(const std::vector<std::string>& xs, std::string c);
std::vector<std::string> remove_at(const std::vector<std::string>& xs, int64_t idx);
std::vector<std::string> unique_chars(const std::vector<std::string>& logins);
bool satisfies(const std::vector<std::string>& permutation, const std::vector<std::string>& logins);
std::string search(const std::vector<std::string>& chars, const std::vector<std::string>& current, const std::vector<std::string>& logins);
int64_t find_secret_passcode(const std::vector<std::string>& logins);
int main();

std::vector<std::string> logins1 = std::vector<std::string>{std::string("135"), std::string("259"), std::string("235"), std::string("189"), std::string("690"), std::string("168"), std::string("120"), std::string("136"), std::string("289"), std::string("589"), std::string("160"), std::string("165"), std::string("580"), std::string("369"), std::string("250"), std::string("280")};
std::vector<std::string> logins2 = std::vector<std::string>{std::string("426"), std::string("281"), std::string("061"), std::string("819"), std::string("268"), std::string("406"), std::string("420"), std::string("428"), std::string("209"), std::string("689"), std::string("019"), std::string("421"), std::string("469"), std::string("261"), std::string("681"), std::string("201")};

int64_t parse_int(std::string s) {
    int64_t value = int64_t(0);
    int64_t i = int64_t(0);
    while ((i < s.size())) {
        std::string c = ([&](const auto& __s){ auto __i = i; if (__i < 0) __i += __s.size(); return std::string(1, __s[static_cast<size_t>(__i)]); })(s);
        value = ((value * int64_t(10)) + std::stoll(c));
        i = (i + int64_t(1));
    }
    return value;
}

std::string join(const std::vector<std::string>& xs) {
    std::string s = std::string("");
    int64_t i = int64_t(0);
    while ((i < xs.size())) {
        s = (s + _index(xs, i));
        i = (i + int64_t(1));
    }
    return s;
}

bool contains(const std::vector<std::string>& xs, std::string c) {
    int64_t i = int64_t(0);
    while ((i < xs.size())) {
        if ((_index(xs, i) == c)) {
            return true;
        }
        i = (i + int64_t(1));
    }
    return false;
}

int64_t index_of(const std::vector<std::string>& xs, std::string c) {
    int64_t i = int64_t(0);
    while ((i < xs.size())) {
        if ((_index(xs, i) == c)) {
            return i;
        }
        i = (i + int64_t(1));
    }
    return -int64_t(1);
}

std::vector<std::string> remove_at(const std::vector<std::string>& xs, int64_t idx) {
    std::vector<std::string> res = {};
    int64_t i = int64_t(0);
    while ((i < xs.size())) {
        if ((i != idx)) {
            res = ([&]{ auto __tmp = res; __tmp.push_back(_index(xs, i)); return __tmp; }());
        }
        i = (i + int64_t(1));
    }
    return res;
}

std::vector<std::string> unique_chars(const std::vector<std::string>& logins) {
    std::vector<std::string> chars = {};
    int64_t i = int64_t(0);
    while ((i < logins.size())) {
        std::string login = _index(logins, i);
        int64_t j = int64_t(0);
        while ((j < login.size())) {
            std::string c = ([&](const auto& __s){ auto __i = j; if (__i < 0) __i += __s.size(); return std::string(1, __s[static_cast<size_t>(__i)]); })(login);
            if (!contains(chars, c)) {
                chars = ([&]{ auto __tmp = chars; __tmp.push_back(c); return __tmp; }());
            }
            j = (j + int64_t(1));
        }
        i = (i + int64_t(1));
    }
    return chars;
}

bool satisfies(const std::vector<std::string>& permutation, const std::vector<std::string>& logins) {
    int64_t i = int64_t(0);
    while ((i < logins.size())) {
        std::string login = _index(logins, i);
        int64_t i0 = index_of(permutation, ([&](const auto& __s){ auto __i = int64_t(0); if (__i < 0) __i += __s.size(); return std::string(1, __s[static_cast<size_t>(__i)]); })(login));
        int64_t i1 = index_of(permutation, ([&](const auto& __s){ auto __i = int64_t(1); if (__i < 0) __i += __s.size(); return std::string(1, __s[static_cast<size_t>(__i)]); })(login));
        int64_t i2 = index_of(permutation, ([&](const auto& __s){ auto __i = int64_t(2); if (__i < 0) __i += __s.size(); return std::string(1, __s[static_cast<size_t>(__i)]); })(login));
        if (!((i0 < i1) && (i1 < i2))) {
            return false;
        }
        i = (i + int64_t(1));
    }
    return true;
}

std::string search(const std::vector<std::string>& chars, const std::vector<std::string>& current, const std::vector<std::string>& logins) {
    if ((chars.size() == int64_t(0))) {
        if (satisfies(current, logins)) {
            return join(current);
        }
        return std::string("");
    }
    int64_t i = int64_t(0);
    while ((i < chars.size())) {
        std::string c = _index(chars, i);
        std::vector<std::string> rest = remove_at(chars, i);
        auto next = ([&]{ auto __tmp = current; __tmp.push_back(c); return __tmp; }());
        std::string res = search(rest, (std::vector<std::string>)(next), logins);
        if ((res != std::string(""))) {
            return res;
        }
        i = (i + int64_t(1));
    }
    return std::string("");
}

int64_t find_secret_passcode(const std::vector<std::string>& logins) {
    std::vector<std::string> chars = unique_chars(logins);
    std::string s = search(chars, std::vector<std::string>{}, logins);
    if ((s == std::string(""))) {
        return -int64_t(1);
    }
    return parse_int(s);
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        std::cout << ([&]{ std::ostringstream ss; ss << std::boolalpha << find_secret_passcode(logins1); return ss.str(); }());
        std::cout << std::endl;
        std::cout << ([&]{ std::ostringstream ss; ss << std::boolalpha << find_secret_passcode(logins2); return ss.str(); }());
        std::cout << std::endl;
    }
    return 0;
}
