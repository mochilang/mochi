// Generated by Mochi transpiler v0.10.69 on 2025-08-22 14:05:40 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <cstdint>
#include <any>
#include <type_traits>
#include <limits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
template<typename V> auto _index(const V& v, int64_t i) {
    if (i < 0) i += v.size();
    if (i < 0 || i >= (int64_t)v.size()) return typename V::value_type{};
    return v[static_cast<size_t>(i)];
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << " : "; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) {
        std::ostringstream ss;
        ss << std::defaultfloat << std::setprecision(17) << std::any_cast<double>(v);
        auto s = ss.str();
        auto epos = s.find('e');
        if(epos == std::string::npos) epos = s.find('E');
        std::string exp;
        if(epos != std::string::npos){ exp = s.substr(epos); s = s.substr(0, epos); }
        auto pos = s.find('.');
        if(pos != std::string::npos){ while(!s.empty() && s.back() == '0') s.pop_back(); if(!s.empty() && s.back() == '.') s.pop_back(); }
        return s + exp;
    }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    if constexpr(std::is_same_v<T, double>) {
        std::ostringstream ss;
        ss << std::defaultfloat << std::setprecision(17) << v;
        auto s = ss.str();
        auto epos = s.find('e');
        if(epos == std::string::npos) epos = s.find('E');
        std::string exp;
        if(epos != std::string::npos){ exp = s.substr(epos); s = s.substr(0, epos); }
        auto pos = s.find('.');
        if(pos != std::string::npos){
            while(!s.empty() && s.back() == '0') s.pop_back();
            if(!s.empty() && s.back() == '.') s.pop_back();
        }
        return s + exp;
    } else {
        std::ostringstream ss;
        ss << std::boolalpha << v;
        return ss.str();
    }
}

std::string add_strings(std::string a, std::string b);
std::string first_ten_digits(const std::vector<std::string>& nums);
int main();

std::vector<std::string> numbers = std::vector<std::string>{std::string("37107287533902102798797998220837590246510135740250"), std::string("46376937677490009712648124896970078050417018260538"), std::string("74324986199524741059474233309513058123726617309629"), std::string("91942213363574161572522430563301811072406154908250"), std::string("23067588207539346171171980310421047513778063246676"), std::string("89261670696623633820136378418383684178734361726757"), std::string("28112879812849979408065481931592621691275889832738"), std::string("44274228917432520321923589422876796487670272189318"), std::string("47451445736001306439091167216856844588711603153276"), std::string("70386486105843025439939619828917593665686757934951"), std::string("62176457141856560629502157223196586755079324193331"), std::string("64906352462741904929101432445813822663347944758178"), std::string("92575867718337217661963751590579239728245598838407"), std::string("58203565325359399008402633568948830189458628227828"), std::string("80181199384826282014278194139940567587151170094390"), std::string("35398664372827112653829987240784473053190104293586"), std::string("86515506006295864861532075273371959191420517255829"), std::string("71693888707715466499115593487603532921714970056938"), std::string("54370070576826684624621495650076471787294438377604"), std::string("53282654108756828443191190634694037855217779295145"), std::string("36123272525000296071075082563815656710885258350721"), std::string("45876576172410976447339110607218265236877223636045"), std::string("17423706905851860660448207621209813287860733969412"), std::string("81142660418086830619328460811191061556940512689692"), std::string("51934325451728388641918047049293215058642563049483"), std::string("62467221648435076201727918039944693004732956340691"), std::string("15732444386908125794514089057706229429197107928209"), std::string("55037687525678773091862540744969844508330393682126"), std::string("18336384825330154686196124348767681297534375946515"), std::string("80386287592878490201521685554828717201219257766954"), std::string("78182833757993103614740356856449095527097864797581"), std::string("16726320100436897842553539920931837441497806860984"), std::string("48403098129077791799088218795327364475675590848030"), std::string("87086987551392711854517078544161852424320693150332"), std::string("59959406895756536782107074926966537676326235447210"), std::string("69793950679652694742597709739166693763042633987085"), std::string("41052684708299085211399427365734116182760315001271"), std::string("65378607361501080857009149939512557028198746004375"), std::string("35829035317434717326932123578154982629742552737307"), std::string("94953759765105305946966067683156574377167401875275"), std::string("88902802571733229619176668713819931811048770190271"), std::string("25267680276078003013678680992525463401061632866526"), std::string("36270218540497705585629946580636237993140746255962"), std::string("24074486908231174977792365466257246923322810917141"), std::string("91430288197103288597806669760892938638285025333403"), std::string("34413065578016127815921815005561868836468420090470"), std::string("23053081172816430487623791969842487255036638784583"), std::string("11487696932154902810424020138335124462181441773470"), std::string("63783299490636259666498587618221225225512486764533"), std::string("67720186971698544312419572409913959008952310058822"), std::string("95548255300263520781532296796249481641953868218774"), std::string("76085327132285723110424803456124867697064507995236"), std::string("37774242535411291684276865538926205024910326572967"), std::string("23701913275725675285653248258265463092207058596522"), std::string("29798860272258331913126375147341994889534765745501"), std::string("18495701454879288984856827726077713721403798879715"), std::string("38298203783031473527721580348144513491373226651381"), std::string("34829543829199918180278916522431027392251122869539"), std::string("40957953066405232632538044100059654939159879593635"), std::string("29746152185502371307642255121183693803580388584903"), std::string("41698116222072977186158236678424689157993532961922"), std::string("62467957194401269043877107275048102390895523597457"), std::string("23189706772547915061505504953922979530901129967519"), std::string("86188088225875314529584099251203829009407770775672"), std::string("11306739708304724483816533873502340845647058077308"), std::string("82959174767140363198008187129011875491310547126581"), std::string("97623331044818386269515456334926366572897563400500"), std::string("42846280183517070527831839425882145521227251250327"), std::string("55121603546981200581762165212827652751691296897789"), std::string("32238195734329339946437501907836945765883352399886"), std::string("75506164965184775180738168837861091527357929701337"), std::string("62177842752192623401942399639168044983993173312731"), std::string("32924185707147349566916674687634660915035914677504"), std::string("99518671430235219628894890102423325116913619626622"), std::string("73267460800591547471830798392868535206946944540724"), std::string("76841822524674417161514036427982273348055556214818"), std::string("97142617910342598647204516893989422179826088076852"), std::string("87783646182799346313767754307809363333018982642090"), std::string("10848802521674670883215120185883543223812876952786"), std::string("71329612474782464538636993009049310363619763878039"), std::string("62184073572399794223406235393808339651327408011116"), std::string("66627891981488087797941876876144230030984490851411"), std::string("60661826293682836764744779239180335110989069790714"), std::string("85786944089552990653640447425576083659976645795096"), std::string("66024396409905389607120198219976047599490197230297"), std::string("64913982680032973156037120041377903785566085089252"), std::string("16730939319872750275468906903707539413042652315011"), std::string("94809377245048795150954100921645863754710598436791"), std::string("78639167021187492431995700641917969777599028300699"), std::string("15368713711936614952811305876380278410754449733078"), std::string("40789923115535562561142322423255033685442488917353"), std::string("44889911501440648020369068063960672322193204149535"), std::string("41503128880339536053299340368006977710650566631954"), std::string("81234880673210146739058568557934581403627822703280"), std::string("82616570773948327592232845941706525094512325230608"), std::string("22918802058777319719839450180888072429661980811197"), std::string("77158542502016545090413245809786882778948721859617"), std::string("72107838435069186155435662884062257473692284509516"), std::string("20849603980134001723930671666823555245252804609722"), std::string("53503534226472524250874054075591789781264330331690")};

std::string add_strings(std::string a, std::string b) {
    int64_t i = (a.size() - int64_t(1));
    int64_t j = (b.size() - int64_t(1));
    int64_t carry = int64_t(0);
    std::string res = std::string("");
    while ((((i >= int64_t(0)) || (j >= int64_t(0))) || (carry > int64_t(0)))) {
        int64_t da = int64_t(0);
        if ((i >= int64_t(0))) {
            da = (static_cast<int64_t>(_index(a, i) - '0') - int64_t(48));
            i = (i - int64_t(1));
        }
        int64_t db = int64_t(0);
        if ((j >= int64_t(0))) {
            db = (static_cast<int64_t>(_index(b, j) - '0') - int64_t(48));
            j = (j - int64_t(1));
        }
        int64_t s = ((da + db) + carry);
        carry = (s / int64_t(10));
        int64_t digit = (s % int64_t(10));
        res = (([&]{ std::ostringstream ss; ss << std::boolalpha << digit; return ss.str(); }()) + res);
    }
    return res;
}

std::string first_ten_digits(const std::vector<std::string>& nums) {
    std::string total = std::string("0");
    int64_t idx = int64_t(0);
    while ((idx < nums.size())) {
        total = add_strings(total, _index(nums, idx));
        idx = (idx + int64_t(1));
    }
    return ([&]{ std::string __s = total; long long __start = int64_t(0); long long __end = int64_t(10); if(__start < 0) __start = 0; if(__end < __start) __end = __start; if(__start > static_cast<long long>(__s.size())) __start = __s.size(); if(__end > static_cast<long long>(__s.size())) __end = __s.size(); return __s.substr(static_cast<size_t>(__start), static_cast<size_t>(__end - __start)); })();
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        std::string ans = first_ten_digits(numbers);
        std::cout << ans;
        std::cout << std::endl;
    }
    return 0;
}
