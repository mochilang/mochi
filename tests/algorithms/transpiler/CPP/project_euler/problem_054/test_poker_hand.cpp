// Generated by Mochi transpiler v0.10.69 on 2025-08-22 14:40:21 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <type_traits>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <cstdint>
#include <any>
#include <limits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
template<typename V> auto _index(const V& v, int64_t i) {
    if (i < 0) i += v.size();
    if (i < 0 || i >= (int64_t)v.size()) return typename V::value_type{};
    return v[static_cast<size_t>(i)];
}
static std::vector<std::string> _split(const std::string& s, const std::string& sep) {
    std::vector<std::string> out; size_t pos = 0, prev = 0;
    while((pos = s.find(sep, prev)) != std::string::npos){ out.push_back(s.substr(prev, pos - prev)); prev = pos + sep.size(); }
    out.push_back(s.substr(prev));
    return out;
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << " : "; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) {
        std::ostringstream ss;
        ss << std::defaultfloat << std::setprecision(17) << std::any_cast<double>(v);
        auto s = ss.str();
        auto epos = s.find('e');
        if(epos == std::string::npos) epos = s.find('E');
        std::string exp;
        if(epos != std::string::npos){ exp = s.substr(epos); s = s.substr(0, epos); }
        auto pos = s.find('.');
        if(pos != std::string::npos){ while(!s.empty() && s.back() == '0') s.pop_back(); if(!s.empty() && s.back() == '.') s.pop_back(); }
        return s + exp;
    }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    if constexpr(std::is_same_v<T, double>) {
        std::ostringstream ss;
        ss << std::defaultfloat << std::setprecision(17) << v;
        auto s = ss.str();
        auto epos = s.find('e');
        if(epos == std::string::npos) epos = s.find('E');
        std::string exp;
        if(epos != std::string::npos){ exp = s.substr(epos); s = s.substr(0, epos); }
        auto pos = s.find('.');
        if(pos != std::string::npos){
            while(!s.empty() && s.back() == '0') s.pop_back();
            if(!s.empty() && s.back() == '.') s.pop_back();
        }
        return s + exp;
    } else {
        std::ostringstream ss;
        ss << std::boolalpha << v;
        return ss.str();
    }
}
struct Hand;

std::ostream& operator<<(std::ostream&, const Hand&);


struct Hand {
    int64_t rank;
    std::vector<int64_t> values;
    auto operator<=>(const Hand&) const = default;
};

std::ostream& operator<<(std::ostream& os, const Hand& v) {
    os << '{' << "'rank': "<< v.rank
 << ", " << "'values': "<< "["; for(size_t i=0;i<v.values.size();++i){ if(i>0) os << ", "; os << v.values[i]; } os << "]"
 << '}';
    return os;
}

std::vector<std::string> split(std::string s, std::string sep);
int64_t card_value(std::string ch);
Hand parse_hand(std::string hand);
std::string compare(const Hand& a, const Hand& b);
int main();

std::vector<std::string> split(std::string s, std::string sep) {
    std::vector<std::string> parts = {};
    std::string cur = std::string("");
    int64_t i = int64_t(0);
    while ((i < s.size())) {
        if ((((sep.size() > int64_t(0)) && ((i + sep.size()) <= s.size())) && (([&]{ std::string __s = s; long long __start = i; long long __end = (i + sep.size()); if(__start < 0) __start = 0; if(__end < __start) __end = __start; if(__start > static_cast<long long>(__s.size())) __start = __s.size(); if(__end > static_cast<long long>(__s.size())) __end = __s.size(); return __s.substr(static_cast<size_t>(__start), static_cast<size_t>(__end - __start)); })() == sep))) {
            parts = ([&]{ auto __tmp = parts; __tmp.push_back(cur); return __tmp; }());
            cur = std::string("");
            i = (i + sep.size());
        } else {
            cur = (cur + ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(i, (i + int64_t(1)) - i); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+i, __v.begin()+(i + int64_t(1))); })(s));
            i = (i + int64_t(1));
        }
    }
    parts = ([&]{ auto __tmp = parts; __tmp.push_back(cur); return __tmp; }());
    return parts;
}

int64_t card_value(std::string ch) {
    if ((ch == std::string("A"))) {
        return int64_t(14);
    } else     if ((ch == std::string("K"))) {
        return int64_t(13);
    } else     if ((ch == std::string("Q"))) {
        return int64_t(12);
    } else     if ((ch == std::string("J"))) {
        return int64_t(11);
    } else     if ((ch == std::string("T"))) {
        return int64_t(10);
    } else     if ((ch == std::string("9"))) {
        return int64_t(9);
    } else     if ((ch == std::string("8"))) {
        return int64_t(8);
    } else     if ((ch == std::string("7"))) {
        return int64_t(7);
    } else     if ((ch == std::string("6"))) {
        return int64_t(6);
    } else     if ((ch == std::string("5"))) {
        return int64_t(5);
    } else     if ((ch == std::string("4"))) {
        return int64_t(4);
    } else     if ((ch == std::string("3"))) {
        return int64_t(3);
    } else {
        return int64_t(2);
    }











}

Hand parse_hand(std::string hand) {
    std::vector<int64_t> counts = {};
    int64_t i = int64_t(0);
    while ((i <= int64_t(14))) {
        counts = ([&]{ auto __tmp = counts; __tmp.push_back(int64_t(0)); return __tmp; }());
        i = (i + int64_t(1));
    }
    std::vector<std::string> suits = {};
    for (std::string card : _split(hand, std::string(" "))) {
        int64_t v = card_value(([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(int64_t(0), int64_t(1) - int64_t(0)); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+int64_t(0), __v.begin()+int64_t(1)); })(card));
        counts[static_cast<size_t>(v)] = (_index(counts, v) + int64_t(1));
        suits = ([&]{ auto __tmp = suits; __tmp.push_back(([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(int64_t(1), int64_t(2) - int64_t(1)); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+int64_t(1), __v.begin()+int64_t(2)); })(card)); return __tmp; }());
    }
    std::vector<int64_t> vals = {};
    int64_t v = int64_t(14);
    while ((v >= int64_t(2))) {
        int64_t c = _index(counts, v);
        int64_t k = int64_t(0);
        while ((k < c)) {
            vals = ([&]{ auto __tmp = vals; __tmp.push_back(v); return __tmp; }());
            k = (k + int64_t(1));
        }
        v = (v - int64_t(1));
    }
    bool is_straight = false;
    if (((((((vals.size() == int64_t(5)) && (_index(vals, int64_t(0)) == int64_t(14))) && (_index(vals, int64_t(1)) == int64_t(5))) && (_index(vals, int64_t(2)) == int64_t(4))) && (_index(vals, int64_t(3)) == int64_t(3))) && (_index(vals, int64_t(4)) == int64_t(2)))) {
        is_straight = true;
        vals[static_cast<size_t>(int64_t(0))] = int64_t(5);
        vals[static_cast<size_t>(int64_t(1))] = int64_t(4);
        vals[static_cast<size_t>(int64_t(2))] = int64_t(3);
        vals[static_cast<size_t>(int64_t(3))] = int64_t(2);
        vals[static_cast<size_t>(int64_t(4))] = int64_t(14);
    } else {
        is_straight = true;
        int64_t j = int64_t(0);
        while ((j < int64_t(4))) {
            if (((_index(vals, j) - _index(vals, (j + int64_t(1)))) != int64_t(1))) {
                is_straight = false;
            }
            j = (j + int64_t(1));
        }
    }
    bool is_flush = true;
    std::string s0 = _index(suits, int64_t(0));
    int64_t t = int64_t(1);
    while ((t < suits.size())) {
        if ((_index(suits, t) != s0)) {
            is_flush = false;
        }
        t = (t + int64_t(1));
    }
    int64_t four_val = int64_t(0);
    int64_t three_val = int64_t(0);
    std::vector<int64_t> pair_vals = {};
    v = int64_t(14);
    while ((v >= int64_t(2))) {
        if ((_index(counts, v) == int64_t(4))) {
            four_val = v;
        } else         if ((_index(counts, v) == int64_t(3))) {
            three_val = v;
        } else         if ((_index(counts, v) == int64_t(2))) {
            pair_vals = ([&]{ auto __tmp = pair_vals; __tmp.push_back(v); return __tmp; }());
        }


        v = (v - int64_t(1));
    }
    int64_t rank = int64_t(1);
    if ((((is_flush && is_straight) && (_index(vals, int64_t(0)) == int64_t(14))) && (_index(vals, int64_t(4)) == int64_t(10)))) {
        rank = int64_t(10);
    } else     if ((is_flush && is_straight)) {
        rank = int64_t(9);
    } else     if ((four_val != int64_t(0))) {
        rank = int64_t(8);
    } else     if (((three_val != int64_t(0)) && (pair_vals.size() == int64_t(1)))) {
        rank = int64_t(7);
    } else     if (is_flush) {
        rank = int64_t(6);
    } else     if (is_straight) {
        rank = int64_t(5);
    } else     if ((three_val != int64_t(0))) {
        rank = int64_t(4);
    } else     if ((pair_vals.size() == int64_t(2))) {
        rank = int64_t(3);
    } else     if ((pair_vals.size() == int64_t(1))) {
        rank = int64_t(2);
    } else {
        rank = int64_t(1);
    }








    return Hand{.rank = rank, .values = vals};
}

std::string compare(const Hand& a, const Hand& b) {
    if ((a.rank > b.rank)) {
        return std::string("Win");
    }
    if ((a.rank < b.rank)) {
        return std::string("Loss");
    }
    int64_t i = int64_t(0);
    while ((i < a.values.size())) {
        if ((_index(a.values, i) > _index(b.values, i))) {
            return std::string("Win");
        }
        if ((_index(a.values, i) < _index(b.values, i))) {
            return std::string("Loss");
        }
        i = (i + int64_t(1));
    }
    return std::string("Tie");
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        std::vector<std::vector<std::string>> tests = std::vector<std::vector<std::string>>{std::vector<std::string>{std::string("2H 3H 4H 5H 6H"), std::string("KS AS TS QS JS"), std::string("Loss")}, std::vector<std::string>{std::string("2H 3H 4H 5H 6H"), std::string("AS AD AC AH JD"), std::string("Win")}, std::vector<std::string>{std::string("AS AH 2H AD AC"), std::string("JS JD JC JH 3D"), std::string("Win")}, std::vector<std::string>{std::string("2S AH 2H AS AC"), std::string("JS JD JC JH AD"), std::string("Loss")}, std::vector<std::string>{std::string("2S AH 2H AS AC"), std::string("2H 3H 5H 6H 7H"), std::string("Win")}};
        for (std::vector<std::string> t : tests) {
            std::string res = compare(parse_hand(_index(t, int64_t(0))), parse_hand(_index(t, int64_t(1))));
            std::cout << ((res + std::string(" expected ")) + _index(t, int64_t(2)));
            std::cout << std::endl;
        }
    }
    return 0;
}
