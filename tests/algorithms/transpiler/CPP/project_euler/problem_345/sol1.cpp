// Generated by Mochi transpiler v0.10.63 on 2025-08-11 16:23:30 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
template<typename V> decltype(auto) _index(V& v, int64_t i) {
    if (i < 0) i += v.size();
    return v[static_cast<size_t>(i)];
}
template<typename V> decltype(auto) _index(const V& v, int64_t i) {
    if (i < 0) i += v.size();
    return v[static_cast<size_t>(i)];
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

std::vector<int64_t> parse_row(std::string row_str);
std::vector<std::vector<int64_t>> parse_matrix(const std::vector<std::string>& matrix_str);
int64_t bitcount(int64_t x);
std::vector<int64_t> build_powers(int64_t n);
int64_t solution(const std::vector<std::string>& matrix_str);
int main();

std::vector<std::string> MATRIX_2 = std::vector<std::string>{std::string("7 53 183 439 863 497 383 563 79 973 287 63 343 169 583"), std::string("627 343 773 959 943 767 473 103 699 303 957 703 583 639 913"), std::string("447 283 463 29 23 487 463 993 119 883 327 493 423 159 743"), std::string("217 623 3 399 853 407 103 983 89 463 290 516 212 462 350"), std::string("960 376 682 962 300 780 486 502 912 800 250 346 172 812 350"), std::string("870 456 192 162 593 473 915 45 989 873 823 965 425 329 803"), std::string("973 965 905 919 133 673 665 235 509 613 673 815 165 992 326"), std::string("322 148 972 962 286 255 941 541 265 323 925 281 601 95 973"), std::string("445 721 11 525 473 65 511 164 138 672 18 428 154 448 848"), std::string("414 456 310 312 798 104 566 520 302 248 694 976 430 392 198"), std::string("184 829 373 181 631 101 969 613 840 740 778 458 284 760 390"), std::string("821 461 843 513 17 901 711 993 293 157 274 94 192 156 574"), std::string("34 124 4 878 450 476 712 914 838 669 875 299 823 329 699"), std::string("815 559 813 459 522 788 168 586 966 232 308 833 251 631 107"), std::string("813 883 451 509 615 77 281 613 459 205 380 274 302 35 805")};
int64_t result = 0;

std::vector<int64_t> parse_row(std::string row_str) {
    std::vector<int64_t> nums = {};
    int64_t current = int64_t(0);
    bool has_digit = false;
    int64_t i = int64_t(0);
    while ((i < row_str.size())) {
        std::string ch = row_str.substr(i, (i + int64_t(1)) - i);
        if ((ch == std::string(" "))) {
            if (has_digit) {
                nums = ([&]{ auto __tmp = nums; __tmp.push_back(current); return __tmp; }());
                current = int64_t(0);
                has_digit = false;
            }
        } else {
            current = ((current * int64_t(10)) + std::stoll(ch));
            has_digit = true;
        }
        i = (i + int64_t(1));
    }
    if (has_digit) {
        nums = ([&]{ auto __tmp = nums; __tmp.push_back(current); return __tmp; }());
    }
    return nums;
}

std::vector<std::vector<int64_t>> parse_matrix(const std::vector<std::string>& matrix_str) {
    std::vector<std::vector<int64_t>> matrix = {};
    for (std::string row_str : matrix_str) {
        std::vector<int64_t> row = parse_row(row_str);
        matrix = ([&]{ auto __tmp = matrix; __tmp.push_back(row); return __tmp; }());
    }
    return matrix;
}

int64_t bitcount(int64_t x) {
    int64_t count = int64_t(0);
    int64_t y = x;
    while ((y > int64_t(0))) {
        if (((y % int64_t(2)) == int64_t(1))) {
            count = (count + int64_t(1));
        }
        y = (y / int64_t(2));
    }
    return count;
}

std::vector<int64_t> build_powers(int64_t n) {
    std::vector<int64_t> powers = {};
    int64_t i = int64_t(0);
    int64_t current = int64_t(1);
    while ((i <= n)) {
        powers = ([&]{ auto __tmp = powers; __tmp.push_back(current); return __tmp; }());
        current = (current * int64_t(2));
        i = (i + int64_t(1));
    }
    return powers;
}

int64_t solution(const std::vector<std::string>& matrix_str) {
    std::vector<std::vector<int64_t>> arr = parse_matrix(matrix_str);
    int64_t n = arr.size();
    std::vector<int64_t> powers = build_powers(n);
    int64_t size = _index(powers, n);
    std::vector<int64_t> dp = {};
    int64_t i = int64_t(0);
    while ((i < size)) {
        dp = ([&]{ auto __tmp = dp; __tmp.push_back(int64_t(0)); return __tmp; }());
        i = (i + int64_t(1));
    }
    int64_t mask = int64_t(0);
    while ((mask < size)) {
        int64_t row = bitcount(mask);
        if ((row < n)) {
            int64_t col = int64_t(0);
            while ((col < n)) {
                if ((((mask / _index(powers, col)) % int64_t(2)) == int64_t(0))) {
                    int64_t new_mask = (mask + _index(powers, col));
                    int64_t value = (_index(dp, mask) + _index(_index(arr, row), col));
                    if ((value > _index(dp, new_mask))) {
                        dp[new_mask] = value;
                    }
                }
                col = (col + int64_t(1));
            }
        }
        mask = (mask + int64_t(1));
    }
    return _index(dp, (size - int64_t(1)));
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        result = solution(MATRIX_2);
        std::cout << (std::string("solution() = ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << result; return ss.str(); }()));
        std::cout << std::endl;
    }
    return 0;
}
