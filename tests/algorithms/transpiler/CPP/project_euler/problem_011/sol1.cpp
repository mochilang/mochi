// Generated by Mochi transpiler v0.10.62 on 2025-08-09 10:46:12 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
template<typename V> decltype(auto) _index(V& v, int64_t i) {
    if (i < 0) i += v.size();
    return v[static_cast<size_t>(i)];
}
template<typename V> decltype(auto) _index(const V& v, int64_t i) {
    if (i < 0) i += v.size();
    return v[static_cast<size_t>(i)];
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

int64_t largest_product(const std::vector<std::vector<int64_t>>& grid);
int main();

int64_t largest_product(const std::vector<std::vector<int64_t>>& grid) {
    int64_t n_rows = grid.size();
    int64_t n_cols = _index(grid, int64_t(0)).size();
    int64_t largest = int64_t(0);
    int64_t i = int64_t(0);
    while ((i < n_rows)) {
        int64_t j = int64_t(0);
        while ((j < n_cols)) {
            if ((j <= (n_cols - int64_t(4)))) {
                int64_t horz = (((_index(_index(grid, i), j) * _index(_index(grid, i), (j + int64_t(1)))) * _index(_index(grid, i), (j + int64_t(2)))) * _index(_index(grid, i), (j + int64_t(3))));
                if ((horz > largest)) {
                    largest = horz;
                }
            }
            if ((i <= (n_rows - int64_t(4)))) {
                int64_t vert = (((_index(_index(grid, i), j) * _index(_index(grid, (i + int64_t(1))), j)) * _index(_index(grid, (i + int64_t(2))), j)) * _index(_index(grid, (i + int64_t(3))), j));
                if ((vert > largest)) {
                    largest = vert;
                }
                if ((j <= (n_cols - int64_t(4)))) {
                    int64_t lr = (((_index(_index(grid, i), j) * _index(_index(grid, (i + int64_t(1))), (j + int64_t(1)))) * _index(_index(grid, (i + int64_t(2))), (j + int64_t(2)))) * _index(_index(grid, (i + int64_t(3))), (j + int64_t(3))));
                    if ((lr > largest)) {
                        largest = lr;
                    }
                }
                if ((j >= int64_t(3))) {
                    int64_t rl = (((_index(_index(grid, i), j) * _index(_index(grid, (i + int64_t(1))), (j - int64_t(1)))) * _index(_index(grid, (i + int64_t(2))), (j - int64_t(2)))) * _index(_index(grid, (i + int64_t(3))), (j - int64_t(3))));
                    if ((rl > largest)) {
                        largest = rl;
                    }
                }
            }
            j = (j + int64_t(1));
        }
        i = (i + int64_t(1));
    }
    return largest;
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        std::vector<std::vector<int64_t>> grid = std::vector<std::vector<int64_t>>{std::vector<int64_t>{int64_t(8), int64_t(2), int64_t(22), int64_t(97), int64_t(38), int64_t(15), int64_t(0), int64_t(40), int64_t(0), int64_t(75), int64_t(4), int64_t(5), int64_t(7), int64_t(78), int64_t(52), int64_t(12), int64_t(50), int64_t(77), int64_t(91), int64_t(8)}, std::vector<int64_t>{int64_t(49), int64_t(49), int64_t(99), int64_t(40), int64_t(17), int64_t(81), int64_t(18), int64_t(57), int64_t(60), int64_t(87), int64_t(17), int64_t(40), int64_t(98), int64_t(43), int64_t(69), int64_t(48), int64_t(4), int64_t(56), int64_t(62), int64_t(0)}, std::vector<int64_t>{int64_t(81), int64_t(49), int64_t(31), int64_t(73), int64_t(55), int64_t(79), int64_t(14), int64_t(29), int64_t(93), int64_t(71), int64_t(40), int64_t(67), int64_t(53), int64_t(88), int64_t(30), int64_t(3), int64_t(49), int64_t(13), int64_t(36), int64_t(65)}, std::vector<int64_t>{int64_t(52), int64_t(70), int64_t(95), int64_t(23), int64_t(4), int64_t(60), int64_t(11), int64_t(42), int64_t(69), int64_t(24), int64_t(68), int64_t(56), int64_t(1), int64_t(32), int64_t(56), int64_t(71), int64_t(37), int64_t(2), int64_t(36), int64_t(91)}, std::vector<int64_t>{int64_t(22), int64_t(31), int64_t(16), int64_t(71), int64_t(51), int64_t(67), int64_t(63), int64_t(89), int64_t(41), int64_t(92), int64_t(36), int64_t(54), int64_t(22), int64_t(40), int64_t(40), int64_t(28), int64_t(66), int64_t(33), int64_t(13), int64_t(80)}, std::vector<int64_t>{int64_t(24), int64_t(47), int64_t(32), int64_t(60), int64_t(99), int64_t(3), int64_t(45), int64_t(2), int64_t(44), int64_t(75), int64_t(33), int64_t(53), int64_t(78), int64_t(36), int64_t(84), int64_t(20), int64_t(35), int64_t(17), int64_t(12), int64_t(50)}, std::vector<int64_t>{int64_t(32), int64_t(98), int64_t(81), int64_t(28), int64_t(64), int64_t(23), int64_t(67), int64_t(10), int64_t(26), int64_t(38), int64_t(40), int64_t(67), int64_t(59), int64_t(54), int64_t(70), int64_t(66), int64_t(18), int64_t(38), int64_t(64), int64_t(70)}, std::vector<int64_t>{int64_t(67), int64_t(26), int64_t(20), int64_t(68), int64_t(2), int64_t(62), int64_t(12), int64_t(20), int64_t(95), int64_t(63), int64_t(94), int64_t(39), int64_t(63), int64_t(8), int64_t(40), int64_t(91), int64_t(66), int64_t(49), int64_t(94), int64_t(21)}, std::vector<int64_t>{int64_t(24), int64_t(55), int64_t(58), int64_t(5), int64_t(66), int64_t(73), int64_t(99), int64_t(26), int64_t(97), int64_t(17), int64_t(78), int64_t(78), int64_t(96), int64_t(83), int64_t(14), int64_t(88), int64_t(34), int64_t(89), int64_t(63), int64_t(72)}, std::vector<int64_t>{int64_t(21), int64_t(36), int64_t(23), int64_t(9), int64_t(75), int64_t(0), int64_t(76), int64_t(44), int64_t(20), int64_t(45), int64_t(35), int64_t(14), int64_t(0), int64_t(61), int64_t(33), int64_t(97), int64_t(34), int64_t(31), int64_t(33), int64_t(95)}, std::vector<int64_t>{int64_t(78), int64_t(17), int64_t(53), int64_t(28), int64_t(22), int64_t(75), int64_t(31), int64_t(67), int64_t(15), int64_t(94), int64_t(3), int64_t(80), int64_t(4), int64_t(62), int64_t(16), int64_t(14), int64_t(9), int64_t(53), int64_t(56), int64_t(92)}, std::vector<int64_t>{int64_t(16), int64_t(39), int64_t(5), int64_t(42), int64_t(96), int64_t(35), int64_t(31), int64_t(47), int64_t(55), int64_t(58), int64_t(88), int64_t(24), int64_t(0), int64_t(17), int64_t(54), int64_t(24), int64_t(36), int64_t(29), int64_t(85), int64_t(57)}, std::vector<int64_t>{int64_t(86), int64_t(56), int64_t(0), int64_t(48), int64_t(35), int64_t(71), int64_t(89), int64_t(7), int64_t(5), int64_t(44), int64_t(44), int64_t(37), int64_t(44), int64_t(60), int64_t(21), int64_t(58), int64_t(51), int64_t(54), int64_t(17), int64_t(58)}, std::vector<int64_t>{int64_t(19), int64_t(80), int64_t(81), int64_t(68), int64_t(5), int64_t(94), int64_t(47), int64_t(69), int64_t(28), int64_t(73), int64_t(92), int64_t(13), int64_t(86), int64_t(52), int64_t(17), int64_t(77), int64_t(4), int64_t(89), int64_t(55), int64_t(40)}, std::vector<int64_t>{int64_t(4), int64_t(52), int64_t(8), int64_t(83), int64_t(97), int64_t(35), int64_t(99), int64_t(16), int64_t(7), int64_t(97), int64_t(57), int64_t(32), int64_t(16), int64_t(26), int64_t(26), int64_t(79), int64_t(33), int64_t(27), int64_t(98), int64_t(66)}, std::vector<int64_t>{int64_t(88), int64_t(36), int64_t(68), int64_t(87), int64_t(57), int64_t(62), int64_t(20), int64_t(72), int64_t(3), int64_t(46), int64_t(33), int64_t(67), int64_t(46), int64_t(55), int64_t(12), int64_t(32), int64_t(63), int64_t(93), int64_t(53), int64_t(69)}, std::vector<int64_t>{int64_t(4), int64_t(42), int64_t(16), int64_t(73), int64_t(38), int64_t(25), int64_t(39), int64_t(11), int64_t(24), int64_t(94), int64_t(72), int64_t(18), int64_t(8), int64_t(46), int64_t(29), int64_t(32), int64_t(40), int64_t(62), int64_t(76), int64_t(36)}, std::vector<int64_t>{int64_t(20), int64_t(69), int64_t(36), int64_t(41), int64_t(72), int64_t(30), int64_t(23), int64_t(88), int64_t(34), int64_t(62), int64_t(99), int64_t(69), int64_t(82), int64_t(67), int64_t(59), int64_t(85), int64_t(74), int64_t(4), int64_t(36), int64_t(16)}, std::vector<int64_t>{int64_t(20), int64_t(73), int64_t(35), int64_t(29), int64_t(78), int64_t(31), int64_t(90), int64_t(1), int64_t(74), int64_t(31), int64_t(49), int64_t(71), int64_t(48), int64_t(86), int64_t(81), int64_t(16), int64_t(23), int64_t(57), int64_t(5), int64_t(54)}, std::vector<int64_t>{int64_t(1), int64_t(70), int64_t(54), int64_t(71), int64_t(83), int64_t(51), int64_t(54), int64_t(69), int64_t(16), int64_t(92), int64_t(33), int64_t(48), int64_t(61), int64_t(43), int64_t(52), int64_t(1), int64_t(89), int64_t(19), int64_t(67), int64_t(48)}};
        int64_t ans = largest_product(grid);
        std::cout << ([&]{ std::ostringstream ss; ss << std::boolalpha << ans; return ss.str(); }());
        std::cout << std::endl;
    }
    return 0;
}
