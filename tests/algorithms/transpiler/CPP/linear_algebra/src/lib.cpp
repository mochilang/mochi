// Generated by Mochi transpiler v0.10.66 on 2025-08-16 10:10:52 GMT+7
#include <iostream>
#include <string>
#include <sstream>
#include <vector>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <limits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
template<typename V> auto _index(const V& v, int64_t i) {
    if (i < 0) i += v.size();
    if (i < 0 || i >= (int64_t)v.size()) return typename V::value_type{};
    return v[static_cast<size_t>(i)];
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << " : "; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    if constexpr(std::is_same_v<T, double>) {
        std::ostringstream ss;
        ss << std::defaultfloat << std::setprecision(15) << v;
        auto s = ss.str();
        auto epos = s.find('e');
        if(epos == std::string::npos) epos = s.find('E');
        std::string exp;
        if(epos != std::string::npos){ exp = s.substr(epos); s = s.substr(0, epos); }
        auto pos = s.find('.');
        if(pos != std::string::npos){
            while(!s.empty() && s.back() == '0') s.pop_back();
            if(!s.empty() && s.back() == '.') s.pop_back();
        }
        return s + exp;
    } else {
        std::ostringstream ss;
        ss << std::boolalpha << v;
        return ss.str();
    }
}
struct Vector;
struct Matrix;

std::ostream& operator<<(std::ostream&, const Vector&);
std::ostream& operator<<(std::ostream&, const Matrix&);


struct Vector {
    std::vector<double> components;
    auto operator<=>(const Vector&) const = default;
};

struct Matrix {
    std::vector<std::vector<double>> data;
    int64_t width;
    int64_t height;
    auto operator<=>(const Matrix&) const = default;
};

std::ostream& operator<<(std::ostream& os, const Vector& v) {
    os << '{' << "'components': "<< "["; for(size_t i=0;i<v.components.size();++i){ if(i>0) os << ", "; os << v.components[i]; } os << "]"
 << '}';
    return os;
}

std::ostream& operator<<(std::ostream& os, const Matrix& v) {
    os << '{' << "'data': "<< "["; for(size_t i=0;i<v.data.size();++i){ if(i>0) os << ", "; os << v.data[i]; } os << "]"
 << ", " << "'width': "<< v.width
 << ", " << "'height': "<< v.height
 << '}';
    return os;
}

int64_t _rand();
int64_t random_int(int64_t a, int64_t b);
double sqrtApprox(double x);
double arcsin_taylor(double x);
double acos_taylor(double x);
int64_t vector_len(const Vector& v);
std::string vector_to_string(const Vector& v);
Vector vector_add(const Vector& a, const Vector& b);
Vector vector_sub(const Vector& a, const Vector& b);
bool vector_eq(const Vector& a, const Vector& b);
Vector vector_mul_scalar(const Vector& v, double s);
double vector_dot(const Vector& a, const Vector& b);
Vector vector_copy(const Vector& v);
double vector_component(const Vector& v, int64_t idx);
Vector vector_change_component(const Vector& v, int64_t pos, double value);
double vector_euclidean_length(const Vector& v);
double vector_angle(const Vector& a, const Vector& b, bool deg);
Vector zero_vector(int64_t d);
Vector unit_basis_vector(int64_t d, int64_t pos);
Vector axpy(double s, const Vector& x, const Vector& y);
Vector random_vector(int64_t n, int64_t a, int64_t b);
std::string matrix_to_string(const Matrix& m);
Matrix matrix_add(const Matrix& a, const Matrix& b);
Matrix matrix_sub(const Matrix& a, const Matrix& b);
Vector matrix_mul_vector(const Matrix& m, const Vector& v);
Matrix matrix_mul_scalar(const Matrix& m, double s);
double matrix_component(const Matrix& m, int64_t x, int64_t y);
Matrix matrix_change_component(const Matrix& m, int64_t x, int64_t y, double value);
double matrix_minor(const Matrix& m, int64_t x, int64_t y);
double matrix_cofactor(const Matrix& m, int64_t x, int64_t y);
double matrix_determinant(const Matrix& m);
Matrix square_zero_matrix(int64_t n);
Matrix random_matrix(int64_t w, int64_t h, int64_t a, int64_t b);
int main();

double PI = 3.141592653589793;
int64_t seed = int64_t(123456789);

int64_t _rand() {
    seed = (((seed * int64_t(1103515245)) + int64_t(12345)) % int64_t(2147483648));
    return seed;
}

int64_t random_int(int64_t a, int64_t b) {
    int64_t r = (_rand() % ((b - a) + int64_t(1)));
    return (a + r);
}

double sqrtApprox(double x) {
    if ((x <= 0.0)) {
        return 0.0;
    }
    double guess = x;
    int64_t i = int64_t(0);
    while ((i < int64_t(20))) {
        guess = ((double)((guess + ((double)(x) / (guess)))) / (2.0));
        i = (i + int64_t(1));
    }
    return guess;
}

double arcsin_taylor(double x) {
    double term = x;
    double sum = x;
    int64_t n = int64_t(1);
    while ((n < int64_t(10))) {
        double num = ((((((2.0 * (double)(n)) - 1.0) * ((2.0 * (double)(n)) - 1.0)) * x) * x) * term);
        double den = ((2.0 * (double)(n)) * ((2.0 * (double)(n)) + 1.0));
        term = ((double)(num) / (den));
        sum = (sum + term);
        n = (n + int64_t(1));
    }
    return sum;
}

double acos_taylor(double x) {
    return (((double)(PI) / (2.0)) - arcsin_taylor(x));
}

int64_t vector_len(const Vector& v) {
    return v.components.size();
}

std::string vector_to_string(const Vector& v) {
    std::string s = std::string("(");
    int64_t i = int64_t(0);
    while ((i < v.components.size())) {
        s = (s + _to_string(_index(v.components, i)));
        if ((i < (v.components.size() - int64_t(1)))) {
            s = (s + std::string(","));
        }
        i = (i + int64_t(1));
    }
    s = (s + std::string(")"));
    return s;
}

Vector vector_add(const Vector& a, const Vector& b) {
    int64_t size = vector_len(a);
    if ((size != vector_len(b))) {
        return Vector{.components = std::vector<double>{}};
    }
    std::vector<double> res = {};
    int64_t i = int64_t(0);
    while ((i < size)) {
        res = ([&]{ auto __tmp = res; __tmp.push_back((_index(a.components, i) + _index(b.components, i))); return __tmp; }());
        i = (i + int64_t(1));
    }
    return Vector{.components = res};
}

Vector vector_sub(const Vector& a, const Vector& b) {
    int64_t size = vector_len(a);
    if ((size != vector_len(b))) {
        return Vector{.components = std::vector<double>{}};
    }
    std::vector<double> res = {};
    int64_t i = int64_t(0);
    while ((i < size)) {
        res = ([&]{ auto __tmp = res; __tmp.push_back((_index(a.components, i) - _index(b.components, i))); return __tmp; }());
        i = (i + int64_t(1));
    }
    return Vector{.components = res};
}

bool vector_eq(const Vector& a, const Vector& b) {
    if ((vector_len(a) != vector_len(b))) {
        return false;
    }
    int64_t i = int64_t(0);
    while ((i < vector_len(a))) {
        if ((_index(a.components, i) != _index(b.components, i))) {
            return false;
        }
        i = (i + int64_t(1));
    }
    return true;
}

Vector vector_mul_scalar(const Vector& v, double s) {
    std::vector<double> res = {};
    int64_t i = int64_t(0);
    while ((i < vector_len(v))) {
        res = ([&]{ auto __tmp = res; __tmp.push_back((_index(v.components, i) * s)); return __tmp; }());
        i = (i + int64_t(1));
    }
    return Vector{.components = res};
}

double vector_dot(const Vector& a, const Vector& b) {
    int64_t size = vector_len(a);
    if ((size != vector_len(b))) {
        return 0.0;
    }
    double sum = 0.0;
    int64_t i = int64_t(0);
    while ((i < size)) {
        sum = (sum + (_index(a.components, i) * _index(b.components, i)));
        i = (i + int64_t(1));
    }
    return sum;
}

Vector vector_copy(const Vector& v) {
    std::vector<double> res = {};
    int64_t i = int64_t(0);
    while ((i < vector_len(v))) {
        res = ([&]{ auto __tmp = res; __tmp.push_back(_index(v.components, i)); return __tmp; }());
        i = (i + int64_t(1));
    }
    return Vector{.components = res};
}

double vector_component(const Vector& v, int64_t idx) {
    return _index(v.components, idx);
}

Vector vector_change_component(const Vector& v, int64_t pos, double value) {
    std::vector<double> comps = v.components;
    comps[static_cast<size_t>(pos)] = value;
    return Vector{.components = comps};
}

double vector_euclidean_length(const Vector& v) {
    double sum = 0.0;
    int64_t i = int64_t(0);
    while ((i < v.components.size())) {
        sum = (sum + (_index(v.components, i) * _index(v.components, i)));
        i = (i + int64_t(1));
    }
    double result = sqrtApprox(sum);
    return result;
}

double vector_angle(const Vector& a, const Vector& b, bool deg) {
    double num = vector_dot(a, b);
    double den = (vector_euclidean_length(a) * vector_euclidean_length(b));
    double ang = acos_taylor(((double)(num) / (den)));
    if (deg) {
        ang = ((double)((ang * 180.0)) / (PI));
    }
    return ang;
}

Vector zero_vector(int64_t d) {
    std::vector<double> res = {};
    int64_t i = int64_t(0);
    while ((i < d)) {
        res = ([&]{ auto __tmp = res; __tmp.push_back(0.0); return __tmp; }());
        i = (i + int64_t(1));
    }
    return Vector{.components = res};
}

Vector unit_basis_vector(int64_t d, int64_t pos) {
    std::vector<double> res = {};
    int64_t i = int64_t(0);
    while ((i < d)) {
        if ((i == pos)) {
            res = ([&]{ auto __tmp = res; __tmp.push_back(1.0); return __tmp; }());
        } else {
            res = ([&]{ auto __tmp = res; __tmp.push_back(0.0); return __tmp; }());
        }
        i = (i + int64_t(1));
    }
    return Vector{.components = res};
}

Vector axpy(double s, const Vector& x, const Vector& y) {
    return vector_add(vector_mul_scalar(x, s), y);
}

Vector random_vector(int64_t n, int64_t a, int64_t b) {
    std::vector<double> res = {};
    int64_t i = int64_t(0);
    while ((i < n)) {
        res = ([&]{ auto __tmp = res; __tmp.push_back((double)(random_int(a, b))); return __tmp; }());
        i = (i + int64_t(1));
    }
    return Vector{.components = res};
}

std::string matrix_to_string(const Matrix& m) {
    std::string ans = std::string("");
    int64_t i = int64_t(0);
    while ((i < m.height)) {
        ans = (ans + std::string("|"));
        int64_t j = int64_t(0);
        while ((j < m.width)) {
            ans = (ans + _to_string(_index(_index(m.data, i), j)));
            if ((j < (m.width - int64_t(1)))) {
                ans = (ans + std::string(","));
            }
            j = (j + int64_t(1));
        }
        ans = (ans + std::string("|\n"));
        i = (i + int64_t(1));
    }
    return ans;
}

Matrix matrix_add(const Matrix& a, const Matrix& b) {
    if (((a.width != b.width) || (a.height != b.height))) {
        return Matrix{.data = std::vector<std::vector<double>>{}, .width = int64_t(0), .height = int64_t(0)};
    }
    std::vector<std::vector<double>> mat = {};
    int64_t i = int64_t(0);
    while ((i < a.height)) {
        std::vector<double> row = {};
        int64_t j = int64_t(0);
        while ((j < a.width)) {
            row = ([&]{ auto __tmp = row; __tmp.push_back((_index(_index(a.data, i), j) + _index(_index(b.data, i), j))); return __tmp; }());
            j = (j + int64_t(1));
        }
        mat = ([&]{ auto __tmp = mat; __tmp.push_back(row); return __tmp; }());
        i = (i + int64_t(1));
    }
    return Matrix{.data = mat, .width = a.width, .height = a.height};
}

Matrix matrix_sub(const Matrix& a, const Matrix& b) {
    if (((a.width != b.width) || (a.height != b.height))) {
        return Matrix{.data = std::vector<std::vector<double>>{}, .width = int64_t(0), .height = int64_t(0)};
    }
    std::vector<std::vector<double>> mat = {};
    int64_t i = int64_t(0);
    while ((i < a.height)) {
        std::vector<double> row = {};
        int64_t j = int64_t(0);
        while ((j < a.width)) {
            row = ([&]{ auto __tmp = row; __tmp.push_back((_index(_index(a.data, i), j) - _index(_index(b.data, i), j))); return __tmp; }());
            j = (j + int64_t(1));
        }
        mat = ([&]{ auto __tmp = mat; __tmp.push_back(row); return __tmp; }());
        i = (i + int64_t(1));
    }
    return Matrix{.data = mat, .width = a.width, .height = a.height};
}

Vector matrix_mul_vector(const Matrix& m, const Vector& v) {
    if ((v.components.size() != m.width)) {
        return Vector{.components = std::vector<double>{}};
    }
    Vector res = zero_vector(m.height);
    int64_t i = int64_t(0);
    while ((i < m.height)) {
        double sum = 0.0;
        int64_t j = int64_t(0);
        while ((j < m.width)) {
            sum = (sum + (_index(_index(m.data, i), j) * _index(v.components, j)));
            j = (j + int64_t(1));
        }
        res = vector_change_component(res, i, sum);
        i = (i + int64_t(1));
    }
    return res;
}

Matrix matrix_mul_scalar(const Matrix& m, double s) {
    std::vector<std::vector<double>> mat = {};
    int64_t i = int64_t(0);
    while ((i < m.height)) {
        std::vector<double> row = {};
        int64_t j = int64_t(0);
        while ((j < m.width)) {
            row = ([&]{ auto __tmp = row; __tmp.push_back((_index(_index(m.data, i), j) * s)); return __tmp; }());
            j = (j + int64_t(1));
        }
        mat = ([&]{ auto __tmp = mat; __tmp.push_back(row); return __tmp; }());
        i = (i + int64_t(1));
    }
    return Matrix{.data = mat, .width = m.width, .height = m.height};
}

double matrix_component(const Matrix& m, int64_t x, int64_t y) {
    return _index(_index(m.data, x), y);
}

Matrix matrix_change_component(const Matrix& m, int64_t x, int64_t y, double value) {
    std::vector<std::vector<double>> data = m.data;
    data[static_cast<size_t>(x)][static_cast<size_t>(y)] = value;
    return Matrix{.data = data, .width = m.width, .height = m.height};
}

double matrix_minor(const Matrix& m, int64_t x, int64_t y) {
    if ((m.height != m.width)) {
        return 0.0;
    }
    std::vector<std::vector<double>> minor = {};
    int64_t i = int64_t(0);
    while ((i < m.height)) {
        if ((i != x)) {
            std::vector<double> row = {};
            int64_t j = int64_t(0);
            while ((j < m.width)) {
                if ((j != y)) {
                    row = ([&]{ auto __tmp = row; __tmp.push_back(_index(_index(m.data, i), j)); return __tmp; }());
                }
                j = (j + int64_t(1));
            }
            minor = ([&]{ auto __tmp = minor; __tmp.push_back(row); return __tmp; }());
        }
        i = (i + int64_t(1));
    }
    Matrix sub = Matrix{.data = minor, .width = (m.width - int64_t(1)), .height = (m.height - int64_t(1))};
    return matrix_determinant(sub);
}

double matrix_cofactor(const Matrix& m, int64_t x, int64_t y) {
    double sign = ((((x + y) % int64_t(2)) == int64_t(0)) ? 1.0 : -1.0);
    return (sign * matrix_minor(m, x, y));
}

double matrix_determinant(const Matrix& m) {
    if ((m.height != m.width)) {
        return 0.0;
    }
    if ((m.height == int64_t(0))) {
        return 0.0;
    }
    if ((m.height == int64_t(1))) {
        return _index(_index(m.data, int64_t(0)), int64_t(0));
    }
    if ((m.height == int64_t(2))) {
        return ((_index(_index(m.data, int64_t(0)), int64_t(0)) * _index(_index(m.data, int64_t(1)), int64_t(1))) - (_index(_index(m.data, int64_t(0)), int64_t(1)) * _index(_index(m.data, int64_t(1)), int64_t(0))));
    }
    double sum = 0.0;
    int64_t y = int64_t(0);
    while ((y < m.width)) {
        sum = (sum + (_index(_index(m.data, int64_t(0)), y) * matrix_cofactor(m, int64_t(0), y)));
        y = (y + int64_t(1));
    }
    return sum;
}

Matrix square_zero_matrix(int64_t n) {
    std::vector<std::vector<double>> mat = {};
    int64_t i = int64_t(0);
    while ((i < n)) {
        std::vector<double> row = {};
        int64_t j = int64_t(0);
        while ((j < n)) {
            row = ([&]{ auto __tmp = row; __tmp.push_back(0.0); return __tmp; }());
            j = (j + int64_t(1));
        }
        mat = ([&]{ auto __tmp = mat; __tmp.push_back(row); return __tmp; }());
        i = (i + int64_t(1));
    }
    return Matrix{.data = mat, .width = n, .height = n};
}

Matrix random_matrix(int64_t w, int64_t h, int64_t a, int64_t b) {
    std::vector<std::vector<double>> mat = {};
    int64_t i = int64_t(0);
    while ((i < h)) {
        std::vector<double> row = {};
        int64_t j = int64_t(0);
        while ((j < w)) {
            row = ([&]{ auto __tmp = row; __tmp.push_back((double)(random_int(a, b))); return __tmp; }());
            j = (j + int64_t(1));
        }
        mat = ([&]{ auto __tmp = mat; __tmp.push_back(row); return __tmp; }());
        i = (i + int64_t(1));
    }
    return Matrix{.data = mat, .width = w, .height = h};
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        Vector v1 = Vector{.components = std::vector<double>{1.0, 2.0, 3.0}};
        Vector v2 = Vector{.components = std::vector<double>{4.0, 5.0, 6.0}};
        std::cout << vector_to_string(vector_add(v1, v2));
        std::cout << std::endl;
        std::cout << _to_string(vector_dot(v1, v2));
        std::cout << std::endl;
        std::cout << _to_string(vector_euclidean_length(v1));
        std::cout << std::endl;
        Matrix m = Matrix{.data = std::vector<std::vector<double>>{std::vector<double>{1.0, 2.0}, std::vector<double>{3.0, 4.0}}, .width = int64_t(2), .height = int64_t(2)};
        std::cout << _to_string(matrix_determinant(m));
        std::cout << std::endl;
    }
    return 0;
}
