// Generated by Mochi transpiler v0.10.61 on 2025-08-08 16:05:07 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
template<typename V> decltype(auto) _index(const V& v, int64_t i) {
    if (i < 0) i += v.size();
    return v[static_cast<size_t>(i)];
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

std::string int_to_string(int64_t n);
std::string float_to_string(double x, int64_t dec);
int64_t vector_component(const std::vector<int64_t>& v, int64_t i);
std::string vector_str_int(const std::vector<int64_t>& v);
std::string vector_str_float(const std::vector<double>& v, int64_t dec);
std::vector<int64_t> vector_add(const std::vector<int64_t>& a, const std::vector<int64_t>& b);
std::vector<int64_t> vector_sub(const std::vector<int64_t>& a, const std::vector<int64_t>& b);
std::vector<double> vector_scalar_mul(const std::vector<int64_t>& v, double s);
int64_t vector_dot(const std::vector<int64_t>& a, const std::vector<int64_t>& b);
double sqrt_newton(double x);
double euclidean_length(const std::vector<int64_t>& v);
std::vector<int64_t> zero_vector(int64_t n);
std::vector<int64_t> unit_basis_vector(int64_t n, int64_t idx);
std::vector<int64_t> axpy(int64_t a, const std::vector<int64_t>& x, const std::vector<int64_t>& y);
std::vector<int64_t> copy_vector(const std::vector<int64_t>& x);
void change_component(std::vector<int64_t> v, int64_t idx, int64_t val);
std::string matrix_str(const std::vector<std::vector<int64_t>>& m);
std::vector<std::vector<int64_t>> submatrix(const std::vector<std::vector<int64_t>>& m, int64_t row, int64_t col);
int64_t determinant(const std::vector<std::vector<int64_t>>& m);
int64_t matrix_minor(const std::vector<std::vector<int64_t>>& m, int64_t row, int64_t col);
int64_t matrix_cofactor(const std::vector<std::vector<int64_t>>& m, int64_t row, int64_t col);
std::vector<int64_t> matrix_mul_vector(const std::vector<std::vector<int64_t>>& m, const std::vector<int64_t>& v);
std::vector<std::vector<int64_t>> matrix_mul_scalar(const std::vector<std::vector<int64_t>>& m, int64_t s);
void matrix_change_component(std::vector<std::vector<int64_t>> m, int64_t i, int64_t j, int64_t val);
int64_t matrix_component(const std::vector<std::vector<int64_t>>& m, int64_t i, int64_t j);
std::vector<std::vector<int64_t>> matrix_add(const std::vector<std::vector<int64_t>>& a, const std::vector<std::vector<int64_t>>& b);
std::vector<std::vector<int64_t>> matrix_sub(const std::vector<std::vector<int64_t>>& a, const std::vector<std::vector<int64_t>>& b);
std::vector<std::vector<int64_t>> square_zero_matrix(int64_t n);
void assert_int(std::string name, int64_t actual, int64_t expected);
void assert_str(std::string name, std::string actual, std::string expected);
void assert_float(std::string name, double actual, double expected, double eps);
int main();

std::vector<int64_t> vx = std::vector<int64_t>{int64_t(1), int64_t(2), int64_t(3)};
std::vector<int64_t> vs = std::vector<int64_t>{int64_t(0), int64_t(0), int64_t(0), int64_t(0), int64_t(0), int64_t(1)};
std::vector<int64_t> vsize = std::vector<int64_t>{int64_t(1), int64_t(2), int64_t(3), int64_t(4)};
std::vector<int64_t> va = std::vector<int64_t>{int64_t(1), int64_t(2), int64_t(3)};
std::vector<int64_t> vb = std::vector<int64_t>{int64_t(1), int64_t(1), int64_t(1)};
std::vector<int64_t> vsum = std::vector<int64_t>{};
std::vector<int64_t> vsub = std::vector<int64_t>{};
std::vector<double> vmul = std::vector<double>{};
std::vector<int64_t> zvec = std::vector<int64_t>{};
std::string zstr = "";
int64_t zcount = 0;
int64_t zi = 0;
std::vector<int64_t> vcopy = std::vector<int64_t>{};
std::vector<int64_t> vchange = std::vector<int64_t>{int64_t(1), int64_t(0), int64_t(0)};
std::vector<std::vector<int64_t>> ma = std::vector<std::vector<int64_t>>{std::vector<int64_t>{int64_t(1), int64_t(2), int64_t(3)}, std::vector<int64_t>{int64_t(2), int64_t(4), int64_t(5)}, std::vector<int64_t>{int64_t(6), int64_t(7), int64_t(8)}};
std::vector<std::vector<int64_t>> mb = std::vector<std::vector<int64_t>>{std::vector<int64_t>{int64_t(1), int64_t(2), int64_t(3)}, std::vector<int64_t>{int64_t(4), int64_t(5), int64_t(6)}, std::vector<int64_t>{int64_t(7), int64_t(8), int64_t(9)}};
std::vector<int64_t> mv = std::vector<int64_t>{};
std::vector<std::vector<int64_t>> msc = std::vector<std::vector<int64_t>>{};
std::vector<std::vector<int64_t>> mc = std::vector<std::vector<int64_t>>{std::vector<int64_t>{int64_t(1), int64_t(2), int64_t(3)}, std::vector<int64_t>{int64_t(2), int64_t(4), int64_t(5)}, std::vector<int64_t>{int64_t(6), int64_t(7), int64_t(8)}};
std::vector<std::vector<int64_t>> madd = std::vector<std::vector<int64_t>>{};
std::vector<std::vector<int64_t>> msub = std::vector<std::vector<int64_t>>{};
std::vector<std::vector<int64_t>> mzero = std::vector<std::vector<int64_t>>{};

std::string int_to_string(int64_t n) {
    if ((n == int64_t(0))) {
        return std::string("0");
    }
    int64_t num = n;
    bool neg = false;
    if ((num < int64_t(0))) {
        neg = true;
        num = -num;
    }
    std::string res = std::string("");
    while ((num > int64_t(0))) {
        int64_t digit = (num % int64_t(10));
        std::string ch = std::string("0123456789").substr(digit, (digit + int64_t(1)) - digit);
        res = (ch + res);
        num = (num / int64_t(10));
    }
    if (neg) {
        res = (std::string("-") + res);
    }
    return res;
}

std::string float_to_string(double x, int64_t dec) {
    bool neg = false;
    double num = x;
    if ((num < 0.0)) {
        neg = true;
        num = -num;
    }
    int64_t int_part = (int64_t)(num);
    std::string res = int_to_string(int_part);
    if ((dec > int64_t(0))) {
        res = (res + std::string("."));
        double frac = (num - (double)(int_part));
        int64_t i = int64_t(0);
        while ((i < dec)) {
            frac = (frac * 10.0);
            int64_t digit = (int64_t)(frac);
            res = (res + std::string("0123456789").substr(digit, (digit + int64_t(1)) - digit));
            frac = (frac - (double)(digit));
            i = (i + int64_t(1));
        }
    }
    if (neg) {
        res = (std::string("-") + res);
    }
    return res;
}

int64_t vector_component(const std::vector<int64_t>& v, int64_t i) {
    return _index(v, i);
}

std::string vector_str_int(const std::vector<int64_t>& v) {
    std::string s = std::string("(");
    int64_t i = int64_t(0);
    while ((i < v.size())) {
        s = (s + int_to_string(_index(v, i)));
        if (((i + int64_t(1)) < v.size())) {
            s = (s + std::string(","));
        }
        i = (i + int64_t(1));
    }
    s = (s + std::string(")"));
    return s;
}

std::string vector_str_float(const std::vector<double>& v, int64_t dec) {
    std::string s = std::string("(");
    int64_t i = int64_t(0);
    while ((i < v.size())) {
        s = (s + float_to_string(_index(v, i), dec));
        if (((i + int64_t(1)) < v.size())) {
            s = (s + std::string(","));
        }
        i = (i + int64_t(1));
    }
    s = (s + std::string(")"));
    return s;
}

std::vector<int64_t> vector_add(const std::vector<int64_t>& a, const std::vector<int64_t>& b) {
    std::vector<int64_t> res = {};
    int64_t i = int64_t(0);
    while ((i < a.size())) {
        res = ([&]{ auto& __tmp = res; __tmp.push_back((_index(a, i) + _index(b, i))); return __tmp; }());
        i = (i + int64_t(1));
    }
    return res;
}

std::vector<int64_t> vector_sub(const std::vector<int64_t>& a, const std::vector<int64_t>& b) {
    std::vector<int64_t> res = {};
    int64_t i = int64_t(0);
    while ((i < a.size())) {
        res = ([&]{ auto& __tmp = res; __tmp.push_back((_index(a, i) - _index(b, i))); return __tmp; }());
        i = (i + int64_t(1));
    }
    return res;
}

std::vector<double> vector_scalar_mul(const std::vector<int64_t>& v, double s) {
    std::vector<double> res = {};
    int64_t i = int64_t(0);
    while ((i < v.size())) {
        res = ([&]{ auto& __tmp = res; __tmp.push_back(((double)(_index(v, i)) * s)); return __tmp; }());
        i = (i + int64_t(1));
    }
    return res;
}

int64_t vector_dot(const std::vector<int64_t>& a, const std::vector<int64_t>& b) {
    int64_t sum = int64_t(0);
    int64_t i = int64_t(0);
    while ((i < a.size())) {
        sum = (sum + (_index(a, i) * _index(b, i)));
        i = (i + int64_t(1));
    }
    return sum;
}

double sqrt_newton(double x) {
    if ((x == 0.0)) {
        return 0.0;
    }
    double low = 0.0;
    double high = x;
    if ((x < 1.0)) {
        high = 1.0;
    }
    double mid = 0.0;
    int64_t i = int64_t(0);
    while ((i < int64_t(40))) {
        mid = ((double)((low + high)) / (2.0));
        if (((mid * mid) > x)) {
            high = mid;
        } else {
            low = mid;
        }
        i = (i + int64_t(1));
    }
    return mid;
}

double euclidean_length(const std::vector<int64_t>& v) {
    double sum = 0.0;
    int64_t i = int64_t(0);
    while ((i < v.size())) {
        double val = (double)(_index(v, i));
        sum = (sum + (val * val));
        i = (i + int64_t(1));
    }
    return sqrt_newton(sum);
}

std::vector<int64_t> zero_vector(int64_t n) {
    std::vector<int64_t> v = {};
    int64_t i = int64_t(0);
    while ((i < n)) {
        v = ([&]{ auto& __tmp = v; __tmp.push_back(int64_t(0)); return __tmp; }());
        i = (i + int64_t(1));
    }
    return v;
}

std::vector<int64_t> unit_basis_vector(int64_t n, int64_t idx) {
    std::vector<int64_t> v = zero_vector(n);
    v[idx] = int64_t(1);
    return v;
}

std::vector<int64_t> axpy(int64_t a, const std::vector<int64_t>& x, const std::vector<int64_t>& y) {
    std::vector<int64_t> res = {};
    int64_t i = int64_t(0);
    while ((i < x.size())) {
        res = ([&]{ auto& __tmp = res; __tmp.push_back(((a * _index(x, i)) + _index(y, i))); return __tmp; }());
        i = (i + int64_t(1));
    }
    return res;
}

std::vector<int64_t> copy_vector(const std::vector<int64_t>& x) {
    std::vector<int64_t> res = {};
    int64_t i = int64_t(0);
    while ((i < x.size())) {
        res = ([&]{ auto& __tmp = res; __tmp.push_back(_index(x, i)); return __tmp; }());
        i = (i + int64_t(1));
    }
    return res;
}

void change_component(std::vector<int64_t> v, int64_t idx, int64_t val) {
    v[idx] = val;
}

std::string matrix_str(const std::vector<std::vector<int64_t>>& m) {
    std::string s = std::string("");
    int64_t i = int64_t(0);
    while ((i < m.size())) {
        s = (s + std::string("|"));
        int64_t j = int64_t(0);
        while ((j < _index(m, int64_t(0)).size())) {
            s = (s + int_to_string(_index(_index(m, i), j)));
            if (((j + int64_t(1)) < _index(m, int64_t(0)).size())) {
                s = (s + std::string(","));
            }
            j = (j + int64_t(1));
        }
        s = (s + std::string("|\n"));
        i = (i + int64_t(1));
    }
    return s;
}

std::vector<std::vector<int64_t>> submatrix(const std::vector<std::vector<int64_t>>& m, int64_t row, int64_t col) {
    std::vector<std::vector<int64_t>> res = {};
    int64_t i = int64_t(0);
    while ((i < m.size())) {
        if ((i != row)) {
            std::vector<int64_t> r = {};
            int64_t j = int64_t(0);
            while ((j < _index(m, int64_t(0)).size())) {
                if ((j != col)) {
                    r = ([&]{ auto& __tmp = r; __tmp.push_back(_index(_index(m, i), j)); return __tmp; }());
                }
                j = (j + int64_t(1));
            }
            res = ([&]{ auto& __tmp = res; __tmp.push_back(r); return __tmp; }());
        }
        i = (i + int64_t(1));
    }
    return res;
}

int64_t determinant(const std::vector<std::vector<int64_t>>& m) {
    int n = m.size();
    if ((n == int64_t(1))) {
        return _index(_index(m, int64_t(0)), int64_t(0));
    }
    if ((n == int64_t(2))) {
        return ((_index(_index(m, int64_t(0)), int64_t(0)) * _index(_index(m, int64_t(1)), int64_t(1))) - (_index(_index(m, int64_t(0)), int64_t(1)) * _index(_index(m, int64_t(1)), int64_t(0))));
    }
    int64_t det = int64_t(0);
    int64_t c = int64_t(0);
    while ((c < n)) {
        std::vector<std::vector<int64_t>> sub = submatrix(m, int64_t(0), c);
        int64_t sign = int64_t(1);
        if (((c % int64_t(2)) == int64_t(1))) {
            sign = -int64_t(1);
        }
        det = (det + ((sign * _index(_index(m, int64_t(0)), c)) * determinant(sub)));
        c = (c + int64_t(1));
    }
    return det;
}

int64_t matrix_minor(const std::vector<std::vector<int64_t>>& m, int64_t row, int64_t col) {
    return determinant(submatrix(m, row, col));
}

int64_t matrix_cofactor(const std::vector<std::vector<int64_t>>& m, int64_t row, int64_t col) {
    int64_t sign = int64_t(1);
    if ((((row + col) % int64_t(2)) == int64_t(1))) {
        sign = -int64_t(1);
    }
    return (sign * matrix_minor(m, row, col));
}

std::vector<int64_t> matrix_mul_vector(const std::vector<std::vector<int64_t>>& m, const std::vector<int64_t>& v) {
    std::vector<int64_t> res = {};
    int64_t i = int64_t(0);
    while ((i < m.size())) {
        int64_t sum = int64_t(0);
        int64_t j = int64_t(0);
        while ((j < _index(m, int64_t(0)).size())) {
            sum = (sum + (_index(_index(m, i), j) * _index(v, j)));
            j = (j + int64_t(1));
        }
        res = ([&]{ auto& __tmp = res; __tmp.push_back(sum); return __tmp; }());
        i = (i + int64_t(1));
    }
    return res;
}

std::vector<std::vector<int64_t>> matrix_mul_scalar(const std::vector<std::vector<int64_t>>& m, int64_t s) {
    std::vector<std::vector<int64_t>> res = {};
    int64_t i = int64_t(0);
    while ((i < m.size())) {
        std::vector<int64_t> row = {};
        int64_t j = int64_t(0);
        while ((j < _index(m, int64_t(0)).size())) {
            row = ([&]{ auto& __tmp = row; __tmp.push_back((_index(_index(m, i), j) * s)); return __tmp; }());
            j = (j + int64_t(1));
        }
        res = ([&]{ auto& __tmp = res; __tmp.push_back(row); return __tmp; }());
        i = (i + int64_t(1));
    }
    return res;
}

void matrix_change_component(std::vector<std::vector<int64_t>> m, int64_t i, int64_t j, int64_t val) {
    m[i][j] = val;
}

int64_t matrix_component(const std::vector<std::vector<int64_t>>& m, int64_t i, int64_t j) {
    return _index(_index(m, i), j);
}

std::vector<std::vector<int64_t>> matrix_add(const std::vector<std::vector<int64_t>>& a, const std::vector<std::vector<int64_t>>& b) {
    std::vector<std::vector<int64_t>> res = {};
    int64_t i = int64_t(0);
    while ((i < a.size())) {
        std::vector<int64_t> row = {};
        int64_t j = int64_t(0);
        while ((j < _index(a, int64_t(0)).size())) {
            row = ([&]{ auto& __tmp = row; __tmp.push_back((_index(_index(a, i), j) + _index(_index(b, i), j))); return __tmp; }());
            j = (j + int64_t(1));
        }
        res = ([&]{ auto& __tmp = res; __tmp.push_back(row); return __tmp; }());
        i = (i + int64_t(1));
    }
    return res;
}

std::vector<std::vector<int64_t>> matrix_sub(const std::vector<std::vector<int64_t>>& a, const std::vector<std::vector<int64_t>>& b) {
    std::vector<std::vector<int64_t>> res = {};
    int64_t i = int64_t(0);
    while ((i < a.size())) {
        std::vector<int64_t> row = {};
        int64_t j = int64_t(0);
        while ((j < _index(a, int64_t(0)).size())) {
            row = ([&]{ auto& __tmp = row; __tmp.push_back((_index(_index(a, i), j) - _index(_index(b, i), j))); return __tmp; }());
            j = (j + int64_t(1));
        }
        res = ([&]{ auto& __tmp = res; __tmp.push_back(row); return __tmp; }());
        i = (i + int64_t(1));
    }
    return res;
}

std::vector<std::vector<int64_t>> square_zero_matrix(int64_t n) {
    std::vector<std::vector<int64_t>> m = {};
    int64_t i = int64_t(0);
    while ((i < n)) {
        m = ([&]{ auto& __tmp = m; __tmp.push_back(zero_vector(n)); return __tmp; }());
        i = (i + int64_t(1));
    }
    return m;
}

void assert_int(std::string name, int64_t actual, int64_t expected) {
    if ((actual == expected)) {
        std::cout << (name + std::string(" ok"));
        std::cout << std::endl;
    } else {
        std::cout << ((((name + std::string(" fail ")) + int_to_string(actual)) + std::string(" != ")) + int_to_string(expected));
        std::cout << std::endl;
    }
}

void assert_str(std::string name, std::string actual, std::string expected) {
    if ((actual == expected)) {
        std::cout << (name + std::string(" ok"));
        std::cout << std::endl;
    } else {
        std::cout << (name + std::string(" fail"));
        std::cout << std::endl;
        std::cout << actual;
        std::cout << std::endl;
        std::cout << expected;
        std::cout << std::endl;
    }
}

void assert_float(std::string name, double actual, double expected, double eps) {
    double diff = (actual - expected);
    if ((diff < 0.0)) {
        diff = -diff;
    }
    if ((diff <= eps)) {
        std::cout << (name + std::string(" ok"));
        std::cout << std::endl;
    } else {
        std::cout << (name + std::string(" fail"));
        std::cout << std::endl;
    }
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        assert_int(std::string("component0"), vector_component(vx, int64_t(0)), int64_t(1));
        assert_int(std::string("component2"), vector_component(vx, int64_t(2)), int64_t(3));
        assert_str(std::string("str_vector"), vector_str_int(vs), std::string("(0,0,0,0,0,1)"));
        assert_int(std::string("size"), (int64_t)(vsize.size()), int64_t(4));
        vsum = vector_add(va, vb);
        assert_int(std::string("add0"), vector_component(vsum, int64_t(0)), int64_t(2));
        assert_int(std::string("add1"), vector_component(vsum, int64_t(1)), int64_t(3));
        assert_int(std::string("add2"), vector_component(vsum, int64_t(2)), int64_t(4));
        vsub = vector_sub(va, vb);
        assert_int(std::string("sub0"), vector_component(vsub, int64_t(0)), int64_t(0));
        assert_int(std::string("sub1"), vector_component(vsub, int64_t(1)), int64_t(1));
        assert_int(std::string("sub2"), vector_component(vsub, int64_t(2)), int64_t(2));
        vmul = vector_scalar_mul(va, 3.0);
        assert_str(std::string("scalar_mul"), vector_str_float(vmul, int64_t(1)), std::string("(3.0,6.0,9.0)"));
        assert_int(std::string("dot_product"), vector_dot(std::vector<int64_t>{int64_t(2), -int64_t(1), int64_t(4)}, std::vector<int64_t>{int64_t(1), -int64_t(2), -int64_t(1)}), int64_t(0));
        zvec = zero_vector(int64_t(10));
        zstr = vector_str_int(zvec);
        zcount = int64_t(0);
        zi = int64_t(0);
        while ((zi < zstr.size())) {
            if ((zstr.substr(zi, (zi + int64_t(1)) - zi) == std::string("0"))) {
                zcount = (zcount + int64_t(1));
            }
            zi = (zi + int64_t(1));
        }
        assert_int(std::string("zero_vector"), zcount, int64_t(10));
        assert_str(std::string("unit_basis"), vector_str_int(unit_basis_vector(int64_t(3), int64_t(1))), std::string("(0,1,0)"));
        assert_str(std::string("axpy"), vector_str_int(axpy(int64_t(2), std::vector<int64_t>{int64_t(1), int64_t(2), int64_t(3)}, std::vector<int64_t>{int64_t(1), int64_t(0), int64_t(1)})), std::string("(3,4,7)"));
        vcopy = copy_vector(std::vector<int64_t>{int64_t(1), int64_t(0), int64_t(0), int64_t(0), int64_t(0), int64_t(0)});
        assert_str(std::string("copy"), vector_str_int(vcopy), std::string("(1,0,0,0,0,0)"));
        change_component(vchange, int64_t(0), int64_t(0));
        change_component(vchange, int64_t(1), int64_t(1));
        assert_str(std::string("change_component"), vector_str_int(vchange), std::string("(0,1,0)"));
        assert_str(std::string("matrix_str"), matrix_str(ma), std::string("|1,2,3|\n|2,4,5|\n|6,7,8|\n"));
        assert_int(std::string("determinant"), determinant(ma), -int64_t(5));
        mv = matrix_mul_vector(mb, std::vector<int64_t>{int64_t(1), int64_t(2), int64_t(3)});
        assert_str(std::string("matrix_vec_mul"), vector_str_int(mv), std::string("(14,32,50)"));
        msc = matrix_mul_scalar(mb, int64_t(2));
        assert_str(std::string("matrix_scalar_mul"), matrix_str(msc), std::string("|2,4,6|\n|8,10,12|\n|14,16,18|\n"));
        matrix_change_component(mc, int64_t(0), int64_t(2), int64_t(5));
        assert_str(std::string("change_component_matrix"), matrix_str(mc), std::string("|1,2,5|\n|2,4,5|\n|6,7,8|\n"));
        assert_int(std::string("matrix_component"), matrix_component(mc, int64_t(2), int64_t(1)), int64_t(7));
        madd = matrix_add(std::vector<std::vector<int64_t>>{std::vector<int64_t>{int64_t(1), int64_t(2), int64_t(3)}, std::vector<int64_t>{int64_t(2), int64_t(4), int64_t(5)}, std::vector<int64_t>{int64_t(6), int64_t(7), int64_t(8)}}, std::vector<std::vector<int64_t>>{std::vector<int64_t>{int64_t(1), int64_t(2), int64_t(7)}, std::vector<int64_t>{int64_t(2), int64_t(4), int64_t(5)}, std::vector<int64_t>{int64_t(6), int64_t(7), int64_t(10)}});
        assert_str(std::string("matrix_add"), matrix_str(madd), std::string("|2,4,10|\n|4,8,10|\n|12,14,18|\n"));
        msub = matrix_sub(std::vector<std::vector<int64_t>>{std::vector<int64_t>{int64_t(1), int64_t(2), int64_t(3)}, std::vector<int64_t>{int64_t(2), int64_t(4), int64_t(5)}, std::vector<int64_t>{int64_t(6), int64_t(7), int64_t(8)}}, std::vector<std::vector<int64_t>>{std::vector<int64_t>{int64_t(1), int64_t(2), int64_t(7)}, std::vector<int64_t>{int64_t(2), int64_t(4), int64_t(5)}, std::vector<int64_t>{int64_t(6), int64_t(7), int64_t(10)}});
        assert_str(std::string("matrix_sub"), matrix_str(msub), std::string("|0,0,-4|\n|0,0,0|\n|0,0,-2|\n"));
        mzero = square_zero_matrix(int64_t(5));
        assert_str(std::string("square_zero_matrix"), matrix_str(mzero), std::string("|0,0,0,0,0|\n|0,0,0,0,0|\n|0,0,0,0,0|\n|0,0,0,0,0|\n|0,0,0,0,0|\n"));
    }
    return 0;
}
