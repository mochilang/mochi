// Generated by Mochi transpiler v0.10.66 on 2025-08-16 10:10:56 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <limits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <stdexcept>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
template<typename V> auto _index(const V& v, int64_t i) {
    if (i < 0) i += v.size();
    if (i < 0 || i >= (int64_t)v.size()) return typename V::value_type{};
    return v[static_cast<size_t>(i)];
}
static std::vector<std::string> _split(const std::string& s, const std::string& sep) {
    std::vector<std::string> out; size_t pos = 0, prev = 0;
    while((pos = s.find(sep, prev)) != std::string::npos){ out.push_back(s.substr(prev, pos - prev)); prev = pos + sep.size(); }
    out.push_back(s.substr(prev));
    return out;
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << " : "; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    if constexpr(std::is_same_v<T, double>) {
        std::ostringstream ss;
        ss << std::defaultfloat << std::setprecision(15) << v;
        auto s = ss.str();
        auto epos = s.find('e');
        if(epos == std::string::npos) epos = s.find('E');
        std::string exp;
        if(epos != std::string::npos){ exp = s.substr(epos); s = s.substr(0, epos); }
        auto pos = s.find('.');
        if(pos != std::string::npos){
            while(!s.empty() && s.back() == '0') s.pop_back();
            if(!s.empty() && s.back() == '.') s.pop_back();
        }
        return s + exp;
    } else {
        std::ostringstream ss;
        ss << std::boolalpha << v;
        return ss.str();
    }
}

bool contains_int(const std::vector<int64_t>& xs, int64_t x);
std::vector<std::string> split(std::string s, std::string sep);
double pow_int_float(int64_t base, int64_t exp);
std::string points_to_polynomial(const std::vector<std::vector<int64_t>>& coordinates);
int main();

bool contains_int(const std::vector<int64_t>& xs, int64_t x) {
    int64_t i = int64_t(0);
    while ((i < xs.size())) {
        if ((_index(xs, i) == x)) {
            return true;
        }
        i = (i + int64_t(1));
    }
    return false;
}

std::vector<std::string> split(std::string s, std::string sep) {
    std::vector<std::string> res = {};
    std::string current = std::string("");
    int64_t i = int64_t(0);
    while ((i < s.size())) {
        std::string ch = ([&]{ std::string __s = s; long long __start = i; long long __end = (i + int64_t(1)); if(__start < 0) __start = 0; if(__end < __start) __end = __start; if(__start > static_cast<long long>(__s.size())) __start = __s.size(); if(__end > static_cast<long long>(__s.size())) __end = __s.size(); return __s.substr(static_cast<size_t>(__start), static_cast<size_t>(__end - __start)); })();
        if ((ch == sep)) {
            res = ([&]{ auto __tmp = res; __tmp.push_back(current); return __tmp; }());
            current = std::string("");
        } else {
            current = (current + ch);
        }
        i = (i + int64_t(1));
    }
    res = ([&]{ auto __tmp = res; __tmp.push_back(current); return __tmp; }());
    return res;
}

double pow_int_float(int64_t base, int64_t exp) {
    double result = 1.0;
    int64_t i = int64_t(0);
    while ((i < exp)) {
        result = (result * (double)(base));
        i = (i + int64_t(1));
    }
    return result;
}

std::string points_to_polynomial(const std::vector<std::vector<int64_t>>& coordinates) {
    if ((coordinates.size() == int64_t(0))) {
        throw std::runtime_error(std::string("The program cannot work out a fitting polynomial."));
    }
    int64_t i = int64_t(0);
    while ((i < coordinates.size())) {
        if ((_index(coordinates, i).size() != int64_t(2))) {
            throw std::runtime_error(std::string("The program cannot work out a fitting polynomial."));
        }
        i = (i + int64_t(1));
    }
    int64_t j = int64_t(0);
    while ((j < coordinates.size())) {
        int64_t k = (j + int64_t(1));
        while ((k < coordinates.size())) {
            if (((_index(_index(coordinates, j), int64_t(0)) == _index(_index(coordinates, k), int64_t(0))) && (_index(_index(coordinates, j), int64_t(1)) == _index(_index(coordinates, k), int64_t(1))))) {
                throw std::runtime_error(std::string("The program cannot work out a fitting polynomial."));
            }
            k = (k + int64_t(1));
        }
        j = (j + int64_t(1));
    }
    std::vector<int64_t> set_x = {};
    i = int64_t(0);
    while ((i < coordinates.size())) {
        int64_t x_val = _index(_index(coordinates, i), int64_t(0));
        if (!contains_int(set_x, x_val)) {
            set_x = ([&]{ auto __tmp = set_x; __tmp.push_back(x_val); return __tmp; }());
        }
        i = (i + int64_t(1));
    }
    if ((set_x.size() == int64_t(1))) {
        return (std::string("x=") + ([&]{ std::ostringstream ss; ss << std::boolalpha << _index(_index(coordinates, int64_t(0)), int64_t(0)); return ss.str(); }()));
    }
    if ((set_x.size() != coordinates.size())) {
        throw std::runtime_error(std::string("The program cannot work out a fitting polynomial."));
    }
    int64_t n = coordinates.size();
    std::vector<std::vector<double>> matrix = {};
    int64_t row = int64_t(0);
    while ((row < n)) {
        std::vector<double> line = {};
        int64_t col = int64_t(0);
        while ((col < n)) {
            double power = pow_int_float(_index(_index(coordinates, row), int64_t(0)), (n - (col + int64_t(1))));
            line = ([&]{ auto __tmp = line; __tmp.push_back(power); return __tmp; }());
            col = (col + int64_t(1));
        }
        matrix = ([&]{ auto __tmp = matrix; __tmp.push_back(line); return __tmp; }());
        row = (row + int64_t(1));
    }
    std::vector<double> vector = {};
    row = int64_t(0);
    while ((row < n)) {
        vector = ([&]{ auto __tmp = vector; __tmp.push_back((double)(_index(_index(coordinates, row), int64_t(1)))); return __tmp; }());
        row = (row + int64_t(1));
    }
    int64_t count = int64_t(0);
    while ((count < n)) {
        int64_t number = int64_t(0);
        while ((number < n)) {
            if ((count != number)) {
                double fraction = ((double)(_index(_index(matrix, number), count)) / (_index(_index(matrix, count), count)));
                int64_t cc = int64_t(0);
                while ((cc < n)) {
                    matrix[static_cast<size_t>(number)][static_cast<size_t>(cc)] = (_index(_index(matrix, number), cc) - (_index(_index(matrix, count), cc) * fraction));
                    cc = (cc + int64_t(1));
                }
                vector[static_cast<size_t>(number)] = (_index(vector, number) - (_index(vector, count) * fraction));
            }
            number = (number + int64_t(1));
        }
        count = (count + int64_t(1));
    }
    std::vector<std::string> solution = {};
    count = int64_t(0);
    while ((count < n)) {
        double value = ((double)(_index(vector, count)) / (_index(_index(matrix, count), count)));
        solution = ([&]{ auto __tmp = solution; __tmp.push_back(_to_string(value)); return __tmp; }());
        count = (count + int64_t(1));
    }
    std::string solved = std::string("f(x)=");
    count = int64_t(0);
    while ((count < n)) {
        std::vector<std::string> parts = _split(_index(solution, count), std::string("e"));
        std::string coeff = _index(solution, count);
        if ((parts.size() > int64_t(1))) {
            coeff = ((_index(parts, int64_t(0)) + std::string("*10^")) + _index(parts, int64_t(1)));
        }
        solved = ((((solved + std::string("x^")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << (n - (count + int64_t(1))); return ss.str(); }())) + std::string("*")) + coeff);
        if (((count + int64_t(1)) != n)) {
            solved = (solved + std::string("+"));
        }
        count = (count + int64_t(1));
    }
    return solved;
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        std::cout << points_to_polynomial(std::vector<std::vector<int64_t>>{std::vector<int64_t>{int64_t(1), int64_t(0)}, std::vector<int64_t>{int64_t(2), int64_t(0)}, std::vector<int64_t>{int64_t(3), int64_t(0)}});
        std::cout << std::endl;
        std::cout << points_to_polynomial(std::vector<std::vector<int64_t>>{std::vector<int64_t>{int64_t(1), int64_t(1)}, std::vector<int64_t>{int64_t(2), int64_t(1)}, std::vector<int64_t>{int64_t(3), int64_t(1)}});
        std::cout << std::endl;
        std::cout << points_to_polynomial(std::vector<std::vector<int64_t>>{std::vector<int64_t>{int64_t(1), int64_t(1)}, std::vector<int64_t>{int64_t(2), int64_t(4)}, std::vector<int64_t>{int64_t(3), int64_t(9)}});
        std::cout << std::endl;
        std::cout << points_to_polynomial(std::vector<std::vector<int64_t>>{std::vector<int64_t>{int64_t(1), int64_t(3)}, std::vector<int64_t>{int64_t(2), int64_t(6)}, std::vector<int64_t>{int64_t(3), int64_t(11)}});
        std::cout << std::endl;
        std::cout << points_to_polynomial(std::vector<std::vector<int64_t>>{std::vector<int64_t>{int64_t(1), -int64_t(3)}, std::vector<int64_t>{int64_t(2), -int64_t(6)}, std::vector<int64_t>{int64_t(3), -int64_t(11)}});
        std::cout << std::endl;
        std::cout << points_to_polynomial(std::vector<std::vector<int64_t>>{std::vector<int64_t>{int64_t(1), int64_t(1)}, std::vector<int64_t>{int64_t(1), int64_t(2)}, std::vector<int64_t>{int64_t(1), int64_t(3)}});
        std::cout << std::endl;
        std::cout << points_to_polynomial(std::vector<std::vector<int64_t>>{std::vector<int64_t>{int64_t(1), int64_t(5)}, std::vector<int64_t>{int64_t(2), int64_t(2)}, std::vector<int64_t>{int64_t(3), int64_t(9)}});
        std::cout << std::endl;
    }
    return 0;
}
