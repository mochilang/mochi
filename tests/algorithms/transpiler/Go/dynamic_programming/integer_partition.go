//go:build ignore

// Generated by Mochi v0.10.61 on 2025-08-08 17:57:54 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	s[idx] = v
}

func partition(m int) int {
	var memo [][]int = [][]int{}
	_ = memo
	var i int = 0
	_ = i
	for i < (m + 1) {
		var row []int = []int{}
		_ = row
		var j int = 0
		_ = j
		for j < m {
			row = append(row, 0)
			j = (j + 1)
		}
		memo = append(memo, row)
		i = (i + 1)
	}
	i = 0
	for i < (m + 1) {
		_setIndex(_index(memo, i), 0, 1)
		i = (i + 1)
	}
	var n int = 0
	_ = n
	for n < (m + 1) {
		var k int = 1
		_ = k
		for k < m {
			_setIndex(_index(memo, n), k, (int(_index(_index(memo, n), k)) + int(_index(_index(memo, n), (k-1)))))
			if (n - k) > 0 {
				_setIndex(_index(memo, n), k, (int(_index(_index(memo, n), k)) + int(_index(_index(memo, ((n-k)-1)), k))))
			}
			k = (k + 1)
		}
		n = (n + 1)
	}
	return _index(_index(memo, m), (m - 1))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(partition(5))
		fmt.Println(partition(7))
		fmt.Println(partition(100))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
