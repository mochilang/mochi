//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-14 22:42:39 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	s[idx] = v
}

type KMeansResult struct {
	Centroids   [][]float64 `json:"centroids"`
	Assignments []int       `json:"assignments"`
}

func distance_sq(a []float64, b []float64) float64 {
	var sum float64 = 0.0
	_ = sum
	var i int = 0
	_ = i
	for i < len(a) {
		var diff float64 = (_index(a, i) - _index(b, i))
		_ = diff
		sum = (sum + (diff * diff))
		i = (i + 1)
	}
	return sum
}

func mean(vectors [][]float64) []float64 {
	var dim int = len(_index(vectors, 0))
	_ = dim
	var res []float64 = []float64{}
	_ = res
	var i int = 0
	_ = i
	for i < dim {
		var total float64 = 0.0
		_ = total
		var j int = 0
		_ = j
		for j < len(vectors) {
			total = (total + _index(_index(vectors, j), i))
			j = (j + 1)
		}
		res = append(res, (float64(total) / float64(len(vectors))))
		i = (i + 1)
	}
	return res
}

func k_means(vectors [][]float64, k int, iterations int) KMeansResult {
	var centroids [][]float64 = [][]float64{}
	_ = centroids
	var i int = 0
	_ = i
	for i < k {
		centroids = append(centroids, _index(vectors, i))
		i = (i + 1)
	}
	var assignments []int = []int{}
	_ = assignments
	var n int = len(vectors)
	_ = n
	i = 0
	for i < n {
		assignments = append(assignments, 0)
		i = (i + 1)
	}
	var it int = 0
	_ = it
	for it < iterations {
		var v int = 0
		_ = v
		for v < n {
			var best int = 0
			_ = best
			var bestDist float64 = distance_sq(func(v any) []float64 {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]float64); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []float64{}
					}
					out := make([]float64, len(arr))
					for i, x := range arr {
						out[i] = x.(float64)
					}
					return out
				}
				return v.([]float64)
			}(_index(vectors, v)), func(v any) []float64 {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]float64); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []float64{}
					}
					out := make([]float64, len(arr))
					for i, x := range arr {
						out[i] = x.(float64)
					}
					return out
				}
				return v.([]float64)
			}(_index(centroids, 0)))
			_ = bestDist
			var c int = 1
			_ = c
			for c < k {
				var d float64 = distance_sq(func(v any) []float64 {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]float64); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []float64{}
						}
						out := make([]float64, len(arr))
						for i, x := range arr {
							out[i] = x.(float64)
						}
						return out
					}
					return v.([]float64)
				}(_index(vectors, v)), func(v any) []float64 {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]float64); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []float64{}
						}
						out := make([]float64, len(arr))
						for i, x := range arr {
							out[i] = x.(float64)
						}
						return out
					}
					return v.([]float64)
				}(_index(centroids, c)))
				_ = d
				if d < bestDist {
					bestDist = d
					best = c
				}
				c = (c + 1)
			}
			_setIndex(assignments, v, best)
			v = (v + 1)
		}
		var cIdx int = 0
		_ = cIdx
		for cIdx < k {
			var cluster [][]float64 = [][]float64{}
			_ = cluster
			var v2 int = 0
			_ = v2
			for v2 < n {
				if _index(assignments, v2) == cIdx {
					cluster = append(cluster, _index(vectors, v2))
				}
				v2 = (v2 + 1)
			}
			if len(cluster) > 0 {
				_setIndex(centroids, cIdx, mean(func(v any) [][]float64 {
					if v == nil {
						return nil
					}
					if vv, ok := v.([][]float64); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return [][]float64{}
						}
						out := make([][]float64, len(arr))
						for i, x := range arr {
							out[i] = func(v any) []float64 {
								if v == nil {
									return nil
								}
								if vv, ok := v.([]float64); ok {
									return vv
								}
								if arr, ok := v.([]any); ok {
									if len(arr) == 0 {
										return []float64{}
									}
									out := make([]float64, len(arr))
									for i, x := range arr {
										out[i] = x.(float64)
									}
									return out
								}
								return v.([]float64)
							}(x)
						}
						return out
					}
					return v.([][]float64)
				}(cluster)))
			}
			cIdx = (cIdx + 1)
		}
		it = (it + 1)
	}
	return KMeansResult{
		Centroids:   centroids,
		Assignments: assignments,
	}
}

func mochiMain() {
	var vectors [][]float64 = [][]float64{[]float64{1.0, 2.0}, []float64{1.5, 1.8}, []float64{5.0, 8.0}, []float64{8.0, 8.0}, []float64{1.0, 0.6}, []float64{9.0, 11.0}}
	_ = vectors
	var result KMeansResult = k_means(func(v any) [][]float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]float64{}
			}
			out := make([][]float64, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []float64 {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]float64); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []float64{}
						}
						out := make([]float64, len(arr))
						for i, x := range arr {
							out[i] = x.(float64)
						}
						return out
					}
					return v.([]float64)
				}(x)
			}
			return out
		}
		return v.([][]float64)
	}(vectors), 2, 5)
	_ = result
	fmt.Println(fmt.Sprint(result.Centroids))
	fmt.Println(fmt.Sprint(result.Assignments))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
