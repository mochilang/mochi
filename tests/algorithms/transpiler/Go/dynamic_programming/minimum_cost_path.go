//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-14 22:58:28 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		return
	}
	s[idx] = v
}

func min_int(a int, b int) int {
	if a < b {
		return a
	}
	return b
}

func minimum_cost_path(matrix [][]int) int {
	var rows int = len(matrix)
	_ = rows
	var cols int = len(_index(matrix, 0))
	_ = cols
	var j int = 1
	_ = j
	for j < cols {
		var row0 []int = _index(matrix, 0)
		_ = row0
		_setIndex(row0, j, (_index(row0, j) + _index(row0, (j-1))))
		_setIndex(matrix, 0, row0)
		j = (j + 1)
	}
	var i int = 1
	_ = i
	for i < rows {
		var row []int = _index(matrix, i)
		_ = row
		_setIndex(row, 0, (_index(row, 0) + _index(_index(matrix, (i-1)), 0)))
		_setIndex(matrix, i, row)
		i = (i + 1)
	}
	i = 1
	for i < rows {
		var row []int = _index(matrix, i)
		_ = row
		j = 1
		for j < cols {
			var up int = _index(_index(matrix, (i-1)), j)
			_ = up
			var left int = _index(row, (j - 1))
			_ = left
			var best int = min_int(up, left)
			_ = best
			_setIndex(row, j, (_index(row, j) + best))
			j = (j + 1)
		}
		_setIndex(matrix, i, row)
		i = (i + 1)
	}
	return _index(_index(matrix, (rows-1)), (cols - 1))
}

var m1 [][]int

var m2 [][]int

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		m1 = [][]int{[]int{2, 1}, []int{3, 1}, []int{4, 2}}
		m2 = [][]int{[]int{2, 1, 4}, []int{2, 1, 3}, []int{3, 2, 1}}
		fmt.Println(fmt.Sprint(minimum_cost_path(func(v any) [][]int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]int{}
				}
				out := make([][]int, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []int {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]int); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []int{}
							}
							out := make([]int, len(arr))
							for i, x := range arr {
								out[i] = x.(int)
							}
							return out
						}
						return v.([]int)
					}(x)
				}
				return out
			}
			return v.([][]int)
		}(m1))))
		fmt.Println(fmt.Sprint(minimum_cost_path(func(v any) [][]int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]int{}
				}
				out := make([][]int, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []int {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]int); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []int{}
							}
							out := make([]int, len(arr))
							for i, x := range arr {
								out[i] = x.(int)
							}
							return out
						}
						return v.([]int)
					}(x)
				}
				return out
			}
			return v.([][]int)
		}(m2))))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
