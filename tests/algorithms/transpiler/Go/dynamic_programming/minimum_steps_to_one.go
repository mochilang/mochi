//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-15 06:48:30 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		return
	}
	s[idx] = v
}

func make_list(len int, value int) []int {
	var arr []int = []int{}
	_ = arr
	var i int = 0
	_ = i
	for i < len {
		arr = append(arr, value)
		i = (i + 1)
	}
	return arr
}

func min_int(a int, b int) int {
	if a < b {
		return a
	}
	return b
}

func min_steps_to_one(number int) int {
	if number <= 0 {
		return 0
	}
	var table []int = make_list((number + 1), (number + 1))
	_ = table
	_setIndex(table, 1, 0)
	var i int = 1
	_ = i
	for i < number {
		_setIndex(table, (i + 1), min_int(_index(table, (i+1)), (_index(table, i)+1)))
		if (i * 2) <= number {
			_setIndex(table, (i * 2), min_int(_index(table, (i*2)), (_index(table, i)+1)))
		}
		if (i * 3) <= number {
			_setIndex(table, (i * 3), min_int(_index(table, (i*3)), (_index(table, i)+1)))
		}
		i = (i + 1)
	}
	return _index(table, number)
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(fmt.Sprint(min_steps_to_one(10)))
		fmt.Println(fmt.Sprint(min_steps_to_one(15)))
		fmt.Println(fmt.Sprint(min_steps_to_one(6)))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
