//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-15 06:48:46 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		return
	}
	s[idx] = v
}

func create_bool_matrix(rows int, cols int) [][]bool {
	var matrix [][]bool = [][]bool{}
	_ = matrix
	var i int = 0
	_ = i
	for i <= rows {
		var row []bool = []bool{}
		_ = row
		var j int = 0
		_ = j
		for j <= cols {
			row = append(row, false)
			j = (j + 1)
		}
		matrix = append(matrix, row)
		i = (i + 1)
	}
	return matrix
}

func is_sum_subset(arr []int, required_sum int) bool {
	var arr_len int = len(arr)
	_ = arr_len
	var subset [][]bool = create_bool_matrix(arr_len, required_sum)
	_ = subset
	var i int = 0
	_ = i
	for i <= arr_len {
		_setIndex(_index(subset, i), 0, true)
		i = (i + 1)
	}
	var j int = 1
	_ = j
	for j <= required_sum {
		_setIndex(_index(subset, 0), j, false)
		j = (j + 1)
	}
	i = 1
	for i <= arr_len {
		j = 1
		for j <= required_sum {
			if _index(arr, (i-1)) > j {
				_setIndex(_index(subset, i), j, _index(_index(subset, (i-1)), j))
			}
			if _index(arr, (i-1)) <= j {
				_setIndex(_index(subset, i), j, (_index(_index(subset, (i-1)), j) || _index(_index(subset, (i-1)), (j-_index(arr, (i-1))))))
			}
			j = (j + 1)
		}
		i = (i + 1)
	}
	return _index(_index(subset, arr_len), required_sum)
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(is_sum_subset(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}([]int{2, 4, 6, 8}), 5))
		fmt.Println(is_sum_subset(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}([]int{2, 4, 6, 8}), 14))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
