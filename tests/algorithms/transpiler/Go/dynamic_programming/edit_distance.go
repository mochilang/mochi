//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-14 22:42:24 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	s[idx] = v
}

func min3(a int, b int, c int) int {
	var m int = a
	_ = m
	if b < m {
		m = b
	}
	if c < m {
		m = c
	}
	return m
}

func helper_top_down(word1 string, word2 string, dp [][]int, i int, j int) int {
	if i < 0 {
		return (j + 1)
	}
	if j < 0 {
		return (i + 1)
	}
	if _index(_index(dp, i), j) != (0 - 1) {
		return _index(_index(dp, i), j)
	}
	if _substr(word1, i, (i+1)) == _substr(word2, j, (j+1)) {
		_setIndex(_index(dp, i), j, helper_top_down(word1, word2, func(v any) [][]int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]int{}
				}
				out := make([][]int, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []int {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]int); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []int{}
							}
							out := make([]int, len(arr))
							for i, x := range arr {
								out[i] = x.(int)
							}
							return out
						}
						return v.([]int)
					}(x)
				}
				return out
			}
			return v.([][]int)
		}(dp), (i-1), (j-1)))
	} else {
		var insert int = helper_top_down(word1, word2, func(v any) [][]int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]int{}
				}
				out := make([][]int, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []int {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]int); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []int{}
							}
							out := make([]int, len(arr))
							for i, x := range arr {
								out[i] = x.(int)
							}
							return out
						}
						return v.([]int)
					}(x)
				}
				return out
			}
			return v.([][]int)
		}(dp), i, (j - 1))
		_ = insert
		var delete int = helper_top_down(word1, word2, func(v any) [][]int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]int{}
				}
				out := make([][]int, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []int {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]int); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []int{}
							}
							out := make([]int, len(arr))
							for i, x := range arr {
								out[i] = x.(int)
							}
							return out
						}
						return v.([]int)
					}(x)
				}
				return out
			}
			return v.([][]int)
		}(dp), (i - 1), j)
		_ = delete
		var replace int = helper_top_down(word1, word2, func(v any) [][]int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]int{}
				}
				out := make([][]int, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []int {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]int); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []int{}
							}
							out := make([]int, len(arr))
							for i, x := range arr {
								out[i] = x.(int)
							}
							return out
						}
						return v.([]int)
					}(x)
				}
				return out
			}
			return v.([][]int)
		}(dp), (i - 1), (j - 1))
		_ = replace
		_setIndex(_index(dp, i), j, (1 + min3(insert, delete, replace)))
	}
	return _index(_index(dp, i), j)
}

func min_dist_top_down(word1 string, word2 string) int {
	var m int = len(word1)
	_ = m
	var n int = len(word2)
	_ = n
	var dp [][]int = [][]int{}
	_ = dp
	for _i := 0; _i < m; _i++ {
		var row []int = []int{}
		_ = row
		for _2 := 0; _2 < n; _2++ {
			row = append(row, (0 - 1))
		}
		dp = append(dp, row)
	}
	return helper_top_down(word1, word2, func(v any) [][]int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]int{}
			}
			out := make([][]int, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []int {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]int); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []int{}
						}
						out := make([]int, len(arr))
						for i, x := range arr {
							out[i] = x.(int)
						}
						return out
					}
					return v.([]int)
				}(x)
			}
			return out
		}
		return v.([][]int)
	}(dp), (m - 1), (n - 1))
}

func min_dist_bottom_up(word1 string, word2 string) int {
	var m int = len(word1)
	_ = m
	var n int = len(word2)
	_ = n
	var dp [][]int = [][]int{}
	_ = dp
	for _i := 0; _i < (m + 1); _i++ {
		var row []int = []int{}
		_ = row
		for _2 := 0; _2 < (n + 1); _2++ {
			row = append(row, 0)
		}
		dp = append(dp, row)
	}
	for i := 0; i < (m + 1); i++ {
		for j := 0; j < (n + 1); j++ {
			if i == 0 {
				_setIndex(_index(dp, i), j, j)
			} else {
				if j == 0 {
					_setIndex(_index(dp, i), j, i)
				} else {
					if _substr(word1, (i-1), i) == _substr(word2, (j-1), j) {
						_setIndex(_index(dp, i), j, _index(_index(dp, (i-1)), (j-1)))
					} else {
						var insert int = _index(_index(dp, i), (j - 1))
						_ = insert
						var delete int = _index(_index(dp, (i-1)), j)
						_ = delete
						var replace int = _index(_index(dp, (i-1)), (j - 1))
						_ = replace
						_setIndex(_index(dp, i), j, (1 + min3(insert, delete, replace)))
					}
				}
			}
		}
	}
	return _index(_index(dp, m), n)
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(fmt.Sprint(min_dist_top_down("intention", "execution")))
		fmt.Println(fmt.Sprint(min_dist_top_down("intention", "")))
		fmt.Println(fmt.Sprint(min_dist_top_down("", "")))
		fmt.Println(fmt.Sprint(min_dist_bottom_up("intention", "execution")))
		fmt.Println(fmt.Sprint(min_dist_bottom_up("intention", "")))
		fmt.Println(fmt.Sprint(min_dist_bottom_up("", "")))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
