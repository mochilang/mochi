//go:build ignore

// Generated by Mochi v0.10.61 on 2025-08-08 17:57:59 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	s[idx] = v
}

type LcsResult struct {
	Length   int    `json:"length"`
	Sequence string `json:"sequence"`
}

func zeros_matrix(rows int, cols int) [][]int {
	var matrix [][]int = [][]int{}
	_ = matrix
	var i int = 0
	_ = i
	for i <= rows {
		var row []int = []int{}
		_ = row
		var j int = 0
		_ = j
		for j <= cols {
			row = append(row, 0)
			j = (j + 1)
		}
		matrix = append(matrix, row)
		i = (i + 1)
	}
	return matrix
}

func longest_common_subsequence(x string, y string) LcsResult {
	m := len(x)
	_ = m
	n := len(y)
	_ = n
	var dp [][]int = zeros_matrix(m, n)
	_ = dp
	var i int = 1
	_ = i
	for i <= m {
		var j int = 1
		_ = j
		for j <= n {
			if string(_index([]rune(x), (i-1))) == string(_index([]rune(y), (j-1))) {
				_setIndex(_index(dp, i), j, (int(_index(_index(dp, (i-1)), (j-1))) + 1))
			} else {
				if int(_index(_index(dp, (i-1)), j)) > int(_index(_index(dp, i), (j-1))) {
					_setIndex(_index(dp, i), j, _index(_index(dp, (i-1)), j))
				} else {
					_setIndex(_index(dp, i), j, _index(_index(dp, i), (j-1)))
				}
			}
			j = (j + 1)
		}
		i = (i + 1)
	}
	var seq string = ""
	_ = seq
	var i2 any = m
	_ = i2
	var j2 any = n
	_ = j2
	for (i2.(int) > 0) && (j2.(int) > 0) {
		if string(_index([]rune(x), (i2.(int)-1))) == string(_index([]rune(y), (j2.(int)-1))) {
			seq = (string(_index([]rune(x), (i2.(int)-1))) + seq)
			i2 = (i2.(int) - 1)
			j2 = (j2.(int) - 1)
		} else {
			if int(_index(_index(dp, (i2.(int)-1)), j2)) >= int(_index(_index(dp, i2), (j2.(int)-1))) {
				i2 = (i2.(int) - 1)
			} else {
				j2 = (j2.(int) - 1)
			}
		}
	}
	return LcsResult{
		Length:   _index(_index(dp, m), n),
		Sequence: seq,
	}
}

var a string

var b string

var res LcsResult

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		a = "AGGTAB"
		b = "GXTXAYB"
		res = longest_common_subsequence(a, b)
		fmt.Println(((("len = " + fmt.Sprint(res.Length)) + ", sub-sequence = ") + res.Sequence))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
