//go:build ignore

// Generated by Mochi v0.10.61 on 2025-08-08 17:58:14 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	s[idx] = v
}

var INF int

func matrix_chain_multiply(arr []int) int {
	if len(arr) < 2 {
		return 0
	}
	n := len(arr)
	_ = n
	var dp [][]int = [][]int{}
	_ = dp
	var i int = 0
	_ = i
	for i < n {
		var row []int = []int{}
		_ = row
		var j int = 0
		_ = j
		for j < n {
			row = append(row, INF)
			j = (j + 1)
		}
		dp = append(dp, row)
		i = (i + 1)
	}
	i = (n - 1)
	for i > 0 {
		var j int = i
		_ = j
		for j < n {
			if i == j {
				_setIndex(_index(dp, i), j, 0)
			} else {
				var k int = i
				_ = k
				for k < j {
					var cost int = ((int(_index(_index(dp, i), k)) + int(_index(_index(dp, (k+1)), j))) + ((int(_index(arr, (i-1))) * int(_index(arr, k))) * int(_index(arr, j))))
					_ = cost
					if cost < int(_index(_index(dp, i), j)) {
						_setIndex(_index(dp, i), j, cost)
					}
					k = (k + 1)
				}
			}
			j = (j + 1)
		}
		i = (i - 1)
	}
	return _index(_index(dp, 1), (n - 1))
}

var __mochi_test_header_printed bool

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		INF = 1000000000
		if !__mochi_test_header_printed {
			fmt.Println("[94;1mtests/github/TheAlgorithms/Mochi/dynamic_programming/matrix_chain_multiplication.mochi[0;22m")
			__mochi_test_header_printed = true
		}
		func() {
			func() {
				defer func() { recover() }()
				_ = (matrix_chain_multiply(func(v any) []int {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]int); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []int{}
						}
						out := make([]int, len(arr))
						for i, x := range arr {
							out[i] = x.(int)
						}
						return out
					}
					return v.([]int)
				}([]int{func(v any) int {
					if vv, ok := v.(int); ok {
						return vv
					}
					return 0
				}(1), func(v any) int {
					if vv, ok := v.(int); ok {
						return vv
					}
					return 0
				}(2), func(v any) int {
					if vv, ok := v.(int); ok {
						return vv
					}
					return 0
				}(3), func(v any) int {
					if vv, ok := v.(int); ok {
						return vv
					}
					return 0
				}(4), func(v any) int {
					if vv, ok := v.(int); ok {
						return vv
					}
					return 0
				}(3)})) == 30)
			}()
			fmt.Printf("   \x1b[33mtest\x1b[0m %s                   ... \x1b[32mok\x1b[0m (1.0ms)\n", "example")
		}()

		if !__mochi_test_header_printed {
			fmt.Println("[94;1mtests/github/TheAlgorithms/Mochi/dynamic_programming/matrix_chain_multiplication.mochi[0;22m")
			__mochi_test_header_printed = true
		}
		func() {
			func() {
				defer func() { recover() }()
				_ = (matrix_chain_multiply(func(v any) []int {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]int); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []int{}
						}
						out := make([]int, len(arr))
						for i, x := range arr {
							out[i] = x.(int)
						}
						return out
					}
					return v.([]int)
				}([]int{func(v any) int {
					if vv, ok := v.(int); ok {
						return vv
					}
					return 0
				}(10)})) == 0)
			}()
			fmt.Printf("   \x1b[33mtest\x1b[0m %s                   ... \x1b[32mok\x1b[0m (1.0ms)\n", "single matrix")
		}()

		if !__mochi_test_header_printed {
			fmt.Println("[94;1mtests/github/TheAlgorithms/Mochi/dynamic_programming/matrix_chain_multiplication.mochi[0;22m")
			__mochi_test_header_printed = true
		}
		func() {
			func() {
				defer func() { recover() }()
				_ = (matrix_chain_multiply(func(v any) []int {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]int); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []int{}
						}
						out := make([]int, len(arr))
						for i, x := range arr {
							out[i] = x.(int)
						}
						return out
					}
					return v.([]int)
				}([]int{func(v any) int {
					if vv, ok := v.(int); ok {
						return vv
					}
					return 0
				}(10), func(v any) int {
					if vv, ok := v.(int); ok {
						return vv
					}
					return 0
				}(20)})) == 0)
			}()
			fmt.Printf("   \x1b[33mtest\x1b[0m %s                   ... \x1b[32mok\x1b[0m (1.0ms)\n", "two matrices")
		}()

		if !__mochi_test_header_printed {
			fmt.Println("[94;1mtests/github/TheAlgorithms/Mochi/dynamic_programming/matrix_chain_multiplication.mochi[0;22m")
			__mochi_test_header_printed = true
		}
		func() {
			func() {
				defer func() { recover() }()
				_ = (matrix_chain_multiply(func(v any) []int {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]int); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []int{}
						}
						out := make([]int, len(arr))
						for i, x := range arr {
							out[i] = x.(int)
						}
						return out
					}
					return v.([]int)
				}([]int{func(v any) int {
					if vv, ok := v.(int); ok {
						return vv
					}
					return 0
				}(19), func(v any) int {
					if vv, ok := v.(int); ok {
						return vv
					}
					return 0
				}(2), func(v any) int {
					if vv, ok := v.(int); ok {
						return vv
					}
					return 0
				}(19)})) == 722)
			}()
			fmt.Printf("   \x1b[33mtest\x1b[0m %s                   ... \x1b[32mok\x1b[0m (1.0ms)\n", "cost calculation")
		}()

		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
