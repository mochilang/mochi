//go:build ignore

// Generated by Mochi v0.10.61 on 2025-08-08 17:58:12 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	s[idx] = v
}

func _len(v any) int {
	switch t := v.(type) {
	case string:
		return len([]rune(t))
	case []any:
		return len(t)
	case []string:
		return len(t)
	case []int:
		return len(t)
	case []float64:
		return len(t)
	case map[string]any:
		return len(t)
	case map[int]any:
		return len(t)
	case map[any]any:
		return len(t)
	default:
		return 0
	}
}

func _toFloat(v any) float64 {
	switch t := v.(type) {
	case int:
		return float64(t)
	case int64:
		return float64(t)
	case float64:
		return t
	default:
		return 0
	}
}

func reverse(s string) string {
	var result string = ""
	_ = result
	var i int = (len(s) - 1)
	_ = i
	for i >= 0 {
		result = (result + string([]rune(s)[i:(i+1)]))
		i = (i - 1)
	}
	return result
}

func max_int(a int, b int) int {
	if a > b {
		return a
	}
	return b
}

func longest_palindromic_subsequence(s string) int {
	rev := reverse(s)
	_ = rev
	n := len(s)
	_ = n
	m := _len(rev)
	_ = m
	var dp [][]int = [][]int{}
	_ = dp
	var i int = 0
	_ = i
	for i <= n {
		var row []int = []int{}
		_ = row
		var j int = 0
		_ = j
		for j <= m {
			row = append(row, 0)
			j = (j + 1)
		}
		dp = append(dp, row)
		i = (i + 1)
	}
	i = 1
	for i <= n {
		var j int = 1
		_ = j
		for j <= m {
			a_char := string([]rune(s)[(i - 1):i])
			_ = a_char
			b_char := rev[(j - 1):j]
			_ = b_char
			if _toFloat(a_char) == _toFloat(b_char) {
				_setIndex(_index(dp, i), j, (1 + int(_index(_index(dp, (i-1)), (j-1)))))
			} else {
				_setIndex(_index(dp, i), j, max_int(_index(_index(dp, (i-1)), j), _index(_index(dp, i), (j-1))))
			}
			j = (j + 1)
		}
		i = (i + 1)
	}
	return _index(_index(dp, n), m)
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(fmt.Sprint(longest_palindromic_subsequence("bbbab")))
		fmt.Println(fmt.Sprint(longest_palindromic_subsequence("bbabcbcab")))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
