//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-14 22:42:26 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

var memo []int

func factorial(num int) int {
	if num < 0 {
		fmt.Println("Number should not be negative.")
		return 0
	}
	var m []int = memo
	_ = m
	var i int = len(m)
	_ = i
	for i <= num {
		m = append(m, (i * _index(m, (i-1))))
		i = (i + 1)
	}
	memo = m
	return _index(m, num)
}

var results []int

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		memo = []int{1, 1}
		fmt.Println(fmt.Sprint(factorial(7)))
		factorial((0 - 1))
		results = []int{}
		for i := 0; i < 10; i++ {
			results = append(results, factorial(i))
		}
		fmt.Println(fmt.Sprint(results))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
