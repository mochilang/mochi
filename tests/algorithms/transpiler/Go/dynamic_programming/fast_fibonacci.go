//go:build ignore

// Generated by Mochi v0.10.61 on 2025-08-08 17:57:49 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _mod(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func _toFloat(v any) float64 {
	switch t := v.(type) {
	case int:
		return float64(t)
	case int64:
		return float64(t)
	case float64:
		return t
	default:
		return 0
	}
}

type FibPair struct {
	Fn  int `json:"fn"`
	Fn1 int `json:"fn1"`
}

func _fib(n int) FibPair {
	if n == 0 {
		return FibPair{
			Fn:  0,
			Fn1: 1,
		}
	}
	half := _fib((n / 2))
	_ = half
	a := FibPair(half).Fn
	_ = a
	b := FibPair(half).Fn1
	_ = b
	c := (_toFloat(a) * _toFloat(((b * 2) - a)))
	_ = c
	_ = c
	d := ((_toFloat(a) * _toFloat(a)) + (_toFloat(b) * _toFloat(b)))
	_ = d
	_ = d
	if _mod(n, 2) == 0 {
		return FibPair{
			Fn:  c,
			Fn1: d,
		}
	}
	return FibPair{
		Fn:  d,
		Fn1: (_toFloat(c) + _toFloat(d)),
	}
}

func fibonacci(n int) int {
	if n < 0 {
		panic("Negative arguments are not supported")
	}
	res := _fib(n)
	_ = res
	_ = res
	return int(FibPair(res).Fn)
}

var i int

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		i = 0
		for i < 13 {
			fmt.Println(fmt.Sprint(fibonacci(i)))
			i = (i + 1)
		}
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
