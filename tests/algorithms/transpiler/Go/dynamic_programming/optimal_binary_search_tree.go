//go:build ignore

// Generated by Mochi v0.10.61 on 2025-08-08 18:14:59 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	s[idx] = v
}

type Node struct {
	Key  int `json:"key"`
	Freq int `json:"freq"`
}

func sort_nodes(nodes []Node) []Node {
	var arr []Node = nodes
	_ = arr
	var i int = 1
	_ = i
	for i < len(arr) {
		var key_node Node = _index(arr, i)
		_ = key_node
		var j int = (i - 1)
		_ = j
		for j >= 0 {
			var temp Node = _index(arr, j)
			_ = temp
			if temp.Key > key_node.Key {
				_setIndex(arr, (j + 1), temp)
				j = (j - 1)
			} else {
				break
			}
		}
		_setIndex(arr, (j + 1), key_node)
		i = (i + 1)
	}
	return arr
}

func print_node(n Node) {
	fmt.Println((((("Node(key=" + fmt.Sprint(n.Key)) + ", freq=") + fmt.Sprint(n.Freq)) + ")"))
}

func print_binary_search_tree(root [][]int, keys []int, i int, j int, parent int, is_left bool) {
	if ((i > j) || (i < 0)) || (j > (len(root) - 1)) {
		return
	}
	var node int = _index(_index(root, i), j)
	_ = node
	if parent == (0 - 1) {
		fmt.Println((fmt.Sprint(_index(keys, node)) + " is the root of the binary search tree."))
	} else {
		if is_left {
			fmt.Println((((fmt.Sprint(_index(keys, node)) + " is the left child of key ") + fmt.Sprint(parent)) + "."))
		} else {
			fmt.Println((((fmt.Sprint(_index(keys, node)) + " is the right child of key ") + fmt.Sprint(parent)) + "."))
		}
	}
	print_binary_search_tree(func(v any) [][]int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]int{}
			}
			out := make([][]int, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []int {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]int); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []int{}
						}
						out := make([]int, len(arr))
						for i, x := range arr {
							out[i] = x.(int)
						}
						return out
					}
					return v.([]int)
				}(x)
			}
			return out
		}
		return v.([][]int)
	}(root), func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(keys), i, (node - 1), _index(keys, node), true)
	print_binary_search_tree(func(v any) [][]int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]int{}
			}
			out := make([][]int, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []int {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]int); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []int{}
						}
						out := make([]int, len(arr))
						for i, x := range arr {
							out[i] = x.(int)
						}
						return out
					}
					return v.([]int)
				}(x)
			}
			return out
		}
		return v.([][]int)
	}(root), func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(keys), (node + 1), j, _index(keys, node), false)
}

func find_optimal_binary_search_tree(original_nodes []Node) {
	var nodes []Node = sort_nodes(func(v any) []Node {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]Node); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []Node{}
			}
			out := make([]Node, len(arr))
			for i, x := range arr {
				out[i] = x.(Node)
			}
			return out
		}
		return v.([]Node)
	}(original_nodes))
	_ = nodes
	n := len(nodes)
	_ = n
	var keys []int = []int{}
	_ = keys
	var freqs []int = []int{}
	_ = freqs
	var i int = 0
	_ = i
	for i < n {
		var node Node = _index(nodes, i)
		_ = node
		keys = append(keys, node.Key)
		freqs = append(freqs, node.Freq)
		i = (i + 1)
	}
	var dp [][]int = [][]int{}
	_ = dp
	var total [][]int = [][]int{}
	_ = total
	var root [][]int = [][]int{}
	_ = root
	i = 0
	for i < n {
		var dp_row []int = []int{}
		_ = dp_row
		var total_row []int = []int{}
		_ = total_row
		var root_row []int = []int{}
		_ = root_row
		var j int = 0
		_ = j
		for j < n {
			if i == j {
				dp_row = append(dp_row, _index(freqs, i))
				total_row = append(total_row, _index(freqs, i))
				root_row = append(root_row, i)
			} else {
				dp_row = append(dp_row, 0)
				total_row = append(total_row, 0)
				root_row = append(root_row, 0)
			}
			j = (j + 1)
		}
		dp = append(dp, dp_row)
		total = append(total, total_row)
		root = append(root, root_row)
		i = (i + 1)
	}
	var interval_length int = 2
	_ = interval_length
	var INF int = 2147483647
	_ = INF
	for interval_length <= n {
		i = 0
		for i < ((n - interval_length) + 1) {
			var j int = ((i + interval_length) - 1)
			_ = j
			_setIndex(_index(dp, i), j, INF)
			_setIndex(_index(total, i), j, (int(_index(_index(total, i), (j-1))) + int(_index(freqs, j))))
			var r int = _index(_index(root, i), (j - 1))
			_ = r
			for r <= int(_index(_index(root, (i+1)), j)) {
				left := func() int {
					if r != i {
						return _index(_index(dp, i), (r - 1))
					} else {
						return 0
					}
				}()
				_ = left
				right := func() int {
					if r != j {
						return _index(_index(dp, (r+1)), j)
					} else {
						return 0
					}
				}()
				_ = right
				cost := ((left + int(_index(_index(total, i), j))) + right)
				_ = cost
				if int(_index(_index(dp, i), j)) > cost {
					_setIndex(_index(dp, i), j, cost)
					_setIndex(_index(root, i), j, r)
				}
				r = (r + 1)
			}
			i = (i + 1)
		}
		interval_length = (interval_length + 1)
	}
	fmt.Println("Binary search tree nodes:")
	i = 0
	for i < n {
		print_node(_index(nodes, i))
		i = (i + 1)
	}
	fmt.Println((("\nThe cost of optimal BST for given tree nodes is " + fmt.Sprint(_index(_index(dp, 0), (n-1)))) + "."))
	print_binary_search_tree(func(v any) [][]int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]int{}
			}
			out := make([][]int, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []int {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]int); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []int{}
						}
						out := make([]int, len(arr))
						for i, x := range arr {
							out[i] = x.(int)
						}
						return out
					}
					return v.([]int)
				}(x)
			}
			return out
		}
		return v.([][]int)
	}(root), func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(keys), 0, int((n - 1)), (0 - 1), false)
}

func mochiMain() {
	var nodes []Node = []Node{Node{
		Key:  12,
		Freq: 8,
	}, Node{
		Key:  10,
		Freq: 34,
	}, Node{
		Key:  20,
		Freq: 50,
	}, Node{
		Key:  42,
		Freq: 3,
	}, Node{
		Key:  25,
		Freq: 40,
	}, Node{
		Key:  37,
		Freq: 30,
	}}
	_ = nodes
	find_optimal_binary_search_tree(func(v any) []Node {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]Node); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []Node{}
			}
			out := make([]Node, len(arr))
			for i, x := range arr {
				out[i] = x.(Node)
			}
			return out
		}
		return v.([]Node)
	}(nodes))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
