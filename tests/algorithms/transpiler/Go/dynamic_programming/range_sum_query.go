//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-14 22:58:39 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

type Query struct {
	Left  int `json:"left"`
	Right int `json:"right"`
}

func prefix_sum(arr []int, queries []Query) []int {
	var dp []int = []int{}
	_ = dp
	var i int = 0
	_ = i
	for i < len(arr) {
		if i == 0 {
			dp = append(dp, _index(arr, 0))
		} else {
			dp = append(dp, (_index(dp, (i-1)) + _index(arr, i)))
		}
		i = (i + 1)
	}
	var result []int = []int{}
	_ = result
	var j int = 0
	_ = j
	for j < len(queries) {
		var q Query = _index(queries, j)
		_ = q
		var sum int = _index(dp, q.Right)
		_ = sum
		if q.Left > 0 {
			sum = (sum - _index(dp, (q.Left-1)))
		}
		result = append(result, sum)
		j = (j + 1)
	}
	return result
}

var arr1 []int

var queries1 []Query

var arr2 []int

var queries2 []Query

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		arr1 = []int{1, 4, 6, 2, 61, 12}
		queries1 = []Query{Query{
			Left:  2,
			Right: 5,
		}, Query{
			Left:  1,
			Right: 5,
		}, Query{
			Left:  3,
			Right: 4,
		}}
		fmt.Println(fmt.Sprint(prefix_sum(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(arr1), func(v any) []Query {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]Query); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []Query{}
				}
				out := make([]Query, len(arr))
				for i, x := range arr {
					out[i] = x.(Query)
				}
				return out
			}
			return v.([]Query)
		}(queries1))))
		arr2 = []int{4, 2, 1, 6, 3}
		queries2 = []Query{Query{
			Left:  3,
			Right: 4,
		}, Query{
			Left:  1,
			Right: 3,
		}, Query{
			Left:  0,
			Right: 2,
		}}
		fmt.Println(fmt.Sprint(prefix_sum(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(arr2), func(v any) []Query {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]Query); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []Query{}
				}
				out := make([]Query, len(arr))
				for i, x := range arr {
					out[i] = x.(Query)
				}
				return out
			}
			return v.([]Query)
		}(queries2))))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
