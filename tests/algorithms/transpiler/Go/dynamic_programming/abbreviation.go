//go:build ignore

// Generated by Mochi v0.10.61 on 2025-08-08 17:57:38 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	s[idx] = v
}

func index_of(s string, ch string) int {
	var i int = 0
	_ = i
	for i < len(s) {
		if string(_index([]rune(s), i)) == ch {
			return i
		}
		i = (i + 1)
	}
	return (0 - 1)
}

func ord(ch string) int {
	var upper string = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
	_ = upper
	var lower string = "abcdefghijklmnopqrstuvwxyz"
	_ = lower
	var idx int = index_of(upper, ch)
	_ = idx
	if idx >= 0 {
		return (65 + idx)
	}
	idx = index_of(lower, ch)
	if idx >= 0 {
		return (97 + idx)
	}
	return 0
}

func chr(n int) string {
	var upper string = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
	_ = upper
	_ = upper
	var lower string = "abcdefghijklmnopqrstuvwxyz"
	_ = lower
	_ = lower
	if (n >= 65) && (n < 91) {
		return string([]rune(upper)[(n - 65):(n - 64)])
	}
	if (n >= 97) && (n < 123) {
		return string([]rune(lower)[(n - 97):(n - 96)])
	}
	return "?"
}

func to_upper_char(c string) string {
	code := ord(c)
	_ = code
	if (code >= 97) && (code <= 122) {
		return chr(int((code - 32)))
	}
	return c
}

func is_lower(c string) bool {
	code := ord(c)
	_ = code
	_ = code
	return ((code >= 97) && (code <= 122))
}

func abbr(a string, b string) bool {
	n := len(a)
	_ = n
	m := len(b)
	_ = m
	var dp [][]bool = [][]bool{}
	_ = dp
	var i int = 0
	_ = i
	for i <= n {
		var row []bool = []bool{}
		_ = row
		var j int = 0
		_ = j
		for j <= m {
			row = append(row, false)
			j = (j + 1)
		}
		dp = append(dp, row)
		i = (i + 1)
	}
	_setIndex(_index(dp, 0), 0, true)
	i = 0
	for i < n {
		var j int = 0
		_ = j
		for j <= m {
			if _index(_index(dp, i), j) {
				if (j < m) && (to_upper_char(string(_index([]rune(a), i))) == string(_index([]rune(b), j))) {
					_setIndex(_index(dp, (i+1)), (j + 1), true)
				}
				if is_lower(string(_index([]rune(a), i))) {
					_setIndex(_index(dp, (i+1)), j, true)
				}
			}
			j = (j + 1)
		}
		i = (i + 1)
	}
	return _index(_index(dp, n), m)
}

func print_bool(b bool) {
	if b {
		fmt.Println(true)
	} else {
		fmt.Println(false)
	}
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		print_bool(abbr("daBcd", "ABC"))
		print_bool(abbr("dBcd", "ABC"))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
