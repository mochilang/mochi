//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-15 06:48:04 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"reflect"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _slice[T any](s []T, start, end int) []T {
	if start < 0 {
		start = 0
	}
	if end > len(s) {
		end = len(s)
	}
	if start > len(s) {
		start = len(s)
	}
	if end < start {
		end = start
	}
	return s[start:end]
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func _concat[T any](a, b []T) []T {
	return append(append([]T{}, a...), b...)
}

func _len(v any) int {
	switch t := v.(type) {
	case string:
		return len([]rune(t))
	case []any:
		return len(t)
	case []string:
		return len(t)
	case []int:
		return len(t)
	case []float64:
		return len(t)
	case map[string]any:
		return len(t)
	case map[int]any:
		return len(t)
	case map[any]any:
		return len(t)
	default:
		return 0
	}
}

func longest_subsequence(xs []int) []int {
	var n int = len(xs)
	_ = n
	if n <= 1 {
		return xs
	}
	var pivot int = _index(xs, 0)
	_ = pivot
	var is_found bool = false
	_ = is_found
	var i int = 1
	_ = i
	var longest_subseq []int = []int{}
	_ = longest_subseq
	for !is_found && (i < n) {
		if _index(xs, i) < pivot {
			is_found = true
			temp_array := _slice(xs, i, n)
			_ = temp_array
			temp_array = longest_subsequence(func(v any) []int {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]int); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []int{}
					}
					out := make([]int, len(arr))
					for i, x := range arr {
						out[i] = x.(int)
					}
					return out
				}
				return v.([]int)
			}(func(v any) []int {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]int); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []int{}
					}
					out := make([]int, len(arr))
					for i, x := range arr {
						out[i] = x.(int)
					}
					return out
				}
				return v.([]int)
			}(temp_array)))
			if _len(temp_array) > len(longest_subseq) {
				longest_subseq = temp_array
			}
		} else {
			i = (i + 1)
		}
	}
	var filtered []int = []int{}
	_ = filtered
	var j int = 1
	_ = j
	for j < n {
		if _index(xs, j) >= pivot {
			filtered = append(filtered, _index(xs, j))
		}
		j = (j + 1)
	}
	var candidate []int = []int{}
	_ = candidate
	candidate = append(candidate, pivot)
	candidate = _concat(candidate, longest_subsequence(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(filtered)))
	if len(candidate) > len(longest_subseq) {
		return candidate
	} else {
		return longest_subseq
	}
}

var __mochi_test_header_printed bool

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		if !__mochi_test_header_printed {
			fmt.Println("[94;1mtests/github/TheAlgorithms/Mochi/dynamic_programming/longest_increasing_subsequence.mochi[0;22m")
			__mochi_test_header_printed = true
		}
		func() {
			func() {
				defer func() { recover() }()
				_ = (reflect.DeepEqual(longest_subsequence(func(v any) []int {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]int); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []int{}
						}
						out := make([]int, len(arr))
						for i, x := range arr {
							out[i] = x.(int)
						}
						return out
					}
					return v.([]int)
				}([]int{})), []int{}))
			}()
			fmt.Printf("   \x1b[33mtest\x1b[0m %s                   ... \x1b[32mok\x1b[0m (1.0ms)\n", "examples")
		}()

		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
