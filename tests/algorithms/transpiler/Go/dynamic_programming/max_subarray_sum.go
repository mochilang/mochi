//go:build ignore

// Generated by Mochi v0.10.61 on 2025-08-08 17:58:18 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

func max_subarray_sum(nums []float64, allow_empty bool) float64 {
	if len(nums) == 0 {
		return 0.0
	}
	var max_sum float64 = 0.0
	_ = max_sum
	var curr_sum float64 = 0.0
	_ = curr_sum
	if allow_empty {
		max_sum = 0.0
		curr_sum = 0.0
		var i int = 0
		_ = i
		for i < len(nums) {
			var num float64 = _index(nums, i)
			_ = num
			var temp float64 = (curr_sum + num)
			_ = temp
			_ = temp
			curr_sum = func() float64 {
				if temp > 0.0 {
					return temp
				} else {
					return 0.0
				}
			}()
			if curr_sum > max_sum {
				max_sum = curr_sum
			}
			i = (i + 1)
		}
	} else {
		max_sum = _index(nums, 0)
		curr_sum = _index(nums, 0)
		var i int = 1
		_ = i
		for i < len(nums) {
			var num float64 = _index(nums, i)
			_ = num
			var temp float64 = (curr_sum + num)
			_ = temp
			_ = temp
			curr_sum = func() float64 {
				if temp > num {
					return temp
				} else {
					return num
				}
			}()
			if curr_sum > max_sum {
				max_sum = curr_sum
			}
			i = (i + 1)
		}
	}
	return max_sum
}

var empty []float64

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(fmt.Sprint(max_subarray_sum(func(v any) []float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []float64{}
				}
				out := make([]float64, len(arr))
				for i, x := range arr {
					out[i] = x.(float64)
				}
				return out
			}
			return v.([]float64)
		}([]float64{2.0, 8.0, 9.0}), false)))
		fmt.Println(fmt.Sprint(max_subarray_sum(func(v any) []float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []float64{}
				}
				out := make([]float64, len(arr))
				for i, x := range arr {
					out[i] = x.(float64)
				}
				return out
			}
			return v.([]float64)
		}([]float64{0.0, 0.0}), false)))
		fmt.Println(fmt.Sprint(max_subarray_sum(func(v any) []float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []float64{}
				}
				out := make([]float64, len(arr))
				for i, x := range arr {
					out[i] = x.(float64)
				}
				return out
			}
			return v.([]float64)
		}([]float64{(0 - 1.0), 0.0, 1.0}), false)))
		fmt.Println(fmt.Sprint(max_subarray_sum(func(v any) []float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []float64{}
				}
				out := make([]float64, len(arr))
				for i, x := range arr {
					out[i] = x.(float64)
				}
				return out
			}
			return v.([]float64)
		}([]float64{1.0, 2.0, 3.0, 4.0, (0 - 2.0)}), false)))
		fmt.Println(fmt.Sprint(max_subarray_sum(func(v any) []float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []float64{}
				}
				out := make([]float64, len(arr))
				for i, x := range arr {
					out[i] = x.(float64)
				}
				return out
			}
			return v.([]float64)
		}([]float64{(0 - 2.0), 1.0, (0 - 3.0), 4.0, (0 - 1.0), 2.0, 1.0, (0 - 5.0), 4.0}), false)))
		fmt.Println(fmt.Sprint(max_subarray_sum(func(v any) []float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []float64{}
				}
				out := make([]float64, len(arr))
				for i, x := range arr {
					out[i] = x.(float64)
				}
				return out
			}
			return v.([]float64)
		}([]float64{2.0, 3.0, (0 - 9.0), 8.0, (0 - 2.0)}), false)))
		fmt.Println(fmt.Sprint(max_subarray_sum(func(v any) []float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []float64{}
				}
				out := make([]float64, len(arr))
				for i, x := range arr {
					out[i] = x.(float64)
				}
				return out
			}
			return v.([]float64)
		}([]float64{(0 - 2.0), (0 - 3.0), (0 - 1.0), (0 - 4.0), (0 - 6.0)}), false)))
		fmt.Println(fmt.Sprint(max_subarray_sum(func(v any) []float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []float64{}
				}
				out := make([]float64, len(arr))
				for i, x := range arr {
					out[i] = x.(float64)
				}
				return out
			}
			return v.([]float64)
		}([]float64{(0 - 2.0), (0 - 3.0), (0 - 1.0), (0 - 4.0), (0 - 6.0)}), true)))
		empty = []float64{}
		fmt.Println(fmt.Sprint(max_subarray_sum(func(v any) []float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []float64{}
				}
				out := make([]float64, len(arr))
				for i, x := range arr {
					out[i] = x.(float64)
				}
				return out
			}
			return v.([]float64)
		}(empty), false)))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
