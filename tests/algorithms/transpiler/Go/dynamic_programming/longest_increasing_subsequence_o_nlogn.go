//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-14 22:58:17 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		return
	}
	s[idx] = v
}

func ceil_index(v []int, left int, right int, key int) int {
	var l int = left
	_ = l
	var r int = right
	_ = r
	for (r - l) > 1 {
		var middle int = ((l + r) / 2)
		_ = middle
		if _index(v, middle) >= key {
			r = middle
		} else {
			l = middle
		}
	}
	return r
}

func longest_increasing_subsequence_length(v []int) int {
	if len(v) == 0 {
		return 0
	}
	var tail []int = []int{}
	_ = tail
	var i int = 0
	_ = i
	for i < len(v) {
		tail = append(tail, 0)
		i = (i + 1)
	}
	var length int = 1
	_ = length
	_setIndex(tail, 0, _index(v, 0))
	var j int = 1
	_ = j
	for j < len(v) {
		if _index(v, j) < _index(tail, 0) {
			_setIndex(tail, 0, _index(v, j))
		} else {
			if _index(v, j) > _index(tail, (length-1)) {
				_setIndex(tail, length, _index(v, j))
				length = (length + 1)
			} else {
				var idx int = ceil_index(func(v any) []int {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]int); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []int{}
						}
						out := make([]int, len(arr))
						for i, x := range arr {
							out[i] = x.(int)
						}
						return out
					}
					return v.([]int)
				}(tail), (0 - 1), (length - 1), _index(v, j))
				_ = idx
				_setIndex(tail, idx, _index(v, j))
			}
		}
		j = (j + 1)
	}
	return length
}

func mochiMain() {
	var example1 []int = []int{2, 5, 3, 7, 11, 8, 10, 13, 6}
	_ = example1
	var example2 []int = []int{}
	_ = example2
	var example3 []int = []int{0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15}
	_ = example3
	var example4 []int = []int{5, 4, 3, 2, 1}
	_ = example4
	fmt.Println(longest_increasing_subsequence_length(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(example1)))
	fmt.Println(longest_increasing_subsequence_length(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(example2)))
	fmt.Println(longest_increasing_subsequence_length(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(example3)))
	fmt.Println(longest_increasing_subsequence_length(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(example4)))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
