//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-15 06:48:51 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		return
	}
	s[idx] = v
}

func key(state string, obs string) string {
	return ((state + "|") + obs)
}

func viterbi(observations []string, states []string, start_p map[string]float64, trans_p map[string]map[string]float64, emit_p map[string]map[string]float64) []string {
	if (len(observations) == 0) || (len(states) == 0) {
		panic("empty parameters")
	}
	var probs map[string]float64 = map[string]float64{}
	_ = probs
	var ptrs map[string]string = map[string]string{}
	_ = ptrs
	var first_obs string = _index(observations, 0)
	_ = first_obs
	var i int = 0
	_ = i
	for i < len(states) {
		var state string = _index(states, i)
		_ = state
		probs[key(state, first_obs)] = (start_p[state] * emit_p[state][first_obs])
		ptrs[key(state, first_obs)] = ""
		i = (i + 1)
	}
	var t int = 1
	_ = t
	for t < len(observations) {
		var obs string = _index(observations, t)
		_ = obs
		var j int = 0
		_ = j
		for j < len(states) {
			var state string = _index(states, j)
			_ = state
			var max_prob float64 = (0 - 1.0)
			_ = max_prob
			var prev_state string = ""
			_ = prev_state
			var k int = 0
			_ = k
			for k < len(states) {
				var state0 string = _index(states, k)
				_ = state0
				var obs0 string = _index(observations, (t - 1))
				_ = obs0
				var prob_prev float64 = probs[key(state0, obs0)]
				_ = prob_prev
				var prob float64 = ((prob_prev * trans_p[state0][state]) * emit_p[state][obs])
				_ = prob
				if prob > max_prob {
					max_prob = prob
					prev_state = state0
				}
				k = (k + 1)
			}
			probs[key(state, obs)] = max_prob
			ptrs[key(state, obs)] = prev_state
			j = (j + 1)
		}
		t = (t + 1)
	}
	var path []string = []string{}
	_ = path
	var n int = 0
	_ = n
	for n < len(observations) {
		path = append(path, "")
		n = (n + 1)
	}
	var last_obs string = _index(observations, (len(observations) - 1))
	_ = last_obs
	var max_final float64 = (0 - 1.0)
	_ = max_final
	var last_state string = ""
	_ = last_state
	var m int = 0
	_ = m
	for m < len(states) {
		var state string = _index(states, m)
		_ = state
		var prob float64 = probs[key(state, last_obs)]
		_ = prob
		if prob > max_final {
			max_final = prob
			last_state = state
		}
		m = (m + 1)
	}
	var last_index int = (len(observations) - 1)
	_ = last_index
	_setIndex(path, last_index, last_state)
	var idx int = last_index
	_ = idx
	for idx > 0 {
		var obs string = _index(observations, idx)
		_ = obs
		var prev string = ptrs[key(_index(path, idx), obs)]
		_ = prev
		_setIndex(path, (idx - 1), prev)
		idx = (idx - 1)
	}
	return path
}

func join_words(words []string) string {
	var res string = ""
	_ = res
	var i int = 0
	_ = i
	for i < len(words) {
		if i > 0 {
			res = (res + " ")
		}
		res = (res + _index(words, i))
		i = (i + 1)
	}
	return res
}

var observations []string

var states []string

var start_p map[string]float64

var trans_p map[string]map[string]float64

var emit_p map[string]map[string]float64

var result []string

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		observations = []string{"normal", "cold", "dizzy"}
		states = []string{"Healthy", "Fever"}
		start_p = map[string]float64{"Healthy": 0.6, "Fever": 0.4}
		trans_p = map[string]map[string]float64{"Healthy": map[string]float64{"Healthy": 0.7, "Fever": 0.3}, "Fever": map[string]float64{"Healthy": 0.4, "Fever": 0.6}}
		emit_p = map[string]map[string]float64{"Healthy": map[string]float64{"normal": 0.5, "cold": 0.4, "dizzy": 0.1}, "Fever": map[string]float64{"normal": 0.1, "cold": 0.3, "dizzy": 0.6}}
		result = viterbi(func(v any) []string {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]string); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []string{}
				}
				out := make([]string, len(arr))
				for i, x := range arr {
					out[i] = fmt.Sprint(x)
				}
				return out
			}
			return v.([]string)
		}(observations), func(v any) []string {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]string); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []string{}
				}
				out := make([]string, len(arr))
				for i, x := range arr {
					out[i] = fmt.Sprint(x)
				}
				return out
			}
			return v.([]string)
		}(states), start_p, trans_p, emit_p)
		fmt.Println(join_words(func(v any) []string {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]string); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []string{}
				}
				out := make([]string, len(arr))
				for i, x := range arr {
					out[i] = fmt.Sprint(x)
				}
				return out
			}
			return v.([]string)
		}(result)))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
