//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-15 06:48:02 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		return
	}
	s[idx] = v
}

func longest_common_substring(text1 string, text2 string) string {
	if (len(text1) == 0) || (len(text2) == 0) {
		return ""
	}
	var m int = len(text1)
	_ = m
	var n int = len(text2)
	_ = n
	var dp [][]int = [][]int{}
	_ = dp
	var i int = 0
	_ = i
	for i < (m + 1) {
		var row []int = []int{}
		_ = row
		var j int = 0
		_ = j
		for j < (n + 1) {
			row = append(row, 0)
			j = (j + 1)
		}
		dp = append(dp, row)
		i = (i + 1)
	}
	var end_pos int = 0
	_ = end_pos
	var max_len int = 0
	_ = max_len
	var ii int = 1
	_ = ii
	for ii <= m {
		var jj int = 1
		_ = jj
		for jj <= n {
			if _substr(text1, (ii-1), ii) == _substr(text2, (jj-1), jj) {
				_setIndex(_index(dp, ii), jj, (1 + _index(_index(dp, (ii-1)), (jj-1))))
				if _index(_index(dp, ii), jj) > max_len {
					max_len = _index(_index(dp, ii), jj)
					end_pos = ii
				}
			}
			jj = (jj + 1)
		}
		ii = (ii + 1)
	}
	return _substr(text1, (end_pos - max_len), end_pos)
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(longest_common_substring("abcdef", "xabded"))
		fmt.Println("\n")
		fmt.Println(longest_common_substring("zxabcdezy", "yzabcdezx"))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
