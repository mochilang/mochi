//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-14 22:42:38 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _mod(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func bitwise_and(a int, b int) int {
	var result int = 0
	_ = result
	var bit int = 1
	_ = bit
	var x int = a
	_ = x
	var y int = b
	_ = y
	for (x > 0) || (y > 0) {
		var abit int = _mod(x, 2)
		_ = abit
		var bbit int = _mod(y, 2)
		_ = bbit
		if (abit == 1) && (bbit == 1) {
			result = (result + bit)
		}
		x = (x / 2)
		y = (y / 2)
		bit = (bit * 2)
	}
	return result
}

func list_of_submasks(mask int) []int {
	if mask <= 0 {
		panic(("mask needs to be positive integer, your input " + fmt.Sprint(mask)))
	}
	var all_submasks []int = []int{}
	_ = all_submasks
	var submask int = mask
	_ = submask
	for submask != 0 {
		all_submasks = append(all_submasks, submask)
		submask = bitwise_and((submask - 1), mask)
	}
	return all_submasks
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(fmt.Sprint(list_of_submasks(15)))
		fmt.Println(fmt.Sprint(list_of_submasks(13)))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
