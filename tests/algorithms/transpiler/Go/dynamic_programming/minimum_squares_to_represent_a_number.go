//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-15 06:48:28 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		return
	}
	s[idx] = v
}

func make_list(len int, value int) []int {
	var arr []int = []int{}
	_ = arr
	var i int = 0
	_ = i
	for i < len {
		arr = append(arr, value)
		i = (i + 1)
	}
	return arr
}

func int_sqrt(n int) int {
	var r int = 0
	_ = r
	for ((r + 1) * (r + 1)) <= n {
		r = (r + 1)
	}
	return r
}

func minimum_squares_to_represent_a_number(number int) int {
	if number < 0 {
		panic("the value of input must not be a negative number")
	}
	if number == 0 {
		return 1
	}
	var answers []int = make_list((number + 1), (0 - 1))
	_ = answers
	_setIndex(answers, 0, 0)
	var i int = 1
	_ = i
	for i <= number {
		var answer int = i
		_ = answer
		var root int = int_sqrt(i)
		_ = root
		var j int = 1
		_ = j
		for j <= root {
			var current_answer int = (1 + _index(answers, (i-(j*j))))
			_ = current_answer
			if current_answer < answer {
				answer = current_answer
			}
			j = (j + 1)
		}
		_setIndex(answers, i, answer)
		i = (i + 1)
	}
	return _index(answers, number)
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(minimum_squares_to_represent_a_number(25))
		fmt.Println(minimum_squares_to_represent_a_number(21))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
