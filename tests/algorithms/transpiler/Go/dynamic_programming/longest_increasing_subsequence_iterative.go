//go:build ignore

// Generated by Mochi v0.10.61 on 2025-08-08 17:58:10 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	s[idx] = v
}

func copy_list(xs []int) []int {
	var res []int = []int{}
	_ = res
	var i int = 0
	_ = i
	for i < len(xs) {
		res = append(res, _index(xs, i))
		i = (i + 1)
	}
	return res
}

func longest_subsequence(arr []int) []int {
	n := len(arr)
	_ = n
	var lis [][]int = [][]int{}
	_ = lis
	var i int = 0
	_ = i
	for i < n {
		var single []int = []int{}
		_ = single
		single = append(single, _index(arr, i))
		lis = append(lis, single)
		i = (i + 1)
	}
	i = 1
	for i < n {
		var prev int = 0
		_ = prev
		for prev < i {
			if (int(_index(arr, prev)) <= int(_index(arr, i))) && ((len(_index(lis, prev)) + 1) > len(_index(lis, i))) {
				temp := copy_list(func(v any) []int {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]int); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []int{}
						}
						out := make([]int, len(arr))
						for i, x := range arr {
							out[i] = x.(int)
						}
						return out
					}
					return v.([]int)
				}(_index(lis, prev)))
				_ = temp
				temp2 := append(temp, _index(arr, i))
				_ = temp2
				_setIndex(lis, i, temp2)
			}
			prev = (prev + 1)
		}
		i = (i + 1)
	}
	var result []int = []int{}
	_ = result
	i = 0
	for i < n {
		if len(_index(lis, i)) > len(result) {
			result = _index(lis, i)
		}
		i = (i + 1)
	}
	return result
}

func mochiMain() {
	fmt.Println(fmt.Sprint(longest_subsequence(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}([]int{func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(10), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(22), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(9), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(33), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(21), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(50), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(41), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(60), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(80)}))))
	fmt.Println(fmt.Sprint(longest_subsequence(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}([]int{func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(4), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(8), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(7), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(5), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(1), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(12), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(2), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(3), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(9)}))))
	fmt.Println(fmt.Sprint(longest_subsequence(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}([]int{func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(9), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(8), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(7), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(6), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(5), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(7)}))))
	fmt.Println(fmt.Sprint(longest_subsequence(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}([]int{func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(28), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(26), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(12), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(23), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(35), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(39)}))))
	fmt.Println(fmt.Sprint(longest_subsequence(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}([]int{func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(1), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(1), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(1)}))))
	fmt.Println(fmt.Sprint(longest_subsequence(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}([]int{}))))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
