//go:build ignore

// Generated by Mochi v0.10.64 on 2025-08-13 16:04:21 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	s[idx] = v
}

func make_list(len int, value int) []int {
	var arr []int = []int{}
	_ = arr
	var i int = 0
	_ = i
	for i < len {
		arr = append(arr, value)
		i = (i + 1)
	}
	return arr
}

func trapped_rainwater(heights []int) int {
	if len(heights) == 0 {
		return 0
	}
	var i int = 0
	_ = i
	for i < len(heights) {
		if int(_index(heights, i)) < 0 {
			panic("No height can be negative")
		}
		i = (i + 1)
	}
	var length int = len(heights)
	_ = length
	var left_max []int = make_list(length, 0)
	_ = left_max
	_setIndex(left_max, 0, _index(heights, 0))
	i = 1
	for i < length {
		if int(_index(heights, i)) > int(_index(left_max, (i-1))) {
			_setIndex(left_max, i, _index(heights, i))
		} else {
			_setIndex(left_max, i, _index(left_max, (i-1)))
		}
		i = (i + 1)
	}
	var right_max []int = make_list(length, 0)
	_ = right_max
	var last int = (length - 1)
	_ = last
	_setIndex(right_max, last, _index(heights, last))
	i = (last - 1)
	for i >= 0 {
		if int(_index(heights, i)) > int(_index(right_max, (i+1))) {
			_setIndex(right_max, i, _index(heights, i))
		} else {
			_setIndex(right_max, i, _index(right_max, (i+1)))
		}
		i = (i - 1)
	}
	var total int = 0
	_ = total
	i = 0
	for i < length {
		var left int = _index(left_max, i)
		_ = left
		_ = left
		var right int = _index(right_max, i)
		_ = right
		_ = right
		var smaller int = func() int {
			if left < right {
				return left
			} else {
				return right
			}
		}()
		_ = smaller
		total = (total + (smaller - int(_index(heights, i))))
		i = (i + 1)
	}
	return total
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(fmt.Sprint(trapped_rainwater(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}([]int{0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1}))))
		fmt.Println(fmt.Sprint(trapped_rainwater(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}([]int{7, 1, 5, 3, 6, 4}))))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
