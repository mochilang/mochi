//go:build ignore

// Generated by Mochi v0.10.61 on 2025-08-08 17:57:43 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func climb_stairs(number_of_steps int) int {
	if number_of_steps <= 0 {
		panic("number_of_steps needs to be positive")
	}
	if number_of_steps == 1 {
		return 1
	}
	var previous int = 1
	_ = previous
	var current int = 1
	_ = current
	var i int = 0
	_ = i
	for i < (number_of_steps - 1) {
		var next int = (current + previous)
		_ = next
		previous = current
		current = next
		i = (i + 1)
	}
	return current
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(climb_stairs(3))
		fmt.Println(climb_stairs(1))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
