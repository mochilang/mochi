//go:build ignore

// Generated by Mochi v0.10.61 on 2025-08-08 18:15:07 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	s[idx] = v
}

func enforce_args(n int, prices []int) {
	if n < 0 {
		panic("n must be non-negative")
	}
	if n > len(prices) {
		panic("price list is shorter than n")
	}
}

func bottom_up_cut_rod(n int, prices []int) int {
	enforce_args(n, func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(prices))
	var max_rev []int
	_ = max_rev
	var i int = 0
	_ = i
	for i <= n {
		if i == 0 {
			max_rev = append(max_rev, 0)
		} else {
			max_rev = append(max_rev, (0 - 2147483648))
		}
		i = (i + 1)
	}
	var length int = 1
	_ = length
	for length <= n {
		var best int = _index(max_rev, length)
		_ = best
		var j int = 1
		_ = j
		for j <= length {
			var candidate int = (int(_index(prices, (j-1))) + int(_index(max_rev, (length-j))))
			_ = candidate
			if candidate > best {
				best = candidate
			}
			j = (j + 1)
		}
		_setIndex(max_rev, length, best)
		length = (length + 1)
	}
	return _index(max_rev, n)
}

var prices []int

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		prices = []int{func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(1), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(5), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(8), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(9), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(10), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(17), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(17), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(20), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(24), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(30)}
		fmt.Println(bottom_up_cut_rod(4, func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(prices)))
		fmt.Println(bottom_up_cut_rod(10, func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(prices)))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
