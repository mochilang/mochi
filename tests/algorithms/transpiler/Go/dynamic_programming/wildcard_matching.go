//go:build ignore

// Generated by Mochi v0.10.64 on 2025-08-13 07:26:06 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	s[idx] = v
}

func make_bool_list(n int) []bool {
	var row []bool = []bool{}
	_ = row
	var i int = 0
	_ = i
	for i < n {
		row = append(row, false)
		i = (i + 1)
	}
	return row
}

func make_bool_matrix(rows int, cols int) [][]bool {
	var matrix [][]bool = [][]bool{}
	_ = matrix
	var i int = 0
	_ = i
	for i < rows {
		matrix = append(matrix, make_bool_list(cols))
		i = (i + 1)
	}
	return matrix
}

func is_match(s string, p string) bool {
	var n int = len(s)
	_ = n
	var m int = len(p)
	_ = m
	var dp [][]bool = make_bool_matrix((n + 1), (m + 1))
	_ = dp
	_setIndex(_index(dp, 0), 0, true)
	var j int = 1
	_ = j
	for j <= m {
		if string([]rune(p)[(j-1):j]) == "*" {
			_setIndex(_index(dp, 0), j, _index(_index(dp, 0), (j-1)))
		}
		j = (j + 1)
	}
	var i int = 1
	_ = i
	for i <= n {
		var j2 int = 1
		_ = j2
		for j2 <= m {
			var pc string = string([]rune(p)[(j2 - 1):j2])
			_ = pc
			var sc string = string([]rune(s)[(i - 1):i])
			_ = sc
			if (pc == sc) || (pc == "?") {
				_setIndex(_index(dp, i), j2, _index(_index(dp, (i-1)), (j2-1)))
			} else {
				if pc == "*" {
					if _index(_index(dp, (i-1)), j2) || _index(_index(dp, i), (j2-1)) {
						_setIndex(_index(dp, i), j2, true)
					}
				}
			}
			j2 = (j2 + 1)
		}
		i = (i + 1)
	}
	return _index(_index(dp, n), m)
}

func print_bool(b bool) {
	if b {
		fmt.Println(true)
	} else {
		fmt.Println(false)
	}
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		print_bool(is_match("abc", "a*c"))
		print_bool(is_match("abc", "a*d"))
		print_bool(is_match("baaabab", "*****ba*****ab"))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
