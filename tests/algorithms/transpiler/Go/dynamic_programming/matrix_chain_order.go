//go:build ignore

// Generated by Mochi v0.10.61 on 2025-08-08 17:58:15 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"reflect"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	s[idx] = v
}

type MatrixChainResult struct {
	Matrix   [][]int `json:"matrix"`
	Solution [][]int `json:"solution"`
}

func make_2d(n int) [][]int {
	var res [][]int = [][]int{}
	_ = res
	var i int = 0
	_ = i
	for i < n {
		var row []int = []int{}
		_ = row
		var j int = 0
		_ = j
		for j < n {
			row = append(row, 0)
			j = (j + 1)
		}
		res = append(res, row)
		i = (i + 1)
	}
	return res
}

func matrix_chain_order(arr []int) MatrixChainResult {
	n := len(arr)
	_ = n
	var m [][]int = make_2d(n)
	_ = m
	var s [][]int = make_2d(n)
	_ = s
	var chain_length int = 2
	_ = chain_length
	for chain_length < n {
		var a int = 1
		_ = a
		for a < ((n - chain_length) + 1) {
			var b int = ((a + chain_length) - 1)
			_ = b
			_setIndex(_index(m, a), b, 1000000000)
			var c int = a
			_ = c
			for c < b {
				var cost int = ((int(_index(_index(m, a), c)) + int(_index(_index(m, (c+1)), b))) + ((int(_index(arr, (a-1))) * int(_index(arr, c))) * int(_index(arr, b))))
				_ = cost
				if cost < int(_index(_index(m, a), b)) {
					_setIndex(_index(m, a), b, cost)
					_setIndex(_index(s, a), b, c)
				}
				c = (c + 1)
			}
			a = (a + 1)
		}
		chain_length = (chain_length + 1)
	}
	return MatrixChainResult{
		Matrix:   m,
		Solution: s,
	}
}

func optimal_parenthesization(s [][]int, i int, j int) string {
	if i == j {
		return ("A" + fmt.Sprint(i))
	} else {
		left := optimal_parenthesization(func(v any) [][]int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]int{}
				}
				out := make([][]int, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []int {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]int); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []int{}
							}
							out := make([]int, len(arr))
							for i, x := range arr {
								out[i] = x.(int)
							}
							return out
						}
						return v.([]int)
					}(x)
				}
				return out
			}
			return v.([][]int)
		}(s), i, _index(_index(s, i), j))
		_ = left
		_ = left
		right := optimal_parenthesization(func(v any) [][]int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]int{}
				}
				out := make([][]int, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []int {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]int); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []int{}
							}
							out := make([]int, len(arr))
							for i, x := range arr {
								out[i] = x.(int)
							}
							return out
						}
						return v.([]int)
					}(x)
				}
				return out
			}
			return v.([][]int)
		}(s), (int(_index(_index(s, i), j)) + 1), j)
		_ = right
		_ = right
		return (((("( " + fmt.Sprint(left)) + " ") + fmt.Sprint(right)) + " )").(string)
	}
}

func mochiMain() {
	var arr []int = []int{func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(30), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(35), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(15), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(5), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(10), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(20), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(25)}
	_ = arr
	n := len(arr)
	_ = n
	res := matrix_chain_order(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(arr))
	_ = res
	m := MatrixChainResult(res).Matrix
	_ = m
	s := MatrixChainResult(res).Solution
	_ = s
	fmt.Println(("No. of Operation required: " + fmt.Sprint(func(v any) map[string]any {
		if v == nil {
			return nil
		}
		if vv, ok := v.(map[string]any); ok {
			return vv
		}
		return nil
	}(_index(func(v any) []any {
		if v == nil {
			return nil
		}
		if arr, ok := v.([]any); ok {
			return arr
		}
		rv := reflect.ValueOf(v)
		if rv.Kind() != reflect.Slice {
			return v.([]any)
		}
		n := rv.Len()
		out := make([]any, n)
		for i := 0; i < n; i++ {
			out[i] = rv.Index(i).Interface()
		}
		return out
	}(m), 1))[(n-1)])))
	seq := optimal_parenthesization(func(v any) [][]int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]int{}
			}
			out := make([][]int, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []int {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]int); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []int{}
						}
						out := make([]int, len(arr))
						for i, x := range arr {
							out[i] = x.(int)
						}
						return out
					}
					return v.([]int)
				}(x)
			}
			return out
		}
		return v.([][]int)
	}(func(v any) [][]int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]int{}
			}
			out := make([][]int, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []int {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]int); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []int{}
						}
						out := make([]int, len(arr))
						for i, x := range arr {
							out[i] = x.(int)
						}
						return out
					}
					return v.([]int)
				}(x)
			}
			return out
		}
		return v.([][]int)
	}(s)), 1, int((n - 1)))
	_ = seq
	fmt.Println(seq)
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
