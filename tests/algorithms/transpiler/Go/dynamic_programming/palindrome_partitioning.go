//go:build ignore

// Generated by Mochi v0.10.61 on 2025-08-08 18:15:01 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	s[idx] = v
}

func min_partitions(s string) int {
	n := len(s)
	_ = n
	var cut []int = []int{}
	_ = cut
	var i int = 0
	_ = i
	for i < n {
		cut = append(cut, 0)
		i = (i + 1)
	}
	var pal [][]bool = [][]bool{}
	_ = pal
	i = 0
	for i < n {
		var row []bool = []bool{}
		_ = row
		var j int = 0
		_ = j
		for j < n {
			row = append(row, false)
			j = (j + 1)
		}
		pal = append(pal, row)
		i = (i + 1)
	}
	i = 0
	for i < n {
		var mincut int = i
		_ = mincut
		var j int = 0
		_ = j
		for j <= i {
			if (string(_index([]rune(s), i)) == string(_index([]rune(s), j))) && (((i - j) < 2) || _index(_index(pal, (j+1)), (i-1))) {
				_setIndex(_index(pal, j), i, true)
				if j == 0 {
					mincut = 0
				} else {
					var candidate int = (int(_index(cut, (j-1))) + 1)
					_ = candidate
					if candidate < mincut {
						mincut = candidate
					}
				}
			}
			j = (j + 1)
		}
		_setIndex(cut, i, mincut)
		i = (i + 1)
	}
	return _index(cut, (n - 1))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(min_partitions("aab"))
		fmt.Println(min_partitions("aaa"))
		fmt.Println(min_partitions("ababbbabbababa"))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
