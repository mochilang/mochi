//go:build ignore

// Generated by Mochi v0.10.61 on 2025-08-08 17:57:51 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _mod(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func fizz_buzz(number int, iterations int) string {
	if number < 1 {
		panic("starting number must be an integer and be more than 0")
	}
	if iterations < 1 {
		panic("Iterations must be done more than 0 times to play FizzBuzz")
	}
	var out string = ""
	_ = out
	var n int = number
	_ = n
	for n <= iterations {
		if _mod(n, 3) == 0 {
			out = (out + "Fizz")
		}
		if _mod(n, 5) == 0 {
			out = (out + "Buzz")
		}
		if (_mod(n, 3) != 0) && (_mod(n, 5) != 0) {
			out = (out + fmt.Sprint(n))
		}
		out = (out + " ")
		n = (n + 1)
	}
	return out
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(fizz_buzz(1, 7))
		fmt.Println(fizz_buzz(1, 15))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
