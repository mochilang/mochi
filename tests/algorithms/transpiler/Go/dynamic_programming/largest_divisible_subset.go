//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-15 06:47:59 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _mod(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		return
	}
	s[idx] = v
}

func sort_list(nums []int) []int {
	var arr []int = nums
	_ = arr
	var i int = 1
	_ = i
	for i < len(arr) {
		var key int = _index(arr, i)
		_ = key
		var j int = (i - 1)
		_ = j
		for (j >= 0) && (_index(arr, j) > key) {
			_setIndex(arr, (j + 1), _index(arr, j))
			j = (j - 1)
		}
		_setIndex(arr, (j + 1), key)
		i = (i + 1)
	}
	return arr
}

func largest_divisible_subset(items []int) []int {
	if len(items) == 0 {
		return func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}([]int{})
	}
	var nums []int = sort_list(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(items))
	_ = nums
	var n int = len(nums)
	_ = n
	var memo []int = []int{}
	_ = memo
	var prev []int = []int{}
	_ = prev
	var i int = 0
	_ = i
	for i < n {
		memo = append(memo, 1)
		prev = append(prev, i)
		i = (i + 1)
	}
	i = 0
	for i < n {
		var j int = 0
		_ = j
		for j < i {
			if ((_index(nums, j) == 0) || (_mod(_index(nums, i), _index(nums, j)) == 0)) && ((_index(memo, j) + 1) > _index(memo, i)) {
				_setIndex(memo, i, (_index(memo, j) + 1))
				_setIndex(prev, i, j)
			}
			j = (j + 1)
		}
		i = (i + 1)
	}
	var ans int = (0 - 1)
	_ = ans
	var last_index int = (0 - 1)
	_ = last_index
	i = 0
	for i < n {
		if _index(memo, i) > ans {
			ans = _index(memo, i)
			last_index = i
		}
		i = (i + 1)
	}
	if last_index == (0 - 1) {
		return func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}([]int{})
	}
	var result []int = []int{func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(_index(nums, last_index))}
	_ = result
	for _index(prev, last_index) != last_index {
		last_index = _index(prev, last_index)
		result = append(result, _index(nums, last_index))
	}
	return result
}

func mochiMain() {
	var items []int = []int{1, 16, 7, 8, 4}
	_ = items
	var subset []int = largest_divisible_subset(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(items))
	_ = subset
	fmt.Println((((("The longest divisible subset of " + fmt.Sprint(items)) + " is ") + fmt.Sprint(subset)) + "."))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
