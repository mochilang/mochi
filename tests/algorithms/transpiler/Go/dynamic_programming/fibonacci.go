//go:build ignore

// Generated by Mochi v0.10.61 on 2025-08-08 17:57:50 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

type Fibonacci struct {
	Sequence []int `json:"sequence"`
}

type FibGetResult struct {
	Fib    Fibonacci `json:"fib"`
	Values []int     `json:"values"`
}

func create_fibonacci() Fibonacci {
	return Fibonacci{
		Sequence: []int{func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(0), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(1)},
	}
}

func fib_get(f Fibonacci, index int) FibGetResult {
	var seq []int = f.Sequence
	_ = seq
	for len(seq) < index {
		var next int = (int(_index(seq, (len(seq)-1))) + int(_index(seq, (len(seq)-2))))
		_ = next
		seq = append(seq, next)
	}
	f.Sequence = seq
	var result []int = []int{}
	_ = result
	var i int = 0
	_ = i
	for i < index {
		result = append(result, _index(seq, i))
		i = (i + 1)
	}
	return FibGetResult{
		Fib:    f,
		Values: result,
	}
}

func mochiMain() {
	var fib Fibonacci = create_fibonacci()
	_ = fib
	var res FibGetResult = fib_get(fib, 10)
	_ = res
	fib = res.Fib
	fmt.Println(fmt.Sprint(res.Values))
	res = fib_get(fib, 5)
	fib = res.Fib
	fmt.Println(fmt.Sprint(res.Values))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
