//go:build ignore

// Generated by Mochi v0.10.70 on 2025-08-22 23:16:24 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func fibonacci(k int) int {
	if k < 0 {
		panic("k must be >= 0")
	}
	var a int = 0
	_ = a
	var b int = 1
	_ = b
	var i int = 0
	_ = i
	for i < k {
		var tmp int = (a + b)
		_ = tmp
		a = b
		b = tmp
		i = (i + 1)
	}
	return a
}

func min_int(a int, b int) int {
	if a < b {
		return a
	} else {
		return b
	}
}

func fibonacci_search(arr []int, val int) int {
	var n int = len(arr)
	_ = n
	var m int = 0
	_ = m
	for fibonacci(m) < n {
		m = (m + 1)
	}
	var offset int = 0
	_ = offset
	for m > 0 {
		var i int = min_int((offset + fibonacci((m - 1))), (n - 1))
		_ = i
		var item int = _index(arr, i)
		_ = item
		if item == val {
			return i
		} else {
			if val < item {
				m = (m - 1)
			} else {
				offset = (offset + fibonacci((m - 1)))
				m = (m - 2)
			}
		}
	}
	return (0 - 1)
}

var example1 []int

var example2 []int

var example3 []int

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		example1 = []int{4, 5, 6, 7}
		example2 = []int{func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}((0 - 18)), 2}
		example3 = []int{0, 5, 10, 15, 20, 25, 30}
		fmt.Println(fmt.Sprint(fibonacci_search(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(example1), 4)))
		fmt.Println(fmt.Sprint(fibonacci_search(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(example1), (0 - 10))))
		fmt.Println(fmt.Sprint(fibonacci_search(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(example2), (0 - 18))))
		fmt.Println(fmt.Sprint(fibonacci_search(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(example3), 15)))
		fmt.Println(fmt.Sprint(fibonacci_search(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(example3), 17)))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
