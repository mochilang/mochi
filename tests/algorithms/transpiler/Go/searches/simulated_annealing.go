//go:build ignore

// Generated by Mochi v0.10.70 on 2025-08-22 23:16:44 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	math "math"
	"os"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

func _modi(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

type SearchProblem struct {
	X    float64 `json:"x"`
	Y    float64 `json:"y"`
	Step float64 `json:"step"`
}

func score(p SearchProblem, f func(float64, float64) float64) float64 {
	return f(p.X, p.Y)
}

func get_neighbors(p SearchProblem) []SearchProblem {
	var s float64 = p.Step
	_ = s
	var ns []SearchProblem = []SearchProblem{}
	_ = ns
	ns = append(ns, SearchProblem{
		X:    (p.X - s),
		Y:    (p.Y - s),
		Step: s,
	})
	ns = append(ns, SearchProblem{
		X:    (p.X - s),
		Y:    p.Y,
		Step: s,
	})
	ns = append(ns, SearchProblem{
		X:    (p.X - s),
		Y:    (p.Y + s),
		Step: s,
	})
	ns = append(ns, SearchProblem{
		X:    p.X,
		Y:    (p.Y - s),
		Step: s,
	})
	ns = append(ns, SearchProblem{
		X:    p.X,
		Y:    (p.Y + s),
		Step: s,
	})
	ns = append(ns, SearchProblem{
		X:    (p.X + s),
		Y:    (p.Y - s),
		Step: s,
	})
	ns = append(ns, SearchProblem{
		X:    (p.X + s),
		Y:    p.Y,
		Step: s,
	})
	ns = append(ns, SearchProblem{
		X:    (p.X + s),
		Y:    (p.Y + s),
		Step: s,
	})
	return ns
}

func remove_at(lst []SearchProblem, idx int) []SearchProblem {
	var res []SearchProblem = []SearchProblem{}
	_ = res
	var i int = 0
	_ = i
	for i < len(lst) {
		if i != idx {
			res = append(res, _index(lst, i))
		}
		i = (i + 1)
	}
	return res
}

var seed int

func rand() int {
	var _t int = _now()
	_ = _t
	_ = _t
	seed = _modi(((seed * 1103515245) + 12345), 2147483648)
	return seed
}

func random_float() float64 {
	return (float64(float64(rand())) / float64(2147483648.0))
}

func randint(low int, high int) int {
	return (_modi(rand(), ((high-low)+1)) + low)
}

func expApprox(x float64) float64 {
	var y float64 = x
	_ = y
	var is_neg bool = false
	_ = is_neg
	if x < 0.0 {
		is_neg = true
		y = (0 - x)
	}
	var term float64 = 1.0
	_ = term
	var sum float64 = 1.0
	_ = sum
	var n int = 1
	_ = n
	for n < 30 {
		term = (float64((term * y)) / float64(n))
		sum = (sum + term)
		n = (n + 1)
	}
	if is_neg {
		return (float64(1.0) / float64(sum))
	}
	return sum
}

func simulated_annealing(search_prob SearchProblem, f func(float64, float64) float64, find_max bool, max_x float64, min_x float64, max_y float64, min_y float64, start_temp float64, rate_of_decrease float64, threshold_temp float64) SearchProblem {
	var search_end bool = false
	_ = search_end
	var current_state SearchProblem = search_prob
	_ = current_state
	var current_temp float64 = start_temp
	_ = current_temp
	var best_state SearchProblem = current_state
	_ = best_state
	for !search_end {
		var current_score float64 = score(current_state, f)
		_ = current_score
		if score(best_state, f) < current_score {
			best_state = current_state
		}
		var next_state SearchProblem = current_state
		_ = next_state
		var found_next bool = false
		_ = found_next
		var neighbors []SearchProblem = get_neighbors(current_state)
		_ = neighbors
		for !found_next && (len(neighbors) > 0) {
			var idx int = randint(0, (len(neighbors) - 1))
			_ = idx
			var picked_neighbor SearchProblem = _index(neighbors, idx)
			_ = picked_neighbor
			neighbors = remove_at(func(v any) []SearchProblem {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]SearchProblem); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []SearchProblem{}
					}
					out := make([]SearchProblem, len(arr))
					for i, x := range arr {
						out[i] = x.(SearchProblem)
					}
					return out
				}
				return v.([]SearchProblem)
			}(neighbors), idx)
			if (((picked_neighbor.X > max_x) || (picked_neighbor.X < min_x)) || (picked_neighbor.Y > max_y)) || (picked_neighbor.Y < min_y) {
				continue
			}
			var change float64 = (score(picked_neighbor, f) - current_score)
			_ = change
			if !find_max {
				change = (0 - change)
			}
			if change > 0.0 {
				next_state = picked_neighbor
				found_next = true
			} else {
				var probability float64 = expApprox((float64(change) / float64(current_temp)))
				_ = probability
				if random_float() < probability {
					next_state = picked_neighbor
					found_next = true
				}
			}
		}
		current_temp = (current_temp - (current_temp * rate_of_decrease))
		if (current_temp < threshold_temp) || !found_next {
			search_end = true
		} else {
			current_state = next_state
		}
	}
	return best_state
}

func test_f1(x float64, y float64) float64 {
	return ((x * x) + (y * y))
}

func test_f2(x float64, y float64) float64 {
	return (((3.0 * x) * x) - (6.0 * y))
}

func mochiMain() {
	var prob1 SearchProblem = SearchProblem{
		X:    12.0,
		Y:    47.0,
		Step: 1.0,
	}
	_ = prob1
	var min_state SearchProblem = simulated_annealing(prob1, test_f1, false, 100.0, 5.0, 50.0, (0 - 5.0), 100.0, 0.01, 1.0)
	_ = min_state
	_ = min_state
	fmt.Println("min1", func() string {
		f := float64(test_f1(min_state.X, min_state.Y))
		if f == 0 && math.Signbit(f) {
			return "-0"
		}
		if math.Abs(f-float64(int(f))) < 1e-9 {
			return fmt.Sprintf("%.1f", f)
		}
		return fmt.Sprint(f)
	}())
	var prob2 SearchProblem = SearchProblem{
		X:    12.0,
		Y:    47.0,
		Step: 1.0,
	}
	_ = prob2
	var max_state SearchProblem = simulated_annealing(prob2, test_f1, true, 100.0, 5.0, 50.0, (0 - 5.0), 100.0, 0.01, 1.0)
	_ = max_state
	_ = max_state
	fmt.Println("max1", func() string {
		f := float64(test_f1(max_state.X, max_state.Y))
		if f == 0 && math.Signbit(f) {
			return "-0"
		}
		if math.Abs(f-float64(int(f))) < 1e-9 {
			return fmt.Sprintf("%.1f", f)
		}
		return fmt.Sprint(f)
	}())
	var prob3 SearchProblem = SearchProblem{
		X:    3.0,
		Y:    4.0,
		Step: 1.0,
	}
	_ = prob3
	var min_state2 SearchProblem = simulated_annealing(prob3, test_f2, false, 1000.0, (0 - 1000.0), 1000.0, (0 - 1000.0), 100.0, 0.01, 1.0)
	_ = min_state2
	_ = min_state2
	fmt.Println("min2", func() string {
		f := float64(test_f2(min_state2.X, min_state2.Y))
		if f == 0 && math.Signbit(f) {
			return "-0"
		}
		if math.Abs(f-float64(int(f))) < 1e-9 {
			return fmt.Sprintf("%.1f", f)
		}
		return fmt.Sprint(f)
	}())
	var prob4 SearchProblem = SearchProblem{
		X:    3.0,
		Y:    4.0,
		Step: 1.0,
	}
	_ = prob4
	var max_state2 SearchProblem = simulated_annealing(prob4, test_f2, true, 1000.0, (0 - 1000.0), 1000.0, (0 - 1000.0), 100.0, 0.01, 1.0)
	_ = max_state2
	_ = max_state2
	fmt.Println("max2", func() string {
		f := float64(test_f2(max_state2.X, max_state2.Y))
		if f == 0 && math.Signbit(f) {
			return "-0"
		}
		if math.Abs(f-float64(int(f))) < 1e-9 {
			return fmt.Sprintf("%.1f", f)
		}
		return fmt.Sprint(f)
	}())
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		seed = 1
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
