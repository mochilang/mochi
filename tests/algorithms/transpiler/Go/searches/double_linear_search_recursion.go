//go:build ignore

// Generated by Mochi v0.10.63 on 2025-08-11 16:29:11 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

func search(list_data []int, key int, left int, right int) int {
	var r int = right
	_ = r
	if r == 0 {
		r = (len(list_data) - 1)
	}
	if left > r {
		return (0 - 1)
	} else {
		if int(_index(list_data, left)) == key {
			return left
		} else {
			if int(_index(list_data, r)) == key {
				return r
			} else {
				return search(func(v any) []int {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]int); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []int{}
						}
						out := make([]int, len(arr))
						for i, x := range arr {
							out[i] = x.(int)
						}
						return out
					}
					return v.([]int)
				}(list_data), key, (left + 1), (r - 1))
			}
		}
	}
}

func mochiMain() {
	fmt.Println(search(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}([]int{func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(0), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(1), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(2), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(3), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(4), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(5), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(6), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(7), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(8), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(9), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(10)}), 5, 0, 0))
	fmt.Println(search(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}([]int{func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(1), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(2), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(4), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(5), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(3)}), 4, 0, 0))
	fmt.Println(search(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}([]int{func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(1), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(2), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(4), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(5), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(3)}), 6, 0, 0))
	fmt.Println(search(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}([]int{func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(5)}), 5, 0, 0))
	fmt.Println(search(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}([]int{}), 1, 0, 0))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
