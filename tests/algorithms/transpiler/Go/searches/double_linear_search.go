//go:build ignore

// Generated by Mochi v0.10.70 on 2025-08-22 23:16:18 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func double_linear_search(array []int, search_item int) int {
	var start_ind int = 0
	_ = start_ind
	var end_ind int = (len(array) - 1)
	_ = end_ind
	for start_ind <= end_ind {
		if _index(array, start_ind) == search_item {
			return start_ind
		}
		if _index(array, end_ind) == search_item {
			return end_ind
		}
		start_ind = (start_ind + 1)
		end_ind = (end_ind - 1)
	}
	return (0 - 1)
}

func mochiMain() {
	var data []int = build_range(100)
	_ = data
	fmt.Println(fmt.Sprint(double_linear_search(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(data), 40)))
}

func build_range(n int) []int {
	var res []int = []int{}
	_ = res
	var i int = 0
	_ = i
	for i < n {
		res = append(res, i)
		i = (i + 1)
	}
	return res
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
