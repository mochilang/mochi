//go:build ignore

// Generated by Mochi v0.10.70 on 2025-08-22 23:16:22 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func is_sorted(xs []int) bool {
	var i int = 1
	_ = i
	for i < len(xs) {
		if _index(xs, (i-1)) > _index(xs, i) {
			return false
		}
		i = (i + 1)
	}
	return true
}

func exponential_search(arr []int, item int) int {
	if !is_sorted(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(arr)) {
		panic("sorted_collection must be sorted in ascending order")
	}
	if len(arr) == 0 {
		return (0 - 1)
	}
	if _index(arr, 0) == item {
		return 0
	}
	var bound int = 1
	_ = bound
	for (bound < len(arr)) && (_index(arr, bound) < item) {
		bound = (bound * 2)
	}
	var left int = (bound / 2)
	_ = left
	var right int = bound
	_ = right
	if right >= len(arr) {
		right = (len(arr) - 1)
	}
	for left <= right {
		var mid int = (left + ((right - left) / 2))
		_ = mid
		if _index(arr, mid) == item {
			return mid
		}
		if _index(arr, mid) > item {
			right = (mid - 1)
		} else {
			left = (mid + 1)
		}
	}
	return (0 - 1)
}

var __mochi_test_header_printed bool

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		if !__mochi_test_header_printed {
			fmt.Println("[94;1mtests/github/TheAlgorithms/Mochi/searches/exponential_search.mochi[0;22m")
			__mochi_test_header_printed = true
		}
		func() {
			func() {
				defer func() { recover() }()
				var arr []int = []int{0, 5, 7, 10, 15}
				_ = arr
				_ = arr
				_ = (exponential_search(func(v any) []int {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]int); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []int{}
						}
						out := make([]int, len(arr))
						for i, x := range arr {
							out[i] = x.(int)
						}
						return out
					}
					return v.([]int)
				}(arr), 6) == (0 - 1))
			}()
			fmt.Printf("   \x1b[33mtest\x1b[0m %s                   ... \x1b[32mok\x1b[0m (1.0ms)\n", "exponential search")
		}()

		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
