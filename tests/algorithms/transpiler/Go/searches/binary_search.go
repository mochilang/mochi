//go:build ignore

// Generated by Mochi v0.10.70 on 2025-08-22 23:16:15 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func is_sorted(arr []int) bool {
	var i int = 1
	_ = i
	for i < len(arr) {
		if _index(arr, (i-1)) > _index(arr, i) {
			return false
		}
		i = (i + 1)
	}
	return true
}

func binary_search(sorted_collection []int, item int) int {
	if !is_sorted(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(sorted_collection)) {
		return (0 - 1)
	}
	var left int = 0
	_ = left
	var right int = (len(sorted_collection) - 1)
	_ = right
	for left <= right {
		var midpoint int = (left + ((right - left) / 2))
		_ = midpoint
		var current_item int = _index(sorted_collection, midpoint)
		_ = current_item
		if current_item == item {
			return midpoint
		}
		if item < current_item {
			right = (midpoint - 1)
		} else {
			left = (midpoint + 1)
		}
	}
	return (0 - 1)
}

func binary_search_by_recursion(sorted_collection []int, item int, left int, right int) int {
	if right < left {
		return (0 - 1)
	}
	var midpoint int = (left + ((right - left) / 2))
	_ = midpoint
	if _index(sorted_collection, midpoint) == item {
		return midpoint
	}
	if _index(sorted_collection, midpoint) > item {
		return binary_search_by_recursion(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(sorted_collection), item, left, (midpoint - 1))
	}
	return binary_search_by_recursion(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(sorted_collection), item, (midpoint + 1), right)
}

func exponential_search(sorted_collection []int, item int) int {
	if !is_sorted(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(sorted_collection)) {
		return (0 - 1)
	}
	if len(sorted_collection) == 0 {
		return (0 - 1)
	}
	var bound int = 1
	_ = bound
	for (bound < len(sorted_collection)) && (_index(sorted_collection, bound) < item) {
		bound = (bound * 2)
	}
	var left int = (bound / 2)
	_ = left
	_ = left
	var right int = func() int {
		if len([]int{func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(bound), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}((len(sorted_collection) - 1))}) == 0 {
			return 0
		}
		m := []int{func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(bound), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}((len(sorted_collection) - 1))}[0]
		for _, n := range []int{func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(bound), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}((len(sorted_collection) - 1))}[1:] {
			if n < m {
				m = n
			}
		}
		return m
	}()
	_ = right
	_ = right
	return binary_search_by_recursion(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(sorted_collection), item, left, right)
}

func mochiMain() {
	var data []int = []int{0, 5, 7, 10, 15}
	_ = data
	fmt.Println(fmt.Sprint(binary_search(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(data), 0)))
	fmt.Println(fmt.Sprint(binary_search(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(data), 15)))
	fmt.Println(fmt.Sprint(binary_search(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(data), 5)))
	fmt.Println(fmt.Sprint(binary_search(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(data), 6)))
	fmt.Println(fmt.Sprint(binary_search_by_recursion(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(data), 0, 0, (len(data) - 1))))
	fmt.Println(fmt.Sprint(binary_search_by_recursion(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(data), 15, 0, (len(data) - 1))))
	fmt.Println(fmt.Sprint(binary_search_by_recursion(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(data), 5, 0, (len(data) - 1))))
	fmt.Println(fmt.Sprint(binary_search_by_recursion(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(data), 6, 0, (len(data) - 1))))
	fmt.Println(fmt.Sprint(exponential_search(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(data), 0)))
	fmt.Println(fmt.Sprint(exponential_search(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(data), 15)))
	fmt.Println(fmt.Sprint(exponential_search(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(data), 5)))
	fmt.Println(fmt.Sprint(exponential_search(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(data), 6)))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
