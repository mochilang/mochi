//go:build ignore

// Generated by Mochi v0.10.70 on 2025-08-22 23:16:49 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

var precision int

func lin_search(left int, right int, array []int, target int) int {
	var i int = left
	_ = i
	for i < right {
		if _index(array, i) == target {
			return i
		}
		i = (i + 1)
	}
	return (0 - 1)
}

func ite_ternary_search(array []int, target int) int {
	var left int = 0
	_ = left
	var right int = (len(array) - 1)
	_ = right
	for left <= right {
		if (right - left) < precision {
			var idx int = lin_search(left, (right + 1), func(v any) []int {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]int); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []int{}
					}
					out := make([]int, len(arr))
					for i, x := range arr {
						out[i] = x.(int)
					}
					return out
				}
				return v.([]int)
			}(array), target)
			_ = idx
			_ = idx
			return idx
		}
		var one_third int = (left + ((right - left) / 3))
		_ = one_third
		var two_third int = (right - ((right - left) / 3))
		_ = two_third
		if _index(array, one_third) == target {
			return one_third
		}
		if _index(array, two_third) == target {
			return two_third
		}
		if target < _index(array, one_third) {
			right = (one_third - 1)
		} else {
			if _index(array, two_third) < target {
				left = (two_third + 1)
			} else {
				left = (one_third + 1)
				right = (two_third - 1)
			}
		}
	}
	return (0 - 1)
}

func rec_ternary_search(left int, right int, array []int, target int) int {
	if left <= right {
		if (right - left) < precision {
			var idx int = lin_search(left, (right + 1), func(v any) []int {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]int); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []int{}
					}
					out := make([]int, len(arr))
					for i, x := range arr {
						out[i] = x.(int)
					}
					return out
				}
				return v.([]int)
			}(array), target)
			_ = idx
			_ = idx
			return idx
		}
		var one_third int = (left + ((right - left) / 3))
		_ = one_third
		var two_third int = (right - ((right - left) / 3))
		_ = two_third
		if _index(array, one_third) == target {
			return one_third
		}
		if _index(array, two_third) == target {
			return two_third
		}
		if target < _index(array, one_third) {
			return rec_ternary_search(left, (one_third - 1), func(v any) []int {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]int); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []int{}
					}
					out := make([]int, len(arr))
					for i, x := range arr {
						out[i] = x.(int)
					}
					return out
				}
				return v.([]int)
			}(array), target)
		}
		if _index(array, two_third) < target {
			return rec_ternary_search((two_third + 1), right, func(v any) []int {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]int); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []int{}
					}
					out := make([]int, len(arr))
					for i, x := range arr {
						out[i] = x.(int)
					}
					return out
				}
				return v.([]int)
			}(array), target)
		}
		return rec_ternary_search((one_third + 1), (two_third - 1), func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(array), target)
	}
	return (0 - 1)
}

func mochiMain() {
	var test_list []int = []int{0, 1, 2, 8, 13, 17, 19, 32, 42}
	_ = test_list
	fmt.Println(fmt.Sprint(ite_ternary_search(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(test_list), 3)))
	fmt.Println(fmt.Sprint(ite_ternary_search(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(test_list), 13)))
	fmt.Println(fmt.Sprint(rec_ternary_search(0, (len(test_list) - 1), func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(test_list), 3)))
	fmt.Println(fmt.Sprint(rec_ternary_search(0, (len(test_list) - 1), func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(test_list), 13)))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		precision = 10
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
