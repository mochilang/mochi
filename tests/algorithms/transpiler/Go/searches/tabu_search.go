//go:build ignore

// Generated by Mochi v0.10.70 on 2025-08-22 23:16:46 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"reflect"
	"runtime"
	"sort"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		return
	}
	s[idx] = v
}

type Solution struct {
	Path []string `json:"path"`
	Cost int      `json:"cost"`
}

type Swap struct {
	A string `json:"a"`
	B string `json:"b"`
}

func path_cost(path []string, graph map[string]map[string]int) int {
	var total int = 0
	_ = total
	var i int = 0
	_ = i
	for i < (len(path) - 1) {
		var u string = _index(path, i)
		_ = u
		var v string = _index(path, (i + 1))
		_ = v
		total = (total + graph[u][v])
		i = (i + 1)
	}
	return total
}

func generate_first_solution(graph map[string]map[string]int, start string) Solution {
	var path []string = []string{}
	_ = path
	var visiting string = start
	_ = visiting
	var total int = 0
	_ = total
	for len(path) < len(graph) {
		path = append(path, visiting)
		var best_node string = ""
		_ = best_node
		var best_cost int = 1000000
		_ = best_cost
		for _, n := range func() []string {
			keys := make([]string, 0, len(graph[visiting]))
			for k := range graph[visiting] {
				keys = append(keys, k)
			}
			sort.Slice(keys, func(i, j int) bool { return fmt.Sprint(keys[i]) < fmt.Sprint(keys[j]) })
			return keys
		}() {
			_ = n
			if !func() bool {
				v := reflect.ValueOf(path)
				if v.Kind() == reflect.Map {
					key := n
					return v.MapIndex(reflect.ValueOf(key)).IsValid()
				}
				if v.Kind() == reflect.Slice || v.Kind() == reflect.Array {
					for i := 0; i < v.Len(); i++ {
						if v.Index(i).Interface() == n {
							return true
						}
					}
				}
				return false
			}() && (graph[visiting][n] < best_cost) {
				best_cost = graph[visiting][n]
				best_node = n
			}
		}
		if best_node == "" {
			break
		}
		total = (total + best_cost)
		visiting = best_node
	}
	path = append(path, start)
	total = (total + graph[visiting][start])
	return Solution{
		Path: path,
		Cost: total,
	}
}

func copy_path(path []string) []string {
	var res []string = []string{}
	_ = res
	var i int = 0
	_ = i
	for i < len(path) {
		res = append(res, _index(path, i))
		i = (i + 1)
	}
	return res
}

func find_neighborhood(sol Solution, graph map[string]map[string]int) []Solution {
	var neighbors []Solution = []Solution{}
	_ = neighbors
	var i int = 1
	_ = i
	for i < (len(sol.Path) - 1) {
		var j int = 1
		_ = j
		for j < (len(sol.Path) - 1) {
			if i != j {
				var new_path []string = copy_path(func(v any) []string {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]string); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []string{}
						}
						out := make([]string, len(arr))
						for i, x := range arr {
							out[i] = fmt.Sprint(x)
						}
						return out
					}
					return v.([]string)
				}(sol.Path))
				_ = new_path
				var tmp string = _index(new_path, i)
				_ = tmp
				_setIndex(new_path, i, _index(new_path, j))
				_setIndex(new_path, j, tmp)
				var cost int = path_cost(func(v any) []string {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]string); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []string{}
						}
						out := make([]string, len(arr))
						for i, x := range arr {
							out[i] = fmt.Sprint(x)
						}
						return out
					}
					return v.([]string)
				}(new_path), graph)
				_ = cost
				neighbors = append(neighbors, Solution{
					Path: new_path,
					Cost: cost,
				})
			}
			j = (j + 1)
		}
		i = (i + 1)
	}
	return neighbors
}

func find_swap(a []string, b []string) Swap {
	var i int = 0
	_ = i
	for i < len(a) {
		if _index(a, i) != _index(b, i) {
			return Swap{
				A: _index(a, i),
				B: _index(b, i),
			}
		}
		i = (i + 1)
	}
	return Swap{
		A: "",
		B: "",
	}
}

func tabu_search(first Solution, graph map[string]map[string]int, iters int, size int) Solution {
	var solution Solution = first
	_ = solution
	var best Solution = first
	_ = best
	var tabu []Swap = []Swap{}
	_ = tabu
	var count int = 0
	_ = count
	for count < iters {
		var neighborhood []Solution = find_neighborhood(solution, graph)
		_ = neighborhood
		if len(neighborhood) == 0 {
			break
		}
		var best_neighbor Solution = _index(neighborhood, 0)
		_ = best_neighbor
		var best_move Swap = find_swap(func(v any) []string {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]string); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []string{}
				}
				out := make([]string, len(arr))
				for i, x := range arr {
					out[i] = fmt.Sprint(x)
				}
				return out
			}
			return v.([]string)
		}(solution.Path), func(v any) []string {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]string); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []string{}
				}
				out := make([]string, len(arr))
				for i, x := range arr {
					out[i] = fmt.Sprint(x)
				}
				return out
			}
			return v.([]string)
		}(best_neighbor.Path))
		_ = best_move
		var i int = 1
		_ = i
		for i < len(neighborhood) {
			var cand Solution = _index(neighborhood, i)
			_ = cand
			var move Swap = find_swap(func(v any) []string {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]string); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []string{}
					}
					out := make([]string, len(arr))
					for i, x := range arr {
						out[i] = fmt.Sprint(x)
					}
					return out
				}
				return v.([]string)
			}(solution.Path), func(v any) []string {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]string); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []string{}
					}
					out := make([]string, len(arr))
					for i, x := range arr {
						out[i] = fmt.Sprint(x)
					}
					return out
				}
				return v.([]string)
			}(cand.Path))
			_ = move
			var forbidden bool = false
			_ = forbidden
			var t int = 0
			_ = t
			for t < len(tabu) {
				if ((_index(tabu, t).A == move.A) && (_index(tabu, t).B == move.B)) || ((_index(tabu, t).A == move.B) && (_index(tabu, t).B == move.A)) {
					forbidden = true
				}
				t = (t + 1)
			}
			if (forbidden == false) && (cand.Cost < best_neighbor.Cost) {
				best_neighbor = cand
				best_move = move
			}
			i = (i + 1)
		}
		solution = best_neighbor
		tabu = append(tabu, best_move)
		if len(tabu) > size {
			var new_tab []Swap = []Swap{}
			_ = new_tab
			var j int = 1
			_ = j
			for j < len(tabu) {
				new_tab = append(new_tab, _index(tabu, j))
				j = (j + 1)
			}
			tabu = new_tab
		}
		if solution.Cost < best.Cost {
			best = solution
		}
		count = (count + 1)
	}
	return best
}

var graph map[string]map[string]int

var first Solution

var best Solution

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		graph = map[string]map[string]int{"a": map[string]int{"b": 20, "c": 18, "d": 22, "e": 26}, "b": map[string]int{"a": 20, "c": 10, "d": 11, "e": 12}, "c": map[string]int{"a": 18, "b": 10, "d": 23, "e": 24}, "d": map[string]int{"a": 22, "b": 11, "c": 23, "e": 40}, "e": map[string]int{"a": 26, "b": 12, "c": 24, "d": 40}}
		first = generate_first_solution(graph, "a")
		best = tabu_search(first, graph, 4, 3)
		fmt.Println(fmt.Sprint(best.Path))
		fmt.Println(fmt.Sprint(best.Cost))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
