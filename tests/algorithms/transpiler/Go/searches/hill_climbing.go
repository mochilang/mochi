//go:build ignore

// Generated by Mochi v0.10.70 on 2025-08-22 23:16:26 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func _floatEqual(a, b float64) bool {
	if a > b {
		return a-b < 1e-6
	}
	return b-a < 1e-6
}

type SearchProblem struct {
	X    float64                        `json:"x"`
	Y    float64                        `json:"y"`
	Step float64                        `json:"step"`
	F    func(float64, float64) float64 `json:"f"`
}

func score(sp SearchProblem) float64 {
	return sp.F(sp.X, sp.Y)
}

func neighbors(sp SearchProblem) []SearchProblem {
	var s float64 = sp.Step
	_ = s
	_ = s
	return []SearchProblem{SearchProblem{
		X:    (sp.X - s),
		Y:    (sp.Y - s),
		Step: s,
		F:    sp.F,
	}, SearchProblem{
		X:    (sp.X - s),
		Y:    sp.Y,
		Step: s,
		F:    sp.F,
	}, SearchProblem{
		X:    (sp.X - s),
		Y:    (sp.Y + s),
		Step: s,
		F:    sp.F,
	}, SearchProblem{
		X:    sp.X,
		Y:    (sp.Y - s),
		Step: s,
		F:    sp.F,
	}, SearchProblem{
		X:    sp.X,
		Y:    (sp.Y + s),
		Step: s,
		F:    sp.F,
	}, SearchProblem{
		X:    (sp.X + s),
		Y:    (sp.Y - s),
		Step: s,
		F:    sp.F,
	}, SearchProblem{
		X:    (sp.X + s),
		Y:    sp.Y,
		Step: s,
		F:    sp.F,
	}, SearchProblem{
		X:    (sp.X + s),
		Y:    (sp.Y + s),
		Step: s,
		F:    sp.F,
	}}
}

func equal_state(a SearchProblem, b SearchProblem) bool {
	return (_floatEqual(a.X, b.X) && _floatEqual(a.Y, b.Y))
}

func contains_state(lst []SearchProblem, sp SearchProblem) bool {
	var i int = 0
	_ = i
	for i < len(lst) {
		if equal_state(_index(lst, i), sp) {
			return true
		}
		i = (i + 1)
	}
	return false
}

func hill_climbing(sp SearchProblem, find_max bool, max_x float64, min_x float64, max_y float64, min_y float64, max_iter int) SearchProblem {
	var current SearchProblem = sp
	_ = current
	var visited []SearchProblem = []SearchProblem{}
	_ = visited
	var iterations int = 0
	_ = iterations
	var solution_found bool = false
	_ = solution_found
	for (solution_found == false) && (iterations < max_iter) {
		visited = append(visited, current)
		iterations = (iterations + 1)
		var current_score float64 = score(current)
		_ = current_score
		var neighs []SearchProblem = neighbors(current)
		_ = neighs
		var max_change float64 = (0 - 1000000000000000000.0)
		_ = max_change
		var min_change float64 = 1000000000000000000.0
		_ = min_change
		var next SearchProblem = current
		_ = next
		var improved bool = false
		_ = improved
		var i int = 0
		_ = i
		for i < len(neighs) {
			var n SearchProblem = _index(neighs, i)
			_ = n
			i = (i + 1)
			if contains_state(func(v any) []SearchProblem {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]SearchProblem); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []SearchProblem{}
					}
					out := make([]SearchProblem, len(arr))
					for i, x := range arr {
						out[i] = x.(SearchProblem)
					}
					return out
				}
				return v.([]SearchProblem)
			}(visited), n) {
				continue
			}
			if (((n.X > max_x) || (n.X < min_x)) || (n.Y > max_y)) || (n.Y < min_y) {
				continue
			}
			var change float64 = (score(n) - current_score)
			_ = change
			if find_max {
				if (change > max_change) && (change > 0.0) {
					max_change = change
					next = n
					improved = true
				}
			} else {
				if (change < min_change) && (change < 0.0) {
					min_change = change
					next = n
					improved = true
				}
			}
		}
		if improved {
			current = next
		} else {
			solution_found = true
		}
	}
	return current
}

func test_f1(x float64, y float64) float64 {
	return ((x * x) + (y * y))
}

func mochiMain() {
	var prob1 SearchProblem = SearchProblem{
		X:    3.0,
		Y:    4.0,
		Step: 1.0,
		F:    test_f1,
	}
	_ = prob1
	var local_min1 SearchProblem = hill_climbing(prob1, false, 1000000000.0, (0 - 1000000000.0), 1000000000.0, (0 - 1000000000.0), 10000)
	_ = local_min1
	_ = local_min1
	fmt.Println(fmt.Sprint(int(score(local_min1))))
	var prob2 SearchProblem = SearchProblem{
		X:    12.0,
		Y:    47.0,
		Step: 1.0,
		F:    test_f1,
	}
	_ = prob2
	var local_min2 SearchProblem = hill_climbing(prob2, false, 100.0, 5.0, 50.0, (0 - 5.0), 10000)
	_ = local_min2
	_ = local_min2
	fmt.Println(fmt.Sprint(int(score(local_min2))))
	var prob3 SearchProblem = SearchProblem{
		X:    3.0,
		Y:    4.0,
		Step: 1.0,
		F:    test_f1,
	}
	_ = prob3
	var local_max SearchProblem = hill_climbing(prob3, true, 1000000000.0, (0 - 1000000000.0), 1000000000.0, (0 - 1000000000.0), 1000)
	_ = local_max
	_ = local_max
	fmt.Println(fmt.Sprint(int(score(local_max))))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
