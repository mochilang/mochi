//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-14 22:42:11 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func parse_project_name(toml string) string {
	var i int = 0
	_ = i
	var name string = ""
	_ = name
	var n int = len(toml)
	_ = n
	for (i + 4) < n {
		if (((string(_index([]rune(toml), i)) == "n") && (string(_index([]rune(toml), (i+1))) == "a")) && (string(_index([]rune(toml), (i+2))) == "m")) && (string(_index([]rune(toml), (i+3))) == "e") {
			i = (i + 4)
			for (i < n) && (string(_index([]rune(toml), i)) != "\"") {
				i = (i + 1)
			}
			i = (i + 1)
			for (i < n) && (string(_index([]rune(toml), i)) != "\"") {
				name = (name + string(_index([]rune(toml), i)))
				i = (i + 1)
			}
			return name
		}
		i = (i + 1)
	}
	return name
}

var pyproject string

var project string

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		pyproject = "[project]\nname = \"thealgorithms-python\""
		project = parse_project_name(pyproject)
		fmt.Println(project)
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
