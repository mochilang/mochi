//go:build ignore

// Generated by Mochi v0.10.70 on 2025-08-22 23:15:53 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

func _modi(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func to_bits(n int, width int) string {
	var res string = ""
	_ = res
	var num int = n
	_ = num
	var w int = width
	_ = w
	for w > 0 {
		res = (fmt.Sprint(_modi(num, 2)) + res)
		num = (num / 2)
		w = (w - 1)
	}
	return res
}

func quantum_fourier_transform(number_of_qubits int) map[string]int {
	if number_of_qubits <= 0 {
		panic("number of qubits must be > 0.")
	}
	if number_of_qubits > 10 {
		panic("number of qubits too large to simulate(>10).")
	}
	var shots int = 10000
	_ = shots
	var states int = 1
	_ = states
	var p int = 0
	_ = p
	for p < number_of_qubits {
		states = (states * 2)
		p = (p + 1)
	}
	var per_state int = (shots / states)
	_ = per_state
	var counts map[string]int = map[string]int{}
	_ = counts
	var i int = 0
	_ = i
	for i < states {
		counts[to_bits(i, number_of_qubits)] = per_state
		i = (i + 1)
	}
	return counts
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(("Total count for quantum fourier transform state is: " + fmt.Sprint(quantum_fourier_transform(3))))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
