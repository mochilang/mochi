//go:build ignore

// Generated by Mochi v0.10.61 on 2025-08-08 17:57:24 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	s[idx] = v
}

func _toFloat(v any) float64 {
	switch t := v.(type) {
	case int:
		return float64(t)
	case int64:
		return float64(t)
	case float64:
		return t
	default:
		return 0
	}
}

type Point struct {
	X int `json:"x"`
	Y int `json:"y"`
}

func cross(o Point, a Point, b Point) int {
	return (((a.X - o.X) * (b.Y - o.Y)) - ((a.Y - o.Y) * (b.X - o.X)))
}

func sortPoints(ps []Point) []Point {
	var arr []Point = ps
	_ = arr
	var n int = len(arr)
	_ = n
	var i int = 0
	_ = i
	for i < n {
		var j int = 0
		_ = j
		for j < (n - 1) {
			var p Point = _index(arr, j)
			_ = p
			var q Point = _index(arr, (j + 1))
			_ = q
			if (p.X > q.X) || ((p.X == q.X) && (p.Y > q.Y)) {
				_setIndex(arr, j, q)
				_setIndex(arr, (j + 1), p)
			}
			j = (j + 1)
		}
		i = (i + 1)
	}
	return arr
}

func convex_hull(ps []Point) []Point {
	ps = sortPoints(func(v any) []Point {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]Point); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []Point{}
			}
			out := make([]Point, len(arr))
			for i, x := range arr {
				out[i] = x.(Point)
			}
			return out
		}
		return v.([]Point)
	}(ps))
	var lower []Point = []Point{}
	_ = lower
	for _, p := range ps {
		for (len(lower) >= 2) && (cross(_index(lower, (len(lower)-2)), _index(lower, (len(lower)-1)), p) <= 0) {
			lower = lower[:(len(lower) - 1)]
		}
		lower = append(lower, p)
	}
	var upper []Point = []Point{}
	_ = upper
	var i int = (len(ps) - 1)
	_ = i
	for i >= 0 {
		var p Point = _index(ps, i)
		_ = p
		for (len(upper) >= 2) && (cross(_index(upper, (len(upper)-2)), _index(upper, (len(upper)-1)), p) <= 0) {
			upper = upper[:(len(upper) - 1)]
		}
		upper = append(upper, p)
		i = (i - 1)
	}
	var hull []Point = lower[:(len(lower) - 1)]
	_ = hull
	var j int = 0
	_ = j
	for j < (len(upper) - 1) {
		hull = append(hull, _index(upper, j))
		j = (j + 1)
	}
	return hull
}

var __mochi_test_header_printed bool

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		if !__mochi_test_header_printed {
			fmt.Println("[94;1mtests/github/TheAlgorithms/Mochi/divide_and_conquer/convex_hull.mochi[0;22m")
			__mochi_test_header_printed = true
		}
		func() {
			func() {
				defer func() { recover() }()
				var pts []Point = []Point{Point{
					X: 0,
					Y: 3,
				}, Point{
					X: 2,
					Y: 2,
				}, Point{
					X: 1,
					Y: 1,
				}, Point{
					X: 2,
					Y: 1,
				}, Point{
					X: 3,
					Y: 0,
				}, Point{
					X: 0,
					Y: 0,
				}, Point{
					X: 3,
					Y: 3,
				}, Point{
					X: 2,
					Y: (0 - 1),
				}, Point{
					X: 2,
					Y: (0 - 4),
				}, Point{
					X: 1,
					Y: (0 - 3),
				}}
				_ = pts
				hull := convex_hull(func(v any) []Point {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]Point); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []Point{}
						}
						out := make([]Point, len(arr))
						for i, x := range arr {
							out[i] = x.(Point)
						}
						return out
					}
					return v.([]Point)
				}(pts))
				_ = hull
				_ = hull
				_ = (_toFloat(hull) == []Point{Point{
					X: 0,
					Y: 0,
				}, Point{
					X: 1,
					Y: (0 - 3),
				}, Point{
					X: 2,
					Y: (0 - 4),
				}, Point{
					X: 3,
					Y: 0,
				}, Point{
					X: 3,
					Y: 3,
				}, Point{
					X: 0,
					Y: 3,
				}})
			}()
			fmt.Printf("   \x1b[33mtest\x1b[0m %s                   ... \x1b[32mok\x1b[0m (1.0ms)\n", "convex hull")
		}()

		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
