//go:build ignore

// Generated by Mochi v0.10.61 on 2025-08-08 17:57:35 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _mod(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func _toFloat(v any) float64 {
	switch t := v.(type) {
	case int:
		return float64(t)
	case int64:
		return float64(t)
	case float64:
		return t
	default:
		return 0
	}
}

func actual_power(a int, b int) int {
	if b == 0 {
		return 1
	}
	half := actual_power(a, (b / 2))
	_ = half
	_ = half
	if _mod(b, 2) == 0 {
		return int((_toFloat(half) * _toFloat(half)))
	}
	return int(((a * half) * half))
}

func power(a int, b int) float64 {
	if b < 0 {
		return (float64(1.0) / float64((1.0 * float64(actual_power(a, (0-b))))))
	}
	return (1.0 * float64(actual_power(a, b)))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(fmt.Sprint(power(4, 6)))
		fmt.Println(fmt.Sprint(power(2, 3)))
		fmt.Println(fmt.Sprint(power((0 - 2), 3)))
		fmt.Println(fmt.Sprint(power(2, (0 - 3))))
		fmt.Println(fmt.Sprint(power((0 - 2), (0 - 3))))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
