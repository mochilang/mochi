//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-14 22:38:48 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

type Result struct {
	Start int     `json:"start"`
	End   int     `json:"end"`
	Sum   float64 `json:"sum"`
}

func max_cross_sum(arr []float64, low int, mid int, high int) Result {
	var left_sum float64 = (0 - 1000000000000000000.0)
	_ = left_sum
	var max_left int = (0 - 1)
	_ = max_left
	var sum float64 = 0.0
	_ = sum
	var i int = mid
	_ = i
	for i >= low {
		sum = (sum + _index(arr, i))
		if sum > left_sum {
			left_sum = sum
			max_left = i
		}
		i = (i - 1)
	}
	var right_sum float64 = (0 - 1000000000000000000.0)
	_ = right_sum
	var max_right int = (0 - 1)
	_ = max_right
	sum = 0.0
	i = (mid + 1)
	for i <= high {
		sum = (sum + _index(arr, i))
		if sum > right_sum {
			right_sum = sum
			max_right = i
		}
		i = (i + 1)
	}
	return Result{
		Start: max_left,
		End:   max_right,
		Sum:   (left_sum + right_sum),
	}
}

func max_subarray(arr []float64, low int, high int) Result {
	if len(arr) == 0 {
		return Result{
			Start: (0 - 1),
			End:   (0 - 1),
			Sum:   0.0,
		}
	}
	if low == high {
		return Result{
			Start: low,
			End:   high,
			Sum:   _index(arr, low),
		}
	}
	var mid int = ((low + high) / 2)
	_ = mid
	var left Result = max_subarray(func(v any) []float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []float64{}
			}
			out := make([]float64, len(arr))
			for i, x := range arr {
				out[i] = x.(float64)
			}
			return out
		}
		return v.([]float64)
	}(arr), low, mid)
	_ = left
	var right Result = max_subarray(func(v any) []float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []float64{}
			}
			out := make([]float64, len(arr))
			for i, x := range arr {
				out[i] = x.(float64)
			}
			return out
		}
		return v.([]float64)
	}(arr), (mid + 1), high)
	_ = right
	var cross Result = max_cross_sum(func(v any) []float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []float64{}
			}
			out := make([]float64, len(arr))
			for i, x := range arr {
				out[i] = x.(float64)
			}
			return out
		}
		return v.([]float64)
	}(arr), low, mid, high)
	_ = cross
	if (left.Sum >= right.Sum) && (left.Sum >= cross.Sum) {
		return left
	}
	if (right.Sum >= left.Sum) && (right.Sum >= cross.Sum) {
		return right
	}
	return cross
}

func show(res Result) {
	fmt.Println((((((("[" + fmt.Sprint(res.Start)) + ", ") + fmt.Sprint(res.End)) + ", ") + fmt.Sprint(res.Sum)) + "]"))
}

func mochiMain() {
	var nums1 []float64 = []float64{(0 - 2.0), 1.0, (0 - 3.0), 4.0, (0 - 1.0), 2.0, 1.0, (0 - 5.0), 4.0}
	_ = nums1
	var res1 Result = max_subarray(func(v any) []float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []float64{}
			}
			out := make([]float64, len(arr))
			for i, x := range arr {
				out[i] = x.(float64)
			}
			return out
		}
		return v.([]float64)
	}(nums1), 0, (len(nums1) - 1))
	_ = res1
	show(res1)
	var nums2 []float64 = []float64{2.0, 8.0, 9.0}
	_ = nums2
	var res2 Result = max_subarray(func(v any) []float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []float64{}
			}
			out := make([]float64, len(arr))
			for i, x := range arr {
				out[i] = x.(float64)
			}
			return out
		}
		return v.([]float64)
	}(nums2), 0, (len(nums2) - 1))
	_ = res2
	show(res2)
	var nums3 []float64 = []float64{0.0, 0.0}
	_ = nums3
	var res3 Result = max_subarray(func(v any) []float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []float64{}
			}
			out := make([]float64, len(arr))
			for i, x := range arr {
				out[i] = x.(float64)
			}
			return out
		}
		return v.([]float64)
	}(nums3), 0, (len(nums3) - 1))
	_ = res3
	show(res3)
	var nums4 []float64 = []float64{(0 - 1.0), 0.0, 1.0}
	_ = nums4
	var res4 Result = max_subarray(func(v any) []float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []float64{}
			}
			out := make([]float64, len(arr))
			for i, x := range arr {
				out[i] = x.(float64)
			}
			return out
		}
		return v.([]float64)
	}(nums4), 0, (len(nums4) - 1))
	_ = res4
	show(res4)
	var nums5 []float64 = []float64{(0 - 2.0), (0 - 3.0), (0 - 1.0), (0 - 4.0), (0 - 6.0)}
	_ = nums5
	var res5 Result = max_subarray(func(v any) []float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []float64{}
			}
			out := make([]float64, len(arr))
			for i, x := range arr {
				out[i] = x.(float64)
			}
			return out
		}
		return v.([]float64)
	}(nums5), 0, (len(nums5) - 1))
	_ = res5
	show(res5)
	var nums6 []float64 = []float64{}
	_ = nums6
	var res6 Result = max_subarray(func(v any) []float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []float64{}
			}
			out := make([]float64, len(arr))
			for i, x := range arr {
				out[i] = x.(float64)
			}
			return out
		}
		return v.([]float64)
	}(nums6), 0, 0)
	_ = res6
	show(res6)
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
