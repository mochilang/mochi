//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-14 22:38:46 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func min_slice(a []int, start int, end int) int {
	var m int = _index(a, start)
	_ = m
	var i int = (start + 1)
	_ = i
	for i < end {
		if int(_index(a, i)) < m {
			m = _index(a, i)
		}
		i = (i + 1)
	}
	return m
}

func max_slice(a []int, start int, end int) int {
	var m int = _index(a, start)
	_ = m
	var i int = (start + 1)
	_ = i
	for i < end {
		if int(_index(a, i)) > m {
			m = _index(a, i)
		}
		i = (i + 1)
	}
	return m
}

func max_diff_range(a []int, start int, end int) []int {
	if (end - start) == 1 {
		var v int = _index(a, start)
		_ = v
		_ = v
		return []int{func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(v), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(v)}
	}
	var mid int = ((start + end) / 2)
	_ = mid
	var left []int = max_diff_range(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(a), start, mid)
	_ = left
	var right []int = max_diff_range(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(a), mid, end)
	_ = right
	var small1 int = _index(left, 0)
	_ = small1
	var big1 int = _index(left, 1)
	_ = big1
	var small2 int = _index(right, 0)
	_ = small2
	var big2 int = _index(right, 1)
	_ = big2
	var min_left int = min_slice(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(a), start, mid)
	_ = min_left
	var max_right int = max_slice(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(a), mid, end)
	_ = max_right
	var cross_diff int = (max_right - min_left)
	_ = cross_diff
	var left_diff int = (big1 - small1)
	_ = left_diff
	var right_diff int = (big2 - small2)
	_ = right_diff
	if (right_diff > cross_diff) && (right_diff > left_diff) {
		return []int{func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(small2), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(big2)}
	} else {
		if left_diff > cross_diff {
			return []int{func(v any) int {
				if vv, ok := v.(int); ok {
					return vv
				}
				return 0
			}(small1), func(v any) int {
				if vv, ok := v.(int); ok {
					return vv
				}
				return 0
			}(big1)}
		} else {
			return []int{func(v any) int {
				if vv, ok := v.(int); ok {
					return vv
				}
				return 0
			}(min_left), func(v any) int {
				if vv, ok := v.(int); ok {
					return vv
				}
				return 0
			}(max_right)}
		}
	}
}

func max_difference(a []int) []int {
	return max_diff_range(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(a), 0, len(a))
}

func mochiMain() {
	var result []int = max_difference(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}([]int{5, 11, 2, 1, 7, 9, 0, 7}))
	_ = result
	fmt.Println(fmt.Sprint(result))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
