//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-16 12:07:25 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		return
	}
	s[idx] = v
}

func pivot(t [][]float64, row int, col int) [][]float64 {
	var pivotRow []float64 = []float64{}
	_ = pivotRow
	var pivotVal float64 = _index(_index(t, row), col)
	_ = pivotVal
	for j := 0; j < len(_index(t, row)); j++ {
		pivotRow = append(pivotRow, (float64(_index(_index(t, row), j)) / float64(pivotVal)))
	}
	_setIndex(t, row, pivotRow)
	for i := 0; i < len(t); i++ {
		if i != row {
			var factor float64 = _index(_index(t, i), col)
			_ = factor
			var newRow []float64 = []float64{}
			_ = newRow
			for j := 0; j < len(_index(t, i)); j++ {
				var value float64 = (_index(_index(t, i), j) - (factor * _index(pivotRow, j)))
				_ = value
				newRow = append(newRow, value)
			}
			_setIndex(t, i, newRow)
		}
	}
	return t
}

func findPivot(t [][]float64) []int {
	var col int = 0
	_ = col
	var minVal float64 = 0.0
	_ = minVal
	for j := 0; j < (len(_index(t, 0)) - 1); j++ {
		var v float64 = _index(_index(t, 0), j)
		_ = v
		if v < minVal {
			minVal = v
			col = j
		}
	}
	if minVal >= 0.0 {
		return []int{func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}((0 - 1)), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}((0 - 1))}
	}
	var row int = (0 - 1)
	_ = row
	var minRatio float64 = 0.0
	_ = minRatio
	var first bool = true
	_ = first
	for i := 1; i < len(t); i++ {
		var coeff float64 = _index(_index(t, i), col)
		_ = coeff
		if coeff > 0.0 {
			var rhs float64 = _index(_index(t, i), (len(_index(t, i)) - 1))
			_ = rhs
			var ratio float64 = (float64(rhs) / float64(coeff))
			_ = ratio
			if first || (ratio < minRatio) {
				minRatio = ratio
				row = i
				first = false
			}
		}
	}
	return []int{func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(row), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(col)}
}

func interpret(t [][]float64, nVars int) map[string]float64 {
	var lastCol int = (len(_index(t, 0)) - 1)
	_ = lastCol
	var p float64 = _index(_index(t, 0), lastCol)
	_ = p
	if p < 0.0 {
		p = (0 - p)
	}
	var result map[string]float64 = map[string]float64{}
	_ = result
	result["P"] = p
	for i := 0; i < nVars; i++ {
		var nzRow int = (0 - 1)
		_ = nzRow
		var nzCount int = 0
		_ = nzCount
		for r := 0; r < len(t); r++ {
			var val float64 = _index(_index(t, r), i)
			_ = val
			if val != 0.0 {
				nzCount = (nzCount + 1)
				nzRow = r
			}
		}
		if (nzCount == 1) && (_index(_index(t, nzRow), i) == 1.0) {
			result[("x" + fmt.Sprint((i + 1)))] = _index(_index(t, nzRow), lastCol)
		}
	}
	return result
}

func simplex(tab [][]float64) [][]float64 {
	var t [][]float64 = tab
	_ = t
	for {
		var p []int = findPivot(func(v any) [][]float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]float64{}
				}
				out := make([][]float64, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []float64 {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]float64); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []float64{}
							}
							out := make([]float64, len(arr))
							for i, x := range arr {
								out[i] = x.(float64)
							}
							return out
						}
						return v.([]float64)
					}(x)
				}
				return out
			}
			return v.([][]float64)
		}(t))
		_ = p
		var row int = _index(p, 0)
		_ = row
		var col int = _index(p, 1)
		_ = col
		if row < 0 {
			break
		}
		t = pivot(func(v any) [][]float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]float64{}
				}
				out := make([][]float64, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []float64 {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]float64); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []float64{}
							}
							out := make([]float64, len(arr))
							for i, x := range arr {
								out[i] = x.(float64)
							}
							return out
						}
						return v.([]float64)
					}(x)
				}
				return out
			}
			return v.([][]float64)
		}(t), row, col)
	}
	return t
}

var tableau [][]float64

var finalTab [][]float64

var res map[string]float64

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		tableau = [][]float64{[]float64{(0 - 1.0), (0 - 1.0), 0.0, 0.0, 0.0}, []float64{1.0, 3.0, 1.0, 0.0, 4.0}, []float64{3.0, 1.0, 0.0, 1.0, 4.0}}
		finalTab = simplex(func(v any) [][]float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]float64{}
				}
				out := make([][]float64, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []float64 {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]float64); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []float64{}
							}
							out := make([]float64, len(arr))
							for i, x := range arr {
								out[i] = x.(float64)
							}
							return out
						}
						return v.([]float64)
					}(x)
				}
				return out
			}
			return v.([][]float64)
		}(tableau))
		res = interpret(func(v any) [][]float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]float64{}
				}
				out := make([][]float64, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []float64 {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]float64); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []float64{}
							}
							out := make([]float64, len(arr))
							for i, x := range arr {
								out[i] = x.(float64)
							}
							return out
						}
						return v.([]float64)
					}(x)
				}
				return out
			}
			return v.([][]float64)
		}(finalTab), 2)
		fmt.Println(("P: " + fmt.Sprint(res["P"])))
		for i := 0; i < 2; i++ {
			var key string = ("x" + fmt.Sprint((i + 1)))
			_ = key
			if func() bool { _, ok := res[key]; return ok }() {
				fmt.Println(((key + ": ") + fmt.Sprint(res[key])))
			}
		}
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
