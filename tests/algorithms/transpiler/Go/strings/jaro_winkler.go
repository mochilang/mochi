//go:build ignore

// Generated by Mochi v0.10.63 on 2025-08-11 15:35:56 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

func _toFloat(v any) float64 {
	switch t := v.(type) {
	case int:
		return float64(t)
	case int64:
		return float64(t)
	case float64:
		return t
	default:
		return 0
	}
}

func min_int(a int, b int) int {
	if a < b {
		return a
	} else {
		return b
	}
}

func max_int(a int, b int) int {
	if a > b {
		return a
	} else {
		return b
	}
}

func repeat_bool(n int, value bool) []bool {
	var res []bool = []bool{}
	_ = res
	var i int = 0
	_ = i
	for i < n {
		res = append(res, value)
		i = (i + 1)
	}
	return res
}

func set_bool(xs []bool, idx int, value bool) []bool {
	var res []bool = []bool{}
	_ = res
	var i int = 0
	_ = i
	for i < len(xs) {
		if i == idx {
			res = append(res, value)
		} else {
			res = append(res, _index(xs, i))
		}
		i = (i + 1)
	}
	return res
}

func jaro_winkler(s1 string, s2 string) float64 {
	len1 := len(s1)
	_ = len1
	len2 := len(s2)
	_ = len2
	limit := (min_int(len1, len2) / 2)
	_ = limit
	var match1 []bool = repeat_bool(len1, false)
	_ = match1
	var match2 []bool = repeat_bool(len2, false)
	_ = match2
	var matches int = 0
	_ = matches
	var i int = 0
	_ = i
	for i < len1 {
		start := max_int(0, int((i - limit)))
		_ = start
		end := min_int(int(((i + limit) + 1)), len2)
		_ = end
		var j any = start
		_ = j
		for _toFloat(j) < _toFloat(end) {
			if !_index(match2, j) && (_substr(s1, i, (i+1)) == _substr(s2, j, (j.(int)+1))) {
				match1 = set_bool(func(v any) []bool {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]bool); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []bool{}
						}
						out := make([]bool, len(arr))
						for i, x := range arr {
							out[i] = x.(bool)
						}
						return out
					}
					return v.([]bool)
				}(match1), i, true)
				match2 = set_bool(func(v any) []bool {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]bool); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []bool{}
						}
						out := make([]bool, len(arr))
						for i, x := range arr {
							out[i] = x.(bool)
						}
						return out
					}
					return v.([]bool)
				}(match2), j.(int), true)
				matches = (matches + 1)
				break
			}
			j = (j.(int) + 1)
		}
		i = (i + 1)
	}
	if matches == 0 {
		return 0.0
	}
	var transpositions int = 0
	_ = transpositions
	var k int = 0
	_ = k
	i = 0
	for i < len1 {
		if _index(match1, i) {
			for !_index(match2, k) {
				k = (k + 1)
			}
			if _substr(s1, i, (i+1)) != _substr(s2, k, (k+1)) {
				transpositions = (transpositions + 1)
			}
			k = (k + 1)
		}
		i = (i + 1)
	}
	var m float64 = float64(matches)
	_ = m
	jaro := (float64((((float64(m) / float64(len1)) + (float64(m) / float64(len2))) + (float64((m - (float64(transpositions) / float64(2.0)))) / float64(m)))) / float64(3.0))
	_ = jaro
	_ = jaro
	var prefix_len int = 0
	_ = prefix_len
	i = 0
	for ((i < 4) && (i < len1)) && (i < len2) {
		if _substr(s1, i, (i+1)) == _substr(s2, i, (i+1)) {
			prefix_len = (prefix_len + 1)
		} else {
			break
		}
		i = (i + 1)
	}
	return float64((_toFloat(jaro) + ((0.1 * float64(prefix_len)) * _toFloat((1.0 - _toFloat(jaro))))))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(fmt.Sprint(jaro_winkler("hello", "world")))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
