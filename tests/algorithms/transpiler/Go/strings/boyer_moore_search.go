//go:build ignore

// Generated by Mochi v0.10.63 on 2025-08-11 17:37:54 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"reflect"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

func match_in_pattern(pat string, ch string) int {
	var i int = (len(pat) - 1)
	_ = i
	for i >= 0 {
		if _substr(pat, i, (i+1)) == ch {
			return i
		}
		i = (i - 1)
	}
	return (0 - 1)
}

func mismatch_in_text(text string, pat string, current_pos int) int {
	var i int = (len(pat) - 1)
	_ = i
	for i >= 0 {
		if _substr(pat, i, (i+1)) != _substr(text, (current_pos+i), ((current_pos+i)+1)) {
			return (current_pos + i)
		}
		i = (i - 1)
	}
	return (0 - 1)
}

func bad_character_heuristic(text string, pat string) []int {
	var textLen int = len(text)
	_ = textLen
	var patLen int = len(pat)
	_ = patLen
	var positions []int = []int{}
	_ = positions
	var i int = 0
	_ = i
	for i <= (textLen - patLen) {
		var mismatch_index int = mismatch_in_text(text, pat, i)
		_ = mismatch_index
		if mismatch_index < 0 {
			positions = append(positions, i)
			i = (i + 1)
		} else {
			var ch string = _substr(text, mismatch_index, (mismatch_index + 1))
			_ = ch
			var match_index int = match_in_pattern(pat, ch)
			_ = match_index
			if match_index < 0 {
				i = (mismatch_index + 1)
			} else {
				i = (mismatch_index - match_index)
			}
		}
	}
	return positions
}

var __mochi_test_header_printed bool

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		if !__mochi_test_header_printed {
			fmt.Println("[94;1mtests/github/TheAlgorithms/Mochi/strings/boyer_moore_search.mochi[0;22m")
			__mochi_test_header_printed = true
		}
		func() {
			func() {
				defer func() { recover() }()
				var positions []int = bad_character_heuristic("ABAABA", "AB")
				_ = positions
				_ = positions
				_ = (reflect.DeepEqual(positions, []int{func(v any) int {
					if vv, ok := v.(int); ok {
						return vv
					}
					return 0
				}(0), func(v any) int {
					if vv, ok := v.(int); ok {
						return vv
					}
					return 0
				}(3)}))
			}()
			fmt.Printf("   \x1b[33mtest\x1b[0m %s                   ... \x1b[32mok\x1b[0m (1.0ms)\n", "boyer moore basic")
		}()

		if !__mochi_test_header_printed {
			fmt.Println("[94;1mtests/github/TheAlgorithms/Mochi/strings/boyer_moore_search.mochi[0;22m")
			__mochi_test_header_printed = true
		}
		func() {
			func() {
				defer func() { recover() }()
				var positions []int = bad_character_heuristic("THIS IS A TEST TEXT", "TEST")
				_ = positions
				_ = positions
				_ = (reflect.DeepEqual(positions, []int{func(v any) int {
					if vv, ok := v.(int); ok {
						return vv
					}
					return 0
				}(10)}))
			}()
			fmt.Printf("   \x1b[33mtest\x1b[0m %s                   ... \x1b[32mok\x1b[0m (1.0ms)\n", "boyer moore example")
		}()

		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
