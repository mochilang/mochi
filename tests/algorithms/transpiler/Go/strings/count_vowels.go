//go:build ignore

// Generated by Mochi v0.10.63 on 2025-08-11 17:38:01 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

var vowels string

func is_vowel(c string) bool {
	var i int = 0
	_ = i
	for i < len(vowels) {
		if string(_index([]rune(vowels), i)) == c {
			return true
		}
		i = (i + 1)
	}
	return false
}

func count_vowels(s string) int {
	var count int = 0
	_ = count
	var i int = 0
	_ = i
	for i < len(s) {
		var ch string = string(_index([]rune(s), i))
		_ = ch
		if is_vowel(ch) {
			count = (count + 1)
		}
		i = (i + 1)
	}
	return count
}

func show(s string) {
	fmt.Println(fmt.Sprint(count_vowels(s)))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		vowels = "aeiouAEIOU"
		show("hello world")
		show("HELLO WORLD")
		show("123 hello world")
		show("")
		show("a quick brown fox")
		show("the quick BROWN fox")
		show("PYTHON")
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
