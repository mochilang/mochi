//go:build ignore

// Generated by Mochi v0.10.63 on 2025-08-11 15:36:10 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _mod(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

var alphabet_size int

var modulus int

func index_of_char(s string, ch string) int {
	var i int = 0
	_ = i
	for i < len(s) {
		if string(_index([]rune(s), i)) == ch {
			return i
		}
		i = (i + 1)
	}
	return (0 - 1)
}

func ord(ch string) int {
	var upper string = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
	_ = upper
	var lower string = "abcdefghijklmnopqrstuvwxyz"
	_ = lower
	var digits string = "0123456789"
	_ = digits
	var idx int = index_of_char(upper, ch)
	_ = idx
	if idx >= 0 {
		return (65 + idx)
	}
	idx = index_of_char(lower, ch)
	if idx >= 0 {
		return (97 + idx)
	}
	idx = index_of_char(digits, ch)
	if idx >= 0 {
		return (48 + idx)
	}
	if ch == "ü" {
		return 252
	}
	if ch == "Ü" {
		return 220
	}
	if ch == " " {
		return 32
	}
	return 0
}

func rabin_karp(pattern string, text string) bool {
	p_len := len(pattern)
	_ = p_len
	t_len := len(text)
	_ = t_len
	if p_len > t_len {
		return false
	}
	var p_hash int = 0
	_ = p_hash
	var t_hash int = 0
	_ = t_hash
	var modulus_power int = 1
	_ = modulus_power
	var i int = 0
	_ = i
	for i < p_len {
		p_hash = _mod((ord(string(_index([]rune(pattern), i))) + (p_hash * alphabet_size)), modulus)
		t_hash = _mod((ord(string(_index([]rune(text), i))) + (t_hash * alphabet_size)), modulus)
		if i != (p_len - 1) {
			modulus_power = _mod((modulus_power * alphabet_size), modulus)
		}
		i = (i + 1)
	}
	var j int = 0
	_ = j
	for j <= (t_len - p_len) {
		if (t_hash == p_hash) && (_substr(text, j, (j+p_len)) == pattern) {
			return true
		}
		if j == (t_len - p_len) {
			j = (j + 1)
			continue
		}
		t_hash = _mod((((t_hash - (ord(string(_index([]rune(text), j))) * modulus_power)) * alphabet_size) + ord(string(_index([]rune(text), (j+p_len))))), modulus)
		if t_hash < 0 {
			t_hash = (t_hash + modulus)
		}
		j = (j + 1)
	}
	return false
}

func test_rabin_karp() {
	var pattern1 string = "abc1abc12"
	_ = pattern1
	var text1 string = "alskfjaldsabc1abc1abc12k23adsfabcabc"
	_ = text1
	var text2 string = "alskfjaldsk23adsfabcabc"
	_ = text2
	if !rabin_karp(pattern1, text1) || rabin_karp(pattern1, text2) {
		fmt.Println("Failure")
		return
	}
	var pattern2 string = "ABABX"
	_ = pattern2
	var text3 string = "ABABZABABYABABX"
	_ = text3
	if !rabin_karp(pattern2, text3) {
		fmt.Println("Failure")
		return
	}
	var pattern3 string = "AAAB"
	_ = pattern3
	var text4 string = "ABAAAAAB"
	_ = text4
	if !rabin_karp(pattern3, text4) {
		fmt.Println("Failure")
		return
	}
	var pattern4 string = "abcdabcy"
	_ = pattern4
	var text5 string = "abcxabcdabxabcdabcdabcy"
	_ = text5
	if !rabin_karp(pattern4, text5) {
		fmt.Println("Failure")
		return
	}
	var pattern5 string = "Lü"
	_ = pattern5
	var text6 string = "Lüsai"
	_ = text6
	if !rabin_karp(pattern5, text6) {
		fmt.Println("Failure")
		return
	}
	var pattern6 string = "Lue"
	_ = pattern6
	if rabin_karp(pattern6, text6) {
		fmt.Println("Failure")
		return
	}
	fmt.Println("Success.")
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		alphabet_size = 256
		modulus = 1000003
		test_rabin_karp()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
