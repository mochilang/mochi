//go:build ignore

// Generated by Mochi v0.10.63 on 2025-08-11 15:35:53 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"reflect"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

func starts_with(s string, prefix string) bool {
	if len(s) < len(prefix) {
		return false
	}
	return (_substr(s, 0, len(prefix)) == prefix)
}

func all_digits(s string) bool {
	var i int = 0
	_ = i
	for i < len(s) {
		c := string(_index([]rune(s), i))
		_ = c
		if (fmt.Sprint(c) < "0") || (fmt.Sprint(c) > "9") {
			return false
		}
		i = (i + 1)
	}
	return true
}

func is_sri_lankan_phone_number(phone string) bool {
	var p string = phone
	_ = p
	if starts_with(p, "+94") {
		p = _substr(p, 3, len(p))
	} else {
		if starts_with(p, "0094") {
			p = _substr(p, 4, len(p))
		} else {
			if starts_with(p, "94") {
				p = _substr(p, 2, len(p))
			} else {
				if starts_with(p, "0") {
					p = _substr(p, 1, len(p))
				} else {
					return false
				}
			}
		}
	}
	if (len(p) != 9) && (len(p) != 10) {
		return false
	}
	if string(_index([]rune(p), 0)) != "7" {
		return false
	}
	second := string(_index([]rune(p), 1))
	_ = second
	_ = second
	var allowed []string = []string{"0", "1", "2", "4", "5", "6", "7", "8"}
	_ = allowed
	_ = allowed
	if !func() bool {
		v := reflect.ValueOf(allowed)
		if v.Kind() == reflect.Map {
			key := second
			return v.MapIndex(reflect.ValueOf(key)).IsValid()
		}
		if v.Kind() == reflect.Slice || v.Kind() == reflect.Array {
			for i := 0; i < v.Len(); i++ {
				if v.Index(i).Interface() == second {
					return true
				}
			}
		}
		return false
	}() {
		return false
	}
	var idx int = 2
	_ = idx
	if len(p) == 10 {
		sep := string(_index([]rune(p), 2))
		_ = sep
		if (fmt.Sprint(sep) != "-") && (fmt.Sprint(sep) != " ") {
			return false
		}
		idx = 3
	}
	if (len(p) - idx) != 7 {
		return false
	}
	rest := _substr(p, idx, len(p))
	_ = rest
	_ = rest
	return all_digits(rest)
}

var phone string

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		phone = "0094702343221"
		fmt.Println(fmt.Sprint(is_sri_lankan_phone_number(phone)))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
