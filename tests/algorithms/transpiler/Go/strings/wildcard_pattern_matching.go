//go:build ignore

// Generated by Mochi v0.10.63 on 2025-08-11 15:36:25 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	s[idx] = v
}

func _toFloat(v any) float64 {
	switch t := v.(type) {
	case int:
		return float64(t)
	case int64:
		return float64(t)
	case float64:
		return t
	default:
		return 0
	}
}

func make_matrix_bool(rows int, cols int, init bool) [][]bool {
	var matrix [][]bool = [][]bool{}
	_ = matrix
	for _i := 0; _i < rows; _i++ {
		var row []bool = []bool{}
		_ = row
		for _2 := 0; _2 < cols; _2++ {
			row = append(row, init)
		}
		matrix = append(matrix, row)
	}
	return matrix
}

func match_pattern(input_string string, pattern string) bool {
	len_string := (len(input_string) + 1)
	_ = len_string
	len_pattern := (len(pattern) + 1)
	_ = len_pattern
	var dp [][]bool = make_matrix_bool(len_string, len_pattern, false)
	_ = dp
	var row0 []bool = _index(dp, 0)
	_ = row0
	_setIndex(row0, 0, true)
	_setIndex(dp, 0, row0)
	var j int = 1
	_ = j
	for j < len_pattern {
		row0 = _index(dp, 0)
		if _substr(pattern, (j-1), j) == "*" {
			_setIndex(row0, j, _index(row0, (j-2)))
		} else {
			_setIndex(row0, j, false)
		}
		_setIndex(dp, 0, row0)
		j = (j + 1)
	}
	var i int = 1
	_ = i
	for i < len_string {
		var row []bool = _index(dp, i)
		_ = row
		var j2 int = 1
		_ = j2
		for j2 < len_pattern {
			s_char := _substr(input_string, (i - 1), i)
			_ = s_char
			p_char := _substr(pattern, (j2 - 1), j2)
			_ = p_char
			if (_toFloat(s_char) == _toFloat(p_char)) || (fmt.Sprint(p_char) == ".") {
				_setIndex(row, j2, _index(_index(dp, (i-1)), (j2-1)))
			} else {
				if fmt.Sprint(p_char) == "*" {
					var val bool = _index(_index(dp, i), (j2 - 2))
					_ = val
					prev_p := _substr(pattern, (j2 - 2), (j2 - 1))
					_ = prev_p
					if !val && ((_toFloat(prev_p) == _toFloat(s_char)) || (fmt.Sprint(prev_p) == ".")) {
						val = _index(_index(dp, (i-1)), j2)
					}
					_setIndex(row, j2, val)
				} else {
					_setIndex(row, j2, false)
				}
			}
			j2 = (j2 + 1)
		}
		_setIndex(dp, i, row)
		i = (i + 1)
	}
	return _index(_index(dp, (len_string-1)), (len_pattern - 1))
}

func mochiMain() {
	if !match_pattern("aab", "c*a*b") {
		panic("case1 failed")
	}
	if match_pattern("dabc", "*abc") {
		panic("case2 failed")
	}
	if match_pattern("aaa", "aa") {
		panic("case3 failed")
	}
	if !match_pattern("aaa", "a.a") {
		panic("case4 failed")
	}
	if match_pattern("aaab", "aa*") {
		panic("case5 failed")
	}
	if !match_pattern("aaab", ".*") {
		panic("case6 failed")
	}
	if match_pattern("a", "bbbb") {
		panic("case7 failed")
	}
	if match_pattern("", "bbbb") {
		panic("case8 failed")
	}
	if match_pattern("a", "") {
		panic("case9 failed")
	}
	if !match_pattern("", "") {
		panic("case10 failed")
	}
	fmt.Println(fmt.Sprint(match_pattern("aab", "c*a*b")))
	fmt.Println(fmt.Sprint(match_pattern("dabc", "*abc")))
	fmt.Println(fmt.Sprint(match_pattern("aaa", "aa")))
	fmt.Println(fmt.Sprint(match_pattern("aaa", "a.a")))
	fmt.Println(fmt.Sprint(match_pattern("aaab", "aa*")))
	fmt.Println(fmt.Sprint(match_pattern("aaab", ".*")))
	fmt.Println(fmt.Sprint(match_pattern("a", "bbbb")))
	fmt.Println(fmt.Sprint(match_pattern("", "bbbb")))
	fmt.Println(fmt.Sprint(match_pattern("a", "")))
	fmt.Println(fmt.Sprint(match_pattern("", "")))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
