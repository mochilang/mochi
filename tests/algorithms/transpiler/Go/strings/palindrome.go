//go:build ignore

// Generated by Mochi v0.10.63 on 2025-08-11 15:36:07 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

type Case struct {
	Text     string `json:"text"`
	Expected bool   `json:"expected"`
}

func reverse(s string) string {
	var res string = ""
	_ = res
	var i int = (len(s) - 1)
	_ = i
	for i >= 0 {
		res = (res + string(_index([]rune(s), i)))
		i = (i - 1)
	}
	return res
}

func is_palindrome(s string) bool {
	var start_i int = 0
	_ = start_i
	var end_i int = (len(s) - 1)
	_ = end_i
	for start_i < end_i {
		if string(_index([]rune(s), start_i)) == string(_index([]rune(s), end_i)) {
			start_i = (start_i + 1)
			end_i = (end_i - 1)
		} else {
			return false
		}
	}
	return true
}

func is_palindrome_traversal(s string) bool {
	end := (len(s) / 2)
	_ = end
	n := len(s)
	_ = n
	var i int = 0
	_ = i
	for i < end {
		if string(_index([]rune(s), i)) != string(_index([]rune(s), ((n-i)-1))) {
			return false
		}
		i = (i + 1)
	}
	return true
}

func is_palindrome_recursive(s string) bool {
	if len(s) <= 1 {
		return true
	}
	if string(_index([]rune(s), 0)) == string(_index([]rune(s), (len(s)-1))) {
		return is_palindrome_recursive(string([]rune(s)[1:(len(s) - 1)]))
	}
	return false
}

func is_palindrome_slice(s string) bool {
	return (s == reverse(s))
}

var test_data []Case

func mochiMain() {
	for _, t := range test_data {
		var s string = t.Text
		_ = s
		var expected bool = t.Expected
		_ = expected
		r1 := is_palindrome(s)
		_ = r1
		r2 := is_palindrome_traversal(s)
		_ = r2
		r3 := is_palindrome_recursive(s)
		_ = r3
		r4 := is_palindrome_slice(s)
		_ = r4
		if (((r1 != expected) || (r2 != expected)) || (r3 != expected)) || (r4 != expected) {
			panic("algorithm mismatch")
		}
		fmt.Println(((s + " ") + fmt.Sprint(expected)))
	}
	fmt.Println("a man a plan a canal panama")
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		test_data = []Case{Case{
			Text:     "MALAYALAM",
			Expected: true,
		}, Case{
			Text:     "String",
			Expected: false,
		}, Case{
			Text:     "rotor",
			Expected: true,
		}, Case{
			Text:     "level",
			Expected: true,
		}, Case{
			Text:     "A",
			Expected: true,
		}, Case{
			Text:     "BB",
			Expected: true,
		}, Case{
			Text:     "ABC",
			Expected: false,
		}, Case{
			Text:     "amanaplanacanalpanama",
			Expected: true,
		}}
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
