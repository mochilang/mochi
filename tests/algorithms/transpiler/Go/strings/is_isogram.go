//go:build ignore

// Generated by Mochi v0.10.63 on 2025-08-11 15:35:49 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

func index_of(s string, ch string) int {
	var i int = 0
	_ = i
	for i < len(s) {
		if string(_index([]rune(s), i)) == ch {
			return i
		}
		i = (i + 1)
	}
	return (0 - 1)
}

func ord(ch string) int {
	var upper string = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
	_ = upper
	var lower string = "abcdefghijklmnopqrstuvwxyz"
	_ = lower
	var idx int = index_of(upper, ch)
	_ = idx
	if idx >= 0 {
		return (65 + idx)
	}
	idx = index_of(lower, ch)
	if idx >= 0 {
		return (97 + idx)
	}
	return (0 - 1)
}

func chr(n int) string {
	var upper string = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
	_ = upper
	_ = upper
	var lower string = "abcdefghijklmnopqrstuvwxyz"
	_ = lower
	_ = lower
	if (n >= 65) && (n < 91) {
		return string([]rune(upper)[(n - 65):(n - 64)])
	}
	if (n >= 97) && (n < 123) {
		return string([]rune(lower)[(n - 97):(n - 96)])
	}
	return "?"
}

func to_lower_char(c string) string {
	code := ord(c)
	_ = code
	if (code >= 65) && (code <= 90) {
		return chr((code + 32))
	}
	return c
}

func is_alpha(c string) bool {
	code := ord(c)
	_ = code
	_ = code
	return (((code >= 65) && (code <= 90)) || ((code >= 97) && (code <= 122)))
}

func is_isogram(s string) bool {
	var seen string = ""
	_ = seen
	var i int = 0
	_ = i
	for i < len(s) {
		ch := string(_index([]rune(s), i))
		_ = ch
		if !is_alpha(ch) {
			panic("String must only contain alphabetic characters.")
		}
		lower := to_lower_char(ch)
		_ = lower
		if index_of(seen, lower) >= 0 {
			return false
		}
		seen = (seen + lower)
		i = (i + 1)
	}
	return true
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(fmt.Sprint(is_isogram("Uncopyrightable")))
		fmt.Println(fmt.Sprint(is_isogram("allowance")))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
