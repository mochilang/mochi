//go:build ignore

// Generated by Mochi v0.10.70 on 2025-08-23 14:34:34 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

var lower string

var upper string

func index_of(s string, ch string) int {
	var i int = 0
	_ = i
	for i < len(s) {
		if string(_index([]rune(s), i)) == ch {
			return i
		}
		i = (i + 1)
	}
	return (0 - 1)
}

func to_title_case(word string) string {
	if len(word) == 0 {
		return ""
	}
	var first string = string([]rune(word)[0:1])
	_ = first
	var idx int = index_of(lower, first)
	_ = idx
	var result string = func() string {
		if idx >= 0 {
			return string([]rune(upper)[idx:(idx + 1)])
		} else {
			return first
		}
	}()
	_ = result
	var i int = 1
	_ = i
	for i < len(word) {
		var ch string = string([]rune(word)[i:(i + 1)])
		_ = ch
		var uidx int = index_of(upper, ch)
		_ = uidx
		if uidx >= 0 {
			result = (result + string([]rune(lower)[uidx:(uidx+1)]))
		} else {
			result = (result + ch)
		}
		i = (i + 1)
	}
	return result
}

func split_words(s string) []string {
	var words []string = []string{}
	_ = words
	var current string = ""
	_ = current
	var i int = 0
	_ = i
	for i < len(s) {
		var ch string = string(_index([]rune(s), i))
		_ = ch
		if ch == " " {
			if len(current) > 0 {
				words = append(words, current)
				current = ""
			}
		} else {
			current = (current + ch)
		}
		i = (i + 1)
	}
	if len(current) > 0 {
		words = append(words, current)
	}
	return words
}

func sentence_to_title_case(sentence string) string {
	var words []string = split_words(sentence)
	_ = words
	var res string = ""
	_ = res
	var i int = 0
	_ = i
	for i < len(words) {
		res = (res + to_title_case(_index(words, i)))
		if (i + 1) < len(words) {
			res = (res + " ")
		}
		i = (i + 1)
	}
	return res
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		lower = "abcdefghijklmnopqrstuvwxyz"
		upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
		fmt.Println(to_title_case("Aakash"))
		fmt.Println(to_title_case("aakash"))
		fmt.Println(to_title_case("AAKASH"))
		fmt.Println(to_title_case("aAkAsH"))
		fmt.Println(sentence_to_title_case("Aakash Giri"))
		fmt.Println(sentence_to_title_case("aakash giri"))
		fmt.Println(sentence_to_title_case("AAKASH GIRI"))
		fmt.Println(sentence_to_title_case("aAkAsH gIrI"))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
