//go:build ignore

// Generated by Mochi v0.10.63 on 2025-08-11 15:36:27 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

func word_occurrence(sentence string) map[string]int {
	var occurrence map[string]int = map[string]int{}
	_ = occurrence
	var word string = ""
	_ = word
	var i int = 0
	_ = i
	for i < len(sentence) {
		ch := _substr(sentence, i, (i + 1))
		_ = ch
		if fmt.Sprint(ch) == " " {
			if word != "" {
				if func() bool { _, ok := occurrence[word]; return ok }() {
					occurrence[word] = (int(occurrence[word]) + 1)
				} else {
					occurrence[word] = 1
				}
				word = ""
			}
		} else {
			word = (word + fmt.Sprint(ch))
		}
		i = (i + 1)
	}
	if word != "" {
		if func() bool { _, ok := occurrence[word]; return ok }() {
			occurrence[word] = (int(occurrence[word]) + 1)
		} else {
			occurrence[word] = 1
		}
	}
	return occurrence
}

func mochiMain() {
	result := word_occurrence("INPUT STRING")
	_ = result
	for _, w := range result {
		fmt.Println(((fmt.Sprint(w) + ": ") + fmt.Sprint(_index(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(result), w))))
	}
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
