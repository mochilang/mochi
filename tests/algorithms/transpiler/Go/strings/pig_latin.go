//go:build ignore

// Generated by Mochi v0.10.63 on 2025-08-11 15:36:08 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"strings"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

func _len(v any) int {
	switch t := v.(type) {
	case string:
		return len([]rune(t))
	case []any:
		return len(t)
	case []string:
		return len(t)
	case []int:
		return len(t)
	case []float64:
		return len(t)
	case map[string]any:
		return len(t)
	case map[int]any:
		return len(t)
	case map[any]any:
		return len(t)
	default:
		return 0
	}
}

var VOWELS string

func strip(s string) string {
	var start int = 0
	_ = start
	var end int = len(s)
	_ = end
	for (start < end) && (_substr(s, start, (start+1)) == " ") {
		start = (start + 1)
	}
	for (end > start) && (_substr(s, (end-1), end) == " ") {
		end = (end - 1)
	}
	return _substr(s, start, end)
}

func is_vowel(c string) bool {
	var i int = 0
	_ = i
	for i < len(VOWELS) {
		if c == _substr(VOWELS, i, (i+1)) {
			return true
		}
		i = (i + 1)
	}
	return false
}

func pig_latin(word string) string {
	trimmed := strip(word)
	_ = trimmed
	if _len(trimmed) == 0 {
		return ""
	}
	w := strings.ToLower(trimmed)
	_ = w
	first := _substr(fmt.Sprint(w), 0, 1)
	_ = first
	if is_vowel(first) {
		return fmt.Sprint((fmt.Sprint(w) + "way"))
	}
	var i int = 0
	_ = i
	for i < _len(w) {
		ch := _substr(fmt.Sprint(w), i, (i + 1))
		_ = ch
		if is_vowel(ch) {
			break
		}
		i = (i + 1)
	}
	return ((_substr(fmt.Sprint(w), i, _len(w)) + _substr(fmt.Sprint(w), 0, i)) + "ay")
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		VOWELS = "aeiou"
		fmt.Println(("pig_latin('friends') = " + pig_latin("friends")))
		fmt.Println(("pig_latin('smile') = " + pig_latin("smile")))
		fmt.Println(("pig_latin('eat') = " + pig_latin("eat")))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
