//go:build ignore

// Generated by Mochi v0.10.70 on 2025-08-23 13:50:22 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"strings"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func split(s string, sep string) []string {
	var res []string = []string{}
	_ = res
	var current string = ""
	_ = current
	var i int = 0
	_ = i
	for i < len(s) {
		var ch string = _substr(s, i, (i + 1))
		_ = ch
		if ch == sep {
			res = append(res, current)
			current = ""
		} else {
			current = (current + ch)
		}
		i = (i + 1)
	}
	res = append(res, current)
	return res
}

func capitalize(word string) string {
	if len(word) == 0 {
		return ""
	}
	var first string = strings.ToUpper(_substr(word, 0, 1))
	_ = first
	_ = first
	var rest string = _substr(word, 1, len(word))
	_ = rest
	_ = rest
	return (first + rest)
}

func snake_to_camel_case(input_str string, use_pascal bool) string {
	var words []string = split(input_str, "_")
	_ = words
	var result string = ""
	_ = result
	var index int = 0
	_ = index
	if !use_pascal {
		if len(words) > 0 {
			result = _index(words, 0)
			index = 1
		}
	}
	for index < len(words) {
		var word string = _index(words, index)
		_ = word
		result = (result + capitalize(word))
		index = (index + 1)
	}
	return result
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(snake_to_camel_case("some_random_string", false))
		fmt.Println(snake_to_camel_case("some_random_string", true))
		fmt.Println(snake_to_camel_case("some_random_string_with_numbers_123", false))
		fmt.Println(snake_to_camel_case("some_random_string_with_numbers_123", true))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
