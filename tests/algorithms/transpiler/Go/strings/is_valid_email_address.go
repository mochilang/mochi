//go:build ignore

// Generated by Mochi v0.10.63 on 2025-08-11 15:35:55 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

func _len(v any) int {
	switch t := v.(type) {
	case string:
		return len([]rune(t))
	case []any:
		return len(t)
	case []string:
		return len(t)
	case []int:
		return len(t)
	case []float64:
		return len(t)
	case map[string]any:
		return len(t)
	case map[int]any:
		return len(t)
	case map[any]any:
		return len(t)
	default:
		return 0
	}
}

var MAX_LOCAL_PART_OCTETS int

var MAX_DOMAIN_OCTETS int

var ASCII_LETTERS string

var DIGITS string

var LOCAL_EXTRA string

var DOMAIN_EXTRA string

func count_char(s string, target string) int {
	var cnt int = 0
	_ = cnt
	var i int = 0
	_ = i
	for i < len(s) {
		if _substr(s, i, (i+1)) == target {
			cnt = (cnt + 1)
		}
		i = (i + 1)
	}
	return cnt
}

func char_in(c string, allowed string) bool {
	var i int = 0
	_ = i
	for i < len(allowed) {
		if _substr(allowed, i, (i+1)) == c {
			return true
		}
		i = (i + 1)
	}
	return false
}

func starts_with_char(s string, c string) bool {
	return ((len(s) > 0) && (_substr(s, 0, 1) == c))
}

func ends_with_char(s string, c string) bool {
	return ((len(s) > 0) && (_substr(s, (len(s)-1), len(s)) == c))
}

func contains_double_dot(s string) bool {
	if len(s) < 2 {
		return false
	}
	var i int = 0
	_ = i
	for i < (len(s) - 1) {
		if _substr(s, i, (i+2)) == ".." {
			return true
		}
		i = (i + 1)
	}
	return false
}

func is_valid_email_address(email string) bool {
	if count_char(email, "@") != 1 {
		return false
	}
	var at_idx int = 0
	_ = at_idx
	var i int = 0
	_ = i
	for i < len(email) {
		if _substr(email, i, (i+1)) == "@" {
			at_idx = i
			break
		}
		i = (i + 1)
	}
	local_part := _substr(email, 0, at_idx)
	_ = local_part
	domain := _substr(email, (at_idx + 1), len(email))
	_ = domain
	if (_len(local_part) > MAX_LOCAL_PART_OCTETS) || (_len(domain) > MAX_DOMAIN_OCTETS) {
		return false
	}
	var i int = 0
	_ = i
	for i < _len(local_part) {
		ch := _substr(fmt.Sprint(local_part), i, (i + 1))
		_ = ch
		if !char_in(ch, ((ASCII_LETTERS + DIGITS) + LOCAL_EXTRA)) {
			return false
		}
		i = (i + 1)
	}
	if (starts_with_char(local_part, ".") || ends_with_char(local_part, ".")) || contains_double_dot(local_part) {
		return false
	}
	i = 0
	for i < _len(domain) {
		ch := _substr(fmt.Sprint(domain), i, (i + 1))
		_ = ch
		if !char_in(ch, ((ASCII_LETTERS + DIGITS) + DOMAIN_EXTRA)) {
			return false
		}
		i = (i + 1)
	}
	if starts_with_char(domain, "-") || ends_with_char(domain, ".") {
		return false
	}
	if (starts_with_char(domain, ".") || ends_with_char(domain, ".")) || contains_double_dot(domain) {
		return false
	}
	return true
}

var email_tests []string

var idx int

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		MAX_LOCAL_PART_OCTETS = 64
		MAX_DOMAIN_OCTETS = 255
		ASCII_LETTERS = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
		DIGITS = "0123456789"
		LOCAL_EXTRA = ".(!#$%&'*+-/=?^_`{|}~)"
		DOMAIN_EXTRA = ".-"
		email_tests = []string{"simple@example.com", "very.common@example.com", "disposable.style.email.with+symbol@example.com", "other-email-with-hyphen@and.subdomains.example.com", "fully-qualified-domain@example.com", "user.name+tag+sorting@example.com", "x@example.com", "example-indeed@strange-example.com", "test/test@test.com", "123456789012345678901234567890123456789012345678901234567890123@example.com", "admin@mailserver1", "example@s.example", "Abc.example.com", "A@b@c@example.com", "abc@example..com", "a(c)d,e:f;g<h>i[j\\k]l@example.com", "12345678901234567890123456789012345678901234567890123456789012345@example.com", "i.like.underscores@but_its_not_allowed_in_this_part", ""}
		idx = 0
		for idx < len(email_tests) {
			var email string = _index(email_tests, idx)
			_ = email
			fmt.Println(fmt.Sprint(is_valid_email_address(email)))
			idx = (idx + 1)
		}
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
