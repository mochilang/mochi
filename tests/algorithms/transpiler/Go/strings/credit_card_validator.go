//go:build ignore

// Generated by Mochi v0.10.63 on 2025-08-11 15:35:38 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _mod(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func validate_initial_digits(cc string) bool {
	return ((((((string([]rune(cc)[0:2]) == "34") || (string([]rune(cc)[0:2]) == "35")) || (string([]rune(cc)[0:2]) == "37")) || (string([]rune(cc)[0:1]) == "4")) || (string([]rune(cc)[0:1]) == "5")) || (string([]rune(cc)[0:1]) == "6"))
}

func luhn_validation(cc string) bool {
	var sum int = 0
	_ = sum
	var double_digit bool = false
	_ = double_digit
	var i int = (len(cc) - 1)
	_ = i
	for i >= 0 {
		var n int = func() int { n, _ := strconv.Atoi(fmt.Sprint(string([]rune(cc)[i:(i + 1)]))); return n }()
		_ = n
		if double_digit {
			n = (n * 2)
			if n > 9 {
				n = (n - 9)
			}
		}
		sum = (sum + n)
		double_digit = !double_digit
		i = (i - 1)
	}
	return (_mod(sum, 10) == 0)
}

func is_digit_string(s string) bool {
	var i int = 0
	_ = i
	for i < len(s) {
		c := string([]rune(s)[i:(i + 1)])
		_ = c
		if (fmt.Sprint(c) < "0") || (fmt.Sprint(c) > "9") {
			return false
		}
		i = (i + 1)
	}
	return true
}

func validate_credit_card_number(cc string) bool {
	var error_message string = (cc + " is an invalid credit card number because")
	_ = error_message
	if !is_digit_string(cc) {
		fmt.Println((error_message + " it has nonnumerical characters."))
		return false
	}
	if !((len(cc) >= 13) && (len(cc) <= 16)) {
		fmt.Println((error_message + " of its length."))
		return false
	}
	if !validate_initial_digits(cc) {
		fmt.Println((error_message + " of its first two digits."))
		return false
	}
	if !luhn_validation(cc) {
		fmt.Println((error_message + " it fails the Luhn check."))
		return false
	}
	fmt.Println((cc + " is a valid credit card number."))
	return true
}

func mochiMain() {
	validate_credit_card_number("4111111111111111")
	validate_credit_card_number("32323")
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
