//go:build ignore

// Generated by Mochi v0.10.63 on 2025-08-11 15:35:46 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

func all_digits(s string) bool {
	if len(s) == 0 {
		return false
	}
	var i int = 0
	_ = i
	for i < len(s) {
		c := string(_index([]rune(s), i))
		_ = c
		if (fmt.Sprint(c) < "0") || (fmt.Sprint(c) > "9") {
			return false
		}
		i = (i + 1)
	}
	return true
}

func indian_phone_validator(phone string) bool {
	var s string = phone
	_ = s
	if (len(s) >= 3) && (_substr(s, 0, 3) == "+91") {
		s = _substr(s, 3, len(s))
		if len(s) > 0 {
			c := string(_index([]rune(s), 0))
			_ = c
			if (fmt.Sprint(c) == "-") || (fmt.Sprint(c) == " ") {
				s = _substr(s, 1, len(s))
			}
		}
	}
	if (len(s) > 0) && (string(_index([]rune(s), 0)) == "0") {
		s = _substr(s, 1, len(s))
	}
	if (len(s) >= 2) && (_substr(s, 0, 2) == "91") {
		s = _substr(s, 2, len(s))
	}
	if len(s) != 10 {
		return false
	}
	first := string(_index([]rune(s), 0))
	_ = first
	if !(((fmt.Sprint(first) == "7") || (fmt.Sprint(first) == "8")) || (fmt.Sprint(first) == "9")) {
		return false
	}
	if !all_digits(s) {
		return false
	}
	return true
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(fmt.Sprint(indian_phone_validator("+91123456789")))
		fmt.Println(fmt.Sprint(indian_phone_validator("+919876543210")))
		fmt.Println(fmt.Sprint(indian_phone_validator("01234567896")))
		fmt.Println(fmt.Sprint(indian_phone_validator("919876543218")))
		fmt.Println(fmt.Sprint(indian_phone_validator("+91-1234567899")))
		fmt.Println(fmt.Sprint(indian_phone_validator("+91-9876543218")))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
