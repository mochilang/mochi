//go:build ignore

// Generated by Mochi v0.10.63 on 2025-08-11 15:35:52 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _mod(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

func _len(v any) int {
	switch t := v.(type) {
	case string:
		return len([]rune(t))
	case []any:
		return len(t)
	case []string:
		return len(t)
	case []int:
		return len(t)
	case []float64:
		return len(t)
	case map[string]any:
		return len(t)
	case map[int]any:
		return len(t)
	case map[any]any:
		return len(t)
	default:
		return 0
	}
}

func _toFloat(v any) float64 {
	switch t := v.(type) {
	case int:
		return float64(t)
	case int64:
		return float64(t)
	case float64:
		return t
	default:
		return 0
	}
}

var DIGITS string

var UPPER string

var LOWER string

var LOOKUP_LETTERS string

var ERROR_MSG string

func to_upper(s string) string {
	var res string = ""
	_ = res
	var i int = 0
	_ = i
	for i < len(s) {
		ch := string(_index([]rune(s), i))
		_ = ch
		var j int = 0
		_ = j
		converted := ch
		_ = converted
		for j < len(LOWER) {
			if string(_index([]rune(LOWER), j)) == fmt.Sprint(ch) {
				converted = string(_index([]rune(UPPER), j))
				break
			}
			j = (j + 1)
		}
		res = (res + fmt.Sprint(converted))
		i = (i + 1)
	}
	return res
}

func is_digit(ch string) bool {
	var i int = 0
	_ = i
	for i < len(DIGITS) {
		if string(_index([]rune(DIGITS), i)) == ch {
			return true
		}
		i = (i + 1)
	}
	return false
}

func clean_id(spanish_id string) string {
	upper_id := to_upper(spanish_id)
	_ = upper_id
	var cleaned string = ""
	_ = cleaned
	var i int = 0
	_ = i
	for i < _len(upper_id) {
		ch := _index(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(upper_id), i)
		_ = ch
		if fmt.Sprint(ch) != "-" {
			cleaned = (cleaned + fmt.Sprint(ch))
		}
		i = (i + 1)
	}
	return cleaned
}

func is_spain_national_id(spanish_id string) bool {
	sid := clean_id(spanish_id)
	_ = sid
	if _len(sid) != 9 {
		panic(ERROR_MSG)
	}
	var i int = 0
	_ = i
	for i < 8 {
		if !is_digit(fmt.Sprint(_index(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(sid), i))) {
			panic(ERROR_MSG)
		}
		i = (i + 1)
	}
	number := func() int { n, _ := strconv.Atoi(fmt.Sprint(_substr(fmt.Sprint(sid), 0, 8))); return n }()
	_ = number
	letter := _index(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(sid), 8)
	_ = letter
	if is_digit(letter) {
		panic(ERROR_MSG)
	}
	expected := string(_index([]rune(LOOKUP_LETTERS), _mod(number, 23)))
	_ = expected
	_ = expected
	return (_toFloat(letter) == _toFloat(expected))
}

func mochiMain() {
	fmt.Println(is_spain_national_id("12345678Z"))
	fmt.Println(is_spain_national_id("12345678z"))
	fmt.Println(is_spain_national_id("12345678x"))
	fmt.Println(is_spain_national_id("12345678I"))
	fmt.Println(is_spain_national_id("12345678-Z"))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		DIGITS = "0123456789"
		UPPER = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
		LOWER = "abcdefghijklmnopqrstuvwxyz"
		LOOKUP_LETTERS = "TRWAGMYFPDXBNJZSQVHLCKE"
		ERROR_MSG = "Input must be a string of 8 numbers plus letter"
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
