//go:build ignore

// Generated by Mochi v0.10.63 on 2025-08-11 17:38:00 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"sort"
	"strconv"
	"strings"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

func strip_and_remove_spaces(s string) string {
	var start int = 0
	_ = start
	var end int = (len(s) - 1)
	_ = end
	for (start < len(s)) && (string(_index([]rune(s), start)) == " ") {
		start = (start + 1)
	}
	for (end >= start) && (string(_index([]rune(s), end)) == " ") {
		end = (end - 1)
	}
	var res string = ""
	_ = res
	var i int = start
	_ = i
	for i <= end {
		var ch string = string(_index([]rune(s), i))
		_ = ch
		if ch != " " {
			res = (res + ch)
		}
		i = (i + 1)
	}
	return res
}

func check_anagrams(a string, b string) bool {
	var s1 string = strings.ToLower(a)
	_ = s1
	var s2 string = strings.ToLower(b)
	_ = s2
	s1 = strip_and_remove_spaces(s1)
	s2 = strip_and_remove_spaces(s2)
	if len(s1) != len(s2) {
		return false
	}
	var count map[string]int = map[string]int{}
	_ = count
	var i int = 0
	_ = i
	for i < len(s1) {
		var c1 string = string(_index([]rune(s1), i))
		_ = c1
		var c2 string = string(_index([]rune(s2), i))
		_ = c2
		if func() bool { _, ok := count[c1]; return ok }() {
			count[c1] = (int(count[c1]) + 1)
		} else {
			count[c1] = 1
		}
		if func() bool { _, ok := count[c2]; return ok }() {
			count[c2] = (int(count[c2]) - 1)
		} else {
			count[c2] = (0 - 1)
		}
		i = (i + 1)
	}
	for _, ch := range func() []string {
		keys := make([]string, 0, len(count))
		for k := range count {
			keys = append(keys, k)
		}
		sort.Slice(keys, func(i, j int) bool { return fmt.Sprint(keys[i]) < fmt.Sprint(keys[j]) })
		return keys
	}() {
		if int(count[ch]) != 0 {
			return false
		}
	}
	return true
}

func print_bool(b bool) {
	if b {
		fmt.Println(true)
	} else {
		fmt.Println(false)
	}
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		print_bool(check_anagrams("Silent", "Listen"))
		print_bool(check_anagrams("This is a string", "Is this a string"))
		print_bool(check_anagrams("This is    a      string", "Is     this a string"))
		print_bool(check_anagrams("There", "Their"))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
