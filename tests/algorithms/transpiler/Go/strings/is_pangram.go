//go:build ignore

// Generated by Mochi v0.10.63 on 2025-08-11 15:35:50 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"reflect"
	"runtime"
	"strconv"
	"strings"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	s[idx] = v
}

func is_pangram(input_str string) bool {
	var letters []string = []string{}
	_ = letters
	var i int = 0
	_ = i
	for i < len(input_str) {
		c := strings.ToLower(string(_index([]rune(input_str), i)))
		_ = c
		is_new := !func() bool {
			v := reflect.ValueOf(letters)
			if v.Kind() == reflect.Map {
				key := c
				return v.MapIndex(reflect.ValueOf(key)).IsValid()
			}
			if v.Kind() == reflect.Slice || v.Kind() == reflect.Array {
				for i := 0; i < v.Len(); i++ {
					if v.Index(i).Interface() == c {
						return true
					}
				}
			}
			return false
		}()
		_ = is_new
		if (((fmt.Sprint(c) != " ") && ("a" <= fmt.Sprint(c))) && (fmt.Sprint(c) <= "z")) && is_new {
			letters = append(letters, c)
		}
		i = (i + 1)
	}
	return (len(letters) == 26)
}

func is_pangram_faster(input_str string) bool {
	var alphabet string = "abcdefghijklmnopqrstuvwxyz"
	_ = alphabet
	_ = alphabet
	var flag []bool = []bool{}
	_ = flag
	var i int = 0
	_ = i
	for i < 26 {
		flag = append(flag, false)
		i = (i + 1)
	}
	var j int = 0
	_ = j
	for j < len(input_str) {
		c := strings.ToLower(string(_index([]rune(input_str), j)))
		_ = c
		var k int = 0
		_ = k
		for k < 26 {
			if string(_index([]rune(alphabet), k)) == fmt.Sprint(c) {
				_setIndex(flag, k, true)
				break
			}
			k = (k + 1)
		}
		j = (j + 1)
	}
	var t int = 0
	_ = t
	for t < 26 {
		if !_index(flag, t) {
			return false
		}
		t = (t + 1)
	}
	return true
}

func is_pangram_fastest(input_str string) bool {
	s := strings.ToLower(input_str)
	_ = s
	_ = s
	var alphabet string = "abcdefghijklmnopqrstuvwxyz"
	_ = alphabet
	var i int = 0
	_ = i
	for i < len(alphabet) {
		letter := string(_index([]rune(alphabet), i))
		_ = letter
		_ = letter
		if !func() bool {
			v := reflect.ValueOf(s)
			if v.Kind() == reflect.Map {
				key := letter
				return v.MapIndex(reflect.ValueOf(key)).IsValid()
			}
			if v.Kind() == reflect.Slice || v.Kind() == reflect.Array {
				for i := 0; i < v.Len(); i++ {
					if v.Index(i).Interface() == letter {
						return true
					}
				}
			}
			return false
		}().(bool) {
			return false
		}
		i = (i + 1)
	}
	return true
}

var s1 string

var s2 string

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		s1 = "The quick brown fox jumps over the lazy dog"
		s2 = "My name is Unknown"
		fmt.Println(fmt.Sprint(is_pangram(s1)))
		fmt.Println(fmt.Sprint(is_pangram(s2)))
		fmt.Println(fmt.Sprint(is_pangram_faster(s1)))
		fmt.Println(fmt.Sprint(is_pangram_faster(s2)))
		fmt.Println(fmt.Sprint(is_pangram_fastest(s1)))
		fmt.Println(fmt.Sprint(is_pangram_fastest(s2)))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
