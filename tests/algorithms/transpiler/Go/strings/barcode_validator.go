//go:build ignore

// Generated by Mochi v0.10.63 on 2025-08-11 17:37:52 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"strings"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _mod(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

func has_alpha(s string) bool {
	var i int = 0
	_ = i
	for i < len(s) {
		var c string = string(_index([]rune(s), i))
		_ = c
		if ((c >= "a") && (c <= "z")) || ((c >= "A") && (c <= "Z")) {
			return true
		}
		i = (i + 1)
	}
	return false
}

func parse_decimal(s string) int {
	var value int = 0
	_ = value
	var i int = 0
	_ = i
	for i < len(s) {
		var c string = string(_index([]rune(s), i))
		_ = c
		if (c < "0") || (c > "9") {
			panic("Non-digit character encountered")
		}
		value = ((value * 10) + func() int { n, _ := strconv.Atoi(fmt.Sprint(c)); return n }())
		i = (i + 1)
	}
	return value
}

func get_barcode(barcode string) int {
	if has_alpha(barcode) {
		panic((("Barcode '" + barcode) + "' has alphabetic characters."))
	}
	if (len(barcode) > 0) && (string(_index([]rune(barcode), 0)) == "-") {
		panic("The entered barcode has a negative value. Try again.")
	}
	return parse_decimal(barcode)
}

func get_check_digit(barcode int) int {
	var num int = (barcode / 10)
	_ = num
	var s int = 0
	_ = s
	var position int = 0
	_ = position
	for num != 0 {
		var mult int = func() int {
			if _mod(position, 2) == 0 {
				return 3
			} else {
				return 1
			}
		}()
		_ = mult
		s = (s + (mult * _mod(num, 10)))
		num = (num / 10)
		position = (position + 1)
	}
	return _mod((10 - _mod(s, 10)), 10)
}

func is_valid(barcode int) bool {
	return ((len(fmt.Sprint(barcode)) == 13) && (get_check_digit(barcode) == _mod(barcode, 10)))
}

var res []int

var x int

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(fmt.Sprint(get_check_digit(8718452538119)))
		fmt.Println(fmt.Sprint(get_check_digit(87184523)))
		fmt.Println(fmt.Sprint(get_check_digit(87193425381086)))
		res = []int{}
		x = 0
		for x < 100 {
			res = append(res, get_check_digit(x))
			x = (x + 10)
		}
		fmt.Println(func() string {
			b, _ := json.Marshal(res)
			s := string(b)
			s = strings.ReplaceAll(s, ":", ": ")
			s = strings.ReplaceAll(s, ",", ", ")
			s = strings.ReplaceAll(s, "}, {", "},{")
			return s
		}())
		fmt.Println(fmt.Sprint(is_valid(8718452538119)))
		fmt.Println(fmt.Sprint(is_valid(87184525)))
		fmt.Println(fmt.Sprint(is_valid(87193425381089)))
		fmt.Println(fmt.Sprint(is_valid(0)))
		fmt.Println(fmt.Sprint(get_barcode("8718452538119")))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
