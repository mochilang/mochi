//go:build ignore

// Generated by Mochi v0.10.63 on 2025-08-11 15:36:16 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

func split_with_sep(s string, sep string) []string {
	var parts []string = []string{}
	_ = parts
	var last int = 0
	_ = last
	var i int = 0
	_ = i
	for i < len(s) {
		ch := _substr(s, i, (i + 1))
		_ = ch
		if fmt.Sprint(ch) == sep {
			parts = append(parts, _substr(s, last, i))
			last = (i + 1)
		}
		if (i + 1) == len(s) {
			parts = append(parts, _substr(s, last, (i+1)))
		}
		i = (i + 1)
	}
	return parts
}

func split(s string) []string {
	return split_with_sep(s, " ")
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(fmt.Sprint(split_with_sep("apple#banana#cherry#orange", "#")))
		fmt.Println(fmt.Sprint(split("Hello there")))
		fmt.Println(fmt.Sprint(split_with_sep("11/22/63", "/")))
		fmt.Println(fmt.Sprint(split_with_sep("12:43:39", ":")))
		fmt.Println(fmt.Sprint(split_with_sep(";abbb;;c;", ";")))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
