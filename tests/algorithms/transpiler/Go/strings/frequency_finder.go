//go:build ignore

// Generated by Mochi v0.10.63 on 2025-08-11 17:38:55 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"strings"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	s[idx] = v
}

var ETAOIN string

var LETTERS string

func etaoin_index(letter string) int {
	var i int = 0
	_ = i
	for i < len(ETAOIN) {
		if _substr(ETAOIN, i, (i+1)) == letter {
			return i
		}
		i = (i + 1)
	}
	return len(ETAOIN)
}

func get_letter_count(message string) map[string]int {
	var letter_count map[string]int = map[string]int{}
	_ = letter_count
	var i int = 0
	_ = i
	for i < len(LETTERS) {
		var c string = _substr(LETTERS, i, (i + 1))
		_ = c
		letter_count[c] = 0
		i = (i + 1)
	}
	var msg string = strings.ToUpper(message)
	_ = msg
	var j int = 0
	_ = j
	for j < len(msg) {
		var ch string = _substr(msg, j, (j + 1))
		_ = ch
		if strings.Contains(LETTERS, ch) {
			letter_count[ch] = (int(letter_count[ch]) + 1)
		}
		j = (j + 1)
	}
	return letter_count
}

func get_frequency_order(message string) string {
	var letter_to_freq map[string]int = get_letter_count(message)
	_ = letter_to_freq
	var max_freq int = 0
	_ = max_freq
	var i int = 0
	_ = i
	for i < len(LETTERS) {
		var letter string = _substr(LETTERS, i, (i + 1))
		_ = letter
		var f int = letter_to_freq[letter]
		_ = f
		if f > max_freq {
			max_freq = f
		}
		i = (i + 1)
	}
	var result string = ""
	_ = result
	var freq int = max_freq
	_ = freq
	for freq >= 0 {
		var group []string = []string{}
		_ = group
		var j int = 0
		_ = j
		for j < len(LETTERS) {
			var letter string = _substr(LETTERS, j, (j + 1))
			_ = letter
			if int(letter_to_freq[letter]) == freq {
				group = append(group, letter)
			}
			j = (j + 1)
		}
		var g_len int = len(group)
		_ = g_len
		var a int = 0
		_ = a
		for a < g_len {
			var b int = 0
			_ = b
			for b < ((g_len - a) - 1) {
				var g1 string = _index(group, b)
				_ = g1
				var g2 string = _index(group, (b + 1))
				_ = g2
				var idx1 int = etaoin_index(g1)
				_ = idx1
				var idx2 int = etaoin_index(g2)
				_ = idx2
				if idx1 < idx2 {
					var tmp string = _index(group, b)
					_ = tmp
					_setIndex(group, b, _index(group, (b+1)))
					_setIndex(group, (b + 1), tmp)
				}
				b = (b + 1)
			}
			a = (a + 1)
		}
		var g int = 0
		_ = g
		for g < len(group) {
			result = (result + _index(group, g))
			g = (g + 1)
		}
		freq = (freq - 1)
	}
	return result
}

func english_freq_match_score(message string) int {
	var freq_order string = get_frequency_order(message)
	_ = freq_order
	var top string = _substr(freq_order, 0, 6)
	_ = top
	_ = top
	var bottom string = _substr(freq_order, (len(freq_order) - 6), len(freq_order))
	_ = bottom
	_ = bottom
	var score int = 0
	_ = score
	var i int = 0
	_ = i
	for i < 6 {
		var c string = _substr(ETAOIN, i, (i + 1))
		_ = c
		_ = c
		if strings.Contains(top, c) {
			score = (score + 1)
		}
		i = (i + 1)
	}
	var j int = (len(ETAOIN) - 6)
	_ = j
	for j < len(ETAOIN) {
		var c string = _substr(ETAOIN, j, (j + 1))
		_ = c
		_ = c
		if strings.Contains(bottom, c) {
			score = (score + 1)
		}
		j = (j + 1)
	}
	return score
}

func mochiMain() {
	fmt.Println(get_frequency_order("Hello World"))
	fmt.Println(english_freq_match_score("Hello World"))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		ETAOIN = "ETAOINSHRDLCUMWFGYPBVKJXQZ"
		LETTERS = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
