//go:build ignore

// Generated by Mochi v0.10.63 on 2025-08-11 15:36:28 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"strings"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

func _len(v any) int {
	switch t := v.(type) {
	case string:
		return len([]rune(t))
	case []any:
		return len(t)
	case []string:
		return len(t)
	case []int:
		return len(t)
	case []float64:
		return len(t)
	case map[string]any:
		return len(t)
	case map[int]any:
		return len(t)
	case map[any]any:
		return len(t)
	default:
		return 0
	}
}

func find_index(xs []string, x string) int {
	var i int = 0
	_ = i
	for i < len(xs) {
		if _index(xs, i) == x {
			return i
		}
		i = (i + 1)
	}
	return (0 - 1)
}

func get_word_pattern(word string) string {
	w := strings.ToUpper(word)
	_ = w
	var letters []string = []string{}
	_ = letters
	var numbers []string = []string{}
	_ = numbers
	var next_num int = 0
	_ = next_num
	var res string = ""
	_ = res
	var i int = 0
	_ = i
	for i < _len(w) {
		ch := _index(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(w), i)
		_ = ch
		idx := find_index(func(v any) []string {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]string); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []string{}
				}
				out := make([]string, len(arr))
				for i, x := range arr {
					out[i] = fmt.Sprint(x)
				}
				return out
			}
			return v.([]string)
		}(letters), ch)
		_ = idx
		var num_str string
		_ = num_str
		if idx >= 0 {
			num_str = _index(numbers, idx)
		} else {
			num_str = fmt.Sprint(next_num)
			letters = append(letters, ch)
			numbers = append(numbers, num_str)
			next_num = (next_num + 1)
		}
		if i > 0 {
			res = (res + ".")
		}
		res = (res + num_str)
		i = (i + 1)
	}
	return res
}

func mochiMain() {
	fmt.Println(get_word_pattern(""))
	fmt.Println(get_word_pattern(" "))
	fmt.Println(get_word_pattern("pattern"))
	fmt.Println(get_word_pattern("word pattern"))
	fmt.Println(get_word_pattern("get word pattern"))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
