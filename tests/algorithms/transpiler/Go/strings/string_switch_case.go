//go:build ignore

// Generated by Mochi v0.10.63 on 2025-08-11 15:36:17 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"strings"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _len(v any) int {
	switch t := v.(type) {
	case string:
		return len([]rune(t))
	case []any:
		return len(t)
	case []string:
		return len(t)
	case []int:
		return len(t)
	case []float64:
		return len(t)
	case map[string]any:
		return len(t)
	case map[int]any:
		return len(t)
	case map[any]any:
		return len(t)
	default:
		return 0
	}
}

func split_words(s string) []string {
	var words []string = []string{}
	_ = words
	var current string = ""
	_ = current
	for _, _ch := range s {
		ch := string(_ch)
		if ch == " " {
			if current != "" {
				words = append(words, current)
				current = ""
			}
		} else {
			current = (current + ch)
		}
	}
	if current != "" {
		words = append(words, current)
	}
	return words
}

func is_alnum(c string) bool {
	return (((strings.Contains("0123456789", c) || strings.Contains("abcdefghijklmnopqrstuvwxyz", c)) || strings.Contains("ABCDEFGHIJKLMNOPQRSTUVWXYZ", c)) || (c == " "))
}

func split_input(text string) [][]string {
	var result [][]string = [][]string{}
	_ = result
	var current string = ""
	_ = current
	for _, _ch := range text {
		ch := string(_ch)
		if is_alnum(ch) {
			current = (current + ch)
		} else {
			if current != "" {
				result = append(result, split_words(current))
				current = ""
			}
		}
	}
	if current != "" {
		result = append(result, split_words(current))
	}
	return result
}

func capitalize(word string) string {
	if len(word) == 0 {
		return ""
	}
	if len(word) == 1 {
		return strings.ToUpper(word)
	}
	return (strings.ToUpper(string([]rune(word)[0:1])) + strings.ToLower(string([]rune(word)[1:])))
}

func to_simple_case(text string) string {
	parts := split_input(text)
	_ = parts
	var res string = ""
	_ = res
	for _, sub := range parts {
		for _, w := range sub {
			res = (res + capitalize(w))
		}
	}
	return res
}

func to_complex_case(text string, upper_flag bool, sep string) string {
	parts := split_input(text)
	_ = parts
	var res string = ""
	_ = res
	for _, sub := range parts {
		var first bool = true
		_ = first
		for _, w := range sub {
			var word string = func() string {
				if upper_flag {
					return strings.ToUpper(w)
				} else {
					return strings.ToLower(w)
				}
			}()
			_ = word
			if first {
				res = (res + word)
				first = false
			} else {
				res = ((res + sep) + word)
			}
		}
	}
	return res
}

func to_pascal_case(text string) string {
	return to_simple_case(text)
}

func to_camel_case(text string) string {
	s := to_simple_case(text)
	_ = s
	if _len(s) == 0 {
		return ""
	}
	return fmt.Sprint((strings.ToLower(s[0:1]) + fmt.Sprint(s[1:])))
}

func to_snake_case(text string, upper_flag bool) string {
	return to_complex_case(text, upper_flag, "_")
}

func to_kebab_case(text string, upper_flag bool) string {
	return to_complex_case(text, upper_flag, "-")
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(to_pascal_case("one two 31235three4four"))
		fmt.Println(to_camel_case("one two 31235three4four"))
		fmt.Println(to_snake_case("one two 31235three4four", true))
		fmt.Println(to_snake_case("one two 31235three4four", false))
		fmt.Println(to_kebab_case("one two 31235three4four", true))
		fmt.Println(to_kebab_case("one two 31235three4four", false))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
