//go:build ignore

// Generated by Mochi v0.10.63 on 2025-08-11 15:35:51 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _mod(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

func parse_int(s string) int {
	var value int = 0
	_ = value
	var i int = 0
	_ = i
	for i < len(s) {
		c := string(_index([]rune(s), i))
		_ = c
		_ = c
		value = ((value * 10) + func() int { n, _ := strconv.Atoi(fmt.Sprint(c)); return n }())
		i = (i + 1)
	}
	return value
}

func is_polish_national_id(id string) bool {
	if len(id) == 0 {
		return false
	}
	if _substr(id, 0, 1) == "-" {
		return false
	}
	input_int := parse_int(id)
	_ = input_int
	if (input_int < 10100000) || (input_int > 99923199999) {
		return false
	}
	month := parse_int(_substr(id, 2, 4))
	_ = month
	if !((((((month >= 1) && (month <= 12)) || ((month >= 21) && (month <= 32))) || ((month >= 41) && (month <= 52))) || ((month >= 61) && (month <= 72))) || ((month >= 81) && (month <= 92))) {
		return false
	}
	day := parse_int(_substr(id, 4, 6))
	_ = day
	if (day < 1) || (day > 31) {
		return false
	}
	var multipliers []int = []int{func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(1), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(3), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(7), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(9), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(1), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(3), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(7), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(9), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(1), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(3)}
	_ = multipliers
	var subtotal int = 0
	_ = subtotal
	var i int = 0
	_ = i
	for i < len(multipliers) {
		digit := parse_int(_substr(id, i, (i + 1)))
		_ = digit
		subtotal = (subtotal + _mod((digit*int(_index(multipliers, i))), 10))
		i = (i + 1)
	}
	var checksum int = (10 - _mod(subtotal, 10))
	_ = checksum
	_ = checksum
	return (checksum == _mod(input_int, 10))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(fmt.Sprint(is_polish_national_id("02070803628")))
		fmt.Println(fmt.Sprint(is_polish_national_id("02150803629")))
		fmt.Println(fmt.Sprint(is_polish_national_id("02075503622")))
		fmt.Println(fmt.Sprint(is_polish_national_id("-99012212349")))
		fmt.Println(fmt.Sprint(is_polish_national_id("990122123499999")))
		fmt.Println(fmt.Sprint(is_polish_national_id("02070803621")))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
