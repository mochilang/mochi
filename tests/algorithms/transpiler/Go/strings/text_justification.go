//go:build ignore

// Generated by Mochi v0.10.63 on 2025-08-11 15:36:20 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _mod(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

func _len(v any) int {
	switch t := v.(type) {
	case string:
		return len([]rune(t))
	case []any:
		return len(t)
	case []string:
		return len(t)
	case []int:
		return len(t)
	case []float64:
		return len(t)
	case map[string]any:
		return len(t)
	case map[int]any:
		return len(t)
	case map[any]any:
		return len(t)
	default:
		return 0
	}
}

func repeat_str(s string, count int) string {
	var res string = ""
	_ = res
	var i int = 0
	_ = i
	for i < count {
		res = (res + s)
		i = (i + 1)
	}
	return res
}

func split_words(s string) []string {
	var res []string = []string{}
	_ = res
	var current string = ""
	_ = current
	var i int = 0
	_ = i
	for i < len(s) {
		ch := string([]rune(s)[i:(i + 1)])
		_ = ch
		if fmt.Sprint(ch) == " " {
			if current != "" {
				res = append(res, current)
				current = ""
			}
		} else {
			current = (current + fmt.Sprint(ch))
		}
		i = (i + 1)
	}
	if current != "" {
		res = append(res, current)
	}
	return res
}

func justify_line(line []string, width int, max_width int) string {
	var overall_spaces_count int = (max_width - width)
	_ = overall_spaces_count
	words_count := len(line)
	_ = words_count
	if words_count == 1 {
		return (_index(line, 0) + repeat_str(" ", overall_spaces_count))
	}
	var spaces_to_insert_between_words int = (words_count - 1)
	_ = spaces_to_insert_between_words
	var num_spaces_between_words_list []int = []int{}
	_ = num_spaces_between_words_list
	var base int = (overall_spaces_count / spaces_to_insert_between_words)
	_ = base
	var extra int = _mod(overall_spaces_count, spaces_to_insert_between_words)
	_ = extra
	var i int = 0
	_ = i
	for i < spaces_to_insert_between_words {
		var spaces int = base
		_ = spaces
		if i < extra {
			spaces = (spaces + 1)
		}
		num_spaces_between_words_list = append(num_spaces_between_words_list, spaces)
		i = (i + 1)
	}
	var aligned string = ""
	_ = aligned
	i = 0
	for i < spaces_to_insert_between_words {
		aligned = ((aligned + _index(line, i)) + repeat_str(" ", _index(num_spaces_between_words_list, i)))
		i = (i + 1)
	}
	aligned = (aligned + _index(line, spaces_to_insert_between_words))
	return aligned
}

func text_justification(word string, max_width int) []string {
	words := split_words(word)
	_ = words
	var answer []string = []string{}
	_ = answer
	var line []string = []string{}
	_ = line
	var width int = 0
	_ = width
	var idx int = 0
	_ = idx
	for idx < _len(words) {
		w := _index(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(words), idx)
		_ = w
		if ((width + _len(w)) + len(line)) <= max_width {
			line = append(line, w)
			width = (width + _len(w))
		} else {
			answer = append(answer, justify_line(func(v any) []string {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]string); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []string{}
					}
					out := make([]string, len(arr))
					for i, x := range arr {
						out[i] = fmt.Sprint(x)
					}
					return out
				}
				return v.([]string)
			}(line), width, max_width))
			line = []string{w}
			width = _len(w)
		}
		idx = (idx + 1)
	}
	var remaining_spaces int = ((max_width - width) - len(line))
	_ = remaining_spaces
	var last_line string = ""
	_ = last_line
	var j int = 0
	_ = j
	for j < len(line) {
		if j > 0 {
			last_line = (last_line + " ")
		}
		last_line = (last_line + _index(line, j))
		j = (j + 1)
	}
	last_line = (last_line + repeat_str(" ", (remaining_spaces+1)))
	answer = append(answer, last_line)
	return answer
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(fmt.Sprint(text_justification("This is an example of text justification.", 16)))
		fmt.Println(fmt.Sprint(text_justification("Two roads diverged in a yellow wood", 16)))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
