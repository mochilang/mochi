//go:build ignore

// Generated by Mochi v0.10.63 on 2025-08-11 15:35:43 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

func _toFloat(v any) float64 {
	switch t := v.(type) {
	case int:
		return float64(t)
	case int64:
		return float64(t)
	case float64:
		return t
	default:
		return 0
	}
}

func min3(a int, b int, c int) int {
	var m int = a
	_ = m
	if b < m {
		m = b
	}
	if c < m {
		m = c
	}
	return m
}

func edit_distance(source string, target string) int {
	if len(source) == 0 {
		return len(target)
	}
	if len(target) == 0 {
		return len(source)
	}
	last_source := _substr(source, (len(source) - 1), len(source))
	_ = last_source
	_ = last_source
	last_target := _substr(target, (len(target) - 1), len(target))
	_ = last_target
	_ = last_target
	delta := func() int {
		if _toFloat(last_source) == _toFloat(last_target) {
			return 0
		} else {
			return 1
		}
	}()
	_ = delta
	delete_cost := (edit_distance(_substr(source, 0, (len(source)-1)), target) + 1)
	_ = delete_cost
	_ = delete_cost
	insert_cost := (edit_distance(source, _substr(target, 0, (len(target)-1))) + 1)
	_ = insert_cost
	_ = insert_cost
	replace_cost := (edit_distance(_substr(source, 0, (len(source)-1)), _substr(target, 0, (len(target)-1))) + delta)
	_ = replace_cost
	_ = replace_cost
	return min3(delete_cost, insert_cost, replace_cost)
}

func mochiMain() {
	result := edit_distance("ATCGCTG", "TAGCTAA")
	_ = result
	fmt.Println(fmt.Sprint(result))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
