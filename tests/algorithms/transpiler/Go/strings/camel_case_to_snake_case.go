//go:build ignore

// Generated by Mochi v0.10.63 on 2025-08-11 17:37:56 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

var LOWER string

var UPPER string

var DIGITS string

func is_lower(ch string) bool {
	var i int = 0
	_ = i
	for i < len(LOWER) {
		if string(_index([]rune(LOWER), i)) == ch {
			return true
		}
		i = (i + 1)
	}
	return false
}

func is_upper(ch string) bool {
	var i int = 0
	_ = i
	for i < len(UPPER) {
		if string(_index([]rune(UPPER), i)) == ch {
			return true
		}
		i = (i + 1)
	}
	return false
}

func is_digit(ch string) bool {
	var i int = 0
	_ = i
	for i < len(DIGITS) {
		if string(_index([]rune(DIGITS), i)) == ch {
			return true
		}
		i = (i + 1)
	}
	return false
}

func is_alpha(ch string) bool {
	if is_lower(ch) {
		return true
	}
	if is_upper(ch) {
		return true
	}
	return false
}

func is_alnum(ch string) bool {
	if is_alpha(ch) {
		return true
	}
	if is_digit(ch) {
		return true
	}
	return false
}

func to_lower(ch string) string {
	var i int = 0
	_ = i
	for i < len(UPPER) {
		if string(_index([]rune(UPPER), i)) == ch {
			return string(_index([]rune(LOWER), i))
		}
		i = (i + 1)
	}
	return ch
}

func camel_to_snake_case(input_str string) string {
	var snake_str string = ""
	_ = snake_str
	var i int = 0
	_ = i
	var prev_is_digit bool = false
	_ = prev_is_digit
	var prev_is_alpha bool = false
	_ = prev_is_alpha
	for i < len(input_str) {
		var ch string = string(_index([]rune(input_str), i))
		_ = ch
		if is_upper(ch) {
			snake_str = ((snake_str + "_") + to_lower(ch))
		} else {
			if prev_is_digit && is_lower(ch) {
				snake_str = ((snake_str + "_") + ch)
			} else {
				if prev_is_alpha && is_digit(ch) {
					snake_str = ((snake_str + "_") + ch)
				} else {
					if !is_alnum(ch) {
						snake_str = (snake_str + "_")
					} else {
						snake_str = (snake_str + ch)
					}
				}
			}
		}
		prev_is_digit = is_digit(ch)
		prev_is_alpha = is_alpha(ch)
		i = (i + 1)
	}
	if (len(snake_str) > 0) && (string(_index([]rune(snake_str), 0)) == "_") {
		snake_str = string([]rune(snake_str)[1:len(snake_str)])
	}
	return snake_str
}

func mochiMain() {
	fmt.Println(camel_to_snake_case("someRandomString"))
	fmt.Println(camel_to_snake_case("SomeRandomStr#ng"))
	fmt.Println(camel_to_snake_case("123SomeRandom123String123"))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		LOWER = "abcdefghijklmnopqrstuvwxyz"
		UPPER = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
		DIGITS = "0123456789"
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
