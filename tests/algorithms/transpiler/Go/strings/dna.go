//go:build ignore

// Generated by Mochi v0.10.63 on 2025-08-11 15:35:41 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

func is_valid(strand string) bool {
	var i int = 0
	_ = i
	for i < len(strand) {
		ch := _substr(strand, i, (i + 1))
		_ = ch
		if (((fmt.Sprint(ch) != "A") && (fmt.Sprint(ch) != "T")) && (fmt.Sprint(ch) != "C")) && (fmt.Sprint(ch) != "G") {
			return false
		}
		i = (i + 1)
	}
	return true
}

func dna(strand string) string {
	if !is_valid(strand) {
		fmt.Println("ValueError: Invalid Strand")
		return ""
	}
	var result string = ""
	_ = result
	var i int = 0
	_ = i
	for i < len(strand) {
		ch := _substr(strand, i, (i + 1))
		_ = ch
		if fmt.Sprint(ch) == "A" {
			result = (result + "T")
		} else {
			if fmt.Sprint(ch) == "T" {
				result = (result + "A")
			} else {
				if fmt.Sprint(ch) == "C" {
					result = (result + "G")
				} else {
					result = (result + "C")
				}
			}
		}
		i = (i + 1)
	}
	return result
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(dna("GCTA"))
		fmt.Println(dna("ATGC"))
		fmt.Println(dna("CTGA"))
		fmt.Println(dna("GFGG"))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
