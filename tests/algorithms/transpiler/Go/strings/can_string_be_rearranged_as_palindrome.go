//go:build ignore

// Generated by Mochi v0.10.63 on 2025-08-11 17:37:57 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"sort"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _mod(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

var LETTERS string

var LOWERCASE string

func char_to_lower(c string) string {
	var i int = 0
	_ = i
	for i < len(LETTERS) {
		if c == _substr(LETTERS, i, (i+1)) {
			return _substr(LOWERCASE, i, (i + 1))
		}
		i = (i + 1)
	}
	return c
}

func normalize(input_str string) string {
	var res string = ""
	_ = res
	var i int = 0
	_ = i
	for i < len(input_str) {
		var ch string = _substr(input_str, i, (i + 1))
		_ = ch
		var lc string = char_to_lower(ch)
		_ = lc
		if (lc >= "a") && (lc <= "z") {
			res = (res + lc)
		}
		i = (i + 1)
	}
	return res
}

func can_string_be_rearranged_as_palindrome_counter(input_str string) bool {
	var s string = normalize(input_str)
	_ = s
	var freq map[string]int = map[string]int{}
	_ = freq
	var i int = 0
	_ = i
	for i < len(s) {
		var ch string = _substr(s, i, (i + 1))
		_ = ch
		if func() bool { _, ok := freq[ch]; return ok }() {
			freq[ch] = (int(freq[ch]) + 1)
		} else {
			freq[ch] = 1
		}
		i = (i + 1)
	}
	var odd int = 0
	_ = odd
	for _, key := range func() []string {
		keys := make([]string, 0, len(freq))
		for k := range freq {
			keys = append(keys, k)
		}
		sort.Slice(keys, func(i, j int) bool { return fmt.Sprint(keys[i]) < fmt.Sprint(keys[j]) })
		return keys
	}() {
		if _mod(int(freq[key]), 2) != 0 {
			odd = (odd + 1)
		}
	}
	return (odd < 2)
}

func can_string_be_rearranged_as_palindrome(input_str string) bool {
	var s string = normalize(input_str)
	_ = s
	if len(s) == 0 {
		return true
	}
	var character_freq_dict map[string]int = map[string]int{}
	_ = character_freq_dict
	var i int = 0
	_ = i
	for i < len(s) {
		var character string = _substr(s, i, (i + 1))
		_ = character
		if func() bool { _, ok := character_freq_dict[character]; return ok }() {
			character_freq_dict[character] = (int(character_freq_dict[character]) + 1)
		} else {
			character_freq_dict[character] = 1
		}
		i = (i + 1)
	}
	var odd_char int = 0
	_ = odd_char
	for _, character_key := range func() []string {
		keys := make([]string, 0, len(character_freq_dict))
		for k := range character_freq_dict {
			keys = append(keys, k)
		}
		sort.Slice(keys, func(i, j int) bool { return fmt.Sprint(keys[i]) < fmt.Sprint(keys[j]) })
		return keys
	}() {
		var character_count int = character_freq_dict[character_key]
		_ = character_count
		if _mod(character_count, 2) != 0 {
			odd_char = (odd_char + 1)
		}
	}
	return !(odd_char > 1)
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		LETTERS = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
		LOWERCASE = "abcdefghijklmnopqrstuvwxyz"
		fmt.Println(can_string_be_rearranged_as_palindrome_counter("Momo"))
		fmt.Println(can_string_be_rearranged_as_palindrome_counter("Mother"))
		fmt.Println(can_string_be_rearranged_as_palindrome("Momo"))
		fmt.Println(can_string_be_rearranged_as_palindrome("Mother"))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
