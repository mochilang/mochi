//go:build ignore

// Generated by Mochi v0.10.63 on 2025-08-11 15:36:22 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"sort"
	"strconv"
	"strings"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	s[idx] = v
}

type WordCount struct {
	Word  string `json:"word"`
	Count int    `json:"count"`
}

var freq_map map[string]int

func heapify(arr []WordCount, index int, heap_size int) {
	var largest int = index
	_ = largest
	var left int = ((2 * index) + 1)
	_ = left
	var right int = ((2 * index) + 2)
	_ = right
	if left < heap_size {
		var left_item WordCount = _index(arr, left)
		_ = left_item
		var largest_item WordCount = _index(arr, largest)
		_ = largest_item
		if left_item.Count > largest_item.Count {
			largest = left
		}
	}
	if right < heap_size {
		var right_item WordCount = _index(arr, right)
		_ = right_item
		var largest_item2 WordCount = _index(arr, largest)
		_ = largest_item2
		if right_item.Count > largest_item2.Count {
			largest = right
		}
	}
	if largest != index {
		var temp WordCount = _index(arr, largest)
		_ = temp
		_setIndex(arr, largest, _index(arr, index))
		_setIndex(arr, index, temp)
		heapify(func(v any) []WordCount {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]WordCount); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []WordCount{}
				}
				out := make([]WordCount, len(arr))
				for i, x := range arr {
					out[i] = x.(WordCount)
				}
				return out
			}
			return v.([]WordCount)
		}(arr), largest, heap_size)
	}
}

func build_max_heap(arr []WordCount) {
	var i int = ((len(arr) / 2) - 1)
	_ = i
	for i >= 0 {
		heapify(func(v any) []WordCount {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]WordCount); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []WordCount{}
				}
				out := make([]WordCount, len(arr))
				for i, x := range arr {
					out[i] = x.(WordCount)
				}
				return out
			}
			return v.([]WordCount)
		}(arr), i, len(arr))
		i = (i - 1)
	}
}

func top_k_frequent_words(words []string, k_value int) []string {
	freq_map = map[string]int{}
	var i int = 0
	_ = i
	for i < len(words) {
		var w string = _index(words, i)
		_ = w
		if func() bool { _, ok := freq_map[w]; return ok }() {
			freq_map[w] = (int(freq_map[w]) + 1)
		} else {
			freq_map[w] = 1
		}
		i = (i + 1)
	}
	var heap []WordCount = []WordCount{}
	_ = heap
	for _, w := range func() []string {
		keys := make([]string, 0, len(freq_map))
		for k := range freq_map {
			keys = append(keys, k)
		}
		sort.Slice(keys, func(i, j int) bool { return fmt.Sprint(keys[i]) < fmt.Sprint(keys[j]) })
		return keys
	}() {
		heap = append(heap, WordCount{
			Word:  w,
			Count: freq_map[w],
		})
	}
	build_max_heap(func(v any) []WordCount {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]WordCount); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []WordCount{}
			}
			out := make([]WordCount, len(arr))
			for i, x := range arr {
				out[i] = x.(WordCount)
			}
			return out
		}
		return v.([]WordCount)
	}(heap))
	var result []string = []string{}
	_ = result
	var heap_size int = len(heap)
	_ = heap_size
	var limit int = k_value
	_ = limit
	if limit > heap_size {
		limit = heap_size
	}
	var j int = 0
	_ = j
	for j < limit {
		var item WordCount = _index(heap, 0)
		_ = item
		result = append(result, item.Word)
		_setIndex(heap, 0, _index(heap, (heap_size-1)))
		_setIndex(heap, (heap_size - 1), item)
		heap_size = (heap_size - 1)
		heapify(func(v any) []WordCount {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]WordCount); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []WordCount{}
				}
				out := make([]WordCount, len(arr))
				for i, x := range arr {
					out[i] = x.(WordCount)
				}
				return out
			}
			return v.([]WordCount)
		}(heap), 0, heap_size)
		j = (j + 1)
	}
	return result
}

func mochiMain() {
	var sample []string = []string{"a", "b", "c", "a", "c", "c"}
	_ = sample
	_ = sample
	fmt.Println(func() string {
		b, _ := json.Marshal(top_k_frequent_words(func(v any) []string {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]string); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []string{}
				}
				out := make([]string, len(arr))
				for i, x := range arr {
					out[i] = fmt.Sprint(x)
				}
				return out
			}
			return v.([]string)
		}(sample), 3))
		s := string(b)
		s = strings.ReplaceAll(s, ":", ": ")
		s = strings.ReplaceAll(s, ",", ", ")
		s = strings.ReplaceAll(s, "}, {", "},{")
		return s
	}())
	fmt.Println(func() string {
		b, _ := json.Marshal(top_k_frequent_words(func(v any) []string {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]string); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []string{}
				}
				out := make([]string, len(arr))
				for i, x := range arr {
					out[i] = fmt.Sprint(x)
				}
				return out
			}
			return v.([]string)
		}(sample), 2))
		s := string(b)
		s = strings.ReplaceAll(s, ":", ": ")
		s = strings.ReplaceAll(s, ",", ", ")
		s = strings.ReplaceAll(s, "}, {", "},{")
		return s
	}())
	fmt.Println(func() string {
		b, _ := json.Marshal(top_k_frequent_words(func(v any) []string {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]string); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []string{}
				}
				out := make([]string, len(arr))
				for i, x := range arr {
					out[i] = fmt.Sprint(x)
				}
				return out
			}
			return v.([]string)
		}(sample), 1))
		s := string(b)
		s = strings.ReplaceAll(s, ":", ": ")
		s = strings.ReplaceAll(s, ",", ", ")
		s = strings.ReplaceAll(s, "}, {", "},{")
		return s
	}())
	fmt.Println(func() string {
		b, _ := json.Marshal(top_k_frequent_words(func(v any) []string {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]string); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []string{}
				}
				out := make([]string, len(arr))
				for i, x := range arr {
					out[i] = fmt.Sprint(x)
				}
				return out
			}
			return v.([]string)
		}(sample), 0))
		s := string(b)
		s = strings.ReplaceAll(s, ":", ": ")
		s = strings.ReplaceAll(s, ",", ", ")
		s = strings.ReplaceAll(s, "}, {", "},{")
		return s
	}())
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		freq_map = map[string]int{}
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
