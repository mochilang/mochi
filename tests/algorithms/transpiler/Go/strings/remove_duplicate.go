//go:build ignore

// Generated by Mochi v0.10.63 on 2025-08-11 15:36:12 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	s[idx] = v
}

func split_ws(s string) []string {
	var res []string = []string{}
	_ = res
	var word string = ""
	_ = word
	var i int = 0
	_ = i
	for i < len(s) {
		ch := _substr(s, i, (i + 1))
		_ = ch
		if fmt.Sprint(ch) == " " {
			if word != "" {
				res = append(res, word)
				word = ""
			}
		} else {
			word = (word + fmt.Sprint(ch))
		}
		i = (i + 1)
	}
	if word != "" {
		res = append(res, word)
	}
	return res
}

func contains(xs []string, x string) bool {
	var i int = 0
	_ = i
	for i < len(xs) {
		if _index(xs, i) == x {
			return true
		}
		i = (i + 1)
	}
	return false
}

func unique(xs []string) []string {
	var res []string = []string{}
	_ = res
	var i int = 0
	_ = i
	for i < len(xs) {
		var w string = _index(xs, i)
		_ = w
		if !contains(res, w) {
			res = append(res, w)
		}
		i = (i + 1)
	}
	return res
}

func insertion_sort(arr []string) []string {
	var a []string = arr
	_ = a
	var i int = 1
	_ = i
	for i < len(a) {
		var key string = _index(a, i)
		_ = key
		var j int = (i - 1)
		_ = j
		for (j >= 0) && (_index(a, j) > key) {
			_setIndex(a, (j + 1), _index(a, j))
			j = (j - 1)
		}
		_setIndex(a, (j + 1), key)
		i = (i + 1)
	}
	return a
}

func join_with_space(xs []string) string {
	var s string = ""
	_ = s
	var i int = 0
	_ = i
	for i < len(xs) {
		if i > 0 {
			s = (s + " ")
		}
		s = (s + _index(xs, i))
		i = (i + 1)
	}
	return s
}

func remove_duplicates(sentence string) string {
	words := split_ws(sentence)
	_ = words
	uniq := unique(func(v any) []string {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]string); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []string{}
			}
			out := make([]string, len(arr))
			for i, x := range arr {
				out[i] = fmt.Sprint(x)
			}
			return out
		}
		return v.([]string)
	}(func(v any) []string {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]string); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []string{}
			}
			out := make([]string, len(arr))
			for i, x := range arr {
				out[i] = fmt.Sprint(x)
			}
			return out
		}
		return v.([]string)
	}(words)))
	_ = uniq
	sorted_words := insertion_sort(func(v any) []string {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]string); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []string{}
			}
			out := make([]string, len(arr))
			for i, x := range arr {
				out[i] = fmt.Sprint(x)
			}
			return out
		}
		return v.([]string)
	}(func(v any) []string {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]string); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []string{}
			}
			out := make([]string, len(arr))
			for i, x := range arr {
				out[i] = fmt.Sprint(x)
			}
			return out
		}
		return v.([]string)
	}(uniq)))
	_ = sorted_words
	_ = sorted_words
	return join_with_space(func(v any) []string {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]string); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []string{}
			}
			out := make([]string, len(arr))
			for i, x := range arr {
				out[i] = fmt.Sprint(x)
			}
			return out
		}
		return v.([]string)
	}(func(v any) []string {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]string); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []string{}
			}
			out := make([]string, len(arr))
			for i, x := range arr {
				out[i] = fmt.Sprint(x)
			}
			return out
		}
		return v.([]string)
	}(sorted_words)))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(remove_duplicates("Python is great and Java is also great"))
		fmt.Println(remove_duplicates("Python   is      great and Java is also great"))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
