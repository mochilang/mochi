//go:build ignore

// Generated by Mochi v0.10.70 on 2025-08-23 13:50:26 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		return
	}
	s[idx] = v
}

func z_function(s string) []int {
	var z []int = []int{}
	_ = z
	var i int = 0
	_ = i
	for i < len(s) {
		z = append(z, 0)
		i = (i + 1)
	}
	var l int = 0
	_ = l
	var r int = 0
	_ = r
	i = 1
	for i < len(s) {
		if i <= r {
			var min_edge int = ((r - i) + 1)
			_ = min_edge
			var zi int = _index(z, (i - l))
			_ = zi
			if zi < min_edge {
				min_edge = zi
			}
			_setIndex(z, i, min_edge)
		}
		for go_next(i, func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(z), s) {
			_setIndex(z, i, (_index(z, i) + 1))
		}
		if ((i + _index(z, i)) - 1) > r {
			l = i
			r = ((i + _index(z, i)) - 1)
		}
		i = (i + 1)
	}
	return z
}

func go_next(i int, z []int, s string) bool {
	return (((i + _index(z, i)) < len(s)) && (string(_index([]rune(s), _index(z, i))) == string(_index([]rune(s), (i+_index(z, i))))))
}

func find_pattern(pattern string, input_str string) int {
	var answer int = 0
	_ = answer
	var z_res []int = z_function((pattern + input_str))
	_ = z_res
	var i int = 0
	_ = i
	for i < len(z_res) {
		if _index(z_res, i) >= len(pattern) {
			answer = (answer + 1)
		}
		i = (i + 1)
	}
	return answer
}

func list_eq_int(a []int, b []int) bool {
	if len(a) != len(b) {
		return false
	}
	var i int = 0
	_ = i
	for i < len(a) {
		if _index(a, i) != _index(b, i) {
			return false
		}
		i = (i + 1)
	}
	return true
}

func test_z_function() {
	var s1 string = "abracadabra"
	_ = s1
	var expected1 []int = []int{0, 0, 0, 1, 0, 1, 0, 4, 0, 0, 1}
	_ = expected1
	var r1 []int = z_function(s1)
	_ = r1
	if !list_eq_int(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(r1), func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(expected1)) {
		panic("z_function abracadabra failed")
	}
	var s2 string = "aaaa"
	_ = s2
	var expected2 []int = []int{0, 3, 2, 1}
	_ = expected2
	var r2 []int = z_function(s2)
	_ = r2
	if !list_eq_int(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(r2), func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(expected2)) {
		panic("z_function aaaa failed")
	}
	var s3 string = "zxxzxxz"
	_ = s3
	var expected3 []int = []int{0, 0, 0, 4, 0, 0, 1}
	_ = expected3
	var r3 []int = z_function(s3)
	_ = r3
	if !list_eq_int(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(r3), func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(expected3)) {
		panic("z_function zxxzxxz failed")
	}
}

func test_find_pattern() {
	if find_pattern("abr", "abracadabra") != 2 {
		panic("find_pattern abr failed")
	}
	if find_pattern("a", "aaaa") != 4 {
		panic("find_pattern aaaa failed")
	}
	if find_pattern("xz", "zxxzxxz") != 2 {
		panic("find_pattern xz failed")
	}
}

func mochiMain() {
	test_z_function()
	test_find_pattern()
	var r1 []int = z_function("abracadabra")
	_ = r1
	var r2 []int = z_function("aaaa")
	_ = r2
	var r3 []int = z_function("zxxzxxz")
	_ = r3
	fmt.Println(fmt.Sprint(r1))
	fmt.Println(fmt.Sprint(r2))
	fmt.Println(fmt.Sprint(r3))
	fmt.Println(fmt.Sprint(find_pattern("abr", "abracadabra")))
	fmt.Println(fmt.Sprint(find_pattern("a", "aaaa")))
	fmt.Println(fmt.Sprint(find_pattern("xz", "zxxzxxz")))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
