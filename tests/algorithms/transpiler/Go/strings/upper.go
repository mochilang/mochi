//go:build ignore

// Generated by Mochi v0.10.63 on 2025-08-11 15:36:23 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"strings"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

func index_of(s string, ch string) int {
	var i int = 0
	_ = i
	for i < len(s) {
		if string(_index([]rune(s), i)) == ch {
			return i
		}
		i = (i + 1)
	}
	return (0 - 1)
}

func upper(word string) string {
	var lower_chars string = "abcdefghijklmnopqrstuvwxyz"
	_ = lower_chars
	var upper_chars string = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
	_ = upper_chars
	_ = upper_chars
	var result string = ""
	_ = result
	var i int = 0
	_ = i
	for i < len(word) {
		c := string(_index([]rune(word), i))
		_ = c
		idx := index_of(lower_chars, c)
		_ = idx
		if idx >= 0 {
			result = (result + string([]rune(upper_chars)[idx:(idx+1)]))
		} else {
			result = (result + fmt.Sprint(c))
		}
		i = (i + 1)
	}
	return result
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(strings.ToUpper("wow"))
		fmt.Println(strings.ToUpper("Hello"))
		fmt.Println(strings.ToUpper("WHAT"))
		fmt.Println(strings.ToUpper("wh[]32"))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
