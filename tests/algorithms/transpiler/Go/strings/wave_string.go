//go:build ignore

// Generated by Mochi v0.10.63 on 2025-08-11 15:36:24 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

var lowercase string

var uppercase string

func index_of(s string, c string) int {
	var i int = 0
	_ = i
	for i < len(s) {
		if _substr(s, i, (i+1)) == c {
			return i
		}
		i = (i + 1)
	}
	return (0 - 1)
}

func is_alpha(c string) bool {
	return ((index_of(lowercase, c) >= 0) || (index_of(uppercase, c) >= 0))
}

func to_upper(c string) string {
	idx := index_of(lowercase, c)
	_ = idx
	if idx >= 0 {
		return _substr(uppercase, idx, (idx + 1))
	}
	return c
}

func wave(txt string) []string {
	var result []string = []string{}
	_ = result
	var i int = 0
	_ = i
	for i < len(txt) {
		ch := _substr(txt, i, (i + 1))
		_ = ch
		if is_alpha(ch) {
			prefix := _substr(txt, 0, i)
			_ = prefix
			suffix := _substr(txt, (i + 1), len(txt))
			_ = suffix
			result = append(result, fmt.Sprint(((fmt.Sprint(prefix) + to_upper(ch)) + fmt.Sprint(suffix))))
		}
		i = (i + 1)
	}
	return result
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		lowercase = "abcdefghijklmnopqrstuvwxyz"
		uppercase = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
		fmt.Println(fmt.Sprint(wave("cat")))
		fmt.Println(fmt.Sprint(wave("one")))
		fmt.Println(fmt.Sprint(wave("book")))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
