//go:build ignore

// Generated by Mochi v0.10.63 on 2025-08-11 17:37:53 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _mod(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	s[idx] = v
}

func pow2(n int) int {
	var res int = 1
	_ = res
	var i int = 0
	_ = i
	for i < n {
		res = (res * 2)
		i = (i + 1)
	}
	return res
}

func bit_and(a int, b int) int {
	var x int = a
	_ = x
	var y int = b
	_ = y
	var res int = 0
	_ = res
	var bit int = 1
	_ = bit
	for (x > 0) || (y > 0) {
		if (_mod(x, 2) == 1) && (_mod(y, 2) == 1) {
			res = (res + bit)
		}
		x = func() int { n, _ := strconv.Atoi(fmt.Sprint((x / 2))); return n }()
		y = func() int { n, _ := strconv.Atoi(fmt.Sprint((y / 2))); return n }()
		bit = (bit * 2)
	}
	return res
}

func bit_or(a int, b int) int {
	var x int = a
	_ = x
	var y int = b
	_ = y
	var res int = 0
	_ = res
	var bit int = 1
	_ = bit
	for (x > 0) || (y > 0) {
		if (_mod(x, 2) == 1) || (_mod(y, 2) == 1) {
			res = (res + bit)
		}
		x = func() int { n, _ := strconv.Atoi(fmt.Sprint((x / 2))); return n }()
		y = func() int { n, _ := strconv.Atoi(fmt.Sprint((y / 2))); return n }()
		bit = (bit * 2)
	}
	return res
}

func char_to_index(ch string) int {
	var letters string = "abcdefghijklmnopqrstuvwxyz"
	_ = letters
	var i int = 0
	_ = i
	for i < len(letters) {
		if string([]rune(letters)[i:(i+1)]) == ch {
			return i
		}
		i = (i + 1)
	}
	return 26
}

func bitap_string_match(text string, pattern string) int {
	if pattern == "" {
		return 0
	}
	var m int = len(pattern)
	_ = m
	if m > len(text) {
		return (0 - 1)
	}
	var limit int = pow2((m + 1))
	_ = limit
	var all_ones int = (limit - 1)
	_ = all_ones
	var pattern_mask []int = []int{}
	_ = pattern_mask
	var i int = 0
	_ = i
	for i < 27 {
		pattern_mask = append(pattern_mask, all_ones)
		i = (i + 1)
	}
	i = 0
	for i < m {
		var ch string = string([]rune(pattern)[i:(i + 1)])
		_ = ch
		var idx int = char_to_index(ch)
		_ = idx
		_setIndex(pattern_mask, idx, bit_and(_index(pattern_mask, idx), (all_ones-pow2(i))))
		i = (i + 1)
	}
	var state int = (all_ones - 1)
	_ = state
	i = 0
	for i < len(text) {
		var ch string = string([]rune(text)[i:(i + 1)])
		_ = ch
		var idx int = char_to_index(ch)
		_ = idx
		state = bit_or(state, _index(pattern_mask, idx))
		state = _mod((state * 2), limit)
		if bit_and(state, pow2(m)) == 0 {
			return ((i - m) + 1)
		}
		i = (i + 1)
	}
	return (0 - 1)
}

func mochiMain() {
	fmt.Println(fmt.Sprint(bitap_string_match("abdabababc", "ababc")))
	fmt.Println(fmt.Sprint(bitap_string_match("abdabababc", "")))
	fmt.Println(fmt.Sprint(bitap_string_match("abdabababc", "c")))
	fmt.Println(fmt.Sprint(bitap_string_match("abdabababc", "fofosdfo")))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
