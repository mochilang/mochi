//go:build ignore

// Generated by Mochi v0.10.63 on 2025-08-11 15:36:01 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	s[idx] = v
}

func _len(v any) int {
	switch t := v.(type) {
	case string:
		return len([]rune(t))
	case []any:
		return len(t)
	case []string:
		return len(t)
	case []int:
		return len(t)
	case []float64:
		return len(t)
	case map[string]any:
		return len(t)
	case map[int]any:
		return len(t)
	case map[any]any:
		return len(t)
	default:
		return 0
	}
}

func palindromic_string(input_string string) string {
	var max_length int = 0
	_ = max_length
	var new_input_string string = ""
	_ = new_input_string
	var output_string string = ""
	_ = output_string
	n := len(input_string)
	_ = n
	var i int = 0
	_ = i
	for i < (n - 1) {
		new_input_string = ((new_input_string + _substr(input_string, i, (i+1))) + "|")
		i = (i + 1)
	}
	new_input_string = (new_input_string + _substr(input_string, (n-1), n))
	var left int = 0
	_ = left
	var right int = 0
	_ = right
	var length []int = []int{}
	_ = length
	i = 0
	m := len(new_input_string)
	_ = m
	for i < m {
		length = append(length, 1)
		i = (i + 1)
	}
	var start int = 0
	_ = start
	var j int = 0
	_ = j
	for j < m {
		var k int = 1
		_ = k
		if j <= right {
			var mirror int = ((left + right) - j)
			_ = mirror
			k = (int(_index(length, mirror)) / 2)
			var diff int = ((right - j) + 1)
			_ = diff
			if diff < k {
				k = diff
			}
			if k < 1 {
				k = 1
			}
		}
		for (((j - k) >= 0) && ((j + k) < m)) && (_substr(new_input_string, (j+k), ((j+k)+1)) == _substr(new_input_string, (j-k), ((j-k)+1))) {
			k = (k + 1)
		}
		_setIndex(length, j, ((2 * k) - 1))
		if ((j + k) - 1) > right {
			left = ((j - k) + 1)
			right = ((j + k) - 1)
		}
		if int(_index(length, j)) > max_length {
			max_length = _index(length, j)
			start = j
		}
		j = (j + 1)
	}
	s := _substr(new_input_string, (start - (max_length / 2)), ((start + (max_length / 2)) + 1))
	_ = s
	var idx int = 0
	_ = idx
	for idx < _len(s) {
		ch := _substr(fmt.Sprint(s), idx, (idx + 1))
		_ = ch
		if fmt.Sprint(ch) != "|" {
			output_string = (output_string + fmt.Sprint(ch))
		}
		idx = (idx + 1)
	}
	return output_string
}

func mochiMain() {
	fmt.Println(palindromic_string("abbbaba"))
	fmt.Println(palindromic_string("ababa"))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
