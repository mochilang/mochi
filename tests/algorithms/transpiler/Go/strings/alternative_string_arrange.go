//go:build ignore

// Generated by Mochi v0.10.63 on 2025-08-11 17:37:43 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

func alternative_string_arrange(first_str string, second_str string) string {
	var len1 int = len(first_str)
	_ = len1
	var len2 int = len(second_str)
	_ = len2
	var res string = ""
	_ = res
	var i int = 0
	_ = i
	for (i < len1) || (i < len2) {
		if i < len1 {
			res = (res + string(_index([]rune(first_str), i)))
		}
		if i < len2 {
			res = (res + string(_index([]rune(second_str), i)))
		}
		i = (i + 1)
	}
	return res
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(alternative_string_arrange("ABCD", "XY"))
		fmt.Println(alternative_string_arrange("XY", "ABCD"))
		fmt.Println(alternative_string_arrange("AB", "XYZ"))
		fmt.Println(alternative_string_arrange("ABC", ""))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
