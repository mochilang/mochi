//go:build ignore

// Generated by Mochi v0.10.63 on 2025-08-11 15:35:48 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _mod(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

func ord(ch string) int {
	var lower string = "abcdefghijklmnopqrstuvwxyz"
	_ = lower
	var upper string = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
	_ = upper
	var digits string = "0123456789"
	_ = digits
	var i int = 0
	_ = i
	for i < len(lower) {
		if string(_index([]rune(lower), i)) == ch {
			return (97 + i)
		}
		i = (i + 1)
	}
	i = 0
	for i < len(upper) {
		if string(_index([]rune(upper), i)) == ch {
			return (65 + i)
		}
		i = (i + 1)
	}
	i = 0
	for i < len(digits) {
		if string(_index([]rune(digits), i)) == ch {
			return (48 + i)
		}
		i = (i + 1)
	}
	if ch == " " {
		return 32
	}
	if ch == "_" {
		return 95
	}
	if ch == "." {
		return 46
	}
	if ch == "'" {
		return 39
	}
	return 0
}

func lshift(num int, k int) int {
	var result int = num
	_ = result
	var i int = 0
	_ = i
	for i < k {
		result = (result * 2)
		i = (i + 1)
	}
	return result
}

func rshift(num int, k int) int {
	var result int = num
	_ = result
	var i int = 0
	_ = i
	for i < k {
		result = ((result - _mod(result, 2)) / 2)
		i = (i + 1)
	}
	return result
}

func is_contains_unique_chars(input_str string) bool {
	var bitmap int = 0
	_ = bitmap
	var i int = 0
	_ = i
	for i < len(input_str) {
		code := ord(string(_index([]rune(input_str), i)))
		_ = code
		if _mod(rshift(bitmap, code), 2) == 1 {
			return false
		}
		bitmap = (bitmap + lshift(1, code))
		i = (i + 1)
	}
	return true
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(fmt.Sprint(is_contains_unique_chars("I_love.py")))
		fmt.Println(fmt.Sprint(is_contains_unique_chars("I don't love Python")))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
