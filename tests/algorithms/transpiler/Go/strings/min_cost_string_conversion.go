//go:build ignore

// Generated by Mochi v0.10.63 on 2025-08-11 15:36:03 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	s[idx] = v
}

func _len(v any) int {
	switch t := v.(type) {
	case string:
		return len([]rune(t))
	case []any:
		return len(t)
	case []string:
		return len(t)
	case []int:
		return len(t)
	case []float64:
		return len(t)
	case map[string]any:
		return len(t)
	case map[int]any:
		return len(t)
	case map[any]any:
		return len(t)
	default:
		return 0
	}
}

func _toFloat(v any) float64 {
	switch t := v.(type) {
	case int:
		return float64(t)
	case int64:
		return float64(t)
	case float64:
		return t
	default:
		return 0
	}
}

type TransformTables struct {
	Costs [][]int    `json:"costs"`
	Ops   [][]string `json:"ops"`
}

func string_to_chars(s string) []string {
	var chars []string = []string{}
	_ = chars
	var i int = 0
	_ = i
	for i < len(s) {
		chars = append(chars, _substr(s, i, (i+1)))
		i = (i + 1)
	}
	return chars
}

func join_chars(chars []string) string {
	var res string = ""
	_ = res
	var i int = 0
	_ = i
	for i < len(chars) {
		res = (res + _index(chars, i))
		i = (i + 1)
	}
	return res
}

func insert_at(chars []string, index int, ch string) []string {
	var res []string = []string{}
	_ = res
	var i int = 0
	_ = i
	for i < index {
		res = append(res, _index(chars, i))
		i = (i + 1)
	}
	res = append(res, ch)
	for i < len(chars) {
		res = append(res, _index(chars, i))
		i = (i + 1)
	}
	return res
}

func remove_at(chars []string, index int) []string {
	var res []string = []string{}
	_ = res
	var i int = 0
	_ = i
	for i < len(chars) {
		if i != index {
			res = append(res, _index(chars, i))
		}
		i = (i + 1)
	}
	return res
}

func make_matrix_int(rows int, cols int, init int) [][]int {
	var matrix [][]int = [][]int{}
	_ = matrix
	for _i := 0; _i < rows; _i++ {
		var row []int = []int{}
		_ = row
		for _2 := 0; _2 < cols; _2++ {
			row = append(row, init)
		}
		matrix = append(matrix, row)
	}
	return matrix
}

func make_matrix_string(rows int, cols int, init string) [][]string {
	var matrix [][]string = [][]string{}
	_ = matrix
	for _i := 0; _i < rows; _i++ {
		var row []string = []string{}
		_ = row
		for _2 := 0; _2 < cols; _2++ {
			row = append(row, init)
		}
		matrix = append(matrix, row)
	}
	return matrix
}

func compute_transform_tables(source_string string, destination_string string, copy_cost int, replace_cost int, delete_cost int, insert_cost int) TransformTables {
	source_seq := string_to_chars(source_string)
	_ = source_seq
	dest_seq := string_to_chars(destination_string)
	_ = dest_seq
	m := _len(source_seq)
	_ = m
	n := _len(dest_seq)
	_ = n
	var costs [][]int = make_matrix_int(int((m + 1)), int((n + 1)), 0)
	_ = costs
	var ops [][]string = make_matrix_string(int((m + 1)), int((n + 1)), "0")
	_ = ops
	var i int = 1
	_ = i
	for i <= m {
		_setIndex(_index(costs, i), 0, (i * delete_cost))
		_setIndex(_index(ops, i), 0, ("D" + fmt.Sprint(_index(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(source_seq), (i-1)))))
		i = (i + 1)
	}
	var j int = 1
	_ = j
	for j <= n {
		_setIndex(_index(costs, 0), j, (j * insert_cost))
		_setIndex(_index(ops, 0), j, ("I" + fmt.Sprint(_index(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(dest_seq), (j-1)))))
		j = (j + 1)
	}
	i = 1
	for i <= m {
		j = 1
		for j <= n {
			if _toFloat(_index(func(v any) []int {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]int); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []int{}
					}
					out := make([]int, len(arr))
					for i, x := range arr {
						out[i] = x.(int)
					}
					return out
				}
				return v.([]int)
			}(source_seq), (i-1))) == _toFloat(_index(func(v any) []int {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]int); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []int{}
					}
					out := make([]int, len(arr))
					for i, x := range arr {
						out[i] = x.(int)
					}
					return out
				}
				return v.([]int)
			}(dest_seq), (j-1))) {
				_setIndex(_index(costs, i), j, (int(_index(_index(costs, (i-1)), (j-1))) + copy_cost))
				_setIndex(_index(ops, i), j, ("C" + fmt.Sprint(_index(func(v any) []int {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]int); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []int{}
						}
						out := make([]int, len(arr))
						for i, x := range arr {
							out[i] = x.(int)
						}
						return out
					}
					return v.([]int)
				}(source_seq), (i-1)))))
			} else {
				_setIndex(_index(costs, i), j, (int(_index(_index(costs, (i-1)), (j-1))) + replace_cost))
				_setIndex(_index(ops, i), j, (("R" + fmt.Sprint(_index(func(v any) []int {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]int); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []int{}
						}
						out := make([]int, len(arr))
						for i, x := range arr {
							out[i] = x.(int)
						}
						return out
					}
					return v.([]int)
				}(source_seq), (i-1)))) + fmt.Sprint(_index(func(v any) []int {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]int); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []int{}
						}
						out := make([]int, len(arr))
						for i, x := range arr {
							out[i] = x.(int)
						}
						return out
					}
					return v.([]int)
				}(dest_seq), (j-1)))))
			}
			if (int(_index(_index(costs, (i-1)), j)) + delete_cost) < int(_index(_index(costs, i), j)) {
				_setIndex(_index(costs, i), j, (int(_index(_index(costs, (i-1)), j)) + delete_cost))
				_setIndex(_index(ops, i), j, ("D" + fmt.Sprint(_index(func(v any) []int {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]int); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []int{}
						}
						out := make([]int, len(arr))
						for i, x := range arr {
							out[i] = x.(int)
						}
						return out
					}
					return v.([]int)
				}(source_seq), (i-1)))))
			}
			if (int(_index(_index(costs, i), (j-1))) + insert_cost) < int(_index(_index(costs, i), j)) {
				_setIndex(_index(costs, i), j, (int(_index(_index(costs, i), (j-1))) + insert_cost))
				_setIndex(_index(ops, i), j, ("I" + fmt.Sprint(_index(func(v any) []int {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]int); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []int{}
						}
						out := make([]int, len(arr))
						for i, x := range arr {
							out[i] = x.(int)
						}
						return out
					}
					return v.([]int)
				}(dest_seq), (j-1)))))
			}
			j = (j + 1)
		}
		i = (i + 1)
	}
	return TransformTables{
		Costs: costs,
		Ops:   ops,
	}
}

func assemble_transformation(ops [][]string, i int, j int) []string {
	if (i == 0) && (j == 0) {
		return func(v any) []string {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]string); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []string{}
				}
				out := make([]string, len(arr))
				for i, x := range arr {
					out[i] = fmt.Sprint(x)
				}
				return out
			}
			return v.([]string)
		}([]string{})
	}
	var op string = _index(_index(ops, i), j)
	_ = op
	kind := _substr(op, 0, 1)
	_ = kind
	if (fmt.Sprint(kind) == "C") || (fmt.Sprint(kind) == "R") {
		var seq []string = assemble_transformation(func(v any) [][]string {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]string); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]string{}
				}
				out := make([][]string, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []string {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]string); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []string{}
							}
							out := make([]string, len(arr))
							for i, x := range arr {
								out[i] = x.(string)
							}
							return out
						}
						return v.([]string)
					}(x)
				}
				return out
			}
			return v.([][]string)
		}(ops), (i - 1), (j - 1))
		_ = seq
		seq = append(seq, op)
		return seq
	} else {
		if fmt.Sprint(kind) == "D" {
			var seq []string = assemble_transformation(func(v any) [][]string {
				if v == nil {
					return nil
				}
				if vv, ok := v.([][]string); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return [][]string{}
					}
					out := make([][]string, len(arr))
					for i, x := range arr {
						out[i] = func(v any) []string {
							if v == nil {
								return nil
							}
							if vv, ok := v.([]string); ok {
								return vv
							}
							if arr, ok := v.([]any); ok {
								if len(arr) == 0 {
									return []string{}
								}
								out := make([]string, len(arr))
								for i, x := range arr {
									out[i] = x.(string)
								}
								return out
							}
							return v.([]string)
						}(x)
					}
					return out
				}
				return v.([][]string)
			}(ops), (i - 1), j)
			_ = seq
			seq = append(seq, op)
			return seq
		} else {
			var seq []string = assemble_transformation(func(v any) [][]string {
				if v == nil {
					return nil
				}
				if vv, ok := v.([][]string); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return [][]string{}
					}
					out := make([][]string, len(arr))
					for i, x := range arr {
						out[i] = func(v any) []string {
							if v == nil {
								return nil
							}
							if vv, ok := v.([]string); ok {
								return vv
							}
							if arr, ok := v.([]any); ok {
								if len(arr) == 0 {
									return []string{}
								}
								out := make([]string, len(arr))
								for i, x := range arr {
									out[i] = x.(string)
								}
								return out
							}
							return v.([]string)
						}(x)
					}
					return out
				}
				return v.([][]string)
			}(ops), i, (j - 1))
			_ = seq
			seq = append(seq, op)
			return seq
		}
	}
}

func mochiMain() {
	var copy_cost int = (0 - 1)
	_ = copy_cost
	var replace_cost int = 1
	_ = replace_cost
	var delete_cost int = 2
	_ = delete_cost
	var insert_cost int = 2
	_ = insert_cost
	var src string = "Python"
	_ = src
	var dst string = "Algorithms"
	_ = dst
	tables := compute_transform_tables(src, dst, copy_cost, replace_cost, delete_cost, insert_cost)
	_ = tables
	operations := TransformTables(tables).Ops
	_ = operations
	m := _len(operations)
	_ = m
	n := _len(_index(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(operations), 0))
	_ = n
	var sequence []string = assemble_transformation(func(v any) [][]string {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]string); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]string{}
			}
			out := make([][]string, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []string {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]string); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []string{}
						}
						out := make([]string, len(arr))
						for i, x := range arr {
							out[i] = x.(string)
						}
						return out
					}
					return v.([]string)
				}(x)
			}
			return out
		}
		return v.([][]string)
	}(func(v any) [][]string {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]string); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]string{}
			}
			out := make([][]string, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []string {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]string); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []string{}
						}
						out := make([]string, len(arr))
						for i, x := range arr {
							out[i] = x.(string)
						}
						return out
					}
					return v.([]string)
				}(x)
			}
			return out
		}
		return v.([][]string)
	}(operations)), int((m - 1)), int((n - 1)))
	_ = sequence
	var string_list []string = string_to_chars(src)
	_ = string_list
	var idx int = 0
	_ = idx
	var cost int = 0
	_ = cost
	var k int = 0
	_ = k
	for k < len(sequence) {
		fmt.Println(join_chars(func(v any) []string {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]string); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []string{}
				}
				out := make([]string, len(arr))
				for i, x := range arr {
					out[i] = fmt.Sprint(x)
				}
				return out
			}
			return v.([]string)
		}(string_list)))
		var op string = _index(sequence, k)
		_ = op
		kind := _substr(op, 0, 1)
		_ = kind
		if fmt.Sprint(kind) == "C" {
			cost = (cost + copy_cost)
		} else {
			if fmt.Sprint(kind) == "R" {
				_setIndex(string_list, idx, _substr(op, 2, 3))
				cost = (cost + replace_cost)
			} else {
				if fmt.Sprint(kind) == "D" {
					string_list = remove_at(func(v any) []string {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]string); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []string{}
							}
							out := make([]string, len(arr))
							for i, x := range arr {
								out[i] = fmt.Sprint(x)
							}
							return out
						}
						return v.([]string)
					}(string_list), idx)
					cost = (cost + delete_cost)
				} else {
					string_list = insert_at(func(v any) []string {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]string); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []string{}
							}
							out := make([]string, len(arr))
							for i, x := range arr {
								out[i] = fmt.Sprint(x)
							}
							return out
						}
						return v.([]string)
					}(string_list), idx, _substr(op, 1, 2))
					cost = (cost + insert_cost)
				}
			}
		}
		idx = (idx + 1)
		k = (k + 1)
	}
	fmt.Println(join_chars(func(v any) []string {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]string); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []string{}
			}
			out := make([]string, len(arr))
			for i, x := range arr {
				out[i] = fmt.Sprint(x)
			}
			return out
		}
		return v.([]string)
	}(string_list)))
	fmt.Println(("Cost: " + fmt.Sprint(cost)))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
