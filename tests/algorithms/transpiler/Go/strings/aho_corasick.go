//go:build ignore

// Generated by Mochi v0.10.70 on 2025-08-23 01:32:17 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

func search_all(text string, keywords []string) map[string][]int {
	var result map[string][]int = map[string][]int{}
	_ = result
	for _, word := range keywords {
		_ = word
		var positions []int = []int{}
		_ = positions
		var m int = len(word)
		_ = m
		var i int = 0
		_ = i
		for i <= (len(text) - m) {
			if _substr(text, i, (i+m)) == word {
				positions = append(positions, i)
			}
			i = (i + 1)
		}
		if len(positions) > 0 {
			result[word] = positions
		}
	}
	return result
}

var text string

var keywords []string

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		text = "whatever, err ... , wherever"
		keywords = []string{"what", "hat", "ver", "er"}
		fmt.Println(search_all(text, func(v any) []string {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]string); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []string{}
				}
				out := make([]string, len(arr))
				for i, x := range arr {
					out[i] = fmt.Sprint(x)
				}
				return out
			}
			return v.([]string)
		}(keywords)))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
