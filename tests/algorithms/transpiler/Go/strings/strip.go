//go:build ignore

// Generated by Mochi v0.10.63 on 2025-08-11 15:36:18 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

func contains(chars string, ch string) bool {
	var i int = 0
	_ = i
	for i < len(chars) {
		if string(_index([]rune(chars), i)) == ch {
			return true
		}
		i = (i + 1)
	}
	return false
}

func substring(s string, start int, end int) string {
	var res string = ""
	_ = res
	var i int = start
	_ = i
	for i < end {
		res = (res + string(_index([]rune(s), i)))
		i = (i + 1)
	}
	return res
}

func strip_chars(user_string string, characters string) string {
	var start int = 0
	_ = start
	var end int = len(user_string)
	_ = end
	for (start < end) && contains(characters, string(_index([]rune(user_string), start))) {
		start = (start + 1)
	}
	for (end > start) && contains(characters, string(_index([]rune(user_string), (end-1)))) {
		end = (end - 1)
	}
	return _substr(user_string, start, end)
}

func strip(user_string string) string {
	return strip_chars(user_string, " \t\n\r")
}

func test_strip() {
	if strip("   hello   ") != "hello" {
		panic("test1 failed")
	}
	if strip_chars("...world...", ".") != "world" {
		panic("test2 failed")
	}
	if strip_chars("123hello123", "123") != "hello" {
		panic("test3 failed")
	}
	if strip("") != "" {
		panic("test4 failed")
	}
}

func mochiMain() {
	test_strip()
	fmt.Println(strip("   hello   "))
	fmt.Println(strip_chars("...world...", "."))
	fmt.Println(strip_chars("123hello123", "123"))
	fmt.Println(strip(""))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
