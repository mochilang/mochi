//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-16 13:57:26 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		return
	}
	s[idx] = v
}

func read_file(path string) string {
	b, err := os.ReadFile(path)
	if err != nil {
		return ""
	}
	return string(b)
}

func split(s string, sep string) []string {
	var res []string = []string{}
	_ = res
	var current string = ""
	_ = current
	var i int = 0
	_ = i
	for i < len(s) {
		var ch string = string([]rune(s)[i:(i + 1)])
		_ = ch
		if ch == sep {
			res = append(res, current)
			current = ""
		} else {
			current = (current + ch)
		}
		i = (i + 1)
	}
	res = append(res, current)
	return res
}

func insertion_sort(arr []string) []string {
	var a []string = arr
	_ = a
	var i int = 1
	_ = i
	for i < len(a) {
		var key string = _index(a, i)
		_ = key
		var j int = (i - 1)
		_ = j
		for (j >= 0) && (_index(a, j) > key) {
			_setIndex(a, (j + 1), _index(a, j))
			j = (j - 1)
		}
		_setIndex(a, (j + 1), key)
		i = (i + 1)
	}
	return a
}

func sort_chars(word string) string {
	var chars []string = []string{}
	_ = chars
	var i int = 0
	_ = i
	for i < len(word) {
		chars = append(chars, string([]rune(word)[i:(i+1)]))
		i = (i + 1)
	}
	chars = insertion_sort(func(v any) []string {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]string); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []string{}
			}
			out := make([]string, len(arr))
			for i, x := range arr {
				out[i] = fmt.Sprint(x)
			}
			return out
		}
		return v.([]string)
	}(chars))
	var res string = ""
	_ = res
	i = 0
	for i < len(chars) {
		res = (res + _index(chars, i))
		i = (i + 1)
	}
	return res
}

func unique_sorted(words []string) []string {
	var seen map[string]bool = map[string]bool{}
	_ = seen
	var res []string = []string{}
	_ = res
	for _, w := range words {
		_ = w
		if (w != "") && !func() bool { _, ok := seen[w]; return ok }() {
			res = append(res, w)
			seen[w] = true
		}
	}
	res = insertion_sort(func(v any) []string {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]string); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []string{}
			}
			out := make([]string, len(arr))
			for i, x := range arr {
				out[i] = fmt.Sprint(x)
			}
			return out
		}
		return v.([]string)
	}(res))
	return res
}

var word_by_signature map[string][]string

func build_map(words []string) {
	for _, w := range words {
		_ = w
		var sig string = sort_chars(w)
		_ = sig
		var arr []string = []string{}
		_ = arr
		if func() bool { _, ok := word_by_signature[sig]; return ok }() {
			arr = word_by_signature[sig]
		}
		arr = append(arr, w)
		word_by_signature[sig] = arr
	}
}

func anagram(my_word string) []string {
	var sig string = sort_chars(my_word)
	_ = sig
	_ = sig
	if func() bool { _, ok := word_by_signature[sig]; return ok }() {
		return func(v any) []string {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]string); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []string{}
				}
				out := make([]string, len(arr))
				for i, x := range arr {
					out[i] = fmt.Sprint(x)
				}
				return out
			}
			return v.([]string)
		}(word_by_signature[sig])
	}
	return func(v any) []string {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]string); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []string{}
			}
			out := make([]string, len(arr))
			for i, x := range arr {
				out[i] = fmt.Sprint(x)
			}
			return out
		}
		return v.([]string)
	}([]string{})
}

func mochiMain() {
	var text string = read_file("words.txt")
	_ = text
	var lines []string = split(text, "\n")
	_ = lines
	var words []string = unique_sorted(func(v any) []string {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]string); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []string{}
			}
			out := make([]string, len(arr))
			for i, x := range arr {
				out[i] = fmt.Sprint(x)
			}
			return out
		}
		return v.([]string)
	}(lines))
	_ = words
	build_map(func(v any) []string {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]string); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []string{}
			}
			out := make([]string, len(arr))
			for i, x := range arr {
				out[i] = fmt.Sprint(x)
			}
			return out
		}
		return v.([]string)
	}(words))
	for _, w := range words {
		_ = w
		var anas []string = anagram(w)
		_ = anas
		if len(anas) > 1 {
			var line string = (w + ":")
			_ = line
			var i int = 0
			_ = i
			for i < len(anas) {
				if i > 0 {
					line = (line + ",")
				}
				line = (line + _index(anas, i))
				i = (i + 1)
			}
			fmt.Println(line)
		}
	}
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		word_by_signature = map[string][]string{}
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
