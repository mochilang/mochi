//go:build ignore

// Generated by Mochi v0.10.63 on 2025-08-11 15:36:13 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

func _len(v any) int {
	switch t := v.(type) {
	case string:
		return len([]rune(t))
	case []any:
		return len(t)
	case []string:
		return len(t)
	case []int:
		return len(t)
	case []float64:
		return len(t)
	case map[string]any:
		return len(t)
	case map[int]any:
		return len(t)
	case map[any]any:
		return len(t)
	default:
		return 0
	}
}

func split(s string, sep string) []string {
	var res []string = []string{}
	_ = res
	var current string = ""
	_ = current
	var i int = 0
	_ = i
	for i < len(s) {
		ch := string(_index([]rune(s), i))
		_ = ch
		if fmt.Sprint(ch) == sep {
			res = append(res, current)
			current = ""
		} else {
			current = (current + fmt.Sprint(ch))
		}
		i = (i + 1)
	}
	res = append(res, current)
	return res
}

func join_with_space(xs []string) string {
	var s string = ""
	_ = s
	var i int = 0
	_ = i
	for i < len(xs) {
		s = (s + _index(xs, i))
		if (i + 1) < len(xs) {
			s = (s + " ")
		}
		i = (i + 1)
	}
	return s
}

func reverse_str(s string) string {
	var res string = ""
	_ = res
	var i int = (len(s) - 1)
	_ = i
	for i >= 0 {
		res = (res + string(_index([]rune(s), i)))
		i = (i - 1)
	}
	return res
}

func reverse_letters(sentence string, length int) string {
	words := split(sentence, " ")
	_ = words
	var result []string = []string{}
	_ = result
	var i int = 0
	_ = i
	for i < _len(words) {
		word := _index(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(words), i)
		_ = word
		if _len(word) > length {
			result = append(result, reverse_str(word))
		} else {
			result = append(result, word)
		}
		i = (i + 1)
	}
	return join_with_space(func(v any) []string {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]string); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []string{}
			}
			out := make([]string, len(arr))
			for i, x := range arr {
				out[i] = fmt.Sprint(x)
			}
			return out
		}
		return v.([]string)
	}(result))
}

func test_reverse_letters() {
	if reverse_letters("Hey wollef sroirraw", 3) != "Hey fellow warriors" {
		panic("test1 failed")
	}
	if reverse_letters("nohtyP is nohtyP", 2) != "Python is Python" {
		panic("test2 failed")
	}
	if reverse_letters("1 12 123 1234 54321 654321", 0) != "1 21 321 4321 12345 123456" {
		panic("test3 failed")
	}
	if reverse_letters("racecar", 0) != "racecar" {
		panic("test4 failed")
	}
}

func mochiMain() {
	test_reverse_letters()
	fmt.Println(reverse_letters("Hey wollef sroirraw", 3))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
