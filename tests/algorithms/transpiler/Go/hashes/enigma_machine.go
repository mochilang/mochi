//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-15 21:34:23 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _modi(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

var ASCII string

func build_alphabet() []string {
	var result []string = []string{}
	_ = result
	var i int = 0
	_ = i
	for i < len(ASCII) {
		result = append(result, string(_index([]rune(ASCII), i)))
		i = (i + 1)
	}
	return result
}

func range_list(n int) []int {
	var lst []int = []int{}
	_ = lst
	var i int = 0
	_ = i
	for i < n {
		lst = append(lst, i)
		i = (i + 1)
	}
	return lst
}

func reversed_range_list(n int) []int {
	var lst []int = []int{}
	_ = lst
	var i int = (n - 1)
	_ = i
	for i >= 0 {
		lst = append(lst, i)
		i = (i - 1)
	}
	return lst
}

func index_of_char(lst []string, ch string) int {
	var i int = 0
	_ = i
	for i < len(lst) {
		if _index(lst, i) == ch {
			return i
		}
		i = (i + 1)
	}
	return (0 - 1)
}

func index_of_int(lst []int, value int) int {
	var i int = 0
	_ = i
	for i < len(lst) {
		if _index(lst, i) == value {
			return i
		}
		i = (i + 1)
	}
	return (0 - 1)
}

func enigma_encrypt(message string, token int) string {
	var alphabets []string = build_alphabet()
	_ = alphabets
	var n int = len(alphabets)
	_ = n
	var gear_one []int = range_list(n)
	_ = gear_one
	_ = gear_one
	var gear_two []int = range_list(n)
	_ = gear_two
	_ = gear_two
	var gear_three []int = range_list(n)
	_ = gear_three
	_ = gear_three
	var reflector []int = reversed_range_list(n)
	_ = reflector
	_ = reflector
	var gear_one_pos int = 0
	_ = gear_one_pos
	_ = gear_one_pos
	var gear_two_pos int = 0
	_ = gear_two_pos
	_ = gear_two_pos
	var gear_three_pos int = 0
	_ = gear_three_pos
	_ = gear_three_pos
	var rotator func()
	_ = rotator
	rotator = func() {
		var i int = _index(gear_one, 0)
		_ = i
		gear_one = gear_one[1:len(gear_one)]
		gear_one = append(gear_one, i)
		gear_one_pos = (gear_one_pos + 1)
		if _modi(gear_one_pos, n) == 0 {
			i = _index(gear_two, 0)
			gear_two = gear_two[1:len(gear_two)]
			gear_two = append(gear_two, i)
			gear_two_pos = (gear_two_pos + 1)
			if _modi(gear_two_pos, n) == 0 {
				i = _index(gear_three, 0)
				gear_three = gear_three[1:len(gear_three)]
				gear_three = append(gear_three, i)
				gear_three_pos = (gear_three_pos + 1)
			}
		}
	}
	var engine func(string) string
	_ = engine
	engine = func(ch string) string {
		var target int = index_of_char(func(v any) []string {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]string); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []string{}
				}
				out := make([]string, len(arr))
				for i, x := range arr {
					out[i] = fmt.Sprint(x)
				}
				return out
			}
			return v.([]string)
		}(alphabets), ch)
		_ = target
		target = _index(gear_one, target)
		target = _index(gear_two, target)
		target = _index(gear_three, target)
		target = _index(reflector, target)
		target = index_of_int(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(gear_three), target)
		target = index_of_int(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(gear_two), target)
		target = index_of_int(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(gear_one), target)
		rotator()
		return _index(alphabets, target)
	}
	var t int = 0
	_ = t
	for t < token {
		rotator()
		t = (t + 1)
	}
	var result string = ""
	_ = result
	var idx int = 0
	_ = idx
	for idx < len(message) {
		result = (result + engine(string(_index([]rune(message), idx))))
		idx = (idx + 1)
	}
	return result
}

var message string

var token int

var encoded string

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		ASCII = " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}"
		message = "HELLO WORLD"
		token = 123
		encoded = enigma_encrypt(message, token)
		fmt.Println(encoded)
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
