//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-15 21:34:21 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _modi(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

var ascii string

func ord(ch string) int {
	var i int = 0
	_ = i
	for i < len(ascii) {
		if string([]rune(ascii)[i:(i+1)]) == ch {
			return (32 + i)
		}
		i = (i + 1)
	}
	return 0
}

func bit_and(a int, b int) int {
	var ua int = a
	_ = ua
	var ub int = b
	_ = ub
	var res int = 0
	_ = res
	var bit int = 1
	_ = bit
	for (ua > 0) || (ub > 0) {
		if (_modi(ua, 2) == 1) && (_modi(ub, 2) == 1) {
			res = (res + bit)
		}
		ua = int((ua / 2))
		ub = int((ub / 2))
		bit = (bit * 2)
	}
	return res
}

func bit_xor(a int, b int) int {
	var ua int = a
	_ = ua
	var ub int = b
	_ = ub
	var res int = 0
	_ = res
	var bit int = 1
	_ = bit
	for (ua > 0) || (ub > 0) {
		var abit int = _modi(ua, 2)
		_ = abit
		var bbit int = _modi(ub, 2)
		_ = bbit
		if abit != bbit {
			res = (res + bit)
		}
		ua = int((ua / 2))
		ub = int((ub / 2))
		bit = (bit * 2)
	}
	return res
}

func bit_not32(x int) int {
	var ux int = x
	_ = ux
	var res int = 0
	_ = res
	var bit int = 1
	_ = bit
	var count int = 0
	_ = count
	for count < 32 {
		if _modi(ux, 2) == 0 {
			res = (res + bit)
		}
		ux = int((ux / 2))
		bit = (bit * 2)
		count = (count + 1)
	}
	return res
}

func elf_hash(data string) int {
	var hash_ int = 0
	_ = hash_
	var i int = 0
	_ = i
	for i < len(data) {
		var c int = ord(string([]rune(data)[i:(i + 1)]))
		_ = c
		hash_ = ((hash_ * 16) + c)
		var x int = bit_and(hash_, 4026531840)
		_ = x
		if x != 0 {
			hash_ = bit_xor(hash_, int((x / 16777216)))
		}
		hash_ = bit_and(hash_, bit_not32(x))
		i = (i + 1)
	}
	return hash_
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		ascii = " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"
		fmt.Println(fmt.Sprint(elf_hash("lorem ipsum")))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
