//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-15 21:34:29 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _modi(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

func is_luhn(s string) bool {
	var n int = len(s)
	_ = n
	if n <= 1 {
		return false
	}
	var check_digit int = func() int { n, _ := strconv.Atoi(fmt.Sprint(_substr(s, (n - 1), n))); return n }()
	_ = check_digit
	var i int = (n - 2)
	_ = i
	var even bool = true
	_ = even
	for i >= 0 {
		var digit int = func() int { n, _ := strconv.Atoi(fmt.Sprint(_substr(s, i, (i + 1)))); return n }()
		_ = digit
		if even {
			var doubled int = (digit * 2)
			_ = doubled
			if doubled > 9 {
				doubled = (doubled - 9)
			}
			check_digit = (check_digit + doubled)
		} else {
			check_digit = (check_digit + digit)
		}
		even = !even
		i = (i - 1)
	}
	return (_modi(check_digit, 10) == 0)
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		func() { b, _ := json.MarshalIndent(is_luhn("79927398713"), "", "  "); fmt.Println(string(b)) }()
		func() { b, _ := json.MarshalIndent(is_luhn("79927398714"), "", "  "); fmt.Println(string(b)) }()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
