//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-15 21:35:41 GMT+7
package main

import (
	"crypto/sha256"
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _modi(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func _sha256(v any) []int {
	var b []byte
	switch t := v.(type) {
	case []int:
		b = make([]byte, len(t))
		for i, v := range t {
			b[i] = byte(v)
		}
	case string:
		b = []byte(t)
	default:
		return nil
	}
	h := sha256.Sum256(b)
	out := make([]int, len(h))
	for i, v := range h[:] {
		out[i] = int(v)
	}
	return out
}

var HEX string

func byte_to_hex(b int) string {
	var hi int = (b / 16)
	_ = hi
	_ = hi
	var lo int = _modi(b, 16)
	_ = lo
	_ = lo
	return (string(_index([]rune(HEX), hi)) + string(_index([]rune(HEX), lo)))
}

func bytes_to_hex(bs []int) string {
	var res string = ""
	_ = res
	var i int = 0
	_ = i
	for i < len(bs) {
		res = (res + byte_to_hex(_index(bs, i)))
		i = (i + 1)
	}
	return res
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		HEX = "0123456789abcdef"
		fmt.Println(bytes_to_hex(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(_sha256("Python"))))
		fmt.Println(bytes_to_hex(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(_sha256("hello world"))))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
