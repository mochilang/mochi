//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-15 21:34:33 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

var ascii string

func ord(ch string) int {
	var i int = 0
	_ = i
	for i < len(ascii) {
		if string([]rune(ascii)[i:(i+1)]) == ch {
			return (32 + i)
		}
		i = (i + 1)
	}
	return 0
}

func sdbm(plain_text string) int {
	var hash_value int = 0
	_ = hash_value
	var i int = 0
	_ = i
	for i < len(plain_text) {
		var code int = ord(string([]rune(plain_text)[i:(i + 1)]))
		_ = code
		hash_value = ((hash_value * 65599) + code)
		i = (i + 1)
	}
	return hash_value
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		ascii = " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"
		fmt.Println(fmt.Sprint(sdbm("Algorithms")))
		fmt.Println(fmt.Sprint(sdbm("scramble bits")))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
