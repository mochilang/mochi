//go:build ignore

// Generated by Mochi v0.10.60 on 2025-08-08 10:31:18 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"sort"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i int) T {
	if i < 0 {
		i += len(s)
	}
	return s[i]
}

type SuffixTreeNode struct {
	Children      map[string]int `json:"children"`
	IsEndOfString bool           `json:"is_end_of_string"`
	Start         int            `json:"start"`
	End           int            `json:"end"`
	SuffixLink    int            `json:"suffix_link"`
}

func new_suffix_tree_node(children map[string]int, is_end_of_string bool, start int, end int, suffix_link int) SuffixTreeNode {
	return SuffixTreeNode{
		Children:      children,
		IsEndOfString: is_end_of_string,
		Start:         start,
		End:           end,
		SuffixLink:    suffix_link,
	}
}

func empty_suffix_tree_node() SuffixTreeNode {
	return new_suffix_tree_node(map[string]int{}, false, (0 - 1), (0 - 1), (0 - 1))
}

func has_key(m map[string]int, k string) bool {
	for _, key := range func() []string {
		keys := make([]string, 0, len(m))
		for k := range m {
			keys = append(keys, k)
		}
		sort.Slice(keys, func(i, j int) bool { return fmt.Sprint(keys[i]) < fmt.Sprint(keys[j]) })
		return keys
	}() {
		if key == k {
			return true
		}
	}
	return false
}

var root SuffixTreeNode

var leaf SuffixTreeNode

var nodes []SuffixTreeNode

var root_check SuffixTreeNode

var leaf_check SuffixTreeNode

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		root = new_suffix_tree_node(map[string]int{"a": 1}, false, (0 - 1), (0 - 1), (0 - 1))
		leaf = new_suffix_tree_node(map[string]int{}, true, 0, 2, 0)
		nodes = []SuffixTreeNode{root, leaf}
		root_check = _index(nodes, 0)
		leaf_check = _index(nodes, 1)
		fmt.Println(fmt.Sprint(has_key(root_check.Children, "a")))
		fmt.Println(fmt.Sprint(leaf_check.IsEndOfString))
		fmt.Println(fmt.Sprint(leaf_check.Start))
		fmt.Println(fmt.Sprint(leaf_check.End))
		fmt.Println(fmt.Sprint(leaf_check.SuffixLink))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
