//go:build ignore

// Generated by Mochi v0.10.60 on 2025-08-08 10:31:01 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i int) T {
	if i < 0 {
		i += len(s)
	}
	return s[i]
}

func _toFloat(v any) float64 {
	switch t := v.(type) {
	case int:
		return float64(t)
	case int64:
		return float64(t)
	case float64:
		return t
	default:
		return 0
	}
}

type SuffixTree struct {
	Text string `json:"text"`
}

func new_suffix_tree(text string) SuffixTree {
	return SuffixTree{
		Text: text,
	}
}

func search(tree SuffixTree, pattern string) bool {
	n := len(tree.Text)
	_ = n
	m := len(pattern)
	_ = m
	if int(m) == 0 {
		return true
	}
	if _toFloat(m) > _toFloat(n) {
		return false
	}
	var i int = 0
	_ = i
	for float64(i) <= (_toFloat(n) - _toFloat(m)) {
		if string([]rune(tree.Text)[i:(i+int(m))]) == pattern {
			return true
		}
		i = (i + 1)
	}
	return false
}

func mochiMain() {
	var text string = "monkey banana"
	_ = text
	suffix_tree := new_suffix_tree(text)
	_ = suffix_tree
	var patterns []string = []string{"ana", "ban", "na", "xyz", "mon"}
	_ = patterns
	var i int = 0
	_ = i
	for i < len(patterns) {
		var pattern string = _index(patterns, i)
		_ = pattern
		found := search(SuffixTree(suffix_tree), pattern)
		_ = found
		fmt.Println(((("Pattern '" + pattern) + "' found: ") + fmt.Sprint(found)))
		i = (i + 1)
	}
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
