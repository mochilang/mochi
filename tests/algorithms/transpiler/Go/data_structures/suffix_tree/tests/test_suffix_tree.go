//go:build ignore

// Generated by Mochi v0.10.60 on 2025-08-07 19:17:46 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

type SuffixTree struct {
	Text string `json:"text"`
}

func suffix_tree_new(text string) SuffixTree {
	return SuffixTree{
		Text: text,
	}
}

func suffix_tree_search(st SuffixTree, pattern string) bool {
	if len(pattern) == 0 {
		return true
	}
	var i int = 0
	_ = i
	var n int = len(st.Text)
	_ = n
	var m int = len(pattern)
	_ = m
	for i <= (n - m) {
		var j int = 0
		_ = j
		var found bool = true
		_ = found
		for j < m {
			if string([]rune(st.Text)[(i+j)]) != string([]rune(pattern)[j]) {
				found = false
				break
			}
			j = (j + 1)
		}
		if found {
			return true
		}
		i = (i + 1)
	}
	return false
}

var text string

var st SuffixTree

var patterns_exist []string

var i int

var patterns_none []string

var substrings []string

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		text = "banana"
		st = suffix_tree_new(text)
		patterns_exist = []string{"ana", "ban", "na"}
		i = 0
		for i < len(patterns_exist) {
			fmt.Println(fmt.Sprint(suffix_tree_search(st, patterns_exist[i])))
			i = (i + 1)
		}
		patterns_none = []string{"xyz", "apple", "cat"}
		i = 0
		for i < len(patterns_none) {
			fmt.Println(fmt.Sprint(suffix_tree_search(st, patterns_none[i])))
			i = (i + 1)
		}
		fmt.Println(fmt.Sprint(suffix_tree_search(st, "")))
		fmt.Println(fmt.Sprint(suffix_tree_search(st, text)))
		substrings = []string{"ban", "ana", "a", "na"}
		i = 0
		for i < len(substrings) {
			fmt.Println(fmt.Sprint(suffix_tree_search(st, substrings[i])))
			i = (i + 1)
		}
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
