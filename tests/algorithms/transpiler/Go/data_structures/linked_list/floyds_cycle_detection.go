//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-14 21:59:37 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"math/big"
	"os"
	"runtime"
	"strconv"
	"time"
)

var _ = big.NewInt

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

type LinkedList struct {
	Next []int `json:"next"`
	Head int   `json:"head"`
}

var NULL int

func empty_list() LinkedList {
	return LinkedList{
		Next: []int{},
		Head: NULL,
	}
}

func add_node(list LinkedList, value int) LinkedList {
	var nexts []int = list.Next
	_ = nexts
	var new_index int = len(nexts)
	_ = new_index
	nexts = append(nexts, int(NULL))
	if list.Head == int(NULL) {
		return LinkedList{
			Next: nexts,
			Head: new_index,
		}
	}
	var last int = list.Head
	_ = last
	for int(_index(nexts, last)) != int(NULL) {
		last = _index(nexts, last)
	}
	var new_nexts []int = []int{}
	_ = new_nexts
	var i int = 0
	_ = i
	for i < len(nexts) {
		if i == last {
			new_nexts = append(new_nexts, new_index)
		} else {
			new_nexts = append(new_nexts, _index(nexts, i))
		}
		i = (i + 1)
	}
	return LinkedList{
		Next: new_nexts,
		Head: list.Head,
	}
}

func set_next(list LinkedList, index int, next_index int) LinkedList {
	var nexts []int = list.Next
	_ = nexts
	var new_nexts []int = []int{}
	_ = new_nexts
	var i int = 0
	_ = i
	for i < len(nexts) {
		if i == index {
			new_nexts = append(new_nexts, next_index)
		} else {
			new_nexts = append(new_nexts, _index(nexts, i))
		}
		i = (i + 1)
	}
	return LinkedList{
		Next: new_nexts,
		Head: list.Head,
	}
}

func detect_cycle(list LinkedList) bool {
	if list.Head == int(NULL) {
		return false
	}
	var nexts []int = list.Next
	_ = nexts
	var slow int = list.Head
	_ = slow
	var fast int = list.Head
	_ = fast
	for (fast != int(NULL)) && (int(_index(nexts, fast)) != int(NULL)) {
		slow = _index(nexts, slow)
		fast = _index(nexts, _index(nexts, fast))
		if slow == fast {
			return true
		}
	}
	return false
}

func mochiMain() {
	var ll LinkedList = empty_list()
	_ = ll
	ll = add_node(ll, 1)
	ll = add_node(ll, 2)
	ll = add_node(ll, 3)
	ll = add_node(ll, 4)
	ll = set_next(ll, 3, 1)
	fmt.Println(detect_cycle(ll))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		NULL = (0 - 1)
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
