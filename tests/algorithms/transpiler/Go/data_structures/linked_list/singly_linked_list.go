//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-14 21:59:54 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

type SinglyLinkedList struct {
	Data []int `json:"data"`
}

func empty_list() SinglyLinkedList {
	return SinglyLinkedList{
		Data: []int{},
	}
}

func length(list SinglyLinkedList) int {
	return len(list.Data)
}

func is_empty(list SinglyLinkedList) bool {
	return (len(list.Data) == 0)
}

func to_string(list SinglyLinkedList) string {
	if len(list.Data) == 0 {
		return ""
	}
	var s string = fmt.Sprint(_index(list.Data, 0))
	_ = s
	var i int = 1
	_ = i
	for i < len(list.Data) {
		s = ((s + " -> ") + fmt.Sprint(_index(list.Data, i)))
		i = (i + 1)
	}
	return s
}

func insert_nth(list SinglyLinkedList, index int, value int) SinglyLinkedList {
	if (index < 0) || (index > len(list.Data)) {
		panic("index out of range")
	}
	var res []int = []int{}
	_ = res
	var i int = 0
	_ = i
	for i < index {
		res = append(res, _index(list.Data, i))
		i = (i + 1)
	}
	res = append(res, value)
	for i < len(list.Data) {
		res = append(res, _index(list.Data, i))
		i = (i + 1)
	}
	return SinglyLinkedList{
		Data: res,
	}
}

func insert_head(list SinglyLinkedList, value int) SinglyLinkedList {
	return insert_nth(list, 0, value)
}

func insert_tail(list SinglyLinkedList, value int) SinglyLinkedList {
	return insert_nth(list, len(list.Data), value)
}

type DeleteResult struct {
	List  SinglyLinkedList `json:"list"`
	Value int              `json:"value"`
}

func delete_nth(list SinglyLinkedList, index int) DeleteResult {
	if (index < 0) || (index >= len(list.Data)) {
		panic("index out of range")
	}
	var res []int = []int{}
	_ = res
	var val int = 0
	_ = val
	var i int = 0
	_ = i
	for i < len(list.Data) {
		if i == index {
			val = _index(list.Data, i)
		} else {
			res = append(res, _index(list.Data, i))
		}
		i = (i + 1)
	}
	return DeleteResult{
		List: SinglyLinkedList{
			Data: res,
		},
		Value: val,
	}
}

func delete_head(list SinglyLinkedList) DeleteResult {
	return delete_nth(list, 0)
}

func delete_tail(list SinglyLinkedList) DeleteResult {
	return delete_nth(list, (len(list.Data) - 1))
}

func get_item(list SinglyLinkedList, index int) int {
	if (index < 0) || (index >= len(list.Data)) {
		panic("index out of range")
	}
	return _index(list.Data, index)
}

func set_item(list SinglyLinkedList, index int, value int) SinglyLinkedList {
	if (index < 0) || (index >= len(list.Data)) {
		panic("index out of range")
	}
	var res []int = []int{}
	_ = res
	var i int = 0
	_ = i
	for i < len(list.Data) {
		if i == index {
			res = append(res, value)
		} else {
			res = append(res, _index(list.Data, i))
		}
		i = (i + 1)
	}
	return SinglyLinkedList{
		Data: res,
	}
}

func reverse_list(list SinglyLinkedList) SinglyLinkedList {
	var res []int = []int{}
	_ = res
	var i int = (len(list.Data) - 1)
	_ = i
	for i >= 0 {
		res = append(res, _index(list.Data, i))
		i = (i - 1)
	}
	return SinglyLinkedList{
		Data: res,
	}
}

func mochiMain() {
	var lst SinglyLinkedList = empty_list()
	_ = lst
	var i int = 1
	_ = i
	for i <= 5 {
		lst = insert_tail(lst, i)
		i = (i + 1)
	}
	fmt.Println(to_string(lst))
	lst = insert_head(lst, 0)
	fmt.Println(to_string(lst))
	var del DeleteResult = delete_head(lst)
	_ = del
	lst = del.List
	fmt.Println(fmt.Sprint(del.Value))
	del = delete_tail(lst)
	lst = del.List
	fmt.Println(fmt.Sprint(del.Value))
	del = delete_nth(lst, 2)
	lst = del.List
	fmt.Println(fmt.Sprint(del.Value))
	lst = set_item(lst, 1, 99)
	fmt.Println(fmt.Sprint(get_item(lst, 1)))
	lst = reverse_list(lst)
	fmt.Println(to_string(lst))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
