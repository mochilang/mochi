//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-14 21:59:44 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	s[idx] = v
}

type SortedLinkedList struct {
	Values []int `json:"values"`
}

func sort_list(nums []int) []int {
	var arr []int = []int{}
	_ = arr
	var i int = 0
	_ = i
	for i < len(nums) {
		arr = append(arr, _index(nums, i))
		i = (i + 1)
	}
	var j int = 0
	_ = j
	for j < len(arr) {
		var k int = (j + 1)
		_ = k
		for k < len(arr) {
			if int(_index(arr, k)) < int(_index(arr, j)) {
				var tmp int = _index(arr, j)
				_ = tmp
				_setIndex(arr, j, _index(arr, k))
				_setIndex(arr, k, tmp)
			}
			k = (k + 1)
		}
		j = (j + 1)
	}
	return arr
}

func make_sorted_linked_list(ints []int) SortedLinkedList {
	return SortedLinkedList{
		Values: sort_list(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(ints)),
	}
}

func len_sll(sll SortedLinkedList) int {
	return len(sll.Values)
}

func str_sll(sll SortedLinkedList) string {
	var res string = ""
	_ = res
	var i int = 0
	_ = i
	for i < len(sll.Values) {
		res = (res + fmt.Sprint(_index(sll.Values, i)))
		if (i + 1) < len(sll.Values) {
			res = (res + " -> ")
		}
		i = (i + 1)
	}
	return res
}

func merge_lists(a SortedLinkedList, b SortedLinkedList) SortedLinkedList {
	var combined []int = []int{}
	_ = combined
	var i int = 0
	_ = i
	for i < len(a.Values) {
		combined = append(combined, _index(a.Values, i))
		i = (i + 1)
	}
	i = 0
	for i < len(b.Values) {
		combined = append(combined, _index(b.Values, i))
		i = (i + 1)
	}
	return make_sorted_linked_list(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(combined))
}

func mochiMain() {
	var test_data_odd []int = []int{3, 9, func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}((0 - 11)), 0, 7, 5, 1, func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}((0 - 1))}
	_ = test_data_odd
	var test_data_even []int = []int{4, 6, 2, 0, 8, 10, 3, func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}((0 - 2))}
	_ = test_data_even
	var sll_one SortedLinkedList = make_sorted_linked_list(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(test_data_odd))
	_ = sll_one
	var sll_two SortedLinkedList = make_sorted_linked_list(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(test_data_even))
	_ = sll_two
	var merged SortedLinkedList = merge_lists(sll_one, sll_two)
	_ = merged
	fmt.Println(fmt.Sprint(len_sll(merged)))
	fmt.Println(str_sll(merged))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
