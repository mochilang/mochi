//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-14 21:57:10 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

type CircularLinkedList struct {
	Data []int `json:"data"`
}

func empty_list() CircularLinkedList {
	return CircularLinkedList{
		Data: []int{},
	}
}

func length(list CircularLinkedList) int {
	return len(list.Data)
}

func is_empty(list CircularLinkedList) bool {
	return (len(list.Data) == 0)
}

func to_string(list CircularLinkedList) string {
	if len(list.Data) == 0 {
		return ""
	}
	var s string = fmt.Sprint(_index(list.Data, 0))
	_ = s
	var i int = 1
	_ = i
	for i < len(list.Data) {
		s = ((s + "->") + fmt.Sprint(_index(list.Data, i)))
		i = (i + 1)
	}
	return s
}

func insert_nth(list CircularLinkedList, index int, value int) CircularLinkedList {
	if (index < 0) || (index > len(list.Data)) {
		panic("index out of range")
	}
	var res []int = []int{}
	_ = res
	var i int = 0
	_ = i
	for i < index {
		res = append(res, _index(list.Data, i))
		i = (i + 1)
	}
	res = append(res, value)
	for i < len(list.Data) {
		res = append(res, _index(list.Data, i))
		i = (i + 1)
	}
	return CircularLinkedList{
		Data: res,
	}
}

func insert_head(list CircularLinkedList, value int) CircularLinkedList {
	return insert_nth(list, 0, value)
}

func insert_tail(list CircularLinkedList, value int) CircularLinkedList {
	return insert_nth(list, len(list.Data), value)
}

type DeleteResult struct {
	List  CircularLinkedList `json:"list"`
	Value int                `json:"value"`
}

func delete_nth(list CircularLinkedList, index int) DeleteResult {
	if (index < 0) || (index >= len(list.Data)) {
		panic("index out of range")
	}
	var res []int = []int{}
	_ = res
	var i int = 0
	_ = i
	var val int = 0
	_ = val
	for i < len(list.Data) {
		if i == index {
			val = _index(list.Data, i)
		} else {
			res = append(res, _index(list.Data, i))
		}
		i = (i + 1)
	}
	return DeleteResult{
		List: CircularLinkedList{
			Data: res,
		},
		Value: val,
	}
}

func delete_front(list CircularLinkedList) DeleteResult {
	return delete_nth(list, 0)
}

func delete_tail(list CircularLinkedList) DeleteResult {
	return delete_nth(list, (len(list.Data) - 1))
}

func mochiMain() {
	var cll CircularLinkedList = empty_list()
	_ = cll
	var i int = 0
	_ = i
	for i < 5 {
		cll = insert_tail(cll, (i + 1))
		i = (i + 1)
	}
	fmt.Println(to_string(cll))
	cll = insert_tail(cll, 6)
	fmt.Println(to_string(cll))
	cll = insert_head(cll, 0)
	fmt.Println(to_string(cll))
	var res DeleteResult = delete_front(cll)
	_ = res
	cll = res.List
	fmt.Println(res.Value)
	res = delete_tail(cll)
	cll = res.List
	fmt.Println(res.Value)
	res = delete_nth(cll, 2)
	cll = res.List
	fmt.Println(res.Value)
	fmt.Println(to_string(cll))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
