//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-14 22:00:28 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	s[idx] = v
}

func _concat[T any](a, b []T) []T {
	return append(append([]T{}, a...), b...)
}

type LinkedList struct {
	Data []int `json:"data"`
}

func empty_list() LinkedList {
	return LinkedList{
		Data: []int{},
	}
}

func push(list LinkedList, value int) LinkedList {
	var res []int = []int{func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(value)}
	_ = res
	res = _concat(res, list.Data)
	return LinkedList{
		Data: res,
	}
}

func swap_nodes(list LinkedList, v1 int, v2 int) LinkedList {
	if v1 == v2 {
		return list
	}
	var idx1 int = (0 - 1)
	_ = idx1
	var idx2 int = (0 - 1)
	_ = idx2
	var i int = 0
	_ = i
	for i < len(list.Data) {
		if (int(_index(list.Data, i)) == v1) && (idx1 == (0 - 1)) {
			idx1 = i
		}
		if (int(_index(list.Data, i)) == v2) && (idx2 == (0 - 1)) {
			idx2 = i
		}
		i = (i + 1)
	}
	if (idx1 == (0 - 1)) || (idx2 == (0 - 1)) {
		return list
	}
	var res []int = list.Data
	_ = res
	var temp int = _index(res, idx1)
	_ = temp
	_setIndex(res, idx1, _index(res, idx2))
	_setIndex(res, idx2, temp)
	return LinkedList{
		Data: res,
	}
}

func to_string(list LinkedList) string {
	return fmt.Sprint(list.Data)
}

func mochiMain() {
	var ll LinkedList = empty_list()
	_ = ll
	var i int = 5
	_ = i
	for i > 0 {
		ll = push(ll, i)
		i = (i - 1)
	}
	fmt.Println(("Original Linked List: " + to_string(ll)))
	ll = swap_nodes(ll, 1, 4)
	fmt.Println(("Modified Linked List: " + to_string(ll)))
	fmt.Println("After swapping the nodes whose data is 1 and 4.")
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
