//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-14 21:59:49 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

type LinkedList struct {
	Data []int `json:"data"`
}

func empty_list() LinkedList {
	return LinkedList{
		Data: []int{},
	}
}

func append_value(list LinkedList, value int) LinkedList {
	var d []int = list.Data
	_ = d
	d = append(d, value)
	return LinkedList{
		Data: d,
	}
}

func extend_list(list LinkedList, items []int) LinkedList {
	var result LinkedList = list
	_ = result
	var i int = 0
	_ = i
	for i < len(items) {
		result = append_value(result, _index(items, i))
		i = (i + 1)
	}
	return result
}

func to_string(list LinkedList) string {
	if len(list.Data) == 0 {
		return ""
	}
	var s string = fmt.Sprint(_index(list.Data, 0))
	_ = s
	var i int = 1
	_ = i
	for i < len(list.Data) {
		s = ((s + " -> ") + fmt.Sprint(_index(list.Data, i)))
		i = (i + 1)
	}
	return s
}

func make_linked_list(items []int) LinkedList {
	if len(items) == 0 {
		panic("The Elements List is empty")
	}
	var ll LinkedList = empty_list()
	_ = ll
	ll = extend_list(ll, func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(items))
	return ll
}

func in_reverse(list LinkedList) string {
	if len(list.Data) == 0 {
		return ""
	}
	var i int = (len(list.Data) - 1)
	_ = i
	var s string = fmt.Sprint(_index(list.Data, i))
	_ = s
	i = (i - 1)
	for i >= 0 {
		s = ((s + " <- ") + fmt.Sprint(_index(list.Data, i)))
		i = (i - 1)
	}
	return s
}

func mochiMain() {
	var linked_list LinkedList = make_linked_list(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}([]int{14, 52, 14, 12, 43}))
	_ = linked_list
	fmt.Println(("Linked List:  " + to_string(linked_list)))
	fmt.Println(("Reverse List: " + in_reverse(linked_list)))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
