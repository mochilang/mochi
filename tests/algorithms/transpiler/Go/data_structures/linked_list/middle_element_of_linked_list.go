//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-14 21:59:46 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

type List struct {
	Data []int `json:"data"`
}

func empty_list() List {
	return List{
		Data: []int{},
	}
}

func push(lst List, value int) List {
	var res []int = []int{func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(value)}
	_ = res
	var i int = 0
	_ = i
	for i < len(lst.Data) {
		res = append(res, _index(lst.Data, i))
		i = (i + 1)
	}
	return List{
		Data: res,
	}
}

func middle_element(lst List) int {
	var n int = len(lst.Data)
	_ = n
	if n == 0 {
		fmt.Println("No element found.")
		return 0
	}
	var slow int = 0
	_ = slow
	var fast int = 0
	_ = fast
	for (fast + 1) < n {
		fast = (fast + 2)
		slow = (slow + 1)
	}
	return _index(lst.Data, slow)
}

func mochiMain() {
	var lst List = empty_list()
	_ = lst
	middle_element(lst)
	lst = push(lst, 5)
	fmt.Println(5)
	lst = push(lst, 6)
	fmt.Println(6)
	lst = push(lst, 8)
	fmt.Println(8)
	lst = push(lst, 8)
	fmt.Println(8)
	lst = push(lst, 10)
	fmt.Println(10)
	lst = push(lst, 12)
	fmt.Println(12)
	lst = push(lst, 17)
	fmt.Println(17)
	lst = push(lst, 7)
	fmt.Println(7)
	lst = push(lst, 3)
	fmt.Println(3)
	lst = push(lst, 20)
	fmt.Println(20)
	lst = push(lst, (0 - 20))
	fmt.Println((0 - 20))
	fmt.Println(middle_element(lst))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
