//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-14 21:59:50 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

type LinkedList struct {
	Data []int `json:"data"`
}

func to_string(list LinkedList) string {
	if len(list.Data) == 0 {
		return ""
	}
	var s string = fmt.Sprint(_index(list.Data, 0))
	_ = s
	var i int = 1
	_ = i
	for i < len(list.Data) {
		s = ((s + " -> ") + fmt.Sprint(_index(list.Data, i)))
		i = (i + 1)
	}
	return s
}

func reverse_k_nodes(list LinkedList, k int) LinkedList {
	if k <= 1 {
		return list
	}
	var res []int = []int{}
	_ = res
	var i int = 0
	_ = i
	for i < len(list.Data) {
		var j int = 0
		_ = j
		var group []int = []int{}
		_ = group
		for (j < k) && ((i + j) < len(list.Data)) {
			group = append(group, _index(list.Data, (i+j)))
			j = (j + 1)
		}
		if len(group) == k {
			var g int = (k - 1)
			_ = g
			for g >= 0 {
				res = append(res, _index(group, g))
				g = (g - 1)
			}
		} else {
			var g int = 0
			_ = g
			for g < len(group) {
				res = append(res, _index(group, g))
				g = (g + 1)
			}
		}
		i = (i + k)
	}
	return LinkedList{
		Data: res,
	}
}

func mochiMain() {
	var ll LinkedList = LinkedList{
		Data: []int{1, 2, 3, 4, 5},
	}
	_ = ll
	fmt.Println(("Original Linked List: " + to_string(ll)))
	var k int = 2
	_ = k
	ll = reverse_k_nodes(ll, k)
	fmt.Println(((("After reversing groups of size " + fmt.Sprint(k)) + ": ") + to_string(ll)))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
