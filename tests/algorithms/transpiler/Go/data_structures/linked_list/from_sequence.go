//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-14 21:59:39 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"math/big"
	"os"
	"runtime"
	"strconv"
	"time"
)

var _ = big.NewInt

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	s[idx] = v
}

type Node struct {
	Data int `json:"data"`
	Next int `json:"next"`
}

var NIL int

var nodes []Node

func make_linked_list(elements []int) int {
	if len(elements) == 0 {
		panic("The Elements List is empty")
	}
	nodes = []Node{}
	nodes = append(nodes, Node{
		Data: _index(elements, 0),
		Next: NIL,
	})
	var head int = 0
	_ = head
	var current int = head
	_ = current
	var i int = 1
	_ = i
	for i < len(elements) {
		nodes = append(nodes, Node{
			Data: _index(elements, i),
			Next: NIL,
		})
		_tmp1 := _index(nodes, current)
		_ = _tmp1
		_tmp1.Next = (len(nodes) - 1)
		_setIndex(nodes, current, _tmp1)
		current = (len(nodes) - 1)
		i = (i + 1)
	}
	return head
}

func node_to_string(head int) string {
	var s string = ""
	_ = s
	var index int = head
	_ = index
	for index != int(NIL) {
		var node Node = _index(nodes, index)
		_ = node
		s = (((s + "<") + fmt.Sprint(node.Data)) + "> ---> ")
		index = node.Next
	}
	s = (s + "<END>")
	return s
}

func mochiMain() {
	var list_data []int = []int{1, 3, 5, 32, 44, 12, 43}
	_ = list_data
	fmt.Println(("List: " + fmt.Sprint(list_data)))
	fmt.Println("Creating Linked List from List.")
	var head int = make_linked_list(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(list_data))
	_ = head
	fmt.Println("Linked List:")
	fmt.Println(node_to_string(head))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		NIL = (0 - 1)
		nodes = []Node{}
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
