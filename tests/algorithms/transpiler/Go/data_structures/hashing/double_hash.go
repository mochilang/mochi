//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-14 18:48:24 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _mod(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	s[idx] = v
}

func is_prime(n int) bool {
	if n < 2 {
		return false
	}
	var i int = 2
	_ = i
	for (i * i) <= n {
		if _mod(n, i) == 0 {
			return false
		}
		i = (i + 1)
	}
	return true
}

func prev_prime(n int) int {
	var p int = (n - 1)
	_ = p
	for p >= 2 {
		if is_prime(p) {
			return p
		}
		p = (p - 1)
	}
	return 1
}

func create_table(size int) []int {
	var vals []int = []int{}
	_ = vals
	var i int = 0
	_ = i
	for i < size {
		vals = append(vals, (0 - 1))
		i = (i + 1)
	}
	return vals
}

func hash1(size int, key int) int {
	return _mod(key, size)
}

func hash2(prime int, key int) int {
	return (prime - _mod(key, prime))
}

func insert_double_hash(values []int, size int, prime int, value int) []int {
	var vals []int = values
	_ = vals
	var idx int = hash1(size, value)
	_ = idx
	var step int = hash2(prime, value)
	_ = step
	var count int = 0
	_ = count
	for (int(_index(vals, idx)) != (0 - 1)) && (count < size) {
		idx = _mod((idx + step), size)
		count = (count + 1)
	}
	if int(_index(vals, idx)) == (0 - 1) {
		_setIndex(vals, idx, value)
	}
	return vals
}

func table_keys(values []int) map[int]int {
	var res map[int]int = map[int]int{}
	_ = res
	var i int = 0
	_ = i
	for i < len(values) {
		if int(_index(values, i)) != (0 - 1) {
			res[i] = _index(values, i)
		}
		i = (i + 1)
	}
	return res
}

func run_example(size int, data []int) {
	var prime int = prev_prime(size)
	_ = prime
	var table []int = create_table(size)
	_ = table
	var i int = 0
	_ = i
	for i < len(data) {
		table = insert_double_hash(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(table), size, prime, _index(data, i))
		i = (i + 1)
	}
	fmt.Println(fmt.Sprint(table_keys(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(table))))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		run_example(3, func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}([]int{10, 20, 30}))
		run_example(4, func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}([]int{10, 20, 30}))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
