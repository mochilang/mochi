//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-14 18:48:32 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _mod(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func isPrime(number int) bool {
	if number < 2 {
		return false
	}
	if number < 4 {
		return true
	}
	if _mod(number, 2) == 0 {
		return false
	}
	var i int = 3
	_ = i
	for (i * i) <= number {
		if _mod(number, i) == 0 {
			return false
		}
		i = (i + 2)
	}
	return true
}

func nextPrime(value int, factor int, desc bool) int {
	var v int = (value * factor)
	_ = v
	var firstValue int = v
	_ = firstValue
	for !isPrime(v) {
		if desc {
			v = (v - 1)
		} else {
			v = (v + 1)
		}
	}
	if v == firstValue {
		if desc {
			return nextPrime((v - 1), 1, desc)
		} else {
			return nextPrime((v + 1), 1, desc)
		}
	}
	return v
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(isPrime(0))
		fmt.Println(isPrime(1))
		fmt.Println(isPrime(2))
		fmt.Println(isPrime(3))
		fmt.Println(isPrime(27))
		fmt.Println(isPrime(87))
		fmt.Println(isPrime(563))
		fmt.Println(isPrime(2999))
		fmt.Println(isPrime(67483))
		fmt.Println(nextPrime(14, 1, false))
		fmt.Println(nextPrime(14, 1, true))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
