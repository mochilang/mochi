//go:build ignore

// Generated by Mochi v0.10.61 on 2025-08-08 16:44:01 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"reflect"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _mod(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	s[idx] = v
}

func _len(v any) int {
	switch t := v.(type) {
	case string:
		return len([]rune(t))
	case []any:
		return len(t)
	case []string:
		return len(t)
	case []int:
		return len(t)
	case []float64:
		return len(t)
	case map[string]any:
		return len(t)
	case map[int]any:
		return len(t)
	case map[any]any:
		return len(t)
	default:
		return 0
	}
}

func _toFloat(v any) float64 {
	switch t := v.(type) {
	case int:
		return float64(t)
	case int64:
		return float64(t)
	case float64:
		return t
	default:
		return 0
	}
}

var ascii string

func ord(ch string) int {
	var i int = 0
	_ = i
	for i < len(ascii) {
		if string([]rune(ascii)[i:(i+1)]) == ch {
			return (32 + i)
		}
		i = (i + 1)
	}
	return 0
}

type Bloom struct {
	Size int   `json:"size"`
	Bits []int `json:"bits"`
}

func new_bloom(size int) Bloom {
	var bits []int = []int{}
	_ = bits
	var i int = 0
	_ = i
	for i < size {
		bits = append(bits, 0)
		i = (i + 1)
	}
	return Bloom{
		Size: size,
		Bits: bits,
	}
}

func hash1(value string, size int) int {
	var h int = 0
	_ = h
	var i int = 0
	_ = i
	for i < len(value) {
		h = _mod(((h * 31) + ord(string([]rune(value)[i:(i+1)]))), size)
		i = (i + 1)
	}
	return h
}

func hash2(value string, size int) int {
	var h int = 0
	_ = h
	var i int = 0
	_ = i
	for i < len(value) {
		h = _mod(((h * 131) + ord(string([]rune(value)[i:(i+1)]))), size)
		i = (i + 1)
	}
	return h
}

func hash_positions(value string, size int) []int {
	h1 := hash1(value, size)
	_ = h1
	h2 := hash2(value, size)
	_ = h2
	var res []int = []int{}
	_ = res
	res = append(res, h1)
	res = append(res, h2)
	return res
}

func bloom_add(b Bloom, value string) Bloom {
	pos := hash_positions(value, b.Size)
	_ = pos
	var bits []int = b.Bits
	_ = bits
	var i int = 0
	_ = i
	for i < _len(pos) {
		var idx int = ((b.Size - 1) - int(_index(func(v any) []any {
			if v == nil {
				return nil
			}
			if arr, ok := v.([]any); ok {
				return arr
			}
			rv := reflect.ValueOf(v)
			if rv.Kind() != reflect.Slice {
				return v.([]any)
			}
			n := rv.Len()
			out := make([]any, n)
			for i := 0; i < n; i++ {
				out[i] = rv.Index(i).Interface()
			}
			return out
		}(pos), i)))
		_ = idx
		_setIndex(bits, idx, 1)
		i = (i + 1)
	}
	return Bloom{
		Size: b.Size,
		Bits: bits,
	}
}

func bloom_exists(b Bloom, value string) bool {
	pos := hash_positions(value, b.Size)
	_ = pos
	var i int = 0
	_ = i
	for i < _len(pos) {
		var idx int = ((b.Size - 1) - int(_index(func(v any) []any {
			if v == nil {
				return nil
			}
			if arr, ok := v.([]any); ok {
				return arr
			}
			rv := reflect.ValueOf(v)
			if rv.Kind() != reflect.Slice {
				return v.([]any)
			}
			n := rv.Len()
			out := make([]any, n)
			for i := 0; i < n; i++ {
				out[i] = rv.Index(i).Interface()
			}
			return out
		}(pos), i)))
		_ = idx
		if int(_index(b.Bits, idx)) != 1 {
			return false
		}
		i = (i + 1)
	}
	return true
}

func bitstring(b Bloom) string {
	var res string = ""
	_ = res
	var i int = 0
	_ = i
	for i < b.Size {
		res = (res + fmt.Sprint(_index(b.Bits, i)))
		i = (i + 1)
	}
	return res
}

func format_hash(b Bloom, value string) string {
	pos := hash_positions(value, b.Size)
	_ = pos
	var bits []int = []int{}
	_ = bits
	var i int = 0
	_ = i
	for i < b.Size {
		bits = append(bits, 0)
		i = (i + 1)
	}
	i = 0
	for i < _len(pos) {
		var idx int = ((b.Size - 1) - int(_index(func(v any) []any {
			if v == nil {
				return nil
			}
			if arr, ok := v.([]any); ok {
				return arr
			}
			rv := reflect.ValueOf(v)
			if rv.Kind() != reflect.Slice {
				return v.([]any)
			}
			n := rv.Len()
			out := make([]any, n)
			for i := 0; i < n; i++ {
				out[i] = rv.Index(i).Interface()
			}
			return out
		}(pos), i)))
		_ = idx
		_setIndex(bits, idx, 1)
		i = (i + 1)
	}
	var res string = ""
	_ = res
	i = 0
	for i < b.Size {
		res = (res + fmt.Sprint(_index(bits, i)))
		i = (i + 1)
	}
	return res
}

func estimated_error_rate(b Bloom) float64 {
	var ones int = 0
	_ = ones
	var i int = 0
	_ = i
	for i < b.Size {
		if int(_index(b.Bits, i)) == 1 {
			ones = (ones + 1)
		}
		i = (i + 1)
	}
	frac := (float64(ones) / float64(b.Size))
	_ = frac
	_ = frac
	return float64((_toFloat(frac) * _toFloat(frac)))
}

func any_in(b Bloom, items []string) bool {
	var i int = 0
	_ = i
	for i < len(items) {
		if bloom_exists(b, _index(items, i)) {
			return true
		}
		i = (i + 1)
	}
	return false
}

func mochiMain() {
	var bloom Bloom = new_bloom(8)
	_ = bloom
	fmt.Println(bitstring(bloom))
	fmt.Println(bloom_exists(bloom, "Titanic"))
	bloom = bloom_add(bloom, "Titanic")
	fmt.Println(bitstring(bloom))
	fmt.Println(bloom_exists(bloom, "Titanic"))
	bloom = bloom_add(bloom, "Avatar")
	fmt.Println(bloom_exists(bloom, "Avatar"))
	fmt.Println(format_hash(bloom, "Avatar"))
	fmt.Println(bitstring(bloom))
	var not_present []string = []string{"The Godfather", "Interstellar", "Parasite", "Pulp Fiction"}
	_ = not_present
	var i int = 0
	_ = i
	for i < len(not_present) {
		var film string = _index(not_present, i)
		_ = film
		fmt.Println(((film + ":") + format_hash(bloom, film)))
		i = (i + 1)
	}
	fmt.Println(any_in(bloom, func(v any) []string {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]string); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []string{}
			}
			out := make([]string, len(arr))
			for i, x := range arr {
				out[i] = x.(string)
			}
			return out
		}
		return v.([]string)
	}(not_present)))
	fmt.Println(bloom_exists(bloom, "Ratatouille"))
	fmt.Println(format_hash(bloom, "Ratatouille"))
	fmt.Println(fmt.Sprint(estimated_error_rate(bloom)))
	bloom = bloom_add(bloom, "The Godfather")
	fmt.Println(fmt.Sprint(estimated_error_rate(bloom)))
	fmt.Println(bitstring(bloom))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		ascii = " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
