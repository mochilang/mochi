//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-14 18:48:30 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _mod(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	s[idx] = v
}

type HashTableWithLinkedList struct {
	SizeTable    int           `json:"size_table"`
	ChargeFactor int           `json:"charge_factor"`
	Values       [][]int       `json:"values"`
	Keys         map[int][]int `json:"keys"`
}

func make_table(size_table int, charge_factor int) HashTableWithLinkedList {
	var vals [][]int = [][]int{}
	_ = vals
	var i int = 0
	_ = i
	for i < size_table {
		vals = append(vals, []int{})
		i = (i + 1)
	}
	return HashTableWithLinkedList{
		SizeTable:    size_table,
		ChargeFactor: charge_factor,
		Values:       vals,
		Keys:         map[int][]int{},
	}
}

func hash_function(ht HashTableWithLinkedList, key int) int {
	var res int = _mod(key, ht.SizeTable)
	_ = res
	if res < 0 {
		res = (res + ht.SizeTable)
	}
	return res
}

func prepend(lst []int, value int) []int {
	var result []int = []int{func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(value)}
	_ = result
	var i int = 0
	_ = i
	for i < len(lst) {
		result = append(result, _index(lst, i))
		i = (i + 1)
	}
	return result
}

func set_value(ht *HashTableWithLinkedList, key int, data int) {
	var current []int = _index(ht.Values, key)
	_ = current
	var updated []int = prepend(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(current), data)
	_ = updated
	var vals [][]int = ht.Values
	_ = vals
	_setIndex(vals, key, updated)
	ht.Values = vals
	var ks map[int][]int = ht.Keys
	_ = ks
	ks[key] = updated
	ht.Keys = ks
}

func count_empty(ht HashTableWithLinkedList) int {
	var count int = 0
	_ = count
	var i int = 0
	_ = i
	for i < len(ht.Values) {
		if len(_index(ht.Values, i)) == 0 {
			count = (count + 1)
		}
		i = (i + 1)
	}
	return count
}

func balanced_factor(ht HashTableWithLinkedList) float64 {
	var total int = 0
	_ = total
	var i int = 0
	_ = i
	for i < len(ht.Values) {
		total = (total + (ht.ChargeFactor - len(_index(ht.Values, i))))
		i = (i + 1)
	}
	return ((float64(total) / float64(ht.SizeTable)) * float64(ht.ChargeFactor))
}

func collision_resolution(ht HashTableWithLinkedList, key int) int {
	if !((len(_index(ht.Values, key)) == ht.ChargeFactor) && (count_empty(ht) == 0)) {
		return key
	}
	var new_key int = _mod((key + 1), ht.SizeTable)
	_ = new_key
	var steps int = 0
	_ = steps
	for (len(_index(ht.Values, new_key)) == ht.ChargeFactor) && (steps < (ht.SizeTable - 1)) {
		new_key = _mod((new_key + 1), ht.SizeTable)
		steps = (steps + 1)
	}
	if len(_index(ht.Values, new_key)) < ht.ChargeFactor {
		return new_key
	}
	return (0 - 1)
}

func insert(ht HashTableWithLinkedList, data int) {
	var key int = hash_function(ht, data)
	_ = key
	if (len(_index(ht.Values, key)) == 0) || (len(_index(ht.Values, key)) < ht.ChargeFactor) {
		set_value(&ht, key, data)
		return
	}
	var dest int = collision_resolution(ht, key)
	_ = dest
	if dest >= 0 {
		set_value(&ht, dest, data)
	} else {
		fmt.Println("table full")
	}
}

func mochiMain() {
	var ht HashTableWithLinkedList = make_table(3, 2)
	_ = ht
	insert(ht, 10)
	insert(ht, 20)
	insert(ht, 30)
	insert(ht, 40)
	insert(ht, 50)
	fmt.Println(fmt.Sprint(ht.Values))
	fmt.Println(fmt.Sprint(balanced_factor(ht)))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
