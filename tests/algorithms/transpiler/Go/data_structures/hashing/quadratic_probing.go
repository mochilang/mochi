//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-14 19:10:08 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _mod(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	s[idx] = v
}

type HashTable struct {
	SizeTable int     `json:"size_table"`
	Values    []int   `json:"values"`
	LimCharge float64 `json:"lim_charge"`
}

func create_hash_table(size int) HashTable {
	var vals []int = []int{}
	_ = vals
	var i int = 0
	_ = i
	for i < size {
		vals = append(vals, -1)
		i = (i + 1)
	}
	return HashTable{
		SizeTable: size,
		Values:    vals,
		LimCharge: 0.75,
	}
}

func hash_function(table HashTable, key int) int {
	return _mod(key, table.SizeTable)
}

func balanced_factor(table HashTable) float64 {
	var count int = 0
	_ = count
	var i int = 0
	_ = i
	for i < len(table.Values) {
		if int(_index(table.Values, i)) != -1 {
			count = (count + 1)
		}
		i = (i + 1)
	}
	return (float64(count) / float64(table.SizeTable))
}

func collision_resolution(table HashTable, key int) int {
	var i int = 1
	_ = i
	var new_key int = hash_function(table, (key + (i * i)))
	_ = new_key
	for (int(_index(table.Values, new_key)) != -1) && (int(_index(table.Values, new_key)) != key) {
		i = (i + 1)
		if balanced_factor(table) >= table.LimCharge {
			return table.SizeTable
		}
		new_key = hash_function(table, (key + (i * i)))
	}
	return new_key
}

func insert_data(table *HashTable, data int) {
	var key int = hash_function(*table, data)
	_ = key
	var vals []int = table.Values
	_ = vals
	if int(_index(vals, key)) == -1 {
		_setIndex(vals, key, data)
	} else {
		if int(_index(vals, key)) == data {
			table.Values = vals
			return
		} else {
			var new_key int = collision_resolution(*table, key)
			_ = new_key
			if (new_key < len(vals)) && (int(_index(vals, new_key)) == -1) {
				_setIndex(vals, new_key, data)
			}
		}
	}
	table.Values = vals
}

func int_to_string(n int) string {
	if n == 0 {
		return "0"
	}
	var num int = n
	_ = num
	var neg bool = false
	_ = neg
	if num < 0 {
		neg = true
		num = (0 - num)
	}
	var res string = ""
	_ = res
	for num > 0 {
		var digit int = _mod(num, 10)
		_ = digit
		var ch string = _substr("0123456789", digit, (digit + 1))
		_ = ch
		res = (ch + res)
		num = (num / 10)
	}
	if neg {
		res = ("-" + res)
	}
	return res
}

func keys_to_string(table HashTable) string {
	var result string = "{"
	_ = result
	var first bool = true
	_ = first
	var i int = 0
	_ = i
	for i < len(table.Values) {
		var v int = _index(table.Values, i)
		_ = v
		if v != -1 {
			if !first {
				result = (result + ", ")
			}
			result = (((result + int_to_string(i)) + ": ") + int_to_string(v))
			first = false
		}
		i = (i + 1)
	}
	result = (result + "}")
	return result
}

var qp HashTable

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		qp = create_hash_table(8)
		insert_data(&qp, 0)
		insert_data(&qp, 999)
		insert_data(&qp, 111)
		fmt.Println(keys_to_string(qp))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
