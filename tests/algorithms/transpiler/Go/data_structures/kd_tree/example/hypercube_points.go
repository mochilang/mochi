//go:build ignore

// Generated by Mochi v0.10.72 on 2025-08-25 00:06:10 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

func _modi(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

var __name__ string = "__main__"

var seed int

func rand() int {
	seed = _modi(((seed * 1103515245) + 12345), 2147483648)
	return seed
}

func random() float64 {
	return (float64(float64(rand())) / float64(2147483648.0))
}

func hypercube_points(num_points int, hypercube_size float64, num_dimensions int) [][]float64 {
	var points [][]float64 = [][]float64{}
	_ = points
	var i int = 0
	_ = i
	for i < num_points {
		var point []float64 = []float64{}
		_ = point
		var j int = 0
		_ = j
		for j < num_dimensions {
			var value float64 = (hypercube_size * random())
			_ = value
			point = append(point, value)
			j = (j + 1)
		}
		points = append(points, point)
		i = (i + 1)
	}
	return points
}

var pts [][]float64

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		seed = 1
		pts = hypercube_points(3, 1.0, 2)
		fmt.Println(fmt.Sprint(pts))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
