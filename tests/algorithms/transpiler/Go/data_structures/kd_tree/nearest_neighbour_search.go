//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-14 21:55:55 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _mod(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

type KDNode struct {
	Point []float64 `json:"point"`
	Left  int       `json:"left"`
	Right int       `json:"right"`
}

type SearchResult struct {
	Point        []float64 `json:"point"`
	Distance     float64   `json:"distance"`
	NodesVisited int       `json:"nodes_visited"`
}

func square_distance(a []float64, b []float64) float64 {
	var i int = 0
	_ = i
	var total float64 = 0.0
	_ = total
	for i < len(a) {
		var diff float64 = (_index(a, i) - _index(b, i))
		_ = diff
		total = (total + (diff * diff))
		i = (i + 1)
	}
	return total
}

func search(nodes []KDNode, index int, query_point []float64, depth int, best SearchResult) SearchResult {
	if index == (0 - 1) {
		return best
	}
	var result SearchResult = best
	_ = result
	result.NodesVisited = (result.NodesVisited + 1)
	var node KDNode = _index(nodes, index)
	_ = node
	var current_point []float64 = node.Point
	_ = current_point
	var current_dist float64 = square_distance(func(v any) []float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []float64{}
			}
			out := make([]float64, len(arr))
			for i, x := range arr {
				out[i] = x.(float64)
			}
			return out
		}
		return v.([]float64)
	}(query_point), func(v any) []float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []float64{}
			}
			out := make([]float64, len(arr))
			for i, x := range arr {
				out[i] = x.(float64)
			}
			return out
		}
		return v.([]float64)
	}(current_point))
	_ = current_dist
	if (len(result.Point) == 0) || (current_dist < result.Distance) {
		result.Point = current_point
		result.Distance = current_dist
	}
	var k int = len(query_point)
	_ = k
	var axis int = _mod(depth, k)
	_ = axis
	var nearer int = node.Left
	_ = nearer
	var further int = node.Right
	_ = further
	if _index(query_point, axis) > _index(current_point, axis) {
		nearer = node.Right
		further = node.Left
	}
	result = search(func(v any) []KDNode {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]KDNode); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []KDNode{}
			}
			out := make([]KDNode, len(arr))
			for i, x := range arr {
				out[i] = x.(KDNode)
			}
			return out
		}
		return v.([]KDNode)
	}(nodes), nearer, func(v any) []float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []float64{}
			}
			out := make([]float64, len(arr))
			for i, x := range arr {
				out[i] = x.(float64)
			}
			return out
		}
		return v.([]float64)
	}(query_point), (depth + 1), result)
	var diff float64 = (_index(query_point, axis) - _index(current_point, axis))
	_ = diff
	if (diff * diff) < result.Distance {
		result = search(func(v any) []KDNode {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]KDNode); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []KDNode{}
				}
				out := make([]KDNode, len(arr))
				for i, x := range arr {
					out[i] = x.(KDNode)
				}
				return out
			}
			return v.([]KDNode)
		}(nodes), further, func(v any) []float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []float64{}
				}
				out := make([]float64, len(arr))
				for i, x := range arr {
					out[i] = x.(float64)
				}
				return out
			}
			return v.([]float64)
		}(query_point), (depth + 1), result)
	}
	return result
}

func nearest_neighbour_search(nodes []KDNode, root int, query_point []float64) SearchResult {
	var initial SearchResult = SearchResult{
		Point:        []float64{},
		Distance:     1e+30,
		NodesVisited: 0,
	}
	_ = initial
	_ = initial
	return search(func(v any) []KDNode {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]KDNode); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []KDNode{}
			}
			out := make([]KDNode, len(arr))
			for i, x := range arr {
				out[i] = x.(KDNode)
			}
			return out
		}
		return v.([]KDNode)
	}(nodes), root, func(v any) []float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []float64{}
			}
			out := make([]float64, len(arr))
			for i, x := range arr {
				out[i] = x.(float64)
			}
			return out
		}
		return v.([]float64)
	}(query_point), 0, initial)
}

var nodes []KDNode

var queries [][]float64

var q int

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		nodes = []KDNode{KDNode{
			Point: []float64{9.0, 1.0},
			Left:  1,
			Right: 4,
		}, KDNode{
			Point: []float64{2.0, 7.0},
			Left:  2,
			Right: 3,
		}, KDNode{
			Point: []float64{3.0, 6.0},
			Left:  (0 - 1),
			Right: (0 - 1),
		}, KDNode{
			Point: []float64{6.0, 12.0},
			Left:  (0 - 1),
			Right: (0 - 1),
		}, KDNode{
			Point: []float64{17.0, 15.0},
			Left:  5,
			Right: 6,
		}, KDNode{
			Point: []float64{13.0, 15.0},
			Left:  (0 - 1),
			Right: (0 - 1),
		}, KDNode{
			Point: []float64{10.0, 19.0},
			Left:  (0 - 1),
			Right: (0 - 1),
		}}
		queries = [][]float64{[]float64{9.0, 2.0}, []float64{12.0, 15.0}, []float64{1.0, 3.0}}
		q = 0
		for q < len(queries) {
			var res SearchResult = nearest_neighbour_search(func(v any) []KDNode {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]KDNode); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []KDNode{}
					}
					out := make([]KDNode, len(arr))
					for i, x := range arr {
						out[i] = x.(KDNode)
					}
					return out
				}
				return v.([]KDNode)
			}(nodes), 0, func(v any) []float64 {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]float64); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []float64{}
					}
					out := make([]float64, len(arr))
					for i, x := range arr {
						out[i] = x.(float64)
					}
					return out
				}
				return v.([]float64)
			}(_index(queries, q)))
			_ = res
			fmt.Println((((((fmt.Sprint(res.Point) + " ") + fmt.Sprint(res.Distance)) + " ") + fmt.Sprint(res.NodesVisited)) + "\n"))
			q = (q + 1)
		}
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
