//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-14 21:55:44 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"math/big"
	"os"
	"runtime"
	"strconv"
	"strings"
	"time"
)

var _ = big.NewInt

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _mod(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

var NIL int

var seed int

func set_seed(s int) {
	seed = s
}

func randint(a int, b int) int {
	seed = _mod(((seed * 1103515245) + 12345), 2147483648)
	return (_mod(seed, ((b-a)+1)) + a)
}

func rand_bool() bool {
	return (randint(0, 1) == 1)
}

var nodes []map[string]int

var root int

func new_heap() {
	nodes = []map[string]int{}
	root = NIL
}

func merge(r1 int, r2 int) int {
	if r1 == int(NIL) {
		return r2
	}
	if r2 == int(NIL) {
		return r1
	}
	if int(_index(nodes, r1)["value"]) > int(_index(nodes, r2)["value"]) {
		var tmp int = r1
		_ = tmp
		r1 = r2
		r2 = tmp
	}
	if rand_bool() {
		var tmp int = _index(nodes, r1)["left"]
		_ = tmp
		_index(nodes, r1)["left"] = _index(nodes, r1)["right"]
		_index(nodes, r1)["right"] = tmp
	}
	_index(nodes, r1)["left"] = merge(_index(nodes, r1)["left"], r2)
	return r1
}

func insert(value int) {
	node := map[string]int{"value": value, "left": int(NIL), "right": int(NIL)}
	_ = node
	nodes = append(nodes, node)
	var idx int = (len(nodes) - 1)
	_ = idx
	root = merge(root, idx)
}

func top() int {
	if root == int(NIL) {
		return 0
	}
	return _index(nodes, root)["value"]
}

func pop() int {
	var result int = top()
	_ = result
	_ = result
	var l int = _index(nodes, root)["left"]
	_ = l
	var r int = _index(nodes, root)["right"]
	_ = r
	root = merge(l, r)
	return result
}

func is_empty() bool {
	return (root == int(NIL))
}

func to_sorted_list() []int {
	var res []int = []int{}
	_ = res
	for !is_empty() {
		res = append(res, pop())
	}
	return res
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		NIL = (0 - 1)
		seed = 1
		nodes = []map[string]int{}
		root = NIL
		set_seed(1)
		new_heap()
		insert(2)
		insert(3)
		insert(1)
		insert(5)
		insert(1)
		insert(7)
		fmt.Println(func() string {
			b, _ := json.Marshal(to_sorted_list())
			s := string(b)
			s = strings.ReplaceAll(s, ":", ": ")
			s = strings.ReplaceAll(s, ",", ", ")
			s = strings.ReplaceAll(s, "}, {", "},{")
			return s
		}())
		new_heap()
		insert(1)
		insert((0 - 1))
		insert(0)
		fmt.Println(func() string {
			b, _ := json.Marshal(to_sorted_list())
			s := string(b)
			s = strings.ReplaceAll(s, ":", ": ")
			s = strings.ReplaceAll(s, ",", ", ")
			s = strings.ReplaceAll(s, "}, {", "},{")
			return s
		}())
		new_heap()
		insert(3)
		insert(1)
		insert(3)
		insert(7)
		fmt.Println(pop())
		fmt.Println(pop())
		fmt.Println(pop())
		fmt.Println(pop())
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
