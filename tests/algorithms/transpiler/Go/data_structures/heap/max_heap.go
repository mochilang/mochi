//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-14 21:53:12 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"strings"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	s[idx] = v
}

var heap []int

var size int

func swap_up(i int) {
	var temp int = _index(heap, i)
	_ = temp
	var idx int = i
	_ = idx
	for (idx / 2) > 0 {
		if int(_index(heap, idx)) > int(_index(heap, (idx/2))) {
			_setIndex(heap, idx, _index(heap, (idx/2)))
			_setIndex(heap, (idx / 2), temp)
		}
		idx = (idx / 2)
	}
}

func insert(value int) {
	heap = append(heap, value)
	size = (size + 1)
	swap_up(size)
}

func swap_down(i int) {
	var idx int = i
	_ = idx
	for size >= (2 * idx) {
		var bigger_child int = func() int {
			if ((2 * idx) + 1) > size {
				return (2 * idx)
			} else {
				return func() int {
					if int(_index(heap, (2*idx))) > int(_index(heap, ((2*idx)+1))) {
						return (2 * idx)
					} else {
						return ((2 * idx) + 1)
					}
				}()
			}
		}()
		_ = bigger_child
		var temp int = _index(heap, idx)
		_ = temp
		if int(_index(heap, idx)) < int(_index(heap, bigger_child)) {
			_setIndex(heap, idx, _index(heap, bigger_child))
			_setIndex(heap, bigger_child, temp)
		}
		idx = bigger_child
	}
}

func shrink() {
	var new_heap []int = []int{}
	_ = new_heap
	var i int = 0
	_ = i
	for i <= size {
		new_heap = append(new_heap, _index(heap, i))
		i = (i + 1)
	}
	heap = new_heap
}

func pop() int {
	var max_value int = _index(heap, 1)
	_ = max_value
	_ = max_value
	_setIndex(heap, 1, _index(heap, size))
	size = (size - 1)
	shrink()
	swap_down(1)
	return max_value
}

func get_list() []int {
	var out []int = []int{}
	_ = out
	var i int = 1
	_ = i
	for i <= size {
		out = append(out, _index(heap, i))
		i = (i + 1)
	}
	return out
}

func len_() int {
	return size
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		heap = []int{0}
		size = 0
		insert(6)
		insert(10)
		insert(15)
		insert(12)
		fmt.Println(pop())
		fmt.Println(pop())
		fmt.Println(func() string {
			b, _ := json.Marshal(get_list())
			s := string(b)
			s = strings.ReplaceAll(s, ":", ": ")
			s = strings.ReplaceAll(s, ",", ", ")
			s = strings.ReplaceAll(s, "}, {", "},{")
			return s
		}())
		fmt.Println(len_())
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
