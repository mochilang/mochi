//go:build ignore

// Generated by Mochi v0.10.60 on 2025-08-07 19:16:05 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

type Stack struct {
	Items []int `json:"items"`
	Limit int   `json:"limit"`
}

func make_stack(limit int) Stack {
	return Stack{
		Items: []int{},
		Limit: limit,
	}
}

func is_empty(s Stack) bool {
	return (len(s.Items) == 0)
}

func size(s Stack) int {
	return len(s.Items)
}

func is_full(s Stack) bool {
	return (len(s.Items) >= s.Limit)
}

func push(s Stack, item int) {
	if is_full(s) {
		panic("stack overflow")
	}
	s.Items = append(s.Items, item)
}

func pop(s Stack) int {
	if is_empty(s) {
		panic("stack underflow")
	}
	var n int = len(s.Items)
	_ = n
	var val int = s.Items[(n - 1)]
	_ = val
	_ = val
	s.Items = s.Items[0:(n - 1)]
	return val
}

func peek(s Stack) int {
	if is_empty(s) {
		panic("peek from empty stack")
	}
	return s.Items[(len(s.Items) - 1)]
}

func contains(s Stack, item int) bool {
	var i int = 0
	_ = i
	for i < len(s.Items) {
		if int(s.Items[i]) == item {
			return true
		}
		i = (i + 1)
	}
	return false
}

func stack_repr(s Stack) string {
	return fmt.Sprint(s.Items)
}

func mochiMain() {
	var s Stack = make_stack(5)
	_ = s
	fmt.Println(fmt.Sprint(is_empty(s)))
	push(s, 0)
	push(s, 1)
	push(s, 2)
	fmt.Println(fmt.Sprint(peek(s)))
	fmt.Println(fmt.Sprint(size(s)))
	fmt.Println(fmt.Sprint(is_full(s)))
	push(s, 3)
	push(s, 4)
	fmt.Println(fmt.Sprint(is_full(s)))
	fmt.Println(stack_repr(s))
	fmt.Println(fmt.Sprint(pop(s)))
	fmt.Println(fmt.Sprint(peek(s)))
	fmt.Println(fmt.Sprint(contains(s, 1)))
	fmt.Println(fmt.Sprint(contains(s, 9)))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
