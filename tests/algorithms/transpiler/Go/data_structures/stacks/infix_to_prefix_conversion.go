//go:build ignore

// Generated by Mochi v0.10.60 on 2025-08-07 19:07:43 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

var PRIORITY map[string]int

var LETTERS string

var DIGITS string

func is_alpha(ch string) bool {
	var i int = 0
	_ = i
	for i < len(LETTERS) {
		if string([]rune(LETTERS)[i]) == ch {
			return true
		}
		i = (i + 1)
	}
	return false
}

func is_digit(ch string) bool {
	var i int = 0
	_ = i
	for i < len(DIGITS) {
		if string([]rune(DIGITS)[i]) == ch {
			return true
		}
		i = (i + 1)
	}
	return false
}

func reverse_string(s string) string {
	var out string = ""
	_ = out
	var i int = (len(s) - 1)
	_ = i
	for i >= 0 {
		out = (out + string([]rune(s)[i]))
		i = (i - 1)
	}
	return out
}

func infix_to_postfix(infix string) string {
	var stack []string = []string{}
	_ = stack
	var post []string = []string{}
	_ = post
	var i int = 0
	_ = i
	for i < len(infix) {
		var x string = string([]rune(infix)[i])
		_ = x
		if is_alpha(x) || is_digit(x) {
			post = append(post, x)
		} else {
			if x == "(" {
				stack = append(stack, x)
			} else {
				if x == ")" {
					if len(stack) == 0 {
						panic("list index out of range")
					}
					for stack[(len(stack)-1)] != "(" {
						post = append(post, stack[(len(stack)-1)])
						stack = stack[0:(len(stack) - 1)]
					}
					stack = stack[0:(len(stack) - 1)]
				} else {
					if len(stack) == 0 {
						stack = append(stack, x)
					} else {
						for ((len(stack) > 0) && (stack[(len(stack)-1)] != "(")) && (int(PRIORITY[x]) <= int(PRIORITY[stack[(len(stack)-1)]])) {
							post = append(post, stack[(len(stack)-1)])
							stack = stack[0:(len(stack) - 1)]
						}
						stack = append(stack, x)
					}
				}
			}
		}
		i = (i + 1)
	}
	for len(stack) > 0 {
		if stack[(len(stack)-1)] == "(" {
			panic("invalid expression")
		}
		post = append(post, stack[(len(stack)-1)])
		stack = stack[0:(len(stack) - 1)]
	}
	var res string = ""
	_ = res
	var j int = 0
	_ = j
	for j < len(post) {
		res = (res + post[j])
		j = (j + 1)
	}
	return res
}

func infix_to_prefix(infix string) string {
	var reversed string = ""
	_ = reversed
	var i int = (len(infix) - 1)
	_ = i
	for i >= 0 {
		var ch string = string([]rune(infix)[i])
		_ = ch
		if ch == "(" {
			reversed = (reversed + ")")
		} else {
			if ch == ")" {
				reversed = (reversed + "(")
			} else {
				reversed = (reversed + ch)
			}
		}
		i = (i - 1)
	}
	var postfix string = infix_to_postfix(reversed)
	_ = postfix
	var prefix string = reverse_string(postfix)
	_ = prefix
	_ = prefix
	return prefix
}

var __mochi_test_header_printed bool

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		PRIORITY = map[string]int{"^": 3, "*": 2, "/": 2, "%": 2, "+": 1, "-": 1}
		LETTERS = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
		DIGITS = "0123456789"
		if !__mochi_test_header_printed {
			fmt.Println("[94;1mtests/github/TheAlgorithms/Mochi/data_structures/stacks/infix_to_prefix_conversion.mochi[0;22m")
			__mochi_test_header_printed = true
		}
		func() {
			func() {
				defer func() { recover() }()
				_ = (infix_to_prefix("a+b^c") == "+a^bc")
			}()
			fmt.Printf("   \x1b[33mtest\x1b[0m %s                   ... \x1b[32mok\x1b[0m (1.0ms)\n", "simple expression")
		}()

		if !__mochi_test_header_printed {
			fmt.Println("[94;1mtests/github/TheAlgorithms/Mochi/data_structures/stacks/infix_to_prefix_conversion.mochi[0;22m")
			__mochi_test_header_printed = true
		}
		func() {
			func() {
				defer func() { recover() }()
				_ = (infix_to_prefix("1*((-a)*2+b)") == "*1+*-a2b")
			}()
			fmt.Printf("   \x1b[33mtest\x1b[0m %s                   ... \x1b[32mok\x1b[0m (1.0ms)\n", "complex expression")
		}()

		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
