//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-14 22:00:48 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

func is_digit(ch string) bool {
	return ((((((((((ch == "0") || (ch == "1")) || (ch == "2")) || (ch == "3")) || (ch == "4")) || (ch == "5")) || (ch == "6")) || (ch == "7")) || (ch == "8")) || (ch == "9"))
}

func slice_without_last_int(xs []int) []int {
	var res []int = []int{}
	_ = res
	var i int = 0
	_ = i
	for i < (len(xs) - 1) {
		res = append(res, _index(xs, i))
		i = (i + 1)
	}
	return res
}

func slice_without_last_string(xs []string) []string {
	var res []string = []string{}
	_ = res
	var i int = 0
	_ = i
	for i < (len(xs) - 1) {
		res = append(res, _index(xs, i))
		i = (i + 1)
	}
	return res
}

func dijkstras_two_stack_algorithm(equation string) int {
	var operand_stack []int = []int{}
	_ = operand_stack
	var operator_stack []string = []string{}
	_ = operator_stack
	var idx int = 0
	_ = idx
	for idx < len(equation) {
		var ch string = _substr(equation, idx, (idx + 1))
		_ = ch
		if is_digit(ch) {
			operand_stack = append(operand_stack, func() int { n, _ := strconv.Atoi(fmt.Sprint(ch)); return n }())
		} else {
			if (((ch == "+") || (ch == "-")) || (ch == "*")) || (ch == "/") {
				operator_stack = append(operator_stack, ch)
			} else {
				if ch == ")" {
					var opr string = _index(operator_stack, (len(operator_stack) - 1))
					_ = opr
					_ = opr
					operator_stack = slice_without_last_string(func(v any) []string {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]string); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []string{}
							}
							out := make([]string, len(arr))
							for i, x := range arr {
								out[i] = fmt.Sprint(x)
							}
							return out
						}
						return v.([]string)
					}(operator_stack))
					var num1 int = _index(operand_stack, (len(operand_stack) - 1))
					_ = num1
					_ = num1
					operand_stack = slice_without_last_int(func(v any) []int {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]int); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []int{}
							}
							out := make([]int, len(arr))
							for i, x := range arr {
								out[i] = x.(int)
							}
							return out
						}
						return v.([]int)
					}(operand_stack))
					var num2 int = _index(operand_stack, (len(operand_stack) - 1))
					_ = num2
					_ = num2
					operand_stack = slice_without_last_int(func(v any) []int {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]int); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []int{}
							}
							out := make([]int, len(arr))
							for i, x := range arr {
								out[i] = x.(int)
							}
							return out
						}
						return v.([]int)
					}(operand_stack))
					var total int = func() int {
						if opr == "+" {
							return (num2 + num1)
						} else {
							return func() int {
								if opr == "-" {
									return (num2 - num1)
								} else {
									return func() int {
										if opr == "*" {
											return (num2 * num1)
										} else {
											return (num2 / num1)
										}
									}()
								}
							}()
						}
					}()
					_ = total
					operand_stack = append(operand_stack, total)
				}
			}
		}
		idx = (idx + 1)
	}
	return _index(operand_stack, (len(operand_stack) - 1))
}

var equation string

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		equation = "(5 + ((4 * 2) * (2 + 3)))"
		fmt.Println(((equation + " = ") + fmt.Sprint(dijkstras_two_stack_algorithm(equation))))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
