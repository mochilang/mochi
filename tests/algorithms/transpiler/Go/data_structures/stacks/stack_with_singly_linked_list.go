//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-14 22:01:10 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

type Node struct {
	Value string `json:"value"`
	Next  int    `json:"next"`
}

type Stack struct {
	Nodes []Node `json:"nodes"`
	Top   int    `json:"top"`
}

func empty_stack() Stack {
	return Stack{
		Nodes: []Node{},
		Top:   (0 - 1),
	}
}

func is_empty(stack Stack) bool {
	return (stack.Top == (0 - 1))
}

func push(stack Stack, item string) Stack {
	var new_node Node = Node{
		Value: item,
		Next:  stack.Top,
	}
	_ = new_node
	var new_nodes []Node = stack.Nodes
	_ = new_nodes
	new_nodes = append(new_nodes, new_node)
	var new_top int = (len(new_nodes) - 1)
	_ = new_top
	_ = new_top
	return Stack{
		Nodes: new_nodes,
		Top:   new_top,
	}
}

type PopResult struct {
	Stack Stack  `json:"stack"`
	Value string `json:"value"`
}

func pop(stack Stack) PopResult {
	if stack.Top == (0 - 1) {
		panic("pop from empty stack")
	}
	var node Node = _index(stack.Nodes, stack.Top)
	_ = node
	var new_top int = node.Next
	_ = new_top
	var new_stack Stack = Stack{
		Nodes: stack.Nodes,
		Top:   new_top,
	}
	_ = new_stack
	_ = new_stack
	return PopResult{
		Stack: new_stack,
		Value: node.Value,
	}
}

func peek(stack Stack) string {
	if stack.Top == (0 - 1) {
		panic("peek from empty stack")
	}
	var node Node = _index(stack.Nodes, stack.Top)
	_ = node
	_ = node
	return node.Value
}

func clear(stack Stack) Stack {
	return Stack{
		Nodes: []Node{},
		Top:   (0 - 1),
	}
}

func mochiMain() {
	var stack Stack = empty_stack()
	_ = stack
	fmt.Println(is_empty(stack))
	stack = push(stack, "5")
	stack = push(stack, "9")
	stack = push(stack, "python")
	fmt.Println(is_empty(stack))
	var res PopResult = pop(stack)
	_ = res
	stack = res.Stack
	fmt.Println(res.Value)
	stack = push(stack, "algorithms")
	res = pop(stack)
	stack = res.Stack
	fmt.Println(res.Value)
	res = pop(stack)
	stack = res.Stack
	fmt.Println(res.Value)
	res = pop(stack)
	stack = res.Stack
	fmt.Println(res.Value)
	fmt.Println(is_empty(stack))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
