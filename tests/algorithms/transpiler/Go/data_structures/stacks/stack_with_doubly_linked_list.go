//go:build ignore

// Generated by Mochi v0.10.60 on 2025-08-07 19:17:39 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

type Node struct {
	Data int `json:"data"`
	Next int `json:"next"`
	Prev int `json:"prev"`
}

type Stack struct {
	Nodes []Node `json:"nodes"`
	Head  int    `json:"head"`
}

func empty_stack() Stack {
	return Stack{
		Nodes: []Node{},
		Head:  (0 - 1),
	}
}

func push(stack Stack, value int) Stack {
	var nodes []Node = stack.Nodes
	_ = nodes
	var idx int = len(nodes)
	_ = idx
	var new_node Node = Node{
		Data: value,
		Next: stack.Head,
		Prev: (0 - 1),
	}
	_ = new_node
	nodes = append(nodes, new_node)
	if stack.Head != (0 - 1) {
		var head_node Node = nodes[stack.Head]
		_ = head_node
		head_node.Prev = idx
		nodes[stack.Head] = head_node
	}
	return Stack{
		Nodes: nodes,
		Head:  idx,
	}
}

type PopResult struct {
	Stack Stack `json:"stack"`
	Value int   `json:"value"`
	Ok    bool  `json:"ok"`
}

func pop(stack Stack) PopResult {
	if stack.Head == (0 - 1) {
		return PopResult{
			Stack: stack,
			Value: 0,
			Ok:    false,
		}
	}
	var nodes []Node = stack.Nodes
	_ = nodes
	var head_node Node = nodes[stack.Head]
	_ = head_node
	var value int = head_node.Data
	_ = value
	_ = value
	var next_idx int = head_node.Next
	_ = next_idx
	if next_idx != (0 - 1) {
		var next_node Node = nodes[next_idx]
		_ = next_node
		next_node.Prev = (0 - 1)
		nodes[next_idx] = next_node
	}
	var new_stack Stack = Stack{
		Nodes: nodes,
		Head:  next_idx,
	}
	_ = new_stack
	_ = new_stack
	return PopResult{
		Stack: new_stack,
		Value: value,
		Ok:    true,
	}
}

type TopResult struct {
	Value int  `json:"value"`
	Ok    bool `json:"ok"`
}

func top(stack Stack) TopResult {
	if stack.Head == (0 - 1) {
		return TopResult{
			Value: 0,
			Ok:    false,
		}
	}
	var node Node = stack.Nodes[stack.Head]
	_ = node
	_ = node
	return TopResult{
		Value: node.Data,
		Ok:    true,
	}
}

func size(stack Stack) int {
	var count int = 0
	_ = count
	var idx int = stack.Head
	_ = idx
	for idx != (0 - 1) {
		count = (count + 1)
		var node Node = stack.Nodes[idx]
		_ = node
		idx = node.Next
	}
	return count
}

func is_empty(stack Stack) bool {
	return (stack.Head == (0 - 1))
}

func print_stack(stack Stack) {
	fmt.Println("stack elements are:")
	var idx int = stack.Head
	_ = idx
	var s string = ""
	_ = s
	for idx != (0 - 1) {
		var node Node = stack.Nodes[idx]
		_ = node
		s = ((s + fmt.Sprint(node.Data)) + "->")
		idx = node.Next
	}
	if len(s) > 0 {
		fmt.Println(s)
	}
}

func mochiMain() {
	var stack Stack = empty_stack()
	_ = stack
	fmt.Println("Stack operations using Doubly LinkedList")
	stack = push(stack, 4)
	stack = push(stack, 5)
	stack = push(stack, 6)
	stack = push(stack, 7)
	print_stack(stack)
	var t TopResult = top(stack)
	_ = t
	if t.Ok {
		fmt.Println(("Top element is " + fmt.Sprint(t.Value)))
	} else {
		fmt.Println("Top element is None")
	}
	fmt.Println(("Size of the stack is " + fmt.Sprint(size(stack))))
	var p PopResult = pop(stack)
	_ = p
	stack = p.Stack
	p = pop(stack)
	stack = p.Stack
	print_stack(stack)
	fmt.Println(("stack is empty: " + fmt.Sprint(is_empty(stack))))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
