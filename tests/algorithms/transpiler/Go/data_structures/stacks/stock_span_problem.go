//go:build ignore

// Generated by Mochi v0.10.60 on 2025-08-07 19:17:41 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _slice[T any](s []T, start, end int) []T {
	if start < 0 {
		start = 0
	}
	if end > len(s) {
		end = len(s)
	}
	if start > len(s) {
		start = len(s)
	}
	if end < start {
		end = start
	}
	return s[start:end]
}

func calculation_span(price []int) []int {
	var n int = len(price)
	_ = n
	var st []int = []int{}
	_ = st
	var span []int = []int{}
	_ = span
	st = append(st, 0)
	span = append(span, 1)
	for i := 1; i < n; i++ {
		for (len(st) > 0) && (int(price[st[(len(st)-1)]]) <= int(price[i])) {
			st = _slice(st, 0, (len(st) - 1))
		}
		var s int = func() int {
			if len(st) <= 0 {
				return (i + 1)
			} else {
				return (i - int(st[(len(st)-1)]))
			}
		}()
		_ = s
		span = append(span, s)
		st = append(st, i)
	}
	return span
}

func print_array(arr []int) {
	for i := 0; i < len(arr); i++ {
		fmt.Println(arr[i])
	}
}

var price []int

var spans []int

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		price = []int{func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(10), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(4), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(5), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(90), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(120), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(80)}
		spans = calculation_span(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(price))
		print_array(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(spans))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
