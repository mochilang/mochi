//go:build ignore

// Generated by Mochi v0.10.60 on 2025-08-08 06:50:49 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

var arr []float64

var expected []float64

func next_greatest_element_slow(xs []float64) []float64 {
	var res []float64 = []float64{}
	_ = res
	var i int = 0
	_ = i
	for i < len(xs) {
		var next float64 = (0 - 1.0)
		_ = next
		var j int = (i + 1)
		_ = j
		for j < len(xs) {
			if xs[i] < xs[j] {
				next = xs[j]
				break
			}
			j = (j + 1)
		}
		res = append(res, next)
		i = (i + 1)
	}
	return res
}

func next_greatest_element_fast(xs []float64) []float64 {
	var res []float64 = []float64{}
	_ = res
	var i int = 0
	_ = i
	for i < len(xs) {
		var next float64 = (0 - 1.0)
		_ = next
		var j int = (i + 1)
		_ = j
		for j < len(xs) {
			var inner float64 = xs[j]
			_ = inner
			if xs[i] < inner {
				next = inner
				break
			}
			j = (j + 1)
		}
		res = append(res, next)
		i = (i + 1)
	}
	return res
}

func set_at_float(xs []float64, idx int, value float64) []float64 {
	var i int = 0
	_ = i
	var res []float64 = []float64{}
	_ = res
	for i < len(xs) {
		if i == idx {
			res = append(res, value)
		} else {
			res = append(res, xs[i])
		}
		i = (i + 1)
	}
	return res
}

func next_greatest_element(xs []float64) []float64 {
	var res []float64 = []float64{}
	_ = res
	var k int = 0
	_ = k
	for k < len(xs) {
		res = append(res, (0 - 1.0))
		k = (k + 1)
	}
	var stack []int = []int{}
	_ = stack
	var i int = 0
	_ = i
	for i < len(xs) {
		for (len(stack) > 0) && (xs[i] > xs[stack[(len(stack)-1)]]) {
			var idx int = stack[(len(stack) - 1)]
			_ = idx
			stack = stack[0:(len(stack) - 1)]
			res = set_at_float(func(v any) []float64 {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]float64); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []float64{}
					}
					out := make([]float64, len(arr))
					for i, x := range arr {
						out[i] = x.(float64)
					}
					return out
				}
				return v.([]float64)
			}(res), idx, xs[i])
		}
		stack = append(stack, i)
		i = (i + 1)
	}
	return res
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		arr = []float64{(0 - 10.0), (0 - 5.0), 0.0, 5.0, 5.1, 11.0, 13.0, 21.0, 3.0, 4.0, (0 - 21.0), (0 - 10.0), (0 - 5.0), (0 - 1.0), 0.0}
		expected = []float64{(0 - 5.0), 0.0, 5.0, 5.1, 11.0, 13.0, 21.0, (0 - 1.0), 4.0, (0 - 1.0), (0 - 10.0), (0 - 5.0), (0 - 1.0), 0.0, (0 - 1.0)}
		fmt.Println(fmt.Sprint(next_greatest_element_slow(func(v any) []float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []float64{}
				}
				out := make([]float64, len(arr))
				for i, x := range arr {
					out[i] = x.(float64)
				}
				return out
			}
			return v.([]float64)
		}(arr))))
		fmt.Println(fmt.Sprint(next_greatest_element_fast(func(v any) []float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []float64{}
				}
				out := make([]float64, len(arr))
				for i, x := range arr {
					out[i] = x.(float64)
				}
				return out
			}
			return v.([]float64)
		}(arr))))
		fmt.Println(fmt.Sprint(next_greatest_element(func(v any) []float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []float64{}
				}
				out := make([]float64, len(arr))
				for i, x := range arr {
					out[i] = x.(float64)
				}
				return out
			}
			return v.([]float64)
		}(arr))))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
