//go:build ignore

// Generated by Mochi v0.10.60 on 2025-08-08 06:50:52 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

func split_custom(s string, sep string) []string {
	var res []string = []string{}
	_ = res
	var current string = ""
	_ = current
	var i int = 0
	_ = i
	for i < len(s) {
		var ch string = _substr(s, i, (i + 1))
		_ = ch
		if ch == sep {
			res = append(res, current)
			current = ""
		} else {
			current = (current + ch)
		}
		i = (i + 1)
	}
	res = append(res, current)
	return res
}

func tokenize(s string) []string {
	var parts []string = split_custom(s, " ")
	_ = parts
	var res []string = []string{}
	_ = res
	var i int = 0
	_ = i
	for i < len(parts) {
		var p string = parts[i]
		_ = p
		if p != "" {
			res = append(res, p)
		}
		i = (i + 1)
	}
	return res
}

func is_digit(ch string) bool {
	return ((ch >= "0") && (ch <= "9"))
}

func is_operand(token string) bool {
	if token == "" {
		return false
	}
	var i int = 0
	_ = i
	for i < len(token) {
		var ch string = _substr(token, i, (i + 1))
		_ = ch
		if !is_digit(ch) {
			return false
		}
		i = (i + 1)
	}
	return true
}

func to_int(token string) int {
	var res int = 0
	_ = res
	var i int = 0
	_ = i
	for i < len(token) {
		res = ((res * 10) + func() int { n, _ := strconv.Atoi(fmt.Sprint(_substr(token, i, (i + 1)))); return n }())
		i = (i + 1)
	}
	return res
}

func apply_op(op string, a float64, b float64) float64 {
	if op == "+" {
		return (a + b)
	}
	if op == "-" {
		return (a - b)
	}
	if op == "*" {
		return (a * b)
	}
	if op == "/" {
		return (a / b)
	}
	return 0.0
}

func evaluate(expression string) float64 {
	var tokens []string = tokenize(expression)
	_ = tokens
	var stack []float64 = []float64{}
	_ = stack
	var i int = (len(tokens) - 1)
	_ = i
	for i >= 0 {
		var token string = tokens[i]
		_ = token
		if token != "" {
			if is_operand(token) {
				stack = append(stack, float64(to_int(token)))
			} else {
				var o1 float64 = stack[(len(stack) - 1)]
				_ = o1
				var o2 float64 = stack[(len(stack) - 2)]
				_ = o2
				stack = stack[0:(len(stack) - 2)]
				var res float64 = apply_op(token, o1, o2)
				_ = res
				stack = append(stack, res)
			}
		}
		i = (i - 1)
	}
	return stack[0]
}

func eval_rec(tokens []string, pos int) []float64 {
	var token string = tokens[pos]
	_ = token
	var next int = (pos + 1)
	_ = next
	if is_operand(token) {
		return []float64{float64(to_int(token)), float64(next)}
	}
	var left []float64 = eval_rec(func(v any) []string {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]string); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []string{}
			}
			out := make([]string, len(arr))
			for i, x := range arr {
				out[i] = x.(string)
			}
			return out
		}
		return v.([]string)
	}(tokens), next)
	_ = left
	var a float64 = left[0]
	_ = a
	_ = a
	var p1 int = int(left[1])
	_ = p1
	var right []float64 = eval_rec(func(v any) []string {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]string); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []string{}
			}
			out := make([]string, len(arr))
			for i, x := range arr {
				out[i] = x.(string)
			}
			return out
		}
		return v.([]string)
	}(tokens), p1)
	_ = right
	var b float64 = right[0]
	_ = b
	_ = b
	var p2 float64 = right[1]
	_ = p2
	_ = p2
	return []float64{apply_op(token, a, b), p2}
}

func evaluate_recursive(expression string) float64 {
	var tokens []string = tokenize(expression)
	_ = tokens
	var res []float64 = eval_rec(func(v any) []string {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]string); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []string{}
			}
			out := make([]string, len(arr))
			for i, x := range arr {
				out[i] = x.(string)
			}
			return out
		}
		return v.([]string)
	}(tokens), 0)
	_ = res
	_ = res
	return res[0]
}

var test_expression string

var test_expression2 string

var test_expression3 string

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		test_expression = "+ 9 * 2 6"
		fmt.Println(fmt.Sprint(evaluate(test_expression)))
		test_expression2 = "/ * 10 2 + 4 1 "
		fmt.Println(fmt.Sprint(evaluate(test_expression2)))
		test_expression3 = "+ * 2 3 / 8 4"
		fmt.Println(fmt.Sprint(evaluate_recursive(test_expression3)))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
