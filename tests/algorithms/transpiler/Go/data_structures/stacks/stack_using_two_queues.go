//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-14 22:01:06 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

type StackWithQueues struct {
	MainQueue []int `json:"main_queue"`
	TempQueue []int `json:"temp_queue"`
}

func make_stack() StackWithQueues {
	return StackWithQueues{
		MainQueue: []int{},
		TempQueue: []int{},
	}
}

func push(s *StackWithQueues, item int) {
	s.TempQueue = append(s.TempQueue, item)
	for len(s.MainQueue) > 0 {
		s.TempQueue = append(s.TempQueue, _index(s.MainQueue, 0))
		s.MainQueue = s.MainQueue[1:len(s.MainQueue)]
	}
	var new_main []int = s.TempQueue
	_ = new_main
	s.TempQueue = s.MainQueue
	s.MainQueue = new_main
}

func pop(s *StackWithQueues) int {
	if len(s.MainQueue) == 0 {
		panic("pop from empty stack")
	}
	var item int = _index(s.MainQueue, 0)
	_ = item
	_ = item
	s.MainQueue = s.MainQueue[1:len(s.MainQueue)]
	return item
}

func peek(s StackWithQueues) int {
	if len(s.MainQueue) == 0 {
		panic("peek from empty stack")
	}
	return _index(s.MainQueue, 0)
}

func is_empty(s StackWithQueues) bool {
	return (len(s.MainQueue) == 0)
}

var stack StackWithQueues

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		stack = make_stack()
		push(&stack, 1)
		push(&stack, 2)
		push(&stack, 3)
		fmt.Println(fmt.Sprint(peek(stack)))
		fmt.Println(fmt.Sprint(pop(&stack)))
		fmt.Println(fmt.Sprint(peek(stack)))
		fmt.Println(fmt.Sprint(pop(&stack)))
		fmt.Println(fmt.Sprint(pop(&stack)))
		fmt.Println(fmt.Sprint(is_empty(stack)))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
