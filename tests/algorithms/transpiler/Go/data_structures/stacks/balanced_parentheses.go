//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-14 22:00:46 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

func pop_last(xs []string) []string {
	var res []string = []string{}
	_ = res
	var i int = 0
	_ = i
	for i < (len(xs) - 1) {
		res = append(res, _index(xs, i))
		i = (i + 1)
	}
	return res
}

func balanced_parentheses(s string) bool {
	var stack []string = []string{}
	_ = stack
	var pairs map[string]string = map[string]string{"(": ")", "[": "]", "{": "}"}
	_ = pairs
	var i int = 0
	_ = i
	for i < len(s) {
		var ch string = string(_index([]rune(s), i))
		_ = ch
		if func() bool { _, ok := pairs[ch]; return ok }() {
			stack = append(stack, ch)
		} else {
			if ((ch == ")") || (ch == "]")) || (ch == "}") {
				if len(stack) == 0 {
					return false
				}
				var top string = _index(stack, (len(stack) - 1))
				_ = top
				if pairs[top] != ch {
					return false
				}
				stack = pop_last(func(v any) []string {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]string); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []string{}
						}
						out := make([]string, len(arr))
						for i, x := range arr {
							out[i] = fmt.Sprint(x)
						}
						return out
					}
					return v.([]string)
				}(stack))
			}
		}
		i = (i + 1)
	}
	return (len(stack) == 0)
}

var tests []string

var idx int

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		tests = []string{"([]{})", "[()]{}{[()()]()}", "[(])", "1+2*3-4", ""}
		idx = 0
		for idx < len(tests) {
			fmt.Println(balanced_parentheses(_index(tests, idx)))
			idx = (idx + 1)
		}
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
