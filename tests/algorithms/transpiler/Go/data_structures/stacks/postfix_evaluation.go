//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-14 22:01:00 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

func slice_without_last(xs []float64) []float64 {
	var res []float64 = []float64{}
	_ = res
	var i int = 0
	_ = i
	for i < (len(xs) - 1) {
		res = append(res, _index(xs, i))
		i = (i + 1)
	}
	return res
}

func parse_float(token string) float64 {
	var sign float64 = 1.0
	_ = sign
	var idx int = 0
	_ = idx
	if len(token) > 0 {
		var first string = _substr(token, 0, 1)
		_ = first
		if first == "-" {
			sign = (0 - 1.0)
			idx = 1
		} else {
			if first == "+" {
				idx = 1
			}
		}
	}
	var int_part int = 0
	_ = int_part
	for (idx < len(token)) && (_substr(token, idx, (idx+1)) != ".") {
		int_part = ((int_part * 10) + func() int { n, _ := strconv.Atoi(fmt.Sprint(_substr(token, idx, (idx + 1)))); return n }())
		idx = (idx + 1)
	}
	var result float64 = (1.0 * float64(int_part))
	_ = result
	if (idx < len(token)) && (_substr(token, idx, (idx+1)) == ".") {
		idx = (idx + 1)
		var place float64 = 0.1
		_ = place
		for idx < len(token) {
			var digit int = func() int { n, _ := strconv.Atoi(fmt.Sprint(_substr(token, idx, (idx + 1)))); return n }()
			_ = digit
			result = (result + (place * (1.0 * float64(digit))))
			place = (float64(place) / float64(10.0))
			idx = (idx + 1)
		}
	}
	return (sign * result)
}

func pow_float(base float64, exp float64) float64 {
	var result float64 = 1.0
	_ = result
	var i int = 0
	_ = i
	var e int = int(exp)
	_ = e
	for i < e {
		result = (result * base)
		i = (i + 1)
	}
	return result
}

func apply_op(a float64, b float64, op string) float64 {
	if op == "+" {
		return (a + b)
	}
	if op == "-" {
		return (a - b)
	}
	if op == "*" {
		return (a * b)
	}
	if op == "/" {
		return (float64(a) / float64(b))
	}
	if op == "^" {
		return pow_float(a, b)
	}
	return 0.0
}

func evaluate(tokens []string) float64 {
	if len(tokens) == 0 {
		return 0.0
	}
	var stack []float64 = []float64{}
	_ = stack
	for _, token := range tokens {
		if ((((token == "+") || (token == "-")) || (token == "*")) || (token == "/")) || (token == "^") {
			if ((token == "+") || (token == "-")) && (len(stack) < 2) {
				var b float64 = _index(stack, (len(stack) - 1))
				_ = b
				stack = slice_without_last(func(v any) []float64 {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]float64); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []float64{}
						}
						out := make([]float64, len(arr))
						for i, x := range arr {
							out[i] = x.(float64)
						}
						return out
					}
					return v.([]float64)
				}(stack))
				if token == "-" {
					stack = append(stack, (0.0 - b))
				} else {
					stack = append(stack, b)
				}
			} else {
				var b float64 = _index(stack, (len(stack) - 1))
				_ = b
				stack = slice_without_last(func(v any) []float64 {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]float64); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []float64{}
						}
						out := make([]float64, len(arr))
						for i, x := range arr {
							out[i] = x.(float64)
						}
						return out
					}
					return v.([]float64)
				}(stack))
				var a float64 = _index(stack, (len(stack) - 1))
				_ = a
				stack = slice_without_last(func(v any) []float64 {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]float64); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []float64{}
						}
						out := make([]float64, len(arr))
						for i, x := range arr {
							out[i] = x.(float64)
						}
						return out
					}
					return v.([]float64)
				}(stack))
				var result float64 = apply_op(a, b, token)
				_ = result
				stack = append(stack, result)
			}
		} else {
			stack = append(stack, parse_float(token))
		}
	}
	if len(stack) != 1 {
		panic("Invalid postfix expression")
	}
	return _index(stack, 0)
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(fmt.Sprint(evaluate(func(v any) []string {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]string); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []string{}
				}
				out := make([]string, len(arr))
				for i, x := range arr {
					out[i] = fmt.Sprint(x)
				}
				return out
			}
			return v.([]string)
		}([]string{"2", "1", "+", "3", "*"}))))
		fmt.Println(fmt.Sprint(evaluate(func(v any) []string {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]string); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []string{}
				}
				out := make([]string, len(arr))
				for i, x := range arr {
					out[i] = fmt.Sprint(x)
				}
				return out
			}
			return v.([]string)
		}([]string{"4", "13", "5", "/", "+"}))))
		fmt.Println(fmt.Sprint(evaluate(func(v any) []string {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]string); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []string{}
				}
				out := make([]string, len(arr))
				for i, x := range arr {
					out[i] = fmt.Sprint(x)
				}
				return out
			}
			return v.([]string)
		}([]string{"5", "6", "9", "*", "+"}))))
		fmt.Println(fmt.Sprint(evaluate(func(v any) []string {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]string); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []string{}
				}
				out := make([]string, len(arr))
				for i, x := range arr {
					out[i] = fmt.Sprint(x)
				}
				return out
			}
			return v.([]string)
		}([]string{"2", "-", "3", "+"}))))
		fmt.Println(fmt.Sprint(evaluate(func(v any) []string {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]string); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []string{}
				}
				out := make([]string, len(arr))
				for i, x := range arr {
					out[i] = fmt.Sprint(x)
				}
				return out
			}
			return v.([]string)
		}([]string{}))))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
