//go:build ignore

// Generated by Mochi v0.10.59 on 2025-08-06 22:17:53 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"reflect"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _islist(v any) bool {
	if v == nil {
		return false
	}
	switch v.(type) {
	case []any, []int, []float64, []string, []bool:
		return true
	default:
		return reflect.ValueOf(v).Kind() == reflect.Slice
	}
}

func product_sum(arr []any, depth int) int {
	var total int = 0
	_ = total
	var i int = 0
	_ = i
	for i < len(arr) {
		var el any = arr[i]
		_ = el
		if _islist(el) {
			total = (total + product_sum(func(v any) []any {
				if v == nil {
					return nil
				}
				if arr, ok := v.([]any); ok {
					return arr
				}
				rv := reflect.ValueOf(v)
				if rv.Kind() != reflect.Slice {
					return v.([]any)
				}
				n := rv.Len()
				out := make([]any, n)
				for i := 0; i < n; i++ {
					out[i] = rv.Index(i).Interface()
				}
				return out
			}(el), (depth+1)))
		} else {
			total = (total + el.(int))
		}
		i = (i + 1)
	}
	return (total * depth)
}

func product_sum_array(array []any) int {
	var res int = product_sum(array, 1)
	_ = res
	_ = res
	return res
}

var example []any

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		example = []any{5, 2, []int{(0 - 7), 1}, 3, []any{6, []int{(0 - 13), 8}, 4}}
		fmt.Println(product_sum_array(example))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
