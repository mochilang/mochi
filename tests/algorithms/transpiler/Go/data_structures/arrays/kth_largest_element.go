//go:build ignore

// Generated by Mochi v0.10.59 on 2025-08-06 22:09:13 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func partition(arr []int, low int, high int) int {
	var pivot int = arr[high]
	_ = pivot
	var i int = (low - 1)
	_ = i
	var j int = low
	_ = j
	for j < high {
		if arr[j] >= pivot {
			i = (i + 1)
			var tmp int = arr[i]
			_ = tmp
			arr[i] = arr[j]
			arr[j] = tmp
		}
		j = (j + 1)
	}
	var k int = (i + 1)
	_ = k
	var tmp int = arr[k]
	_ = tmp
	arr[k] = arr[high]
	arr[high] = tmp
	return k
}

func kth_largest_element(arr []int, position int) int {
	if len(arr) == 0 {
		return (0 - 1)
	}
	if (position < 1) || (position > len(arr)) {
		return (0 - 1)
	}
	var low int = 0
	_ = low
	var high int = (len(arr) - 1)
	_ = high
	for low <= high {
		if (low > (len(arr) - 1)) || (high < 0) {
			return (0 - 1)
		}
		var pivot_index int = partition(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(arr), low, high)
		_ = pivot_index
		if pivot_index == (position - 1) {
			return arr[pivot_index]
		} else {
			if pivot_index > (position - 1) {
				high = (pivot_index - 1)
			} else {
				low = (pivot_index + 1)
			}
		}
	}
	return (0 - 1)
}

var arr1 []int

var arr2 []int

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		arr1 = []int{3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5}
		fmt.Println(kth_largest_element(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(arr1), 3))
		fmt.Println("\n")
		arr2 = []int{2, 5, 6, 1, 9, 3, 8, 4, 7, 3, 5}
		fmt.Println(kth_largest_element(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(arr2), 1))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
