//go:build ignore

// Generated by Mochi v0.10.59 on 2025-08-06 22:10:46 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

type PrefixSum struct {
	PrefixSum []int `json:"prefix_sum"`
}

func make_prefix_sum(arr []int) PrefixSum {
	var prefix []int = []int{}
	_ = prefix
	var running int = 0
	_ = running
	var i int = 0
	_ = i
	for i < len(arr) {
		running = (running + arr[i])
		prefix = append(prefix, running)
		i = (i + 1)
	}
	return PrefixSum{
		PrefixSum: prefix,
	}
}

func get_sum(ps PrefixSum, start int, end int) int {
	var prefix []int = ps.PrefixSum
	_ = prefix
	if len(prefix) == 0 {
		panic("The array is empty.")
	}
	if ((start < 0) || (end >= len(prefix))) || (start > end) {
		panic("Invalid range specified.")
	}
	if start == 0 {
		return prefix[end]
	}
	return (prefix[end] - prefix[(start-1)])
}

func contains_sum(ps PrefixSum, target_sum int) bool {
	var prefix []int = ps.PrefixSum
	_ = prefix
	var sums []int = []int{0}
	_ = sums
	var i int = 0
	_ = i
	for i < len(prefix) {
		var sum_item int = prefix[i]
		_ = sum_item
		var j int = 0
		_ = j
		for j < len(sums) {
			if sums[j] == (sum_item - target_sum) {
				return true
			}
			j = (j + 1)
		}
		sums = append(sums, sum_item)
		i = (i + 1)
	}
	return false
}

var ps PrefixSum

var ps2 PrefixSum

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		ps = make_prefix_sum(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}([]int{1, 2, 3}))
		fmt.Println(fmt.Sprint(get_sum(ps, 0, 2)))
		fmt.Println(fmt.Sprint(get_sum(ps, 1, 2)))
		fmt.Println(fmt.Sprint(get_sum(ps, 2, 2)))
		fmt.Println(fmt.Sprint(contains_sum(ps, 6)))
		fmt.Println(fmt.Sprint(contains_sum(ps, 5)))
		fmt.Println(fmt.Sprint(contains_sum(ps, 3)))
		fmt.Println(fmt.Sprint(contains_sum(ps, 4)))
		fmt.Println(fmt.Sprint(contains_sum(ps, 7)))
		ps2 = make_prefix_sum(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}([]int{1, (0 - 2), 3}))
		fmt.Println(fmt.Sprint(contains_sum(ps2, 2)))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
