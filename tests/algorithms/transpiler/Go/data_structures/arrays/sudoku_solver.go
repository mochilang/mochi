//go:build ignore

// Generated by Mochi v0.10.59 on 2025-08-06 22:18:08 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _mod(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

func string_to_grid(s string) [][]int {
	var grid [][]int = [][]int{}
	_ = grid
	var i int = 0
	_ = i
	for i < 9 {
		var row []int = []int{}
		_ = row
		var j int = 0
		_ = j
		for j < 9 {
			var ch string = _substr(s, ((i * 9) + j), (((i * 9) + j) + 1))
			_ = ch
			var val int = 0
			_ = val
			if (ch != "0") && (ch != ".") {
				val = func() int { n, _ := strconv.Atoi(ch); return n }()
			}
			row = append(row, val)
			j = (j + 1)
		}
		grid = append(grid, row)
		i = (i + 1)
	}
	return grid
}

func print_grid(grid [][]int) {
	for r := 0; r < 9; r++ {
		var line string = ""
		_ = line
		for c := 0; c < 9; c++ {
			line = (line + fmt.Sprint(grid[r][c]))
			if c < 8 {
				line = (line + " ")
			}
		}
		fmt.Println(line)
	}
}

func is_safe(grid [][]int, row int, column int, n int) bool {
	for i := 0; i < 9; i++ {
		if (grid[row][i] == n) || (grid[i][column] == n) {
			return false
		}
	}
	for i := 0; i < 3; i++ {
		for j := 0; j < 3; j++ {
			if grid[((row - _mod(row, 3)) + i)][((column-_mod(column, 3))+j)] == n {
				return false
			}
		}
	}
	return true
}

func find_empty(grid [][]int) []int {
	for i := 0; i < 9; i++ {
		for j := 0; j < 9; j++ {
			if grid[i][j] == 0 {
				return []int{i, j}
			}
		}
	}
	return func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}([]int{})
}

func solve(grid [][]int) bool {
	var loc []int = find_empty(func(v any) [][]int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]int{}
			}
			out := make([][]int, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []int {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]int); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []int{}
						}
						out := make([]int, len(arr))
						for i, x := range arr {
							out[i] = x.(int)
						}
						return out
					}
					return v.([]int)
				}(x)
			}
			return out
		}
		return v.([][]int)
	}(grid))
	_ = loc
	if len(loc) == 0 {
		return true
	}
	var row int = loc[0]
	_ = row
	var column int = loc[1]
	_ = column
	for digit := 1; digit < 10; digit++ {
		if is_safe(func(v any) [][]int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]int{}
				}
				out := make([][]int, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []int {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]int); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []int{}
							}
							out := make([]int, len(arr))
							for i, x := range arr {
								out[i] = x.(int)
							}
							return out
						}
						return v.([]int)
					}(x)
				}
				return out
			}
			return v.([][]int)
		}(grid), row, column, digit) {
			grid[row][column] = digit
			if solve(func(v any) [][]int {
				if v == nil {
					return nil
				}
				if vv, ok := v.([][]int); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return [][]int{}
					}
					out := make([][]int, len(arr))
					for i, x := range arr {
						out[i] = func(v any) []int {
							if v == nil {
								return nil
							}
							if vv, ok := v.([]int); ok {
								return vv
							}
							if arr, ok := v.([]any); ok {
								if len(arr) == 0 {
									return []int{}
								}
								out := make([]int, len(arr))
								for i, x := range arr {
									out[i] = x.(int)
								}
								return out
							}
							return v.([]int)
						}(x)
					}
					return out
				}
				return v.([][]int)
			}(grid)) {
				return true
			}
			grid[row][column] = 0
		}
	}
	return false
}

var puzzle string

var grid [][]int

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		puzzle = "003020600900305001001806400008102900700000008006708200002609500800203009005010300"
		grid = string_to_grid(puzzle)
		fmt.Println("Original grid:")
		print_grid(func(v any) [][]int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]int{}
				}
				out := make([][]int, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []int {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]int); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []int{}
							}
							out := make([]int, len(arr))
							for i, x := range arr {
								out[i] = x.(int)
							}
							return out
						}
						return v.([]int)
					}(x)
				}
				return out
			}
			return v.([][]int)
		}(grid))
		if solve(func(v any) [][]int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]int{}
				}
				out := make([][]int, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []int {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]int); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []int{}
							}
							out := make([]int, len(arr))
							for i, x := range arr {
								out[i] = x.(int)
							}
							return out
						}
						return v.([]int)
					}(x)
				}
				return out
			}
			return v.([][]int)
		}(grid)) {
			fmt.Println("\nSolved grid:")
			print_grid(func(v any) [][]int {
				if v == nil {
					return nil
				}
				if vv, ok := v.([][]int); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return [][]int{}
					}
					out := make([][]int, len(arr))
					for i, x := range arr {
						out[i] = func(v any) []int {
							if v == nil {
								return nil
							}
							if vv, ok := v.([]int); ok {
								return vv
							}
							if arr, ok := v.([]any); ok {
								if len(arr) == 0 {
									return []int{}
								}
								out := make([]int, len(arr))
								for i, x := range arr {
									out[i] = x.(int)
								}
								return out
							}
							return v.([]int)
						}(x)
					}
					return out
				}
				return v.([][]int)
			}(grid))
		} else {
			fmt.Println("\nNo solution found")
		}
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
