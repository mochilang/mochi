//go:build ignore

// Generated by Mochi v0.10.61 on 2025-08-08 16:43:39 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	s[idx] = v
}

func _toFloat(v any) float64 {
	switch t := v.(type) {
	case int:
		return float64(t)
	case int64:
		return float64(t)
	case float64:
		return t
	default:
		return 0
	}
}

type DisjointSet struct {
	SetCounts []int `json:"set_counts"`
	MaxSet    int   `json:"max_set"`
	Ranks     []int `json:"ranks"`
	Parents   []int `json:"parents"`
}

func max_list(xs []int) int {
	var m int = _index(xs, 0)
	_ = m
	var i int = 1
	_ = i
	for i < len(xs) {
		if int(_index(xs, i)) > m {
			m = _index(xs, i)
		}
		i = (i + 1)
	}
	return m
}

func disjoint_set_new(set_counts []int) DisjointSet {
	max_set := max_list(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(set_counts))
	_ = max_set
	_ = max_set
	num_sets := len(set_counts)
	_ = num_sets
	var ranks []int = []int{}
	_ = ranks
	var parents []int = []int{}
	_ = parents
	var i int = 0
	_ = i
	for i < num_sets {
		ranks = append(ranks, 1)
		parents = append(parents, i)
		i = (i + 1)
	}
	return DisjointSet{
		SetCounts: set_counts,
		MaxSet:    max_set,
		Ranks:     ranks,
		Parents:   parents,
	}
}

func get_parent(ds DisjointSet, idx int) int {
	if int(_index(ds.Parents, idx)) == idx {
		return idx
	}
	var parents []int = ds.Parents
	_ = parents
	_setIndex(parents, idx, get_parent(ds, _index(parents, idx)))
	ds.Parents = parents
	return _index(ds.Parents, idx)
}

func merge(ds DisjointSet, src int, dst int) bool {
	src_parent := get_parent(ds, src)
	_ = src_parent
	dst_parent := get_parent(ds, dst)
	_ = dst_parent
	if _toFloat(src_parent) == _toFloat(dst_parent) {
		return false
	}
	if int(_index(ds.Ranks, dst_parent)) >= int(_index(ds.Ranks, src_parent)) {
		var counts []int = ds.SetCounts
		_ = counts
		_setIndex(counts, dst_parent, (int(_index(counts, dst_parent)) + int(_index(counts, src_parent))))
		_setIndex(counts, src_parent, 0)
		ds.SetCounts = counts
		var parents []int = ds.Parents
		_ = parents
		_setIndex(parents, src_parent, dst_parent)
		ds.Parents = parents
		if int(_index(ds.Ranks, dst_parent)) == int(_index(ds.Ranks, src_parent)) {
			var ranks []int = ds.Ranks
			_ = ranks
			_setIndex(ranks, dst_parent, (int(_index(ranks, dst_parent)) + 1))
			ds.Ranks = ranks
		}
		var joined int = _index(ds.SetCounts, dst_parent)
		_ = joined
		if joined > ds.MaxSet {
			ds.MaxSet = joined
		}
	} else {
		var counts []int = ds.SetCounts
		_ = counts
		_setIndex(counts, src_parent, (int(_index(counts, src_parent)) + int(_index(counts, dst_parent))))
		_setIndex(counts, dst_parent, 0)
		ds.SetCounts = counts
		var parents []int = ds.Parents
		_ = parents
		_setIndex(parents, dst_parent, src_parent)
		ds.Parents = parents
		var joined int = _index(ds.SetCounts, src_parent)
		_ = joined
		if joined > ds.MaxSet {
			ds.MaxSet = joined
		}
	}
	return true
}

var ds DisjointSet

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		ds = disjoint_set_new(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}([]int{func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(1), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(1), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(1)}))
		fmt.Println(merge(ds, 1, 2))
		fmt.Println(merge(ds, 0, 2))
		fmt.Println(merge(ds, 0, 1))
		fmt.Println(get_parent(ds, 0))
		fmt.Println(get_parent(ds, 1))
		fmt.Println(ds.MaxSet)
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
