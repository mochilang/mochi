//go:build ignore

// Generated by Mochi v0.10.63 on 2025-08-11 14:52:11 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	s[idx] = v
}

func _toFloat(v any) float64 {
	switch t := v.(type) {
	case int:
		return float64(t)
	case int64:
		return float64(t)
	case float64:
		return t
	default:
		return 0
	}
}

type DS struct {
	Parent []int `json:"parent"`
	Rank   []int `json:"rank"`
}

type FindResult struct {
	Ds   DS  `json:"ds"`
	Root int `json:"root"`
}

func make_set(ds DS, x int) DS {
	var p []int = ds.Parent
	_ = p
	var r []int = ds.Rank
	_ = r
	_setIndex(p, x, x)
	_setIndex(r, x, 0)
	return DS{
		Parent: p,
		Rank:   r,
	}
}

func find_set(ds DS, x int) FindResult {
	if int(_index(ds.Parent, x)) == x {
		return FindResult{
			Ds:   ds,
			Root: x,
		}
	}
	res := find_set(ds, _index(ds.Parent, x))
	_ = res
	p := FindResult(res).Ds.Parent
	_ = p
	p[x] = FindResult(res).Root
	return FindResult{
		Ds: DS{
			Parent: p,
			Rank:   FindResult(res).Ds.Rank,
		},
		Root: FindResult(res).Root,
	}
}

func union_set(ds DS, x int, y int) DS {
	fx := find_set(ds, x)
	_ = fx
	ds1 := FindResult(fx).Ds
	_ = ds1
	x_root := FindResult(fx).Root
	_ = x_root
	fy := find_set(DS(ds1), y)
	_ = fy
	ds2 := FindResult(fy).Ds
	_ = ds2
	y_root := FindResult(fy).Root
	_ = y_root
	if _toFloat(x_root) == _toFloat(y_root) {
		return DS(ds2)
	}
	p := DS(ds2).Parent
	_ = p
	r := DS(ds2).Rank
	_ = r
	if _toFloat(_index(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(r), x_root)) > _toFloat(_index(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(r), y_root)) {
		p[y_root] = x_root
	} else {
		p[x_root] = y_root
		if _toFloat(_index(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(r), x_root)) == _toFloat(_index(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(r), y_root)) {
			r[y_root] = (int(_index(func(v any) []int {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]int); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []int{}
					}
					out := make([]int, len(arr))
					for i, x := range arr {
						out[i] = x.(int)
					}
					return out
				}
				return v.([]int)
			}(r), y_root)) + 1)
		}
	}
	return DS{
		Parent: p,
		Rank:   r,
	}
}

func same_python_set(a int, b int) bool {
	if (a < 3) && (b < 3) {
		return true
	}
	if (((a >= 3) && (a < 6)) && (b >= 3)) && (b < 6) {
		return true
	}
	return false
}

var ds DS

var i int

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		ds = DS{
			Parent: []int{},
			Rank:   []int{},
		}
		i = 0
		for i < 6 {
			ds.Parent = append(ds.Parent, 0)
			ds.Rank = append(ds.Rank, 0)
			ds = make_set(ds, i)
			i = (i + 1)
		}
		ds = union_set(ds, 0, 1)
		ds = union_set(ds, 1, 2)
		ds = union_set(ds, 3, 4)
		ds = union_set(ds, 3, 5)
		i = 0
		for i < 6 {
			var j int = 0
			_ = j
			for j < 6 {
				res_i := find_set(ds, i)
				_ = res_i
				ds = FindResult(res_i).Ds
				root_i := FindResult(res_i).Root
				_ = root_i
				res_j := find_set(ds, j)
				_ = res_j
				ds = FindResult(res_j).Ds
				root_j := FindResult(res_j).Root
				_ = root_j
				same := same_python_set(i, j)
				_ = same
				root_same := (_toFloat(root_i) == _toFloat(root_j))
				_ = root_same
				if bool(same) {
					if !bool(root_same) {
						panic("nodes should be in same set")
					}
				} else {
					if bool(root_same) {
						panic("nodes should be in different sets")
					}
				}
				j = (j + 1)
			}
			i = (i + 1)
		}
		i = 0
		for i < 6 {
			res := find_set(ds, i)
			_ = res
			ds = FindResult(res).Ds
			fmt.Println(fmt.Sprint(FindResult(res).Root))
			i = (i + 1)
		}
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
