//go:build ignore

// Generated by Mochi v0.10.72 on 2025-08-24 17:03:24 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		return
	}
	s[idx] = v
}

var __name__ string = "__main__"

type DS struct {
	Parent []int `json:"parent"`
	Rank   []int `json:"rank"`
}

type FindResult struct {
	Ds   DS  `json:"ds"`
	Root int `json:"root"`
}

func make_set(ds DS, x int) DS {
	var p []int = ds.Parent
	_ = p
	var r []int = ds.Rank
	_ = r
	_setIndex(p, x, x)
	_setIndex(r, x, 0)
	return DS{
		Parent: p,
		Rank:   r,
	}
}

func find_set(ds DS, x int) FindResult {
	if _index(ds.Parent, x) == x {
		return FindResult{
			Ds:   ds,
			Root: x,
		}
	}
	var res FindResult = find_set(ds, _index(ds.Parent, x))
	_ = res
	var p []int = res.Ds.Parent
	_ = p
	_setIndex(p, x, res.Root)
	return FindResult{
		Ds: DS{
			Parent: p,
			Rank:   res.Ds.Rank,
		},
		Root: res.Root,
	}
}

func union_set(ds DS, x int, y int) DS {
	var fx FindResult = find_set(ds, x)
	_ = fx
	var ds1 DS = fx.Ds
	_ = ds1
	var x_root int = fx.Root
	_ = x_root
	var fy FindResult = find_set(ds1, y)
	_ = fy
	var ds2 DS = fy.Ds
	_ = ds2
	var y_root int = fy.Root
	_ = y_root
	if x_root == y_root {
		return ds2
	}
	var p []int = ds2.Parent
	_ = p
	var r []int = ds2.Rank
	_ = r
	if _index(r, x_root) > _index(r, y_root) {
		_setIndex(p, y_root, x_root)
	} else {
		_setIndex(p, x_root, y_root)
		if _index(r, x_root) == _index(r, y_root) {
			_setIndex(r, y_root, (_index(r, y_root) + 1))
		}
	}
	return DS{
		Parent: p,
		Rank:   r,
	}
}

func same_python_set(a int, b int) bool {
	if (a < 3) && (b < 3) {
		return true
	}
	if (((a >= 3) && (a < 6)) && (b >= 3)) && (b < 6) {
		return true
	}
	return false
}

var ds DS

var i int

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		ds = DS{
			Parent: []int{},
			Rank:   []int{},
		}
		i = 0
		for i < 6 {
			ds.Parent = append(ds.Parent, 0)
			ds.Rank = append(ds.Rank, 0)
			ds = make_set(ds, i)
			i = (i + 1)
		}
		ds = union_set(ds, 0, 1)
		ds = union_set(ds, 1, 2)
		ds = union_set(ds, 3, 4)
		ds = union_set(ds, 3, 5)
		i = 0
		for i < 6 {
			var j int = 0
			_ = j
			for j < 6 {
				var res_i FindResult = find_set(ds, i)
				_ = res_i
				ds = res_i.Ds
				var root_i int = res_i.Root
				_ = root_i
				var res_j FindResult = find_set(ds, j)
				_ = res_j
				ds = res_j.Ds
				var root_j int = res_j.Root
				_ = root_j
				var same bool = same_python_set(i, j)
				_ = same
				var root_same bool = (root_i == root_j)
				_ = root_same
				if same {
					if !root_same {
						panic("nodes should be in same set")
					}
				} else {
					if root_same {
						panic("nodes should be in different sets")
					}
				}
				j = (j + 1)
			}
			i = (i + 1)
		}
		i = 0
		for i < 6 {
			var res FindResult = find_set(ds, i)
			_ = res
			ds = res.Ds
			fmt.Println(fmt.Sprint(res.Root))
			i = (i + 1)
		}
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
