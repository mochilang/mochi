//go:build ignore

// Generated by Mochi v0.10.59 on 2025-08-06 23:31:32 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"strings"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

type Node struct {
	Data  int `json:"data"`
	Left  int `json:"left"`
	Right int `json:"right"`
}

func inorder(nodes []Node, index int, acc []int) []int {
	if index == (0 - 1) {
		return acc
	}
	var node Node = nodes[index]
	_ = node
	var res []int = inorder(func(v any) []Node {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]Node); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []Node{}
			}
			out := make([]Node, len(arr))
			for i, x := range arr {
				out[i] = x.(Node)
			}
			return out
		}
		return v.([]Node)
	}(nodes), node.Left, func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(acc))
	_ = res
	res = append(res, node.Data)
	res = inorder(func(v any) []Node {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]Node); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []Node{}
			}
			out := make([]Node, len(arr))
			for i, x := range arr {
				out[i] = x.(Node)
			}
			return out
		}
		return v.([]Node)
	}(nodes), node.Right, func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(res))
	return res
}

func size(nodes []Node, index int) int {
	if index == (0 - 1) {
		return 0
	}
	var node Node = nodes[index]
	_ = node
	_ = node
	return ((1 + size(func(v any) []Node {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]Node); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []Node{}
			}
			out := make([]Node, len(arr))
			for i, x := range arr {
				out[i] = x.(Node)
			}
			return out
		}
		return v.([]Node)
	}(nodes), node.Left)) + size(func(v any) []Node {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]Node); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []Node{}
			}
			out := make([]Node, len(arr))
			for i, x := range arr {
				out[i] = x.(Node)
			}
			return out
		}
		return v.([]Node)
	}(nodes), node.Right))
}

func depth(nodes []Node, index int) int {
	if index == (0 - 1) {
		return 0
	}
	var node Node = nodes[index]
	_ = node
	var left_depth int = depth(func(v any) []Node {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]Node); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []Node{}
			}
			out := make([]Node, len(arr))
			for i, x := range arr {
				out[i] = x.(Node)
			}
			return out
		}
		return v.([]Node)
	}(nodes), node.Left)
	_ = left_depth
	var right_depth int = depth(func(v any) []Node {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]Node); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []Node{}
			}
			out := make([]Node, len(arr))
			for i, x := range arr {
				out[i] = x.(Node)
			}
			return out
		}
		return v.([]Node)
	}(nodes), node.Right)
	_ = right_depth
	if left_depth > right_depth {
		return (left_depth + 1)
	}
	return (right_depth + 1)
}

func is_full(nodes []Node, index int) bool {
	if index == (0 - 1) {
		return true
	}
	var node Node = nodes[index]
	_ = node
	if (node.Left == (0 - 1)) && (node.Right == (0 - 1)) {
		return true
	}
	if (node.Left != (0 - 1)) && (node.Right != (0 - 1)) {
		return (is_full(func(v any) []Node {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]Node); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []Node{}
				}
				out := make([]Node, len(arr))
				for i, x := range arr {
					out[i] = x.(Node)
				}
				return out
			}
			return v.([]Node)
		}(nodes), node.Left) && is_full(func(v any) []Node {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]Node); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []Node{}
				}
				out := make([]Node, len(arr))
				for i, x := range arr {
					out[i] = x.(Node)
				}
				return out
			}
			return v.([]Node)
		}(nodes), node.Right))
	}
	return false
}

func small_tree() []Node {
	var arr []Node = []Node{}
	_ = arr
	arr = append(arr, Node{
		Data:  2,
		Left:  1,
		Right: 2,
	})
	arr = append(arr, Node{
		Data:  1,
		Left:  (0 - 1),
		Right: (0 - 1),
	})
	arr = append(arr, Node{
		Data:  3,
		Left:  (0 - 1),
		Right: (0 - 1),
	})
	return arr
}

func medium_tree() []Node {
	var arr []Node = []Node{}
	_ = arr
	arr = append(arr, Node{
		Data:  4,
		Left:  1,
		Right: 4,
	})
	arr = append(arr, Node{
		Data:  2,
		Left:  2,
		Right: 3,
	})
	arr = append(arr, Node{
		Data:  1,
		Left:  (0 - 1),
		Right: (0 - 1),
	})
	arr = append(arr, Node{
		Data:  3,
		Left:  (0 - 1),
		Right: (0 - 1),
	})
	arr = append(arr, Node{
		Data:  5,
		Left:  (0 - 1),
		Right: 5,
	})
	arr = append(arr, Node{
		Data:  6,
		Left:  (0 - 1),
		Right: 6,
	})
	arr = append(arr, Node{
		Data:  7,
		Left:  (0 - 1),
		Right: (0 - 1),
	})
	return arr
}

var small []Node

var medium []Node

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		small = small_tree()
		fmt.Println(size(func(v any) []Node {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]Node); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []Node{}
				}
				out := make([]Node, len(arr))
				for i, x := range arr {
					out[i] = x.(Node)
				}
				return out
			}
			return v.([]Node)
		}(small), 0))
		fmt.Println(func() string {
			b, _ := json.Marshal(inorder(func(v any) []Node {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]Node); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []Node{}
					}
					out := make([]Node, len(arr))
					for i, x := range arr {
						out[i] = x.(Node)
					}
					return out
				}
				return v.([]Node)
			}(small), 0, func(v any) []int {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]int); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []int{}
					}
					out := make([]int, len(arr))
					for i, x := range arr {
						out[i] = x.(int)
					}
					return out
				}
				return v.([]int)
			}([]int{})))
			s := string(b)
			s = strings.ReplaceAll(s, ":", ": ")
			s = strings.ReplaceAll(s, ",", ", ")
			s = strings.ReplaceAll(s, "}, {", "},{")
			return s
		}())
		fmt.Println(depth(func(v any) []Node {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]Node); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []Node{}
				}
				out := make([]Node, len(arr))
				for i, x := range arr {
					out[i] = x.(Node)
				}
				return out
			}
			return v.([]Node)
		}(small), 0))
		fmt.Println(is_full(func(v any) []Node {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]Node); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []Node{}
				}
				out := make([]Node, len(arr))
				for i, x := range arr {
					out[i] = x.(Node)
				}
				return out
			}
			return v.([]Node)
		}(small), 0))
		medium = medium_tree()
		fmt.Println(size(func(v any) []Node {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]Node); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []Node{}
				}
				out := make([]Node, len(arr))
				for i, x := range arr {
					out[i] = x.(Node)
				}
				return out
			}
			return v.([]Node)
		}(medium), 0))
		fmt.Println(func() string {
			b, _ := json.Marshal(inorder(func(v any) []Node {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]Node); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []Node{}
					}
					out := make([]Node, len(arr))
					for i, x := range arr {
						out[i] = x.(Node)
					}
					return out
				}
				return v.([]Node)
			}(medium), 0, func(v any) []int {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]int); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []int{}
					}
					out := make([]int, len(arr))
					for i, x := range arr {
						out[i] = x.(int)
					}
					return out
				}
				return v.([]int)
			}([]int{})))
			s := string(b)
			s = strings.ReplaceAll(s, ":", ": ")
			s = strings.ReplaceAll(s, ",", ", ")
			s = strings.ReplaceAll(s, "}, {", "},{")
			return s
		}())
		fmt.Println(depth(func(v any) []Node {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]Node); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []Node{}
				}
				out := make([]Node, len(arr))
				for i, x := range arr {
					out[i] = x.(Node)
				}
				return out
			}
			return v.([]Node)
		}(medium), 0))
		fmt.Println(is_full(func(v any) []Node {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]Node); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []Node{}
				}
				out := make([]Node, len(arr))
				for i, x := range arr {
					out[i] = x.(Node)
				}
				return out
			}
			return v.([]Node)
		}(medium), 0))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
