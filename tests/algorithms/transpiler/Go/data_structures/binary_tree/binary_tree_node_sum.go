//go:build ignore

// Generated by Mochi v0.10.59 on 2025-08-07 00:47:40 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

type Node struct {
	Value int `json:"value"`
	Left  int `json:"left"`
	Right int `json:"right"`
}

func node_sum(tree []Node, index int) int {
	if index == (0 - 1) {
		return 0
	}
	var node Node = tree[index]
	_ = node
	_ = node
	return ((node.Value + node_sum(func(v any) []Node {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]Node); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []Node{}
			}
			out := make([]Node, len(arr))
			for i, x := range arr {
				out[i] = x.(Node)
			}
			return out
		}
		return v.([]Node)
	}(tree), node.Left)) + node_sum(func(v any) []Node {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]Node); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []Node{}
			}
			out := make([]Node, len(arr))
			for i, x := range arr {
				out[i] = x.(Node)
			}
			return out
		}
		return v.([]Node)
	}(tree), node.Right))
}

var example []Node

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		example = []Node{Node{
			Value: 10,
			Left:  1,
			Right: 2,
		}, Node{
			Value: 5,
			Left:  3,
			Right: (0 - 1),
		}, Node{
			Value: (0 - 3),
			Left:  4,
			Right: 5,
		}, Node{
			Value: 12,
			Left:  (0 - 1),
			Right: (0 - 1),
		}, Node{
			Value: 8,
			Left:  (0 - 1),
			Right: (0 - 1),
		}, Node{
			Value: 0,
			Left:  (0 - 1),
			Right: (0 - 1),
		}}
		fmt.Println(node_sum(func(v any) []Node {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]Node); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []Node{}
				}
				out := make([]Node, len(arr))
				for i, x := range arr {
					out[i] = x.(Node)
				}
				return out
			}
			return v.([]Node)
		}(example), 0))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
