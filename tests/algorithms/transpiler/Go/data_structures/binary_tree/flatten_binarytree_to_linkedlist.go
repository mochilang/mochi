//go:build ignore

// Generated by Mochi v0.10.72 on 2025-08-24 17:02:31 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		return
	}
	s[idx] = v
}

var __name__ string = "__main__"

var node_data []int

var left_child []int

var right_child []int

func new_node(value int) int {
	node_data = append(node_data, value)
	left_child = append(left_child, 0)
	right_child = append(right_child, 0)
	return (len(node_data) - 1)
}

func build_tree() int {
	var root int = new_node(1)
	_ = root
	var n2 int = new_node(2)
	_ = n2
	var n5 int = new_node(5)
	_ = n5
	var n3 int = new_node(3)
	_ = n3
	var n4 int = new_node(4)
	_ = n4
	var n6 int = new_node(6)
	_ = n6
	_setIndex(left_child, root, n2)
	_setIndex(right_child, root, n5)
	_setIndex(left_child, n2, n3)
	_setIndex(right_child, n2, n4)
	_setIndex(right_child, n5, n6)
	return root
}

func flatten(root int) []int {
	if root == 0 {
		return []int{}
	}
	var res []int = []int{func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(_index(node_data, root))}
	_ = res
	var left_vals []int = flatten(_index(left_child, root))
	_ = left_vals
	var right_vals []int = flatten(_index(right_child, root))
	_ = right_vals
	var i int = 0
	_ = i
	for i < len(left_vals) {
		res = append(res, _index(left_vals, i))
		i = (i + 1)
	}
	i = 0
	for i < len(right_vals) {
		res = append(res, _index(right_vals, i))
		i = (i + 1)
	}
	return res
}

func display(values []int) {
	var s string = ""
	_ = s
	var i int = 0
	_ = i
	for i < len(values) {
		if i == 0 {
			s = fmt.Sprint(_index(values, i))
		} else {
			s = ((s + " ") + fmt.Sprint(_index(values, i)))
		}
		i = (i + 1)
	}
	fmt.Println(s)
}

var root int

var vals []int

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		node_data = []int{0}
		left_child = []int{0}
		right_child = []int{0}
		fmt.Println("Flattened Linked List:")
		root = build_tree()
		vals = flatten(root)
		display(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(vals))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
