//go:build ignore

// Generated by Mochi v0.10.72 on 2025-08-24 17:03:20 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		return
	}
	s[idx] = v
}

var __name__ string = "__main__"

type Node struct {
	Minn    int   `json:"minn"`
	Maxx    int   `json:"maxx"`
	MapLeft []int `json:"map_left"`
	Left    int   `json:"left"`
	Right   int   `json:"right"`
}

var nodes []Node

func make_list(length int, value int) []int {
	var lst []int = []int{}
	_ = lst
	var i int = 0
	_ = i
	for i < length {
		lst = append(lst, value)
		i = (i + 1)
	}
	return lst
}

func min_list(arr []int) int {
	var m int = _index(arr, 0)
	_ = m
	var i int = 1
	_ = i
	for i < len(arr) {
		if _index(arr, i) < m {
			m = _index(arr, i)
		}
		i = (i + 1)
	}
	return m
}

func max_list(arr []int) int {
	var m int = _index(arr, 0)
	_ = m
	var i int = 1
	_ = i
	for i < len(arr) {
		if _index(arr, i) > m {
			m = _index(arr, i)
		}
		i = (i + 1)
	}
	return m
}

func build_tree(arr []int) int {
	var n Node = Node{
		Minn: min_list(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(arr)),
		Maxx: max_list(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(arr)),
		MapLeft: make_list(len(arr), 0),
		Left:    (0 - 1),
		Right:   (0 - 1),
	}
	_ = n
	if n.Minn == n.Maxx {
		nodes = append(nodes, n)
		return (len(nodes) - 1)
	}
	var pivot int = ((n.Minn + n.Maxx) / 2)
	_ = pivot
	var left_arr []int = []int{}
	_ = left_arr
	var right_arr []int = []int{}
	_ = right_arr
	var i int = 0
	_ = i
	for i < len(arr) {
		var num int = _index(arr, i)
		_ = num
		if num <= pivot {
			left_arr = append(left_arr, num)
		} else {
			right_arr = append(right_arr, num)
		}
		var ml []int = n.MapLeft
		_ = ml
		_setIndex(ml, i, len(left_arr))
		n.MapLeft = ml
		i = (i + 1)
	}
	if len(left_arr) > 0 {
		n.Left = build_tree(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(left_arr))
	}
	if len(right_arr) > 0 {
		n.Right = build_tree(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(right_arr))
	}
	nodes = append(nodes, n)
	return (len(nodes) - 1)
}

func rank_till_index(node_idx int, num int, index int) int {
	if (index < 0) || (node_idx < 0) {
		return 0
	}
	var node Node = _index(nodes, node_idx)
	_ = node
	if node.Minn == node.Maxx {
		if node.Minn == num {
			return (index + 1)
		} else {
			return 0
		}
	}
	var pivot int = ((node.Minn + node.Maxx) / 2)
	_ = pivot
	if num <= pivot {
		return rank_till_index(node.Left, num, (_index(node.MapLeft, index) - 1))
	} else {
		return rank_till_index(node.Right, num, (index - _index(node.MapLeft, index)))
	}
}

func rank(node_idx int, num int, start int, end int) int {
	if start > end {
		return 0
	}
	var rank_till_end int = rank_till_index(node_idx, num, end)
	_ = rank_till_end
	_ = rank_till_end
	var rank_before_start int = rank_till_index(node_idx, num, (start - 1))
	_ = rank_before_start
	_ = rank_before_start
	return (rank_till_end - rank_before_start)
}

func quantile(node_idx int, index int, start int, end int) int {
	if ((index > (end - start)) || (start > end)) || (node_idx < 0) {
		return (0 - 1)
	}
	var node Node = _index(nodes, node_idx)
	_ = node
	if node.Minn == node.Maxx {
		return node.Minn
	}
	var left_start int = func() int {
		if start == 0 {
			return 0
		} else {
			return _index(node.MapLeft, (start - 1))
		}
	}()
	_ = left_start
	var num_left int = (_index(node.MapLeft, end) - left_start)
	_ = num_left
	if num_left > index {
		return quantile(node.Left, index, left_start, (_index(node.MapLeft, end) - 1))
	} else {
		return quantile(node.Right, (index - num_left), (start - left_start), (end - _index(node.MapLeft, end)))
	}
}

func range_counting(node_idx int, start int, end int, start_num int, end_num int) int {
	if ((start > end) || (node_idx < 0)) || (start_num > end_num) {
		return 0
	}
	var node Node = _index(nodes, node_idx)
	_ = node
	if (node.Minn > end_num) || (node.Maxx < start_num) {
		return 0
	}
	if (start_num <= node.Minn) && (node.Maxx <= end_num) {
		return ((end - start) + 1)
	}
	var left int = range_counting(node.Left, func() int {
		if start == 0 {
			return 0
		} else {
			return _index(node.MapLeft, (start - 1))
		}
	}(), (_index(node.MapLeft, end) - 1), start_num, end_num)
	_ = left
	_ = left
	var right int = range_counting(node.Right, (start - func() int {
		if start == 0 {
			return 0
		} else {
			return _index(node.MapLeft, (start - 1))
		}
	}()), (end - _index(node.MapLeft, end)), start_num, end_num)
	_ = right
	_ = right
	return (left + right)
}

var test_array []int

var root int

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		nodes = []Node{}
		test_array = []int{2, 1, 4, 5, 6, 0, 8, 9, 1, 2, 0, 6, 4, 2, 0, 6, 5, 3, 2, 7}
		root = build_tree(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(test_array))
		fmt.Println(("rank_till_index 6 at 6 -> " + fmt.Sprint(rank_till_index(root, 6, 6))))
		fmt.Println(("rank 6 in [3,13] -> " + fmt.Sprint(rank(root, 6, 3, 13))))
		fmt.Println(("quantile index 2 in [2,5] -> " + fmt.Sprint(quantile(root, 2, 2, 5))))
		fmt.Println(("range_counting [3,7] in [1,10] -> " + fmt.Sprint(range_counting(root, 1, 10, 3, 7))))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
