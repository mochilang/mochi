//go:build ignore

// Generated by Mochi v0.10.72 on 2025-08-24 17:03:02 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

var __name__ string = "__main__"

type Node struct {
	Val   int `json:"val"`
	Left  int `json:"left"`
	Right int `json:"right"`
}

type Info struct {
	IsBst  bool `json:"is_bst"`
	MinVal int  `json:"min_val"`
	MaxVal int  `json:"max_val"`
	Total  int  `json:"total"`
	Best   int  `json:"best"`
}

func min_int(a int, b int) int {
	if a < b {
		return a
	}
	return b
}

func max_int(a int, b int) int {
	if a > b {
		return a
	}
	return b
}

func solver(nodes []Node, idx int) Info {
	if idx == (0 - 1) {
		return Info{
			IsBst:  true,
			MinVal: 2147483647,
			MaxVal: (0 - 2147483648),
			Total:  0,
			Best:   0,
		}
	}
	var node Node = _index(nodes, idx)
	_ = node
	var left_info Info = solver(func(v any) []Node {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]Node); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []Node{}
			}
			out := make([]Node, len(arr))
			for i, x := range arr {
				out[i] = x.(Node)
			}
			return out
		}
		return v.([]Node)
	}(nodes), node.Left)
	_ = left_info
	var right_info Info = solver(func(v any) []Node {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]Node); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []Node{}
			}
			out := make([]Node, len(arr))
			for i, x := range arr {
				out[i] = x.(Node)
			}
			return out
		}
		return v.([]Node)
	}(nodes), node.Right)
	_ = right_info
	var current_best int = max_int(left_info.Best, right_info.Best)
	_ = current_best
	if ((left_info.IsBst && right_info.IsBst) && (left_info.MaxVal < node.Val)) && (node.Val < right_info.MinVal) {
		var sum_val int = ((left_info.Total + right_info.Total) + node.Val)
		_ = sum_val
		current_best = max_int(current_best, sum_val)
		return Info{
			IsBst:  true,
			MinVal: min_int(left_info.MinVal, node.Val),
			MaxVal: max_int(right_info.MaxVal, node.Val),
			Total:  sum_val,
			Best:   current_best,
		}
	}
	return Info{
		IsBst:  false,
		MinVal: 0,
		MaxVal: 0,
		Total:  0,
		Best:   current_best,
	}
}

func max_sum_bst(nodes []Node, root int) int {
	var info Info = solver(func(v any) []Node {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]Node); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []Node{}
			}
			out := make([]Node, len(arr))
			for i, x := range arr {
				out[i] = x.(Node)
			}
			return out
		}
		return v.([]Node)
	}(nodes), root)
	_ = info
	_ = info
	return info.Best
}

func mochiMain() {
	var t1_nodes []Node = []Node{Node{
		Val:   4,
		Left:  1,
		Right: (0 - 1),
	}, Node{
		Val:   3,
		Left:  2,
		Right: 3,
	}, Node{
		Val:   1,
		Left:  (0 - 1),
		Right: (0 - 1),
	}, Node{
		Val:   2,
		Left:  (0 - 1),
		Right: (0 - 1),
	}}
	_ = t1_nodes
	fmt.Println(max_sum_bst(func(v any) []Node {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]Node); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []Node{}
			}
			out := make([]Node, len(arr))
			for i, x := range arr {
				out[i] = x.(Node)
			}
			return out
		}
		return v.([]Node)
	}(t1_nodes), 0))
	var t2_nodes []Node = []Node{Node{
		Val:   (0 - 4),
		Left:  1,
		Right: 2,
	}, Node{
		Val:   (0 - 2),
		Left:  (0 - 1),
		Right: (0 - 1),
	}, Node{
		Val:   (0 - 5),
		Left:  (0 - 1),
		Right: (0 - 1),
	}}
	_ = t2_nodes
	fmt.Println(max_sum_bst(func(v any) []Node {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]Node); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []Node{}
			}
			out := make([]Node, len(arr))
			for i, x := range arr {
				out[i] = x.(Node)
			}
			return out
		}
		return v.([]Node)
	}(t2_nodes), 0))
	var t3_nodes []Node = []Node{Node{
		Val:   1,
		Left:  1,
		Right: 2,
	}, Node{
		Val:   4,
		Left:  3,
		Right: 4,
	}, Node{
		Val:   3,
		Left:  5,
		Right: 6,
	}, Node{
		Val:   2,
		Left:  (0 - 1),
		Right: (0 - 1),
	}, Node{
		Val:   4,
		Left:  (0 - 1),
		Right: (0 - 1),
	}, Node{
		Val:   2,
		Left:  (0 - 1),
		Right: (0 - 1),
	}, Node{
		Val:   5,
		Left:  7,
		Right: 8,
	}, Node{
		Val:   4,
		Left:  (0 - 1),
		Right: (0 - 1),
	}, Node{
		Val:   6,
		Left:  (0 - 1),
		Right: (0 - 1),
	}}
	_ = t3_nodes
	fmt.Println(max_sum_bst(func(v any) []Node {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]Node); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []Node{}
			}
			out := make([]Node, len(arr))
			for i, x := range arr {
				out[i] = x.(Node)
			}
			return out
		}
		return v.([]Node)
	}(t3_nodes), 0))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
