//go:build ignore

// Generated by Mochi v0.10.72 on 2025-08-24 17:02:21 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"sort"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

var __name__ string = "__main__"

func binary_tree_mirror_dict(tree map[int][]int, root int) {
	if (root == 0) || !func() bool { _, ok := tree[root]; return ok }() {
		return
	}
	var children []int = tree[root]
	_ = children
	var left int = _index(children, 0)
	_ = left
	var right int = _index(children, 1)
	_ = right
	tree[root] = []int{func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(right), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(left)}
	binary_tree_mirror_dict(tree, left)
	binary_tree_mirror_dict(tree, right)
}

func binary_tree_mirror(binary_tree map[int][]int, root int) map[int][]int {
	if len(binary_tree) == 0 {
		panic("binary tree cannot be empty")
	}
	if !func() bool { _, ok := binary_tree[root]; return ok }() {
		panic((("root " + fmt.Sprint(root)) + " is not present in the binary_tree"))
	}
	var tree_copy map[int][]int = map[int][]int{}
	if tree_copy == nil {
		tree_copy = map[int][]int{}
	}
	_ = tree_copy
	for _, k := range func() []int {
		keys := make([]int, 0, len(binary_tree))
		for k := range binary_tree {
			keys = append(keys, k)
		}
		sort.Slice(keys, func(i, j int) bool { return fmt.Sprint(keys[i]) < fmt.Sprint(keys[j]) })
		return keys
	}() {
		_ = k
		tree_copy[k] = binary_tree[k]
	}
	binary_tree_mirror_dict(tree_copy, root)
	return tree_copy
}

func mochiMain() {
	var binary_tree map[int][]int = map[int][]int{1: []int{2, 3}, 2: []int{4, 5}, 3: []int{6, 7}, 7: []int{8, 9}}
	if binary_tree == nil {
		binary_tree = map[int][]int{}
	}
	_ = binary_tree
	fmt.Println(("Binary tree: " + fmt.Sprint(binary_tree)))
	var mirrored map[int][]int = binary_tree_mirror(binary_tree, 1)
	if mirrored == nil {
		mirrored = map[int][]int{}
	}
	_ = mirrored
	fmt.Println(("Binary tree mirror: " + fmt.Sprint(mirrored)))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
