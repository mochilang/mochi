//go:build ignore

// Generated by Mochi v0.10.60 on 2025-08-08 11:22:15 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"math/big"
	"os"
	"runtime"
	"strconv"
	"time"
)

var _ = big.NewInt

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i int) T {
	if i < 0 {
		i += len(s)
	}
	return s[i]
}

func _concat[T any](a, b []T) []T {
	return append(append([]T{}, a...), b...)
}

var NONE int

type Tree struct {
	Data  []float64 `json:"data"`
	Left  []int     `json:"left"`
	Right []int     `json:"right"`
}

func inorder(tree Tree, index int) []float64 {
	var res []float64 = []float64{}
	_ = res
	if index == int(NONE) {
		return res
	}
	var left_idx int = _index(tree.Left, index)
	_ = left_idx
	if left_idx != int(NONE) {
		res = _concat(res, inorder(tree, left_idx))
	}
	res = append(res, _index(tree.Data, index))
	var right_idx int = _index(tree.Right, index)
	_ = right_idx
	if right_idx != int(NONE) {
		res = _concat(res, inorder(tree, right_idx))
	}
	return res
}

func is_sorted(tree Tree, index int) bool {
	if index == int(NONE) {
		return true
	}
	var left_idx int = _index(tree.Left, index)
	_ = left_idx
	if left_idx != int(NONE) {
		if _index(tree.Data, index) < _index(tree.Data, left_idx) {
			return false
		}
		if !is_sorted(tree, left_idx) {
			return false
		}
	}
	var right_idx int = _index(tree.Right, index)
	_ = right_idx
	if right_idx != int(NONE) {
		if _index(tree.Data, index) > _index(tree.Data, right_idx) {
			return false
		}
		if !is_sorted(tree, right_idx) {
			return false
		}
	}
	return true
}

var tree1 Tree

var tree2 Tree

var tree3 Tree

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		NONE = (0 - 1)
		tree1 = Tree{
			Data: []float64{2.1, 2.0, 2.2},
			Left: []int{func(v any) int {
				if vv, ok := v.(int); ok {
					return vv
				}
				return 0
			}(1), func(v any) int {
				if vv, ok := v.(int); ok {
					return vv
				}
				return 0
			}(NONE), func(v any) int {
				if vv, ok := v.(int); ok {
					return vv
				}
				return 0
			}(NONE)},
			Right: []int{func(v any) int {
				if vv, ok := v.(int); ok {
					return vv
				}
				return 0
			}(2), func(v any) int {
				if vv, ok := v.(int); ok {
					return vv
				}
				return 0
			}(NONE), func(v any) int {
				if vv, ok := v.(int); ok {
					return vv
				}
				return 0
			}(NONE)},
		}
		fmt.Println(((("Tree " + fmt.Sprint(inorder(tree1, 0))) + " is sorted: ") + fmt.Sprint(is_sorted(tree1, 0))))
		tree2 = Tree{
			Data: []float64{2.1, 2.0, 2.0},
			Left: []int{func(v any) int {
				if vv, ok := v.(int); ok {
					return vv
				}
				return 0
			}(1), func(v any) int {
				if vv, ok := v.(int); ok {
					return vv
				}
				return 0
			}(NONE), func(v any) int {
				if vv, ok := v.(int); ok {
					return vv
				}
				return 0
			}(NONE)},
			Right: []int{func(v any) int {
				if vv, ok := v.(int); ok {
					return vv
				}
				return 0
			}(2), func(v any) int {
				if vv, ok := v.(int); ok {
					return vv
				}
				return 0
			}(NONE), func(v any) int {
				if vv, ok := v.(int); ok {
					return vv
				}
				return 0
			}(NONE)},
		}
		fmt.Println(((("Tree " + fmt.Sprint(inorder(tree2, 0))) + " is sorted: ") + fmt.Sprint(is_sorted(tree2, 0))))
		tree3 = Tree{
			Data: []float64{2.1, 2.0, 2.1},
			Left: []int{func(v any) int {
				if vv, ok := v.(int); ok {
					return vv
				}
				return 0
			}(1), func(v any) int {
				if vv, ok := v.(int); ok {
					return vv
				}
				return 0
			}(NONE), func(v any) int {
				if vv, ok := v.(int); ok {
					return vv
				}
				return 0
			}(NONE)},
			Right: []int{func(v any) int {
				if vv, ok := v.(int); ok {
					return vv
				}
				return 0
			}(2), func(v any) int {
				if vv, ok := v.(int); ok {
					return vv
				}
				return 0
			}(NONE), func(v any) int {
				if vv, ok := v.(int); ok {
					return vv
				}
				return 0
			}(NONE)},
		}
		fmt.Println(((("Tree " + fmt.Sprint(inorder(tree3, 0))) + " is sorted: ") + fmt.Sprint(is_sorted(tree3, 0))))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
