//go:build ignore

// Generated by Mochi v0.10.61 on 2025-08-08 16:42:13 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

func _toFloat(v any) float64 {
	switch t := v.(type) {
	case int:
		return float64(t)
	case int64:
		return float64(t)
	case float64:
		return t
	default:
		return 0
	}
}

type TreeNode interface{ isTreeNode() }
type Empty struct {
}

func (Empty) isTreeNode() {}

type Node struct {
	Left  any `json:"left"`
	Value int `json:"value"`
	Right any `json:"right"`
}

func (Node) isTreeNode() {}

type BuildResult struct {
	Node any `json:"node"`
	Next int `json:"next"`
}

func digit(ch string) int {
	var digits string = "0123456789"
	_ = digits
	var i int = 0
	_ = i
	for i < len(digits) {
		if _substr(digits, i, (i+1)) == ch {
			return i
		}
		i = (i + 1)
	}
	return 0
}

func to_int(s string) int {
	var i int = 0
	_ = i
	var sign int = 1
	_ = sign
	if (len(s) > 0) && (_substr(s, 0, 1) == "-") {
		sign = (0 - 1)
		i = 1
	}
	var num int = 0
	_ = num
	for i < len(s) {
		ch := _substr(s, i, (i + 1))
		_ = ch
		num = ((num * 10) + digit(ch))
		i = (i + 1)
	}
	return (sign * num)
}

func split(s string, sep string) []string {
	var res []string = []string{}
	_ = res
	var current string = ""
	_ = current
	var i int = 0
	_ = i
	for i < len(s) {
		ch := _substr(s, i, (i + 1))
		_ = ch
		if fmt.Sprint(ch) == sep {
			res = append(res, current)
			current = ""
		} else {
			current = (current + fmt.Sprint(ch))
		}
		i = (i + 1)
	}
	res = append(res, current)
	return res
}

func serialize(node any) string {
	return func() string {
		switch uv := node.(type) {
		case Empty:
			return "null"
		case Node:
			l := uv.Left
			v := uv.Value
			r := uv.Right
			return ((((fmt.Sprint(v) + ",") + serialize(l)) + ",") + serialize(r))
		default:
			var z string
			return z
		}
	}()
}

func build(nodes []string, idx int) BuildResult {
	var value string = _index(nodes, idx)
	_ = value
	if value == "null" {
		return BuildResult{
			Node: Empty{},
			Next: (idx + 1),
		}
	}
	left_res := build(func(v any) []string {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]string); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []string{}
			}
			out := make([]string, len(arr))
			for i, x := range arr {
				out[i] = x.(string)
			}
			return out
		}
		return v.([]string)
	}(nodes), (idx + 1))
	_ = left_res
	right_res := build(func(v any) []string {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]string); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []string{}
			}
			out := make([]string, len(arr))
			for i, x := range arr {
				out[i] = x.(string)
			}
			return out
		}
		return v.([]string)
	}(nodes), int(BuildResult(left_res).Next))
	_ = right_res
	node := Node{
		Left:  BuildResult(left_res).Node,
		Value: to_int(value),
		Right: BuildResult(right_res).Node,
	}
	_ = node
	_ = node
	return BuildResult{
		Node: node,
		Next: BuildResult(right_res).Next,
	}
}

func deserialize(data string) any {
	nodes := split(data, ",")
	_ = nodes
	res := build(func(v any) []string {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]string); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []string{}
			}
			out := make([]string, len(arr))
			for i, x := range arr {
				out[i] = x.(string)
			}
			return out
		}
		return v.([]string)
	}(func(v any) []string {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]string); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []string{}
			}
			out := make([]string, len(arr))
			for i, x := range arr {
				out[i] = x.(string)
			}
			return out
		}
		return v.([]string)
	}(nodes)), 0)
	_ = res
	_ = res
	return BuildResult(res).Node
}

func five_tree() any {
	left_child := Node{
		Left:  Empty{},
		Value: 2,
		Right: Empty{},
	}
	_ = left_child
	_ = left_child
	right_left := Node{
		Left:  Empty{},
		Value: 4,
		Right: Empty{},
	}
	_ = right_left
	right_right := Node{
		Left:  Empty{},
		Value: 5,
		Right: Empty{},
	}
	_ = right_right
	right_child := Node{
		Left:  right_left,
		Value: 3,
		Right: right_right,
	}
	_ = right_child
	_ = right_child
	return Node{
		Left:  left_child,
		Value: 1,
		Right: right_child,
	}
}

func mochiMain() {
	root := five_tree()
	_ = root
	serial := serialize(root)
	_ = serial
	fmt.Println(serial)
	rebuilt := deserialize(serial)
	_ = rebuilt
	serial2 := serialize(rebuilt)
	_ = serial2
	fmt.Println(serial2)
	fmt.Println((_toFloat(serial) == _toFloat(serial2)))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
