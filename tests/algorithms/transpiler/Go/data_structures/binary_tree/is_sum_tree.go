//go:build ignore

// Generated by Mochi v0.10.72 on 2025-08-24 17:02:56 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

var __name__ string = "__main__"

type Node struct {
	Value int `json:"value"`
	Left  int `json:"left"`
	Right int `json:"right"`
}

func tree_sum(nodes []Node, idx int) int {
	if idx == (0 - 1) {
		return 0
	}
	var node Node = _index(nodes, idx)
	_ = node
	_ = node
	return ((node.Value + tree_sum(func(v any) []Node {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]Node); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []Node{}
			}
			out := make([]Node, len(arr))
			for i, x := range arr {
				out[i] = x.(Node)
			}
			return out
		}
		return v.([]Node)
	}(nodes), node.Left)) + tree_sum(func(v any) []Node {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]Node); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []Node{}
			}
			out := make([]Node, len(arr))
			for i, x := range arr {
				out[i] = x.(Node)
			}
			return out
		}
		return v.([]Node)
	}(nodes), node.Right))
}

func is_sum_node(nodes []Node, idx int) bool {
	var node Node = _index(nodes, idx)
	_ = node
	if (node.Left == (0 - 1)) && (node.Right == (0 - 1)) {
		return true
	}
	var left_sum int = tree_sum(func(v any) []Node {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]Node); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []Node{}
			}
			out := make([]Node, len(arr))
			for i, x := range arr {
				out[i] = x.(Node)
			}
			return out
		}
		return v.([]Node)
	}(nodes), node.Left)
	_ = left_sum
	var right_sum int = tree_sum(func(v any) []Node {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]Node); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []Node{}
			}
			out := make([]Node, len(arr))
			for i, x := range arr {
				out[i] = x.(Node)
			}
			return out
		}
		return v.([]Node)
	}(nodes), node.Right)
	_ = right_sum
	if node.Value != (left_sum + right_sum) {
		return false
	}
	var left_ok bool = true
	_ = left_ok
	if node.Left != (0 - 1) {
		left_ok = is_sum_node(func(v any) []Node {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]Node); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []Node{}
				}
				out := make([]Node, len(arr))
				for i, x := range arr {
					out[i] = x.(Node)
				}
				return out
			}
			return v.([]Node)
		}(nodes), node.Left)
	}
	var right_ok bool = true
	_ = right_ok
	if node.Right != (0 - 1) {
		right_ok = is_sum_node(func(v any) []Node {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]Node); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []Node{}
				}
				out := make([]Node, len(arr))
				for i, x := range arr {
					out[i] = x.(Node)
				}
				return out
			}
			return v.([]Node)
		}(nodes), node.Right)
	}
	return (left_ok && right_ok)
}

func build_a_tree() []Node {
	return []Node{Node{
		Value: 11,
		Left:  1,
		Right: 2,
	}, Node{
		Value: 2,
		Left:  3,
		Right: 4,
	}, Node{
		Value: 29,
		Left:  5,
		Right: 6,
	}, Node{
		Value: 1,
		Left:  (0 - 1),
		Right: (0 - 1),
	}, Node{
		Value: 7,
		Left:  (0 - 1),
		Right: (0 - 1),
	}, Node{
		Value: 15,
		Left:  (0 - 1),
		Right: (0 - 1),
	}, Node{
		Value: 40,
		Left:  7,
		Right: (0 - 1),
	}, Node{
		Value: 35,
		Left:  (0 - 1),
		Right: (0 - 1),
	}}
}

func build_a_sum_tree() []Node {
	return []Node{Node{
		Value: 26,
		Left:  1,
		Right: 2,
	}, Node{
		Value: 10,
		Left:  3,
		Right: 4,
	}, Node{
		Value: 3,
		Left:  (0 - 1),
		Right: 5,
	}, Node{
		Value: 4,
		Left:  (0 - 1),
		Right: (0 - 1),
	}, Node{
		Value: 6,
		Left:  (0 - 1),
		Right: (0 - 1),
	}, Node{
		Value: 3,
		Left:  (0 - 1),
		Right: (0 - 1),
	}}
}

var __mochi_test_header_printed bool

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		if !__mochi_test_header_printed {
			fmt.Println("[94;1mtests/github/TheAlgorithms/Mochi/data_structures/binary_tree/is_sum_tree.mochi[0;22m")
			__mochi_test_header_printed = true
		}
		func() {
			func() {
				defer func() { recover() }()
				var tree []Node = build_a_tree()
				_ = tree
				_ = tree
				_ = (is_sum_node(func(v any) []Node {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]Node); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []Node{}
						}
						out := make([]Node, len(arr))
						for i, x := range arr {
							out[i] = x.(Node)
						}
						return out
					}
					return v.([]Node)
				}(tree), 0) == false)
			}()
			fmt.Printf("   \x1b[33mtest\x1b[0m %s                   ... \x1b[32mok\x1b[0m (1.0ms)\n", "non sum tree")
		}()

		if !__mochi_test_header_printed {
			fmt.Println("[94;1mtests/github/TheAlgorithms/Mochi/data_structures/binary_tree/is_sum_tree.mochi[0;22m")
			__mochi_test_header_printed = true
		}
		func() {
			func() {
				defer func() { recover() }()
				var tree []Node = build_a_sum_tree()
				_ = tree
				_ = tree
				_ = (is_sum_node(func(v any) []Node {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]Node); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []Node{}
						}
						out := make([]Node, len(arr))
						for i, x := range arr {
							out[i] = x.(Node)
						}
						return out
					}
					return v.([]Node)
				}(tree), 0) == true)
			}()
			fmt.Printf("   \x1b[33mtest\x1b[0m %s                   ... \x1b[32mok\x1b[0m (1.0ms)\n", "sum tree")
		}()

		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
