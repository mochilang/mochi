//go:build ignore

// Generated by Mochi v0.10.61 on 2025-08-08 16:37:09 GMT+7
package main

import (
	"bufio"
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

var _scanner = bufio.NewScanner(os.Stdin)

func _input() string {
	if !_scanner.Scan() {
		return ""
	}
	return _scanner.Text()
}

func binomial_coefficient(n int, k int) int {
	var result int = 1
	_ = result
	var kk int = k
	_ = kk
	if k > (n - k) {
		kk = (n - k)
	}
	for i := 0; i < kk; i++ {
		result = (result * (n - i))
		result = (result / (i + 1))
	}
	return result
}

func catalan_number(node_count int) int {
	return (binomial_coefficient((2*node_count), node_count) / (node_count + 1))
}

func factorial(n int) int {
	if n < 0 {
		fmt.Println("factorial() not defined for negative values")
		return 0
	}
	var result int = 1
	_ = result
	for i := 1; i < (n + 1); i++ {
		result = (result * i)
	}
	return result
}

func binary_tree_count(node_count int) int {
	return (catalan_number(node_count) * factorial(node_count))
}

var input_str string

var node_count int

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println("Enter the number of nodes:")
		input_str = _input()
		node_count = func() int { n, _ := strconv.Atoi(fmt.Sprint(input_str)); return n }()
		if node_count <= 0 {
			fmt.Println("We need some nodes to work with.")
		} else {
			bst := catalan_number(node_count)
			_ = bst
			bt := binary_tree_count(node_count)
			_ = bt
			fmt.Println("Given", node_count, "nodes, there are", bt, "binary trees and", bst, "binary search trees.")
		}
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
