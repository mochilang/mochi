//go:build ignore

// Generated by Mochi v0.10.72 on 2025-08-24 17:02:30 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

func _modi(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		return
	}
	s[idx] = v
}

var __name__ string = "__main__"

type FenwickTree struct {
	Size int   `json:"size"`
	Tree []int `json:"tree"`
}

func fenwick_from_list(arr []int) FenwickTree {
	var size int = len(arr)
	_ = size
	var tree []int = []int{}
	_ = tree
	var i int = 0
	_ = i
	for i < size {
		tree = append(tree, _index(arr, i))
		i = (i + 1)
	}
	i = 1
	for i < size {
		var j int = fenwick_next(i)
		_ = j
		if j < size {
			_setIndex(tree, j, (_index(tree, j) + _index(tree, i)))
		}
		i = (i + 1)
	}
	return FenwickTree{
		Size: size,
		Tree: tree,
	}
}

func fenwick_empty(size int) FenwickTree {
	var tree []int = []int{}
	_ = tree
	var i int = 0
	_ = i
	for i < size {
		tree = append(tree, 0)
		i = (i + 1)
	}
	return FenwickTree{
		Size: size,
		Tree: tree,
	}
}

func fenwick_get_array(f FenwickTree) []int {
	var arr []int = []int{}
	_ = arr
	var i int = 0
	_ = i
	for i < f.Size {
		arr = append(arr, _index(f.Tree, i))
		i = (i + 1)
	}
	i = (f.Size - 1)
	for i > 0 {
		var j int = fenwick_next(i)
		_ = j
		if j < f.Size {
			_setIndex(arr, j, (_index(arr, j) - _index(arr, i)))
		}
		i = (i - 1)
	}
	return arr
}

func bit_and(a int, b int) int {
	var ua int = a
	_ = ua
	var ub int = b
	_ = ub
	var res int = 0
	_ = res
	var bit int = 1
	_ = bit
	for (ua != 0) || (ub != 0) {
		if (_modi(ua, 2) == 1) && (_modi(ub, 2) == 1) {
			res = (res + bit)
		}
		ua = int((ua / 2))
		ub = int((ub / 2))
		bit = (bit * 2)
	}
	return res
}

func low_bit(x int) int {
	if x == 0 {
		return 0
	}
	return (x - bit_and(x, (x-1)))
}

func fenwick_next(index int) int {
	return (index + low_bit(index))
}

func fenwick_prev(index int) int {
	return (index - low_bit(index))
}

func fenwick_add(f FenwickTree, index int, value int) FenwickTree {
	var tree []int = f.Tree
	_ = tree
	if index == 0 {
		_setIndex(tree, 0, (_index(tree, 0) + value))
		return FenwickTree{
			Size: f.Size,
			Tree: tree,
		}
	}
	var i int = index
	_ = i
	for i < f.Size {
		_setIndex(tree, i, (_index(tree, i) + value))
		i = fenwick_next(i)
	}
	return FenwickTree{
		Size: f.Size,
		Tree: tree,
	}
}

func fenwick_update(f FenwickTree, index int, value int) FenwickTree {
	var current int = fenwick_get(f, index)
	_ = current
	_ = current
	return fenwick_add(f, index, (value - current))
}

func fenwick_prefix(f FenwickTree, right int) int {
	if right == 0 {
		return 0
	}
	var result int = _index(f.Tree, 0)
	_ = result
	var r int = (right - 1)
	_ = r
	for r > 0 {
		result = (result + _index(f.Tree, r))
		r = fenwick_prev(r)
	}
	return result
}

func fenwick_query(f FenwickTree, left int, right int) int {
	return (fenwick_prefix(f, right) - fenwick_prefix(f, left))
}

func fenwick_get(f FenwickTree, index int) int {
	return fenwick_query(f, index, (index + 1))
}

func fenwick_rank_query(f FenwickTree, value int) int {
	var v int = (value - _index(f.Tree, 0))
	_ = v
	if v < 0 {
		return (0 - 1)
	}
	var j int = 1
	_ = j
	for (j * 2) < f.Size {
		j = (j * 2)
	}
	var i int = 0
	_ = i
	var jj int = j
	_ = jj
	for jj > 0 {
		if ((i + jj) < f.Size) && (_index(f.Tree, (i+jj)) <= v) {
			v = (v - _index(f.Tree, (i+jj)))
			i = (i + jj)
		}
		jj = (jj / 2)
	}
	return i
}

var f_base FenwickTree

var f FenwickTree

var f2 FenwickTree

var f3 FenwickTree

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		f_base = fenwick_from_list(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}([]int{1, 2, 3, 4, 5}))
		fmt.Println(fmt.Sprint(fenwick_get_array(f_base)))
		f = fenwick_from_list(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}([]int{1, 2, 3, 4, 5}))
		f = fenwick_add(f, 0, 1)
		f = fenwick_add(f, 1, 2)
		f = fenwick_add(f, 2, 3)
		f = fenwick_add(f, 3, 4)
		f = fenwick_add(f, 4, 5)
		fmt.Println(fmt.Sprint(fenwick_get_array(f)))
		f2 = fenwick_from_list(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}([]int{1, 2, 3, 4, 5}))
		fmt.Println(fenwick_prefix(f2, 3))
		fmt.Println(fenwick_query(f2, 1, 4))
		f3 = fenwick_from_list(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}([]int{1, 2, 0, 3, 0, 5}))
		fmt.Println(fenwick_rank_query(f3, 0))
		fmt.Println(fenwick_rank_query(f3, 2))
		fmt.Println(fenwick_rank_query(f3, 1))
		fmt.Println(fenwick_rank_query(f3, 3))
		fmt.Println(fenwick_rank_query(f3, 5))
		fmt.Println(fenwick_rank_query(f3, 6))
		fmt.Println(fenwick_rank_query(f3, 11))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
