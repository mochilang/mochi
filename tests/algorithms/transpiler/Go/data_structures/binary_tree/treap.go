//go:build ignore

// Generated by Mochi v0.10.59 on 2025-08-07 08:27:29 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"math/big"
	"os"
	"runtime"
	"strconv"
	"time"
)

var _ = big.NewInt

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _mod(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

var NIL int

var node_values []int

var node_priors []float64

var node_lefts []int

var node_rights []int

var seed int

func random() float64 {
	seed = _mod(((seed * 13) + 7), 100)
	return (float64(seed) / 100.0)
}

func new_node(value int) int {
	node_values = append(node_values, value)
	node_priors = append(node_priors, random())
	node_lefts = append(node_lefts, int(NIL))
	node_rights = append(node_rights, int(NIL))
	return (len(node_values) - 1)
}

type SplitResult struct {
	Left  int `json:"left"`
	Right int `json:"right"`
}

func split(root int, value int) SplitResult {
	if root == int(NIL) {
		return SplitResult{
			Left:  NIL,
			Right: NIL,
		}
	}
	if value < int(node_values[root]) {
		var res SplitResult = split(node_lefts[root], value)
		_ = res
		node_lefts[root] = res.Right
		return SplitResult{
			Left:  res.Left,
			Right: root,
		}
	}
	var res SplitResult = split(node_rights[root], value)
	_ = res
	node_rights[root] = res.Left
	return SplitResult{
		Left:  root,
		Right: res.Right,
	}
}

func merge(left int, right int) int {
	if left == int(NIL) {
		return right
	}
	if right == int(NIL) {
		return left
	}
	if node_priors[left] < node_priors[right] {
		node_rights[left] = merge(node_rights[left], right)
		return left
	}
	node_lefts[right] = merge(left, node_lefts[right])
	return right
}

func insert(root int, value int) int {
	var node int = new_node(value)
	_ = node
	_ = node
	var res SplitResult = split(root, value)
	_ = res
	_ = res
	return merge(merge(res.Left, node), res.Right)
}

func erase(root int, value int) int {
	var res1 SplitResult = split(root, (value - 1))
	_ = res1
	var res2 SplitResult = split(res1.Right, value)
	_ = res2
	_ = res2
	return merge(res1.Left, res2.Right)
}

func inorder(i int, acc []int) []int {
	if i == int(NIL) {
		return acc
	}
	var left_acc []int = inorder(node_lefts[i], func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(acc))
	_ = left_acc
	var with_node []int = append(left_acc, node_values[i])
	_ = with_node
	_ = with_node
	return inorder(node_rights[i], func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(with_node))
}

func mochiMain() {
	var root *big.Int = NIL
	_ = root
	root = big.NewInt(int64(insert(int(root.Int64()), 1)))
	fmt.Println(fmt.Sprint(inorder(int(root.Int64()), func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}([]int{}))))
	root = big.NewInt(int64(insert(int(root.Int64()), 3)))
	root = big.NewInt(int64(insert(int(root.Int64()), 5)))
	root = big.NewInt(int64(insert(int(root.Int64()), 17)))
	root = big.NewInt(int64(insert(int(root.Int64()), 19)))
	root = big.NewInt(int64(insert(int(root.Int64()), 2)))
	root = big.NewInt(int64(insert(int(root.Int64()), 16)))
	root = big.NewInt(int64(insert(int(root.Int64()), 4)))
	root = big.NewInt(int64(insert(int(root.Int64()), 0)))
	fmt.Println(fmt.Sprint(inorder(int(root.Int64()), func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}([]int{}))))
	root = big.NewInt(int64(insert(int(root.Int64()), 4)))
	root = big.NewInt(int64(insert(int(root.Int64()), 4)))
	root = big.NewInt(int64(insert(int(root.Int64()), 4)))
	fmt.Println(fmt.Sprint(inorder(int(root.Int64()), func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}([]int{}))))
	root = big.NewInt(int64(erase(int(root.Int64()), 0)))
	fmt.Println(fmt.Sprint(inorder(int(root.Int64()), func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}([]int{}))))
	root = big.NewInt(int64(erase(int(root.Int64()), 4)))
	fmt.Println(fmt.Sprint(inorder(int(root.Int64()), func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}([]int{}))))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		NIL = -1
		node_values = []int{}
		node_priors = []float64{}
		node_lefts = []int{}
		node_rights = []int{}
		seed = 1
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
