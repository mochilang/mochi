//go:build ignore

// Generated by Mochi v0.10.72 on 2025-08-24 17:02:28 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

var __name__ string = "__main__"

type TreeNode struct {
	Data  int `json:"data"`
	Left  int `json:"left"`
	Right int `json:"right"`
}

func count_nodes(nodes []TreeNode, idx int) int {
	if idx == 0 {
		return 0
	}
	var node TreeNode = _index(nodes, idx)
	_ = node
	_ = node
	return ((count_nodes(func(v any) []TreeNode {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]TreeNode); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []TreeNode{}
			}
			out := make([]TreeNode, len(arr))
			for i, x := range arr {
				out[i] = x.(TreeNode)
			}
			return out
		}
		return v.([]TreeNode)
	}(nodes), node.Left) + count_nodes(func(v any) []TreeNode {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]TreeNode); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []TreeNode{}
			}
			out := make([]TreeNode, len(arr))
			for i, x := range arr {
				out[i] = x.(TreeNode)
			}
			return out
		}
		return v.([]TreeNode)
	}(nodes), node.Right)) + 1)
}

func count_coins(nodes []TreeNode, idx int) int {
	if idx == 0 {
		return 0
	}
	var node TreeNode = _index(nodes, idx)
	_ = node
	_ = node
	return ((count_coins(func(v any) []TreeNode {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]TreeNode); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []TreeNode{}
			}
			out := make([]TreeNode, len(arr))
			for i, x := range arr {
				out[i] = x.(TreeNode)
			}
			return out
		}
		return v.([]TreeNode)
	}(nodes), node.Left) + count_coins(func(v any) []TreeNode {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]TreeNode); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []TreeNode{}
			}
			out := make([]TreeNode, len(arr))
			for i, x := range arr {
				out[i] = x.(TreeNode)
			}
			return out
		}
		return v.([]TreeNode)
	}(nodes), node.Right)) + node.Data)
}

var total_moves int

func iabs(x int) int {
	if x < 0 {
		return (0 - x)
	}
	return x
}

func dfs(nodes []TreeNode, idx int) int {
	if idx == 0 {
		return 0
	}
	var node TreeNode = _index(nodes, idx)
	_ = node
	var left_excess int = dfs(func(v any) []TreeNode {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]TreeNode); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []TreeNode{}
			}
			out := make([]TreeNode, len(arr))
			for i, x := range arr {
				out[i] = x.(TreeNode)
			}
			return out
		}
		return v.([]TreeNode)
	}(nodes), node.Left)
	_ = left_excess
	var right_excess int = dfs(func(v any) []TreeNode {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]TreeNode); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []TreeNode{}
			}
			out := make([]TreeNode, len(arr))
			for i, x := range arr {
				out[i] = x.(TreeNode)
			}
			return out
		}
		return v.([]TreeNode)
	}(nodes), node.Right)
	_ = right_excess
	var abs_left int = iabs(left_excess)
	_ = abs_left
	var abs_right int = iabs(right_excess)
	_ = abs_right
	total_moves = ((total_moves + abs_left) + abs_right)
	return (((node.Data + left_excess) + right_excess) - 1)
}

func distribute_coins(nodes []TreeNode, root int) int {
	if root == 0 {
		return 0
	}
	if count_nodes(func(v any) []TreeNode {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]TreeNode); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []TreeNode{}
			}
			out := make([]TreeNode, len(arr))
			for i, x := range arr {
				out[i] = x.(TreeNode)
			}
			return out
		}
		return v.([]TreeNode)
	}(nodes), root) != count_coins(func(v any) []TreeNode {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]TreeNode); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []TreeNode{}
			}
			out := make([]TreeNode, len(arr))
			for i, x := range arr {
				out[i] = x.(TreeNode)
			}
			return out
		}
		return v.([]TreeNode)
	}(nodes), root) {
		panic("The nodes number should be same as the number of coins")
	}
	total_moves = 0
	dfs(func(v any) []TreeNode {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]TreeNode); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []TreeNode{}
			}
			out := make([]TreeNode, len(arr))
			for i, x := range arr {
				out[i] = x.(TreeNode)
			}
			return out
		}
		return v.([]TreeNode)
	}(nodes), root)
	return total_moves
}

func mochiMain() {
	var example1 []TreeNode = []TreeNode{TreeNode{
		Data:  0,
		Left:  0,
		Right: 0,
	}, TreeNode{
		Data:  3,
		Left:  2,
		Right: 3,
	}, TreeNode{
		Data:  0,
		Left:  0,
		Right: 0,
	}, TreeNode{
		Data:  0,
		Left:  0,
		Right: 0,
	}}
	_ = example1
	var example2 []TreeNode = []TreeNode{TreeNode{
		Data:  0,
		Left:  0,
		Right: 0,
	}, TreeNode{
		Data:  0,
		Left:  2,
		Right: 3,
	}, TreeNode{
		Data:  3,
		Left:  0,
		Right: 0,
	}, TreeNode{
		Data:  0,
		Left:  0,
		Right: 0,
	}}
	_ = example2
	var example3 []TreeNode = []TreeNode{TreeNode{
		Data:  0,
		Left:  0,
		Right: 0,
	}, TreeNode{
		Data:  0,
		Left:  2,
		Right: 3,
	}, TreeNode{
		Data:  0,
		Left:  0,
		Right: 0,
	}, TreeNode{
		Data:  3,
		Left:  0,
		Right: 0,
	}}
	_ = example3
	fmt.Println(distribute_coins(func(v any) []TreeNode {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]TreeNode); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []TreeNode{}
			}
			out := make([]TreeNode, len(arr))
			for i, x := range arr {
				out[i] = x.(TreeNode)
			}
			return out
		}
		return v.([]TreeNode)
	}(example1), 1))
	fmt.Println(distribute_coins(func(v any) []TreeNode {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]TreeNode); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []TreeNode{}
			}
			out := make([]TreeNode, len(arr))
			for i, x := range arr {
				out[i] = x.(TreeNode)
			}
			return out
		}
		return v.([]TreeNode)
	}(example2), 1))
	fmt.Println(distribute_coins(func(v any) []TreeNode {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]TreeNode); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []TreeNode{}
			}
			out := make([]TreeNode, len(arr))
			for i, x := range arr {
				out[i] = x.(TreeNode)
			}
			return out
		}
		return v.([]TreeNode)
	}(example3), 1))
	fmt.Println(distribute_coins(func(v any) []TreeNode {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]TreeNode); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []TreeNode{}
			}
			out := make([]TreeNode, len(arr))
			for i, x := range arr {
				out[i] = x.(TreeNode)
			}
			return out
		}
		return v.([]TreeNode)
	}([]TreeNode{TreeNode{
		Data:  0,
		Left:  0,
		Right: 0,
	}}), 0))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		total_moves = 0
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
