//go:build ignore

// Generated by Mochi v0.10.72 on 2025-08-24 17:04:25 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"math/big"
	"os"
	"runtime"
	"strconv"
	"time"
)

var _ = big.NewInt

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		return
	}
	s[idx] = v
}

var __name__ string = "__main__"

type Tree struct {
	Values []int `json:"values"`
	Lefts  []int `json:"lefts"`
	Rights []int `json:"rights"`
	Root   int   `json:"root"`
}

var NIL int

func make_tree() Tree {
	return Tree{
		Values: []int{3, 9, 20, 15, 7},
		Lefts: []int{1, func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(NIL), 3, func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(NIL), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(NIL)},
		Rights: []int{2, func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(NIL), 4, func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(NIL), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(NIL)},
		Root: 0,
	}
}

func index_of(xs []int, x int) int {
	var i int = 0
	_ = i
	for i < len(xs) {
		if _index(xs, i) == x {
			return i
		}
		i = (i + 1)
	}
	return int(NIL)
}

func sort_pairs(hds []int, vals []int) {
	var i int = 0
	_ = i
	for i < len(hds) {
		var j int = i
		_ = j
		for (j > 0) && (_index(hds, (j-1)) > _index(hds, j)) {
			var hd_tmp int = _index(hds, (j - 1))
			_ = hd_tmp
			_setIndex(hds, (j - 1), _index(hds, j))
			_setIndex(hds, j, hd_tmp)
			var val_tmp int = _index(vals, (j - 1))
			_ = val_tmp
			_setIndex(vals, (j - 1), _index(vals, j))
			_setIndex(vals, j, val_tmp)
			j = (j - 1)
		}
		i = (i + 1)
	}
}

func right_view(t Tree) []int {
	var res []int = []int{}
	_ = res
	var queue []int = []int{func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(t.Root)}
	_ = queue
	for len(queue) > 0 {
		var size int = len(queue)
		_ = size
		var i int = 0
		_ = i
		for i < size {
			var idx int = _index(queue, i)
			_ = idx
			if _index(t.Lefts, idx) != int(NIL) {
				queue = append(queue, _index(t.Lefts, idx))
			}
			if _index(t.Rights, idx) != int(NIL) {
				queue = append(queue, _index(t.Rights, idx))
			}
			i = (i + 1)
		}
		res = append(res, _index(t.Values, _index(queue, (size-1))))
		queue = queue[size:len(queue)]
	}
	return res
}

func left_view(t Tree) []int {
	var res []int = []int{}
	_ = res
	var queue []int = []int{func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(t.Root)}
	_ = queue
	for len(queue) > 0 {
		var size int = len(queue)
		_ = size
		var i int = 0
		_ = i
		for i < size {
			var idx int = _index(queue, i)
			_ = idx
			if _index(t.Lefts, idx) != int(NIL) {
				queue = append(queue, _index(t.Lefts, idx))
			}
			if _index(t.Rights, idx) != int(NIL) {
				queue = append(queue, _index(t.Rights, idx))
			}
			i = (i + 1)
		}
		res = append(res, _index(t.Values, _index(queue, 0)))
		queue = queue[size:len(queue)]
	}
	return res
}

type Pair struct {
	IDx int `json:"idx"`
	Hd  int `json:"hd"`
}

func top_view(t Tree) []int {
	var hds []int = []int{}
	_ = hds
	var vals []int = []int{}
	_ = vals
	var queue_idx []int = []int{func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(t.Root)}
	_ = queue_idx
	var queue_hd []int = []int{0}
	_ = queue_hd
	for len(queue_idx) > 0 {
		var idx int = _index(queue_idx, 0)
		_ = idx
		queue_idx = queue_idx[1:len(queue_idx)]
		var hd int = _index(queue_hd, 0)
		_ = hd
		queue_hd = queue_hd[1:len(queue_hd)]
		if index_of(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(hds), hd) == int(NIL) {
			hds = append(hds, hd)
			vals = append(vals, _index(t.Values, idx))
		}
		if _index(t.Lefts, idx) != int(NIL) {
			queue_idx = append(queue_idx, _index(t.Lefts, idx))
			queue_hd = append(queue_hd, (hd - 1))
		}
		if _index(t.Rights, idx) != int(NIL) {
			queue_idx = append(queue_idx, _index(t.Rights, idx))
			queue_hd = append(queue_hd, (hd + 1))
		}
	}
	sort_pairs(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(hds), func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(vals))
	return vals
}

func bottom_view(t Tree) []int {
	var hds []int = []int{}
	_ = hds
	var vals []int = []int{}
	_ = vals
	var queue_idx []int = []int{func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(t.Root)}
	_ = queue_idx
	var queue_hd []int = []int{0}
	_ = queue_hd
	for len(queue_idx) > 0 {
		var idx int = _index(queue_idx, 0)
		_ = idx
		queue_idx = queue_idx[1:len(queue_idx)]
		var hd int = _index(queue_hd, 0)
		_ = hd
		queue_hd = queue_hd[1:len(queue_hd)]
		var pos int = index_of(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(hds), hd)
		_ = pos
		if pos == int(NIL) {
			hds = append(hds, hd)
			vals = append(vals, _index(t.Values, idx))
		} else {
			_setIndex(vals, pos, _index(t.Values, idx))
		}
		if _index(t.Lefts, idx) != int(NIL) {
			queue_idx = append(queue_idx, _index(t.Lefts, idx))
			queue_hd = append(queue_hd, (hd - 1))
		}
		if _index(t.Rights, idx) != int(NIL) {
			queue_idx = append(queue_idx, _index(t.Rights, idx))
			queue_hd = append(queue_hd, (hd + 1))
		}
	}
	sort_pairs(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(hds), func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(vals))
	return vals
}

var tree Tree

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		NIL = (0 - 1)
		tree = make_tree()
		fmt.Println(fmt.Sprint(right_view(tree)))
		fmt.Println(fmt.Sprint(left_view(tree)))
		fmt.Println(fmt.Sprint(top_view(tree)))
		fmt.Println(fmt.Sprint(bottom_view(tree)))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
