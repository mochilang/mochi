//go:build ignore

// Generated by Mochi v0.10.59 on 2025-08-07 08:27:06 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"math/big"
	"os"
	"runtime"
	"strconv"
	"strings"
	"time"
)

var _ = big.NewInt

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

type Tree struct {
	Values []int `json:"values"`
	Lefts  []int `json:"lefts"`
	Rights []int `json:"rights"`
	Root   int   `json:"root"`
}

var NIL int

func make_tree() Tree {
	return Tree{
		Values: []int{func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(3), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(9), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(20), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(15), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(7)},
		Lefts: []int{func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(1), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(NIL), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(3), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(NIL), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(NIL)},
		Rights: []int{func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(2), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(NIL), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(4), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(NIL), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(NIL)},
		Root: 0,
	}
}

func index_of(xs []int, x int) int {
	var i int = 0
	_ = i
	for i < len(xs) {
		if int(xs[i]) == x {
			return i
		}
		i = (i + 1)
	}
	return int(NIL)
}

func sort_pairs(hds []int, vals []int) {
	var i int = 0
	_ = i
	for i < len(hds) {
		var j int = i
		_ = j
		for (j > 0) && (int(hds[(j-1)]) > int(hds[j])) {
			var hd_tmp int = hds[(j - 1)]
			_ = hd_tmp
			hds[(j - 1)] = hds[j]
			hds[j] = hd_tmp
			var val_tmp int = vals[(j - 1)]
			_ = val_tmp
			vals[(j - 1)] = vals[j]
			vals[j] = val_tmp
			j = (j - 1)
		}
		i = (i + 1)
	}
}

func right_view(t Tree) []int {
	var res []int = []int{}
	_ = res
	var queue []int = []int{func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(t.Root)}
	_ = queue
	for len(queue) > 0 {
		var size int = len(queue)
		_ = size
		var i int = 0
		_ = i
		for i < size {
			var idx int = queue[i]
			_ = idx
			if int(t.Lefts[idx]) != int(NIL) {
				queue = append(queue, t.Lefts[idx])
			}
			if int(t.Rights[idx]) != int(NIL) {
				queue = append(queue, t.Rights[idx])
			}
			i = (i + 1)
		}
		res = append(res, t.Values[queue[(size-1)]])
		queue = queue[size:len(queue)]
	}
	return res
}

func left_view(t Tree) []int {
	var res []int = []int{}
	_ = res
	var queue []int = []int{func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(t.Root)}
	_ = queue
	for len(queue) > 0 {
		var size int = len(queue)
		_ = size
		var i int = 0
		_ = i
		for i < size {
			var idx int = queue[i]
			_ = idx
			if int(t.Lefts[idx]) != int(NIL) {
				queue = append(queue, t.Lefts[idx])
			}
			if int(t.Rights[idx]) != int(NIL) {
				queue = append(queue, t.Rights[idx])
			}
			i = (i + 1)
		}
		res = append(res, t.Values[queue[0]])
		queue = queue[size:len(queue)]
	}
	return res
}

type Pair struct {
	IDx int `json:"idx"`
	Hd  int `json:"hd"`
}

func top_view(t Tree) []int {
	var hds []int = []int{}
	_ = hds
	var vals []int = []int{}
	_ = vals
	var queue_idx []int = []int{func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(t.Root)}
	_ = queue_idx
	var queue_hd []int = []int{func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(0)}
	_ = queue_hd
	for len(queue_idx) > 0 {
		var idx int = queue_idx[0]
		_ = idx
		queue_idx = queue_idx[1:len(queue_idx)]
		var hd int = queue_hd[0]
		_ = hd
		queue_hd = queue_hd[1:len(queue_hd)]
		if index_of(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(hds), hd) == int(NIL) {
			hds = append(hds, hd)
			vals = append(vals, t.Values[idx])
		}
		if int(t.Lefts[idx]) != int(NIL) {
			queue_idx = append(queue_idx, t.Lefts[idx])
			queue_hd = append(queue_hd, (hd - 1))
		}
		if int(t.Rights[idx]) != int(NIL) {
			queue_idx = append(queue_idx, t.Rights[idx])
			queue_hd = append(queue_hd, (hd + 1))
		}
	}
	sort_pairs(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(hds), func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(vals))
	return vals
}

func bottom_view(t Tree) []int {
	var hds []int = []int{}
	_ = hds
	var vals []int = []int{}
	_ = vals
	var queue_idx []int = []int{func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(t.Root)}
	_ = queue_idx
	var queue_hd []int = []int{func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(0)}
	_ = queue_hd
	for len(queue_idx) > 0 {
		var idx int = queue_idx[0]
		_ = idx
		queue_idx = queue_idx[1:len(queue_idx)]
		var hd int = queue_hd[0]
		_ = hd
		queue_hd = queue_hd[1:len(queue_hd)]
		var pos int = index_of(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(hds), hd)
		_ = pos
		if pos == int(NIL) {
			hds = append(hds, hd)
			vals = append(vals, t.Values[idx])
		} else {
			vals[pos] = t.Values[idx]
		}
		if int(t.Lefts[idx]) != int(NIL) {
			queue_idx = append(queue_idx, t.Lefts[idx])
			queue_hd = append(queue_hd, (hd - 1))
		}
		if int(t.Rights[idx]) != int(NIL) {
			queue_idx = append(queue_idx, t.Rights[idx])
			queue_hd = append(queue_hd, (hd + 1))
		}
	}
	sort_pairs(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(hds), func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(vals))
	return vals
}

var tree Tree

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		NIL = -1
		tree = make_tree()
		fmt.Println(func() string {
			b, _ := json.Marshal(right_view(tree))
			s := string(b)
			s = strings.ReplaceAll(s, ":", ": ")
			s = strings.ReplaceAll(s, ",", ", ")
			s = strings.ReplaceAll(s, "}, {", "},{")
			return s
		}())
		fmt.Println(func() string {
			b, _ := json.Marshal(left_view(tree))
			s := string(b)
			s = strings.ReplaceAll(s, ":", ": ")
			s = strings.ReplaceAll(s, ",", ", ")
			s = strings.ReplaceAll(s, "}, {", "},{")
			return s
		}())
		fmt.Println(func() string {
			b, _ := json.Marshal(top_view(tree))
			s := string(b)
			s = strings.ReplaceAll(s, ":", ": ")
			s = strings.ReplaceAll(s, ",", ", ")
			s = strings.ReplaceAll(s, "}, {", "},{")
			return s
		}())
		fmt.Println(func() string {
			b, _ := json.Marshal(bottom_view(tree))
			s := string(b)
			s = strings.ReplaceAll(s, ":", ": ")
			s = strings.ReplaceAll(s, ",", ", ")
			s = strings.ReplaceAll(s, "}, {", "},{")
			return s
		}())
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
