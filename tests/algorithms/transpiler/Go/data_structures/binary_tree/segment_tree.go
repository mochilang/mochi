//go:build ignore

// Generated by Mochi v0.10.72 on 2025-08-24 17:04:50 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		return
	}
	s[idx] = v
}

var __name__ string = "__main__"

var A []int

var N int

var st []int

func left_child(idx int) int {
	return (idx * 2)
}

func right_child(idx int) int {
	return ((idx * 2) + 1)
}

func build(idx int, left int, right int) {
	if left == right {
		_setIndex(st, idx, _index(A, left))
	} else {
		var mid int = ((left + right) / 2)
		_ = mid
		build(left_child(idx), left, mid)
		build(right_child(idx), (mid + 1), right)
		var left_val int = _index(st, left_child(idx))
		_ = left_val
		var right_val int = _index(st, right_child(idx))
		_ = right_val
		_setIndex(st, idx, func() int {
			if left_val > right_val {
				return left_val
			} else {
				return right_val
			}
		}())
	}
}

func update_recursive(idx int, left int, right int, a int, b int, val int) bool {
	if (right < a) || (left > b) {
		return true
	}
	if left == right {
		_setIndex(st, idx, val)
		return true
	}
	var mid int = ((left + right) / 2)
	_ = mid
	update_recursive(left_child(idx), left, mid, a, b, val)
	update_recursive(right_child(idx), (mid + 1), right, a, b, val)
	var left_val int = _index(st, left_child(idx))
	_ = left_val
	var right_val int = _index(st, right_child(idx))
	_ = right_val
	_setIndex(st, idx, func() int {
		if left_val > right_val {
			return left_val
		} else {
			return right_val
		}
	}())
	return true
}

func update(a int, b int, val int) bool {
	return update_recursive(1, 0, (N - 1), (a - 1), (b - 1), val)
}

var NEG_INF int

func query_recursive(idx int, left int, right int, a int, b int) int {
	if (right < a) || (left > b) {
		return NEG_INF
	}
	if (left >= a) && (right <= b) {
		return _index(st, idx)
	}
	var mid int = ((left + right) / 2)
	_ = mid
	var q1 int = query_recursive(left_child(idx), left, mid, a, b)
	_ = q1
	_ = q1
	var q2 int = query_recursive(right_child(idx), (mid + 1), right, a, b)
	_ = q2
	_ = q2
	return func() int {
		if q1 > q2 {
			return q1
		} else {
			return q2
		}
	}()
}

func query(a int, b int) int {
	return query_recursive(1, 0, (N - 1), (a - 1), (b - 1))
}

func show_data() {
	var i int = 0
	_ = i
	var show_list []int = []int{}
	_ = show_list
	for i < N {
		show_list = append(show_list, query((i+1), (i+1)))
		i = (i + 1)
	}
	fmt.Println(fmt.Sprint(show_list))
}

func mochiMain() {
	A = []int{1, 2, func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}((0 - 4)), 7, 3, func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}((0 - 5)), 6, 11, func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}((0 - 20)), 9, 14, 15, 5, 2, func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}((0 - 8))}
	N = len(A)
	var i int = 0
	_ = i
	for i < (4 * N) {
		st = append(st, 0)
		i = (i + 1)
	}
	if N > 0 {
		build(1, 0, (N - 1))
	}
	fmt.Println(query(4, 6))
	fmt.Println(query(7, 11))
	fmt.Println(query(7, 12))
	update(1, 3, 111)
	fmt.Println(query(1, 15))
	update(7, 8, 235)
	show_data()
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		A = []int{}
		N = 0
		st = []int{}
		NEG_INF = (0 - 1000000000)
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
