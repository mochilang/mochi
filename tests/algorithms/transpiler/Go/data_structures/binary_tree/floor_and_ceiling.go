//go:build ignore

// Generated by Mochi v0.10.59 on 2025-08-07 08:27:12 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _concat[T any](a, b []T) []T {
	return append(append([]T{}, a...), b...)
}

type Node struct {
	Key   int `json:"key"`
	Left  int `json:"left"`
	Right int `json:"right"`
}

func inorder(nodes []Node, idx int) []int {
	if idx == (0 - 1) {
		return func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}([]int{})
	}
	var node Node = nodes[idx]
	_ = node
	var result []int = inorder(func(v any) []Node {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]Node); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []Node{}
			}
			out := make([]Node, len(arr))
			for i, x := range arr {
				out[i] = x.(Node)
			}
			return out
		}
		return v.([]Node)
	}(nodes), node.Left)
	_ = result
	result = append(result, node.Key)
	result = _concat(result, inorder(func(v any) []Node {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]Node); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []Node{}
			}
			out := make([]Node, len(arr))
			for i, x := range arr {
				out[i] = x.(Node)
			}
			return out
		}
		return v.([]Node)
	}(nodes), node.Right))
	return result
}

func floor_ceiling(nodes []Node, idx int, key int) []int {
	var floor_val any = nil
	_ = floor_val
	var ceiling_val any = nil
	_ = ceiling_val
	var current int = idx
	_ = current
	for current != (0 - 1) {
		var node Node = nodes[current]
		_ = node
		if node.Key == key {
			floor_val = node.Key
			ceiling_val = node.Key
			break
		}
		if key < node.Key {
			ceiling_val = node.Key
			current = node.Left
		} else {
			floor_val = node.Key
			current = node.Right
		}
	}
	return func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}([]int{func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(floor_val), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(ceiling_val)})
}

var tree []Node

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		tree = []Node{Node{
			Key:   10,
			Left:  1,
			Right: 2,
		}, Node{
			Key:   5,
			Left:  3,
			Right: 4,
		}, Node{
			Key:   20,
			Left:  5,
			Right: 6,
		}, Node{
			Key:   3,
			Left:  (0 - 1),
			Right: (0 - 1),
		}, Node{
			Key:   7,
			Left:  (0 - 1),
			Right: (0 - 1),
		}, Node{
			Key:   15,
			Left:  (0 - 1),
			Right: (0 - 1),
		}, Node{
			Key:   25,
			Left:  (0 - 1),
			Right: (0 - 1),
		}}
		fmt.Println(fmt.Sprint(inorder(func(v any) []Node {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]Node); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []Node{}
				}
				out := make([]Node, len(arr))
				for i, x := range arr {
					out[i] = x.(Node)
				}
				return out
			}
			return v.([]Node)
		}(tree), 0)))
		fmt.Println(fmt.Sprint(floor_ceiling(func(v any) []Node {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]Node); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []Node{}
				}
				out := make([]Node, len(arr))
				for i, x := range arr {
					out[i] = x.(Node)
				}
				return out
			}
			return v.([]Node)
		}(tree), 0, 8)))
		fmt.Println(fmt.Sprint(floor_ceiling(func(v any) []Node {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]Node); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []Node{}
				}
				out := make([]Node, len(arr))
				for i, x := range arr {
					out[i] = x.(Node)
				}
				return out
			}
			return v.([]Node)
		}(tree), 0, 14)))
		fmt.Println(fmt.Sprint(floor_ceiling(func(v any) []Node {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]Node); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []Node{}
				}
				out := make([]Node, len(arr))
				for i, x := range arr {
					out[i] = x.(Node)
				}
				return out
			}
			return v.([]Node)
		}(tree), 0, (0 - 1))))
		fmt.Println(fmt.Sprint(floor_ceiling(func(v any) []Node {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]Node); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []Node{}
				}
				out := make([]Node, len(arr))
				for i, x := range arr {
					out[i] = x.(Node)
				}
				return out
			}
			return v.([]Node)
		}(tree), 0, 30)))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
