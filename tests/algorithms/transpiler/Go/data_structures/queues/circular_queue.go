//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-14 22:00:30 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _mod(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	s[idx] = v
}

type CircularQueue struct {
	Data     []int `json:"data"`
	Front    int   `json:"front"`
	Rear     int   `json:"rear"`
	Size     int   `json:"size"`
	Capacity int   `json:"capacity"`
}

func create_queue(capacity int) CircularQueue {
	var arr []int = []int{}
	_ = arr
	var i int = 0
	_ = i
	for i < capacity {
		arr = append(arr, 0)
		i = (i + 1)
	}
	return CircularQueue{
		Data:     arr,
		Front:    0,
		Rear:     0,
		Size:     0,
		Capacity: capacity,
	}
}

func length(q CircularQueue) int {
	return q.Size
}

func is_empty(q CircularQueue) bool {
	return (q.Size == 0)
}

func front(q CircularQueue) int {
	if is_empty(q) {
		return 0
	}
	return _index(q.Data, q.Front)
}

func enqueue(q CircularQueue, value int) CircularQueue {
	if q.Size >= q.Capacity {
		panic("QUEUE IS FULL")
	}
	var arr []int = q.Data
	_ = arr
	_setIndex(arr, q.Rear, value)
	q.Data = arr
	q.Rear = _mod((q.Rear + 1), q.Capacity)
	q.Size = (q.Size + 1)
	return q
}

type DequeueResult struct {
	Queue CircularQueue `json:"queue"`
	Value int           `json:"value"`
}

func dequeue(q CircularQueue) DequeueResult {
	if q.Size == 0 {
		panic("UNDERFLOW")
	}
	var value int = _index(q.Data, q.Front)
	_ = value
	_ = value
	var arr2 []int = q.Data
	_ = arr2
	_setIndex(arr2, q.Front, 0)
	q.Data = arr2
	q.Front = _mod((q.Front + 1), q.Capacity)
	q.Size = (q.Size - 1)
	return DequeueResult{
		Queue: q,
		Value: value,
	}
}

func mochiMain() {
	var q CircularQueue = create_queue(5)
	_ = q
	fmt.Println(is_empty(q))
	q = enqueue(q, 10)
	fmt.Println(is_empty(q))
	q = enqueue(q, 20)
	q = enqueue(q, 30)
	fmt.Println(front(q))
	var r DequeueResult = dequeue(q)
	_ = r
	q = r.Queue
	fmt.Println(r.Value)
	fmt.Println(front(q))
	fmt.Println(length(q))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
