//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-14 22:00:34 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

type Deque struct {
	Data []int `json:"data"`
}

func empty_deque() Deque {
	return Deque{
		Data: []int{},
	}
}

func push_back(dq Deque, value int) Deque {
	return Deque{
		Data: append(dq.Data, value),
	}
}

func push_front(dq Deque, value int) Deque {
	var res []int = []int{func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(value)}
	_ = res
	var i int = 0
	_ = i
	for i < len(dq.Data) {
		res = append(res, _index(dq.Data, i))
		i = (i + 1)
	}
	return Deque{
		Data: res,
	}
}

func extend_back(dq Deque, values []int) Deque {
	var res []int = dq.Data
	_ = res
	var i int = 0
	_ = i
	for i < len(values) {
		res = append(res, _index(values, i))
		i = (i + 1)
	}
	return Deque{
		Data: res,
	}
}

func extend_front(dq Deque, values []int) Deque {
	var res []int = []int{}
	_ = res
	var i int = (len(values) - 1)
	_ = i
	for i >= 0 {
		res = append(res, _index(values, i))
		i = (i - 1)
	}
	var j int = 0
	_ = j
	for j < len(dq.Data) {
		res = append(res, _index(dq.Data, j))
		j = (j + 1)
	}
	return Deque{
		Data: res,
	}
}

type PopResult struct {
	Deque Deque `json:"deque"`
	Value int   `json:"value"`
}

func pop_back(dq Deque) PopResult {
	if len(dq.Data) == 0 {
		panic("pop from empty deque")
	}
	var res []int = []int{}
	_ = res
	var i int = 0
	_ = i
	for i < (len(dq.Data) - 1) {
		res = append(res, _index(dq.Data, i))
		i = (i + 1)
	}
	return PopResult{
		Deque: Deque{
			Data: res,
		},
		Value: _index(dq.Data, (len(dq.Data) - 1)),
	}
}

func pop_front(dq Deque) PopResult {
	if len(dq.Data) == 0 {
		panic("popleft from empty deque")
	}
	var res []int = []int{}
	_ = res
	var i int = 1
	_ = i
	for i < len(dq.Data) {
		res = append(res, _index(dq.Data, i))
		i = (i + 1)
	}
	return PopResult{
		Deque: Deque{
			Data: res,
		},
		Value: _index(dq.Data, 0),
	}
}

func is_empty(dq Deque) bool {
	return (len(dq.Data) == 0)
}

func length(dq Deque) int {
	return len(dq.Data)
}

func to_string(dq Deque) string {
	if len(dq.Data) == 0 {
		return "[]"
	}
	var s string = ("[" + fmt.Sprint(_index(dq.Data, 0)))
	_ = s
	var i int = 1
	_ = i
	for i < len(dq.Data) {
		s = ((s + ", ") + fmt.Sprint(_index(dq.Data, i)))
		i = (i + 1)
	}
	return (s + "]")
}

func mochiMain() {
	var dq Deque = empty_deque()
	_ = dq
	dq = push_back(dq, 2)
	dq = push_front(dq, 1)
	dq = extend_back(dq, func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}([]int{3, 4}))
	dq = extend_front(dq, func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}([]int{0}))
	fmt.Println(to_string(dq))
	var r PopResult = pop_back(dq)
	_ = r
	dq = r.Deque
	fmt.Println(r.Value)
	r = pop_front(dq)
	dq = r.Deque
	fmt.Println(r.Value)
	fmt.Println(to_string(dq))
	fmt.Println(is_empty(empty_deque()))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
