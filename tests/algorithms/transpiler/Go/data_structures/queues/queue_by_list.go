//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-14 22:00:40 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

type Queue struct {
	Entries []int `json:"entries"`
}

type GetResult struct {
	Queue Queue `json:"queue"`
	Value int   `json:"value"`
}

func new_queue(items []int) Queue {
	return Queue{
		Entries: items,
	}
}

func len_queue(q Queue) int {
	return len(q.Entries)
}

func str_queue(q Queue) string {
	var s string = "Queue(("
	_ = s
	var i int = 0
	_ = i
	for i < len(q.Entries) {
		s = (s + fmt.Sprint(_index(q.Entries, i)))
		if i < (len(q.Entries) - 1) {
			s = (s + ", ")
		}
		i = (i + 1)
	}
	s = (s + "))")
	return s
}

func put(q Queue, item int) Queue {
	var e []int = q.Entries
	_ = e
	e = append(e, item)
	return Queue{
		Entries: e,
	}
}

func get(q Queue) GetResult {
	if len(q.Entries) == 0 {
		panic("Queue is empty")
	}
	var value int = _index(q.Entries, 0)
	_ = value
	_ = value
	var new_entries []int = []int{}
	_ = new_entries
	var i int = 1
	_ = i
	for i < len(q.Entries) {
		new_entries = append(new_entries, _index(q.Entries, i))
		i = (i + 1)
	}
	return GetResult{
		Queue: Queue{
			Entries: new_entries,
		},
		Value: value,
	}
}

func rotate(q Queue, rotation int) Queue {
	var e []int = q.Entries
	_ = e
	var r int = 0
	_ = r
	for r < rotation {
		if len(e) > 0 {
			var first int = _index(e, 0)
			_ = first
			var rest []int = []int{}
			_ = rest
			var i int = 1
			_ = i
			for i < len(e) {
				rest = append(rest, _index(e, i))
				i = (i + 1)
			}
			rest = append(rest, first)
			e = rest
		}
		r = (r + 1)
	}
	return Queue{
		Entries: e,
	}
}

func get_front(q Queue) int {
	return _index(q.Entries, 0)
}

var q Queue

var res GetResult

var front int

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		q = new_queue(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}([]int{}))
		fmt.Println(len_queue(q))
		q = put(q, 10)
		q = put(q, 20)
		q = put(q, 30)
		q = put(q, 40)
		fmt.Println(str_queue(q))
		res = get(q)
		q = res.Queue
		fmt.Println(res.Value)
		fmt.Println(str_queue(q))
		q = rotate(q, 2)
		fmt.Println(str_queue(q))
		front = get_front(q)
		fmt.Println(front)
		fmt.Println(str_queue(q))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
