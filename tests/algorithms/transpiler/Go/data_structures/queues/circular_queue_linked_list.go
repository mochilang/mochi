//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-14 22:00:32 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _mod(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	s[idx] = v
}

type CircularQueue struct {
	Data  []string `json:"data"`
	Next  []int    `json:"next"`
	Prev  []int    `json:"prev"`
	Front int      `json:"front"`
	Rear  int      `json:"rear"`
}

type DequeueResult struct {
	Queue CircularQueue `json:"queue"`
	Value string        `json:"value"`
}

func create_queue(capacity int) CircularQueue {
	var data []string = []string{}
	_ = data
	var next []int = []int{}
	_ = next
	var prev []int = []int{}
	_ = prev
	var i int = 0
	_ = i
	for i < capacity {
		data = append(data, "")
		next = append(next, _mod((i+1), capacity))
		prev = append(prev, _mod(((i-1)+capacity), capacity))
		i = (i + 1)
	}
	return CircularQueue{
		Data:  data,
		Next:  next,
		Prev:  prev,
		Front: 0,
		Rear:  0,
	}
}

func is_empty(q CircularQueue) bool {
	return ((q.Front == q.Rear) && (_index(q.Data, q.Front) == ""))
}

func check_can_perform(q CircularQueue) {
	if is_empty(q) {
		panic("Empty Queue")
	}
}

func check_is_full(q CircularQueue) {
	if int(_index(q.Next, q.Rear)) == q.Front {
		panic("Full Queue")
	}
}

func peek(q CircularQueue) string {
	check_can_perform(q)
	return _index(q.Data, q.Front)
}

func enqueue(q CircularQueue, value string) CircularQueue {
	check_is_full(q)
	if !is_empty(q) {
		q.Rear = _index(q.Next, q.Rear)
	}
	var data []string = q.Data
	_ = data
	_setIndex(data, q.Rear, value)
	q.Data = data
	return q
}

func dequeue(q CircularQueue) DequeueResult {
	check_can_perform(q)
	var data []string = q.Data
	_ = data
	var val string = _index(data, q.Front)
	_ = val
	_ = val
	_setIndex(data, q.Front, "")
	q.Data = data
	if q.Front != q.Rear {
		q.Front = _index(q.Next, q.Front)
	}
	return DequeueResult{
		Queue: q,
		Value: val,
	}
}

func mochiMain() {
	var q CircularQueue = create_queue(3)
	_ = q
	fmt.Println(fmt.Sprint(is_empty(q)))
	q = enqueue(q, "a")
	q = enqueue(q, "b")
	fmt.Println(peek(q))
	var res DequeueResult = dequeue(q)
	_ = res
	q = res.Queue
	fmt.Println(res.Value)
	res = dequeue(q)
	q = res.Queue
	fmt.Println(res.Value)
	fmt.Println(fmt.Sprint(is_empty(q)))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
