//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-14 22:00:44 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

type Queue struct {
	Stack  []int `json:"stack"`
	Length int   `json:"length"`
}

func empty_queue() Queue {
	return Queue{
		Stack:  []int{},
		Length: 0,
	}
}

func put(q Queue, item int) Queue {
	var s []int = append(q.Stack, item)
	_ = s
	_ = s
	return Queue{
		Stack:  s,
		Length: (q.Length + 1),
	}
}

func drop_first(xs []int) []int {
	var res []int = []int{}
	_ = res
	var i int = 1
	_ = i
	for i < len(xs) {
		res = append(res, _index(xs, i))
		i = (i + 1)
	}
	return res
}

func drop_last(xs []int) []int {
	var res []int = []int{}
	_ = res
	var i int = 0
	_ = i
	for i < (len(xs) - 1) {
		res = append(res, _index(xs, i))
		i = (i + 1)
	}
	return res
}

func rotate(q Queue, rotation int) Queue {
	var s []int = q.Stack
	_ = s
	var i int = 0
	_ = i
	for (i < rotation) && (len(s) > 0) {
		var temp int = _index(s, 0)
		_ = temp
		s = drop_first(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(s))
		s = append(s, temp)
		i = (i + 1)
	}
	return Queue{
		Stack:  s,
		Length: q.Length,
	}
}

type GetResult struct {
	Queue Queue `json:"queue"`
	Value int   `json:"value"`
}

func get(q Queue) GetResult {
	if q.Length == 0 {
		panic("queue empty")
	}
	var q1 Queue = rotate(q, 1)
	_ = q1
	var v int = _index(q1.Stack, (q1.Length - 1))
	_ = v
	_ = v
	var s []int = drop_last(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(q1.Stack))
	_ = s
	var q2 Queue = Queue{
		Stack:  s,
		Length: q1.Length,
	}
	_ = q2
	q2 = rotate(q2, (q2.Length - 1))
	q2 = Queue{
		Stack:  q2.Stack,
		Length: (q2.Length - 1),
	}
	return GetResult{
		Queue: q2,
		Value: v,
	}
}

type FrontResult struct {
	Queue Queue `json:"queue"`
	Value int   `json:"value"`
}

func front(q Queue) FrontResult {
	var r GetResult = get(q)
	_ = r
	var q2 Queue = put(r.Queue, r.Value)
	_ = q2
	q2 = rotate(q2, (q2.Length - 1))
	return FrontResult{
		Queue: q2,
		Value: r.Value,
	}
}

func size(q Queue) int {
	return q.Length
}

func to_string(q Queue) string {
	var s string = "<"
	_ = s
	if q.Length > 0 {
		s = (s + fmt.Sprint(_index(q.Stack, 0)))
		var i int = 1
		_ = i
		for i < q.Length {
			s = ((s + ", ") + fmt.Sprint(_index(q.Stack, i)))
			i = (i + 1)
		}
	}
	s = (s + ">")
	return s
}

func mochiMain() {
	var q Queue = empty_queue()
	_ = q
	q = put(q, 1)
	q = put(q, 2)
	q = put(q, 3)
	fmt.Println(to_string(q))
	var g GetResult = get(q)
	_ = g
	q = g.Queue
	fmt.Println(g.Value)
	fmt.Println(to_string(q))
	var f FrontResult = front(q)
	_ = f
	q = f.Queue
	fmt.Println(f.Value)
	fmt.Println(to_string(q))
	fmt.Println(size(q))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
