//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-14 22:00:42 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

type Queue struct {
	Stack1 []int `json:"stack1"`
	Stack2 []int `json:"stack2"`
}

type GetResult struct {
	Queue Queue `json:"queue"`
	Value int   `json:"value"`
}

func new_queue(items []int) Queue {
	return Queue{
		Stack1: items,
		Stack2: []int{},
	}
}

func len_queue(q Queue) int {
	return (len(q.Stack1) + len(q.Stack2))
}

func str_queue(q Queue) string {
	var items []int = []int{}
	_ = items
	var i int = (len(q.Stack2) - 1)
	_ = i
	for i >= 0 {
		items = append(items, _index(q.Stack2, i))
		i = (i - 1)
	}
	var j int = 0
	_ = j
	for j < len(q.Stack1) {
		items = append(items, _index(q.Stack1, j))
		j = (j + 1)
	}
	var s string = "Queue(("
	_ = s
	var k int = 0
	_ = k
	for k < len(items) {
		s = (s + fmt.Sprint(_index(items, k)))
		if k < (len(items) - 1) {
			s = (s + ", ")
		}
		k = (k + 1)
	}
	s = (s + "))")
	return s
}

func put(q Queue, item int) Queue {
	var s1 []int = q.Stack1
	_ = s1
	s1 = append(s1, item)
	return Queue{
		Stack1: s1,
		Stack2: q.Stack2,
	}
}

func get(q Queue) GetResult {
	var s1 []int = q.Stack1
	_ = s1
	var s2 []int = q.Stack2
	_ = s2
	if len(s2) == 0 {
		for len(s1) > 0 {
			var idx int = (len(s1) - 1)
			_ = idx
			var v int = _index(s1, idx)
			_ = v
			var new_s1 []int = []int{}
			_ = new_s1
			var i int = 0
			_ = i
			for i < idx {
				new_s1 = append(new_s1, _index(s1, i))
				i = (i + 1)
			}
			s1 = new_s1
			s2 = append(s2, v)
		}
	}
	if len(s2) == 0 {
		panic("Queue is empty")
	}
	var idx2 int = (len(s2) - 1)
	_ = idx2
	var value int = _index(s2, idx2)
	_ = value
	_ = value
	var new_s2 []int = []int{}
	_ = new_s2
	var j int = 0
	_ = j
	for j < idx2 {
		new_s2 = append(new_s2, _index(s2, j))
		j = (j + 1)
	}
	s2 = new_s2
	return GetResult{
		Queue: Queue{
			Stack1: s1,
			Stack2: s2,
		},
		Value: value,
	}
}

var q Queue

var r1 GetResult

var r2 GetResult

var r3 GetResult

var r4 GetResult

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		q = new_queue(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}([]int{10, 20, 30}))
		r1 = get(q)
		q = r1.Queue
		fmt.Println(r1.Value)
		q = put(q, 40)
		r2 = get(q)
		q = r2.Queue
		fmt.Println(r2.Value)
		r3 = get(q)
		q = r3.Queue
		fmt.Println(r3.Value)
		fmt.Println(len_queue(q))
		r4 = get(q)
		q = r4.Queue
		fmt.Println(r4.Value)
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
