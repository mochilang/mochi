//go:build ignore

// Generated by Mochi v0.10.73 on 2025-08-25 23:59:57 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		return
	}
	s[idx] = v
}

var __name__ string = "__main__"

func solution(pence int) int {
	var coins []int = []int{1, 2, 5, 10, 20, 50, 100, 200}
	_ = coins
	var ways []int = []int{}
	_ = ways
	var i int = 0
	_ = i
	for i <= pence {
		ways = append(ways, 0)
		i = (i + 1)
	}
	_setIndex(ways, 0, 1)
	var idx int = 0
	_ = idx
	for idx < len(coins) {
		var coin int = _index(coins, idx)
		_ = coin
		var j int = coin
		_ = j
		for j <= pence {
			_setIndex(ways, j, (_index(ways, j) + _index(ways, (j-coin))))
			j = (j + 1)
		}
		idx = (idx + 1)
	}
	return _index(ways, pence)
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(solution(500))
		fmt.Println(solution(200))
		fmt.Println(solution(50))
		fmt.Println(solution(10))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
