//go:build ignore

// Generated by Mochi v0.10.64 on 2025-08-12 12:36:05 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

var N string

func str_eval(s string) int {
	var product int = 1
	_ = product
	var i int = 0
	_ = i
	for i < len(s) {
		product = (product * func() int { n, _ := strconv.Atoi(fmt.Sprint(string([]rune(s)[i:(i + 1)]))); return n }())
		i = (i + 1)
	}
	return product
}

func solution(n string) int {
	var largest_product int = (0 - 1)
	_ = largest_product
	var substr string = string([]rune(n)[0:13])
	_ = substr
	var cur_index int = 13
	_ = cur_index
	for cur_index < (len(n) - 13) {
		if func() int { n, _ := strconv.Atoi(fmt.Sprint(string([]rune(n)[cur_index:(cur_index + 1)]))); return n }() >= func() int { n, _ := strconv.Atoi(fmt.Sprint(string([]rune(substr)[0:1]))); return n }() {
			substr = (string([]rune(substr)[1:len(substr)]) + string([]rune(n)[cur_index:(cur_index+1)]))
			cur_index = (cur_index + 1)
		} else {
			var prod int = str_eval(substr)
			_ = prod
			if prod > largest_product {
				largest_product = prod
			}
			substr = string([]rune(n)[cur_index:(cur_index + 13)])
			cur_index = (cur_index + 13)
		}
	}
	return largest_product
}

func mochiMain() {
	var res int = solution(N)
	_ = res
	fmt.Println(("solution() = " + fmt.Sprint(res)))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		N = ((((((((((((((((((("73167176531330624919225119674426574742355349194934" + "96983520312774506326239578318016984801869478851843") + "85861560789112949495459501737958331952853208805511") + "12540698747158523863050715693290963295227443043557") + "66896648950445244523161731856403098711121722383113") + "62229893423380308135336276614282806444486645238749") + "30358907296290491560440772390713810515859307960866") + "70172427121883998797908792274921901699720888093776") + "65727333001053367881220235421809751254540594752243") + "52584907711670556013604839586446706324415722155397") + "53697817977846174064955149290862569321978468622482") + "83972241375657056057490261407972968652414535100474") + "82166370484403199890008895243450658541227588666881") + "16427171479924442928230863465674813919123162824586") + "17866458359124566529476545682848912883142607690042") + "24219022671055626321111109370544217506941658960408") + "07198403850962455444362981230987879927244284909188") + "84580156166097919133875499200524063689912560717606") + "05886116467109405077541002256983155200055935729725") + "71636269561882670428252483600823257530420752963450")
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
