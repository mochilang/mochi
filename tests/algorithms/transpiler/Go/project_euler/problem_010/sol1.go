//go:build ignore

// Generated by Mochi v0.10.70 on 2025-08-23 15:03:22 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

func _modi(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

var __name__ string = "__main__"

func is_prime(number int) bool {
	if number < 2 {
		return false
	}
	if number < 4 {
		return true
	}
	if (_modi(number, 2) == 0) || (_modi(number, 3) == 0) {
		return false
	}
	var i int = 5
	_ = i
	for (i * i) <= number {
		if (_modi(number, i) == 0) || (_modi(number, (i+2)) == 0) {
			return false
		}
		i = (i + 6)
	}
	return true
}

func solution(n int) int {
	if n <= 2 {
		return 0
	}
	var total int = 2
	_ = total
	var num int = 3
	_ = num
	for num < n {
		if is_prime(num) {
			total = (total + num)
		}
		num = (num + 2)
	}
	return total
}

var result int

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		result = solution(1000)
		fmt.Println(("solution() = " + fmt.Sprint(result)))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
