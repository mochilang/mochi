//go:build ignore

// Generated by Mochi v0.10.69 on 2025-08-22 14:24:54 GMT+7
package main

import (
	"bufio"
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

var _scanner = bufio.NewScanner(os.Stdin)

func _input() string {
	if !_scanner.Scan() {
		return ""
	}
	return _scanner.Text()
}

func _modi(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		return
	}
	s[idx] = v
}

func solution(n int) int {
	var counters []int
	_ = counters
	var i int = 0
	_ = i
	for i <= n {
		counters = append(counters, 0)
		i = (i + 1)
	}
	_setIndex(counters, 1, 1)
	var largest_number int = 1
	_ = largest_number
	var pre_counter int = 1
	_ = pre_counter
	var start int = 2
	_ = start
	for start < n {
		var number int = start
		_ = number
		var counter int = 0
		_ = counter
		for {
			if (number < len(counters)) && (_index(counters, number) != 0) {
				counter = (counter + _index(counters, number))
				break
			}
			if _modi(number, 2) == 0 {
				number = (number / 2)
			} else {
				number = ((3 * number) + 1)
			}
			counter = (counter + 1)
		}
		if (start < len(counters)) && (_index(counters, start) == 0) {
			_setIndex(counters, start, counter)
		}
		if counter > pre_counter {
			largest_number = start
			pre_counter = counter
		}
		start = (start + 1)
	}
	return largest_number
}

var input_str string

var n int

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		input_str = _input()
		n = func() int { n, _ := strconv.Atoi(fmt.Sprint(input_str)); return n }()
		fmt.Println(fmt.Sprint(solution(n)))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
