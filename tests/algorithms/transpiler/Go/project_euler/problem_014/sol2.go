//go:build ignore

// Generated by Mochi v0.10.69 on 2025-08-22 14:24:56 GMT+7
package main

import (
	"bufio"
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

var _scanner = bufio.NewScanner(os.Stdin)

func _input() string {
	if !_scanner.Scan() {
		return ""
	}
	return _scanner.Text()
}

func _modi(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

var collatz_cache map[int]int

func collatz_length(n int) int {
	var num int = n
	_ = num
	var sequence []int = []int{}
	_ = sequence
	for !func() bool { _, ok := collatz_cache[num]; return ok }() {
		sequence = append(sequence, num)
		if _modi(num, 2) == 0 {
			num = int((num / 2))
		} else {
			num = ((3 * num) + 1)
		}
	}
	var length int = collatz_cache[num]
	_ = length
	var i int = (len(sequence) - 1)
	_ = i
	for i >= 0 {
		length = (length + 1)
		collatz_cache[_index(sequence, i)] = length
		i = (i - 1)
	}
	return length
}

func solution(limit int) int {
	var max_len int = 0
	_ = max_len
	var max_start int = 1
	_ = max_start
	var i int = 1
	_ = i
	for i < limit {
		var length int = collatz_length(i)
		_ = length
		if length > max_len {
			max_len = length
			max_start = i
		}
		i = (i + 1)
	}
	return max_start
}

var input_str string

var limit int

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		collatz_cache = map[int]int{1: 1}
		input_str = _input()
		limit = func() int { n, _ := strconv.Atoi(fmt.Sprint(input_str)); return n }()
		fmt.Println(solution(limit))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
