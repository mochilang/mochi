//go:build ignore

// Generated by Mochi v0.10.70 on 2025-08-22 15:34:14 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

func pow(base int, exponent int) int {
	var result int = 1
	_ = result
	var i int = 0
	_ = i
	for i < exponent {
		result = (result * base)
		i = (i + 1)
	}
	return result
}

func num_digits(n int) int {
	if n == 0 {
		return 1
	}
	var count int = 0
	_ = count
	var x int = n
	_ = x
	for x > 0 {
		x = (x / 10)
		count = (count + 1)
	}
	return count
}

func solution(max_base int, max_power int) int {
	var total int = 0
	_ = total
	var base int = 1
	_ = base
	for base < max_base {
		var power int = 1
		_ = power
		for power < max_power {
			var digits int = num_digits(pow(base, power))
			_ = digits
			if digits == power {
				total = (total + 1)
			}
			power = (power + 1)
		}
		base = (base + 1)
	}
	return total
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(("solution(10, 22) = " + fmt.Sprint(solution(10, 22))))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
