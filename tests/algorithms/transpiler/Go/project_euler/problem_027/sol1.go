//go:build ignore

// Generated by Mochi v0.10.73 on 2025-08-25 23:59:51 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

func _modi(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

var __name__ string = "__main__"

func is_prime(number int) bool {
	if (1 < number) && (number < 4) {
		return true
	} else {
		if ((number < 2) || (_modi(number, 2) == 0)) || (_modi(number, 3) == 0) {
			return false
		}
	}
	var i int = 5
	_ = i
	for (i * i) <= number {
		if (_modi(number, i) == 0) || (_modi(number, (i+2)) == 0) {
			return false
		}
		i = (i + 6)
	}
	return true
}

func solution(a_limit int, b_limit int) int {
	var longest_len int = 0
	_ = longest_len
	var longest_a int = 0
	_ = longest_a
	var longest_b int = 0
	_ = longest_b
	var a int = (((0 - 1) * a_limit) + 1)
	_ = a
	for a < a_limit {
		var b int = 2
		_ = b
		for b < b_limit {
			if is_prime(b) {
				var count int = 0
				_ = count
				var n int = 0
				_ = n
				for is_prime((((n * n) + (a * n)) + b)) {
					count = (count + 1)
					n = (n + 1)
				}
				if count > longest_len {
					longest_len = count
					longest_a = a
					longest_b = b
				}
			}
			b = (b + 1)
		}
		a = (a + 1)
	}
	return (longest_a * longest_b)
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(fmt.Sprint(solution(1000, 1000)))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
