//go:build ignore

// Generated by Mochi v0.10.70 on 2025-08-22 15:34:28 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

func _modi(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func solution(numerator int, denominator int, limit int) int {
	var maxNumerator int = 0
	_ = maxNumerator
	var maxDenominator int = 1
	_ = maxDenominator
	var currentDenominator int = 1
	_ = currentDenominator
	for currentDenominator <= limit {
		var currentNumerator int = ((currentDenominator * numerator) / denominator)
		_ = currentNumerator
		if _modi(currentDenominator, denominator) == 0 {
			currentNumerator = (currentNumerator - 1)
		}
		if (currentNumerator * maxDenominator) > (currentDenominator * maxNumerator) {
			maxNumerator = currentNumerator
			maxDenominator = currentDenominator
		}
		currentDenominator = (currentDenominator + 1)
	}
	return maxNumerator
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(fmt.Sprint(solution(3, 7, 1000000)))
		fmt.Println(fmt.Sprint(solution(3, 7, 8)))
		fmt.Println(fmt.Sprint(solution(6, 7, 60)))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
