//go:build ignore

// Generated by Mochi v0.10.70 on 2025-08-22 15:32:25 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"reflect"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

func _modi(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func int_sqrt(n int) int {
	var r int = 0
	_ = r
	for ((r + 1) * (r + 1)) <= n {
		r = (r + 1)
	}
	return r
}

func is_prime(number int) bool {
	if (1 < number) && (number < 4) {
		return true
	}
	if ((number < 2) || (_modi(number, 2) == 0)) || (_modi(number, 3) == 0) {
		return false
	}
	var i int = 5
	_ = i
	var limit int = int_sqrt(number)
	_ = limit
	for i <= limit {
		if (_modi(number, i) == 0) || (_modi(number, (i+2)) == 0) {
			return false
		}
		i = (i + 6)
	}
	return true
}

func compute_nums(n int) []int {
	if n <= 0 {
		panic("n must be >= 0")
	}
	var list_nums []int = []int{}
	_ = list_nums
	var num int = 3
	_ = num
	for len(list_nums) < n {
		if !is_prime(num) {
			var i int = 0
			_ = i
			var found bool = false
			_ = found
			for ((2 * i) * i) <= num {
				var rem int = (num - ((2 * i) * i))
				_ = rem
				if is_prime(rem) {
					found = true
					break
				}
				i = (i + 1)
			}
			if !found {
				list_nums = append(list_nums, num)
			}
		}
		num = (num + 2)
	}
	return list_nums
}

func solution() int {
	return _index(func(v any) []any {
		if v == nil {
			return nil
		}
		if arr, ok := v.([]any); ok {
			return arr
		}
		rv := reflect.ValueOf(v)
		if rv.Kind() != reflect.Slice {
			return v.([]any)
		}
		n := rv.Len()
		out := make([]any, n)
		for i := 0; i < n; i++ {
			out[i] = rv.Index(i).Interface()
		}
		return out
	}(compute_nums(1)), 0)
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(fmt.Sprint(solution()))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
