//go:build ignore

// Generated by Mochi v0.10.69 on 2025-08-22 14:25:12 GMT+7
package main

import (
	"bufio"
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

var _scanner = bufio.NewScanner(os.Stdin)

func _input() string {
	if !_scanner.Scan() {
		return ""
	}
	return _scanner.Text()
}

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		return
	}
	s[idx] = v
}

func parse_names(line string) []string {
	var names []string = []string{}
	_ = names
	var current string = ""
	_ = current
	var i int = 0
	_ = i
	for i < len(line) {
		var ch string = _substr(line, i, (i + 1))
		_ = ch
		if ch == "," {
			names = append(names, current)
			current = ""
		} else {
			if ch != "\"" {
				current = (current + ch)
			}
		}
		i = (i + 1)
	}
	names = append(names, current)
	return names
}

func insertion_sort(arr []string) []string {
	var a []string = arr
	_ = a
	var i int = 1
	_ = i
	for i < len(a) {
		var key string = _index(a, i)
		_ = key
		var j int = (i - 1)
		_ = j
		for (j >= 0) && (_index(a, j) > key) {
			_setIndex(a, (j + 1), _index(a, j))
			j = (j - 1)
		}
		_setIndex(a, (j + 1), key)
		i = (i + 1)
	}
	return a
}

func letter_value(ch string) int {
	var alphabet string = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
	_ = alphabet
	var idx int = 0
	_ = idx
	for idx < len(alphabet) {
		if _substr(alphabet, idx, (idx+1)) == ch {
			return (idx + 1)
		}
		idx = (idx + 1)
	}
	return 0
}

func name_score(name string) int {
	var score int = 0
	_ = score
	var i int = 0
	_ = i
	for i < len(name) {
		score = (score + letter_value(_substr(name, i, (i+1))))
		i = (i + 1)
	}
	return score
}

func mochiMain() {
	var line string = _input()
	_ = line
	var names []string = insertion_sort(func(v any) []string {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]string); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []string{}
			}
			out := make([]string, len(arr))
			for i, x := range arr {
				out[i] = fmt.Sprint(x)
			}
			return out
		}
		return v.([]string)
	}(parse_names(line)))
	_ = names
	var total int = 0
	_ = total
	var i int = 0
	_ = i
	for i < len(names) {
		total = (total + ((i + 1) * name_score(_index(names, i))))
		i = (i + 1)
	}
	fmt.Println(fmt.Sprint(total))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
