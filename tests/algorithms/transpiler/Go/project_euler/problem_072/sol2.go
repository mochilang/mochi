//go:build ignore

// Generated by Mochi v0.10.70 on 2025-08-22 15:34:30 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		return
	}
	s[idx] = v
}

func solution(limit int) int {
	var phi []int = []int{}
	_ = phi
	var i int = 0
	_ = i
	for i <= limit {
		phi = append(phi, i)
		i = (i + 1)
	}
	var n int = 2
	_ = n
	for n <= limit {
		if _index(phi, n) == n {
			var k int = n
			_ = k
			for k <= limit {
				_setIndex(phi, k, (_index(phi, k) - (_index(phi, k) / n)))
				k = (k + n)
			}
		}
		n = (n + 1)
	}
	var total int = 0
	_ = total
	var m int = 2
	_ = m
	for m <= limit {
		total = (total + _index(phi, m))
		m = (m + 1)
	}
	return total
}

func mochiMain() {
	fmt.Println(solution(8))
	fmt.Println(solution(1000))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
