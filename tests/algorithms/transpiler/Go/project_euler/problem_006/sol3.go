//go:build ignore

// Generated by Mochi v0.10.70 on 2025-08-23 15:02:52 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

var __name__ string = "__main__"

func solution(n int) int {
	var i int = 1
	_ = i
	var sum int = 0
	_ = sum
	var sum_of_squares int = 0
	_ = sum_of_squares
	for i <= n {
		sum = (sum + i)
		sum_of_squares = (sum_of_squares + (i * i))
		i = (i + 1)
	}
	var square_of_sum int = (sum * sum)
	_ = square_of_sum
	_ = square_of_sum
	return (square_of_sum - sum_of_squares)
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(("solution() = " + fmt.Sprint(solution(100))))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
