//go:build ignore

// Generated by Mochi v0.10.70 on 2025-08-22 23:14:24 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"strings"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

func _modi(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func xor(a int, b int) int {
	var res int = 0
	_ = res
	var bit int = 1
	_ = bit
	var x int = a
	_ = x
	var y int = b
	_ = y
	for (x > 0) || (y > 0) {
		var abit int = _modi(x, 2)
		_ = abit
		var bbit int = _modi(y, 2)
		_ = bbit
		if abit != bbit {
			res = (res + bit)
		}
		x = (x / 2)
		y = (y / 2)
		bit = (bit * 2)
	}
	return res
}

var ascii_chars string

func chr(code int) string {
	if code == 10 {
		return "\n"
	}
	if code == 13 {
		return "\r"
	}
	if code == 9 {
		return "\t"
	}
	if (code >= 32) && (code < 127) {
		return string([]rune(ascii_chars)[(code - 32):(code - 31)])
	}
	return ""
}

func ord(ch string) int {
	if ch == "\n" {
		return 10
	}
	if ch == "\r" {
		return 13
	}
	if ch == "\t" {
		return 9
	}
	var i int = 0
	_ = i
	for i < len(ascii_chars) {
		if string([]rune(ascii_chars)[i:(i+1)]) == ch {
			return (32 + i)
		}
		i = (i + 1)
	}
	return 0
}

func is_valid_ascii(code int) bool {
	if (code >= 32) && (code <= 126) {
		return true
	}
	if ((code == 9) || (code == 10)) || (code == 13) {
		return true
	}
	return false
}

var LOWERCASE_INTS []int

var i int

var COMMON_WORDS []string

func try_key(ciphertext []int, key []int) string {
	var decoded string = ""
	_ = decoded
	var i int = 0
	_ = i
	var klen int = len(key)
	_ = klen
	for i < len(ciphertext) {
		var decodedchar int = xor(_index(ciphertext, i), _index(key, _modi(i, klen)))
		_ = decodedchar
		if !is_valid_ascii(decodedchar) {
			return ""
		}
		decoded = (decoded + chr(decodedchar))
		i = (i + 1)
	}
	return decoded
}

func filter_valid_chars(ciphertext []int) []string {
	var possibles []string = []string{}
	_ = possibles
	var i int = 0
	_ = i
	for i < len(LOWERCASE_INTS) {
		var j int = 0
		_ = j
		for j < len(LOWERCASE_INTS) {
			var k int = 0
			_ = k
			for k < len(LOWERCASE_INTS) {
				var key []int = []int{func(v any) int {
					if vv, ok := v.(int); ok {
						return vv
					}
					return 0
				}(_index(LOWERCASE_INTS, i)), func(v any) int {
					if vv, ok := v.(int); ok {
						return vv
					}
					return 0
				}(_index(LOWERCASE_INTS, j)), func(v any) int {
					if vv, ok := v.(int); ok {
						return vv
					}
					return 0
				}(_index(LOWERCASE_INTS, k))}
				_ = key
				var decoded string = try_key(func(v any) []int {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]int); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []int{}
						}
						out := make([]int, len(arr))
						for i, x := range arr {
							out[i] = x.(int)
						}
						return out
					}
					return v.([]int)
				}(ciphertext), func(v any) []int {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]int); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []int{}
						}
						out := make([]int, len(arr))
						for i, x := range arr {
							out[i] = x.(int)
						}
						return out
					}
					return v.([]int)
				}(key))
				_ = decoded
				if decoded != "" {
					possibles = append(possibles, decoded)
				}
				k = (k + 1)
			}
			j = (j + 1)
		}
		i = (i + 1)
	}
	return possibles
}

func contains(s string, sub string) bool {
	var n int = len(s)
	_ = n
	var m int = len(sub)
	_ = m
	if m == 0 {
		return true
	}
	var i int = 0
	_ = i
	for i <= (n - m) {
		var j int = 0
		_ = j
		var is_match bool = true
		_ = is_match
		for j < m {
			if string(_index([]rune(s), (i+j))) != string(_index([]rune(sub), j)) {
				is_match = false
				break
			}
			j = (j + 1)
		}
		if is_match {
			return true
		}
		i = (i + 1)
	}
	return false
}

func filter_common_word(possibles []string, common_word string) []string {
	var res []string = []string{}
	_ = res
	var i int = 0
	_ = i
	for i < len(possibles) {
		var p string = _index(possibles, i)
		_ = p
		if contains(strings.ToLower(p), common_word) {
			res = append(res, p)
		}
		i = (i + 1)
	}
	return res
}

func solution(ciphertext []int) int {
	var possibles []string = filter_valid_chars(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(ciphertext))
	_ = possibles
	var i int = 0
	_ = i
	for i < len(COMMON_WORDS) {
		var word string = _index(COMMON_WORDS, i)
		_ = word
		possibles = filter_common_word(func(v any) []string {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]string); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []string{}
				}
				out := make([]string, len(arr))
				for i, x := range arr {
					out[i] = fmt.Sprint(x)
				}
				return out
			}
			return v.([]string)
		}(possibles), word)
		if len(possibles) == 1 {
			break
		}
		i = (i + 1)
	}
	var decoded_text string = _index(possibles, 0)
	_ = decoded_text
	var sum int = 0
	_ = sum
	var j int = 0
	_ = j
	for j < len(decoded_text) {
		sum = (sum + ord(_substr(decoded_text, j, (j+1))))
		j = (j + 1)
	}
	return sum
}

var ciphertext []int

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		ascii_chars = " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"
		LOWERCASE_INTS = []int{}
		i = 97
		for i <= 122 {
			LOWERCASE_INTS = append(LOWERCASE_INTS, i)
			i = (i + 1)
		}
		COMMON_WORDS = []string{"the", "be", "to", "of", "and", "in", "that", "have"}
		ciphertext = []int{17, 6, 1, 69, 12, 1, 69, 26, 11, 69, 1, 2, 69, 15, 10, 1, 78, 13, 11, 78, 16, 13, 15, 16, 69, 6, 5, 19, 11}
		fmt.Println(fmt.Sprint(solution(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(ciphertext))))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
