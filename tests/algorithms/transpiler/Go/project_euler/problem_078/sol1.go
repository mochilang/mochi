//go:build ignore

// Generated by Mochi v0.10.70 on 2025-08-22 15:34:44 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

func _modi(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func solution(number int) int {
	var partitions []int = []int{1}
	_ = partitions
	var i int = len(partitions)
	_ = i
	for {
		var item int = 0
		_ = item
		var j int = 1
		_ = j
		for {
			var sign int = func() int {
				if _modi(j, 2) == 0 {
					return (0 - 1)
				} else {
					return 1
				}
			}()
			_ = sign
			var index int = ((((j * j) * 3) - j) / 2)
			_ = index
			if index > i {
				break
			}
			item = (item + (_index(partitions, (i-index)) * sign))
			item = _modi(item, number)
			index = (index + j)
			if index > i {
				break
			}
			item = (item + (_index(partitions, (i-index)) * sign))
			item = _modi(item, number)
			j = (j + 1)
		}
		if item == 0 {
			return i
		}
		partitions = append(partitions, item)
		i = (i + 1)
	}
	return 0
}

func mochiMain() {
	fmt.Println(fmt.Sprint(solution(1)))
	fmt.Println(fmt.Sprint(solution(9)))
	fmt.Println(fmt.Sprint(solution(1000000)))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
