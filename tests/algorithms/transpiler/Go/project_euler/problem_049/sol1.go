//go:build ignore

// Generated by Mochi v0.10.70 on 2025-08-22 15:33:42 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

func _modi(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		return
	}
	s[idx] = v
}

func is_prime(number int) bool {
	if (1 < number) && (number < 4) {
		return true
	}
	if ((number < 2) || (_modi(number, 2) == 0)) || (_modi(number, 3) == 0) {
		return false
	}
	var i int = 5
	_ = i
	for (i * i) <= number {
		if (_modi(number, i) == 0) || (_modi(number, (i+2)) == 0) {
			return false
		}
		i = (i + 6)
	}
	return true
}

func search(target int, arr []int) bool {
	var left int = 0
	_ = left
	var right int = (len(arr) - 1)
	_ = right
	for left <= right {
		var middle int = ((left + right) / 2)
		_ = middle
		if _index(arr, middle) == target {
			return true
		}
		if _index(arr, middle) < target {
			left = (middle + 1)
		} else {
			right = (middle - 1)
		}
	}
	return false
}

func sort_int(xs []int) []int {
	var arr []int = xs
	_ = arr
	var i int = 0
	_ = i
	for i < len(arr) {
		var j int = (i + 1)
		_ = j
		for j < len(arr) {
			if _index(arr, j) < _index(arr, i) {
				var tmp int = _index(arr, i)
				_ = tmp
				_setIndex(arr, i, _index(arr, j))
				_setIndex(arr, j, tmp)
			}
			j = (j + 1)
		}
		i = (i + 1)
	}
	return arr
}

func permutations_of_number(n int) []int {
	var s string = fmt.Sprint(n)
	_ = s
	var d []int = []int{}
	_ = d
	var i int = 0
	_ = i
	for i < len(s) {
		d = append(d, func() int { n, _ := strconv.Atoi(fmt.Sprint(string(_index([]rune(s), i)))); return n }())
		i = (i + 1)
	}
	var res []int = []int{}
	_ = res
	var a int = 0
	_ = a
	for a < len(d) {
		var b int = 0
		_ = b
		for b < len(d) {
			if b != a {
				var c int = 0
				_ = c
				for c < len(d) {
					if (c != a) && (c != b) {
						var e int = 0
						_ = e
						for e < len(d) {
							if ((e != a) && (e != b)) && (e != c) {
								var val int = ((((_index(d, a) * 1000) + (_index(d, b) * 100)) + (_index(d, c) * 10)) + _index(d, e))
								_ = val
								res = append(res, val)
							}
							e = (e + 1)
						}
					}
					c = (c + 1)
				}
			}
			b = (b + 1)
		}
		a = (a + 1)
	}
	return res
}

func abs_int(x int) int {
	if x < 0 {
		return (0 - x)
	}
	return x
}

func contains_int(xs []int, v int) bool {
	var i int = 0
	_ = i
	for i < len(xs) {
		if _index(xs, i) == v {
			return true
		}
		i = (i + 1)
	}
	return false
}

func solution() int {
	var prime_list []int = []int{}
	_ = prime_list
	var n int = 1001
	_ = n
	for n < 10000 {
		if is_prime(n) {
			prime_list = append(prime_list, n)
		}
		n = (n + 2)
	}
	var candidates [][]int = [][]int{}
	_ = candidates
	var i int = 0
	_ = i
	for i < len(prime_list) {
		var number int = _index(prime_list, i)
		_ = number
		var tmp []int = []int{}
		_ = tmp
		var perms []int = permutations_of_number(number)
		_ = perms
		var j int = 0
		_ = j
		for j < len(perms) {
			var prime int = _index(perms, j)
			_ = prime
			if (_modi(prime, 2) != 0) && search(prime, func(v any) []int {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]int); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []int{}
					}
					out := make([]int, len(arr))
					for i, x := range arr {
						out[i] = x.(int)
					}
					return out
				}
				return v.([]int)
			}(prime_list)) {
				tmp = append(tmp, prime)
			}
			j = (j + 1)
		}
		tmp = sort_int(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(tmp))
		if len(tmp) >= 3 {
			candidates = append(candidates, tmp)
		}
		i = (i + 1)
	}
	var passed [][]int = [][]int{}
	_ = passed
	i = 0
	for i < len(candidates) {
		var candidate []int = _index(candidates, i)
		_ = candidate
		var found bool = false
		_ = found
		var a int = 0
		_ = a
		for a < len(candidate) {
			var b int = (a + 1)
			_ = b
			for b < len(candidate) {
				var c int = (b + 1)
				_ = c
				for c < len(candidate) {
					var x int = _index(candidate, a)
					_ = x
					var y int = _index(candidate, b)
					_ = y
					var z int = _index(candidate, c)
					_ = z
					if (((abs_int((x - y)) == abs_int((y - z))) && (x != y)) && (x != z)) && (y != z) {
						var triple []int = sort_int(func(v any) []int {
							if v == nil {
								return nil
							}
							if vv, ok := v.([]int); ok {
								return vv
							}
							if arr, ok := v.([]any); ok {
								if len(arr) == 0 {
									return []int{}
								}
								out := make([]int, len(arr))
								for i, x := range arr {
									out[i] = x.(int)
								}
								return out
							}
							return v.([]int)
						}([]int{func(v any) int {
							if vv, ok := v.(int); ok {
								return vv
							}
							return 0
						}(x), func(v any) int {
							if vv, ok := v.(int); ok {
								return vv
							}
							return 0
						}(y), func(v any) int {
							if vv, ok := v.(int); ok {
								return vv
							}
							return 0
						}(z)}))
						_ = triple
						passed = append(passed, triple)
						found = true
						break
					}
					c = (c + 1)
				}
				if found {
					break
				}
				b = (b + 1)
			}
			if found {
				break
			}
			a = (a + 1)
		}
		i = (i + 1)
	}
	var answer_nums []int = []int{}
	_ = answer_nums
	i = 0
	for i < len(passed) {
		var seq []int = _index(passed, i)
		_ = seq
		_ = seq
		var val int = func() int {
			n, _ := strconv.Atoi(fmt.Sprint(((fmt.Sprint(_index(seq, 0)) + fmt.Sprint(_index(seq, 1))) + fmt.Sprint(_index(seq, 2)))))
			return n
		}()
		_ = val
		if !contains_int(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(answer_nums), val) {
			answer_nums = append(answer_nums, val)
		}
		i = (i + 1)
	}
	var max_val int = _index(answer_nums, 0)
	_ = max_val
	i = 1
	for i < len(answer_nums) {
		if _index(answer_nums, i) > max_val {
			max_val = _index(answer_nums, i)
		}
		i = (i + 1)
	}
	return max_val
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(solution())
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
