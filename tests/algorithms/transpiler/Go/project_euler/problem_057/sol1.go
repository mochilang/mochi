//go:build ignore

// Generated by Mochi v0.10.70 on 2025-08-22 15:34:07 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

func solution(n int) int {
	var prev_num int = 1
	_ = prev_num
	var prev_den int = 1
	_ = prev_den
	var count int = 0
	_ = count
	var i int = 1
	_ = i
	for i <= n {
		var num int = (prev_num + (2 * prev_den))
		_ = num
		var den int = (prev_num + prev_den)
		_ = den
		if len(fmt.Sprint(num)) > len(fmt.Sprint(den)) {
			count = (count + 1)
		}
		prev_num = num
		prev_den = den
		i = (i + 1)
	}
	return count
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(solution(14))
		fmt.Println(solution(100))
		fmt.Println(solution(1000))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
