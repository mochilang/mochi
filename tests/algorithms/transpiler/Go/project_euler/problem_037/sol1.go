//go:build ignore

// Generated by Mochi v0.10.73 on 2025-08-26 00:00:09 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

func _modi(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

var __name__ string = "__main__"

func is_prime(number int) bool {
	if (1 < number) && (number < 4) {
		return true
	}
	if ((number < 2) || (_modi(number, 2) == 0)) || (_modi(number, 3) == 0) {
		return false
	}
	var i int = 5
	_ = i
	for (i * i) <= number {
		if (_modi(number, i) == 0) || (_modi(number, (i+2)) == 0) {
			return false
		}
		i = (i + 6)
	}
	return true
}

func list_truncated_nums(n int) []int {
	var str_num string = fmt.Sprint(n)
	_ = str_num
	var list_nums []int = []int{func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(n)}
	_ = list_nums
	var i int = 1
	_ = i
	var length int = len(str_num)
	_ = length
	for i < length {
		var right int = func() int { n, _ := strconv.Atoi(fmt.Sprint(_substr(str_num, i, length))); return n }()
		_ = right
		var left int = func() int { n, _ := strconv.Atoi(fmt.Sprint(_substr(str_num, 0, (length - i)))); return n }()
		_ = left
		list_nums = append(list_nums, right)
		list_nums = append(list_nums, left)
		i = (i + 1)
	}
	return list_nums
}

func validate(n int) bool {
	var s string = fmt.Sprint(n)
	_ = s
	var length int = len(s)
	_ = length
	if length > 3 {
		var last3 int = func() int { n, _ := strconv.Atoi(fmt.Sprint(_substr(s, (length - 3), length))); return n }()
		_ = last3
		var first3 int = func() int { n, _ := strconv.Atoi(fmt.Sprint(_substr(s, 0, 3))); return n }()
		_ = first3
		if !(is_prime(last3) && is_prime(first3)) {
			return false
		}
	}
	return true
}

func compute_truncated_primes(count int) []int {
	var list_truncated_primes []int = []int{}
	_ = list_truncated_primes
	var num int = 13
	_ = num
	for len(list_truncated_primes) != count {
		if validate(num) {
			var list_nums []int = list_truncated_nums(num)
			_ = list_nums
			var all_prime bool = true
			_ = all_prime
			var j int = 0
			_ = j
			for j < len(list_nums) {
				if !is_prime(_index(list_nums, j)) {
					all_prime = false
					break
				}
				j = (j + 1)
			}
			if all_prime {
				list_truncated_primes = append(list_truncated_primes, num)
			}
		}
		num = (num + 2)
	}
	return list_truncated_primes
}

func solution() int {
	var primes []int = compute_truncated_primes(11)
	_ = primes
	var total int = 0
	_ = total
	var i int = 0
	_ = i
	for i < len(primes) {
		total = (total + _index(primes, i))
		i = (i + 1)
	}
	return total
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(("sum(compute_truncated_primes(11)) = " + fmt.Sprint(solution())))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
