//go:build ignore

// Generated by Mochi v0.10.73 on 2025-08-25 23:59:52 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

var __name__ string = "__main__"

func solution(n int) int {
	var total int = 1
	_ = total
	var i int = 1
	_ = i
	var limit int = func() int {
		a := (n + 1)
		b := 2
		q := a / b
		r := a % b
		if (r != 0) && ((r < 0) != (b < 0)) {
			q--
		}
		return q
	}()
	_ = limit
	for i < limit {
		var odd int = ((2 * i) + 1)
		_ = odd
		var even int = (2 * i)
		_ = even
		total = ((total + ((4 * odd) * odd)) - (6 * even))
		i = (i + 1)
	}
	return total
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(fmt.Sprint(solution(1001)))
		fmt.Println(fmt.Sprint(solution(500)))
		fmt.Println(fmt.Sprint(solution(100)))
		fmt.Println(fmt.Sprint(solution(50)))
		fmt.Println(fmt.Sprint(solution(10)))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
