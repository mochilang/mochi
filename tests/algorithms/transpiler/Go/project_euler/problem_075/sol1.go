//go:build ignore

// Generated by Mochi v0.10.70 on 2025-08-22 15:34:38 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"sort"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

func _modi(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func gcd(a int, b int) int {
	var x int = a
	_ = x
	var y int = b
	_ = y
	for y != 0 {
		var t int = _modi(x, y)
		_ = t
		x = y
		y = t
	}
	return x
}

func solution(limit int) int {
	var frequencies map[int]int = map[int]int{}
	_ = frequencies
	var m int = 2
	_ = m
	for ((2 * m) * (m + 1)) <= limit {
		var n int = (_modi(m, 2) + 1)
		_ = n
		for n < m {
			if gcd(m, n) > 1 {
				n = (n + 2)
				continue
			}
			var primitive_perimeter int = ((2 * m) * (m + n))
			_ = primitive_perimeter
			var perimeter int = primitive_perimeter
			_ = perimeter
			for perimeter <= limit {
				if !func() bool { _, ok := frequencies[perimeter]; return ok }() {
					frequencies[perimeter] = 0
				}
				frequencies[perimeter] = (frequencies[perimeter] + 1)
				perimeter = (perimeter + primitive_perimeter)
			}
			n = (n + 2)
		}
		m = (m + 1)
	}
	var count int = 0
	_ = count
	for _, p := range func() []int {
		keys := make([]int, 0, len(frequencies))
		for k := range frequencies {
			keys = append(keys, k)
		}
		sort.Slice(keys, func(i, j int) bool { return fmt.Sprint(keys[i]) < fmt.Sprint(keys[j]) })
		return keys
	}() {
		_ = p
		if frequencies[p] == 1 {
			count = (count + 1)
		}
	}
	return count
}

var result int

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		result = solution(1500000)
		fmt.Println(("solution() = " + fmt.Sprint(result)))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
