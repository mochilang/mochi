//go:build ignore

// Generated by Mochi v0.10.69 on 2025-08-22 14:25:45 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		return
	}
	s[idx] = v
}

func int_sqrt(n int) int {
	var x int = 1
	_ = x
	for ((x + 1) * (x + 1)) <= n {
		x = (x + 1)
	}
	return x
}

func solution(limit int) int {
	var sum_divs []int = []int{}
	_ = sum_divs
	var i int = 0
	_ = i
	for i <= limit {
		sum_divs = append(sum_divs, 1)
		i = (i + 1)
	}
	var sqrt_limit int = int_sqrt(limit)
	_ = sqrt_limit
	i = 2
	for i <= sqrt_limit {
		_setIndex(sum_divs, (i * i), (_index(sum_divs, (i*i)) + i))
		var k int = (i + 1)
		_ = k
		for k <= (limit / i) {
			_setIndex(sum_divs, (k * i), ((_index(sum_divs, (k*i)) + k) + i))
			k = (k + 1)
		}
		i = (i + 1)
	}
	var is_abundant []bool = []bool{}
	_ = is_abundant
	i = 0
	for i <= limit {
		is_abundant = append(is_abundant, false)
		i = (i + 1)
	}
	var abundants []int = []int{}
	_ = abundants
	var res int = 0
	_ = res
	var n int = 1
	_ = n
	for n <= limit {
		if _index(sum_divs, n) > n {
			abundants = append(abundants, n)
			_setIndex(is_abundant, n, true)
		}
		var has_pair bool = false
		_ = has_pair
		var j int = 0
		_ = j
		for j < len(abundants) {
			var a int = _index(abundants, j)
			_ = a
			if a > n {
				break
			}
			var b int = (n - a)
			_ = b
			if (b <= limit) && _index(is_abundant, b) {
				has_pair = true
				break
			}
			j = (j + 1)
		}
		if !has_pair {
			res = (res + n)
		}
		n = (n + 1)
	}
	return res
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(fmt.Sprint(solution(28123)))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
