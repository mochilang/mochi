//go:build ignore

// Generated by Mochi v0.10.73 on 2025-08-26 00:00:01 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

func _modi(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

var __name__ string = "__main__"

type FractionPair struct {
	Num int `json:"num"`
	Den int `json:"den"`
}

func gcd(a int, b int) int {
	var x int = func() int {
		if a < 0 {
			return (0 - a)
		} else {
			return a
		}
	}()
	_ = x
	var y int = func() int {
		if b < 0 {
			return (0 - b)
		} else {
			return b
		}
	}()
	_ = y
	for y != 0 {
		var t int = _modi(x, y)
		_ = t
		x = y
		y = t
	}
	return x
}

func is_digit_cancelling(num int, den int) bool {
	if num >= den {
		return false
	}
	var num_unit int = _modi(num, 10)
	_ = num_unit
	var num_tens int = func() int {
		a := num
		b := 10
		q := a / b
		r := a % b
		if (r != 0) && ((r < 0) != (b < 0)) {
			q--
		}
		return q
	}()
	_ = num_tens
	_ = num_tens
	var den_unit int = _modi(den, 10)
	_ = den_unit
	var den_tens int = func() int {
		a := den
		b := 10
		q := a / b
		r := a % b
		if (r != 0) && ((r < 0) != (b < 0)) {
			q--
		}
		return q
	}()
	_ = den_tens
	if num_unit != den_tens {
		return false
	}
	if den_unit == 0 {
		return false
	}
	return ((num * den_unit) == (num_tens * den))
}

func find_fractions() []FractionPair {
	var sols []FractionPair = []FractionPair{}
	_ = sols
	var num int = 10
	_ = num
	for num < 100 {
		var den int = (num + 1)
		_ = den
		for den < 100 {
			if is_digit_cancelling(num, den) {
				sols = append(sols, FractionPair{
					Num: num,
					Den: den,
				})
			}
			den = (den + 1)
		}
		num = (num + 1)
	}
	return sols
}

func solution() int {
	var fracs []FractionPair = find_fractions()
	_ = fracs
	var num_prod int = 1
	_ = num_prod
	var den_prod int = 1
	_ = den_prod
	var i int = 0
	_ = i
	for i < len(fracs) {
		var f FractionPair = _index(fracs, i)
		_ = f
		num_prod = (num_prod * f.Num)
		den_prod = (den_prod * f.Den)
		i = (i + 1)
	}
	var g int = gcd(num_prod, den_prod)
	_ = g
	_ = g
	return func() int {
		a := den_prod
		b := g
		q := a / b
		r := a % b
		if (r != 0) && ((r < 0) != (b < 0)) {
			q--
		}
		return q
	}()
}

func mochiMain() {
	fmt.Println(fmt.Sprint(solution()))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
