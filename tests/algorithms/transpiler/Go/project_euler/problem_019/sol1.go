//go:build ignore

// Generated by Mochi v0.10.69 on 2025-08-22 14:25:04 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

func _modi(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func is_leap(year int) bool {
	if ((_modi(year, 4) == 0) && (_modi(year, 100) != 0)) || (_modi(year, 400) == 0) {
		return true
	}
	return false
}

func count_sundays() int {
	var days_per_month []int = []int{31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}
	_ = days_per_month
	var day int = 6
	_ = day
	var month int = 1
	_ = month
	var year int = 1901
	_ = year
	var sundays int = 0
	_ = sundays
	for year < 2001 {
		day = (day + 7)
		if is_leap(year) {
			if (day > _index(days_per_month, (month-1))) && (month != 2) {
				month = (month + 1)
				day = (day - _index(days_per_month, (month-2)))
			} else {
				if (day > 29) && (month == 2) {
					month = (month + 1)
					day = (day - 29)
				}
			}
		} else {
			if day > _index(days_per_month, (month-1)) {
				month = (month + 1)
				day = (day - _index(days_per_month, (month-2)))
			}
		}
		if month > 12 {
			year = (year + 1)
			month = 1
		}
		if (year < 2001) && (day == 1) {
			sundays = (sundays + 1)
		}
	}
	return sundays
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(count_sundays())
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
