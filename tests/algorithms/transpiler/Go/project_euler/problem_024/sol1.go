//go:build ignore

// Generated by Mochi v0.10.69 on 2025-08-22 14:25:46 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

func _modi(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

func factorial(n int) int {
	var result int = 1
	_ = result
	var i int = 2
	_ = i
	for i <= n {
		result = (result * i)
		i = (i + 1)
	}
	return result
}

func nth_permutation(digits string, index int) string {
	var chars string = digits
	_ = chars
	var n int = index
	_ = n
	var res string = ""
	_ = res
	var k int = len(chars)
	_ = k
	for k > 0 {
		var f int = factorial((k - 1))
		_ = f
		var pos int = (n / f)
		_ = pos
		n = _modi(n, f)
		res = (res + _substr(chars, pos, (pos+1)))
		chars = (_substr(chars, 0, pos) + _substr(chars, (pos+1), len(chars)))
		k = (k - 1)
	}
	return res
}

func solution() string {
	return nth_permutation("0123456789", 999999)
}

func mochiMain() {
	fmt.Println(solution())
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
