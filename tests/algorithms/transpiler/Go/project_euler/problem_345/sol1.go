//go:build ignore

// Generated by Mochi v0.10.70 on 2025-08-22 15:35:05 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

func _modi(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		return
	}
	s[idx] = v
}

func parse_row(row_str string) []int {
	var nums []int = []int{}
	_ = nums
	var current int = 0
	_ = current
	var has_digit bool = false
	_ = has_digit
	var i int = 0
	_ = i
	for i < len(row_str) {
		var ch string = _substr(row_str, i, (i + 1))
		_ = ch
		if ch == " " {
			if has_digit {
				nums = append(nums, current)
				current = 0
				has_digit = false
			}
		} else {
			current = ((current * 10) + func() int { n, _ := strconv.Atoi(fmt.Sprint(ch)); return n }())
			has_digit = true
		}
		i = (i + 1)
	}
	if has_digit {
		nums = append(nums, current)
	}
	return nums
}

func parse_matrix(matrix_str []string) [][]int {
	var matrix [][]int = [][]int{}
	_ = matrix
	for _, row_str := range matrix_str {
		_ = row_str
		var row []int = parse_row(row_str)
		_ = row
		matrix = append(matrix, row)
	}
	return matrix
}

func bitcount(x int) int {
	var count int = 0
	_ = count
	var y int = x
	_ = y
	for y > 0 {
		if _modi(y, 2) == 1 {
			count = (count + 1)
		}
		y = (y / 2)
	}
	return count
}

func build_powers(n int) []int {
	var powers []int = []int{}
	_ = powers
	var i int = 0
	_ = i
	var current int = 1
	_ = current
	for i <= n {
		powers = append(powers, current)
		current = (current * 2)
		i = (i + 1)
	}
	return powers
}

func solution(matrix_str []string) int {
	var arr [][]int = parse_matrix(func(v any) []string {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]string); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []string{}
			}
			out := make([]string, len(arr))
			for i, x := range arr {
				out[i] = fmt.Sprint(x)
			}
			return out
		}
		return v.([]string)
	}(matrix_str))
	_ = arr
	var n int = len(arr)
	_ = n
	var powers []int = build_powers(n)
	_ = powers
	var size int = _index(powers, n)
	_ = size
	var dp []int = []int{}
	_ = dp
	var i int = 0
	_ = i
	for i < size {
		dp = append(dp, 0)
		i = (i + 1)
	}
	var mask int = 0
	_ = mask
	for mask < size {
		var row int = bitcount(mask)
		_ = row
		if row < n {
			var col int = 0
			_ = col
			for col < n {
				if _modi((mask/_index(powers, col)), 2) == 0 {
					var new_mask int = (mask + _index(powers, col))
					_ = new_mask
					var value int = (_index(dp, mask) + _index(_index(arr, row), col))
					_ = value
					if value > _index(dp, new_mask) {
						_setIndex(dp, new_mask, value)
					}
				}
				col = (col + 1)
			}
		}
		mask = (mask + 1)
	}
	return _index(dp, (size - 1))
}

var MATRIX_2 []string

var result int

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		MATRIX_2 = []string{"7 53 183 439 863 497 383 563 79 973 287 63 343 169 583", "627 343 773 959 943 767 473 103 699 303 957 703 583 639 913", "447 283 463 29 23 487 463 993 119 883 327 493 423 159 743", "217 623 3 399 853 407 103 983 89 463 290 516 212 462 350", "960 376 682 962 300 780 486 502 912 800 250 346 172 812 350", "870 456 192 162 593 473 915 45 989 873 823 965 425 329 803", "973 965 905 919 133 673 665 235 509 613 673 815 165 992 326", "322 148 972 962 286 255 941 541 265 323 925 281 601 95 973", "445 721 11 525 473 65 511 164 138 672 18 428 154 448 848", "414 456 310 312 798 104 566 520 302 248 694 976 430 392 198", "184 829 373 181 631 101 969 613 840 740 778 458 284 760 390", "821 461 843 513 17 901 711 993 293 157 274 94 192 156 574", "34 124 4 878 450 476 712 914 838 669 875 299 823 329 699", "815 559 813 459 522 788 168 586 966 232 308 833 251 631 107", "813 883 451 509 615 77 281 613 459 205 380 274 302 35 805"}
		result = solution(func(v any) []string {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]string); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []string{}
				}
				out := make([]string, len(arr))
				for i, x := range arr {
					out[i] = fmt.Sprint(x)
				}
				return out
			}
			return v.([]string)
		}(MATRIX_2))
		fmt.Println(("solution() = " + fmt.Sprint(result)))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
