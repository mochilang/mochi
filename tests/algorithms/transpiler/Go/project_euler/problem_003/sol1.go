//go:build ignore

// Generated by Mochi v0.10.70 on 2025-08-23 15:02:28 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

func _modi(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

var __name__ string = "__main__"

func is_prime(number int) bool {
	if (number > 1) && (number < 4) {
		return true
	}
	if ((number < 2) || (_modi(number, 2) == 0)) || (_modi(number, 3) == 0) {
		return false
	}
	var i int = 5
	_ = i
	for (i * i) <= number {
		if (_modi(number, i) == 0) || (_modi(number, (i+2)) == 0) {
			return false
		}
		i = (i + 6)
	}
	return true
}

func solution(n int) int {
	var num int = n
	_ = num
	if num <= 0 {
		fmt.Println("Parameter n must be greater than or equal to one.")
		return 0
	}
	if is_prime(num) {
		return num
	}
	for _modi(num, 2) == 0 {
		num = (num / 2)
		if is_prime(num) {
			return num
		}
	}
	var max_number int = 1
	_ = max_number
	var i int = 3
	_ = i
	for (i * i) <= num {
		if _modi(num, i) == 0 {
			if is_prime((num / i)) {
				max_number = (num / i)
				break
			} else {
				if is_prime(i) {
					max_number = i
				}
			}
		}
		i = (i + 2)
	}
	return max_number
}

func mochiMain() {
	var result int = solution(600851475143)
	_ = result
	fmt.Println(("solution() = " + fmt.Sprint(result)))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
