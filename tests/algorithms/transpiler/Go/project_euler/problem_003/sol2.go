//go:build ignore

// Generated by Mochi v0.10.64 on 2025-08-12 12:35:48 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _mod(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func largest_prime_factor(n int) int {
	if n <= 0 {
		panic("Parameter n must be greater than or equal to one.")
	}
	var num int = n
	_ = num
	var prime int = 1
	_ = prime
	var i int = 2
	_ = i
	for (i * i) <= num {
		for _mod(num, i) == 0 {
			prime = i
			num = (num / i)
		}
		i = (i + 1)
	}
	if num > 1 {
		prime = num
	}
	return prime
}

func mochiMain() {
	fmt.Println(fmt.Sprint(largest_prime_factor(600851475143)))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
