//go:build ignore

// Generated by Mochi v0.10.73 on 2025-08-26 00:00:11 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

func _modi(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		return
	}
	s[idx] = v
}

var __name__ string = "__main__"

func is_9_pandigital(n int) bool {
	var digits []int = []int{}
	_ = digits
	var i int = 0
	_ = i
	for i < 10 {
		digits = append(digits, 0)
		i = (i + 1)
	}
	var count int = 0
	_ = count
	var x int = n
	_ = x
	for x > 0 {
		var digit int = _modi(x, 10)
		_ = digit
		if digit == 0 {
			return false
		}
		if _index(digits, digit) == 1 {
			return false
		}
		_setIndex(digits, digit, 1)
		x = func() int {
			a := x
			b := 10
			q := a / b
			r := a % b
			if (r != 0) && ((r < 0) != (b < 0)) {
				q--
			}
			return q
		}()
		count = (count + 1)
	}
	return ((((((((((count == 9) && (_index(digits, 1) == 1)) && (_index(digits, 2) == 1)) && (_index(digits, 3) == 1)) && (_index(digits, 4) == 1)) && (_index(digits, 5) == 1)) && (_index(digits, 6) == 1)) && (_index(digits, 7) == 1)) && (_index(digits, 8) == 1)) && (_index(digits, 9) == 1))
}

func solution() int {
	var base_num int = 9999
	_ = base_num
	for base_num >= 5000 {
		var candidate int = (100002 * base_num)
		_ = candidate
		if is_9_pandigital(candidate) {
			return candidate
		}
		base_num = (base_num - 1)
	}
	base_num = 333
	for base_num >= 100 {
		var candidate int = (1002003 * base_num)
		_ = candidate
		if is_9_pandigital(candidate) {
			return candidate
		}
		base_num = (base_num - 1)
	}
	return 0
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(("solution() = " + fmt.Sprint(solution())))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
