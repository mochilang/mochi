//go:build ignore

// Generated by Mochi v0.10.70 on 2025-08-22 23:15:10 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

func _modi(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func is_prime(n int) bool {
	if n < 2 {
		return false
	}
	var i int = 2
	_ = i
	for (i * i) <= n {
		if _modi(n, i) == 0 {
			return false
		}
		i = (i + 1)
	}
	return true
}

func solution(limit int) int {
	if limit < 2 {
		return 1
	}
	var result int = 1
	_ = result
	var p int = 2
	_ = p
	for (result * p) <= limit {
		if is_prime(p) {
			result = (result * p)
		}
		p = (p + 1)
	}
	return result
}

func mochiMain() {
	var ans int = solution(1000000)
	_ = ans
	fmt.Println(ans)
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
