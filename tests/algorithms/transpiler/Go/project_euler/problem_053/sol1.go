//go:build ignore

// Generated by Mochi v0.10.70 on 2025-08-22 15:33:47 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

func combination_exceeds(n int, r int, limit int) bool {
	var r2 int = r
	_ = r2
	if r2 > (n - r2) {
		r2 = (n - r2)
	}
	var result int = 1
	_ = result
	var k int = 1
	_ = k
	for k <= r2 {
		result = ((result * ((n - r2) + k)) / k)
		if result > limit {
			return true
		}
		k = (k + 1)
	}
	return (result > limit)
}

func count_exceeding(limit int) int {
	var total int = 0
	_ = total
	var n int = 1
	_ = n
	for n <= 100 {
		var r int = 1
		_ = r
		for r <= n {
			if combination_exceeds(n, r, limit) {
				total = (total + 1)
			}
			r = (r + 1)
		}
		n = (n + 1)
	}
	return total
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(fmt.Sprint(count_exceeding(1000000)))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
