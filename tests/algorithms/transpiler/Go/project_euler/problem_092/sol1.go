//go:build ignore

// Generated by Mochi v0.10.70 on 2025-08-22 23:15:47 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

func _modi(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func next_number(number int) int {
	var n int = number
	_ = n
	var total int = 0
	_ = total
	for n > 0 {
		var d int = _modi(n, 10)
		_ = d
		total = (total + (d * d))
		n = (n / 10)
	}
	return total
}

func chain(number int) bool {
	var n int = number
	_ = n
	for (n != 1) && (n != 89) {
		n = next_number(n)
	}
	return (n == 1)
}

func solution(limit int) int {
	var count int = 0
	_ = count
	var i int = 1
	_ = i
	for i < limit {
		if !chain(i) {
			count = (count + 1)
		}
		i = (i + 1)
	}
	return count
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(fmt.Sprint(next_number(44)))
		fmt.Println(fmt.Sprint(next_number(10)))
		fmt.Println(fmt.Sprint(next_number(32)))
		fmt.Println(fmt.Sprint(chain(10)))
		fmt.Println(fmt.Sprint(chain(58)))
		fmt.Println(fmt.Sprint(chain(1)))
		fmt.Println(fmt.Sprint(solution(100)))
		fmt.Println(fmt.Sprint(solution(1000)))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
