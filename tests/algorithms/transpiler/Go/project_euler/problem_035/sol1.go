//go:build ignore

// Generated by Mochi v0.10.73 on 2025-08-26 00:00:03 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		return
	}
	s[idx] = v
}

var __name__ string = "__main__"

var LIMIT int

var sieve []bool

var i int

var p int

func is_prime(n int) bool {
	return _index(sieve, n)
}

func contains_an_even_digit(n int) bool {
	var s string = fmt.Sprint(n)
	_ = s
	var idx int = 0
	_ = idx
	for idx < len(s) {
		var c string = string(_index([]rune(s), idx))
		_ = c
		if ((((c == "0") || (c == "2")) || (c == "4")) || (c == "6")) || (c == "8") {
			return true
		}
		idx = (idx + 1)
	}
	return false
}

func parse_int(s string) int {
	var value int = 0
	_ = value
	var k int = 0
	_ = k
	for k < len(s) {
		var ch string = string(_index([]rune(s), k))
		_ = ch
		_ = ch
		value = ((value * 10) + func() int { n, _ := strconv.Atoi(fmt.Sprint(ch)); return n }())
		k = (k + 1)
	}
	return value
}

func find_circular_primes(limit int) []int {
	var result []int = []int{2}
	_ = result
	var num int = 3
	_ = num
	for num <= limit {
		if is_prime(num) && (contains_an_even_digit(num) == false) {
			var s string = fmt.Sprint(num)
			_ = s
			var all_prime bool = true
			_ = all_prime
			var j int = 0
			_ = j
			for j < len(s) {
				var rotated_str string = (_substr(s, j, len(s)) + _substr(s, 0, j))
				_ = rotated_str
				var rotated int = parse_int(rotated_str)
				_ = rotated
				if !is_prime(rotated) {
					all_prime = false
					break
				}
				j = (j + 1)
			}
			if all_prime {
				result = append(result, num)
			}
		}
		num = (num + 2)
	}
	return result
}

func solution() int {
	return len(find_circular_primes(LIMIT))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		LIMIT = 10000
		sieve = []bool{}
		i = 0
		for i <= LIMIT {
			sieve = append(sieve, true)
			i = (i + 1)
		}
		p = 2
		for (p * p) <= LIMIT {
			if _index(sieve, p) {
				var j int = (p * p)
				_ = j
				for j <= LIMIT {
					_setIndex(sieve, j, false)
					j = (j + p)
				}
			}
			p = (p + 1)
		}
		fmt.Println(("len(find_circular_primes()) = " + fmt.Sprint(solution())))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
