//go:build ignore

// Generated by Mochi v0.10.70 on 2025-08-22 23:14:56 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

func _modi(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func sum_digits(num int) int {
	var n int = num
	_ = n
	var digit_sum int = 0
	_ = digit_sum
	for n > 0 {
		digit_sum = (digit_sum + _modi(n, 10))
		n = (n / 10)
	}
	return digit_sum
}

func solution(max_n int) int {
	var pre_numerator int = 1
	_ = pre_numerator
	var cur_numerator int = 2
	_ = cur_numerator
	var i int = 2
	_ = i
	for i <= max_n {
		var temp int = pre_numerator
		_ = temp
		var e_cont int = 1
		_ = e_cont
		if _modi(i, 3) == 0 {
			e_cont = ((2 * i) / 3)
		}
		pre_numerator = cur_numerator
		cur_numerator = ((e_cont * pre_numerator) + temp)
		i = (i + 1)
	}
	return sum_digits(cur_numerator)
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(solution(9))
		fmt.Println(solution(10))
		fmt.Println(solution(50))
		fmt.Println(solution(100))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
