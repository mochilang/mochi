//go:build ignore

// Generated by Mochi v0.10.69 on 2025-08-19 16:50:09 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func contains(xs []int, value int) bool {
	var i int = 0
	_ = i
	for i < len(xs) {
		if _index(xs, i) == value {
			return true
		}
		i = (i + 1)
	}
	return false
}

func solution(n int) int {
	var zmulti []int = []int{}
	_ = zmulti
	var xmulti []int = []int{}
	_ = xmulti
	var temp int = 1
	_ = temp
	for {
		var result int = (3 * temp)
		_ = result
		if result < n {
			zmulti = append(zmulti, result)
			temp = (temp + 1)
		} else {
			break
		}
	}
	temp = 1
	for {
		var result int = (5 * temp)
		_ = result
		if result < n {
			xmulti = append(xmulti, result)
			temp = (temp + 1)
		} else {
			break
		}
	}
	var collection []int = []int{}
	_ = collection
	var i int = 0
	_ = i
	for i < len(zmulti) {
		var v int = _index(zmulti, i)
		_ = v
		if !contains(collection, v) {
			collection = append(collection, v)
		}
		i = (i + 1)
	}
	i = 0
	for i < len(xmulti) {
		var v int = _index(xmulti, i)
		_ = v
		if !contains(collection, v) {
			collection = append(collection, v)
		}
		i = (i + 1)
	}
	var total int = 0
	_ = total
	i = 0
	for i < len(collection) {
		total = (total + _index(collection, i))
		i = (i + 1)
	}
	return total
}

func test_solution() {
	if solution(3) != 0 {
		panic("solution(3) failed")
	}
	if solution(4) != 3 {
		panic("solution(4) failed")
	}
	if solution(10) != 23 {
		panic("solution(10) failed")
	}
	if solution(600) != 83700 {
		panic("solution(600) failed")
	}
}

func mochiMain() {
	test_solution()
	fmt.Println(("solution() = " + fmt.Sprint(solution(1000))))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
