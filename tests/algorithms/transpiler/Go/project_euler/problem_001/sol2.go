//go:build ignore

// Generated by Mochi v0.10.64 on 2025-08-12 10:10:32 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func sum_of_multiples(n int) int {
	var total int = 0
	_ = total
	var terms int = ((n - 1) / 3)
	_ = terms
	total = (total + ((terms * (6 + ((terms - 1) * 3))) / 2))
	terms = ((n - 1) / 5)
	total = (total + ((terms * (10 + ((terms - 1) * 5))) / 2))
	terms = ((n - 1) / 15)
	total = (total - ((terms * (30 + ((terms - 1) * 15))) / 2))
	return total
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(("solution() = " + fmt.Sprint(sum_of_multiples(1000))))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
