//go:build ignore

// Generated by Mochi v0.10.70 on 2025-08-22 23:15:37 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		return
	}
	s[idx] = v
}

func solution(m int) int {
	var memo [][]int = [][]int{}
	_ = memo
	var i int = 0
	_ = i
	for i <= m {
		var row []int = []int{}
		_ = row
		var j int = 0
		_ = j
		for j < m {
			row = append(row, 0)
			j = (j + 1)
		}
		memo = append(memo, row)
		i = (i + 1)
	}
	i = 0
	for i <= m {
		_setIndex(_index(memo, i), 0, 1)
		i = (i + 1)
	}
	var n int = 0
	_ = n
	for n <= m {
		var k int = 1
		_ = k
		for k < m {
			_setIndex(_index(memo, n), k, (_index(_index(memo, n), k) + _index(_index(memo, n), (k-1))))
			if n > k {
				_setIndex(_index(memo, n), k, (_index(_index(memo, n), k) + _index(_index(memo, ((n-k)-1)), k)))
			}
			k = (k + 1)
		}
		n = (n + 1)
	}
	return (_index(_index(memo, m), (m-1)) - 1)
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(fmt.Sprint(solution(100)))
		fmt.Println(fmt.Sprint(solution(50)))
		fmt.Println(fmt.Sprint(solution(30)))
		fmt.Println(fmt.Sprint(solution(10)))
		fmt.Println(fmt.Sprint(solution(5)))
		fmt.Println(fmt.Sprint(solution(3)))
		fmt.Println(fmt.Sprint(solution(2)))
		fmt.Println(fmt.Sprint(solution(1)))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
