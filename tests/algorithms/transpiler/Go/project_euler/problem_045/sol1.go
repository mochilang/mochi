//go:build ignore

// Generated by Mochi v0.10.70 on 2025-08-22 15:32:21 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	math "math"
	"os"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

func _floatEqual(a, b float64) bool {
	if a > b {
		return a-b < 1e-6
	}
	return b-a < 1e-6
}

func to_float(x int) float64 {
	return (float64(x) * 1.0)
}

func sqrt(x float64) float64 {
	if x <= 0.0 {
		return 0.0
	}
	var guess float64 = x
	_ = guess
	var i int = 0
	_ = i
	for i < 10 {
		guess = (float64((guess + (float64(x) / float64(guess)))) / float64(2.0))
		i = (i + 1)
	}
	return guess
}

func floor(x float64) int {
	var n int = 0
	_ = n
	var y float64 = x
	_ = y
	for y >= 1.0 {
		y = (y - 1.0)
		n = (n + 1)
	}
	return n
}

func hexagonal_num(n int) int {
	return (n * ((2 * n) - 1))
}

func is_pentagonal(n int) bool {
	var root float64 = math.Sqrt((1.0 + (24.0 * float64(n))))
	_ = root
	var val float64 = (float64((1.0 + root)) / float64(6.0))
	_ = val
	_ = val
	return _floatEqual(val, float64(floor(val)))
}

func solution(start int) int {
	var idx int = start
	_ = idx
	var num int = hexagonal_num(idx)
	_ = num
	for !is_pentagonal(num) {
		idx = (idx + 1)
		num = hexagonal_num(idx)
	}
	return num
}

func test_hexagonal_num() {
	if hexagonal_num(143) != 40755 {
		panic("hexagonal_num(143) failed")
	}
	if hexagonal_num(21) != 861 {
		panic("hexagonal_num(21) failed")
	}
	if hexagonal_num(10) != 190 {
		panic("hexagonal_num(10) failed")
	}
}

func test_is_pentagonal() {
	if !is_pentagonal(330) {
		panic("330 should be pentagonal")
	}
	if is_pentagonal(7683) {
		panic("7683 should not be pentagonal")
	}
	if !is_pentagonal(2380) {
		panic("2380 should be pentagonal")
	}
}

func test_solution() {
	if solution(144) != 1533776805 {
		panic("solution failed")
	}
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		test_hexagonal_num()
		test_is_pentagonal()
		test_solution()
		fmt.Println((fmt.Sprint(solution(144)) + " = "))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
