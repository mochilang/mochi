//go:build ignore

// Generated by Mochi v0.10.70 on 2025-08-22 23:15:39 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		return
	}
	s[idx] = v
}

var NUM_PRIMES int

func generate_primes(limit int) []int {
	var is_prime []bool = []bool{}
	_ = is_prime
	var i int = 0
	_ = i
	for i <= limit {
		is_prime = append(is_prime, true)
		i = (i + 1)
	}
	_setIndex(is_prime, 0, false)
	_setIndex(is_prime, 1, false)
	i = 2
	for (i * i) <= limit {
		if _index(is_prime, i) {
			var j int = (i * i)
			_ = j
			for j <= limit {
				_setIndex(is_prime, j, false)
				j = (j + i)
			}
		}
		i = (i + 1)
	}
	var primes []int = []int{}
	_ = primes
	i = 2
	for i <= limit {
		if _index(is_prime, i) {
			primes = append(primes, i)
		}
		i = (i + 1)
	}
	return primes
}

var primes []int

func contains(xs []int, value int) bool {
	var i int = 0
	_ = i
	for i < len(xs) {
		if _index(xs, i) == value {
			return true
		}
		i = (i + 1)
	}
	return false
}

var partition_cache map[int][]int

func partition(n int) []int {
	if n < 0 {
		return func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}([]int{})
	}
	if n == 0 {
		return []int{1}
	}
	if func() bool { _, ok := partition_cache[n]; return ok }() {
		return func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(partition_cache[n])
	}
	var ret []int = []int{}
	_ = ret
	for _, prime := range primes {
		_ = prime
		if prime > n {
			continue
		}
		var subs []int = partition((n - prime))
		_ = subs
		for _, sub := range subs {
			_ = sub
			var prod int = (sub * prime)
			_ = prod
			if !contains(ret, prod) {
				ret = append(ret, prod)
			}
		}
	}
	partition_cache[n] = ret
	return ret
}

func solution(threshold int) int {
	var number_to_partition int = 1
	_ = number_to_partition
	for number_to_partition < NUM_PRIMES {
		var parts []int = partition(number_to_partition)
		_ = parts
		if len(parts) > threshold {
			return number_to_partition
		}
		number_to_partition = (number_to_partition + 1)
	}
	return 0
}

var result int

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		NUM_PRIMES = 100
		primes = generate_primes(NUM_PRIMES)
		partition_cache = map[int][]int{}
		result = solution(5000)
		fmt.Println(("solution() = " + fmt.Sprint(result)))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
