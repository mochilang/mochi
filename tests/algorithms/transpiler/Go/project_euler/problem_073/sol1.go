//go:build ignore

// Generated by Mochi v0.10.70 on 2025-08-22 15:34:32 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

func _modi(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func gcd(a int, b int) int {
	var x int = a
	_ = x
	var y int = b
	_ = y
	for y != 0 {
		var temp int = _modi(x, y)
		_ = temp
		x = y
		y = temp
	}
	return x
}

func solution(max_d int) int {
	var fractions_number int = 0
	_ = fractions_number
	var d int = 0
	_ = d
	for d <= max_d {
		var n int = ((d / 3) + 1)
		_ = n
		var half int = ((d + 1) / 2)
		_ = half
		for n < half {
			if gcd(n, d) == 1 {
				fractions_number = (fractions_number + 1)
			}
			n = (n + 1)
		}
		d = (d + 1)
	}
	return fractions_number
}

func mochiMain() {
	fmt.Println(solution(12000))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
