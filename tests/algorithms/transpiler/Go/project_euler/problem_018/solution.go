//go:build ignore

// Generated by Mochi v0.10.69 on 2025-08-22 14:25:02 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		return
	}
	s[idx] = v
}

func solution() int {
	var triangle [][]int = [][]int{[]int{75}, []int{95, 64}, []int{17, 47, 82}, []int{18, 35, 87, 10}, []int{20, 4, 82, 47, 65}, []int{19, 1, 23, 75, 3, 34}, []int{88, 2, 77, 73, 7, 63, 67}, []int{99, 65, 4, 28, 6, 16, 70, 92}, []int{41, 41, 26, 56, 83, 40, 80, 70, 33}, []int{41, 48, 72, 33, 47, 32, 37, 16, 94, 29}, []int{53, 71, 44, 65, 25, 43, 91, 52, 97, 51, 14}, []int{70, 11, 33, 28, 77, 73, 17, 78, 39, 68, 17, 57}, []int{91, 71, 52, 38, 17, 14, 91, 43, 58, 50, 27, 29, 48}, []int{63, 66, 4, 68, 89, 53, 67, 30, 73, 16, 69, 87, 40, 31}, []int{4, 62, 98, 27, 23, 9, 70, 98, 73, 93, 38, 53, 60, 4, 23}}
	_ = triangle
	var i int = 1
	_ = i
	for i < len(triangle) {
		var j int = 0
		_ = j
		for j < len(_index(triangle, i)) {
			var prev_row []int = _index(triangle, (i - 1))
			_ = prev_row
			var number1 int = func() int {
				if j != len(prev_row) {
					return _index(prev_row, j)
				} else {
					return 0
				}
			}()
			_ = number1
			var number2 int = func() int {
				if j > 0 {
					return _index(prev_row, (j - 1))
				} else {
					return 0
				}
			}()
			_ = number2
			var max_val int = func() int {
				if number1 > number2 {
					return number1
				} else {
					return number2
				}
			}()
			_ = max_val
			_setIndex(_index(triangle, i), j, (_index(_index(triangle, i), j) + max_val))
			j = (j + 1)
		}
		i = (i + 1)
	}
	var last []int = _index(triangle, (len(triangle) - 1))
	_ = last
	var k int = 0
	_ = k
	var best int = 0
	_ = best
	for k < len(last) {
		if _index(last, k) > best {
			best = _index(last, k)
		}
		k = (k + 1)
	}
	return best
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(fmt.Sprint(solution()))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
