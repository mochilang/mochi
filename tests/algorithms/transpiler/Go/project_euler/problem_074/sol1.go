//go:build ignore

// Generated by Mochi v0.10.70 on 2025-08-22 23:15:24 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

func _modi(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

var DIGIT_FACTORIALS []int

var cache_sum_digit_factorials map[int]int

var chain_length_cache map[int]int

func sum_digit_factorials(n int) int {
	if func() bool { _, ok := cache_sum_digit_factorials[n]; return ok }() {
		return cache_sum_digit_factorials[n]
	}
	var m int = n
	_ = m
	var ret int = 0
	_ = ret
	if m == 0 {
		ret = _index(DIGIT_FACTORIALS, 0)
	}
	for m > 0 {
		var digit int = _modi(m, 10)
		_ = digit
		ret = (ret + _index(DIGIT_FACTORIALS, digit))
		m = (m / 10)
	}
	cache_sum_digit_factorials[n] = ret
	return ret
}

func chain_length(n int) int {
	if func() bool { _, ok := chain_length_cache[n]; return ok }() {
		return chain_length_cache[n]
	}
	var chain []int = []int{}
	_ = chain
	var seen map[int]int = map[int]int{}
	_ = seen
	var current int = n
	_ = current
	for {
		if func() bool { _, ok := chain_length_cache[current]; return ok }() {
			var known int = chain_length_cache[current]
			_ = known
			var total int = known
			_ = total
			var i int = (len(chain) - 1)
			_ = i
			for i >= 0 {
				total = (total + 1)
				chain_length_cache[_index(chain, i)] = total
				i = (i - 1)
			}
			return chain_length_cache[n]
		}
		if func() bool { _, ok := seen[current]; return ok }() {
			var loop_start int = seen[current]
			_ = loop_start
			var loop_len int = (len(chain) - loop_start)
			_ = loop_len
			var i int = (len(chain) - 1)
			_ = i
			var ahead int = 0
			_ = ahead
			for i >= 0 {
				if i >= loop_start {
					chain_length_cache[_index(chain, i)] = loop_len
				} else {
					chain_length_cache[_index(chain, i)] = (loop_len + (ahead + 1))
				}
				ahead = (ahead + 1)
				i = (i - 1)
			}
			return chain_length_cache[n]
		}
		seen[current] = len(chain)
		chain = append(chain, current)
		current = sum_digit_factorials(current)
	}
}

func solution(num_terms int, max_start int) int {
	var count int = 0
	_ = count
	var i int = 1
	_ = i
	for i < max_start {
		if chain_length(i) == num_terms {
			count = (count + 1)
		}
		i = (i + 1)
	}
	return count
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		DIGIT_FACTORIALS = []int{1, 1, 2, 6, 24, 120, 720, 5040, 40320, 362880}
		cache_sum_digit_factorials = map[int]int{145: 145}
		chain_length_cache = map[int]int{145: 0, 169: 3, 36301: 3, 1454: 3, 871: 2, 45361: 2, 872: 2}
		fmt.Println(("solution() = " + fmt.Sprint(solution(60, 1000))))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
