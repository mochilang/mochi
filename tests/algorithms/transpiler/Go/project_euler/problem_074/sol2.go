//go:build ignore

// Generated by Mochi v0.10.70 on 2025-08-22 23:15:27 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

func _modi(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

var DIGIT_FACTORIAL []int

func digit_factorial_sum(number int) int {
	if number < 0 {
		panic("Parameter number must be greater than or equal to 0")
	}
	if number == 0 {
		return _index(DIGIT_FACTORIAL, 0)
	}
	var n int = number
	_ = n
	var total int = 0
	_ = total
	for n > 0 {
		var digit int = _modi(n, 10)
		_ = digit
		total = (total + _index(DIGIT_FACTORIAL, digit))
		n = (n / 10)
	}
	return total
}

func chain_len(n int, limit int) int {
	var seen map[int]bool = map[int]bool{}
	_ = seen
	var length int = 0
	_ = length
	var cur int = n
	_ = cur
	for (func() bool { _, ok := seen[cur]; return ok }() == false) && (length <= limit) {
		seen[cur] = true
		length = (length + 1)
		cur = digit_factorial_sum(cur)
	}
	return length
}

func solution(chain_length int, number_limit int) int {
	if (chain_length <= 0) || (number_limit <= 0) {
		panic("Parameters chain_length and number_limit must be greater than 0")
	}
	var count int = 0
	_ = count
	var start int = 1
	_ = start
	for start < number_limit {
		if chain_len(start, chain_length) == chain_length {
			count = (count + 1)
		}
		start = (start + 1)
	}
	return count
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		DIGIT_FACTORIAL = []int{1, 1, 2, 6, 24, 120, 720, 5040, 40320, 362880}
		fmt.Println(fmt.Sprint(solution(60, 1000000)))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
