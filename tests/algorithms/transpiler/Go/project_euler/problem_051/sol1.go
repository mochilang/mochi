//go:build ignore

// Generated by Mochi v0.10.70 on 2025-08-22 15:33:44 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

func _modi(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		return
	}
	s[idx] = v
}

func parse_int(s string) int {
	var value int = 0
	_ = value
	var i int = 0
	_ = i
	for i < len(s) {
		value = ((value * 10) + func() int { n, _ := strconv.Atoi(fmt.Sprint(string(_index([]rune(s), i)))); return n }())
		i = (i + 1)
	}
	return value
}

func digit_replacements(number int) [][]int {
	var num_str string = fmt.Sprint(number)
	_ = num_str
	var counts []int = []int{0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
	_ = counts
	var i int = 0
	_ = i
	for i < len(num_str) {
		var d int = func() int { n, _ := strconv.Atoi(fmt.Sprint(string(_index([]rune(num_str), i)))); return n }()
		_ = d
		_setIndex(counts, d, (_index(counts, d) + 1))
		i = (i + 1)
	}
	var result [][]int = [][]int{}
	_ = result
	var digits string = "0123456789"
	_ = digits
	_ = digits
	var digit int = 0
	_ = digit
	for digit < 10 {
		if _index(counts, digit) > 1 {
			var family []int = []int{}
			_ = family
			var repl int = 0
			_ = repl
			for repl < 10 {
				var new_str string = ""
				_ = new_str
				var j int = 0
				_ = j
				for j < len(num_str) {
					var c string = string(_index([]rune(num_str), j))
					_ = c
					if c == string(_index([]rune(digits), digit)) {
						new_str = (new_str + string(_index([]rune(digits), repl)))
					} else {
						new_str = (new_str + c)
					}
					j = (j + 1)
				}
				family = append(family, parse_int(new_str))
				repl = (repl + 1)
			}
			result = append(result, family)
		}
		digit = (digit + 1)
	}
	return result
}

func is_prime(num int) bool {
	if num < 2 {
		return false
	}
	if _modi(num, 2) == 0 {
		return (num == 2)
	}
	var i int = 3
	_ = i
	for (i * i) <= num {
		if _modi(num, i) == 0 {
			return false
		}
		i = (i + 2)
	}
	return true
}

func solution(family_length int) int {
	var candidate int = 121313
	_ = candidate
	if !is_prime(candidate) {
		return (0 - 1)
	}
	var reps [][]int = digit_replacements(candidate)
	_ = reps
	var r int = 0
	_ = r
	for r < len(reps) {
		var family []int = _index(reps, r)
		_ = family
		var count int = 0
		_ = count
		var min_prime int = 0
		_ = min_prime
		var first bool = true
		_ = first
		var i int = 0
		_ = i
		for i < len(family) {
			var num int = _index(family, i)
			_ = num
			if is_prime(num) {
				if first {
					min_prime = num
					first = false
				} else {
					if num < min_prime {
						min_prime = num
					}
				}
				count = (count + 1)
			}
			i = (i + 1)
		}
		if count == family_length {
			return min_prime
		}
		r = (r + 1)
	}
	return (0 - 1)
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(fmt.Sprint(solution(8)))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
