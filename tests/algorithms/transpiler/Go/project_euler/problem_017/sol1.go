//go:build ignore

// Generated by Mochi v0.10.69 on 2025-08-22 14:25:01 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

func _modi(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func solution(n int) int {
	var ones_counts []int = []int{0, 3, 3, 5, 4, 4, 3, 5, 5, 4, 3, 6, 6, 8, 8, 7, 7, 9, 8, 8}
	_ = ones_counts
	var tens_counts []int = []int{0, 0, 6, 6, 5, 5, 5, 7, 6, 6}
	_ = tens_counts
	var count int = 0
	_ = count
	var i int = 1
	_ = i
	for i <= n {
		if i < 1000 {
			if i >= 100 {
				count = ((count + _index(ones_counts, (i/100))) + 7)
				if _modi(i, 100) != 0 {
					count = (count + 3)
				}
			}
			var remainder int = _modi(i, 100)
			_ = remainder
			if (remainder > 0) && (remainder < 20) {
				count = (count + _index(ones_counts, remainder))
			} else {
				count = (count + _index(ones_counts, _modi(i, 10)))
				count = (count + _index(tens_counts, ((remainder-_modi(i, 10))/10)))
			}
		} else {
			count = ((count + _index(ones_counts, (i/1000))) + 8)
		}
		i = (i + 1)
	}
	return count
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(fmt.Sprint(solution(1000)))
		fmt.Println(fmt.Sprint(solution(5)))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
