//go:build ignore

// Generated by Mochi v0.10.70 on 2025-08-22 23:15:04 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

func _modi(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func range_desc(start int, end int) []int {
	var res []int = []int{}
	_ = res
	var i int = start
	_ = i
	for i >= end {
		res = append(res, i)
		i = (i - 1)
	}
	return res
}

func range_asc(start int, end int) []int {
	var res []int = []int{}
	_ = res
	var i int = start
	_ = i
	for i <= end {
		res = append(res, i)
		i = (i + 1)
	}
	return res
}

func concat_lists(a []int, b []int) []int {
	var res []int = a
	_ = res
	var i int = 0
	_ = i
	for i < len(b) {
		res = append(res, _index(b, i))
		i = (i + 1)
	}
	return res
}

func swap(xs []int, i int, j int) []int {
	var res []int = []int{}
	_ = res
	var k int = 0
	_ = k
	for k < len(xs) {
		if k == i {
			res = append(res, _index(xs, j))
		} else {
			if k == j {
				res = append(res, _index(xs, i))
			} else {
				res = append(res, _index(xs, k))
			}
		}
		k = (k + 1)
	}
	return res
}

func generate_gon_ring(gon_side int, perm []int) []int {
	var result []int = []int{}
	_ = result
	result = append(result, _index(perm, 0))
	result = append(result, _index(perm, 1))
	result = append(result, _index(perm, 2))
	var extended []int = append(perm, _index(perm, 1))
	_ = extended
	var magic_number int = func() int {
		if gon_side < 5 {
			return 1
		} else {
			return 2
		}
	}()
	_ = magic_number
	var i int = 1
	_ = i
	for i < ((len(extended) / 3) + magic_number) {
		result = append(result, _index(extended, ((2*i)+1)))
		result = append(result, _index(result, ((3*i)-1)))
		result = append(result, _index(extended, ((2*i)+2)))
		i = (i + 1)
	}
	return result
}

func min_outer(numbers []int) int {
	var min_val int = _index(numbers, 0)
	_ = min_val
	var i int = 3
	_ = i
	for i < len(numbers) {
		if _index(numbers, i) < min_val {
			min_val = _index(numbers, i)
		}
		i = (i + 3)
	}
	return min_val
}

func is_magic_gon(numbers []int) bool {
	if _modi(len(numbers), 3) != 0 {
		return false
	}
	if min_outer(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(numbers)) != _index(numbers, 0) {
		return false
	}
	var total int = ((_index(numbers, 0) + _index(numbers, 1)) + _index(numbers, 2))
	_ = total
	var i int = 3
	_ = i
	for i < len(numbers) {
		if ((_index(numbers, i) + _index(numbers, (i+1))) + _index(numbers, (i+2))) != total {
			return false
		}
		i = (i + 3)
	}
	return true
}

func permute_search(nums []int, start int, gon_side int, current_max string) string {
	if start == len(nums) {
		var ring []int = generate_gon_ring(gon_side, func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(nums))
		_ = ring
		if is_magic_gon(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(ring)) {
			var s string = ""
			_ = s
			var k int = 0
			_ = k
			for k < len(ring) {
				s = (s + fmt.Sprint(_index(ring, k)))
				k = (k + 1)
			}
			if s > current_max {
				return s
			}
		}
		return current_max
	}
	var res string = current_max
	_ = res
	var i int = start
	_ = i
	for i < len(nums) {
		var swapped []int = swap(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(nums), start, i)
		_ = swapped
		var candidate string = permute_search(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(swapped), (start + 1), gon_side, res)
		_ = candidate
		if candidate > res {
			res = candidate
		}
		i = (i + 1)
	}
	return res
}

func solution(gon_side int) string {
	if (gon_side < 3) || (gon_side > 5) {
		return ""
	}
	var small []int = range_desc((gon_side + 1), 1)
	_ = small
	var big []int = range_asc((gon_side + 2), (gon_side * 2))
	_ = big
	var numbers []int = concat_lists(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(small), func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(big))
	_ = numbers
	var max_str string = permute_search(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(numbers), 0, gon_side, "")
	_ = max_str
	_ = max_str
	return max_str
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(solution(5))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
