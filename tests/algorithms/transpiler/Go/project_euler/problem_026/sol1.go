//go:build ignore

// Generated by Mochi v0.10.73 on 2025-08-25 23:59:50 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

func _modi(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

var __name__ string = "__main__"

func contains(lst []int, val int) bool {
	for _, x := range lst {
		_ = x
		if x == val {
			return true
		}
	}
	return false
}

func solution(numerator int, limit int) int {
	var the_digit int = 1
	_ = the_digit
	var longest_len int = 0
	_ = longest_len
	for d := numerator; d < limit; d++ {
		var remainders []int = []int{}
		_ = remainders
		var rem int = numerator
		_ = rem
		var count int = 1
		_ = count
		for count <= limit {
			if contains(remainders, rem) {
				if longest_len < len(remainders) {
					longest_len = len(remainders)
					the_digit = d
				}
			} else {
				remainders = append(remainders, rem)
				rem = _modi((rem * 10), d)
			}
			count = (count + 1)
		}
	}
	return the_digit
}

func mochiMain() {
	fmt.Println(fmt.Sprint(solution(1, 10)))
	fmt.Println(fmt.Sprint(solution(10, 100)))
	fmt.Println(fmt.Sprint(solution(10, 1000)))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
