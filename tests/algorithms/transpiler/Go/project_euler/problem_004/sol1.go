//go:build ignore

// Generated by Mochi v0.10.64 on 2025-08-12 12:35:51 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _mod(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func is_palindrome(num int) bool {
	var s string = fmt.Sprint(num)
	_ = s
	var i int = 0
	_ = i
	var j int = (len(s) - 1)
	_ = j
	for i < j {
		if string([]rune(s)[i:(i+1)]) != string([]rune(s)[j:(j+1)]) {
			return false
		}
		i = (i + 1)
		j = (j - 1)
	}
	return true
}

func solution(n int) int {
	var number int = (n - 1)
	_ = number
	for number > 9999 {
		if is_palindrome(number) {
			var divisor int = 999
			_ = divisor
			for divisor > 99 {
				if _mod(number, divisor) == 0 {
					var other int = (number / divisor)
					_ = other
					if len(fmt.Sprint(other)) == 3 {
						return number
					}
				}
				divisor = (divisor - 1)
			}
		}
		number = (number - 1)
	}
	fmt.Println("That number is larger than our acceptable range.")
	return 0
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(("solution() = " + fmt.Sprint(solution(998001))))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
