//go:build ignore

// Generated by Mochi v0.10.70 on 2025-08-22 15:33:43 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		return
	}
	s[idx] = v
}

func prime_sieve(limit int) []int {
	if limit <= 2 {
		return func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}([]int{})
	}
	var is_prime []bool = []bool{}
	_ = is_prime
	var i int = 0
	_ = i
	for i < limit {
		is_prime = append(is_prime, true)
		i = (i + 1)
	}
	_setIndex(is_prime, 0, false)
	_setIndex(is_prime, 1, false)
	var p int = 3
	_ = p
	for (p * p) < limit {
		var index int = (p * 2)
		_ = index
		for index < limit {
			_setIndex(is_prime, index, false)
			index = (index + p)
		}
		p = (p + 2)
	}
	var primes []int = []int{2}
	_ = primes
	var n int = 3
	_ = n
	for n < limit {
		if _index(is_prime, n) {
			primes = append(primes, n)
		}
		n = (n + 2)
	}
	return primes
}

func solution(ceiling int) int {
	var primes []int = prime_sieve(ceiling)
	_ = primes
	var prime_map map[int]bool = map[int]bool{}
	_ = prime_map
	var i int = 0
	_ = i
	for i < len(primes) {
		prime_map[_index(primes, i)] = true
		i = (i + 1)
	}
	var prefix []int = []int{0}
	_ = prefix
	i = 0
	for i < len(primes) {
		prefix = append(prefix, (_index(prefix, i) + _index(primes, i)))
		i = (i + 1)
	}
	var max_len int = 0
	_ = max_len
	for (max_len < len(prefix)) && (_index(prefix, max_len) < ceiling) {
		max_len = (max_len + 1)
	}
	var L int = max_len
	_ = L
	for L > 0 {
		var start int = 0
		_ = start
		for (start + L) <= len(primes) {
			var s int = (_index(prefix, (start+L)) - _index(prefix, start))
			_ = s
			if s >= ceiling {
				break
			}
			if prime_map[s] {
				return s
			}
			start = (start + 1)
		}
		L = (L - 1)
	}
	return 0
}

var ans int

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		ans = solution(1000000)
		fmt.Println(("solution() = " + fmt.Sprint(ans)))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
