//go:build ignore

// Generated by Mochi v0.10.70 on 2025-08-22 15:33:39 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func run(n int) []int {
	var limit int = 200000
	_ = limit
	var counts map[int]int = map[int]int{}
	_ = counts
	var p int = 2
	_ = p
	for p <= limit {
		if !func() bool { _, ok := counts[p]; return ok }() {
			var m int = p
			_ = m
			for m <= limit {
				if func() bool { _, ok := counts[m]; return ok }() {
					counts[m] = (counts[m] + 1)
				} else {
					counts[m] = 1
				}
				m = (m + p)
			}
		}
		p = (p + 1)
	}
	var streak int = 0
	_ = streak
	var num int = 2
	_ = num
	for num <= limit {
		var c int = func() int {
			if func() bool { _, ok := counts[num]; return ok }() {
				return counts[num]
			} else {
				return 0
			}
		}()
		_ = c
		if c == n {
			streak = (streak + 1)
			if streak == n {
				var result []int = []int{}
				_ = result
				var start int = ((num - n) + 1)
				_ = start
				var j int = 0
				_ = j
				for j < n {
					result = append(result, (start + j))
					j = (j + 1)
				}
				return result
			}
		} else {
			streak = 0
		}
		num = (num + 1)
	}
	return func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}([]int{})
}

func solution(n int) int {
	var res []int = run(n)
	_ = res
	_ = res
	return _index(res, 0)
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(fmt.Sprint(solution(4)))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
