//go:build ignore

// Generated by Mochi v0.10.69 on 2025-08-22 14:25:06 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

func _modi(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func factorial(n int) int {
	var result int = 1
	_ = result
	var i int = 2
	_ = i
	for i <= n {
		result = (result * i)
		i = (i + 1)
	}
	return result
}

func digit_sum(n int) int {
	var total int = 0
	_ = total
	var m int = n
	_ = m
	for m > 0 {
		total = (total + _modi(m, 10))
		m = (m / 10)
	}
	return total
}

func solution(num int) int {
	var f int = factorial(num)
	_ = f
	_ = f
	return digit_sum(f)
}

func mochiMain() {
	fmt.Println(solution(100))
	fmt.Println(solution(50))
	fmt.Println(solution(10))
	fmt.Println(solution(5))
	fmt.Println(solution(3))
	fmt.Println(solution(2))
	fmt.Println(solution(1))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
