//go:build ignore

// Generated by Mochi v0.10.69 on 2025-08-22 14:25:09 GMT+7
package main

import (
	"bufio"
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

var _scanner = bufio.NewScanner(os.Stdin)

func _input() string {
	if !_scanner.Scan() {
		return ""
	}
	return _scanner.Text()
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func factorial_digit_sum(num int) int {
	var factorial int = 1
	_ = factorial
	var i int = 1
	_ = i
	for i <= num {
		factorial = (factorial * i)
		i = (i + 1)
	}
	var s string = fmt.Sprint(factorial)
	_ = s
	var result int = 0
	_ = result
	var j int = 0
	_ = j
	for j < len(s) {
		result = (result + func() int { n, _ := strconv.Atoi(fmt.Sprint(string(_index([]rune(s), j)))); return n }())
		j = (j + 1)
	}
	return result
}

func mochiMain() {
	fmt.Println("Enter the Number: ")
	var n int = func() int { n, _ := strconv.Atoi(fmt.Sprint(_input())); return n }()
	_ = n
	fmt.Println(fmt.Sprint(factorial_digit_sum(n)))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
