//go:build ignore

// Generated by Mochi v0.10.70 on 2025-08-22 15:34:15 GMT+7
package main

import (
	"bufio"
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

var _scanner = bufio.NewScanner(os.Stdin)

func _input() string {
	if !_scanner.Scan() {
		return ""
	}
	return _scanner.Text()
}

func _modi(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func intSqrt(n int) int {
	if n == 0 {
		return 0
	}
	var x int = n
	_ = x
	var y int = ((x + 1) / 2)
	_ = y
	for y < x {
		x = y
		y = ((x + (n / x)) / 2)
	}
	return x
}

func continuousFractionPeriod(n int) int {
	var m int = 0
	_ = m
	var d int = 1
	_ = d
	var a0 int = intSqrt(n)
	_ = a0
	var a int = a0
	_ = a
	var period int = 0
	_ = period
	for a != (2 * a0) {
		m = ((d * a) - m)
		d = ((n - (m * m)) / d)
		a = ((a0 + m) / d)
		period = (period + 1)
	}
	return period
}

func solution(n int) int {
	var count int = 0
	_ = count
	for i := 2; i < (n + 1); i++ {
		var r int = intSqrt(i)
		_ = r
		if (r * r) != i {
			var p int = continuousFractionPeriod(i)
			_ = p
			if _modi(p, 2) == 1 {
				count = (count + 1)
			}
		}
	}
	return count
}

func mochiMain() {
	var nStr string = _input()
	_ = nStr
	_ = nStr
	var n int = func() int { n, _ := strconv.Atoi(fmt.Sprint(nStr)); return n }()
	_ = n
	fmt.Println(solution(n))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
