//go:build ignore

// Generated by Mochi v0.10.69 on 2025-08-22 14:25:10 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

func _modi(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func int_sqrt(n int) int {
	var r int = 0
	_ = r
	for ((r + 1) * (r + 1)) <= n {
		r = (r + 1)
	}
	return r
}

func sum_of_divisors(n int) int {
	var total int = 0
	_ = total
	var root int = int_sqrt(n)
	_ = root
	var i int = 1
	_ = i
	for i <= root {
		if _modi(n, i) == 0 {
			if (i * i) == n {
				total = (total + i)
			} else {
				total = ((total + i) + (n / i))
			}
		}
		i = (i + 1)
	}
	return (total - n)
}

func solution(limit int) int {
	var total int = 0
	_ = total
	var i int = 1
	_ = i
	for i < limit {
		var s int = sum_of_divisors(i)
		_ = s
		if (s != i) && (sum_of_divisors(s) == i) {
			total = (total + i)
		}
		i = (i + 1)
	}
	return total
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(solution(10000))
		fmt.Println(solution(5000))
		fmt.Println(solution(1000))
		fmt.Println(solution(100))
		fmt.Println(solution(50))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
