//go:build ignore

// Generated by Mochi v0.10.70 on 2025-08-22 15:33:59 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func reverse_string(s string) string {
	var result string = ""
	_ = result
	var i int = (len(s) - 1)
	_ = i
	for i >= 0 {
		result = (result + string(_index([]rune(s), i)))
		i = (i - 1)
	}
	return result
}

func is_palindrome(n int) bool {
	var s string = fmt.Sprint(n)
	_ = s
	_ = s
	return (s == reverse_string(s))
}

func sum_reverse(n int) int {
	var s string = fmt.Sprint(n)
	_ = s
	var r string = reverse_string(s)
	_ = r
	_ = r
	return (n + func() int { n, _ := strconv.Atoi(fmt.Sprint(r)); return n }())
}

func solution(limit int) int {
	var count int = 0
	_ = count
	var num int = 1
	_ = num
	for num < limit {
		var iterations int = 0
		_ = iterations
		var current int = num
		_ = current
		for iterations < 50 {
			current = sum_reverse(current)
			iterations = (iterations + 1)
			if is_palindrome(current) {
				break
			}
		}
		if (iterations == 50) && (is_palindrome(current) == false) {
			count = (count + 1)
		}
		num = (num + 1)
	}
	return count
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(("solution() = " + fmt.Sprint(solution(10000))))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
