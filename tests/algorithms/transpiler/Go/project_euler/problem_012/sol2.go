//go:build ignore

// Generated by Mochi v0.10.69 on 2025-08-22 14:24:52 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

func _modi(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func countDivisors(n int) int {
	var num int = n
	_ = num
	var total int = 1
	_ = total
	var i int = 2
	_ = i
	for (i * i) <= num {
		var multiplicity int = 0
		_ = multiplicity
		for _modi(num, i) == 0 {
			num = (num / i)
			multiplicity = (multiplicity + 1)
		}
		total = (total * (multiplicity + 1))
		i = (i + 1)
	}
	if num > 1 {
		total = (total * 2)
	}
	return total
}

func solution() int {
	var n int = 1
	_ = n
	var tri int = 1
	_ = tri
	for countDivisors(tri) <= 500 {
		n = (n + 1)
		tri = (tri + n)
	}
	return tri
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(solution())
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
