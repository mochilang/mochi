//go:build ignore

// Generated by Mochi v0.10.69 on 2025-08-22 14:24:57 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

func factorial(n int) int {
	var result int = 1
	_ = result
	var i int = 2
	_ = i
	for i <= n {
		result = (result * i)
		i = (i + 1)
	}
	return result
}

func solution(n int) int {
	var total int = (2 * n)
	_ = total
	var k int = (total / 2)
	_ = k
	_ = k
	return (factorial(total) / (factorial(k) * factorial((total - k))))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(fmt.Sprint(solution(25)))
		fmt.Println(fmt.Sprint(solution(23)))
		fmt.Println(fmt.Sprint(solution(20)))
		fmt.Println(fmt.Sprint(solution(15)))
		fmt.Println(fmt.Sprint(solution(1)))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
