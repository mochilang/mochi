//go:build ignore

// Generated by Mochi v0.10.69 on 2025-08-22 14:25:48 GMT+7
package main

import (
	"bufio"
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

var _scanner = bufio.NewScanner(os.Stdin)

func _input() string {
	if !_scanner.Scan() {
		return ""
	}
	return _scanner.Text()
}

func fibonacci(n int) int {
	if n == 1 {
		return 0
	}
	if n == 2 {
		return 1
	}
	var a int = 0
	_ = a
	var b int = 1
	_ = b
	var i int = 2
	_ = i
	for i <= n {
		var c int = (a + b)
		_ = c
		a = b
		b = c
		i = (i + 1)
	}
	return b
}

func fibonacci_digits_index(n int) int {
	var digits int = 0
	_ = digits
	var index int = 2
	_ = index
	for digits < n {
		index = (index + 1)
		var fib int = fibonacci(index)
		_ = fib
		digits = len(fmt.Sprint(fib))
	}
	return index
}

func solution(n int) int {
	return fibonacci_digits_index(n)
}

func mochiMain() {
	var n int = func() int { n, _ := strconv.Atoi(fmt.Sprint(_input())); return n }()
	_ = n
	fmt.Println(solution(n))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
