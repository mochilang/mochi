//go:build ignore

// Generated by Mochi v0.10.70 on 2025-08-22 23:14:42 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		return
	}
	s[idx] = v
}

func get_digits(num int) string {
	var cube int = ((num * num) * num)
	_ = cube
	var s string = fmt.Sprint(cube)
	_ = s
	var counts []int = []int{}
	_ = counts
	var j int = 0
	_ = j
	for j < 10 {
		counts = append(counts, 0)
		j = (j + 1)
	}
	var i int = 0
	_ = i
	for i < len(s) {
		var d int = func() int { n, _ := strconv.Atoi(fmt.Sprint(string(_index([]rune(s), i)))); return n }()
		_ = d
		_setIndex(counts, d, (_index(counts, d) + 1))
		i = (i + 1)
	}
	var result string = ""
	_ = result
	var d int = 0
	_ = d
	for d < 10 {
		var c int = _index(counts, d)
		_ = c
		for c > 0 {
			result = (result + fmt.Sprint(d))
			c = (c - 1)
		}
		d = (d + 1)
	}
	return result
}

func solution(max_base int) int {
	var freqs map[string][]int = map[string][]int{}
	_ = freqs
	var num int = 0
	_ = num
	for {
		var digits string = get_digits(num)
		_ = digits
		var arr []int = []int{}
		_ = arr
		if func() bool { _, ok := freqs[digits]; return ok }() {
			arr = freqs[digits]
		}
		arr = append(arr, num)
		freqs[digits] = arr
		if len(arr) == max_base {
			var base int = _index(arr, 0)
			_ = base
			_ = base
			return ((base * base) * base)
		}
		num = (num + 1)
	}
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(("solution() = " + fmt.Sprint(solution(5))))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
