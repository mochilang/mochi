//go:build ignore

// Generated by Mochi v0.10.70 on 2025-08-22 23:15:49 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		return
	}
	s[idx] = v
}

func solution(length int) int {
	var ways [][]int = [][]int{}
	_ = ways
	var i int = 0
	_ = i
	for i <= length {
		var row []int = []int{}
		_ = row
		row = append(row, 0)
		row = append(row, 0)
		row = append(row, 0)
		ways = append(ways, row)
		i = (i + 1)
	}
	var row_length int = 0
	_ = row_length
	for row_length <= length {
		var tile_length int = 2
		_ = tile_length
		for tile_length <= 4 {
			var tile_start int = 0
			_ = tile_start
			for tile_start <= (row_length - tile_length) {
				var remaining int = ((row_length - tile_start) - tile_length)
				_ = remaining
				_setIndex(_index(ways, row_length), (tile_length - 2), ((_index(_index(ways, row_length), (tile_length-2)) + _index(_index(ways, remaining), (tile_length-2))) + 1))
				tile_start = (tile_start + 1)
			}
			tile_length = (tile_length + 1)
		}
		row_length = (row_length + 1)
	}
	var total int = 0
	_ = total
	var j int = 0
	_ = j
	for j < 3 {
		total = (total + _index(_index(ways, length), j))
		j = (j + 1)
	}
	return total
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(solution(5))
		fmt.Println(solution(50))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
