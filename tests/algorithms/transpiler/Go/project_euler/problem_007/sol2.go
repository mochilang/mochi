//go:build ignore

// Generated by Mochi v0.10.64 on 2025-08-12 12:36:00 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _mod(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

func is_prime(number int) bool {
	if (number > 1) && (number < 4) {
		return true
	} else {
		if ((number < 2) || (_mod(number, 2) == 0)) || (_mod(number, 3) == 0) {
			return false
		}
	}
	var i int = 5
	_ = i
	for (i * i) <= number {
		if (_mod(number, i) == 0) || (_mod(number, (i+2)) == 0) {
			return false
		}
		i = (i + 6)
	}
	return true
}

func solution(nth int) int {
	if nth <= 0 {
		panic("Parameter nth must be greater than or equal to one.")
	}
	var primes []int = []int{}
	_ = primes
	var num int = 2
	_ = num
	for len(primes) < nth {
		if is_prime(num) {
			primes = append(primes, num)
		}
		num = (num + 1)
	}
	return _index(primes, (len(primes) - 1))
}

var ans int

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		ans = solution(10001)
		fmt.Println(("solution(10001) = " + fmt.Sprint(ans)))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
