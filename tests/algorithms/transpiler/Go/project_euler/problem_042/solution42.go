//go:build ignore

// Generated by Mochi v0.10.70 on 2025-08-22 15:28:58 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

func ord(v any) any {
	switch s := v.(type) {
	case string:
		r := []rune(s)
		if len(r) == 0 {
			return 0
		}
		return int(r[0])
	default:
		return 0
	}
}

func read_file(path string) string {
	b, err := os.ReadFile(path)
	if err != nil {
		return ""
	}
	return string(b)
}

func triangular_numbers(limit int) []int {
	var res []int = []int{}
	_ = res
	var n int = 1
	_ = n
	for n <= limit {
		res = append(res, ((n * (n + 1)) / 2))
		n = (n + 1)
	}
	return res
}

func parse_words(text string) []string {
	var words []string = []string{}
	_ = words
	var current string = ""
	_ = current
	var i int = 0
	_ = i
	for i < len(text) {
		var c string = string([]rune(text)[i:(i + 1)])
		_ = c
		if c == "," {
			words = append(words, current)
			current = ""
		} else {
			if c == "\"" {
			} else {
				if (c == "\r") || (c == "\n") {
				} else {
					current = (current + c)
				}
			}
		}
		i = (i + 1)
	}
	if len(current) > 0 {
		words = append(words, current)
	}
	return words
}

func word_value(word string) int {
	var total int = 0
	_ = total
	var i int = 0
	_ = i
	for i < len(word) {
		total = ((total + ord(string([]rune(word)[i:(i+1)])).(int)) - 64)
		i = (i + 1)
	}
	return total
}

func contains(xs []int, target int) bool {
	for _, x := range xs {
		_ = x
		if x == target {
			return true
		}
	}
	return false
}

func solution() int {
	var text string = read_file("words.txt")
	_ = text
	var words []string = parse_words(text)
	_ = words
	var tri []int = triangular_numbers(100)
	_ = tri
	var count int = 0
	_ = count
	for _, w := range words {
		_ = w
		var v int = word_value(w)
		_ = v
		if contains(tri, v) {
			count = (count + 1)
		}
	}
	return count
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(fmt.Sprint(solution()))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
