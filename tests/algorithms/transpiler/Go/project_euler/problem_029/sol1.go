//go:build ignore

// Generated by Mochi v0.10.73 on 2025-08-25 23:59:54 GMT+7
package main

import (
	"bufio"
	"encoding/json"
	"fmt"
	"os"
	"reflect"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

var _scanner = bufio.NewScanner(os.Stdin)

func _input() string {
	if !_scanner.Scan() {
		return ""
	}
	return _scanner.Text()
}

var __name__ string = "__main__"

func int_pow(base int, exp int) int {
	var result int = 1
	_ = result
	var i int = 0
	_ = i
	for i < exp {
		result = (result * base)
		i = (i + 1)
	}
	return result
}

func solution(n int) int {
	var powers []int = []int{}
	_ = powers
	var limit int = (n + 1)
	_ = limit
	for a := 2; a < limit; a++ {
		for b := 2; b < limit; b++ {
			var p int = int_pow(a, b)
			_ = p
			if !func() bool {
				v := reflect.ValueOf(powers)
				if v.Kind() == reflect.Map {
					key := p
					return v.MapIndex(reflect.ValueOf(key)).IsValid()
				}
				if v.Kind() == reflect.Slice || v.Kind() == reflect.Array {
					for i := 0; i < v.Len(); i++ {
						if v.Index(i).Interface() == p {
							return true
						}
					}
				}
				return false
			}() {
				powers = append(powers, p)
			}
		}
	}
	return len(powers)
}

func mochiMain() {
	var n int = func() int { n, _ := strconv.Atoi(fmt.Sprint(_input())); return n }()
	_ = n
	fmt.Println("Number of terms ", solution(n))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
