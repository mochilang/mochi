//go:build ignore

// Generated by Mochi v0.10.73 on 2025-08-26 00:00:13 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

var __name__ string = "__main__"

func solution() int {
	var targets []int = []int{1, 10, 100, 1000, 10000, 100000, 1000000}
	_ = targets
	var idx int = 0
	_ = idx
	var product int = 1
	_ = product
	var count int = 0
	_ = count
	var i int = 1
	_ = i
	for idx < len(targets) {
		var s string = fmt.Sprint(i)
		_ = s
		var j int = 0
		_ = j
		for j < len(s) {
			count = (count + 1)
			if count == _index(targets, idx) {
				product = (product * func() int { n, _ := strconv.Atoi(fmt.Sprint(string(_index([]rune(s), j)))); return n }())
				idx = (idx + 1)
				if idx == len(targets) {
					break
				}
			}
			j = (j + 1)
		}
		i = (i + 1)
	}
	return product
}

func test_solution() {
	if solution() != 210 {
		panic("solution failed")
	}
}

func mochiMain() {
	test_solution()
	fmt.Println(fmt.Sprint(solution()))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
