//go:build ignore

// Generated by Mochi v0.10.73 on 2025-08-26 00:00:05 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

func _modi(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

var __name__ string = "__main__"

func is_palindrome_str(s string) bool {
	var i int = 0
	_ = i
	var j int = (len(s) - 1)
	_ = j
	for i < j {
		if _substr(s, i, (i+1)) != _substr(s, j, (j+1)) {
			return false
		}
		i = (i + 1)
		j = (j - 1)
	}
	return true
}

func to_binary(n int) string {
	if n == 0 {
		return "0"
	}
	var res string = ""
	_ = res
	var x int = n
	_ = x
	for x > 0 {
		res = (fmt.Sprint(_modi(x, 2)) + res)
		x = func() int {
			a := x
			b := 2
			q := a / b
			r := a % b
			if (r != 0) && ((r < 0) != (b < 0)) {
				q--
			}
			return q
		}()
	}
	return res
}

func solution(n int) int {
	var total int = 0
	_ = total
	var i int = 1
	_ = i
	for i < n {
		var dec string = fmt.Sprint(i)
		_ = dec
		var bin string = to_binary(i)
		_ = bin
		if is_palindrome_str(dec) && is_palindrome_str(bin) {
			total = (total + i)
		}
		i = (i + 1)
	}
	return total
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(solution(1000000))
		fmt.Println(solution(500000))
		fmt.Println(solution(100000))
		fmt.Println(solution(1000))
		fmt.Println(solution(100))
		fmt.Println(solution(10))
		fmt.Println(solution(2))
		fmt.Println(solution(1))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
