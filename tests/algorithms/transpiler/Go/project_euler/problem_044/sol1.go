//go:build ignore

// Generated by Mochi v0.10.70 on 2025-08-22 15:29:08 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func sqrt(x float64) float64 {
	if x <= 0.0 {
		return 0.0
	}
	var guess float64 = x
	_ = guess
	var i int = 0
	_ = i
	for i < 10 {
		guess = (float64((guess + (float64(x) / float64(guess)))) / float64(2.0))
		i = (i + 1)
	}
	return guess
}

func is_pentagonal(n int) bool {
	var root float64 = sqrt((1.0 + (24.0 * (1.0 * float64(n)))))
	_ = root
	var val float64 = (float64((1.0 + root)) / float64(6.0))
	_ = val
	_ = val
	var val_int int = int(val)
	_ = val_int
	_ = val_int
	return (val == (1.0 * float64(val_int)))
}

func pentagonal(k int) int {
	return ((k * ((3 * k) - 1)) / 2)
}

func solution(limit int) int {
	var pentagonal_nums []int = []int{}
	_ = pentagonal_nums
	var i int = 1
	_ = i
	for i < limit {
		pentagonal_nums = append(pentagonal_nums, pentagonal(i))
		i = (i + 1)
	}
	var a_idx int = 0
	_ = a_idx
	for a_idx < len(pentagonal_nums) {
		var pentagonal_i int = _index(pentagonal_nums, a_idx)
		_ = pentagonal_i
		var b_idx int = a_idx
		_ = b_idx
		for b_idx < len(pentagonal_nums) {
			var pentagonal_j int = _index(pentagonal_nums, b_idx)
			_ = pentagonal_j
			var s int = (pentagonal_i + pentagonal_j)
			_ = s
			var d int = (pentagonal_j - pentagonal_i)
			_ = d
			if is_pentagonal(s) && is_pentagonal(d) {
				return d
			}
			b_idx = (b_idx + 1)
		}
		a_idx = (a_idx + 1)
	}
	return (0 - 1)
}

var result int

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		result = solution(5000)
		fmt.Println(("solution() = " + fmt.Sprint(result)))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
