//go:build ignore

// Generated by Mochi v0.10.73 on 2025-08-25 23:59:55 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

func _modi(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

var __name__ string = "__main__"

var DIGITS_FIFTH_POWER []int

func digits_fifth_powers_sum(number int) int {
	var total int = 0
	_ = total
	var n int = number
	_ = n
	for n > 0 {
		var digit int = _modi(n, 10)
		_ = digit
		total = (total + _index(DIGITS_FIFTH_POWER, digit))
		n = func() int {
			a := n
			b := 10
			q := a / b
			r := a % b
			if (r != 0) && ((r < 0) != (b < 0)) {
				q--
			}
			return q
		}()
	}
	return total
}

func solution() int {
	var total int = 0
	_ = total
	var num int = 1000
	_ = num
	for num < 1000000 {
		if num == digits_fifth_powers_sum(num) {
			total = (total + num)
		}
		num = (num + 1)
	}
	return total
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		DIGITS_FIFTH_POWER = []int{0, 1, 32, 243, 1024, 3125, 7776, 16807, 32768, 59049}
		fmt.Println(solution())
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
