//go:build ignore

// Generated by Mochi v0.10.70 on 2025-08-22 15:33:41 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

func _modi(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func pow_mod(base int, exponent int, modulus int) int {
	var result int = 1
	_ = result
	var b int = _modi(base, modulus)
	_ = b
	var e int = exponent
	_ = e
	for e > 0 {
		if _modi(e, 2) == 1 {
			result = _modi((result * b), modulus)
		}
		b = _modi((b * b), modulus)
		e = (e / 2)
	}
	return result
}

func solution() string {
	var modulus int = 10000000000
	_ = modulus
	var total int = 0
	_ = total
	var i int = 1
	_ = i
	for i <= 1000 {
		total = _modi((total + pow_mod(i, i, modulus)), modulus)
		i = (i + 1)
	}
	var s string = fmt.Sprint(total)
	_ = s
	for len(s) < 10 {
		s = ("0" + s)
	}
	return s
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(solution())
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
