//go:build ignore

// Generated by Mochi v0.10.73 on 2025-08-26 00:00:12 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"sort"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

var __name__ string = "__main__"

func int_sqrt(n int) int {
	var low int = 0
	_ = low
	var high int = n
	_ = high
	for low <= high {
		var mid int = func() int {
			a := (low + high)
			b := 2
			q := a / b
			r := a % b
			if (r != 0) && ((r < 0) != (b < 0)) {
				q--
			}
			return q
		}()
		_ = mid
		var sq int = (mid * mid)
		_ = sq
		if sq == n {
			return mid
		}
		if sq < n {
			low = (mid + 1)
		} else {
			high = (mid - 1)
		}
	}
	return high
}

func pythagorean_triple(max_perimeter int) map[int]int {
	var triplets map[int]int = map[int]int{}
	if triplets == nil {
		triplets = map[int]int{}
	}
	_ = triplets
	var base int = 1
	_ = base
	for base <= max_perimeter {
		var perpendicular int = base
		_ = perpendicular
		for perpendicular <= max_perimeter {
			var hyp_sq int = ((base * base) + (perpendicular * perpendicular))
			_ = hyp_sq
			var hyp int = int_sqrt(hyp_sq)
			_ = hyp
			if (hyp * hyp) == hyp_sq {
				var perimeter int = ((base + perpendicular) + hyp)
				_ = perimeter
				if perimeter <= max_perimeter {
					if func() bool { _, ok := triplets[perimeter]; return ok }() {
						triplets[perimeter] = (triplets[perimeter] + 1)
					} else {
						triplets[perimeter] = 1
					}
				}
			}
			perpendicular = (perpendicular + 1)
		}
		base = (base + 1)
	}
	return triplets
}

func max_perimeter(counts map[int]int) int {
	var best_p int = 0
	_ = best_p
	var max_count int = 0
	_ = max_count
	for _, p := range func() []int {
		keys := make([]int, 0, len(counts))
		for k := range counts {
			keys = append(keys, k)
		}
		sort.Slice(keys, func(i, j int) bool { return fmt.Sprint(keys[i]) < fmt.Sprint(keys[j]) })
		return keys
	}() {
		_ = p
		var count int = counts[p]
		_ = count
		if (count > max_count) || ((count == max_count) && (p > best_p)) {
			max_count = count
			best_p = p
		}
	}
	return best_p
}

func solution(n int) int {
	var triplets map[int]int = pythagorean_triple(n)
	if triplets == nil {
		triplets = map[int]int{}
	}
	_ = triplets
	_ = triplets
	return max_perimeter(triplets)
}

func mochiMain() {
	var s200 int = max_perimeter(pythagorean_triple(200))
	_ = s200
	var s100 int = max_perimeter(pythagorean_triple(100))
	_ = s100
	fmt.Println(fmt.Sprint(s100))
	fmt.Println(fmt.Sprint(s200))
	var best int = max_perimeter(pythagorean_triple(1000))
	_ = best
	fmt.Println(fmt.Sprint(best))
	fmt.Println((("Perimeter " + fmt.Sprint(best)) + " has maximum solutions"))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
