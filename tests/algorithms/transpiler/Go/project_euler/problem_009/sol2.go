//go:build ignore

// Generated by Mochi v0.10.64 on 2025-08-12 12:36:07 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func solution(n int) int {
	var product int = (0 - 1)
	_ = product
	var candidate int = 0
	_ = candidate
	var a int = 1
	_ = a
	for a < (n / 3) {
		var b int = (((n * n) - ((2 * a) * n)) / ((2 * n) - (2 * a)))
		_ = b
		var c int = ((n - a) - b)
		_ = c
		if (c * c) == ((a * a) + (b * b)) {
			candidate = ((a * b) * c)
			if candidate > product {
				product = candidate
			}
		}
		a = (a + 1)
	}
	return product
}

func mochiMain() {
	fmt.Println(("solution() = " + fmt.Sprint(solution(1000))))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
