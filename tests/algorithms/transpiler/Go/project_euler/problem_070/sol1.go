//go:build ignore

// Generated by Mochi v0.10.70 on 2025-08-22 15:34:26 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

func _modi(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		return
	}
	s[idx] = v
}

func get_totients(max_one int) []int {
	var totients []int = []int{}
	_ = totients
	var i int = 0
	_ = i
	for i < max_one {
		totients = append(totients, i)
		i = (i + 1)
	}
	i = 2
	for i < max_one {
		if _index(totients, i) == i {
			var x int = i
			_ = x
			for x < max_one {
				_setIndex(totients, x, (_index(totients, x) - (_index(totients, x) / i)))
				x = (x + i)
			}
		}
		i = (i + 1)
	}
	return totients
}

func has_same_digits(num1 int, num2 int) bool {
	var count1 []int = []int{}
	_ = count1
	var count2 []int = []int{}
	_ = count2
	var i int = 0
	_ = i
	for i < 10 {
		count1 = append(count1, 0)
		count2 = append(count2, 0)
		i = (i + 1)
	}
	var n1 int = num1
	_ = n1
	var n2 int = num2
	_ = n2
	if n1 == 0 {
		_setIndex(count1, 0, (_index(count1, 0) + 1))
	}
	if n2 == 0 {
		_setIndex(count2, 0, (_index(count2, 0) + 1))
	}
	for n1 > 0 {
		var d1 int = _modi(n1, 10)
		_ = d1
		_setIndex(count1, d1, (_index(count1, d1) + 1))
		n1 = (n1 / 10)
	}
	for n2 > 0 {
		var d2 int = _modi(n2, 10)
		_ = d2
		_setIndex(count2, d2, (_index(count2, d2) + 1))
		n2 = (n2 / 10)
	}
	i = 0
	for i < 10 {
		if _index(count1, i) != _index(count2, i) {
			return false
		}
		i = (i + 1)
	}
	return true
}

func solution(max_n int) int {
	var min_numerator int = 1
	_ = min_numerator
	var min_denominator int = 0
	_ = min_denominator
	var totients []int = get_totients((max_n + 1))
	_ = totients
	var i int = 2
	_ = i
	for i <= max_n {
		var t int = _index(totients, i)
		_ = t
		if ((i * min_denominator) < (min_numerator * t)) && has_same_digits(i, t) {
			min_numerator = i
			min_denominator = t
		}
		i = (i + 1)
	}
	return min_numerator
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(fmt.Sprint(solution(10000)))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
