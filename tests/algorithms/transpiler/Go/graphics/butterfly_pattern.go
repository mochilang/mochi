//go:build ignore

// Generated by Mochi v0.10.65 on 2025-08-14 10:05:22 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

func repeat_char(ch string, count int) string {
	var result string = ""
	_ = result
	var i int = 0
	_ = i
	for i < count {
		result = (result + ch)
		i = (i + 1)
	}
	return result
}

func butterfly_pattern(n int) string {
	var lines []string = []string{}
	_ = lines
	var i int = 1
	_ = i
	for i < n {
		var left string = repeat_char("*", i)
		_ = left
		var mid string = repeat_char(" ", ((2 * (n - i)) - 1))
		_ = mid
		var right string = repeat_char("*", i)
		_ = right
		lines = append(lines, ((left + mid) + right))
		i = (i + 1)
	}
	lines = append(lines, repeat_char("*", ((2*n)-1)))
	var j int = (n - 1)
	_ = j
	for j > 0 {
		var left string = repeat_char("*", j)
		_ = left
		var mid string = repeat_char(" ", ((2 * (n - j)) - 1))
		_ = mid
		var right string = repeat_char("*", j)
		_ = right
		lines = append(lines, ((left + mid) + right))
		j = (j - 1)
	}
	var out string = ""
	_ = out
	var k int = 0
	_ = k
	for k < len(lines) {
		if k > 0 {
			out = (out + "\n")
		}
		out = (out + _index(lines, k))
		k = (k + 1)
	}
	return out
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(butterfly_pattern(3))
		fmt.Println(butterfly_pattern(5))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
