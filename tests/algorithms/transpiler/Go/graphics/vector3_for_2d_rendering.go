//go:build ignore

// Generated by Mochi v0.10.61 on 2025-08-09 10:24:35 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

var PI float64

func floor(x float64) float64 {
	var i int = int(x)
	_ = i
	if float64(i) > x {
		i = (i - 1)
	}
	return float64(i)
}

func modf(x float64, m float64) float64 {
	return (x - (floor((float64(x) / float64(m))) * m))
}

func sin_taylor(x float64) float64 {
	var term float64 = x
	_ = term
	var sum float64 = x
	_ = sum
	var i int = 1
	_ = i
	for i < 10 {
		var k1 float64 = (2.0 * float64(i))
		_ = k1
		var k2 float64 = (k1 + 1.0)
		_ = k2
		term = (float64((((0 - term) * x) * x)) / float64((k1 * k2)))
		sum = (sum + term)
		i = (i + 1)
	}
	return sum
}

func cos_taylor(x float64) float64 {
	var term float64 = 1.0
	_ = term
	var sum float64 = 1.0
	_ = sum
	var i int = 1
	_ = i
	for i < 10 {
		var k1 float64 = ((2.0 * float64(i)) - 1.0)
		_ = k1
		var k2 float64 = (2.0 * float64(i))
		_ = k2
		term = (float64((((0 - term) * x) * x)) / float64((k1 * k2)))
		sum = (sum + term)
		i = (i + 1)
	}
	return sum
}

func convert_to_2d(x float64, y float64, z float64, scale float64, distance float64) []float64 {
	projected_x := ((float64((x * distance)) / float64((z + distance))) * scale)
	_ = projected_x
	_ = projected_x
	projected_y := ((float64((y * distance)) / float64((z + distance))) * scale)
	_ = projected_y
	_ = projected_y
	return func(v any) []float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []float64{}
			}
			out := make([]float64, len(arr))
			for i, x := range arr {
				out[i] = x.(float64)
			}
			return out
		}
		return v.([]float64)
	}([]float64{projected_x, projected_y})
}

func rotate(x float64, y float64, z float64, axis string, angle float64) []float64 {
	var angle float64 = (float64(((float64(modf(angle, 360.0)) / float64(450.0)) * 180.0)) / float64(PI))
	_ = angle
	angle = modf(angle, (2.0 * PI))
	if angle > PI {
		angle = (angle - (2.0 * PI))
	}
	if axis == "z" {
		var new_x float64 = ((x * cos_taylor(angle)) - (y * sin_taylor(angle)))
		_ = new_x
		_ = new_x
		var new_y float64 = ((y * cos_taylor(angle)) + (x * sin_taylor(angle)))
		_ = new_y
		_ = new_y
		var new_z float64 = z
		_ = new_z
		_ = new_z
		return []float64{new_x, new_y, new_z}
	}
	if axis == "x" {
		var new_y float64 = ((y * cos_taylor(angle)) - (z * sin_taylor(angle)))
		_ = new_y
		_ = new_y
		var new_z float64 = ((z * cos_taylor(angle)) + (y * sin_taylor(angle)))
		_ = new_z
		_ = new_z
		var new_x float64 = x
		_ = new_x
		_ = new_x
		return []float64{new_x, new_y, new_z}
	}
	if axis == "y" {
		var new_x float64 = ((x * cos_taylor(angle)) - (z * sin_taylor(angle)))
		_ = new_x
		_ = new_x
		var new_z float64 = ((z * cos_taylor(angle)) + (x * sin_taylor(angle)))
		_ = new_z
		_ = new_z
		var new_y float64 = y
		_ = new_y
		_ = new_y
		return []float64{new_x, new_y, new_z}
	}
	fmt.Println("not a valid axis, choose one of 'x', 'y', 'z'")
	return []float64{0.0, 0.0, 0.0}
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		PI = 3.141592653589793
		fmt.Println(fmt.Sprint(convert_to_2d(1.0, 2.0, 3.0, 10.0, 10.0)))
		fmt.Println(fmt.Sprint(rotate(1.0, 2.0, 3.0, "y", 90.0)))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
