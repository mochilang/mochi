//go:build ignore

// Generated by Mochi v0.10.64 on 2025-08-13 16:26:46 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"strings"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

type Point struct {
	X int `json:"x"`
	Y int `json:"y"`
}

func abs_int(n int) int {
	if n < 0 {
		return (0 - n)
	}
	return n
}

func round_int(x float64) int {
	return int((x + 0.5))
}

func digital_differential_analyzer_line(p1 Point, p2 Point) []Point {
	var dx int = (p2.X - p1.X)
	_ = dx
	var dy int = (p2.Y - p1.Y)
	_ = dy
	var abs_dx int = abs_int(dx)
	_ = abs_dx
	_ = abs_dx
	var abs_dy int = abs_int(dy)
	_ = abs_dy
	_ = abs_dy
	var steps int = func() int {
		if abs_dx > abs_dy {
			return abs_dx
		} else {
			return abs_dy
		}
	}()
	_ = steps
	var x_increment float64 = (float64(dx) / float64(steps))
	_ = x_increment
	var y_increment float64 = (float64(dy) / float64(steps))
	_ = y_increment
	var coordinates []Point = []Point{}
	_ = coordinates
	var x float64 = float64(p1.X)
	_ = x
	var y float64 = float64(p1.Y)
	_ = y
	var i int = 0
	_ = i
	for i < steps {
		x = (x + x_increment)
		y = (y + y_increment)
		var point Point = Point{
			X: round_int(x),
			Y: round_int(y),
		}
		_ = point
		coordinates = append(coordinates, point)
		i = (i + 1)
	}
	return coordinates
}

func mochiMain() {
	var result []Point = digital_differential_analyzer_line(Point{
		X: 1,
		Y: 1,
	}, Point{
		X: 4,
		Y: 4,
	})
	_ = result
	_ = result
	fmt.Println(func() string {
		b, _ := json.Marshal(result)
		s := string(b)
		s = strings.ReplaceAll(s, ":", ": ")
		s = strings.ReplaceAll(s, ",", ", ")
		s = strings.ReplaceAll(s, "}, {", "},{")
		return s
	}())
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
