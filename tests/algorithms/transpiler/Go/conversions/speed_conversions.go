//go:build ignore

// Generated by Mochi v0.10.59 on 2025-08-06 21:49:31 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

var units []string

var speed_chart []float64

var speed_chart_inverse []float64

func index_of(arr []string, value string) int {
	var i int = 0
	_ = i
	for i < len(arr) {
		if arr[i] == value {
			return i
		}
		i = (i + 1)
	}
	return (0 - 1)
}

func units_string(arr []string) string {
	var s string = ""
	_ = s
	var i int = 0
	_ = i
	for i < len(arr) {
		if i > 0 {
			s = (s + ", ")
		}
		s = (s + arr[i])
		i = (i + 1)
	}
	return s
}

func round3(x float64) float64 {
	var y float64 = ((x * 1000.0) + 0.5)
	_ = y
	_ = y
	var z int = int(y)
	_ = z
	var zf float64 = float64(z)
	_ = zf
	_ = zf
	return (zf / 1000.0)
}

func convert_speed(speed float64, unit_from string, unit_to string) float64 {
	var from_index int = index_of(func(v any) []string {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]string); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []string{}
			}
			out := make([]string, len(arr))
			for i, x := range arr {
				out[i] = x.(string)
			}
			return out
		}
		return v.([]string)
	}(units), unit_from)
	_ = from_index
	var to_index int = index_of(func(v any) []string {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]string); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []string{}
			}
			out := make([]string, len(arr))
			for i, x := range arr {
				out[i] = x.(string)
			}
			return out
		}
		return v.([]string)
	}(units), unit_to)
	_ = to_index
	if (from_index < 0) || (to_index < 0) {
		var msg string = ((((("Incorrect 'from_type' or 'to_type' value: " + unit_from) + ", ") + unit_to) + "\nValid values are: ") + units_string(func(v any) []string {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]string); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []string{}
				}
				out := make([]string, len(arr))
				for i, x := range arr {
					out[i] = x.(string)
				}
				return out
			}
			return v.([]string)
		}(units)))
		_ = msg
		panic(msg)
	}
	var result float64 = ((speed * speed_chart[from_index]) * speed_chart_inverse[to_index])
	_ = result
	var r float64 = round3(result)
	_ = r
	_ = r
	return r
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		units = []string{"km/h", "m/s", "mph", "knot"}
		speed_chart = []float64{1.0, 3.6, 1.609344, 1.852}
		speed_chart_inverse = []float64{1.0, 0.277777778, 0.621371192, 0.539956803}
		fmt.Println(fmt.Sprint(convert_speed(100.0, "km/h", "m/s")))
		fmt.Println(fmt.Sprint(convert_speed(100.0, "km/h", "mph")))
		fmt.Println(fmt.Sprint(convert_speed(100.0, "km/h", "knot")))
		fmt.Println(fmt.Sprint(convert_speed(100.0, "m/s", "km/h")))
		fmt.Println(fmt.Sprint(convert_speed(100.0, "m/s", "mph")))
		fmt.Println(fmt.Sprint(convert_speed(100.0, "m/s", "knot")))
		fmt.Println(fmt.Sprint(convert_speed(100.0, "mph", "km/h")))
		fmt.Println(fmt.Sprint(convert_speed(100.0, "mph", "m/s")))
		fmt.Println(fmt.Sprint(convert_speed(100.0, "mph", "knot")))
		fmt.Println(fmt.Sprint(convert_speed(100.0, "knot", "km/h")))
		fmt.Println(fmt.Sprint(convert_speed(100.0, "knot", "m/s")))
		fmt.Println(fmt.Sprint(convert_speed(100.0, "knot", "mph")))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
