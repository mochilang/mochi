//go:build ignore

// Generated by Mochi v0.10.59 on 2025-08-06 21:46:46 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

func trim(s string) string {
	var start int = 0
	_ = start
	for start < len(s) {
		var ch string = string([]rune(s)[start:(start + 1)])
		_ = ch
		if (((ch != " ") && (ch != "\n")) && (ch != "\t")) && (ch != "\r") {
			break
		}
		start = (start + 1)
	}
	var end int = len(s)
	_ = end
	for end > start {
		var ch string = string([]rune(s)[(end - 1):end])
		_ = ch
		if (((ch != " ") && (ch != "\n")) && (ch != "\t")) && (ch != "\r") {
			break
		}
		end = (end - 1)
	}
	return _substr(s, start, end)
}

func bin_to_decimal(bin_string string) int {
	var trimmed string = trim(bin_string)
	_ = trimmed
	if trimmed == "" {
		panic("Empty string was passed to the function")
	}
	var is_negative bool = false
	_ = is_negative
	var s string = trimmed
	_ = s
	if string([]rune(s)[0:1]) == "-" {
		is_negative = true
		s = _substr(s, 1, len(s))
	}
	var i int = 0
	_ = i
	for i < len(s) {
		var c string = string([]rune(s)[i:(i + 1)])
		_ = c
		if (c != "0") && (c != "1") {
			panic("Non-binary value was passed to the function")
		}
		i = (i + 1)
	}
	var decimal_number int = 0
	_ = decimal_number
	i = 0
	for i < len(s) {
		var c string = string([]rune(s)[i:(i + 1)])
		_ = c
		_ = c
		var digit int = func() int { n, _ := strconv.Atoi(c); return n }()
		_ = digit
		decimal_number = ((2 * decimal_number) + digit)
		i = (i + 1)
	}
	if is_negative {
		return (0 - decimal_number)
	}
	return decimal_number
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(fmt.Sprint(bin_to_decimal("101")))
		fmt.Println(fmt.Sprint(bin_to_decimal(" 1010   ")))
		fmt.Println(fmt.Sprint(bin_to_decimal("-11101")))
		fmt.Println(fmt.Sprint(bin_to_decimal("0")))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
