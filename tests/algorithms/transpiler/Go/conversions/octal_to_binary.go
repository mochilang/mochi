//go:build ignore

// Generated by Mochi v0.10.59 on 2025-08-06 21:47:14 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _mod(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func octal_to_binary(octal_number string) string {
	if len(octal_number) == 0 {
		panic("Empty string was passed to the function")
	}
	var octal_digits string = "01234567"
	_ = octal_digits
	var binary_number string = ""
	_ = binary_number
	var i int = 0
	_ = i
	for i < len(octal_number) {
		var digit string = string([]rune(octal_number)[i])
		_ = digit
		var valid bool = false
		_ = valid
		var j int = 0
		_ = j
		for j < len(octal_digits) {
			if digit == string([]rune(octal_digits)[j]) {
				valid = true
				break
			}
			j = (j + 1)
		}
		if !valid {
			panic("Non-octal value was passed to the function")
		}
		var value int = func() int { n, _ := strconv.Atoi(digit); return n }()
		_ = value
		var k int = 0
		_ = k
		var binary_digit string = ""
		_ = binary_digit
		for k < 3 {
			binary_digit = (fmt.Sprint(_mod(value, 2)) + binary_digit)
			value = (value / 2)
			k = (k + 1)
		}
		binary_number = (binary_number + binary_digit)
		i = (i + 1)
	}
	return binary_number
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(octal_to_binary("17"))
		fmt.Println(octal_to_binary("7"))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
