//go:build ignore

// Generated by Mochi v0.10.59 on 2025-08-06 21:47:31 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _mod(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

var roman_values []int

var roman_symbols []string

func char_value(c string) int {
	if c == "I" {
		return 1
	}
	if c == "V" {
		return 5
	}
	if c == "X" {
		return 10
	}
	if c == "L" {
		return 50
	}
	if c == "C" {
		return 100
	}
	if c == "D" {
		return 500
	}
	if c == "M" {
		return 1000
	}
	return 0
}

func roman_to_int(roman string) int {
	var total int = 0
	_ = total
	var i int = 0
	_ = i
	for i < len(roman) {
		if ((i + 1) < len(roman)) && (char_value(string([]rune(roman)[i])) < char_value(string([]rune(roman)[(i+1)]))) {
			total = ((total + char_value(string([]rune(roman)[(i+1)]))) - char_value(string([]rune(roman)[i])))
			i = (i + 2)
		} else {
			total = (total + char_value(string([]rune(roman)[i])))
			i = (i + 1)
		}
	}
	return total
}

func int_to_roman(number int) string {
	var num int = number
	_ = num
	var res string = ""
	_ = res
	var i int = 0
	_ = i
	for i < len(roman_values) {
		var value int = roman_values[i]
		_ = value
		var symbol string = roman_symbols[i]
		_ = symbol
		var factor int = (num / value)
		_ = factor
		num = _mod(num, value)
		var j int = 0
		_ = j
		for j < factor {
			res = (res + symbol)
			j = (j + 1)
		}
		if num == 0 {
			break
		}
		i = (i + 1)
	}
	return res
}

var __mochi_test_header_printed bool

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		roman_values = []int{1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1}
		roman_symbols = []string{"M", "CM", "D", "CD", "C", "XC", "L", "XL", "X", "IX", "V", "IV", "I"}
		if !__mochi_test_header_printed {
			fmt.Println("[94;1mtests/github/TheAlgorithms/Mochi/conversions/roman_numerals.mochi[0;22m")
			__mochi_test_header_printed = true
		}
		func() {
			func() {
				defer func() { recover() }()
				_ = (roman_to_int("MMMCMXCIX") == 3999)
			}()
			fmt.Printf("   \x1b[33mtest\x1b[0m %s                   ... \x1b[32mok\x1b[0m (1.0ms)\n", "roman_to_int")
		}()

		if !__mochi_test_header_printed {
			fmt.Println("[94;1mtests/github/TheAlgorithms/Mochi/conversions/roman_numerals.mochi[0;22m")
			__mochi_test_header_printed = true
		}
		func() {
			func() {
				defer func() { recover() }()
				_ = (int_to_roman(3999) == "MMMCMXCIX")
			}()
			fmt.Printf("   \x1b[33mtest\x1b[0m %s                   ... \x1b[32mok\x1b[0m (1.0ms)\n", "int_to_roman")
		}()

		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
