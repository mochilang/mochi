//go:build ignore

// Generated by Mochi v0.10.59 on 2025-08-06 21:47:22 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

type Prefix struct {
	Name string `json:"name"`
	Exp  int    `json:"exp"`
}

var si_positive []Prefix

var si_negative []Prefix

var binary_prefixes []Prefix

func pow(base float64, exp int) float64 {
	var result float64 = 1.0
	_ = result
	var e int = exp
	_ = e
	if e < 0 {
		e = (0 - e)
		var i int = 0
		_ = i
		for i < e {
			result = (result * base)
			i = (i + 1)
		}
		return (1.0 / result)
	}
	var i int = 0
	_ = i
	for i < e {
		result = (result * base)
		i = (i + 1)
	}
	return result
}

func add_si_prefix(value float64) string {
	var prefixes []Prefix
	_ = prefixes
	if value > 0.0 {
		prefixes = si_positive
	} else {
		prefixes = si_negative
	}
	var i int = 0
	_ = i
	for i < len(prefixes) {
		var p Prefix = prefixes[i]
		_ = p
		var num float64 = (value / pow(10.0, p.Exp))
		_ = num
		if num > 1.0 {
			return ((fmt.Sprint(num) + " ") + p.Name)
		}
		i = (i + 1)
	}
	return fmt.Sprint(value)
}

func add_binary_prefix(value float64) string {
	var i int = 0
	_ = i
	for i < len(binary_prefixes) {
		var p Prefix = binary_prefixes[i]
		_ = p
		var num float64 = (value / pow(2.0, p.Exp))
		_ = num
		if num > 1.0 {
			return ((fmt.Sprint(num) + " ") + p.Name)
		}
		i = (i + 1)
	}
	return fmt.Sprint(value)
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		si_positive = []Prefix{Prefix{
			Name: "yotta",
			Exp:  24,
		}, Prefix{
			Name: "zetta",
			Exp:  21,
		}, Prefix{
			Name: "exa",
			Exp:  18,
		}, Prefix{
			Name: "peta",
			Exp:  15,
		}, Prefix{
			Name: "tera",
			Exp:  12,
		}, Prefix{
			Name: "giga",
			Exp:  9,
		}, Prefix{
			Name: "mega",
			Exp:  6,
		}, Prefix{
			Name: "kilo",
			Exp:  3,
		}, Prefix{
			Name: "hecto",
			Exp:  2,
		}, Prefix{
			Name: "deca",
			Exp:  1,
		}}
		si_negative = []Prefix{Prefix{
			Name: "deci",
			Exp:  (0 - 1),
		}, Prefix{
			Name: "centi",
			Exp:  (0 - 2),
		}, Prefix{
			Name: "milli",
			Exp:  (0 - 3),
		}, Prefix{
			Name: "micro",
			Exp:  (0 - 6),
		}, Prefix{
			Name: "nano",
			Exp:  (0 - 9),
		}, Prefix{
			Name: "pico",
			Exp:  (0 - 12),
		}, Prefix{
			Name: "femto",
			Exp:  (0 - 15),
		}, Prefix{
			Name: "atto",
			Exp:  (0 - 18),
		}, Prefix{
			Name: "zepto",
			Exp:  (0 - 21),
		}, Prefix{
			Name: "yocto",
			Exp:  (0 - 24),
		}}
		binary_prefixes = []Prefix{Prefix{
			Name: "yotta",
			Exp:  80,
		}, Prefix{
			Name: "zetta",
			Exp:  70,
		}, Prefix{
			Name: "exa",
			Exp:  60,
		}, Prefix{
			Name: "peta",
			Exp:  50,
		}, Prefix{
			Name: "tera",
			Exp:  40,
		}, Prefix{
			Name: "giga",
			Exp:  30,
		}, Prefix{
			Name: "mega",
			Exp:  20,
		}, Prefix{
			Name: "kilo",
			Exp:  10,
		}}
		fmt.Println(add_si_prefix(10000.0))
		fmt.Println(add_si_prefix(0.005))
		fmt.Println(add_binary_prefix(65536.0))
		fmt.Println(add_binary_prefix(512.0))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
