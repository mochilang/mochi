//go:build ignore

// Generated by Mochi v0.10.59 on 2025-08-06 21:47:05 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _mod(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

func panic(msg string) {
	fmt.Println(msg)
}

func trim_spaces(s string) string {
	var start int = 0
	_ = start
	var end int = len(s)
	_ = end
	for (start < end) && (_substr(s, start, (start+1)) == " ") {
		start = (start + 1)
	}
	for (end > start) && (_substr(s, (end-1), end) == " ") {
		end = (end - 1)
	}
	return _substr(s, start, end)
}

func hex_digit_value(ch string) int {
	if ch == "0" {
		return 0
	}
	if ch == "1" {
		return 1
	}
	if ch == "2" {
		return 2
	}
	if ch == "3" {
		return 3
	}
	if ch == "4" {
		return 4
	}
	if ch == "5" {
		return 5
	}
	if ch == "6" {
		return 6
	}
	if ch == "7" {
		return 7
	}
	if ch == "8" {
		return 8
	}
	if ch == "9" {
		return 9
	}
	if (ch == "a") || (ch == "A") {
		return 10
	}
	if (ch == "b") || (ch == "B") {
		return 11
	}
	if (ch == "c") || (ch == "C") {
		return 12
	}
	if (ch == "d") || (ch == "D") {
		return 13
	}
	if (ch == "e") || (ch == "E") {
		return 14
	}
	if (ch == "f") || (ch == "F") {
		return 15
	}
	panic("Invalid value was passed to the function")
}

func hex_to_bin(hex_num string) int {
	var trimmed string = trim_spaces(hex_num)
	_ = trimmed
	if len(trimmed) == 0 {
		panic("No value was passed to the function")
	}
	var s string = trimmed
	_ = s
	var is_negative bool = false
	_ = is_negative
	if _substr(s, 0, 1) == "-" {
		is_negative = true
		s = _substr(s, 1, len(s))
	}
	var int_num int = 0
	_ = int_num
	var i int = 0
	_ = i
	for i < len(s) {
		var ch string = _substr(s, i, (i + 1))
		_ = ch
		var val int = hex_digit_value(ch)
		_ = val
		int_num = ((int_num * 16) + val)
		i = (i + 1)
	}
	var bin_str string = ""
	_ = bin_str
	var n int = int_num
	_ = n
	if n == 0 {
		bin_str = "0"
	}
	for n > 0 {
		bin_str = (fmt.Sprint(_mod(n, 2)) + bin_str)
		n = (n / 2)
	}
	var result int = func() int { n, _ := strconv.Atoi(bin_str); return n }()
	_ = result
	if is_negative {
		result = (0 - result)
	}
	return result
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(fmt.Sprint(hex_to_bin("AC")))
		fmt.Println(fmt.Sprint(hex_to_bin("9A4")))
		fmt.Println(fmt.Sprint(hex_to_bin("   12f   ")))
		fmt.Println(fmt.Sprint(hex_to_bin("FfFf")))
		fmt.Println(fmt.Sprint(hex_to_bin("-fFfF")))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
