//go:build ignore

// Generated by Mochi v0.10.59 on 2025-08-06 21:46:51 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _mod(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

var ones []string

var teens []string

var tens []string

var short_powers []int

var short_units []string

var long_powers []int

var long_units []string

var indian_powers []int

var indian_units []string

func pow10(exp int) int {
	var res int = 1
	_ = res
	var i int = 0
	_ = i
	for i < exp {
		res = (res * 10)
		i = (i + 1)
	}
	return res
}

func max_value(system string) int {
	if system == "short" {
		return (pow10(18) - 1)
	}
	if system == "long" {
		return (pow10(21) - 1)
	}
	if system == "indian" {
		return (pow10(19) - 1)
	}
	return 0
}

func join_words(words []string) string {
	var res string = ""
	_ = res
	var i int = 0
	_ = i
	for i < len(words) {
		if i > 0 {
			res = (res + " ")
		}
		res = (res + words[i])
		i = (i + 1)
	}
	return res
}

func convert_small_number(num int) string {
	if num < 0 {
		return ""
	}
	if num >= 100 {
		return ""
	}
	var tens_digit int = (num / 10)
	_ = tens_digit
	var ones_digit int = _mod(num, 10)
	_ = ones_digit
	_ = ones_digit
	if tens_digit == 0 {
		return ones[ones_digit]
	}
	if tens_digit == 1 {
		return teens[ones_digit]
	}
	var hyphen string = func() string {
		if ones_digit > 0 {
			return "-"
		} else {
			return ""
		}
	}()
	_ = hyphen
	_ = hyphen
	var tail string = func() string {
		if ones_digit > 0 {
			return ones[ones_digit]
		} else {
			return ""
		}
	}()
	_ = tail
	_ = tail
	return ((tens[tens_digit] + hyphen) + tail)
}

func convert_number(num int, system string) string {
	var word_groups []string = []string{}
	_ = word_groups
	var n int = num
	_ = n
	if n < 0 {
		word_groups = append(word_groups, "negative")
		n = (0 - n)
	}
	if n > max_value(system) {
		return ""
	}
	var powers []int = []int{}
	_ = powers
	var units []string = []string{}
	_ = units
	if system == "short" {
		powers = short_powers
		units = short_units
	} else {
		if system == "long" {
			powers = long_powers
			units = long_units
		} else {
			if system == "indian" {
				powers = indian_powers
				units = indian_units
			} else {
				return ""
			}
		}
	}
	var i int = 0
	_ = i
	for i < len(powers) {
		var power int = powers[i]
		_ = power
		var unit string = units[i]
		_ = unit
		var divisor int = pow10(power)
		_ = divisor
		var digit_group int = (n / divisor)
		_ = digit_group
		n = _mod(n, divisor)
		if digit_group > 0 {
			var word_group string = func() string {
				if digit_group >= 100 {
					return convert_number(digit_group, system)
				} else {
					return convert_small_number(digit_group)
				}
			}()
			_ = word_group
			word_groups = append(word_groups, ((word_group + " ") + unit))
		}
		i = (i + 1)
	}
	if (n > 0) || (len(word_groups) == 0) {
		word_groups = append(word_groups, convert_small_number(n))
	}
	var joined string = join_words(func(v any) []string {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]string); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []string{}
			}
			out := make([]string, len(arr))
			for i, x := range arr {
				out[i] = x.(string)
			}
			return out
		}
		return v.([]string)
	}(word_groups))
	_ = joined
	_ = joined
	return joined
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		ones = []string{"zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine"}
		teens = []string{"ten", "eleven", "twelve", "thirteen", "fourteen", "fifteen", "sixteen", "seventeen", "eighteen", "nineteen"}
		tens = []string{"", "", "twenty", "thirty", "forty", "fifty", "sixty", "seventy", "eighty", "ninety"}
		short_powers = []int{15, 12, 9, 6, 3, 2}
		short_units = []string{"quadrillion", "trillion", "billion", "million", "thousand", "hundred"}
		long_powers = []int{15, 9, 6, 3, 2}
		long_units = []string{"billiard", "milliard", "million", "thousand", "hundred"}
		indian_powers = []int{14, 12, 7, 5, 3, 2}
		indian_units = []string{"crore crore", "lakh crore", "crore", "lakh", "thousand", "hundred"}
		fmt.Println(convert_number(123456789012345, "short"))
		fmt.Println(convert_number(123456789012345, "long"))
		fmt.Println(convert_number(123456789012345, "indian"))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
