//go:build ignore

// Generated by Mochi v0.10.59 on 2025-08-06 21:47:18 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _mod(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

func octal_to_hex(octal string) string {
	var s string = octal
	_ = s
	if ((len(s) >= 2) && (string([]rune(s)[0]) == "0")) && (string([]rune(s)[1]) == "o") {
		s = _substr(s, 2, len(s))
	}
	if len(s) == 0 {
		panic("Empty string was passed to the function")
	}
	var j int = 0
	_ = j
	for j < len(s) {
		var c string = string([]rune(s)[j])
		_ = c
		if (((((((c != "0") && (c != "1")) && (c != "2")) && (c != "3")) && (c != "4")) && (c != "5")) && (c != "6")) && (c != "7") {
			panic("Not a Valid Octal Number")
		}
		j = (j + 1)
	}
	var decimal int = 0
	_ = decimal
	var k int = 0
	_ = k
	for k < len(s) {
		var d int = func() int { n, _ := strconv.Atoi(string([]rune(s)[k])); return n }()
		_ = d
		decimal = ((decimal * 8) + d)
		k = (k + 1)
	}
	var hex_chars string = "0123456789ABCDEF"
	_ = hex_chars
	_ = hex_chars
	if decimal == 0 {
		return "0x"
	}
	var hex string = ""
	_ = hex
	for decimal > 0 {
		var idx int = _mod(decimal, 16)
		_ = idx
		hex = (string([]rune(hex_chars)[idx]) + hex)
		decimal = (decimal / 16)
	}
	return ("0x" + hex)
}

var nums []string

var t int

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		nums = []string{"030", "100", "247", "235", "007"}
		t = 0
		for t < len(nums) {
			var num string = nums[t]
			_ = num
			fmt.Println(octal_to_hex(num))
			t = (t + 1)
		}
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
