//go:build ignore

// Generated by Mochi v0.10.59 on 2025-08-06 21:47:39 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

var units []string

var from_factors []float64

var to_factors []float64

func supported_values() string {
	var result string = units[0]
	_ = result
	var i int = 1
	_ = i
	for i < len(units) {
		result = ((result + ", ") + units[i])
		i = (i + 1)
	}
	return result
}

func find_index(name string) int {
	var i int = 0
	_ = i
	for i < len(units) {
		if units[i] == name {
			return i
		}
		i = (i + 1)
	}
	return (0 - 1)
}

func get_from_factor(name string) float64 {
	var idx int = find_index(name)
	_ = idx
	if idx < 0 {
		panic(((("Invalid 'from_type' value: '" + name) + "' Supported values are: ") + supported_values()))
	}
	return from_factors[idx]
}

func get_to_factor(name string) float64 {
	var idx int = find_index(name)
	_ = idx
	if idx < 0 {
		panic(((("Invalid 'to_type' value: '" + name) + "' Supported values are: ") + supported_values()))
	}
	return to_factors[idx]
}

func volume_conversion(value float64, from_type string, to_type string) float64 {
	var from_factor float64 = get_from_factor(from_type)
	_ = from_factor
	_ = from_factor
	var to_factor float64 = get_to_factor(to_type)
	_ = to_factor
	_ = to_factor
	return ((value * from_factor) * to_factor)
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		units = []string{"cubic meter", "litre", "kilolitre", "gallon", "cubic yard", "cubic foot", "cup"}
		from_factors = []float64{1.0, 0.001, 1.0, 0.00454, 0.76455, 0.028, 0.000236588}
		to_factors = []float64{1.0, 1000.0, 1.0, 264.172, 1.30795, 35.3147, 4226.75}
		fmt.Println(fmt.Sprint(volume_conversion(4.0, "cubic meter", "litre")))
		fmt.Println(fmt.Sprint(volume_conversion(1.0, "litre", "gallon")))
		fmt.Println(fmt.Sprint(volume_conversion(1.0, "kilolitre", "cubic meter")))
		fmt.Println(fmt.Sprint(volume_conversion(3.0, "gallon", "cubic yard")))
		fmt.Println(fmt.Sprint(volume_conversion(2.0, "cubic yard", "litre")))
		fmt.Println(fmt.Sprint(volume_conversion(4.0, "cubic foot", "cup")))
		fmt.Println(fmt.Sprint(volume_conversion(1.0, "cup", "kilolitre")))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
