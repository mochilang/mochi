//go:build ignore

// Generated by Mochi v0.10.59 on 2025-08-06 21:46:49 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _mod(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func bin_to_octal(bin_string string) string {
	var i int = 0
	_ = i
	for i < len(bin_string) {
		var c string = string([]rune(bin_string)[i])
		_ = c
		if !((c == "0") || (c == "1")) {
			panic("Non-binary value was passed to the function")
		}
		i = (i + 1)
	}
	if len(bin_string) == 0 {
		panic("Empty string was passed to the function")
	}
	var padded string = bin_string
	_ = padded
	for _mod(len(padded), 3) != 0 {
		padded = ("0" + padded)
	}
	var oct_string string = ""
	_ = oct_string
	var index int = 0
	_ = index
	for index < len(padded) {
		var group string = string([]rune(padded)[index:(index + 3)])
		_ = group
		_ = group
		var b0 int = func() int {
			if string([]rune(group)[0]) == "1" {
				return 1
			} else {
				return 0
			}
		}()
		_ = b0
		var b1 int = func() int {
			if string([]rune(group)[1]) == "1" {
				return 1
			} else {
				return 0
			}
		}()
		_ = b1
		var b2 int = func() int {
			if string([]rune(group)[2]) == "1" {
				return 1
			} else {
				return 0
			}
		}()
		_ = b2
		var oct_val int = (((b0 * 4) + (b1 * 2)) + b2)
		_ = oct_val
		oct_string = (oct_string + fmt.Sprint(oct_val))
		index = (index + 3)
	}
	return oct_string
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(bin_to_octal("1111"))
		fmt.Println(bin_to_octal("101010101010011"))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
