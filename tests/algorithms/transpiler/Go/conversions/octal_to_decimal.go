//go:build ignore

// Generated by Mochi v0.10.59 on 2025-08-06 21:47:16 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

func panic(msg string) {
	fmt.Println(msg)
}

func trim_spaces(s string) string {
	var start int = 0
	_ = start
	var end int = (len(s) - 1)
	_ = end
	for (start <= end) && (_substr(s, start, (start+1)) == " ") {
		start = (start + 1)
	}
	for (end >= start) && (_substr(s, end, (end+1)) == " ") {
		end = (end - 1)
	}
	if start > end {
		return ""
	}
	return _substr(s, start, (end + 1))
}

func char_to_digit(ch string) int {
	if ch == "0" {
		return 0
	}
	if ch == "1" {
		return 1
	}
	if ch == "2" {
		return 2
	}
	if ch == "3" {
		return 3
	}
	if ch == "4" {
		return 4
	}
	if ch == "5" {
		return 5
	}
	if ch == "6" {
		return 6
	}
	if ch == "7" {
		return 7
	}
	panic("Non-octal value was passed to the function")
	return 0
}

func oct_to_decimal(oct_string string) int {
	var s string = trim_spaces(oct_string)
	_ = s
	if len(s) == 0 {
		panic("Empty string was passed to the function")
		return 0
	}
	var is_negative bool = false
	_ = is_negative
	if _substr(s, 0, 1) == "-" {
		is_negative = true
		s = _substr(s, 1, len(s))
	}
	if len(s) == 0 {
		panic("Non-octal value was passed to the function")
		return 0
	}
	var decimal_number int = 0
	_ = decimal_number
	var i int = 0
	_ = i
	for i < len(s) {
		var ch string = _substr(s, i, (i + 1))
		_ = ch
		var digit int = char_to_digit(ch)
		_ = digit
		decimal_number = ((8 * decimal_number) + digit)
		i = (i + 1)
	}
	if is_negative {
		decimal_number = (0 - decimal_number)
	}
	return decimal_number
}

func mochiMain() {
	fmt.Println(fmt.Sprint(oct_to_decimal("1")))
	fmt.Println(fmt.Sprint(oct_to_decimal("-1")))
	fmt.Println(fmt.Sprint(oct_to_decimal("12")))
	fmt.Println(fmt.Sprint(oct_to_decimal(" 12   ")))
	fmt.Println(fmt.Sprint(oct_to_decimal("-45")))
	fmt.Println(fmt.Sprint(oct_to_decimal("0")))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
