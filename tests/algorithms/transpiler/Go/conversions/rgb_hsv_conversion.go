//go:build ignore

// Generated by Mochi v0.10.59 on 2025-08-06 21:49:29 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func absf(x float64) float64 {
	if x < 0.0 {
		return (0 - x)
	}
	return x
}

func fmod(a float64, b float64) float64 {
	return (a - float64((b * float64(int((a / b))))))
}

func roundf(x float64) int {
	if x >= 0.0 {
		return int((x + 0.5))
	}
	return int((x - 0.5))
}

func maxf(a float64, b float64, c float64) float64 {
	var m float64 = a
	_ = m
	if b > m {
		m = b
	}
	if c > m {
		m = c
	}
	return m
}

func minf(a float64, b float64, c float64) float64 {
	var m float64 = a
	_ = m
	if b < m {
		m = b
	}
	if c < m {
		m = c
	}
	return m
}

func hsv_to_rgb(hue float64, saturation float64, value float64) []int {
	if (hue < 0.0) || (hue > 360.0) {
		fmt.Println("hue should be between 0 and 360")
		return func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}([]int{})
	}
	if (saturation < 0.0) || (saturation > 1.0) {
		fmt.Println("saturation should be between 0 and 1")
		return func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}([]int{})
	}
	if (value < 0.0) || (value > 1.0) {
		fmt.Println("value should be between 0 and 1")
		return func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}([]int{})
	}
	var chroma float64 = (value * saturation)
	_ = chroma
	var hue_section float64 = (hue / 60.0)
	_ = hue_section
	var second_largest_component float64 = (chroma * (1.0 - absf((fmod(hue_section, 2.0) - 1.0))))
	_ = second_largest_component
	var match_value float64 = (value - chroma)
	_ = match_value
	var red int
	_ = red
	var green int
	_ = green
	var blue int
	_ = blue
	if (hue_section >= 0.0) && (hue_section <= 1.0) {
		red = roundf((255.0 * (chroma + match_value)))
		green = roundf((255.0 * (second_largest_component + match_value)))
		blue = roundf((255.0 * match_value))
	} else {
		if (hue_section > 1.0) && (hue_section <= 2.0) {
			red = roundf((255.0 * (second_largest_component + match_value)))
			green = roundf((255.0 * (chroma + match_value)))
			blue = roundf((255.0 * match_value))
		} else {
			if (hue_section > 2.0) && (hue_section <= 3.0) {
				red = roundf((255.0 * match_value))
				green = roundf((255.0 * (chroma + match_value)))
				blue = roundf((255.0 * (second_largest_component + match_value)))
			} else {
				if (hue_section > 3.0) && (hue_section <= 4.0) {
					red = roundf((255.0 * match_value))
					green = roundf((255.0 * (second_largest_component + match_value)))
					blue = roundf((255.0 * (chroma + match_value)))
				} else {
					if (hue_section > 4.0) && (hue_section <= 5.0) {
						red = roundf((255.0 * (second_largest_component + match_value)))
						green = roundf((255.0 * match_value))
						blue = roundf((255.0 * (chroma + match_value)))
					} else {
						red = roundf((255.0 * (chroma + match_value)))
						green = roundf((255.0 * match_value))
						blue = roundf((255.0 * (second_largest_component + match_value)))
					}
				}
			}
		}
	}
	return []int{red, green, blue}
}

func rgb_to_hsv(red int, green int, blue int) []float64 {
	if (red < 0) || (red > 255) {
		fmt.Println("red should be between 0 and 255")
		return func(v any) []float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []float64{}
				}
				out := make([]float64, len(arr))
				for i, x := range arr {
					out[i] = x.(float64)
				}
				return out
			}
			return v.([]float64)
		}([]float64{})
	}
	if (green < 0) || (green > 255) {
		fmt.Println("green should be between 0 and 255")
		return func(v any) []float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []float64{}
				}
				out := make([]float64, len(arr))
				for i, x := range arr {
					out[i] = x.(float64)
				}
				return out
			}
			return v.([]float64)
		}([]float64{})
	}
	if (blue < 0) || (blue > 255) {
		fmt.Println("blue should be between 0 and 255")
		return func(v any) []float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []float64{}
				}
				out := make([]float64, len(arr))
				for i, x := range arr {
					out[i] = x.(float64)
				}
				return out
			}
			return v.([]float64)
		}([]float64{})
	}
	var float_red float64 = (float64(red) / 255.0)
	_ = float_red
	var float_green float64 = (float64(green) / 255.0)
	_ = float_green
	var float_blue float64 = (float64(blue) / 255.0)
	_ = float_blue
	var value float64 = maxf(float_red, float_green, float_blue)
	_ = value
	var min_val float64 = minf(float_red, float_green, float_blue)
	_ = min_val
	var chroma float64 = (value - min_val)
	_ = chroma
	var saturation float64 = func() float64 {
		if value == 0.0 {
			return 0.0
		} else {
			return (chroma / value)
		}
	}()
	_ = saturation
	_ = saturation
	var hue float64
	_ = hue
	if chroma == 0.0 {
		hue = 0.0
	} else {
		if value == float_red {
			hue = (60.0 * (0.0 + ((float_green - float_blue) / chroma)))
		} else {
			if value == float_green {
				hue = (60.0 * (2.0 + ((float_blue - float_red) / chroma)))
			} else {
				hue = (60.0 * (4.0 + ((float_red - float_green) / chroma)))
			}
		}
	}
	hue = fmod((hue + 360.0), 360.0)
	return []float64{hue, saturation, value}
}

func approximately_equal_hsv(hsv1 []float64, hsv2 []float64) bool {
	var check_hue bool = (absf((hsv1[0] - hsv2[0])) < 0.2)
	_ = check_hue
	_ = check_hue
	var check_saturation bool = (absf((hsv1[1] - hsv2[1])) < 0.002)
	_ = check_saturation
	_ = check_saturation
	var check_value bool = (absf((hsv1[2] - hsv2[2])) < 0.002)
	_ = check_value
	_ = check_value
	return ((check_hue && check_saturation) && check_value)
}

var rgb []int

var hsv []float64

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		rgb = hsv_to_rgb(180.0, 0.5, 0.5)
		fmt.Println(fmt.Sprint(rgb))
		hsv = rgb_to_hsv(64, 128, 128)
		fmt.Println(fmt.Sprint(hsv))
		fmt.Println(fmt.Sprint(approximately_equal_hsv(func(v any) []float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []float64{}
				}
				out := make([]float64, len(arr))
				for i, x := range arr {
					out[i] = x.(float64)
				}
				return out
			}
			return v.([]float64)
		}(hsv), func(v any) []float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []float64{}
				}
				out := make([]float64, len(arr))
				for i, x := range arr {
					out[i] = x.(float64)
				}
				return out
			}
			return v.([]float64)
		}([]float64{180.0, 0.5, 0.5}))))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
