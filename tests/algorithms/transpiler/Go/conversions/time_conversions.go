//go:build ignore

// Generated by Mochi v0.10.59 on 2025-08-06 21:49:35 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	math "math"
	"os"
	"runtime"
	"strconv"
	"strings"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

var time_chart map[string]float64

var time_chart_inverse map[string]float64

var units []string

var units_str string

func contains(arr []string, t string) bool {
	var i int = 0
	_ = i
	for i < len(arr) {
		if arr[i] == t {
			return true
		}
		i = (i + 1)
	}
	return false
}

func convert_time(time_value float64, unit_from string, unit_to string) float64 {
	if time_value < 0.0 {
		panic("'time_value' must be a non-negative number.")
	}
	var from string = strings.ToLower(unit_from)
	_ = from
	var to string = strings.ToLower(unit_to)
	_ = to
	if !func() bool {
		for _, el := range units {
			if el == from {
				return true
			}
		}
		return false
	}() || !func() bool {
		for _, el := range units {
			if el == to {
				return true
			}
		}
		return false
	}() {
		var invalid_unit string = from
		_ = invalid_unit
		if func() bool {
			for _, el := range units {
				if el == from {
					return true
				}
			}
			return false
		}() {
			invalid_unit = to
		}
		panic((((("Invalid unit " + invalid_unit) + " is not in ") + units_str) + "."))
	}
	var seconds float64 = (time_value * time_chart[from])
	_ = seconds
	var converted float64 = (seconds * time_chart_inverse[to])
	_ = converted
	var scaled float64 = (converted * 1000.0)
	_ = scaled
	_ = scaled
	var int_part int = int((scaled + 0.5))
	_ = int_part
	_ = int_part
	return ((float64(int_part) + 0.0) / 1000.0)
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		time_chart = map[string]float64{"seconds": 1.0, "minutes": 60.0, "hours": 3600.0, "days": 86400.0, "weeks": 604800.0, "months": 2629800.0, "years": 31557600.0}
		time_chart_inverse = map[string]float64{"seconds": 1.0, "minutes": (1.0 / 60.0), "hours": (1.0 / 3600.0), "days": (1.0 / 86400.0), "weeks": (1.0 / 604800.0), "months": (1.0 / 2629800.0), "years": (1.0 / 31557600.0)}
		units = []string{"seconds", "minutes", "hours", "days", "weeks", "months", "years"}
		units_str = "seconds, minutes, hours, days, weeks, months, years"
		fmt.Println(func() string {
			f := float64(convert_time(3600.0, "seconds", "hours"))
			if f == 0 && math.Signbit(f) {
				return "-0"
			}
			if f == float64(int(f)) {
				return fmt.Sprintf("%.1f", f)
			}
			return fmt.Sprint(f)
		}())
		fmt.Println(func() string {
			f := float64(convert_time(360.0, "days", "months"))
			if f == 0 && math.Signbit(f) {
				return "-0"
			}
			if f == float64(int(f)) {
				return fmt.Sprintf("%.1f", f)
			}
			return fmt.Sprint(f)
		}())
		fmt.Println(func() string {
			f := float64(convert_time(360.0, "months", "years"))
			if f == 0 && math.Signbit(f) {
				return "-0"
			}
			if f == float64(int(f)) {
				return fmt.Sprintf("%.1f", f)
			}
			return fmt.Sprint(f)
		}())
		fmt.Println(func() string {
			f := float64(convert_time(1.0, "years", "seconds"))
			if f == 0 && math.Signbit(f) {
				return "-0"
			}
			if f == float64(int(f)) {
				return fmt.Sprintf("%.1f", f)
			}
			return fmt.Sprint(f)
		}())
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
