//go:build ignore

// Generated by Mochi v0.10.59 on 2025-08-06 21:47:08 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _mod(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

var hex_digits string

func split_by_dot(s string) []string {
	var res []string = []string{}
	_ = res
	var current string = ""
	_ = current
	var i int = 0
	_ = i
	for i < len(s) {
		var c string = string([]rune(s)[i])
		_ = c
		if c == "." {
			res = append(res, current)
			current = ""
		} else {
			current = (current + c)
		}
		i = (i + 1)
	}
	res = append(res, current)
	return res
}

func parse_decimal(s string) int {
	if len(s) == 0 {
		panic("Invalid IPv4 address format")
	}
	var value int = 0
	_ = value
	var i int = 0
	_ = i
	for i < len(s) {
		var c string = string([]rune(s)[i])
		_ = c
		if (c < "0") || (c > "9") {
			panic("Invalid IPv4 address format")
		}
		value = ((value * 10) + func() int { n, _ := strconv.Atoi(c); return n }())
		i = (i + 1)
	}
	return value
}

func to_hex2(n int) string {
	var x int = n
	_ = x
	var res string = ""
	_ = res
	for x > 0 {
		var d int = _mod(x, 16)
		_ = d
		res = (string([]rune(hex_digits)[d]) + res)
		x = (x / 16)
	}
	for len(res) < 2 {
		res = ("0" + res)
	}
	return res
}

func ipv4_to_decimal(ipv4_address string) int {
	var parts []string = split_by_dot(ipv4_address)
	_ = parts
	if len(parts) != 4 {
		panic("Invalid IPv4 address format")
	}
	var result int = 0
	_ = result
	var i int = 0
	_ = i
	for i < 4 {
		var oct int = parse_decimal(parts[i])
		_ = oct
		if (oct < 0) || (oct > 255) {
			panic(("Invalid IPv4 octet " + fmt.Sprint(oct)))
		}
		result = ((result * 256) + oct)
		i = (i + 1)
	}
	return result
}

func alt_ipv4_to_decimal(ipv4_address string) int {
	var parts []string = split_by_dot(ipv4_address)
	_ = parts
	if len(parts) != 4 {
		panic("Invalid IPv4 address format")
	}
	var hex_str string = ""
	_ = hex_str
	var i int = 0
	_ = i
	for i < 4 {
		var oct int = parse_decimal(parts[i])
		_ = oct
		if (oct < 0) || (oct > 255) {
			panic(("Invalid IPv4 octet " + fmt.Sprint(oct)))
		}
		hex_str = (hex_str + to_hex2(oct))
		i = (i + 1)
	}
	var value int = 0
	_ = value
	var k int = 0
	_ = k
	for k < len(hex_str) {
		var c string = string([]rune(hex_str)[k])
		_ = c
		var digit int = (0 - 1)
		_ = digit
		var j int = 0
		_ = j
		for j < len(hex_digits) {
			if string([]rune(hex_digits)[j]) == c {
				digit = j
			}
			j = (j + 1)
		}
		if digit < 0 {
			panic("Invalid hex digit")
		}
		value = ((value * 16) + digit)
		k = (k + 1)
	}
	return value
}

func decimal_to_ipv4(decimal_ipv4 int) string {
	if (decimal_ipv4 < 0) || (decimal_ipv4 > 4294967295) {
		panic("Invalid decimal IPv4 address")
	}
	var n int = decimal_ipv4
	_ = n
	var parts []string = []string{}
	_ = parts
	var i int = 0
	_ = i
	for i < 4 {
		var octet int = _mod(n, 256)
		_ = octet
		parts = append(parts, fmt.Sprint(octet))
		n = (n / 256)
		i = (i + 1)
	}
	var res string = ""
	_ = res
	var j int = (len(parts) - 1)
	_ = j
	for j >= 0 {
		res = (res + parts[j])
		if j > 0 {
			res = (res + ".")
		}
		j = (j - 1)
	}
	return res
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		hex_digits = "0123456789abcdef"
		fmt.Println(ipv4_to_decimal("192.168.0.1"))
		fmt.Println(ipv4_to_decimal("10.0.0.255"))
		fmt.Println(alt_ipv4_to_decimal("192.168.0.1"))
		fmt.Println(alt_ipv4_to_decimal("10.0.0.255"))
		fmt.Println(decimal_to_ipv4(3232235521))
		fmt.Println(decimal_to_ipv4(167772415))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
