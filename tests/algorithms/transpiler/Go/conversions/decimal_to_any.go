//go:build ignore

// Generated by Mochi v0.10.59 on 2025-08-06 21:46:53 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _mod(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

func decimal_to_any(num int, base int) string {
	if num < 0 {
		panic("parameter must be positive int")
	}
	if base < 2 {
		panic("base must be >= 2")
	}
	if base > 36 {
		panic("base must be <= 36")
	}
	if num == 0 {
		return "0"
	}
	var symbols string = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
	_ = symbols
	var n int = num
	_ = n
	var result string = ""
	_ = result
	for n > 0 {
		var mod int = _mod(n, base)
		_ = mod
		var digit string = _substr(symbols, mod, (mod + 1))
		_ = digit
		result = (digit + result)
		n = (n / base)
	}
	return result
}

func mochiMain() {
	fmt.Println(decimal_to_any(0, 2))
	fmt.Println(decimal_to_any(5, 4))
	fmt.Println(decimal_to_any(20, 3))
	fmt.Println(decimal_to_any(58, 16))
	fmt.Println(decimal_to_any(243, 17))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
