//go:build ignore

// Generated by Mochi v0.10.59 on 2025-08-06 21:47:03 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

var letters string

func excel_title_to_column(title string) int {
	var result int = 0
	_ = result
	var i int = 0
	_ = i
	for i < len(title) {
		var ch string = string([]rune(title)[i:(i + 1)])
		_ = ch
		var value int = 0
		_ = value
		var idx int = 0
		_ = idx
		var found bool = false
		_ = found
		for idx < len(letters) {
			if string([]rune(letters)[idx:(idx+1)]) == ch {
				value = (idx + 1)
				found = true
				break
			}
			idx = (idx + 1)
		}
		if !found {
			panic("title must contain only uppercase A-Z")
		}
		result = ((result * 26) + value)
		i = (i + 1)
	}
	return result
}

func mochiMain() {
	fmt.Println(excel_title_to_column("A"))
	fmt.Println(excel_title_to_column("B"))
	fmt.Println(excel_title_to_column("AB"))
	fmt.Println(excel_title_to_column("Z"))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		letters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
