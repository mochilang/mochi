//go:build ignore

// Generated by Mochi v0.10.59 on 2025-08-06 21:47:10 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	math "math"
	"os"
	"runtime"
	"strconv"
	"strings"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

func rstrip_s(s string) string {
	if (len(s) > 0) && (string([]rune(s)[(len(s)-1)]) == "s") {
		return _substr(s, 0, (len(s) - 1))
	}
	return s
}

func normalize_alias(u string) string {
	if u == "millimeter" {
		return "mm"
	}
	if u == "centimeter" {
		return "cm"
	}
	if u == "meter" {
		return "m"
	}
	if u == "kilometer" {
		return "km"
	}
	if u == "inch" {
		return "in"
	}
	if u == "inche" {
		return "in"
	}
	if u == "feet" {
		return "ft"
	}
	if u == "foot" {
		return "ft"
	}
	if u == "yard" {
		return "yd"
	}
	if u == "mile" {
		return "mi"
	}
	return u
}

func has_unit(u string) bool {
	return ((((((((u == "mm") || (u == "cm")) || (u == "m")) || (u == "km")) || (u == "in")) || (u == "ft")) || (u == "yd")) || (u == "mi"))
}

func from_factor(u string) float64 {
	if u == "mm" {
		return 0.001
	}
	if u == "cm" {
		return 0.01
	}
	if u == "m" {
		return 1.0
	}
	if u == "km" {
		return 1000.0
	}
	if u == "in" {
		return 0.0254
	}
	if u == "ft" {
		return 0.3048
	}
	if u == "yd" {
		return 0.9144
	}
	if u == "mi" {
		return 1609.34
	}
	return 0.0
}

func to_factor(u string) float64 {
	if u == "mm" {
		return 1000.0
	}
	if u == "cm" {
		return 100.0
	}
	if u == "m" {
		return 1.0
	}
	if u == "km" {
		return 0.001
	}
	if u == "in" {
		return 39.3701
	}
	if u == "ft" {
		return 3.28084
	}
	if u == "yd" {
		return 1.09361
	}
	if u == "mi" {
		return 0.000621371
	}
	return 0.0
}

func length_conversion(value float64, from_type string, to_type string) float64 {
	var new_from string = normalize_alias(rstrip_s(strings.ToLower(from_type)))
	_ = new_from
	var new_to string = normalize_alias(rstrip_s(strings.ToLower(to_type)))
	_ = new_to
	if !has_unit(new_from) {
		panic((("Invalid 'from_type' value: '" + from_type) + "'.\nConversion abbreviations are: mm, cm, m, km, in, ft, yd, mi"))
	}
	if !has_unit(new_to) {
		panic((("Invalid 'to_type' value: '" + to_type) + "'.\nConversion abbreviations are: mm, cm, m, km, in, ft, yd, mi"))
	}
	return ((value * from_factor(new_from)) * to_factor(new_to))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(func() string {
			f := float64(length_conversion(4.0, "METER", "FEET"))
			if f == 0 && math.Signbit(f) {
				return "-0"
			}
			if f == float64(int(f)) {
				return fmt.Sprintf("%.1f", f)
			}
			return fmt.Sprint(f)
		}())
		fmt.Println(func() string {
			f := float64(length_conversion(1.0, "kilometer", "inch"))
			if f == 0 && math.Signbit(f) {
				return "-0"
			}
			if f == float64(int(f)) {
				return fmt.Sprintf("%.1f", f)
			}
			return fmt.Sprint(f)
		}())
		fmt.Println(func() string {
			f := float64(length_conversion(2.0, "feet", "meter"))
			if f == 0 && math.Signbit(f) {
				return "-0"
			}
			if f == float64(int(f)) {
				return fmt.Sprintf("%.1f", f)
			}
			return fmt.Sprint(f)
		}())
		fmt.Println(func() string {
			f := float64(length_conversion(2.0, "centimeter", "millimeter"))
			if f == 0 && math.Signbit(f) {
				return "-0"
			}
			if f == float64(int(f)) {
				return fmt.Sprintf("%.1f", f)
			}
			return fmt.Sprint(f)
		}())
		fmt.Println(func() string {
			f := float64(length_conversion(4.0, "yard", "kilometer"))
			if f == 0 && math.Signbit(f) {
				return "-0"
			}
			if f == float64(int(f)) {
				return fmt.Sprintf("%.1f", f)
			}
			return fmt.Sprint(f)
		}())
		fmt.Println(func() string {
			f := float64(length_conversion(3.0, "foot", "inch"))
			if f == 0 && math.Signbit(f) {
				return "-0"
			}
			if f == float64(int(f)) {
				return fmt.Sprintf("%.1f", f)
			}
			return fmt.Sprint(f)
		}())
		fmt.Println(func() string {
			f := float64(length_conversion(3.0, "mm", "in"))
			if f == 0 && math.Signbit(f) {
				return "-0"
			}
			if f == float64(int(f)) {
				return fmt.Sprintf("%.1f", f)
			}
			return fmt.Sprint(f)
		}())
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
