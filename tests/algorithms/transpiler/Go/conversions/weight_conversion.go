//go:build ignore

// Generated by Mochi v0.10.59 on 2025-08-06 21:47:41 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	math "math"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func pow10(exp int) float64 {
	var result float64 = 1.0
	_ = result
	if exp >= 0 {
		var i int = 0
		_ = i
		for i < exp {
			result = (result * 10.0)
			i = (i + 1)
		}
	} else {
		var i int = 0
		_ = i
		for i < (0 - exp) {
			result = (result / 10.0)
			i = (i + 1)
		}
	}
	return result
}

var KILOGRAM_CHART map[string]float64

var WEIGHT_TYPE_CHART map[string]float64

func weight_conversion(from_type string, to_type string, value float64) float64 {
	var has_to bool = func() bool { _, ok := KILOGRAM_CHART[to_type]; return ok }()
	_ = has_to
	var has_from bool = func() bool { _, ok := WEIGHT_TYPE_CHART[from_type]; return ok }()
	_ = has_from
	if has_to && has_from {
		return ((value * KILOGRAM_CHART[to_type]) * WEIGHT_TYPE_CHART[from_type])
	}
	fmt.Println("Invalid 'from_type' or 'to_type'")
	return 0.0
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		KILOGRAM_CHART = map[string]float64{"kilogram": 1.0, "gram": 1000.0, "milligram": 1000000.0, "metric-ton": 0.001, "long-ton": 0.0009842073, "short-ton": 0.0011023122, "pound": 2.2046244202, "stone": 0.1574731728, "ounce": 35.273990723, "carrat": 5000.0, "atomic-mass-unit": (6.022136652 * pow10(26))}
		WEIGHT_TYPE_CHART = map[string]float64{"kilogram": 1.0, "gram": 0.001, "milligram": 1e-06, "metric-ton": 1000.0, "long-ton": 1016.04608, "short-ton": 907.184, "pound": 0.453592, "stone": 6.35029, "ounce": 0.0283495, "carrat": 0.0002, "atomic-mass-unit": (1.660540199 * pow10((0 - 27)))}
		fmt.Println(func() string {
			f := float64(weight_conversion("kilogram", "gram", 1.0))
			if f == 0 && math.Signbit(f) {
				return "-0"
			}
			if f == float64(int(f)) {
				return fmt.Sprintf("%.1f", f)
			}
			return fmt.Sprint(f)
		}())
		fmt.Println(func() string {
			f := float64(weight_conversion("gram", "pound", 3.0))
			if f == 0 && math.Signbit(f) {
				return "-0"
			}
			if f == float64(int(f)) {
				return fmt.Sprintf("%.1f", f)
			}
			return fmt.Sprint(f)
		}())
		fmt.Println(func() string {
			f := float64(weight_conversion("ounce", "kilogram", 3.0))
			if f == 0 && math.Signbit(f) {
				return "-0"
			}
			if f == float64(int(f)) {
				return fmt.Sprintf("%.1f", f)
			}
			return fmt.Sprint(f)
		}())
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
