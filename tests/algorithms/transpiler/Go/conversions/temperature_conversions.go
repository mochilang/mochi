//go:build ignore

// Generated by Mochi v0.10.59 on 2025-08-06 21:49:33 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	math "math"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func floor(x float64) float64 {
	var i int = int(x)
	_ = i
	if float64(i) > x {
		i = (i - 1)
	}
	return float64(i)
}

func pow10(n int) float64 {
	var p float64 = 1.0
	_ = p
	var i int = 0
	_ = i
	for i < n {
		p = (p * 10.0)
		i = (i + 1)
	}
	return p
}

func round_to(x float64, ndigits int) float64 {
	var m float64 = pow10(ndigits)
	_ = m
	_ = m
	return (floor(((x * m) + 0.5)) / m)
}

func celsius_to_fahrenheit(c float64, ndigits int) float64 {
	return round_to((((c * 9.0) / 5.0) + 32.0), ndigits)
}

func celsius_to_kelvin(c float64, ndigits int) float64 {
	return round_to((c + 273.15), ndigits)
}

func celsius_to_rankine(c float64, ndigits int) float64 {
	return round_to((((c * 9.0) / 5.0) + 491.67), ndigits)
}

func fahrenheit_to_celsius(f float64, ndigits int) float64 {
	return round_to((((f - 32.0) * 5.0) / 9.0), ndigits)
}

func fahrenheit_to_kelvin(f float64, ndigits int) float64 {
	return round_to(((((f - 32.0) * 5.0) / 9.0) + 273.15), ndigits)
}

func fahrenheit_to_rankine(f float64, ndigits int) float64 {
	return round_to((f + 459.67), ndigits)
}

func kelvin_to_celsius(k float64, ndigits int) float64 {
	return round_to((k - 273.15), ndigits)
}

func kelvin_to_fahrenheit(k float64, ndigits int) float64 {
	return round_to(((((k - 273.15) * 9.0) / 5.0) + 32.0), ndigits)
}

func kelvin_to_rankine(k float64, ndigits int) float64 {
	return round_to(((k * 9.0) / 5.0), ndigits)
}

func rankine_to_celsius(r float64, ndigits int) float64 {
	return round_to((((r - 491.67) * 5.0) / 9.0), ndigits)
}

func rankine_to_fahrenheit(r float64, ndigits int) float64 {
	return round_to((r - 459.67), ndigits)
}

func rankine_to_kelvin(r float64, ndigits int) float64 {
	return round_to(((r * 5.0) / 9.0), ndigits)
}

func reaumur_to_kelvin(r float64, ndigits int) float64 {
	return round_to(((r * 1.25) + 273.15), ndigits)
}

func reaumur_to_fahrenheit(r float64, ndigits int) float64 {
	return round_to(((r * 2.25) + 32.0), ndigits)
}

func reaumur_to_celsius(r float64, ndigits int) float64 {
	return round_to((r * 1.25), ndigits)
}

func reaumur_to_rankine(r float64, ndigits int) float64 {
	return round_to((((r * 2.25) + 32.0) + 459.67), ndigits)
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(func() string {
			f := float64(celsius_to_fahrenheit(0.0, 2))
			if f == 0 && math.Signbit(f) {
				return "-0"
			}
			if f == float64(int(f)) {
				return fmt.Sprintf("%.1f", f)
			}
			return fmt.Sprint(f)
		}())
		fmt.Println(func() string {
			f := float64(celsius_to_kelvin(0.0, 2))
			if f == 0 && math.Signbit(f) {
				return "-0"
			}
			if f == float64(int(f)) {
				return fmt.Sprintf("%.1f", f)
			}
			return fmt.Sprint(f)
		}())
		fmt.Println(func() string {
			f := float64(celsius_to_rankine(0.0, 2))
			if f == 0 && math.Signbit(f) {
				return "-0"
			}
			if f == float64(int(f)) {
				return fmt.Sprintf("%.1f", f)
			}
			return fmt.Sprint(f)
		}())
		fmt.Println(func() string {
			f := float64(fahrenheit_to_celsius(32.0, 2))
			if f == 0 && math.Signbit(f) {
				return "-0"
			}
			if f == float64(int(f)) {
				return fmt.Sprintf("%.1f", f)
			}
			return fmt.Sprint(f)
		}())
		fmt.Println(func() string {
			f := float64(fahrenheit_to_kelvin(32.0, 2))
			if f == 0 && math.Signbit(f) {
				return "-0"
			}
			if f == float64(int(f)) {
				return fmt.Sprintf("%.1f", f)
			}
			return fmt.Sprint(f)
		}())
		fmt.Println(func() string {
			f := float64(fahrenheit_to_rankine(32.0, 2))
			if f == 0 && math.Signbit(f) {
				return "-0"
			}
			if f == float64(int(f)) {
				return fmt.Sprintf("%.1f", f)
			}
			return fmt.Sprint(f)
		}())
		fmt.Println(func() string {
			f := float64(kelvin_to_celsius(273.15, 2))
			if f == 0 && math.Signbit(f) {
				return "-0"
			}
			if f == float64(int(f)) {
				return fmt.Sprintf("%.1f", f)
			}
			return fmt.Sprint(f)
		}())
		fmt.Println(func() string {
			f := float64(kelvin_to_fahrenheit(273.15, 2))
			if f == 0 && math.Signbit(f) {
				return "-0"
			}
			if f == float64(int(f)) {
				return fmt.Sprintf("%.1f", f)
			}
			return fmt.Sprint(f)
		}())
		fmt.Println(func() string {
			f := float64(kelvin_to_rankine(273.15, 2))
			if f == 0 && math.Signbit(f) {
				return "-0"
			}
			if f == float64(int(f)) {
				return fmt.Sprintf("%.1f", f)
			}
			return fmt.Sprint(f)
		}())
		fmt.Println(func() string {
			f := float64(rankine_to_celsius(491.67, 2))
			if f == 0 && math.Signbit(f) {
				return "-0"
			}
			if f == float64(int(f)) {
				return fmt.Sprintf("%.1f", f)
			}
			return fmt.Sprint(f)
		}())
		fmt.Println(func() string {
			f := float64(rankine_to_fahrenheit(491.67, 2))
			if f == 0 && math.Signbit(f) {
				return "-0"
			}
			if f == float64(int(f)) {
				return fmt.Sprintf("%.1f", f)
			}
			return fmt.Sprint(f)
		}())
		fmt.Println(func() string {
			f := float64(rankine_to_kelvin(491.67, 2))
			if f == 0 && math.Signbit(f) {
				return "-0"
			}
			if f == float64(int(f)) {
				return fmt.Sprintf("%.1f", f)
			}
			return fmt.Sprint(f)
		}())
		fmt.Println(func() string {
			f := float64(reaumur_to_kelvin(80.0, 2))
			if f == 0 && math.Signbit(f) {
				return "-0"
			}
			if f == float64(int(f)) {
				return fmt.Sprintf("%.1f", f)
			}
			return fmt.Sprint(f)
		}())
		fmt.Println(func() string {
			f := float64(reaumur_to_fahrenheit(80.0, 2))
			if f == 0 && math.Signbit(f) {
				return "-0"
			}
			if f == float64(int(f)) {
				return fmt.Sprintf("%.1f", f)
			}
			return fmt.Sprint(f)
		}())
		fmt.Println(func() string {
			f := float64(reaumur_to_celsius(80.0, 2))
			if f == 0 && math.Signbit(f) {
				return "-0"
			}
			if f == float64(int(f)) {
				return fmt.Sprintf("%.1f", f)
			}
			return fmt.Sprint(f)
		}())
		fmt.Println(func() string {
			f := float64(reaumur_to_rankine(80.0, 2))
			if f == 0 && math.Signbit(f) {
				return "-0"
			}
			if f == float64(int(f)) {
				return fmt.Sprintf("%.1f", f)
			}
			return fmt.Sprint(f)
		}())
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
