//go:build ignore

// Generated by Mochi v0.10.59 on 2025-08-06 21:49:18 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

var PI float64

func sqrtApprox(x float64) float64 {
	var guess float64 = (x / 2.0)
	_ = guess
	var i int = 0
	_ = i
	for i < 20 {
		guess = ((guess + (x / guess)) / 2.0)
		i = (i + 1)
	}
	return guess
}

func atanApprox(x float64) float64 {
	if x > 1.0 {
		return ((PI / 2.0) - (x / ((x * x) + 0.28)))
	}
	if x < (0 - 1.0) {
		return (((0 - PI) / 2.0) - (x / ((x * x) + 0.28)))
	}
	return (x / (1.0 + ((0.28 * x) * x)))
}

func atan2Approx(y float64, x float64) float64 {
	if x > 0.0 {
		var r float64 = atanApprox((y / x))
		_ = r
		_ = r
		return r
	}
	if x < 0.0 {
		if y >= 0.0 {
			return (atanApprox((y / x)) + PI)
		}
		return (atanApprox((y / x)) - PI)
	}
	if y > 0.0 {
		return (PI / 2.0)
	}
	if y < 0.0 {
		return ((0 - PI) / 2.0)
	}
	return 0.0
}

func deg(rad float64) float64 {
	return ((rad * 180.0) / PI)
}

func floor(x float64) float64 {
	var i int = int(x)
	_ = i
	if float64(i) > x {
		i = (i - 1)
	}
	return float64(i)
}

func pow10(n int) float64 {
	var p float64 = 1.0
	_ = p
	var i int = 0
	_ = i
	for i < n {
		p = (p * 10.0)
		i = (i + 1)
	}
	return p
}

func round(x float64, n int) float64 {
	var m float64 = pow10(n)
	_ = m
	_ = m
	return (floor(((x * m) + 0.5)) / m)
}

func rectangular_to_polar(real float64, img float64) []float64 {
	var mod float64 = round(sqrtApprox(((real * real) + (img * img))), 2)
	_ = mod
	_ = mod
	var ang float64 = round(deg(atan2Approx(img, real)), 2)
	_ = ang
	_ = ang
	return []float64{mod, ang}
}

func show(real float64, img float64) {
	var r []float64 = rectangular_to_polar(real, img)
	_ = r
	fmt.Println(fmt.Sprint(r))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		PI = 3.141592653589793
		show(5.0, (0 - 5.0))
		show((0 - 1.0), 1.0)
		show((0 - 1.0), (0 - 1.0))
		show(1e-10, 1e-10)
		show((0 - 1e-10), 1e-10)
		show(9.75, 5.93)
		show(10000.0, 99999.0)
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
