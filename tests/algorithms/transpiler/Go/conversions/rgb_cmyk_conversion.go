//go:build ignore

// Generated by Mochi v0.10.59 on 2025-08-06 21:49:27 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"strings"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func round_int(x float64) int {
	return int((x + 0.5))
}

func rgb_to_cmyk(r_input int, g_input int, b_input int) []int {
	if (((((r_input < 0) || (r_input >= 256)) || (g_input < 0)) || (g_input >= 256)) || (b_input < 0)) || (b_input >= 256) {
		panic("Expected int of the range 0..255")
	}
	var r float64 = (float64(r_input) / 255.0)
	_ = r
	var g float64 = (float64(g_input) / 255.0)
	_ = g
	var b float64 = (float64(b_input) / 255.0)
	_ = b
	var max_val float64 = r
	_ = max_val
	if g > max_val {
		max_val = g
	}
	if b > max_val {
		max_val = b
	}
	var k_float float64 = (1.0 - max_val)
	_ = k_float
	if k_float == 1.0 {
		return []int{0, 0, 0, 100}
	}
	var c_float float64 = ((100.0 * ((1.0 - r) - k_float)) / (1.0 - k_float))
	_ = c_float
	var m_float float64 = ((100.0 * ((1.0 - g) - k_float)) / (1.0 - k_float))
	_ = m_float
	var y_float float64 = ((100.0 * ((1.0 - b) - k_float)) / (1.0 - k_float))
	_ = y_float
	var k_percent float64 = (100.0 * k_float)
	_ = k_percent
	var c int = round_int(c_float)
	_ = c
	_ = c
	var m int = round_int(m_float)
	_ = m
	_ = m
	var y int = round_int(y_float)
	_ = y
	_ = y
	var k int = round_int(k_percent)
	_ = k
	_ = k
	return []int{c, m, y, k}
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(func() string {
			b, _ := json.Marshal(rgb_to_cmyk(255, 255, 255))
			s := string(b)
			s = strings.ReplaceAll(s, ":", ": ")
			s = strings.ReplaceAll(s, ",", ", ")
			s = strings.ReplaceAll(s, "}, {", "},{")
			return s
		}())
		fmt.Println(func() string {
			b, _ := json.Marshal(rgb_to_cmyk(128, 128, 128))
			s := string(b)
			s = strings.ReplaceAll(s, ":", ": ")
			s = strings.ReplaceAll(s, ",", ", ")
			s = strings.ReplaceAll(s, "}, {", "},{")
			return s
		}())
		fmt.Println(func() string {
			b, _ := json.Marshal(rgb_to_cmyk(0, 0, 0))
			s := string(b)
			s = strings.ReplaceAll(s, ":", ": ")
			s = strings.ReplaceAll(s, ",", ", ")
			s = strings.ReplaceAll(s, "}, {", "},{")
			return s
		}())
		fmt.Println(func() string {
			b, _ := json.Marshal(rgb_to_cmyk(255, 0, 0))
			s := string(b)
			s = strings.ReplaceAll(s, ":", ": ")
			s = strings.ReplaceAll(s, ",", ", ")
			s = strings.ReplaceAll(s, "}, {", "},{")
			return s
		}())
		fmt.Println(func() string {
			b, _ := json.Marshal(rgb_to_cmyk(0, 255, 0))
			s := string(b)
			s = strings.ReplaceAll(s, ":", ": ")
			s = strings.ReplaceAll(s, ",", ", ")
			s = strings.ReplaceAll(s, "}, {", "},{")
			return s
		}())
		fmt.Println(func() string {
			b, _ := json.Marshal(rgb_to_cmyk(0, 0, 255))
			s := string(b)
			s = strings.ReplaceAll(s, ":", ": ")
			s = strings.ReplaceAll(s, ",", ", ")
			s = strings.ReplaceAll(s, "}, {", "},{")
			return s
		}())
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
