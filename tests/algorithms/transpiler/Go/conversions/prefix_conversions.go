//go:build ignore

// Generated by Mochi v0.10.59 on 2025-08-06 21:47:20 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"strings"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

var SI_UNITS map[string]int

var BINARY_UNITS map[string]int

func pow(base float64, exp int) float64 {
	if exp == 0 {
		return 1.0
	}
	var e int = exp
	_ = e
	if e < 0 {
		e = (0 - e)
	}
	var result float64 = 1.0
	_ = result
	var i int = 0
	_ = i
	for i < e {
		result = (result * base)
		i = (i + 1)
	}
	if exp < 0 {
		return (1.0 / result)
	}
	return result
}

func convert_si_prefix(known_amount float64, known_prefix string, unknown_prefix string) float64 {
	var kp string = strings.ToLower(known_prefix)
	_ = kp
	var up string = strings.ToLower(unknown_prefix)
	_ = up
	if !func() bool { _, ok := SI_UNITS[kp]; return ok }() {
		panic(("unknown prefix: " + known_prefix))
	}
	if !func() bool { _, ok := SI_UNITS[up]; return ok }() {
		panic(("unknown prefix: " + unknown_prefix))
	}
	var diff int = (SI_UNITS[kp] - SI_UNITS[up])
	_ = diff
	_ = diff
	return (known_amount * pow(10.0, diff))
}

func convert_binary_prefix(known_amount float64, known_prefix string, unknown_prefix string) float64 {
	var kp string = strings.ToLower(known_prefix)
	_ = kp
	var up string = strings.ToLower(unknown_prefix)
	_ = up
	if !func() bool { _, ok := BINARY_UNITS[kp]; return ok }() {
		panic(("unknown prefix: " + known_prefix))
	}
	if !func() bool { _, ok := BINARY_UNITS[up]; return ok }() {
		panic(("unknown prefix: " + unknown_prefix))
	}
	var diff int = ((BINARY_UNITS[kp] - BINARY_UNITS[up]) * 10)
	_ = diff
	_ = diff
	return (known_amount * pow(2.0, diff))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		SI_UNITS = map[string]int{"yotta": 24, "zetta": 21, "exa": 18, "peta": 15, "tera": 12, "giga": 9, "mega": 6, "kilo": 3, "hecto": 2, "deca": 1, "deci": (0 - 1), "centi": (0 - 2), "milli": (0 - 3), "micro": (0 - 6), "nano": (0 - 9), "pico": (0 - 12), "femto": (0 - 15), "atto": (0 - 18), "zepto": (0 - 21), "yocto": (0 - 24)}
		BINARY_UNITS = map[string]int{"yotta": 8, "zetta": 7, "exa": 6, "peta": 5, "tera": 4, "giga": 3, "mega": 2, "kilo": 1}
		fmt.Println(fmt.Sprint(convert_si_prefix(1.0, "giga", "mega")))
		fmt.Println(fmt.Sprint(convert_si_prefix(1.0, "mega", "giga")))
		fmt.Println(fmt.Sprint(convert_si_prefix(1.0, "kilo", "kilo")))
		fmt.Println(fmt.Sprint(convert_binary_prefix(1.0, "giga", "mega")))
		fmt.Println(fmt.Sprint(convert_binary_prefix(1.0, "mega", "giga")))
		fmt.Println(fmt.Sprint(convert_binary_prefix(1.0, "kilo", "kilo")))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
