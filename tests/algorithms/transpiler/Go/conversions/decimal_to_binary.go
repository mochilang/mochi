//go:build ignore

// Generated by Mochi v0.10.59 on 2025-08-06 21:46:55 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _mod(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func decimal_to_binary_iterative(num int) string {
	if num == 0 {
		return "0b0"
	}
	var negative bool = false
	_ = negative
	var n int = num
	_ = n
	if n < 0 {
		negative = true
		n = (0 - n)
	}
	var result string = ""
	_ = result
	for n > 0 {
		result = (fmt.Sprint(_mod(n, 2)) + result)
		n = (n / 2)
	}
	if negative {
		return ("-0b" + result)
	}
	return ("0b" + result)
}

func decimal_to_binary_recursive_helper(n int) string {
	if n == 0 {
		return "0"
	}
	if n == 1 {
		return "1"
	}
	var div int = (n / 2)
	_ = div
	_ = div
	var mod int = _mod(n, 2)
	_ = mod
	_ = mod
	return (decimal_to_binary_recursive_helper(div) + fmt.Sprint(mod))
}

func decimal_to_binary_recursive(num int) string {
	if num == 0 {
		return "0b0"
	}
	if num < 0 {
		return ("-0b" + decimal_to_binary_recursive_helper((0 - num)))
	}
	return ("0b" + decimal_to_binary_recursive_helper(num))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(decimal_to_binary_iterative(0))
		fmt.Println(decimal_to_binary_iterative(2))
		fmt.Println(decimal_to_binary_iterative(7))
		fmt.Println(decimal_to_binary_iterative(35))
		fmt.Println(decimal_to_binary_iterative((0 - 2)))
		fmt.Println(decimal_to_binary_recursive(0))
		fmt.Println(decimal_to_binary_recursive(40))
		fmt.Println(decimal_to_binary_recursive((0 - 40)))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
