//go:build ignore

// Generated by Mochi v0.10.59 on 2025-08-06 21:46:48 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _slice[T any](s []T, start, end int) []T {
	if start < 0 {
		start = 0
	}
	if end > len(s) {
		end = len(s)
	}
	if start > len(s) {
		start = len(s)
	}
	if end < start {
		end = start
	}
	return s[start:end]
}

func strip_spaces(s string) string {
	var start int = 0
	_ = start
	var end int = (len(s) - 1)
	_ = end
	for (start < len(s)) && (string([]rune(s)[start]) == " ") {
		start = (start + 1)
	}
	for (end >= start) && (string([]rune(s)[end]) == " ") {
		end = (end - 1)
	}
	var res string = ""
	_ = res
	var i int = start
	_ = i
	for i <= end {
		res = (res + string([]rune(s)[i]))
		i = (i + 1)
	}
	return res
}

func repeat_char(ch string, count int) string {
	var res string = ""
	_ = res
	var i int = 0
	_ = i
	for i < count {
		res = (res + ch)
		i = (i + 1)
	}
	return res
}

func slice(s string, start int, end int) string {
	var res string = ""
	_ = res
	var i int = start
	_ = i
	for i < end {
		res = (res + string([]rune(s)[i]))
		i = (i + 1)
	}
	return res
}

func bits_to_int(bits string) int {
	var value int = 0
	_ = value
	var i int = 0
	_ = i
	for i < len(bits) {
		value = (value * 2)
		if string([]rune(bits)[i]) == "1" {
			value = (value + 1)
		}
		i = (i + 1)
	}
	return value
}

func bin_to_hexadecimal(binary_str string) string {
	var s string = strip_spaces(binary_str)
	_ = s
	if len(s) == 0 {
		panic("Empty string was passed to the function")
	}
	var is_negative bool = false
	_ = is_negative
	if string([]rune(s)[0]) == "-" {
		is_negative = true
		s = _slice(s, 1, len(s))
	}
	var i int = 0
	_ = i
	for i < len(s) {
		var c string = string([]rune(s)[i])
		_ = c
		if (c != "0") && (c != "1") {
			panic("Non-binary value was passed to the function")
		}
		i = (i + 1)
	}
	var groups int = ((len(s) / 4) + 1)
	_ = groups
	var pad_len int = ((groups * 4) - len(s))
	_ = pad_len
	s = (repeat_char("0", pad_len) + s)
	var digits string = "0123456789abcdef"
	_ = digits
	_ = digits
	var res string = "0x"
	_ = res
	var j int = 0
	_ = j
	for j < len(s) {
		var chunk string = _slice(s, j, (j + 4))
		_ = chunk
		var val int = bits_to_int(chunk)
		_ = val
		res = (res + string([]rune(digits)[val]))
		j = (j + 4)
	}
	if is_negative {
		return ("-" + res)
	}
	return res
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(bin_to_hexadecimal("101011111"))
		fmt.Println(bin_to_hexadecimal(" 1010   "))
		fmt.Println(bin_to_hexadecimal("-11101"))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
