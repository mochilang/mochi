//go:build ignore

// Generated by Mochi v0.10.59 on 2025-08-06 21:46:59 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _mod(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func int_pow(base int, exp int) int {
	var result int = 1
	_ = result
	var i int = 0
	_ = i
	for i < exp {
		result = (result * base)
		i = (i + 1)
	}
	return result
}

func decimal_to_octal(num int) string {
	if num == 0 {
		return "0o0"
	}
	var octal int = 0
	_ = octal
	var counter int = 0
	_ = counter
	var value int = num
	_ = value
	for value > 0 {
		var remainder int = _mod(value, 8)
		_ = remainder
		octal = (octal + (remainder * int_pow(10, counter)))
		counter = (counter + 1)
		value = (value / 8)
	}
	return ("0o" + fmt.Sprint(octal))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(decimal_to_octal(2))
		fmt.Println(decimal_to_octal(8))
		fmt.Println(decimal_to_octal(65))
		fmt.Println(decimal_to_octal(216))
		fmt.Println(decimal_to_octal(512))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
