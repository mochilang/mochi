//go:build ignore

// Generated by Mochi v0.10.59 on 2025-08-06 21:47:12 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func round_to_int(x float64) int {
	if x >= 0.0 {
		return any((x + 0.5)).(int)
	}
	return any((x - 0.5)).(int)
}

func molarity_to_normality(nfactor float64, moles float64, volume float64) int {
	return round_to_int(((moles / volume) * nfactor))
}

func moles_to_pressure(volume float64, moles float64, temperature float64) int {
	return round_to_int((((moles * 0.0821) * temperature) / volume))
}

func moles_to_volume(pressure float64, moles float64, temperature float64) int {
	return round_to_int((((moles * 0.0821) * temperature) / pressure))
}

func pressure_and_volume_to_temperature(pressure float64, moles float64, volume float64) int {
	return round_to_int(((pressure * volume) / (0.0821 * moles)))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(fmt.Sprint(molarity_to_normality(2.0, 3.1, 0.31)))
		fmt.Println(fmt.Sprint(molarity_to_normality(4.0, 11.4, 5.7)))
		fmt.Println(fmt.Sprint(moles_to_pressure(0.82, 3.0, 300.0)))
		fmt.Println(fmt.Sprint(moles_to_pressure(8.2, 5.0, 200.0)))
		fmt.Println(fmt.Sprint(moles_to_volume(0.82, 3.0, 300.0)))
		fmt.Println(fmt.Sprint(moles_to_volume(8.2, 5.0, 200.0)))
		fmt.Println(fmt.Sprint(pressure_and_volume_to_temperature(0.82, 1.0, 2.0)))
		fmt.Println(fmt.Sprint(pressure_and_volume_to_temperature(8.2, 5.0, 3.0)))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
