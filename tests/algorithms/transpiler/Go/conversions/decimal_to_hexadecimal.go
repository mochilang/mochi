//go:build ignore

// Generated by Mochi v0.10.59 on 2025-08-06 21:46:57 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _mod(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

var values []string

func decimal_to_hexadecimal(decimal int) string {
	var num int = decimal
	_ = num
	var negative bool = false
	_ = negative
	if num < 0 {
		negative = true
		num = (0 - num)
	}
	if num == 0 {
		if negative {
			return "-0x0"
		}
		return "0x0"
	}
	var hex string = ""
	_ = hex
	for num > 0 {
		var remainder int = _mod(num, 16)
		_ = remainder
		hex = (values[remainder] + hex)
		num = (num / 16)
	}
	if negative {
		return ("-0x" + hex)
	}
	return ("0x" + hex)
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		values = []string{"0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "a", "b", "c", "d", "e", "f"}
		fmt.Println(decimal_to_hexadecimal(5))
		fmt.Println(decimal_to_hexadecimal(15))
		fmt.Println(decimal_to_hexadecimal(37))
		fmt.Println(decimal_to_hexadecimal(255))
		fmt.Println(decimal_to_hexadecimal(4096))
		fmt.Println(decimal_to_hexadecimal(999098))
		fmt.Println(decimal_to_hexadecimal((0 - 256)))
		fmt.Println(decimal_to_hexadecimal(0))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
