//go:build ignore

// Generated by Mochi v0.10.59 on 2025-08-06 21:47:01 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

var ENERGY_CONVERSION map[string]float64

func energy_conversion(from_type string, to_type string, value float64) float64 {
	if (func() bool { _, ok := ENERGY_CONVERSION[from_type]; return ok }() == false) || (func() bool { _, ok := ENERGY_CONVERSION[to_type]; return ok }() == false) {
		panic("Incorrect 'from_type' or 'to_type'")
	}
	return ((value * ENERGY_CONVERSION[from_type]) / ENERGY_CONVERSION[to_type])
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		ENERGY_CONVERSION = map[string]float64{"joule": 1.0, "kilojoule": 1000.0, "megajoule": 1000000.0, "gigajoule": 1000000000.0, "wattsecond": 1.0, "watthour": 3600.0, "kilowatthour": 3600000.0, "newtonmeter": 1.0, "calorie_nutr": 4186.8, "kilocalorie_nutr": 4186800.0, "electronvolt": 1.602176634e-19, "britishthermalunit_it": 1055.05585, "footpound": 1.355818}
		fmt.Println(fmt.Sprint(energy_conversion("joule", "kilojoule", 1.0)))
		fmt.Println(fmt.Sprint(energy_conversion("kilowatthour", "joule", 10.0)))
		fmt.Println(fmt.Sprint(energy_conversion("britishthermalunit_it", "footpound", 1.0)))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
