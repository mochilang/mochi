//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-16 13:07:38 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	math "math"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func pow_float(base float64, exp int) float64 {
	var result float64 = 1.0
	_ = result
	var exponent int = exp
	_ = exponent
	if exponent < 0 {
		exponent = (0 - exponent)
		var i int = 0
		_ = i
		for i < exponent {
			result = (result * base)
			i = (i + 1)
		}
		return (float64(1.0) / float64(result))
	}
	var i int = 0
	_ = i
	for i < exponent {
		result = (result * base)
		i = (i + 1)
	}
	return result
}

func sum_of_geometric_progression(first_term int, common_ratio int, num_of_terms int) float64 {
	if common_ratio == 1 {
		return float64((num_of_terms * first_term))
	}
	var a float64 = float64(first_term)
	_ = a
	_ = a
	var r float64 = float64(common_ratio)
	_ = r
	_ = r
	return ((float64(a) / float64((1.0 - r))) * (1.0 - pow_float(r, num_of_terms)))
}

func test_sum() {
	if sum_of_geometric_progression(1, 2, 10) != 1023.0 {
		panic("example1 failed")
	}
	if sum_of_geometric_progression(1, 10, 5) != 11111.0 {
		panic("example2 failed")
	}
	if sum_of_geometric_progression((0-1), 2, 10) != (0 - 1023.0) {
		panic("example3 failed")
	}
}

func mochiMain() {
	test_sum()
	fmt.Println(func() string {
		f := float64(sum_of_geometric_progression(1, 2, 10))
		if f == 0 && math.Signbit(f) {
			return "-0"
		}
		if math.Abs(f-float64(int(f))) < 1e-9 {
			return fmt.Sprintf("%.1f", f)
		}
		return fmt.Sprint(f)
	}())
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
