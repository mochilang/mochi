//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-16 14:48:00 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func allocation_num(number_of_bytes int, partitions int) []string {
	if partitions <= 0 {
		panic("partitions must be a positive number!")
	}
	if partitions > number_of_bytes {
		panic("partitions can not > number_of_bytes!")
	}
	var bytes_per_partition int = (number_of_bytes / partitions)
	_ = bytes_per_partition
	var allocation_list []string = []string{}
	_ = allocation_list
	var i int = 0
	_ = i
	for i < partitions {
		var start_bytes int = ((i * bytes_per_partition) + 1)
		_ = start_bytes
		var end_bytes int = func() int {
			if i == (partitions - 1) {
				return number_of_bytes
			} else {
				return ((i + 1) * bytes_per_partition)
			}
		}()
		_ = end_bytes
		allocation_list = append(allocation_list, ((fmt.Sprint(start_bytes) + "-") + fmt.Sprint(end_bytes)))
		i = (i + 1)
	}
	return allocation_list
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(fmt.Sprint(allocation_num(16647, 4)))
		fmt.Println(fmt.Sprint(allocation_num(50000, 5)))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
