//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-16 12:54:41 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func abs_int(n int) int {
	if n < 0 {
		return (0 - n)
	}
	return n
}

func num_digits(n int) int {
	var x int = abs_int(n)
	_ = x
	var digits int = 1
	_ = digits
	for x >= 10 {
		x = (x / 10)
		digits = (digits + 1)
	}
	return digits
}

func num_digits_fast(n int) int {
	var x int = abs_int(n)
	_ = x
	var digits int = 1
	_ = digits
	var power int = 10
	_ = power
	for x >= power {
		power = (power * 10)
		digits = (digits + 1)
	}
	return digits
}

func num_digits_faster(n int) int {
	var s string = fmt.Sprint(abs_int(n))
	_ = s
	_ = s
	return len(s)
}

func test_num_digits() {
	if num_digits(12345) != 5 {
		panic("num_digits 12345 failed")
	}
	if num_digits(123) != 3 {
		panic("num_digits 123 failed")
	}
	if num_digits(0) != 1 {
		panic("num_digits 0 failed")
	}
	if num_digits((0 - 1)) != 1 {
		panic("num_digits -1 failed")
	}
	if num_digits((0 - 123456)) != 6 {
		panic("num_digits -123456 failed")
	}
	if num_digits_fast(12345) != 5 {
		panic("num_digits_fast 12345 failed")
	}
	if num_digits_fast(123) != 3 {
		panic("num_digits_fast 123 failed")
	}
	if num_digits_fast(0) != 1 {
		panic("num_digits_fast 0 failed")
	}
	if num_digits_fast((0 - 1)) != 1 {
		panic("num_digits_fast -1 failed")
	}
	if num_digits_fast((0 - 123456)) != 6 {
		panic("num_digits_fast -123456 failed")
	}
	if num_digits_faster(12345) != 5 {
		panic("num_digits_faster 12345 failed")
	}
	if num_digits_faster(123) != 3 {
		panic("num_digits_faster 123 failed")
	}
	if num_digits_faster(0) != 1 {
		panic("num_digits_faster 0 failed")
	}
	if num_digits_faster((0 - 1)) != 1 {
		panic("num_digits_faster -1 failed")
	}
	if num_digits_faster((0 - 123456)) != 6 {
		panic("num_digits_faster -123456 failed")
	}
}

func mochiMain() {
	test_num_digits()
	fmt.Println(fmt.Sprint(num_digits(12345)))
	fmt.Println(fmt.Sprint(num_digits_fast(12345)))
	fmt.Println(fmt.Sprint(num_digits_faster(12345)))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
