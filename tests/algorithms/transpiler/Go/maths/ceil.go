//go:build ignore

// Generated by Mochi v0.10.67 on 2025-08-16 19:52:03 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	math "math"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func ceil(x float64) int {
	var truncated int = int(x)
	_ = truncated
	var frac float64 = (x - float64(truncated))
	_ = frac
	if frac <= 0.0 {
		return truncated
	}
	return (truncated + 1)
}

var values []float64

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		values = []float64{1.0, (0 - 1.0), 0.0, math.Copysign(0.0, -1.0), 1.1, (0 - 1.1), 1.0, (0 - 1.0), 1000000000.0}
		for _, v := range values {
			_ = v
			fmt.Println(ceil(v))
		}
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
