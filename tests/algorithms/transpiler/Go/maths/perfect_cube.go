//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-16 12:55:21 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func perfect_cube(n int) bool {
	var m int = n
	_ = m
	if m < 0 {
		m = (0 - m)
	}
	var i int = 0
	_ = i
	for ((i * i) * i) < m {
		i = (i + 1)
	}
	return (((i * i) * i) == m)
}

func perfect_cube_binary_search(n int) bool {
	var m int = n
	_ = m
	if m < 0 {
		m = (0 - m)
	}
	var left int = 0
	_ = left
	var right int = m
	_ = right
	for left <= right {
		var mid int = (left + ((right - left) / 2))
		_ = mid
		var cube int = ((mid * mid) * mid)
		_ = cube
		if cube == m {
			return true
		}
		if cube < m {
			left = (mid + 1)
		} else {
			right = (mid - 1)
		}
	}
	return false
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(fmt.Sprint(perfect_cube(27)))
		fmt.Println(fmt.Sprint(perfect_cube(4)))
		fmt.Println(fmt.Sprint(perfect_cube_binary_search(27)))
		fmt.Println(fmt.Sprint(perfect_cube_binary_search(64)))
		fmt.Println(fmt.Sprint(perfect_cube_binary_search(4)))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
