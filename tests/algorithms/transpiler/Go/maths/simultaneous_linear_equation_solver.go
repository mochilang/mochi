//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-16 13:04:34 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		return
	}
	s[idx] = v
}

func floor(x float64) float64 {
	var i int = int(x)
	_ = i
	if float64(i) > x {
		i = (i - 1)
	}
	return float64(i)
}

func pow10(n int) float64 {
	var p float64 = 1.0
	_ = p
	var i int = 0
	_ = i
	for i < n {
		p = (p * 10.0)
		i = (i + 1)
	}
	return p
}

func round(x float64, n int) float64 {
	var m float64 = pow10(n)
	_ = m
	_ = m
	return (float64(floor(((x * m) + 0.5))) / float64(m))
}

func clone_matrix(mat [][]float64) [][]float64 {
	var new_mat [][]float64 = [][]float64{}
	_ = new_mat
	var i int = 0
	_ = i
	for i < len(mat) {
		var row []float64 = []float64{}
		_ = row
		var j int = 0
		_ = j
		for j < len(_index(mat, i)) {
			row = append(row, _index(_index(mat, i), j))
			j = (j + 1)
		}
		new_mat = append(new_mat, row)
		i = (i + 1)
	}
	return new_mat
}

func solve_simultaneous(equations [][]float64) []float64 {
	var n int = len(equations)
	_ = n
	if n == 0 {
		panic("solve_simultaneous() requires n lists of length n+1")
	}
	var m int = (n + 1)
	_ = m
	var i int = 0
	_ = i
	for i < n {
		if len(_index(equations, i)) != m {
			panic("solve_simultaneous() requires n lists of length n+1")
		}
		i = (i + 1)
	}
	var a [][]float64 = clone_matrix(func(v any) [][]float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]float64{}
			}
			out := make([][]float64, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []float64 {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]float64); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []float64{}
						}
						out := make([]float64, len(arr))
						for i, x := range arr {
							out[i] = x.(float64)
						}
						return out
					}
					return v.([]float64)
				}(x)
			}
			return out
		}
		return v.([][]float64)
	}(equations))
	_ = a
	var row int = 0
	_ = row
	for row < n {
		var pivot int = row
		_ = pivot
		for (pivot < n) && (_index(_index(a, pivot), row) == 0.0) {
			pivot = (pivot + 1)
		}
		if pivot == n {
			panic("solve_simultaneous() requires at least 1 full equation")
		}
		if pivot != row {
			var temp []float64 = _index(a, row)
			_ = temp
			_setIndex(a, row, _index(a, pivot))
			_setIndex(a, pivot, temp)
		}
		var pivot_val float64 = _index(_index(a, row), row)
		_ = pivot_val
		var col int = 0
		_ = col
		for col < m {
			_setIndex(_index(a, row), col, (float64(_index(_index(a, row), col)) / float64(pivot_val)))
			col = (col + 1)
		}
		var r int = 0
		_ = r
		for r < n {
			if r != row {
				var factor float64 = _index(_index(a, r), row)
				_ = factor
				var c int = 0
				_ = c
				for c < m {
					_setIndex(_index(a, r), c, (_index(_index(a, r), c) - (factor * _index(_index(a, row), c))))
					c = (c + 1)
				}
			}
			r = (r + 1)
		}
		row = (row + 1)
	}
	var res []float64 = []float64{}
	_ = res
	var k int = 0
	_ = k
	for k < n {
		res = append(res, round(_index(_index(a, k), (m-1)), 5))
		k = (k + 1)
	}
	return res
}

func test_solver() {
	var a [][]float64 = [][]float64{[]float64{1.0, 2.0, 3.0}, []float64{4.0, 5.0, 6.0}}
	_ = a
	var r1 []float64 = solve_simultaneous(func(v any) [][]float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]float64{}
			}
			out := make([][]float64, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []float64 {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]float64); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []float64{}
						}
						out := make([]float64, len(arr))
						for i, x := range arr {
							out[i] = x.(float64)
						}
						return out
					}
					return v.([]float64)
				}(x)
			}
			return out
		}
		return v.([][]float64)
	}(a))
	_ = r1
	if !(((len(r1) == 2) && (_index(r1, 0) == (0.0 - 1.0))) && (_index(r1, 1) == 2.0)) {
		panic("test1 failed")
	}
	var b [][]float64 = [][]float64{[]float64{0.0, (0.0 - 3.0), 1.0, 7.0}, []float64{3.0, 2.0, (0.0 - 1.0), 11.0}, []float64{5.0, 1.0, (0.0 - 2.0), 12.0}}
	_ = b
	var r2 []float64 = solve_simultaneous(func(v any) [][]float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]float64{}
			}
			out := make([][]float64, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []float64 {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]float64); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []float64{}
						}
						out := make([]float64, len(arr))
						for i, x := range arr {
							out[i] = x.(float64)
						}
						return out
					}
					return v.([]float64)
				}(x)
			}
			return out
		}
		return v.([][]float64)
	}(b))
	_ = r2
	if !((((len(r2) == 3) && (_index(r2, 0) == 6.4)) && (_index(r2, 1) == 1.2)) && (_index(r2, 2) == 10.6)) {
		panic("test2 failed")
	}
}

func mochiMain() {
	test_solver()
	var eq [][]float64 = [][]float64{[]float64{2.0, 1.0, 1.0, 1.0, 1.0, 4.0}, []float64{1.0, 2.0, 1.0, 1.0, 1.0, 5.0}, []float64{1.0, 1.0, 2.0, 1.0, 1.0, 6.0}, []float64{1.0, 1.0, 1.0, 2.0, 1.0, 7.0}, []float64{1.0, 1.0, 1.0, 1.0, 2.0, 8.0}}
	_ = eq
	fmt.Println(fmt.Sprint(solve_simultaneous(func(v any) [][]float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]float64{}
			}
			out := make([][]float64, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []float64 {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]float64); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []float64{}
						}
						out := make([]float64, len(arr))
						for i, x := range arr {
							out[i] = x.(float64)
						}
						return out
					}
					return v.([]float64)
				}(x)
			}
			return out
		}
		return v.([][]float64)
	}(eq))))
	fmt.Println(fmt.Sprint(solve_simultaneous(func(v any) [][]float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]float64{}
			}
			out := make([][]float64, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []float64 {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]float64); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []float64{}
						}
						out := make([]float64, len(arr))
						for i, x := range arr {
							out[i] = x.(float64)
						}
						return out
					}
					return v.([]float64)
				}(x)
			}
			return out
		}
		return v.([][]float64)
	}([][]float64{[]float64{4.0, 2.0}}))))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
