//go:build ignore

// Generated by Mochi v0.10.67 on 2025-08-16 19:51:59 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func abs(x float64) float64 {
	if x < 0.0 {
		return (0 - x)
	}
	return x
}

func factorial(n int) int {
	if n < 0 {
		panic("factorial is undefined for negative numbers")
	}
	var result int = 1
	_ = result
	var i int = 2
	_ = i
	for i <= n {
		result = (result * i)
		i = (i + 1)
	}
	return result
}

func pow_float(base float64, exp int) float64 {
	var result float64 = 1.0
	_ = result
	var i int = 0
	_ = i
	for i < exp {
		result = (result * base)
		i = (i + 1)
	}
	return result
}

func binomial_distribution(successes int, trials int, prob float64) float64 {
	if successes > trials {
		panic("successes must be lower or equal to trials")
	}
	if (trials < 0) || (successes < 0) {
		panic("the function is defined for non-negative integers")
	}
	if !((0.0 < prob) && (prob < 1.0)) {
		panic("prob has to be in range of 1 - 0")
	}
	var probability float64 = (pow_float(prob, successes) * pow_float((1.0-prob), (trials-successes)))
	_ = probability
	_ = probability
	var numerator float64 = float64(factorial(trials))
	_ = numerator
	var denominator float64 = float64((factorial(successes) * factorial((trials - successes))))
	_ = denominator
	var coefficient float64 = (float64(numerator) / float64(denominator))
	_ = coefficient
	_ = coefficient
	return (probability * coefficient)
}

var __mochi_test_header_printed bool

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		if !__mochi_test_header_printed {
			fmt.Println("[94;1mtests/github/TheAlgorithms/Mochi/maths/binomial_distribution.mochi[0;22m")
			__mochi_test_header_printed = true
		}
		func() {
			func() {
				defer func() { recover() }()
				var result float64 = binomial_distribution(3, 5, 0.7)
				_ = result
				_ = result
				_ = (abs((result - 0.3087)) < 1e-07)
			}()
			fmt.Printf("   \x1b[33mtest\x1b[0m %s                   ... \x1b[32mok\x1b[0m (1.0ms)\n", "example1")
		}()

		if !__mochi_test_header_printed {
			fmt.Println("[94;1mtests/github/TheAlgorithms/Mochi/maths/binomial_distribution.mochi[0;22m")
			__mochi_test_header_printed = true
		}
		func() {
			func() {
				defer func() { recover() }()
				var result float64 = binomial_distribution(2, 4, 0.5)
				_ = result
				_ = result
				_ = (abs((result - 0.375)) < 1e-07)
			}()
			fmt.Printf("   \x1b[33mtest\x1b[0m %s                   ... \x1b[32mok\x1b[0m (1.0ms)\n", "example2")
		}()

		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
