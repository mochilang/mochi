//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-16 12:55:05 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		return
	}
	s[idx] = v
}

func _toFloat(v any) float64 {
	switch t := v.(type) {
	case int:
		return float64(t)
	case int64:
		return float64(t)
	case float64:
		return t
	default:
		return 0
	}
}

func runge_kutta(f func(float64, float64) float64, y0 float64, x0 float64, h float64, x_end float64) []float64 {
	var span float64 = (float64((x_end - x0)) / float64(h))
	_ = span
	var n int = int(span)
	_ = n
	if _toFloat(float64(n)) < span {
		n = (n + 1)
	}
	var y []float64 = []float64{}
	_ = y
	var i int = 0
	_ = i
	for i < (n + 1) {
		y = append(y, 0.0)
		i = (i + 1)
	}
	_setIndex(y, 0, y0)
	var x float64 = x0
	_ = x
	var k int = 0
	_ = k
	for k < n {
		var k1 float64 = f(x, _index(y, k))
		_ = k1
		var k2 float64 = f((x + (0.5 * h)), (_index(y, k) + ((0.5 * h) * k1)))
		_ = k2
		var k3 float64 = f((x + (0.5 * h)), (_index(y, k) + ((0.5 * h) * k2)))
		_ = k3
		var k4 float64 = f((x + h), (_index(y, k) + (h * k3)))
		_ = k4
		_setIndex(y, (k + 1), (_index(y, k) + (((float64(1.0) / float64(6.0)) * h) * (((k1 + (2.0 * k2)) + (2.0 * k3)) + k4))))
		x = (x + h)
		k = (k + 1)
	}
	return y
}

func test_runge_kutta() {
	var f func(float64, float64) float64
	_ = f
	f = func(x float64, y float64) float64 {
		return y
	}
	var result []float64 = runge_kutta(f, 1.0, 0.0, 0.01, 5.0)
	_ = result
	var last float64 = _index(result, (len(result) - 1))
	_ = last
	var expected float64 = 148.41315904125113
	_ = expected
	var diff float64 = (last - expected)
	_ = diff
	if diff < 0.0 {
		diff = (0 - diff)
	}
	if diff > 1e-06 {
		panic("runge_kutta failed")
	}
}

func mochiMain() {
	test_runge_kutta()
	var f func(float64, float64) float64
	_ = f
	f = func(x float64, y float64) float64 {
		return y
	}
	var r []float64 = runge_kutta(f, 1.0, 0.0, 0.1, 1.0)
	_ = r
	fmt.Println(fmt.Sprint(_index(r, (len(r) - 1))))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
