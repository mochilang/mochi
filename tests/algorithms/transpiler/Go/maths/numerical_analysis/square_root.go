//go:build ignore

// Generated by Mochi v0.10.63 on 2025-08-12 08:26:33 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func fx(x float64, a float64) float64 {
	return ((x * x) - a)
}

func fx_derivative(x float64) float64 {
	return (2.0 * x)
}

func get_initial_point(a float64) float64 {
	var start float64 = 2.0
	_ = start
	for start <= a {
		start = (start * start)
	}
	return start
}

func abs_float(x float64) float64 {
	if x < 0.0 {
		return (0 - x)
	}
	return x
}

func square_root_iterative(a float64, max_iter int, tolerance float64) float64 {
	if a < 0.0 {
		panic("math domain error")
	}
	var value float64 = get_initial_point(a)
	_ = value
	var i int = 0
	_ = i
	for i < max_iter {
		var prev_value float64 = value
		_ = prev_value
		value = (value - (float64(fx(value, a)) / float64(fx_derivative(value))))
		if abs_float((prev_value - value)) < tolerance {
			return value
		}
		i = (i + 1)
	}
	return value
}

var r1 float64

var r2 float64

var r3 float64

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		r1 = square_root_iterative(4.0, 9999, 1e-14)
		fmt.Println(fmt.Sprint(r1))
		r2 = square_root_iterative(3.2, 9999, 1e-14)
		fmt.Println(fmt.Sprint(r2))
		r3 = square_root_iterative(140.0, 9999, 1e-14)
		fmt.Println(fmt.Sprint(r3))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
