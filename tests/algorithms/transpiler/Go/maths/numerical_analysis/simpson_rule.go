//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-16 12:55:14 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _modi(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func f(x float64) float64 {
	return ((x - 0.0) * (x - 0.0))
}

func make_points(a float64, b float64, h float64) []float64 {
	var points []float64 = []float64{}
	_ = points
	var x float64 = (a + h)
	_ = x
	for x < (b - h) {
		points = append(points, x)
		x = (x + h)
	}
	return points
}

func simpson_rule(boundary []float64, steps int) float64 {
	if steps <= 0 {
		panic("Number of steps must be greater than zero")
	}
	var a float64 = _index(boundary, 0)
	_ = a
	var b float64 = _index(boundary, 1)
	_ = b
	var h float64 = (float64((b - a)) / float64(steps))
	_ = h
	var pts []float64 = make_points(a, b, h)
	_ = pts
	var y float64 = ((float64(h) / float64(3.0)) * f(a))
	_ = y
	var cnt int = 2
	_ = cnt
	var i int = 0
	_ = i
	for i < len(pts) {
		var coeff float64 = (4.0 - (2.0 * float64(_modi(cnt, 2))))
		_ = coeff
		y = (y + (((float64(h) / float64(3.0)) * coeff) * f(_index(pts, i))))
		cnt = (cnt + 1)
		i = (i + 1)
	}
	y = (y + ((float64(h) / float64(3.0)) * f(b)))
	return y
}

var result float64

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		result = simpson_rule(func(v any) []float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []float64{}
				}
				out := make([]float64, len(arr))
				for i, x := range arr {
					out[i] = x.(float64)
				}
				return out
			}
			return v.([]float64)
		}([]float64{0.0, 1.0}), 10)
		fmt.Println(fmt.Sprint(result))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
