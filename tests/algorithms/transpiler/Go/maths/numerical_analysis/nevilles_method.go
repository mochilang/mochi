//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-16 12:54:54 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	math "math"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		return
	}
	s[idx] = v
}

type NevilleResult struct {
	Value float64     `json:"value"`
	Table [][]float64 `json:"table"`
}

func neville_interpolate(x_points []float64, y_points []float64, x0 float64) NevilleResult {
	var n int = len(x_points)
	_ = n
	var q [][]float64 = [][]float64{}
	_ = q
	var i int = 0
	_ = i
	for i < n {
		var row []float64 = []float64{}
		_ = row
		var j int = 0
		_ = j
		for j < n {
			row = append(row, 0.0)
			j = (j + 1)
		}
		q = append(q, row)
		i = (i + 1)
	}
	i = 0
	for i < n {
		_setIndex(_index(q, i), 1, _index(y_points, i))
		i = (i + 1)
	}
	var col int = 2
	_ = col
	for col < n {
		var row_idx int = col
		_ = row_idx
		for row_idx < n {
			_setIndex(_index(q, row_idx), col, (float64((((x0 - _index(x_points, ((row_idx-col)+1))) * _index(_index(q, row_idx), (col-1))) - ((x0 - _index(x_points, row_idx)) * _index(_index(q, (row_idx-1)), (col-1))))) / float64((_index(x_points, row_idx) - _index(x_points, ((row_idx-col)+1))))))
			row_idx = (row_idx + 1)
		}
		col = (col + 1)
	}
	return NevilleResult{
		Value: _index(_index(q, (n-1)), (n - 1)),
		Table: q,
	}
}

func test_neville() {
	var xs []float64 = []float64{1.0, 2.0, 3.0, 4.0, 6.0}
	_ = xs
	var ys []float64 = []float64{6.0, 7.0, 8.0, 9.0, 11.0}
	_ = ys
	var r1 NevilleResult = neville_interpolate(func(v any) []float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []float64{}
			}
			out := make([]float64, len(arr))
			for i, x := range arr {
				out[i] = x.(float64)
			}
			return out
		}
		return v.([]float64)
	}(xs), func(v any) []float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []float64{}
			}
			out := make([]float64, len(arr))
			for i, x := range arr {
				out[i] = x.(float64)
			}
			return out
		}
		return v.([]float64)
	}(ys), 5.0)
	_ = r1
	if r1.Value != 10.0 {
		panic("neville_interpolate at 5 failed")
	}
	var r2 NevilleResult = neville_interpolate(func(v any) []float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []float64{}
			}
			out := make([]float64, len(arr))
			for i, x := range arr {
				out[i] = x.(float64)
			}
			return out
		}
		return v.([]float64)
	}(xs), func(v any) []float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []float64{}
			}
			out := make([]float64, len(arr))
			for i, x := range arr {
				out[i] = x.(float64)
			}
			return out
		}
		return v.([]float64)
	}(ys), 99.0)
	_ = r2
	if r2.Value != 104.0 {
		panic("neville_interpolate at 99 failed")
	}
}

func mochiMain() {
	test_neville()
	var xs []float64 = []float64{1.0, 2.0, 3.0, 4.0, 6.0}
	_ = xs
	var ys []float64 = []float64{6.0, 7.0, 8.0, 9.0, 11.0}
	_ = ys
	var r NevilleResult = neville_interpolate(func(v any) []float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []float64{}
			}
			out := make([]float64, len(arr))
			for i, x := range arr {
				out[i] = x.(float64)
			}
			return out
		}
		return v.([]float64)
	}(xs), func(v any) []float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []float64{}
			}
			out := make([]float64, len(arr))
			for i, x := range arr {
				out[i] = x.(float64)
			}
			return out
		}
		return v.([]float64)
	}(ys), 5.0)
	_ = r
	_ = r
	fmt.Println(func() string {
		f := float64(r.Value)
		if f == 0 && math.Signbit(f) {
			return "-0"
		}
		if math.Abs(f-float64(int(f))) < 1e-9 {
			return fmt.Sprintf("%.1f", f)
		}
		return fmt.Sprint(f)
	}())
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
