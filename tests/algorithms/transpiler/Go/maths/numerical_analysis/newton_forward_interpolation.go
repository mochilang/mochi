//go:build ignore

// Generated by Mochi v0.10.63 on 2025-08-12 08:26:18 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	s[idx] = v
}

func ucal(u float64, p int) float64 {
	var temp float64 = u
	_ = temp
	var i int = 1
	_ = i
	for i < p {
		temp = (temp * (u - float64(i)))
		i = (i + 1)
	}
	return temp
}

func factorial(n int) float64 {
	var result float64 = 1.0
	_ = result
	var i int = 2
	_ = i
	for i <= n {
		result = (result * float64(i))
		i = (i + 1)
	}
	return result
}

func newton_forward_interpolation(x []float64, y0 []float64, value float64) float64 {
	var n int = len(x)
	_ = n
	var y [][]float64 = [][]float64{}
	_ = y
	var i int = 0
	_ = i
	for i < n {
		var row []float64 = []float64{}
		_ = row
		var j int = 0
		_ = j
		for j < n {
			row = append(row, 0.0)
			j = (j + 1)
		}
		y = append(y, row)
		i = (i + 1)
	}
	i = 0
	for i < n {
		_setIndex(_index(y, i), 0, _index(y0, i))
		i = (i + 1)
	}
	var i1 int = 1
	_ = i1
	for i1 < n {
		var j1 int = 0
		_ = j1
		for j1 < (n - i1) {
			_setIndex(_index(y, j1), i1, (_index(_index(y, (j1+1)), (i1-1)) - _index(_index(y, j1), (i1-1))))
			j1 = (j1 + 1)
		}
		i1 = (i1 + 1)
	}
	var u float64 = (float64((value - _index(x, 0))) / float64((_index(x, 1) - _index(x, 0))))
	_ = u
	var sum float64 = _index(_index(y, 0), 0)
	_ = sum
	var k int = 1
	_ = k
	for k < n {
		sum = (sum + (float64((ucal(u, k) * _index(_index(y, 0), k))) / float64(factorial(k))))
		k = (k + 1)
	}
	return sum
}

var x_points []float64

var y_points []float64

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		x_points = []float64{0.0, 1.0, 2.0, 3.0}
		y_points = []float64{0.0, 1.0, 8.0, 27.0}
		fmt.Println(fmt.Sprint(newton_forward_interpolation(func(v any) []float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []float64{}
				}
				out := make([]float64, len(arr))
				for i, x := range arr {
					out[i] = x.(float64)
				}
				return out
			}
			return v.([]float64)
		}(x_points), func(v any) []float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []float64{}
				}
				out := make([]float64, len(arr))
				for i, x := range arr {
					out[i] = x.(float64)
				}
				return out
			}
			return v.([]float64)
		}(y_points), 1.5)))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
