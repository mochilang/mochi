//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-16 12:54:52 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func abs_float(x float64) float64 {
	if x < 0.0 {
		return (0 - x)
	}
	return x
}

func intersection(function func(float64) float64, x0 float64, x1 float64) float64 {
	var x_n float64 = x0
	_ = x_n
	var x_n1 float64 = x1
	_ = x_n1
	for {
		if (x_n == x_n1) || (function(x_n1) == function(x_n)) {
			panic("float division by zero, could not find root")
		}
		var numerator float64 = function(x_n1)
		_ = numerator
		var denominator float64 = (float64((function(x_n1) - function(x_n))) / float64((x_n1 - x_n)))
		_ = denominator
		var x_n2 float64 = (x_n1 - (float64(numerator) / float64(denominator)))
		_ = x_n2
		if abs_float((x_n2 - x_n1)) < 1e-05 {
			return x_n2
		}
		x_n = x_n1
		x_n1 = x_n2
	}
}

func f(x float64) float64 {
	return ((((x * x) * x) - (2.0 * x)) - 5.0)
}

func mochiMain() {
	fmt.Println(fmt.Sprint(intersection(f, 3.0, 3.5)))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
