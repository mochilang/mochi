//go:build ignore

// Generated by Mochi v0.10.63 on 2025-08-12 08:26:07 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

func abs_float(x float64) float64 {
	if x < 0.0 {
		return (0 - x)
	} else {
		return x
	}
}

func validate_inputs(x_initials []float64, step_size float64, x_final float64) {
	if _index(x_initials, (len(x_initials)-1)) >= x_final {
		panic("The final value of x must be greater than the initial values of x.")
	}
	if step_size <= 0.0 {
		panic("Step size must be positive.")
	}
	var i int = 0
	_ = i
	for i < (len(x_initials) - 1) {
		var diff float64 = (_index(x_initials, (i+1)) - _index(x_initials, i))
		_ = diff
		if abs_float((diff - step_size)) > 1e-10 {
			panic("x-values must be equally spaced according to step size.")
		}
		i = (i + 1)
	}
}

func list_to_string(xs []float64) string {
	var s string = "["
	_ = s
	var i int = 0
	_ = i
	for i < len(xs) {
		s = (s + fmt.Sprint(_index(xs, i)))
		if (i + 1) < len(xs) {
			s = (s + ", ")
		}
		i = (i + 1)
	}
	s = (s + "]")
	return s
}

func adams_bashforth_step2(f func(float64, float64) float64, x_initials []float64, y_initials []float64, step_size float64, x_final float64) []float64 {
	validate_inputs(func(v any) []float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []float64{}
			}
			out := make([]float64, len(arr))
			for i, x := range arr {
				out[i] = x.(float64)
			}
			return out
		}
		return v.([]float64)
	}(x_initials), step_size, x_final)
	if (len(x_initials) != 2) || (len(y_initials) != 2) {
		panic("Insufficient initial points information.")
	}
	var x0 float64 = _index(x_initials, 0)
	_ = x0
	var x1 float64 = _index(x_initials, 1)
	_ = x1
	var y []float64 = []float64{}
	_ = y
	y = append(y, _index(y_initials, 0))
	y = append(y, _index(y_initials, 1))
	var n int = int((float64((x_final - x1)) / float64(step_size)))
	_ = n
	var i int = 0
	_ = i
	for i < n {
		var term float64 = ((3.0 * f(x1, _index(y, (i+1)))) - f(x0, _index(y, i)))
		_ = term
		var y_next float64 = (_index(y, (i+1)) + ((float64(step_size) / float64(2.0)) * term))
		_ = y_next
		y = append(y, y_next)
		x0 = x1
		x1 = (x1 + step_size)
		i = (i + 1)
	}
	return y
}

func adams_bashforth_step3(f func(float64, float64) float64, x_initials []float64, y_initials []float64, step_size float64, x_final float64) []float64 {
	validate_inputs(func(v any) []float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []float64{}
			}
			out := make([]float64, len(arr))
			for i, x := range arr {
				out[i] = x.(float64)
			}
			return out
		}
		return v.([]float64)
	}(x_initials), step_size, x_final)
	if (len(x_initials) != 3) || (len(y_initials) != 3) {
		panic("Insufficient initial points information.")
	}
	var x0 float64 = _index(x_initials, 0)
	_ = x0
	var x1 float64 = _index(x_initials, 1)
	_ = x1
	var x2 float64 = _index(x_initials, 2)
	_ = x2
	var y []float64 = []float64{}
	_ = y
	y = append(y, _index(y_initials, 0))
	y = append(y, _index(y_initials, 1))
	y = append(y, _index(y_initials, 2))
	var n int = int((float64((x_final - x2)) / float64(step_size)))
	_ = n
	var i int = 0
	_ = i
	for i <= n {
		var term float64 = (((23.0 * f(x2, _index(y, (i+2)))) - (16.0 * f(x1, _index(y, (i+1))))) + (5.0 * f(x0, _index(y, i))))
		_ = term
		var y_next float64 = (_index(y, (i+2)) + ((float64(step_size) / float64(12.0)) * term))
		_ = y_next
		y = append(y, y_next)
		x0 = x1
		x1 = x2
		x2 = (x2 + step_size)
		i = (i + 1)
	}
	return y
}

func adams_bashforth_step4(f func(float64, float64) float64, x_initials []float64, y_initials []float64, step_size float64, x_final float64) []float64 {
	validate_inputs(func(v any) []float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []float64{}
			}
			out := make([]float64, len(arr))
			for i, x := range arr {
				out[i] = x.(float64)
			}
			return out
		}
		return v.([]float64)
	}(x_initials), step_size, x_final)
	if (len(x_initials) != 4) || (len(y_initials) != 4) {
		panic("Insufficient initial points information.")
	}
	var x0 float64 = _index(x_initials, 0)
	_ = x0
	var x1 float64 = _index(x_initials, 1)
	_ = x1
	var x2 float64 = _index(x_initials, 2)
	_ = x2
	var x3 float64 = _index(x_initials, 3)
	_ = x3
	var y []float64 = []float64{}
	_ = y
	y = append(y, _index(y_initials, 0))
	y = append(y, _index(y_initials, 1))
	y = append(y, _index(y_initials, 2))
	y = append(y, _index(y_initials, 3))
	var n int = int((float64((x_final - x3)) / float64(step_size)))
	_ = n
	var i int = 0
	_ = i
	for i < n {
		var term float64 = ((((55.0 * f(x3, _index(y, (i+3)))) - (59.0 * f(x2, _index(y, (i+2))))) + (37.0 * f(x1, _index(y, (i+1))))) - (9.0 * f(x0, _index(y, i))))
		_ = term
		var y_next float64 = (_index(y, (i+3)) + ((float64(step_size) / float64(24.0)) * term))
		_ = y_next
		y = append(y, y_next)
		x0 = x1
		x1 = x2
		x2 = x3
		x3 = (x3 + step_size)
		i = (i + 1)
	}
	return y
}

func adams_bashforth_step5(f func(float64, float64) float64, x_initials []float64, y_initials []float64, step_size float64, x_final float64) []float64 {
	validate_inputs(func(v any) []float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []float64{}
			}
			out := make([]float64, len(arr))
			for i, x := range arr {
				out[i] = x.(float64)
			}
			return out
		}
		return v.([]float64)
	}(x_initials), step_size, x_final)
	if (len(x_initials) != 5) || (len(y_initials) != 5) {
		panic("Insufficient initial points information.")
	}
	var x0 float64 = _index(x_initials, 0)
	_ = x0
	var x1 float64 = _index(x_initials, 1)
	_ = x1
	var x2 float64 = _index(x_initials, 2)
	_ = x2
	var x3 float64 = _index(x_initials, 3)
	_ = x3
	var x4 float64 = _index(x_initials, 4)
	_ = x4
	var y []float64 = []float64{}
	_ = y
	y = append(y, _index(y_initials, 0))
	y = append(y, _index(y_initials, 1))
	y = append(y, _index(y_initials, 2))
	y = append(y, _index(y_initials, 3))
	y = append(y, _index(y_initials, 4))
	var n int = int((float64((x_final - x4)) / float64(step_size)))
	_ = n
	var i int = 0
	_ = i
	for i <= n {
		var term float64 = (((((1901.0 * f(x4, _index(y, (i+4)))) - (2774.0 * f(x3, _index(y, (i+3))))) - (2616.0 * f(x2, _index(y, (i+2))))) - (1274.0 * f(x1, _index(y, (i+1))))) + (251.0 * f(x0, _index(y, i))))
		_ = term
		var y_next float64 = (_index(y, (i+4)) + ((float64(step_size) / float64(720.0)) * term))
		_ = y_next
		y = append(y, y_next)
		x0 = x1
		x1 = x2
		x2 = x3
		x3 = x4
		x4 = (x4 + step_size)
		i = (i + 1)
	}
	return y
}

func f_x(x float64, y float64) float64 {
	return x
}

func f_xy(x float64, y float64) float64 {
	return (x + y)
}

var y2 []float64

var y3 []float64

var y4 []float64

var y5 []float64

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		y2 = adams_bashforth_step2(f_x, func(v any) []float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []float64{}
				}
				out := make([]float64, len(arr))
				for i, x := range arr {
					out[i] = x.(float64)
				}
				return out
			}
			return v.([]float64)
		}([]float64{0.0, 0.2}), func(v any) []float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []float64{}
				}
				out := make([]float64, len(arr))
				for i, x := range arr {
					out[i] = x.(float64)
				}
				return out
			}
			return v.([]float64)
		}([]float64{0.0, 0.0}), 0.2, 1.0)
		fmt.Println(list_to_string(func(v any) []float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []float64{}
				}
				out := make([]float64, len(arr))
				for i, x := range arr {
					out[i] = x.(float64)
				}
				return out
			}
			return v.([]float64)
		}(y2)))
		y3 = adams_bashforth_step3(f_xy, func(v any) []float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []float64{}
				}
				out := make([]float64, len(arr))
				for i, x := range arr {
					out[i] = x.(float64)
				}
				return out
			}
			return v.([]float64)
		}([]float64{0.0, 0.2, 0.4}), func(v any) []float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []float64{}
				}
				out := make([]float64, len(arr))
				for i, x := range arr {
					out[i] = x.(float64)
				}
				return out
			}
			return v.([]float64)
		}([]float64{0.0, 0.0, 0.04}), 0.2, 1.0)
		fmt.Println(fmt.Sprint(_index(y3, 3)))
		y4 = adams_bashforth_step4(f_xy, func(v any) []float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []float64{}
				}
				out := make([]float64, len(arr))
				for i, x := range arr {
					out[i] = x.(float64)
				}
				return out
			}
			return v.([]float64)
		}([]float64{0.0, 0.2, 0.4, 0.6}), func(v any) []float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []float64{}
				}
				out := make([]float64, len(arr))
				for i, x := range arr {
					out[i] = x.(float64)
				}
				return out
			}
			return v.([]float64)
		}([]float64{0.0, 0.0, 0.04, 0.128}), 0.2, 1.0)
		fmt.Println(fmt.Sprint(_index(y4, 4)))
		fmt.Println(fmt.Sprint(_index(y4, 5)))
		y5 = adams_bashforth_step5(f_xy, func(v any) []float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []float64{}
				}
				out := make([]float64, len(arr))
				for i, x := range arr {
					out[i] = x.(float64)
				}
				return out
			}
			return v.([]float64)
		}([]float64{0.0, 0.2, 0.4, 0.6, 0.8}), func(v any) []float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []float64{}
				}
				out := make([]float64, len(arr))
				for i, x := range arr {
					out[i] = x.(float64)
				}
				return out
			}
			return v.([]float64)
		}([]float64{0.0, 0.0214, 0.0214, 0.22211, 0.42536}), 0.2, 1.0)
		fmt.Println(fmt.Sprint(_index(y5, (len(y5) - 1))))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
