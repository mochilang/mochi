//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-16 12:54:45 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func abs_float(x float64) float64 {
	if x < 0.0 {
		return (0 - x)
	} else {
		return x
	}
}

func bisection(f func(float64) float64, a float64, b float64) float64 {
	var start float64 = a
	_ = start
	var end float64 = b
	_ = end
	if f(a) == 0.0 {
		return a
	}
	if f(b) == 0.0 {
		return b
	}
	if (f(a) * f(b)) > 0.0 {
		panic("could not find root in given interval.")
	}
	var mid float64 = (start + (float64((end - start)) / float64(2.0)))
	_ = mid
	for abs_float((start - mid)) > 1e-07 {
		var fmid float64 = f(mid)
		_ = fmid
		if fmid == 0.0 {
			return mid
		}
		if (fmid * f(start)) < 0.0 {
			end = mid
		} else {
			start = mid
		}
		mid = (start + (float64((end - start)) / float64(2.0)))
	}
	return mid
}

func f(x float64) float64 {
	return ((((x * x) * x) - (2.0 * x)) - 5.0)
}

func mochiMain() {
	fmt.Println(fmt.Sprint(bisection(f, 1.0, 1000.0)))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
