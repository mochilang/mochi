//go:build ignore

// Generated by Mochi v0.10.63 on 2025-08-12 08:26:28 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	s[idx] = v
}

func sqrt(x float64) float64 {
	var guess float64 = func() float64 {
		if x > 1.0 {
			return (float64(x) / float64(2.0))
		} else {
			return 1.0
		}
	}()
	_ = guess
	var i int = 0
	_ = i
	for i < 20 {
		guess = (0.5 * (guess + (float64(x) / float64(guess))))
		i = (i + 1)
	}
	return guess
}

func runge_kutta_gills(func_ func(float64, float64) float64, x_initial float64, y_initial float64, step_size float64, x_final float64) []float64 {
	if x_initial >= x_final {
		panic("The final value of x must be greater than initial value of x.")
	}
	if step_size <= 0.0 {
		panic("Step size must be positive.")
	}
	var n int = int((float64((x_final - x_initial)) / float64(step_size)))
	_ = n
	var y []float64 = []float64{}
	_ = y
	var i int = 0
	_ = i
	for i <= n {
		y = append(y, 0.0)
		i = (i + 1)
	}
	_setIndex(y, 0, y_initial)
	var xi float64 = x_initial
	_ = xi
	var idx int = 0
	_ = idx
	var root2 float64 = sqrt(2.0)
	_ = root2
	for idx < n {
		var k1 float64 = (step_size * func_(xi, _index(y, idx)))
		_ = k1
		var k2 float64 = (step_size * func_((xi+(float64(step_size)/float64(2.0))), (_index(y, idx)+(float64(k1)/float64(2.0)))))
		_ = k2
		var k3 float64 = (step_size * func_((xi+(float64(step_size)/float64(2.0))), ((_index(y, idx)+(((0-0.5)+(float64(1.0)/float64(root2)))*k1))+((1.0-(float64(1.0)/float64(root2)))*k2))))
		_ = k3
		var k4 float64 = (step_size * func_((xi+step_size), ((_index(y, idx)-((float64(1.0)/float64(root2))*k2))+((1.0+(float64(1.0)/float64(root2)))*k3))))
		_ = k4
		_setIndex(y, (idx + 1), (_index(y, idx) + (float64((((k1 + ((2.0 - root2) * k2)) + ((2.0 + root2) * k3)) + k4)) / float64(6.0))))
		xi = (xi + step_size)
		idx = (idx + 1)
	}
	return y
}

func f1(x float64, y float64) float64 {
	return (float64((x - y)) / float64(2.0))
}

var y1 []float64

func f2(x float64, y float64) float64 {
	return x
}

var y2 []float64

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		y1 = runge_kutta_gills(f1, 0.0, 3.0, 0.2, 5.0)
		fmt.Println(fmt.Sprint(_index(y1, (len(y1) - 1))))
		y2 = runge_kutta_gills(f2, (0 - 1.0), 0.0, 0.2, 0.0)
		fmt.Println(fmt.Sprint(y2))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
