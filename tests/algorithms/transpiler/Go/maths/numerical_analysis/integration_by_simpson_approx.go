//go:build ignore

// Generated by Mochi v0.10.63 on 2025-08-12 08:26:13 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _mod(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

var N_STEPS int

func floor(x float64) float64 {
	var i int = int(x)
	_ = i
	if float64(i) > x {
		i = (i - 1)
	}
	return float64(i)
}

func pow10(n int) float64 {
	var p float64 = 1.0
	_ = p
	var i int = 0
	_ = i
	for i < n {
		p = (p * 10.0)
		i = (i + 1)
	}
	return p
}

func round(x float64, n int) float64 {
	var m float64 = pow10(n)
	_ = m
	_ = m
	return (float64(floor(((x * m) + 0.5))) / float64(m))
}

func simpson_integration(f func(float64) float64, a float64, b float64, precision int) float64 {
	if precision <= 0 {
		panic("precision should be positive")
	}
	var h float64 = (float64((b - a)) / float64(N_STEPS))
	_ = h
	var result float64 = (f(a) + f(b))
	_ = result
	var i int = 1
	_ = i
	for i < N_STEPS {
		var x float64 = (a + (h * float64(i)))
		_ = x
		if _mod(i, 2) == 1 {
			result = (result + (4.0 * f(x)))
		} else {
			result = (result + (2.0 * f(x)))
		}
		i = (i + 1)
	}
	result = (result * (float64(h) / float64(3.0)))
	var r float64 = round(result, precision)
	_ = r
	_ = r
	return r
}

func square(x float64) float64 {
	return (x * x)
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		N_STEPS = 1000
		fmt.Println(fmt.Sprint(simpson_integration(square, 1.0, 2.0, 3)))
		fmt.Println(fmt.Sprint(simpson_integration(square, 3.45, 3.2, 1)))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
