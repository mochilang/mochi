//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-16 12:55:12 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func exp_approx(x float64) float64 {
	var sum float64 = 1.0
	_ = sum
	var term float64 = 1.0
	_ = term
	var i int = 1
	_ = i
	for i <= 20 {
		term = (float64((term * x)) / float64(i))
		sum = (sum + term)
		i = (i + 1)
	}
	return sum
}

func f(x float64) float64 {
	return ((8.0 * x) - (2.0 * exp_approx((0 - x))))
}

func secant_method(lower_bound float64, upper_bound float64, repeats int) float64 {
	var x0 float64 = lower_bound
	_ = x0
	var x1 float64 = upper_bound
	_ = x1
	var i int = 0
	_ = i
	for i < repeats {
		var fx1 float64 = f(x1)
		_ = fx1
		var fx0 float64 = f(x0)
		_ = fx0
		var new_x float64 = (x1 - (float64((fx1 * (x1 - x0))) / float64((fx1 - fx0))))
		_ = new_x
		x0 = x1
		x1 = new_x
		i = (i + 1)
	}
	return x1
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(fmt.Sprint(secant_method(1.0, 3.0, 2)))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
