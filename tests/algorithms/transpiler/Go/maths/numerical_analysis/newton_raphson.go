//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-16 12:54:59 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

type NRResult struct {
	Root  float64   `json:"root"`
	Error float64   `json:"error"`
	Steps []float64 `json:"steps"`
}

func abs_float(x float64) float64 {
	if x < 0.0 {
		return (0 - x)
	} else {
		return x
	}
}

func fail(msg string) {
	fmt.Println(("error: " + msg))
}

func calc_derivative(f func(float64) float64, x float64, delta_x float64) float64 {
	return (float64((f((x + (float64(delta_x) / float64(2.0)))) - f((x - (float64(delta_x) / float64(2.0)))))) / float64(delta_x))
}

func newton_raphson(f func(float64) float64, x0 float64, max_iter int, step float64, max_error float64, log_steps bool) NRResult {
	var a float64 = x0
	_ = a
	var steps []float64 = []float64{}
	_ = steps
	var i int = 0
	_ = i
	for i < max_iter {
		if log_steps {
			steps = append(steps, a)
		}
		var err float64 = abs_float(f(a))
		_ = err
		if err < max_error {
			return NRResult{
				Root:  a,
				Error: err,
				Steps: steps,
			}
		}
		var der float64 = calc_derivative(f, a, step)
		_ = der
		if der == 0.0 {
			fail("No converging solution found, zero derivative")
			return NRResult{
				Root:  a,
				Error: err,
				Steps: steps,
			}
		}
		a = (a - (float64(f(a)) / float64(der)))
		i = (i + 1)
	}
	fail("No converging solution found, iteration limit reached")
	return NRResult{
		Root:  a,
		Error: abs_float(f(a)),
		Steps: steps,
	}
}

func poly(x float64) float64 {
	return (((x * x) - (5.0 * x)) + 2.0)
}

var result NRResult

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		result = newton_raphson(poly, 0.4, 20, 1e-06, 1e-06, false)
		fmt.Println(((("root = " + fmt.Sprint(result.Root)) + ", error = ") + fmt.Sprint(result.Error)))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
