//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-16 12:54:47 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	math "math"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func equation(x float64) float64 {
	return (10.0 - (x * x))
}

func bisection(a float64, b float64) float64 {
	if (equation(a) * equation(b)) >= 0.0 {
		panic("Wrong space!")
	}
	var left float64 = a
	_ = left
	var right float64 = b
	_ = right
	var c float64 = left
	_ = c
	for (right - left) >= 0.01 {
		c = (float64((left + right)) / float64(2.0))
		if equation(c) == 0.0 {
			break
		}
		if (equation(c) * equation(left)) < 0.0 {
			right = c
		} else {
			left = c
		}
	}
	return c
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(func() string {
			f := float64(bisection((0 - 2.0), 5.0))
			if f == 0 && math.Signbit(f) {
				return "-0"
			}
			if math.Abs(f-float64(int(f))) < 1e-9 {
				return fmt.Sprintf("%.1f", f)
			}
			return fmt.Sprint(f)
		}())
		fmt.Println(func() string {
			f := float64(bisection(0.0, 6.0))
			if f == 0 && math.Signbit(f) {
				return "-0"
			}
			if math.Abs(f-float64(int(f))) < 1e-9 {
				return fmt.Sprintf("%.1f", f)
			}
			return fmt.Sprint(f)
		}())
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
