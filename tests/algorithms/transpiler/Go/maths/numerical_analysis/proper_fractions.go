//go:build ignore

// Generated by Mochi v0.10.63 on 2025-08-12 08:26:23 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"reflect"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _mod(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func gcd(a int, b int) int {
	var x int = a
	_ = x
	var y int = b
	_ = y
	for y != 0 {
		var t int = _mod(x, y)
		_ = t
		x = y
		y = t
	}
	if x < 0 {
		return (0 - x)
	}
	return x
}

func proper_fractions(den int) []string {
	if den < 0 {
		panic("The Denominator Cannot be less than 0")
	}
	var res []string = []string{}
	_ = res
	var n int = 1
	_ = n
	for n < den {
		if gcd(n, den) == 1 {
			res = append(res, ((fmt.Sprint(n) + "/") + fmt.Sprint(den)))
		}
		n = (n + 1)
	}
	return res
}

func test_proper_fractions() {
	var a []string = proper_fractions(10)
	_ = a
	if !reflect.DeepEqual(a, []string{"1/10", "3/10", "7/10", "9/10"}) {
		panic("test 10 failed")
	}
	var b []string = proper_fractions(5)
	_ = b
	if !reflect.DeepEqual(b, []string{"1/5", "2/5", "3/5", "4/5"}) {
		panic("test 5 failed")
	}
	var c []string = proper_fractions(0)
	_ = c
	if !reflect.DeepEqual(c, []string{}) {
		panic("test 0 failed")
	}
}

func mochiMain() {
	test_proper_fractions()
	fmt.Println(fmt.Sprint(proper_fractions(10)))
	fmt.Println(fmt.Sprint(proper_fractions(5)))
	fmt.Println(fmt.Sprint(proper_fractions(0)))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
