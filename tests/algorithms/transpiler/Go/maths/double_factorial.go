//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-16 14:58:25 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func double_factorial_recursive(n int) int {
	if n < 0 {
		panic("double_factorial_recursive() not defined for negative values")
	}
	if n <= 1 {
		return 1
	}
	return (n * double_factorial_recursive((n - 2)))
}

func double_factorial_iterative(n int) int {
	if n < 0 {
		panic("double_factorial_iterative() not defined for negative values")
	}
	var result int = 1
	_ = result
	var i int = n
	_ = i
	for i > 0 {
		result = (result * i)
		i = (i - 2)
	}
	return result
}

func test_double_factorial() {
	if double_factorial_recursive(0) != 1 {
		panic("0!! recursive failed")
	}
	if double_factorial_iterative(0) != 1 {
		panic("0!! iterative failed")
	}
	if double_factorial_recursive(1) != 1 {
		panic("1!! recursive failed")
	}
	if double_factorial_iterative(1) != 1 {
		panic("1!! iterative failed")
	}
	if double_factorial_recursive(5) != 15 {
		panic("5!! recursive failed")
	}
	if double_factorial_iterative(5) != 15 {
		panic("5!! iterative failed")
	}
	if double_factorial_recursive(6) != 48 {
		panic("6!! recursive failed")
	}
	if double_factorial_iterative(6) != 48 {
		panic("6!! iterative failed")
	}
	var n int = 0
	_ = n
	for n <= 10 {
		if double_factorial_recursive(n) != double_factorial_iterative(n) {
			panic("double factorial mismatch")
		}
		n = (n + 1)
	}
}

func mochiMain() {
	test_double_factorial()
	fmt.Println(double_factorial_iterative(10))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
