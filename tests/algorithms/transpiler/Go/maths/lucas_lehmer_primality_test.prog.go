//go:build ignore

// Generated by Mochi v0.10.63 on 2025-08-12 08:01:46 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _mod(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func pow2(p int) int {
	var result int = 1
	_ = result
	var i int = 0
	_ = i
	for i < p {
		result = (result * 2)
		i = (i + 1)
	}
	return result
}

func lucas_lehmer_test(p int) bool {
	if p < 2 {
		panic("p should not be less than 2!")
	}
	if p == 2 {
		return true
	}
	var s int = 4
	_ = s
	var m int = (pow2(p) - 1)
	_ = m
	var i int = 0
	_ = i
	for i < (p - 2) {
		s = _mod(((s * s) - 2), m)
		i = (i + 1)
	}
	return (s == 0)
}

func mochiMain() {
	fmt.Println(fmt.Sprint(lucas_lehmer_test(7)))
	fmt.Println(fmt.Sprint(lucas_lehmer_test(11)))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
