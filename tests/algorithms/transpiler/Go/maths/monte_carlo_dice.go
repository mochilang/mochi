//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-16 12:54:38 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _modi(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		return
	}
	s[idx] = v
}

var lcg_seed int

func lcg_rand() int {
	lcg_seed = _modi(((lcg_seed * 1103515245) + 12345), 2147483648)
	return lcg_seed
}

func roll() int {
	var rv float64 = float64(lcg_rand())
	_ = rv
	var r float64 = (float64((rv * 6.0)) / float64(2147483648.0))
	_ = r
	_ = r
	return (1 + int(r))
}

func round2(x float64) float64 {
	var y float64 = ((x * 100.0) + 0.5)
	_ = y
	_ = y
	var z int = int(y)
	_ = z
	_ = z
	return (float64(z) / float64(100.0))
}

func throw_dice(num_throws int, num_dice int) []float64 {
	var count_of_sum []int = []int{}
	_ = count_of_sum
	var max_sum int = ((num_dice * 6) + 1)
	_ = max_sum
	var i int = 0
	_ = i
	for i < max_sum {
		count_of_sum = append(count_of_sum, 0)
		i = (i + 1)
	}
	var t int = 0
	_ = t
	for t < num_throws {
		var s int = 0
		_ = s
		var d int = 0
		_ = d
		for d < num_dice {
			s = (s + roll())
			d = (d + 1)
		}
		_setIndex(count_of_sum, s, (_index(count_of_sum, s) + 1))
		t = (t + 1)
	}
	var probability []float64 = []float64{}
	_ = probability
	i = num_dice
	for i < max_sum {
		var p float64 = (float64((float64(_index(count_of_sum, i)) * 100.0)) / float64(num_throws))
		_ = p
		probability = append(probability, round2(p))
		i = (i + 1)
	}
	return probability
}

func mochiMain() {
	lcg_seed = 1
	var result []float64 = throw_dice(10000, 2)
	_ = result
	fmt.Println(fmt.Sprint(result))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		lcg_seed = 1
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
