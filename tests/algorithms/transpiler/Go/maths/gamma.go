//go:build ignore

// Generated by Mochi v0.10.63 on 2025-08-12 07:57:59 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	math "math"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

var PI float64

func absf(x float64) float64 {
	if x < 0.0 {
		return (0 - x)
	}
	return x
}

func sqrt(x float64) float64 {
	if x < 0.0 {
		panic("sqrt domain error")
	}
	var guess float64 = (float64(x) / float64(2.0))
	_ = guess
	var i int = 0
	_ = i
	for i < 20 {
		guess = (float64((guess + (float64(x) / float64(guess)))) / float64(2.0))
		i = (i + 1)
	}
	return guess
}

func ln(x float64) float64 {
	if x <= 0.0 {
		panic("ln domain error")
	}
	var y float64 = (float64((x - 1.0)) / float64((x + 1.0)))
	_ = y
	var y2 float64 = (y * y)
	_ = y2
	var term float64 = y
	_ = term
	var sum float64 = 0.0
	_ = sum
	var k int = 0
	_ = k
	for k < 10 {
		var denom float64 = float64(((2 * k) + 1))
		_ = denom
		sum = (sum + (float64(term) / float64(denom)))
		term = (term * y2)
		k = (k + 1)
	}
	return (2.0 * sum)
}

func exp_series(x float64) float64 {
	var term float64 = 1.0
	_ = term
	var sum float64 = 1.0
	_ = sum
	var n int = 1
	_ = n
	for n < 20 {
		term = (float64((term * x)) / float64(n))
		sum = (sum + term)
		n = (n + 1)
	}
	return sum
}

func powf(base float64, exponent float64) float64 {
	if base <= 0.0 {
		return 0.0
	}
	return exp_series((exponent * ln(base)))
}

func integrand(x float64, z float64) float64 {
	return (powf(x, (z-1.0)) * exp_series((0 - x)))
}

func gamma_iterative(num float64) float64 {
	if num <= 0.0 {
		panic("math domain error")
	}
	var step float64 = 0.001
	_ = step
	var limit float64 = 100.0
	_ = limit
	var x float64 = step
	_ = x
	var total float64 = 0.0
	_ = total
	for x < limit {
		total = (total + (integrand(x, num) * step))
		x = (x + step)
	}
	return total
}

func gamma_recursive(num float64) float64 {
	if num <= 0.0 {
		panic("math domain error")
	}
	if num > 171.5 {
		panic("math range error")
	}
	var int_part int = int(num)
	_ = int_part
	var frac float64 = (num - float64(int_part))
	_ = frac
	if !((absf(frac) < 1e-06) || (absf((frac - 0.5)) < 1e-06)) {
		panic("num must be an integer or a half-integer")
	}
	if absf((num - 0.5)) < 1e-06 {
		return sqrt(PI)
	}
	if absf((num - 1.0)) < 1e-06 {
		return 1.0
	}
	return ((num - 1.0) * gamma_recursive((num - 1.0)))
}

func mochiMain() {
	fmt.Println(func() string {
		f := float64(gamma_iterative(5.0))
		if f == 0 && math.Signbit(f) {
			return "-0"
		}
		if f == float64(int(f)) {
			return fmt.Sprintf("%.1f", f)
		}
		return fmt.Sprint(f)
	}())
	fmt.Println(func() string {
		f := float64(gamma_recursive(5.0))
		if f == 0 && math.Signbit(f) {
			return "-0"
		}
		if f == float64(int(f)) {
			return fmt.Sprintf("%.1f", f)
		}
		return fmt.Sprint(f)
	}())
	fmt.Println(func() string {
		f := float64(gamma_recursive(0.5))
		if f == 0 && math.Signbit(f) {
			return "-0"
		}
		if f == float64(int(f)) {
			return fmt.Sprintf("%.1f", f)
		}
		return fmt.Sprint(f)
	}())
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		PI = 3.141592653589793
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
