//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-16 13:04:40 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		return
	}
	s[idx] = v
}

func sock_merchant(colors []int) int {
	var arr []int = []int{}
	_ = arr
	var i int = 0
	_ = i
	for i < len(colors) {
		arr = append(arr, _index(colors, i))
		i = (i + 1)
	}
	var n int = len(arr)
	_ = n
	var a int = 0
	_ = a
	for a < n {
		var min_idx int = a
		_ = min_idx
		var b int = (a + 1)
		_ = b
		for b < n {
			if _index(arr, b) < _index(arr, min_idx) {
				min_idx = b
			}
			b = (b + 1)
		}
		var temp int = _index(arr, a)
		_ = temp
		_setIndex(arr, a, _index(arr, min_idx))
		_setIndex(arr, min_idx, temp)
		a = (a + 1)
	}
	var pairs int = 0
	_ = pairs
	i = 0
	for i < n {
		var count int = 1
		_ = count
		for ((i + 1) < n) && (_index(arr, i) == _index(arr, (i+1))) {
			count = (count + 1)
			i = (i + 1)
		}
		pairs = (pairs + (count / 2))
		i = (i + 1)
	}
	return pairs
}

func test_sock_merchant() {
	var example1 []int = []int{10, 20, 20, 10, 10, 30, 50, 10, 20}
	_ = example1
	if sock_merchant(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(example1)) != 3 {
		panic("example1 failed")
	}
	var example2 []int = []int{1, 1, 3, 3}
	_ = example2
	if sock_merchant(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(example2)) != 2 {
		panic("example2 failed")
	}
}

func mochiMain() {
	test_sock_merchant()
	var example1 []int = []int{10, 20, 20, 10, 10, 30, 50, 10, 20}
	_ = example1
	fmt.Println(fmt.Sprint(sock_merchant(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(example1))))
	var example2 []int = []int{1, 1, 3, 3}
	_ = example2
	fmt.Println(fmt.Sprint(sock_merchant(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(example2))))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
