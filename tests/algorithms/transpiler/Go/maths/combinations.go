//go:build ignore

// Generated by Mochi v0.10.63 on 2025-08-12 08:22:03 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func combinations(n int, k int) int {
	if (k < 0) || (n < k) {
		panic("Please enter positive integers for n and k where n >= k")
	}
	var res int = 1
	_ = res
	var i int = 0
	_ = i
	for i < k {
		res = (res * (n - i))
		res = (res / (i + 1))
		i = (i + 1)
	}
	return res
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(("The number of five-card hands possible from a standard fifty-two card deck is: " + fmt.Sprint(combinations(52, 5))))
		fmt.Println("")
		fmt.Println((("If a class of 40 students must be arranged into groups of 4 for group projects, there are " + fmt.Sprint(combinations(40, 4))) + " ways to arrange them."))
		fmt.Println("")
		fmt.Println((("If 10 teams are competing in a Formula One race, there are " + fmt.Sprint(combinations(10, 3))) + " ways that first, second and third place can be awarded."))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
