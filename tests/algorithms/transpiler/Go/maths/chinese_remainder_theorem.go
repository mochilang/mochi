//go:build ignore

// Generated by Mochi v0.10.67 on 2025-08-16 19:52:17 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _modi(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

type EuclidResult struct {
	X int `json:"x"`
	Y int `json:"y"`
}

func extended_euclid(a int, b int) EuclidResult {
	if b == 0 {
		return EuclidResult{
			X: 1,
			Y: 0,
		}
	}
	var res EuclidResult = extended_euclid(b, _modi(a, b))
	_ = res
	_ = res
	var k int = (a / b)
	_ = k
	_ = k
	return EuclidResult{
		X: res.Y,
		Y: (res.X - (k * res.Y)),
	}
}

func chinese_remainder_theorem(n1 int, r1 int, n2 int, r2 int) int {
	var res EuclidResult = extended_euclid(n1, n2)
	_ = res
	var x int = res.X
	_ = x
	var y int = res.Y
	_ = y
	var m int = (n1 * n2)
	_ = m
	_ = m
	var n int = (((r2 * x) * n1) + ((r1 * y) * n2))
	_ = n
	_ = n
	return _modi((_modi(n, m) + m), m)
}

func invert_modulo(a int, n int) int {
	var res EuclidResult = extended_euclid(a, n)
	_ = res
	var b int = res.X
	_ = b
	if b < 0 {
		b = _modi((_modi(b, n) + n), n)
	}
	return b
}

func chinese_remainder_theorem2(n1 int, r1 int, n2 int, r2 int) int {
	var x int = invert_modulo(n1, n2)
	_ = x
	var y int = invert_modulo(n2, n1)
	_ = y
	var m int = (n1 * n2)
	_ = m
	_ = m
	var n int = (((r2 * x) * n1) + ((r1 * y) * n2))
	_ = n
	_ = n
	return _modi((_modi(n, m) + m), m)
}

var e1 EuclidResult

var e2 EuclidResult

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		e1 = extended_euclid(10, 6)
		fmt.Println(((fmt.Sprint(e1.X) + ",") + fmt.Sprint(e1.Y)))
		e2 = extended_euclid(7, 5)
		fmt.Println(((fmt.Sprint(e2.X) + ",") + fmt.Sprint(e2.Y)))
		fmt.Println(fmt.Sprint(chinese_remainder_theorem(5, 1, 7, 3)))
		fmt.Println(fmt.Sprint(chinese_remainder_theorem(6, 1, 4, 3)))
		fmt.Println(fmt.Sprint(invert_modulo(2, 5)))
		fmt.Println(fmt.Sprint(invert_modulo(8, 7)))
		fmt.Println(fmt.Sprint(chinese_remainder_theorem2(5, 1, 7, 3)))
		fmt.Println(fmt.Sprint(chinese_remainder_theorem2(6, 1, 4, 3)))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
