//go:build ignore

// Generated by Mochi v0.10.63 on 2025-08-12 08:22:07 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func floor(x float64) float64 {
	var i int = int(x)
	_ = i
	if float64(i) > x {
		i = (i - 1)
	}
	return float64(i)
}

func pow10(n int) float64 {
	var p float64 = 1.0
	_ = p
	var i int = 0
	_ = i
	for i < n {
		p = (p * 10.0)
		i = (i + 1)
	}
	return p
}

func round(x float64, n int) float64 {
	var m float64 = pow10(n)
	_ = m
	_ = m
	return (float64(floor(((x * m) + 0.5))) / float64(m))
}

func decimal_isolate(number float64, digit_amount int) float64 {
	var whole int = int(number)
	_ = whole
	var frac float64 = (number - float64(whole))
	_ = frac
	_ = frac
	if digit_amount > 0 {
		return round(frac, digit_amount)
	}
	return frac
}

func mochiMain() {
	fmt.Println(fmt.Sprint(decimal_isolate(1.53, 0)))
	fmt.Println(fmt.Sprint(decimal_isolate(35.345, 1)))
	fmt.Println(fmt.Sprint(decimal_isolate(35.345, 2)))
	fmt.Println(fmt.Sprint(decimal_isolate(35.345, 3)))
	fmt.Println(fmt.Sprint(decimal_isolate((0 - 14.789), 3)))
	fmt.Println(fmt.Sprint(decimal_isolate(0.0, 2)))
	fmt.Println(fmt.Sprint(decimal_isolate((0 - 14.123), 1)))
	fmt.Println(fmt.Sprint(decimal_isolate((0 - 14.123), 2)))
	fmt.Println(fmt.Sprint(decimal_isolate((0 - 14.123), 3)))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
