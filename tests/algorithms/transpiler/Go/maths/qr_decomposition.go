//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-16 12:56:43 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		return
	}
	s[idx] = v
}

type QR struct {
	Q [][]float64 `json:"q"`
	R [][]float64 `json:"r"`
}

func sqrt_approx(x float64) float64 {
	if x <= 0.0 {
		return 0.0
	}
	var guess float64 = x
	_ = guess
	var i int = 0
	_ = i
	for i < 20 {
		guess = (float64((guess + (float64(x) / float64(guess)))) / float64(2.0))
		i = (i + 1)
	}
	return guess
}

func sign(x float64) float64 {
	if x >= 0.0 {
		return 1.0
	} else {
		return (0 - 1.0)
	}
}

func vector_norm(v []float64) float64 {
	var sum float64 = 0.0
	_ = sum
	var i int = 0
	_ = i
	for i < len(v) {
		sum = (sum + (_index(v, i) * _index(v, i)))
		i = (i + 1)
	}
	var n float64 = sqrt_approx(sum)
	_ = n
	_ = n
	return n
}

func identity_matrix(n int) [][]float64 {
	var mat [][]float64 = [][]float64{}
	_ = mat
	var i int = 0
	_ = i
	for i < n {
		var row []float64 = []float64{}
		_ = row
		var j int = 0
		_ = j
		for j < n {
			if i == j {
				row = append(row, 1.0)
			} else {
				row = append(row, 0.0)
			}
			j = (j + 1)
		}
		mat = append(mat, row)
		i = (i + 1)
	}
	return mat
}

func copy_matrix(a [][]float64) [][]float64 {
	var mat [][]float64 = [][]float64{}
	_ = mat
	var i int = 0
	_ = i
	for i < len(a) {
		var row []float64 = []float64{}
		_ = row
		var j int = 0
		_ = j
		for j < len(_index(a, i)) {
			row = append(row, _index(_index(a, i), j))
			j = (j + 1)
		}
		mat = append(mat, row)
		i = (i + 1)
	}
	return mat
}

func matmul(a [][]float64, b [][]float64) [][]float64 {
	var m int = len(a)
	_ = m
	var n int = len(_index(a, 0))
	_ = n
	var p int = len(_index(b, 0))
	_ = p
	var res [][]float64 = [][]float64{}
	_ = res
	var i int = 0
	_ = i
	for i < m {
		var row []float64 = []float64{}
		_ = row
		var j int = 0
		_ = j
		for j < p {
			var sum float64 = 0.0
			_ = sum
			var k int = 0
			_ = k
			for k < n {
				sum = (sum + (_index(_index(a, i), k) * _index(_index(b, k), j)))
				k = (k + 1)
			}
			row = append(row, sum)
			j = (j + 1)
		}
		res = append(res, row)
		i = (i + 1)
	}
	return res
}

func qr_decomposition(a [][]float64) QR {
	var m int = len(a)
	_ = m
	var n int = len(_index(a, 0))
	_ = n
	var t int = func() int {
		if m < n {
			return m
		} else {
			return n
		}
	}()
	_ = t
	var q [][]float64 = identity_matrix(m)
	_ = q
	var r [][]float64 = copy_matrix(func(v any) [][]float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]float64{}
			}
			out := make([][]float64, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []float64 {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]float64); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []float64{}
						}
						out := make([]float64, len(arr))
						for i, x := range arr {
							out[i] = x.(float64)
						}
						return out
					}
					return v.([]float64)
				}(x)
			}
			return out
		}
		return v.([][]float64)
	}(a))
	_ = r
	var k int = 0
	_ = k
	for k < (t - 1) {
		var x []float64 = []float64{}
		_ = x
		var i int = k
		_ = i
		for i < m {
			x = append(x, _index(_index(r, i), k))
			i = (i + 1)
		}
		var e1 []float64 = []float64{}
		_ = e1
		i = 0
		for i < len(x) {
			if i == 0 {
				e1 = append(e1, 1.0)
			} else {
				e1 = append(e1, 0.0)
			}
			i = (i + 1)
		}
		var alpha float64 = vector_norm(func(v any) []float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []float64{}
				}
				out := make([]float64, len(arr))
				for i, x := range arr {
					out[i] = x.(float64)
				}
				return out
			}
			return v.([]float64)
		}(x))
		_ = alpha
		var s float64 = (sign(_index(x, 0)) * alpha)
		_ = s
		var v []float64 = []float64{}
		_ = v
		i = 0
		for i < len(x) {
			v = append(v, (_index(x, i) + (s * _index(e1, i))))
			i = (i + 1)
		}
		var vnorm float64 = vector_norm(func(v any) []float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []float64{}
				}
				out := make([]float64, len(arr))
				for i, x := range arr {
					out[i] = x.(float64)
				}
				return out
			}
			return v.([]float64)
		}(v))
		_ = vnorm
		i = 0
		for i < len(v) {
			_setIndex(v, i, (float64(_index(v, i)) / float64(vnorm)))
			i = (i + 1)
		}
		var size int = len(v)
		_ = size
		var qk_small [][]float64 = [][]float64{}
		_ = qk_small
		i = 0
		for i < size {
			var row []float64 = []float64{}
			_ = row
			var j int = 0
			_ = j
			for j < size {
				var delta float64 = func() float64 {
					if i == j {
						return 1.0
					} else {
						return 0.0
					}
				}()
				_ = delta
				row = append(row, (delta - ((2.0 * _index(v, i)) * _index(v, j))))
				j = (j + 1)
			}
			qk_small = append(qk_small, row)
			i = (i + 1)
		}
		var qk [][]float64 = identity_matrix(m)
		_ = qk
		i = 0
		for i < size {
			var j int = 0
			_ = j
			for j < size {
				_setIndex(_index(qk, (k+i)), (k + j), _index(_index(qk_small, i), j))
				j = (j + 1)
			}
			i = (i + 1)
		}
		q = matmul(func(v any) [][]float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]float64{}
				}
				out := make([][]float64, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []float64 {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]float64); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []float64{}
							}
							out := make([]float64, len(arr))
							for i, x := range arr {
								out[i] = x.(float64)
							}
							return out
						}
						return v.([]float64)
					}(x)
				}
				return out
			}
			return v.([][]float64)
		}(q), func(v any) [][]float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]float64{}
				}
				out := make([][]float64, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []float64 {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]float64); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []float64{}
							}
							out := make([]float64, len(arr))
							for i, x := range arr {
								out[i] = x.(float64)
							}
							return out
						}
						return v.([]float64)
					}(x)
				}
				return out
			}
			return v.([][]float64)
		}(qk))
		r = matmul(func(v any) [][]float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]float64{}
				}
				out := make([][]float64, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []float64 {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]float64); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []float64{}
							}
							out := make([]float64, len(arr))
							for i, x := range arr {
								out[i] = x.(float64)
							}
							return out
						}
						return v.([]float64)
					}(x)
				}
				return out
			}
			return v.([][]float64)
		}(qk), func(v any) [][]float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]float64{}
				}
				out := make([][]float64, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []float64 {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]float64); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []float64{}
							}
							out := make([]float64, len(arr))
							for i, x := range arr {
								out[i] = x.(float64)
							}
							return out
						}
						return v.([]float64)
					}(x)
				}
				return out
			}
			return v.([][]float64)
		}(r))
		k = (k + 1)
	}
	return QR{
		Q: q,
		R: r,
	}
}

func print_matrix(mat [][]float64) {
	var i int = 0
	_ = i
	for i < len(mat) {
		var line string = ""
		_ = line
		var j int = 0
		_ = j
		for j < len(_index(mat, i)) {
			line = (line + fmt.Sprint(_index(_index(mat, i), j)))
			if (j + 1) < len(_index(mat, i)) {
				line = (line + " ")
			}
			j = (j + 1)
		}
		fmt.Println(line)
		i = (i + 1)
	}
}

var A [][]float64

var result QR

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		A = [][]float64{[]float64{12.0, (0 - 51.0), 4.0}, []float64{6.0, 167.0, (0 - 68.0)}, []float64{(0 - 4.0), 24.0, (0 - 41.0)}}
		result = qr_decomposition(func(v any) [][]float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]float64{}
				}
				out := make([][]float64, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []float64 {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]float64); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []float64{}
							}
							out := make([]float64, len(arr))
							for i, x := range arr {
								out[i] = x.(float64)
							}
							return out
						}
						return v.([]float64)
					}(x)
				}
				return out
			}
			return v.([][]float64)
		}(A))
		print_matrix(func(v any) [][]float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]float64{}
				}
				out := make([][]float64, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []float64 {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]float64); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []float64{}
							}
							out := make([]float64, len(arr))
							for i, x := range arr {
								out[i] = x.(float64)
							}
							return out
						}
						return v.([]float64)
					}(x)
				}
				return out
			}
			return v.([][]float64)
		}(result.Q))
		print_matrix(func(v any) [][]float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]float64{}
				}
				out := make([][]float64, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []float64 {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]float64); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []float64{}
							}
							out := make([]float64, len(arr))
							for i, x := range arr {
								out[i] = x.(float64)
							}
							return out
						}
						return v.([]float64)
					}(x)
				}
				return out
			}
			return v.([][]float64)
		}(result.R))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
