//go:build ignore

// Generated by Mochi v0.10.67 on 2025-08-17 12:40:12 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

func _modi(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func parse_decimal(s string) int {
	var value int = 0
	_ = value
	var i int = 0
	_ = i
	for i < len(s) {
		var c string = string(_index([]rune(s), i))
		_ = c
		if (c < "0") || (c > "9") {
			panic("invalid literal")
		}
		value = ((value * 10) + func() int { n, _ := strconv.Atoi(fmt.Sprint(c)); return n }())
		i = (i + 1)
	}
	return value
}

func zeller_day(date_input string) string {
	var days map[int]string = map[int]string{0: "Sunday", 1: "Monday", 2: "Tuesday", 3: "Wednesday", 4: "Thursday", 5: "Friday", 6: "Saturday"}
	_ = days
	_ = days
	if len(date_input) != 10 {
		panic("Must be 10 characters long")
	}
	var m int = parse_decimal(string([]rune(date_input)[0:2]))
	_ = m
	if (m <= 0) || (m >= 13) {
		panic("Month must be between 1 - 12")
	}
	var sep1 string = string(_index([]rune(date_input), 2))
	_ = sep1
	if (sep1 != "-") && (sep1 != "/") {
		panic("Date separator must be '-' or '/'")
	}
	var d int = parse_decimal(string([]rune(date_input)[3:5]))
	_ = d
	if (d <= 0) || (d >= 32) {
		panic("Date must be between 1 - 31")
	}
	var sep2 string = string(_index([]rune(date_input), 5))
	_ = sep2
	if (sep2 != "-") && (sep2 != "/") {
		panic("Date separator must be '-' or '/'")
	}
	var y int = parse_decimal(string([]rune(date_input)[6:10]))
	_ = y
	if (y <= 45) || (y >= 8500) {
		panic("Year out of range. There has to be some sort of limit...right?")
	}
	var year int = y
	_ = year
	var month int = m
	_ = month
	if month <= 2 {
		year = (year - 1)
		month = (month + 12)
	}
	var c int = (year / 100)
	_ = c
	var k int = _modi(year, 100)
	_ = k
	var t int = int(((2.6 * float64(month)) - 5.39))
	_ = t
	var u int = (c / 4)
	_ = u
	var v int = (k / 4)
	_ = v
	var x int = (d + k)
	_ = x
	var z int = (((t + u) + v) + x)
	_ = z
	var w int = (z - (2 * c))
	_ = w
	var f int = _modi(w, 7)
	_ = f
	if f < 0 {
		f = (f + 7)
	}
	return days[f]
}

func zeller(date_input string) string {
	var day string = zeller_day(date_input)
	_ = day
	_ = day
	return (((("Your date " + date_input) + ", is a ") + day) + "!")
}

func test_zeller() {
	var inputs []string = []string{"01-31-2010", "02-01-2010", "11-26-2024", "07-04-1776"}
	_ = inputs
	var expected []string = []string{"Sunday", "Monday", "Tuesday", "Thursday"}
	_ = expected
	var i int = 0
	_ = i
	for i < len(inputs) {
		var res string = zeller_day(_index(inputs, i))
		_ = res
		if res != _index(expected, i) {
			panic("zeller test failed")
		}
		i = (i + 1)
	}
}

func mochiMain() {
	test_zeller()
	fmt.Println(zeller("01-31-2010"))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
