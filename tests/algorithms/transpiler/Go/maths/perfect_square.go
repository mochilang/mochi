//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-16 12:55:25 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func perfect_square(num int) bool {
	if num < 0 {
		return false
	}
	var i int = 0
	_ = i
	for (i * i) <= num {
		if (i * i) == num {
			return true
		}
		i = (i + 1)
	}
	return false
}

func perfect_square_binary_search(n int) bool {
	if n < 0 {
		return false
	}
	var left int = 0
	_ = left
	var right int = n
	_ = right
	for left <= right {
		var mid int = ((left + right) / 2)
		_ = mid
		var sq int = (mid * mid)
		_ = sq
		if sq == n {
			return true
		}
		if sq > n {
			right = (mid - 1)
		} else {
			left = (mid + 1)
		}
	}
	return false
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(fmt.Sprint(perfect_square(9)))
		fmt.Println(fmt.Sprint(perfect_square(10)))
		fmt.Println(fmt.Sprint(perfect_square_binary_search(16)))
		fmt.Println(fmt.Sprint(perfect_square_binary_search(10)))
		fmt.Println(fmt.Sprint(perfect_square_binary_search((0 - 1))))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
