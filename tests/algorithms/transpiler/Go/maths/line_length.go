//go:build ignore

// Generated by Mochi v0.10.63 on 2025-08-12 08:25:44 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	math "math"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func sqrt_newton(n float64) float64 {
	if n == 0.0 {
		return 0.0
	}
	var x float64 = n
	_ = x
	var i int = 0
	_ = i
	for i < 20 {
		x = (float64((x + (float64(n) / float64(x)))) / float64(2.0))
		i = (i + 1)
	}
	return x
}

func hypot(a float64, b float64) float64 {
	return sqrt_newton(((a * a) + (b * b)))
}

func line_length(fnc func(float64) float64, x_start float64, x_end float64, steps int) float64 {
	var x1 float64 = x_start
	_ = x1
	var fx1 float64 = fnc(x_start)
	_ = fx1
	var length float64 = 0.0
	_ = length
	var i int = 0
	_ = i
	var step float64 = (float64((x_end - x_start)) / float64((1.0 * float64(steps))))
	_ = step
	for i < steps {
		var x2 float64 = (step + x1)
		_ = x2
		var fx2 float64 = fnc(x2)
		_ = fx2
		length = (length + hypot((x2-x1), (fx2-fx1)))
		x1 = x2
		fx1 = fx2
		i = (i + 1)
	}
	return length
}

func f1(x float64) float64 {
	return x
}

func f2(x float64) float64 {
	return 1.0
}

func f3(x float64) float64 {
	return (float64((x * x)) / float64(10.0))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(func() string {
			f := float64(line_length(f1, 0.0, 1.0, 10))
			if f == 0 && math.Signbit(f) {
				return "-0"
			}
			if f == float64(int(f)) {
				return fmt.Sprintf("%.1f", f)
			}
			return fmt.Sprint(f)
		}())
		fmt.Println(func() string {
			f := float64(line_length(f2, (0 - 5.5), 4.5, 100))
			if f == 0 && math.Signbit(f) {
				return "-0"
			}
			if f == float64(int(f)) {
				return fmt.Sprintf("%.1f", f)
			}
			return fmt.Sprint(f)
		}())
		fmt.Println(func() string {
			f := float64(line_length(f3, 0.0, 10.0, 1000))
			if f == 0 && math.Signbit(f) {
				return "-0"
			}
			if f == float64(int(f)) {
				return fmt.Sprintf("%.1f", f)
			}
			return fmt.Sprint(f)
		}())
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
