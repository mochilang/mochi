//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-16 12:54:34 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _modi(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func mod(a int, n int) int {
	var r int = _modi(a, n)
	_ = r
	if r < 0 {
		return (r + n)
	}
	return r
}

func greatest_common_divisor(a int, b int) int {
	var x int = func() int {
		if a < 0 {
			return (0 - a)
		} else {
			return a
		}
	}()
	_ = x
	var y int = func() int {
		if b < 0 {
			return (0 - b)
		} else {
			return b
		}
	}()
	_ = y
	for y != 0 {
		var t int = _modi(x, y)
		_ = t
		x = y
		y = t
	}
	return x
}

func extended_gcd(a int, b int) []int {
	if b == 0 {
		return []int{func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(a), 1, 0}
	}
	var res []int = extended_gcd(b, _modi(a, b))
	_ = res
	var d int = _index(res, 0)
	_ = d
	_ = d
	var p int = _index(res, 1)
	_ = p
	var q int = _index(res, 2)
	_ = q
	var x int = q
	_ = x
	_ = x
	var y int = (p - (q * (a / b)))
	_ = y
	_ = y
	return []int{func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(d), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(x), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(y)}
}

func extended_euclid(a int, b int) []int {
	if b == 0 {
		return []int{1, 0}
	}
	var res []int = extended_euclid(b, _modi(a, b))
	_ = res
	var x int = _index(res, 1)
	_ = x
	_ = x
	var y int = (_index(res, 0) - ((a / b) * _index(res, 1)))
	_ = y
	_ = y
	return []int{func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(x), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(y)}
}

func invert_modulo(a int, n int) int {
	var res []int = extended_euclid(a, n)
	_ = res
	var inv int = _index(res, 0)
	_ = inv
	_ = inv
	return mod(inv, n)
}

func modular_division(a int, b int, n int) int {
	if n <= 1 {
		panic("n must be > 1")
	}
	if a <= 0 {
		panic("a must be > 0")
	}
	if greatest_common_divisor(a, n) != 1 {
		panic("gcd(a,n) != 1")
	}
	var eg []int = extended_gcd(n, a)
	_ = eg
	var s int = _index(eg, 2)
	_ = s
	_ = s
	return mod((b * s), n)
}

func modular_division2(a int, b int, n int) int {
	var s int = invert_modulo(a, n)
	_ = s
	_ = s
	return mod((b * s), n)
}

func tests() {
	if modular_division(4, 8, 5) != 2 {
		panic("md1")
	}
	if modular_division(3, 8, 5) != 1 {
		panic("md2")
	}
	if modular_division(4, 11, 5) != 4 {
		panic("md3")
	}
	if modular_division2(4, 8, 5) != 2 {
		panic("md21")
	}
	if modular_division2(3, 8, 5) != 1 {
		panic("md22")
	}
	if modular_division2(4, 11, 5) != 4 {
		panic("md23")
	}
	if invert_modulo(2, 5) != 3 {
		panic("inv")
	}
	var eg []int = extended_gcd(10, 6)
	_ = eg
	if ((_index(eg, 0) != 2) || (_index(eg, 1) != (0 - 1))) || (_index(eg, 2) != 2) {
		panic("eg")
	}
	var eu []int = extended_euclid(10, 6)
	_ = eu
	if (_index(eu, 0) != (0 - 1)) || (_index(eu, 1) != 2) {
		panic("eu")
	}
	if greatest_common_divisor(121, 11) != 11 {
		panic("gcd")
	}
}

func mochiMain() {
	tests()
	fmt.Println(fmt.Sprint(modular_division(4, 8, 5)))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
