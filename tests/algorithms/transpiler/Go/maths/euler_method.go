//go:build ignore

// Generated by Mochi v0.10.63 on 2025-08-12 07:54:17 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	math "math"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	s[idx] = v
}

func _toFloat(v any) float64 {
	switch t := v.(type) {
	case int:
		return float64(t)
	case int64:
		return float64(t)
	case float64:
		return t
	default:
		return 0
	}
}

func ceil_int(x float64) int {
	var n int = int(x)
	_ = n
	if _toFloat(float64(n)) < x {
		n = (n + 1)
	}
	return n
}

func explicit_euler(ode_func func(float64, float64) float64, y0 float64, x0 float64, step_size float64, x_end float64) []float64 {
	var n int = ceil_int((float64((x_end - x0)) / float64(step_size)))
	_ = n
	var y []float64 = []float64{}
	_ = y
	var i int = 0
	_ = i
	for i <= n {
		y = append(y, 0.0)
		i = (i + 1)
	}
	_setIndex(y, 0, y0)
	var x float64 = x0
	_ = x
	var k int = 0
	_ = k
	for k < n {
		_setIndex(y, (k + 1), (_index(y, k) + (step_size * ode_func(x, _index(y, k)))))
		x = (x + step_size)
		k = (k + 1)
	}
	return y
}

func abs_float(a float64) float64 {
	if a < 0.0 {
		return (0 - a)
	}
	return a
}

func test_explicit_euler() {
	f := func(x float64, y float64) float64 {
		return y
	}
	_ = f
	var ys []float64 = explicit_euler(f, 1.0, 0.0, 0.01, 5.0)
	_ = ys
	var last float64 = _index(ys, (len(ys) - 1))
	_ = last
	if abs_float((last - 144.77277243257308)) > 0.001 {
		panic("explicit_euler failed")
	}
}

func mochiMain() {
	test_explicit_euler()
	f := func(x float64, y float64) float64 {
		return y
	}
	_ = f
	var ys []float64 = explicit_euler(f, 1.0, 0.0, 0.01, 5.0)
	_ = ys
	_ = ys
	fmt.Println(func() string {
		f := float64(_index(ys, (len(ys) - 1)))
		if f == 0 && math.Signbit(f) {
			return "-0"
		}
		if f == float64(int(f)) {
			return fmt.Sprintf("%.1f", f)
		}
		return fmt.Sprint(f)
	}())
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
