//go:build ignore

// Generated by Mochi v0.10.67 on 2025-08-16 19:51:47 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _modi(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func binary_multiply(a int, b int) int {
	var x int = a
	_ = x
	var y int = b
	_ = y
	var res int = 0
	_ = res
	for y > 0 {
		if _modi(y, 2) == 1 {
			res = (res + x)
		}
		x = (x + x)
		y = int((y / 2))
	}
	return res
}

func binary_mod_multiply(a int, b int, modulus int) int {
	var x int = a
	_ = x
	var y int = b
	_ = y
	var res int = 0
	_ = res
	for y > 0 {
		if _modi(y, 2) == 1 {
			res = _modi((_modi(res, modulus) + _modi(x, modulus)), modulus)
		}
		x = (x + x)
		y = int((y / 2))
	}
	return _modi(res, modulus)
}

func mochiMain() {
	fmt.Println(fmt.Sprint(binary_multiply(2, 3)))
	fmt.Println(fmt.Sprint(binary_multiply(5, 0)))
	fmt.Println(fmt.Sprint(binary_mod_multiply(2, 3, 5)))
	fmt.Println(fmt.Sprint(binary_mod_multiply(10, 5, 13)))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
