//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-16 14:58:11 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func sqrtApprox(x float64) float64 {
	if x <= 0.0 {
		return 0.0
	}
	var guess float64 = x
	_ = guess
	var i int = 0
	_ = i
	for i < 20 {
		guess = (float64((guess + (float64(x) / float64(guess)))) / float64(2.0))
		i = (i + 1)
	}
	return guess
}

func factorial_float(n int) float64 {
	var result float64 = 1.0
	_ = result
	var i int = 2
	_ = i
	for i <= n {
		result = (result * float64(i))
		i = (i + 1)
	}
	return result
}

func pi(n int) float64 {
	if n < 1 {
		panic("Undefined for non-natural numbers")
	}
	var iterations int = ((n + 13) / 14)
	_ = iterations
	var constant_term float64 = (426880.0 * sqrtApprox(10005.0))
	_ = constant_term
	_ = constant_term
	var exponential_term float64 = 1.0
	_ = exponential_term
	var linear_term float64 = 13591409.0
	_ = linear_term
	var partial_sum float64 = linear_term
	_ = partial_sum
	var k int = 1
	_ = k
	for k < iterations {
		var k6 int = (6 * k)
		_ = k6
		var k3 int = (3 * k)
		_ = k3
		var fact6k float64 = factorial_float(k6)
		_ = fact6k
		var fact3k float64 = factorial_float(k3)
		_ = fact3k
		var factk float64 = factorial_float(k)
		_ = factk
		var multinomial float64 = (float64(fact6k) / float64((((fact3k * factk) * factk) * factk)))
		_ = multinomial
		linear_term = (linear_term + 545140134.0)
		exponential_term = (exponential_term * (0 - 262537412640768000.0))
		partial_sum = (partial_sum + (float64((multinomial * linear_term)) / float64(exponential_term)))
		k = (k + 1)
	}
	return (float64(constant_term) / float64(partial_sum))
}

var n int

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		n = 50
		fmt.Println(((("The first " + fmt.Sprint(n)) + " digits of pi is: ") + fmt.Sprint(pi(n))))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
