//go:build ignore

// Generated by Mochi v0.10.63 on 2025-08-12 08:22:55 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"reflect"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _mod(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

func sqrt(x float64) float64 {
	if x <= 0.0 {
		return 0.0
	}
	var guess float64 = x
	_ = guess
	var i int = 0
	_ = i
	for i < 10 {
		guess = (float64((guess + (float64(x) / float64(guess)))) / float64(2.0))
		i = (i + 1)
	}
	return guess
}

func powf(x float64, n int) float64 {
	var res float64 = 1.0
	_ = res
	var i int = 0
	_ = i
	for i < n {
		res = (res * x)
		i = (i + 1)
	}
	return res
}

func roundf(x float64) int {
	if x >= 0.0 {
		return int((x + 0.5))
	}
	return int((x - 0.5))
}

func fib_iterative(n int) []int {
	if n < 0 {
		panic("n is negative")
	}
	if n == 0 {
		return []int{func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(0)}
	}
	var fib []int = []int{func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(0), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(1)}
	_ = fib
	var i int = 2
	_ = i
	for i <= n {
		fib = append(fib, (int(_index(fib, (i-1))) + int(_index(fib, (i-2)))))
		i = (i + 1)
	}
	return fib
}

func fib_recursive_term(i int) int {
	if i < 0 {
		panic("n is negative")
	}
	if i < 2 {
		return i
	}
	return (fib_recursive_term((i - 1)) + fib_recursive_term((i - 2)))
}

func fib_recursive(n int) []int {
	if n < 0 {
		panic("n is negative")
	}
	var res []int = []int{}
	_ = res
	var i int = 0
	_ = i
	for i <= n {
		res = append(res, fib_recursive_term(i))
		i = (i + 1)
	}
	return res
}

var fib_cache_global map[int]int

func fib_recursive_cached_term(i int) int {
	if i < 0 {
		panic("n is negative")
	}
	if i < 2 {
		return i
	}
	if func() bool { _, ok := fib_cache_global[i]; return ok }() {
		return fib_cache_global[i]
	}
	var val int = (fib_recursive_cached_term((i - 1)) + fib_recursive_cached_term((i - 2)))
	_ = val
	fib_cache_global[i] = val
	return val
}

func fib_recursive_cached(n int) []int {
	if n < 0 {
		panic("n is negative")
	}
	var res []int = []int{}
	_ = res
	var j int = 0
	_ = j
	for j <= n {
		res = append(res, fib_recursive_cached_term(j))
		j = (j + 1)
	}
	return res
}

var fib_memo_cache map[int]int

func fib_memoization_term(num int) int {
	if func() bool { _, ok := fib_memo_cache[num]; return ok }() {
		return fib_memo_cache[num]
	}
	var value int = (fib_memoization_term((num - 1)) + fib_memoization_term((num - 2)))
	_ = value
	fib_memo_cache[num] = value
	return value
}

func fib_memoization(n int) []int {
	if n < 0 {
		panic("n is negative")
	}
	var out []int = []int{}
	_ = out
	var i int = 0
	_ = i
	for i <= n {
		out = append(out, fib_memoization_term(i))
		i = (i + 1)
	}
	return out
}

func fib_binet(n int) []int {
	if n < 0 {
		panic("n is negative")
	}
	if n >= 1475 {
		panic("n is too large")
	}
	var sqrt5 float64 = sqrt(5.0)
	_ = sqrt5
	var phi float64 = (float64((1.0 + sqrt5)) / float64(2.0))
	_ = phi
	var res []int = []int{}
	_ = res
	var i int = 0
	_ = i
	for i <= n {
		var val int = roundf((float64(powf(phi, i)) / float64(sqrt5)))
		_ = val
		res = append(res, val)
		i = (i + 1)
	}
	return res
}

func matrix_mul(a [][]int, b [][]int) [][]int {
	var a00 int = ((int(_index(_index(a, 0), 0)) * int(_index(_index(b, 0), 0))) + (int(_index(_index(a, 0), 1)) * int(_index(_index(b, 1), 0))))
	_ = a00
	_ = a00
	var a01 int = ((int(_index(_index(a, 0), 0)) * int(_index(_index(b, 0), 1))) + (int(_index(_index(a, 0), 1)) * int(_index(_index(b, 1), 1))))
	_ = a01
	_ = a01
	var a10 int = ((int(_index(_index(a, 1), 0)) * int(_index(_index(b, 0), 0))) + (int(_index(_index(a, 1), 1)) * int(_index(_index(b, 1), 0))))
	_ = a10
	_ = a10
	var a11 int = ((int(_index(_index(a, 1), 0)) * int(_index(_index(b, 0), 1))) + (int(_index(_index(a, 1), 1)) * int(_index(_index(b, 1), 1))))
	_ = a11
	_ = a11
	return [][]int{[]int{func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(a00), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(a01)}, []int{func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(a10), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(a11)}}
}

func matrix_pow(m [][]int, power int) [][]int {
	if power < 0 {
		panic("power is negative")
	}
	var result [][]int = [][]int{[]int{func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(1), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(0)}, []int{func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(0), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(1)}}
	_ = result
	var base [][]int = m
	_ = base
	var p int = power
	_ = p
	for p > 0 {
		if _mod(p, 2) == 1 {
			result = matrix_mul(func(v any) [][]int {
				if v == nil {
					return nil
				}
				if vv, ok := v.([][]int); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return [][]int{}
					}
					out := make([][]int, len(arr))
					for i, x := range arr {
						out[i] = func(v any) []int {
							if v == nil {
								return nil
							}
							if vv, ok := v.([]int); ok {
								return vv
							}
							if arr, ok := v.([]any); ok {
								if len(arr) == 0 {
									return []int{}
								}
								out := make([]int, len(arr))
								for i, x := range arr {
									out[i] = x.(int)
								}
								return out
							}
							return v.([]int)
						}(x)
					}
					return out
				}
				return v.([][]int)
			}(result), func(v any) [][]int {
				if v == nil {
					return nil
				}
				if vv, ok := v.([][]int); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return [][]int{}
					}
					out := make([][]int, len(arr))
					for i, x := range arr {
						out[i] = func(v any) []int {
							if v == nil {
								return nil
							}
							if vv, ok := v.([]int); ok {
								return vv
							}
							if arr, ok := v.([]any); ok {
								if len(arr) == 0 {
									return []int{}
								}
								out := make([]int, len(arr))
								for i, x := range arr {
									out[i] = x.(int)
								}
								return out
							}
							return v.([]int)
						}(x)
					}
					return out
				}
				return v.([][]int)
			}(base))
		}
		base = matrix_mul(func(v any) [][]int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]int{}
				}
				out := make([][]int, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []int {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]int); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []int{}
							}
							out := make([]int, len(arr))
							for i, x := range arr {
								out[i] = x.(int)
							}
							return out
						}
						return v.([]int)
					}(x)
				}
				return out
			}
			return v.([][]int)
		}(base), func(v any) [][]int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]int{}
				}
				out := make([][]int, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []int {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]int); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []int{}
							}
							out := make([]int, len(arr))
							for i, x := range arr {
								out[i] = x.(int)
							}
							return out
						}
						return v.([]int)
					}(x)
				}
				return out
			}
			return v.([][]int)
		}(base))
		p = int((p / 2))
	}
	return result
}

func fib_matrix(n int) int {
	if n < 0 {
		panic("n is negative")
	}
	if n == 0 {
		return 0
	}
	var m [][]int = [][]int{[]int{func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(1), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(1)}, []int{func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(1), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(0)}}
	_ = m
	var res [][]int = matrix_pow(func(v any) [][]int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]int{}
			}
			out := make([][]int, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []int {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]int); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []int{}
						}
						out := make([]int, len(arr))
						for i, x := range arr {
							out[i] = x.(int)
						}
						return out
					}
					return v.([]int)
				}(x)
			}
			return out
		}
		return v.([][]int)
	}(m), (n - 1))
	_ = res
	_ = res
	return _index(_index(res, 0), 0)
}

func run_tests() int {
	var expected []int = []int{func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(0), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(1), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(1), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(2), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(3), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(5), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(8), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(13), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(21), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(34), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(55)}
	_ = expected
	var it []int = fib_iterative(10)
	_ = it
	var rec []int = fib_recursive(10)
	_ = rec
	var cache []int = fib_recursive_cached(10)
	_ = cache
	var memo []int = fib_memoization(10)
	_ = memo
	var bin []int = fib_binet(10)
	_ = bin
	var m int = fib_matrix(10)
	_ = m
	if !reflect.DeepEqual(it, expected) {
		panic("iterative failed")
	}
	if !reflect.DeepEqual(rec, expected) {
		panic("recursive failed")
	}
	if !reflect.DeepEqual(cache, expected) {
		panic("cached failed")
	}
	if !reflect.DeepEqual(memo, expected) {
		panic("memoization failed")
	}
	if !reflect.DeepEqual(bin, expected) {
		panic("binet failed")
	}
	if m != 55 {
		panic("matrix failed")
	}
	return m
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fib_cache_global = map[int]int{}
		fib_memo_cache = map[int]int{0: 0, 1: 1, 2: 1}
		fmt.Println(fmt.Sprint(run_tests()))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
