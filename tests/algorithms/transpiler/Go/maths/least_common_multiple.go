//go:build ignore

// Generated by Mochi v0.10.63 on 2025-08-12 08:25:42 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _mod(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func gcd(a int, b int) int {
	var x int = func() int {
		if a >= 0 {
			return a
		} else {
			return (0 - a)
		}
	}()
	_ = x
	var y int = func() int {
		if b >= 0 {
			return b
		} else {
			return (0 - b)
		}
	}()
	_ = y
	for y != 0 {
		var temp int = _mod(x, y)
		_ = temp
		x = y
		y = temp
	}
	return x
}

func lcm_slow(a int, b int) int {
	var max int = func() int {
		if a >= b {
			return a
		} else {
			return b
		}
	}()
	_ = max
	var multiple int = max
	_ = multiple
	for (_mod(multiple, a) != 0) || (_mod(multiple, b) != 0) {
		multiple = (multiple + max)
	}
	return multiple
}

func lcm_fast(a int, b int) int {
	return ((a / gcd(a, b)) * b)
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(fmt.Sprint(lcm_slow(5, 2)))
		fmt.Println(fmt.Sprint(lcm_slow(12, 76)))
		fmt.Println(fmt.Sprint(lcm_fast(5, 2)))
		fmt.Println(fmt.Sprint(lcm_fast(12, 76)))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
