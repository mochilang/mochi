//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-16 12:56:52 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _modi(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func remove_digit(num int) int {
	var n int = num
	_ = n
	if n < 0 {
		n = (0 - n)
	}
	var max_val int = 0
	_ = max_val
	var divisor int = 1
	_ = divisor
	for divisor <= n {
		var higher int = (n / (divisor * 10))
		_ = higher
		var lower int = _modi(n, divisor)
		_ = lower
		var candidate int = ((higher * divisor) + lower)
		_ = candidate
		if candidate > max_val {
			max_val = candidate
		}
		divisor = (divisor * 10)
	}
	return max_val
}

func test_remove_digit() {
	if remove_digit(152) != 52 {
		panic("remove_digit(152) failed")
	}
	if remove_digit(6385) != 685 {
		panic("remove_digit(6385) failed")
	}
	if remove_digit((0 - 11)) != 1 {
		panic("remove_digit(-11) failed")
	}
	if remove_digit(2222222) != 222222 {
		panic("remove_digit(2222222) failed")
	}
}

func mochiMain() {
	test_remove_digit()
	fmt.Println(remove_digit(152))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
