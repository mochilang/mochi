//go:build ignore

// Generated by Mochi v0.10.63 on 2025-08-12 08:01:08 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func ln(x float64) float64 {
	var t float64 = (float64((x - 1.0)) / float64((x + 1.0)))
	_ = t
	var term float64 = t
	_ = term
	var sum float64 = 0.0
	_ = sum
	var k int = 1
	_ = k
	for k <= 99 {
		sum = (sum + (float64(term) / float64(k)))
		term = ((term * t) * t)
		k = (k + 2)
	}
	return (2.0 * sum)
}

func log10(x float64) float64 {
	return (float64(ln(x)) / float64(ln(10.0)))
}

func absf(x float64) float64 {
	if x < 0.0 {
		return (0 - x)
	}
	return x
}

func res(x int, y int) float64 {
	if x == 0 {
		return 0.0
	}
	if y == 0 {
		return 1.0
	}
	if x < 0 {
		panic("math domain error")
	}
	return (float64(y) * log10(float64(x)))
}

func test_res() {
	if absf((res(5, 7) - 4.892790030352132)) > 1e-07 {
		panic("res(5,7) failed")
	}
	if res(0, 5) != 0.0 {
		panic("res(0,5) failed")
	}
	if res(3, 0) != 1.0 {
		panic("res(3,0) failed")
	}
}

func compare(x1 int, y1 int, x2 int, y2 int) string {
	var r1 float64 = res(x1, y1)
	_ = r1
	var r2 float64 = res(x2, y2)
	_ = r2
	if r1 > r2 {
		return ((("Largest number is " + fmt.Sprint(x1)) + " ^ ") + fmt.Sprint(y1))
	}
	if r2 > r1 {
		return ((("Largest number is " + fmt.Sprint(x2)) + " ^ ") + fmt.Sprint(y2))
	}
	return "Both are equal"
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		test_res()
		fmt.Println(compare(5, 7, 4, 8))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
