//go:build ignore

// Generated by Mochi v0.10.63 on 2025-08-12 07:54:15 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"sort"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

func log2(x float64) float64 {
	var k float64 = 0.0
	_ = k
	var v float64 = x
	_ = v
	for v >= 2.0 {
		v = (float64(v) / float64(2.0))
		k = (k + 1.0)
	}
	for v < 1.0 {
		v = (v * 2.0)
		k = (k - 1.0)
	}
	var z float64 = (float64((v - 1.0)) / float64((v + 1.0)))
	_ = z
	var zpow float64 = z
	_ = zpow
	var sum float64 = z
	_ = sum
	var i int = 3
	_ = i
	for i <= 9 {
		zpow = ((zpow * z) * z)
		sum = (sum + (float64(zpow) / float64(i)))
		i = (i + 2)
	}
	var ln2 float64 = 0.6931471805599453
	_ = ln2
	_ = ln2
	return (k + (float64((2.0 * sum)) / float64(ln2)))
}

type TextCounts struct {
	Single map[string]int `json:"single"`
	Double map[string]int `json:"double"`
}

func analyze_text(text string) TextCounts {
	var single map[string]int = map[string]int{}
	_ = single
	var double map[string]int = map[string]int{}
	_ = double
	var n int = len(text)
	_ = n
	if n == 0 {
		return TextCounts{
			Single: single,
			Double: double,
		}
	}
	var last string = _substr(text, (n - 1), n)
	_ = last
	if func() bool { _, ok := single[last]; return ok }() {
		single[last] = (int(single[last]) + 1)
	} else {
		single[last] = 1
	}
	var first string = _substr(text, 0, 1)
	_ = first
	var pair0 string = (" " + first)
	_ = pair0
	double[pair0] = 1
	var i int = 0
	_ = i
	for i < (n - 1) {
		var ch string = _substr(text, i, (i + 1))
		_ = ch
		if func() bool { _, ok := single[ch]; return ok }() {
			single[ch] = (int(single[ch]) + 1)
		} else {
			single[ch] = 1
		}
		var seq string = _substr(text, i, (i + 2))
		_ = seq
		if func() bool { _, ok := double[seq]; return ok }() {
			double[seq] = (int(double[seq]) + 1)
		} else {
			double[seq] = 1
		}
		i = (i + 1)
	}
	return TextCounts{
		Single: single,
		Double: double,
	}
}

func round_to_int(x float64) int {
	if x < 0.0 {
		return func() int { n, _ := strconv.Atoi(fmt.Sprint((x - 0.5))); return n }()
	}
	return func() int { n, _ := strconv.Atoi(fmt.Sprint((x + 0.5))); return n }()
}

func calculate_entropy(text string) {
	var counts TextCounts = analyze_text(text)
	_ = counts
	var alphas string = " abcdefghijklmnopqrstuvwxyz"
	_ = alphas
	var total1 int = 0
	_ = total1
	for _, ch := range func() []string {
		keys := make([]string, 0, len(counts.Single))
		for k := range counts.Single {
			keys = append(keys, k)
		}
		sort.Slice(keys, func(i, j int) bool { return fmt.Sprint(keys[i]) < fmt.Sprint(keys[j]) })
		return keys
	}() {
		total1 = (total1 + int(counts.Single[ch]))
	}
	var h1 float64 = 0.0
	_ = h1
	var i int = 0
	_ = i
	for i < len(alphas) {
		var ch string = _substr(alphas, i, (i + 1))
		_ = ch
		if func() bool { _, ok := counts.Single[ch]; return ok }() {
			var prob float64 = (float64(counts.Single[ch]) / float64(total1))
			_ = prob
			h1 = (h1 + (prob * log2(prob)))
		}
		i = (i + 1)
	}
	var first_entropy float64 = (0 - h1)
	_ = first_entropy
	fmt.Println((fmt.Sprint(round_to_int(first_entropy)) + ".0"))
	var total2 int = 0
	_ = total2
	for _, seq := range func() []string {
		keys := make([]string, 0, len(counts.Double))
		for k := range counts.Double {
			keys = append(keys, k)
		}
		sort.Slice(keys, func(i, j int) bool { return fmt.Sprint(keys[i]) < fmt.Sprint(keys[j]) })
		return keys
	}() {
		total2 = (total2 + int(counts.Double[seq]))
	}
	var h2 float64 = 0.0
	_ = h2
	var a0 int = 0
	_ = a0
	for a0 < len(alphas) {
		var ch0 string = _substr(alphas, a0, (a0 + 1))
		_ = ch0
		var a1 int = 0
		_ = a1
		for a1 < len(alphas) {
			var ch1 string = _substr(alphas, a1, (a1 + 1))
			_ = ch1
			var seq string = (ch0 + ch1)
			_ = seq
			if func() bool { _, ok := counts.Double[seq]; return ok }() {
				var prob float64 = (float64(counts.Double[seq]) / float64(total2))
				_ = prob
				h2 = (h2 + (prob * log2(prob)))
			}
			a1 = (a1 + 1)
		}
		a0 = (a0 + 1)
	}
	var second_entropy float64 = (0 - h2)
	_ = second_entropy
	fmt.Println((fmt.Sprint(round_to_int(second_entropy)) + ".0"))
	var diff float64 = (second_entropy - first_entropy)
	_ = diff
	fmt.Println((fmt.Sprint(round_to_int(diff)) + ".0"))
}

var text1 string

var text3 string

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		text1 = (("Behind Winston's back the voice " + "from the telescreen was still ") + "babbling and the overfulfilment")
		calculate_entropy(text1)
		text3 = (((((((((("Had repulsive dashwoods suspicion sincerity but advantage now him. " + "Remark easily garret nor nay.  Civil those mrs enjoy shy fat merry. ") + "You greatest jointure saw horrible. He private he on be imagine ") + "suppose. Fertile beloved evident through no service elderly is. Blind ") + "there if every no so at. Own neglected you preferred way sincerity ") + "delivered his attempted. To of message cottage windows do besides ") + "against uncivil.  Delightful unreserved impossible few estimating ") + "men favourable see entreaties. She propriety immediate was improving. ") + "He or entrance humoured likewise moderate. Much nor game son say ") + "feel. Fat make met can must form into gate. Me we offending prevailed ") + "discovery.")
		calculate_entropy(text3)
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
