//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-16 12:56:48 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

var PI float64

func radians(degree float64) float64 {
	return (float64(degree) / float64((float64(180.0) / float64(PI))))
}

func abs_float(x float64) float64 {
	if x < 0.0 {
		return (0 - x)
	}
	return x
}

func almost_equal(a float64, b float64) bool {
	return (abs_float((a - b)) <= 1e-08)
}

func test_radians() {
	if !almost_equal(radians(180.0), PI) {
		panic("radians 180 failed")
	}
	if !almost_equal(radians(92.0), 1.6057029118347832) {
		panic("radians 92 failed")
	}
	if !almost_equal(radians(274.0), 4.782202150464463) {
		panic("radians 274 failed")
	}
	if !almost_equal(radians(109.82), 1.9167205845401725) {
		panic("radians 109.82 failed")
	}
}

func mochiMain() {
	test_radians()
	fmt.Println(fmt.Sprint(radians(180.0)))
	fmt.Println(fmt.Sprint(radians(92.0)))
	fmt.Println(fmt.Sprint(radians(274.0)))
	fmt.Println(fmt.Sprint(radians(109.82)))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		PI = 3.141592653589793
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
