//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-16 12:27:20 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _modi(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func to_float(x int) float64 {
	return (float64(x) * 1.0)
}

func sqrt(x float64) float64 {
	if x <= 0.0 {
		return 0.0
	}
	var guess float64 = x
	_ = guess
	var i int = 0
	_ = i
	for i < 10 {
		guess = (float64((guess + (float64(x) / float64(guess)))) / float64(2.0))
		i = (i + 1)
	}
	return guess
}

func floor(x float64) int {
	var n int = 0
	_ = n
	var y float64 = x
	_ = y
	for y >= 1.0 {
		y = (y - 1.0)
		n = (n + 1)
	}
	return n
}

func juggler_sequence(n int) []int {
	if n < 1 {
		panic("number must be a positive integer")
	}
	var seq []int = []int{func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(n)}
	_ = seq
	var current int = n
	_ = current
	for current != 1 {
		if _modi(current, 2) == 0 {
			current = floor(sqrt(float64(current)))
		} else {
			var r float64 = sqrt(float64(current))
			_ = r
			current = floor(((r * r) * r))
		}
		seq = append(seq, current)
	}
	return seq
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(fmt.Sprint(juggler_sequence(3)))
		fmt.Println(fmt.Sprint(juggler_sequence(10)))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
