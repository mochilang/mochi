//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-16 12:55:34 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

type Point3d struct {
	X float64 `json:"x"`
	Y float64 `json:"y"`
	Z float64 `json:"z"`
}

type Vector3d struct {
	X float64 `json:"x"`
	Y float64 `json:"y"`
	Z float64 `json:"z"`
}

func create_vector(p1 Point3d, p2 Point3d) Vector3d {
	var vx float64 = (p2.X - p1.X)
	_ = vx
	_ = vx
	var vy float64 = (p2.Y - p1.Y)
	_ = vy
	_ = vy
	var vz float64 = (p2.Z - p1.Z)
	_ = vz
	_ = vz
	return Vector3d{
		X: vx,
		Y: vy,
		Z: vz,
	}
}

func get_3d_vectors_cross(ab Vector3d, ac Vector3d) Vector3d {
	var cx float64 = ((ab.Y * ac.Z) - (ab.Z * ac.Y))
	_ = cx
	_ = cx
	var cy float64 = ((ab.Z * ac.X) - (ab.X * ac.Z))
	_ = cy
	_ = cy
	var cz float64 = ((ab.X * ac.Y) - (ab.Y * ac.X))
	_ = cz
	_ = cz
	return Vector3d{
		X: cx,
		Y: cy,
		Z: cz,
	}
}

func pow10(exp int) float64 {
	var result float64 = 1.0
	_ = result
	var i int = 0
	_ = i
	for i < exp {
		result = (result * 10.0)
		i = (i + 1)
	}
	return result
}

func round_float(x float64, digits int) float64 {
	var factor float64 = pow10(digits)
	_ = factor
	var v float64 = (x * factor)
	_ = v
	if v >= 0.0 {
		v = (v + 0.5)
	} else {
		v = (v - 0.5)
	}
	var t int = int(v)
	_ = t
	_ = t
	return (float64(t) / float64(factor))
}

func is_zero_vector(v Vector3d, accuracy int) bool {
	return (((round_float(v.X, accuracy) == 0.0) && (round_float(v.Y, accuracy) == 0.0)) && (round_float(v.Z, accuracy) == 0.0))
}

func are_collinear(a Point3d, b Point3d, c Point3d, accuracy int) bool {
	var ab Vector3d = create_vector(a, b)
	_ = ab
	var ac Vector3d = create_vector(a, c)
	_ = ac
	var cross Vector3d = get_3d_vectors_cross(ab, ac)
	_ = cross
	_ = cross
	return is_zero_vector(cross, accuracy)
}

func test_are_collinear() {
	var p1 Point3d = Point3d{
		X: 0.0,
		Y: 0.0,
		Z: 0.0,
	}
	_ = p1
	var p2 Point3d = Point3d{
		X: 1.0,
		Y: 1.0,
		Z: 1.0,
	}
	_ = p2
	var p3 Point3d = Point3d{
		X: 2.0,
		Y: 2.0,
		Z: 2.0,
	}
	_ = p3
	if !are_collinear(p1, p2, p3, 10) {
		panic("collinear test failed")
	}
	var q3 Point3d = Point3d{
		X: 1.0,
		Y: 2.0,
		Z: 3.0,
	}
	_ = q3
	if are_collinear(p1, p2, q3, 10) {
		panic("non-collinear test failed")
	}
}

func mochiMain() {
	test_are_collinear()
	var a Point3d = Point3d{
		X: 4.802293498137402,
		Y: 3.536233125455244,
		Z: 0.0,
	}
	_ = a
	var b Point3d = Point3d{
		X: (0 - 2.186788107953106),
		Y: (0 - 9.24561398001649),
		Z: 7.141509524846482,
	}
	_ = b
	var c Point3d = Point3d{
		X: 1.530169574640268,
		Y: (0 - 2.447927606600034),
		Z: 3.343487096469054,
	}
	_ = c
	fmt.Println(fmt.Sprint(are_collinear(a, b, c, 10)))
	var d Point3d = Point3d{
		X: 2.399001826862445,
		Y: (0 - 2.452009976680793),
		Z: 4.464656666157666,
	}
	_ = d
	var e Point3d = Point3d{
		X: (0 - 3.682816335934376),
		Y: 5.753788986533145,
		Z: 9.490993909044244,
	}
	_ = e
	var f Point3d = Point3d{
		X: 1.962903518985307,
		Y: 3.741415730125627,
		Z: 7.0,
	}
	_ = f
	fmt.Println(fmt.Sprint(are_collinear(d, e, f, 10)))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
