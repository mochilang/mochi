//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-16 12:55:54 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _modi(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		return
	}
	s[idx] = v
}

func abs_int(x int) int {
	if x < 0 {
		return (0 - x)
	}
	return x
}

func gcd_iter(a int, b int) int {
	var x int = abs_int(a)
	_ = x
	var y int = abs_int(b)
	_ = y
	for y != 0 {
		var t int = y
		_ = t
		y = _modi(x, y)
		x = t
	}
	return x
}

func is_prime(n int) bool {
	if n <= 1 {
		return false
	}
	var d int = 2
	_ = d
	for (d * d) <= n {
		if _modi(n, d) == 0 {
			return false
		}
		d = (d + 1)
	}
	return true
}

func sieve_er(n int) []int {
	var nums []int = []int{}
	_ = nums
	var i int = 2
	_ = i
	for i <= n {
		nums = append(nums, i)
		i = (i + 1)
	}
	var idx int = 0
	_ = idx
	for idx < len(nums) {
		var j int = (idx + 1)
		_ = j
		for j < len(nums) {
			if _index(nums, idx) != 0 {
				if _modi(_index(nums, j), _index(nums, idx)) == 0 {
					_setIndex(nums, j, 0)
				}
			}
			j = (j + 1)
		}
		idx = (idx + 1)
	}
	var res []int = []int{}
	_ = res
	var k int = 0
	_ = k
	for k < len(nums) {
		var v int = _index(nums, k)
		_ = v
		if v != 0 {
			res = append(res, v)
		}
		k = (k + 1)
	}
	return res
}

func get_prime_numbers(n int) []int {
	var ans []int = []int{}
	_ = ans
	var num int = 2
	_ = num
	for num <= n {
		if is_prime(num) {
			ans = append(ans, num)
		}
		num = (num + 1)
	}
	return ans
}

func prime_factorization(number int) []int {
	if number == 0 {
		return []int{0}
	}
	if number == 1 {
		return []int{1}
	}
	var ans []int = []int{}
	_ = ans
	if is_prime(number) {
		ans = append(ans, number)
		return ans
	}
	var quotient int = number
	_ = quotient
	var factor int = 2
	_ = factor
	for quotient != 1 {
		if is_prime(factor) && (_modi(quotient, factor) == 0) {
			ans = append(ans, factor)
			quotient = (quotient / factor)
		} else {
			factor = (factor + 1)
		}
	}
	return ans
}

func greatest_prime_factor(number int) int {
	var factors []int = prime_factorization(number)
	_ = factors
	var m int = _index(factors, 0)
	_ = m
	var i int = 1
	_ = i
	for i < len(factors) {
		if _index(factors, i) > m {
			m = _index(factors, i)
		}
		i = (i + 1)
	}
	return m
}

func smallest_prime_factor(number int) int {
	var factors []int = prime_factorization(number)
	_ = factors
	var m int = _index(factors, 0)
	_ = m
	var i int = 1
	_ = i
	for i < len(factors) {
		if _index(factors, i) < m {
			m = _index(factors, i)
		}
		i = (i + 1)
	}
	return m
}

func kg_v(number1 int, number2 int) int {
	if (number1 < 1) || (number2 < 1) {
		panic("numbers must be positive")
	}
	var g int = gcd_iter(number1, number2)
	_ = g
	_ = g
	return ((number1 / g) * number2)
}

func is_even(number int) bool {
	return (_modi(number, 2) == 0)
}

func is_odd(number int) bool {
	return (_modi(number, 2) != 0)
}

func goldbach(number int) []int {
	if !is_even(number) || (number <= 2) {
		panic("number must be even and > 2")
	}
	var primes []int = get_prime_numbers(number)
	_ = primes
	var i int = 0
	_ = i
	for i < len(primes) {
		var j int = (i + 1)
		_ = j
		for j < len(primes) {
			if (_index(primes, i) + _index(primes, j)) == number {
				return []int{func(v any) int {
					if vv, ok := v.(int); ok {
						return vv
					}
					return 0
				}(_index(primes, i)), func(v any) int {
					if vv, ok := v.(int); ok {
						return vv
					}
					return 0
				}(_index(primes, j))}
			}
			j = (j + 1)
		}
		i = (i + 1)
	}
	return func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}([]int{})
}

func get_prime(n int) int {
	if n < 0 {
		panic("n must be non-negative")
	}
	var index int = 0
	_ = index
	var ans int = 2
	_ = ans
	for index < n {
		index = (index + 1)
		ans = (ans + 1)
		for !is_prime(ans) {
			ans = (ans + 1)
		}
	}
	return ans
}

func get_primes_between(p1 int, p2 int) []int {
	var bad1 bool = !is_prime(p1)
	_ = bad1
	var bad2 bool = !is_prime(p2)
	_ = bad2
	if (bad1 || bad2) || (p1 >= p2) {
		panic("arguments must be prime and p1 < p2")
	}
	var num int = (p1 + 1)
	_ = num
	for num < p2 {
		if is_prime(num) {
			break
		}
		num = (num + 1)
	}
	var ans []int = []int{}
	_ = ans
	for num < p2 {
		ans = append(ans, num)
		num = (num + 1)
		for num < p2 {
			if is_prime(num) {
				break
			}
			num = (num + 1)
		}
	}
	return ans
}

func get_divisors(n int) []int {
	if n < 1 {
		panic("n must be >= 1")
	}
	var ans []int = []int{}
	_ = ans
	var d int = 1
	_ = d
	for d <= n {
		if _modi(n, d) == 0 {
			ans = append(ans, d)
		}
		d = (d + 1)
	}
	return ans
}

func is_perfect_number(number int) bool {
	if number <= 1 {
		panic("number must be > 1")
	}
	var divisors []int = get_divisors(number)
	_ = divisors
	var sum int = 0
	_ = sum
	var i int = 0
	_ = i
	for i < (len(divisors) - 1) {
		sum = (sum + _index(divisors, i))
		i = (i + 1)
	}
	return (sum == number)
}

func simplify_fraction(numerator int, denominator int) []int {
	if denominator == 0 {
		panic("denominator cannot be zero")
	}
	var g int = gcd_iter(abs_int(numerator), abs_int(denominator))
	_ = g
	_ = g
	return []int{func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}((numerator / g)), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}((denominator / g))}
}

func factorial(n int) int {
	if n < 0 {
		panic("n must be >= 0")
	}
	var ans int = 1
	_ = ans
	var i int = 1
	_ = i
	for i <= n {
		ans = (ans * i)
		i = (i + 1)
	}
	return ans
}

func fib(n int) int {
	if n < 0 {
		panic("n must be >= 0")
	}
	if n <= 1 {
		return 1
	}
	var tmp int = 0
	_ = tmp
	var fib1 int = 1
	_ = fib1
	var ans int = 1
	_ = ans
	var i int = 0
	_ = i
	for i < (n - 1) {
		tmp = ans
		ans = (ans + fib1)
		fib1 = tmp
		i = (i + 1)
	}
	return ans
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(fmt.Sprint(is_prime(97)))
		fmt.Println(fmt.Sprint(sieve_er(20)))
		fmt.Println(fmt.Sprint(get_prime_numbers(20)))
		fmt.Println(fmt.Sprint(prime_factorization(287)))
		fmt.Println(fmt.Sprint(greatest_prime_factor(287)))
		fmt.Println(fmt.Sprint(smallest_prime_factor(287)))
		fmt.Println(fmt.Sprint(kg_v(8, 10)))
		fmt.Println(fmt.Sprint(goldbach(28)))
		fmt.Println(fmt.Sprint(get_prime(8)))
		fmt.Println(fmt.Sprint(get_primes_between(3, 20)))
		fmt.Println(fmt.Sprint(get_divisors(28)))
		fmt.Println(fmt.Sprint(is_perfect_number(28)))
		fmt.Println(fmt.Sprint(simplify_fraction(10, 20)))
		fmt.Println(fmt.Sprint(factorial(5)))
		fmt.Println(fmt.Sprint(fib(10)))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
