//go:build ignore

// Generated by Mochi v0.10.63 on 2025-08-12 08:00:51 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _mod(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func abs_int(n int) int {
	if n < 0 {
		return (0 - n)
	}
	return n
}

func greatest_common_divisor(a int, b int) int {
	var x int = abs_int(a)
	_ = x
	var y int = abs_int(b)
	_ = y
	_ = y
	if x == 0 {
		return y
	}
	return greatest_common_divisor(_mod(y, x), x)
}

func gcd_by_iterative(x int, y int) int {
	var a int = abs_int(x)
	_ = a
	var b int = abs_int(y)
	_ = b
	for b != 0 {
		var temp int = b
		_ = temp
		b = _mod(a, b)
		a = temp
	}
	return a
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(fmt.Sprint(greatest_common_divisor(24, 40)))
		fmt.Println(fmt.Sprint(greatest_common_divisor(1, 1)))
		fmt.Println(fmt.Sprint(greatest_common_divisor(1, 800)))
		fmt.Println(fmt.Sprint(greatest_common_divisor(11, 37)))
		fmt.Println(fmt.Sprint(greatest_common_divisor(3, 5)))
		fmt.Println(fmt.Sprint(greatest_common_divisor(16, 4)))
		fmt.Println(fmt.Sprint(greatest_common_divisor((0 - 3), 9)))
		fmt.Println(fmt.Sprint(greatest_common_divisor(9, (0 - 3))))
		fmt.Println(fmt.Sprint(greatest_common_divisor(3, (0 - 9))))
		fmt.Println(fmt.Sprint(greatest_common_divisor((0 - 3), (0 - 9))))
		fmt.Println(fmt.Sprint(gcd_by_iterative(24, 40)))
		fmt.Println(fmt.Sprint((greatest_common_divisor(24, 40) == gcd_by_iterative(24, 40))))
		fmt.Println(fmt.Sprint(gcd_by_iterative((0 - 3), (0 - 9))))
		fmt.Println(fmt.Sprint(gcd_by_iterative(3, (0 - 9))))
		fmt.Println(fmt.Sprint(gcd_by_iterative(1, (0 - 800))))
		fmt.Println(fmt.Sprint(gcd_by_iterative(11, 37)))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
