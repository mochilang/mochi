//go:build ignore

// Generated by Mochi v0.10.67 on 2025-08-17 12:40:02 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

func _modi(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func is_prime(number int) bool {
	if number < 0 {
		panic("is_prime() only accepts positive integers")
	}
	if number < 2 {
		return false
	}
	if number < 4 {
		return true
	}
	if (_modi(number, 2) == 0) || (_modi(number, 3) == 0) {
		return false
	}
	var i int = 5
	_ = i
	for (i * i) <= number {
		if (_modi(number, i) == 0) || (_modi(number, (i+2)) == 0) {
			return false
		}
		i = (i + 6)
	}
	return true
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(fmt.Sprint(is_prime(2)))
		fmt.Println(fmt.Sprint(is_prime(3)))
		fmt.Println(fmt.Sprint(is_prime(5)))
		fmt.Println(fmt.Sprint(is_prime(7)))
		fmt.Println(fmt.Sprint(is_prime(11)))
		fmt.Println(fmt.Sprint(is_prime(13)))
		fmt.Println(fmt.Sprint(is_prime(17)))
		fmt.Println(fmt.Sprint(is_prime(19)))
		fmt.Println(fmt.Sprint(is_prime(23)))
		fmt.Println(fmt.Sprint(is_prime(29)))
		fmt.Println(fmt.Sprint(is_prime(0)))
		fmt.Println(fmt.Sprint(is_prime(1)))
		fmt.Println(fmt.Sprint(is_prime(4)))
		fmt.Println(fmt.Sprint(is_prime(6)))
		fmt.Println(fmt.Sprint(is_prime(9)))
		fmt.Println(fmt.Sprint(is_prime(15)))
		fmt.Println(fmt.Sprint(is_prime(105)))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
