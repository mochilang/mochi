//go:build ignore

// Generated by Mochi v0.10.64 on 2025-08-12 16:20:25 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _mod(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

var seed int

func set_seed(s int) {
	seed = s
}

func randint(a int, b int) int {
	seed = _mod(((seed * 1103515245) + 12345), 2147483648)
	return (_mod(seed, ((b-a)+1)) + a)
}

func jacobi_symbol(random_a int, number int) int {
	if (random_a == 0) || (random_a == 1) {
		return random_a
	}
	random_a = _mod(random_a, number)
	var t int = 1
	_ = t
	for random_a != 0 {
		for _mod(random_a, 2) == 0 {
			random_a = (random_a / 2)
			var r int = _mod(number, 8)
			_ = r
			if (r == 3) || (r == 5) {
				t = (0 - t)
			}
		}
		var temp int = random_a
		_ = temp
		random_a = number
		number = temp
		if (_mod(random_a, 4) == 3) && (_mod(number, 4) == 3) {
			t = (0 - t)
		}
		random_a = _mod(random_a, number)
	}
	if number == 1 {
		return t
	}
	return 0
}

func pow_mod(base int, exp int, mod int) int {
	var result int = 1
	_ = result
	var b int = _mod(base, mod)
	_ = b
	var e int = exp
	_ = e
	for e > 0 {
		if _mod(e, 2) == 1 {
			result = _mod((result * b), mod)
		}
		b = _mod((b * b), mod)
		e = (e / 2)
	}
	return result
}

func solovay_strassen(number int, iterations int) bool {
	if number <= 1 {
		return false
	}
	if number <= 3 {
		return true
	}
	var i int = 0
	_ = i
	for i < iterations {
		var a int = randint(2, (number - 2))
		_ = a
		var x int = jacobi_symbol(a, number)
		_ = x
		var y int = pow_mod(a, ((number - 1) / 2), number)
		_ = y
		var mod_x int = _mod(x, number)
		_ = mod_x
		if mod_x < 0 {
			mod_x = (mod_x + number)
		}
		if (x == 0) || (y != mod_x) {
			return false
		}
		i = (i + 1)
	}
	return true
}

func mochiMain() {
	set_seed(10)
	fmt.Println(fmt.Sprint(solovay_strassen(13, 5)))
	fmt.Println(fmt.Sprint(solovay_strassen(9, 10)))
	fmt.Println(fmt.Sprint(solovay_strassen(17, 15)))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		seed = 1
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
