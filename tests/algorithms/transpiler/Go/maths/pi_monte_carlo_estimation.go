//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-16 12:55:32 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _modi(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

var PI float64

var seed int

func next_seed(x int) int {
	return _modi(((x * 1103515245) + 12345), 2147483648)
}

func rand_unit() float64 {
	seed = next_seed(seed)
	return (float64(seed) / float64(2147483648.0))
}

type Point struct {
	X float64 `json:"x"`
	Y float64 `json:"y"`
}

func is_in_unit_circle(p Point) bool {
	return (((p.X * p.X) + (p.Y * p.Y)) <= 1.0)
}

func random_unit_square() Point {
	return Point{
		X: rand_unit(),
		Y: rand_unit(),
	}
}

func estimate_pi(simulations int) float64 {
	if simulations < 1 {
		panic("At least one simulation is necessary to estimate PI.")
	}
	var inside int = 0
	_ = inside
	var i int = 0
	_ = i
	for i < simulations {
		var p Point = random_unit_square()
		_ = p
		if is_in_unit_circle(p) {
			inside = (inside + 1)
		}
		i = (i + 1)
	}
	return (float64((4.0 * float64(inside))) / float64(simulations))
}

func abs_float(x float64) float64 {
	if x < 0.0 {
		return (0 - x)
	}
	return x
}

func mochiMain() {
	var n int = 10000
	_ = n
	var my_pi float64 = estimate_pi(n)
	_ = my_pi
	var error float64 = abs_float((my_pi - PI))
	_ = error
	fmt.Println(((("An estimate of PI is " + fmt.Sprint(my_pi)) + " with an error of ") + fmt.Sprint(error)))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		PI = 3.141592653589793
		seed = 1
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
