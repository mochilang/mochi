//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-16 11:56:16 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _modi(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

var MAX int

var HALF int

func to_unsigned(n int) int {
	if n < 0 {
		return (MAX + n)
	}
	return n
}

func from_unsigned(n int) int {
	if n >= HALF {
		return (n - MAX)
	}
	return n
}

func bit_and(a int, b int) int {
	var x int = a
	_ = x
	var y int = b
	_ = y
	var res int = 0
	_ = res
	var bit int = 1
	_ = bit
	var i int = 0
	_ = i
	for i < 32 {
		if (_modi(x, 2) == 1) && (_modi(y, 2) == 1) {
			res = (res + bit)
		}
		x = (x / 2)
		y = (y / 2)
		bit = (bit * 2)
		i = (i + 1)
	}
	return res
}

func bit_xor(a int, b int) int {
	var x int = a
	_ = x
	var y int = b
	_ = y
	var res int = 0
	_ = res
	var bit int = 1
	_ = bit
	var i int = 0
	_ = i
	for i < 32 {
		var abit int = _modi(x, 2)
		_ = abit
		var bbit int = _modi(y, 2)
		_ = bbit
		if _modi((abit+bbit), 2) == 1 {
			res = (res + bit)
		}
		x = (x / 2)
		y = (y / 2)
		bit = (bit * 2)
		i = (i + 1)
	}
	return res
}

func lshift1(num int) int {
	return _modi((num * 2), MAX)
}

func add(a int, b int) int {
	var first int = to_unsigned(a)
	_ = first
	var second int = to_unsigned(b)
	_ = second
	for second != 0 {
		var carry int = bit_and(first, second)
		_ = carry
		first = bit_xor(first, second)
		second = lshift1(carry)
	}
	var result int = from_unsigned(first)
	_ = result
	_ = result
	return result
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		MAX = 4294967296
		HALF = 2147483648
		fmt.Println(fmt.Sprint(add(3, 5)))
		fmt.Println(fmt.Sprint(add(13, 5)))
		fmt.Println(fmt.Sprint(add((0 - 7), 2)))
		fmt.Println(fmt.Sprint(add(0, (0 - 7))))
		fmt.Println(fmt.Sprint(add((0 - 321), 0)))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
