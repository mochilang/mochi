//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-16 13:03:56 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		return
	}
	s[idx] = v
}

func min_int(a int, b int) int {
	if a < b {
		return a
	}
	return b
}

func int_sqrt(n int) int {
	var r int = 0
	_ = r
	for ((r + 1) * (r + 1)) <= n {
		r = (r + 1)
	}
	return r
}

func sieve(n int) []int {
	if n <= 0 {
		panic("Number must instead be a positive integer")
	}
	var in_prime []int = []int{}
	_ = in_prime
	var start int = 2
	_ = start
	var end int = int_sqrt(n)
	_ = end
	var temp []int = []int{}
	_ = temp
	var i int = 0
	_ = i
	for i < (end + 1) {
		temp = append(temp, 1)
		i = (i + 1)
	}
	var prime []int = []int{}
	_ = prime
	for start <= end {
		if _index(temp, start) == 1 {
			in_prime = append(in_prime, start)
			var j int = (start * start)
			_ = j
			for j <= end {
				_setIndex(temp, j, 0)
				j = (j + start)
			}
		}
		start = (start + 1)
	}
	i = 0
	for i < len(in_prime) {
		prime = append(prime, _index(in_prime, i))
		i = (i + 1)
	}
	var low int = (end + 1)
	_ = low
	var high int = min_int((2 * end), n)
	_ = high
	for low <= n {
		var tempSeg []int = []int{}
		_ = tempSeg
		var size int = ((high - low) + 1)
		_ = size
		var k int = 0
		_ = k
		for k < size {
			tempSeg = append(tempSeg, 1)
			k = (k + 1)
		}
		var idx int = 0
		_ = idx
		for idx < len(in_prime) {
			var each int = _index(in_prime, idx)
			_ = each
			var t int = ((low / each) * each)
			_ = t
			if t < low {
				t = (t + each)
			}
			var j2 int = t
			_ = j2
			for j2 <= high {
				_setIndex(tempSeg, (j2 - low), 0)
				j2 = (j2 + each)
			}
			idx = (idx + 1)
		}
		var j3 int = 0
		_ = j3
		for j3 < len(tempSeg) {
			if _index(tempSeg, j3) == 1 {
				prime = append(prime, (j3 + low))
			}
			j3 = (j3 + 1)
		}
		low = (high + 1)
		high = min_int((high + end), n)
	}
	return prime
}

func lists_equal(a []int, b []int) bool {
	if len(a) != len(b) {
		return false
	}
	var m int = 0
	_ = m
	for m < len(a) {
		if _index(a, m) != _index(b, m) {
			return false
		}
		m = (m + 1)
	}
	return true
}

func test_sieve() {
	var e1 []int = sieve(8)
	_ = e1
	if !lists_equal(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(e1), func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}([]int{2, 3, 5, 7})) {
		panic("sieve(8) failed")
	}
	var e2 []int = sieve(27)
	_ = e2
	if !lists_equal(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(e2), func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}([]int{2, 3, 5, 7, 11, 13, 17, 19, 23})) {
		panic("sieve(27) failed")
	}
}

func mochiMain() {
	test_sieve()
	fmt.Println(fmt.Sprint(sieve(30)))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
