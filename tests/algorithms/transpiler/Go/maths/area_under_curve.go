//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-15 10:31:47 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func abs_float(x float64) float64 {
	if x < 0.0 {
		return (0 - x)
	} else {
		return x
	}
}

func trapezoidal_area(f func(float64) float64, x_start float64, x_end float64, steps int) float64 {
	var step float64 = (float64((x_end - x_start)) / float64(steps))
	_ = step
	var x1 float64 = x_start
	_ = x1
	var fx1 float64 = f(x_start)
	_ = fx1
	var area float64 = 0.0
	_ = area
	var i int = 0
	_ = i
	for i < steps {
		var x2 float64 = (x1 + step)
		_ = x2
		var fx2 float64 = f(x2)
		_ = fx2
		area = (area + (float64((abs_float((fx2 + fx1)) * step)) / float64(2.0)))
		x1 = x2
		fx1 = fx2
		i = (i + 1)
	}
	return area
}

func f(x float64) float64 {
	return (((x * x) * x) + (x * x))
}

var i int

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println("f(x) = x^3 + x^2")
		fmt.Println("The area between the curve, x = -5, x = 5 and the x axis is:")
		i = 10
		for i <= 100000 {
			var result float64 = trapezoidal_area(f, (0 - 5.0), 5.0, i)
			_ = result
			fmt.Println(((("with " + fmt.Sprint(i)) + " steps: ") + fmt.Sprint(result)))
			i = (i * 10)
		}
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
