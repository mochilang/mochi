//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-16 13:04:37 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	math "math"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

var PI float64

func abs(x float64) float64 {
	if x < 0.0 {
		return (0 - x)
	}
	return x
}

func floor(x float64) float64 {
	var i int = int(x)
	_ = i
	if float64(i) > x {
		i = (i - 1)
	}
	return float64(i)
}

func pow(x float64, n int) float64 {
	var result float64 = 1.0
	_ = result
	var i int = 0
	_ = i
	for i < n {
		result = (result * x)
		i = (i + 1)
	}
	return result
}

func factorial(n int) float64 {
	var result float64 = 1.0
	_ = result
	var i int = 2
	_ = i
	for i <= n {
		result = (result * float64(i))
		i = (i + 1)
	}
	return result
}

func radians(deg float64) float64 {
	return (float64((deg * PI)) / float64(180.0))
}

func taylor_sin(angle_in_degrees float64, accuracy int, rounded_values_count int) float64 {
	var k float64 = floor((float64(angle_in_degrees) / float64(360.0)))
	_ = k
	var angle float64 = (angle_in_degrees - (k * 360.0))
	_ = angle
	var angle_in_radians float64 = radians(angle)
	_ = angle_in_radians
	var result float64 = angle_in_radians
	_ = result
	var a int = 3
	_ = a
	var sign float64 = (0 - 1.0)
	_ = sign
	var i int = 0
	_ = i
	for i < accuracy {
		result = (result + (float64((sign * pow(angle_in_radians, a))) / float64(factorial(a))))
		sign = (0 - sign)
		a = (a + 2)
		i = (i + 1)
	}
	return result
}

func test_sin() {
	var eps float64 = 1e-07
	_ = eps
	if abs((taylor_sin(0.0, 18, 10) - 0.0)) > eps {
		panic("sin(0) failed")
	}
	if abs((taylor_sin(90.0, 18, 10) - 1.0)) > eps {
		panic("sin(90) failed")
	}
	if abs((taylor_sin(180.0, 18, 10) - 0.0)) > eps {
		panic("sin(180) failed")
	}
	if abs((taylor_sin(270.0, 18, 10) - (0 - 1.0))) > eps {
		panic("sin(270) failed")
	}
}

func mochiMain() {
	test_sin()
	var res float64 = taylor_sin(64.0, 18, 10)
	_ = res
	_ = res
	fmt.Println(func() string {
		f := float64(res)
		if f == 0 && math.Signbit(f) {
			return "-0"
		}
		if math.Abs(f-float64(int(f))) < 1e-9 {
			return fmt.Sprintf("%.1f", f)
		}
		return fmt.Sprint(f)
	}())
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		PI = 3.141592653589793
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
