//go:build ignore

// Generated by Mochi v0.10.67 on 2025-08-16 19:50:38 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"strings"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		return
	}
	s[idx] = v
}

func contains_int(xs []int, x int) bool {
	var i int = 0
	_ = i
	for i < len(xs) {
		if _index(xs, i) == x {
			return true
		}
		i = (i + 1)
	}
	return false
}

func contains_string(xs []string, x string) bool {
	var i int = 0
	_ = i
	for i < len(xs) {
		if _index(xs, i) == x {
			return true
		}
		i = (i + 1)
	}
	return false
}

func count_int(xs []int, x int) int {
	var cnt int = 0
	_ = cnt
	var i int = 0
	_ = i
	for i < len(xs) {
		if _index(xs, i) == x {
			cnt = (cnt + 1)
		}
		i = (i + 1)
	}
	return cnt
}

func count_string(xs []string, x string) int {
	var cnt int = 0
	_ = cnt
	var i int = 0
	_ = i
	for i < len(xs) {
		if _index(xs, i) == x {
			cnt = (cnt + 1)
		}
		i = (i + 1)
	}
	return cnt
}

func sort_int(xs []int) []int {
	var arr []int = xs
	_ = arr
	var i int = 0
	_ = i
	for i < len(arr) {
		var j int = (i + 1)
		_ = j
		for j < len(arr) {
			if _index(arr, j) < _index(arr, i) {
				var tmp int = _index(arr, i)
				_ = tmp
				_setIndex(arr, i, _index(arr, j))
				_setIndex(arr, j, tmp)
			}
			j = (j + 1)
		}
		i = (i + 1)
	}
	return arr
}

func sort_string(xs []string) []string {
	var arr []string = xs
	_ = arr
	var i int = 0
	_ = i
	for i < len(arr) {
		var j int = (i + 1)
		_ = j
		for j < len(arr) {
			if _index(arr, j) < _index(arr, i) {
				var tmp string = _index(arr, i)
				_ = tmp
				_setIndex(arr, i, _index(arr, j))
				_setIndex(arr, j, tmp)
			}
			j = (j + 1)
		}
		i = (i + 1)
	}
	return arr
}

func mode_int(lst []int) []int {
	if len(lst) == 0 {
		return func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}([]int{})
	}
	var counts []int = []int{}
	_ = counts
	var i int = 0
	_ = i
	for i < len(lst) {
		counts = append(counts, count_int(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(lst), _index(lst, i)))
		i = (i + 1)
	}
	var max_count int = 0
	_ = max_count
	i = 0
	for i < len(counts) {
		if _index(counts, i) > max_count {
			max_count = _index(counts, i)
		}
		i = (i + 1)
	}
	var modes []int = []int{}
	_ = modes
	i = 0
	for i < len(lst) {
		if _index(counts, i) == max_count {
			var v int = _index(lst, i)
			_ = v
			if !contains_int(func(v any) []int {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]int); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []int{}
					}
					out := make([]int, len(arr))
					for i, x := range arr {
						out[i] = x.(int)
					}
					return out
				}
				return v.([]int)
			}(modes), v) {
				modes = append(modes, v)
			}
		}
		i = (i + 1)
	}
	return sort_int(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(modes))
}

func mode_string(lst []string) []string {
	if len(lst) == 0 {
		return func(v any) []string {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]string); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []string{}
				}
				out := make([]string, len(arr))
				for i, x := range arr {
					out[i] = fmt.Sprint(x)
				}
				return out
			}
			return v.([]string)
		}([]string{})
	}
	var counts []int = []int{}
	_ = counts
	var i int = 0
	_ = i
	for i < len(lst) {
		counts = append(counts, count_string(func(v any) []string {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]string); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []string{}
				}
				out := make([]string, len(arr))
				for i, x := range arr {
					out[i] = fmt.Sprint(x)
				}
				return out
			}
			return v.([]string)
		}(lst), _index(lst, i)))
		i = (i + 1)
	}
	var max_count int = 0
	_ = max_count
	i = 0
	for i < len(counts) {
		if _index(counts, i) > max_count {
			max_count = _index(counts, i)
		}
		i = (i + 1)
	}
	var modes []string = []string{}
	_ = modes
	i = 0
	for i < len(lst) {
		if _index(counts, i) == max_count {
			var v string = _index(lst, i)
			_ = v
			if !contains_string(func(v any) []string {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]string); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []string{}
					}
					out := make([]string, len(arr))
					for i, x := range arr {
						out[i] = fmt.Sprint(x)
					}
					return out
				}
				return v.([]string)
			}(modes), v) {
				modes = append(modes, v)
			}
		}
		i = (i + 1)
	}
	return sort_string(func(v any) []string {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]string); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []string{}
			}
			out := make([]string, len(arr))
			for i, x := range arr {
				out[i] = fmt.Sprint(x)
			}
			return out
		}
		return v.([]string)
	}(modes))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(func() string {
			b, _ := json.Marshal(mode_int(func(v any) []int {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]int); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []int{}
					}
					out := make([]int, len(arr))
					for i, x := range arr {
						out[i] = x.(int)
					}
					return out
				}
				return v.([]int)
			}([]int{2, 3, 4, 5, 3, 4, 2, 5, 2, 2, 4, 2, 2, 2})))
			s := string(b)
			s = strings.ReplaceAll(s, ":", ": ")
			s = strings.ReplaceAll(s, ",", ", ")
			s = strings.ReplaceAll(s, "}, {", "},{")
			return s
		}())
		fmt.Println(func() string {
			b, _ := json.Marshal(mode_int(func(v any) []int {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]int); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []int{}
					}
					out := make([]int, len(arr))
					for i, x := range arr {
						out[i] = x.(int)
					}
					return out
				}
				return v.([]int)
			}([]int{3, 4, 5, 3, 4, 2, 5, 2, 2, 4, 4, 2, 2, 2})))
			s := string(b)
			s = strings.ReplaceAll(s, ":", ": ")
			s = strings.ReplaceAll(s, ",", ", ")
			s = strings.ReplaceAll(s, "}, {", "},{")
			return s
		}())
		fmt.Println(func() string {
			b, _ := json.Marshal(mode_int(func(v any) []int {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]int); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []int{}
					}
					out := make([]int, len(arr))
					for i, x := range arr {
						out[i] = x.(int)
					}
					return out
				}
				return v.([]int)
			}([]int{3, 4, 5, 3, 4, 2, 5, 2, 2, 4, 4, 4, 2, 2, 4, 2})))
			s := string(b)
			s = strings.ReplaceAll(s, ":", ": ")
			s = strings.ReplaceAll(s, ",", ", ")
			s = strings.ReplaceAll(s, "}, {", "},{")
			return s
		}())
		fmt.Println(func() string {
			b, _ := json.Marshal(mode_string(func(v any) []string {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]string); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []string{}
					}
					out := make([]string, len(arr))
					for i, x := range arr {
						out[i] = fmt.Sprint(x)
					}
					return out
				}
				return v.([]string)
			}([]string{"x", "y", "y", "z"})))
			s := string(b)
			s = strings.ReplaceAll(s, ":", ": ")
			s = strings.ReplaceAll(s, ",", ", ")
			s = strings.ReplaceAll(s, "}, {", "},{")
			return s
		}())
		fmt.Println(func() string {
			b, _ := json.Marshal(mode_string(func(v any) []string {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]string); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []string{}
					}
					out := make([]string, len(arr))
					for i, x := range arr {
						out[i] = fmt.Sprint(x)
					}
					return out
				}
				return v.([]string)
			}([]string{"x", "x", "y", "y", "z"})))
			s := string(b)
			s = strings.ReplaceAll(s, ":", ": ")
			s = strings.ReplaceAll(s, ",", ", ")
			s = strings.ReplaceAll(s, "}, {", "},{")
			return s
		}())
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
