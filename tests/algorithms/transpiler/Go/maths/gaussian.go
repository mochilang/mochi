//go:build ignore

// Generated by Mochi v0.10.63 on 2025-08-12 08:23:03 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	math "math"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

var PI float64

func sqrtApprox(x float64) float64 {
	var guess float64 = (float64(x) / float64(2.0))
	_ = guess
	var i int = 0
	_ = i
	for i < 20 {
		guess = (float64((guess + (float64(x) / float64(guess)))) / float64(2.0))
		i = (i + 1)
	}
	return guess
}

func expApprox(x float64) float64 {
	var is_neg bool = false
	_ = is_neg
	var y float64 = x
	_ = y
	if x < 0.0 {
		is_neg = true
		y = (0 - x)
	}
	var term float64 = 1.0
	_ = term
	var sum float64 = 1.0
	_ = sum
	var n int = 1
	_ = n
	for n < 30 {
		term = (float64((term * y)) / float64(n))
		sum = (sum + term)
		n = (n + 1)
	}
	if is_neg {
		return (float64(1.0) / float64(sum))
	}
	return sum
}

func gaussian(x float64, mu float64, sigma float64) float64 {
	var coeff float64 = (float64(1.0) / float64(sqrtApprox((((2.0 * PI) * sigma) * sigma))))
	_ = coeff
	_ = coeff
	var exponent float64 = (float64((0 - ((x - mu) * (x - mu)))) / float64(((2.0 * sigma) * sigma)))
	_ = exponent
	_ = exponent
	return (coeff * expApprox(exponent))
}

func mochiMain() {
	var result float64 = gaussian(1.0, 0.0, 1.0)
	_ = result
	_ = result
	fmt.Println(func() string {
		f := float64(result)
		if f == 0 && math.Signbit(f) {
			return "-0"
		}
		if f == float64(int(f)) {
			return fmt.Sprintf("%.1f", f)
		}
		return fmt.Sprint(f)
	}())
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		PI = 3.141592653589793
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
