//go:build ignore

// Generated by Mochi v0.10.63 on 2025-08-12 08:25:37 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _mod(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func int_pow(base int, exp int) int {
	var result int = 1
	_ = result
	var i int = 0
	_ = i
	for i < exp {
		result = (result * base)
		i = (i + 1)
	}
	return result
}

func karatsuba(a int, b int) int {
	if (len(fmt.Sprint(a)) == 1) || (len(fmt.Sprint(b)) == 1) {
		return (a * b)
	}
	var m1 int = len(fmt.Sprint(a))
	_ = m1
	var lb int = len(fmt.Sprint(b))
	_ = lb
	if lb > m1 {
		m1 = lb
	}
	var m2 int = (m1 / 2)
	_ = m2
	var power int = int_pow(10, m2)
	_ = power
	var a1 int = (a / power)
	_ = a1
	var a2 int = _mod(a, power)
	_ = a2
	var b1 int = (b / power)
	_ = b1
	var b2 int = _mod(b, power)
	_ = b2
	var x int = karatsuba(a2, b2)
	_ = x
	var y int = karatsuba((a1 + a2), (b1 + b2))
	_ = y
	var z int = karatsuba(a1, b1)
	_ = z
	var result int = (((z * int_pow(10, (2*m2))) + (((y - z) - x) * power)) + x)
	_ = result
	_ = result
	return result
}

func mochiMain() {
	fmt.Println(fmt.Sprint(karatsuba(15463, 23489)))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
