//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-15 10:32:25 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _modi(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func pow_int(base int, exp int) int {
	var result int = 1
	_ = result
	var i int = 0
	_ = i
	for i < exp {
		result = (result * base)
		i = (i + 1)
	}
	return result
}

func prime_factors(n int) []int {
	if n <= 0 {
		panic("Only positive integers have prime factors")
	}
	var num int = n
	_ = num
	var pf []int = []int{}
	_ = pf
	for _modi(num, 2) == 0 {
		pf = append(pf, 2)
		num = (num / 2)
	}
	var i int = 3
	_ = i
	for (i * i) <= num {
		for _modi(num, i) == 0 {
			pf = append(pf, i)
			num = (num / i)
		}
		i = (i + 2)
	}
	if num > 2 {
		pf = append(pf, num)
	}
	return pf
}

func number_of_divisors(n int) int {
	if n <= 0 {
		panic("Only positive numbers are accepted")
	}
	var num int = n
	_ = num
	var div int = 1
	_ = div
	var temp int = 1
	_ = temp
	for _modi(num, 2) == 0 {
		temp = (temp + 1)
		num = (num / 2)
	}
	div = (div * temp)
	var i int = 3
	_ = i
	for (i * i) <= num {
		temp = 1
		for _modi(num, i) == 0 {
			temp = (temp + 1)
			num = (num / i)
		}
		div = (div * temp)
		i = (i + 2)
	}
	if num > 1 {
		div = (div * 2)
	}
	return div
}

func sum_of_divisors(n int) int {
	if n <= 0 {
		panic("Only positive numbers are accepted")
	}
	var num int = n
	_ = num
	var s int = 1
	_ = s
	var temp int = 1
	_ = temp
	for _modi(num, 2) == 0 {
		temp = (temp + 1)
		num = (num / 2)
	}
	if temp > 1 {
		s = (s * ((pow_int(2, temp) - 1) / (2 - 1)))
	}
	var i int = 3
	_ = i
	for (i * i) <= num {
		temp = 1
		for _modi(num, i) == 0 {
			temp = (temp + 1)
			num = (num / i)
		}
		if temp > 1 {
			s = (s * ((pow_int(i, temp) - 1) / (i - 1)))
		}
		i = (i + 2)
	}
	return s
}

func contains(arr []int, x int) bool {
	var idx int = 0
	_ = idx
	for idx < len(arr) {
		if _index(arr, idx) == x {
			return true
		}
		idx = (idx + 1)
	}
	return false
}

func unique(arr []int) []int {
	var result []int = []int{}
	_ = result
	var idx int = 0
	_ = idx
	for idx < len(arr) {
		var v int = _index(arr, idx)
		_ = v
		if !contains(result, v) {
			result = append(result, v)
		}
		idx = (idx + 1)
	}
	return result
}

func euler_phi(n int) int {
	if n <= 0 {
		panic("Only positive numbers are accepted")
	}
	var s int = n
	_ = s
	var factors []int = unique(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(prime_factors(n)))
	_ = factors
	var idx int = 0
	_ = idx
	for idx < len(factors) {
		var x int = _index(factors, idx)
		_ = x
		s = ((s / x) * (x - 1))
		idx = (idx + 1)
	}
	return s
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(fmt.Sprint(prime_factors(100)))
		fmt.Println(fmt.Sprint(number_of_divisors(100)))
		fmt.Println(fmt.Sprint(sum_of_divisors(100)))
		fmt.Println(fmt.Sprint(euler_phi(100)))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
