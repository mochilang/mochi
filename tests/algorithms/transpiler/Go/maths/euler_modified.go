//go:build ignore

// Generated by Mochi v0.10.63 on 2025-08-12 07:54:19 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	math "math"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

func ceil_float(x float64) int {
	var i int = int(x)
	_ = i
	if x > float64(i) {
		return (i + 1)
	}
	return i
}

func exp_approx(x float64) float64 {
	var term float64 = 1.0
	_ = term
	var sum float64 = 1.0
	_ = sum
	var n int = 1
	_ = n
	for n < 20 {
		term = (float64((term * x)) / float64(n))
		sum = (sum + term)
		n = (n + 1)
	}
	return sum
}

func euler_modified(ode_func func(float64, float64) float64, y0 float64, x0 float64, step float64, x_end float64) []float64 {
	var n int = ceil_float((float64((x_end - x0)) / float64(step)))
	_ = n
	var y []float64 = []float64{y0}
	_ = y
	var x float64 = x0
	_ = x
	var k int = 0
	_ = k
	for k < n {
		var y_predict float64 = (_index(y, k) + (step * ode_func(x, _index(y, k))))
		_ = y_predict
		var slope1 float64 = ode_func(x, _index(y, k))
		_ = slope1
		var slope2 float64 = ode_func((x + step), y_predict)
		_ = slope2
		var y_next float64 = (_index(y, k) + ((float64(step) / float64(2.0)) * (slope1 + slope2)))
		_ = y_next
		y = append(y, y_next)
		x = (x + step)
		k = (k + 1)
	}
	return y
}

func f1(x float64, y float64) float64 {
	return ((((0 - 2.0) * x) * y) * y)
}

func f2(x float64, y float64) float64 {
	return (((0 - 2.0) * y) + (((x * x) * x) * exp_approx(((0 - 2.0) * x))))
}

func mochiMain() {
	var y1 []float64 = euler_modified(f1, 1.0, 0.0, 0.2, 1.0)
	_ = y1
	_ = y1
	fmt.Println(func() string {
		f := float64(_index(y1, (len(y1) - 1)))
		if f == 0 && math.Signbit(f) {
			return "-0"
		}
		if f == float64(int(f)) {
			return fmt.Sprintf("%.1f", f)
		}
		return fmt.Sprint(f)
	}())
	var y2 []float64 = euler_modified(f2, 1.0, 0.0, 0.1, 0.3)
	_ = y2
	_ = y2
	fmt.Println(func() string {
		f := float64(_index(y2, (len(y2) - 1)))
		if f == 0 && math.Signbit(f) {
			return "-0"
		}
		if f == float64(int(f)) {
			return fmt.Sprintf("%.1f", f)
		}
		return fmt.Sprint(f)
	}())
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
