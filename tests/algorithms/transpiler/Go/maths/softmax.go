//go:build ignore

// Generated by Mochi v0.10.64 on 2025-08-12 16:20:24 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

func exp_approx(x float64) float64 {
	var term float64 = 1.0
	_ = term
	var sum float64 = 1.0
	_ = sum
	var i int = 1
	_ = i
	for i < 20 {
		term = (float64((term * x)) / float64(i))
		sum = (sum + term)
		i = (i + 1)
	}
	return sum
}

func softmax(vec []float64) []float64 {
	var exps []float64 = []float64{}
	_ = exps
	var i int = 0
	_ = i
	for i < len(vec) {
		exps = append(exps, exp_approx(_index(vec, i)))
		i = (i + 1)
	}
	var total float64 = 0.0
	_ = total
	i = 0
	for i < len(exps) {
		total = (total + _index(exps, i))
		i = (i + 1)
	}
	var result []float64 = []float64{}
	_ = result
	i = 0
	for i < len(exps) {
		result = append(result, (float64(_index(exps, i)) / float64(total)))
		i = (i + 1)
	}
	return result
}

func abs_val(x float64) float64 {
	if x < 0.0 {
		return (0 - x)
	}
	return x
}

func approx_equal(a float64, b float64) bool {
	return (abs_val((a - b)) < 0.0001)
}

func test_softmax() {
	var s1 []float64 = softmax(func(v any) []float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []float64{}
			}
			out := make([]float64, len(arr))
			for i, x := range arr {
				out[i] = x.(float64)
			}
			return out
		}
		return v.([]float64)
	}([]float64{1.0, 2.0, 3.0, 4.0}))
	_ = s1
	var sum1 float64 = 0.0
	_ = sum1
	var i int = 0
	_ = i
	for i < len(s1) {
		sum1 = (sum1 + _index(s1, i))
		i = (i + 1)
	}
	if !approx_equal(sum1, 1.0) {
		panic("sum test failed")
	}
	var s2 []float64 = softmax(func(v any) []float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []float64{}
			}
			out := make([]float64, len(arr))
			for i, x := range arr {
				out[i] = x.(float64)
			}
			return out
		}
		return v.([]float64)
	}([]float64{5.0, 5.0}))
	_ = s2
	if !(approx_equal(_index(s2, 0), 0.5) && approx_equal(_index(s2, 1), 0.5)) {
		panic("equal elements test failed")
	}
	var s3 []float64 = softmax(func(v any) []float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []float64{}
			}
			out := make([]float64, len(arr))
			for i, x := range arr {
				out[i] = x.(float64)
			}
			return out
		}
		return v.([]float64)
	}([]float64{0.0}))
	_ = s3
	if !approx_equal(_index(s3, 0), 1.0) {
		panic("zero vector test failed")
	}
}

func mochiMain() {
	test_softmax()
	fmt.Println(fmt.Sprint(softmax(func(v any) []float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []float64{}
			}
			out := make([]float64, len(arr))
			for i, x := range arr {
				out[i] = x.(float64)
			}
			return out
		}
		return v.([]float64)
	}([]float64{1.0, 2.0, 3.0, 4.0}))))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
