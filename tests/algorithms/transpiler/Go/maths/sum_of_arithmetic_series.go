//go:build ignore

// Generated by Mochi v0.10.67 on 2025-08-17 12:39:51 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

func sum_of_series(first_term int, common_diff int, num_of_terms int) int {
	var total int = ((num_of_terms * ((2 * first_term) + ((num_of_terms - 1) * common_diff))) / 2)
	_ = total
	_ = total
	return total
}

func test_sum_of_series() {
	if sum_of_series(1, 1, 10) != 55 {
		panic("sum_of_series(1, 1, 10) failed")
	}
	if sum_of_series(1, 10, 100) != 49600 {
		panic("sum_of_series(1, 10, 100) failed")
	}
}

func mochiMain() {
	test_sum_of_series()
	fmt.Println(sum_of_series(1, 1, 10))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
