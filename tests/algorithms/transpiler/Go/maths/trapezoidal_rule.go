//go:build ignore

// Generated by Mochi v0.10.67 on 2025-08-17 12:40:04 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func f(x float64) float64 {
	return (x * x)
}

func make_points(a float64, b float64, h float64) []float64 {
	var xs []float64 = []float64{}
	_ = xs
	var x float64 = (a + h)
	_ = x
	for x <= (b - h) {
		xs = append(xs, x)
		x = (x + h)
	}
	return xs
}

func trapezoidal_rule(boundary []float64, steps float64) float64 {
	var h float64 = (float64((_index(boundary, 1) - _index(boundary, 0))) / float64(steps))
	_ = h
	var a float64 = _index(boundary, 0)
	_ = a
	var b float64 = _index(boundary, 1)
	_ = b
	var xs []float64 = make_points(a, b, h)
	_ = xs
	var y float64 = ((float64(h) / float64(2.0)) * f(a))
	_ = y
	var i int = 0
	_ = i
	for i < len(xs) {
		y = (y + (h * f(_index(xs, i))))
		i = (i + 1)
	}
	y = (y + ((float64(h) / float64(2.0)) * f(b)))
	return y
}

var a float64

var b float64

var steps float64

var boundary []float64

var y float64

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		a = 0.0
		b = 1.0
		steps = 10.0
		boundary = []float64{a, b}
		y = trapezoidal_rule(func(v any) []float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []float64{}
				}
				out := make([]float64, len(arr))
				for i, x := range arr {
					out[i] = x.(float64)
				}
				return out
			}
			return v.([]float64)
		}(boundary), steps)
		fmt.Println(("y = " + fmt.Sprint(y)))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
