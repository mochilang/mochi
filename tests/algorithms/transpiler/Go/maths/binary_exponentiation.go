//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-16 12:06:42 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	math "math"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _modi(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func binary_exp_recursive(base float64, exponent int) float64 {
	if exponent < 0 {
		panic("exponent must be non-negative")
	}
	if exponent == 0 {
		return 1.0
	}
	if _modi(exponent, 2) == 1 {
		return (binary_exp_recursive(base, (exponent-1)) * base)
	}
	var half float64 = binary_exp_recursive(base, (exponent / 2))
	_ = half
	_ = half
	return (half * half)
}

func binary_exp_iterative(base float64, exponent int) float64 {
	if exponent < 0 {
		panic("exponent must be non-negative")
	}
	var result float64 = 1.0
	_ = result
	var b float64 = base
	_ = b
	var e int = exponent
	_ = e
	for e > 0 {
		if _modi(e, 2) == 1 {
			result = (result * b)
		}
		b = (b * b)
		e = (e / 2)
	}
	return result
}

func binary_exp_mod_recursive(base int, exponent int, modulus int) int {
	if exponent < 0 {
		panic("exponent must be non-negative")
	}
	if modulus <= 0 {
		panic("modulus must be positive")
	}
	if exponent == 0 {
		return _modi(1, modulus)
	}
	if _modi(exponent, 2) == 1 {
		return _modi((binary_exp_mod_recursive(base, (exponent-1), modulus) * _modi(base, modulus)), modulus)
	}
	var r int = binary_exp_mod_recursive(base, (exponent / 2), modulus)
	_ = r
	_ = r
	return _modi((r * r), modulus)
}

func binary_exp_mod_iterative(base int, exponent int, modulus int) int {
	if exponent < 0 {
		panic("exponent must be non-negative")
	}
	if modulus <= 0 {
		panic("modulus must be positive")
	}
	var result int = _modi(1, modulus)
	_ = result
	var b int = _modi(base, modulus)
	_ = b
	var e int = exponent
	_ = e
	for e > 0 {
		if _modi(e, 2) == 1 {
			result = _modi((result * b), modulus)
		}
		b = _modi((b * b), modulus)
		e = (e / 2)
	}
	return result
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(func() string {
			f := float64(binary_exp_recursive(3.0, 5))
			if f == 0 && math.Signbit(f) {
				return "-0"
			}
			if f == float64(int(f)) {
				return fmt.Sprintf("%.1f", f)
			}
			return fmt.Sprint(f)
		}())
		fmt.Println(func() string {
			f := float64(binary_exp_iterative(1.5, 4))
			if f == 0 && math.Signbit(f) {
				return "-0"
			}
			if f == float64(int(f)) {
				return fmt.Sprintf("%.1f", f)
			}
			return fmt.Sprint(f)
		}())
		fmt.Println(binary_exp_mod_recursive(3, 4, 5))
		fmt.Println(binary_exp_mod_iterative(11, 13, 7))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
