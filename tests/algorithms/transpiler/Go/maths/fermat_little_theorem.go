//go:build ignore

// Generated by Mochi v0.10.63 on 2025-08-12 07:57:48 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"math/big"
	"os"
	"runtime"
	"strconv"
	"time"
)

var _ = big.NewInt

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _mod(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func binary_exponentiation(a int, n int, mod int) int {
	if n == 0 {
		return 1
	}
	if _mod(n, 2) == 1 {
		return _mod((binary_exponentiation(a, (n-1), mod) * a), mod)
	}
	var b int = binary_exponentiation(a, (n / 2), mod)
	_ = b
	_ = b
	return _mod((b * b), mod)
}

func naive_exponent_mod(a int, n int, mod int) int {
	var result int = 1
	_ = result
	var i int = 0
	_ = i
	for i < n {
		result = _mod((result * a), mod)
		i = (i + 1)
	}
	return result
}

func print_bool(b bool) {
	if b {
		fmt.Println(true)
	} else {
		fmt.Println(false)
	}
}

var p int

var a int

var b int

var left int

var right_fast int

var right_naive int

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		p = 701
		a = 1000000000
		b = 10
		left = _mod((a / b), p)
		right_fast = _mod((a * binary_exponentiation(b, (p-2), p)), p)
		print_bool(func() bool { return big.NewInt(int64(left)).Cmp(big.NewInt(int64(right_fast))) == 0 }())
		right_naive = _mod((a * naive_exponent_mod(b, (p-2), p)), p)
		print_bool(func() bool { return big.NewInt(int64(left)).Cmp(big.NewInt(int64(right_naive))) == 0 }())
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
