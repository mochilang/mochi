//go:build ignore

// Generated by Mochi v0.10.64 on 2025-08-12 16:24:01 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func factorial(n int) int {
	if n < 0 {
		panic("factorial() not defined for negative values")
	}
	var value int = 1
	_ = value
	var i int = 1
	_ = i
	for i <= n {
		value = (value * i)
		i = (i + 1)
	}
	return value
}

func factorial_recursive(n int) int {
	if n < 0 {
		panic("factorial() not defined for negative values")
	}
	if n <= 1 {
		return 1
	}
	return (n * factorial_recursive((n - 1)))
}

func test_zero() {
	if factorial(0) != 1 {
		panic("factorial(0) failed")
	}
	if factorial_recursive(0) != 1 {
		panic("factorial_recursive(0) failed")
	}
}

func test_positive_integers() {
	if factorial(1) != 1 {
		panic("factorial(1) failed")
	}
	if factorial_recursive(1) != 1 {
		panic("factorial_recursive(1) failed")
	}
	if factorial(5) != 120 {
		panic("factorial(5) failed")
	}
	if factorial_recursive(5) != 120 {
		panic("factorial_recursive(5) failed")
	}
	if factorial(7) != 5040 {
		panic("factorial(7) failed")
	}
	if factorial_recursive(7) != 5040 {
		panic("factorial_recursive(7) failed")
	}
}

func test_large_number() {
	if factorial(10) != 3628800 {
		panic("factorial(10) failed")
	}
	if factorial_recursive(10) != 3628800 {
		panic("factorial_recursive(10) failed")
	}
}

func run_tests() {
	test_zero()
	test_positive_integers()
	test_large_number()
}

func mochiMain() {
	run_tests()
	fmt.Println(factorial(6))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
