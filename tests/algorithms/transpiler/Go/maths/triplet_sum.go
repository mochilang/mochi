//go:build ignore

// Generated by Mochi v0.10.64 on 2025-08-12 16:24:06 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	s[idx] = v
}

func bubble_sort(nums []int) []int {
	var arr []int = []int{}
	_ = arr
	var i int = 0
	_ = i
	for i < len(nums) {
		arr = append(arr, _index(nums, i))
		i = (i + 1)
	}
	var n int = len(arr)
	_ = n
	var a int = 0
	_ = a
	for a < n {
		var b int = 0
		_ = b
		for b < ((n - a) - 1) {
			if int(_index(arr, b)) > int(_index(arr, (b+1))) {
				var tmp int = _index(arr, b)
				_ = tmp
				_setIndex(arr, b, _index(arr, (b+1)))
				_setIndex(arr, (b + 1), tmp)
			}
			b = (b + 1)
		}
		a = (a + 1)
	}
	return arr
}

func sort3(xs []int) []int {
	var arr []int = []int{}
	_ = arr
	var i int = 0
	_ = i
	for i < len(xs) {
		arr = append(arr, _index(xs, i))
		i = (i + 1)
	}
	var n int = len(arr)
	_ = n
	var a int = 0
	_ = a
	for a < n {
		var b int = 0
		_ = b
		for b < ((n - a) - 1) {
			if int(_index(arr, b)) > int(_index(arr, (b+1))) {
				var tmp int = _index(arr, b)
				_ = tmp
				_setIndex(arr, b, _index(arr, (b+1)))
				_setIndex(arr, (b + 1), tmp)
			}
			b = (b + 1)
		}
		a = (a + 1)
	}
	return arr
}

func triplet_sum1(arr []int, target int) []int {
	var i int = 0
	_ = i
	for i < (len(arr) - 2) {
		var j int = (i + 1)
		_ = j
		for j < (len(arr) - 1) {
			var k int = (j + 1)
			_ = k
			for k < len(arr) {
				if ((int(_index(arr, i)) + int(_index(arr, j))) + int(_index(arr, k))) == target {
					return sort3(func(v any) []int {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]int); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []int{}
							}
							out := make([]int, len(arr))
							for i, x := range arr {
								out[i] = x.(int)
							}
							return out
						}
						return v.([]int)
					}([]int{func(v any) int {
						if vv, ok := v.(int); ok {
							return vv
						}
						return 0
					}(_index(arr, i)), func(v any) int {
						if vv, ok := v.(int); ok {
							return vv
						}
						return 0
					}(_index(arr, j)), func(v any) int {
						if vv, ok := v.(int); ok {
							return vv
						}
						return 0
					}(_index(arr, k))}))
				}
				k = (k + 1)
			}
			j = (j + 1)
		}
		i = (i + 1)
	}
	return []int{0, 0, 0}
}

func triplet_sum2(arr []int, target int) []int {
	var sorted []int = bubble_sort(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(arr))
	_ = sorted
	var n int = len(sorted)
	_ = n
	var i int = 0
	_ = i
	for i < (n - 2) {
		var left int = (i + 1)
		_ = left
		var right int = (n - 1)
		_ = right
		for left < right {
			var s int = ((int(_index(sorted, i)) + int(_index(sorted, left))) + int(_index(sorted, right)))
			_ = s
			if s == target {
				return []int{func(v any) int {
					if vv, ok := v.(int); ok {
						return vv
					}
					return 0
				}(_index(sorted, i)), func(v any) int {
					if vv, ok := v.(int); ok {
						return vv
					}
					return 0
				}(_index(sorted, left)), func(v any) int {
					if vv, ok := v.(int); ok {
						return vv
					}
					return 0
				}(_index(sorted, right))}
			}
			if s < target {
				left = (left + 1)
			} else {
				right = (right - 1)
			}
		}
		i = (i + 1)
	}
	return []int{0, 0, 0}
}

func list_equal(a []int, b []int) bool {
	if len(a) != len(b) {
		return false
	}
	var i int = 0
	_ = i
	for i < len(a) {
		if int(_index(a, i)) != int(_index(b, i)) {
			return false
		}
		i = (i + 1)
	}
	return true
}

func test_triplet_sum() {
	var arr1 []int = []int{13, 29, 7, 23, 5}
	_ = arr1
	if !list_equal(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(triplet_sum1(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(arr1), 35)), func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}([]int{5, 7, 23})) {
		panic("ts1 case1 failed")
	}
	if !list_equal(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(triplet_sum2(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(arr1), 35)), func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}([]int{5, 7, 23})) {
		panic("ts2 case1 failed")
	}
	var arr2 []int = []int{37, 9, 19, 50, 44}
	_ = arr2
	if !list_equal(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(triplet_sum1(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(arr2), 65)), func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}([]int{9, 19, 37})) {
		panic("ts1 case2 failed")
	}
	if !list_equal(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(triplet_sum2(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(arr2), 65)), func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}([]int{9, 19, 37})) {
		panic("ts2 case2 failed")
	}
	var arr3 []int = []int{6, 47, 27, 1, 15}
	_ = arr3
	if !list_equal(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(triplet_sum1(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(arr3), 11)), func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}([]int{0, 0, 0})) {
		panic("ts1 case3 failed")
	}
	if !list_equal(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(triplet_sum2(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(arr3), 11)), func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}([]int{0, 0, 0})) {
		panic("ts2 case3 failed")
	}
}

func mochiMain() {
	test_triplet_sum()
	var sample []int = []int{13, 29, 7, 23, 5}
	_ = sample
	var res []int = triplet_sum2(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(sample), 35)
	_ = res
	fmt.Println(((((fmt.Sprint(_index(res, 0)) + " ") + fmt.Sprint(_index(res, 1))) + " ") + fmt.Sprint(_index(res, 2))))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
