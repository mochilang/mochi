//go:build ignore

// Generated by Mochi v0.10.63 on 2025-08-12 08:22:58 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

func find_min_iterative(nums []float64) float64 {
	if len(nums) == 0 {
		panic("find_min_iterative() arg is an empty sequence")
	}
	var min_num float64 = _index(nums, 0)
	_ = min_num
	var i int = 0
	_ = i
	for i < len(nums) {
		var num float64 = _index(nums, i)
		_ = num
		if num < min_num {
			min_num = num
		}
		i = (i + 1)
	}
	return min_num
}

func find_min_recursive(nums []float64, left int, right int) float64 {
	var n int = len(nums)
	_ = n
	if n == 0 {
		panic("find_min_recursive() arg is an empty sequence")
	}
	if (((left >= n) || (left < (0 - n))) || (right >= n)) || (right < (0 - n)) {
		panic("list index out of range")
	}
	var l int = left
	_ = l
	var r int = right
	_ = r
	if l < 0 {
		l = (n + l)
	}
	if r < 0 {
		r = (n + r)
	}
	if l == r {
		return _index(nums, l)
	}
	var mid int = ((l + r) / 2)
	_ = mid
	var left_min float64 = find_min_recursive(func(v any) []float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []float64{}
			}
			out := make([]float64, len(arr))
			for i, x := range arr {
				out[i] = x.(float64)
			}
			return out
		}
		return v.([]float64)
	}(nums), l, mid)
	_ = left_min
	var right_min float64 = find_min_recursive(func(v any) []float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []float64{}
			}
			out := make([]float64, len(arr))
			for i, x := range arr {
				out[i] = x.(float64)
			}
			return out
		}
		return v.([]float64)
	}(nums), (mid + 1), r)
	_ = right_min
	if left_min <= right_min {
		return left_min
	}
	return right_min
}

func test_find_min() {
	var a []float64 = []float64{3.0, 2.0, 1.0}
	_ = a
	if find_min_iterative(func(v any) []float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []float64{}
			}
			out := make([]float64, len(arr))
			for i, x := range arr {
				out[i] = x.(float64)
			}
			return out
		}
		return v.([]float64)
	}(a)) != 1.0 {
		panic("iterative test1 failed")
	}
	if find_min_recursive(func(v any) []float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []float64{}
			}
			out := make([]float64, len(arr))
			for i, x := range arr {
				out[i] = x.(float64)
			}
			return out
		}
		return v.([]float64)
	}(a), 0, (len(a)-1)) != 1.0 {
		panic("recursive test1 failed")
	}
	var b []float64 = []float64{(0 - 3.0), (0 - 2.0), (0 - 1.0)}
	_ = b
	if find_min_iterative(func(v any) []float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []float64{}
			}
			out := make([]float64, len(arr))
			for i, x := range arr {
				out[i] = x.(float64)
			}
			return out
		}
		return v.([]float64)
	}(b)) != (0 - 3.0) {
		panic("iterative test2 failed")
	}
	if find_min_recursive(func(v any) []float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []float64{}
			}
			out := make([]float64, len(arr))
			for i, x := range arr {
				out[i] = x.(float64)
			}
			return out
		}
		return v.([]float64)
	}(b), 0, (len(b)-1)) != (0 - 3.0) {
		panic("recursive test2 failed")
	}
	var c []float64 = []float64{3.0, (0 - 3.0), 0.0}
	_ = c
	if find_min_iterative(func(v any) []float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []float64{}
			}
			out := make([]float64, len(arr))
			for i, x := range arr {
				out[i] = x.(float64)
			}
			return out
		}
		return v.([]float64)
	}(c)) != (0 - 3.0) {
		panic("iterative test3 failed")
	}
	if find_min_recursive(func(v any) []float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []float64{}
			}
			out := make([]float64, len(arr))
			for i, x := range arr {
				out[i] = x.(float64)
			}
			return out
		}
		return v.([]float64)
	}(c), 0, (len(c)-1)) != (0 - 3.0) {
		panic("recursive test3 failed")
	}
	var d []float64 = []float64{1.0, 3.0, 5.0, 7.0, 9.0, 2.0, 4.0, 6.0, 8.0, 10.0}
	_ = d
	if find_min_recursive(func(v any) []float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []float64{}
			}
			out := make([]float64, len(arr))
			for i, x := range arr {
				out[i] = x.(float64)
			}
			return out
		}
		return v.([]float64)
	}(d), (0-len(d)), (0-1)) != 1.0 {
		panic("negative index test failed")
	}
}

func mochiMain() {
	test_find_min()
	var sample []float64 = []float64{0.0, 1.0, 2.0, 3.0, 4.0, 5.0, (0 - 3.0), 24.0, (0 - 56.0)}
	_ = sample
	fmt.Println(fmt.Sprint(find_min_iterative(func(v any) []float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []float64{}
			}
			out := make([]float64, len(arr))
			for i, x := range arr {
				out[i] = x.(float64)
			}
			return out
		}
		return v.([]float64)
	}(sample))))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
