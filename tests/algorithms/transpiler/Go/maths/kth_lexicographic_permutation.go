//go:build ignore

// Generated by Mochi v0.10.63 on 2025-08-12 08:25:39 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _mod(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

func remove_at(xs []int, idx int) []int {
	var res []int = []int{}
	_ = res
	var i int = 0
	_ = i
	for i < len(xs) {
		if i != idx {
			res = append(res, _index(xs, i))
		}
		i = (i + 1)
	}
	return res
}

func kth_permutation(k int, n int) []int {
	if n <= 0 {
		panic("n must be positive")
	}
	var factorials []int = []int{func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(1)}
	_ = factorials
	var i int = 2
	_ = i
	for i < n {
		factorials = append(factorials, (int(_index(factorials, (len(factorials)-1))) * i))
		i = (i + 1)
	}
	var total int = (int(_index(factorials, (len(factorials)-1))) * n)
	_ = total
	if (k < 0) || (k >= total) {
		panic("k out of bounds")
	}
	var elements []int = []int{}
	_ = elements
	var e int = 0
	_ = e
	for e < n {
		elements = append(elements, e)
		e = (e + 1)
	}
	var permutation []int = []int{}
	_ = permutation
	var idx int = (len(factorials) - 1)
	_ = idx
	for idx >= 0 {
		var factorial int = _index(factorials, idx)
		_ = factorial
		var number int = (k / factorial)
		_ = number
		k = _mod(k, factorial)
		permutation = append(permutation, _index(elements, number))
		elements = remove_at(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(elements), number)
		idx = (idx - 1)
	}
	permutation = append(permutation, _index(elements, 0))
	return permutation
}

func list_equal(a []int, b []int) bool {
	if len(a) != len(b) {
		return false
	}
	var i int = 0
	_ = i
	for i < len(a) {
		if int(_index(a, i)) != int(_index(b, i)) {
			return false
		}
		i = (i + 1)
	}
	return true
}

func list_to_string(xs []int) string {
	if len(xs) == 0 {
		return "[]"
	}
	var s string = ("[" + fmt.Sprint(_index(xs, 0)))
	_ = s
	var i int = 1
	_ = i
	for i < len(xs) {
		s = ((s + ", ") + fmt.Sprint(_index(xs, i)))
		i = (i + 1)
	}
	s = (s + "]")
	return s
}

func test_kth_permutation() {
	var expected1 []int = []int{func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(0), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(1), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(2), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(3), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(4)}
	_ = expected1
	var res1 []int = kth_permutation(0, 5)
	_ = res1
	if !list_equal(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(res1), func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(expected1)) {
		panic("test case 1 failed")
	}
	var expected2 []int = []int{func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(1), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(3), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(0), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(2)}
	_ = expected2
	var res2 []int = kth_permutation(10, 4)
	_ = res2
	if !list_equal(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(res2), func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(expected2)) {
		panic("test case 2 failed")
	}
}

func mochiMain() {
	test_kth_permutation()
	var res []int = kth_permutation(10, 4)
	_ = res
	fmt.Println(list_to_string(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(res)))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
