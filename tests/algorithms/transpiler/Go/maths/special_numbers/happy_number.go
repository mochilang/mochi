//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-16 13:07:21 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _modi(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func is_happy_number(num int) bool {
	if num <= 0 {
		panic("num must be a positive integer")
	}
	var seen []int = []int{}
	_ = seen
	var n int = num
	_ = n
	for n != 1 {
		var i int = 0
		_ = i
		for i < len(seen) {
			if _index(seen, i) == n {
				return false
			}
			i = (i + 1)
		}
		seen = append(seen, n)
		var total int = 0
		_ = total
		var temp int = n
		_ = temp
		for temp > 0 {
			var digit int = _modi(temp, 10)
			_ = digit
			total = (total + (digit * digit))
			temp = (temp / 10)
		}
		n = total
	}
	return true
}

func test_is_happy_number() {
	if !is_happy_number(19) {
		panic("19 should be happy")
	}
	if is_happy_number(2) {
		panic("2 should be unhappy")
	}
	if !is_happy_number(23) {
		panic("23 should be happy")
	}
	if !is_happy_number(1) {
		panic("1 should be happy")
	}
}

func mochiMain() {
	test_is_happy_number()
	fmt.Println(is_happy_number(19))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
