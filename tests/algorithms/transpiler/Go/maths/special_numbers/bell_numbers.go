//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-16 13:07:15 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		return
	}
	s[idx] = v
}

func binomial_coefficient(total_elements int, elements_to_choose int) int {
	if (elements_to_choose == 0) || (elements_to_choose == total_elements) {
		return 1
	}
	var k int = elements_to_choose
	_ = k
	if k > (total_elements - k) {
		k = (total_elements - k)
	}
	var coefficient int = 1
	_ = coefficient
	var i int = 0
	_ = i
	for i < k {
		coefficient = (coefficient * (total_elements - i))
		coefficient = (coefficient / (i + 1))
		i = (i + 1)
	}
	return coefficient
}

func bell_numbers(max_set_length int) []int {
	if max_set_length < 0 {
		panic("max_set_length must be non-negative")
	}
	var bell []int = []int{}
	_ = bell
	var i int = 0
	_ = i
	for i <= max_set_length {
		bell = append(bell, 0)
		i = (i + 1)
	}
	_setIndex(bell, 0, 1)
	i = 1
	for i <= max_set_length {
		var j int = 0
		_ = j
		for j < i {
			_setIndex(bell, i, (_index(bell, i) + (binomial_coefficient((i-1), j) * _index(bell, j))))
			j = (j + 1)
		}
		i = (i + 1)
	}
	return bell
}

func mochiMain() {
	fmt.Println(fmt.Sprint(bell_numbers(5)))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
