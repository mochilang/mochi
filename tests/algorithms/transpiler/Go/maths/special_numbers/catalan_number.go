//go:build ignore

// Generated by Mochi v0.10.67 on 2025-08-17 12:39:34 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

func catalan(n int) int {
	if n < 1 {
		panic((("Input value of [number=" + fmt.Sprint(n)) + "] must be > 0"))
	}
	var current int = 1
	_ = current
	var i int = 1
	_ = i
	for i < n {
		current = (current * ((4 * i) - 2))
		current = int((current / (i + 1)))
		i = (i + 1)
	}
	return current
}

func mochiMain() {
	if catalan(1) != 1 {
		panic("catalan(1) should be 1")
	}
	if catalan(5) != 14 {
		panic("catalan(5) should be 14")
	}
	fmt.Println(fmt.Sprint(catalan(5)))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
