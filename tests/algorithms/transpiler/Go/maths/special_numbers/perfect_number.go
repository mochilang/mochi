//go:build ignore

// Generated by Mochi v0.10.67 on 2025-08-17 12:39:42 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

func _modi(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func perfect(n int) bool {
	if n <= 0 {
		return false
	}
	var limit int = (n / 2)
	_ = limit
	var sum int = 0
	_ = sum
	var i int = 1
	_ = i
	for i <= limit {
		if _modi(n, i) == 0 {
			sum = (sum + i)
		}
		i = (i + 1)
	}
	return (sum == n)
}

func mochiMain() {
	var numbers []int = []int{6, 28, 29, 12, 496, 8128, 0, func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}((0 - 1))}
	_ = numbers
	var idx int = 0
	_ = idx
	for idx < len(numbers) {
		var num int = _index(numbers, idx)
		_ = num
		if perfect(num) {
			fmt.Println((fmt.Sprint(num) + " is a Perfect Number."))
		} else {
			fmt.Println((fmt.Sprint(num) + " is not a Perfect Number."))
		}
		idx = (idx + 1)
	}
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
