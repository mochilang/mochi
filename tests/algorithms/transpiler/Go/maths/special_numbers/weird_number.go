//go:build ignore

// Generated by Mochi v0.10.67 on 2025-08-17 12:39:50 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"reflect"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

func _modi(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		return
	}
	s[idx] = v
}

func bubble_sort(xs []int) []int {
	var arr []int = xs
	_ = arr
	var n int = len(arr)
	_ = n
	var i int = 0
	_ = i
	for i < n {
		var j int = 0
		_ = j
		for j < ((n - i) - 1) {
			if _index(arr, j) > _index(arr, (j+1)) {
				var tmp int = _index(arr, j)
				_ = tmp
				_setIndex(arr, j, _index(arr, (j+1)))
				_setIndex(arr, (j + 1), tmp)
			}
			j = (j + 1)
		}
		i = (i + 1)
	}
	return arr
}

func factors(num int) []int {
	var values []int = []int{1}
	_ = values
	var i int = 2
	_ = i
	for (i * i) <= num {
		if _modi(num, i) == 0 {
			values = append(values, i)
			var d int = (num / i)
			_ = d
			if d != i {
				values = append(values, d)
			}
		}
		i = (i + 1)
	}
	return bubble_sort(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(values))
}

func sum_list(xs []int) int {
	var total int = 0
	_ = total
	var i int = 0
	_ = i
	for i < len(xs) {
		total = (total + _index(xs, i))
		i = (i + 1)
	}
	return total
}

func abundant(n int) bool {
	return (sum_list(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(factors(n))) > n)
}

func semi_perfect(number int) bool {
	if number <= 0 {
		return true
	}
	var values []int = factors(number)
	_ = values
	var possible []bool = []bool{}
	_ = possible
	var j int = 0
	_ = j
	for j <= number {
		possible = append(possible, (j == 0))
		j = (j + 1)
	}
	var idx int = 0
	_ = idx
	for idx < len(values) {
		var v int = _index(values, idx)
		_ = v
		var s int = number
		_ = s
		for s >= v {
			if _index(possible, (s - v)) {
				_setIndex(possible, s, true)
			}
			s = (s - 1)
		}
		idx = (idx + 1)
	}
	return _index(possible, number)
}

func weird(number int) bool {
	return (abundant(number) && (semi_perfect(number) == false))
}

func run_tests() {
	if !reflect.DeepEqual(factors(12), []int{1, 2, 3, 4, 6}) {
		panic("factors 12 failed")
	}
	if !reflect.DeepEqual(factors(1), []int{1}) {
		panic("factors 1 failed")
	}
	if !reflect.DeepEqual(factors(100), []int{1, 2, 4, 5, 10, 20, 25, 50}) {
		panic("factors 100 failed")
	}
	if abundant(0) != true {
		panic("abundant 0 failed")
	}
	if abundant(1) != false {
		panic("abundant 1 failed")
	}
	if abundant(12) != true {
		panic("abundant 12 failed")
	}
	if abundant(13) != false {
		panic("abundant 13 failed")
	}
	if abundant(20) != true {
		panic("abundant 20 failed")
	}
	if semi_perfect(0) != true {
		panic("semi_perfect 0 failed")
	}
	if semi_perfect(1) != true {
		panic("semi_perfect 1 failed")
	}
	if semi_perfect(12) != true {
		panic("semi_perfect 12 failed")
	}
	if semi_perfect(13) != false {
		panic("semi_perfect 13 failed")
	}
	if weird(0) != false {
		panic("weird 0 failed")
	}
	if weird(70) != true {
		panic("weird 70 failed")
	}
	if weird(77) != false {
		panic("weird 77 failed")
	}
}

func mochiMain() {
	run_tests()
	var nums []int = []int{69, 70, 71}
	_ = nums
	var i int = 0
	_ = i
	for i < len(nums) {
		var n int = _index(nums, i)
		_ = n
		if weird(n) {
			fmt.Println((fmt.Sprint(n) + " is weird."))
		} else {
			fmt.Println((fmt.Sprint(n) + " is not weird."))
		}
		i = (i + 1)
	}
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
