//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-16 13:07:19 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"strings"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func hamming(n int) []int {
	if n < 1 {
		panic("n_element should be a positive number")
	}
	var hamming_list []int = []int{1}
	_ = hamming_list
	var i int = 0
	_ = i
	var j int = 0
	_ = j
	var k int = 0
	_ = k
	var index int = 1
	_ = index
	for index < n {
		for (_index(hamming_list, i) * 2) <= _index(hamming_list, (len(hamming_list)-1)) {
			i = (i + 1)
		}
		for (_index(hamming_list, j) * 3) <= _index(hamming_list, (len(hamming_list)-1)) {
			j = (j + 1)
		}
		for (_index(hamming_list, k) * 5) <= _index(hamming_list, (len(hamming_list)-1)) {
			k = (k + 1)
		}
		var m1 int = (_index(hamming_list, i) * 2)
		_ = m1
		var m2 int = (_index(hamming_list, j) * 3)
		_ = m2
		var m3 int = (_index(hamming_list, k) * 5)
		_ = m3
		var next int = m1
		_ = next
		if m2 < next {
			next = m2
		}
		if m3 < next {
			next = m3
		}
		hamming_list = append(hamming_list, next)
		index = (index + 1)
	}
	return hamming_list
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(func() string {
			b, _ := json.Marshal(hamming(5))
			s := string(b)
			s = strings.ReplaceAll(s, ":", ": ")
			s = strings.ReplaceAll(s, ",", ", ")
			s = strings.ReplaceAll(s, "}, {", "},{")
			return s
		}())
		fmt.Println(func() string {
			b, _ := json.Marshal(hamming(10))
			s := string(b)
			s = strings.ReplaceAll(s, ":", ": ")
			s = strings.ReplaceAll(s, ",", ", ")
			s = strings.ReplaceAll(s, "}, {", "},{")
			return s
		}())
		fmt.Println(func() string {
			b, _ := json.Marshal(hamming(15))
			s := string(b)
			s = strings.ReplaceAll(s, ":", ": ")
			s = strings.ReplaceAll(s, ",", ", ")
			s = strings.ReplaceAll(s, "}, {", "},{")
			return s
		}())
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
