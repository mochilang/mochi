//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-16 13:07:28 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _modi(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func int_sqrt(n int) int {
	var r int = 0
	_ = r
	for ((r + 1) * (r + 1)) <= n {
		r = (r + 1)
	}
	return r
}

func is_pronic(n int) bool {
	if n < 0 {
		return false
	}
	if _modi(n, 2) != 0 {
		return false
	}
	var root int = int_sqrt(n)
	_ = root
	_ = root
	return (n == (root * (root + 1)))
}

func test_is_pronic() {
	if is_pronic((0 - 1)) {
		panic("-1 should not be pronic")
	}
	if !is_pronic(0) {
		panic("0 should be pronic")
	}
	if !is_pronic(2) {
		panic("2 should be pronic")
	}
	if is_pronic(5) {
		panic("5 should not be pronic")
	}
	if !is_pronic(6) {
		panic("6 should be pronic")
	}
	if is_pronic(8) {
		panic("8 should not be pronic")
	}
	if !is_pronic(30) {
		panic("30 should be pronic")
	}
	if is_pronic(32) {
		panic("32 should not be pronic")
	}
	if !is_pronic(2147441940) {
		panic("2147441940 should be pronic")
	}
}

func mochiMain() {
	test_is_pronic()
	fmt.Println(is_pronic(56))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
