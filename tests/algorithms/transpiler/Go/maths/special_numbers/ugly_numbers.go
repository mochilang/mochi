//go:build ignore

// Generated by Mochi v0.10.67 on 2025-08-17 12:39:48 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func ugly_numbers(n int) int {
	if n <= 0 {
		return 1
	}
	var ugly_nums []int = []int{}
	_ = ugly_nums
	ugly_nums = append(ugly_nums, 1)
	var i2 int = 0
	_ = i2
	var i3 int = 0
	_ = i3
	var i5 int = 0
	_ = i5
	var next_2 int = 2
	_ = next_2
	var next_3 int = 3
	_ = next_3
	var next_5 int = 5
	_ = next_5
	var count int = 1
	_ = count
	for count < n {
		var next_num int = func() int {
			if next_2 < next_3 {
				return func() int {
					if next_2 < next_5 {
						return next_2
					} else {
						return next_5
					}
				}()
			} else {
				return func() int {
					if next_3 < next_5 {
						return next_3
					} else {
						return next_5
					}
				}()
			}
		}()
		_ = next_num
		ugly_nums = append(ugly_nums, next_num)
		if next_num == next_2 {
			i2 = (i2 + 1)
			next_2 = (_index(ugly_nums, i2) * 2)
		}
		if next_num == next_3 {
			i3 = (i3 + 1)
			next_3 = (_index(ugly_nums, i3) * 3)
		}
		if next_num == next_5 {
			i5 = (i5 + 1)
			next_5 = (_index(ugly_nums, i5) * 5)
		}
		count = (count + 1)
	}
	return _index(ugly_nums, (len(ugly_nums) - 1))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(fmt.Sprint(ugly_numbers(100)))
		fmt.Println(fmt.Sprint(ugly_numbers(0)))
		fmt.Println(fmt.Sprint(ugly_numbers(20)))
		fmt.Println(fmt.Sprint(ugly_numbers((0 - 5))))
		fmt.Println(fmt.Sprint(ugly_numbers(200)))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
