//go:build ignore

// Generated by Mochi v0.10.64 on 2025-08-12 16:23:46 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func polygonal_num(n int, sides int) int {
	if (n < 0) || (sides < 3) {
		panic("Invalid input: num must be >= 0 and sides must be >= 3.")
	}
	var term1 int = (((sides - 2) * n) * n)
	_ = term1
	_ = term1
	var term2 int = ((sides - 4) * n)
	_ = term2
	_ = term2
	return ((term1 - term2) / 2)
}

func mochiMain() {
	var n int = 5
	_ = n
	var sides int = 4
	_ = sides
	var result int = polygonal_num(n, sides)
	_ = result
	fmt.Println(fmt.Sprint(result))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
