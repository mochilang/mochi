//go:build ignore

// Generated by Mochi v0.10.64 on 2025-08-12 16:20:31 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _mod(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func abs_int(x int) int {
	if x < 0 {
		return (0 - x)
	}
	return x
}

func gcd(a int, b int) int {
	if a == 0 {
		return abs_int(b)
	}
	return gcd(_mod(b, a), a)
}

func power(x int, y int, m int) int {
	if y == 0 {
		return _mod(1, m)
	}
	var temp int = _mod(power(x, (y/2), m), m)
	_ = temp
	temp = _mod((temp * temp), m)
	if _mod(y, 2) == 1 {
		temp = _mod((temp * x), m)
	}
	return temp
}

func is_carmichael_number(n int) bool {
	if n <= 0 {
		panic("Number must be positive")
	}
	var b int = 2
	_ = b
	for b < n {
		if gcd(b, n) == 1 {
			if power(b, (n-1), n) != 1 {
				return false
			}
		}
		b = (b + 1)
	}
	return true
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(fmt.Sprint(power(2, 15, 3)))
		fmt.Println(fmt.Sprint(power(5, 1, 30)))
		fmt.Println(fmt.Sprint(is_carmichael_number(4)))
		fmt.Println(fmt.Sprint(is_carmichael_number(561)))
		fmt.Println(fmt.Sprint(is_carmichael_number(562)))
		fmt.Println(fmt.Sprint(is_carmichael_number(1105)))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
