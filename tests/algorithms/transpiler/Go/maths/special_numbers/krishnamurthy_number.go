//go:build ignore

// Generated by Mochi v0.10.67 on 2025-08-17 12:39:40 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

func _modi(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func factorial(digit int) int {
	if (digit == 0) || (digit == 1) {
		return 1
	}
	return (digit * factorial((digit - 1)))
}

func is_krishnamurthy(n int) bool {
	var duplicate int = n
	_ = duplicate
	var fact_sum int = 0
	_ = fact_sum
	for duplicate > 0 {
		var digit int = _modi(duplicate, 10)
		_ = digit
		fact_sum = (fact_sum + factorial(digit))
		duplicate = (duplicate / 10)
	}
	return (fact_sum == n)
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(fmt.Sprint(is_krishnamurthy(145)))
		fmt.Println(fmt.Sprint(is_krishnamurthy(240)))
		fmt.Println(fmt.Sprint(is_krishnamurthy(1)))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
