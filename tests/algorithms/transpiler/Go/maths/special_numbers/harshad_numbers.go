//go:build ignore

// Generated by Mochi v0.10.67 on 2025-08-17 12:39:38 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"strings"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

func _modi(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func char_to_value(c string) int {
	var digits string = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
	_ = digits
	var i int = 0
	_ = i
	for i < len(digits) {
		if string(_index([]rune(digits), i)) == c {
			return i
		}
		i = (i + 1)
	}
	panic("invalid digit")
}

func int_to_base(number int, base int) string {
	if (base < 2) || (base > 36) {
		panic("'base' must be between 2 and 36 inclusive")
	}
	if number < 0 {
		panic("number must be a positive integer")
	}
	var digits string = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
	_ = digits
	_ = digits
	var n int = number
	_ = n
	var result string = ""
	_ = result
	for n > 0 {
		var remainder int = _modi(n, base)
		_ = remainder
		result = (string(_index([]rune(digits), remainder)) + result)
		n = (n / base)
	}
	if result == "" {
		result = "0"
	}
	return result
}

func base_to_int(num_str string, base int) int {
	var value int = 0
	_ = value
	var i int = 0
	_ = i
	for i < len(num_str) {
		var c string = string(_index([]rune(num_str), i))
		_ = c
		value = ((value * base) + char_to_value(c))
		i = (i + 1)
	}
	return value
}

func sum_of_digits(num int, base int) string {
	if (base < 2) || (base > 36) {
		panic("'base' must be between 2 and 36 inclusive")
	}
	var num_str string = int_to_base(num, base)
	_ = num_str
	var total int = 0
	_ = total
	var i int = 0
	_ = i
	for i < len(num_str) {
		var c string = string(_index([]rune(num_str), i))
		_ = c
		total = (total + char_to_value(c))
		i = (i + 1)
	}
	return int_to_base(total, base)
}

func harshad_numbers_in_base(limit int, base int) []string {
	if (base < 2) || (base > 36) {
		panic("'base' must be between 2 and 36 inclusive")
	}
	if limit < 0 {
		return func(v any) []string {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]string); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []string{}
				}
				out := make([]string, len(arr))
				for i, x := range arr {
					out[i] = fmt.Sprint(x)
				}
				return out
			}
			return v.([]string)
		}([]string{})
	}
	var numbers []string = []string{}
	_ = numbers
	var i int = 1
	_ = i
	for i < limit {
		var s string = sum_of_digits(i, base)
		_ = s
		var divisor int = base_to_int(s, base)
		_ = divisor
		if _modi(i, divisor) == 0 {
			numbers = append(numbers, int_to_base(i, base))
		}
		i = (i + 1)
	}
	return numbers
}

func is_harshad_number_in_base(num int, base int) bool {
	if (base < 2) || (base > 36) {
		panic("'base' must be between 2 and 36 inclusive")
	}
	if num < 0 {
		return false
	}
	var n string = int_to_base(num, base)
	_ = n
	var d string = sum_of_digits(num, base)
	_ = d
	var n_val int = base_to_int(n, base)
	_ = n_val
	_ = n_val
	var d_val int = base_to_int(d, base)
	_ = d_val
	_ = d_val
	return (_modi(n_val, d_val) == 0)
}

func mochiMain() {
	fmt.Println(int_to_base(0, 21))
	fmt.Println(int_to_base(23, 2))
	fmt.Println(int_to_base(58, 5))
	fmt.Println(int_to_base(167, 16))
	fmt.Println(sum_of_digits(103, 12))
	fmt.Println(sum_of_digits(1275, 4))
	fmt.Println(sum_of_digits(6645, 2))
	fmt.Println(func() string {
		b, _ := json.Marshal(harshad_numbers_in_base(15, 2))
		s := string(b)
		s = strings.ReplaceAll(s, ":", ": ")
		s = strings.ReplaceAll(s, ",", ", ")
		s = strings.ReplaceAll(s, "}, {", "},{")
		return s
	}())
	fmt.Println(func() string {
		b, _ := json.Marshal(harshad_numbers_in_base(12, 34))
		s := string(b)
		s = strings.ReplaceAll(s, ":", ": ")
		s = strings.ReplaceAll(s, ",", ", ")
		s = strings.ReplaceAll(s, "}, {", "},{")
		return s
	}())
	fmt.Println(func() string {
		b, _ := json.Marshal(harshad_numbers_in_base(12, 4))
		s := string(b)
		s = strings.ReplaceAll(s, ":", ": ")
		s = strings.ReplaceAll(s, ",", ", ")
		s = strings.ReplaceAll(s, "}, {", "},{")
		return s
	}())
	fmt.Println(is_harshad_number_in_base(18, 10))
	fmt.Println(is_harshad_number_in_base(21, 10))
	fmt.Println(is_harshad_number_in_base((0 - 21), 5))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
