//go:build ignore

// Generated by Mochi v0.10.64 on 2025-08-12 16:20:27 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _mod(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	s[idx] = v
}

func pow_int(base int, exp int) int {
	var result int = 1
	_ = result
	var i int = 0
	_ = i
	for i < exp {
		result = (result * base)
		i = (i + 1)
	}
	return result
}

func armstrong_number(n int) bool {
	if n < 1 {
		return false
	}
	var digits int = 0
	_ = digits
	var temp int = n
	_ = temp
	for temp > 0 {
		temp = (temp / 10)
		digits = (digits + 1)
	}
	var total int = 0
	_ = total
	temp = n
	for temp > 0 {
		var rem int = _mod(temp, 10)
		_ = rem
		total = (total + pow_int(rem, digits))
		temp = (temp / 10)
	}
	return (total == n)
}

func pluperfect_number(n int) bool {
	if n < 1 {
		return false
	}
	var digit_histogram []int = []int{}
	_ = digit_histogram
	var i int = 0
	_ = i
	for i < 10 {
		digit_histogram = append(digit_histogram, 0)
		i = (i + 1)
	}
	var digit_total int = 0
	_ = digit_total
	var temp int = n
	_ = temp
	for temp > 0 {
		var rem int = _mod(temp, 10)
		_ = rem
		_setIndex(digit_histogram, rem, (int(_index(digit_histogram, rem)) + 1))
		digit_total = (digit_total + 1)
		temp = (temp / 10)
	}
	var total int = 0
	_ = total
	i = 0
	for i < 10 {
		if int(_index(digit_histogram, i)) > 0 {
			total = (total + (int(_index(digit_histogram, i)) * pow_int(i, digit_total)))
		}
		i = (i + 1)
	}
	return (total == n)
}

func narcissistic_number(n int) bool {
	if n < 1 {
		return false
	}
	var digits int = 0
	_ = digits
	var temp int = n
	_ = temp
	for temp > 0 {
		temp = (temp / 10)
		digits = (digits + 1)
	}
	temp = n
	var total int = 0
	_ = total
	for temp > 0 {
		var rem int = _mod(temp, 10)
		_ = rem
		total = (total + pow_int(rem, digits))
		temp = (temp / 10)
	}
	return (total == n)
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(armstrong_number(371))
		fmt.Println(armstrong_number(200))
		fmt.Println(pluperfect_number(371))
		fmt.Println(pluperfect_number(200))
		fmt.Println(narcissistic_number(371))
		fmt.Println(narcissistic_number(200))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
