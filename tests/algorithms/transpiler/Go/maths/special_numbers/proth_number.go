//go:build ignore

// Generated by Mochi v0.10.67 on 2025-08-17 12:39:46 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func pow2(exp int) int {
	var result int = 1
	_ = result
	var i int = 0
	_ = i
	for i < exp {
		result = (result * 2)
		i = (i + 1)
	}
	return result
}

func proth(number int) int {
	if number < 1 {
		panic("Input value must be > 0")
	}
	if number == 1 {
		return 3
	}
	if number == 2 {
		return 5
	}
	var temp int = int((number / 3))
	_ = temp
	var pow int = 1
	_ = pow
	var block_index int = 1
	_ = block_index
	for pow <= temp {
		pow = (pow * 2)
		block_index = (block_index + 1)
	}
	var proth_list []int = []int{3, 5}
	_ = proth_list
	var proth_index int = 2
	_ = proth_index
	var increment int = 3
	_ = increment
	var block int = 1
	_ = block
	for block < block_index {
		var i int = 0
		_ = i
		for i < increment {
			var next_val int = (pow2((block + 1)) + _index(proth_list, (proth_index-1)))
			_ = next_val
			proth_list = append(proth_list, next_val)
			proth_index = (proth_index + 1)
			i = (i + 1)
		}
		increment = (increment * 2)
		block = (block + 1)
	}
	return _index(proth_list, (number - 1))
}

func mochiMain() {
	var n int = 1
	_ = n
	for n <= 10 {
		var value int = proth(n)
		_ = value
		fmt.Println(((("The " + fmt.Sprint(n)) + "th Proth number: ") + fmt.Sprint(value)))
		n = (n + 1)
	}
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
