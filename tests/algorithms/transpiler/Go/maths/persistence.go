//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-16 12:55:27 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _modi(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func multiplicative_persistence(num int) int {
	if num < 0 {
		panic("multiplicative_persistence() does not accept negative values")
	}
	var steps int = 0
	_ = steps
	var n int = num
	_ = n
	for n >= 10 {
		var product int = 1
		_ = product
		var temp int = n
		_ = temp
		for temp > 0 {
			var digit int = _modi(temp, 10)
			_ = digit
			product = (product * digit)
			temp = (temp / 10)
		}
		n = product
		steps = (steps + 1)
	}
	return steps
}

func additive_persistence(num int) int {
	if num < 0 {
		panic("additive_persistence() does not accept negative values")
	}
	var steps int = 0
	_ = steps
	var n int = num
	_ = n
	for n >= 10 {
		var total int = 0
		_ = total
		var temp int = n
		_ = temp
		for temp > 0 {
			var digit int = _modi(temp, 10)
			_ = digit
			total = (total + digit)
			temp = (temp / 10)
		}
		n = total
		steps = (steps + 1)
	}
	return steps
}

func test_persistence() {
	if multiplicative_persistence(217) != 2 {
		panic("multiplicative_persistence failed")
	}
	if additive_persistence(199) != 3 {
		panic("additive_persistence failed")
	}
}

func mochiMain() {
	test_persistence()
	fmt.Println(fmt.Sprint(multiplicative_persistence(217)))
	fmt.Println(fmt.Sprint(additive_persistence(199)))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
