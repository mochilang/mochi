//go:build ignore

// Generated by Mochi v0.10.63 on 2025-08-12 08:22:44 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _mod(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	s[idx] = v
}

func totient(n int) []int {
	var is_prime []bool = []bool{}
	_ = is_prime
	var totients []int = []int{}
	_ = totients
	var primes []int = []int{}
	_ = primes
	var i int = 0
	_ = i
	for i <= n {
		is_prime = append(is_prime, true)
		totients = append(totients, (i - 1))
		i = (i + 1)
	}
	i = 2
	for i <= n {
		if _index(is_prime, i) {
			primes = append(primes, i)
		}
		var j int = 0
		_ = j
		for j < len(primes) {
			var p int = _index(primes, j)
			_ = p
			if (i * p) >= n {
				break
			}
			_setIndex(is_prime, (i * p), false)
			if _mod(i, p) == 0 {
				_setIndex(totients, (i * p), (int(_index(totients, i)) * p))
				break
			}
			_setIndex(totients, (i * p), (int(_index(totients, i)) * (p - 1)))
			j = (j + 1)
		}
		i = (i + 1)
	}
	return totients
}

func test_totient() {
	var expected []int = []int{func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}((0 - 1)), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(0), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(1), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(2), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(2), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(4), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(2), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(6), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(4), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(6), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(9)}
	_ = expected
	var res []int = totient(10)
	_ = res
	var idx int = 0
	_ = idx
	for idx < len(expected) {
		if int(_index(res, idx)) != int(_index(expected, idx)) {
			panic(("totient mismatch at " + fmt.Sprint(idx)))
		}
		idx = (idx + 1)
	}
}

func mochiMain() {
	test_totient()
	var n int = 10
	_ = n
	var res []int = totient(n)
	_ = res
	var i int = 1
	_ = i
	for i < n {
		fmt.Println((((fmt.Sprint(i) + " has ") + fmt.Sprint(_index(res, i))) + " relative primes."))
		i = (i + 1)
	}
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
