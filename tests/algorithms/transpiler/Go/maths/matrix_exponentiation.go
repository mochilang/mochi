//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-16 12:53:14 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _modi(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func identity(n int) [][]int {
	var i int = 0
	_ = i
	var mat [][]int = [][]int{}
	_ = mat
	for i < n {
		var row []int = []int{}
		_ = row
		var j int = 0
		_ = j
		for j < n {
			if i == j {
				row = append(row, 1)
			} else {
				row = append(row, 0)
			}
			j = (j + 1)
		}
		mat = append(mat, row)
		i = (i + 1)
	}
	return mat
}

func matrix_mul(a [][]int, b [][]int) [][]int {
	var n int = len(a)
	_ = n
	var result [][]int = [][]int{}
	_ = result
	var i int = 0
	_ = i
	for i < n {
		var row []int = []int{}
		_ = row
		var j int = 0
		_ = j
		for j < n {
			var cell int = 0
			_ = cell
			var k int = 0
			_ = k
			for k < n {
				cell = (cell + (_index(_index(a, i), k) * _index(_index(b, k), j)))
				k = (k + 1)
			}
			row = append(row, cell)
			j = (j + 1)
		}
		result = append(result, row)
		i = (i + 1)
	}
	return result
}

func matrix_pow(base [][]int, exp int) [][]int {
	var result [][]int = identity(len(base))
	_ = result
	var b [][]int = base
	_ = b
	var e int = exp
	_ = e
	for e > 0 {
		if _modi(e, 2) == 1 {
			result = matrix_mul(func(v any) [][]int {
				if v == nil {
					return nil
				}
				if vv, ok := v.([][]int); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return [][]int{}
					}
					out := make([][]int, len(arr))
					for i, x := range arr {
						out[i] = func(v any) []int {
							if v == nil {
								return nil
							}
							if vv, ok := v.([]int); ok {
								return vv
							}
							if arr, ok := v.([]any); ok {
								if len(arr) == 0 {
									return []int{}
								}
								out := make([]int, len(arr))
								for i, x := range arr {
									out[i] = x.(int)
								}
								return out
							}
							return v.([]int)
						}(x)
					}
					return out
				}
				return v.([][]int)
			}(result), func(v any) [][]int {
				if v == nil {
					return nil
				}
				if vv, ok := v.([][]int); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return [][]int{}
					}
					out := make([][]int, len(arr))
					for i, x := range arr {
						out[i] = func(v any) []int {
							if v == nil {
								return nil
							}
							if vv, ok := v.([]int); ok {
								return vv
							}
							if arr, ok := v.([]any); ok {
								if len(arr) == 0 {
									return []int{}
								}
								out := make([]int, len(arr))
								for i, x := range arr {
									out[i] = x.(int)
								}
								return out
							}
							return v.([]int)
						}(x)
					}
					return out
				}
				return v.([][]int)
			}(b))
		}
		b = matrix_mul(func(v any) [][]int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]int{}
				}
				out := make([][]int, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []int {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]int); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []int{}
							}
							out := make([]int, len(arr))
							for i, x := range arr {
								out[i] = x.(int)
							}
							return out
						}
						return v.([]int)
					}(x)
				}
				return out
			}
			return v.([][]int)
		}(b), func(v any) [][]int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]int{}
				}
				out := make([][]int, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []int {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]int); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []int{}
							}
							out := make([]int, len(arr))
							for i, x := range arr {
								out[i] = x.(int)
							}
							return out
						}
						return v.([]int)
					}(x)
				}
				return out
			}
			return v.([][]int)
		}(b))
		e = (e / 2)
	}
	return result
}

func fibonacci_with_matrix_exponentiation(n int, f1 int, f2 int) int {
	if n == 1 {
		return f1
	}
	if n == 2 {
		return f2
	}
	var base [][]int = [][]int{[]int{1, 1}, []int{1, 0}}
	_ = base
	var m [][]int = matrix_pow(func(v any) [][]int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]int{}
			}
			out := make([][]int, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []int {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]int); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []int{}
						}
						out := make([]int, len(arr))
						for i, x := range arr {
							out[i] = x.(int)
						}
						return out
					}
					return v.([]int)
				}(x)
			}
			return out
		}
		return v.([][]int)
	}(base), (n - 2))
	_ = m
	_ = m
	return ((f2 * _index(_index(m, 0), 0)) + (f1 * _index(_index(m, 0), 1)))
}

func simple_fibonacci(n int, f1 int, f2 int) int {
	if n == 1 {
		return f1
	}
	if n == 2 {
		return f2
	}
	var a int = f1
	_ = a
	var b int = f2
	_ = b
	var count int = (n - 2)
	_ = count
	for count > 0 {
		var tmp int = (a + b)
		_ = tmp
		a = b
		b = tmp
		count = (count - 1)
	}
	return b
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(fmt.Sprint(fibonacci_with_matrix_exponentiation(1, 5, 6)))
		fmt.Println(fmt.Sprint(fibonacci_with_matrix_exponentiation(2, 10, 11)))
		fmt.Println(fmt.Sprint(fibonacci_with_matrix_exponentiation(13, 0, 1)))
		fmt.Println(fmt.Sprint(fibonacci_with_matrix_exponentiation(10, 5, 9)))
		fmt.Println(fmt.Sprint(fibonacci_with_matrix_exponentiation(9, 2, 3)))
		fmt.Println(fmt.Sprint(simple_fibonacci(1, 5, 6)))
		fmt.Println(fmt.Sprint(simple_fibonacci(2, 10, 11)))
		fmt.Println(fmt.Sprint(simple_fibonacci(13, 0, 1)))
		fmt.Println(fmt.Sprint(simple_fibonacci(10, 5, 9)))
		fmt.Println(fmt.Sprint(simple_fibonacci(9, 2, 3)))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
