//go:build ignore

// Generated by Mochi v0.10.63 on 2025-08-12 08:25:34 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _mod(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

func josephus_recursive(num_people int, step_size int) int {
	if (num_people <= 0) || (step_size <= 0) {
		panic("num_people or step_size is not a positive integer.")
	}
	if num_people == 1 {
		return 0
	}
	return _mod((josephus_recursive((num_people-1), step_size) + step_size), num_people)
}

func find_winner(num_people int, step_size int) int {
	return (josephus_recursive(num_people, step_size) + 1)
}

func remove_at(xs []int, idx int) []int {
	var res []int = []int{}
	_ = res
	var i int = 0
	_ = i
	for i < len(xs) {
		if i != idx {
			res = append(res, _index(xs, i))
		}
		i = (i + 1)
	}
	return res
}

func josephus_iterative(num_people int, step_size int) int {
	if (num_people <= 0) || (step_size <= 0) {
		panic("num_people or step_size is not a positive integer.")
	}
	var circle []int = []int{}
	_ = circle
	var i int = 1
	_ = i
	for i <= num_people {
		circle = append(circle, i)
		i = (i + 1)
	}
	var current int = 0
	_ = current
	for len(circle) > 1 {
		current = _mod(((current + step_size) - 1), len(circle))
		circle = remove_at(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(circle), current)
	}
	return _index(circle, 0)
}

var r int

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		r = josephus_recursive(7, 3)
		fmt.Println(fmt.Sprint(r))
		fmt.Println(fmt.Sprint(find_winner(7, 3)))
		fmt.Println(fmt.Sprint(josephus_iterative(7, 3)))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
