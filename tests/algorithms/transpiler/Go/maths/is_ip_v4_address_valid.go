//go:build ignore

// Generated by Mochi v0.10.63 on 2025-08-12 08:00:58 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

func split_by_dot(s string) []string {
	var res []string = []string{}
	_ = res
	var current string = ""
	_ = current
	var i int = 0
	_ = i
	for i < len(s) {
		var c string = string(_index([]rune(s), i))
		_ = c
		if c == "." {
			res = append(res, current)
			current = ""
		} else {
			current = (current + c)
		}
		i = (i + 1)
	}
	res = append(res, current)
	return res
}

func is_digit_str(s string) bool {
	if len(s) == 0 {
		return false
	}
	var i int = 0
	_ = i
	for i < len(s) {
		var c string = string(_index([]rune(s), i))
		_ = c
		if (c < "0") || (c > "9") {
			return false
		}
		i = (i + 1)
	}
	return true
}

func parse_decimal(s string) int {
	var value int = 0
	_ = value
	var i int = 0
	_ = i
	for i < len(s) {
		var c string = string(_index([]rune(s), i))
		_ = c
		_ = c
		value = ((value * 10) + func() int { n, _ := strconv.Atoi(fmt.Sprint(c)); return n }())
		i = (i + 1)
	}
	return value
}

func is_ip_v4_address_valid(ip string) bool {
	var octets []string = split_by_dot(ip)
	_ = octets
	if len(octets) != 4 {
		return false
	}
	var i int = 0
	_ = i
	for i < 4 {
		var oct string = _index(octets, i)
		_ = oct
		if !is_digit_str(oct) {
			return false
		}
		var number int = parse_decimal(oct)
		_ = number
		if len(fmt.Sprint(number)) != len(oct) {
			return false
		}
		if (number < 0) || (number > 255) {
			return false
		}
		i = (i + 1)
	}
	return true
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(fmt.Sprint(is_ip_v4_address_valid("192.168.0.23")))
		fmt.Println(fmt.Sprint(is_ip_v4_address_valid("192.256.15.8")))
		fmt.Println(fmt.Sprint(is_ip_v4_address_valid("172.100.0.8")))
		fmt.Println(fmt.Sprint(is_ip_v4_address_valid("255.256.0.256")))
		fmt.Println(fmt.Sprint(is_ip_v4_address_valid("1.2.33333333.4")))
		fmt.Println(fmt.Sprint(is_ip_v4_address_valid("1.2.-3.4")))
		fmt.Println(fmt.Sprint(is_ip_v4_address_valid("1.2.3")))
		fmt.Println(fmt.Sprint(is_ip_v4_address_valid("1.2.3.4.5")))
		fmt.Println(fmt.Sprint(is_ip_v4_address_valid("1.2.A.4")))
		fmt.Println(fmt.Sprint(is_ip_v4_address_valid("0.0.0.0")))
		fmt.Println(fmt.Sprint(is_ip_v4_address_valid("1.2.3.")))
		fmt.Println(fmt.Sprint(is_ip_v4_address_valid("1.2.3.05")))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
