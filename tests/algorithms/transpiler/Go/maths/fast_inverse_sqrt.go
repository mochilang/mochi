//go:build ignore

// Generated by Mochi v0.10.63 on 2025-08-12 07:56:19 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _mod(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func pow2_int(n int) int {
	var result int = 1
	_ = result
	var i int = 0
	_ = i
	for i < n {
		result = (result * 2)
		i = (i + 1)
	}
	return result
}

func pow2_float(n int) float64 {
	var result float64 = 1.0
	_ = result
	if n >= 0 {
		var i int = 0
		_ = i
		for i < n {
			result = (result * 2.0)
			i = (i + 1)
		}
	} else {
		var i int = 0
		_ = i
		var m int = (0 - n)
		_ = m
		for i < m {
			result = (float64(result) / float64(2.0))
			i = (i + 1)
		}
	}
	return result
}

func lshift(num int, k int) int {
	var result int = num
	_ = result
	var i int = 0
	_ = i
	for i < k {
		result = (result * 2)
		i = (i + 1)
	}
	return result
}

func rshift(num int, k int) int {
	var result int = num
	_ = result
	var i int = 0
	_ = i
	for i < k {
		result = ((result - _mod(result, 2)) / 2)
		i = (i + 1)
	}
	return result
}

func log2_floor(x float64) int {
	var n float64 = x
	_ = n
	var e int = 0
	_ = e
	for n >= 2.0 {
		n = (float64(n) / float64(2.0))
		e = (e + 1)
	}
	for n < 1.0 {
		n = (n * 2.0)
		e = (e - 1)
	}
	return e
}

func float_to_bits(x float64) int {
	var num float64 = x
	_ = num
	var sign int = 0
	_ = sign
	if num < 0.0 {
		sign = 1
		num = (0 - num)
	}
	var exp int = log2_floor(num)
	_ = exp
	var pow float64 = pow2_float(exp)
	_ = pow
	var normalized float64 = (float64(num) / float64(pow))
	_ = normalized
	var frac float64 = (normalized - 1.0)
	_ = frac
	_ = frac
	var mantissa int = int((frac * pow2_float(23)))
	_ = mantissa
	_ = mantissa
	var exp_bits int = (exp + 127)
	_ = exp_bits
	_ = exp_bits
	return ((lshift(sign, 31) + lshift(exp_bits, 23)) + mantissa)
}

func bits_to_float(bits int) float64 {
	var sign_bit int = _mod(rshift(bits, 31), 2)
	_ = sign_bit
	var sign float64 = 1.0
	_ = sign
	if sign_bit == 1 {
		sign = (0 - 1.0)
	}
	var exp_bits int = _mod(rshift(bits, 23), 256)
	_ = exp_bits
	var exp int = (exp_bits - 127)
	_ = exp
	_ = exp
	var mantissa_bits int = _mod(bits, pow2_int(23))
	_ = mantissa_bits
	var mantissa float64 = (1.0 + (float64(mantissa_bits) / float64(pow2_float(23))))
	_ = mantissa
	_ = mantissa
	return ((sign * mantissa) * pow2_float(exp))
}

func absf(x float64) float64 {
	if x < 0.0 {
		return (0 - x)
	}
	return x
}

func sqrtApprox(x float64) float64 {
	if x <= 0.0 {
		return 0.0
	}
	var guess float64 = (float64(x) / float64(2.0))
	_ = guess
	var i int = 0
	_ = i
	for i < 20 {
		guess = (float64((guess + (float64(x) / float64(guess)))) / float64(2.0))
		i = (i + 1)
	}
	return guess
}

func is_close(a float64, b float64, rel_tol float64) bool {
	return (absf((a - b)) <= (rel_tol * absf(b)))
}

func fast_inverse_sqrt(number float64) float64 {
	if number <= 0.0 {
		panic("Input must be a positive number.")
	}
	var i int = float_to_bits(number)
	_ = i
	var magic int = 1597463007
	_ = magic
	var y_bits int = (magic - rshift(i, 1))
	_ = y_bits
	var y float64 = bits_to_float(y_bits)
	_ = y
	y = (y * (1.5 - (((0.5 * number) * y) * y)))
	return y
}

func test_fast_inverse_sqrt() {
	if absf((fast_inverse_sqrt(10.0) - 0.3156857923527257)) > 0.0001 {
		panic("fast_inverse_sqrt(10) failed")
	}
	if absf((fast_inverse_sqrt(4.0) - 0.49915357479239103)) > 0.0001 {
		panic("fast_inverse_sqrt(4) failed")
	}
	if absf((fast_inverse_sqrt(4.1) - 0.4932849504615651)) > 0.0001 {
		panic("fast_inverse_sqrt(4.1) failed")
	}
	var i int = 50
	_ = i
	for i < 60 {
		var y float64 = fast_inverse_sqrt(float64(i))
		_ = y
		var actual float64 = (float64(1.0) / float64(sqrtApprox(float64(i))))
		_ = actual
		if !is_close(y, actual, 0.00132) {
			panic("relative error too high")
		}
		i = (i + 1)
	}
}

func mochiMain() {
	test_fast_inverse_sqrt()
	var i int = 5
	_ = i
	for i <= 100 {
		var diff float64 = ((float64(1.0) / float64(sqrtApprox(float64(i)))) - fast_inverse_sqrt(float64(i)))
		_ = diff
		fmt.Println(((fmt.Sprint(i) + ": ") + fmt.Sprint(diff)))
		i = (i + 5)
	}
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
