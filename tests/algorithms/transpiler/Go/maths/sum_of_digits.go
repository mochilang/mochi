//go:build ignore

// Generated by Mochi v0.10.67 on 2025-08-17 12:39:52 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

func _modi(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func abs_int(n int) int {
	if n < 0 {
		return (0 - n)
	}
	return n
}

func sum_of_digits(n int) int {
	var m int = abs_int(n)
	_ = m
	var res int = 0
	_ = res
	for m > 0 {
		res = (res + _modi(m, 10))
		m = (m / 10)
	}
	return res
}

func sum_of_digits_recursion(n int) int {
	var m int = abs_int(n)
	_ = m
	if m < 10 {
		return m
	}
	return (_modi(m, 10) + sum_of_digits_recursion((m / 10)))
}

func sum_of_digits_compact(n int) int {
	var s string = fmt.Sprint(abs_int(n))
	_ = s
	var res int = 0
	_ = res
	var i int = 0
	_ = i
	for i < len(s) {
		res = (res + func() int { n, _ := strconv.Atoi(fmt.Sprint(string(_index([]rune(s), i)))); return n }())
		i = (i + 1)
	}
	return res
}

func test_sum_of_digits() {
	if sum_of_digits(12345) != 15 {
		panic("sum_of_digits 12345 failed")
	}
	if sum_of_digits(123) != 6 {
		panic("sum_of_digits 123 failed")
	}
	if sum_of_digits((0 - 123)) != 6 {
		panic("sum_of_digits -123 failed")
	}
	if sum_of_digits(0) != 0 {
		panic("sum_of_digits 0 failed")
	}
	if sum_of_digits_recursion(12345) != 15 {
		panic("recursion 12345 failed")
	}
	if sum_of_digits_recursion(123) != 6 {
		panic("recursion 123 failed")
	}
	if sum_of_digits_recursion((0 - 123)) != 6 {
		panic("recursion -123 failed")
	}
	if sum_of_digits_recursion(0) != 0 {
		panic("recursion 0 failed")
	}
	if sum_of_digits_compact(12345) != 15 {
		panic("compact 12345 failed")
	}
	if sum_of_digits_compact(123) != 6 {
		panic("compact 123 failed")
	}
	if sum_of_digits_compact((0 - 123)) != 6 {
		panic("compact -123 failed")
	}
	if sum_of_digits_compact(0) != 0 {
		panic("compact 0 failed")
	}
}

func mochiMain() {
	test_sum_of_digits()
	fmt.Println(fmt.Sprint(sum_of_digits(12345)))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
