//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-16 13:07:47 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		return
	}
	s[idx] = v
}

func bubble_sort(nums []int) []int {
	var arr []int = nums
	_ = arr
	var n int = len(arr)
	_ = n
	var i int = 0
	_ = i
	for i < n {
		var j int = 0
		_ = j
		for j < (n - 1) {
			if _index(arr, j) > _index(arr, (j+1)) {
				var temp int = _index(arr, j)
				_ = temp
				_setIndex(arr, j, _index(arr, (j+1)))
				_setIndex(arr, (j + 1), temp)
			}
			j = (j + 1)
		}
		i = (i + 1)
	}
	return arr
}

func three_sum(nums []int) [][]int {
	var sorted []int = bubble_sort(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(nums))
	_ = sorted
	var res [][]int = [][]int{}
	_ = res
	var n int = len(sorted)
	_ = n
	var i int = 0
	_ = i
	for i < (n - 2) {
		if (i == 0) || (_index(sorted, i) != _index(sorted, (i-1))) {
			var low int = (i + 1)
			_ = low
			var high int = (n - 1)
			_ = high
			var c int = (0 - _index(sorted, i))
			_ = c
			for low < high {
				var s int = (_index(sorted, low) + _index(sorted, high))
				_ = s
				if s == c {
					var triple []int = []int{func(v any) int {
						if vv, ok := v.(int); ok {
							return vv
						}
						return 0
					}(_index(sorted, i)), func(v any) int {
						if vv, ok := v.(int); ok {
							return vv
						}
						return 0
					}(_index(sorted, low)), func(v any) int {
						if vv, ok := v.(int); ok {
							return vv
						}
						return 0
					}(_index(sorted, high))}
					_ = triple
					res = append(res, triple)
					for (low < high) && (_index(sorted, low) == _index(sorted, (low+1))) {
						low = (low + 1)
					}
					for (low < high) && (_index(sorted, high) == _index(sorted, (high-1))) {
						high = (high - 1)
					}
					low = (low + 1)
					high = (high - 1)
				} else {
					if s < c {
						low = (low + 1)
					} else {
						high = (high - 1)
					}
				}
			}
		}
		i = (i + 1)
	}
	return res
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(fmt.Sprint(three_sum(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}([]int{func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}((0 - 1)), 0, 1, 2, func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}((0 - 1)), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}((0 - 4))}))))
		fmt.Println(fmt.Sprint(three_sum(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}([]int{1, 2, 3, 4}))))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
