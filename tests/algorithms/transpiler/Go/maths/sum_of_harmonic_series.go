//go:build ignore

// Generated by Mochi v0.10.67 on 2025-08-17 12:39:55 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	math "math"
	"os"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func sum_of_harmonic_progression(first_term float64, common_difference float64, number_of_terms int) float64 {
	var arithmetic_progression []float64 = []float64{(float64(1.0) / float64(first_term))}
	_ = arithmetic_progression
	var term float64 = (float64(1.0) / float64(first_term))
	_ = term
	var i int = 0
	_ = i
	for i < (number_of_terms - 1) {
		term = (term + common_difference)
		arithmetic_progression = append(arithmetic_progression, term)
		i = (i + 1)
	}
	var total float64 = 0.0
	_ = total
	var j int = 0
	_ = j
	for j < len(arithmetic_progression) {
		total = (total + (float64(1.0) / float64(_index(arithmetic_progression, j))))
		j = (j + 1)
	}
	return total
}

func abs_val(num float64) float64 {
	if num < 0.0 {
		return (0 - num)
	}
	return num
}

func test_sum_of_harmonic_progression() {
	var result1 float64 = sum_of_harmonic_progression(0.5, 2.0, 2)
	_ = result1
	if abs_val((result1 - 0.75)) > 1e-07 {
		panic("test1 failed")
	}
	var result2 float64 = sum_of_harmonic_progression(0.2, 5.0, 5)
	_ = result2
	if abs_val((result2 - 0.45666666666666667)) > 1e-07 {
		panic("test2 failed")
	}
}

func mochiMain() {
	test_sum_of_harmonic_progression()
	fmt.Println(func() string {
		f := float64(sum_of_harmonic_progression(0.5, 2.0, 2))
		if f == 0 && math.Signbit(f) {
			return "-0"
		}
		if math.Abs(f-float64(int(f))) < 1e-9 {
			return fmt.Sprintf("%.1f", f)
		}
		return fmt.Sprint(f)
	}())
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
