//go:build ignore

// Generated by Mochi v0.10.67 on 2025-08-16 19:55:13 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	math "math"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func sqrtApprox(x float64) float64 {
	var guess float64 = (float64(x) / float64(2.0))
	_ = guess
	var i int = 0
	_ = i
	for i < 20 {
		guess = (float64((guess + (float64(x) / float64(guess)))) / float64(2.0))
		i = (i + 1)
	}
	return guess
}

func abs_val(num float64) float64 {
	if num < 0.0 {
		return (0 - num)
	}
	return num
}

func approx_equal(a float64, b float64, eps float64) bool {
	return (abs_val((a - b)) < eps)
}

func dodecahedron_surface_area(edge int) float64 {
	if edge <= 0 {
		panic("Length must be a positive.")
	}
	var term float64 = sqrtApprox((25.0 + (10.0 * sqrtApprox(5.0))))
	_ = term
	_ = term
	var e float64 = float64(edge)
	_ = e
	_ = e
	return (((3.0 * term) * e) * e)
}

func dodecahedron_volume(edge int) float64 {
	if edge <= 0 {
		panic("Length must be a positive.")
	}
	var term float64 = (float64((15.0 + (7.0 * sqrtApprox(5.0)))) / float64(4.0))
	_ = term
	_ = term
	var e float64 = float64(edge)
	_ = e
	_ = e
	return (((term * e) * e) * e)
}

func test_dodecahedron() {
	if !approx_equal(dodecahedron_surface_area(5), 516.1432201766901, 0.0001) {
		panic("surface area 5 failed")
	}
	if !approx_equal(dodecahedron_surface_area(10), 2064.5728807067603, 0.0001) {
		panic("surface area 10 failed")
	}
	if !approx_equal(dodecahedron_volume(5), 957.8898700780791, 0.0001) {
		panic("volume 5 failed")
	}
	if !approx_equal(dodecahedron_volume(10), 7663.118960624633, 0.0001) {
		panic("volume 10 failed")
	}
}

func mochiMain() {
	test_dodecahedron()
	fmt.Println(func() string {
		f := float64(dodecahedron_surface_area(5))
		if f == 0 && math.Signbit(f) {
			return "-0"
		}
		if math.Abs(f-float64(int(f))) < 1e-9 {
			return fmt.Sprintf("%.1f", f)
		}
		return fmt.Sprint(f)
	}())
	fmt.Println(func() string {
		f := float64(dodecahedron_volume(5))
		if f == 0 && math.Signbit(f) {
			return "-0"
		}
		if math.Abs(f-float64(int(f))) < 1e-9 {
			return fmt.Sprintf("%.1f", f)
		}
		return fmt.Sprint(f)
	}())
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
