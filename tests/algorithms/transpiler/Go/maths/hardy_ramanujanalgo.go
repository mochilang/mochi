//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-16 12:27:09 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	math "math"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _modi(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func exact_prime_factor_count(n int) int {
	var count int = 0
	_ = count
	var num int = n
	_ = num
	if _modi(num, 2) == 0 {
		count = (count + 1)
		for _modi(num, 2) == 0 {
			num = (num / 2)
		}
	}
	var i int = 3
	_ = i
	for (i * i) <= num {
		if _modi(num, i) == 0 {
			count = (count + 1)
			for _modi(num, i) == 0 {
				num = (num / i)
			}
		}
		i = (i + 2)
	}
	if num > 2 {
		count = (count + 1)
	}
	return count
}

func ln(x float64) float64 {
	var ln2 float64 = 0.6931471805599453
	_ = ln2
	var y float64 = x
	_ = y
	var k float64 = 0.0
	_ = k
	for y > 2.0 {
		y = (float64(y) / float64(2.0))
		k = (k + ln2)
	}
	for y < 1.0 {
		y = (y * 2.0)
		k = (k - ln2)
	}
	var t float64 = (float64((y - 1.0)) / float64((y + 1.0)))
	_ = t
	var term float64 = t
	_ = term
	var sum float64 = 0.0
	_ = sum
	var n int = 1
	_ = n
	for n <= 19 {
		sum = (sum + (float64(term) / float64(n)))
		term = ((term * t) * t)
		n = (n + 2)
	}
	return (k + (2.0 * sum))
}

func floor(x float64) float64 {
	var i int = int(x)
	_ = i
	if float64(i) > x {
		i = (i - 1)
	}
	return float64(i)
}

func round4(x float64) float64 {
	var m float64 = 10000.0
	_ = m
	_ = m
	return (float64(floor(((x * m) + 0.5))) / float64(m))
}

func mochiMain() {
	var n int = 51242183
	_ = n
	var count int = exact_prime_factor_count(n)
	_ = count
	fmt.Println(("The number of distinct prime factors is/are " + fmt.Sprint(count)))
	var loglog float64 = math.Log(math.Log(float64(n)))
	_ = loglog
	fmt.Println(("The value of log(log(n)) is " + fmt.Sprint(round4(loglog))))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
