//go:build ignore

// Generated by Mochi v0.10.63 on 2025-08-12 08:01:12 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _mod(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func prime_factors(n int) []int {
	var i int = 2
	_ = i
	var x int = n
	_ = x
	var factors []int = []int{}
	_ = factors
	for (i * i) <= x {
		if _mod(x, i) == 0 {
			factors = append(factors, i)
			x = int((x / i))
		} else {
			i = (i + 1)
		}
	}
	if x > 1 {
		factors = append(factors, x)
	}
	return factors
}

func liouville_lambda(n int) int {
	if n < 1 {
		panic("Input must be a positive integer")
	}
	var cnt int = len(prime_factors(n))
	_ = cnt
	if _mod(cnt, 2) == 0 {
		return 1
	}
	return (0 - 1)
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(liouville_lambda(10))
		fmt.Println(liouville_lambda(11))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
