//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-16 12:56:46 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

type Complex struct {
	Re float64 `json:"re"`
	Im float64 `json:"im"`
}

func add(a Complex, b Complex) Complex {
	return Complex{
		Re: (a.Re + b.Re),
		Im: (a.Im + b.Im),
	}
}

func sub(a Complex, b Complex) Complex {
	return Complex{
		Re: (a.Re - b.Re),
		Im: (a.Im - b.Im),
	}
}

func div_real(a Complex, r float64) Complex {
	return Complex{
		Re: (float64(a.Re) / float64(r)),
		Im: (float64(a.Im) / float64(r)),
	}
}

func sqrt_newton(x float64) float64 {
	if x <= 0.0 {
		return 0.0
	}
	var guess float64 = (float64(x) / float64(2.0))
	_ = guess
	var i int = 0
	_ = i
	for i < 20 {
		guess = (float64((guess + (float64(x) / float64(guess)))) / float64(2.0))
		i = (i + 1)
	}
	return guess
}

func sqrt_to_complex(d float64) Complex {
	if d >= 0.0 {
		return Complex{
			Re: sqrt_newton(d),
			Im: 0.0,
		}
	}
	return Complex{
		Re: 0.0,
		Im: sqrt_newton((0 - d)),
	}
}

func quadratic_roots(a float64, b float64, c float64) []Complex {
	if a == 0.0 {
		fmt.Println("ValueError: coefficient 'a' must not be zero")
		return func(v any) []Complex {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]Complex); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []Complex{}
				}
				out := make([]Complex, len(arr))
				for i, x := range arr {
					out[i] = x.(Complex)
				}
				return out
			}
			return v.([]Complex)
		}([]Complex{})
	}
	var delta float64 = ((b * b) - ((4.0 * a) * c))
	_ = delta
	var sqrt_d Complex = sqrt_to_complex(delta)
	_ = sqrt_d
	var minus_b Complex = Complex{
		Re: (0 - b),
		Im: 0.0,
	}
	_ = minus_b
	var two_a float64 = (2.0 * a)
	_ = two_a
	var root1 Complex = div_real(add(minus_b, sqrt_d), two_a)
	_ = root1
	_ = root1
	var root2 Complex = div_real(sub(minus_b, sqrt_d), two_a)
	_ = root2
	_ = root2
	return []Complex{root1, root2}
}

func root_str(r Complex) string {
	if r.Im == 0.0 {
		return fmt.Sprint(r.Re)
	}
	var s string = fmt.Sprint(r.Re)
	_ = s
	if r.Im >= 0.0 {
		s = (((s + "+") + fmt.Sprint(r.Im)) + "i")
	} else {
		s = ((s + fmt.Sprint(r.Im)) + "i")
	}
	return s
}

func mochiMain() {
	var roots []Complex = quadratic_roots(5.0, 6.0, 1.0)
	_ = roots
	if len(roots) == 2 {
		fmt.Println(((("The solutions are: " + root_str(_index(roots, 0))) + " and ") + root_str(_index(roots, 1))))
	}
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
