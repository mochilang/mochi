//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-16 12:55:36 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _modi(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

type PollardResult struct {
	Factor int  `json:"factor"`
	Ok     bool `json:"ok"`
}

func gcd(a int, b int) int {
	var x int = func() int {
		if a < 0 {
			return (0 - a)
		} else {
			return a
		}
	}()
	_ = x
	var y int = func() int {
		if b < 0 {
			return (0 - b)
		} else {
			return b
		}
	}()
	_ = y
	for y != 0 {
		var t int = _modi(x, y)
		_ = t
		x = y
		y = t
	}
	return x
}

func rand_fn(value int, step int, modulus int) int {
	return _modi(((value * value) + step), modulus)
}

func pollard_rho(num int, seed int, step int, attempts int) PollardResult {
	if num < 2 {
		panic("The input value cannot be less than 2")
	}
	if (num > 2) && (_modi(num, 2) == 0) {
		return PollardResult{
			Factor: 2,
			Ok:     true,
		}
	}
	var s int = seed
	_ = s
	var st int = step
	_ = st
	var i int = 0
	_ = i
	for i < attempts {
		var tortoise int = s
		_ = tortoise
		var hare int = s
		_ = hare
		for {
			tortoise = rand_fn(tortoise, st, num)
			hare = rand_fn(hare, st, num)
			hare = rand_fn(hare, st, num)
			var divisor int = gcd((hare - tortoise), num)
			_ = divisor
			if divisor == 1 {
				continue
			} else {
				if divisor == num {
					break
				} else {
					return PollardResult{
						Factor: divisor,
						Ok:     true,
					}
				}
			}
		}
		s = hare
		st = (st + 1)
		i = (i + 1)
	}
	return PollardResult{
		Factor: 0,
		Ok:     false,
	}
}

func test_pollard_rho() {
	var r1 PollardResult = pollard_rho(8051, 2, 1, 5)
	_ = r1
	if !r1.Ok || ((r1.Factor != 83) && (r1.Factor != 97)) {
		panic("test1 failed")
	}
	var r2 PollardResult = pollard_rho(10403, 2, 1, 5)
	_ = r2
	if !r2.Ok || ((r2.Factor != 101) && (r2.Factor != 103)) {
		panic("test2 failed")
	}
	var r3 PollardResult = pollard_rho(100, 2, 1, 3)
	_ = r3
	if !r3.Ok || (r3.Factor != 2) {
		panic("test3 failed")
	}
	var r4 PollardResult = pollard_rho(17, 2, 1, 3)
	_ = r4
	if r4.Ok {
		panic("test4 failed")
	}
	var r5 PollardResult = pollard_rho(((17 * 17) * 17), 2, 1, 3)
	_ = r5
	if !r5.Ok || (r5.Factor != 17) {
		panic("test5 failed")
	}
	var r6 PollardResult = pollard_rho(((17 * 17) * 17), 2, 1, 1)
	_ = r6
	if r6.Ok {
		panic("test6 failed")
	}
	var r7 PollardResult = pollard_rho(((3 * 5) * 7), 2, 1, 3)
	_ = r7
	if !r7.Ok || (r7.Factor != 21) {
		panic("test7 failed")
	}
}

func mochiMain() {
	test_pollard_rho()
	var a PollardResult = pollard_rho(100, 2, 1, 3)
	_ = a
	if a.Ok {
		fmt.Println(fmt.Sprint(a.Factor))
	} else {
		fmt.Println("None")
	}
	var b PollardResult = pollard_rho(17, 2, 1, 3)
	_ = b
	if b.Ok {
		fmt.Println(fmt.Sprint(b.Factor))
	} else {
		fmt.Println("None")
	}
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
