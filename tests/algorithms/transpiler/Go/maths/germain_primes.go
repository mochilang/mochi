//go:build ignore

// Generated by Mochi v0.10.63 on 2025-08-12 08:00:50 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _mod(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func is_prime(n int) bool {
	if n <= 1 {
		return false
	}
	if n <= 3 {
		return true
	}
	if _mod(n, 2) == 0 {
		return false
	}
	var i int = 3
	_ = i
	for (i * i) <= n {
		if _mod(n, i) == 0 {
			return false
		}
		i = (i + 2)
	}
	return true
}

func is_germain_prime(number int) bool {
	if number < 1 {
		panic("Input value must be a positive integer")
	}
	return (is_prime(number) && is_prime(((2 * number) + 1)))
}

func is_safe_prime(number int) bool {
	if number < 1 {
		panic("Input value must be a positive integer")
	}
	if _mod((number-1), 2) != 0 {
		return false
	}
	return (is_prime(number) && is_prime(((number - 1) / 2)))
}

func test_is_germain_prime() {
	if !is_germain_prime(3) {
		panic("is_germain_prime(3) failed")
	}
	if !is_germain_prime(11) {
		panic("is_germain_prime(11) failed")
	}
	if is_germain_prime(4) {
		panic("is_germain_prime(4) failed")
	}
	if !is_germain_prime(23) {
		panic("is_germain_prime(23) failed")
	}
	if is_germain_prime(13) {
		panic("is_germain_prime(13) failed")
	}
	if is_germain_prime(20) {
		panic("is_germain_prime(20) failed")
	}
}

func test_is_safe_prime() {
	if !is_safe_prime(5) {
		panic("is_safe_prime(5) failed")
	}
	if !is_safe_prime(11) {
		panic("is_safe_prime(11) failed")
	}
	if is_safe_prime(1) {
		panic("is_safe_prime(1) failed")
	}
	if is_safe_prime(2) {
		panic("is_safe_prime(2) failed")
	}
	if is_safe_prime(3) {
		panic("is_safe_prime(3) failed")
	}
	if !is_safe_prime(47) {
		panic("is_safe_prime(47) failed")
	}
}

func mochiMain() {
	test_is_germain_prime()
	test_is_safe_prime()
	fmt.Println(is_germain_prime(23))
	fmt.Println(is_safe_prime(47))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
