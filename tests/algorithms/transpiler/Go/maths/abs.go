//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-16 14:47:22 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	math "math"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		return
	}
	s[idx] = v
}

func abs_val(num float64) float64 {
	if num < 0.0 {
		return (0 - num)
	}
	return num
}

func abs_min(x []int) int {
	if len(x) == 0 {
		panic("abs_min() arg is an empty sequence")
	}
	var j int = _index(x, 0)
	_ = j
	var idx int = 0
	_ = idx
	for idx < len(x) {
		var i int = _index(x, idx)
		_ = i
		if abs_val(float64(i)) < abs_val(float64(j)) {
			j = i
		}
		idx = (idx + 1)
	}
	return j
}

func abs_max(x []int) int {
	if len(x) == 0 {
		panic("abs_max() arg is an empty sequence")
	}
	var j int = _index(x, 0)
	_ = j
	var idx int = 0
	_ = idx
	for idx < len(x) {
		var i int = _index(x, idx)
		_ = i
		if abs_val(float64(i)) > abs_val(float64(j)) {
			j = i
		}
		idx = (idx + 1)
	}
	return j
}

func abs_max_sort(x []int) int {
	if len(x) == 0 {
		panic("abs_max_sort() arg is an empty sequence")
	}
	var arr []int = []int{}
	_ = arr
	var i int = 0
	_ = i
	for i < len(x) {
		arr = append(arr, _index(x, i))
		i = (i + 1)
	}
	var n int = len(arr)
	_ = n
	var a int = 0
	_ = a
	for a < n {
		var b int = 0
		_ = b
		for b < ((n - a) - 1) {
			if abs_val(float64(_index(arr, b))) > abs_val(float64(_index(arr, (b+1)))) {
				var temp int = _index(arr, b)
				_ = temp
				_setIndex(arr, b, _index(arr, (b+1)))
				_setIndex(arr, (b + 1), temp)
			}
			b = (b + 1)
		}
		a = (a + 1)
	}
	return _index(arr, (n - 1))
}

func test_abs_val() {
	if abs_val(0.0) != 0.0 {
		panic("abs_val(0) failed")
	}
	if abs_val(34.0) != 34.0 {
		panic("abs_val(34) failed")
	}
	if abs_val((0 - 100000000000.0)) != 100000000000.0 {
		panic("abs_val large failed")
	}
	var a []int = []int{func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}((0 - 3)), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}((0 - 1)), 2, func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}((0 - 11))}
	_ = a
	if abs_max(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(a)) != (0 - 11) {
		panic("abs_max failed")
	}
	if abs_max_sort(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(a)) != (0 - 11) {
		panic("abs_max_sort failed")
	}
	if abs_min(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(a)) != (0 - 1) {
		panic("abs_min failed")
	}
}

func mochiMain() {
	test_abs_val()
	fmt.Println(func() string {
		f := float64(abs_val((0 - 34.0)))
		if f == 0 && math.Signbit(f) {
			return "-0"
		}
		if math.Abs(f-float64(int(f))) < 1e-9 {
			return fmt.Sprintf("%.1f", f)
		}
		return fmt.Sprint(f)
	}())
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
