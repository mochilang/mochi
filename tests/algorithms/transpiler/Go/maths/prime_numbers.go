//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-16 12:55:49 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _modi(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func slow_primes(max_n int) []int {
	var result []int = []int{}
	_ = result
	var i int = 2
	_ = i
	for i <= max_n {
		var j int = 2
		_ = j
		var is_prime bool = true
		_ = is_prime
		for j < i {
			if _modi(i, j) == 0 {
				is_prime = false
				break
			}
			j = (j + 1)
		}
		if is_prime {
			result = append(result, i)
		}
		i = (i + 1)
	}
	return result
}

func primes(max_n int) []int {
	var result []int = []int{}
	_ = result
	var i int = 2
	_ = i
	for i <= max_n {
		var j int = 2
		_ = j
		var is_prime bool = true
		_ = is_prime
		for (j * j) <= i {
			if _modi(i, j) == 0 {
				is_prime = false
				break
			}
			j = (j + 1)
		}
		if is_prime {
			result = append(result, i)
		}
		i = (i + 1)
	}
	return result
}

func fast_primes(max_n int) []int {
	var result []int = []int{}
	_ = result
	if max_n >= 2 {
		result = append(result, 2)
	}
	var i int = 3
	_ = i
	for i <= max_n {
		var j int = 3
		_ = j
		var is_prime bool = true
		_ = is_prime
		for (j * j) <= i {
			if _modi(i, j) == 0 {
				is_prime = false
				break
			}
			j = (j + 2)
		}
		if is_prime {
			result = append(result, i)
		}
		i = (i + 2)
	}
	return result
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(fmt.Sprint(slow_primes(25)))
		fmt.Println(fmt.Sprint(primes(25)))
		fmt.Println(fmt.Sprint(fast_primes(25)))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
