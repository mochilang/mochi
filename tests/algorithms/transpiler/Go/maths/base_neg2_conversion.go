//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-16 11:56:38 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _modi(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func decimal_to_negative_base_2(num int) int {
	if num == 0 {
		return 0
	}
	var n int = num
	_ = n
	var ans string = ""
	_ = ans
	for n != 0 {
		var rem int = _modi(n, (0 - 2))
		_ = rem
		n = (n / (0 - 2))
		if rem < 0 {
			rem = (rem + 2)
			n = (n + 1)
		}
		ans = (fmt.Sprint(rem) + ans)
	}
	return func() int { n, _ := strconv.Atoi(fmt.Sprint(ans)); return n }()
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(decimal_to_negative_base_2(0))
		fmt.Println(decimal_to_negative_base_2((0 - 19)))
		fmt.Println(decimal_to_negative_base_2(4))
		fmt.Println(decimal_to_negative_base_2(7))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
