//go:build ignore

// Generated by Mochi v0.10.63 on 2025-08-12 08:23:06 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	math "math"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _mod(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

func abs(x float64) float64 {
	if x < 0.0 {
		return (0 - x)
	}
	return x
}

func pow_int(base float64, exp int) float64 {
	var result float64 = 1.0
	_ = result
	var i int = 0
	_ = i
	for i < exp {
		result = (result * base)
		i = (i + 1)
	}
	return result
}

func nth_root(x float64, n int) float64 {
	if x == 0.0 {
		return 0.0
	}
	var guess float64 = x
	_ = guess
	var i int = 0
	_ = i
	for i < 10 {
		var denom float64 = pow_int(guess, (n - 1))
		_ = denom
		guess = (float64(((float64((n - 1)) * guess) + (float64(x) / float64(denom)))) / float64(n))
		i = (i + 1)
	}
	return guess
}

func round_nearest(x float64) float64 {
	if x >= 0.0 {
		var n int = int((x + 0.5))
		_ = n
		_ = n
		return float64(n)
	}
	var n int = int((x - 0.5))
	_ = n
	_ = n
	return float64(n)
}

func compute_geometric_mean(nums []float64) float64 {
	if len(nums) == 0 {
		panic("no numbers")
	}
	var product float64 = 1.0
	_ = product
	var i int = 0
	_ = i
	for i < len(nums) {
		product = (product * _index(nums, i))
		i = (i + 1)
	}
	if (product < 0.0) && (_mod(len(nums), 2) == 0) {
		panic("Cannot Compute Geometric Mean for these numbers.")
	}
	var mean float64 = nth_root(math.Abs(product), len(nums))
	_ = mean
	if product < 0.0 {
		mean = (0 - mean)
	}
	var possible float64 = round_nearest(mean)
	_ = possible
	if pow_int(possible, len(nums)) == product {
		mean = possible
	}
	return mean
}

func test_compute_geometric_mean() {
	var eps float64 = 0.0001
	_ = eps
	var m1 float64 = compute_geometric_mean(func(v any) []float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []float64{}
			}
			out := make([]float64, len(arr))
			for i, x := range arr {
				out[i] = x.(float64)
			}
			return out
		}
		return v.([]float64)
	}([]float64{2.0, 8.0}))
	_ = m1
	if math.Abs((m1 - 4.0)) > eps {
		panic("test1 failed")
	}
	var m2 float64 = compute_geometric_mean(func(v any) []float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []float64{}
			}
			out := make([]float64, len(arr))
			for i, x := range arr {
				out[i] = x.(float64)
			}
			return out
		}
		return v.([]float64)
	}([]float64{5.0, 125.0}))
	_ = m2
	if math.Abs((m2 - 25.0)) > eps {
		panic("test2 failed")
	}
	var m3 float64 = compute_geometric_mean(func(v any) []float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []float64{}
			}
			out := make([]float64, len(arr))
			for i, x := range arr {
				out[i] = x.(float64)
			}
			return out
		}
		return v.([]float64)
	}([]float64{1.0, 0.0}))
	_ = m3
	if math.Abs((m3 - 0.0)) > eps {
		panic("test3 failed")
	}
	var m4 float64 = compute_geometric_mean(func(v any) []float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []float64{}
			}
			out := make([]float64, len(arr))
			for i, x := range arr {
				out[i] = x.(float64)
			}
			return out
		}
		return v.([]float64)
	}([]float64{1.0, 5.0, 25.0, 5.0}))
	_ = m4
	if math.Abs((m4 - 5.0)) > eps {
		panic("test4 failed")
	}
	var m5 float64 = compute_geometric_mean(func(v any) []float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []float64{}
			}
			out := make([]float64, len(arr))
			for i, x := range arr {
				out[i] = x.(float64)
			}
			return out
		}
		return v.([]float64)
	}([]float64{(0 - 5.0), 25.0, 1.0}))
	_ = m5
	if math.Abs((m5 + 5.0)) > eps {
		panic("test5 failed")
	}
}

func mochiMain() {
	test_compute_geometric_mean()
	fmt.Println(func() string {
		f := float64(compute_geometric_mean(func(v any) []float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []float64{}
				}
				out := make([]float64, len(arr))
				for i, x := range arr {
					out[i] = x.(float64)
				}
				return out
			}
			return v.([]float64)
		}([]float64{(0 - 3.0), (0 - 27.0)})))
		if f == 0 && math.Signbit(f) {
			return "-0"
		}
		if f == float64(int(f)) {
			return fmt.Sprintf("%.1f", f)
		}
		return fmt.Sprint(f)
	}())
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
