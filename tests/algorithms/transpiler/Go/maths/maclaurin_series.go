//go:build ignore

// Generated by Mochi v0.10.63 on 2025-08-12 08:25:51 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _mod(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

var PI float64

func floor(x float64) float64 {
	var i int = int(x)
	_ = i
	if float64(i) > x {
		i = (i - 1)
	}
	return float64(i)
}

func pow(x float64, n int) float64 {
	var result float64 = 1.0
	_ = result
	var i int = 0
	_ = i
	for i < n {
		result = (result * x)
		i = (i + 1)
	}
	return result
}

func factorial(n int) float64 {
	var result float64 = 1.0
	_ = result
	var i int = 2
	_ = i
	for i <= n {
		result = (result * float64(i))
		i = (i + 1)
	}
	return result
}

func maclaurin_sin(theta float64, accuracy int) float64 {
	var t float64 = theta
	_ = t
	var div float64 = floor((float64(t) / float64((2.0 * PI))))
	_ = div
	t = (t - ((2.0 * div) * PI))
	var sum float64 = 0.0
	_ = sum
	var r int = 0
	_ = r
	for r < accuracy {
		var power int = ((2 * r) + 1)
		_ = power
		var sign float64 = func() float64 {
			if _mod(r, 2) == 0 {
				return 1.0
			} else {
				return (0 - 1.0)
			}
		}()
		_ = sign
		sum = (sum + (float64((sign * pow(t, power))) / float64(factorial(power))))
		r = (r + 1)
	}
	return sum
}

func maclaurin_cos(theta float64, accuracy int) float64 {
	var t float64 = theta
	_ = t
	var div float64 = floor((float64(t) / float64((2.0 * PI))))
	_ = div
	t = (t - ((2.0 * div) * PI))
	var sum float64 = 0.0
	_ = sum
	var r int = 0
	_ = r
	for r < accuracy {
		var power int = (2 * r)
		_ = power
		var sign float64 = func() float64 {
			if _mod(r, 2) == 0 {
				return 1.0
			} else {
				return (0 - 1.0)
			}
		}()
		_ = sign
		sum = (sum + (float64((sign * pow(t, power))) / float64(factorial(power))))
		r = (r + 1)
	}
	return sum
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		PI = 3.141592653589793
		fmt.Println(fmt.Sprint(maclaurin_sin(10.0, 30)))
		fmt.Println(fmt.Sprint(maclaurin_sin((0 - 10.0), 30)))
		fmt.Println(fmt.Sprint(maclaurin_sin(10.0, 15)))
		fmt.Println(fmt.Sprint(maclaurin_sin((0 - 10.0), 15)))
		fmt.Println(fmt.Sprint(maclaurin_cos(5.0, 30)))
		fmt.Println(fmt.Sprint(maclaurin_cos((0 - 5.0), 30)))
		fmt.Println(fmt.Sprint(maclaurin_cos(10.0, 15)))
		fmt.Println(fmt.Sprint(maclaurin_cos((0 - 10.0), 15)))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
