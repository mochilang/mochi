//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-16 12:56:41 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

type Point struct {
	X float64 `json:"x"`
	Y float64 `json:"y"`
	Z float64 `json:"z"`
}

func absf(x float64) float64 {
	if x < 0.0 {
		return (0 - x)
	}
	return x
}

func sqrt_approx(x float64) float64 {
	if x <= 0.0 {
		return 0.0
	}
	var guess float64 = (float64(x) / float64(2.0))
	_ = guess
	var i int = 0
	_ = i
	for i < 20 {
		guess = (float64((guess + (float64(x) / float64(guess)))) / float64(2.0))
		i = (i + 1)
	}
	return guess
}

func distance(a Point, b Point) float64 {
	var dx float64 = (b.X - a.X)
	_ = dx
	_ = dx
	var dy float64 = (b.Y - a.Y)
	_ = dy
	_ = dy
	var dz float64 = (b.Z - a.Z)
	_ = dz
	_ = dz
	return sqrt_approx(absf((((dx * dx) + (dy * dy)) + (dz * dz))))
}

func point_to_string(p Point) string {
	return (((((("Point(" + fmt.Sprint(p.X)) + ", ") + fmt.Sprint(p.Y)) + ", ") + fmt.Sprint(p.Z)) + ")")
}

func test_distance() {
	var p1 Point = Point{
		X: 2.0,
		Y: (0 - 1.0),
		Z: 7.0,
	}
	_ = p1
	var p2 Point = Point{
		X: 1.0,
		Y: (0 - 3.0),
		Z: 5.0,
	}
	_ = p2
	var d float64 = distance(p1, p2)
	_ = d
	if absf((d - 3.0)) > 0.0001 {
		panic("distance test failed")
	}
	fmt.Println(((((("Distance from " + point_to_string(p1)) + " to ") + point_to_string(p2)) + " is ") + fmt.Sprint(d)))
}

func mochiMain() {
	test_distance()
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
