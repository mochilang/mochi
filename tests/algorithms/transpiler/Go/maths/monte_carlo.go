//go:build ignore

// Generated by Mochi v0.10.63 on 2025-08-12 08:26:02 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	math "math"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _mod(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

var PI float64

var rand_seed int

func rand_float() float64 {
	rand_seed = _mod(((1103515245 * rand_seed) + 12345), 2147483648)
	return (float64(rand_seed) / float64(2147483648.0))
}

func rand_range(min_val float64, max_val float64) float64 {
	return ((rand_float() * (max_val - min_val)) + min_val)
}

func abs_float(x float64) float64 {
	if x < 0.0 {
		return (0 - x)
	}
	return x
}

func sqrtApprox(x float64) float64 {
	if x == 0.0 {
		return 0.0
	}
	var guess float64 = (float64(x) / float64(2.0))
	_ = guess
	var i int = 0
	_ = i
	for i < 20 {
		guess = (float64((guess + (float64(x) / float64(guess)))) / float64(2.0))
		i = (i + 1)
	}
	return guess
}

func pi_estimator(iterations int) {
	var inside float64 = 0.0
	_ = inside
	var i int = 0
	_ = i
	for i < iterations {
		var x float64 = rand_range((0 - 1.0), 1.0)
		_ = x
		var y float64 = rand_range((0 - 1.0), 1.0)
		_ = y
		if ((x * x) + (y * y)) <= 1.0 {
			inside = (inside + 1.0)
		}
		i = (i + 1)
	}
	var proportion float64 = (float64(inside) / float64(iterations))
	_ = proportion
	var pi_estimate float64 = (proportion * 4.0)
	_ = pi_estimate
	_ = pi_estimate
	fmt.Println("The estimated value of pi is", func() string {
		f := float64(pi_estimate)
		if f == 0 && math.Signbit(f) {
			return "-0"
		}
		if f == float64(int(f)) {
			return fmt.Sprintf("%.1f", f)
		}
		return fmt.Sprint(f)
	}())
	fmt.Println("The numpy value of pi is", func() string {
		f := float64(PI)
		if f == 0 && math.Signbit(f) {
			return "-0"
		}
		if f == float64(int(f)) {
			return fmt.Sprintf("%.1f", f)
		}
		return fmt.Sprint(f)
	}())
	fmt.Println("The total error is", func() string {
		f := float64(abs_float((PI - pi_estimate)))
		if f == 0 && math.Signbit(f) {
			return "-0"
		}
		if f == float64(int(f)) {
			return fmt.Sprintf("%.1f", f)
		}
		return fmt.Sprint(f)
	}())
}

func area_under_curve_estimator(iterations int, f func(float64) float64, min_value float64, max_value float64) float64 {
	var sum float64 = 0.0
	_ = sum
	var i int = 0
	_ = i
	for i < iterations {
		var x float64 = rand_range(min_value, max_value)
		_ = x
		sum = (sum + f(x))
		i = (i + 1)
	}
	var expected float64 = (float64(sum) / float64(iterations))
	_ = expected
	_ = expected
	return (expected * (max_value - min_value))
}

func area_under_line_estimator_check(iterations int, min_value float64, max_value float64) {
	var identity_function func(float64) float64
	_ = identity_function
	identity_function = func(x float64) float64 {
		return x
	}
	var estimated_value float64 = area_under_curve_estimator(iterations, identity_function, min_value, max_value)
	_ = estimated_value
	_ = estimated_value
	var expected_value float64 = (float64(((max_value * max_value) - (min_value * min_value))) / float64(2.0))
	_ = expected_value
	_ = expected_value
	fmt.Println("******************")
	fmt.Println("Estimating area under y=x where x varies from", func() string {
		f := float64(min_value)
		if f == 0 && math.Signbit(f) {
			return "-0"
		}
		if f == float64(int(f)) {
			return fmt.Sprintf("%.1f", f)
		}
		return fmt.Sprint(f)
	}())
	fmt.Println("Estimated value is", func() string {
		f := float64(estimated_value)
		if f == 0 && math.Signbit(f) {
			return "-0"
		}
		if f == float64(int(f)) {
			return fmt.Sprintf("%.1f", f)
		}
		return fmt.Sprint(f)
	}())
	fmt.Println("Expected value is", func() string {
		f := float64(expected_value)
		if f == 0 && math.Signbit(f) {
			return "-0"
		}
		if f == float64(int(f)) {
			return fmt.Sprintf("%.1f", f)
		}
		return fmt.Sprint(f)
	}())
	fmt.Println("Total error is", func() string {
		f := float64(abs_float((estimated_value - expected_value)))
		if f == 0 && math.Signbit(f) {
			return "-0"
		}
		if f == float64(int(f)) {
			return fmt.Sprintf("%.1f", f)
		}
		return fmt.Sprint(f)
	}())
	fmt.Println("******************")
}

func pi_estimator_using_area_under_curve(iterations int) {
	var semi_circle func(float64) float64
	_ = semi_circle
	semi_circle = func(x float64) float64 {
		var y float64 = (4.0 - (x * x))
		_ = y
		var s float64 = sqrtApprox(y)
		_ = s
		_ = s
		return s
	}
	var estimated_value float64 = area_under_curve_estimator(iterations, semi_circle, 0.0, 2.0)
	_ = estimated_value
	_ = estimated_value
	fmt.Println("******************")
	fmt.Println("Estimating pi using area_under_curve_estimator")
	fmt.Println("Estimated value is", func() string {
		f := float64(estimated_value)
		if f == 0 && math.Signbit(f) {
			return "-0"
		}
		if f == float64(int(f)) {
			return fmt.Sprintf("%.1f", f)
		}
		return fmt.Sprint(f)
	}())
	fmt.Println("Expected value is", func() string {
		f := float64(PI)
		if f == 0 && math.Signbit(f) {
			return "-0"
		}
		if f == float64(int(f)) {
			return fmt.Sprintf("%.1f", f)
		}
		return fmt.Sprint(f)
	}())
	fmt.Println("Total error is", func() string {
		f := float64(abs_float((estimated_value - PI)))
		if f == 0 && math.Signbit(f) {
			return "-0"
		}
		if f == float64(int(f)) {
			return fmt.Sprintf("%.1f", f)
		}
		return fmt.Sprint(f)
	}())
	fmt.Println("******************")
}

func mochiMain() {
	pi_estimator(1000)
	area_under_line_estimator_check(1000, 0.0, 1.0)
	pi_estimator_using_area_under_curve(1000)
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		PI = 3.141592653589793
		rand_seed = 123456789
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
