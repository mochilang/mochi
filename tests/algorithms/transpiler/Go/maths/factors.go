//go:build ignore

// Generated by Mochi v0.10.63 on 2025-08-12 07:55:22 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"reflect"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _mod(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

func _concat[T any](a, b []T) []T {
	return append(append([]T{}, a...), b...)
}

func reverse(xs []int) []int {
	var res []int = []int{}
	_ = res
	var i int = (len(xs) - 1)
	_ = i
	for i >= 0 {
		res = append(res, _index(xs, i))
		i = (i - 1)
	}
	return res
}

func factors_of_a_number(num int) []int {
	var facs []int = []int{}
	_ = facs
	if num < 1 {
		return facs
	}
	var small []int = []int{}
	_ = small
	var large []int = []int{}
	_ = large
	var i int = 1
	_ = i
	for (i * i) <= num {
		if _mod(num, i) == 0 {
			small = append(small, i)
			var d int = (num / i)
			_ = d
			if d != i {
				large = append(large, d)
			}
		}
		i = (i + 1)
	}
	facs = _concat(small, reverse(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(large)))
	return facs
}

func run_tests() {
	if !reflect.DeepEqual(factors_of_a_number(1), []int{func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(1)}) {
		panic("case1 failed")
	}
	if !reflect.DeepEqual(factors_of_a_number(5), []int{func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(1), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(5)}) {
		panic("case2 failed")
	}
	if !reflect.DeepEqual(factors_of_a_number(24), []int{func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(1), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(2), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(3), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(4), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(6), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(8), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(12), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(24)}) {
		panic("case3 failed")
	}
	if !reflect.DeepEqual(factors_of_a_number((0 - 24)), []int{}) {
		panic("case4 failed")
	}
}

func mochiMain() {
	run_tests()
	fmt.Println(fmt.Sprint(factors_of_a_number(24)))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
