//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-16 12:26:39 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _modi(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

type Fraction struct {
	Numerator   int `json:"numerator"`
	Denominator int `json:"denominator"`
}

func pow10(n int) int {
	var result int = 1
	_ = result
	var i int = 0
	_ = i
	for i < n {
		result = (result * 10)
		i = (i + 1)
	}
	return result
}

func gcd(a int, b int) int {
	var x int = a
	_ = x
	var y int = b
	_ = y
	if x < 0 {
		x = (0 - x)
	}
	if y < 0 {
		y = (0 - y)
	}
	for y != 0 {
		var r int = _modi(x, y)
		_ = r
		x = y
		y = r
	}
	return x
}

func parse_decimal(s string) Fraction {
	if len(s) == 0 {
		panic("invalid number")
	}
	var idx int = 0
	_ = idx
	var sign int = 1
	_ = sign
	var first string = _substr(s, 0, 1)
	_ = first
	if first == "-" {
		sign = (0 - 1)
		idx = 1
	} else {
		if first == "+" {
			idx = 1
		}
	}
	var int_part string = ""
	_ = int_part
	for idx < len(s) {
		var c string = _substr(s, idx, (idx + 1))
		_ = c
		if (c >= "0") && (c <= "9") {
			int_part = (int_part + c)
			idx = (idx + 1)
		} else {
			break
		}
	}
	var frac_part string = ""
	_ = frac_part
	if (idx < len(s)) && (_substr(s, idx, (idx+1)) == ".") {
		idx = (idx + 1)
		for idx < len(s) {
			var c string = _substr(s, idx, (idx + 1))
			_ = c
			if (c >= "0") && (c <= "9") {
				frac_part = (frac_part + c)
				idx = (idx + 1)
			} else {
				break
			}
		}
	}
	var exp int = 0
	_ = exp
	if (idx < len(s)) && ((_substr(s, idx, (idx+1)) == "e") || (_substr(s, idx, (idx+1)) == "E")) {
		idx = (idx + 1)
		var exp_sign int = 1
		_ = exp_sign
		if (idx < len(s)) && (_substr(s, idx, (idx+1)) == "-") {
			exp_sign = (0 - 1)
			idx = (idx + 1)
		} else {
			if (idx < len(s)) && (_substr(s, idx, (idx+1)) == "+") {
				idx = (idx + 1)
			}
		}
		var exp_str string = ""
		_ = exp_str
		for idx < len(s) {
			var c string = _substr(s, idx, (idx + 1))
			_ = c
			if (c >= "0") && (c <= "9") {
				exp_str = (exp_str + c)
				idx = (idx + 1)
			} else {
				panic("invalid number")
			}
		}
		if len(exp_str) == 0 {
			panic("invalid number")
		}
		exp = (exp_sign * func() int { n, _ := strconv.Atoi(fmt.Sprint(exp_str)); return n }())
	}
	if idx != len(s) {
		panic("invalid number")
	}
	if len(int_part) == 0 {
		int_part = "0"
	}
	var num_str string = (int_part + frac_part)
	_ = num_str
	_ = num_str
	var numerator int = func() int { n, _ := strconv.Atoi(fmt.Sprint(num_str)); return n }()
	_ = numerator
	if sign == (0 - 1) {
		numerator = (0 - numerator)
	}
	var denominator int = pow10(len(frac_part))
	_ = denominator
	if exp > 0 {
		numerator = (numerator * pow10(exp))
	} else {
		if exp < 0 {
			denominator = (denominator * pow10((0 - exp)))
		}
	}
	return Fraction{
		Numerator:   numerator,
		Denominator: denominator,
	}
}

func reduce(fr Fraction) Fraction {
	var g int = gcd(fr.Numerator, fr.Denominator)
	_ = g
	_ = g
	return Fraction{
		Numerator:   (fr.Numerator / g),
		Denominator: (fr.Denominator / g),
	}
}

func decimal_to_fraction_str(s string) Fraction {
	return reduce(parse_decimal(s))
}

func decimal_to_fraction(x float64) Fraction {
	return decimal_to_fraction_str(fmt.Sprint(x))
}

func assert_fraction(name string, fr Fraction, num int, den int) {
	if (fr.Numerator != num) || (fr.Denominator != den) {
		panic(name)
	}
}

func test_decimal_to_fraction() {
	assert_fraction("case1", decimal_to_fraction(2.0), 2, 1)
	assert_fraction("case2", decimal_to_fraction(89.0), 89, 1)
	assert_fraction("case3", decimal_to_fraction_str("67"), 67, 1)
	assert_fraction("case4", decimal_to_fraction_str("45.0"), 45, 1)
	assert_fraction("case5", decimal_to_fraction(1.5), 3, 2)
	assert_fraction("case6", decimal_to_fraction_str("6.25"), 25, 4)
	assert_fraction("case7", decimal_to_fraction(0.0), 0, 1)
	assert_fraction("case8", decimal_to_fraction((0 - 2.5)), (0 - 5), 2)
	assert_fraction("case9", decimal_to_fraction(0.125), 1, 8)
	assert_fraction("case10", decimal_to_fraction(1.00000025e+06), 4000001, 4)
	assert_fraction("case11", decimal_to_fraction(1.3333), 13333, 10000)
	assert_fraction("case12", decimal_to_fraction_str("1.23e2"), 123, 1)
	assert_fraction("case13", decimal_to_fraction_str("0.500"), 1, 2)
}

func mochiMain() {
	test_decimal_to_fraction()
	var fr Fraction = decimal_to_fraction(1.5)
	_ = fr
	fmt.Println(((fmt.Sprint(fr.Numerator) + "/") + fmt.Sprint(fr.Denominator)))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
