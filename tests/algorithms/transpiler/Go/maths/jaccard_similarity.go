//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-16 12:27:16 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	math "math"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func contains(xs []string, value string) bool {
	var i int = 0
	_ = i
	for i < len(xs) {
		if _index(xs, i) == value {
			return true
		}
		i = (i + 1)
	}
	return false
}

func jaccard_similarity(set_a []string, set_b []string, alternative_union bool) float64 {
	var intersection_len int = 0
	_ = intersection_len
	var i int = 0
	_ = i
	for i < len(set_a) {
		if contains(set_b, _index(set_a, i)) {
			intersection_len = (intersection_len + 1)
		}
		i = (i + 1)
	}
	var union_len int = 0
	_ = union_len
	if alternative_union {
		union_len = (len(set_a) + len(set_b))
	} else {
		var union_list []string = []string{}
		_ = union_list
		i = 0
		for i < len(set_a) {
			var val_a string = _index(set_a, i)
			_ = val_a
			if !contains(union_list, val_a) {
				union_list = append(union_list, val_a)
			}
			i = (i + 1)
		}
		i = 0
		for i < len(set_b) {
			var val_b string = _index(set_b, i)
			_ = val_b
			if !contains(union_list, val_b) {
				union_list = append(union_list, val_b)
			}
			i = (i + 1)
		}
		union_len = len(union_list)
	}
	return (float64((1.0 * float64(intersection_len))) / float64(union_len))
}

func mochiMain() {
	var set_a []string = []string{"a", "b", "c", "d", "e"}
	_ = set_a
	_ = set_a
	var set_b []string = []string{"c", "d", "e", "f", "h", "i"}
	_ = set_b
	_ = set_b
	fmt.Println(func() string {
		f := float64(jaccard_similarity(func(v any) []string {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]string); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []string{}
				}
				out := make([]string, len(arr))
				for i, x := range arr {
					out[i] = fmt.Sprint(x)
				}
				return out
			}
			return v.([]string)
		}(set_a), func(v any) []string {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]string); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []string{}
				}
				out := make([]string, len(arr))
				for i, x := range arr {
					out[i] = fmt.Sprint(x)
				}
				return out
			}
			return v.([]string)
		}(set_b), false))
		if f == 0 && math.Signbit(f) {
			return "-0"
		}
		if f == float64(int(f)) {
			return fmt.Sprintf("%.1f", f)
		}
		return fmt.Sprint(f)
	}())
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
