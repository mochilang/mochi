//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-16 13:04:02 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	math "math"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func is_geometric_series(series []float64) bool {
	if len(series) == 0 {
		panic("Input list must be a non empty list")
	}
	if len(series) == 1 {
		return true
	}
	if _index(series, 0) == 0.0 {
		return false
	}
	var ratio float64 = (float64(_index(series, 1)) / float64(_index(series, 0)))
	_ = ratio
	var i int = 0
	_ = i
	for i < (len(series) - 1) {
		if _index(series, i) == 0.0 {
			return false
		}
		if (float64(_index(series, (i+1))) / float64(_index(series, i))) != ratio {
			return false
		}
		i = (i + 1)
	}
	return true
}

func geometric_mean(series []float64) float64 {
	if len(series) == 0 {
		panic("Input list must be a non empty list")
	}
	var product float64 = 1.0
	_ = product
	var i int = 0
	_ = i
	for i < len(series) {
		product = (product * _index(series, i))
		i = (i + 1)
	}
	var n int = len(series)
	_ = n
	_ = n
	return math.Pow(product, 1.0/float64(n))
}

func pow_float(base float64, exp int) float64 {
	var result float64 = 1.0
	_ = result
	var i int = 0
	_ = i
	for i < exp {
		result = (result * base)
		i = (i + 1)
	}
	return result
}

func nth_root(value float64, n int) float64 {
	if value == 0.0 {
		return 0.0
	}
	var low float64 = 0.0
	_ = low
	var high float64 = value
	_ = high
	if value < 1.0 {
		high = 1.0
	}
	var mid float64 = (float64((low + high)) / float64(2.0))
	_ = mid
	var i int = 0
	_ = i
	for i < 40 {
		var mp float64 = pow_float(mid, n)
		_ = mp
		if mp > value {
			high = mid
		} else {
			low = mid
		}
		mid = (float64((low + high)) / float64(2.0))
		i = (i + 1)
	}
	return mid
}

func test_geometric() {
	var a []float64 = []float64{2.0, 4.0, 8.0}
	_ = a
	if !is_geometric_series(func(v any) []float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []float64{}
			}
			out := make([]float64, len(arr))
			for i, x := range arr {
				out[i] = x.(float64)
			}
			return out
		}
		return v.([]float64)
	}(a)) {
		panic("expected geometric series")
	}
	var b []float64 = []float64{1.0, 2.0, 3.0}
	_ = b
	if is_geometric_series(func(v any) []float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []float64{}
			}
			out := make([]float64, len(arr))
			for i, x := range arr {
				out[i] = x.(float64)
			}
			return out
		}
		return v.([]float64)
	}(b)) {
		panic("expected non geometric series")
	}
}

func mochiMain() {
	test_geometric()
	fmt.Println(func() string {
		f := float64(geometric_mean(func(v any) []float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []float64{}
				}
				out := make([]float64, len(arr))
				for i, x := range arr {
					out[i] = x.(float64)
				}
				return out
			}
			return v.([]float64)
		}([]float64{2.0, 4.0, 8.0})))
		if f == 0 && math.Signbit(f) {
			return "-0"
		}
		if math.Abs(f-float64(int(f))) < 1e-9 {
			return fmt.Sprintf("%.1f", f)
		}
		return fmt.Sprint(f)
	}())
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
