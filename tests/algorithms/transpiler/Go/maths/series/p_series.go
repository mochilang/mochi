//go:build ignore

// Generated by Mochi v0.10.64 on 2025-08-12 16:20:15 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"strings"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func pow_string(base int, exp int) string {
	if exp >= 0 {
		var res int = 1
		_ = res
		var i int = 0
		_ = i
		for i < exp {
			res = (res * base)
			i = (i + 1)
		}
		return fmt.Sprint(res)
	}
	var e int = (0 - exp)
	_ = e
	var res float64 = 1.0
	_ = res
	var b float64 = (float64(base) * 1.0)
	_ = b
	var i int = 0
	_ = i
	for i < e {
		res = (res * b)
		i = (i + 1)
	}
	var value float64 = (float64(1.0) / float64(res))
	_ = value
	_ = value
	return fmt.Sprint(value)
}

func p_series(nth_term int, power int) []string {
	var series []string = []string{}
	_ = series
	if nth_term <= 0 {
		return series
	}
	var i int = 1
	_ = i
	for i <= nth_term {
		if i == 1 {
			series = append(series, "1")
		} else {
			series = append(series, ("1 / " + pow_string(i, power)))
		}
		i = (i + 1)
	}
	return series
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(func() string {
			b, _ := json.Marshal(p_series(5, 2))
			s := string(b)
			s = strings.ReplaceAll(s, ":", ": ")
			s = strings.ReplaceAll(s, ",", ", ")
			s = strings.ReplaceAll(s, "}, {", "},{")
			return s
		}())
		fmt.Println(func() string {
			b, _ := json.Marshal(p_series((0 - 5), 2))
			s := string(b)
			s = strings.ReplaceAll(s, ":", ": ")
			s = strings.ReplaceAll(s, ",", ", ")
			s = strings.ReplaceAll(s, "}, {", "},{")
			return s
		}())
		fmt.Println(func() string {
			b, _ := json.Marshal(p_series(5, (0 - 2)))
			s := string(b)
			s = strings.ReplaceAll(s, ":", ": ")
			s = strings.ReplaceAll(s, ",", ", ")
			s = strings.ReplaceAll(s, "}, {", "},{")
			return s
		}())
		fmt.Println(func() string {
			b, _ := json.Marshal(p_series(0, 0))
			s := string(b)
			s = strings.ReplaceAll(s, ":", ": ")
			s = strings.ReplaceAll(s, ",", ", ")
			s = strings.ReplaceAll(s, "}, {", "},{")
			return s
		}())
		fmt.Println(func() string {
			b, _ := json.Marshal(p_series(1, 1))
			s := string(b)
			s = strings.ReplaceAll(s, ":", ": ")
			s = strings.ReplaceAll(s, ",", ", ")
			s = strings.ReplaceAll(s, "}, {", "},{")
			return s
		}())
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
