//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-16 13:04:15 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"reflect"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func hexagonal_numbers(length int) []int {
	if length <= 0 {
		panic("Length must be a positive integer.")
	}
	var res []int = []int{}
	_ = res
	var n int = 0
	_ = n
	for n < length {
		res = append(res, (n * ((2 * n) - 1)))
		n = (n + 1)
	}
	return res
}

func test_hexagonal_numbers() {
	var expected5 []int = []int{0, 1, 6, 15, 28}
	_ = expected5
	var result5 []int = hexagonal_numbers(5)
	_ = result5
	if !reflect.DeepEqual(result5, expected5) {
		panic("hexagonal_numbers(5) failed")
	}
	var expected10 []int = []int{0, 1, 6, 15, 28, 45, 66, 91, 120, 153}
	_ = expected10
	var result10 []int = hexagonal_numbers(10)
	_ = result10
	if !reflect.DeepEqual(result10, expected10) {
		panic("hexagonal_numbers(10) failed")
	}
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		test_hexagonal_numbers()
		fmt.Println(fmt.Sprint(hexagonal_numbers(5)))
		fmt.Println(fmt.Sprint(hexagonal_numbers(10)))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
