//go:build ignore

// Generated by Mochi v0.10.64 on 2025-08-12 16:20:11 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	math "math"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

func is_harmonic_series(series []float64) bool {
	if len(series) == 0 {
		panic("Input list must be a non empty list")
	}
	if len(series) == 1 {
		if _index(series, 0) == 0.0 {
			panic("Input series cannot have 0 as an element")
		}
		return true
	}
	var rec_series []float64 = []float64{}
	_ = rec_series
	var i int = 0
	_ = i
	for i < len(series) {
		var val float64 = _index(series, i)
		_ = val
		if val == 0.0 {
			panic("Input series cannot have 0 as an element")
		}
		rec_series = append(rec_series, (float64(1.0) / float64(val)))
		i = (i + 1)
	}
	var common_diff float64 = (_index(rec_series, 1) - _index(rec_series, 0))
	_ = common_diff
	var idx int = 2
	_ = idx
	for idx < len(rec_series) {
		if (_index(rec_series, idx) - _index(rec_series, (idx-1))) != common_diff {
			return false
		}
		idx = (idx + 1)
	}
	return true
}

func harmonic_mean(series []float64) float64 {
	if len(series) == 0 {
		panic("Input list must be a non empty list")
	}
	var total float64 = 0.0
	_ = total
	var i int = 0
	_ = i
	for i < len(series) {
		total = (total + (float64(1.0) / float64(_index(series, i))))
		i = (i + 1)
	}
	return (float64(float64(len(series))) / float64(total))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(is_harmonic_series(func(v any) []float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []float64{}
				}
				out := make([]float64, len(arr))
				for i, x := range arr {
					out[i] = x.(float64)
				}
				return out
			}
			return v.([]float64)
		}([]float64{1.0, (float64(2.0) / float64(3.0)), (float64(1.0) / float64(2.0)), (float64(2.0) / float64(5.0)), (float64(1.0) / float64(3.0))})))
		fmt.Println(is_harmonic_series(func(v any) []float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []float64{}
				}
				out := make([]float64, len(arr))
				for i, x := range arr {
					out[i] = x.(float64)
				}
				return out
			}
			return v.([]float64)
		}([]float64{1.0, (float64(2.0) / float64(3.0)), (float64(2.0) / float64(5.0)), (float64(1.0) / float64(3.0))})))
		fmt.Println(func() string {
			f := float64(harmonic_mean(func(v any) []float64 {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]float64); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []float64{}
					}
					out := make([]float64, len(arr))
					for i, x := range arr {
						out[i] = x.(float64)
					}
					return out
				}
				return v.([]float64)
			}([]float64{1.0, 4.0, 4.0})))
			if f == 0 && math.Signbit(f) {
				return "-0"
			}
			if f == float64(int(f)) {
				return fmt.Sprintf("%.1f", f)
			}
			return fmt.Sprint(f)
		}())
		fmt.Println(func() string {
			f := float64(harmonic_mean(func(v any) []float64 {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]float64); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []float64{}
					}
					out := make([]float64, len(arr))
					for i, x := range arr {
						out[i] = x.(float64)
					}
					return out
				}
				return v.([]float64)
			}([]float64{3.0, 6.0, 9.0, 12.0})))
			if f == 0 && math.Signbit(f) {
				return "-0"
			}
			if f == float64(int(f)) {
				return fmt.Sprintf("%.1f", f)
			}
			return fmt.Sprint(f)
		}())
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
