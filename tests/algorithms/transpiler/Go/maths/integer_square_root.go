//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-16 12:27:10 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func integer_square_root(num int) int {
	if num < 0 {
		panic("num must be non-negative integer")
	}
	if num < 2 {
		return num
	}
	var left_bound int = 0
	_ = left_bound
	var right_bound int = (num / 2)
	_ = right_bound
	for left_bound <= right_bound {
		var mid int = (left_bound + ((right_bound - left_bound) / 2))
		_ = mid
		var mid_squared int = (mid * mid)
		_ = mid_squared
		if mid_squared == num {
			return mid
		}
		if mid_squared < num {
			left_bound = (mid + 1)
		} else {
			right_bound = (mid - 1)
		}
	}
	return right_bound
}

func test_integer_square_root() {
	var expected []int = []int{0, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 4, 4}
	_ = expected
	var i int = 0
	_ = i
	for i < len(expected) {
		var result int = integer_square_root(i)
		_ = result
		if result != _index(expected, i) {
			panic(("test failed at index " + fmt.Sprint(i)))
		}
		i = (i + 1)
	}
	if integer_square_root(625) != 25 {
		panic("sqrt of 625 incorrect")
	}
	if integer_square_root(2147483647) != 46340 {
		panic("sqrt of max int incorrect")
	}
}

func mochiMain() {
	test_integer_square_root()
	fmt.Println(fmt.Sprint(integer_square_root(625)))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
