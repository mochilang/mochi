//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-15 10:32:58 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _modi(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func floor_div(a int, b int) int {
	var q int = (a / b)
	_ = q
	var r int = _modi(a, b)
	_ = r
	if (r != 0) && (((a < 0) && (b > 0)) || ((a > 0) && (b < 0))) {
		q = (q - 1)
	}
	return q
}

func continued_fraction(numerator int, denominator int) []int {
	var num int = numerator
	_ = num
	var den int = denominator
	_ = den
	var result []int = []int{}
	_ = result
	for {
		var integer_part int = floor_div(num, den)
		_ = integer_part
		result = append(result, integer_part)
		num = (num - (integer_part * den))
		if num == 0 {
			break
		}
		var tmp int = num
		_ = tmp
		num = den
		den = tmp
	}
	return result
}

func list_to_string(lst []int) string {
	var s string = "["
	_ = s
	var i int = 0
	_ = i
	for i < len(lst) {
		s = (s + fmt.Sprint(_index(lst, i)))
		if i < (len(lst) - 1) {
			s = (s + ", ")
		}
		i = (i + 1)
	}
	return (s + "]")
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(("Continued Fraction of 0.84375 is: " + list_to_string(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(continued_fraction(27, 32)))))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
