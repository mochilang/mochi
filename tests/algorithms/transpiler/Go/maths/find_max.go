//go:build ignore

// Generated by Mochi v0.10.63 on 2025-08-12 08:22:56 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	math "math"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

func normalize_index(index int, n int) int {
	if index < 0 {
		return (n + index)
	}
	return index
}

func find_max_iterative(nums []float64) float64 {
	if len(nums) == 0 {
		panic("find_max_iterative() arg is an empty sequence")
	}
	var max_num float64 = _index(nums, 0)
	_ = max_num
	var i int = 0
	_ = i
	for i < len(nums) {
		var x float64 = _index(nums, i)
		_ = x
		if x > max_num {
			max_num = x
		}
		i = (i + 1)
	}
	return max_num
}

func find_max_recursive(nums []float64, left int, right int) float64 {
	var n int = len(nums)
	_ = n
	if n == 0 {
		panic("find_max_recursive() arg is an empty sequence")
	}
	if (((left >= n) || (left < (0 - n))) || (right >= n)) || (right < (0 - n)) {
		panic("list index out of range")
	}
	var l int = normalize_index(left, n)
	_ = l
	var r int = normalize_index(right, n)
	_ = r
	if l == r {
		return _index(nums, l)
	}
	var mid int = ((l + r) / 2)
	_ = mid
	var left_max float64 = find_max_recursive(func(v any) []float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []float64{}
			}
			out := make([]float64, len(arr))
			for i, x := range arr {
				out[i] = x.(float64)
			}
			return out
		}
		return v.([]float64)
	}(nums), l, mid)
	_ = left_max
	var right_max float64 = find_max_recursive(func(v any) []float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []float64{}
			}
			out := make([]float64, len(arr))
			for i, x := range arr {
				out[i] = x.(float64)
			}
			return out
		}
		return v.([]float64)
	}(nums), (mid + 1), r)
	_ = right_max
	if left_max >= right_max {
		return left_max
	}
	return right_max
}

func test_find_max() {
	var arr []float64 = []float64{2.0, 4.0, 9.0, 7.0, 19.0, 94.0, 5.0}
	_ = arr
	if find_max_iterative(func(v any) []float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []float64{}
			}
			out := make([]float64, len(arr))
			for i, x := range arr {
				out[i] = x.(float64)
			}
			return out
		}
		return v.([]float64)
	}(arr)) != 94.0 {
		panic("find_max_iterative failed")
	}
	if find_max_recursive(func(v any) []float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []float64{}
			}
			out := make([]float64, len(arr))
			for i, x := range arr {
				out[i] = x.(float64)
			}
			return out
		}
		return v.([]float64)
	}(arr), 0, (len(arr)-1)) != 94.0 {
		panic("find_max_recursive failed")
	}
	if find_max_recursive(func(v any) []float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []float64{}
			}
			out := make([]float64, len(arr))
			for i, x := range arr {
				out[i] = x.(float64)
			}
			return out
		}
		return v.([]float64)
	}(arr), (0-len(arr)), (0-1)) != 94.0 {
		panic("negative index handling failed")
	}
}

func mochiMain() {
	test_find_max()
	var nums []float64 = []float64{2.0, 4.0, 9.0, 7.0, 19.0, 94.0, 5.0}
	_ = nums
	_ = nums
	fmt.Println(func() string {
		f := float64(find_max_iterative(func(v any) []float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []float64{}
				}
				out := make([]float64, len(arr))
				for i, x := range arr {
					out[i] = x.(float64)
				}
				return out
			}
			return v.([]float64)
		}(nums)))
		if f == 0 && math.Signbit(f) {
			return "-0"
		}
		if f == float64(int(f)) {
			return fmt.Sprintf("%.1f", f)
		}
		return fmt.Sprint(f)
	}())
	fmt.Println(func() string {
		f := float64(find_max_recursive(func(v any) []float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []float64{}
				}
				out := make([]float64, len(arr))
				for i, x := range arr {
					out[i] = x.(float64)
				}
				return out
			}
			return v.([]float64)
		}(nums), 0, (len(nums) - 1)))
		if f == 0 && math.Signbit(f) {
			return "-0"
		}
		if f == float64(int(f)) {
			return fmt.Sprintf("%.1f", f)
		}
		return fmt.Sprint(f)
	}())
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
