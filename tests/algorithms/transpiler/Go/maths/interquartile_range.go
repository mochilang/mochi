//go:build ignore

// Generated by Mochi v0.10.63 on 2025-08-12 08:00:55 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _mod(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	s[idx] = v
}

func bubble_sort(nums []float64) []float64 {
	var arr []float64 = []float64{}
	_ = arr
	var i int = 0
	_ = i
	for i < len(nums) {
		arr = append(arr, _index(nums, i))
		i = (i + 1)
	}
	var n int = len(arr)
	_ = n
	var a int = 0
	_ = a
	for a < n {
		var b int = 0
		_ = b
		for b < ((n - a) - 1) {
			if _index(arr, b) > _index(arr, (b+1)) {
				var temp float64 = _index(arr, b)
				_ = temp
				_setIndex(arr, b, _index(arr, (b+1)))
				_setIndex(arr, (b + 1), temp)
			}
			b = (b + 1)
		}
		a = (a + 1)
	}
	return arr
}

func find_median(nums []float64) float64 {
	var length int = len(nums)
	_ = length
	var div int = (length / 2)
	_ = div
	_ = div
	var mod int = _mod(length, 2)
	_ = mod
	if mod != 0 {
		return _index(nums, div)
	}
	return (float64((_index(nums, div) + _index(nums, (div-1)))) / float64(2.0))
}

func interquartile_range(nums []float64) float64 {
	if len(nums) == 0 {
		panic("The list is empty. Provide a non-empty list.")
	}
	var sorted []float64 = bubble_sort(func(v any) []float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []float64{}
			}
			out := make([]float64, len(arr))
			for i, x := range arr {
				out[i] = x.(float64)
			}
			return out
		}
		return v.([]float64)
	}(nums))
	_ = sorted
	var length int = len(sorted)
	_ = length
	var div int = (length / 2)
	_ = div
	var mod int = _mod(length, 2)
	_ = mod
	var lower []float64 = []float64{}
	_ = lower
	var i int = 0
	_ = i
	for i < div {
		lower = append(lower, _index(sorted, i))
		i = (i + 1)
	}
	var upper []float64 = []float64{}
	_ = upper
	var j int = (div + mod)
	_ = j
	for j < length {
		upper = append(upper, _index(sorted, j))
		j = (j + 1)
	}
	var q1 float64 = find_median(func(v any) []float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []float64{}
			}
			out := make([]float64, len(arr))
			for i, x := range arr {
				out[i] = x.(float64)
			}
			return out
		}
		return v.([]float64)
	}(lower))
	_ = q1
	_ = q1
	var q3 float64 = find_median(func(v any) []float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []float64{}
			}
			out := make([]float64, len(arr))
			for i, x := range arr {
				out[i] = x.(float64)
			}
			return out
		}
		return v.([]float64)
	}(upper))
	_ = q3
	_ = q3
	return (q3 - q1)
}

func absf(x float64) float64 {
	if x < 0.0 {
		return (0 - x)
	}
	return x
}

func float_equal(a float64, b float64) bool {
	var diff float64 = absf((a - b))
	_ = diff
	_ = diff
	return (diff < 1e-07)
}

func test_interquartile_range() {
	if !float_equal(interquartile_range(func(v any) []float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []float64{}
			}
			out := make([]float64, len(arr))
			for i, x := range arr {
				out[i] = x.(float64)
			}
			return out
		}
		return v.([]float64)
	}([]float64{4.0, 1.0, 2.0, 3.0, 2.0})), 2.0) {
		panic("interquartile_range case1 failed")
	}
	if !float_equal(interquartile_range(func(v any) []float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []float64{}
			}
			out := make([]float64, len(arr))
			for i, x := range arr {
				out[i] = x.(float64)
			}
			return out
		}
		return v.([]float64)
	}([]float64{(0 - 2.0), (0 - 7.0), (0 - 10.0), 9.0, 8.0, 4.0, (0 - 67.0), 45.0})), 17.0) {
		panic("interquartile_range case2 failed")
	}
	if !float_equal(interquartile_range(func(v any) []float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []float64{}
			}
			out := make([]float64, len(arr))
			for i, x := range arr {
				out[i] = x.(float64)
			}
			return out
		}
		return v.([]float64)
	}([]float64{(0 - 2.1), (0 - 7.1), (0 - 10.1), 9.1, 8.1, 4.1, (0 - 67.1), 45.1})), 17.2) {
		panic("interquartile_range case3 failed")
	}
	if !float_equal(interquartile_range(func(v any) []float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []float64{}
			}
			out := make([]float64, len(arr))
			for i, x := range arr {
				out[i] = x.(float64)
			}
			return out
		}
		return v.([]float64)
	}([]float64{0.0, 0.0, 0.0, 0.0, 0.0})), 0.0) {
		panic("interquartile_range case4 failed")
	}
}

func mochiMain() {
	test_interquartile_range()
	fmt.Println(fmt.Sprint(interquartile_range(func(v any) []float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []float64{}
			}
			out := make([]float64, len(arr))
			for i, x := range arr {
				out[i] = x.(float64)
			}
			return out
		}
		return v.([]float64)
	}([]float64{4.0, 1.0, 2.0, 3.0, 2.0}))))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
