//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-16 12:27:12 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _modi(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func is_int_palindrome(num int) bool {
	if num < 0 {
		return false
	}
	var n int = num
	_ = n
	var rev int = 0
	_ = rev
	for n > 0 {
		rev = ((rev * 10) + _modi(n, 10))
		n = (n / 10)
	}
	return (rev == num)
}

func mochiMain() {
	fmt.Println(is_int_palindrome((0 - 121)))
	fmt.Println(is_int_palindrome(0))
	fmt.Println(is_int_palindrome(10))
	fmt.Println(is_int_palindrome(11))
	fmt.Println(is_int_palindrome(101))
	fmt.Println(is_int_palindrome(120))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
