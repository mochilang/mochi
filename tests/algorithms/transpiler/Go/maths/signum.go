//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-16 13:04:31 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func signum(num float64) int {
	if num < 0.0 {
		return (0 - 1)
	}
	if num > 0.0 {
		return 1
	}
	return 0
}

func test_signum() {
	if signum(5.0) != 1 {
		panic("signum(5) failed")
	}
	if signum((0 - 5.0)) != (0 - 1) {
		panic("signum(-5) failed")
	}
	if signum(0.0) != 0 {
		panic("signum(0) failed")
	}
	if signum(10.5) != 1 {
		panic("signum(10.5) failed")
	}
	if signum((0 - 10.5)) != (0 - 1) {
		panic("signum(-10.5) failed")
	}
	if signum(1e-06) != 1 {
		panic("signum(1e-6) failed")
	}
	if signum((0 - 1e-06)) != (0 - 1) {
		panic("signum(-1e-6) failed")
	}
	if signum(123456789.0) != 1 {
		panic("signum(123456789) failed")
	}
	if signum((0 - 123456789.0)) != (0 - 1) {
		panic("signum(-123456789) failed")
	}
}

func mochiMain() {
	test_signum()
	fmt.Println(signum(12.0))
	fmt.Println(signum((0 - 12.0)))
	fmt.Println(signum(0.0))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
