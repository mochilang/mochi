//go:build ignore

// Generated by Mochi v0.10.63 on 2025-08-11 16:29:05 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"strings"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

func _toFloat(v any) float64 {
	switch t := v.(type) {
	case int:
		return float64(t)
	case int64:
		return float64(t)
	case float64:
		return t
	default:
		return 0
	}
}

func indexOf(s string, sub string) int {
	n := len(s)
	_ = n
	m := len(sub)
	_ = m
	var i int = 0
	_ = i
	for float64(i) <= (_toFloat(n) - _toFloat(m)) {
		if _substr(s, i, (i+m)) == sub {
			return i
		}
		i = (i + 1)
	}
	return (0 - 1)
}

func contains(s string, sub string) bool {
	return (strings.Index(s, sub) >= 0)
}

func validate(files []string) int {
	var upper []string = []string{}
	_ = upper
	var space []string = []string{}
	_ = space
	var hyphen []string = []string{}
	_ = hyphen
	var nodir []string = []string{}
	_ = nodir
	for _, f := range files {
		if f != strings.ToLower(f) {
			upper = append(upper, f)
		}
		if contains(f, " ") {
			space = append(space, f)
		}
		if contains(f, "-") && (contains(f, "/site-packages/") == false) {
			hyphen = append(hyphen, f)
		}
		if !contains(f, "/") {
			nodir = append(nodir, f)
		}
	}
	if len(upper) > 0 {
		fmt.Println((fmt.Sprint(len(upper)) + " files contain uppercase characters:"))
		for _, f := range upper {
			fmt.Println(f)
		}
		fmt.Println("")
	}
	if len(space) > 0 {
		fmt.Println((fmt.Sprint(len(space)) + " files contain space characters:"))
		for _, f := range space {
			fmt.Println(f)
		}
		fmt.Println("")
	}
	if len(hyphen) > 0 {
		fmt.Println((fmt.Sprint(len(hyphen)) + " files contain hyphen characters:"))
		for _, f := range hyphen {
			fmt.Println(f)
		}
		fmt.Println("")
	}
	if len(nodir) > 0 {
		fmt.Println((fmt.Sprint(len(nodir)) + " files are not in a directory:"))
		for _, f := range nodir {
			fmt.Println(f)
		}
		fmt.Println("")
	}
	return (((len(upper) + len(space)) + len(hyphen)) + len(nodir))
}

func mochiMain() {
	var files []string = []string{"scripts/Validate_filenames.py", "good/file.txt", "bad file.txt", "/site-packages/pkg-name.py", "nopath", "src/hyphen-name.py"}
	_ = files
	bad := validate(func(v any) []string {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]string); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []string{}
			}
			out := make([]string, len(arr))
			for i, x := range arr {
				out[i] = fmt.Sprint(x)
			}
			return out
		}
		return v.([]string)
	}(files))
	_ = bad
	fmt.Println(fmt.Sprint(bad))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
