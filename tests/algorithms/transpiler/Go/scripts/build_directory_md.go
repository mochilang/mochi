//go:build ignore

// Generated by Mochi v0.10.63 on 2025-08-11 16:27:16 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"strings"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	s[idx] = v
}

func _repeat(s string, n int) string {
	if n <= 0 {
		return ""
	}
	return strings.Repeat(s, n)
}

func _len(v any) int {
	switch t := v.(type) {
	case string:
		return len([]rune(t))
	case []any:
		return len(t)
	case []string:
		return len(t)
	case []int:
		return len(t)
	case []float64:
		return len(t)
	case map[string]any:
		return len(t)
	case map[int]any:
		return len(t)
	case map[any]any:
		return len(t)
	default:
		return 0
	}
}

func _toFloat(v any) float64 {
	switch t := v.(type) {
	case int:
		return float64(t)
	case int64:
		return float64(t)
	case float64:
		return t
	default:
		return 0
	}
}

func split(s string, sep string) []string {
	var parts []string = []string{}
	_ = parts
	var cur string = ""
	_ = cur
	var i int = 0
	_ = i
	for i < len(s) {
		if ((len(sep) > 0) && ((i + len(sep)) <= len(s))) && (_substr(s, i, (i+len(sep))) == sep) {
			parts = append(parts, cur)
			cur = ""
			i = (i + len(sep))
		} else {
			cur = (cur + _substr(s, i, (i+1)))
			i = (i + 1)
		}
	}
	parts = append(parts, cur)
	return parts
}

func join(xs []string, sep string) string {
	var res string = ""
	_ = res
	var i int = 0
	_ = i
	for i < len(xs) {
		if i > 0 {
			res = (res + sep)
		}
		res = (res + _index(xs, i))
		i = (i + 1)
	}
	return res
}

func repeat(s string, n int) string {
	var out string = ""
	_ = out
	var i int = 0
	_ = i
	for i < n {
		out = (out + s)
		i = (i + 1)
	}
	return out
}

func replace_char(s string, old string, new string) string {
	var out string = ""
	_ = out
	var i int = 0
	_ = i
	for i < len(s) {
		c := _substr(s, i, (i + 1))
		_ = c
		if fmt.Sprint(c) == old {
			out = (out + new)
		} else {
			out = (out + fmt.Sprint(c))
		}
		i = (i + 1)
	}
	return out
}

func contains(s string, sub string) bool {
	if len(sub) == 0 {
		return true
	}
	var i int = 0
	_ = i
	for (i + len(sub)) <= len(s) {
		if _substr(s, i, (i+len(sub))) == sub {
			return true
		}
		i = (i + 1)
	}
	return false
}

func file_extension(name string) string {
	var i int = (len(name) - 1)
	_ = i
	for i >= 0 {
		if _substr(name, i, (i+1)) == "." {
			return string([]rune(name)[i:])
		}
		i = (i - 1)
	}
	return ""
}

func remove_extension(name string) string {
	var i int = (len(name) - 1)
	_ = i
	for i >= 0 {
		if _substr(name, i, (i+1)) == "." {
			return string([]rune(name)[:i])
		}
		i = (i - 1)
	}
	return name
}

func title_case(s string) string {
	var out string = ""
	_ = out
	var cap bool = true
	_ = cap
	var i int = 0
	_ = i
	for i < len(s) {
		c := _substr(s, i, (i + 1))
		_ = c
		if fmt.Sprint(c) == " " {
			out = (out + fmt.Sprint(c))
			cap = true
		} else {
			if cap {
				out = (out + strings.ToUpper(c))
				cap = false
			} else {
				out = (out + strings.ToLower(c))
			}
		}
		i = (i + 1)
	}
	return out
}

func count_char(s string, ch string) int {
	var cnt int = 0
	_ = cnt
	var i int = 0
	_ = i
	for i < len(s) {
		if _substr(s, i, (i+1)) == ch {
			cnt = (cnt + 1)
		}
		i = (i + 1)
	}
	return cnt
}

func md_prefix(level int) string {
	if level == 0 {
		return "\n##"
	}
	return (_repeat("  ", level) + "*")
}

func print_path(old_path string, new_path string) string {
	old_parts := split(old_path, "/")
	_ = old_parts
	new_parts := split(new_path, "/")
	_ = new_parts
	var i int = 0
	_ = i
	for i < _len(new_parts) {
		if ((i >= _len(old_parts)) || (_toFloat(_index(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(old_parts), i)) != _toFloat(_index(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(new_parts), i)))) && (fmt.Sprint(_index(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(new_parts), i)) != "") {
			title := title_case(replace_char(fmt.Sprint(_index(func(v any) []int {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]int); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []int{}
					}
					out := make([]int, len(arr))
					for i, x := range arr {
						out[i] = x.(int)
					}
					return out
				}
				return v.([]int)
			}(new_parts), i)), "_", " "))
			_ = title
			fmt.Println(((md_prefix(i) + " ") + fmt.Sprint(title)))
		}
		i = (i + 1)
	}
	return new_path
}

func sort_strings(xs []string) []string {
	var arr []string = xs
	_ = arr
	var i int = 0
	_ = i
	for i < len(arr) {
		var min_idx int = i
		_ = min_idx
		var j int = (i + 1)
		_ = j
		for j < len(arr) {
			if _index(arr, j) < _index(arr, min_idx) {
				min_idx = j
			}
			j = (j + 1)
		}
		var tmp string = _index(arr, i)
		_ = tmp
		_setIndex(arr, i, _index(arr, min_idx))
		_setIndex(arr, min_idx, tmp)
		i = (i + 1)
	}
	return arr
}

func good_file_paths(paths []string) []string {
	var res []string = []string{}
	_ = res
	for _, p := range paths {
		parts := split(p, "/")
		_ = parts
		var skip bool = false
		_ = skip
		var k int = 0
		_ = k
		for k < (_len(parts) - 1) {
			part := _index(func(v any) []int {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]int); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []int{}
					}
					out := make([]int, len(arr))
					for i, x := range arr {
						out[i] = x.(int)
					}
					return out
				}
				return v.([]int)
			}(parts), k)
			_ = part
			if (((fmt.Sprint(part) == "scripts") || (fmt.Sprint(part[0:1]) == ".")) || (fmt.Sprint(part[0:1]) == "_")) || contains(part, "venv") {
				skip = true
			}
			k = (k + 1)
		}
		if skip {
			continue
		}
		filename := _index(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(parts), (_len(parts) - 1))
		_ = filename
		if fmt.Sprint(filename) == "__init__.py" {
			continue
		}
		ext := file_extension(filename)
		_ = ext
		if (fmt.Sprint(ext) == ".py") || (fmt.Sprint(ext) == ".ipynb") {
			res = append(res, p)
		}
	}
	return res
}

func print_directory_md(paths []string) {
	var files []string = sort_strings(func(v any) []string {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]string); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []string{}
			}
			out := make([]string, len(arr))
			for i, x := range arr {
				out[i] = fmt.Sprint(x)
			}
			return out
		}
		return v.([]string)
	}(good_file_paths(func(v any) []string {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]string); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []string{}
			}
			out := make([]string, len(arr))
			for i, x := range arr {
				out[i] = fmt.Sprint(x)
			}
			return out
		}
		return v.([]string)
	}(paths))))
	_ = files
	var old_path string = ""
	_ = old_path
	var i int = 0
	_ = i
	for i < len(files) {
		var fp string = _index(files, i)
		_ = fp
		parts := split(fp, "/")
		_ = parts
		filename := _index(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(parts), (_len(parts) - 1))
		_ = filename
		var filepath string = ""
		_ = filepath
		if _len(parts) > 1 {
			filepath = join(func(v any) []string {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]string); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []string{}
					}
					out := make([]string, len(arr))
					for i, x := range arr {
						out[i] = fmt.Sprint(x)
					}
					return out
				}
				return v.([]string)
			}(func(v any) []string {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]string); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []string{}
					}
					out := make([]string, len(arr))
					for i, x := range arr {
						out[i] = fmt.Sprint(x)
					}
					return out
				}
				return v.([]string)
			}(parts[:(_len(parts)-1)])), "/")
		}
		if filepath != old_path {
			old_path = print_path(old_path, filepath)
		}
		var indent int = 0
		_ = indent
		if len(filepath) > 0 {
			indent = (count_char(filepath, "/") + 1)
		}
		url := replace_char(fp, " ", "%20")
		_ = url
		name := title_case(replace_char(remove_extension(filename), "_", " "))
		_ = name
		fmt.Println((((((md_prefix(indent) + " [") + fmt.Sprint(name)) + "](") + fmt.Sprint(url)) + ")"))
		i = (i + 1)
	}
}

var sample []string

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		sample = []string{"data_structures/linked_list.py", "data_structures/binary_tree.py", "math/number_theory/prime_check.py", "math/number_theory/greatest_common_divisor.ipynb"}
		print_directory_md(func(v any) []string {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]string); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []string{}
				}
				out := make([]string, len(arr))
				for i, x := range arr {
					out[i] = fmt.Sprint(x)
				}
				return out
			}
			return v.([]string)
		}(sample))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
