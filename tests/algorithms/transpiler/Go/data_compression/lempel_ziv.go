//go:build ignore

// Generated by Mochi v0.10.59 on 2025-08-06 21:47:46 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"sort"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _mod(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func to_binary(n int) string {
	if n == 0 {
		return "0"
	}
	var num int = n
	_ = num
	var res string = ""
	_ = res
	for num > 0 {
		var bit int = _mod(num, 2)
		_ = bit
		res = (fmt.Sprint(bit) + res)
		num = (num / 2)
	}
	return res
}

func contains_key_int(m map[string]int, key string) bool {
	for _, k := range func() []string {
		keys := make([]string, 0, len(m))
		for kx := range m {
			keys = append(keys, kx)
		}
		sort.Strings(keys)
		return keys
	}() {
		if k == key {
			return true
		}
	}
	return false
}

func lzw_compress(bits string) string {
	var dict map[string]int = map[string]int{"0": 0, "1": 1}
	_ = dict
	var current string = ""
	_ = current
	var result string = ""
	_ = result
	var index int = 2
	_ = index
	var i int = 0
	_ = i
	for i < len(bits) {
		var ch string = string([]rune(bits)[i])
		_ = ch
		var candidate string = (current + ch)
		_ = candidate
		if contains_key_int(dict, candidate) {
			current = candidate
		} else {
			result = (result + to_binary(dict[current]))
			dict[candidate] = index
			index = (index + 1)
			current = ch
		}
		i = (i + 1)
	}
	if current != "" {
		result = (result + to_binary(dict[current]))
	}
	return result
}

var data string

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		data = "01001100100111"
		fmt.Println(lzw_compress(data))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
