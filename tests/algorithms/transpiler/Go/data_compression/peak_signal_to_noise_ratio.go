//go:build ignore

// Generated by Mochi v0.10.59 on 2025-08-06 21:47:52 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	math "math"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func abs(x float64) float64 {
	if x < 0.0 {
		return (0 - x)
	}
	return x
}

func sqrtApprox(x float64) float64 {
	if x <= 0.0 {
		return 0.0
	}
	var guess float64 = x
	_ = guess
	var i int = 0
	_ = i
	for i < 10 {
		guess = ((guess + (x / guess)) / 2.0)
		i = (i + 1)
	}
	return guess
}

func ln(x float64) float64 {
	var t float64 = ((x - 1.0) / (x + 1.0))
	_ = t
	var term float64 = t
	_ = term
	var sum float64 = 0.0
	_ = sum
	var n int = 1
	_ = n
	for n <= 19 {
		sum = (sum + (term / float64(n)))
		term = ((term * t) * t)
		n = (n + 2)
	}
	return (2.0 * sum)
}

func log10(x float64) float64 {
	return (ln(x) / ln(10.0))
}

func peak_signal_to_noise_ratio(original [][]int, contrast [][]int) float64 {
	var mse float64 = 0.0
	_ = mse
	var i int = 0
	_ = i
	for i < len(original) {
		var j int = 0
		_ = j
		for j < len(original[i]) {
			var diff float64 = float64((original[i][j] - contrast[i][j]))
			_ = diff
			mse = (mse + (diff * diff))
			j = (j + 1)
		}
		i = (i + 1)
	}
	var size float64 = float64((len(original) * len(original[0])))
	_ = size
	mse = (mse / size)
	if mse == 0.0 {
		return 100.0
	}
	var PIXEL_MAX float64 = 255.0
	_ = PIXEL_MAX
	_ = PIXEL_MAX
	return (20.0 * log10((PIXEL_MAX / sqrtApprox(mse))))
}

var __mochi_test_header_printed bool

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		if !__mochi_test_header_printed {
			fmt.Println("[94;1mtests/github/TheAlgorithms/Mochi/data_compression/peak_signal_to_noise_ratio.mochi[0;22m")
			__mochi_test_header_printed = true
		}
		func() {
			func() {
				defer func() { recover() }()
				var img [][]int = [][]int{[]int{52, 55}, []int{61, 59}}
				_ = img
				_ = img
				_ = (peak_signal_to_noise_ratio(func(v any) [][]int {
					if v == nil {
						return nil
					}
					if vv, ok := v.([][]int); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return [][]int{}
						}
						out := make([][]int, len(arr))
						for i, x := range arr {
							out[i] = func(v any) []int {
								if v == nil {
									return nil
								}
								if vv, ok := v.([]int); ok {
									return vv
								}
								if arr, ok := v.([]any); ok {
									if len(arr) == 0 {
										return []int{}
									}
									out := make([]int, len(arr))
									for i, x := range arr {
										out[i] = x.(int)
									}
									return out
								}
								return v.([]int)
							}(x)
						}
						return out
					}
					return v.([][]int)
				}(img), func(v any) [][]int {
					if v == nil {
						return nil
					}
					if vv, ok := v.([][]int); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return [][]int{}
						}
						out := make([][]int, len(arr))
						for i, x := range arr {
							out[i] = func(v any) []int {
								if v == nil {
									return nil
								}
								if vv, ok := v.([]int); ok {
									return vv
								}
								if arr, ok := v.([]any); ok {
									if len(arr) == 0 {
										return []int{}
									}
									out := make([]int, len(arr))
									for i, x := range arr {
										out[i] = x.(int)
									}
									return out
								}
								return v.([]int)
							}(x)
						}
						return out
					}
					return v.([][]int)
				}(img)) == 100.0)
			}()
			fmt.Printf("   \x1b[33mtest\x1b[0m %s                   ... \x1b[32mok\x1b[0m (1.0ms)\n", "identical images")
		}()

		if !__mochi_test_header_printed {
			fmt.Println("[94;1mtests/github/TheAlgorithms/Mochi/data_compression/peak_signal_to_noise_ratio.mochi[0;22m")
			__mochi_test_header_printed = true
		}
		func() {
			func() {
				defer func() { recover() }()
				var original [][]int = [][]int{[]int{0, 0}, []int{0, 0}}
				_ = original
				var contrast [][]int = [][]int{[]int{0, 0}, []int{0, 1}}
				_ = contrast
				var psnr float64 = peak_signal_to_noise_ratio(func(v any) [][]int {
					if v == nil {
						return nil
					}
					if vv, ok := v.([][]int); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return [][]int{}
						}
						out := make([][]int, len(arr))
						for i, x := range arr {
							out[i] = func(v any) []int {
								if v == nil {
									return nil
								}
								if vv, ok := v.([]int); ok {
									return vv
								}
								if arr, ok := v.([]any); ok {
									if len(arr) == 0 {
										return []int{}
									}
									out := make([]int, len(arr))
									for i, x := range arr {
										out[i] = x.(int)
									}
									return out
								}
								return v.([]int)
							}(x)
						}
						return out
					}
					return v.([][]int)
				}(original), func(v any) [][]int {
					if v == nil {
						return nil
					}
					if vv, ok := v.([][]int); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return [][]int{}
						}
						out := make([][]int, len(arr))
						for i, x := range arr {
							out[i] = func(v any) []int {
								if v == nil {
									return nil
								}
								if vv, ok := v.([]int); ok {
									return vv
								}
								if arr, ok := v.([]any); ok {
									if len(arr) == 0 {
										return []int{}
									}
									out := make([]int, len(arr))
									for i, x := range arr {
										out[i] = x.(int)
									}
									return out
								}
								return v.([]int)
							}(x)
						}
						return out
					}
					return v.([][]int)
				}(contrast))
				_ = psnr
				_ = psnr
				var expected float64 = (20.0 * log10((255.0 / sqrtApprox(0.25))))
				_ = expected
				_ = expected
				_ = (math.Abs((psnr - expected)) < 0.0001)
			}()
			fmt.Printf("   \x1b[33mtest\x1b[0m %s                   ... \x1b[32mok\x1b[0m (1.0ms)\n", "single pixel difference")
		}()

		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
