//go:build ignore

// Generated by Mochi v0.10.59 on 2025-08-06 21:47:48 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _mod(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

func list_contains(xs []string, v string) bool {
	var i int = 0
	_ = i
	for i < len(xs) {
		if xs[i] == v {
			return true
		}
		i = (i + 1)
	}
	return false
}

func is_power_of_two(n int) bool {
	if n < 1 {
		return false
	}
	var x int = n
	_ = x
	for x > 1 {
		if _mod(x, 2) != 0 {
			return false
		}
		x = (x / 2)
	}
	return true
}

func bin_string(n int) string {
	if n == 0 {
		return "0"
	}
	var res string = ""
	_ = res
	var x int = n
	_ = x
	for x > 0 {
		var bit int = _mod(x, 2)
		_ = bit
		res = (fmt.Sprint(bit) + res)
		x = (x / 2)
	}
	return res
}

func decompress_data(data_bits string) string {
	var lexicon map[string]string = map[string]string{"0": "0", "1": "1"}
	_ = lexicon
	var keys []string = []string{"0", "1"}
	_ = keys
	var result string = ""
	_ = result
	var curr_string string = ""
	_ = curr_string
	var index int = 2
	_ = index
	var i int = 0
	_ = i
	for i < len(data_bits) {
		curr_string = (curr_string + _substr(data_bits, i, (i+1)))
		if !list_contains(func(v any) []string {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]string); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []string{}
				}
				out := make([]string, len(arr))
				for i, x := range arr {
					out[i] = x.(string)
				}
				return out
			}
			return v.([]string)
		}(keys), curr_string) {
			i = (i + 1)
			continue
		}
		var last_match_id string = lexicon[curr_string]
		_ = last_match_id
		result = (result + last_match_id)
		lexicon[curr_string] = (last_match_id + "0")
		if is_power_of_two(index) {
			var new_lex map[string]string = map[string]string{}
			_ = new_lex
			var new_keys []string = []string{}
			_ = new_keys
			var j int = 0
			_ = j
			for j < len(keys) {
				var curr_key string = keys[j]
				_ = curr_key
				new_lex[("0" + curr_key)] = lexicon[curr_key]
				new_keys = append(new_keys, ("0" + curr_key))
				j = (j + 1)
			}
			lexicon = new_lex
			keys = new_keys
		}
		var new_key string = bin_string(index)
		_ = new_key
		lexicon[new_key] = (last_match_id + "1")
		keys = append(keys, new_key)
		index = (index + 1)
		curr_string = ""
		i = (i + 1)
	}
	return result
}

var sample string

var decompressed string

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		sample = "1011001"
		decompressed = decompress_data(sample)
		fmt.Println(decompressed)
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
