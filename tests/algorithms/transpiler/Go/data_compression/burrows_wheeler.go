//go:build ignore

// Generated by Mochi v0.10.59 on 2025-08-06 21:47:43 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

type BWTResult struct {
	BwtString         string `json:"bwt_string"`
	IDxOriginalString int    `json:"idx_original_string"`
}

func all_rotations(s string) []string {
	var n int = len(s)
	_ = n
	var rotations []string = []string{}
	_ = rotations
	var i int = 0
	_ = i
	for i < n {
		var rotation string = (_substr(s, i, n) + _substr(s, 0, i))
		_ = rotation
		rotations = append(rotations, rotation)
		i = (i + 1)
	}
	return rotations
}

func sort_strings(arr []string) []string {
	var n int = len(arr)
	_ = n
	var i int = 1
	_ = i
	for i < n {
		var key string = arr[i]
		_ = key
		var j int = (i - 1)
		_ = j
		for (j >= 0) && (arr[j] > key) {
			arr[(j + 1)] = arr[j]
			j = (j - 1)
		}
		arr[(j + 1)] = key
		i = (i + 1)
	}
	return arr
}

func join_strings(arr []string) string {
	var res string = ""
	_ = res
	var i int = 0
	_ = i
	for i < len(arr) {
		res = (res + arr[i])
		i = (i + 1)
	}
	return res
}

func bwt_transform(s string) BWTResult {
	if s == "" {
		panic("input string must not be empty")
	}
	var rotations []string = all_rotations(s)
	_ = rotations
	rotations = sort_strings(func(v any) []string {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]string); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []string{}
			}
			out := make([]string, len(arr))
			for i, x := range arr {
				out[i] = x.(string)
			}
			return out
		}
		return v.([]string)
	}(rotations))
	var last_col []string = []string{}
	_ = last_col
	var i int = 0
	_ = i
	for i < len(rotations) {
		var word string = rotations[i]
		_ = word
		last_col = append(last_col, _substr(word, (len(word)-1), len(word)))
		i = (i + 1)
	}
	var bwt_string string = join_strings(func(v any) []string {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]string); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []string{}
			}
			out := make([]string, len(arr))
			for i, x := range arr {
				out[i] = x.(string)
			}
			return out
		}
		return v.([]string)
	}(last_col))
	_ = bwt_string
	_ = bwt_string
	var idx int = index_of(func(v any) []string {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]string); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []string{}
			}
			out := make([]string, len(arr))
			for i, x := range arr {
				out[i] = x.(string)
			}
			return out
		}
		return v.([]string)
	}(rotations), s)
	_ = idx
	_ = idx
	return BWTResult{
		BwtString:         bwt_string,
		IDxOriginalString: idx,
	}
}

func index_of(arr []string, target string) int {
	var i int = 0
	_ = i
	for i < len(arr) {
		if arr[i] == target {
			return i
		}
		i = (i + 1)
	}
	return (0 - 1)
}

func reverse_bwt(bwt_string string, idx_original_string int) string {
	if bwt_string == "" {
		panic("bwt string must not be empty")
	}
	var n int = len(bwt_string)
	_ = n
	if (idx_original_string < 0) || (idx_original_string >= n) {
		panic("index out of range")
	}
	var ordered_rotations []string = []string{}
	_ = ordered_rotations
	var i int = 0
	_ = i
	for i < n {
		ordered_rotations = append(ordered_rotations, "")
		i = (i + 1)
	}
	var iter int = 0
	_ = iter
	for iter < n {
		var j int = 0
		_ = j
		for j < n {
			var ch string = _substr(bwt_string, j, (j + 1))
			_ = ch
			ordered_rotations[j] = (ch + ordered_rotations[j])
			j = (j + 1)
		}
		ordered_rotations = sort_strings(func(v any) []string {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]string); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []string{}
				}
				out := make([]string, len(arr))
				for i, x := range arr {
					out[i] = x.(string)
				}
				return out
			}
			return v.([]string)
		}(ordered_rotations))
		iter = (iter + 1)
	}
	return ordered_rotations[idx_original_string]
}

var s string

var result BWTResult

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		s = "^BANANA"
		result = bwt_transform(s)
		fmt.Println(result.BwtString)
		fmt.Println(result.IDxOriginalString)
		fmt.Println(reverse_bwt(result.BwtString, result.IDxOriginalString))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
