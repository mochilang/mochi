//go:build ignore

// Generated by Mochi v0.10.59 on 2025-08-06 21:47:54 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func run_length_encode(text string) string {
	if len(text) == 0 {
		return ""
	}
	var encoded string = ""
	_ = encoded
	var count int = 1
	_ = count
	var i int = 0
	_ = i
	for i < len(text) {
		if ((i + 1) < len(text)) && (string([]rune(text)[i]) == string([]rune(text)[(i+1)])) {
			count = (count + 1)
		} else {
			encoded = ((encoded + string([]rune(text)[i])) + fmt.Sprint(count))
			count = 1
		}
		i = (i + 1)
	}
	return encoded
}

func run_length_decode(encoded string) string {
	var res string = ""
	_ = res
	var i int = 0
	_ = i
	for i < len(encoded) {
		var ch string = string([]rune(encoded)[i])
		_ = ch
		i = (i + 1)
		var num_str string = ""
		_ = num_str
		for ((i < len(encoded)) && (string([]rune(encoded)[i]) >= "0")) && (string([]rune(encoded)[i]) <= "9") {
			num_str = (num_str + string([]rune(encoded)[i]))
			i = (i + 1)
		}
		var count int = func() int { n, _ := strconv.Atoi(num_str); return n }()
		_ = count
		var j int = 0
		_ = j
		for j < count {
			res = (res + ch)
			j = (j + 1)
		}
	}
	return res
}

var example1 string

var encoded1 string

var example2 string

var encoded2 string

var example3 string

var encoded3 string

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		example1 = "AAAABBBCCDAA"
		encoded1 = run_length_encode(example1)
		fmt.Println(encoded1)
		fmt.Println(run_length_decode(encoded1))
		example2 = "A"
		encoded2 = run_length_encode(example2)
		fmt.Println(encoded2)
		fmt.Println(run_length_decode(encoded2))
		example3 = "AAADDDDDDFFFCCCAAVVVV"
		encoded3 = run_length_encode(example3)
		fmt.Println(encoded3)
		fmt.Println(run_length_decode(encoded3))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
