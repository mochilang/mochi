//go:build ignore

// Generated by Mochi v0.10.59 on 2025-08-06 21:47:45 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

type Huffman interface{ isHuffman() }
type Leaf struct {
	Symbol string `json:"symbol"`
	Freq   int    `json:"freq"`
}

func (Leaf) isHuffman() {}

type Node struct {
	Freq  int `json:"freq"`
	Left  any `json:"left"`
	Right any `json:"right"`
}

func (Node) isHuffman() {}

func get_freq(n any) int {
	return func() int {
		switch uv := n.(type) {
		case Leaf:
			_ = uv.Symbol
			f := uv.Freq
			return f
		case Node:
			f := uv.Freq
			_ = uv.Left
			_ = uv.Right
			return f
		default:
			var z int
			return z
		}
	}().(int)
}

func sort_nodes(nodes []any) []any {
	var arr []any = nodes
	_ = arr
	var i int = 1
	_ = i
	for i < len(arr) {
		var key any = arr[i]
		_ = key
		var j int = (i - 1)
		_ = j
		for (j >= 0) && (get_freq(arr[j]) > get_freq(key)) {
			arr[(j + 1)] = arr[j]
			j = (j - 1)
		}
		arr[(j + 1)] = key
		i = (i + 1)
	}
	return arr
}

func rest(nodes []any) []any {
	var res []any = []any{}
	_ = res
	var i int = 1
	_ = i
	for i < len(nodes) {
		res = append(res, nodes[i])
		i = (i + 1)
	}
	return res
}

func count_freq(text string) []any {
	var chars []string = []string{}
	_ = chars
	var freqs []int = []int{}
	_ = freqs
	var i int = 0
	_ = i
	for i < len(text) {
		var c string = _substr(text, i, (i + 1))
		_ = c
		var j int = 0
		_ = j
		var found bool = false
		_ = found
		for j < len(chars) {
			if chars[j] == c {
				freqs[j] = (freqs[j] + 1)
				found = true
				break
			}
			j = (j + 1)
		}
		if !found {
			chars = append(chars, c)
			freqs = append(freqs, 1)
		}
		i = (i + 1)
	}
	var leaves []any = []any{}
	_ = leaves
	var k int = 0
	_ = k
	for k < len(chars) {
		leaves = append(leaves, Leaf{
			Symbol: chars[k],
			Freq:   freqs[k],
		})
		k = (k + 1)
	}
	return sort_nodes(leaves)
}

func build_tree(nodes []any) any {
	var arr []any = nodes
	_ = arr
	for len(arr) > 1 {
		var left any = arr[0]
		_ = left
		arr = rest(arr)
		var right any = arr[0]
		_ = right
		arr = rest(arr)
		var node Node = Node{
			Freq:  (get_freq(left) + get_freq(right)),
			Left:  left,
			Right: right,
		}
		_ = node
		arr = append(arr, node)
		arr = sort_nodes(arr)
	}
	return arr[0]
}

func concat_pairs(a [][]string, b [][]string) [][]string {
	var res [][]string = a
	_ = res
	var i int = 0
	_ = i
	for i < len(b) {
		res = append(res, b[i])
		i = (i + 1)
	}
	return res
}

func collect_codes(tree any, prefix string) [][]string {
	return func(v any) [][]string {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]string); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]string{}
			}
			out := make([][]string, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []string {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]string); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []string{}
						}
						out := make([]string, len(arr))
						for i, x := range arr {
							out[i] = x.(string)
						}
						return out
					}
					return v.([]string)
				}(x)
			}
			return out
		}
		return v.([][]string)
	}(func() [][]string {
		switch uv := tree.(type) {
		case Leaf:
			s := uv.Symbol
			_ = uv.Freq
			return [][]string{[]string{s, prefix}}
		case Node:
			_ = uv.Freq
			l := uv.Left
			r := uv.Right
			return concat_pairs(func(v any) [][]string {
				if v == nil {
					return nil
				}
				if vv, ok := v.([][]string); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return [][]string{}
					}
					out := make([][]string, len(arr))
					for i, x := range arr {
						out[i] = func(v any) []string {
							if v == nil {
								return nil
							}
							if vv, ok := v.([]string); ok {
								return vv
							}
							if arr, ok := v.([]any); ok {
								if len(arr) == 0 {
									return []string{}
								}
								out := make([]string, len(arr))
								for i, x := range arr {
									out[i] = x.(string)
								}
								return out
							}
							return v.([]string)
						}(x)
					}
					return out
				}
				return v.([][]string)
			}(collect_codes(l, (prefix+"0"))), func(v any) [][]string {
				if v == nil {
					return nil
				}
				if vv, ok := v.([][]string); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return [][]string{}
					}
					out := make([][]string, len(arr))
					for i, x := range arr {
						out[i] = func(v any) []string {
							if v == nil {
								return nil
							}
							if vv, ok := v.([]string); ok {
								return vv
							}
							if arr, ok := v.([]any); ok {
								if len(arr) == 0 {
									return []string{}
								}
								out := make([]string, len(arr))
								for i, x := range arr {
									out[i] = x.(string)
								}
								return out
							}
							return v.([]string)
						}(x)
					}
					return out
				}
				return v.([][]string)
			}(collect_codes(r, (prefix+"1"))))
		default:
			var z [][]string
			return z
		}
	}())
}

func find_code(pairs [][]string, ch string) string {
	var i int = 0
	_ = i
	for i < len(pairs) {
		if pairs[i][0] == ch {
			return pairs[i][1]
		}
		i = (i + 1)
	}
	return ""
}

func huffman_encode(text string) string {
	if text == "" {
		return ""
	}
	var leaves []any = count_freq(text)
	_ = leaves
	var tree any = build_tree(leaves)
	_ = tree
	var codes [][]string = collect_codes(tree, "")
	_ = codes
	var encoded string = ""
	_ = encoded
	var i int = 0
	_ = i
	for i < len(text) {
		var c string = _substr(text, i, (i + 1))
		_ = c
		encoded = ((encoded + find_code(func(v any) [][]string {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]string); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]string{}
				}
				out := make([][]string, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []string {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]string); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []string{}
							}
							out := make([]string, len(arr))
							for i, x := range arr {
								out[i] = x.(string)
							}
							return out
						}
						return v.([]string)
					}(x)
				}
				return out
			}
			return v.([][]string)
		}(codes), c)) + " ")
		i = (i + 1)
	}
	return encoded
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(huffman_encode("beep boop beer!"))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
