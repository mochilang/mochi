//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-14 22:36:48 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"strings"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func convert_to_negative(img [][][]int) [][][]int {
	var result [][][]int = [][][]int{}
	_ = result
	var i int = 0
	_ = i
	for i < len(img) {
		var row [][]int = [][]int{}
		_ = row
		var j int = 0
		_ = j
		for j < len(_index(img, i)) {
			var pixel []int = _index(_index(img, i), j)
			_ = pixel
			var r int = (255 - int(_index(pixel, 0)))
			_ = r
			var g int = (255 - int(_index(pixel, 1)))
			_ = g
			var b int = (255 - int(_index(pixel, 2)))
			_ = b
			row = append(row, []int{func(v any) int {
				if vv, ok := v.(int); ok {
					return vv
				}
				return 0
			}(r), func(v any) int {
				if vv, ok := v.(int); ok {
					return vv
				}
				return 0
			}(g), func(v any) int {
				if vv, ok := v.(int); ok {
					return vv
				}
				return 0
			}(b)})
			j = (j + 1)
		}
		result = append(result, row)
		i = (i + 1)
	}
	return result
}

func mochiMain() {
	var image [][][]int = [][][]int{[][]int{[]int{10, 20, 30}, []int{0, 0, 0}}, [][]int{[]int{255, 255, 255}, []int{100, 150, 200}}}
	_ = image
	var neg [][][]int = convert_to_negative(func(v any) [][][]int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][][]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][][]int{}
			}
			out := make([][][]int, len(arr))
			for i, x := range arr {
				out[i] = func(v any) [][]int {
					if v == nil {
						return nil
					}
					if vv, ok := v.([][]int); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return [][]int{}
						}
						out := make([][]int, len(arr))
						for i, x := range arr {
							out[i] = x.([]int)
						}
						return out
					}
					return v.([][]int)
				}(x)
			}
			return out
		}
		return v.([][][]int)
	}(image))
	_ = neg
	_ = neg
	fmt.Println(func() string {
		b, _ := json.Marshal(neg)
		s := string(b)
		s = strings.ReplaceAll(s, ":", ": ")
		s = strings.ReplaceAll(s, ",", ", ")
		s = strings.ReplaceAll(s, "}, {", "},{")
		return s
	}())
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
