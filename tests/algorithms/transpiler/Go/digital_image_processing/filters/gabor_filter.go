//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-14 22:36:58 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"strings"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _mod(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

var PI float64

func to_radians(deg float64) float64 {
	return (float64((deg * PI)) / float64(180.0))
}

func sin_taylor(x float64) float64 {
	var term float64 = x
	_ = term
	var sum float64 = x
	_ = sum
	var i int = 1
	_ = i
	for i < 10 {
		var k1 float64 = (2.0 * float64(i))
		_ = k1
		var k2 float64 = (k1 + 1.0)
		_ = k2
		term = (float64((((0 - term) * x) * x)) / float64((k1 * k2)))
		sum = (sum + term)
		i = (i + 1)
	}
	return sum
}

func cos_taylor(x float64) float64 {
	var term float64 = 1.0
	_ = term
	var sum float64 = 1.0
	_ = sum
	var i int = 1
	_ = i
	for i < 10 {
		var k1 float64 = ((2.0 * float64(i)) - 1.0)
		_ = k1
		var k2 float64 = (2.0 * float64(i))
		_ = k2
		term = (float64((((0 - term) * x) * x)) / float64((k1 * k2)))
		sum = (sum + term)
		i = (i + 1)
	}
	return sum
}

func exp_taylor(x float64) float64 {
	var term float64 = 1.0
	_ = term
	var sum float64 = 1.0
	_ = sum
	var i float64 = 1.0
	_ = i
	for i < 20.0 {
		term = (float64((term * x)) / float64(i))
		sum = (sum + term)
		i = (i + 1.0)
	}
	return sum
}

func gabor_filter_kernel(ksize int, sigma float64, theta float64, lambd float64, gamma float64, psi float64) [][]float64 {
	var size int = ksize
	_ = size
	if _mod(size, 2) == 0 {
		size = (size + 1)
	}
	var gabor [][]float64 = [][]float64{}
	_ = gabor
	var y int = 0
	_ = y
	for y < size {
		var row []float64 = []float64{}
		_ = row
		var x int = 0
		_ = x
		for x < size {
			var px float64 = float64((x - (size / 2)))
			_ = px
			var py float64 = float64((y - (size / 2)))
			_ = py
			var rad float64 = to_radians(theta)
			_ = rad
			var cos_theta float64 = cos_taylor(rad)
			_ = cos_theta
			var sin_theta float64 = sin_taylor(rad)
			_ = sin_theta
			var x_rot float64 = ((cos_theta * px) + (sin_theta * py))
			_ = x_rot
			var y_rot float64 = (((0 - sin_theta) * px) + (cos_theta * py))
			_ = y_rot
			var exponent float64 = (float64((0 - ((x_rot * x_rot) + (((gamma * gamma) * y_rot) * y_rot)))) / float64(((2.0 * sigma) * sigma)))
			_ = exponent
			var value float64 = (exp_taylor(exponent) * cos_taylor(((float64(((2.0 * PI) * x_rot)) / float64(lambd)) + psi)))
			_ = value
			row = append(row, value)
			x = (x + 1)
		}
		gabor = append(gabor, row)
		y = (y + 1)
	}
	return gabor
}

var kernel [][]float64

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		PI = 3.141592653589793
		kernel = gabor_filter_kernel(3, 8.0, 0.0, 10.0, 0.0, 0.0)
		fmt.Println(func() string {
			b, _ := json.Marshal(kernel)
			s := string(b)
			s = strings.ReplaceAll(s, ":", ": ")
			s = strings.ReplaceAll(s, ",", ", ")
			s = strings.ReplaceAll(s, "}, {", "},{")
			return s
		}())
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
