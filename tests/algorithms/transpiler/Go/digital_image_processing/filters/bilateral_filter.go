//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-14 22:26:21 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	math "math"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

var PI float64

func abs(x float64) float64 {
	if x < 0.0 {
		return (0 - x)
	}
	return x
}

func sqrtApprox(x float64) float64 {
	if x <= 0.0 {
		return 0.0
	}
	var guess float64 = x
	_ = guess
	var i int = 0
	_ = i
	for i < 10 {
		guess = (float64((guess + (float64(x) / float64(guess)))) / float64(2.0))
		i = (i + 1)
	}
	return guess
}

func expApprox(x float64) float64 {
	var term float64 = 1.0
	_ = term
	var sum float64 = 1.0
	_ = sum
	var n int = 1
	_ = n
	for n < 10 {
		term = (float64((term * x)) / float64(n))
		sum = (sum + term)
		n = (n + 1)
	}
	return sum
}

func vec_gaussian(mat [][]float64, variance float64) [][]float64 {
	var i int = 0
	_ = i
	var out [][]float64 = [][]float64{}
	_ = out
	for i < len(mat) {
		var row []float64 = []float64{}
		_ = row
		var j int = 0
		_ = j
		for j < len(_index(mat, i)) {
			var v float64 = _index(_index(mat, i), j)
			_ = v
			var e float64 = (float64((0 - (v * v))) / float64((2.0 * variance)))
			_ = e
			_ = e
			row = func() []float64 {
				tmp := make([]float64, len(row))
				copy(tmp, row)
				tmp = append(tmp, []float64{expApprox(e)}...)
				return tmp
			}()
			j = (j + 1)
		}
		out = func() [][]float64 {
			tmp := make([][]float64, len(out))
			copy(tmp, out)
			tmp = append(tmp, [][]float64{row}...)
			return tmp
		}()
		i = (i + 1)
	}
	return out
}

func get_slice(img [][]float64, x int, y int, kernel_size int) [][]float64 {
	var half int = (kernel_size / 2)
	_ = half
	var i int = (x - half)
	_ = i
	var slice [][]float64 = [][]float64{}
	_ = slice
	for i <= (x + half) {
		var row []float64 = []float64{}
		_ = row
		var j int = (y - half)
		_ = j
		for j <= (y + half) {
			row = func() []float64 {
				tmp := make([]float64, len(row))
				copy(tmp, row)
				tmp = append(tmp, []float64{_index(_index(img, i), j)}...)
				return tmp
			}()
			j = (j + 1)
		}
		slice = func() [][]float64 {
			tmp := make([][]float64, len(slice))
			copy(tmp, slice)
			tmp = append(tmp, [][]float64{row}...)
			return tmp
		}()
		i = (i + 1)
	}
	return slice
}

func get_gauss_kernel(kernel_size int, spatial_variance float64) [][]float64 {
	var arr [][]float64 = [][]float64{}
	_ = arr
	var i int = 0
	_ = i
	for i < kernel_size {
		var row []float64 = []float64{}
		_ = row
		var j int = 0
		_ = j
		for j < kernel_size {
			var di float64 = float64((i - (kernel_size / 2)))
			_ = di
			var dj float64 = float64((j - (kernel_size / 2)))
			_ = dj
			var dist float64 = sqrtApprox(((di * di) + (dj * dj)))
			_ = dist
			_ = dist
			row = func() []float64 {
				tmp := make([]float64, len(row))
				copy(tmp, row)
				tmp = append(tmp, []float64{dist}...)
				return tmp
			}()
			j = (j + 1)
		}
		arr = func() [][]float64 {
			tmp := make([][]float64, len(arr))
			copy(tmp, arr)
			tmp = append(tmp, [][]float64{row}...)
			return tmp
		}()
		i = (i + 1)
	}
	return vec_gaussian(func(v any) [][]float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]float64{}
			}
			out := make([][]float64, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []float64 {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]float64); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []float64{}
						}
						out := make([]float64, len(arr))
						for i, x := range arr {
							out[i] = x.(float64)
						}
						return out
					}
					return v.([]float64)
				}(x)
			}
			return out
		}
		return v.([][]float64)
	}(arr), spatial_variance)
}

func elementwise_sub(mat [][]float64, value float64) [][]float64 {
	var res [][]float64 = [][]float64{}
	_ = res
	var i int = 0
	_ = i
	for i < len(mat) {
		var row []float64 = []float64{}
		_ = row
		var j int = 0
		_ = j
		for j < len(_index(mat, i)) {
			row = func() []float64 {
				tmp := make([]float64, len(row))
				copy(tmp, row)
				tmp = append(tmp, []float64{(_index(_index(mat, i), j) - value)}...)
				return tmp
			}()
			j = (j + 1)
		}
		res = func() [][]float64 {
			tmp := make([][]float64, len(res))
			copy(tmp, res)
			tmp = append(tmp, [][]float64{row}...)
			return tmp
		}()
		i = (i + 1)
	}
	return res
}

func elementwise_mul(a [][]float64, b [][]float64) [][]float64 {
	var res [][]float64 = [][]float64{}
	_ = res
	var i int = 0
	_ = i
	for i < len(a) {
		var row []float64 = []float64{}
		_ = row
		var j int = 0
		_ = j
		for j < len(_index(a, i)) {
			row = func() []float64 {
				tmp := make([]float64, len(row))
				copy(tmp, row)
				tmp = append(tmp, []float64{(_index(_index(a, i), j) * _index(_index(b, i), j))}...)
				return tmp
			}()
			j = (j + 1)
		}
		res = func() [][]float64 {
			tmp := make([][]float64, len(res))
			copy(tmp, res)
			tmp = append(tmp, [][]float64{row}...)
			return tmp
		}()
		i = (i + 1)
	}
	return res
}

func matrix_sum(mat [][]float64) float64 {
	var total float64 = 0.0
	_ = total
	var i int = 0
	_ = i
	for i < len(mat) {
		var j int = 0
		_ = j
		for j < len(_index(mat, i)) {
			total = (total + _index(_index(mat, i), j))
			j = (j + 1)
		}
		i = (i + 1)
	}
	return total
}

func bilateral_filter(img [][]float64, spatial_variance float64, intensity_variance float64, kernel_size int) float64 {
	var gauss_ker [][]float64 = get_gauss_kernel(kernel_size, spatial_variance)
	_ = gauss_ker
	var img_s [][]float64 = img
	_ = img_s
	var center float64 = _index(_index(img_s, (kernel_size/2)), (kernel_size / 2))
	_ = center
	var img_i [][]float64 = elementwise_sub(func(v any) [][]float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]float64{}
			}
			out := make([][]float64, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []float64 {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]float64); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []float64{}
						}
						out := make([]float64, len(arr))
						for i, x := range arr {
							out[i] = x.(float64)
						}
						return out
					}
					return v.([]float64)
				}(x)
			}
			return out
		}
		return v.([][]float64)
	}(img_s), center)
	_ = img_i
	var img_ig [][]float64 = vec_gaussian(func(v any) [][]float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]float64{}
			}
			out := make([][]float64, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []float64 {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]float64); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []float64{}
						}
						out := make([]float64, len(arr))
						for i, x := range arr {
							out[i] = x.(float64)
						}
						return out
					}
					return v.([]float64)
				}(x)
			}
			return out
		}
		return v.([][]float64)
	}(img_i), intensity_variance)
	_ = img_ig
	var weights [][]float64 = elementwise_mul(func(v any) [][]float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]float64{}
			}
			out := make([][]float64, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []float64 {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]float64); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []float64{}
						}
						out := make([]float64, len(arr))
						for i, x := range arr {
							out[i] = x.(float64)
						}
						return out
					}
					return v.([]float64)
				}(x)
			}
			return out
		}
		return v.([][]float64)
	}(gauss_ker), func(v any) [][]float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]float64{}
			}
			out := make([][]float64, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []float64 {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]float64); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []float64{}
						}
						out := make([]float64, len(arr))
						for i, x := range arr {
							out[i] = x.(float64)
						}
						return out
					}
					return v.([]float64)
				}(x)
			}
			return out
		}
		return v.([][]float64)
	}(img_ig))
	_ = weights
	var vals [][]float64 = elementwise_mul(func(v any) [][]float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]float64{}
			}
			out := make([][]float64, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []float64 {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]float64); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []float64{}
						}
						out := make([]float64, len(arr))
						for i, x := range arr {
							out[i] = x.(float64)
						}
						return out
					}
					return v.([]float64)
				}(x)
			}
			return out
		}
		return v.([][]float64)
	}(img_s), func(v any) [][]float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]float64{}
			}
			out := make([][]float64, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []float64 {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]float64); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []float64{}
						}
						out := make([]float64, len(arr))
						for i, x := range arr {
							out[i] = x.(float64)
						}
						return out
					}
					return v.([]float64)
				}(x)
			}
			return out
		}
		return v.([][]float64)
	}(weights))
	_ = vals
	var sum_weights float64 = matrix_sum(func(v any) [][]float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]float64{}
			}
			out := make([][]float64, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []float64 {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]float64); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []float64{}
						}
						out := make([]float64, len(arr))
						for i, x := range arr {
							out[i] = x.(float64)
						}
						return out
					}
					return v.([]float64)
				}(x)
			}
			return out
		}
		return v.([][]float64)
	}(weights))
	_ = sum_weights
	var val float64 = 0.0
	_ = val
	if sum_weights != 0.0 {
		val = (float64(matrix_sum(func(v any) [][]float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]float64{}
				}
				out := make([][]float64, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []float64 {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]float64); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []float64{}
							}
							out := make([]float64, len(arr))
							for i, x := range arr {
								out[i] = x.(float64)
							}
							return out
						}
						return v.([]float64)
					}(x)
				}
				return out
			}
			return v.([][]float64)
		}(vals))) / float64(sum_weights))
	}
	return val
}

var img [][]float64

var result float64

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		PI = 3.141592653589793
		img = [][]float64{[]float64{0.2, 0.3, 0.4}, []float64{0.3, 0.4, 0.5}, []float64{0.4, 0.5, 0.6}}
		result = bilateral_filter(func(v any) [][]float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]float64{}
				}
				out := make([][]float64, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []float64 {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]float64); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []float64{}
							}
							out := make([]float64, len(arr))
							for i, x := range arr {
								out[i] = x.(float64)
							}
							return out
						}
						return v.([]float64)
					}(x)
				}
				return out
			}
			return v.([][]float64)
		}(img), 1.0, 1.0, 3)
		fmt.Println(func() string {
			f := float64(result)
			if f == 0 && math.Signbit(f) {
				return "-0"
			}
			if f == float64(int(f)) {
				return fmt.Sprintf("%.1f", f)
			}
			return fmt.Sprint(f)
		}())
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
