//go:build ignore

// Generated by Mochi v0.10.61 on 2025-08-08 17:16:59 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	s[idx] = v
}

func make_matrix(rows int, cols int, value int) [][]int {
	var result [][]int = [][]int{}
	_ = result
	var i int = 0
	_ = i
	for i < rows {
		var row []int = []int{}
		_ = row
		var j int = 0
		_ = j
		for j < cols {
			row = append(row, value)
			j = (j + 1)
		}
		result = append(result, row)
		i = (i + 1)
	}
	return result
}

func my_laplacian(src [][]int, ksize int) [][]int {
	var kernel [][]int = [][]int{}
	_ = kernel
	if ksize == 1 {
		kernel = [][]int{[]int{func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(0), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}((0 - 1)), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(0)}, []int{func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}((0 - 1)), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(4), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}((0 - 1))}, []int{func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(0), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}((0 - 1)), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(0)}}
	} else {
		if ksize == 3 {
			kernel = [][]int{[]int{func(v any) int {
				if vv, ok := v.(int); ok {
					return vv
				}
				return 0
			}(0), func(v any) int {
				if vv, ok := v.(int); ok {
					return vv
				}
				return 0
			}(1), func(v any) int {
				if vv, ok := v.(int); ok {
					return vv
				}
				return 0
			}(0)}, []int{func(v any) int {
				if vv, ok := v.(int); ok {
					return vv
				}
				return 0
			}(1), func(v any) int {
				if vv, ok := v.(int); ok {
					return vv
				}
				return 0
			}((0 - 4)), func(v any) int {
				if vv, ok := v.(int); ok {
					return vv
				}
				return 0
			}(1)}, []int{func(v any) int {
				if vv, ok := v.(int); ok {
					return vv
				}
				return 0
			}(0), func(v any) int {
				if vv, ok := v.(int); ok {
					return vv
				}
				return 0
			}(1), func(v any) int {
				if vv, ok := v.(int); ok {
					return vv
				}
				return 0
			}(0)}}
		} else {
			if ksize == 5 {
				kernel = [][]int{[]int{func(v any) int {
					if vv, ok := v.(int); ok {
						return vv
					}
					return 0
				}(0), func(v any) int {
					if vv, ok := v.(int); ok {
						return vv
					}
					return 0
				}(0), func(v any) int {
					if vv, ok := v.(int); ok {
						return vv
					}
					return 0
				}((0 - 1)), func(v any) int {
					if vv, ok := v.(int); ok {
						return vv
					}
					return 0
				}(0), func(v any) int {
					if vv, ok := v.(int); ok {
						return vv
					}
					return 0
				}(0)}, []int{func(v any) int {
					if vv, ok := v.(int); ok {
						return vv
					}
					return 0
				}(0), func(v any) int {
					if vv, ok := v.(int); ok {
						return vv
					}
					return 0
				}((0 - 1)), func(v any) int {
					if vv, ok := v.(int); ok {
						return vv
					}
					return 0
				}((0 - 2)), func(v any) int {
					if vv, ok := v.(int); ok {
						return vv
					}
					return 0
				}((0 - 1)), func(v any) int {
					if vv, ok := v.(int); ok {
						return vv
					}
					return 0
				}(0)}, []int{func(v any) int {
					if vv, ok := v.(int); ok {
						return vv
					}
					return 0
				}((0 - 1)), func(v any) int {
					if vv, ok := v.(int); ok {
						return vv
					}
					return 0
				}((0 - 2)), func(v any) int {
					if vv, ok := v.(int); ok {
						return vv
					}
					return 0
				}(16), func(v any) int {
					if vv, ok := v.(int); ok {
						return vv
					}
					return 0
				}((0 - 2)), func(v any) int {
					if vv, ok := v.(int); ok {
						return vv
					}
					return 0
				}((0 - 1))}, []int{func(v any) int {
					if vv, ok := v.(int); ok {
						return vv
					}
					return 0
				}(0), func(v any) int {
					if vv, ok := v.(int); ok {
						return vv
					}
					return 0
				}((0 - 1)), func(v any) int {
					if vv, ok := v.(int); ok {
						return vv
					}
					return 0
				}((0 - 2)), func(v any) int {
					if vv, ok := v.(int); ok {
						return vv
					}
					return 0
				}((0 - 1)), func(v any) int {
					if vv, ok := v.(int); ok {
						return vv
					}
					return 0
				}(0)}, []int{func(v any) int {
					if vv, ok := v.(int); ok {
						return vv
					}
					return 0
				}(0), func(v any) int {
					if vv, ok := v.(int); ok {
						return vv
					}
					return 0
				}(0), func(v any) int {
					if vv, ok := v.(int); ok {
						return vv
					}
					return 0
				}((0 - 1)), func(v any) int {
					if vv, ok := v.(int); ok {
						return vv
					}
					return 0
				}(0), func(v any) int {
					if vv, ok := v.(int); ok {
						return vv
					}
					return 0
				}(0)}}
			} else {
				if ksize == 7 {
					kernel = [][]int{[]int{func(v any) int {
						if vv, ok := v.(int); ok {
							return vv
						}
						return 0
					}(0), func(v any) int {
						if vv, ok := v.(int); ok {
							return vv
						}
						return 0
					}(0), func(v any) int {
						if vv, ok := v.(int); ok {
							return vv
						}
						return 0
					}(0), func(v any) int {
						if vv, ok := v.(int); ok {
							return vv
						}
						return 0
					}((0 - 1)), func(v any) int {
						if vv, ok := v.(int); ok {
							return vv
						}
						return 0
					}(0), func(v any) int {
						if vv, ok := v.(int); ok {
							return vv
						}
						return 0
					}(0), func(v any) int {
						if vv, ok := v.(int); ok {
							return vv
						}
						return 0
					}(0)}, []int{func(v any) int {
						if vv, ok := v.(int); ok {
							return vv
						}
						return 0
					}(0), func(v any) int {
						if vv, ok := v.(int); ok {
							return vv
						}
						return 0
					}(0), func(v any) int {
						if vv, ok := v.(int); ok {
							return vv
						}
						return 0
					}((0 - 2)), func(v any) int {
						if vv, ok := v.(int); ok {
							return vv
						}
						return 0
					}((0 - 3)), func(v any) int {
						if vv, ok := v.(int); ok {
							return vv
						}
						return 0
					}((0 - 2)), func(v any) int {
						if vv, ok := v.(int); ok {
							return vv
						}
						return 0
					}(0), func(v any) int {
						if vv, ok := v.(int); ok {
							return vv
						}
						return 0
					}(0)}, []int{func(v any) int {
						if vv, ok := v.(int); ok {
							return vv
						}
						return 0
					}(0), func(v any) int {
						if vv, ok := v.(int); ok {
							return vv
						}
						return 0
					}((0 - 2)), func(v any) int {
						if vv, ok := v.(int); ok {
							return vv
						}
						return 0
					}((0 - 7)), func(v any) int {
						if vv, ok := v.(int); ok {
							return vv
						}
						return 0
					}((0 - 10)), func(v any) int {
						if vv, ok := v.(int); ok {
							return vv
						}
						return 0
					}((0 - 7)), func(v any) int {
						if vv, ok := v.(int); ok {
							return vv
						}
						return 0
					}((0 - 2)), func(v any) int {
						if vv, ok := v.(int); ok {
							return vv
						}
						return 0
					}(0)}, []int{func(v any) int {
						if vv, ok := v.(int); ok {
							return vv
						}
						return 0
					}((0 - 1)), func(v any) int {
						if vv, ok := v.(int); ok {
							return vv
						}
						return 0
					}((0 - 3)), func(v any) int {
						if vv, ok := v.(int); ok {
							return vv
						}
						return 0
					}((0 - 10)), func(v any) int {
						if vv, ok := v.(int); ok {
							return vv
						}
						return 0
					}(68), func(v any) int {
						if vv, ok := v.(int); ok {
							return vv
						}
						return 0
					}((0 - 10)), func(v any) int {
						if vv, ok := v.(int); ok {
							return vv
						}
						return 0
					}((0 - 3)), func(v any) int {
						if vv, ok := v.(int); ok {
							return vv
						}
						return 0
					}((0 - 1))}, []int{func(v any) int {
						if vv, ok := v.(int); ok {
							return vv
						}
						return 0
					}(0), func(v any) int {
						if vv, ok := v.(int); ok {
							return vv
						}
						return 0
					}((0 - 2)), func(v any) int {
						if vv, ok := v.(int); ok {
							return vv
						}
						return 0
					}((0 - 7)), func(v any) int {
						if vv, ok := v.(int); ok {
							return vv
						}
						return 0
					}((0 - 10)), func(v any) int {
						if vv, ok := v.(int); ok {
							return vv
						}
						return 0
					}((0 - 7)), func(v any) int {
						if vv, ok := v.(int); ok {
							return vv
						}
						return 0
					}((0 - 2)), func(v any) int {
						if vv, ok := v.(int); ok {
							return vv
						}
						return 0
					}(0)}, []int{func(v any) int {
						if vv, ok := v.(int); ok {
							return vv
						}
						return 0
					}(0), func(v any) int {
						if vv, ok := v.(int); ok {
							return vv
						}
						return 0
					}(0), func(v any) int {
						if vv, ok := v.(int); ok {
							return vv
						}
						return 0
					}((0 - 2)), func(v any) int {
						if vv, ok := v.(int); ok {
							return vv
						}
						return 0
					}((0 - 3)), func(v any) int {
						if vv, ok := v.(int); ok {
							return vv
						}
						return 0
					}((0 - 2)), func(v any) int {
						if vv, ok := v.(int); ok {
							return vv
						}
						return 0
					}(0), func(v any) int {
						if vv, ok := v.(int); ok {
							return vv
						}
						return 0
					}(0)}, []int{func(v any) int {
						if vv, ok := v.(int); ok {
							return vv
						}
						return 0
					}(0), func(v any) int {
						if vv, ok := v.(int); ok {
							return vv
						}
						return 0
					}(0), func(v any) int {
						if vv, ok := v.(int); ok {
							return vv
						}
						return 0
					}(0), func(v any) int {
						if vv, ok := v.(int); ok {
							return vv
						}
						return 0
					}((0 - 1)), func(v any) int {
						if vv, ok := v.(int); ok {
							return vv
						}
						return 0
					}(0), func(v any) int {
						if vv, ok := v.(int); ok {
							return vv
						}
						return 0
					}(0), func(v any) int {
						if vv, ok := v.(int); ok {
							return vv
						}
						return 0
					}(0)}}
				} else {
					panic("ksize must be in (1, 3, 5, 7)")
				}
			}
		}
	}
	rows := len(src)
	_ = rows
	cols := len(_index(src, 0))
	_ = cols
	k := len(kernel)
	_ = k
	pad := (k / 2)
	_ = pad
	var output [][]int = make_matrix(rows, cols, 0)
	_ = output
	var i int = 0
	_ = i
	for i < rows {
		var j int = 0
		_ = j
		for j < cols {
			var sum int = 0
			_ = sum
			var ki int = 0
			_ = ki
			for ki < k {
				var kj int = 0
				_ = kj
				for kj < k {
					var ii int = ((i + ki) - pad)
					_ = ii
					var jj int = ((j + kj) - pad)
					_ = jj
					var val int = 0
					_ = val
					if (((ii >= 0) && (ii < rows)) && (jj >= 0)) && (jj < cols) {
						val = _index(_index(src, ii), jj)
					}
					sum = (sum + (val * int(_index(_index(kernel, ki), kj))))
					kj = (kj + 1)
				}
				ki = (ki + 1)
			}
			_setIndex(_index(output, i), j, sum)
			j = (j + 1)
		}
		i = (i + 1)
	}
	return output
}

var image [][]int

var result [][]int

var r int

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		image = [][]int{[]int{func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(0), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(0), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(0), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(0), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(0)}, []int{func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(0), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(10), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(10), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(10), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(0)}, []int{func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(0), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(10), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(10), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(10), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(0)}, []int{func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(0), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(10), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(10), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(10), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(0)}, []int{func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(0), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(0), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(0), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(0), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(0)}}
		result = my_laplacian(func(v any) [][]int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]int{}
				}
				out := make([][]int, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []int {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]int); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []int{}
							}
							out := make([]int, len(arr))
							for i, x := range arr {
								out[i] = x.(int)
							}
							return out
						}
						return v.([]int)
					}(x)
				}
				return out
			}
			return v.([][]int)
		}(image), 3)
		r = 0
		for r < len(result) {
			var row_str string = "["
			_ = row_str
			var c int = 0
			_ = c
			for c < len(_index(result, r)) {
				row_str = (row_str + fmt.Sprint(_index(_index(result, r), c)))
				if (c + 1) < len(_index(result, r)) {
					row_str = (row_str + ", ")
				}
				c = (c + 1)
			}
			row_str = (row_str + "]")
			fmt.Println(row_str)
			r = (r + 1)
		}
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
