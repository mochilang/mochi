//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-14 22:36:56 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func pad_edge(image [][]int, pad_size int) [][]int {
	var height int = len(image)
	_ = height
	var width int = len(_index(image, 0))
	_ = width
	var new_height int = (height + (pad_size * 2))
	_ = new_height
	var new_width int = (width + (pad_size * 2))
	_ = new_width
	var padded [][]int = [][]int{}
	_ = padded
	var i int = 0
	_ = i
	for i < new_height {
		var row []int = []int{}
		_ = row
		var src_i int = i
		_ = src_i
		if src_i < pad_size {
			src_i = 0
		}
		if src_i >= (height + pad_size) {
			src_i = (height - 1)
		} else {
			src_i = (src_i - pad_size)
		}
		var j int = 0
		_ = j
		for j < new_width {
			var src_j int = j
			_ = src_j
			if src_j < pad_size {
				src_j = 0
			}
			if src_j >= (width + pad_size) {
				src_j = (width - 1)
			} else {
				src_j = (src_j - pad_size)
			}
			row = append(row, _index(_index(image, src_i), src_j))
			j = (j + 1)
		}
		padded = append(padded, row)
		i = (i + 1)
	}
	return padded
}

func im2col(image [][]int, block_h int, block_w int) [][]int {
	var rows int = len(image)
	_ = rows
	var cols int = len(_index(image, 0))
	_ = cols
	var dst_height int = ((rows - block_h) + 1)
	_ = dst_height
	var dst_width int = ((cols - block_w) + 1)
	_ = dst_width
	var image_array [][]int = [][]int{}
	_ = image_array
	var i int = 0
	_ = i
	for i < dst_height {
		var j int = 0
		_ = j
		for j < dst_width {
			var window []int = []int{}
			_ = window
			var bi int = 0
			_ = bi
			for bi < block_h {
				var bj int = 0
				_ = bj
				for bj < block_w {
					window = append(window, _index(_index(image, (i+bi)), (j+bj)))
					bj = (bj + 1)
				}
				bi = (bi + 1)
			}
			image_array = append(image_array, window)
			j = (j + 1)
		}
		i = (i + 1)
	}
	return image_array
}

func flatten(matrix [][]int) []int {
	var out []int = []int{}
	_ = out
	var i int = 0
	_ = i
	for i < len(matrix) {
		var j int = 0
		_ = j
		for j < len(_index(matrix, i)) {
			out = append(out, _index(_index(matrix, i), j))
			j = (j + 1)
		}
		i = (i + 1)
	}
	return out
}

func dot(a []int, b []int) int {
	var sum int = 0
	_ = sum
	var i int = 0
	_ = i
	for i < len(a) {
		sum = (sum + (int(_index(a, i)) * int(_index(b, i))))
		i = (i + 1)
	}
	return sum
}

func img_convolve(image [][]int, kernel [][]int) [][]int {
	var height int = len(image)
	_ = height
	var width int = len(_index(image, 0))
	_ = width
	var k_size int = len(kernel)
	_ = k_size
	var pad_size int = (k_size / 2)
	_ = pad_size
	var padded [][]int = pad_edge(func(v any) [][]int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]int{}
			}
			out := make([][]int, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []int {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]int); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []int{}
						}
						out := make([]int, len(arr))
						for i, x := range arr {
							out[i] = x.(int)
						}
						return out
					}
					return v.([]int)
				}(x)
			}
			return out
		}
		return v.([][]int)
	}(image), pad_size)
	_ = padded
	var image_array [][]int = im2col(func(v any) [][]int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]int{}
			}
			out := make([][]int, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []int {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]int); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []int{}
						}
						out := make([]int, len(arr))
						for i, x := range arr {
							out[i] = x.(int)
						}
						return out
					}
					return v.([]int)
				}(x)
			}
			return out
		}
		return v.([][]int)
	}(padded), k_size, k_size)
	_ = image_array
	var kernel_flat []int = flatten(func(v any) [][]int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]int{}
			}
			out := make([][]int, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []int {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]int); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []int{}
						}
						out := make([]int, len(arr))
						for i, x := range arr {
							out[i] = x.(int)
						}
						return out
					}
					return v.([]int)
				}(x)
			}
			return out
		}
		return v.([][]int)
	}(kernel))
	_ = kernel_flat
	var dst [][]int = [][]int{}
	_ = dst
	var idx int = 0
	_ = idx
	var i int = 0
	_ = i
	for i < height {
		var row []int = []int{}
		_ = row
		var j int = 0
		_ = j
		for j < width {
			var val int = dot(func(v any) []int {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]int); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []int{}
					}
					out := make([]int, len(arr))
					for i, x := range arr {
						out[i] = x.(int)
					}
					return out
				}
				return v.([]int)
			}(_index(image_array, idx)), func(v any) []int {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]int); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []int{}
					}
					out := make([]int, len(arr))
					for i, x := range arr {
						out[i] = x.(int)
					}
					return out
				}
				return v.([]int)
			}(kernel_flat))
			_ = val
			row = append(row, val)
			idx = (idx + 1)
			j = (j + 1)
		}
		dst = append(dst, row)
		i = (i + 1)
	}
	return dst
}

func print_matrix(m [][]int) {
	var i int = 0
	_ = i
	for i < len(m) {
		var line string = ""
		_ = line
		var j int = 0
		_ = j
		for j < len(_index(m, i)) {
			if j > 0 {
				line = (line + " ")
			}
			line = (line + fmt.Sprint(_index(_index(m, i), j)))
			j = (j + 1)
		}
		fmt.Println(line)
		i = (i + 1)
	}
}

var image [][]int

var laplace_kernel [][]int

var result [][]int

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		image = [][]int{[]int{1, 2, 3, 0, 0}, []int{4, 5, 6, 0, 0}, []int{7, 8, 9, 0, 0}, []int{0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0}}
		laplace_kernel = [][]int{[]int{0, 1, 0}, []int{1, func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}((0 - 4)), 1}, []int{0, 1, 0}}
		result = img_convolve(func(v any) [][]int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]int{}
				}
				out := make([][]int, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []int {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]int); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []int{}
							}
							out := make([]int, len(arr))
							for i, x := range arr {
								out[i] = x.(int)
							}
							return out
						}
						return v.([]int)
					}(x)
				}
				return out
			}
			return v.([][]int)
		}(image), func(v any) [][]int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]int{}
				}
				out := make([][]int, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []int {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]int); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []int{}
							}
							out := make([]int, len(arr))
							for i, x := range arr {
								out[i] = x.(int)
							}
							return out
						}
						return v.([]int)
					}(x)
				}
				return out
			}
			return v.([][]int)
		}(laplace_kernel))
		print_matrix(func(v any) [][]int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]int{}
				}
				out := make([][]int, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []int {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]int); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []int{}
							}
							out := make([]int, len(arr))
							for i, x := range arr {
								out[i] = x.(int)
							}
							return out
						}
						return v.([]int)
					}(x)
				}
				return out
			}
			return v.([][]int)
		}(result))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
