//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-14 22:37:42 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"strings"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	s[idx] = v
}

func insertion_sort(a []int) []int {
	var i int = 1
	_ = i
	for i < len(a) {
		var key int = _index(a, i)
		_ = key
		var j int = (i - 1)
		_ = j
		for (j >= 0) && (int(_index(a, j)) > key) {
			_setIndex(a, (j + 1), _index(a, j))
			j = (j - 1)
		}
		_setIndex(a, (j + 1), key)
		i = (i + 1)
	}
	return a
}

func median_filter(gray_img [][]int, mask int) [][]int {
	var rows int = len(gray_img)
	_ = rows
	var cols int = len(_index(gray_img, 0))
	_ = cols
	var bd int = (mask / 2)
	_ = bd
	var result [][]int = [][]int{}
	_ = result
	var i int = 0
	_ = i
	for i < rows {
		var row []int = []int{}
		_ = row
		var j int = 0
		_ = j
		for j < cols {
			row = append(row, 0)
			j = (j + 1)
		}
		result = append(result, row)
		i = (i + 1)
	}
	i = bd
	for i < (rows - bd) {
		var j int = bd
		_ = j
		for j < (cols - bd) {
			var kernel []int = []int{}
			_ = kernel
			var x int = (i - bd)
			_ = x
			for x <= (i + bd) {
				var y int = (j - bd)
				_ = y
				for y <= (j + bd) {
					kernel = append(kernel, _index(_index(gray_img, x), y))
					y = (y + 1)
				}
				x = (x + 1)
			}
			kernel = insertion_sort(func(v any) []int {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]int); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []int{}
					}
					out := make([]int, len(arr))
					for i, x := range arr {
						out[i] = x.(int)
					}
					return out
				}
				return v.([]int)
			}(kernel))
			var idx int = ((mask * mask) / 2)
			_ = idx
			_setIndex(_index(result, i), j, _index(kernel, idx))
			j = (j + 1)
		}
		i = (i + 1)
	}
	return result
}

func mochiMain() {
	var img [][]int = [][]int{[]int{10, 10, 10, 10, 10}, []int{10, 255, 10, 255, 10}, []int{10, 10, 10, 10, 10}, []int{10, 255, 10, 255, 10}, []int{10, 10, 10, 10, 10}}
	_ = img
	var filtered [][]int = median_filter(func(v any) [][]int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]int{}
			}
			out := make([][]int, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []int {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]int); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []int{}
						}
						out := make([]int, len(arr))
						for i, x := range arr {
							out[i] = x.(int)
						}
						return out
					}
					return v.([]int)
				}(x)
			}
			return out
		}
		return v.([][]int)
	}(img), 3)
	_ = filtered
	_ = filtered
	fmt.Println(func() string {
		b, _ := json.Marshal(filtered)
		s := string(b)
		s = strings.ReplaceAll(s, ":", ": ")
		s = strings.ReplaceAll(s, ",", ", ")
		s = strings.ReplaceAll(s, "}, {", "},{")
		return s
	}())
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
