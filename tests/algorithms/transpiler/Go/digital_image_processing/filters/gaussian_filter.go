//go:build ignore

// Generated by Mochi v0.10.61 on 2025-08-08 17:16:58 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"reflect"
	"runtime"
	"strconv"
	"strings"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

func _toFloat(v any) float64 {
	switch t := v.(type) {
	case int:
		return float64(t)
	case int64:
		return float64(t)
	case float64:
		return t
	default:
		return 0
	}
}

var PI float64

func expApprox(x float64) float64 {
	var sum float64 = 1.0
	_ = sum
	var term float64 = 1.0
	_ = term
	var n int = 1
	_ = n
	for n < 10 {
		term = ((term * x) / float64(n))
		sum = (sum + term)
		n = (n + 1)
	}
	return sum
}

func gen_gaussian_kernel(k_size int, sigma float64) [][]float64 {
	var center int = (k_size / 2)
	_ = center
	var kernel [][]float64 = [][]float64{}
	_ = kernel
	var i int = 0
	_ = i
	for i < k_size {
		var row []float64 = []float64{}
		_ = row
		var j int = 0
		_ = j
		for j < k_size {
			var x float64 = float64((i - center))
			_ = x
			var y float64 = float64((j - center))
			_ = y
			exponent := (0 - (((x * x) + (y * y)) / ((2.0 * sigma) * sigma)))
			_ = exponent
			value := ((1.0 / ((2.0 * PI) * sigma)) * expApprox(exponent))
			_ = value
			row = append(row, value)
			j = (j + 1)
		}
		kernel = append(kernel, row)
		i = (i + 1)
	}
	return kernel
}

func gaussian_filter(image [][]int, k_size int, sigma float64) [][]int {
	height := len(image)
	_ = height
	width := len(_index(image, 0))
	_ = width
	dst_height := ((height - k_size) + 1)
	_ = dst_height
	dst_width := ((width - k_size) + 1)
	_ = dst_width
	kernel := gen_gaussian_kernel(k_size, sigma)
	_ = kernel
	var dst [][]int = [][]int{}
	_ = dst
	var i int = 0
	_ = i
	for i < dst_height {
		var row []int = []int{}
		_ = row
		var j int = 0
		_ = j
		for j < dst_width {
			var sum float64 = 0.0
			_ = sum
			var ki int = 0
			_ = ki
			for ki < k_size {
				var kj int = 0
				_ = kj
				for kj < k_size {
					sum = (sum + (float64(_index(_index(image, (i+ki)), (j+kj))) * _toFloat(_index(func(v any) []any {
						if v == nil {
							return nil
						}
						if arr, ok := v.([]any); ok {
							return arr
						}
						rv := reflect.ValueOf(v)
						if rv.Kind() != reflect.Slice {
							return v.([]any)
						}
						n := rv.Len()
						out := make([]any, n)
						for i := 0; i < n; i++ {
							out[i] = rv.Index(i).Interface()
						}
						return out
					}(_index(func(v any) []any {
						if v == nil {
							return nil
						}
						if arr, ok := v.([]any); ok {
							return arr
						}
						rv := reflect.ValueOf(v)
						if rv.Kind() != reflect.Slice {
							return v.([]any)
						}
						n := rv.Len()
						out := make([]any, n)
						for i := 0; i < n; i++ {
							out[i] = rv.Index(i).Interface()
						}
						return out
					}(kernel), ki)), kj))))
					kj = (kj + 1)
				}
				ki = (ki + 1)
			}
			row = append(row, int(sum))
			j = (j + 1)
		}
		dst = append(dst, row)
		i = (i + 1)
	}
	return dst
}

func print_image(image [][]int) {
	var i int = 0
	_ = i
	for i < len(image) {
		fmt.Println(func() string {
			b, _ := json.Marshal(_index(image, i))
			s := string(b)
			s = strings.ReplaceAll(s, ":", ": ")
			s = strings.ReplaceAll(s, ",", ", ")
			s = strings.ReplaceAll(s, "}, {", "},{")
			return s
		}())
		i = (i + 1)
	}
}

var img [][]int

var gaussian3 [][]int

var gaussian5 [][]int

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		PI = 3.141592653589793
		img = [][]int{[]int{func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(52), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(55), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(61), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(59), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(79)}, []int{func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(62), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(59), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(55), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(104), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(94)}, []int{func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(63), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(65), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(66), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(113), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(144)}, []int{func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(68), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(70), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(70), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(126), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(154)}, []int{func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(70), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(72), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(69), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(128), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(155)}}
		gaussian3 = gaussian_filter(func(v any) [][]int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]int{}
				}
				out := make([][]int, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []int {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]int); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []int{}
							}
							out := make([]int, len(arr))
							for i, x := range arr {
								out[i] = x.(int)
							}
							return out
						}
						return v.([]int)
					}(x)
				}
				return out
			}
			return v.([][]int)
		}(img), 3, 1.0)
		gaussian5 = gaussian_filter(func(v any) [][]int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]int{}
				}
				out := make([][]int, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []int {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]int); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []int{}
							}
							out := make([]int, len(arr))
							for i, x := range arr {
								out[i] = x.(int)
							}
							return out
						}
						return v.([]int)
					}(x)
				}
				return out
			}
			return v.([][]int)
		}(img), 5, 0.8)
		print_image(func(v any) [][]int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]int{}
				}
				out := make([][]int, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []int {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]int); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []int{}
							}
							out := make([]int, len(arr))
							for i, x := range arr {
								out[i] = x.(int)
							}
							return out
						}
						return v.([]int)
					}(x)
				}
				return out
			}
			return v.([][]int)
		}(gaussian3))
		print_image(func(v any) [][]int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]int{}
				}
				out := make([][]int, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []int {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]int); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []int{}
							}
							out := make([]int, len(arr))
							for i, x := range arr {
								out[i] = x.(int)
							}
							return out
						}
						return v.([]int)
					}(x)
				}
				return out
			}
			return v.([][]int)
		}(gaussian5))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
