//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-14 22:38:28 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	s[idx] = v
}

func mat_inverse3(m [][]float64) [][]float64 {
	var a float64 = _index(_index(m, 0), 0)
	_ = a
	var b float64 = _index(_index(m, 0), 1)
	_ = b
	var c float64 = _index(_index(m, 0), 2)
	_ = c
	var d float64 = _index(_index(m, 1), 0)
	_ = d
	var e float64 = _index(_index(m, 1), 1)
	_ = e
	var f float64 = _index(_index(m, 1), 2)
	_ = f
	var g float64 = _index(_index(m, 2), 0)
	_ = g
	var h float64 = _index(_index(m, 2), 1)
	_ = h
	var i float64 = _index(_index(m, 2), 2)
	_ = i
	var det float64 = (((a * ((e * i) - (f * h))) - (b * ((d * i) - (f * g)))) + (c * ((d * h) - (e * g))))
	_ = det
	if det == 0.0 {
		panic("singular matrix")
	}
	var adj00 float64 = ((e * i) - (f * h))
	_ = adj00
	var adj01 float64 = ((c * h) - (b * i))
	_ = adj01
	var adj02 float64 = ((b * f) - (c * e))
	_ = adj02
	var adj10 float64 = ((f * g) - (d * i))
	_ = adj10
	var adj11 float64 = ((a * i) - (c * g))
	_ = adj11
	var adj12 float64 = ((c * d) - (a * f))
	_ = adj12
	var adj20 float64 = ((d * h) - (e * g))
	_ = adj20
	var adj21 float64 = ((b * g) - (a * h))
	_ = adj21
	var adj22 float64 = ((a * e) - (b * d))
	_ = adj22
	var inv [][]float64 = [][]float64{}
	_ = inv
	inv = append(inv, []float64{(float64(adj00) / float64(det)), (float64(adj01) / float64(det)), (float64(adj02) / float64(det))})
	inv = append(inv, []float64{(float64(adj10) / float64(det)), (float64(adj11) / float64(det)), (float64(adj12) / float64(det))})
	inv = append(inv, []float64{(float64(adj20) / float64(det)), (float64(adj21) / float64(det)), (float64(adj22) / float64(det))})
	return inv
}

func mat_vec_mul(m [][]float64, v []float64) []float64 {
	var res []float64 = []float64{}
	_ = res
	var i int = 0
	_ = i
	for i < 3 {
		var val float64 = (((_index(_index(m, i), 0) * _index(v, 0)) + (_index(_index(m, i), 1) * _index(v, 1))) + (_index(_index(m, i), 2) * _index(v, 2)))
		_ = val
		res = append(res, val)
		i = (i + 1)
	}
	return res
}

func create_matrix(rows int, cols int, value int) [][]int {
	var result [][]int = [][]int{}
	_ = result
	var r int = 0
	_ = r
	for r < rows {
		var row []int = []int{}
		_ = row
		var c int = 0
		_ = c
		for c < cols {
			row = append(row, value)
			c = (c + 1)
		}
		result = append(result, row)
		r = (r + 1)
	}
	return result
}

func round_to_int(x float64) int {
	if x >= 0.0 {
		return int((x + 0.5))
	}
	return int((x - 0.5))
}

func get_rotation(img [][]int, pt1 [][]float64, pt2 [][]float64, rows int, cols int) [][]int {
	var src [][]float64 = [][]float64{[]float64{_index(_index(pt1, 0), 0), _index(_index(pt1, 0), 1), 1.0}, []float64{_index(_index(pt1, 1), 0), _index(_index(pt1, 1), 1), 1.0}, []float64{_index(_index(pt1, 2), 0), _index(_index(pt1, 2), 1), 1.0}}
	_ = src
	var inv [][]float64 = mat_inverse3(func(v any) [][]float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]float64{}
			}
			out := make([][]float64, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []float64 {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]float64); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []float64{}
						}
						out := make([]float64, len(arr))
						for i, x := range arr {
							out[i] = x.(float64)
						}
						return out
					}
					return v.([]float64)
				}(x)
			}
			return out
		}
		return v.([][]float64)
	}(src))
	_ = inv
	var vecx []float64 = []float64{_index(_index(pt2, 0), 0), _index(_index(pt2, 1), 0), _index(_index(pt2, 2), 0)}
	_ = vecx
	var vecy []float64 = []float64{_index(_index(pt2, 0), 1), _index(_index(pt2, 1), 1), _index(_index(pt2, 2), 1)}
	_ = vecy
	var avec []float64 = mat_vec_mul(func(v any) [][]float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]float64{}
			}
			out := make([][]float64, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []float64 {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]float64); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []float64{}
						}
						out := make([]float64, len(arr))
						for i, x := range arr {
							out[i] = x.(float64)
						}
						return out
					}
					return v.([]float64)
				}(x)
			}
			return out
		}
		return v.([][]float64)
	}(inv), func(v any) []float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []float64{}
			}
			out := make([]float64, len(arr))
			for i, x := range arr {
				out[i] = x.(float64)
			}
			return out
		}
		return v.([]float64)
	}(vecx))
	_ = avec
	var bvec []float64 = mat_vec_mul(func(v any) [][]float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]float64{}
			}
			out := make([][]float64, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []float64 {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]float64); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []float64{}
						}
						out := make([]float64, len(arr))
						for i, x := range arr {
							out[i] = x.(float64)
						}
						return out
					}
					return v.([]float64)
				}(x)
			}
			return out
		}
		return v.([][]float64)
	}(inv), func(v any) []float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []float64{}
			}
			out := make([]float64, len(arr))
			for i, x := range arr {
				out[i] = x.(float64)
			}
			return out
		}
		return v.([]float64)
	}(vecy))
	_ = bvec
	var a0 float64 = _index(avec, 0)
	_ = a0
	var a1 float64 = _index(avec, 1)
	_ = a1
	var a2 float64 = _index(avec, 2)
	_ = a2
	var b0 float64 = _index(bvec, 0)
	_ = b0
	var b1 float64 = _index(bvec, 1)
	_ = b1
	var b2 float64 = _index(bvec, 2)
	_ = b2
	var out [][]int = create_matrix(rows, cols, 0)
	_ = out
	var y int = 0
	_ = y
	for y < rows {
		var x int = 0
		_ = x
		for x < cols {
			var xf float64 = (((a0 * (1.0 * float64(x))) + (a1 * (1.0 * float64(y)))) + a2)
			_ = xf
			var yf float64 = (((b0 * (1.0 * float64(x))) + (b1 * (1.0 * float64(y)))) + b2)
			_ = yf
			var sx int = round_to_int(xf)
			_ = sx
			var sy int = round_to_int(yf)
			_ = sy
			if (((sx >= 0) && (sx < cols)) && (sy >= 0)) && (sy < rows) {
				_setIndex(_index(out, sy), sx, _index(_index(img, y), x))
			}
			x = (x + 1)
		}
		y = (y + 1)
	}
	return out
}

var img [][]int

var pts1 [][]float64

var pts2 [][]float64

var rotated [][]int

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		img = [][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}
		pts1 = [][]float64{[]float64{0.0, 0.0}, []float64{2.0, 0.0}, []float64{0.0, 2.0}}
		pts2 = [][]float64{[]float64{0.0, 2.0}, []float64{0.0, 0.0}, []float64{2.0, 2.0}}
		rotated = get_rotation(func(v any) [][]int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]int{}
				}
				out := make([][]int, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []int {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]int); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []int{}
							}
							out := make([]int, len(arr))
							for i, x := range arr {
								out[i] = x.(int)
							}
							return out
						}
						return v.([]int)
					}(x)
				}
				return out
			}
			return v.([][]int)
		}(img), func(v any) [][]float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]float64{}
				}
				out := make([][]float64, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []float64 {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]float64); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []float64{}
							}
							out := make([]float64, len(arr))
							for i, x := range arr {
								out[i] = x.(float64)
							}
							return out
						}
						return v.([]float64)
					}(x)
				}
				return out
			}
			return v.([][]float64)
		}(pts1), func(v any) [][]float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]float64{}
				}
				out := make([][]float64, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []float64 {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]float64); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []float64{}
							}
							out := make([]float64, len(arr))
							for i, x := range arr {
								out[i] = x.(float64)
							}
							return out
						}
						return v.([]float64)
					}(x)
				}
				return out
			}
			return v.([][]float64)
		}(pts2), 3, 3)
		fmt.Println(fmt.Sprint(rotated))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
