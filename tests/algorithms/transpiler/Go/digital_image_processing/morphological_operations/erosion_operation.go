//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-14 22:38:03 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	s[idx] = v
}

func rgb_to_gray(rgb [][][]int) [][]float64 {
	var gray [][]float64 = [][]float64{}
	_ = gray
	var i int = 0
	_ = i
	for i < len(rgb) {
		var row []float64 = []float64{}
		_ = row
		var j int = 0
		_ = j
		for j < len(_index(rgb, i)) {
			var r float64 = float64(_index(_index(_index(rgb, i), j), 0))
			_ = r
			var g float64 = float64(_index(_index(_index(rgb, i), j), 1))
			_ = g
			var b float64 = float64(_index(_index(_index(rgb, i), j), 2))
			_ = b
			var value float64 = (((0.2989 * r) + (0.587 * g)) + (0.114 * b))
			_ = value
			row = append(row, value)
			j = (j + 1)
		}
		gray = append(gray, row)
		i = (i + 1)
	}
	return gray
}

func gray_to_binary(gray [][]float64) [][]bool {
	var binary [][]bool = [][]bool{}
	_ = binary
	var i int = 0
	_ = i
	for i < len(gray) {
		var row []bool = []bool{}
		_ = row
		var j int = 0
		_ = j
		for j < len(_index(gray, i)) {
			row = append(row, ((_index(_index(gray, i), j) > 127.0) && (_index(_index(gray, i), j) <= 255.0)))
			j = (j + 1)
		}
		binary = append(binary, row)
		i = (i + 1)
	}
	return binary
}

func erosion(image [][]bool, kernel [][]int) [][]bool {
	var h int = len(image)
	_ = h
	var w int = len(_index(image, 0))
	_ = w
	var k_h int = len(kernel)
	_ = k_h
	var k_w int = len(_index(kernel, 0))
	_ = k_w
	var pad_y int = (k_h / 2)
	_ = pad_y
	var pad_x int = (k_w / 2)
	_ = pad_x
	var padded [][]bool = [][]bool{}
	_ = padded
	var y int = 0
	_ = y
	for y < (h + (2 * pad_y)) {
		var row []bool = []bool{}
		_ = row
		var x int = 0
		_ = x
		for x < (w + (2 * pad_x)) {
			row = append(row, false)
			x = (x + 1)
		}
		padded = append(padded, row)
		y = (y + 1)
	}
	y = 0
	for y < h {
		var x int = 0
		_ = x
		for x < w {
			_setIndex(_index(padded, (pad_y+y)), (pad_x + x), _index(_index(image, y), x))
			x = (x + 1)
		}
		y = (y + 1)
	}
	var output [][]bool = [][]bool{}
	_ = output
	y = 0
	for y < h {
		var row_out []bool = []bool{}
		_ = row_out
		var x int = 0
		_ = x
		for x < w {
			var sum int = 0
			_ = sum
			var ky int = 0
			_ = ky
			for ky < k_h {
				var kx int = 0
				_ = kx
				for kx < k_w {
					if (int(_index(_index(kernel, ky), kx)) == 1) && _index(_index(padded, (y+ky)), (x+kx)) {
						sum = (sum + 1)
					}
					kx = (kx + 1)
				}
				ky = (ky + 1)
			}
			row_out = append(row_out, (sum == 5))
			x = (x + 1)
		}
		output = append(output, row_out)
		y = (y + 1)
	}
	return output
}

var rgb_img [][][]int

var gray_img [][]float64

var img1 [][]bool

var kernel1 [][]int

var img2 [][]bool

var kernel2 [][]int

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		rgb_img = [][][]int{[][]int{[]int{127, 255, 0}}}
		fmt.Println(fmt.Sprint(rgb_to_gray(func(v any) [][][]int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][][]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][][]int{}
				}
				out := make([][][]int, len(arr))
				for i, x := range arr {
					out[i] = func(v any) [][]int {
						if v == nil {
							return nil
						}
						if vv, ok := v.([][]int); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return [][]int{}
							}
							out := make([][]int, len(arr))
							for i, x := range arr {
								out[i] = x.([]int)
							}
							return out
						}
						return v.([][]int)
					}(x)
				}
				return out
			}
			return v.([][][]int)
		}(rgb_img))))
		gray_img = [][]float64{[]float64{127.0, 255.0, 0.0}}
		fmt.Println(fmt.Sprint(gray_to_binary(func(v any) [][]float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]float64{}
				}
				out := make([][]float64, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []float64 {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]float64); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []float64{}
							}
							out := make([]float64, len(arr))
							for i, x := range arr {
								out[i] = x.(float64)
							}
							return out
						}
						return v.([]float64)
					}(x)
				}
				return out
			}
			return v.([][]float64)
		}(gray_img))))
		img1 = [][]bool{[]bool{true, true, false}}
		kernel1 = [][]int{[]int{0, 1, 0}}
		fmt.Println(fmt.Sprint(erosion(func(v any) [][]bool {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]bool); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]bool{}
				}
				out := make([][]bool, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []bool {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]bool); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []bool{}
							}
							out := make([]bool, len(arr))
							for i, x := range arr {
								out[i] = x.(bool)
							}
							return out
						}
						return v.([]bool)
					}(x)
				}
				return out
			}
			return v.([][]bool)
		}(img1), func(v any) [][]int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]int{}
				}
				out := make([][]int, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []int {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]int); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []int{}
							}
							out := make([]int, len(arr))
							for i, x := range arr {
								out[i] = x.(int)
							}
							return out
						}
						return v.([]int)
					}(x)
				}
				return out
			}
			return v.([][]int)
		}(kernel1))))
		img2 = [][]bool{[]bool{true, false, false}}
		kernel2 = [][]int{[]int{1, 1, 0}}
		fmt.Println(fmt.Sprint(erosion(func(v any) [][]bool {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]bool); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]bool{}
				}
				out := make([][]bool, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []bool {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]bool); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []bool{}
							}
							out := make([]bool, len(arr))
							for i, x := range arr {
								out[i] = x.(bool)
							}
							return out
						}
						return v.([]bool)
					}(x)
				}
				return out
			}
			return v.([][]bool)
		}(img2), func(v any) [][]int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]int{}
				}
				out := make([][]int, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []int {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]int); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []int{}
							}
							out := make([]int, len(arr))
							for i, x := range arr {
								out[i] = x.(int)
							}
							return out
						}
						return v.([]int)
					}(x)
				}
				return out
			}
			return v.([][]int)
		}(kernel2))))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
