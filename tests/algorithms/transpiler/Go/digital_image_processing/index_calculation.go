//go:build ignore

// Generated by Mochi v0.10.61 on 2025-08-08 17:49:11 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func ndvi(red float64, nir float64) float64 {
	return ((nir - red) / (nir + red))
}

func bndvi(blue float64, nir float64) float64 {
	return ((nir - blue) / (nir + blue))
}

func gndvi(green float64, nir float64) float64 {
	return ((nir - green) / (nir + green))
}

func ndre(redEdge float64, nir float64) float64 {
	return ((nir - redEdge) / (nir + redEdge))
}

func ccci(red float64, redEdge float64, nir float64) float64 {
	return (ndre(redEdge, nir) / ndvi(red, nir))
}

func cvi(red float64, green float64, nir float64) float64 {
	return ((nir * red) / (green * green))
}

func gli(red float64, green float64, blue float64) float64 {
	return ((((2.0 * green) - red) - blue) / (((2.0 * green) + red) + blue))
}

func dvi(red float64, nir float64) float64 {
	return (nir / red)
}

func calc(index string, red float64, green float64, blue float64, redEdge float64, nir float64) float64 {
	if index == "NDVI" {
		return ndvi(red, nir)
	}
	if index == "BNDVI" {
		return bndvi(blue, nir)
	}
	if index == "GNDVI" {
		return gndvi(green, nir)
	}
	if index == "NDRE" {
		return ndre(redEdge, nir)
	}
	if index == "CCCI" {
		return ccci(red, redEdge, nir)
	}
	if index == "CVI" {
		return cvi(red, green, nir)
	}
	if index == "GLI" {
		return gli(red, green, blue)
	}
	if index == "DVI" {
		return dvi(red, nir)
	}
	return 0.0
}

func mochiMain() {
	var red float64 = 50.0
	_ = red
	var green float64 = 30.0
	_ = green
	var blue float64 = 10.0
	_ = blue
	_ = blue
	var redEdge float64 = 40.0
	_ = redEdge
	var nir float64 = 100.0
	_ = nir
	fmt.Println(("NDVI=" + fmt.Sprint(ndvi(red, nir))))
	fmt.Println(("CCCI=" + fmt.Sprint(ccci(red, redEdge, nir))))
	fmt.Println(("CVI=" + fmt.Sprint(cvi(red, green, nir))))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
