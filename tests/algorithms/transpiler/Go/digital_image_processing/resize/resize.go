//go:build ignore

// Generated by Mochi v0.10.61 on 2025-08-08 17:57:09 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	s[idx] = v
}

func _toFloat(v any) float64 {
	switch t := v.(type) {
	case int:
		return float64(t)
	case int64:
		return float64(t)
	case float64:
		return t
	default:
		return 0
	}
}

func zeros3d(h int, w int, c int) [][][]int {
	var arr [][][]int = [][][]int{}
	_ = arr
	var y int = 0
	_ = y
	for y < h {
		var row [][]int = [][]int{}
		_ = row
		var x int = 0
		_ = x
		for x < w {
			var pixel []int = []int{}
			_ = pixel
			var k int = 0
			_ = k
			for k < c {
				pixel = append(pixel, 0)
				k = (k + 1)
			}
			row = append(row, pixel)
			x = (x + 1)
		}
		arr = append(arr, row)
		y = (y + 1)
	}
	return arr
}

func resize_nn(img [][][]int, dst_w int, dst_h int) [][][]int {
	src_h := len(img)
	_ = src_h
	src_w := len(_index(img, 0))
	_ = src_w
	channels := len(_index(_index(img, 0), 0))
	_ = channels
	ratio_x := (float64(src_w) / float64(dst_w))
	_ = ratio_x
	_ = ratio_x
	ratio_y := (float64(src_h) / float64(dst_h))
	_ = ratio_y
	_ = ratio_y
	var out [][][]int = zeros3d(dst_h, dst_w, channels)
	_ = out
	var i int = 0
	_ = i
	for i < dst_h {
		var j int = 0
		_ = j
		for j < dst_w {
			var src_x int = func() int { n, _ := strconv.Atoi(fmt.Sprint((_toFloat(ratio_x) * float64(j)))); return n }()
			_ = src_x
			var src_y int = func() int { n, _ := strconv.Atoi(fmt.Sprint((_toFloat(ratio_y) * float64(i)))); return n }()
			_ = src_y
			_setIndex(_index(out, i), j, _index(_index(img, src_y), src_x))
			j = (j + 1)
		}
		i = (i + 1)
	}
	return out
}

func mochiMain() {
	var img [][][]int = [][][]int{[][]int{[]int{func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(0), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(0), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(0)}, []int{func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(255), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(255), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(255)}}, [][]int{[]int{func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(255), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(0), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(0)}, []int{func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(0), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(255), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(0)}}}
	_ = img
	resized := resize_nn(func(v any) [][][]int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][][]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][][]int{}
			}
			out := make([][][]int, len(arr))
			for i, x := range arr {
				out[i] = func(v any) [][]int {
					if v == nil {
						return nil
					}
					if vv, ok := v.([][]int); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return [][]int{}
						}
						out := make([][]int, len(arr))
						for i, x := range arr {
							out[i] = x.([]int)
						}
						return out
					}
					return v.([][]int)
				}(x)
			}
			return out
		}
		return v.([][][]int)
	}(img), 4, 4)
	_ = resized
	fmt.Println(resized)
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
