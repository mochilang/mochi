//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-14 22:36:47 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func change_contrast(img [][]int, level int) [][]int {
	var factor float64 = (float64((259.0 * (float64(level) + 255.0))) / float64((255.0 * (259.0 - float64(level)))))
	_ = factor
	_ = factor
	var result [][]int = [][]int{}
	_ = result
	var i int = 0
	_ = i
	for i < len(img) {
		var row []int = _index(img, i)
		_ = row
		var new_row []int = []int{}
		_ = new_row
		var j int = 0
		_ = j
		for j < len(row) {
			var c int = _index(row, j)
			_ = c
			_ = c
			var contrasted int = int((128.0 + (factor * (float64(c) - 128.0))))
			_ = contrasted
			_ = contrasted
			var clamped int = func() int {
				if contrasted < 0 {
					return 0
				} else {
					return func() int {
						if contrasted > 255 {
							return 255
						} else {
							return contrasted
						}
					}()
				}
			}()
			_ = clamped
			new_row = append(new_row, clamped)
			j = (j + 1)
		}
		result = append(result, new_row)
		i = (i + 1)
	}
	return result
}

func print_image(img [][]int) {
	var i int = 0
	_ = i
	for i < len(img) {
		var row []int = _index(img, i)
		_ = row
		var j int = 0
		_ = j
		var line string = ""
		_ = line
		for j < len(row) {
			line = ((line + fmt.Sprint(_index(row, j))) + " ")
			j = (j + 1)
		}
		fmt.Println(line)
		i = (i + 1)
	}
}

var image [][]int

var contrasted [][]int

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		image = [][]int{[]int{100, 125, 150}, []int{175, 200, 225}, []int{50, 75, 100}}
		fmt.Println("Original image:")
		print_image(func(v any) [][]int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]int{}
				}
				out := make([][]int, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []int {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]int); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []int{}
							}
							out := make([]int, len(arr))
							for i, x := range arr {
								out[i] = x.(int)
							}
							return out
						}
						return v.([]int)
					}(x)
				}
				return out
			}
			return v.([][]int)
		}(image))
		contrasted = change_contrast(func(v any) [][]int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]int{}
				}
				out := make([][]int, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []int {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]int); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []int{}
							}
							out := make([]int, len(arr))
							for i, x := range arr {
								out[i] = x.(int)
							}
							return out
						}
						return v.([]int)
					}(x)
				}
				return out
			}
			return v.([][]int)
		}(image), 170)
		fmt.Println("After contrast:")
		print_image(func(v any) [][]int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]int{}
				}
				out := make([][]int, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []int {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]int); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []int{}
							}
							out := make([]int, len(arr))
							for i, x := range arr {
								out[i] = x.(int)
							}
							return out
						}
						return v.([]int)
					}(x)
				}
				return out
			}
			return v.([][]int)
		}(contrasted))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
