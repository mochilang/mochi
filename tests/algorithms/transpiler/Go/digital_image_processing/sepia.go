//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-14 22:38:30 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	s[idx] = v
}

func normalize(value int) int {
	if value > 255 {
		return 255
	}
	return value
}

func to_grayscale(blue int, green int, red int) int {
	var gs float64 = (((0.2126 * float64(red)) + (0.587 * float64(green))) + (0.114 * float64(blue)))
	_ = gs
	_ = gs
	return int(gs)
}

func make_sepia(img [][][]int, factor int) [][][]int {
	var pixel_h int = len(img)
	_ = pixel_h
	var pixel_v int = len(_index(img, 0))
	_ = pixel_v
	var i int = 0
	_ = i
	for i < pixel_h {
		var j int = 0
		_ = j
		for j < pixel_v {
			var pixel []int = _index(_index(img, i), j)
			_ = pixel
			var grey int = to_grayscale(_index(pixel, 0), _index(pixel, 1), _index(pixel, 2))
			_ = grey
			_setIndex(_index(img, i), j, []int{func(v any) int {
				if vv, ok := v.(int); ok {
					return vv
				}
				return 0
			}(normalize(grey)), func(v any) int {
				if vv, ok := v.(int); ok {
					return vv
				}
				return 0
			}(normalize((grey + factor))), func(v any) int {
				if vv, ok := v.(int); ok {
					return vv
				}
				return 0
			}(normalize((grey + (2 * factor))))})
			j = (j + 1)
		}
		i = (i + 1)
	}
	return img
}

var image [][][]int

var sepia [][][]int

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		image = [][][]int{[][]int{[]int{10, 20, 30}, []int{40, 50, 60}}, [][]int{[]int{70, 80, 90}, []int{200, 150, 100}}}
		sepia = make_sepia(func(v any) [][][]int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][][]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][][]int{}
				}
				out := make([][][]int, len(arr))
				for i, x := range arr {
					out[i] = func(v any) [][]int {
						if v == nil {
							return nil
						}
						if vv, ok := v.([][]int); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return [][]int{}
							}
							out := make([][]int, len(arr))
							for i, x := range arr {
								out[i] = x.([]int)
							}
							return out
						}
						return v.([][]int)
					}(x)
				}
				return out
			}
			return v.([][][]int)
		}(image), 20)
		fmt.Println(fmt.Sprint(sepia))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
