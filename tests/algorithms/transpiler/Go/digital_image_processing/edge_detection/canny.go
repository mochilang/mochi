//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-14 22:36:52 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	s[idx] = v
}

var PI float64

func sqrtApprox(x float64) float64 {
	var guess float64 = (float64(x) / float64(2.0))
	_ = guess
	var i int = 0
	_ = i
	for i < 20 {
		guess = (float64((guess + (float64(x) / float64(guess)))) / float64(2.0))
		i = (i + 1)
	}
	return guess
}

func atanApprox(x float64) float64 {
	if x > 1.0 {
		return ((float64(PI) / float64(2.0)) - (float64(x) / float64(((x * x) + 0.28))))
	}
	if x < (0 - 1.0) {
		return ((float64((0 - PI)) / float64(2.0)) - (float64(x) / float64(((x * x) + 0.28))))
	}
	return (float64(x) / float64((1.0 + ((0.28 * x) * x))))
}

func atan2Approx(y float64, x float64) float64 {
	if x > 0.0 {
		var r float64 = atanApprox((float64(y) / float64(x)))
		_ = r
		_ = r
		return r
	}
	if x < 0.0 {
		if y >= 0.0 {
			return (atanApprox((float64(y) / float64(x))) + PI)
		}
		return (atanApprox((float64(y) / float64(x))) - PI)
	}
	if y > 0.0 {
		return (float64(PI) / float64(2.0))
	}
	if y < 0.0 {
		return (float64((0 - PI)) / float64(2.0))
	}
	return 0.0
}

func deg(rad float64) float64 {
	return (float64((rad * 180.0)) / float64(PI))
}

var GAUSSIAN_KERNEL [][]float64

var SOBEL_GX [][]float64

var SOBEL_GY [][]float64

func zero_matrix(h int, w int) [][]float64 {
	var out [][]float64 = [][]float64{}
	_ = out
	var i int = 0
	_ = i
	for i < h {
		var row []float64 = []float64{}
		_ = row
		var j int = 0
		_ = j
		for j < w {
			row = append(row, 0.0)
			j = (j + 1)
		}
		out = append(out, row)
		i = (i + 1)
	}
	return out
}

func convolve(img [][]float64, kernel [][]float64) [][]float64 {
	var h int = len(img)
	_ = h
	var w int = len(_index(img, 0))
	_ = w
	var k int = len(kernel)
	_ = k
	var pad int = (k / 2)
	_ = pad
	var out [][]float64 = zero_matrix(h, w)
	_ = out
	var y int = pad
	_ = y
	for y < (h - pad) {
		var x int = pad
		_ = x
		for x < (w - pad) {
			var sum float64 = 0.0
			_ = sum
			var ky int = 0
			_ = ky
			for ky < k {
				var kx int = 0
				_ = kx
				for kx < k {
					var pixel float64 = _index(_index(img, ((y-pad)+ky)), ((x - pad) + kx))
					_ = pixel
					var weight float64 = _index(_index(kernel, ky), kx)
					_ = weight
					sum = (sum + (pixel * weight))
					kx = (kx + 1)
				}
				ky = (ky + 1)
			}
			_setIndex(_index(out, y), x, sum)
			x = (x + 1)
		}
		y = (y + 1)
	}
	return out
}

func gaussian_blur(img [][]float64) [][]float64 {
	return convolve(func(v any) [][]float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]float64{}
			}
			out := make([][]float64, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []float64 {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]float64); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []float64{}
						}
						out := make([]float64, len(arr))
						for i, x := range arr {
							out[i] = x.(float64)
						}
						return out
					}
					return v.([]float64)
				}(x)
			}
			return out
		}
		return v.([][]float64)
	}(img), func(v any) [][]float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]float64{}
			}
			out := make([][]float64, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []float64 {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]float64); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []float64{}
						}
						out := make([]float64, len(arr))
						for i, x := range arr {
							out[i] = x.(float64)
						}
						return out
					}
					return v.([]float64)
				}(x)
			}
			return out
		}
		return v.([][]float64)
	}(GAUSSIAN_KERNEL))
}

func sobel_filter(img [][]float64) map[string][][]float64 {
	var gx [][]float64 = convolve(func(v any) [][]float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]float64{}
			}
			out := make([][]float64, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []float64 {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]float64); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []float64{}
						}
						out := make([]float64, len(arr))
						for i, x := range arr {
							out[i] = x.(float64)
						}
						return out
					}
					return v.([]float64)
				}(x)
			}
			return out
		}
		return v.([][]float64)
	}(img), func(v any) [][]float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]float64{}
			}
			out := make([][]float64, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []float64 {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]float64); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []float64{}
						}
						out := make([]float64, len(arr))
						for i, x := range arr {
							out[i] = x.(float64)
						}
						return out
					}
					return v.([]float64)
				}(x)
			}
			return out
		}
		return v.([][]float64)
	}(SOBEL_GX))
	_ = gx
	var gy [][]float64 = convolve(func(v any) [][]float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]float64{}
			}
			out := make([][]float64, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []float64 {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]float64); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []float64{}
						}
						out := make([]float64, len(arr))
						for i, x := range arr {
							out[i] = x.(float64)
						}
						return out
					}
					return v.([]float64)
				}(x)
			}
			return out
		}
		return v.([][]float64)
	}(img), func(v any) [][]float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]float64{}
			}
			out := make([][]float64, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []float64 {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]float64); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []float64{}
						}
						out := make([]float64, len(arr))
						for i, x := range arr {
							out[i] = x.(float64)
						}
						return out
					}
					return v.([]float64)
				}(x)
			}
			return out
		}
		return v.([][]float64)
	}(SOBEL_GY))
	_ = gy
	var h int = len(img)
	_ = h
	var w int = len(_index(img, 0))
	_ = w
	var grad [][]float64 = zero_matrix(h, w)
	_ = grad
	var dir [][]float64 = zero_matrix(h, w)
	_ = dir
	var i int = 0
	_ = i
	for i < h {
		var j int = 0
		_ = j
		for j < w {
			var gxx float64 = _index(_index(gx, i), j)
			_ = gxx
			var gyy float64 = _index(_index(gy, i), j)
			_ = gyy
			_setIndex(_index(grad, i), j, sqrtApprox(((gxx * gxx) + (gyy * gyy))))
			_setIndex(_index(dir, i), j, (deg(atan2Approx(gyy, gxx)) + 180.0))
			j = (j + 1)
		}
		i = (i + 1)
	}
	return map[string][][]float64{"grad": grad, "dir": dir}
}

func suppress_non_maximum(h int, w int, direction [][]float64, grad [][]float64) [][]float64 {
	var dest [][]float64 = zero_matrix(h, w)
	_ = dest
	var r int = 1
	_ = r
	for r < (h - 1) {
		var c int = 1
		_ = c
		for c < (w - 1) {
			var angle float64 = _index(_index(direction, r), c)
			_ = angle
			var q float64 = 0.0
			_ = q
			var p float64 = 0.0
			_ = p
			if (((angle >= 0.0) && (angle < 22.5)) || ((angle >= 157.5) && (angle <= 180.0))) || (angle >= 337.5) {
				q = _index(_index(grad, r), (c + 1))
				p = _index(_index(grad, r), (c - 1))
			} else {
				if ((angle >= 22.5) && (angle < 67.5)) || ((angle >= 202.5) && (angle < 247.5)) {
					q = _index(_index(grad, (r+1)), (c - 1))
					p = _index(_index(grad, (r-1)), (c + 1))
				} else {
					if ((angle >= 67.5) && (angle < 112.5)) || ((angle >= 247.5) && (angle < 292.5)) {
						q = _index(_index(grad, (r+1)), c)
						p = _index(_index(grad, (r-1)), c)
					} else {
						q = _index(_index(grad, (r-1)), (c - 1))
						p = _index(_index(grad, (r+1)), (c + 1))
					}
				}
			}
			if (_index(_index(grad, r), c) >= q) && (_index(_index(grad, r), c) >= p) {
				_setIndex(_index(dest, r), c, _index(_index(grad, r), c))
			}
			c = (c + 1)
		}
		r = (r + 1)
	}
	return dest
}

func double_threshold(h int, w int, img [][]float64, low float64, high float64, weak float64, strong float64) {
	var r int = 0
	_ = r
	for r < h {
		var c int = 0
		_ = c
		for c < w {
			var v float64 = _index(_index(img, r), c)
			_ = v
			if v >= high {
				_setIndex(_index(img, r), c, strong)
			} else {
				if v < low {
					_setIndex(_index(img, r), c, 0.0)
				} else {
					_setIndex(_index(img, r), c, weak)
				}
			}
			c = (c + 1)
		}
		r = (r + 1)
	}
}

func track_edge(h int, w int, img [][]float64, weak float64, strong float64) {
	var r int = 1
	_ = r
	for r < (h - 1) {
		var c int = 1
		_ = c
		for c < (w - 1) {
			if _index(_index(img, r), c) == weak {
				if (((((((_index(_index(img, (r+1)), c) == strong) || (_index(_index(img, (r-1)), c) == strong)) || (_index(_index(img, r), (c+1)) == strong)) || (_index(_index(img, r), (c-1)) == strong)) || (_index(_index(img, (r-1)), (c-1)) == strong)) || (_index(_index(img, (r-1)), (c+1)) == strong)) || (_index(_index(img, (r+1)), (c-1)) == strong)) || (_index(_index(img, (r+1)), (c+1)) == strong) {
					_setIndex(_index(img, r), c, strong)
				} else {
					_setIndex(_index(img, r), c, 0.0)
				}
			}
			c = (c + 1)
		}
		r = (r + 1)
	}
}

func canny(image [][]float64, low float64, high float64, weak float64, strong float64) [][]float64 {
	var blurred [][]float64 = gaussian_blur(func(v any) [][]float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]float64{}
			}
			out := make([][]float64, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []float64 {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]float64); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []float64{}
						}
						out := make([]float64, len(arr))
						for i, x := range arr {
							out[i] = x.(float64)
						}
						return out
					}
					return v.([]float64)
				}(x)
			}
			return out
		}
		return v.([][]float64)
	}(image))
	_ = blurred
	var sob map[string][][]float64 = sobel_filter(func(v any) [][]float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]float64{}
			}
			out := make([][]float64, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []float64 {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]float64); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []float64{}
						}
						out := make([]float64, len(arr))
						for i, x := range arr {
							out[i] = x.(float64)
						}
						return out
					}
					return v.([]float64)
				}(x)
			}
			return out
		}
		return v.([][]float64)
	}(blurred))
	_ = sob
	var grad [][]float64 = sob["grad"]
	_ = grad
	var direction [][]float64 = sob["dir"]
	_ = direction
	var h int = len(image)
	_ = h
	var w int = len(_index(image, 0))
	_ = w
	var suppressed [][]float64 = suppress_non_maximum(h, w, func(v any) [][]float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]float64{}
			}
			out := make([][]float64, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []float64 {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]float64); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []float64{}
						}
						out := make([]float64, len(arr))
						for i, x := range arr {
							out[i] = x.(float64)
						}
						return out
					}
					return v.([]float64)
				}(x)
			}
			return out
		}
		return v.([][]float64)
	}(direction), func(v any) [][]float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]float64{}
			}
			out := make([][]float64, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []float64 {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]float64); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []float64{}
						}
						out := make([]float64, len(arr))
						for i, x := range arr {
							out[i] = x.(float64)
						}
						return out
					}
					return v.([]float64)
				}(x)
			}
			return out
		}
		return v.([][]float64)
	}(grad))
	_ = suppressed
	double_threshold(h, w, func(v any) [][]float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]float64{}
			}
			out := make([][]float64, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []float64 {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]float64); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []float64{}
						}
						out := make([]float64, len(arr))
						for i, x := range arr {
							out[i] = x.(float64)
						}
						return out
					}
					return v.([]float64)
				}(x)
			}
			return out
		}
		return v.([][]float64)
	}(suppressed), low, high, weak, strong)
	track_edge(h, w, func(v any) [][]float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]float64{}
			}
			out := make([][]float64, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []float64 {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]float64); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []float64{}
						}
						out := make([]float64, len(arr))
						for i, x := range arr {
							out[i] = x.(float64)
						}
						return out
					}
					return v.([]float64)
				}(x)
			}
			return out
		}
		return v.([][]float64)
	}(suppressed), weak, strong)
	return suppressed
}

func print_image(img [][]float64) {
	var r int = 0
	_ = r
	for r < len(img) {
		var c int = 0
		_ = c
		var line string = ""
		_ = line
		for c < len(_index(img, r)) {
			line = ((line + fmt.Sprint(int(_index(_index(img, r), c)))) + " ")
			c = (c + 1)
		}
		fmt.Println(line)
		r = (r + 1)
	}
}

var image [][]float64

var edges [][]float64

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		PI = 3.141592653589793
		GAUSSIAN_KERNEL = [][]float64{[]float64{0.0625, 0.125, 0.0625}, []float64{0.125, 0.25, 0.125}, []float64{0.0625, 0.125, 0.0625}}
		SOBEL_GX = [][]float64{[]float64{(0 - 1.0), 0.0, 1.0}, []float64{(0 - 2.0), 0.0, 2.0}, []float64{(0 - 1.0), 0.0, 1.0}}
		SOBEL_GY = [][]float64{[]float64{1.0, 2.0, 1.0}, []float64{0.0, 0.0, 0.0}, []float64{(0 - 1.0), (0 - 2.0), (0 - 1.0)}}
		image = [][]float64{[]float64{0.0, 0.0, 0.0, 0.0, 0.0}, []float64{0.0, 255.0, 255.0, 255.0, 0.0}, []float64{0.0, 255.0, 255.0, 255.0, 0.0}, []float64{0.0, 255.0, 255.0, 255.0, 0.0}, []float64{0.0, 0.0, 0.0, 0.0, 0.0}}
		edges = canny(func(v any) [][]float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]float64{}
				}
				out := make([][]float64, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []float64 {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]float64); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []float64{}
							}
							out := make([]float64, len(arr))
							for i, x := range arr {
								out[i] = x.(float64)
							}
							return out
						}
						return v.([]float64)
					}(x)
				}
				return out
			}
			return v.([][]float64)
		}(image), 20.0, 40.0, 128.0, 255.0)
		print_image(func(v any) [][]float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]float64{}
				}
				out := make([][]float64, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []float64 {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]float64); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []float64{}
							}
							out := make([]float64, len(arr))
							for i, x := range arr {
								out[i] = x.(float64)
							}
							return out
						}
						return v.([]float64)
					}(x)
				}
				return out
			}
			return v.([][]float64)
		}(edges))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
