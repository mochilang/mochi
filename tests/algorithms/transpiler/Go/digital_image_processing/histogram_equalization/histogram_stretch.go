//go:build ignore

// Generated by Mochi v0.10.61 on 2025-08-08 17:15:58 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"strings"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	s[idx] = v
}

func _toFloat(v any) float64 {
	switch t := v.(type) {
	case int:
		return float64(t)
	case int64:
		return float64(t)
	case float64:
		return t
	default:
		return 0
	}
}

func make_list(n int, value int) []int {
	var res []int = []int{}
	_ = res
	var i int = 0
	_ = i
	for i < n {
		res = append(res, value)
		i = (i + 1)
	}
	return res
}

func histogram_stretch(image [][]int) [][]int {
	height := len(image)
	_ = height
	width := len(_index(image, 0))
	_ = width
	var hist []int = make_list(256, 0)
	_ = hist
	var i int = 0
	_ = i
	for i < height {
		var j int = 0
		_ = j
		for j < width {
			var val int = _index(_index(image, i), j)
			_ = val
			_setIndex(hist, val, (int(_index(hist, val)) + 1))
			j = (j + 1)
		}
		i = (i + 1)
	}
	var mapping []int = make_list(256, 0)
	_ = mapping
	var cumulative int = 0
	_ = cumulative
	total := (_toFloat(height) * _toFloat(width))
	_ = total
	var h int = 0
	_ = h
	for h < 256 {
		cumulative = (cumulative + int(_index(hist, h)))
		_setIndex(mapping, h, ((255 * cumulative) / total))
		h = (h + 1)
	}
	i = 0
	for i < height {
		var j int = 0
		_ = j
		for j < width {
			var val int = _index(_index(image, i), j)
			_ = val
			_setIndex(_index(image, i), j, _index(mapping, val))
			j = (j + 1)
		}
		i = (i + 1)
	}
	return image
}

func print_image(image [][]int) {
	var i int = 0
	_ = i
	for i < len(image) {
		fmt.Println(func() string {
			b, _ := json.Marshal(_index(image, i))
			s := string(b)
			s = strings.ReplaceAll(s, ":", ": ")
			s = strings.ReplaceAll(s, ",", ", ")
			s = strings.ReplaceAll(s, "}, {", "},{")
			return s
		}())
		i = (i + 1)
	}
}

var img [][]int

var result [][]int

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		img = [][]int{[]int{func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(52), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(55), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(61)}, []int{func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(59), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(79), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(61)}, []int{func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(85), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(76), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(62)}}
		result = histogram_stretch(func(v any) [][]int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]int{}
				}
				out := make([][]int, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []int {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]int); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []int{}
							}
							out := make([]int, len(arr))
							for i, x := range arr {
								out[i] = x.(int)
							}
							return out
						}
						return v.([]int)
					}(x)
				}
				return out
			}
			return v.([][]int)
		}(img))
		print_image(func(v any) [][]int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]int{}
				}
				out := make([][]int, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []int {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]int); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []int{}
							}
							out := make([]int, len(arr))
							for i, x := range arr {
								out[i] = x.(int)
							}
							return out
						}
						return v.([]int)
					}(x)
				}
				return out
			}
			return v.([][]int)
		}(result))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
