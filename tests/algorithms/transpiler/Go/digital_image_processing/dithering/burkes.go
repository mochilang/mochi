//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-14 22:36:50 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	s[idx] = v
}

func get_greyscale(blue int, green int, red int) int {
	var b float64 = float64(blue)
	_ = b
	_ = b
	var g float64 = float64(green)
	_ = g
	_ = g
	var r float64 = float64(red)
	_ = r
	_ = r
	return int((((0.114 * b) + (0.587 * g)) + (0.299 * r)))
}

func zeros(h int, w int) [][]int {
	var table [][]int = [][]int{}
	_ = table
	var i int = 0
	_ = i
	for i < h {
		var row []int = []int{}
		_ = row
		var j int = 0
		_ = j
		for j < w {
			row = append(row, 0)
			j = (j + 1)
		}
		table = append(table, row)
		i = (i + 1)
	}
	return table
}

func burkes_dither(img [][][]int, threshold int) [][]int {
	var height int = len(img)
	_ = height
	var width int = len(_index(img, 0))
	_ = width
	var error_table [][]int = zeros((height + 1), (width + 4))
	_ = error_table
	var output [][]int = [][]int{}
	_ = output
	var y int = 0
	_ = y
	for y < height {
		var row []int = []int{}
		_ = row
		var x int = 0
		_ = x
		for x < width {
			var px []int = _index(_index(img, y), x)
			_ = px
			var grey int = get_greyscale(_index(px, 0), _index(px, 1), _index(px, 2))
			_ = grey
			var total int = (grey + int(_index(_index(error_table, y), (x+2))))
			_ = total
			var new_val int = 0
			_ = new_val
			var current_error int = 0
			_ = current_error
			if threshold > total {
				new_val = 0
				current_error = total
			} else {
				new_val = 255
				current_error = (total - 255)
			}
			row = append(row, new_val)
			_setIndex(_index(error_table, y), (x + 3), (int(_index(_index(error_table, y), (x+3))) + ((8 * current_error) / 32)))
			_setIndex(_index(error_table, y), (x + 4), (int(_index(_index(error_table, y), (x+4))) + ((4 * current_error) / 32)))
			_setIndex(_index(error_table, (y+1)), (x + 2), (int(_index(_index(error_table, (y+1)), (x+2))) + ((8 * current_error) / 32)))
			_setIndex(_index(error_table, (y+1)), (x + 3), (int(_index(_index(error_table, (y+1)), (x+3))) + ((4 * current_error) / 32)))
			_setIndex(_index(error_table, (y+1)), (x + 4), (int(_index(_index(error_table, (y+1)), (x+4))) + ((2 * current_error) / 32)))
			_setIndex(_index(error_table, (y+1)), (x + 1), (int(_index(_index(error_table, (y+1)), (x+1))) + ((4 * current_error) / 32)))
			_setIndex(_index(error_table, (y+1)), x, (int(_index(_index(error_table, (y+1)), x)) + ((2 * current_error) / 32)))
			x = (x + 1)
		}
		output = append(output, row)
		y = (y + 1)
	}
	return output
}

func mochiMain() {
	var img [][][]int = [][][]int{[][]int{[]int{0, 0, 0}, []int{64, 64, 64}, []int{128, 128, 128}, []int{192, 192, 192}}, [][]int{[]int{255, 255, 255}, []int{200, 200, 200}, []int{150, 150, 150}, []int{100, 100, 100}}, [][]int{[]int{30, 144, 255}, []int{255, 0, 0}, []int{0, 255, 0}, []int{0, 0, 255}}, [][]int{[]int{50, 100, 150}, []int{80, 160, 240}, []int{70, 140, 210}, []int{60, 120, 180}}}
	_ = img
	var result [][]int = burkes_dither(func(v any) [][][]int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][][]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][][]int{}
			}
			out := make([][][]int, len(arr))
			for i, x := range arr {
				out[i] = func(v any) [][]int {
					if v == nil {
						return nil
					}
					if vv, ok := v.([][]int); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return [][]int{}
						}
						out := make([][]int, len(arr))
						for i, x := range arr {
							out[i] = x.([]int)
						}
						return out
					}
					return v.([][]int)
				}(x)
			}
			return out
		}
		return v.([][][]int)
	}(img), 128)
	_ = result
	var y int = 0
	_ = y
	for y < len(result) {
		var line string = ""
		_ = line
		var x int = 0
		_ = x
		for x < len(_index(result, y)) {
			line = (line + fmt.Sprint(_index(_index(result, y), x)))
			if x < (len(_index(result, y)) - 1) {
				line = (line + " ")
			}
			x = (x + 1)
		}
		fmt.Println(line)
		y = (y + 1)
	}
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
