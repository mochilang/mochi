//go:build ignore

// Generated by Mochi v0.10.61 on 2025-08-08 16:03:55 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"reflect"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	s[idx] = v
}

func _len(v any) int {
	switch t := v.(type) {
	case string:
		return len([]rune(t))
	case []any:
		return len(t)
	case []string:
		return len(t)
	case []int:
		return len(t)
	case []float64:
		return len(t)
	case map[string]any:
		return len(t)
	case map[int]any:
		return len(t)
	case map[any]any:
		return len(t)
	default:
		return 0
	}
}

func get_greyscale(blue int, green int, red int) int {
	var b float64 = float64(blue)
	_ = b
	_ = b
	var g float64 = float64(green)
	_ = g
	_ = g
	var r float64 = float64(red)
	_ = r
	_ = r
	return func() int { n, _ := strconv.Atoi(fmt.Sprint((((0.114 * b) + (0.587 * g)) + (0.299 * r)))); return n }()
}

func zeros(h int, w int) [][]int {
	var table [][]int = [][]int{}
	_ = table
	var i int = 0
	_ = i
	for i < h {
		var row []int = []int{}
		_ = row
		var j int = 0
		_ = j
		for j < w {
			row = append(row, 0)
			j = (j + 1)
		}
		table = append(table, row)
		i = (i + 1)
	}
	return table
}

func burkes_dither(img [][][]int, threshold int) [][]int {
	height := len(img)
	_ = height
	width := len(_index(img, 0))
	_ = width
	var error_table [][]int = zeros(int((height + 1)), int((width + 4)))
	_ = error_table
	var output [][]int = [][]int{}
	_ = output
	var y int = 0
	_ = y
	for y < height {
		var row []int = []int{}
		_ = row
		var x int = 0
		_ = x
		for x < width {
			var px []int = _index(_index(img, y), x)
			_ = px
			grey := get_greyscale(_index(px, 0), _index(px, 1), _index(px, 2))
			_ = grey
			total := (grey + int(_index(_index(error_table, y), (x+2))))
			_ = total
			var new_val int = 0
			_ = new_val
			var current_error int = 0
			_ = current_error
			if threshold > total {
				new_val = 0
				current_error = total
			} else {
				new_val = 255
				current_error = (total - 255)
			}
			row = append(row, new_val)
			_setIndex(_index(error_table, y), (x + 3), (int(_index(_index(error_table, y), (x+3))) + ((8 * current_error) / 32)))
			_setIndex(_index(error_table, y), (x + 4), (int(_index(_index(error_table, y), (x+4))) + ((4 * current_error) / 32)))
			_setIndex(_index(error_table, (y+1)), (x + 2), (int(_index(_index(error_table, (y+1)), (x+2))) + ((8 * current_error) / 32)))
			_setIndex(_index(error_table, (y+1)), (x + 3), (int(_index(_index(error_table, (y+1)), (x+3))) + ((4 * current_error) / 32)))
			_setIndex(_index(error_table, (y+1)), (x + 4), (int(_index(_index(error_table, (y+1)), (x+4))) + ((2 * current_error) / 32)))
			_setIndex(_index(error_table, (y+1)), (x + 1), (int(_index(_index(error_table, (y+1)), (x+1))) + ((4 * current_error) / 32)))
			_setIndex(_index(error_table, (y+1)), x, (int(_index(_index(error_table, (y+1)), x)) + ((2 * current_error) / 32)))
			x = (x + 1)
		}
		output = append(output, row)
		y = (y + 1)
	}
	return output
}

func mochiMain() {
	var img [][][]int = [][][]int{[][]int{[]int{func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(0), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(0), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(0)}, []int{func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(64), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(64), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(64)}, []int{func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(128), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(128), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(128)}, []int{func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(192), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(192), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(192)}}, [][]int{[]int{func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(255), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(255), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(255)}, []int{func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(200), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(200), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(200)}, []int{func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(150), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(150), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(150)}, []int{func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(100), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(100), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(100)}}, [][]int{[]int{func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(30), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(144), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(255)}, []int{func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(255), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(0), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(0)}, []int{func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(0), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(255), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(0)}, []int{func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(0), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(0), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(255)}}, [][]int{[]int{func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(50), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(100), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(150)}, []int{func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(80), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(160), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(240)}, []int{func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(70), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(140), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(210)}, []int{func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(60), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(120), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(180)}}}
	_ = img
	result := burkes_dither(func(v any) [][][]int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][][]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][][]int{}
			}
			out := make([][][]int, len(arr))
			for i, x := range arr {
				out[i] = func(v any) [][]int {
					if v == nil {
						return nil
					}
					if vv, ok := v.([][]int); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return [][]int{}
						}
						out := make([][]int, len(arr))
						for i, x := range arr {
							out[i] = func(v any) []int {
								if v == nil {
									return nil
								}
								if vv, ok := v.([]int); ok {
									return vv
								}
								if arr, ok := v.([]any); ok {
									if len(arr) == 0 {
										return []int{}
									}
									out := make([]int, len(arr))
									for i, x := range arr {
										out[i] = x.(int)
									}
									return out
								}
								return v.([]int)
							}(x)
						}
						return out
					}
					return v.([][]int)
				}(x)
			}
			return out
		}
		return v.([][][]int)
	}(img), 128)
	_ = result
	var y int = 0
	_ = y
	for y < _len(result) {
		var line string = ""
		_ = line
		var x int = 0
		_ = x
		for x < _len(_index(func(v any) []any {
			if v == nil {
				return nil
			}
			if arr, ok := v.([]any); ok {
				return arr
			}
			rv := reflect.ValueOf(v)
			if rv.Kind() != reflect.Slice {
				return v.([]any)
			}
			n := rv.Len()
			out := make([]any, n)
			for i := 0; i < n; i++ {
				out[i] = rv.Index(i).Interface()
			}
			return out
		}(result), y)) {
			line = (line + fmt.Sprint(_index(func(v any) []any {
				if v == nil {
					return nil
				}
				if arr, ok := v.([]any); ok {
					return arr
				}
				rv := reflect.ValueOf(v)
				if rv.Kind() != reflect.Slice {
					return v.([]any)
				}
				n := rv.Len()
				out := make([]any, n)
				for i := 0; i < n; i++ {
					out[i] = rv.Index(i).Interface()
				}
				return out
			}(_index(func(v any) []any {
				if v == nil {
					return nil
				}
				if arr, ok := v.([]any); ok {
					return arr
				}
				rv := reflect.ValueOf(v)
				if rv.Kind() != reflect.Slice {
					return v.([]any)
				}
				n := rv.Len()
				out := make([]any, n)
				for i := 0; i < n; i++ {
					out[i] = rv.Index(i).Interface()
				}
				return out
			}(result), y)), x)))
			if x < (_len(_index(func(v any) []any {
				if v == nil {
					return nil
				}
				if arr, ok := v.([]any); ok {
					return arr
				}
				rv := reflect.ValueOf(v)
				if rv.Kind() != reflect.Slice {
					return v.([]any)
				}
				n := rv.Len()
				out := make([]any, n)
				for i := 0; i < n; i++ {
					out[i] = rv.Index(i).Interface()
				}
				return out
			}(result), y)) - 1) {
				line = (line + " ")
			}
			x = (x + 1)
		}
		fmt.Println(line)
		y = (y + 1)
	}
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
