//go:build ignore

// Generated by Mochi v0.10.64 on 2025-08-12 09:20:13 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _mod(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

type Matrix struct {
	Data [][]float64 `json:"data"`
	Rows int         `json:"rows"`
	Cols int         `json:"cols"`
}

func make_matrix(values [][]float64) Matrix {
	var r int = len(values)
	_ = r
	if r == 0 {
		return Matrix{
			Data: [][]float64{},
			Rows: 0,
			Cols: 0,
		}
	}
	var c int = len(_index(values, 0))
	_ = c
	var i int = 0
	_ = i
	for i < r {
		if len(_index(values, i)) != c {
			return Matrix{
				Data: [][]float64{},
				Rows: 0,
				Cols: 0,
			}
		}
		i = (i + 1)
	}
	return Matrix{
		Data: values,
		Rows: r,
		Cols: c,
	}
}

func matrix_columns(m Matrix) [][]float64 {
	var cols [][]float64 = [][]float64{}
	_ = cols
	var j int = 0
	_ = j
	for j < m.Cols {
		var col []float64 = []float64{}
		_ = col
		var i int = 0
		_ = i
		for i < m.Rows {
			col = append(col, _index(_index(m.Data, i), j))
			i = (i + 1)
		}
		cols = append(cols, col)
		j = (j + 1)
	}
	return cols
}

func matrix_identity(m Matrix) Matrix {
	var vals [][]float64 = [][]float64{}
	_ = vals
	var i int = 0
	_ = i
	for i < m.Rows {
		var row []float64 = []float64{}
		_ = row
		var j int = 0
		_ = j
		for j < m.Cols {
			var v float64 = func() float64 {
				if i == j {
					return 1.0
				} else {
					return 0.0
				}
			}()
			_ = v
			row = append(row, v)
			j = (j + 1)
		}
		vals = append(vals, row)
		i = (i + 1)
	}
	return Matrix{
		Data: vals,
		Rows: m.Rows,
		Cols: m.Cols,
	}
}

func matrix_minor(m Matrix, r int, c int) float64 {
	var vals [][]float64 = [][]float64{}
	_ = vals
	var i int = 0
	_ = i
	for i < m.Rows {
		if i != r {
			var row []float64 = []float64{}
			_ = row
			var j int = 0
			_ = j
			for j < m.Cols {
				if j != c {
					row = append(row, _index(_index(m.Data, i), j))
				}
				j = (j + 1)
			}
			vals = append(vals, row)
		}
		i = (i + 1)
	}
	var sub Matrix = Matrix{
		Data: vals,
		Rows: (m.Rows - 1),
		Cols: (m.Cols - 1),
	}
	_ = sub
	_ = sub
	return matrix_determinant(sub)
}

func matrix_cofactor(m Matrix, r int, c int) float64 {
	var minor float64 = matrix_minor(m, r, c)
	_ = minor
	_ = minor
	if _mod((r+c), 2) == 0 {
		return minor
	}
	return ((0 - 1.0) * minor)
}

func matrix_minors(m Matrix) Matrix {
	var vals [][]float64 = [][]float64{}
	_ = vals
	var i int = 0
	_ = i
	for i < m.Rows {
		var row []float64 = []float64{}
		_ = row
		var j int = 0
		_ = j
		for j < m.Cols {
			row = append(row, matrix_minor(m, i, j))
			j = (j + 1)
		}
		vals = append(vals, row)
		i = (i + 1)
	}
	return Matrix{
		Data: vals,
		Rows: m.Rows,
		Cols: m.Cols,
	}
}

func matrix_cofactors(m Matrix) Matrix {
	var vals [][]float64 = [][]float64{}
	_ = vals
	var i int = 0
	_ = i
	for i < m.Rows {
		var row []float64 = []float64{}
		_ = row
		var j int = 0
		_ = j
		for j < m.Cols {
			row = append(row, matrix_cofactor(m, i, j))
			j = (j + 1)
		}
		vals = append(vals, row)
		i = (i + 1)
	}
	return Matrix{
		Data: vals,
		Rows: m.Rows,
		Cols: m.Cols,
	}
}

func matrix_determinant(m Matrix) float64 {
	if m.Rows != m.Cols {
		return 0.0
	}
	if m.Rows == 0 {
		return 0.0
	}
	if m.Rows == 1 {
		return _index(_index(m.Data, 0), 0)
	}
	if m.Rows == 2 {
		return ((_index(_index(m.Data, 0), 0) * _index(_index(m.Data, 1), 1)) - (_index(_index(m.Data, 0), 1) * _index(_index(m.Data, 1), 0)))
	}
	var sum float64 = 0.0
	_ = sum
	var j int = 0
	_ = j
	for j < m.Cols {
		sum = (sum + (_index(_index(m.Data, 0), j) * matrix_cofactor(m, 0, j)))
		j = (j + 1)
	}
	return sum
}

func matrix_is_invertible(m Matrix) bool {
	return (matrix_determinant(m) != 0.0)
}

func matrix_adjugate(m Matrix) Matrix {
	var cof Matrix = matrix_cofactors(m)
	_ = cof
	var vals [][]float64 = [][]float64{}
	_ = vals
	var i int = 0
	_ = i
	for i < m.Rows {
		var row []float64 = []float64{}
		_ = row
		var j int = 0
		_ = j
		for j < m.Cols {
			row = append(row, _index(_index(cof.Data, j), i))
			j = (j + 1)
		}
		vals = append(vals, row)
		i = (i + 1)
	}
	return Matrix{
		Data: vals,
		Rows: m.Rows,
		Cols: m.Cols,
	}
}

func matrix_inverse(m Matrix) Matrix {
	var det float64 = matrix_determinant(m)
	_ = det
	if det == 0.0 {
		return Matrix{
			Data: [][]float64{},
			Rows: 0,
			Cols: 0,
		}
	}
	var adj Matrix = matrix_adjugate(m)
	_ = adj
	_ = adj
	return matrix_mul_scalar(adj, (float64(1.0) / float64(det)))
}

func matrix_add_row(m Matrix, row []float64) Matrix {
	var newData [][]float64 = m.Data
	_ = newData
	newData = append(newData, row)
	return Matrix{
		Data: newData,
		Rows: (m.Rows + 1),
		Cols: m.Cols,
	}
}

func matrix_add_column(m Matrix, col []float64) Matrix {
	var newData [][]float64 = [][]float64{}
	_ = newData
	var i int = 0
	_ = i
	for i < m.Rows {
		newData = append(newData, append(_index(m.Data, i), _index(col, i)))
		i = (i + 1)
	}
	return Matrix{
		Data: newData,
		Rows: m.Rows,
		Cols: (m.Cols + 1),
	}
}

func matrix_mul_scalar(m Matrix, s float64) Matrix {
	var vals [][]float64 = [][]float64{}
	_ = vals
	var i int = 0
	_ = i
	for i < m.Rows {
		var row []float64 = []float64{}
		_ = row
		var j int = 0
		_ = j
		for j < m.Cols {
			row = append(row, (_index(_index(m.Data, i), j) * s))
			j = (j + 1)
		}
		vals = append(vals, row)
		i = (i + 1)
	}
	return Matrix{
		Data: vals,
		Rows: m.Rows,
		Cols: m.Cols,
	}
}

func matrix_neg(m Matrix) Matrix {
	return matrix_mul_scalar(m, (0 - 1.0))
}

func matrix_add(a Matrix, b Matrix) Matrix {
	if (a.Rows != b.Rows) || (a.Cols != b.Cols) {
		return Matrix{
			Data: [][]float64{},
			Rows: 0,
			Cols: 0,
		}
	}
	var vals [][]float64 = [][]float64{}
	_ = vals
	var i int = 0
	_ = i
	for i < a.Rows {
		var row []float64 = []float64{}
		_ = row
		var j int = 0
		_ = j
		for j < a.Cols {
			row = append(row, (_index(_index(a.Data, i), j) + _index(_index(b.Data, i), j)))
			j = (j + 1)
		}
		vals = append(vals, row)
		i = (i + 1)
	}
	return Matrix{
		Data: vals,
		Rows: a.Rows,
		Cols: a.Cols,
	}
}

func matrix_sub(a Matrix, b Matrix) Matrix {
	if (a.Rows != b.Rows) || (a.Cols != b.Cols) {
		return Matrix{
			Data: [][]float64{},
			Rows: 0,
			Cols: 0,
		}
	}
	var vals [][]float64 = [][]float64{}
	_ = vals
	var i int = 0
	_ = i
	for i < a.Rows {
		var row []float64 = []float64{}
		_ = row
		var j int = 0
		_ = j
		for j < a.Cols {
			row = append(row, (_index(_index(a.Data, i), j) - _index(_index(b.Data, i), j)))
			j = (j + 1)
		}
		vals = append(vals, row)
		i = (i + 1)
	}
	return Matrix{
		Data: vals,
		Rows: a.Rows,
		Cols: a.Cols,
	}
}

func matrix_dot(row []float64, col []float64) float64 {
	var sum float64 = 0.0
	_ = sum
	var i int = 0
	_ = i
	for i < len(row) {
		sum = (sum + (_index(row, i) * _index(col, i)))
		i = (i + 1)
	}
	return sum
}

func matrix_mul(a Matrix, b Matrix) Matrix {
	if a.Cols != b.Rows {
		return Matrix{
			Data: [][]float64{},
			Rows: 0,
			Cols: 0,
		}
	}
	var bcols [][]float64 = matrix_columns(b)
	_ = bcols
	var vals [][]float64 = [][]float64{}
	_ = vals
	var i int = 0
	_ = i
	for i < a.Rows {
		var row []float64 = []float64{}
		_ = row
		var j int = 0
		_ = j
		for j < b.Cols {
			row = append(row, matrix_dot(func(v any) []float64 {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]float64); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []float64{}
					}
					out := make([]float64, len(arr))
					for i, x := range arr {
						out[i] = x.(float64)
					}
					return out
				}
				return v.([]float64)
			}(_index(a.Data, i)), func(v any) []float64 {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]float64); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []float64{}
					}
					out := make([]float64, len(arr))
					for i, x := range arr {
						out[i] = x.(float64)
					}
					return out
				}
				return v.([]float64)
			}(_index(bcols, j))))
			j = (j + 1)
		}
		vals = append(vals, row)
		i = (i + 1)
	}
	return Matrix{
		Data: vals,
		Rows: a.Rows,
		Cols: b.Cols,
	}
}

func matrix_pow(m Matrix, p int) Matrix {
	if p == 0 {
		return matrix_identity(m)
	}
	if p < 0 {
		if matrix_is_invertible(m) {
			return matrix_pow(matrix_inverse(m), (0 - p))
		}
		return Matrix{
			Data: [][]float64{},
			Rows: 0,
			Cols: 0,
		}
	}
	var result Matrix = m
	_ = result
	var i int = 1
	_ = i
	for i < p {
		result = matrix_mul(result, m)
		i = (i + 1)
	}
	return result
}

func matrix_to_string(m Matrix) string {
	if m.Rows == 0 {
		return "[]"
	}
	var s string = "["
	_ = s
	var i int = 0
	_ = i
	for i < m.Rows {
		s = (s + "[")
		var j int = 0
		_ = j
		for j < m.Cols {
			s = (s + fmt.Sprint(_index(_index(m.Data, i), j)))
			if j < (m.Cols - 1) {
				s = (s + " ")
			}
			j = (j + 1)
		}
		s = (s + "]")
		if i < (m.Rows - 1) {
			s = (s + "\n ")
		}
		i = (i + 1)
	}
	s = (s + "]")
	return s
}

func mochiMain() {
	var m Matrix = make_matrix(func(v any) [][]float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]float64{}
			}
			out := make([][]float64, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []float64 {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]float64); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []float64{}
						}
						out := make([]float64, len(arr))
						for i, x := range arr {
							out[i] = x.(float64)
						}
						return out
					}
					return v.([]float64)
				}(x)
			}
			return out
		}
		return v.([][]float64)
	}([][]float64{[]float64{1.0, 2.0, 3.0}, []float64{4.0, 5.0, 6.0}, []float64{7.0, 8.0, 9.0}}))
	_ = m
	fmt.Println(matrix_to_string(m))
	fmt.Println(fmt.Sprint(matrix_columns(m)))
	fmt.Println(((fmt.Sprint(m.Rows) + ",") + fmt.Sprint(m.Cols)))
	fmt.Println(fmt.Sprint(matrix_is_invertible(m)))
	fmt.Println(matrix_to_string(matrix_identity(m)))
	fmt.Println(fmt.Sprint(matrix_determinant(m)))
	fmt.Println(matrix_to_string(matrix_minors(m)))
	fmt.Println(matrix_to_string(matrix_cofactors(m)))
	fmt.Println(matrix_to_string(matrix_adjugate(m)))
	var m2 Matrix = matrix_mul_scalar(m, 3.0)
	_ = m2
	fmt.Println(matrix_to_string(m2))
	fmt.Println(matrix_to_string(matrix_add(m, m2)))
	fmt.Println(matrix_to_string(matrix_sub(m, m2)))
	fmt.Println(matrix_to_string(matrix_pow(m, 3)))
	var m3 Matrix = matrix_add_row(m, func(v any) []float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []float64{}
			}
			out := make([]float64, len(arr))
			for i, x := range arr {
				out[i] = x.(float64)
			}
			return out
		}
		return v.([]float64)
	}([]float64{10.0, 11.0, 12.0}))
	_ = m3
	fmt.Println(matrix_to_string(m3))
	var m4 Matrix = matrix_add_column(m2, func(v any) []float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []float64{}
			}
			out := make([]float64, len(arr))
			for i, x := range arr {
				out[i] = x.(float64)
			}
			return out
		}
		return v.([]float64)
	}([]float64{8.0, 16.0, 32.0}))
	_ = m4
	fmt.Println(matrix_to_string(matrix_mul(m3, m4)))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
