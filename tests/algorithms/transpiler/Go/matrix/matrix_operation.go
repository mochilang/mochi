//go:build ignore

// Generated by Mochi v0.10.67 on 2025-08-17 12:40:29 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

func _modi(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func add(matrices [][][]float64) [][]float64 {
	var rows int = len(_index(matrices, 0))
	_ = rows
	var cols int = len(_index(_index(matrices, 0), 0))
	_ = cols
	var r int = 0
	_ = r
	var result [][]float64 = [][]float64{}
	_ = result
	for r < rows {
		var row []float64 = []float64{}
		_ = row
		var c int = 0
		_ = c
		for c < cols {
			var sum float64 = 0.0
			_ = sum
			var m int = 0
			_ = m
			for m < len(matrices) {
				sum = (sum + _index(_index(_index(matrices, m), r), c))
				m = (m + 1)
			}
			row = append(row, sum)
			c = (c + 1)
		}
		result = append(result, row)
		r = (r + 1)
	}
	return result
}

func subtract(a [][]float64, b [][]float64) [][]float64 {
	var rows int = len(a)
	_ = rows
	var cols int = len(_index(a, 0))
	_ = cols
	var r int = 0
	_ = r
	var result [][]float64 = [][]float64{}
	_ = result
	for r < rows {
		var row []float64 = []float64{}
		_ = row
		var c int = 0
		_ = c
		for c < cols {
			row = append(row, (_index(_index(a, r), c) - _index(_index(b, r), c)))
			c = (c + 1)
		}
		result = append(result, row)
		r = (r + 1)
	}
	return result
}

func scalar_multiply(matrix [][]float64, n float64) [][]float64 {
	var result [][]float64 = [][]float64{}
	_ = result
	var i int = 0
	_ = i
	for i < len(matrix) {
		var row []float64 = []float64{}
		_ = row
		var j int = 0
		_ = j
		for j < len(_index(matrix, i)) {
			row = append(row, (_index(_index(matrix, i), j) * n))
			j = (j + 1)
		}
		result = append(result, row)
		i = (i + 1)
	}
	return result
}

func multiply(a [][]float64, b [][]float64) [][]float64 {
	var rowsA int = len(a)
	_ = rowsA
	var colsA int = len(_index(a, 0))
	_ = colsA
	var rowsB int = len(b)
	_ = rowsB
	_ = rowsB
	var colsB int = len(_index(b, 0))
	_ = colsB
	var result [][]float64 = [][]float64{}
	_ = result
	var i int = 0
	_ = i
	for i < rowsA {
		var row []float64 = []float64{}
		_ = row
		var j int = 0
		_ = j
		for j < colsB {
			var sum float64 = 0.0
			_ = sum
			var k int = 0
			_ = k
			for k < colsA {
				sum = (sum + (_index(_index(a, i), k) * _index(_index(b, k), j)))
				k = (k + 1)
			}
			row = append(row, sum)
			j = (j + 1)
		}
		result = append(result, row)
		i = (i + 1)
	}
	return result
}

func identity(n int) [][]float64 {
	var result [][]float64 = [][]float64{}
	_ = result
	var i int = 0
	_ = i
	for i < n {
		var row []float64 = []float64{}
		_ = row
		var j int = 0
		_ = j
		for j < n {
			if i == j {
				row = append(row, 1.0)
			} else {
				row = append(row, 0.0)
			}
			j = (j + 1)
		}
		result = append(result, row)
		i = (i + 1)
	}
	return result
}

func transpose(matrix [][]float64) [][]float64 {
	var rows int = len(matrix)
	_ = rows
	var cols int = len(_index(matrix, 0))
	_ = cols
	var result [][]float64 = [][]float64{}
	_ = result
	var c int = 0
	_ = c
	for c < cols {
		var row []float64 = []float64{}
		_ = row
		var r int = 0
		_ = r
		for r < rows {
			row = append(row, _index(_index(matrix, r), c))
			r = (r + 1)
		}
		result = append(result, row)
		c = (c + 1)
	}
	return result
}

func minor(matrix [][]float64, row int, column int) [][]float64 {
	var result [][]float64 = [][]float64{}
	_ = result
	var i int = 0
	_ = i
	for i < len(matrix) {
		if i != row {
			var new_row []float64 = []float64{}
			_ = new_row
			var j int = 0
			_ = j
			for j < len(_index(matrix, i)) {
				if j != column {
					new_row = append(new_row, _index(_index(matrix, i), j))
				}
				j = (j + 1)
			}
			result = append(result, new_row)
		}
		i = (i + 1)
	}
	return result
}

func determinant(matrix [][]float64) float64 {
	if len(matrix) == 1 {
		return _index(_index(matrix, 0), 0)
	}
	var det float64 = 0.0
	_ = det
	var c int = 0
	_ = c
	for c < len(_index(matrix, 0)) {
		var sub [][]float64 = minor(func(v any) [][]float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]float64{}
				}
				out := make([][]float64, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []float64 {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]float64); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []float64{}
							}
							out := make([]float64, len(arr))
							for i, x := range arr {
								out[i] = x.(float64)
							}
							return out
						}
						return v.([]float64)
					}(x)
				}
				return out
			}
			return v.([][]float64)
		}(matrix), 0, c)
		_ = sub
		var sign float64 = func() float64 {
			if _modi(c, 2) == 0 {
				return 1.0
			} else {
				return (0 - 1.0)
			}
		}()
		_ = sign
		det = (det + ((_index(_index(matrix, 0), c) * determinant(func(v any) [][]float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]float64{}
				}
				out := make([][]float64, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []float64 {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]float64); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []float64{}
							}
							out := make([]float64, len(arr))
							for i, x := range arr {
								out[i] = x.(float64)
							}
							return out
						}
						return v.([]float64)
					}(x)
				}
				return out
			}
			return v.([][]float64)
		}(sub))) * sign))
		c = (c + 1)
	}
	return det
}

func inverse(matrix [][]float64) [][]float64 {
	var det float64 = determinant(func(v any) [][]float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]float64{}
			}
			out := make([][]float64, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []float64 {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]float64); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []float64{}
						}
						out := make([]float64, len(arr))
						for i, x := range arr {
							out[i] = x.(float64)
						}
						return out
					}
					return v.([]float64)
				}(x)
			}
			return out
		}
		return v.([][]float64)
	}(matrix))
	_ = det
	if det == 0.0 {
		return func(v any) [][]float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]float64{}
				}
				out := make([][]float64, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []float64 {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]float64); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []float64{}
							}
							out := make([]float64, len(arr))
							for i, x := range arr {
								out[i] = x.(float64)
							}
							return out
						}
						return v.([]float64)
					}(x)
				}
				return out
			}
			return v.([][]float64)
		}([][]float64{})
	}
	var size int = len(matrix)
	_ = size
	var matrix_minor [][]float64 = [][]float64{}
	_ = matrix_minor
	var i int = 0
	_ = i
	for i < size {
		var row []float64 = []float64{}
		_ = row
		var j int = 0
		_ = j
		for j < size {
			var m [][]float64 = minor(func(v any) [][]float64 {
				if v == nil {
					return nil
				}
				if vv, ok := v.([][]float64); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return [][]float64{}
					}
					out := make([][]float64, len(arr))
					for i, x := range arr {
						out[i] = func(v any) []float64 {
							if v == nil {
								return nil
							}
							if vv, ok := v.([]float64); ok {
								return vv
							}
							if arr, ok := v.([]any); ok {
								if len(arr) == 0 {
									return []float64{}
								}
								out := make([]float64, len(arr))
								for i, x := range arr {
									out[i] = x.(float64)
								}
								return out
							}
							return v.([]float64)
						}(x)
					}
					return out
				}
				return v.([][]float64)
			}(matrix), i, j)
			_ = m
			row = append(row, determinant(func(v any) [][]float64 {
				if v == nil {
					return nil
				}
				if vv, ok := v.([][]float64); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return [][]float64{}
					}
					out := make([][]float64, len(arr))
					for i, x := range arr {
						out[i] = func(v any) []float64 {
							if v == nil {
								return nil
							}
							if vv, ok := v.([]float64); ok {
								return vv
							}
							if arr, ok := v.([]any); ok {
								if len(arr) == 0 {
									return []float64{}
								}
								out := make([]float64, len(arr))
								for i, x := range arr {
									out[i] = x.(float64)
								}
								return out
							}
							return v.([]float64)
						}(x)
					}
					return out
				}
				return v.([][]float64)
			}(m)))
			j = (j + 1)
		}
		matrix_minor = append(matrix_minor, row)
		i = (i + 1)
	}
	var cofactors [][]float64 = [][]float64{}
	_ = cofactors
	i = 0
	for i < size {
		var row []float64 = []float64{}
		_ = row
		var j int = 0
		_ = j
		for j < size {
			var sign float64 = func() float64 {
				if _modi((i+j), 2) == 0 {
					return 1.0
				} else {
					return (0 - 1.0)
				}
			}()
			_ = sign
			row = append(row, (_index(_index(matrix_minor, i), j) * sign))
			j = (j + 1)
		}
		cofactors = append(cofactors, row)
		i = (i + 1)
	}
	var adjugate [][]float64 = transpose(func(v any) [][]float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]float64{}
			}
			out := make([][]float64, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []float64 {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]float64); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []float64{}
						}
						out := make([]float64, len(arr))
						for i, x := range arr {
							out[i] = x.(float64)
						}
						return out
					}
					return v.([]float64)
				}(x)
			}
			return out
		}
		return v.([][]float64)
	}(cofactors))
	_ = adjugate
	_ = adjugate
	return scalar_multiply(func(v any) [][]float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]float64{}
			}
			out := make([][]float64, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []float64 {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]float64); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []float64{}
						}
						out := make([]float64, len(arr))
						for i, x := range arr {
							out[i] = x.(float64)
						}
						return out
					}
					return v.([]float64)
				}(x)
			}
			return out
		}
		return v.([][]float64)
	}(adjugate), (float64(1.0) / float64(det)))
}

func mochiMain() {
	var matrix_a [][]float64 = [][]float64{[]float64{12.0, 10.0}, []float64{3.0, 9.0}}
	_ = matrix_a
	var matrix_b [][]float64 = [][]float64{[]float64{3.0, 4.0}, []float64{7.0, 4.0}}
	_ = matrix_b
	var matrix_c [][]float64 = [][]float64{[]float64{11.0, 12.0, 13.0, 14.0}, []float64{21.0, 22.0, 23.0, 24.0}, []float64{31.0, 32.0, 33.0, 34.0}, []float64{41.0, 42.0, 43.0, 44.0}}
	_ = matrix_c
	var matrix_d [][]float64 = [][]float64{[]float64{3.0, 0.0, 2.0}, []float64{2.0, 0.0, (0 - 2.0)}, []float64{0.0, 1.0, 1.0}}
	_ = matrix_d
	fmt.Println((("Add Operation, add(matrix_a, matrix_b) = " + fmt.Sprint(add(func(v any) [][][]float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][][]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][][]float64{}
			}
			out := make([][][]float64, len(arr))
			for i, x := range arr {
				out[i] = func(v any) [][]float64 {
					if v == nil {
						return nil
					}
					if vv, ok := v.([][]float64); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return [][]float64{}
						}
						out := make([][]float64, len(arr))
						for i, x := range arr {
							out[i] = x.([]float64)
						}
						return out
					}
					return v.([][]float64)
				}(x)
			}
			return out
		}
		return v.([][][]float64)
	}([][][]float64{matrix_a, matrix_b})))) + " \n"))
	fmt.Println((("Multiply Operation, multiply(matrix_a, matrix_b) = " + fmt.Sprint(multiply(func(v any) [][]float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]float64{}
			}
			out := make([][]float64, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []float64 {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]float64); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []float64{}
						}
						out := make([]float64, len(arr))
						for i, x := range arr {
							out[i] = x.(float64)
						}
						return out
					}
					return v.([]float64)
				}(x)
			}
			return out
		}
		return v.([][]float64)
	}(matrix_a), func(v any) [][]float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]float64{}
			}
			out := make([][]float64, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []float64 {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]float64); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []float64{}
						}
						out := make([]float64, len(arr))
						for i, x := range arr {
							out[i] = x.(float64)
						}
						return out
					}
					return v.([]float64)
				}(x)
			}
			return out
		}
		return v.([][]float64)
	}(matrix_b)))) + " \n"))
	fmt.Println((("Identity: " + fmt.Sprint(identity(5))) + "\n"))
	fmt.Println((((("Minor of " + fmt.Sprint(matrix_c)) + " = ") + fmt.Sprint(minor(func(v any) [][]float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]float64{}
			}
			out := make([][]float64, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []float64 {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]float64); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []float64{}
						}
						out := make([]float64, len(arr))
						for i, x := range arr {
							out[i] = x.(float64)
						}
						return out
					}
					return v.([]float64)
				}(x)
			}
			return out
		}
		return v.([][]float64)
	}(matrix_c), 1, 2))) + " \n"))
	fmt.Println((((("Determinant of " + fmt.Sprint(matrix_b)) + " = ") + fmt.Sprint(determinant(func(v any) [][]float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]float64{}
			}
			out := make([][]float64, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []float64 {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]float64); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []float64{}
						}
						out := make([]float64, len(arr))
						for i, x := range arr {
							out[i] = x.(float64)
						}
						return out
					}
					return v.([]float64)
				}(x)
			}
			return out
		}
		return v.([][]float64)
	}(matrix_b)))) + " \n"))
	fmt.Println((((("Inverse of " + fmt.Sprint(matrix_d)) + " = ") + fmt.Sprint(inverse(func(v any) [][]float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]float64{}
			}
			out := make([][]float64, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []float64 {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]float64); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []float64{}
						}
						out := make([]float64, len(arr))
						for i, x := range arr {
							out[i] = x.(float64)
						}
						return out
					}
					return v.([]float64)
				}(x)
			}
			return out
		}
		return v.([][]float64)
	}(matrix_d)))) + "\n"))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
