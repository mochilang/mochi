//go:build ignore

// Generated by Mochi v0.10.67 on 2025-08-17 12:40:16 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

func _slice[T any](s []T, start, end int) []T {
	if start < 0 {
		start = 0
	}
	if end > len(s) {
		end = len(s)
	}
	if start > len(s) {
		start = len(s)
	}
	if end < start {
		end = start
	}
	return s[start:end]
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func generate_large_matrix() [][]int {
	var result [][]int = [][]int{}
	_ = result
	var i int = 0
	_ = i
	for i < 1000 {
		var row []int = []int{}
		_ = row
		var j int = (1000 - i)
		_ = j
		for j > ((0 - 1000) - i) {
			row = append(row, j)
			j = (j - 1)
		}
		result = append(result, row)
		i = (i + 1)
	}
	return result
}

func find_negative_index(arr []int) int {
	var left int = 0
	_ = left
	var right int = (len(arr) - 1)
	_ = right
	if len(arr) == 0 {
		return 0
	}
	if _index(arr, 0) < 0 {
		return 0
	}
	for left <= right {
		var mid int = ((left + right) / 2)
		_ = mid
		var num int = _index(arr, mid)
		_ = num
		if num < 0 {
			if mid == 0 {
				return 0
			}
			if _index(arr, (mid-1)) >= 0 {
				return mid
			}
			right = (mid - 1)
		} else {
			left = (mid + 1)
		}
	}
	return len(arr)
}

func count_negatives_binary_search(grid [][]int) int {
	var total int = 0
	_ = total
	var bound int = len(_index(grid, 0))
	_ = bound
	var i int = 0
	_ = i
	for i < len(grid) {
		var row []int = _index(grid, i)
		_ = row
		var idx int = find_negative_index(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(_slice(row, 0, bound))))
		_ = idx
		bound = idx
		total = (total + idx)
		i = (i + 1)
	}
	return ((len(grid) * len(_index(grid, 0))) - total)
}

func count_negatives_brute_force(grid [][]int) int {
	var count int = 0
	_ = count
	var i int = 0
	_ = i
	for i < len(grid) {
		var row []int = _index(grid, i)
		_ = row
		var j int = 0
		_ = j
		for j < len(row) {
			if _index(row, j) < 0 {
				count = (count + 1)
			}
			j = (j + 1)
		}
		i = (i + 1)
	}
	return count
}

func count_negatives_brute_force_with_break(grid [][]int) int {
	var total int = 0
	_ = total
	var i int = 0
	_ = i
	for i < len(grid) {
		var row []int = _index(grid, i)
		_ = row
		var j int = 0
		_ = j
		for j < len(row) {
			var number int = _index(row, j)
			_ = number
			if number < 0 {
				total = (total + (len(row) - j))
				break
			}
			j = (j + 1)
		}
		i = (i + 1)
	}
	return total
}

var grid [][]int

var test_grids [][][]int

var results_bin []int

var i int

var results_brute []int

var results_break []int

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		grid = generate_large_matrix()
		test_grids = [][][]int{[][]int{[]int{4, 3, 2, func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}((0 - 1))}, []int{3, 2, 1, func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}((0 - 1))}, []int{1, 1, func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}((0 - 1)), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}((0 - 2))}, []int{func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}((0 - 1)), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}((0 - 1)), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}((0 - 2)), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}((0 - 3))}}, [][]int{[]int{3, 2}, []int{1, 0}}, [][]int{[]int{7, 7, 6}}, [][]int{[]int{7, 7, 6}, []int{func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}((0 - 1)), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}((0 - 2)), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}((0 - 3))}}, grid}
		results_bin = []int{}
		i = 0
		for i < len(test_grids) {
			results_bin = append(results_bin, count_negatives_binary_search(func(v any) [][]int {
				if v == nil {
					return nil
				}
				if vv, ok := v.([][]int); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return [][]int{}
					}
					out := make([][]int, len(arr))
					for i, x := range arr {
						out[i] = func(v any) []int {
							if v == nil {
								return nil
							}
							if vv, ok := v.([]int); ok {
								return vv
							}
							if arr, ok := v.([]any); ok {
								if len(arr) == 0 {
									return []int{}
								}
								out := make([]int, len(arr))
								for i, x := range arr {
									out[i] = x.(int)
								}
								return out
							}
							return v.([]int)
						}(x)
					}
					return out
				}
				return v.([][]int)
			}(_index(test_grids, i))))
			i = (i + 1)
		}
		fmt.Println(fmt.Sprint(results_bin))
		results_brute = []int{}
		i = 0
		for i < len(test_grids) {
			results_brute = append(results_brute, count_negatives_brute_force(func(v any) [][]int {
				if v == nil {
					return nil
				}
				if vv, ok := v.([][]int); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return [][]int{}
					}
					out := make([][]int, len(arr))
					for i, x := range arr {
						out[i] = func(v any) []int {
							if v == nil {
								return nil
							}
							if vv, ok := v.([]int); ok {
								return vv
							}
							if arr, ok := v.([]any); ok {
								if len(arr) == 0 {
									return []int{}
								}
								out := make([]int, len(arr))
								for i, x := range arr {
									out[i] = x.(int)
								}
								return out
							}
							return v.([]int)
						}(x)
					}
					return out
				}
				return v.([][]int)
			}(_index(test_grids, i))))
			i = (i + 1)
		}
		fmt.Println(fmt.Sprint(results_brute))
		results_break = []int{}
		i = 0
		for i < len(test_grids) {
			results_break = append(results_break, count_negatives_brute_force_with_break(func(v any) [][]int {
				if v == nil {
					return nil
				}
				if vv, ok := v.([][]int); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return [][]int{}
					}
					out := make([][]int, len(arr))
					for i, x := range arr {
						out[i] = func(v any) []int {
							if v == nil {
								return nil
							}
							if vv, ok := v.([]int); ok {
								return vv
							}
							if arr, ok := v.([]any); ok {
								if len(arr) == 0 {
									return []int{}
								}
								out := make([]int, len(arr))
								for i, x := range arr {
									out[i] = x.(int)
								}
								return out
							}
							return v.([]int)
						}(x)
					}
					return out
				}
				return v.([][]int)
			}(_index(test_grids, i))))
			i = (i + 1)
		}
		fmt.Println(fmt.Sprint(results_break))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
