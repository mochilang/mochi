//go:build ignore

// Generated by Mochi v0.10.64 on 2025-08-12 09:16:48 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"strings"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

func cramers_rule_2x2(eq1 []float64, eq2 []float64) []float64 {
	if (len(eq1) != 3) || (len(eq2) != 3) {
		panic("Please enter a valid equation.")
	}
	if (((_index(eq1, 0) == 0.0) && (_index(eq1, 1) == 0.0)) && (_index(eq2, 0) == 0.0)) && (_index(eq2, 1) == 0.0) {
		panic("Both a & b of two equations can't be zero.")
	}
	var a1 float64 = _index(eq1, 0)
	_ = a1
	var b1 float64 = _index(eq1, 1)
	_ = b1
	var c1 float64 = _index(eq1, 2)
	_ = c1
	var a2 float64 = _index(eq2, 0)
	_ = a2
	var b2 float64 = _index(eq2, 1)
	_ = b2
	var c2 float64 = _index(eq2, 2)
	_ = c2
	var determinant float64 = ((a1 * b2) - (a2 * b1))
	_ = determinant
	var determinant_x float64 = ((c1 * b2) - (c2 * b1))
	_ = determinant_x
	var determinant_y float64 = ((a1 * c2) - (a2 * c1))
	_ = determinant_y
	if determinant == 0.0 {
		if (determinant_x == 0.0) && (determinant_y == 0.0) {
			panic("Infinite solutions. (Consistent system)")
		}
		panic("No solution. (Inconsistent system)")
	}
	if (determinant_x == 0.0) && (determinant_y == 0.0) {
		return []float64{0.0, 0.0}
	}
	var x float64 = (float64(determinant_x) / float64(determinant))
	_ = x
	_ = x
	var y float64 = (float64(determinant_y) / float64(determinant))
	_ = y
	_ = y
	return []float64{x, y}
}

func test_cramers_rule_2x2() {
	var r1 []float64 = cramers_rule_2x2(func(v any) []float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []float64{}
			}
			out := make([]float64, len(arr))
			for i, x := range arr {
				out[i] = x.(float64)
			}
			return out
		}
		return v.([]float64)
	}([]float64{2.0, 3.0, 0.0}), func(v any) []float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []float64{}
			}
			out := make([]float64, len(arr))
			for i, x := range arr {
				out[i] = x.(float64)
			}
			return out
		}
		return v.([]float64)
	}([]float64{5.0, 1.0, 0.0}))
	_ = r1
	if (_index(r1, 0) != 0.0) || (_index(r1, 1) != 0.0) {
		panic("Test1 failed")
	}
	var r2 []float64 = cramers_rule_2x2(func(v any) []float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []float64{}
			}
			out := make([]float64, len(arr))
			for i, x := range arr {
				out[i] = x.(float64)
			}
			return out
		}
		return v.([]float64)
	}([]float64{0.0, 4.0, 50.0}), func(v any) []float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []float64{}
			}
			out := make([]float64, len(arr))
			for i, x := range arr {
				out[i] = x.(float64)
			}
			return out
		}
		return v.([]float64)
	}([]float64{2.0, 0.0, 26.0}))
	_ = r2
	if (_index(r2, 0) != 13.0) || (_index(r2, 1) != 12.5) {
		panic("Test2 failed")
	}
}

func mochiMain() {
	test_cramers_rule_2x2()
	fmt.Println(func() string {
		b, _ := json.Marshal(cramers_rule_2x2(func(v any) []float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []float64{}
				}
				out := make([]float64, len(arr))
				for i, x := range arr {
					out[i] = x.(float64)
				}
				return out
			}
			return v.([]float64)
		}([]float64{11.0, 2.0, 30.0}), func(v any) []float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []float64{}
				}
				out := make([]float64, len(arr))
				for i, x := range arr {
					out[i] = x.(float64)
				}
				return out
			}
			return v.([]float64)
		}([]float64{1.0, 0.0, 4.0})))
		s := string(b)
		s = strings.ReplaceAll(s, ":", ": ")
		s = strings.ReplaceAll(s, ",", ", ")
		s = strings.ReplaceAll(s, "}, {", "},{")
		return s
	}())
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
