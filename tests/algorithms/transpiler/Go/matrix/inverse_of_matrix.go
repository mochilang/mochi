//go:build ignore

// Generated by Mochi v0.10.67 on 2025-08-17 12:40:20 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"strings"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		return
	}
	s[idx] = v
}

func inverse_of_matrix(matrix [][]float64) [][]float64 {
	if ((len(matrix) == 2) && (len(_index(matrix, 0)) == 2)) && (len(_index(matrix, 1)) == 2) {
		var det float64 = ((_index(_index(matrix, 0), 0) * _index(_index(matrix, 1), 1)) - (_index(_index(matrix, 1), 0) * _index(_index(matrix, 0), 1)))
		_ = det
		if det == 0.0 {
			fmt.Println("This matrix has no inverse.")
			return func(v any) [][]float64 {
				if v == nil {
					return nil
				}
				if vv, ok := v.([][]float64); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return [][]float64{}
					}
					out := make([][]float64, len(arr))
					for i, x := range arr {
						out[i] = func(v any) []float64 {
							if v == nil {
								return nil
							}
							if vv, ok := v.([]float64); ok {
								return vv
							}
							if arr, ok := v.([]any); ok {
								if len(arr) == 0 {
									return []float64{}
								}
								out := make([]float64, len(arr))
								for i, x := range arr {
									out[i] = x.(float64)
								}
								return out
							}
							return v.([]float64)
						}(x)
					}
					return out
				}
				return v.([][]float64)
			}([][]float64{})
		}
		return [][]float64{[]float64{(float64(_index(_index(matrix, 1), 1)) / float64(det)), (float64((0 - _index(_index(matrix, 0), 1))) / float64(det))}, []float64{(float64((0 - _index(_index(matrix, 1), 0))) / float64(det)), (float64(_index(_index(matrix, 0), 0)) / float64(det))}}
	} else {
		if (((len(matrix) == 3) && (len(_index(matrix, 0)) == 3)) && (len(_index(matrix, 1)) == 3)) && (len(_index(matrix, 2)) == 3) {
			var det float64 = (((((_index(_index(matrix, 0), 0) * _index(_index(matrix, 1), 1)) * _index(_index(matrix, 2), 2)) + ((_index(_index(matrix, 0), 1) * _index(_index(matrix, 1), 2)) * _index(_index(matrix, 2), 0))) + ((_index(_index(matrix, 0), 2) * _index(_index(matrix, 1), 0)) * _index(_index(matrix, 2), 1))) - ((((_index(_index(matrix, 0), 2) * _index(_index(matrix, 1), 1)) * _index(_index(matrix, 2), 0)) + ((_index(_index(matrix, 0), 1) * _index(_index(matrix, 1), 0)) * _index(_index(matrix, 2), 2))) + ((_index(_index(matrix, 0), 0) * _index(_index(matrix, 1), 2)) * _index(_index(matrix, 2), 1))))
			_ = det
			if det == 0.0 {
				fmt.Println("This matrix has no inverse.")
				return func(v any) [][]float64 {
					if v == nil {
						return nil
					}
					if vv, ok := v.([][]float64); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return [][]float64{}
						}
						out := make([][]float64, len(arr))
						for i, x := range arr {
							out[i] = func(v any) []float64 {
								if v == nil {
									return nil
								}
								if vv, ok := v.([]float64); ok {
									return vv
								}
								if arr, ok := v.([]any); ok {
									if len(arr) == 0 {
										return []float64{}
									}
									out := make([]float64, len(arr))
									for i, x := range arr {
										out[i] = x.(float64)
									}
									return out
								}
								return v.([]float64)
							}(x)
						}
						return out
					}
					return v.([][]float64)
				}([][]float64{})
			}
			var cof [][]float64 = [][]float64{[]float64{0.0, 0.0, 0.0}, []float64{0.0, 0.0, 0.0}, []float64{0.0, 0.0, 0.0}}
			_ = cof
			_setIndex(_index(cof, 0), 0, ((_index(_index(matrix, 1), 1) * _index(_index(matrix, 2), 2)) - (_index(_index(matrix, 1), 2) * _index(_index(matrix, 2), 1))))
			_setIndex(_index(cof, 0), 1, (0 - ((_index(_index(matrix, 1), 0) * _index(_index(matrix, 2), 2)) - (_index(_index(matrix, 1), 2) * _index(_index(matrix, 2), 0)))))
			_setIndex(_index(cof, 0), 2, ((_index(_index(matrix, 1), 0) * _index(_index(matrix, 2), 1)) - (_index(_index(matrix, 1), 1) * _index(_index(matrix, 2), 0))))
			_setIndex(_index(cof, 1), 0, (0 - ((_index(_index(matrix, 0), 1) * _index(_index(matrix, 2), 2)) - (_index(_index(matrix, 0), 2) * _index(_index(matrix, 2), 1)))))
			_setIndex(_index(cof, 1), 1, ((_index(_index(matrix, 0), 0) * _index(_index(matrix, 2), 2)) - (_index(_index(matrix, 0), 2) * _index(_index(matrix, 2), 0))))
			_setIndex(_index(cof, 1), 2, (0 - ((_index(_index(matrix, 0), 0) * _index(_index(matrix, 2), 1)) - (_index(_index(matrix, 0), 1) * _index(_index(matrix, 2), 0)))))
			_setIndex(_index(cof, 2), 0, ((_index(_index(matrix, 0), 1) * _index(_index(matrix, 1), 2)) - (_index(_index(matrix, 0), 2) * _index(_index(matrix, 1), 1))))
			_setIndex(_index(cof, 2), 1, (0 - ((_index(_index(matrix, 0), 0) * _index(_index(matrix, 1), 2)) - (_index(_index(matrix, 0), 2) * _index(_index(matrix, 1), 0)))))
			_setIndex(_index(cof, 2), 2, ((_index(_index(matrix, 0), 0) * _index(_index(matrix, 1), 1)) - (_index(_index(matrix, 0), 1) * _index(_index(matrix, 1), 0))))
			var inv [][]float64 = [][]float64{[]float64{0.0, 0.0, 0.0}, []float64{0.0, 0.0, 0.0}, []float64{0.0, 0.0, 0.0}}
			_ = inv
			var i int = 0
			_ = i
			for i < 3 {
				var j int = 0
				_ = j
				for j < 3 {
					_setIndex(_index(inv, i), j, (float64(_index(_index(cof, j), i)) / float64(det)))
					j = (j + 1)
				}
				i = (i + 1)
			}
			return inv
		}
	}
	fmt.Println("Please provide a matrix of size 2x2 or 3x3.")
	return func(v any) [][]float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]float64{}
			}
			out := make([][]float64, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []float64 {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]float64); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []float64{}
						}
						out := make([]float64, len(arr))
						for i, x := range arr {
							out[i] = x.(float64)
						}
						return out
					}
					return v.([]float64)
				}(x)
			}
			return out
		}
		return v.([][]float64)
	}([][]float64{})
}

var m2 [][]float64

var m3 [][]float64

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		m2 = [][]float64{[]float64{2.0, 5.0}, []float64{2.0, 0.0}}
		fmt.Println(func() string {
			b, _ := json.Marshal(inverse_of_matrix(func(v any) [][]float64 {
				if v == nil {
					return nil
				}
				if vv, ok := v.([][]float64); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return [][]float64{}
					}
					out := make([][]float64, len(arr))
					for i, x := range arr {
						out[i] = func(v any) []float64 {
							if v == nil {
								return nil
							}
							if vv, ok := v.([]float64); ok {
								return vv
							}
							if arr, ok := v.([]any); ok {
								if len(arr) == 0 {
									return []float64{}
								}
								out := make([]float64, len(arr))
								for i, x := range arr {
									out[i] = x.(float64)
								}
								return out
							}
							return v.([]float64)
						}(x)
					}
					return out
				}
				return v.([][]float64)
			}(m2)))
			s := string(b)
			s = strings.ReplaceAll(s, ":", ": ")
			s = strings.ReplaceAll(s, ",", ", ")
			s = strings.ReplaceAll(s, "}, {", "},{")
			return s
		}())
		m3 = [][]float64{[]float64{2.0, 5.0, 7.0}, []float64{2.0, 0.0, 1.0}, []float64{1.0, 2.0, 3.0}}
		fmt.Println(func() string {
			b, _ := json.Marshal(inverse_of_matrix(func(v any) [][]float64 {
				if v == nil {
					return nil
				}
				if vv, ok := v.([][]float64); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return [][]float64{}
					}
					out := make([][]float64, len(arr))
					for i, x := range arr {
						out[i] = func(v any) []float64 {
							if v == nil {
								return nil
							}
							if vv, ok := v.([]float64); ok {
								return vv
							}
							if arr, ok := v.([]any); ok {
								if len(arr) == 0 {
									return []float64{}
								}
								out := make([]float64, len(arr))
								for i, x := range arr {
									out[i] = x.(float64)
								}
								return out
							}
							return v.([]float64)
						}(x)
					}
					return out
				}
				return v.([][]float64)
			}(m3)))
			s := string(b)
			s = strings.ReplaceAll(s, ":", ": ")
			s = strings.ReplaceAll(s, ",", ", ")
			s = strings.ReplaceAll(s, "}, {", "},{")
			return s
		}())
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
