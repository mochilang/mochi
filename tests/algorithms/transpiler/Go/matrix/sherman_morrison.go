//go:build ignore

// Generated by Mochi v0.10.64 on 2025-08-12 09:20:32 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

type Matrix struct {
	Data [][]float64 `json:"data"`
	Rows int         `json:"rows"`
	Cols int         `json:"cols"`
}

func make_matrix(rows int, cols int, value float64) Matrix {
	var arr [][]float64 = [][]float64{}
	_ = arr
	var r int = 0
	_ = r
	for r < rows {
		var row []float64 = []float64{}
		_ = row
		var c int = 0
		_ = c
		for c < cols {
			row = append(row, value)
			c = (c + 1)
		}
		arr = append(arr, row)
		r = (r + 1)
	}
	return Matrix{
		Data: arr,
		Rows: rows,
		Cols: cols,
	}
}

func matrix_from_lists(vals [][]float64) Matrix {
	var r int = len(vals)
	_ = r
	_ = r
	var c int = func() int {
		if r == 0 {
			return 0
		} else {
			return len(_index(vals, 0))
		}
	}()
	_ = c
	_ = c
	return Matrix{
		Data: vals,
		Rows: r,
		Cols: c,
	}
}

func matrix_to_string(m Matrix) string {
	var s string = ""
	_ = s
	var i int = 0
	_ = i
	for i < m.Rows {
		s = (s + "[")
		var j int = 0
		_ = j
		for j < m.Cols {
			s = (s + fmt.Sprint(_index(_index(m.Data, i), j)))
			if j < (m.Cols - 1) {
				s = (s + ", ")
			}
			j = (j + 1)
		}
		s = (s + "]")
		if i < (m.Rows - 1) {
			s = (s + "\n")
		}
		i = (i + 1)
	}
	return s
}

func matrix_add(a Matrix, b Matrix) Matrix {
	if (a.Rows != b.Rows) || (a.Cols != b.Cols) {
		return Matrix{
			Data: [][]float64{},
			Rows: 0,
			Cols: 0,
		}
	}
	var res [][]float64 = [][]float64{}
	_ = res
	var i int = 0
	_ = i
	for i < a.Rows {
		var row []float64 = []float64{}
		_ = row
		var j int = 0
		_ = j
		for j < a.Cols {
			row = append(row, (_index(_index(a.Data, i), j) + _index(_index(b.Data, i), j)))
			j = (j + 1)
		}
		res = append(res, row)
		i = (i + 1)
	}
	return Matrix{
		Data: res,
		Rows: a.Rows,
		Cols: a.Cols,
	}
}

func matrix_sub(a Matrix, b Matrix) Matrix {
	if (a.Rows != b.Rows) || (a.Cols != b.Cols) {
		return Matrix{
			Data: [][]float64{},
			Rows: 0,
			Cols: 0,
		}
	}
	var res [][]float64 = [][]float64{}
	_ = res
	var i int = 0
	_ = i
	for i < a.Rows {
		var row []float64 = []float64{}
		_ = row
		var j int = 0
		_ = j
		for j < a.Cols {
			row = append(row, (_index(_index(a.Data, i), j) - _index(_index(b.Data, i), j)))
			j = (j + 1)
		}
		res = append(res, row)
		i = (i + 1)
	}
	return Matrix{
		Data: res,
		Rows: a.Rows,
		Cols: a.Cols,
	}
}

func matrix_mul_scalar(m Matrix, k float64) Matrix {
	var res [][]float64 = [][]float64{}
	_ = res
	var i int = 0
	_ = i
	for i < m.Rows {
		var row []float64 = []float64{}
		_ = row
		var j int = 0
		_ = j
		for j < m.Cols {
			row = append(row, (_index(_index(m.Data, i), j) * k))
			j = (j + 1)
		}
		res = append(res, row)
		i = (i + 1)
	}
	return Matrix{
		Data: res,
		Rows: m.Rows,
		Cols: m.Cols,
	}
}

func matrix_mul(a Matrix, b Matrix) Matrix {
	if a.Cols != b.Rows {
		return Matrix{
			Data: [][]float64{},
			Rows: 0,
			Cols: 0,
		}
	}
	var res [][]float64 = [][]float64{}
	_ = res
	var i int = 0
	_ = i
	for i < a.Rows {
		var row []float64 = []float64{}
		_ = row
		var j int = 0
		_ = j
		for j < b.Cols {
			var sum float64 = 0.0
			_ = sum
			var k int = 0
			_ = k
			for k < a.Cols {
				sum = (sum + (_index(_index(a.Data, i), k) * _index(_index(b.Data, k), j)))
				k = (k + 1)
			}
			row = append(row, sum)
			j = (j + 1)
		}
		res = append(res, row)
		i = (i + 1)
	}
	return Matrix{
		Data: res,
		Rows: a.Rows,
		Cols: b.Cols,
	}
}

func matrix_transpose(m Matrix) Matrix {
	var res [][]float64 = [][]float64{}
	_ = res
	var c int = 0
	_ = c
	for c < m.Cols {
		var row []float64 = []float64{}
		_ = row
		var r int = 0
		_ = r
		for r < m.Rows {
			row = append(row, _index(_index(m.Data, r), c))
			r = (r + 1)
		}
		res = append(res, row)
		c = (c + 1)
	}
	return Matrix{
		Data: res,
		Rows: m.Cols,
		Cols: m.Rows,
	}
}

func sherman_morrison(ainv Matrix, u Matrix, v Matrix) Matrix {
	var vt Matrix = matrix_transpose(v)
	_ = vt
	var vu Matrix = matrix_mul(matrix_mul(vt, ainv), u)
	_ = vu
	var factor float64 = (_index(_index(vu.Data, 0), 0) + 1.0)
	_ = factor
	if factor == 0.0 {
		return Matrix{
			Data: [][]float64{},
			Rows: 0,
			Cols: 0,
		}
	}
	var term1 Matrix = matrix_mul(ainv, u)
	_ = term1
	var term2 Matrix = matrix_mul(vt, ainv)
	_ = term2
	var numerator Matrix = matrix_mul(term1, term2)
	_ = numerator
	var scaled Matrix = matrix_mul_scalar(numerator, (float64(1.0) / float64(factor)))
	_ = scaled
	_ = scaled
	return matrix_sub(ainv, scaled)
}

func mochiMain() {
	var ainv Matrix = matrix_from_lists(func(v any) [][]float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]float64{}
			}
			out := make([][]float64, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []float64 {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]float64); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []float64{}
						}
						out := make([]float64, len(arr))
						for i, x := range arr {
							out[i] = x.(float64)
						}
						return out
					}
					return v.([]float64)
				}(x)
			}
			return out
		}
		return v.([][]float64)
	}([][]float64{[]float64{1.0, 0.0, 0.0}, []float64{0.0, 1.0, 0.0}, []float64{0.0, 0.0, 1.0}}))
	_ = ainv
	var u Matrix = matrix_from_lists(func(v any) [][]float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]float64{}
			}
			out := make([][]float64, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []float64 {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]float64); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []float64{}
						}
						out := make([]float64, len(arr))
						for i, x := range arr {
							out[i] = x.(float64)
						}
						return out
					}
					return v.([]float64)
				}(x)
			}
			return out
		}
		return v.([][]float64)
	}([][]float64{[]float64{1.0}, []float64{2.0}, []float64{(0 - 3.0)}}))
	_ = u
	var v Matrix = matrix_from_lists(func(v any) [][]float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]float64{}
			}
			out := make([][]float64, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []float64 {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]float64); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []float64{}
						}
						out := make([]float64, len(arr))
						for i, x := range arr {
							out[i] = x.(float64)
						}
						return out
					}
					return v.([]float64)
				}(x)
			}
			return out
		}
		return v.([][]float64)
	}([][]float64{[]float64{4.0}, []float64{(0 - 2.0)}, []float64{5.0}}))
	_ = v
	var result Matrix = sherman_morrison(ainv, u, v)
	_ = result
	fmt.Println(matrix_to_string(result))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
