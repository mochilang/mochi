//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-16 09:44:02 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _modi(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func multiply(matrix_a [][]int, matrix_b [][]int) [][]int {
	var n int = len(matrix_a)
	_ = n
	var matrix_c [][]int = [][]int{}
	_ = matrix_c
	var i int = 0
	_ = i
	for i < n {
		var row []int = []int{}
		_ = row
		var j int = 0
		_ = j
		for j < n {
			var val int = 0
			_ = val
			var k int = 0
			_ = k
			for k < n {
				val = (val + (_index(_index(matrix_a, i), k) * _index(_index(matrix_b, k), j)))
				k = (k + 1)
			}
			row = append(row, val)
			j = (j + 1)
		}
		matrix_c = append(matrix_c, row)
		i = (i + 1)
	}
	return matrix_c
}

func identity(n int) [][]int {
	var res [][]int = [][]int{}
	_ = res
	var i int = 0
	_ = i
	for i < n {
		var row []int = []int{}
		_ = row
		var j int = 0
		_ = j
		for j < n {
			if i == j {
				row = append(row, 1)
			} else {
				row = append(row, 0)
			}
			j = (j + 1)
		}
		res = append(res, row)
		i = (i + 1)
	}
	return res
}

func nth_fibonacci_matrix(n int) int {
	if n <= 1 {
		return n
	}
	var res_matrix [][]int = identity(2)
	_ = res_matrix
	var fib_matrix [][]int = [][]int{[]int{1, 1}, []int{1, 0}}
	_ = fib_matrix
	var m int = (n - 1)
	_ = m
	for m > 0 {
		if _modi(m, 2) == 1 {
			res_matrix = multiply(func(v any) [][]int {
				if v == nil {
					return nil
				}
				if vv, ok := v.([][]int); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return [][]int{}
					}
					out := make([][]int, len(arr))
					for i, x := range arr {
						out[i] = func(v any) []int {
							if v == nil {
								return nil
							}
							if vv, ok := v.([]int); ok {
								return vv
							}
							if arr, ok := v.([]any); ok {
								if len(arr) == 0 {
									return []int{}
								}
								out := make([]int, len(arr))
								for i, x := range arr {
									out[i] = x.(int)
								}
								return out
							}
							return v.([]int)
						}(x)
					}
					return out
				}
				return v.([][]int)
			}(res_matrix), func(v any) [][]int {
				if v == nil {
					return nil
				}
				if vv, ok := v.([][]int); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return [][]int{}
					}
					out := make([][]int, len(arr))
					for i, x := range arr {
						out[i] = func(v any) []int {
							if v == nil {
								return nil
							}
							if vv, ok := v.([]int); ok {
								return vv
							}
							if arr, ok := v.([]any); ok {
								if len(arr) == 0 {
									return []int{}
								}
								out := make([]int, len(arr))
								for i, x := range arr {
									out[i] = x.(int)
								}
								return out
							}
							return v.([]int)
						}(x)
					}
					return out
				}
				return v.([][]int)
			}(fib_matrix))
		}
		fib_matrix = multiply(func(v any) [][]int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]int{}
				}
				out := make([][]int, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []int {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]int); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []int{}
							}
							out := make([]int, len(arr))
							for i, x := range arr {
								out[i] = x.(int)
							}
							return out
						}
						return v.([]int)
					}(x)
				}
				return out
			}
			return v.([][]int)
		}(fib_matrix), func(v any) [][]int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]int{}
				}
				out := make([][]int, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []int {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]int); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []int{}
							}
							out := make([]int, len(arr))
							for i, x := range arr {
								out[i] = x.(int)
							}
							return out
						}
						return v.([]int)
					}(x)
				}
				return out
			}
			return v.([][]int)
		}(fib_matrix))
		m = (m / 2)
	}
	return _index(_index(res_matrix, 0), 0)
}

func nth_fibonacci_bruteforce(n int) int {
	if n <= 1 {
		return n
	}
	var fib0 int = 0
	_ = fib0
	var fib1 int = 1
	_ = fib1
	var i int = 2
	_ = i
	for i <= n {
		var next int = (fib0 + fib1)
		_ = next
		fib0 = fib1
		fib1 = next
		i = (i + 1)
	}
	return fib1
}

func parse_number(s string) int {
	var result int = 0
	_ = result
	var i int = 0
	_ = i
	for i < len(s) {
		var ch string = _substr(s, i, (i + 1))
		_ = ch
		if (ch >= "0") && (ch <= "9") {
			result = ((result * 10) + func() int { n, _ := strconv.Atoi(fmt.Sprint(ch)); return n }())
		}
		i = (i + 1)
	}
	return result
}

func mochiMain() {
	var ordinals []string = []string{"0th", "1st", "2nd", "3rd", "10th", "100th", "1000th"}
	_ = ordinals
	var i int = 0
	_ = i
	for i < len(ordinals) {
		var ordinal string = _index(ordinals, i)
		_ = ordinal
		var n int = parse_number(ordinal)
		_ = n
		var msg string = ((((ordinal + " fibonacci number using matrix exponentiation is ") + fmt.Sprint(nth_fibonacci_matrix(n))) + " and using bruteforce is ") + fmt.Sprint(nth_fibonacci_bruteforce(n)))
		_ = msg
		fmt.Println(msg)
		i = (i + 1)
	}
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
