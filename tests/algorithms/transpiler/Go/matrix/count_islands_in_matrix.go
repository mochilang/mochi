//go:build ignore

// Generated by Mochi v0.10.67 on 2025-08-17 12:40:14 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		return
	}
	s[idx] = v
}

func is_safe(grid [][]int, visited [][]bool, row int, col int) bool {
	var rows int = len(grid)
	_ = rows
	var cols int = len(_index(grid, 0))
	_ = cols
	var within_bounds bool = ((((row >= 0) && (row < rows)) && (col >= 0)) && (col < cols))
	_ = within_bounds
	if !within_bounds {
		return false
	}
	var visited_cell bool = _index(_index(visited, row), col)
	_ = visited_cell
	var not_visited bool = (visited_cell == false)
	_ = not_visited
	_ = not_visited
	return (not_visited && (_index(_index(grid, row), col) == 1))
}

func dfs(grid [][]int, visited [][]bool, row int, col int) {
	var row_nbr []int = []int{func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}((0 - 1)), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}((0 - 1)), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}((0 - 1)), 0, 0, 1, 1, 1}
	_ = row_nbr
	var col_nbr []int = []int{func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}((0 - 1)), 0, 1, func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}((0 - 1)), 1, func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}((0 - 1)), 0, 1}
	_ = col_nbr
	_setIndex(_index(visited, row), col, true)
	var k int = 0
	_ = k
	for k < 8 {
		var new_row int = (row + _index(row_nbr, k))
		_ = new_row
		var new_col int = (col + _index(col_nbr, k))
		_ = new_col
		if is_safe(func(v any) [][]int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]int{}
				}
				out := make([][]int, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []int {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]int); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []int{}
							}
							out := make([]int, len(arr))
							for i, x := range arr {
								out[i] = x.(int)
							}
							return out
						}
						return v.([]int)
					}(x)
				}
				return out
			}
			return v.([][]int)
		}(grid), func(v any) [][]bool {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]bool); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]bool{}
				}
				out := make([][]bool, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []bool {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]bool); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []bool{}
							}
							out := make([]bool, len(arr))
							for i, x := range arr {
								out[i] = x.(bool)
							}
							return out
						}
						return v.([]bool)
					}(x)
				}
				return out
			}
			return v.([][]bool)
		}(visited), new_row, new_col) {
			dfs(func(v any) [][]int {
				if v == nil {
					return nil
				}
				if vv, ok := v.([][]int); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return [][]int{}
					}
					out := make([][]int, len(arr))
					for i, x := range arr {
						out[i] = func(v any) []int {
							if v == nil {
								return nil
							}
							if vv, ok := v.([]int); ok {
								return vv
							}
							if arr, ok := v.([]any); ok {
								if len(arr) == 0 {
									return []int{}
								}
								out := make([]int, len(arr))
								for i, x := range arr {
									out[i] = x.(int)
								}
								return out
							}
							return v.([]int)
						}(x)
					}
					return out
				}
				return v.([][]int)
			}(grid), func(v any) [][]bool {
				if v == nil {
					return nil
				}
				if vv, ok := v.([][]bool); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return [][]bool{}
					}
					out := make([][]bool, len(arr))
					for i, x := range arr {
						out[i] = func(v any) []bool {
							if v == nil {
								return nil
							}
							if vv, ok := v.([]bool); ok {
								return vv
							}
							if arr, ok := v.([]any); ok {
								if len(arr) == 0 {
									return []bool{}
								}
								out := make([]bool, len(arr))
								for i, x := range arr {
									out[i] = x.(bool)
								}
								return out
							}
							return v.([]bool)
						}(x)
					}
					return out
				}
				return v.([][]bool)
			}(visited), new_row, new_col)
		}
		k = (k + 1)
	}
}

func count_islands(grid [][]int) int {
	var rows int = len(grid)
	_ = rows
	var cols int = len(_index(grid, 0))
	_ = cols
	var visited [][]bool = [][]bool{}
	_ = visited
	var i int = 0
	_ = i
	for i < rows {
		var row_list []bool = []bool{}
		_ = row_list
		var j int = 0
		_ = j
		for j < cols {
			row_list = append(row_list, false)
			j = (j + 1)
		}
		visited = append(visited, row_list)
		i = (i + 1)
	}
	var count int = 0
	_ = count
	i = 0
	for i < rows {
		var j int = 0
		_ = j
		for j < cols {
			if !_index(_index(visited, i), j) && (_index(_index(grid, i), j) == 1) {
				dfs(func(v any) [][]int {
					if v == nil {
						return nil
					}
					if vv, ok := v.([][]int); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return [][]int{}
						}
						out := make([][]int, len(arr))
						for i, x := range arr {
							out[i] = func(v any) []int {
								if v == nil {
									return nil
								}
								if vv, ok := v.([]int); ok {
									return vv
								}
								if arr, ok := v.([]any); ok {
									if len(arr) == 0 {
										return []int{}
									}
									out := make([]int, len(arr))
									for i, x := range arr {
										out[i] = x.(int)
									}
									return out
								}
								return v.([]int)
							}(x)
						}
						return out
					}
					return v.([][]int)
				}(grid), func(v any) [][]bool {
					if v == nil {
						return nil
					}
					if vv, ok := v.([][]bool); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return [][]bool{}
						}
						out := make([][]bool, len(arr))
						for i, x := range arr {
							out[i] = func(v any) []bool {
								if v == nil {
									return nil
								}
								if vv, ok := v.([]bool); ok {
									return vv
								}
								if arr, ok := v.([]any); ok {
									if len(arr) == 0 {
										return []bool{}
									}
									out := make([]bool, len(arr))
									for i, x := range arr {
										out[i] = x.(bool)
									}
									return out
								}
								return v.([]bool)
							}(x)
						}
						return out
					}
					return v.([][]bool)
				}(visited), i, j)
				count = (count + 1)
			}
			j = (j + 1)
		}
		i = (i + 1)
	}
	return count
}

var grid [][]int

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		grid = [][]int{[]int{1, 1, 0, 0, 0}, []int{0, 1, 0, 0, 1}, []int{1, 0, 0, 1, 1}, []int{0, 0, 0, 0, 0}, []int{1, 0, 1, 0, 1}}
		fmt.Println(count_islands(func(v any) [][]int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]int{}
				}
				out := make([][]int, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []int {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]int); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []int{}
							}
							out := make([]int, len(arr))
							for i, x := range arr {
								out[i] = x.(int)
							}
							return out
						}
						return v.([]int)
					}(x)
				}
				return out
			}
			return v.([][]int)
		}(grid)))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
