//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-16 09:44:04 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func populate_current_row(triangle [][]int, current_row_idx int) []int {
	var row []int = []int{}
	_ = row
	var i int = 0
	_ = i
	for i <= current_row_idx {
		if (i == 0) || (i == current_row_idx) {
			row = append(row, 1)
		} else {
			var left int = _index(_index(triangle, (current_row_idx-1)), (i - 1))
			_ = left
			var right int = _index(_index(triangle, (current_row_idx-1)), i)
			_ = right
			row = append(row, (left + right))
		}
		i = (i + 1)
	}
	return row
}

func generate_pascal_triangle(num_rows int) [][]int {
	if num_rows <= 0 {
		return func(v any) [][]int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]int{}
				}
				out := make([][]int, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []int {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]int); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []int{}
							}
							out := make([]int, len(arr))
							for i, x := range arr {
								out[i] = x.(int)
							}
							return out
						}
						return v.([]int)
					}(x)
				}
				return out
			}
			return v.([][]int)
		}([][]int{})
	}
	var triangle [][]int = [][]int{}
	_ = triangle
	var row_idx int = 0
	_ = row_idx
	for row_idx < num_rows {
		var row []int = populate_current_row(func(v any) [][]int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]int{}
				}
				out := make([][]int, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []int {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]int); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []int{}
							}
							out := make([]int, len(arr))
							for i, x := range arr {
								out[i] = x.(int)
							}
							return out
						}
						return v.([]int)
					}(x)
				}
				return out
			}
			return v.([][]int)
		}(triangle), row_idx)
		_ = row
		triangle = append(triangle, row)
		row_idx = (row_idx + 1)
	}
	return triangle
}

func row_to_string(row []int, total_rows int, row_idx int) string {
	var line string = ""
	_ = line
	var spaces int = ((total_rows - row_idx) - 1)
	_ = spaces
	var s int = 0
	_ = s
	for s < spaces {
		line = (line + " ")
		s = (s + 1)
	}
	var c int = 0
	_ = c
	for c <= row_idx {
		line = (line + fmt.Sprint(_index(row, c)))
		if c != row_idx {
			line = (line + " ")
		}
		c = (c + 1)
	}
	return line
}

func print_pascal_triangle(num_rows int) {
	var triangle [][]int = generate_pascal_triangle(num_rows)
	_ = triangle
	var r int = 0
	_ = r
	for r < num_rows {
		var line string = row_to_string(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(_index(triangle, r)), num_rows, r)
		_ = line
		fmt.Println(line)
		r = (r + 1)
	}
}

func mochiMain() {
	print_pascal_triangle(5)
	fmt.Println(fmt.Sprint(generate_pascal_triangle(5)))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
