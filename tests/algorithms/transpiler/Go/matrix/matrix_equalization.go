//go:build ignore

// Generated by Mochi v0.10.67 on 2025-08-17 12:40:26 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func unique(nums []int) []int {
	var res []int = []int{}
	_ = res
	var i int = 0
	_ = i
	for i < len(nums) {
		var v int = _index(nums, i)
		_ = v
		var found bool = false
		_ = found
		var j int = 0
		_ = j
		for j < len(res) {
			if _index(res, j) == v {
				found = true
				break
			}
			j = (j + 1)
		}
		if !found {
			res = append(res, v)
		}
		i = (i + 1)
	}
	return res
}

func array_equalization(vector []int, step_size int) int {
	if step_size <= 0 {
		panic("Step size must be positive and non-zero.")
	}
	var elems []int = unique(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(vector))
	_ = elems
	var min_updates int = len(vector)
	_ = min_updates
	var i int = 0
	_ = i
	for i < len(elems) {
		var target int = _index(elems, i)
		_ = target
		var idx int = 0
		_ = idx
		var updates int = 0
		_ = updates
		for idx < len(vector) {
			if _index(vector, idx) != target {
				updates = (updates + 1)
				idx = (idx + step_size)
			} else {
				idx = (idx + 1)
			}
		}
		if updates < min_updates {
			min_updates = updates
		}
		i = (i + 1)
	}
	return min_updates
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(fmt.Sprint(array_equalization(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}([]int{1, 1, 6, 2, 4, 6, 5, 1, 7, 2, 2, 1, 7, 2, 2}), 4)))
		fmt.Println(fmt.Sprint(array_equalization(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}([]int{22, 81, 88, 71, 22, 81, 632, 81, 81, 22, 92}), 2)))
		fmt.Println(fmt.Sprint(array_equalization(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}([]int{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}), 5)))
		fmt.Println(fmt.Sprint(array_equalization(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}([]int{22, 22, 22, 33, 33, 33}), 2)))
		fmt.Println(fmt.Sprint(array_equalization(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}([]int{1, 2, 3}), 2147483647)))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
