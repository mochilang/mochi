//go:build ignore

// Generated by Mochi v0.10.64 on 2025-08-12 09:20:07 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	s[idx] = v
}

func _concat[T any](a, b []T) []T {
	return append(append([]T{}, a...), b...)
}

type Coord struct {
	X int `json:"x"`
	Y int `json:"y"`
}

type PlayResult struct {
	Matrix [][]string `json:"matrix"`
	Score  int        `json:"score"`
}

func is_alnum(ch string) bool {
	return ((((ch >= "0") && (ch <= "9")) || ((ch >= "A") && (ch <= "Z"))) || ((ch >= "a") && (ch <= "z")))
}

func to_int(token string) int {
	var res int = 0
	_ = res
	var i int = 0
	_ = i
	for i < len(token) {
		res = ((res * 10) + func() int { n, _ := strconv.Atoi(fmt.Sprint(_substr(token, i, (i + 1)))); return n }())
		i = (i + 1)
	}
	return res
}

func split(s string, sep string) []string {
	var res []string = []string{}
	_ = res
	var current string = ""
	_ = current
	var i int = 0
	_ = i
	for i < len(s) {
		var ch string = _substr(s, i, (i + 1))
		_ = ch
		if ch == sep {
			res = append(res, current)
			current = ""
		} else {
			current = (current + ch)
		}
		i = (i + 1)
	}
	res = append(res, current)
	return res
}

func parse_moves(input_str string) []Coord {
	var pairs []string = split(input_str, ",")
	_ = pairs
	var moves []Coord = []Coord{}
	_ = moves
	var i int = 0
	_ = i
	for i < len(pairs) {
		var pair string = _index(pairs, i)
		_ = pair
		var numbers []string = []string{}
		_ = numbers
		var num string = ""
		_ = num
		var j int = 0
		_ = j
		for j < len(pair) {
			var ch string = _substr(pair, j, (j + 1))
			_ = ch
			if ch == " " {
				if num != "" {
					numbers = append(numbers, num)
					num = ""
				}
			} else {
				num = (num + ch)
			}
			j = (j + 1)
		}
		if num != "" {
			numbers = append(numbers, num)
		}
		if len(numbers) != 2 {
			panic("Each move must have exactly two numbers.")
		}
		var x int = to_int(_index(numbers, 0))
		_ = x
		var y int = to_int(_index(numbers, 1))
		_ = y
		moves = append(moves, Coord{
			X: x,
			Y: y,
		})
		i = (i + 1)
	}
	return moves
}

func validate_matrix_size(size int) {
	if size <= 0 {
		panic("Matrix size must be a positive integer.")
	}
}

func validate_matrix_content(matrix []string, size int) {
	if len(matrix) != size {
		panic("The matrix dont match with size.")
	}
	var i int = 0
	_ = i
	for i < size {
		var row string = _index(matrix, i)
		_ = row
		if len(row) != size {
			panic((("Each row in the matrix must have exactly " + fmt.Sprint(size)) + " characters."))
		}
		var j int = 0
		_ = j
		for j < size {
			var ch string = _substr(row, j, (j + 1))
			_ = ch
			if !is_alnum(ch) {
				panic("Matrix rows can only contain letters and numbers.")
			}
			j = (j + 1)
		}
		i = (i + 1)
	}
}

func validate_moves(moves []Coord, size int) {
	var i int = 0
	_ = i
	for i < len(moves) {
		var mv Coord = _index(moves, i)
		_ = mv
		if (((mv.X < 0) || (mv.X >= size)) || (mv.Y < 0)) || (mv.Y >= size) {
			panic("Move is out of bounds for a matrix.")
		}
		i = (i + 1)
	}
}

func contains(pos []Coord, r int, c int) bool {
	var i int = 0
	_ = i
	for i < len(pos) {
		var p Coord = _index(pos, i)
		_ = p
		if (p.X == r) && (p.Y == c) {
			return true
		}
		i = (i + 1)
	}
	return false
}

func find_repeat(matrix_g [][]string, row int, column int, size int) []Coord {
	column = ((size - 1) - column)
	var visited []Coord = []Coord{}
	_ = visited
	var repeated []Coord = []Coord{}
	_ = repeated
	var color string = _index(_index(matrix_g, column), row)
	_ = color
	if color == "-" {
		return repeated
	}
	var stack []Coord = []Coord{Coord{
		X: column,
		Y: row,
	}}
	_ = stack
	for len(stack) > 0 {
		var idx int = (len(stack) - 1)
		_ = idx
		var pos Coord = _index(stack, idx)
		_ = pos
		stack = stack[0:idx]
		if (((pos.X < 0) || (pos.X >= size)) || (pos.Y < 0)) || (pos.Y >= size) {
			continue
		}
		if contains(visited, pos.X, pos.Y) {
			continue
		}
		visited = append(visited, pos)
		if _index(_index(matrix_g, pos.X), pos.Y) == color {
			repeated = append(repeated, pos)
			stack = append(stack, Coord{
				X: (pos.X - 1),
				Y: pos.Y,
			})
			stack = append(stack, Coord{
				X: (pos.X + 1),
				Y: pos.Y,
			})
			stack = append(stack, Coord{
				X: pos.X,
				Y: (pos.Y - 1),
			})
			stack = append(stack, Coord{
				X: pos.X,
				Y: (pos.Y + 1),
			})
		}
	}
	return repeated
}

func increment_score(count int) int {
	return ((count * (count + 1)) / 2)
}

func move_x(matrix_g [][]string, column int, size int) [][]string {
	var new_list []string = []string{}
	_ = new_list
	var row int = 0
	_ = row
	for row < size {
		var val string = _index(_index(matrix_g, row), column)
		_ = val
		if val != "-" {
			new_list = append(new_list, val)
		} else {
			new_list = _concat([]string{val}, new_list)
		}
		row = (row + 1)
	}
	row = 0
	for row < size {
		_setIndex(_index(matrix_g, row), column, _index(new_list, row))
		row = (row + 1)
	}
	return matrix_g
}

func move_y(matrix_g [][]string, size int) [][]string {
	var empty_cols []int = []int{}
	_ = empty_cols
	var column int = (size - 1)
	_ = column
	for column >= 0 {
		var row int = 0
		_ = row
		var all_empty bool = true
		_ = all_empty
		for row < size {
			if _index(_index(matrix_g, row), column) != "-" {
				all_empty = false
				break
			}
			row = (row + 1)
		}
		if all_empty {
			empty_cols = append(empty_cols, column)
		}
		column = (column - 1)
	}
	var i int = 0
	_ = i
	for i < len(empty_cols) {
		var col int = _index(empty_cols, i)
		_ = col
		var c int = (col + 1)
		_ = c
		for c < size {
			var r int = 0
			_ = r
			for r < size {
				_setIndex(_index(matrix_g, r), (c - 1), _index(_index(matrix_g, r), c))
				r = (r + 1)
			}
			c = (c + 1)
		}
		var r int = 0
		_ = r
		for r < size {
			_setIndex(_index(matrix_g, r), (size - 1), "-")
			r = (r + 1)
		}
		i = (i + 1)
	}
	return matrix_g
}

func play(matrix_g [][]string, pos_x int, pos_y int, size int) PlayResult {
	var same_colors []Coord = find_repeat(func(v any) [][]string {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]string); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]string{}
			}
			out := make([][]string, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []string {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]string); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []string{}
						}
						out := make([]string, len(arr))
						for i, x := range arr {
							out[i] = x.(string)
						}
						return out
					}
					return v.([]string)
				}(x)
			}
			return out
		}
		return v.([][]string)
	}(matrix_g), pos_x, pos_y, size)
	_ = same_colors
	if len(same_colors) != 0 {
		var i int = 0
		_ = i
		for i < len(same_colors) {
			var p Coord = _index(same_colors, i)
			_ = p
			_setIndex(_index(matrix_g, p.X), p.Y, "-")
			i = (i + 1)
		}
		var column int = 0
		_ = column
		for column < size {
			matrix_g = move_x(func(v any) [][]string {
				if v == nil {
					return nil
				}
				if vv, ok := v.([][]string); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return [][]string{}
					}
					out := make([][]string, len(arr))
					for i, x := range arr {
						out[i] = func(v any) []string {
							if v == nil {
								return nil
							}
							if vv, ok := v.([]string); ok {
								return vv
							}
							if arr, ok := v.([]any); ok {
								if len(arr) == 0 {
									return []string{}
								}
								out := make([]string, len(arr))
								for i, x := range arr {
									out[i] = x.(string)
								}
								return out
							}
							return v.([]string)
						}(x)
					}
					return out
				}
				return v.([][]string)
			}(matrix_g), column, size)
			column = (column + 1)
		}
		matrix_g = move_y(func(v any) [][]string {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]string); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]string{}
				}
				out := make([][]string, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []string {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]string); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []string{}
							}
							out := make([]string, len(arr))
							for i, x := range arr {
								out[i] = x.(string)
							}
							return out
						}
						return v.([]string)
					}(x)
				}
				return out
			}
			return v.([][]string)
		}(matrix_g), size)
	}
	var sc int = increment_score(len(same_colors))
	_ = sc
	_ = sc
	return PlayResult{
		Matrix: matrix_g,
		Score:  sc,
	}
}

func build_matrix(matrix []string) [][]string {
	var res [][]string = [][]string{}
	_ = res
	var i int = 0
	_ = i
	for i < len(matrix) {
		var row string = _index(matrix, i)
		_ = row
		var row_list []string = []string{}
		_ = row_list
		var j int = 0
		_ = j
		for j < len(row) {
			row_list = append(row_list, _substr(row, j, (j+1)))
			j = (j + 1)
		}
		res = append(res, row_list)
		i = (i + 1)
	}
	return res
}

func process_game(size int, matrix []string, moves []Coord) int {
	var game_matrix [][]string = build_matrix(func(v any) []string {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]string); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []string{}
			}
			out := make([]string, len(arr))
			for i, x := range arr {
				out[i] = fmt.Sprint(x)
			}
			return out
		}
		return v.([]string)
	}(matrix))
	_ = game_matrix
	var total int = 0
	_ = total
	var i int = 0
	_ = i
	for i < len(moves) {
		var mv Coord = _index(moves, i)
		_ = mv
		var res PlayResult = play(func(v any) [][]string {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]string); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]string{}
				}
				out := make([][]string, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []string {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]string); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []string{}
							}
							out := make([]string, len(arr))
							for i, x := range arr {
								out[i] = x.(string)
							}
							return out
						}
						return v.([]string)
					}(x)
				}
				return out
			}
			return v.([][]string)
		}(game_matrix), mv.X, mv.Y, size)
		_ = res
		game_matrix = res.Matrix
		total = (total + res.Score)
		i = (i + 1)
	}
	return total
}

func mochiMain() {
	var size int = 4
	_ = size
	var matrix []string = []string{"RRBG", "RBBG", "YYGG", "XYGG"}
	_ = matrix
	var moves []Coord = parse_moves("0 1,1 1")
	_ = moves
	validate_matrix_size(size)
	validate_matrix_content(func(v any) []string {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]string); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []string{}
			}
			out := make([]string, len(arr))
			for i, x := range arr {
				out[i] = fmt.Sprint(x)
			}
			return out
		}
		return v.([]string)
	}(matrix), size)
	validate_moves(func(v any) []Coord {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]Coord); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []Coord{}
			}
			out := make([]Coord, len(arr))
			for i, x := range arr {
				out[i] = x.(Coord)
			}
			return out
		}
		return v.([]Coord)
	}(moves), size)
	var score int = process_game(size, func(v any) []string {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]string); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []string{}
			}
			out := make([]string, len(arr))
			for i, x := range arr {
				out[i] = fmt.Sprint(x)
			}
			return out
		}
		return v.([]string)
	}(matrix), func(v any) []Coord {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]Coord); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []Coord{}
			}
			out := make([]Coord, len(arr))
			for i, x := range arr {
				out[i] = x.(Coord)
			}
			return out
		}
		return v.([]Coord)
	}(moves))
	_ = score
	fmt.Println(fmt.Sprint(score))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
