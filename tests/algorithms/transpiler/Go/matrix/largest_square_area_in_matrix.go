//go:build ignore

// Generated by Mochi v0.10.67 on 2025-08-17 12:40:22 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		return
	}
	s[idx] = v
}

func update_area_of_max_square(row int, col int, rows int, cols int, mat [][]int, largest_square_area []int) int {
	if (row >= rows) || (col >= cols) {
		return 0
	}
	var right int = update_area_of_max_square(row, (col + 1), rows, cols, func(v any) [][]int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]int{}
			}
			out := make([][]int, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []int {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]int); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []int{}
						}
						out := make([]int, len(arr))
						for i, x := range arr {
							out[i] = x.(int)
						}
						return out
					}
					return v.([]int)
				}(x)
			}
			return out
		}
		return v.([][]int)
	}(mat), func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(largest_square_area))
	_ = right
	_ = right
	var diagonal int = update_area_of_max_square((row + 1), (col + 1), rows, cols, func(v any) [][]int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]int{}
			}
			out := make([][]int, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []int {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]int); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []int{}
						}
						out := make([]int, len(arr))
						for i, x := range arr {
							out[i] = x.(int)
						}
						return out
					}
					return v.([]int)
				}(x)
			}
			return out
		}
		return v.([][]int)
	}(mat), func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(largest_square_area))
	_ = diagonal
	_ = diagonal
	var down int = update_area_of_max_square((row + 1), col, rows, cols, func(v any) [][]int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]int{}
			}
			out := make([][]int, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []int {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]int); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []int{}
						}
						out := make([]int, len(arr))
						for i, x := range arr {
							out[i] = x.(int)
						}
						return out
					}
					return v.([]int)
				}(x)
			}
			return out
		}
		return v.([][]int)
	}(mat), func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(largest_square_area))
	_ = down
	_ = down
	if _index(_index(mat, row), col) == 1 {
		var sub int = (1 + func() int {
			if len([]int{func(v any) int {
				if vv, ok := v.(int); ok {
					return vv
				}
				return 0
			}(right), func(v any) int {
				if vv, ok := v.(int); ok {
					return vv
				}
				return 0
			}(diagonal), func(v any) int {
				if vv, ok := v.(int); ok {
					return vv
				}
				return 0
			}(down)}) == 0 {
				return 0
			}
			m := []int{func(v any) int {
				if vv, ok := v.(int); ok {
					return vv
				}
				return 0
			}(right), func(v any) int {
				if vv, ok := v.(int); ok {
					return vv
				}
				return 0
			}(diagonal), func(v any) int {
				if vv, ok := v.(int); ok {
					return vv
				}
				return 0
			}(down)}[0]
			for _, n := range []int{func(v any) int {
				if vv, ok := v.(int); ok {
					return vv
				}
				return 0
			}(right), func(v any) int {
				if vv, ok := v.(int); ok {
					return vv
				}
				return 0
			}(diagonal), func(v any) int {
				if vv, ok := v.(int); ok {
					return vv
				}
				return 0
			}(down)}[1:] {
				if n < m {
					m = n
				}
			}
			return m
		}())
		_ = sub
		if sub > _index(largest_square_area, 0) {
			_setIndex(largest_square_area, 0, sub)
		}
		return sub
	} else {
		return 0
	}
}

func largest_square_area_in_matrix_top_down(rows int, cols int, mat [][]int) int {
	var largest []int = []int{0}
	_ = largest
	update_area_of_max_square(0, 0, rows, cols, func(v any) [][]int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]int{}
			}
			out := make([][]int, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []int {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]int); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []int{}
						}
						out := make([]int, len(arr))
						for i, x := range arr {
							out[i] = x.(int)
						}
						return out
					}
					return v.([]int)
				}(x)
			}
			return out
		}
		return v.([][]int)
	}(mat), func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(largest))
	return _index(largest, 0)
}

func update_area_of_max_square_with_dp(row int, col int, rows int, cols int, mat [][]int, dp_array [][]int, largest_square_area []int) int {
	if (row >= rows) || (col >= cols) {
		return 0
	}
	if _index(_index(dp_array, row), col) != (0 - 1) {
		return _index(_index(dp_array, row), col)
	}
	var right int = update_area_of_max_square_with_dp(row, (col + 1), rows, cols, func(v any) [][]int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]int{}
			}
			out := make([][]int, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []int {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]int); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []int{}
						}
						out := make([]int, len(arr))
						for i, x := range arr {
							out[i] = x.(int)
						}
						return out
					}
					return v.([]int)
				}(x)
			}
			return out
		}
		return v.([][]int)
	}(mat), func(v any) [][]int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]int{}
			}
			out := make([][]int, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []int {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]int); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []int{}
						}
						out := make([]int, len(arr))
						for i, x := range arr {
							out[i] = x.(int)
						}
						return out
					}
					return v.([]int)
				}(x)
			}
			return out
		}
		return v.([][]int)
	}(dp_array), func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(largest_square_area))
	_ = right
	_ = right
	var diagonal int = update_area_of_max_square_with_dp((row + 1), (col + 1), rows, cols, func(v any) [][]int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]int{}
			}
			out := make([][]int, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []int {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]int); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []int{}
						}
						out := make([]int, len(arr))
						for i, x := range arr {
							out[i] = x.(int)
						}
						return out
					}
					return v.([]int)
				}(x)
			}
			return out
		}
		return v.([][]int)
	}(mat), func(v any) [][]int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]int{}
			}
			out := make([][]int, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []int {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]int); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []int{}
						}
						out := make([]int, len(arr))
						for i, x := range arr {
							out[i] = x.(int)
						}
						return out
					}
					return v.([]int)
				}(x)
			}
			return out
		}
		return v.([][]int)
	}(dp_array), func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(largest_square_area))
	_ = diagonal
	_ = diagonal
	var down int = update_area_of_max_square_with_dp((row + 1), col, rows, cols, func(v any) [][]int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]int{}
			}
			out := make([][]int, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []int {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]int); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []int{}
						}
						out := make([]int, len(arr))
						for i, x := range arr {
							out[i] = x.(int)
						}
						return out
					}
					return v.([]int)
				}(x)
			}
			return out
		}
		return v.([][]int)
	}(mat), func(v any) [][]int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]int{}
			}
			out := make([][]int, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []int {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]int); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []int{}
						}
						out := make([]int, len(arr))
						for i, x := range arr {
							out[i] = x.(int)
						}
						return out
					}
					return v.([]int)
				}(x)
			}
			return out
		}
		return v.([][]int)
	}(dp_array), func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(largest_square_area))
	_ = down
	_ = down
	if _index(_index(mat, row), col) == 1 {
		var sub int = (1 + func() int {
			if len([]int{func(v any) int {
				if vv, ok := v.(int); ok {
					return vv
				}
				return 0
			}(right), func(v any) int {
				if vv, ok := v.(int); ok {
					return vv
				}
				return 0
			}(diagonal), func(v any) int {
				if vv, ok := v.(int); ok {
					return vv
				}
				return 0
			}(down)}) == 0 {
				return 0
			}
			m := []int{func(v any) int {
				if vv, ok := v.(int); ok {
					return vv
				}
				return 0
			}(right), func(v any) int {
				if vv, ok := v.(int); ok {
					return vv
				}
				return 0
			}(diagonal), func(v any) int {
				if vv, ok := v.(int); ok {
					return vv
				}
				return 0
			}(down)}[0]
			for _, n := range []int{func(v any) int {
				if vv, ok := v.(int); ok {
					return vv
				}
				return 0
			}(right), func(v any) int {
				if vv, ok := v.(int); ok {
					return vv
				}
				return 0
			}(diagonal), func(v any) int {
				if vv, ok := v.(int); ok {
					return vv
				}
				return 0
			}(down)}[1:] {
				if n < m {
					m = n
				}
			}
			return m
		}())
		_ = sub
		if sub > _index(largest_square_area, 0) {
			_setIndex(largest_square_area, 0, sub)
		}
		_setIndex(_index(dp_array, row), col, sub)
		return sub
	} else {
		_setIndex(_index(dp_array, row), col, 0)
		return 0
	}
}

func largest_square_area_in_matrix_top_down_with_dp(rows int, cols int, mat [][]int) int {
	var largest []int = []int{0}
	_ = largest
	var dp_array [][]int = [][]int{}
	_ = dp_array
	var r int = 0
	_ = r
	for r < rows {
		var row_list []int = []int{}
		_ = row_list
		var c int = 0
		_ = c
		for c < cols {
			row_list = append(row_list, (0 - 1))
			c = (c + 1)
		}
		dp_array = append(dp_array, row_list)
		r = (r + 1)
	}
	update_area_of_max_square_with_dp(0, 0, rows, cols, func(v any) [][]int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]int{}
			}
			out := make([][]int, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []int {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]int); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []int{}
						}
						out := make([]int, len(arr))
						for i, x := range arr {
							out[i] = x.(int)
						}
						return out
					}
					return v.([]int)
				}(x)
			}
			return out
		}
		return v.([][]int)
	}(mat), func(v any) [][]int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]int{}
			}
			out := make([][]int, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []int {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]int); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []int{}
						}
						out := make([]int, len(arr))
						for i, x := range arr {
							out[i] = x.(int)
						}
						return out
					}
					return v.([]int)
				}(x)
			}
			return out
		}
		return v.([][]int)
	}(dp_array), func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(largest))
	return _index(largest, 0)
}

func largest_square_area_in_matrix_bottom_up(rows int, cols int, mat [][]int) int {
	var dp_array [][]int = [][]int{}
	_ = dp_array
	var r int = 0
	_ = r
	for r <= rows {
		var row_list []int = []int{}
		_ = row_list
		var c int = 0
		_ = c
		for c <= cols {
			row_list = append(row_list, 0)
			c = (c + 1)
		}
		dp_array = append(dp_array, row_list)
		r = (r + 1)
	}
	var largest int = 0
	_ = largest
	var row int = (rows - 1)
	_ = row
	for row >= 0 {
		var col int = (cols - 1)
		_ = col
		for col >= 0 {
			var right int = _index(_index(dp_array, row), (col + 1))
			_ = right
			_ = right
			var diagonal int = _index(_index(dp_array, (row+1)), (col + 1))
			_ = diagonal
			_ = diagonal
			var bottom int = _index(_index(dp_array, (row+1)), col)
			_ = bottom
			_ = bottom
			if _index(_index(mat, row), col) == 1 {
				var value int = (1 + func() int {
					if len([]int{func(v any) int {
						if vv, ok := v.(int); ok {
							return vv
						}
						return 0
					}(right), func(v any) int {
						if vv, ok := v.(int); ok {
							return vv
						}
						return 0
					}(diagonal), func(v any) int {
						if vv, ok := v.(int); ok {
							return vv
						}
						return 0
					}(bottom)}) == 0 {
						return 0
					}
					m := []int{func(v any) int {
						if vv, ok := v.(int); ok {
							return vv
						}
						return 0
					}(right), func(v any) int {
						if vv, ok := v.(int); ok {
							return vv
						}
						return 0
					}(diagonal), func(v any) int {
						if vv, ok := v.(int); ok {
							return vv
						}
						return 0
					}(bottom)}[0]
					for _, n := range []int{func(v any) int {
						if vv, ok := v.(int); ok {
							return vv
						}
						return 0
					}(right), func(v any) int {
						if vv, ok := v.(int); ok {
							return vv
						}
						return 0
					}(diagonal), func(v any) int {
						if vv, ok := v.(int); ok {
							return vv
						}
						return 0
					}(bottom)}[1:] {
						if n < m {
							m = n
						}
					}
					return m
				}())
				_ = value
				_setIndex(_index(dp_array, row), col, value)
				if value > largest {
					largest = value
				}
			} else {
				_setIndex(_index(dp_array, row), col, 0)
			}
			col = (col - 1)
		}
		row = (row - 1)
	}
	return largest
}

func largest_square_area_in_matrix_bottom_up_space_optimization(rows int, cols int, mat [][]int) int {
	var current_row []int = []int{}
	_ = current_row
	var i int = 0
	_ = i
	for i <= cols {
		current_row = append(current_row, 0)
		i = (i + 1)
	}
	var next_row []int = []int{}
	_ = next_row
	var j int = 0
	_ = j
	for j <= cols {
		next_row = append(next_row, 0)
		j = (j + 1)
	}
	var largest int = 0
	_ = largest
	var row int = (rows - 1)
	_ = row
	for row >= 0 {
		var col int = (cols - 1)
		_ = col
		for col >= 0 {
			var right int = _index(current_row, (col + 1))
			_ = right
			_ = right
			var diagonal int = _index(next_row, (col + 1))
			_ = diagonal
			_ = diagonal
			var bottom int = _index(next_row, col)
			_ = bottom
			_ = bottom
			if _index(_index(mat, row), col) == 1 {
				var value int = (1 + func() int {
					if len([]int{func(v any) int {
						if vv, ok := v.(int); ok {
							return vv
						}
						return 0
					}(right), func(v any) int {
						if vv, ok := v.(int); ok {
							return vv
						}
						return 0
					}(diagonal), func(v any) int {
						if vv, ok := v.(int); ok {
							return vv
						}
						return 0
					}(bottom)}) == 0 {
						return 0
					}
					m := []int{func(v any) int {
						if vv, ok := v.(int); ok {
							return vv
						}
						return 0
					}(right), func(v any) int {
						if vv, ok := v.(int); ok {
							return vv
						}
						return 0
					}(diagonal), func(v any) int {
						if vv, ok := v.(int); ok {
							return vv
						}
						return 0
					}(bottom)}[0]
					for _, n := range []int{func(v any) int {
						if vv, ok := v.(int); ok {
							return vv
						}
						return 0
					}(right), func(v any) int {
						if vv, ok := v.(int); ok {
							return vv
						}
						return 0
					}(diagonal), func(v any) int {
						if vv, ok := v.(int); ok {
							return vv
						}
						return 0
					}(bottom)}[1:] {
						if n < m {
							m = n
						}
					}
					return m
				}())
				_ = value
				_setIndex(current_row, col, value)
				if value > largest {
					largest = value
				}
			} else {
				_setIndex(current_row, col, 0)
			}
			col = (col - 1)
		}
		next_row = current_row
		current_row = []int{}
		var t int = 0
		_ = t
		for t <= cols {
			current_row = append(current_row, 0)
			t = (t + 1)
		}
		row = (row - 1)
	}
	return largest
}

var sample [][]int

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		sample = [][]int{[]int{1, 1}, []int{1, 1}}
		fmt.Println(largest_square_area_in_matrix_top_down(2, 2, func(v any) [][]int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]int{}
				}
				out := make([][]int, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []int {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]int); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []int{}
							}
							out := make([]int, len(arr))
							for i, x := range arr {
								out[i] = x.(int)
							}
							return out
						}
						return v.([]int)
					}(x)
				}
				return out
			}
			return v.([][]int)
		}(sample)))
		fmt.Println(largest_square_area_in_matrix_top_down_with_dp(2, 2, func(v any) [][]int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]int{}
				}
				out := make([][]int, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []int {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]int); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []int{}
							}
							out := make([]int, len(arr))
							for i, x := range arr {
								out[i] = x.(int)
							}
							return out
						}
						return v.([]int)
					}(x)
				}
				return out
			}
			return v.([][]int)
		}(sample)))
		fmt.Println(largest_square_area_in_matrix_bottom_up(2, 2, func(v any) [][]int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]int{}
				}
				out := make([][]int, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []int {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]int); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []int{}
							}
							out := make([]int, len(arr))
							for i, x := range arr {
								out[i] = x.(int)
							}
							return out
						}
						return v.([]int)
					}(x)
				}
				return out
			}
			return v.([][]int)
		}(sample)))
		fmt.Println(largest_square_area_in_matrix_bottom_up_space_optimization(2, 2, func(v any) [][]int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]int{}
				}
				out := make([][]int, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []int {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]int); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []int{}
							}
							out := make([]int, len(arr))
							for i, x := range arr {
								out[i] = x.(int)
							}
							return out
						}
						return v.([]int)
					}(x)
				}
				return out
			}
			return v.([][]int)
		}(sample)))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
