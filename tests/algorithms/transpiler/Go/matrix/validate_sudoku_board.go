//go:build ignore

// Generated by Mochi v0.10.64 on 2025-08-12 09:20:37 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"reflect"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	s[idx] = v
}

var NUM_SQUARES int

var EMPTY_CELL string

func is_valid_sudoku_board(board [][]string) bool {
	if len(board) != NUM_SQUARES {
		return false
	}
	var i int = 0
	_ = i
	for i < NUM_SQUARES {
		if len(_index(board, i)) != NUM_SQUARES {
			return false
		}
		i = (i + 1)
	}
	var rows [][]string = [][]string{}
	_ = rows
	var cols [][]string = [][]string{}
	_ = cols
	var boxes [][]string = [][]string{}
	_ = boxes
	i = 0
	for i < NUM_SQUARES {
		rows = append(rows, []string{})
		cols = append(cols, []string{})
		boxes = append(boxes, []string{})
		i = (i + 1)
	}
	for r := 0; r < NUM_SQUARES; r++ {
		for c := 0; c < NUM_SQUARES; c++ {
			var value string = _index(_index(board, r), c)
			_ = value
			if value == EMPTY_CELL {
				continue
			}
			var box int = ((int((r / 3)) * 3) + int((c / 3)))
			_ = box
			if (func() bool {
				v := reflect.ValueOf(_index(rows, r))
				if v.Kind() == reflect.Map {
					key := value
					return v.MapIndex(reflect.ValueOf(key)).IsValid()
				}
				if v.Kind() == reflect.Slice || v.Kind() == reflect.Array {
					for i := 0; i < v.Len(); i++ {
						if v.Index(i).Interface() == value {
							return true
						}
					}
				}
				return false
			}() || func() bool {
				v := reflect.ValueOf(_index(cols, c))
				if v.Kind() == reflect.Map {
					key := value
					return v.MapIndex(reflect.ValueOf(key)).IsValid()
				}
				if v.Kind() == reflect.Slice || v.Kind() == reflect.Array {
					for i := 0; i < v.Len(); i++ {
						if v.Index(i).Interface() == value {
							return true
						}
					}
				}
				return false
			}()) || func() bool {
				v := reflect.ValueOf(_index(boxes, box))
				if v.Kind() == reflect.Map {
					key := value
					return v.MapIndex(reflect.ValueOf(key)).IsValid()
				}
				if v.Kind() == reflect.Slice || v.Kind() == reflect.Array {
					for i := 0; i < v.Len(); i++ {
						if v.Index(i).Interface() == value {
							return true
						}
					}
				}
				return false
			}() {
				return false
			}
			_setIndex(rows, r, append(_index(rows, r), value))
			_setIndex(cols, c, append(_index(cols, c), value))
			_setIndex(boxes, box, append(_index(boxes, box), value))
		}
	}
	return true
}

var valid_board [][]string

var invalid_board [][]string

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		NUM_SQUARES = 9
		EMPTY_CELL = "."
		valid_board = [][]string{[]string{"5", "3", ".", ".", "7", ".", ".", ".", "."}, []string{"6", ".", ".", "1", "9", "5", ".", ".", "."}, []string{".", "9", "8", ".", ".", ".", ".", "6", "."}, []string{"8", ".", ".", ".", "6", ".", ".", ".", "3"}, []string{"4", ".", ".", "8", ".", "3", ".", ".", "1"}, []string{"7", ".", ".", ".", "2", ".", ".", ".", "6"}, []string{".", "6", ".", ".", ".", ".", "2", "8", "."}, []string{".", ".", ".", "4", "1", "9", ".", ".", "5"}, []string{".", ".", ".", ".", "8", ".", ".", "7", "9"}}
		invalid_board = [][]string{[]string{"8", "3", ".", ".", "7", ".", ".", ".", "."}, []string{"6", ".", ".", "1", "9", "5", ".", ".", "."}, []string{".", "9", "8", ".", ".", ".", ".", "6", "."}, []string{"8", ".", ".", ".", "6", ".", ".", ".", "3"}, []string{"4", ".", ".", "8", ".", "3", ".", ".", "1"}, []string{"7", ".", ".", ".", "2", ".", ".", ".", "6"}, []string{".", "6", ".", ".", ".", ".", "2", "8", "."}, []string{".", ".", ".", "4", "1", "9", ".", ".", "5"}, []string{".", ".", ".", ".", "8", ".", ".", "7", "9"}}
		fmt.Println(is_valid_sudoku_board(func(v any) [][]string {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]string); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]string{}
				}
				out := make([][]string, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []string {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]string); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []string{}
							}
							out := make([]string, len(arr))
							for i, x := range arr {
								out[i] = x.(string)
							}
							return out
						}
						return v.([]string)
					}(x)
				}
				return out
			}
			return v.([][]string)
		}(valid_board)))
		fmt.Println(is_valid_sudoku_board(func(v any) [][]string {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]string); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]string{}
				}
				out := make([][]string, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []string {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]string); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []string{}
							}
							out := make([]string, len(arr))
							for i, x := range arr {
								out[i] = x.(string)
							}
							return out
						}
						return v.([]string)
					}(x)
				}
				return out
			}
			return v.([][]string)
		}(invalid_board)))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
