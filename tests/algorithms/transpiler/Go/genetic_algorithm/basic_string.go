//go:build ignore

// Generated by Mochi v0.10.65 on 2025-08-14 10:05:09 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

func evaluate(item string, target string) int {
	var score int = 0
	_ = score
	var i int = 0
	_ = i
	for (i < len(item)) && (i < len(target)) {
		if _substr(item, i, (i+1)) == _substr(target, i, (i+1)) {
			score = (score + 1)
		}
		i = (i + 1)
	}
	return score
}

type PairString struct {
	First  string `json:"first"`
	Second string `json:"second"`
}

func crossover(parent1 string, parent2 string) PairString {
	var cut int = (len(parent1) / 2)
	_ = cut
	var child1 string = (_substr(parent1, 0, cut) + _substr(parent2, cut, len(parent2)))
	_ = child1
	_ = child1
	var child2 string = (_substr(parent2, 0, cut) + _substr(parent1, cut, len(parent1)))
	_ = child2
	_ = child2
	return PairString{
		First:  child1,
		Second: child2,
	}
}

func mutate(child string, genes []string) string {
	if len(child) == 0 {
		return child
	}
	var gene string = _index(genes, 0)
	_ = gene
	_ = gene
	return (_substr(child, 0, (len(child)-1)) + gene)
}

func mochiMain() {
	fmt.Println(fmt.Sprint(evaluate("Helxo Worlx", "Hello World")))
	var pair PairString = crossover("123456", "abcdef")
	_ = pair
	fmt.Println(pair.First)
	fmt.Println(pair.Second)
	var mut string = mutate("123456", func(v any) []string {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]string); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []string{}
			}
			out := make([]string, len(arr))
			for i, x := range arr {
				out[i] = fmt.Sprint(x)
			}
			return out
		}
		return v.([]string)
	}([]string{"A", "B", "C", "D", "E", "F"}))
	_ = mut
	fmt.Println(mut)
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
