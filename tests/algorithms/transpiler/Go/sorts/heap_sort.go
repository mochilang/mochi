//go:build ignore

// Generated by Mochi v0.10.63 on 2025-08-11 16:29:52 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"strings"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	s[idx] = v
}

func heapify(arr []int, index int, heap_size int) {
	var largest int = index
	_ = largest
	var left_index int = ((2 * index) + 1)
	_ = left_index
	var right_index int = ((2 * index) + 2)
	_ = right_index
	if (left_index < heap_size) && (int(_index(arr, left_index)) > int(_index(arr, largest))) {
		largest = left_index
	}
	if (right_index < heap_size) && (int(_index(arr, right_index)) > int(_index(arr, largest))) {
		largest = right_index
	}
	if largest != index {
		var temp int = _index(arr, largest)
		_ = temp
		_setIndex(arr, largest, _index(arr, index))
		_setIndex(arr, index, temp)
		heapify(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(arr), largest, heap_size)
	}
}

func heap_sort(arr []int) []int {
	n := len(arr)
	_ = n
	var i any = ((n / 2) - 1)
	_ = i
	for i.(int) >= 0 {
		heapify(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(arr), i.(int), n)
		i = (i.(int) - 1)
	}
	i = (n - 1)
	for i.(int) > 0 {
		var temp int = _index(arr, 0)
		_ = temp
		_setIndex(arr, 0, _index(arr, i))
		_setIndex(arr, i, temp)
		heapify(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(arr), 0, i.(int))
		i = (i.(int) - 1)
	}
	return arr
}

var data []int

var result []int

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		data = []int{func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(3), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(7), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(9), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(28), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(123), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}((0 - 5)), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(8), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}((0 - 30)), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}((0 - 200)), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(0), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(4)}
		result = heap_sort(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(data))
		fmt.Println(func() string {
			b, _ := json.Marshal(result)
			s := string(b)
			s = strings.ReplaceAll(s, ":", ": ")
			s = strings.ReplaceAll(s, ",", ", ")
			s = strings.ReplaceAll(s, "}, {", "},{")
			return s
		}())
		if fmt.Sprint(result) != fmt.Sprint([]int{func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}((0 - 200)), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}((0 - 30)), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}((0 - 5)), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(0), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(3), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(4), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(7), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(8), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(9), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(28), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(123)}) {
			panic("Assertion error")
		}
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
