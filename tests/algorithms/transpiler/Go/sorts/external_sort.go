//go:build ignore

// Generated by Mochi v0.10.70 on 2025-08-23 01:30:08 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		return
	}
	s[idx] = v
}

func subarray(xs []int, start int, end int) []int {
	var result []int = []int{}
	_ = result
	var k int = start
	_ = k
	for k < end {
		result = append(result, _index(xs, k))
		k = (k + 1)
	}
	return result
}

func merge(left_half []int, right_half []int) []int {
	var result []int = []int{}
	_ = result
	var i int = 0
	_ = i
	var j int = 0
	_ = j
	for (i < len(left_half)) && (j < len(right_half)) {
		if _index(left_half, i) < _index(right_half, j) {
			result = append(result, _index(left_half, i))
			i = (i + 1)
		} else {
			result = append(result, _index(right_half, j))
			j = (j + 1)
		}
	}
	for i < len(left_half) {
		result = append(result, _index(left_half, i))
		i = (i + 1)
	}
	for j < len(right_half) {
		result = append(result, _index(right_half, j))
		j = (j + 1)
	}
	return result
}

func merge_sort(array []int) []int {
	if len(array) <= 1 {
		return array
	}
	var middle int = (len(array) / 2)
	_ = middle
	var left_half []int = subarray(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(array), 0, middle)
	_ = left_half
	var right_half []int = subarray(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(array), middle, len(array))
	_ = right_half
	var sorted_left []int = merge_sort(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(left_half))
	_ = sorted_left
	_ = sorted_left
	var sorted_right []int = merge_sort(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(right_half))
	_ = sorted_right
	_ = sorted_right
	return merge(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(sorted_left), func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(sorted_right))
}

func split_into_blocks(data []int, block_size int) [][]int {
	var blocks [][]int = [][]int{}
	_ = blocks
	var i int = 0
	_ = i
	for i < len(data) {
		var end int = func() int {
			if (i + block_size) < len(data) {
				return (i + block_size)
			} else {
				return len(data)
			}
		}()
		_ = end
		var block []int = subarray(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(data), i, end)
		_ = block
		var sorted_block []int = merge_sort(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(block))
		_ = sorted_block
		blocks = append(blocks, sorted_block)
		i = end
	}
	return blocks
}

func merge_blocks(blocks [][]int) []int {
	var num_blocks int = len(blocks)
	_ = num_blocks
	var indices []int = []int{}
	_ = indices
	var i int = 0
	_ = i
	for i < num_blocks {
		indices = append(indices, 0)
		i = (i + 1)
	}
	var result []int = []int{}
	_ = result
	var done bool = false
	_ = done
	for !done {
		done = true
		var min_val int = 0
		_ = min_val
		var min_block int = (0 - 1)
		_ = min_block
		var j int = 0
		_ = j
		for j < num_blocks {
			var idx int = _index(indices, j)
			_ = idx
			if idx < len(_index(blocks, j)) {
				var val int = _index(_index(blocks, j), idx)
				_ = val
				if (min_block == (0 - 1)) || (val < min_val) {
					min_val = val
					min_block = j
				}
				done = false
			}
			j = (j + 1)
		}
		if !done {
			result = append(result, min_val)
			_setIndex(indices, min_block, (_index(indices, min_block) + 1))
		}
	}
	return result
}

func external_sort(data []int, block_size int) []int {
	var blocks [][]int = split_into_blocks(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(data), block_size)
	_ = blocks
	_ = blocks
	return merge_blocks(func(v any) [][]int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]int{}
			}
			out := make([][]int, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []int {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]int); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []int{}
						}
						out := make([]int, len(arr))
						for i, x := range arr {
							out[i] = x.(int)
						}
						return out
					}
					return v.([]int)
				}(x)
			}
			return out
		}
		return v.([][]int)
	}(blocks))
}

func mochiMain() {
	var data []int = []int{7, 1, 5, 3, 9, 2, 6, 4, 8, 0}
	_ = data
	var sorted_data []int = external_sort(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(data), 3)
	_ = sorted_data
	_ = sorted_data
	fmt.Println(fmt.Sprint(sorted_data))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
