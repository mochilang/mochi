//go:build ignore

// Generated by Mochi v0.10.70 on 2025-08-23 01:30:41 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		return
	}
	s[idx] = v
}

func insertion_sort(a []int, start int, end_ int) []int {
	var arr []int = a
	_ = arr
	var i int = start
	_ = i
	for i < end_ {
		var key int = _index(arr, i)
		_ = key
		var j int = i
		_ = j
		for (j > start) && (_index(arr, (j-1)) > key) {
			_setIndex(arr, j, _index(arr, (j-1)))
			j = (j - 1)
		}
		_setIndex(arr, j, key)
		i = (i + 1)
	}
	return arr
}

func heapify(a []int, index int, heap_size int) []int {
	var arr []int = a
	_ = arr
	var largest int = index
	_ = largest
	var left int = ((2 * index) + 1)
	_ = left
	var right int = ((2 * index) + 2)
	_ = right
	if (left < heap_size) && (_index(arr, left) > _index(arr, largest)) {
		largest = left
	}
	if (right < heap_size) && (_index(arr, right) > _index(arr, largest)) {
		largest = right
	}
	if largest != index {
		var temp int = _index(arr, index)
		_ = temp
		_setIndex(arr, index, _index(arr, largest))
		_setIndex(arr, largest, temp)
		arr = heapify(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(arr), largest, heap_size)
	}
	return arr
}

func heap_sort(a []int) []int {
	var arr []int = a
	_ = arr
	var n int = len(arr)
	_ = n
	if n <= 1 {
		return arr
	}
	var i int = (n / 2)
	_ = i
	for {
		arr = heapify(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(arr), i, n)
		if i == 0 {
			break
		}
		i = (i - 1)
	}
	i = (n - 1)
	for i > 0 {
		var temp int = _index(arr, 0)
		_ = temp
		_setIndex(arr, 0, _index(arr, i))
		_setIndex(arr, i, temp)
		arr = heapify(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(arr), 0, i)
		i = (i - 1)
	}
	return arr
}

func median_of_3(arr []int, first int, middle int, last int) int {
	var a int = _index(arr, first)
	_ = a
	var b int = _index(arr, middle)
	_ = b
	var c int = _index(arr, last)
	_ = c
	if ((a > b) && (a < c)) || ((a < b) && (a > c)) {
		return a
	} else {
		if ((b > a) && (b < c)) || ((b < a) && (b > c)) {
			return b
		} else {
			return c
		}
	}
}

func partition(arr []int, low int, high int, pivot int) int {
	var i int = low
	_ = i
	var j int = high
	_ = j
	for {
		for _index(arr, i) < pivot {
			i = (i + 1)
		}
		j = (j - 1)
		for pivot < _index(arr, j) {
			j = (j - 1)
		}
		if i >= j {
			return i
		}
		var temp int = _index(arr, i)
		_ = temp
		_setIndex(arr, i, _index(arr, j))
		_setIndex(arr, j, temp)
		i = (i + 1)
	}
}

func int_log2(n int) int {
	var v int = n
	_ = v
	var r int = 0
	_ = r
	for v > 1 {
		v = (v / 2)
		r = (r + 1)
	}
	return r
}

func intro_sort(arr []int, start int, end_ int, size_threshold int, max_depth int) []int {
	var array []int = arr
	_ = array
	var s int = start
	_ = s
	var e int = end_
	_ = e
	var depth int = max_depth
	_ = depth
	for (e - s) > size_threshold {
		if depth == 0 {
			return heap_sort(func(v any) []int {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]int); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []int{}
					}
					out := make([]int, len(arr))
					for i, x := range arr {
						out[i] = x.(int)
					}
					return out
				}
				return v.([]int)
			}(array))
		}
		depth = (depth - 1)
		var pivot int = median_of_3(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(array), s, ((s + ((e - s) / 2)) + 1), (e - 1))
		_ = pivot
		var p int = partition(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(array), s, e, pivot)
		_ = p
		array = intro_sort(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(array), p, e, size_threshold, depth)
		e = p
	}
	var res []int = insertion_sort(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(array), s, e)
	_ = res
	_ = len(res)
	return res
}

func intro_sort_main(arr []int) {
	if len(arr) == 0 {
		fmt.Println(fmt.Sprint(arr))
		return
	}
	var max_depth int = (2 * int_log2(len(arr)))
	_ = max_depth
	var sorted []int = intro_sort(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(arr), 0, len(arr), 16, max_depth)
	_ = sorted
	_ = sorted
	fmt.Println(fmt.Sprint(sorted))
}

var example1 []int

var example2 []int

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		example1 = []int{4, 2, 6, 8, 1, 7, 8, 22, 14, 56, 27, 79, 23, 45, 14, 12}
		intro_sort_main(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(example1))
		example2 = []int{21, 15, 11, 45, func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}((0 - 2)), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}((0 - 11)), 46}
		intro_sort_main(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(example2))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
