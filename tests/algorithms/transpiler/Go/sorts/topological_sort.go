//go:build ignore

// Generated by Mochi v0.10.70 on 2025-08-23 01:31:45 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

var edges map[string][]string

var vertices []string

func topological_sort(start string, visited map[string]bool, sort []string) []string {
	visited[start] = true
	var neighbors []string = edges[start]
	_ = neighbors
	var i int = 0
	_ = i
	for i < len(neighbors) {
		var neighbor string = _index(neighbors, i)
		_ = neighbor
		if !func() bool { _, ok := visited[neighbor]; return ok }() {
			sort = topological_sort(neighbor, visited, func(v any) []string {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]string); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []string{}
					}
					out := make([]string, len(arr))
					for i, x := range arr {
						out[i] = fmt.Sprint(x)
					}
					return out
				}
				return v.([]string)
			}(sort))
		}
		i = (i + 1)
	}
	sort = append(sort, start)
	if len(visited) != len(vertices) {
		var j int = 0
		_ = j
		for j < len(vertices) {
			var v string = _index(vertices, j)
			_ = v
			if !func() bool { _, ok := visited[v]; return ok }() {
				sort = topological_sort(v, visited, func(v any) []string {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]string); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []string{}
						}
						out := make([]string, len(arr))
						for i, x := range arr {
							out[i] = fmt.Sprint(x)
						}
						return out
					}
					return v.([]string)
				}(sort))
			}
			j = (j + 1)
		}
	}
	return sort
}

func mochiMain() {
	var result []string = topological_sort("a", map[string]bool{}, func(v any) []string {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]string); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []string{}
			}
			out := make([]string, len(arr))
			for i, x := range arr {
				out[i] = fmt.Sprint(x)
			}
			return out
		}
		return v.([]string)
	}([]string{}))
	_ = result
	fmt.Println(fmt.Sprint(result))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		edges = map[string][]string{"a": []string{"c", "b"}, "b": []string{"d", "e"}, "c": []string{}, "d": []string{}, "e": []string{}}
		vertices = []string{"a", "b", "c", "d", "e"}
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
