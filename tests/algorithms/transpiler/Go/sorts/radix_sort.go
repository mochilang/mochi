//go:build ignore

// Generated by Mochi v0.10.70 on 2025-08-23 01:31:22 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

func _modi(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		return
	}
	s[idx] = v
}

var RADIX int

func make_buckets() [][]int {
	var buckets [][]int = [][]int{}
	_ = buckets
	var i int = 0
	_ = i
	for i < RADIX {
		buckets = append(buckets, []int{})
		i = (i + 1)
	}
	return buckets
}

func max_value(xs []int) int {
	var max_val int = _index(xs, 0)
	_ = max_val
	var i int = 1
	_ = i
	for i < len(xs) {
		if _index(xs, i) > max_val {
			max_val = _index(xs, i)
		}
		i = (i + 1)
	}
	return max_val
}

func radix_sort(list_of_ints []int) []int {
	var placement int = 1
	_ = placement
	var max_digit int = max_value(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(list_of_ints))
	_ = max_digit
	for placement <= max_digit {
		var buckets [][]int = make_buckets()
		_ = buckets
		var i int = 0
		_ = i
		for i < len(list_of_ints) {
			var value int = _index(list_of_ints, i)
			_ = value
			var tmp int = _modi((value / placement), RADIX)
			_ = tmp
			_setIndex(buckets, tmp, append(_index(buckets, tmp), value))
			i = (i + 1)
		}
		var a int = 0
		_ = a
		var b int = 0
		_ = b
		for b < RADIX {
			var bucket []int = _index(buckets, b)
			_ = bucket
			var j int = 0
			_ = j
			for j < len(bucket) {
				_setIndex(list_of_ints, a, _index(bucket, j))
				a = (a + 1)
				j = (j + 1)
			}
			b = (b + 1)
		}
		placement = (placement * RADIX)
	}
	return list_of_ints
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		RADIX = 10
		fmt.Println(fmt.Sprint(radix_sort(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}([]int{0, 5, 3, 2, 2}))))
		fmt.Println(fmt.Sprint(radix_sort(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}([]int{1, 100, 10, 1000}))))
		fmt.Println(fmt.Sprint(radix_sort(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}([]int{15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0}))))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
