//go:build ignore

// Generated by Mochi v0.10.63 on 2025-08-11 16:30:15 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _mod(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	s[idx] = v
}

func odd_even_transposition(xs []int) []int {
	var arr []int = xs
	_ = arr
	n := len(arr)
	_ = n
	var phase int = 0
	_ = phase
	for phase < n {
		var start int = func() int {
			if _mod(phase, 2) == 0 {
				return 0
			} else {
				return 1
			}
		}()
		_ = start
		var i int = start
		_ = i
		for (i + 1) < n {
			if int(_index(arr, i)) > int(_index(arr, (i+1))) {
				var tmp int = _index(arr, i)
				_ = tmp
				_setIndex(arr, i, _index(arr, (i+1)))
				_setIndex(arr, (i + 1), tmp)
			}
			i = (i + 2)
		}
		phase = (phase + 1)
	}
	return arr
}

func mochiMain() {
	var data []int = []int{func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(10), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(9), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(8), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(7), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(6), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(5), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(4), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(3), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(2), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(1)}
	_ = data
	fmt.Println("Initial List")
	fmt.Println(fmt.Sprint(data))
	sorted := odd_even_transposition(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(data))
	_ = sorted
	fmt.Println("Sorted List")
	fmt.Println(fmt.Sprint(sorted))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
