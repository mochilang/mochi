//go:build ignore

// Generated by Mochi v0.10.63 on 2025-08-11 16:29:57 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

func _toFloat(v any) float64 {
	switch t := v.(type) {
	case int:
		return float64(t)
	case int64:
		return float64(t)
	case float64:
		return t
	default:
		return 0
	}
}

func binary_search_insertion_from(sorted_list []int, item int, start int) []int {
	var left int = start
	_ = left
	var right int = (len(sorted_list) - 1)
	_ = right
	for left <= right {
		middle := ((left + right) / 2)
		_ = middle
		if left == right {
			if int(_index(sorted_list, middle)) < item {
				left = (middle + 1)
			}
			break
		} else {
			if int(_index(sorted_list, middle)) < item {
				left = (middle + 1)
			} else {
				right = (middle - 1)
			}
		}
	}
	var result []int = []int{}
	_ = result
	var i int = 0
	_ = i
	for i < left {
		result = append(result, _index(sorted_list, i))
		i = (i + 1)
	}
	result = append(result, item)
	for i < len(sorted_list) {
		result = append(result, _index(sorted_list, i))
		i = (i + 1)
	}
	return result
}

func binary_search_insertion(sorted_list []int, item int) []int {
	return binary_search_insertion_from(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(sorted_list), item, 0)
}

func merge(left [][]int, right [][]int) [][]int {
	var result [][]int = [][]int{}
	_ = result
	var i int = 0
	_ = i
	var j int = 0
	_ = j
	for (i < len(left)) && (j < len(right)) {
		if int(_index(_index(left, i), 0)) < int(_index(_index(right, j), 0)) {
			result = append(result, _index(left, i))
			i = (i + 1)
		} else {
			result = append(result, _index(right, j))
			j = (j + 1)
		}
	}
	for i < len(left) {
		result = append(result, _index(left, i))
		i = (i + 1)
	}
	for j < len(right) {
		result = append(result, _index(right, j))
		j = (j + 1)
	}
	return result
}

func sortlist_2d(list_2d [][]int) [][]int {
	length := len(list_2d)
	_ = length
	if length <= 1 {
		return list_2d
	}
	middle := (length / 2)
	_ = middle
	var left [][]int = [][]int{}
	_ = left
	var i int = 0
	_ = i
	for i < middle {
		left = append(left, _index(list_2d, i))
		i = (i + 1)
	}
	var right [][]int = [][]int{}
	_ = right
	var j any = middle
	_ = j
	for _toFloat(j) < _toFloat(length) {
		right = append(right, _index(list_2d, j))
		j = (j.(int) + 1)
	}
	return merge(func(v any) [][]int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]int{}
			}
			out := make([][]int, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []int {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]int); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []int{}
						}
						out := make([]int, len(arr))
						for i, x := range arr {
							out[i] = x.(int)
						}
						return out
					}
					return v.([]int)
				}(x)
			}
			return out
		}
		return v.([][]int)
	}(sortlist_2d(func(v any) [][]int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]int{}
			}
			out := make([][]int, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []int {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]int); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []int{}
						}
						out := make([]int, len(arr))
						for i, x := range arr {
							out[i] = x.(int)
						}
						return out
					}
					return v.([]int)
				}(x)
			}
			return out
		}
		return v.([][]int)
	}(left))), func(v any) [][]int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]int{}
			}
			out := make([][]int, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []int {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]int); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []int{}
						}
						out := make([]int, len(arr))
						for i, x := range arr {
							out[i] = x.(int)
						}
						return out
					}
					return v.([]int)
				}(x)
			}
			return out
		}
		return v.([][]int)
	}(sortlist_2d(func(v any) [][]int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]int{}
			}
			out := make([][]int, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []int {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]int); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []int{}
						}
						out := make([]int, len(arr))
						for i, x := range arr {
							out[i] = x.(int)
						}
						return out
					}
					return v.([]int)
				}(x)
			}
			return out
		}
		return v.([][]int)
	}(right))))
}

func merge_insertion_sort(collection []int) []int {
	if len(collection) <= 1 {
		return collection
	}
	var two_paired_list [][]int = [][]int{}
	_ = two_paired_list
	var has_last_odd_item bool = false
	_ = has_last_odd_item
	var i int = 0
	_ = i
	for i < len(collection) {
		if i == (len(collection) - 1) {
			has_last_odd_item = true
		} else {
			var a int = _index(collection, i)
			_ = a
			var b int = _index(collection, (i + 1))
			_ = b
			if a < b {
				two_paired_list = append(two_paired_list, []int{func(v any) int {
					if vv, ok := v.(int); ok {
						return vv
					}
					return 0
				}(a), func(v any) int {
					if vv, ok := v.(int); ok {
						return vv
					}
					return 0
				}(b)})
			} else {
				two_paired_list = append(two_paired_list, []int{func(v any) int {
					if vv, ok := v.(int); ok {
						return vv
					}
					return 0
				}(b), func(v any) int {
					if vv, ok := v.(int); ok {
						return vv
					}
					return 0
				}(a)})
			}
		}
		i = (i + 2)
	}
	var sorted_list_2d [][]int = sortlist_2d(func(v any) [][]int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]int{}
			}
			out := make([][]int, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []int {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]int); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []int{}
						}
						out := make([]int, len(arr))
						for i, x := range arr {
							out[i] = x.(int)
						}
						return out
					}
					return v.([]int)
				}(x)
			}
			return out
		}
		return v.([][]int)
	}(two_paired_list))
	_ = sorted_list_2d
	var result []int = []int{}
	_ = result
	i = 0
	for i < len(sorted_list_2d) {
		result = append(result, _index(_index(sorted_list_2d, i), 0))
		i = (i + 1)
	}
	result = append(result, _index(_index(sorted_list_2d, (len(sorted_list_2d)-1)), 1))
	if has_last_odd_item {
		result = binary_search_insertion(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(result), _index(collection, (len(collection)-1)))
	}
	var inserted_before bool = false
	_ = inserted_before
	var idx int = 0
	_ = idx
	for idx < (len(sorted_list_2d) - 1) {
		if has_last_odd_item && (int(_index(result, idx)) == int(_index(collection, (len(collection)-1)))) {
			inserted_before = true
		}
		var pivot int = _index(_index(sorted_list_2d, idx), 1)
		_ = pivot
		if inserted_before {
			result = binary_search_insertion_from(func(v any) []int {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]int); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []int{}
					}
					out := make([]int, len(arr))
					for i, x := range arr {
						out[i] = x.(int)
					}
					return out
				}
				return v.([]int)
			}(result), pivot, (idx + 2))
		} else {
			result = binary_search_insertion_from(func(v any) []int {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]int); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []int{}
					}
					out := make([]int, len(arr))
					for i, x := range arr {
						out[i] = x.(int)
					}
					return out
				}
				return v.([]int)
			}(result), pivot, (idx + 1))
		}
		idx = (idx + 1)
	}
	return result
}

func mochiMain() {
	var example1 []int = []int{func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(0), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(5), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(3), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(2), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(2)}
	_ = example1
	var example2 []int = []int{func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(99)}
	_ = example2
	var example3 []int = []int{func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}((0 - 2)), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}((0 - 5)), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}((0 - 45))}
	_ = example3
	fmt.Println(fmt.Sprint(merge_insertion_sort(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(example1))))
	fmt.Println(fmt.Sprint(merge_insertion_sort(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(example2))))
	fmt.Println(fmt.Sprint(merge_insertion_sort(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(example3))))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
