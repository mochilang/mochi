//go:build ignore

// Generated by Mochi v0.10.70 on 2025-08-23 01:31:43 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		return
	}
	s[idx] = v
}

func copy_list(xs []int) []int {
	var res []int = []int{}
	_ = res
	var k int = 0
	_ = k
	for k < len(xs) {
		res = append(res, _index(xs, k))
		k = (k + 1)
	}
	return res
}

func insertion_sort(xs []int) []int {
	var arr []int = copy_list(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(xs))
	_ = arr
	var idx int = 1
	_ = idx
	for idx < len(arr) {
		var value int = _index(arr, idx)
		_ = value
		var jdx int = (idx - 1)
		_ = jdx
		for (jdx >= 0) && (_index(arr, jdx) > value) {
			_setIndex(arr, (jdx + 1), _index(arr, jdx))
			jdx = (jdx - 1)
		}
		_setIndex(arr, (jdx + 1), value)
		idx = (idx + 1)
	}
	return arr
}

func merge(left []int, right []int) []int {
	var result []int = []int{}
	_ = result
	var i int = 0
	_ = i
	var j int = 0
	_ = j
	for (i < len(left)) && (j < len(right)) {
		if _index(left, i) < _index(right, j) {
			result = append(result, _index(left, i))
			i = (i + 1)
		} else {
			result = append(result, _index(right, j))
			j = (j + 1)
		}
	}
	for i < len(left) {
		result = append(result, _index(left, i))
		i = (i + 1)
	}
	for j < len(right) {
		result = append(result, _index(right, j))
		j = (j + 1)
	}
	return result
}

func tim_sort(xs []int) []int {
	var n int = len(xs)
	_ = n
	var runs [][]int = [][]int{}
	_ = runs
	var sorted_runs [][]int = [][]int{}
	_ = sorted_runs
	var current []int = []int{}
	_ = current
	current = append(current, _index(xs, 0))
	var i int = 1
	_ = i
	for i < n {
		if _index(xs, i) < _index(xs, (i-1)) {
			runs = append(runs, copy_list(func(v any) []int {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]int); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []int{}
					}
					out := make([]int, len(arr))
					for i, x := range arr {
						out[i] = x.(int)
					}
					return out
				}
				return v.([]int)
			}(current)))
			current = []int{}
			current = append(current, _index(xs, i))
		} else {
			current = append(current, _index(xs, i))
		}
		i = (i + 1)
	}
	runs = append(runs, copy_list(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(current)))
	var r int = 0
	_ = r
	for r < len(runs) {
		sorted_runs = append(sorted_runs, insertion_sort(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(_index(runs, r))))
		r = (r + 1)
	}
	var result []int = []int{}
	_ = result
	r = 0
	for r < len(sorted_runs) {
		result = merge(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(result), func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(_index(sorted_runs, r)))
		r = (r + 1)
	}
	return result
}

func list_to_string(xs []int) string {
	var s string = "["
	_ = s
	var k int = 0
	_ = k
	for k < len(xs) {
		s = (s + fmt.Sprint(_index(xs, k)))
		if k < (len(xs) - 1) {
			s = (s + ", ")
		}
		k = (k + 1)
	}
	return (s + "]")
}

var sample []int

var sorted_sample []int

var sample2 []int

var sorted_sample2 []int

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		sample = []int{5, 9, 10, 3, func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}((0 - 4)), 5, 178, 92, 46, func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}((0 - 18)), 0, 7}
		sorted_sample = tim_sort(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(sample))
		fmt.Println(list_to_string(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(sorted_sample)))
		sample2 = []int{3, 2, 1}
		sorted_sample2 = tim_sort(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(sample2))
		fmt.Println(list_to_string(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(sorted_sample2)))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
