//go:build ignore

// Generated by Mochi v0.10.70 on 2025-08-23 01:30:54 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		return
	}
	s[idx] = v
}

func odd_even_sort(xs []int) []int {
	var arr []int = []int{}
	_ = arr
	var i int = 0
	_ = i
	for i < len(xs) {
		arr = append(arr, _index(xs, i))
		i = (i + 1)
	}
	var n int = len(arr)
	_ = n
	var sorted bool = false
	_ = sorted
	for sorted == false {
		sorted = true
		var j int = 0
		_ = j
		for j < (n - 1) {
			if _index(arr, j) > _index(arr, (j+1)) {
				var tmp int = _index(arr, j)
				_ = tmp
				_setIndex(arr, j, _index(arr, (j+1)))
				_setIndex(arr, (j + 1), tmp)
				sorted = false
			}
			j = (j + 2)
		}
		j = 1
		for j < (n - 1) {
			if _index(arr, j) > _index(arr, (j+1)) {
				var tmp int = _index(arr, j)
				_ = tmp
				_setIndex(arr, j, _index(arr, (j+1)))
				_setIndex(arr, (j + 1), tmp)
				sorted = false
			}
			j = (j + 2)
		}
	}
	return arr
}

func print_list(xs []int) {
	var i int = 0
	_ = i
	var out string = ""
	_ = out
	for i < len(xs) {
		if i > 0 {
			out = (out + " ")
		}
		out = (out + fmt.Sprint(_index(xs, i)))
		i = (i + 1)
	}
	fmt.Println(out)
}

func test_odd_even_sort() {
	var a []int = []int{5, 4, 3, 2, 1}
	_ = a
	var r1 []int = odd_even_sort(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(a))
	_ = r1
	if ((((_index(r1, 0) != 1) || (_index(r1, 1) != 2)) || (_index(r1, 2) != 3)) || (_index(r1, 3) != 4)) || (_index(r1, 4) != 5) {
		panic("case1 failed")
	}
	var b []int = []int{}
	_ = b
	var r2 []int = odd_even_sort(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(b))
	_ = r2
	if len(r2) != 0 {
		panic("case2 failed")
	}
	var c []int = []int{func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}((0 - 10)), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}((0 - 1)), 10, 2}
	_ = c
	var r3 []int = odd_even_sort(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(c))
	_ = r3
	if (((_index(r3, 0) != (0 - 10)) || (_index(r3, 1) != (0 - 1))) || (_index(r3, 2) != 2)) || (_index(r3, 3) != 10) {
		panic("case3 failed")
	}
	var d []int = []int{1, 2, 3, 4}
	_ = d
	var r4 []int = odd_even_sort(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(d))
	_ = r4
	if (((_index(r4, 0) != 1) || (_index(r4, 1) != 2)) || (_index(r4, 2) != 3)) || (_index(r4, 3) != 4) {
		panic("case4 failed")
	}
}

func mochiMain() {
	test_odd_even_sort()
	var sample []int = []int{5, 4, 3, 2, 1}
	_ = sample
	var sorted []int = odd_even_sort(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(sample))
	_ = sorted
	print_list(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(sorted))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
