//go:build ignore

// Generated by Mochi v0.10.70 on 2025-08-23 01:31:47 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		return
	}
	s[idx] = v
}

type Node struct {
	Value int `json:"value"`
	Left  int `json:"left"`
	Right int `json:"right"`
}

type TreeState struct {
	Nodes []Node `json:"nodes"`
	Root  int    `json:"root"`
}

func new_node(state TreeState, value int) int {
	state.Nodes = append(state.Nodes, Node{
		Value: value,
		Left:  (0 - 1),
		Right: (0 - 1),
	})
	return (len(state.Nodes) - 1)
}

func insert(state *TreeState, value int) {
	if state.Root == (0 - 1) {
		state.Root = new_node(*state, value)
		return
	}
	var current int = state.Root
	_ = current
	var nodes []Node = state.Nodes
	_ = nodes
	for {
		var node Node = _index(nodes, current)
		_ = node
		if value < node.Value {
			if node.Left == (0 - 1) {
				var idx int = new_node(*state, value)
				_ = idx
				nodes = state.Nodes
				node.Left = idx
				_setIndex(nodes, current, node)
				state.Nodes = nodes
				return
			}
			current = node.Left
		} else {
			if value > node.Value {
				if node.Right == (0 - 1) {
					var idx int = new_node(*state, value)
					_ = idx
					nodes = state.Nodes
					node.Right = idx
					_setIndex(nodes, current, node)
					state.Nodes = nodes
					return
				}
				current = node.Right
			} else {
				return
			}
		}
	}
}

func inorder(state TreeState, idx int) []int {
	if idx == (0 - 1) {
		return func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}([]int{})
	}
	var node Node = _index(state.Nodes, idx)
	_ = node
	var result []int = inorder(state, node.Left)
	_ = result
	result = append(result, node.Value)
	var right_part []int = inorder(state, node.Right)
	_ = right_part
	var i int = 0
	_ = i
	for i < len(right_part) {
		result = append(result, _index(right_part, i))
		i = (i + 1)
	}
	return result
}

func tree_sort(arr []int) []int {
	var state TreeState = TreeState{
		Nodes: []Node{},
		Root:  (0 - 1),
	}
	_ = state
	var i int = 0
	_ = i
	for i < len(arr) {
		insert(&state, _index(arr, i))
		i = (i + 1)
	}
	if state.Root == (0 - 1) {
		return func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}([]int{})
	}
	return inorder(state, state.Root)
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(fmt.Sprint(tree_sort(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}([]int{}))))
		fmt.Println(fmt.Sprint(tree_sort(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}([]int{1}))))
		fmt.Println(fmt.Sprint(tree_sort(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}([]int{1, 2}))))
		fmt.Println(fmt.Sprint(tree_sort(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}([]int{5, 2, 7}))))
		fmt.Println(fmt.Sprint(tree_sort(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}([]int{5, func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}((0 - 4)), 9, 2, 7}))))
		fmt.Println(fmt.Sprint(tree_sort(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}([]int{5, 6, 1, func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}((0 - 1)), 4, 37, 2, 7}))))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
