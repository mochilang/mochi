//go:build ignore

// Generated by Mochi v0.10.70 on 2025-08-23 01:31:06 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		return
	}
	s[idx] = v
}

func pigeonhole_sort(arr []int) []int {
	if len(arr) == 0 {
		return arr
	}
	var min_val int = int(func() int {
		if len(arr) == 0 {
			return 0
		}
		m := arr[0]
		for _, n := range arr[1:] {
			if n < m {
				m = n
			}
		}
		return m
	}())
	_ = min_val
	var max_val int = int(func() int {
		if len(arr) == 0 {
			return 0
		}
		m := arr[0]
		for _, n := range arr[1:] {
			if n > m {
				m = n
			}
		}
		return m
	}())
	_ = max_val
	var size int = ((max_val - min_val) + 1)
	_ = size
	var holes []int = []int{}
	_ = holes
	var i int = 0
	_ = i
	for i < size {
		holes = append(holes, 0)
		i = (i + 1)
	}
	i = 0
	for i < len(arr) {
		var x int = _index(arr, i)
		_ = x
		var index int = (x - min_val)
		_ = index
		_setIndex(holes, index, (_index(holes, index) + 1))
		i = (i + 1)
	}
	var sorted_index int = 0
	_ = sorted_index
	var count int = 0
	_ = count
	for count < size {
		for _index(holes, count) > 0 {
			_setIndex(arr, sorted_index, (count + min_val))
			_setIndex(holes, count, (_index(holes, count) - 1))
			sorted_index = (sorted_index + 1)
		}
		count = (count + 1)
	}
	return arr
}

var example []int

var result []int

var output string

var j int

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		example = []int{8, 3, 2, 7, 4, 6, 8}
		result = pigeonhole_sort(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(example))
		output = "Sorted order is:"
		j = 0
		for j < len(result) {
			output = ((output + " ") + fmt.Sprint(_index(result, j)))
			j = (j + 1)
		}
		fmt.Println(output)
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
