//go:build ignore

// Generated by Mochi v0.10.63 on 2025-08-11 16:30:19 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	s[idx] = v
}

func bisect_left(stacks [][]int, value int) int {
	var low int = 0
	_ = low
	var high int = len(stacks)
	_ = high
	for low < high {
		mid := ((low + high) / 2)
		_ = mid
		var stack []int = _index(stacks, mid)
		_ = stack
		top_idx := (len(stack) - 1)
		_ = top_idx
		var top int = _index(stack, top_idx)
		_ = top
		if top < value {
			low = (mid + 1)
		} else {
			high = mid
		}
	}
	return low
}

func reverse_list(src []int) []int {
	var res []int = []int{}
	_ = res
	var i int = (len(src) - 1)
	_ = i
	for i >= 0 {
		res = append(res, _index(src, i))
		i = (i - 1)
	}
	return res
}

func patience_sort(collection []int) []int {
	var stacks [][]int = [][]int{}
	_ = stacks
	var i int = 0
	_ = i
	for i < len(collection) {
		var element int = _index(collection, i)
		_ = element
		idx := bisect_left(func(v any) [][]int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]int{}
				}
				out := make([][]int, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []int {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]int); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []int{}
							}
							out := make([]int, len(arr))
							for i, x := range arr {
								out[i] = x.(int)
							}
							return out
						}
						return v.([]int)
					}(x)
				}
				return out
			}
			return v.([][]int)
		}(stacks), element)
		_ = idx
		if idx != len(stacks) {
			var stack []int = _index(stacks, idx)
			_ = stack
			_setIndex(stacks, idx, append(stack, element))
		} else {
			var new_stack []int = []int{func(v any) int {
				if vv, ok := v.(int); ok {
					return vv
				}
				return 0
			}(element)}
			_ = new_stack
			stacks = append(stacks, new_stack)
		}
		i = (i + 1)
	}
	i = 0
	for i < len(stacks) {
		_setIndex(stacks, i, reverse_list(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(_index(stacks, i))))
		i = (i + 1)
	}
	var indices []int = []int{}
	_ = indices
	i = 0
	for i < len(stacks) {
		indices = append(indices, 0)
		i = (i + 1)
	}
	var total int = 0
	_ = total
	i = 0
	for i < len(stacks) {
		total = (total + len(_index(stacks, i)))
		i = (i + 1)
	}
	var result []int = []int{}
	_ = result
	var count int = 0
	_ = count
	for count < total {
		var min_val int = 0
		_ = min_val
		var min_stack int = (0 - 1)
		_ = min_stack
		var j int = 0
		_ = j
		for j < len(stacks) {
			var idx int = _index(indices, j)
			_ = idx
			if idx < len(_index(stacks, j)) {
				var val int = _index(_index(stacks, j), idx)
				_ = val
				if min_stack < 0 {
					min_val = val
					min_stack = j
				} else {
					if val < min_val {
						min_val = val
						min_stack = j
					}
				}
			}
			j = (j + 1)
		}
		result = append(result, min_val)
		_setIndex(indices, min_stack, (int(_index(indices, min_stack)) + 1))
		count = (count + 1)
	}
	i = 0
	for i < len(result) {
		_setIndex(collection, i, _index(result, i))
		i = (i + 1)
	}
	return collection
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(fmt.Sprint(patience_sort(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}([]int{func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(1), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(9), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(5), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(21), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(17), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(6)}))))
		fmt.Println(fmt.Sprint(patience_sort(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}([]int{}))))
		fmt.Println(fmt.Sprint(patience_sort(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}([]int{func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}((0 - 3)), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}((0 - 17)), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}((0 - 48))}))))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
