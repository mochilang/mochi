//go:build ignore

// Generated by Mochi v0.10.63 on 2025-08-11 17:31:52 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"strings"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

func _concat[T any](a, b []T) []T {
	return append(append([]T{}, a...), b...)
}

func quick_sort(items []int) []int {
	if len(items) < 2 {
		return items
	}
	var pivot int = _index(items, 0)
	_ = pivot
	var lesser []int = []int{}
	_ = lesser
	var greater []int = []int{}
	_ = greater
	var i int = 1
	_ = i
	for i < len(items) {
		var item int = _index(items, i)
		_ = item
		if item <= pivot {
			lesser = append(lesser, item)
		} else {
			greater = append(greater, item)
		}
		i = (i + 1)
	}
	return func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(_concat(_concat(quick_sort(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(lesser)), []int{func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(pivot)}), quick_sort(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(greater))))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println("sorted1:", func() string {
			b, _ := json.Marshal(quick_sort(func(v any) []int {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]int); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []int{}
					}
					out := make([]int, len(arr))
					for i, x := range arr {
						out[i] = x.(int)
					}
					return out
				}
				return v.([]int)
			}([]int{func(v any) int {
				if vv, ok := v.(int); ok {
					return vv
				}
				return 0
			}(0), func(v any) int {
				if vv, ok := v.(int); ok {
					return vv
				}
				return 0
			}(5), func(v any) int {
				if vv, ok := v.(int); ok {
					return vv
				}
				return 0
			}(3), func(v any) int {
				if vv, ok := v.(int); ok {
					return vv
				}
				return 0
			}(2), func(v any) int {
				if vv, ok := v.(int); ok {
					return vv
				}
				return 0
			}(2)})))
			s := string(b)
			s = strings.ReplaceAll(s, ":", ": ")
			s = strings.ReplaceAll(s, ",", ", ")
			s = strings.ReplaceAll(s, "}, {", "},{")
			return s
		}())
		fmt.Println("sorted2:", func() string {
			b, _ := json.Marshal(quick_sort(func(v any) []int {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]int); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []int{}
					}
					out := make([]int, len(arr))
					for i, x := range arr {
						out[i] = x.(int)
					}
					return out
				}
				return v.([]int)
			}([]int{})))
			s := string(b)
			s = strings.ReplaceAll(s, ":", ": ")
			s = strings.ReplaceAll(s, ",", ", ")
			s = strings.ReplaceAll(s, "}, {", "},{")
			return s
		}())
		fmt.Println("sorted3:", func() string {
			b, _ := json.Marshal(quick_sort(func(v any) []int {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]int); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []int{}
					}
					out := make([]int, len(arr))
					for i, x := range arr {
						out[i] = x.(int)
					}
					return out
				}
				return v.([]int)
			}([]int{func(v any) int {
				if vv, ok := v.(int); ok {
					return vv
				}
				return 0
			}((0 - 2)), func(v any) int {
				if vv, ok := v.(int); ok {
					return vv
				}
				return 0
			}(5), func(v any) int {
				if vv, ok := v.(int); ok {
					return vv
				}
				return 0
			}(0), func(v any) int {
				if vv, ok := v.(int); ok {
					return vv
				}
				return 0
			}((0 - 45))})))
			s := string(b)
			s = strings.ReplaceAll(s, ":", ": ")
			s = strings.ReplaceAll(s, ",", ", ")
			s = strings.ReplaceAll(s, "}, {", "},{")
			return s
		}())
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
