//go:build ignore

// Generated by Mochi v0.10.70 on 2025-08-23 01:30:50 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

func _modi(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func get_bit_length(n int) int {
	if n == 0 {
		return 1
	}
	var length int = 0
	_ = length
	var num int = n
	_ = num
	for num > 0 {
		length = (length + 1)
		num = (num / 2)
	}
	return length
}

func max_bit_length(nums []int) int {
	var i int = 0
	_ = i
	var max_len int = 0
	_ = max_len
	for i < len(nums) {
		var l int = get_bit_length(_index(nums, i))
		_ = l
		if l > max_len {
			max_len = l
		}
		i = (i + 1)
	}
	return max_len
}

func get_bit(num int, pos int) int {
	var n int = num
	_ = n
	var i int = 0
	_ = i
	for i < pos {
		n = (n / 2)
		i = (i + 1)
	}
	return _modi(n, 2)
}

func _msd_radix_sort(nums []int, bit_position int) []int {
	if (bit_position == 0) || (len(nums) <= 1) {
		return nums
	}
	var zeros []int = []int{}
	_ = zeros
	var ones []int = []int{}
	_ = ones
	var i int = 0
	_ = i
	for i < len(nums) {
		var num int = _index(nums, i)
		_ = num
		if get_bit(num, (bit_position-1)) == 1 {
			ones = append(ones, num)
		} else {
			zeros = append(zeros, num)
		}
		i = (i + 1)
	}
	zeros = _msd_radix_sort(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(zeros), (bit_position - 1))
	ones = _msd_radix_sort(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(ones), (bit_position - 1))
	var res []int = zeros
	_ = res
	i = 0
	for i < len(ones) {
		res = append(res, _index(ones, i))
		i = (i + 1)
	}
	return res
}

func msd_radix_sort(nums []int) []int {
	if len(nums) == 0 {
		return func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}([]int{})
	}
	var i int = 0
	_ = i
	for i < len(nums) {
		if _index(nums, i) < 0 {
			panic("All numbers must be positive")
		}
		i = (i + 1)
	}
	var bits int = max_bit_length(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(nums))
	_ = bits
	var result []int = _msd_radix_sort(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(nums), bits)
	_ = result
	_ = result
	return result
}

func msd_radix_sort_inplace(nums []int) []int {
	return msd_radix_sort(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(nums))
}

var ex1 []int

var sorted1 []int

var ex2 []int

var sorted2 []int

var ex3 []int

var sorted3 []int

var ex4 []int

var sorted4 []int

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		ex1 = []int{40, 12, 1, 100, 4}
		sorted1 = msd_radix_sort(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(ex1))
		fmt.Println(fmt.Sprint(sorted1))
		ex2 = []int{}
		sorted2 = msd_radix_sort(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(ex2))
		fmt.Println(fmt.Sprint(sorted2))
		ex3 = []int{123, 345, 123, 80}
		sorted3 = msd_radix_sort(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(ex3))
		fmt.Println(fmt.Sprint(sorted3))
		ex4 = []int{1209, 834598, 1, 540402, 45}
		sorted4 = msd_radix_sort(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(ex4))
		fmt.Println(fmt.Sprint(sorted4))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
