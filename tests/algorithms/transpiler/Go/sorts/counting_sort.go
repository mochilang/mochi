//go:build ignore

// Generated by Mochi v0.10.63 on 2025-08-11 16:29:42 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	s[idx] = v
}

func _len(v any) int {
	switch t := v.(type) {
	case string:
		return len([]rune(t))
	case []any:
		return len(t)
	case []string:
		return len(t)
	case []int:
		return len(t)
	case []float64:
		return len(t)
	case map[string]any:
		return len(t)
	case map[int]any:
		return len(t)
	case map[any]any:
		return len(t)
	default:
		return 0
	}
}

func max_val(arr []int) int {
	var m int = _index(arr, 0)
	_ = m
	var i int = 1
	_ = i
	for i < len(arr) {
		if int(_index(arr, i)) > m {
			m = _index(arr, i)
		}
		i = (i + 1)
	}
	return m
}

func min_val(arr []int) int {
	var m int = _index(arr, 0)
	_ = m
	var i int = 1
	_ = i
	for i < len(arr) {
		if int(_index(arr, i)) < m {
			m = _index(arr, i)
		}
		i = (i + 1)
	}
	return m
}

func counting_sort(collection []int) []int {
	if len(collection) == 0 {
		return func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}([]int{})
	}
	coll_len := len(collection)
	_ = coll_len
	coll_max := max_val(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(collection))
	_ = coll_max
	coll_min := min_val(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(collection))
	_ = coll_min
	counting_arr_length := ((coll_max + 1) - coll_min)
	_ = counting_arr_length
	var counting_arr []int = []int{}
	_ = counting_arr
	var i int = 0
	_ = i
	for i < counting_arr_length {
		counting_arr = append(counting_arr, 0)
		i = (i + 1)
	}
	i = 0
	for i < coll_len {
		var number int = _index(collection, i)
		_ = number
		_setIndex(counting_arr, (number - coll_min), (int(_index(counting_arr, (number-coll_min))) + 1))
		i = (i + 1)
	}
	i = 1
	for i < counting_arr_length {
		_setIndex(counting_arr, i, (int(_index(counting_arr, i)) + int(_index(counting_arr, (i-1)))))
		i = (i + 1)
	}
	var ordered []int = []int{}
	_ = ordered
	i = 0
	for i < coll_len {
		ordered = append(ordered, 0)
		i = (i + 1)
	}
	var idx any = (coll_len - 1)
	_ = idx
	for idx.(int) >= 0 {
		var number int = _index(collection, idx)
		_ = number
		var pos int = (int(_index(counting_arr, (number-coll_min))) - 1)
		_ = pos
		_setIndex(ordered, pos, number)
		_setIndex(counting_arr, (number - coll_min), (int(_index(counting_arr, (number-coll_min))) - 1))
		idx = (idx.(int) - 1)
	}
	return ordered
}

var ascii_chars string

func chr(code int) string {
	if code == 10 {
		return "\n"
	}
	if code == 13 {
		return "\r"
	}
	if code == 9 {
		return "\t"
	}
	if (code >= 32) && (code < 127) {
		return string([]rune(ascii_chars)[(code - 32):(code - 31)])
	}
	return ""
}

func ord(ch string) int {
	if ch == "\n" {
		return 10
	}
	if ch == "\r" {
		return 13
	}
	if ch == "\t" {
		return 9
	}
	var i int = 0
	_ = i
	for i < len(ascii_chars) {
		if string([]rune(ascii_chars)[i:(i+1)]) == ch {
			return (32 + i)
		}
		i = (i + 1)
	}
	return 0
}

func counting_sort_string(s string) string {
	var codes []int = []int{}
	_ = codes
	var i int = 0
	_ = i
	for i < len(s) {
		codes = append(codes, ord(string([]rune(s)[i:(i+1)])))
		i = (i + 1)
	}
	sorted_codes := counting_sort(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(codes))
	_ = sorted_codes
	var res string = ""
	_ = res
	i = 0
	for i < _len(sorted_codes) {
		res = (res + chr(int(_index(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(sorted_codes), i))))
		i = (i + 1)
	}
	return res
}

var example1 []int

var example2 []int

var example3 []int

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		ascii_chars = " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"
		example1 = counting_sort(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}([]int{func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(0), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(5), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(3), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(2), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(2)}))
		fmt.Println(fmt.Sprint(example1))
		example2 = counting_sort(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}([]int{}))
		fmt.Println(fmt.Sprint(example2))
		example3 = counting_sort(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}([]int{func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}((0 - 2)), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}((0 - 5)), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}((0 - 45))}))
		fmt.Println(fmt.Sprint(example3))
		fmt.Println(counting_sort_string("thisisthestring"))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
