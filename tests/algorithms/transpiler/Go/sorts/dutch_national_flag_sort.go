//go:build ignore

// Generated by Mochi v0.10.63 on 2025-08-11 16:29:46 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"strings"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	s[idx] = v
}

func dutch_national_flag_sort(seq []int) []int {
	var a []int = seq
	_ = a
	var low int = 0
	_ = low
	var mid int = 0
	_ = mid
	var high int = (len(a) - 1)
	_ = high
	for mid <= high {
		var v int = _index(a, mid)
		_ = v
		if v == 0 {
			var tmp int = _index(a, low)
			_ = tmp
			_setIndex(a, low, v)
			_setIndex(a, mid, tmp)
			low = (low + 1)
			mid = (mid + 1)
		} else {
			if v == 1 {
				mid = (mid + 1)
			} else {
				if v == 2 {
					var tmp2 int = _index(a, high)
					_ = tmp2
					_setIndex(a, high, v)
					_setIndex(a, mid, tmp2)
					high = (high - 1)
				} else {
					panic("The elements inside the sequence must contains only (0, 1, 2) values")
				}
			}
		}
	}
	return a
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(func() string {
			b, _ := json.Marshal(dutch_national_flag_sort(func(v any) []int {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]int); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []int{}
					}
					out := make([]int, len(arr))
					for i, x := range arr {
						out[i] = x.(int)
					}
					return out
				}
				return v.([]int)
			}([]int{})))
			s := string(b)
			s = strings.ReplaceAll(s, ":", ": ")
			s = strings.ReplaceAll(s, ",", ", ")
			s = strings.ReplaceAll(s, "}, {", "},{")
			return s
		}())
		fmt.Println(func() string {
			b, _ := json.Marshal(dutch_national_flag_sort(func(v any) []int {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]int); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []int{}
					}
					out := make([]int, len(arr))
					for i, x := range arr {
						out[i] = x.(int)
					}
					return out
				}
				return v.([]int)
			}([]int{func(v any) int {
				if vv, ok := v.(int); ok {
					return vv
				}
				return 0
			}(0)})))
			s := string(b)
			s = strings.ReplaceAll(s, ":", ": ")
			s = strings.ReplaceAll(s, ",", ", ")
			s = strings.ReplaceAll(s, "}, {", "},{")
			return s
		}())
		fmt.Println(func() string {
			b, _ := json.Marshal(dutch_national_flag_sort(func(v any) []int {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]int); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []int{}
					}
					out := make([]int, len(arr))
					for i, x := range arr {
						out[i] = x.(int)
					}
					return out
				}
				return v.([]int)
			}([]int{func(v any) int {
				if vv, ok := v.(int); ok {
					return vv
				}
				return 0
			}(2), func(v any) int {
				if vv, ok := v.(int); ok {
					return vv
				}
				return 0
			}(1), func(v any) int {
				if vv, ok := v.(int); ok {
					return vv
				}
				return 0
			}(0), func(v any) int {
				if vv, ok := v.(int); ok {
					return vv
				}
				return 0
			}(0), func(v any) int {
				if vv, ok := v.(int); ok {
					return vv
				}
				return 0
			}(1), func(v any) int {
				if vv, ok := v.(int); ok {
					return vv
				}
				return 0
			}(2)})))
			s := string(b)
			s = strings.ReplaceAll(s, ":", ": ")
			s = strings.ReplaceAll(s, ",", ", ")
			s = strings.ReplaceAll(s, "}, {", "},{")
			return s
		}())
		fmt.Println(func() string {
			b, _ := json.Marshal(dutch_national_flag_sort(func(v any) []int {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]int); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []int{}
					}
					out := make([]int, len(arr))
					for i, x := range arr {
						out[i] = x.(int)
					}
					return out
				}
				return v.([]int)
			}([]int{func(v any) int {
				if vv, ok := v.(int); ok {
					return vv
				}
				return 0
			}(0), func(v any) int {
				if vv, ok := v.(int); ok {
					return vv
				}
				return 0
			}(1), func(v any) int {
				if vv, ok := v.(int); ok {
					return vv
				}
				return 0
			}(1), func(v any) int {
				if vv, ok := v.(int); ok {
					return vv
				}
				return 0
			}(0), func(v any) int {
				if vv, ok := v.(int); ok {
					return vv
				}
				return 0
			}(1), func(v any) int {
				if vv, ok := v.(int); ok {
					return vv
				}
				return 0
			}(2), func(v any) int {
				if vv, ok := v.(int); ok {
					return vv
				}
				return 0
			}(1), func(v any) int {
				if vv, ok := v.(int); ok {
					return vv
				}
				return 0
			}(2), func(v any) int {
				if vv, ok := v.(int); ok {
					return vv
				}
				return 0
			}(0), func(v any) int {
				if vv, ok := v.(int); ok {
					return vv
				}
				return 0
			}(0), func(v any) int {
				if vv, ok := v.(int); ok {
					return vv
				}
				return 0
			}(0), func(v any) int {
				if vv, ok := v.(int); ok {
					return vv
				}
				return 0
			}(1)})))
			s := string(b)
			s = strings.ReplaceAll(s, ":", ": ")
			s = strings.ReplaceAll(s, ",", ", ")
			s = strings.ReplaceAll(s, "}, {", "},{")
			return s
		}())
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
