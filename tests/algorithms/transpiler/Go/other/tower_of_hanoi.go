//go:build ignore

// Generated by Mochi v0.10.64 on 2025-08-12 10:09:22 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func move_tower(height int, from_pole string, to_pole string, with_pole string) {
	if height >= 1 {
		move_tower((height - 1), from_pole, with_pole, to_pole)
		move_disk(from_pole, to_pole)
		move_tower((height - 1), with_pole, to_pole, from_pole)
	}
}

func move_disk(fp string, tp string) {
	fmt.Println(((("moving disk from " + fp) + " to ") + tp))
}

var height int

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		height = 3
		move_tower(height, "A", "B", "C")
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
