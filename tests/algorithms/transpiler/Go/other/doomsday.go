//go:build ignore

// Generated by Mochi v0.10.69 on 2025-08-22 13:08:01 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

func _modi(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

var DOOMSDAY_LEAP []int

var DOOMSDAY_NOT_LEAP []int

var WEEK_DAY_NAMES map[int]string

func get_week_day(year int, month int, day int) string {
	if year < 100 {
		panic("year should be in YYYY format")
	}
	if (month < 1) || (month > 12) {
		panic("month should be between 1 to 12")
	}
	if (day < 1) || (day > 31) {
		panic("day should be between 1 to 31")
	}
	var century int = (year / 100)
	_ = century
	var century_anchor int = _modi(((5 * _modi(century, 4)) + 2), 7)
	_ = century_anchor
	var centurian int = _modi(year, 100)
	_ = centurian
	var centurian_m int = _modi(centurian, 12)
	_ = centurian_m
	var dooms_day int = _modi(((((centurian / 12) + centurian_m) + (centurian_m / 4)) + century_anchor), 7)
	_ = dooms_day
	var day_anchor int = func() int {
		if (_modi(year, 4) != 0) || ((centurian == 0) && (_modi(year, 400) != 0)) {
			return _index(DOOMSDAY_NOT_LEAP, (month - 1))
		} else {
			return _index(DOOMSDAY_LEAP, (month - 1))
		}
	}()
	_ = day_anchor
	var week_day int = _modi(((dooms_day + day) - day_anchor), 7)
	_ = week_day
	if week_day < 0 {
		week_day = (week_day + 7)
	}
	return WEEK_DAY_NAMES[week_day]
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		DOOMSDAY_LEAP = []int{4, 1, 7, 4, 2, 6, 4, 1, 5, 3, 7, 5}
		DOOMSDAY_NOT_LEAP = []int{3, 7, 7, 4, 2, 6, 4, 1, 5, 3, 7, 5}
		WEEK_DAY_NAMES = map[int]string{0: "Sunday", 1: "Monday", 2: "Tuesday", 3: "Wednesday", 4: "Thursday", 5: "Friday", 6: "Saturday"}
		fmt.Println(get_week_day(2020, 10, 24))
		fmt.Println(get_week_day(2017, 10, 24))
		fmt.Println(get_week_day(2019, 5, 3))
		fmt.Println(get_week_day(1970, 9, 16))
		fmt.Println(get_week_day(1870, 8, 13))
		fmt.Println(get_week_day(2040, 3, 14))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
