//go:build ignore

// Generated by Mochi v0.10.69 on 2025-08-22 13:08:14 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

func floyd(n int) string {
	var result string = ""
	_ = result
	var i int = 0
	_ = i
	for i < n {
		var j int = 0
		_ = j
		for j < ((n - i) - 1) {
			result = (result + " ")
			j = (j + 1)
		}
		var k int = 0
		_ = k
		for k < (i + 1) {
			result = (result + "* ")
			k = (k + 1)
		}
		result = (result + "\n")
		i = (i + 1)
	}
	return result
}

func reverse_floyd(n int) string {
	var result string = ""
	_ = result
	var i int = n
	_ = i
	for i > 0 {
		var j int = i
		_ = j
		for j > 0 {
			result = (result + "* ")
			j = (j - 1)
		}
		result = (result + "\n")
		var k int = ((n - i) + 1)
		_ = k
		for k > 0 {
			result = (result + " ")
			k = (k - 1)
		}
		i = (i - 1)
	}
	return result
}

func pretty_print(n int) string {
	if n <= 0 {
		return "       ...       ....        nothing printing :("
	}
	var upper_half string = floyd(n)
	_ = upper_half
	_ = upper_half
	var lower_half string = reverse_floyd(n)
	_ = lower_half
	_ = lower_half
	return (upper_half + lower_half)
}

func mochiMain() {
	fmt.Println(pretty_print(3))
	fmt.Println(pretty_print(0))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
