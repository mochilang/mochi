//go:build ignore

// Generated by Mochi v0.10.69 on 2025-08-22 13:08:10 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		return
	}
	s[idx] = v
}

type Entry struct {
	Key   int `json:"key"`
	Val   int `json:"val"`
	Freq  int `json:"freq"`
	Order int `json:"order"`
}

type LFUCache struct {
	Entries  []Entry `json:"entries"`
	Capacity int     `json:"capacity"`
	Hits     int     `json:"hits"`
	Miss     int     `json:"miss"`
	Tick     int     `json:"tick"`
}

type GetResult struct {
	Cache LFUCache `json:"cache"`
	Value int      `json:"value"`
	Ok    bool     `json:"ok"`
}

func lfu_new(cap int) LFUCache {
	return LFUCache{
		Entries:  []Entry{},
		Capacity: cap,
		Hits:     0,
		Miss:     0,
		Tick:     0,
	}
}

func find_entry(entries []Entry, key int) int {
	var i int = 0
	_ = i
	for i < len(entries) {
		var e Entry = _index(entries, i)
		_ = e
		if e.Key == key {
			return i
		}
		i = (i + 1)
	}
	return (0 - 1)
}

func lfu_get(cache LFUCache, key int) GetResult {
	var idx int = find_entry(func(v any) []Entry {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]Entry); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []Entry{}
			}
			out := make([]Entry, len(arr))
			for i, x := range arr {
				out[i] = x.(Entry)
			}
			return out
		}
		return v.([]Entry)
	}(cache.Entries), key)
	_ = idx
	if idx == (0 - 1) {
		var new_cache LFUCache = LFUCache{
			Entries:  cache.Entries,
			Capacity: cache.Capacity,
			Hits:     cache.Hits,
			Miss:     (cache.Miss + 1),
			Tick:     cache.Tick,
		}
		_ = new_cache
		_ = new_cache
		return GetResult{
			Cache: new_cache,
			Value: 0,
			Ok:    false,
		}
	}
	var entries []Entry = cache.Entries
	_ = entries
	var e Entry = _index(entries, idx)
	_ = e
	e.Freq = (e.Freq + 1)
	var new_tick int = (cache.Tick + 1)
	_ = new_tick
	e.Order = new_tick
	_setIndex(entries, idx, e)
	var new_cache LFUCache = LFUCache{
		Entries:  entries,
		Capacity: cache.Capacity,
		Hits:     (cache.Hits + 1),
		Miss:     cache.Miss,
		Tick:     new_tick,
	}
	_ = new_cache
	_ = new_cache
	return GetResult{
		Cache: new_cache,
		Value: e.Val,
		Ok:    true,
	}
}

func remove_lfu(entries []Entry) []Entry {
	if len(entries) == 0 {
		return entries
	}
	var min_idx int = 0
	_ = min_idx
	var i int = 1
	_ = i
	for i < len(entries) {
		var e Entry = _index(entries, i)
		_ = e
		var m Entry = _index(entries, min_idx)
		_ = m
		if (e.Freq < m.Freq) || ((e.Freq == m.Freq) && (e.Order < m.Order)) {
			min_idx = i
		}
		i = (i + 1)
	}
	var res []Entry = []Entry{}
	_ = res
	var j int = 0
	_ = j
	for j < len(entries) {
		if j != min_idx {
			res = append(res, _index(entries, j))
		}
		j = (j + 1)
	}
	return res
}

func lfu_put(cache LFUCache, key int, value int) LFUCache {
	var entries []Entry = cache.Entries
	_ = entries
	var idx int = find_entry(func(v any) []Entry {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]Entry); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []Entry{}
			}
			out := make([]Entry, len(arr))
			for i, x := range arr {
				out[i] = x.(Entry)
			}
			return out
		}
		return v.([]Entry)
	}(entries), key)
	_ = idx
	if idx != (0 - 1) {
		var e Entry = _index(entries, idx)
		_ = e
		e.Val = value
		e.Freq = (e.Freq + 1)
		var new_tick int = (cache.Tick + 1)
		_ = new_tick
		e.Order = new_tick
		_setIndex(entries, idx, e)
		return LFUCache{
			Entries:  entries,
			Capacity: cache.Capacity,
			Hits:     cache.Hits,
			Miss:     cache.Miss,
			Tick:     new_tick,
		}
	}
	if len(entries) >= cache.Capacity {
		entries = remove_lfu(func(v any) []Entry {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]Entry); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []Entry{}
				}
				out := make([]Entry, len(arr))
				for i, x := range arr {
					out[i] = x.(Entry)
				}
				return out
			}
			return v.([]Entry)
		}(entries))
	}
	var new_tick int = (cache.Tick + 1)
	_ = new_tick
	var new_entry Entry = Entry{
		Key:   key,
		Val:   value,
		Freq:  1,
		Order: new_tick,
	}
	_ = new_entry
	entries = append(entries, new_entry)
	return LFUCache{
		Entries:  entries,
		Capacity: cache.Capacity,
		Hits:     cache.Hits,
		Miss:     cache.Miss,
		Tick:     new_tick,
	}
}

func cache_info(cache LFUCache) string {
	return (((((((("CacheInfo(hits=" + fmt.Sprint(cache.Hits)) + ", misses=") + fmt.Sprint(cache.Miss)) + ", capacity=") + fmt.Sprint(cache.Capacity)) + ", current_size=") + fmt.Sprint(len(cache.Entries))) + ")")
}

func mochiMain() {
	var cache LFUCache = lfu_new(2)
	_ = cache
	cache = lfu_put(cache, 1, 1)
	cache = lfu_put(cache, 2, 2)
	var r GetResult = lfu_get(cache, 1)
	_ = r
	cache = r.Cache
	if r.Ok {
		fmt.Println(fmt.Sprint(r.Value))
	} else {
		fmt.Println("None")
	}
	cache = lfu_put(cache, 3, 3)
	r = lfu_get(cache, 2)
	cache = r.Cache
	if r.Ok {
		fmt.Println(fmt.Sprint(r.Value))
	} else {
		fmt.Println("None")
	}
	cache = lfu_put(cache, 4, 4)
	r = lfu_get(cache, 1)
	cache = r.Cache
	if r.Ok {
		fmt.Println(fmt.Sprint(r.Value))
	} else {
		fmt.Println("None")
	}
	r = lfu_get(cache, 3)
	cache = r.Cache
	if r.Ok {
		fmt.Println(fmt.Sprint(r.Value))
	} else {
		fmt.Println("None")
	}
	r = lfu_get(cache, 4)
	cache = r.Cache
	if r.Ok {
		fmt.Println(fmt.Sprint(r.Value))
	} else {
		fmt.Println("None")
	}
	fmt.Println(cache_info(cache))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
