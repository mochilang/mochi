//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-16 09:44:50 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

type LRUCache struct {
	MaxCapacity int      `json:"max_capacity"`
	Store       []string `json:"store"`
}

func new_cache(n int) LRUCache {
	if n < 0 {
		panic("n should be an integer greater than 0.")
	}
	var cap int = func() int {
		if n == 0 {
			return 2147483647
		} else {
			return n
		}
	}()
	_ = cap
	_ = cap
	return LRUCache{
		MaxCapacity: cap,
		Store:       []string{},
	}
}

func remove_element(xs []string, x string) []string {
	var res []string = []string{}
	_ = res
	var removed bool = false
	_ = removed
	var i int = 0
	_ = i
	for i < len(xs) {
		var v string = _index(xs, i)
		_ = v
		if (removed == false) && (v == x) {
			removed = true
		} else {
			res = func() []string {
				tmp := make([]string, len(res))
				copy(tmp, res)
				tmp = append(tmp, []string{v}...)
				return tmp
			}()
		}
		i = (i + 1)
	}
	return res
}

func refer(cache LRUCache, x string) LRUCache {
	var store []string = cache.Store
	_ = store
	var exists bool = false
	_ = exists
	var i int = 0
	_ = i
	for i < len(store) {
		if _index(store, i) == x {
			exists = true
		}
		i = (i + 1)
	}
	if exists {
		store = remove_element(func(v any) []string {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]string); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []string{}
				}
				out := make([]string, len(arr))
				for i, x := range arr {
					out[i] = fmt.Sprint(x)
				}
				return out
			}
			return v.([]string)
		}(store), x)
	} else {
		if len(store) == cache.MaxCapacity {
			var new_store []string = []string{}
			_ = new_store
			var j int = 0
			_ = j
			for j < (len(store) - 1) {
				new_store = func() []string {
					tmp := make([]string, len(new_store))
					copy(tmp, new_store)
					tmp = append(tmp, []string{_index(store, j)}...)
					return tmp
				}()
				j = (j + 1)
			}
			store = new_store
		}
	}
	store = func() []string {
		tmp := make([]string, len([]string{x}))
		copy(tmp, []string{x})
		tmp = append(tmp, store...)
		return tmp
	}()
	return LRUCache{
		MaxCapacity: cache.MaxCapacity,
		Store:       store,
	}
}

func display(cache LRUCache) {
	var i int = 0
	_ = i
	for i < len(cache.Store) {
		fmt.Println(_index(cache.Store, i))
		i = (i + 1)
	}
}

func repr_item(s string) string {
	var all_digits bool = true
	_ = all_digits
	var i int = 0
	_ = i
	for i < len(s) {
		var ch string = string(_index([]rune(s), i))
		_ = ch
		if (ch < "0") || (ch > "9") {
			all_digits = false
		}
		i = (i + 1)
	}
	if all_digits {
		return s
	}
	return (("'" + s) + "'")
}

func cache_repr(cache LRUCache) string {
	var res string = (("LRUCache(" + fmt.Sprint(cache.MaxCapacity)) + ") => [")
	_ = res
	var i int = 0
	_ = i
	for i < len(cache.Store) {
		res = (res + repr_item(_index(cache.Store, i)))
		if i < (len(cache.Store) - 1) {
			res = (res + ", ")
		}
		i = (i + 1)
	}
	res = (res + "]")
	return res
}

var lru LRUCache

var r string

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		lru = new_cache(4)
		lru = refer(lru, "A")
		lru = refer(lru, "2")
		lru = refer(lru, "3")
		lru = refer(lru, "A")
		lru = refer(lru, "4")
		lru = refer(lru, "5")
		r = cache_repr(lru)
		fmt.Println(r)
		if r != "LRUCache(4) => [5, 4, 'A', 3]" {
			panic("Assertion error")
		}
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
