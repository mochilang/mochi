//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-16 09:44:48 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func get_avg(number_1 int, number_2 int) int {
	return ((number_1 + number_2) / 2)
}

func guess_the_number(lower int, higher int, to_guess int) []int {
	if lower > higher {
		panic("argument value for lower and higher must be(lower > higher)")
	}
	if !((lower < to_guess) && (to_guess < higher)) {
		panic("guess value must be within the range of lower and higher value")
	}
	var answer func(int) string
	_ = answer
	answer = func(number int) string {
		if number > to_guess {
			return "high"
		} else {
			if number < to_guess {
				return "low"
			} else {
				return "same"
			}
		}
	}
	fmt.Println("started...")
	var last_lowest int = lower
	_ = last_lowest
	var last_highest int = higher
	_ = last_highest
	var last_numbers []int = []int{}
	_ = last_numbers
	for {
		var number int = get_avg(last_lowest, last_highest)
		_ = number
		last_numbers = append(last_numbers, number)
		var resp string = answer(number)
		_ = resp
		if resp == "low" {
			last_lowest = number
		} else {
			if resp == "high" {
				last_highest = number
			} else {
				break
			}
		}
	}
	fmt.Println(("guess the number : " + fmt.Sprint(_index(last_numbers, (len(last_numbers)-1)))))
	fmt.Println(("details : " + fmt.Sprint(last_numbers)))
	return last_numbers
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		guess_the_number(10, 1000, 17)
		guess_the_number((0 - 10000), 10000, 7)
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
