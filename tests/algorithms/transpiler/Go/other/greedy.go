//go:build ignore

// Generated by Mochi v0.10.69 on 2025-08-22 13:08:05 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		return
	}
	s[idx] = v
}

type Thing struct {
	Name   string  `json:"name"`
	Value  float64 `json:"value"`
	Weight float64 `json:"weight"`
}

func get_value(t Thing) float64 {
	return t.Value
}

func get_weight(t Thing) float64 {
	return t.Weight
}

func get_name(t Thing) string {
	return t.Name
}

func value_weight(t Thing) float64 {
	return (float64(t.Value) / float64(t.Weight))
}

func build_menu(names []string, values []float64, weights []float64) []Thing {
	var menu []Thing = []Thing{}
	_ = menu
	var i int = 0
	_ = i
	for ((i < len(values)) && (i < len(names))) && (i < len(weights)) {
		menu = append(menu, Thing{
			Name:   _index(names, i),
			Value:  _index(values, i),
			Weight: _index(weights, i),
		})
		i = (i + 1)
	}
	return menu
}

func sort_desc(items []Thing, key_func func(Thing) float64) []Thing {
	var arr []Thing = []Thing{}
	_ = arr
	var i int = 0
	_ = i
	for i < len(items) {
		arr = append(arr, _index(items, i))
		i = (i + 1)
	}
	var j int = 1
	_ = j
	for j < len(arr) {
		var key_item Thing = _index(arr, j)
		_ = key_item
		var key_val float64 = key_func(key_item)
		_ = key_val
		var k int = (j - 1)
		_ = k
		for (k >= 0) && (key_func(_index(arr, k)) < key_val) {
			_setIndex(arr, (k + 1), _index(arr, k))
			k = (k - 1)
		}
		_setIndex(arr, (k + 1), key_item)
		j = (j + 1)
	}
	return arr
}

type GreedyResult struct {
	Items      []Thing `json:"items"`
	TotalValue float64 `json:"total_value"`
}

func greedy(items []Thing, max_cost float64, key_func func(Thing) float64) GreedyResult {
	var items_copy []Thing = sort_desc(func(v any) []Thing {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]Thing); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []Thing{}
			}
			out := make([]Thing, len(arr))
			for i, x := range arr {
				out[i] = x.(Thing)
			}
			return out
		}
		return v.([]Thing)
	}(items), key_func)
	_ = items_copy
	var result []Thing = []Thing{}
	_ = result
	var total_value float64 = 0.0
	_ = total_value
	var total_cost float64 = 0.0
	_ = total_cost
	var i int = 0
	_ = i
	for i < len(items_copy) {
		var it Thing = _index(items_copy, i)
		_ = it
		var w float64 = get_weight(it)
		_ = w
		if (total_cost + w) <= max_cost {
			result = append(result, it)
			total_cost = (total_cost + w)
			total_value = (total_value + get_value(it))
		}
		i = (i + 1)
	}
	return GreedyResult{
		Items:      result,
		TotalValue: total_value,
	}
}

func thing_to_string(t Thing) string {
	return (((((("Thing(" + t.Name) + ", ") + fmt.Sprint(t.Value)) + ", ") + fmt.Sprint(t.Weight)) + ")")
}

func list_to_string(ts []Thing) string {
	var s string = "["
	_ = s
	var i int = 0
	_ = i
	for i < len(ts) {
		s = (s + thing_to_string(_index(ts, i)))
		if i < (len(ts) - 1) {
			s = (s + ", ")
		}
		i = (i + 1)
	}
	s = (s + "]")
	return s
}

var food []string

var value []float64

var weight []float64

var foods []Thing

var res GreedyResult

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		food = []string{"Burger", "Pizza", "Coca Cola", "Rice", "Sambhar", "Chicken", "Fries", "Milk"}
		value = []float64{80.0, 100.0, 60.0, 70.0, 50.0, 110.0, 90.0, 60.0}
		weight = []float64{40.0, 60.0, 40.0, 70.0, 100.0, 85.0, 55.0, 70.0}
		foods = build_menu(func(v any) []string {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]string); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []string{}
				}
				out := make([]string, len(arr))
				for i, x := range arr {
					out[i] = fmt.Sprint(x)
				}
				return out
			}
			return v.([]string)
		}(food), func(v any) []float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []float64{}
				}
				out := make([]float64, len(arr))
				for i, x := range arr {
					out[i] = x.(float64)
				}
				return out
			}
			return v.([]float64)
		}(value), func(v any) []float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []float64{}
				}
				out := make([]float64, len(arr))
				for i, x := range arr {
					out[i] = x.(float64)
				}
				return out
			}
			return v.([]float64)
		}(weight))
		fmt.Println(list_to_string(func(v any) []Thing {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]Thing); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []Thing{}
				}
				out := make([]Thing, len(arr))
				for i, x := range arr {
					out[i] = x.(Thing)
				}
				return out
			}
			return v.([]Thing)
		}(foods)))
		res = greedy(func(v any) []Thing {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]Thing); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []Thing{}
				}
				out := make([]Thing, len(arr))
				for i, x := range arr {
					out[i] = x.(Thing)
				}
				return out
			}
			return v.([]Thing)
		}(foods), 500.0, get_value)
		fmt.Println(list_to_string(func(v any) []Thing {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]Thing); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []Thing{}
				}
				out := make([]Thing, len(arr))
				for i, x := range arr {
					out[i] = x.(Thing)
				}
				return out
			}
			return v.([]Thing)
		}(res.Items)))
		fmt.Println(fmt.Sprint(res.TotalValue))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
