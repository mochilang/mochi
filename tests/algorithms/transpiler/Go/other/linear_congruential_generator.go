//go:build ignore

// Generated by Mochi v0.10.64 on 2025-08-12 09:24:46 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _mod(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

type LCG struct {
	Multiplier int `json:"multiplier"`
	Increment  int `json:"increment"`
	Modulo     int `json:"modulo"`
	Seed       int `json:"seed"`
}

func make_lcg(multiplier int, increment int, modulo int, seed int) LCG {
	return LCG{
		Multiplier: multiplier,
		Increment:  increment,
		Modulo:     modulo,
		Seed:       seed,
	}
}

func next_number(lcg LCG) int {
	lcg.Seed = _mod(((lcg.Multiplier * lcg.Seed) + lcg.Increment), lcg.Modulo)
	return lcg.Seed
}

var lcg LCG

var i int

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		lcg = make_lcg(1664525, 1013904223, 4294967296, _now())
		i = 0
		for i < 5 {
			fmt.Println(fmt.Sprint(next_number(lcg)))
			i = (i + 1)
		}
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
