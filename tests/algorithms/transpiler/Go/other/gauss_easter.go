//go:build ignore

// Generated by Mochi v0.10.64 on 2025-08-12 09:24:34 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	math "math"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _mod(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

type EasterDate struct {
	Month int `json:"month"`
	Day   int `json:"day"`
}

func gauss_easter(year int) EasterDate {
	var metonic_cycle int = _mod(year, 19)
	_ = metonic_cycle
	var julian_leap_year int = _mod(year, 4)
	_ = julian_leap_year
	var non_leap_year int = _mod(year, 7)
	_ = non_leap_year
	var leap_day_inhibits int = (year / 100)
	_ = leap_day_inhibits
	var lunar_orbit_correction int = ((13 + (8 * leap_day_inhibits)) / 25)
	_ = lunar_orbit_correction
	var leap_day_reinstall_number float64 = (float64(leap_day_inhibits) / float64(4.0))
	_ = leap_day_reinstall_number
	var secular_moon_shift float64 = math.Mod((((15.0 - float64(lunar_orbit_correction)) + float64(leap_day_inhibits)) - leap_day_reinstall_number), 30.0)
	_ = secular_moon_shift
	var century_starting_point float64 = math.Mod(((4.0 + float64(leap_day_inhibits)) - leap_day_reinstall_number), 7.0)
	_ = century_starting_point
	var days_to_add float64 = math.Mod(((19.0 * float64(metonic_cycle)) + secular_moon_shift), 30.0)
	_ = days_to_add
	var days_from_phm_to_sunday float64 = math.Mod(((((2.0 * float64(julian_leap_year)) + (4.0 * float64(non_leap_year))) + (6.0 * days_to_add)) + century_starting_point), 7.0)
	_ = days_from_phm_to_sunday
	if (days_to_add == 29.0) && (days_from_phm_to_sunday == 6.0) {
		return EasterDate{
			Month: 4,
			Day:   19,
		}
	}
	if (days_to_add == 28.0) && (days_from_phm_to_sunday == 6.0) {
		return EasterDate{
			Month: 4,
			Day:   18,
		}
	}
	var offset int = int((days_to_add + days_from_phm_to_sunday))
	_ = offset
	var total int = (22 + offset)
	_ = total
	if total > 31 {
		return EasterDate{
			Month: 4,
			Day:   (total - 31),
		}
	}
	return EasterDate{
		Month: 3,
		Day:   total,
	}
}

func format_date(year int, d EasterDate) string {
	var month string = func() string {
		if d.Month < 10 {
			return ("0" + fmt.Sprint(d.Month))
		} else {
			return fmt.Sprint(d.Month)
		}
	}()
	_ = month
	_ = month
	var day string = func() string {
		if d.Day < 10 {
			return ("0" + fmt.Sprint(d.Day))
		} else {
			return fmt.Sprint(d.Day)
		}
	}()
	_ = day
	_ = day
	return ((((fmt.Sprint(year) + "-") + month) + "-") + day)
}

var years []int

var i int

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		years = []int{func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(1994), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(2000), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(2010), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(2021), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(2023), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(2032), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(2100)}
		i = 0
		for i < len(years) {
			var y int = _index(years, i)
			_ = y
			var e EasterDate = gauss_easter(y)
			_ = e
			fmt.Println(((("Easter in " + fmt.Sprint(y)) + " is ") + format_date(y, e)))
			i = (i + 1)
		}
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
