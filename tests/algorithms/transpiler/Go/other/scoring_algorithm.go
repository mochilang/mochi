//go:build ignore

// Generated by Mochi v0.10.64 on 2025-08-12 10:09:18 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	s[idx] = v
}

func get_data(source_data [][]float64) [][]float64 {
	var data_lists [][]float64 = [][]float64{}
	_ = data_lists
	var i int = 0
	_ = i
	for i < len(source_data) {
		var row []float64 = _index(source_data, i)
		_ = row
		var j int = 0
		_ = j
		for j < len(row) {
			if len(data_lists) < (j + 1) {
				var empty []float64 = []float64{}
				_ = empty
				data_lists = append(data_lists, empty)
			}
			_setIndex(data_lists, j, append(_index(data_lists, j), _index(row, j)))
			j = (j + 1)
		}
		i = (i + 1)
	}
	return data_lists
}

func calculate_each_score(data_lists [][]float64, weights []int) [][]float64 {
	var score_lists [][]float64 = [][]float64{}
	_ = score_lists
	var i int = 0
	_ = i
	for i < len(data_lists) {
		var dlist []float64 = _index(data_lists, i)
		_ = dlist
		var weight int = _index(weights, i)
		_ = weight
		var mind float64 = _index(dlist, 0)
		_ = mind
		var maxd float64 = _index(dlist, 0)
		_ = maxd
		var j int = 1
		_ = j
		for j < len(dlist) {
			var val float64 = _index(dlist, j)
			_ = val
			if val < mind {
				mind = val
			}
			if val > maxd {
				maxd = val
			}
			j = (j + 1)
		}
		var score []float64 = []float64{}
		_ = score
		j = 0
		if weight == 0 {
			for j < len(dlist) {
				var item float64 = _index(dlist, j)
				_ = item
				if (maxd - mind) == 0.0 {
					score = append(score, 1.0)
				} else {
					score = append(score, (1.0 - (float64((item - mind)) / float64((maxd - mind)))))
				}
				j = (j + 1)
			}
		} else {
			for j < len(dlist) {
				var item float64 = _index(dlist, j)
				_ = item
				if (maxd - mind) == 0.0 {
					score = append(score, 0.0)
				} else {
					score = append(score, (float64((item - mind)) / float64((maxd - mind))))
				}
				j = (j + 1)
			}
		}
		score_lists = append(score_lists, score)
		i = (i + 1)
	}
	return score_lists
}

func generate_final_scores(score_lists [][]float64) []float64 {
	var count int = len(_index(score_lists, 0))
	_ = count
	var final_scores []float64 = []float64{}
	_ = final_scores
	var i int = 0
	_ = i
	for i < count {
		final_scores = append(final_scores, 0.0)
		i = (i + 1)
	}
	i = 0
	for i < len(score_lists) {
		var slist []float64 = _index(score_lists, i)
		_ = slist
		var j int = 0
		_ = j
		for j < len(slist) {
			_setIndex(final_scores, j, (_index(final_scores, j) + _index(slist, j)))
			j = (j + 1)
		}
		i = (i + 1)
	}
	return final_scores
}

func procentual_proximity(source_data [][]float64, weights []int) [][]float64 {
	var data_lists [][]float64 = get_data(func(v any) [][]float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]float64{}
			}
			out := make([][]float64, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []float64 {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]float64); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []float64{}
						}
						out := make([]float64, len(arr))
						for i, x := range arr {
							out[i] = x.(float64)
						}
						return out
					}
					return v.([]float64)
				}(x)
			}
			return out
		}
		return v.([][]float64)
	}(source_data))
	_ = data_lists
	var score_lists [][]float64 = calculate_each_score(func(v any) [][]float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]float64{}
			}
			out := make([][]float64, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []float64 {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]float64); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []float64{}
						}
						out := make([]float64, len(arr))
						for i, x := range arr {
							out[i] = x.(float64)
						}
						return out
					}
					return v.([]float64)
				}(x)
			}
			return out
		}
		return v.([][]float64)
	}(data_lists), func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(weights))
	_ = score_lists
	var final_scores []float64 = generate_final_scores(func(v any) [][]float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]float64{}
			}
			out := make([][]float64, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []float64 {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]float64); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []float64{}
						}
						out := make([]float64, len(arr))
						for i, x := range arr {
							out[i] = x.(float64)
						}
						return out
					}
					return v.([]float64)
				}(x)
			}
			return out
		}
		return v.([][]float64)
	}(score_lists))
	_ = final_scores
	var i int = 0
	_ = i
	for i < len(final_scores) {
		_setIndex(source_data, i, append(_index(source_data, i), _index(final_scores, i)))
		i = (i + 1)
	}
	return source_data
}

var vehicles [][]float64

var weights []int

var result [][]float64

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		vehicles = [][]float64{}
		vehicles = append(vehicles, []float64{20.0, 60.0, 2012.0})
		vehicles = append(vehicles, []float64{23.0, 90.0, 2015.0})
		vehicles = append(vehicles, []float64{22.0, 50.0, 2011.0})
		weights = []int{func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(0), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(0), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(1)}
		result = procentual_proximity(func(v any) [][]float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]float64{}
				}
				out := make([][]float64, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []float64 {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]float64); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []float64{}
							}
							out := make([]float64, len(arr))
							for i, x := range arr {
								out[i] = x.(float64)
							}
							return out
						}
						return v.([]float64)
					}(x)
				}
				return out
			}
			return v.([][]float64)
		}(vehicles), func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(weights))
		fmt.Println(fmt.Sprint(result))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
