//go:build ignore

// Generated by Mochi v0.10.64 on 2025-08-12 10:08:54 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	s[idx] = v
}

func index_of(xs []int, x int) int {
	var i int = 0
	_ = i
	for i < len(xs) {
		if int(_index(xs, i)) == x {
			return i
		}
		i = (i + 1)
	}
	return (0 - 1)
}

func majority_vote(votes []int, votes_needed_to_win int) []int {
	if votes_needed_to_win < 2 {
		return func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}([]int{})
	}
	var candidates []int = []int{}
	_ = candidates
	var counts []int = []int{}
	_ = counts
	var i int = 0
	_ = i
	for i < len(votes) {
		var v int = _index(votes, i)
		_ = v
		var idx int = index_of(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(candidates), v)
		_ = idx
		if idx != (0 - 1) {
			_setIndex(counts, idx, (int(_index(counts, idx)) + 1))
		} else {
			if len(candidates) < (votes_needed_to_win - 1) {
				candidates = append(candidates, v)
				counts = append(counts, 1)
			} else {
				var j int = 0
				_ = j
				for j < len(counts) {
					_setIndex(counts, j, (int(_index(counts, j)) - 1))
					j = (j + 1)
				}
				var new_candidates []int = []int{}
				_ = new_candidates
				var new_counts []int = []int{}
				_ = new_counts
				j = 0
				for j < len(candidates) {
					if int(_index(counts, j)) > 0 {
						new_candidates = append(new_candidates, _index(candidates, j))
						new_counts = append(new_counts, _index(counts, j))
					}
					j = (j + 1)
				}
				candidates = new_candidates
				counts = new_counts
			}
		}
		i = (i + 1)
	}
	var final_counts []int = []int{}
	_ = final_counts
	var j int = 0
	_ = j
	for j < len(candidates) {
		final_counts = append(final_counts, 0)
		j = (j + 1)
	}
	i = 0
	for i < len(votes) {
		var v int = _index(votes, i)
		_ = v
		var idx int = index_of(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(candidates), v)
		_ = idx
		if idx != (0 - 1) {
			_setIndex(final_counts, idx, (int(_index(final_counts, idx)) + 1))
		}
		i = (i + 1)
	}
	var result []int = []int{}
	_ = result
	j = 0
	for j < len(candidates) {
		if (int(_index(final_counts, j)) * votes_needed_to_win) > len(votes) {
			result = append(result, _index(candidates, j))
		}
		j = (j + 1)
	}
	return result
}

func mochiMain() {
	var votes []int = []int{func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(1), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(2), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(2), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(3), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(1), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(3), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(2)}
	_ = votes
	fmt.Println(fmt.Sprint(majority_vote(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(votes), 3)))
	fmt.Println(fmt.Sprint(majority_vote(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(votes), 2)))
	fmt.Println(fmt.Sprint(majority_vote(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(votes), 4)))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
