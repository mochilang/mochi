//go:build ignore

// Generated by Mochi v0.10.69 on 2025-08-22 13:07:57 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

type Item interface{ isItem() }
type Int struct {
	Value int `json:"value"`
}

func (Int) isItem() {}

type Str struct {
	Value string `json:"value"`
}

func (Str) isItem() {}

func from_int(x int) any {
	return Int{
		Value: x,
	}
}

func from_string(s string) any {
	return Str{
		Value: s,
	}
}

func item_to_string(it any) string {
	return func() string {
		switch uv := it.(type) {
		case Int:
			v := uv.Value
			return fmt.Sprint(v)
		case Str:
			s := uv.Value
			return s
		default:
			var z string
			return z
		}
	}()
}

func alternative_list_arrange(first []any, second []any) []any {
	var len1 int = len(first)
	_ = len1
	var len2 int = len(second)
	_ = len2
	var abs_len int = func() int {
		if len1 > len2 {
			return len1
		} else {
			return len2
		}
	}()
	_ = abs_len
	var result []any = []any{}
	_ = result
	var i int = 0
	_ = i
	for i < abs_len {
		if i < len1 {
			result = append(result, _index(first, i))
		}
		if i < len2 {
			result = append(result, _index(second, i))
		}
		i = (i + 1)
	}
	return result
}

func list_to_string(xs []any) string {
	var s string = "["
	_ = s
	var i int = 0
	_ = i
	for i < len(xs) {
		s = (s + item_to_string(_index(xs, i)))
		if i < (len(xs) - 1) {
			s = (s + ", ")
		}
		i = (i + 1)
	}
	s = (s + "]")
	return s
}

var example1 []any

var example2 []any

var example3 []any

var example4 []any

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		example1 = alternative_list_arrange([]any{from_int(1), from_int(2), from_int(3), from_int(4), from_int(5)}, []any{from_string("A"), from_string("B"), from_string("C")})
		fmt.Println(list_to_string(example1))
		example2 = alternative_list_arrange([]any{from_string("A"), from_string("B"), from_string("C")}, []any{from_int(1), from_int(2), from_int(3), from_int(4), from_int(5)})
		fmt.Println(list_to_string(example2))
		example3 = alternative_list_arrange([]any{from_string("X"), from_string("Y"), from_string("Z")}, []any{from_int(9), from_int(8), from_int(7), from_int(6)})
		fmt.Println(list_to_string(example3))
		example4 = alternative_list_arrange([]any{from_int(1), from_int(2), from_int(3), from_int(4), from_int(5)}, []any{})
		fmt.Println(list_to_string(example4))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
