//go:build ignore

// Generated by Mochi v0.10.69 on 2025-08-19 16:49:09 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

type NumberContainer struct {
	Numbermap map[int][]int `json:"numbermap"`
	Indexmap  map[int]int   `json:"indexmap"`
}

func remove_at(xs []int, idx int) []int {
	var res []int = []int{}
	_ = res
	var i int = 0
	_ = i
	for i < len(xs) {
		if i != idx {
			res = append(res, _index(xs, i))
		}
		i = (i + 1)
	}
	return res
}

func insert_at(xs []int, idx int, val int) []int {
	var res []int = []int{}
	_ = res
	var i int = 0
	_ = i
	for i < len(xs) {
		if i == idx {
			res = append(res, val)
		}
		res = append(res, _index(xs, i))
		i = (i + 1)
	}
	if idx == len(xs) {
		res = append(res, val)
	}
	return res
}

func binary_search_delete(array []int, item int) []int {
	var low int = 0
	_ = low
	var high int = (len(array) - 1)
	_ = high
	var arr []int = array
	_ = arr
	for low <= high {
		var mid int = ((low + high) / 2)
		_ = mid
		if _index(arr, mid) == item {
			arr = remove_at(func(v any) []int {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]int); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []int{}
					}
					out := make([]int, len(arr))
					for i, x := range arr {
						out[i] = x.(int)
					}
					return out
				}
				return v.([]int)
			}(arr), mid)
			return arr
		} else {
			if _index(arr, mid) < item {
				low = (mid + 1)
			} else {
				high = (mid - 1)
			}
		}
	}
	fmt.Println("ValueError: Either the item is not in the array or the array was unsorted")
	return arr
}

func binary_search_insert(array []int, index int) []int {
	var low int = 0
	_ = low
	var high int = (len(array) - 1)
	_ = high
	var arr []int = array
	_ = arr
	for low <= high {
		var mid int = ((low + high) / 2)
		_ = mid
		if _index(arr, mid) == index {
			arr = insert_at(func(v any) []int {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]int); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []int{}
					}
					out := make([]int, len(arr))
					for i, x := range arr {
						out[i] = x.(int)
					}
					return out
				}
				return v.([]int)
			}(arr), (mid + 1), index)
			return arr
		} else {
			if _index(arr, mid) < index {
				low = (mid + 1)
			} else {
				high = (mid - 1)
			}
		}
	}
	arr = insert_at(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(arr), low, index)
	return arr
}

func change(cont NumberContainer, idx int, num int) NumberContainer {
	var numbermap map[int][]int = cont.Numbermap
	_ = numbermap
	var indexmap map[int]int = cont.Indexmap
	_ = indexmap
	if func() bool { _, ok := indexmap[idx]; return ok }() {
		var old int = indexmap[idx]
		_ = old
		var indexes []int = numbermap[old]
		_ = indexes
		if len(indexes) == 1 {
			numbermap[old] = []int{}
		} else {
			numbermap[old] = binary_search_delete(func(v any) []int {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]int); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []int{}
					}
					out := make([]int, len(arr))
					for i, x := range arr {
						out[i] = x.(int)
					}
					return out
				}
				return v.([]int)
			}(indexes), idx)
		}
	}
	indexmap[idx] = num
	if func() bool { _, ok := numbermap[num]; return ok }() {
		numbermap[num] = binary_search_insert(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(numbermap[num]), idx)
	} else {
		numbermap[num] = []int{func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(idx)}
	}
	return NumberContainer{
		Numbermap: numbermap,
		Indexmap:  indexmap,
	}
}

func find(cont NumberContainer, num int) int {
	var numbermap map[int][]int = cont.Numbermap
	_ = numbermap
	if func() bool { _, ok := numbermap[num]; return ok }() {
		var arr []int = numbermap[num]
		_ = arr
		if len(arr) > 0 {
			return _index(arr, 0)
		}
	}
	return (0 - 1)
}

var nm map[int][]int

var im map[int]int

var cont NumberContainer

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		nm = map[int][]int{}
		im = map[int]int{}
		cont = NumberContainer{
			Numbermap: nm,
			Indexmap:  im,
		}
		fmt.Println(find(cont, 10))
		cont = change(cont, 0, 10)
		fmt.Println(find(cont, 10))
		cont = change(cont, 0, 20)
		fmt.Println(find(cont, 10))
		fmt.Println(find(cont, 20))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
