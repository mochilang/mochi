//go:build ignore

// Generated by Mochi v0.10.69 on 2025-08-22 13:07:58 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		return
	}
	s[idx] = v
}

type State struct {
	Claim []int   `json:"claim"`
	Alloc [][]int `json:"alloc"`
	Max   [][]int `json:"max"`
}

func processes_resource_summation(alloc [][]int) []int {
	var resources int = len(_index(alloc, 0))
	_ = resources
	var sums []int = []int{}
	_ = sums
	var i int = 0
	_ = i
	for i < resources {
		var total int = 0
		_ = total
		var j int = 0
		_ = j
		for j < len(alloc) {
			total = (total + _index(_index(alloc, j), i))
			j = (j + 1)
		}
		sums = append(sums, total)
		i = (i + 1)
	}
	return sums
}

func available_resources(claim []int, alloc_sum []int) []int {
	var avail []int = []int{}
	_ = avail
	var i int = 0
	_ = i
	for i < len(claim) {
		avail = append(avail, (_index(claim, i) - _index(alloc_sum, i)))
		i = (i + 1)
	}
	return avail
}

func need(max [][]int, alloc [][]int) [][]int {
	var needs [][]int = [][]int{}
	_ = needs
	var i int = 0
	_ = i
	for i < len(max) {
		var row []int = []int{}
		_ = row
		var j int = 0
		_ = j
		for j < len(_index(max, 0)) {
			row = append(row, (_index(_index(max, i), j) - _index(_index(alloc, i), j)))
			j = (j + 1)
		}
		needs = append(needs, row)
		i = (i + 1)
	}
	return needs
}

func pretty_print(claim []int, alloc [][]int, max [][]int) {
	fmt.Println("         Allocated Resource Table")
	var i int = 0
	_ = i
	for i < len(alloc) {
		var row []int = _index(alloc, i)
		_ = row
		var line string = (("P" + fmt.Sprint((i + 1))) + "       ")
		_ = line
		var j int = 0
		_ = j
		for j < len(row) {
			line = (line + fmt.Sprint(_index(row, j)))
			if j < (len(row) - 1) {
				line = (line + "        ")
			}
			j = (j + 1)
		}
		fmt.Println(line)
		fmt.Println("")
		i = (i + 1)
	}
	fmt.Println("         System Resource Table")
	i = 0
	for i < len(max) {
		var row []int = _index(max, i)
		_ = row
		var line string = (("P" + fmt.Sprint((i + 1))) + "       ")
		_ = line
		var j int = 0
		_ = j
		for j < len(row) {
			line = (line + fmt.Sprint(_index(row, j)))
			if j < (len(row) - 1) {
				line = (line + "        ")
			}
			j = (j + 1)
		}
		fmt.Println(line)
		fmt.Println("")
		i = (i + 1)
	}
	var usage string = ""
	_ = usage
	i = 0
	for i < len(claim) {
		if i > 0 {
			usage = (usage + " ")
		}
		usage = (usage + fmt.Sprint(_index(claim, i)))
		i = (i + 1)
	}
	var alloc_sum []int = processes_resource_summation(func(v any) [][]int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]int{}
			}
			out := make([][]int, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []int {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]int); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []int{}
						}
						out := make([]int, len(arr))
						for i, x := range arr {
							out[i] = x.(int)
						}
						return out
					}
					return v.([]int)
				}(x)
			}
			return out
		}
		return v.([][]int)
	}(alloc))
	_ = alloc_sum
	var avail []int = available_resources(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(claim), func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(alloc_sum))
	_ = avail
	var avail_str string = ""
	_ = avail_str
	i = 0
	for i < len(avail) {
		if i > 0 {
			avail_str = (avail_str + " ")
		}
		avail_str = (avail_str + fmt.Sprint(_index(avail, i)))
		i = (i + 1)
	}
	fmt.Println(("Current Usage by Active Processes: " + usage))
	fmt.Println(("Initial Available Resources:       " + avail_str))
}

func bankers_algorithm(claim []int, alloc [][]int, max [][]int) {
	var need_list [][]int = need(func(v any) [][]int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]int{}
			}
			out := make([][]int, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []int {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]int); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []int{}
						}
						out := make([]int, len(arr))
						for i, x := range arr {
							out[i] = x.(int)
						}
						return out
					}
					return v.([]int)
				}(x)
			}
			return out
		}
		return v.([][]int)
	}(max), func(v any) [][]int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]int{}
			}
			out := make([][]int, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []int {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]int); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []int{}
						}
						out := make([]int, len(arr))
						for i, x := range arr {
							out[i] = x.(int)
						}
						return out
					}
					return v.([]int)
				}(x)
			}
			return out
		}
		return v.([][]int)
	}(alloc))
	_ = need_list
	var alloc_sum []int = processes_resource_summation(func(v any) [][]int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]int{}
			}
			out := make([][]int, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []int {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]int); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []int{}
						}
						out := make([]int, len(arr))
						for i, x := range arr {
							out[i] = x.(int)
						}
						return out
					}
					return v.([]int)
				}(x)
			}
			return out
		}
		return v.([][]int)
	}(alloc))
	_ = alloc_sum
	var avail []int = available_resources(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(claim), func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(alloc_sum))
	_ = avail
	fmt.Println("__________________________________________________")
	fmt.Println("")
	var finished []bool = []bool{}
	_ = finished
	var i int = 0
	_ = i
	for i < len(need_list) {
		finished = append(finished, false)
		i = (i + 1)
	}
	var remaining int = len(need_list)
	_ = remaining
	for remaining > 0 {
		var safe bool = false
		_ = safe
		var p int = 0
		_ = p
		for p < len(need_list) {
			if !_index(finished, p) {
				var exec bool = true
				_ = exec
				var r int = 0
				_ = r
				for r < len(avail) {
					if _index(_index(need_list, p), r) > _index(avail, r) {
						exec = false
						break
					}
					r = (r + 1)
				}
				if exec {
					safe = true
					fmt.Println((("Process " + fmt.Sprint((p + 1))) + " is executing."))
					r = 0
					for r < len(avail) {
						_setIndex(avail, r, (_index(avail, r) + _index(_index(alloc, p), r)))
						r = (r + 1)
					}
					var avail_str string = ""
					_ = avail_str
					r = 0
					for r < len(avail) {
						if r > 0 {
							avail_str = (avail_str + " ")
						}
						avail_str = (avail_str + fmt.Sprint(_index(avail, r)))
						r = (r + 1)
					}
					fmt.Println(("Updated available resource stack for processes: " + avail_str))
					fmt.Println("The process is in a safe state.")
					fmt.Println("")
					_setIndex(finished, p, true)
					remaining = (remaining - 1)
				}
			}
			p = (p + 1)
		}
		if !safe {
			fmt.Println("System in unsafe state. Aborting...")
			fmt.Println("")
			break
		}
	}
}

var claim_vector []int

var allocated_resources_table [][]int

var maximum_claim_table [][]int

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		claim_vector = []int{8, 5, 9, 7}
		allocated_resources_table = [][]int{[]int{2, 0, 1, 1}, []int{0, 1, 2, 1}, []int{4, 0, 0, 3}, []int{0, 2, 1, 0}, []int{1, 0, 3, 0}}
		maximum_claim_table = [][]int{[]int{3, 2, 1, 4}, []int{0, 2, 5, 2}, []int{5, 1, 0, 5}, []int{1, 5, 3, 0}, []int{3, 0, 3, 3}}
		pretty_print(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(claim_vector), func(v any) [][]int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]int{}
				}
				out := make([][]int, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []int {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]int); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []int{}
							}
							out := make([]int, len(arr))
							for i, x := range arr {
								out[i] = x.(int)
							}
							return out
						}
						return v.([]int)
					}(x)
				}
				return out
			}
			return v.([][]int)
		}(allocated_resources_table), func(v any) [][]int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]int{}
				}
				out := make([][]int, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []int {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]int); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []int{}
							}
							out := make([]int, len(arr))
							for i, x := range arr {
								out[i] = x.(int)
							}
							return out
						}
						return v.([]int)
					}(x)
				}
				return out
			}
			return v.([][]int)
		}(maximum_claim_table))
		bankers_algorithm(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(claim_vector), func(v any) [][]int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]int{}
				}
				out := make([][]int, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []int {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]int); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []int{}
							}
							out := make([]int, len(arr))
							for i, x := range arr {
								out[i] = x.(int)
							}
							return out
						}
						return v.([]int)
					}(x)
				}
				return out
			}
			return v.([][]int)
		}(allocated_resources_table), func(v any) [][]int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]int{}
				}
				out := make([][]int, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []int {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]int); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []int{}
							}
							out := make([]int, len(arr))
							for i, x := range arr {
								out[i] = x.(int)
							}
							return out
						}
						return v.([]int)
					}(x)
				}
				return out
			}
			return v.([][]int)
		}(maximum_claim_table))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
