//go:build ignore

// Generated by Mochi v0.10.61 on 2025-08-08 18:16:08 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

type ConnMock struct {
	RecvCalled  int `json:"recv_called"`
	SendCalled  int `json:"send_called"`
	CloseCalled int `json:"close_called"`
}

func make_conn_mock() ConnMock {
	return ConnMock{
		RecvCalled:  0,
		SendCalled:  0,
		CloseCalled: 0,
	}
}

func conn_recv(conn ConnMock, size int) int {
	conn.RecvCalled = (conn.RecvCalled + 1)
	return 0
}

func conn_send(conn ConnMock, data int) {
	conn.SendCalled = (conn.SendCalled + 1)
}

func conn_close(conn ConnMock) {
	conn.CloseCalled = (conn.CloseCalled + 1)
}

type SocketMock struct {
	BindCalled     int      `json:"bind_called"`
	ListenCalled   int      `json:"listen_called"`
	AcceptCalled   int      `json:"accept_called"`
	ShutdownCalled int      `json:"shutdown_called"`
	CloseCalled    int      `json:"close_called"`
	Conn           ConnMock `json:"conn"`
}

func make_socket_mock(conn ConnMock) SocketMock {
	return SocketMock{
		BindCalled:     0,
		ListenCalled:   0,
		AcceptCalled:   0,
		ShutdownCalled: 0,
		CloseCalled:    0,
		Conn:           conn,
	}
}

func socket_bind(sock SocketMock) {
	sock.BindCalled = (sock.BindCalled + 1)
}

func socket_listen(sock SocketMock) {
	sock.ListenCalled = (sock.ListenCalled + 1)
}

func socket_accept(sock SocketMock) ConnMock {
	sock.AcceptCalled = (sock.AcceptCalled + 1)
	return sock.Conn
}

func socket_shutdown(sock SocketMock) {
	sock.ShutdownCalled = (sock.ShutdownCalled + 1)
}

func socket_close(sock SocketMock) {
	sock.CloseCalled = (sock.CloseCalled + 1)
}

type FileMock struct {
	ReadCalled int   `json:"read_called"`
	Data       []int `json:"data"`
}

func make_file_mock(values []int) FileMock {
	return FileMock{
		ReadCalled: 0,
		Data:       values,
	}
}

func file_read(f FileMock, size int) int {
	if f.ReadCalled < len(f.Data) {
		var value int = _index(f.Data, f.ReadCalled)
		_ = value
		_ = value
		f.ReadCalled = (f.ReadCalled + 1)
		return value
	}
	f.ReadCalled = (f.ReadCalled + 1)
	return 0
}

func file_open() FileMock {
	return make_file_mock(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}([]int{func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(1), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(0)}))
}

func send_file(sock SocketMock, f FileMock) {
	socket_bind(sock)
	socket_listen(sock)
	conn := socket_accept(sock)
	_ = conn
	_ := conn_recv(ConnMock(conn), 1024)
	_ = _
	_ = _
	var data int = file_read(f, 1024)
	_ = data
	for data != 0 {
		conn_send(ConnMock(conn), data)
		data = file_read(f, 1024)
	}
	conn_close(ConnMock(conn))
	socket_shutdown(sock)
	socket_close(sock)
}

func test_send_file_running_as_expected() string {
	conn := make_conn_mock()
	_ = conn
	sock := make_socket_mock(ConnMock(conn))
	_ = sock
	f := file_open()
	_ = f
	send_file(SocketMock(sock), FileMock(f))
	if ((((((((int(SocketMock(sock).BindCalled) == 1) && (int(SocketMock(sock).ListenCalled) == 1)) && (int(SocketMock(sock).AcceptCalled) == 1)) && (int(ConnMock(conn).RecvCalled) == 1)) && (int(FileMock(f).ReadCalled) >= 1)) && (int(ConnMock(conn).SendCalled) == 1)) && (int(ConnMock(conn).CloseCalled) == 1)) && (int(SocketMock(sock).ShutdownCalled) == 1)) && (int(ConnMock(sock).CloseCalled) == 1) {
		return "pass"
	}
	return "fail"
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(test_send_file_running_as_expected())
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
