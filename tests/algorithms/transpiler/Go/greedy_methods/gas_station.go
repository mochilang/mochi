//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-15 21:31:39 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

type GasStation struct {
	GasQuantity int `json:"gas_quantity"`
	Cost        int `json:"cost"`
}

func get_gas_stations(gas_quantities []int, costs []int) []GasStation {
	var stations []GasStation = []GasStation{}
	_ = stations
	var i int = 0
	_ = i
	for i < len(gas_quantities) {
		stations = append(stations, GasStation{
			GasQuantity: _index(gas_quantities, i),
			Cost:        _index(costs, i),
		})
		i = (i + 1)
	}
	return stations
}

func can_complete_journey(gas_stations []GasStation) int {
	var total_gas int = 0
	_ = total_gas
	var total_cost int = 0
	_ = total_cost
	var i int = 0
	_ = i
	for i < len(gas_stations) {
		total_gas = (total_gas + _index(gas_stations, i).GasQuantity)
		total_cost = (total_cost + _index(gas_stations, i).Cost)
		i = (i + 1)
	}
	if total_gas < total_cost {
		return (0 - 1)
	}
	var start int = 0
	_ = start
	var net int = 0
	_ = net
	i = 0
	for i < len(gas_stations) {
		var station GasStation = _index(gas_stations, i)
		_ = station
		net = ((net + station.GasQuantity) - station.Cost)
		if net < 0 {
			start = (i + 1)
			net = 0
		}
		i = (i + 1)
	}
	return start
}

var example1 []GasStation

var example2 []GasStation

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		example1 = get_gas_stations(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}([]int{1, 2, 3, 4, 5}), func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}([]int{3, 4, 5, 1, 2}))
		fmt.Println(fmt.Sprint(can_complete_journey(func(v any) []GasStation {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]GasStation); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []GasStation{}
				}
				out := make([]GasStation, len(arr))
				for i, x := range arr {
					out[i] = x.(GasStation)
				}
				return out
			}
			return v.([]GasStation)
		}(example1))))
		example2 = get_gas_stations(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}([]int{2, 3, 4}), func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}([]int{3, 4, 3}))
		fmt.Println(fmt.Sprint(can_complete_journey(func(v any) []GasStation {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]GasStation); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []GasStation{}
				}
				out := make([]GasStation, len(arr))
				for i, x := range arr {
					out[i] = x.(GasStation)
				}
				return out
			}
			return v.([]GasStation)
		}(example2))))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
