//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-15 21:31:32 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"sort"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

type Item struct {
	Weight int `json:"weight"`
	Value  int `json:"value"`
}

func ratio(item Item) float64 {
	return (float64(item.Value) / float64(item.Weight))
}

func fractional_cover(items []Item, capacity int) float64 {
	if capacity < 0 {
		panic("Capacity cannot be negative")
	}
	var total float64 = 0.0
	_ = total
	var remaining int = capacity
	_ = remaining
	var sorted []Item = func() []Item {
		type pair struct {
			Key float64
			Val Item
		}
		pairs := []pair{}
		for _, it := range items {
			pairs = append(pairs, pair{(0 - ratio(it)), it})
		}
		sort.Slice(pairs, func(i, j int) bool { return pairs[i].Key < pairs[j].Key })
		res := make([]Item, len(pairs))
		for i, p := range pairs {
			res[i] = p.Val
		}
		return res
	}()
	_ = sorted
	var idx int = 0
	_ = idx
	for (idx < len(sorted)) && (remaining > 0) {
		var item Item = _index(sorted, idx)
		_ = item
		var take int = func() int {
			if item.Weight < remaining {
				return item.Weight
			} else {
				return remaining
			}
		}()
		_ = take
		total = (total + (float64(take) * ratio(item)))
		remaining = (remaining - take)
		idx = (idx + 1)
	}
	return total
}

var items1 []Item

var items2 []Item

var items3 []Item

var items4 []Item

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		items1 = []Item{Item{
			Weight: 10,
			Value:  60,
		}, Item{
			Weight: 20,
			Value:  100,
		}, Item{
			Weight: 30,
			Value:  120,
		}}
		fmt.Println(fmt.Sprint(fractional_cover(func(v any) []Item {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]Item); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []Item{}
				}
				out := make([]Item, len(arr))
				for i, x := range arr {
					out[i] = x.(Item)
				}
				return out
			}
			return v.([]Item)
		}(items1), 50)))
		items2 = []Item{Item{
			Weight: 20,
			Value:  100,
		}, Item{
			Weight: 30,
			Value:  120,
		}, Item{
			Weight: 10,
			Value:  60,
		}}
		fmt.Println(fmt.Sprint(fractional_cover(func(v any) []Item {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]Item); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []Item{}
				}
				out := make([]Item, len(arr))
				for i, x := range arr {
					out[i] = x.(Item)
				}
				return out
			}
			return v.([]Item)
		}(items2), 25)))
		items3 = []Item{}
		fmt.Println(fmt.Sprint(fractional_cover(func(v any) []Item {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]Item); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []Item{}
				}
				out := make([]Item, len(arr))
				for i, x := range arr {
					out[i] = x.(Item)
				}
				return out
			}
			return v.([]Item)
		}(items3), 50)))
		items4 = []Item{Item{
			Weight: 10,
			Value:  60,
		}}
		fmt.Println(fmt.Sprint(fractional_cover(func(v any) []Item {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]Item); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []Item{}
				}
				out := make([]Item, len(arr))
				for i, x := range arr {
					out[i] = x.(Item)
				}
				return out
			}
			return v.([]Item)
		}(items4), 5)))
		fmt.Println(fmt.Sprint(fractional_cover(func(v any) []Item {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]Item); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []Item{}
				}
				out := make([]Item, len(arr))
				for i, x := range arr {
					out[i] = x.(Item)
				}
				return out
			}
			return v.([]Item)
		}(items4), 1)))
		fmt.Println(fmt.Sprint(fractional_cover(func(v any) []Item {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]Item); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []Item{}
				}
				out := make([]Item, len(arr))
				for i, x := range arr {
					out[i] = x.(Item)
				}
				return out
			}
			return v.([]Item)
		}(items4), 0)))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
