//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-15 21:31:47 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

type HeapItem struct {
	Value   int `json:"value"`
	ListIDx int `json:"list_idx"`
	ElemIDx int `json:"elem_idx"`
}

var INF int

func smallest_range(nums [][]int) []int {
	var heap []HeapItem = []HeapItem{}
	_ = heap
	var current_max int = (0 - INF)
	_ = current_max
	var i int = 0
	_ = i
	for i < len(nums) {
		var first_val int = _index(_index(nums, i), 0)
		_ = first_val
		heap = append(heap, HeapItem{
			Value:   first_val,
			ListIDx: i,
			ElemIDx: 0,
		})
		if first_val > current_max {
			current_max = first_val
		}
		i = (i + 1)
	}
	var best []int = []int{func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}((0 - INF)), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(INF)}
	_ = best
	for len(heap) > 0 {
		var min_idx int = 0
		_ = min_idx
		var j int = 1
		_ = j
		for j < len(heap) {
			var hj HeapItem = _index(heap, j)
			_ = hj
			var hmin HeapItem = _index(heap, min_idx)
			_ = hmin
			if hj.Value < hmin.Value {
				min_idx = j
			}
			j = (j + 1)
		}
		var item HeapItem = _index(heap, min_idx)
		_ = item
		var new_heap []HeapItem = []HeapItem{}
		_ = new_heap
		var k int = 0
		_ = k
		for k < len(heap) {
			if k != min_idx {
				new_heap = append(new_heap, _index(heap, k))
			}
			k = (k + 1)
		}
		heap = new_heap
		var current_min int = item.Value
		_ = current_min
		if (current_max - current_min) < (_index(best, 1) - _index(best, 0)) {
			best = []int{func(v any) int {
				if vv, ok := v.(int); ok {
					return vv
				}
				return 0
			}(current_min), func(v any) int {
				if vv, ok := v.(int); ok {
					return vv
				}
				return 0
			}(current_max)}
		}
		if item.ElemIDx == (len(_index(nums, item.ListIDx)) - 1) {
			break
		}
		var next_val int = _index(_index(nums, item.ListIDx), (item.ElemIDx + 1))
		_ = next_val
		heap = append(heap, HeapItem{
			Value:   next_val,
			ListIDx: item.ListIDx,
			ElemIDx: (item.ElemIDx + 1),
		})
		if next_val > current_max {
			current_max = next_val
		}
	}
	return best
}

func list_to_string(arr []int) string {
	var s string = "["
	_ = s
	var i int = 0
	_ = i
	for i < len(arr) {
		s = (s + fmt.Sprint(_index(arr, i)))
		if i < (len(arr) - 1) {
			s = (s + ", ")
		}
		i = (i + 1)
	}
	return (s + "]")
}

func mochiMain() {
	var result1 []int = smallest_range(func(v any) [][]int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]int{}
			}
			out := make([][]int, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []int {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]int); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []int{}
						}
						out := make([]int, len(arr))
						for i, x := range arr {
							out[i] = x.(int)
						}
						return out
					}
					return v.([]int)
				}(x)
			}
			return out
		}
		return v.([][]int)
	}([][]int{[]int{4, 10, 15, 24, 26}, []int{0, 9, 12, 20}, []int{5, 18, 22, 30}}))
	_ = result1
	fmt.Println(list_to_string(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(result1)))
	var result2 []int = smallest_range(func(v any) [][]int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]int{}
			}
			out := make([][]int, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []int {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]int); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []int{}
						}
						out := make([]int, len(arr))
						for i, x := range arr {
							out[i] = x.(int)
						}
						return out
					}
					return v.([]int)
				}(x)
			}
			return out
		}
		return v.([][]int)
	}([][]int{[]int{1, 2, 3}, []int{1, 2, 3}, []int{1, 2, 3}}))
	_ = result2
	fmt.Println(list_to_string(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(result2)))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		INF = 1000000000
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
