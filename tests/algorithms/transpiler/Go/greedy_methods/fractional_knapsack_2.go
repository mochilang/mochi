//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-15 21:31:36 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"strings"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		return
	}
	s[idx] = v
}

type KnapsackResult struct {
	MaxValue  float64   `json:"max_value"`
	Fractions []float64 `json:"fractions"`
}

func sort_by_ratio(index []int, ratio []float64) []int {
	var i int = 1
	_ = i
	for i < len(index) {
		var key int = _index(index, i)
		_ = key
		var key_ratio float64 = _index(ratio, key)
		_ = key_ratio
		var j int = (i - 1)
		_ = j
		for (j >= 0) && (_index(ratio, _index(index, j)) < key_ratio) {
			_setIndex(index, (j + 1), _index(index, j))
			j = (j - 1)
		}
		_setIndex(index, (j + 1), key)
		i = (i + 1)
	}
	return index
}

func fractional_knapsack(value []float64, weight []float64, capacity float64) KnapsackResult {
	var n int = len(value)
	_ = n
	var index []int = []int{}
	_ = index
	var i int = 0
	_ = i
	for i < n {
		index = append(index, i)
		i = (i + 1)
	}
	var ratio []float64 = []float64{}
	_ = ratio
	i = 0
	for i < n {
		ratio = append(ratio, (float64(_index(value, i)) / float64(_index(weight, i))))
		i = (i + 1)
	}
	index = sort_by_ratio(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(index), func(v any) []float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []float64{}
			}
			out := make([]float64, len(arr))
			for i, x := range arr {
				out[i] = x.(float64)
			}
			return out
		}
		return v.([]float64)
	}(ratio))
	var fractions []float64 = []float64{}
	_ = fractions
	i = 0
	for i < n {
		fractions = append(fractions, 0.0)
		i = (i + 1)
	}
	var max_value float64 = 0.0
	_ = max_value
	var idx int = 0
	_ = idx
	for idx < len(index) {
		var item int = _index(index, idx)
		_ = item
		if _index(weight, item) <= capacity {
			_setIndex(fractions, item, 1.0)
			max_value = (max_value + _index(value, item))
			capacity = (capacity - _index(weight, item))
		} else {
			_setIndex(fractions, item, (float64(capacity) / float64(_index(weight, item))))
			max_value = (max_value + (float64((_index(value, item) * capacity)) / float64(_index(weight, item))))
			break
		}
		idx = (idx + 1)
	}
	return KnapsackResult{
		MaxValue:  max_value,
		Fractions: fractions,
	}
}

var v []float64

var w []float64

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		v = []float64{1.0, 3.0, 5.0, 7.0, 9.0}
		w = []float64{0.9, 0.7, 0.5, 0.3, 0.1}
		fmt.Println(func() string {
			b, _ := json.Marshal(fractional_knapsack(func(v any) []float64 {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]float64); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []float64{}
					}
					out := make([]float64, len(arr))
					for i, x := range arr {
						out[i] = x.(float64)
					}
					return out
				}
				return v.([]float64)
			}(v), func(v any) []float64 {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]float64); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []float64{}
					}
					out := make([]float64, len(arr))
					for i, x := range arr {
						out[i] = x.(float64)
					}
					return out
				}
				return v.([]float64)
			}(w), 5.0))
			s := string(b)
			s = strings.ReplaceAll(s, ":", ": ")
			s = strings.ReplaceAll(s, ",", ", ")
			s = strings.ReplaceAll(s, "}, {", "},{")
			return s
		}())
		fmt.Println(func() string {
			b, _ := json.Marshal(fractional_knapsack(func(v any) []float64 {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]float64); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []float64{}
					}
					out := make([]float64, len(arr))
					for i, x := range arr {
						out[i] = x.(float64)
					}
					return out
				}
				return v.([]float64)
			}([]float64{1.0, 3.0, 5.0, 7.0}), func(v any) []float64 {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]float64); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []float64{}
					}
					out := make([]float64, len(arr))
					for i, x := range arr {
						out[i] = x.(float64)
					}
					return out
				}
				return v.([]float64)
			}([]float64{0.9, 0.7, 0.5, 0.3}), 30.0))
			s := string(b)
			s = strings.ReplaceAll(s, ":", ": ")
			s = strings.ReplaceAll(s, ",", ", ")
			s = strings.ReplaceAll(s, "}, {", "},{")
			return s
		}())
		fmt.Println(func() string {
			b, _ := json.Marshal(fractional_knapsack(func(v any) []float64 {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]float64); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []float64{}
					}
					out := make([]float64, len(arr))
					for i, x := range arr {
						out[i] = x.(float64)
					}
					return out
				}
				return v.([]float64)
			}([]float64{}), func(v any) []float64 {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]float64); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []float64{}
					}
					out := make([]float64, len(arr))
					for i, x := range arr {
						out[i] = x.(float64)
					}
					return out
				}
				return v.([]float64)
			}([]float64{}), 30.0))
			s := string(b)
			s = strings.ReplaceAll(s, ":", ": ")
			s = strings.ReplaceAll(s, ",", ", ")
			s = strings.ReplaceAll(s, "}, {", "},{")
			return s
		}())
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
