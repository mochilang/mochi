//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-15 21:31:34 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		return
	}
	s[idx] = v
}

type Item struct {
	Value  float64 `json:"value"`
	Weight float64 `json:"weight"`
}

func sort_by_ratio_desc(arr []Item) []Item {
	var i int = 1
	_ = i
	for i < len(arr) {
		var key Item = _index(arr, i)
		_ = key
		var j int = (i - 1)
		_ = j
		for j >= 0 {
			var current Item = _index(arr, j)
			_ = current
			if (float64(current.Value) / float64(current.Weight)) < (float64(key.Value) / float64(key.Weight)) {
				_setIndex(arr, (j + 1), current)
				j = (j - 1)
			} else {
				break
			}
		}
		_setIndex(arr, (j + 1), key)
		i = (i + 1)
	}
	return arr
}

func sum_first(arr []float64, k int) float64 {
	var s float64 = 0.0
	_ = s
	var i int = 0
	_ = i
	for (i < k) && (i < len(arr)) {
		s = (s + _index(arr, i))
		i = (i + 1)
	}
	return s
}

func frac_knapsack(vl []float64, wt []float64, w float64, n int) float64 {
	var items []Item = []Item{}
	_ = items
	var i int = 0
	_ = i
	for (i < len(vl)) && (i < len(wt)) {
		items = append(items, Item{
			Value:  _index(vl, i),
			Weight: _index(wt, i),
		})
		i = (i + 1)
	}
	items = sort_by_ratio_desc(func(v any) []Item {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]Item); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []Item{}
			}
			out := make([]Item, len(arr))
			for i, x := range arr {
				out[i] = x.(Item)
			}
			return out
		}
		return v.([]Item)
	}(items))
	var values []float64 = []float64{}
	_ = values
	var weights []float64 = []float64{}
	_ = weights
	i = 0
	for i < len(items) {
		var itm Item = _index(items, i)
		_ = itm
		values = append(values, itm.Value)
		weights = append(weights, itm.Weight)
		i = (i + 1)
	}
	var acc []float64 = []float64{}
	_ = acc
	var total float64 = 0.0
	_ = total
	i = 0
	for i < len(weights) {
		total = (total + _index(weights, i))
		acc = append(acc, total)
		i = (i + 1)
	}
	var k int = 0
	_ = k
	for (k < len(acc)) && (w >= _index(acc, k)) {
		k = (k + 1)
	}
	if k == 0 {
		return 0.0
	}
	if k >= len(values) {
		return sum_first(func(v any) []float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []float64{}
				}
				out := make([]float64, len(arr))
				for i, x := range arr {
					out[i] = x.(float64)
				}
				return out
			}
			return v.([]float64)
		}(values), len(values))
	}
	if k != n {
		return (sum_first(func(v any) []float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []float64{}
				}
				out := make([]float64, len(arr))
				for i, x := range arr {
					out[i] = x.(float64)
				}
				return out
			}
			return v.([]float64)
		}(values), k) + (float64(((w - _index(acc, (k-1))) * _index(values, k))) / float64(_index(weights, k))))
	}
	return sum_first(func(v any) []float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []float64{}
			}
			out := make([]float64, len(arr))
			for i, x := range arr {
				out[i] = x.(float64)
			}
			return out
		}
		return v.([]float64)
	}(values), k)
}

var vl []float64

var wt []float64

var result float64

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		vl = []float64{60.0, 100.0, 120.0}
		wt = []float64{10.0, 20.0, 30.0}
		result = frac_knapsack(func(v any) []float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []float64{}
				}
				out := make([]float64, len(arr))
				for i, x := range arr {
					out[i] = x.(float64)
				}
				return out
			}
			return v.([]float64)
		}(vl), func(v any) []float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []float64{}
				}
				out := make([]float64, len(arr))
				for i, x := range arr {
					out[i] = x.(float64)
				}
				return out
			}
			return v.([]float64)
		}(wt), 50.0, 3)
		fmt.Println(fmt.Sprint(result))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
