//go:build ignore

// Generated by Mochi v0.10.59 on 2025-08-06 21:25:49 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _mod(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

var ALPHABET string

func index_of(ch string) int {
	for i := 0; i < len(ALPHABET); i++ {
		if string([]rune(ALPHABET)[i]) == ch {
			return i
		}
	}
	return (0 - 1)
}

func generate_key(message string, key string) string {
	var key_new string = key
	_ = key_new
	var i int = 0
	_ = i
	for len(key_new) < len(message) {
		key_new = (key_new + string([]rune(key)[i]))
		i = (i + 1)
		if i == len(key) {
			i = 0
		}
	}
	return key_new
}

func cipher_text(message string, key_new string) string {
	var res string = ""
	_ = res
	var i int = 0
	_ = i
	for idx := 0; idx < len(message); idx++ {
		var ch string = string([]rune(message)[idx])
		_ = ch
		if ch == " " {
			res = (res + " ")
		} else {
			var x int = _mod(((index_of(ch) - index_of(string([]rune(key_new)[i]))) + 26), 26)
			_ = x
			i = (i + 1)
			res = (res + string([]rune(ALPHABET)[x]))
		}
	}
	return res
}

func original_text(cipher string, key_new string) string {
	var res string = ""
	_ = res
	var i int = 0
	_ = i
	for idx := 0; idx < len(cipher); idx++ {
		var ch string = string([]rune(cipher)[idx])
		_ = ch
		if ch == " " {
			res = (res + " ")
		} else {
			var x int = _mod(((index_of(ch) + index_of(string([]rune(key_new)[i]))) + 26), 26)
			_ = x
			i = (i + 1)
			res = (res + string([]rune(ALPHABET)[x]))
		}
	}
	return res
}

var message string

var key string

var key_new string

var encrypted string

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		ALPHABET = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
		message = "THE GERMAN ATTACK"
		key = "SECRET"
		key_new = generate_key(message, key)
		encrypted = cipher_text(message, key_new)
		fmt.Println(("Encrypted Text = " + encrypted))
		fmt.Println(("Original Text = " + original_text(encrypted, key_new)))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
