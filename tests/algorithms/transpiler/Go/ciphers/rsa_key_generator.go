//go:build ignore

// Generated by Mochi v0.10.59 on 2025-08-06 21:26:33 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _mod(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func pow2(exp int) int {
	var res int = 1
	_ = res
	var i int = 0
	_ = i
	for i < exp {
		res = (res * 2)
		i = (i + 1)
	}
	return res
}

var seed int

func next_seed(x int) int {
	return _mod(((x * 1103515245) + 12345), 2147483648)
}

func rand_range(min int, max int) int {
	seed = next_seed(seed)
	return (min + _mod(seed, (max-min)))
}

func gcd(a int, b int) int {
	var x int = a
	_ = x
	var y int = b
	_ = y
	for y != 0 {
		var temp int = _mod(x, y)
		_ = temp
		x = y
		y = temp
	}
	return x
}

func mod_inverse(e int, phi int) int {
	var t int = 0
	_ = t
	var newt int = 1
	_ = newt
	var r int = phi
	_ = r
	var newr int = e
	_ = newr
	for newr != 0 {
		var quotient int = (r / newr)
		_ = quotient
		var tmp int = newt
		_ = tmp
		newt = (t - (quotient * newt))
		t = tmp
		var tmp_r int = newr
		_ = tmp_r
		newr = (r - (quotient * newr))
		r = tmp_r
	}
	if r > 1 {
		return 0
	}
	if t < 0 {
		t = (t + phi)
	}
	return t
}

func is_prime(n int) bool {
	if n < 2 {
		return false
	}
	var i int = 2
	_ = i
	for (i * i) <= n {
		if _mod(n, i) == 0 {
			return false
		}
		i = (i + 1)
	}
	return true
}

func generate_prime(bits int) int {
	var min int = pow2((bits - 1))
	_ = min
	var max int = pow2(bits)
	_ = max
	var p int = rand_range(min, max)
	_ = p
	if _mod(p, 2) == 0 {
		p = (p + 1)
	}
	for !is_prime(p) {
		p = (p + 2)
		if p >= max {
			p = (min + 1)
		}
	}
	return p
}

type Keys struct {
	PublicKey  []int `json:"public_key"`
	PrivateKey []int `json:"private_key"`
}

func generate_key(bits int) Keys {
	var p int = generate_prime(bits)
	_ = p
	var q int = generate_prime(bits)
	_ = q
	var n int = (p * q)
	_ = n
	_ = n
	var phi int = ((p - 1) * (q - 1))
	_ = phi
	var e int = rand_range(2, phi)
	_ = e
	for gcd(e, phi) != 1 {
		e = (e + 1)
		if e >= phi {
			e = 2
		}
	}
	var d int = mod_inverse(e, phi)
	_ = d
	_ = d
	return Keys{
		PublicKey:  []int{n, e},
		PrivateKey: []int{n, d},
	}
}

var keys Keys

var pub []int

var priv []int

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		seed = 1
		keys = generate_key(8)
		pub = keys.PublicKey
		priv = keys.PrivateKey
		fmt.Println((((("Public key: (" + fmt.Sprint(pub[0])) + ", ") + fmt.Sprint(pub[1])) + ")"))
		fmt.Println((((("Private key: (" + fmt.Sprint(priv[0])) + ", ") + fmt.Sprint(priv[1])) + ")"))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
