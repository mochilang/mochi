//go:build ignore

// Generated by Mochi v0.10.59 on 2025-08-06 21:26:36 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _mod(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

func ord(ch string) int {
	var digits string = "0123456789"
	_ = digits
	var i int = 0
	_ = i
	for i < len(digits) {
		if _substr(digits, i, (i+1)) == ch {
			return (48 + i)
		}
		i = (i + 1)
	}
	var upper string = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
	_ = upper
	i = 0
	for i < len(upper) {
		if _substr(upper, i, (i+1)) == ch {
			return (65 + i)
		}
		i = (i + 1)
	}
	var lower string = "abcdefghijklmnopqrstuvwxyz"
	_ = lower
	i = 0
	for i < len(lower) {
		if _substr(lower, i, (i+1)) == ch {
			return (97 + i)
		}
		i = (i + 1)
	}
	return 0
}

func neg_pos(iterlist []int) []int {
	var i int = 1
	_ = i
	for i < len(iterlist) {
		iterlist[i] = (0 - iterlist[i])
		i = (i + 2)
	}
	return iterlist
}

func passcode_creator() []string {
	var choices string = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
	_ = choices
	var seed int = _now()
	_ = seed
	var length int = (10 + _mod(seed, 11))
	_ = length
	var password []string = []string{}
	_ = password
	var i int = 0
	_ = i
	for i < length {
		seed = _mod(((seed * 1103515245) + 12345), 2147483647)
		var idx int = _mod(seed, len(choices))
		_ = idx
		password = append(password, _substr(choices, idx, (idx+1)))
		i = (i + 1)
	}
	return password
}

func unique_sorted(chars []string) []string {
	var uniq []string = []string{}
	_ = uniq
	var i int = 0
	_ = i
	for i < len(chars) {
		var ch string = chars[i]
		_ = ch
		if !func() bool {
			for _, el := range uniq {
				if el == ch {
					return true
				}
			}
			return false
		}() {
			uniq = append(uniq, ch)
		}
		i = (i + 1)
	}
	var j int = 0
	_ = j
	for j < len(uniq) {
		var k int = (j + 1)
		_ = k
		var min_idx int = j
		_ = min_idx
		for k < len(uniq) {
			if uniq[k] < uniq[min_idx] {
				min_idx = k
			}
			k = (k + 1)
		}
		if min_idx != j {
			var tmp string = uniq[j]
			_ = tmp
			uniq[j] = uniq[min_idx]
			uniq[min_idx] = tmp
		}
		j = (j + 1)
	}
	return uniq
}

func make_key_list(passcode []string) []string {
	var key_list_options string = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~ \t\n"
	_ = key_list_options
	var breakpoints []string = unique_sorted(func(v any) []string {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]string); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []string{}
			}
			out := make([]string, len(arr))
			for i, x := range arr {
				out[i] = x.(string)
			}
			return out
		}
		return v.([]string)
	}(passcode))
	_ = breakpoints
	_ = breakpoints
	var keys_l []string = []string{}
	_ = keys_l
	var temp_list []string = []string{}
	_ = temp_list
	var i int = 0
	_ = i
	for i < len(key_list_options) {
		var ch string = _substr(key_list_options, i, (i + 1))
		_ = ch
		temp_list = append(temp_list, ch)
		if func() bool {
			for _, el := range breakpoints {
				if el == ch {
					return true
				}
			}
			return false
		}() || (i == (len(key_list_options) - 1)) {
			var k int = (len(temp_list) - 1)
			_ = k
			for k >= 0 {
				keys_l = append(keys_l, temp_list[k])
				k = (k - 1)
			}
			temp_list = []string{}
		}
		i = (i + 1)
	}
	return keys_l
}

func make_shift_key(passcode []string) int {
	var codes []int = []int{}
	_ = codes
	var i int = 0
	_ = i
	for i < len(passcode) {
		codes = append(codes, ord(passcode[i]))
		i = (i + 1)
	}
	codes = neg_pos(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(codes))
	var total int = 0
	_ = total
	i = 0
	for i < len(codes) {
		total = (total + codes[i])
		i = (i + 1)
	}
	if total > 0 {
		return total
	}
	return len(passcode)
}

type Cipher struct {
	Passcode []string `json:"passcode"`
	KeyList  []string `json:"key_list"`
	ShiftKey int      `json:"shift_key"`
}

func new_cipher(passcode_str string) Cipher {
	var passcode []string = []string{}
	_ = passcode
	if len(passcode_str) == 0 {
		passcode = passcode_creator()
	} else {
		var i int = 0
		_ = i
		for i < len(passcode_str) {
			passcode = append(passcode, _substr(passcode_str, i, (i+1)))
			i = (i + 1)
		}
	}
	var key_list []string = make_key_list(func(v any) []string {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]string); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []string{}
			}
			out := make([]string, len(arr))
			for i, x := range arr {
				out[i] = x.(string)
			}
			return out
		}
		return v.([]string)
	}(passcode))
	_ = key_list
	_ = key_list
	var shift_key int = make_shift_key(func(v any) []string {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]string); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []string{}
			}
			out := make([]string, len(arr))
			for i, x := range arr {
				out[i] = x.(string)
			}
			return out
		}
		return v.([]string)
	}(passcode))
	_ = shift_key
	_ = shift_key
	return Cipher{
		Passcode: passcode,
		KeyList:  key_list,
		ShiftKey: shift_key,
	}
}

func index_of(lst []string, ch string) int {
	var i int = 0
	_ = i
	for i < len(lst) {
		if lst[i] == ch {
			return i
		}
		i = (i + 1)
	}
	return (0 - 1)
}

func encrypt(c Cipher, plaintext string) string {
	var encoded string = ""
	_ = encoded
	var i int = 0
	_ = i
	var n int = len(c.KeyList)
	_ = n
	for i < len(plaintext) {
		var ch string = _substr(plaintext, i, (i + 1))
		_ = ch
		var position int = index_of(func(v any) []string {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]string); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []string{}
				}
				out := make([]string, len(arr))
				for i, x := range arr {
					out[i] = x.(string)
				}
				return out
			}
			return v.([]string)
		}(c.KeyList), ch)
		_ = position
		var new_pos int = _mod((position + c.ShiftKey), n)
		_ = new_pos
		encoded = (encoded + c.KeyList[new_pos])
		i = (i + 1)
	}
	return encoded
}

func decrypt(c Cipher, encoded_message string) string {
	var decoded string = ""
	_ = decoded
	var i int = 0
	_ = i
	var n int = len(c.KeyList)
	_ = n
	for i < len(encoded_message) {
		var ch string = _substr(encoded_message, i, (i + 1))
		_ = ch
		var position int = index_of(func(v any) []string {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]string); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []string{}
				}
				out := make([]string, len(arr))
				for i, x := range arr {
					out[i] = x.(string)
				}
				return out
			}
			return v.([]string)
		}(c.KeyList), ch)
		_ = position
		var new_pos int = _mod((position - c.ShiftKey), n)
		_ = new_pos
		if new_pos < 0 {
			new_pos = (new_pos + n)
		}
		decoded = (decoded + c.KeyList[new_pos])
		i = (i + 1)
	}
	return decoded
}

func test_end_to_end() string {
	var msg string = "Hello, this is a modified Caesar cipher"
	_ = msg
	_ = msg
	var cip Cipher = new_cipher("")
	_ = cip
	_ = cip
	return decrypt(cip, encrypt(cip, msg))
}

var ssc Cipher

var encoded string

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		ssc = new_cipher("4PYIXyqeQZr44")
		encoded = encrypt(ssc, "Hello, this is a modified Caesar cipher")
		fmt.Println(encoded)
		fmt.Println(decrypt(ssc, encoded))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
