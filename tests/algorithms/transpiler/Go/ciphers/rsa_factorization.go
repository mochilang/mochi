//go:build ignore

// Generated by Mochi v0.10.59 on 2025-08-06 21:26:31 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"strings"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _mod(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func gcd(a int, b int) int {
	var x int = a
	_ = x
	var y int = b
	_ = y
	for y != 0 {
		var t int = _mod(x, y)
		_ = t
		x = y
		y = t
	}
	if x < 0 {
		return (0 - x)
	}
	return x
}

func pow_mod(base int, exp int, mod int) int {
	var result int = 1
	_ = result
	var b int = _mod(base, mod)
	_ = b
	var e int = exp
	_ = e
	for e > 0 {
		if _mod(e, 2) == 1 {
			result = _mod((result * b), mod)
		}
		e = (e / 2)
		b = _mod((b * b), mod)
	}
	return result
}

func rsa_factor(d int, e int, n int) []int {
	var k int = ((d * e) - 1)
	_ = k
	var p int = 0
	_ = p
	var q int = 0
	_ = q
	var g int = 2
	_ = g
	for (p == 0) && (g < n) {
		var t int = k
		_ = t
		for _mod(t, 2) == 0 {
			t = (t / 2)
			var x int = pow_mod(g, t, n)
			_ = x
			var y int = gcd((x - 1), n)
			_ = y
			if (x > 1) && (y > 1) {
				p = y
				q = (n / y)
				break
			}
		}
		g = (g + 1)
	}
	if p > q {
		return []int{q, p}
	}
	return []int{p, q}
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(func() string {
			b, _ := json.Marshal(rsa_factor(3, 16971, 25777))
			s := string(b)
			s = strings.ReplaceAll(s, ":", ": ")
			s = strings.ReplaceAll(s, ",", ", ")
			s = strings.ReplaceAll(s, "}, {", "},{")
			return s
		}())
		fmt.Println(func() string {
			b, _ := json.Marshal(rsa_factor(7331, 11, 27233))
			s := string(b)
			s = strings.ReplaceAll(s, ":", ": ")
			s = strings.ReplaceAll(s, ",", ", ")
			s = strings.ReplaceAll(s, "}, {", "},{")
			return s
		}())
		fmt.Println(func() string {
			b, _ := json.Marshal(rsa_factor(4021, 13, 17711))
			s := string(b)
			s = strings.ReplaceAll(s, ":", ": ")
			s = strings.ReplaceAll(s, ",", ", ")
			s = strings.ReplaceAll(s, "}, {", "},{")
			return s
		}())
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
