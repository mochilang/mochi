//go:build ignore

// Generated by Mochi v0.10.59 on 2025-08-06 21:26:17 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"strings"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _mod(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

var seed int

func set_seed(s int) {
	seed = s
}

func randint(a int, b int) int {
	seed = _mod(((seed * 1103515245) + 12345), 2147483648)
	return (_mod(seed, ((b-a)+1)) + a)
}

var ascii_chars string

func ord(ch string) int {
	var i int = 0
	_ = i
	for i < len(ascii_chars) {
		if string([]rune(ascii_chars)[i]) == ch {
			return (32 + i)
		}
		i = (i + 1)
	}
	return 0
}

func chr(code int) string {
	if (code < 32) || (code > 126) {
		return ""
	}
	return string([]rune(ascii_chars)[(code - 32)])
}

func encrypt(text string) map[string][]int {
	var cipher []int = []int{}
	_ = cipher
	var key []int = []int{}
	_ = key
	var i int = 0
	_ = i
	for i < len(text) {
		var p int = ord(string([]rune(text)[i]))
		_ = p
		var k int = randint(1, 300)
		_ = k
		var c int = ((p + k) * k)
		_ = c
		cipher = append(cipher, c)
		key = append(key, k)
		i = (i + 1)
	}
	var res map[string][]int = map[string][]int{}
	_ = res
	res["cipher"] = cipher
	res["key"] = key
	return res
}

func decrypt(cipher []int, key []int) string {
	var plain string = ""
	_ = plain
	var i int = 0
	_ = i
	for i < len(key) {
		var p int = ((cipher[i] - (key[i] * key[i])) / key[i])
		_ = p
		plain = (plain + chr(p))
		i = (i + 1)
	}
	return plain
}

var res map[string][]int

var cipher []int

var key []int

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		seed = 1
		ascii_chars = " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"
		set_seed(1)
		res = encrypt("Hello")
		cipher = res["cipher"]
		key = res["key"]
		fmt.Println(func() string {
			b, _ := json.Marshal(cipher)
			s := string(b)
			s = strings.ReplaceAll(s, ":", ": ")
			s = strings.ReplaceAll(s, ",", ", ")
			s = strings.ReplaceAll(s, "}, {", "},{")
			return s
		}())
		fmt.Println(func() string {
			b, _ := json.Marshal(key)
			s := string(b)
			s = strings.ReplaceAll(s, ":", ": ")
			s = strings.ReplaceAll(s, ",", ", ")
			s = strings.ReplaceAll(s, "}, {", "},{")
			return s
		}())
		fmt.Println(decrypt(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(cipher), func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(key)))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
