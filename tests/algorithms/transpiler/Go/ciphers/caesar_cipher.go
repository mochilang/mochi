//go:build ignore

// Generated by Mochi v0.10.59 on 2025-08-06 21:25:54 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _mod(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

var default_alphabet string

func index_of(s string, ch string) int {
	var i int = 0
	_ = i
	for i < len(s) {
		if _substr(s, i, (i+1)) == ch {
			return i
		}
		i = (i + 1)
	}
	return (0 - 1)
}

func encrypt(input_string string, key int, alphabet string) string {
	var result string = ""
	_ = result
	var i int = 0
	_ = i
	var n int = len(alphabet)
	_ = n
	for i < len(input_string) {
		var ch string = _substr(input_string, i, (i + 1))
		_ = ch
		var idx int = index_of(alphabet, ch)
		_ = idx
		if idx < 0 {
			result = (result + ch)
		} else {
			var new_key int = _mod((idx + key), n)
			_ = new_key
			if new_key < 0 {
				new_key = (new_key + n)
			}
			result = (result + _substr(alphabet, new_key, (new_key+1)))
		}
		i = (i + 1)
	}
	return result
}

func decrypt(input_string string, key int, alphabet string) string {
	var result string = ""
	_ = result
	var i int = 0
	_ = i
	var n int = len(alphabet)
	_ = n
	for i < len(input_string) {
		var ch string = _substr(input_string, i, (i + 1))
		_ = ch
		var idx int = index_of(alphabet, ch)
		_ = idx
		if idx < 0 {
			result = (result + ch)
		} else {
			var new_key int = _mod((idx - key), n)
			_ = new_key
			if new_key < 0 {
				new_key = (new_key + n)
			}
			result = (result + _substr(alphabet, new_key, (new_key+1)))
		}
		i = (i + 1)
	}
	return result
}

func brute_force(input_string string, alphabet string) []string {
	var results []string = []string{}
	_ = results
	var key int = 1
	_ = key
	var n int = len(alphabet)
	_ = n
	for key <= n {
		var message string = decrypt(input_string, key, alphabet)
		_ = message
		results = append(results, message)
		key = (key + 1)
	}
	return results
}

func mochiMain() {
	var alpha string = default_alphabet
	_ = alpha
	var enc string = encrypt("The quick brown fox jumps over the lazy dog", 8, alpha)
	_ = enc
	fmt.Println(enc)
	var dec string = decrypt(enc, 8, alpha)
	_ = dec
	fmt.Println(dec)
	var brute []string = brute_force("jFyuMy xIH'N vLONy zILwy Gy!", alpha)
	_ = brute
	fmt.Println(brute[19])
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		default_alphabet = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
