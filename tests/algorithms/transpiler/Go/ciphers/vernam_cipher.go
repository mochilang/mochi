//go:build ignore

// Generated by Mochi v0.10.59 on 2025-08-06 21:26:45 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"strings"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _mod(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

func indexOf(s string, ch string) int {
	var i int = 0
	_ = i
	for i < len(s) {
		if _substr(s, i, (i+1)) == ch {
			return i
		}
		i = (i + 1)
	}
	return (0 - 1)
}

func ord(ch string) int {
	var upper string = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
	_ = upper
	var idx int = strings.Index(upper, ch)
	_ = idx
	if idx >= 0 {
		return (65 + idx)
	}
	return 0
}

func chr(n int) string {
	var upper string = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
	_ = upper
	_ = upper
	if (n >= 65) && (n < 91) {
		return _substr(upper, (n - 65), (n - 64))
	}
	return "?"
}

func vernam_encrypt(plaintext string, key string) string {
	var ciphertext string = ""
	_ = ciphertext
	var i int = 0
	_ = i
	for i < len(plaintext) {
		var p int = (ord(_substr(plaintext, i, (i+1))) - 65)
		_ = p
		var k int = (ord(_substr(key, _mod(i, len(key)), (_mod(i, len(key))+1))) - 65)
		_ = k
		var ct int = (p + k)
		_ = ct
		for ct > 25 {
			ct = (ct - 26)
		}
		ciphertext = (ciphertext + chr((ct + 65)))
		i = (i + 1)
	}
	return ciphertext
}

func vernam_decrypt(ciphertext string, key string) string {
	var decrypted string = ""
	_ = decrypted
	var i int = 0
	_ = i
	for i < len(ciphertext) {
		var c int = ord(_substr(ciphertext, i, (i + 1)))
		_ = c
		var k int = ord(_substr(key, _mod(i, len(key)), (_mod(i, len(key)) + 1)))
		_ = k
		var val int = (c - k)
		_ = val
		for val < 0 {
			val = (val + 26)
		}
		decrypted = (decrypted + chr((val + 65)))
		i = (i + 1)
	}
	return decrypted
}

var plaintext string

var key string

var encrypted string

var decrypted string

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		plaintext = "HELLO"
		key = "KEY"
		encrypted = vernam_encrypt(plaintext, key)
		decrypted = vernam_decrypt(encrypted, key)
		fmt.Println(("Plaintext: " + plaintext))
		fmt.Println(("Encrypted: " + encrypted))
		fmt.Println(("Decrypted: " + decrypted))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
