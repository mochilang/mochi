//go:build ignore

// Generated by Mochi v0.10.59 on 2025-08-06 21:25:55 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _mod(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func gcd(a int, b int) int {
	var x int = func() int {
		if a < 0 {
			return (0 - a)
		} else {
			return a
		}
	}()
	_ = x
	var y int = func() int {
		if b < 0 {
			return (0 - b)
		} else {
			return b
		}
	}()
	_ = y
	for y != 0 {
		var t int = _mod(x, y)
		_ = t
		x = y
		y = t
	}
	return x
}

func find_mod_inverse(a int, m int) int {
	if gcd(a, m) != 1 {
		panic((((("mod inverse of " + fmt.Sprint(a)) + " and ") + fmt.Sprint(m)) + " does not exist"))
	}
	var u1 int = 1
	_ = u1
	var u2 int = 0
	_ = u2
	var u3 int = a
	_ = u3
	var v1 int = 0
	_ = v1
	var v2 int = 1
	_ = v2
	var v3 int = m
	_ = v3
	for v3 != 0 {
		var q int = (u3 / v3)
		_ = q
		var t1 int = (u1 - (q * v1))
		_ = t1
		var t2 int = (u2 - (q * v2))
		_ = t2
		var t3 int = (u3 - (q * v3))
		_ = t3
		u1 = v1
		u2 = v2
		u3 = v3
		v1 = t1
		v2 = t2
		v3 = t3
	}
	var res int = _mod(u1, m)
	_ = res
	if res < 0 {
		res = (res + m)
	}
	return res
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(fmt.Sprint(find_mod_inverse(3, 11)))
		fmt.Println(fmt.Sprint(find_mod_inverse(7, 26)))
		fmt.Println(fmt.Sprint(find_mod_inverse(11, 26)))
		fmt.Println(fmt.Sprint(find_mod_inverse(17, 43)))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
