//go:build ignore

// Generated by Mochi v0.10.59 on 2025-08-06 21:26:25 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _mod(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func int_pow(base int, exp int) int {
	var result int = 1
	_ = result
	var i int = 0
	_ = i
	for i < exp {
		result = (result * base)
		i = (i + 1)
	}
	return result
}

func pow_mod(base int, exp int, mod int) int {
	var result int = 1
	_ = result
	var b int = _mod(base, mod)
	_ = b
	var e int = exp
	_ = e
	for e > 0 {
		if _mod(e, 2) == 1 {
			result = _mod((result * b), mod)
		}
		e = (e / 2)
		b = _mod((b * b), mod)
	}
	return result
}

func rand_range(low int, high int) int {
	return (_mod(_now(), (high-low)) + low)
}

func rabin_miller(num int) bool {
	var s int = (num - 1)
	_ = s
	var t int = 0
	_ = t
	for _mod(s, 2) == 0 {
		s = (s / 2)
		t = (t + 1)
	}
	var k int = 0
	_ = k
	for k < 5 {
		var a int = rand_range(2, (num - 1))
		_ = a
		var v int = pow_mod(a, s, num)
		_ = v
		if v != 1 {
			var i int = 0
			_ = i
			for v != (num - 1) {
				if i == (t - 1) {
					return false
				}
				i = (i + 1)
				v = _mod((v * v), num)
			}
		}
		k = (k + 1)
	}
	return true
}

func is_prime_low_num(num int) bool {
	if num < 2 {
		return false
	}
	var low_primes []int = []int{2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997}
	_ = low_primes
	if func() bool {
		for _, el := range low_primes {
			if el == num {
				return true
			}
		}
		return false
	}() {
		return true
	}
	var i int = 0
	_ = i
	for i < len(low_primes) {
		var p int = low_primes[i]
		_ = p
		if _mod(num, p) == 0 {
			return false
		}
		i = (i + 1)
	}
	return rabin_miller(num)
}

func generate_large_prime(keysize int) int {
	var start int = int_pow(2, (keysize - 1))
	_ = start
	var end int = int_pow(2, keysize)
	_ = end
	for {
		var num int = rand_range(start, end)
		_ = num
		if is_prime_low_num(num) {
			return num
		}
	}
}

var p int

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		p = generate_large_prime(16)
		fmt.Println(("Prime number: " + fmt.Sprint(p)))
		fmt.Println(("is_prime_low_num: " + fmt.Sprint(is_prime_low_num(p))))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
