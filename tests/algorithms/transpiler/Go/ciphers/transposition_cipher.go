//go:build ignore

// Generated by Mochi v0.10.59 on 2025-08-06 21:26:41 GMT+7
package main

import (
	"bufio"
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

var _scanner = bufio.NewScanner(os.Stdin)

func _input() string {
	if !_scanner.Scan() {
		return ""
	}
	return _scanner.Text()
}

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

func join_strings(xs []string) string {
	var res string = ""
	_ = res
	var i int = 0
	_ = i
	for i < len(xs) {
		res = (res + xs[i])
		i = (i + 1)
	}
	return res
}

func encrypt_message(key int, message string) string {
	var result string = ""
	_ = result
	var col int = 0
	_ = col
	for col < key {
		var pointer int = col
		_ = pointer
		for pointer < len(message) {
			result = (result + _substr(message, pointer, (pointer+1)))
			pointer = (pointer + key)
		}
		col = (col + 1)
	}
	return result
}

func decrypt_message(key int, message string) string {
	var num_cols int = (((len(message) + key) - 1) / key)
	_ = num_cols
	var num_rows int = key
	_ = num_rows
	var num_shaded_boxes int = ((num_cols * num_rows) - len(message))
	_ = num_shaded_boxes
	var plain_text []string = []string{}
	_ = plain_text
	var i int = 0
	_ = i
	for i < num_cols {
		plain_text = append(plain_text, "")
		i = (i + 1)
	}
	var col int = 0
	_ = col
	var row int = 0
	_ = row
	var index int = 0
	_ = index
	for index < len(message) {
		plain_text[col] = (plain_text[col] + _substr(message, index, (index+1)))
		col = (col + 1)
		if (col == num_cols) || ((col == (num_cols - 1)) && (row >= (num_rows - num_shaded_boxes))) {
			col = 0
			row = (row + 1)
		}
		index = (index + 1)
	}
	return join_strings(func(v any) []string {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]string); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []string{}
			}
			out := make([]string, len(arr))
			for i, x := range arr {
				out[i] = x.(string)
			}
			return out
		}
		return v.([]string)
	}(plain_text))
}

func mochiMain() {
	fmt.Println("Enter message: ")
	var message string = _input()
	_ = message
	var max_key int = (len(message) - 1)
	_ = max_key
	fmt.Println((("Enter key [2-" + fmt.Sprint(max_key)) + "]: "))
	var key int = func() int { n, _ := strconv.Atoi(_input()); return n }()
	_ = key
	fmt.Println("Encryption/Decryption [e/d]: ")
	var mode string = _input()
	_ = mode
	var text string = ""
	_ = text
	var first string = _substr(mode, 0, 1)
	_ = first
	if (first == "e") || (first == "E") {
		text = encrypt_message(key, message)
	} else {
		if (first == "d") || (first == "D") {
			text = decrypt_message(key, message)
		}
	}
	fmt.Println((("Output:\n" + text) + "|"))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
