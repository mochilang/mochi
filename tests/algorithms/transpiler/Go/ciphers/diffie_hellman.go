//go:build ignore

// Generated by Mochi v0.10.59 on 2025-08-06 21:26:02 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _mod(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func int_to_hex(n int) string {
	if n == 0 {
		return "0"
	}
	var digits string = "0123456789abcdef"
	_ = digits
	_ = digits
	var num int = n
	_ = num
	var res string = ""
	_ = res
	for num > 0 {
		var d int = _mod(num, 16)
		_ = d
		res = (string([]rune(digits)[d]) + res)
		num = (num / 16)
	}
	return res
}

var seed int

func rand_int() int {
	seed = _mod(((1103515245 * seed) + 12345), 2147483648)
	return seed
}

var PRIME int

func mod_pow(base int, exp int) int {
	var result int = 1
	_ = result
	var b int = _mod(base, PRIME)
	_ = b
	var e int = exp
	_ = e
	for e > 0 {
		if _mod(e, 2) == 1 {
			result = _mod((result * b), PRIME)
		}
		b = _mod((b * b), PRIME)
		e = (e / 2)
	}
	return result
}

func is_valid_public_key(key int) bool {
	if (key < 2) || (key > (PRIME - 2)) {
		return false
	}
	return (mod_pow(key, ((PRIME-1)/2)) == 1)
}

func generate_private_key() int {
	return (_mod(rand_int(), (PRIME-2)) + 2)
}

var generator int

var alice_private int

var alice_public int

var bob_private int

var bob_public int

var alice_shared int

var bob_shared int

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		seed = 123456789
		PRIME = 23
		generator = 5
		alice_private = generate_private_key()
		alice_public = mod_pow(generator, alice_private)
		bob_private = generate_private_key()
		bob_public = mod_pow(generator, bob_private)
		if !is_valid_public_key(alice_public) {
			panic("Invalid public key")
		}
		if !is_valid_public_key(bob_public) {
			panic("Invalid public key")
		}
		alice_shared = mod_pow(bob_public, alice_private)
		bob_shared = mod_pow(alice_public, bob_private)
		fmt.Println(int_to_hex(alice_shared))
		fmt.Println(int_to_hex(bob_shared))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
