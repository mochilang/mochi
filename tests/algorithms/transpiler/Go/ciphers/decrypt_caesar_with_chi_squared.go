//go:build ignore

// Generated by Mochi v0.10.59 on 2025-08-06 21:25:57 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"strings"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _mod(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

type Result struct {
	Shift   int     `json:"shift"`
	Chi     float64 `json:"chi"`
	Decoded string  `json:"decoded"`
}

func default_alphabet() []string {
	return []string{"a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"}
}

func default_frequencies() map[string]float64 {
	return func(v any) map[string]float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.(map[string]float64); ok {
			return vv
		}
		return nil
	}(map[string]float64{"a": 0.08497, "b": 0.01492, "c": 0.02202, "d": 0.04253, "e": 0.11162, "f": 0.02228, "g": 0.02015, "h": 0.06094, "i": 0.07546, "j": 0.00153, "k": 0.01292, "l": 0.04025, "m": 0.02406, "n": 0.06749, "o": 0.07507, "p": 0.01929, "q": 0.00095, "r": 0.07587, "s": 0.06327, "t": 0.09356, "u": 0.02758, "v": 0.00978, "w": 0.0256, "x": 0.0015, "y": 0.01994, "z": 0.00077})
}

func index_of(xs []string, ch string) int {
	var i int = 0
	_ = i
	for i < len(xs) {
		if xs[i] == ch {
			return i
		}
		i = (i + 1)
	}
	return (0 - 1)
}

func count_char(s string, ch string) int {
	var count int = 0
	_ = count
	var i int = 0
	_ = i
	for i < len(s) {
		if _substr(s, i, (i+1)) == ch {
			count = (count + 1)
		}
		i = (i + 1)
	}
	return count
}

func decrypt_caesar_with_chi_squared(ciphertext string, cipher_alphabet []string, frequencies_dict map[string]float64, case_sensitive bool) Result {
	var alphabet_letters []string = cipher_alphabet
	_ = alphabet_letters
	if len(alphabet_letters) == 0 {
		alphabet_letters = default_alphabet()
	}
	var frequencies map[string]float64 = frequencies_dict
	_ = frequencies
	if len(frequencies) == 0 {
		frequencies = default_frequencies()
	}
	if !case_sensitive {
		ciphertext = strings.ToLower(ciphertext)
	}
	var best_shift int = 0
	_ = best_shift
	var best_chi float64 = 0.0
	_ = best_chi
	var best_text string = ""
	_ = best_text
	var shift int = 0
	_ = shift
	for shift < len(alphabet_letters) {
		var decrypted string = ""
		_ = decrypted
		var i int = 0
		_ = i
		for i < len(ciphertext) {
			var ch string = _substr(ciphertext, i, (i + 1))
			_ = ch
			var idx int = index_of(func(v any) []string {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]string); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []string{}
					}
					out := make([]string, len(arr))
					for i, x := range arr {
						out[i] = x.(string)
					}
					return out
				}
				return v.([]string)
			}(alphabet_letters), strings.ToLower(ch))
			_ = idx
			if idx >= 0 {
				var m int = len(alphabet_letters)
				_ = m
				var new_idx int = _mod((idx - shift), m)
				_ = new_idx
				if new_idx < 0 {
					new_idx = (new_idx + m)
				}
				var new_char string = alphabet_letters[new_idx]
				_ = new_char
				if case_sensitive && (ch != strings.ToLower(ch)) {
					decrypted = (decrypted + strings.ToUpper(new_char))
				} else {
					decrypted = (decrypted + new_char)
				}
			} else {
				decrypted = (decrypted + ch)
			}
			i = (i + 1)
		}
		var chi float64 = 0.0
		_ = chi
		var lowered string = func() string {
			if case_sensitive {
				return strings.ToLower(decrypted)
			} else {
				return decrypted
			}
		}()
		_ = lowered
		var j int = 0
		_ = j
		for j < len(alphabet_letters) {
			var letter string = alphabet_letters[j]
			_ = letter
			var occ int = count_char(lowered, letter)
			_ = occ
			if occ > 0 {
				var occf float64 = float64(occ)
				_ = occf
				var expected float64 = (frequencies[letter] * occf)
				_ = expected
				var diff float64 = (occf - expected)
				_ = diff
				chi = (chi + (((diff * diff) / expected) * occf))
			}
			j = (j + 1)
		}
		if (shift == 0) || (chi < best_chi) {
			best_shift = shift
			best_chi = chi
			best_text = decrypted
		}
		shift = (shift + 1)
	}
	return Result{
		Shift:   best_shift,
		Chi:     best_chi,
		Decoded: best_text,
	}
}

var r1 Result

var r2 Result

var r3 Result

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		r1 = decrypt_caesar_with_chi_squared("dof pz aol jhlzhy jpwoly zv wvwbshy? pa pz avv lhzf av jyhjr!", func(v any) []string {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]string); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []string{}
				}
				out := make([]string, len(arr))
				for i, x := range arr {
					out[i] = x.(string)
				}
				return out
			}
			return v.([]string)
		}([]string{}), map[string]float64{}, false)
		fmt.Println(((((fmt.Sprint(r1.Shift) + ", ") + fmt.Sprint(r1.Chi)) + ", ") + r1.Decoded))
		r2 = decrypt_caesar_with_chi_squared("crybd cdbsxq", func(v any) []string {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]string); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []string{}
				}
				out := make([]string, len(arr))
				for i, x := range arr {
					out[i] = x.(string)
				}
				return out
			}
			return v.([]string)
		}([]string{}), map[string]float64{}, false)
		fmt.Println(((((fmt.Sprint(r2.Shift) + ", ") + fmt.Sprint(r2.Chi)) + ", ") + r2.Decoded))
		r3 = decrypt_caesar_with_chi_squared("Crybd Cdbsxq", func(v any) []string {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]string); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []string{}
				}
				out := make([]string, len(arr))
				for i, x := range arr {
					out[i] = x.(string)
				}
				return out
			}
			return v.([]string)
		}([]string{}), map[string]float64{}, true)
		fmt.Println(((((fmt.Sprint(r3.Shift) + ", ") + fmt.Sprint(r3.Chi)) + ", ") + r3.Decoded))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
