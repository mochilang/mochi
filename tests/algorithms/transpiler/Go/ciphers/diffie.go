//go:build ignore

// Generated by Mochi v0.10.59 on 2025-08-06 21:26:00 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _mod(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func mod_pow(base int, exp int, mod int) int {
	var result int = 1
	_ = result
	var b int = _mod(base, mod)
	_ = b
	var e int = exp
	_ = e
	for e > 0 {
		if _mod(e, 2) == 1 {
			result = _mod((result * b), mod)
		}
		e = (e / 2)
		b = _mod((b * b), mod)
	}
	return result
}

func contains(xs []int, val int) bool {
	var i int = 0
	_ = i
	for i < len(xs) {
		if xs[i] == val {
			return true
		}
		i = (i + 1)
	}
	return false
}

func find_primitive(modulus int) int {
	var r int = 1
	_ = r
	for r < modulus {
		var li []int = []int{}
		_ = li
		var x int = 0
		_ = x
		var valid bool = true
		_ = valid
		for (x < (modulus - 1)) && valid {
			var value int = mod_pow(r, x, modulus)
			_ = value
			if func() bool {
				for _, el := range li {
					if el == value {
						return true
					}
				}
				return false
			}() {
				valid = false
			} else {
				li = append(li, value)
				x = (x + 1)
			}
		}
		if valid {
			return r
		}
		r = (r + 1)
	}
	return (0 - 1)
}

var prime int

var primitive_root int

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(find_primitive(7))
		fmt.Println(find_primitive(11))
		fmt.Println(find_primitive(8))
		prime = 23
		primitive_root = find_primitive(prime)
		if primitive_root == (0 - 1) {
			fmt.Println("Cannot find the primitive for the value: -1")
		} else {
			var a_private int = 6
			_ = a_private
			var b_private int = 15
			_ = b_private
			var a_public int = mod_pow(primitive_root, a_private, prime)
			_ = a_public
			var b_public int = mod_pow(primitive_root, b_private, prime)
			_ = b_public
			var a_secret int = mod_pow(b_public, a_private, prime)
			_ = a_secret
			var b_secret int = mod_pow(a_public, b_private, prime)
			_ = b_secret
			fmt.Println(("The key value generated by A is: " + fmt.Sprint(a_secret)))
			fmt.Println(("The key value generated by B is: " + fmt.Sprint(b_secret)))
		}
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
