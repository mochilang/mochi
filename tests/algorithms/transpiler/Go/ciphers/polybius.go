//go:build ignore

// Generated by Mochi v0.10.59 on 2025-08-06 21:26:22 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"strings"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

var square [][]string

func letter_to_numbers(letter string) []int {
	var i int = 0
	_ = i
	for i < len(square) {
		var j int = 0
		_ = j
		for j < len(square[i]) {
			if square[i][j] == letter {
				return []int{(i + 1), (j + 1)}
			}
			j = (j + 1)
		}
		i = (i + 1)
	}
	return []int{0, 0}
}

func numbers_to_letter(index1 int, index2 int) string {
	return square[(index1 - 1)][(index2 - 1)]
}

func char_to_int(ch string) int {
	if ch == "1" {
		return 1
	}
	if ch == "2" {
		return 2
	}
	if ch == "3" {
		return 3
	}
	if ch == "4" {
		return 4
	}
	if ch == "5" {
		return 5
	}
	return 0
}

func encode(message string) string {
	message = strings.ToLower(message)
	var encoded string = ""
	_ = encoded
	var i int = 0
	_ = i
	for i < len(message) {
		var ch string = string([]rune(message)[i])
		_ = ch
		if ch == "j" {
			ch = "i"
		}
		if ch != " " {
			var nums []int = letter_to_numbers(ch)
			_ = nums
			encoded = ((encoded + fmt.Sprint(nums[0])) + fmt.Sprint(nums[1]))
		} else {
			encoded = (encoded + " ")
		}
		i = (i + 1)
	}
	return encoded
}

func decode(message string) string {
	var decoded string = ""
	_ = decoded
	var i int = 0
	_ = i
	for i < len(message) {
		if string([]rune(message)[i]) == " " {
			decoded = (decoded + " ")
			i = (i + 1)
		} else {
			var index1 int = char_to_int(string([]rune(message)[i]))
			_ = index1
			var index2 int = char_to_int(string([]rune(message)[(i + 1)]))
			_ = index2
			var letter string = numbers_to_letter(index1, index2)
			_ = letter
			decoded = (decoded + letter)
			i = (i + 2)
		}
	}
	return decoded
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		square = [][]string{[]string{"a", "b", "c", "d", "e"}, []string{"f", "g", "h", "i", "k"}, []string{"l", "m", "n", "o", "p"}, []string{"q", "r", "s", "t", "u"}, []string{"v", "w", "x", "y", "z"}}
		fmt.Println(encode("test message"))
		fmt.Println(encode("Test Message"))
		fmt.Println(decode("44154344 32154343112215"))
		fmt.Println(decode("4415434432154343112215"))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
