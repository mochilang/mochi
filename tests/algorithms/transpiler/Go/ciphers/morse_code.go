//go:build ignore

// Generated by Mochi v0.10.59 on 2025-08-06 21:26:15 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

var CHARS []string

var CODES []string

func to_upper_char(c string) string {
	if c == "a" {
		return "A"
	}
	if c == "b" {
		return "B"
	}
	if c == "c" {
		return "C"
	}
	if c == "d" {
		return "D"
	}
	if c == "e" {
		return "E"
	}
	if c == "f" {
		return "F"
	}
	if c == "g" {
		return "G"
	}
	if c == "h" {
		return "H"
	}
	if c == "i" {
		return "I"
	}
	if c == "j" {
		return "J"
	}
	if c == "k" {
		return "K"
	}
	if c == "l" {
		return "L"
	}
	if c == "m" {
		return "M"
	}
	if c == "n" {
		return "N"
	}
	if c == "o" {
		return "O"
	}
	if c == "p" {
		return "P"
	}
	if c == "q" {
		return "Q"
	}
	if c == "r" {
		return "R"
	}
	if c == "s" {
		return "S"
	}
	if c == "t" {
		return "T"
	}
	if c == "u" {
		return "U"
	}
	if c == "v" {
		return "V"
	}
	if c == "w" {
		return "W"
	}
	if c == "x" {
		return "X"
	}
	if c == "y" {
		return "Y"
	}
	if c == "z" {
		return "Z"
	}
	return c
}

func to_upper(s string) string {
	var res string = ""
	_ = res
	var i int = 0
	_ = i
	for i < len(s) {
		res = (res + to_upper_char(string([]rune(s)[i])))
		i = (i + 1)
	}
	return res
}

func index_of(xs []string, target string) int {
	var i int = 0
	_ = i
	for i < len(xs) {
		if xs[i] == target {
			return i
		}
		i = (i + 1)
	}
	return (0 - 1)
}

func encrypt(message string) string {
	var msg string = to_upper(message)
	_ = msg
	var res string = ""
	_ = res
	var i int = 0
	_ = i
	for i < len(msg) {
		var c string = string([]rune(msg)[i])
		_ = c
		var idx int = index_of(func(v any) []string {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]string); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []string{}
				}
				out := make([]string, len(arr))
				for i, x := range arr {
					out[i] = x.(string)
				}
				return out
			}
			return v.([]string)
		}(CHARS), c)
		_ = idx
		if idx >= 0 {
			if res != "" {
				res = (res + " ")
			}
			res = (res + CODES[idx])
		}
		i = (i + 1)
	}
	return res
}

func split_spaces(s string) []string {
	var res []string = []string{}
	_ = res
	var current string = ""
	_ = current
	var i int = 0
	_ = i
	for i < len(s) {
		var ch string = string([]rune(s)[i])
		_ = ch
		if ch == " " {
			if current != "" {
				res = append(res, current)
				current = ""
			}
		} else {
			current = (current + ch)
		}
		i = (i + 1)
	}
	if current != "" {
		res = append(res, current)
	}
	return res
}

func decrypt(message string) string {
	var parts []string = split_spaces(message)
	_ = parts
	var res string = ""
	_ = res
	for _, code := range parts {
		var idx int = index_of(func(v any) []string {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]string); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []string{}
				}
				out := make([]string, len(arr))
				for i, x := range arr {
					out[i] = x.(string)
				}
				return out
			}
			return v.([]string)
		}(CODES), code)
		_ = idx
		if idx >= 0 {
			res = (res + CHARS[idx])
		}
	}
	return res
}

var msg string

var enc string

var dec string

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		CHARS = []string{"A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "&", "@", ":", ",", ".", "'", "\"", "?", "/", "=", "+", "-", "(", ")", "!", " "}
		CODES = []string{".-", "-...", "-.-.", "-..", ".", "..-.", "--.", "....", "..", ".---", "-.-", ".-..", "--", "-.", "---", ".--.", "--.-", ".-.", "...", "-", "..-", "...-", ".--", "-..-", "-.--", "--..", ".----", "..---", "...--", "....-", ".....", "-....", "--...", "---..", "----.", "-----", ".-...", ".--.-.", "---...", "--..--", ".-.-.-", ".----.", ".-..-.", "..--..", "-..-.", "-...-", ".-.-.", "-....-", "-.--.", "-.--.-", "-.-.--", "/"}
		msg = "Morse code here!"
		fmt.Println(msg)
		enc = encrypt(msg)
		fmt.Println(enc)
		dec = decrypt(enc)
		fmt.Println(dec)
		fmt.Println(encrypt("Sos!"))
		fmt.Println(decrypt("... --- ... -.-.--"))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
