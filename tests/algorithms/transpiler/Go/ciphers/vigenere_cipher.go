//go:build ignore

// Generated by Mochi v0.10.59 on 2025-08-06 21:26:47 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _mod(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

var LETTERS string

var LETTERS_LOWER string

func find_index(s string, ch string) int {
	var i int = 0
	_ = i
	for i < len(s) {
		if string([]rune(s)[i]) == ch {
			return i
		}
		i = (i + 1)
	}
	return (0 - 1)
}

func to_upper_char(ch string) string {
	var idx int = find_index(LETTERS_LOWER, ch)
	_ = idx
	if idx >= 0 {
		return string([]rune(LETTERS)[idx])
	}
	return ch
}

func to_lower_char(ch string) string {
	var idx int = find_index(LETTERS, ch)
	_ = idx
	if idx >= 0 {
		return string([]rune(LETTERS_LOWER)[idx])
	}
	return ch
}

func is_upper(ch string) bool {
	return (find_index(LETTERS, ch) >= 0)
}

func to_upper_string(s string) string {
	var res string = ""
	_ = res
	var i int = 0
	_ = i
	for i < len(s) {
		res = (res + to_upper_char(string([]rune(s)[i])))
		i = (i + 1)
	}
	return res
}

var key string

var message string

var key_up string

var encrypted string

var key_index int

var i int

var decrypted string

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		LETTERS = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
		LETTERS_LOWER = "abcdefghijklmnopqrstuvwxyz"
		key = "HDarji"
		message = "This is Harshil Darji from Dharmaj."
		key_up = to_upper_string(key)
		encrypted = ""
		key_index = 0
		i = 0
		for i < len(message) {
			var symbol string = string([]rune(message)[i])
			_ = symbol
			var upper_symbol string = to_upper_char(symbol)
			_ = upper_symbol
			var num int = find_index(LETTERS, upper_symbol)
			_ = num
			if num >= 0 {
				num = (num + find_index(LETTERS, string([]rune(key_up)[key_index])))
				num = _mod(num, len(LETTERS))
				if is_upper(symbol) {
					encrypted = (encrypted + string([]rune(LETTERS)[num]))
				} else {
					encrypted = (encrypted + to_lower_char(string([]rune(LETTERS)[num])))
				}
				key_index = (key_index + 1)
				if key_index == len(key_up) {
					key_index = 0
				}
			} else {
				encrypted = (encrypted + symbol)
			}
			i = (i + 1)
		}
		fmt.Println(encrypted)
		decrypted = ""
		key_index = 0
		i = 0
		for i < len(encrypted) {
			var symbol string = string([]rune(encrypted)[i])
			_ = symbol
			var upper_symbol string = to_upper_char(symbol)
			_ = upper_symbol
			var num int = find_index(LETTERS, upper_symbol)
			_ = num
			if num >= 0 {
				num = (num - find_index(LETTERS, string([]rune(key_up)[key_index])))
				num = _mod(num, len(LETTERS))
				if is_upper(symbol) {
					decrypted = (decrypted + string([]rune(LETTERS)[num]))
				} else {
					decrypted = (decrypted + to_lower_char(string([]rune(LETTERS)[num])))
				}
				key_index = (key_index + 1)
				if key_index == len(key_up) {
					key_index = 0
				}
			} else {
				decrypted = (decrypted + symbol)
			}
			i = (i + 1)
		}
		fmt.Println(decrypted)
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
