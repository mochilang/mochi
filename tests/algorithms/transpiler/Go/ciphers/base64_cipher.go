//go:build ignore

// Generated by Mochi v0.10.59 on 2025-08-06 21:25:45 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"strings"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _mod(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

func _repeat(s string, n int) string {
	if n <= 0 {
		return ""
	}
	return strings.Repeat(s, n)
}

var B64_CHARSET string

func to_binary(n int) string {
	if n == 0 {
		return "0"
	}
	var num int = n
	_ = num
	var res string = ""
	_ = res
	for num > 0 {
		var bit int = _mod(num, 2)
		_ = bit
		res = (fmt.Sprint(bit) + res)
		num = (num / 2)
	}
	return res
}

func zfill(s string, width int) string {
	var res string = s
	_ = res
	var pad int = (width - len(s))
	_ = pad
	for pad > 0 {
		res = ("0" + res)
		pad = (pad - 1)
	}
	return res
}

func from_binary(s string) int {
	var i int = 0
	_ = i
	var result int = 0
	_ = result
	for i < len(s) {
		result = (result * 2)
		if _substr(s, i, (i+1)) == "1" {
			result = (result + 1)
		}
		i = (i + 1)
	}
	return result
}

func repeat(ch string, times int) string {
	var res string = ""
	_ = res
	var i int = 0
	_ = i
	for i < times {
		res = (res + ch)
		i = (i + 1)
	}
	return res
}

func char_index(s string, c string) int {
	var i int = 0
	_ = i
	for i < len(s) {
		if _substr(s, i, (i+1)) == c {
			return i
		}
		i = (i + 1)
	}
	return (0 - 1)
}

func base64_encode(data []int) string {
	var bits string = ""
	_ = bits
	var i int = 0
	_ = i
	for i < len(data) {
		bits = (bits + zfill(to_binary(data[i]), 8))
		i = (i + 1)
	}
	var pad_bits int = 0
	_ = pad_bits
	if _mod(len(bits), 6) != 0 {
		pad_bits = (6 - _mod(len(bits), 6))
		bits = (bits + _repeat("0", pad_bits))
	}
	var j int = 0
	_ = j
	var encoded string = ""
	_ = encoded
	for j < len(bits) {
		var chunk string = _substr(bits, j, (j + 6))
		_ = chunk
		var idx int = from_binary(chunk)
		_ = idx
		encoded = (encoded + _substr(B64_CHARSET, idx, (idx+1)))
		j = (j + 6)
	}
	var pad int = (pad_bits / 2)
	_ = pad
	for pad > 0 {
		encoded = (encoded + "=")
		pad = (pad - 1)
	}
	return encoded
}

func base64_decode(s string) []int {
	var padding int = 0
	_ = padding
	var end int = len(s)
	_ = end
	for (end > 0) && (_substr(s, (end-1), end) == "=") {
		padding = (padding + 1)
		end = (end - 1)
	}
	var bits string = ""
	_ = bits
	var k int = 0
	_ = k
	for k < end {
		var c string = _substr(s, k, (k + 1))
		_ = c
		var idx int = char_index(B64_CHARSET, c)
		_ = idx
		bits = (bits + zfill(to_binary(idx), 6))
		k = (k + 1)
	}
	if padding > 0 {
		bits = _substr(bits, 0, (len(bits) - (padding * 2)))
	}
	var bytes []int = []int{}
	_ = bytes
	var m int = 0
	_ = m
	for m < len(bits) {
		var byte int = from_binary(_substr(bits, m, (m + 8)))
		_ = byte
		bytes = append(bytes, byte)
		m = (m + 8)
	}
	return bytes
}

func mochiMain() {
	var data []int = []int{77, 111, 99, 104, 105}
	_ = data
	var encoded string = base64_encode(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(data))
	_ = encoded
	fmt.Println(encoded)
	func() { b, _ := json.MarshalIndent(base64_decode(encoded), "", "  "); fmt.Println(string(b)) }()
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		B64_CHARSET = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
