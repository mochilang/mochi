//go:build ignore

// Generated by Mochi v0.10.59 on 2025-08-06 21:26:08 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"math/big"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _mod(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

var ASCII_UPPERCASE string

var ASCII_LOWERCASE string

var NEG_ONE *big.Int

func index_of(s string, ch string) int {
	var i int = 0
	_ = i
	for i < len(s) {
		if _substr(s, i, (i+1)) == ch {
			return i
		}
		i = (i + 1)
	}
	return int(NEG_ONE.Int64())
}

func to_uppercase(s string) string {
	var result string = ""
	_ = result
	var i int = 0
	_ = i
	for i < len(s) {
		var ch string = _substr(s, i, (i + 1))
		_ = ch
		var idx int = index_of(ASCII_LOWERCASE, ch)
		_ = idx
		if idx == int(NEG_ONE.Int64()) {
			result = (result + ch)
		} else {
			result = (result + _substr(ASCII_UPPERCASE, idx, (idx+1)))
		}
		i = (i + 1)
	}
	return result
}

func gronsfeld(text string, key string) string {
	var ascii_len int = len(ASCII_UPPERCASE)
	_ = ascii_len
	var key_len int = len(key)
	_ = key_len
	if key_len == 0 {
		panic("integer modulo by zero")
	}
	var upper_text string = to_uppercase(text)
	_ = upper_text
	var encrypted string = ""
	_ = encrypted
	var i int = 0
	_ = i
	for i < len(upper_text) {
		var ch string = _substr(upper_text, i, (i + 1))
		_ = ch
		var idx int = index_of(ASCII_UPPERCASE, ch)
		_ = idx
		if idx == int(NEG_ONE.Int64()) {
			encrypted = (encrypted + ch)
		} else {
			var key_idx int = _mod(i, key_len)
			_ = key_idx
			_ = key_idx
			var shift int = func() int { n, _ := strconv.Atoi(_substr(key, key_idx, (key_idx + 1))); return n }()
			_ = shift
			var new_position int = _mod((idx + shift), ascii_len)
			_ = new_position
			encrypted = (encrypted + _substr(ASCII_UPPERCASE, new_position, (new_position+1)))
		}
		i = (i + 1)
	}
	return encrypted
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		ASCII_UPPERCASE = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
		ASCII_LOWERCASE = "abcdefghijklmnopqrstuvwxyz"
		NEG_ONE = big.NewInt(int64((0 - 1)))
		fmt.Println(gronsfeld("hello", "412"))
		fmt.Println(gronsfeld("hello", "123"))
		fmt.Println(gronsfeld("", "123"))
		fmt.Println(gronsfeld("yes, ¥€$ - _!@#%?", "0"))
		fmt.Println(gronsfeld("yes, ¥€$ - _!@#%?", "01"))
		fmt.Println(gronsfeld("yes, ¥€$ - _!@#%?", "012"))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
