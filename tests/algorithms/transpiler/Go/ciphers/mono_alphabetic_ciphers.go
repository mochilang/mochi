//go:build ignore

// Generated by Mochi v0.10.59 on 2025-08-06 21:26:13 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"strings"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

var LETTERS string

func find_char(s string, ch string) int {
	var i int = 0
	_ = i
	for i < len(s) {
		if string([]rune(s)[i]) == ch {
			return i
		}
		i = (i + 1)
	}
	return (0 - 1)
}

func encrypt_message(key string, message string) string {
	var chars_a string = key
	_ = chars_a
	var chars_b string = LETTERS
	_ = chars_b
	_ = chars_b
	var translated string = ""
	_ = translated
	var i int = 0
	_ = i
	for i < len(message) {
		var symbol string = string([]rune(message)[i])
		_ = symbol
		var upper_sym string = strings.ToUpper(symbol)
		_ = upper_sym
		var sym_index int = find_char(chars_a, upper_sym)
		_ = sym_index
		if sym_index >= 0 {
			var sub_char string = string([]rune(chars_b)[sym_index])
			_ = sub_char
			if symbol == upper_sym {
				translated = (translated + strings.ToUpper(sub_char))
			} else {
				translated = (translated + strings.ToLower(sub_char))
			}
		} else {
			translated = (translated + symbol)
		}
		i = (i + 1)
	}
	return translated
}

func decrypt_message(key string, message string) string {
	var chars_a string = LETTERS
	_ = chars_a
	var chars_b string = key
	_ = chars_b
	_ = chars_b
	var translated string = ""
	_ = translated
	var i int = 0
	_ = i
	for i < len(message) {
		var symbol string = string([]rune(message)[i])
		_ = symbol
		var upper_sym string = strings.ToUpper(symbol)
		_ = upper_sym
		var sym_index int = find_char(chars_a, upper_sym)
		_ = sym_index
		if sym_index >= 0 {
			var sub_char string = string([]rune(chars_b)[sym_index])
			_ = sub_char
			if symbol == upper_sym {
				translated = (translated + strings.ToUpper(sub_char))
			} else {
				translated = (translated + strings.ToLower(sub_char))
			}
		} else {
			translated = (translated + symbol)
		}
		i = (i + 1)
	}
	return translated
}

func mochiMain() {
	var message string = "Hello World"
	_ = message
	var key string = "QWERTYUIOPASDFGHJKLZXCVBNM"
	_ = key
	var mode string = "decrypt"
	_ = mode
	var translated string = ""
	_ = translated
	if mode == "encrypt" {
		translated = encrypt_message(key, message)
	} else {
		if mode == "decrypt" {
			translated = decrypt_message(key, message)
		}
	}
	fmt.Println(((((("Using the key " + key) + ", the ") + mode) + "ed message is: ") + translated))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		LETTERS = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
