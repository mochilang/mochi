//go:build ignore

// Generated by Mochi v0.10.59 on 2025-08-06 21:26:28 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _mod(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

var uppercase string

var lowercase string

func index_of(s string, c string) int {
	var i int = 0
	_ = i
	for i < len(s) {
		if _substr(s, i, (i+1)) == c {
			return i
		}
		i = (i + 1)
	}
	return (0 - 1)
}

func dencrypt(s string, n int) string {
	var out string = ""
	_ = out
	var i int = 0
	_ = i
	for i < len(s) {
		var ch string = _substr(s, i, (i + 1))
		_ = ch
		var idx_u int = index_of(uppercase, ch)
		_ = idx_u
		if idx_u >= 0 {
			var new_idx int = _mod((idx_u + n), 26)
			_ = new_idx
			out = (out + _substr(uppercase, new_idx, (new_idx+1)))
		} else {
			var idx_l int = index_of(lowercase, ch)
			_ = idx_l
			if idx_l >= 0 {
				var new_idx int = _mod((idx_l + n), 26)
				_ = new_idx
				out = (out + _substr(lowercase, new_idx, (new_idx+1)))
			} else {
				out = (out + ch)
			}
		}
		i = (i + 1)
	}
	return out
}

func mochiMain() {
	var msg string = "My secret bank account number is 173-52946 so don't tell anyone!!"
	_ = msg
	var s string = dencrypt(msg, 13)
	_ = s
	fmt.Println(s)
	fmt.Println(fmt.Sprint((dencrypt(s, 13) == msg)))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		uppercase = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
		lowercase = "abcdefghijklmnopqrstuvwxyz"
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
