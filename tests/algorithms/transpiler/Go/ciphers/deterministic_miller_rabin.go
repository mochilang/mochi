//go:build ignore

// Generated by Mochi v0.10.59 on 2025-08-06 21:25:59 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _mod(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func mod_pow(base int, exp int, mod int) int {
	var result int = 1
	_ = result
	var b int = _mod(base, mod)
	_ = b
	var e int = exp
	_ = e
	for e > 0 {
		if _mod(e, 2) == 1 {
			result = _mod((result * b), mod)
		}
		b = _mod((b * b), mod)
		e = (e / 2)
	}
	return result
}

func miller_rabin(n int, allow_probable bool) bool {
	if n == 2 {
		return true
	}
	if (n < 2) || (_mod(n, 2) == 0) {
		return false
	}
	if n > 5 {
		var last int = _mod(n, 10)
		_ = last
		if !((((last == 1) || (last == 3)) || (last == 7)) || (last == 9)) {
			return false
		}
	}
	var limit int = 3825123056546413051
	_ = limit
	if (n > limit) && !allow_probable {
		panic("Warning: upper bound of deterministic test is exceeded. Pass allow_probable=true to allow probabilistic test.")
	}
	var bounds []int = []int{2047, 1373653, 25326001, 3215031751, 2152302898747, 3474749660383, 341550071728321, limit}
	_ = bounds
	var primes []int = []int{2, 3, 5, 7, 11, 13, 17, 19}
	_ = primes
	var i int = 0
	_ = i
	var plist_len int = len(primes)
	_ = plist_len
	for i < len(bounds) {
		if n < bounds[i] {
			plist_len = (i + 1)
			i = len(bounds)
		} else {
			i = (i + 1)
		}
	}
	var d int = (n - 1)
	_ = d
	var s int = 0
	_ = s
	for _mod(d, 2) == 0 {
		d = (d / 2)
		s = (s + 1)
	}
	var j int = 0
	_ = j
	for j < plist_len {
		var prime int = primes[j]
		_ = prime
		var x int = mod_pow(prime, d, n)
		_ = x
		var pr bool = false
		_ = pr
		if (x == 1) || (x == (n - 1)) {
			pr = true
		} else {
			var r int = 1
			_ = r
			for (r < s) && !pr {
				x = _mod((x * x), n)
				if x == (n - 1) {
					pr = true
				}
				r = (r + 1)
			}
		}
		if !pr {
			return false
		}
		j = (j + 1)
	}
	return true
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(fmt.Sprint(miller_rabin(561, false)))
		fmt.Println(fmt.Sprint(miller_rabin(563, false)))
		fmt.Println(fmt.Sprint(miller_rabin(838201, false)))
		fmt.Println(fmt.Sprint(miller_rabin(838207, false)))
		fmt.Println(fmt.Sprint(miller_rabin(17316001, false)))
		fmt.Println(fmt.Sprint(miller_rabin(17316017, false)))
		fmt.Println(fmt.Sprint(miller_rabin(3078386641, false)))
		fmt.Println(fmt.Sprint(miller_rabin(3078386653, false)))
		fmt.Println(fmt.Sprint(miller_rabin(1713045574801, false)))
		fmt.Println(fmt.Sprint(miller_rabin(1713045574819, false)))
		fmt.Println(fmt.Sprint(miller_rabin(2779799728307, false)))
		fmt.Println(fmt.Sprint(miller_rabin(2779799728327, false)))
		fmt.Println(fmt.Sprint(miller_rabin(113850023909441, false)))
		fmt.Println(fmt.Sprint(miller_rabin(113850023909527, false)))
		fmt.Println(fmt.Sprint(miller_rabin(1275041018848804351, false)))
		fmt.Println(fmt.Sprint(miller_rabin(1275041018848804391, false)))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
