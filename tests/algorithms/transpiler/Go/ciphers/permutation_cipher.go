//go:build ignore

// Generated by Mochi v0.10.59 on 2025-08-06 21:26:18 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _mod(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

var seed int

func rand(max int) int {
	seed = _mod(((seed * 1103515245) + 12345), 2147483647)
	return _mod(seed, max)
}

func generate_valid_block_size(message_length int) int {
	var factors []int = []int{}
	_ = factors
	var i int = 2
	_ = i
	for i <= message_length {
		if _mod(message_length, i) == 0 {
			factors = append(factors, i)
		}
		i = (i + 1)
	}
	var idx int = rand(len(factors))
	_ = idx
	_ = idx
	return factors[idx]
}

func generate_permutation_key(block_size int) []int {
	var digits []int = []int{}
	_ = digits
	var i int = 0
	_ = i
	for i < block_size {
		digits = append(digits, i)
		i = (i + 1)
	}
	var j int = (block_size - 1)
	_ = j
	for j > 0 {
		var k int = rand((j + 1))
		_ = k
		var temp int = digits[j]
		_ = temp
		digits[j] = digits[k]
		digits[k] = temp
		j = (j - 1)
	}
	return digits
}

func encrypt(message string, key []int, block_size int) string {
	var encrypted string = ""
	_ = encrypted
	var i int = 0
	_ = i
	for i < len(message) {
		var block string = _substr(message, i, (i + block_size))
		_ = block
		var j int = 0
		_ = j
		for j < block_size {
			encrypted = (encrypted + _substr(block, key[j], (key[j]+1)))
			j = (j + 1)
		}
		i = (i + block_size)
	}
	return encrypted
}

func repeat_string(times int) []string {
	var res []string = []string{}
	_ = res
	var i int = 0
	_ = i
	for i < times {
		res = append(res, "")
		i = (i + 1)
	}
	return res
}

func decrypt(encrypted string, key []int) string {
	var klen int = len(key)
	_ = klen
	var decrypted string = ""
	_ = decrypted
	var i int = 0
	_ = i
	for i < len(encrypted) {
		var block string = _substr(encrypted, i, (i + klen))
		_ = block
		var original []string = repeat_string(klen)
		_ = original
		var j int = 0
		_ = j
		for j < klen {
			original[key[j]] = _substr(block, j, (j + 1))
			j = (j + 1)
		}
		j = 0
		for j < klen {
			decrypted = (decrypted + original[j])
			j = (j + 1)
		}
		i = (i + klen)
	}
	return decrypted
}

var message string

var block_size int

var key []int

var encrypted string

var decrypted string

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		seed = 1
		message = "HELLO WORLD"
		block_size = generate_valid_block_size(len(message))
		key = generate_permutation_key(block_size)
		encrypted = encrypt(message, func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(key), block_size)
		decrypted = decrypt(encrypted, func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(key))
		fmt.Println(("Block size: " + fmt.Sprint(block_size)))
		fmt.Println(("Key: " + fmt.Sprint(key)))
		fmt.Println(("Encrypted: " + encrypted))
		fmt.Println(("Decrypted: " + decrypted))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
