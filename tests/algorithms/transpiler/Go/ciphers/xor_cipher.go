//go:build ignore

// Generated by Mochi v0.10.59 on 2025-08-06 21:26:49 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _mod(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func xor(a int, b int) int {
	var res int = 0
	_ = res
	var bit int = 1
	_ = bit
	var x int = a
	_ = x
	var y int = b
	_ = y
	for (x > 0) || (y > 0) {
		var abit int = _mod(x, 2)
		_ = abit
		var bbit int = _mod(y, 2)
		_ = bbit
		if abit != bbit {
			res = (res + bit)
		}
		x = (x / 2)
		y = (y / 2)
		bit = (bit * 2)
	}
	return res
}

var ascii string

func ord(ch string) int {
	var i int = 0
	_ = i
	for i < len(ascii) {
		if string([]rune(ascii)[i:(i+1)]) == ch {
			return (32 + i)
		}
		i = (i + 1)
	}
	return 0
}

func chr(n int) string {
	if (n >= 32) && (n < 127) {
		return string([]rune(ascii)[(n - 32):(n - 31)])
	}
	return ""
}

func normalize_key(key int) int {
	var k int = key
	_ = k
	if k == 0 {
		k = 1
	}
	k = _mod(k, 256)
	if k < 0 {
		k = (k + 256)
	}
	return k
}

func encrypt(content string, key int) []string {
	var k int = normalize_key(key)
	_ = k
	var result []string = []string{}
	_ = result
	var i int = 0
	_ = i
	for i < len(content) {
		var c int = ord(string([]rune(content)[i:(i + 1)]))
		_ = c
		var e int = xor(c, k)
		_ = e
		result = append(result, chr(e))
		i = (i + 1)
	}
	return result
}

func encrypt_string(content string, key int) string {
	var chars []string = encrypt(content, key)
	_ = chars
	var out string = ""
	_ = out
	for _, ch := range chars {
		out = (out + ch)
	}
	return out
}

var sample string

var enc string

var dec string

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		ascii = " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"
		sample = "hallo welt"
		enc = encrypt_string(sample, 1)
		dec = encrypt_string(enc, 1)
		fmt.Println(fmt.Sprint(encrypt(sample, 1)))
		fmt.Println(enc)
		fmt.Println(dec)
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
