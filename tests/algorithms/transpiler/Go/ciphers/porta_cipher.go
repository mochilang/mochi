//go:build ignore

// Generated by Mochi v0.10.59 on 2025-08-06 21:26:23 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _mod(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

var UPPER string

var LOWER string

var BASE_TOP string

var BASE_BOTTOM string

func to_upper(s string) string {
	var res string = ""
	_ = res
	var i int = 0
	_ = i
	for i < len(s) {
		var ch string = _substr(s, i, (i + 1))
		_ = ch
		var j int = 0
		_ = j
		var replaced bool = false
		_ = replaced
		for j < len(LOWER) {
			if _substr(LOWER, j, (j+1)) == ch {
				res = (res + _substr(UPPER, j, (j+1)))
				replaced = true
				break
			}
			j = (j + 1)
		}
		if !replaced {
			res = (res + ch)
		}
		i = (i + 1)
	}
	return res
}

func char_index(c string) int {
	var i int = 0
	_ = i
	for i < len(UPPER) {
		if _substr(UPPER, i, (i+1)) == c {
			return i
		}
		i = (i + 1)
	}
	return (0 - 1)
}

func rotate_right(s string, k int) string {
	var n int = len(s)
	_ = n
	var shift int = _mod(k, n)
	_ = shift
	_ = shift
	return (_substr(s, (n-shift), n) + _substr(s, 0, (n-shift)))
}

func table_for(c string) []string {
	var idx int = char_index(c)
	_ = idx
	var shift int = (idx / 2)
	_ = shift
	var row1 string = rotate_right(BASE_BOTTOM, shift)
	_ = row1
	var pair []string = []string{BASE_TOP, row1}
	_ = pair
	_ = pair
	return pair
}

func generate_table(key string) [][]string {
	var up string = to_upper(key)
	_ = up
	var i int = 0
	_ = i
	var result [][]string = [][]string{}
	_ = result
	for i < len(up) {
		var ch string = _substr(up, i, (i + 1))
		_ = ch
		var pair []string = table_for(ch)
		_ = pair
		result = append(result, pair)
		i = (i + 1)
	}
	return result
}

func str_index(s string, ch string) int {
	var i int = 0
	_ = i
	for i < len(s) {
		if _substr(s, i, (i+1)) == ch {
			return i
		}
		i = (i + 1)
	}
	return (0 - 1)
}

func get_position(table []string, ch string) []int {
	var row int = 0
	_ = row
	if str_index(table[0], ch) == (0 - 1) {
		row = 1
	}
	var col int = str_index(table[row], ch)
	_ = col
	_ = col
	return []int{row, col}
}

func get_opponent(table []string, ch string) string {
	var pos []int = get_position(func(v any) []string {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]string); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []string{}
			}
			out := make([]string, len(arr))
			for i, x := range arr {
				out[i] = x.(string)
			}
			return out
		}
		return v.([]string)
	}(table), ch)
	_ = pos
	var row int = pos[0]
	_ = row
	var col int = pos[1]
	_ = col
	if col == (0 - 1) {
		return ch
	}
	if row == 1 {
		return _substr(table[0], col, (col + 1))
	}
	return _substr(table[1], col, (col + 1))
}

func encrypt(key string, words string) string {
	var table [][]string = generate_table(key)
	_ = table
	var up_words string = to_upper(words)
	_ = up_words
	var cipher string = ""
	_ = cipher
	var count int = 0
	_ = count
	var i int = 0
	_ = i
	for i < len(up_words) {
		var ch string = _substr(up_words, i, (i + 1))
		_ = ch
		cipher = (cipher + get_opponent(func(v any) []string {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]string); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []string{}
				}
				out := make([]string, len(arr))
				for i, x := range arr {
					out[i] = x.(string)
				}
				return out
			}
			return v.([]string)
		}(table[count]), ch))
		count = _mod((count + 1), len(table))
		i = (i + 1)
	}
	return cipher
}

func decrypt(key string, words string) string {
	var res string = encrypt(key, words)
	_ = res
	_ = res
	return res
}

func mochiMain() {
	fmt.Println(encrypt("marvin", "jessica"))
	fmt.Println(decrypt("marvin", "QRACRWU"))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		UPPER = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
		LOWER = "abcdefghijklmnopqrstuvwxyz"
		BASE_TOP = "ABCDEFGHIJKLM"
		BASE_BOTTOM = "NOPQRSTUVWXYZ"
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
