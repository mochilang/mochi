//go:build ignore

// Generated by Mochi v0.10.59 on 2025-08-06 21:25:47 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"strings"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _mod(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

var ascii85_chars string

func indexOf(s string, ch string) int {
	var i int = 0
	_ = i
	for i < len(s) {
		if string([]rune(s)[i]) == ch {
			return i
		}
		i = (i + 1)
	}
	return (0 - 1)
}

func ord(ch string) int {
	var idx int = strings.Index(ascii85_chars, ch)
	_ = idx
	if idx >= 0 {
		return (33 + idx)
	}
	return 0
}

func chr(n int) string {
	if (n >= 33) && (n <= 117) {
		return string([]rune(ascii85_chars)[(n - 33):(n - 32)])
	}
	return "?"
}

func to_binary(n int, bits int) string {
	var b string = ""
	_ = b
	var val int = n
	_ = val
	for val > 0 {
		b = (fmt.Sprint(_mod(val, 2)) + b)
		val = (val / 2)
	}
	for len(b) < bits {
		b = ("0" + b)
	}
	if len(b) == 0 {
		b = "0"
	}
	return b
}

func bin_to_int(bits string) int {
	var n int = 0
	_ = n
	var i int = 0
	_ = i
	for i < len(bits) {
		if string([]rune(bits)[i]) == "1" {
			n = ((n * 2) + 1)
		} else {
			n = (n * 2)
		}
		i = (i + 1)
	}
	return n
}

func reverse(s string) string {
	var res string = ""
	_ = res
	var i int = (len(s) - 1)
	_ = i
	for i >= 0 {
		res = (res + string([]rune(s)[i]))
		i = (i - 1)
	}
	return res
}

func base10_to_85(d int) string {
	if d > 0 {
		return (chr((_mod(d, 85) + 33)) + base10_to_85((d / 85)))
	}
	return ""
}

func base85_to_10(digits string) int {
	var value int = 0
	_ = value
	var i int = 0
	_ = i
	for i < len(digits) {
		value = ((value * 85) + (ord(string([]rune(digits)[i])) - 33))
		i = (i + 1)
	}
	return value
}

func ascii85_encode(data string) string {
	var binary_data string = ""
	_ = binary_data
	for _, _ch := range data {
		ch := string(_ch)
		binary_data = (binary_data + to_binary(ord(ch), 8))
	}
	var null_values int = (((32 * ((len(binary_data) / 32) + 1)) - len(binary_data)) / 8)
	_ = null_values
	var total_bits int = (32 * ((len(binary_data) / 32) + 1))
	_ = total_bits
	for len(binary_data) < total_bits {
		binary_data = (binary_data + "0")
	}
	var result string = ""
	_ = result
	var i int = 0
	_ = i
	for i < len(binary_data) {
		var chunk_bits string = string([]rune(binary_data)[i:(i + 32)])
		_ = chunk_bits
		var chunk_val int = bin_to_int(chunk_bits)
		_ = chunk_val
		var encoded string = reverse(base10_to_85(chunk_val))
		_ = encoded
		result = (result + encoded)
		i = (i + 32)
	}
	if _mod(null_values, 4) != 0 {
		result = string([]rune(result)[0:(len(result) - null_values)])
	}
	return result
}

func ascii85_decode(data string) string {
	var null_values int = ((5 * ((len(data) / 5) + 1)) - len(data))
	_ = null_values
	var binary_data string = data
	_ = binary_data
	var i int = 0
	_ = i
	for i < null_values {
		binary_data = (binary_data + "u")
		i = (i + 1)
	}
	var result string = ""
	_ = result
	i = 0
	for i < len(binary_data) {
		var chunk string = string([]rune(binary_data)[i:(i + 5)])
		_ = chunk
		var value int = base85_to_10(chunk)
		_ = value
		var bits string = to_binary(value, 32)
		_ = bits
		_ = bits
		var j int = 0
		_ = j
		for j < 32 {
			var byte_bits string = string([]rune(bits)[j:(j + 8)])
			_ = byte_bits
			var c string = chr(bin_to_int(byte_bits))
			_ = c
			result = (result + c)
			j = (j + 8)
		}
		i = (i + 5)
	}
	var trim int = null_values
	_ = trim
	if _mod(null_values, 5) == 0 {
		trim = (null_values - 1)
	}
	return string([]rune(result)[0:(len(result) - trim)])
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		ascii85_chars = "!\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstu"
		fmt.Println(ascii85_encode(""))
		fmt.Println(ascii85_encode("12345"))
		fmt.Println(ascii85_encode("base 85"))
		fmt.Println(ascii85_decode(""))
		fmt.Println(ascii85_decode("0etOA2#"))
		fmt.Println(ascii85_decode("@UX=h+?24"))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
