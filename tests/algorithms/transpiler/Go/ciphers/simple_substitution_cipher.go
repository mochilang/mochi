//go:build ignore

// Generated by Mochi v0.10.59 on 2025-08-06 21:26:39 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _mod(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

var LETTERS string

var LOWERCASE string

var seed int

func rand(n int) int {
	seed = _mod(((seed * 1664525) + 1013904223), 2147483647)
	return _mod(seed, n)
}

func get_random_key() string {
	var chars []string
	_ = chars
	var i int = 0
	_ = i
	for i < len(LETTERS) {
		chars = append(chars, string([]rune(LETTERS)[i]))
		i = (i + 1)
	}
	var j int = (len(chars) - 1)
	_ = j
	for j > 0 {
		var k int = rand((j + 1))
		_ = k
		var tmp string = chars[j]
		_ = tmp
		chars[j] = chars[k]
		chars[k] = tmp
		j = (j - 1)
	}
	var res string = ""
	_ = res
	i = 0
	for i < len(chars) {
		res = (res + chars[i])
		i = (i + 1)
	}
	return res
}

func check_valid_key(key string) bool {
	if len(key) != len(LETTERS) {
		return false
	}
	var used map[string]bool = map[string]bool{}
	_ = used
	var i int = 0
	_ = i
	for i < len(key) {
		var ch string = string([]rune(key)[i])
		_ = ch
		if used[ch] {
			return false
		}
		used[ch] = true
		i = (i + 1)
	}
	i = 0
	for i < len(LETTERS) {
		var ch string = string([]rune(LETTERS)[i])
		_ = ch
		if !used[ch] {
			return false
		}
		i = (i + 1)
	}
	return true
}

func index_in(s string, ch string) int {
	var i int = 0
	_ = i
	for i < len(s) {
		if string([]rune(s)[i]) == ch {
			return i
		}
		i = (i + 1)
	}
	return (0 - 1)
}

func char_to_upper(c string) string {
	var i int = 0
	_ = i
	for i < len(LOWERCASE) {
		if c == string([]rune(LOWERCASE)[i]) {
			return string([]rune(LETTERS)[i])
		}
		i = (i + 1)
	}
	return c
}

func char_to_lower(c string) string {
	var i int = 0
	_ = i
	for i < len(LETTERS) {
		if c == string([]rune(LETTERS)[i]) {
			return string([]rune(LOWERCASE)[i])
		}
		i = (i + 1)
	}
	return c
}

func is_upper(c string) bool {
	var i int = 0
	_ = i
	for i < len(LETTERS) {
		if c == string([]rune(LETTERS)[i]) {
			return true
		}
		i = (i + 1)
	}
	return false
}

func translate_message(key string, message string, mode string) string {
	var chars_a string = LETTERS
	_ = chars_a
	var chars_b string = key
	_ = chars_b
	if mode == "decrypt" {
		var tmp string = chars_a
		_ = tmp
		chars_a = chars_b
		chars_b = tmp
	}
	var translated string = ""
	_ = translated
	var i int = 0
	_ = i
	for i < len(message) {
		var symbol string = string([]rune(message)[i])
		_ = symbol
		var upper_symbol string = char_to_upper(symbol)
		_ = upper_symbol
		var idx int = index_in(chars_a, upper_symbol)
		_ = idx
		if idx >= 0 {
			var mapped string = string([]rune(chars_b)[idx])
			_ = mapped
			if is_upper(symbol) {
				translated = (translated + mapped)
			} else {
				translated = (translated + char_to_lower(mapped))
			}
		} else {
			translated = (translated + symbol)
		}
		i = (i + 1)
	}
	return translated
}

func encrypt_message(key string, message string) string {
	var res string = translate_message(key, message, "encrypt")
	_ = res
	_ = res
	return res
}

func decrypt_message(key string, message string) string {
	var res string = translate_message(key, message, "decrypt")
	_ = res
	_ = res
	return res
}

var key string

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		LETTERS = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
		LOWERCASE = "abcdefghijklmnopqrstuvwxyz"
		seed = 1
		key = "LFWOAYUISVKMNXPBDCRJTQEGHZ"
		fmt.Println(encrypt_message(key, "Harshil Darji"))
		fmt.Println(decrypt_message(key, "Ilcrism Olcvs"))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
