//go:build ignore

// Generated by Mochi v0.10.59 on 2025-08-06 21:26:11 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

var UPPER string

var LOWER string

func to_upper(s string) string {
	var res string = ""
	_ = res
	var i int = 0
	_ = i
	for i < len(s) {
		var ch string = string([]rune(s)[i])
		_ = ch
		var j int = 0
		_ = j
		var found bool = false
		_ = found
		for j < 26 {
			if ch == string([]rune(LOWER)[j]) {
				res = (res + string([]rune(UPPER)[j]))
				found = true
				break
			}
			j = (j + 1)
		}
		if found == false {
			res = (res + ch)
		}
		i = (i + 1)
	}
	return res
}

func contains(xs []string, x string) bool {
	var i int = 0
	_ = i
	for i < len(xs) {
		if xs[i] == x {
			return true
		}
		i = (i + 1)
	}
	return false
}

func contains_char(s string, ch string) bool {
	var i int = 0
	_ = i
	for i < len(s) {
		if string([]rune(s)[i]) == ch {
			return true
		}
		i = (i + 1)
	}
	return false
}

func get_value(keys []string, values []string, key string) string {
	var i int = 0
	_ = i
	for i < len(keys) {
		if keys[i] == key {
			return values[i]
		}
		i = (i + 1)
	}
	return ""
}

func print_mapping(keys []string, values []string) {
	var s string = "{"
	_ = s
	var i int = 0
	_ = i
	for i < len(keys) {
		s = (((((s + "'") + keys[i]) + "': '") + values[i]) + "'")
		if (i + 1) < len(keys) {
			s = (s + ", ")
		}
		i = (i + 1)
	}
	s = (s + "}")
	fmt.Println(s)
}

func mixed_keyword(keyword string, plaintext string, verbose bool) string {
	var alphabet string = UPPER
	_ = alphabet
	var keyword_u string = to_upper(keyword)
	_ = keyword_u
	var plaintext_u string = to_upper(plaintext)
	_ = plaintext_u
	var unique []string = []string{}
	_ = unique
	var i int = 0
	_ = i
	for i < len(keyword_u) {
		var ch string = string([]rune(keyword_u)[i])
		_ = ch
		if contains_char(alphabet, ch) && (func() bool {
			for _, el := range unique {
				if el == ch {
					return true
				}
			}
			return false
		}() == false) {
			unique = append(unique, ch)
		}
		i = (i + 1)
	}
	var num_unique int = len(unique)
	_ = num_unique
	var shifted []string = []string{}
	_ = shifted
	i = 0
	for i < len(unique) {
		shifted = append(shifted, unique[i])
		i = (i + 1)
	}
	i = 0
	for i < len(alphabet) {
		var ch string = string([]rune(alphabet)[i])
		_ = ch
		if func() bool {
			for _, el := range unique {
				if el == ch {
					return true
				}
			}
			return false
		}() == false {
			shifted = append(shifted, ch)
		}
		i = (i + 1)
	}
	var modified [][]string = [][]string{}
	_ = modified
	var k int = 0
	_ = k
	for k < len(shifted) {
		var row []string = []string{}
		_ = row
		var r int = 0
		_ = r
		for (r < num_unique) && ((k + r) < len(shifted)) {
			row = append(row, shifted[(k+r)])
			r = (r + 1)
		}
		modified = append(modified, row)
		k = (k + num_unique)
	}
	var keys []string = []string{}
	_ = keys
	var values []string = []string{}
	_ = values
	var column int = 0
	_ = column
	var letter_index int = 0
	_ = letter_index
	for column < num_unique {
		var row_idx int = 0
		_ = row_idx
		for row_idx < len(modified) {
			var row []string = modified[row_idx]
			_ = row
			if len(row) <= column {
				break
			}
			keys = append(keys, string([]rune(alphabet)[letter_index]))
			values = append(values, row[column])
			letter_index = (letter_index + 1)
			row_idx = (row_idx + 1)
		}
		column = (column + 1)
	}
	if verbose {
		print_mapping(func(v any) []string {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]string); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []string{}
				}
				out := make([]string, len(arr))
				for i, x := range arr {
					out[i] = x.(string)
				}
				return out
			}
			return v.([]string)
		}(keys), func(v any) []string {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]string); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []string{}
				}
				out := make([]string, len(arr))
				for i, x := range arr {
					out[i] = x.(string)
				}
				return out
			}
			return v.([]string)
		}(values))
	}
	var result string = ""
	_ = result
	i = 0
	for i < len(plaintext_u) {
		var ch string = string([]rune(plaintext_u)[i])
		_ = ch
		var mapped string = get_value(func(v any) []string {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]string); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []string{}
				}
				out := make([]string, len(arr))
				for i, x := range arr {
					out[i] = x.(string)
				}
				return out
			}
			return v.([]string)
		}(keys), func(v any) []string {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]string); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []string{}
				}
				out := make([]string, len(arr))
				for i, x := range arr {
					out[i] = x.(string)
				}
				return out
			}
			return v.([]string)
		}(values), ch)
		_ = mapped
		if mapped == "" {
			result = (result + ch)
		} else {
			result = (result + mapped)
		}
		i = (i + 1)
	}
	return result
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		UPPER = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
		LOWER = "abcdefghijklmnopqrstuvwxyz"
		fmt.Println(mixed_keyword("college", "UNIVERSITY", true))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
