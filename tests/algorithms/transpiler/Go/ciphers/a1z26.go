//go:build ignore

// Generated by Mochi v0.10.59 on 2025-08-06 21:07:39 GMT+7
package main

import (
	"bufio"
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"strings"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

var _scanner = bufio.NewScanner(os.Stdin)

func _input() string {
	if !_scanner.Scan() {
		return ""
	}
	return _scanner.Text()
}

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

func indexOf(s string, ch string) int {
	var i int = 0
	_ = i
	for i < len(s) {
		if _substr(s, i, (i+1)) == ch {
			return i
		}
		i = (i + 1)
	}
	return (0 - 1)
}

func charToNum(ch string) int {
	var letters string = "abcdefghijklmnopqrstuvwxyz"
	_ = letters
	var idx int = strings.Index(letters, ch)
	_ = idx
	if idx >= 0 {
		return (idx + 1)
	}
	return 0
}

func numToChar(n int) string {
	var letters string = "abcdefghijklmnopqrstuvwxyz"
	_ = letters
	_ = letters
	if (n >= 1) && (n <= 26) {
		return _substr(letters, (n - 1), n)
	}
	return "?"
}

func encode(plain string) []int {
	var res []int = []int{}
	_ = res
	var i int = 0
	_ = i
	for i < len(plain) {
		var ch string = strings.ToLower(_substr(plain, i, (i + 1)))
		_ = ch
		var val int = charToNum(ch)
		_ = val
		if val > 0 {
			res = append(res, val)
		}
		i = (i + 1)
	}
	return res
}

func decode(encoded []int) string {
	var out string = ""
	_ = out
	for _, n := range encoded {
		out = (out + numToChar(n))
	}
	return out
}

func mochiMain() {
	fmt.Println("-> ")
	var text string = strings.ToLower(_input())
	_ = text
	var enc []int = encode(text)
	_ = enc
	fmt.Println(("Encoded: " + fmt.Sprint(enc)))
	fmt.Println(("Decoded: " + decode(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(enc))))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
