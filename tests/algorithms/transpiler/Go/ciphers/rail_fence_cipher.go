//go:build ignore

// Generated by Mochi v0.10.59 on 2025-08-06 21:26:26 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _mod(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

func encrypt(input_string string, key int) string {
	if key <= 0 {
		panic("Height of grid can't be 0 or negative")
	}
	if (key == 1) || (len(input_string) <= key) {
		return input_string
	}
	var lowest int = (key - 1)
	_ = lowest
	var temp_grid [][]string = [][]string{}
	_ = temp_grid
	var i int = 0
	_ = i
	for i < key {
		temp_grid = append(temp_grid, []string{})
		i = (i + 1)
	}
	var position int = 0
	_ = position
	for position < len(input_string) {
		var num int = _mod(position, (lowest * 2))
		_ = num
		var alt int = ((lowest * 2) - num)
		_ = alt
		if num > alt {
			num = alt
		}
		var row []string = temp_grid[num]
		_ = row
		row = append(row, _substr(input_string, position, (position+1)))
		temp_grid[num] = row
		position = (position + 1)
	}
	var output string = ""
	_ = output
	i = 0
	for i < key {
		var row []string = temp_grid[i]
		_ = row
		var j int = 0
		_ = j
		for j < len(row) {
			output = (output + row[j])
			j = (j + 1)
		}
		i = (i + 1)
	}
	return output
}

func decrypt(input_string string, key int) string {
	if key <= 0 {
		panic("Height of grid can't be 0 or negative")
	}
	if key == 1 {
		return input_string
	}
	var lowest int = (key - 1)
	_ = lowest
	var counts []int = []int{}
	_ = counts
	var i int = 0
	_ = i
	for i < key {
		counts = append(counts, 0)
		i = (i + 1)
	}
	var pos int = 0
	_ = pos
	for pos < len(input_string) {
		var num int = _mod(pos, (lowest * 2))
		_ = num
		var alt int = ((lowest * 2) - num)
		_ = alt
		if num > alt {
			num = alt
		}
		counts[num] = (counts[num] + 1)
		pos = (pos + 1)
	}
	var grid [][]string = [][]string{}
	_ = grid
	var counter int = 0
	_ = counter
	i = 0
	for i < key {
		var length int = counts[i]
		_ = length
		var slice string = _substr(input_string, counter, (counter + length))
		_ = slice
		var row []string = []string{}
		_ = row
		var j int = 0
		_ = j
		for j < len(slice) {
			row = append(row, string([]rune(slice)[j]))
			j = (j + 1)
		}
		grid = append(grid, row)
		counter = (counter + length)
		i = (i + 1)
	}
	var indices []int = []int{}
	_ = indices
	i = 0
	for i < key {
		indices = append(indices, 0)
		i = (i + 1)
	}
	var output string = ""
	_ = output
	pos = 0
	for pos < len(input_string) {
		var num int = _mod(pos, (lowest * 2))
		_ = num
		var alt int = ((lowest * 2) - num)
		_ = alt
		if num > alt {
			num = alt
		}
		output = (output + grid[num][indices[num]])
		indices[num] = (indices[num] + 1)
		pos = (pos + 1)
	}
	return output
}

func bruteforce(input_string string) map[int]string {
	var results map[int]string = map[int]string{}
	_ = results
	var key_guess int = 1
	_ = key_guess
	for key_guess < len(input_string) {
		results[key_guess] = decrypt(input_string, key_guess)
		key_guess = (key_guess + 1)
	}
	return results
}

var bf map[int]string

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(encrypt("Hello World", 4))
		fmt.Println(decrypt("HWe olordll", 4))
		bf = bruteforce("HWe olordll")
		fmt.Println(bf[4])
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
