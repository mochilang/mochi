//go:build ignore

// Generated by Mochi v0.10.59 on 2025-08-06 21:25:52 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

var LETTERS string

func index_of(s string, ch string) int {
	var i int = 0
	_ = i
	for i < len(s) {
		if _substr(s, i, (i+1)) == ch {
			return i
		}
		i = (i + 1)
	}
	return (0 - 1)
}

func decrypt(message string) {
	for key := 0; key < len(LETTERS); key++ {
		var translated string = ""
		_ = translated
		for i := 0; i < len(message); i++ {
			var symbol string = _substr(message, i, (i + 1))
			_ = symbol
			var idx int = index_of(LETTERS, symbol)
			_ = idx
			if idx != (0 - 1) {
				var num int = (idx - key)
				_ = num
				if num < 0 {
					num = (num + len(LETTERS))
				}
				translated = (translated + _substr(LETTERS, num, (num+1)))
			} else {
				translated = (translated + symbol)
			}
		}
		fmt.Println(((("Decryption using Key #" + fmt.Sprint(key)) + ": ") + translated))
	}
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		LETTERS = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
		decrypt("TMDETUX PMDVU")
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
