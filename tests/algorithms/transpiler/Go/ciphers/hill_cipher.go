//go:build ignore

// Generated by Mochi v0.10.59 on 2025-08-06 21:26:10 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _mod(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

var KEY_STRING string

func mod36(n int) int {
	var r int = _mod(n, 36)
	_ = r
	if r < 0 {
		r = (r + 36)
	}
	return r
}

func gcd(a int, b int) int {
	var x int = a
	_ = x
	var y int = b
	_ = y
	for y != 0 {
		var t int = y
		_ = t
		y = _mod(x, y)
		x = t
	}
	if x < 0 {
		x = (0 - x)
	}
	return x
}

func replace_letters(letter string) int {
	var i int = 0
	_ = i
	for i < len(KEY_STRING) {
		if string([]rune(KEY_STRING)[i]) == letter {
			return i
		}
		i = (i + 1)
	}
	return 0
}

func replace_digits(num int) string {
	var idx int = mod36(num)
	_ = idx
	_ = idx
	return string([]rune(KEY_STRING)[idx])
}

func to_upper(c string) string {
	var lower string = "abcdefghijklmnopqrstuvwxyz"
	_ = lower
	var upper string = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
	_ = upper
	_ = upper
	var i int = 0
	_ = i
	for i < len(lower) {
		if c == string([]rune(lower)[i]) {
			return string([]rune(upper)[i])
		}
		i = (i + 1)
	}
	return c
}

func process_text(text string, break_key int) string {
	var chars []string = []string{}
	_ = chars
	var i int = 0
	_ = i
	for i < len(text) {
		var c string = to_upper(string([]rune(text)[i]))
		_ = c
		var j int = 0
		_ = j
		var ok bool = false
		_ = ok
		for j < len(KEY_STRING) {
			if string([]rune(KEY_STRING)[j]) == c {
				ok = true
				break
			}
			j = (j + 1)
		}
		if ok {
			chars = append(chars, c)
		}
		i = (i + 1)
	}
	if len(chars) == 0 {
		return ""
	}
	var last string = chars[(len(chars) - 1)]
	_ = last
	for _mod(len(chars), break_key) != 0 {
		chars = append(chars, last)
	}
	var res string = ""
	_ = res
	var k int = 0
	_ = k
	for k < len(chars) {
		res = (res + chars[k])
		k = (k + 1)
	}
	return res
}

func matrix_minor(m [][]int, row int, col int) [][]int {
	var res [][]int = [][]int{}
	_ = res
	var i int = 0
	_ = i
	for i < len(m) {
		if i != row {
			var r []int = []int{}
			_ = r
			var j int = 0
			_ = j
			for j < len(m[i]) {
				if j != col {
					r = append(r, m[i][j])
				}
				j = (j + 1)
			}
			res = append(res, r)
		}
		i = (i + 1)
	}
	return res
}

func determinant(m [][]int) int {
	var n int = len(m)
	_ = n
	if n == 1 {
		return m[0][0]
	}
	if n == 2 {
		return ((m[0][0] * m[1][1]) - (m[0][1] * m[1][0]))
	}
	var det int = 0
	_ = det
	var col int = 0
	_ = col
	for col < n {
		var minor_mat [][]int = matrix_minor(func(v any) [][]int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]int{}
				}
				out := make([][]int, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []int {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]int); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []int{}
							}
							out := make([]int, len(arr))
							for i, x := range arr {
								out[i] = x.(int)
							}
							return out
						}
						return v.([]int)
					}(x)
				}
				return out
			}
			return v.([][]int)
		}(m), 0, col)
		_ = minor_mat
		var sign int = 1
		_ = sign
		if _mod(col, 2) == 1 {
			sign = (0 - 1)
		}
		det = (det + ((sign * m[0][col]) * determinant(func(v any) [][]int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]int{}
				}
				out := make([][]int, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []int {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]int); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []int{}
							}
							out := make([]int, len(arr))
							for i, x := range arr {
								out[i] = x.(int)
							}
							return out
						}
						return v.([]int)
					}(x)
				}
				return out
			}
			return v.([][]int)
		}(minor_mat))))
		col = (col + 1)
	}
	return det
}

func cofactor_matrix(m [][]int) [][]int {
	var n int = len(m)
	_ = n
	var res [][]int = [][]int{}
	_ = res
	var i int = 0
	_ = i
	for i < n {
		var row []int = []int{}
		_ = row
		var j int = 0
		_ = j
		for j < n {
			var minor_mat [][]int = matrix_minor(func(v any) [][]int {
				if v == nil {
					return nil
				}
				if vv, ok := v.([][]int); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return [][]int{}
					}
					out := make([][]int, len(arr))
					for i, x := range arr {
						out[i] = func(v any) []int {
							if v == nil {
								return nil
							}
							if vv, ok := v.([]int); ok {
								return vv
							}
							if arr, ok := v.([]any); ok {
								if len(arr) == 0 {
									return []int{}
								}
								out := make([]int, len(arr))
								for i, x := range arr {
									out[i] = x.(int)
								}
								return out
							}
							return v.([]int)
						}(x)
					}
					return out
				}
				return v.([][]int)
			}(m), i, j)
			_ = minor_mat
			var det_minor int = determinant(func(v any) [][]int {
				if v == nil {
					return nil
				}
				if vv, ok := v.([][]int); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return [][]int{}
					}
					out := make([][]int, len(arr))
					for i, x := range arr {
						out[i] = func(v any) []int {
							if v == nil {
								return nil
							}
							if vv, ok := v.([]int); ok {
								return vv
							}
							if arr, ok := v.([]any); ok {
								if len(arr) == 0 {
									return []int{}
								}
								out := make([]int, len(arr))
								for i, x := range arr {
									out[i] = x.(int)
								}
								return out
							}
							return v.([]int)
						}(x)
					}
					return out
				}
				return v.([][]int)
			}(minor_mat))
			_ = det_minor
			var sign int = 1
			_ = sign
			if _mod((i+j), 2) == 1 {
				sign = (0 - 1)
			}
			row = append(row, (sign * det_minor))
			j = (j + 1)
		}
		res = append(res, row)
		i = (i + 1)
	}
	return res
}

func transpose(m [][]int) [][]int {
	var rows int = len(m)
	_ = rows
	var cols int = len(m[0])
	_ = cols
	var res [][]int = [][]int{}
	_ = res
	var j int = 0
	_ = j
	for j < cols {
		var row []int = []int{}
		_ = row
		var i int = 0
		_ = i
		for i < rows {
			row = append(row, m[i][j])
			i = (i + 1)
		}
		res = append(res, row)
		j = (j + 1)
	}
	return res
}

func matrix_mod(m [][]int) [][]int {
	var res [][]int = [][]int{}
	_ = res
	var i int = 0
	_ = i
	for i < len(m) {
		var row []int = []int{}
		_ = row
		var j int = 0
		_ = j
		for j < len(m[i]) {
			row = append(row, mod36(m[i][j]))
			j = (j + 1)
		}
		res = append(res, row)
		i = (i + 1)
	}
	return res
}

func scalar_matrix_mult(s int, m [][]int) [][]int {
	var res [][]int = [][]int{}
	_ = res
	var i int = 0
	_ = i
	for i < len(m) {
		var row []int = []int{}
		_ = row
		var j int = 0
		_ = j
		for j < len(m[i]) {
			row = append(row, mod36((s * m[i][j])))
			j = (j + 1)
		}
		res = append(res, row)
		i = (i + 1)
	}
	return res
}

func adjugate(m [][]int) [][]int {
	var cof [][]int = cofactor_matrix(func(v any) [][]int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]int{}
			}
			out := make([][]int, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []int {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]int); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []int{}
						}
						out := make([]int, len(arr))
						for i, x := range arr {
							out[i] = x.(int)
						}
						return out
					}
					return v.([]int)
				}(x)
			}
			return out
		}
		return v.([][]int)
	}(m))
	_ = cof
	var n int = len(cof)
	_ = n
	var res [][]int = [][]int{}
	_ = res
	var i int = 0
	_ = i
	for i < n {
		var row []int = []int{}
		_ = row
		var j int = 0
		_ = j
		for j < n {
			row = append(row, cof[j][i])
			j = (j + 1)
		}
		res = append(res, row)
		i = (i + 1)
	}
	return res
}

func multiply_matrix_vector(m [][]int, v []int) []int {
	var n int = len(m)
	_ = n
	var res []int = []int{}
	_ = res
	var i int = 0
	_ = i
	for i < n {
		var sum int = 0
		_ = sum
		var j int = 0
		_ = j
		for j < n {
			sum = (sum + (m[i][j] * v[j]))
			j = (j + 1)
		}
		res = append(res, mod36(sum))
		i = (i + 1)
	}
	return res
}

func inverse_key(key [][]int) [][]int {
	var det_val int = determinant(func(v any) [][]int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]int{}
			}
			out := make([][]int, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []int {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]int); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []int{}
						}
						out := make([]int, len(arr))
						for i, x := range arr {
							out[i] = x.(int)
						}
						return out
					}
					return v.([]int)
				}(x)
			}
			return out
		}
		return v.([][]int)
	}(key))
	_ = det_val
	var det_mod int = mod36(det_val)
	_ = det_mod
	var det_inv int = 0
	_ = det_inv
	var i int = 0
	_ = i
	for i < 36 {
		if _mod((det_mod*i), 36) == 1 {
			det_inv = i
			break
		}
		i = (i + 1)
	}
	var adj [][]int = adjugate(func(v any) [][]int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]int{}
			}
			out := make([][]int, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []int {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]int); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []int{}
						}
						out := make([]int, len(arr))
						for i, x := range arr {
							out[i] = x.(int)
						}
						return out
					}
					return v.([]int)
				}(x)
			}
			return out
		}
		return v.([][]int)
	}(key))
	_ = adj
	var tmp [][]int = scalar_matrix_mult(det_inv, func(v any) [][]int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]int{}
			}
			out := make([][]int, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []int {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]int); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []int{}
						}
						out := make([]int, len(arr))
						for i, x := range arr {
							out[i] = x.(int)
						}
						return out
					}
					return v.([]int)
				}(x)
			}
			return out
		}
		return v.([][]int)
	}(adj))
	_ = tmp
	var res [][]int = matrix_mod(func(v any) [][]int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]int{}
			}
			out := make([][]int, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []int {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]int); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []int{}
						}
						out := make([]int, len(arr))
						for i, x := range arr {
							out[i] = x.(int)
						}
						return out
					}
					return v.([]int)
				}(x)
			}
			return out
		}
		return v.([][]int)
	}(tmp))
	_ = res
	_ = res
	return res
}

func hill_encrypt(key [][]int, text string) string {
	var break_key int = len(key)
	_ = break_key
	var processed string = process_text(text, break_key)
	_ = processed
	var encrypted string = ""
	_ = encrypted
	var i int = 0
	_ = i
	for i < len(processed) {
		var vec []int = []int{}
		_ = vec
		var j int = 0
		_ = j
		for j < break_key {
			vec = append(vec, replace_letters(string([]rune(processed)[(i+j)])))
			j = (j + 1)
		}
		var enc_vec []int = multiply_matrix_vector(func(v any) [][]int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]int{}
				}
				out := make([][]int, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []int {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]int); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []int{}
							}
							out := make([]int, len(arr))
							for i, x := range arr {
								out[i] = x.(int)
							}
							return out
						}
						return v.([]int)
					}(x)
				}
				return out
			}
			return v.([][]int)
		}(key), func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(vec))
		_ = enc_vec
		var k int = 0
		_ = k
		for k < break_key {
			encrypted = (encrypted + replace_digits(enc_vec[k]))
			k = (k + 1)
		}
		i = (i + break_key)
	}
	return encrypted
}

func hill_decrypt(key [][]int, text string) string {
	var break_key int = len(key)
	_ = break_key
	var decrypt_key [][]int = inverse_key(func(v any) [][]int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]int{}
			}
			out := make([][]int, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []int {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]int); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []int{}
						}
						out := make([]int, len(arr))
						for i, x := range arr {
							out[i] = x.(int)
						}
						return out
					}
					return v.([]int)
				}(x)
			}
			return out
		}
		return v.([][]int)
	}(key))
	_ = decrypt_key
	var processed string = process_text(text, break_key)
	_ = processed
	var decrypted string = ""
	_ = decrypted
	var i int = 0
	_ = i
	for i < len(processed) {
		var vec []int = []int{}
		_ = vec
		var j int = 0
		_ = j
		for j < break_key {
			vec = append(vec, replace_letters(string([]rune(processed)[(i+j)])))
			j = (j + 1)
		}
		var dec_vec []int = multiply_matrix_vector(func(v any) [][]int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]int{}
				}
				out := make([][]int, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []int {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]int); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []int{}
							}
							out := make([]int, len(arr))
							for i, x := range arr {
								out[i] = x.(int)
							}
							return out
						}
						return v.([]int)
					}(x)
				}
				return out
			}
			return v.([][]int)
		}(decrypt_key), func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(vec))
		_ = dec_vec
		var k int = 0
		_ = k
		for k < break_key {
			decrypted = (decrypted + replace_digits(dec_vec[k]))
			k = (k + 1)
		}
		i = (i + break_key)
	}
	return decrypted
}

var key [][]int

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		KEY_STRING = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
		key = [][]int{[]int{2, 5}, []int{1, 6}}
		fmt.Println(hill_encrypt(func(v any) [][]int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]int{}
				}
				out := make([][]int, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []int {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]int); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []int{}
							}
							out := make([]int, len(arr))
							for i, x := range arr {
								out[i] = x.(int)
							}
							return out
						}
						return v.([]int)
					}(x)
				}
				return out
			}
			return v.([][]int)
		}(key), "testing hill cipher"))
		fmt.Println(hill_encrypt(func(v any) [][]int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]int{}
				}
				out := make([][]int, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []int {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]int); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []int{}
							}
							out := make([]int, len(arr))
							for i, x := range arr {
								out[i] = x.(int)
							}
							return out
						}
						return v.([]int)
					}(x)
				}
				return out
			}
			return v.([][]int)
		}(key), "hello"))
		fmt.Println(hill_decrypt(func(v any) [][]int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]int{}
				}
				out := make([][]int, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []int {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]int); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []int{}
							}
							out := make([]int, len(arr))
							for i, x := range arr {
								out[i] = x.(int)
							}
							return out
						}
						return v.([]int)
					}(x)
				}
				return out
			}
			return v.([][]int)
		}(key), "WHXYJOLM9C6XT085LL"))
		fmt.Println(hill_decrypt(func(v any) [][]int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]int{}
				}
				out := make([][]int, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []int {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]int); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []int{}
							}
							out := make([]int, len(arr))
							for i, x := range arr {
								out[i] = x.(int)
							}
							return out
						}
						return v.([]int)
					}(x)
				}
				return out
			}
			return v.([][]int)
		}(key), "85FF00"))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
