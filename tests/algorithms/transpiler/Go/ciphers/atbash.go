//go:build ignore

// Generated by Mochi v0.10.59 on 2025-08-06 21:07:51 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func index_of(s string, c string) int {
	var i int = 0
	_ = i
	for i < len(s) {
		if string([]rune(s)[i]) == c {
			return i
		}
		i = (i + 1)
	}
	return (0 - 1)
}

func atbash(sequence string) string {
	var lower string = "abcdefghijklmnopqrstuvwxyz"
	_ = lower
	var upper string = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
	_ = upper
	var lower_rev string = "zyxwvutsrqponmlkjihgfedcba"
	_ = lower_rev
	_ = lower_rev
	var upper_rev string = "ZYXWVUTSRQPONMLKJIHGFEDCBA"
	_ = upper_rev
	_ = upper_rev
	var result string = ""
	_ = result
	var i int = 0
	_ = i
	for i < len(sequence) {
		var ch string = string([]rune(sequence)[i])
		_ = ch
		var idx int = index_of(lower, ch)
		_ = idx
		if idx != (0 - 1) {
			result = (result + string([]rune(lower_rev)[idx]))
		} else {
			var idx2 int = index_of(upper, ch)
			_ = idx2
			if idx2 != (0 - 1) {
				result = (result + string([]rune(upper_rev)[idx2]))
			} else {
				result = (result + ch)
			}
		}
		i = (i + 1)
	}
	return result
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(atbash("ABCDEFGH"))
		fmt.Println(atbash("123GGjj"))
		fmt.Println(atbash("testStringtest"))
		fmt.Println(atbash("with space"))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
