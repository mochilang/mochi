//go:build ignore

// Generated by Mochi v0.10.59 on 2025-08-06 21:26:44 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

var triagrams []string

func remove_spaces(s string) string {
	var res string = ""
	_ = res
	var i int = 0
	_ = i
	for i < len(s) {
		var c string = _substr(s, i, (i + 1))
		_ = c
		if c != " " {
			res = (res + c)
		}
		i = (i + 1)
	}
	return res
}

func char_to_trigram(ch string, alphabet string) string {
	var i int = 0
	_ = i
	for i < len(alphabet) {
		if _substr(alphabet, i, (i+1)) == ch {
			return triagrams[i]
		}
		i = (i + 1)
	}
	return ""
}

func trigram_to_char(tri string, alphabet string) string {
	var i int = 0
	_ = i
	for i < len(triagrams) {
		if triagrams[i] == tri {
			return _substr(alphabet, i, (i + 1))
		}
		i = (i + 1)
	}
	return ""
}

func encrypt_part(part string, alphabet string) string {
	var one string = ""
	_ = one
	var two string = ""
	_ = two
	var three string = ""
	_ = three
	var i int = 0
	_ = i
	for i < len(part) {
		var tri string = char_to_trigram(_substr(part, i, (i+1)), alphabet)
		_ = tri
		one = (one + _substr(tri, 0, 1))
		two = (two + _substr(tri, 1, 2))
		three = (three + _substr(tri, 2, 3))
		i = (i + 1)
	}
	return ((one + two) + three)
}

func encrypt_message(message string, alphabet string, period int) string {
	var msg string = remove_spaces(message)
	_ = msg
	var alpha string = remove_spaces(alphabet)
	_ = alpha
	if len(alpha) != 27 {
		return ""
	}
	var encrypted_numeric string = ""
	_ = encrypted_numeric
	var i int = 0
	_ = i
	for i < len(msg) {
		var end int = (i + period)
		_ = end
		if end > len(msg) {
			end = len(msg)
		}
		var part string = _substr(msg, i, end)
		_ = part
		encrypted_numeric = (encrypted_numeric + encrypt_part(part, alpha))
		i = (i + period)
	}
	var encrypted string = ""
	_ = encrypted
	var j int = 0
	_ = j
	for j < len(encrypted_numeric) {
		var tri string = _substr(encrypted_numeric, j, (j + 3))
		_ = tri
		encrypted = (encrypted + trigram_to_char(tri, alpha))
		j = (j + 3)
	}
	return encrypted
}

func decrypt_part(part string, alphabet string) []string {
	var converted string = ""
	_ = converted
	var i int = 0
	_ = i
	for i < len(part) {
		var tri string = char_to_trigram(_substr(part, i, (i+1)), alphabet)
		_ = tri
		converted = (converted + tri)
		i = (i + 1)
	}
	var result []string = []string{}
	_ = result
	var tmp string = ""
	_ = tmp
	var j int = 0
	_ = j
	for j < len(converted) {
		tmp = (tmp + _substr(converted, j, (j+1)))
		if len(tmp) == len(part) {
			result = append(result, tmp)
			tmp = ""
		}
		j = (j + 1)
	}
	return result
}

func decrypt_message(message string, alphabet string, period int) string {
	var msg string = remove_spaces(message)
	_ = msg
	var alpha string = remove_spaces(alphabet)
	_ = alpha
	if len(alpha) != 27 {
		return ""
	}
	var decrypted_numeric []string = []string{}
	_ = decrypted_numeric
	var i int = 0
	_ = i
	for i < len(msg) {
		var end int = (i + period)
		_ = end
		if end > len(msg) {
			end = len(msg)
		}
		var part string = _substr(msg, i, end)
		_ = part
		var groups []string = decrypt_part(part, alpha)
		_ = groups
		var k int = 0
		_ = k
		for k < len(groups[0]) {
			var tri string = ((_substr(groups[0], k, (k+1)) + _substr(groups[1], k, (k+1))) + _substr(groups[2], k, (k+1)))
			_ = tri
			decrypted_numeric = append(decrypted_numeric, tri)
			k = (k + 1)
		}
		i = (i + period)
	}
	var decrypted string = ""
	_ = decrypted
	var j int = 0
	_ = j
	for j < len(decrypted_numeric) {
		decrypted = (decrypted + trigram_to_char(decrypted_numeric[j], alpha))
		j = (j + 1)
	}
	return decrypted
}

func mochiMain() {
	var msg string = "DEFEND THE EAST WALL OF THE CASTLE."
	_ = msg
	var alphabet string = "EPSDUCVWYM.ZLKXNBTFGORIJHAQ"
	_ = alphabet
	var encrypted string = encrypt_message(msg, alphabet, 5)
	_ = encrypted
	var decrypted string = decrypt_message(encrypted, alphabet, 5)
	_ = decrypted
	fmt.Println(("Encrypted: " + encrypted))
	fmt.Println(("Decrypted: " + decrypted))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		triagrams = []string{"111", "112", "113", "121", "122", "123", "131", "132", "133", "211", "212", "213", "221", "222", "223", "231", "232", "233", "311", "312", "313", "321", "322", "323", "331", "332", "333"}
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
