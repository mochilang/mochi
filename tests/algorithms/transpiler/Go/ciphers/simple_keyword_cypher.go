//go:build ignore

// Generated by Mochi v0.10.59 on 2025-08-06 21:26:38 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func index_in_string(s string, ch string) int {
	var i int = 0
	_ = i
	for i < len(s) {
		if string([]rune(s)[i]) == ch {
			return i
		}
		i = (i + 1)
	}
	return (0 - 1)
}

func contains_char(s string, ch string) bool {
	return (index_in_string(s, ch) >= 0)
}

func is_alpha(ch string) bool {
	var lower string = "abcdefghijklmnopqrstuvwxyz"
	_ = lower
	_ = lower
	var upper string = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
	_ = upper
	_ = upper
	return (contains_char(lower, ch) || contains_char(upper, ch))
}

func to_upper(s string) string {
	var lower string = "abcdefghijklmnopqrstuvwxyz"
	_ = lower
	var upper string = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
	_ = upper
	_ = upper
	var res string = ""
	_ = res
	var i int = 0
	_ = i
	for i < len(s) {
		var ch string = string([]rune(s)[i])
		_ = ch
		var idx int = index_in_string(lower, ch)
		_ = idx
		if idx >= 0 {
			res = (res + string([]rune(upper)[idx]))
		} else {
			res = (res + ch)
		}
		i = (i + 1)
	}
	return res
}

func remove_duplicates(key string) string {
	var res string = ""
	_ = res
	var i int = 0
	_ = i
	for i < len(key) {
		var ch string = string([]rune(key)[i])
		_ = ch
		if (ch == " ") || (is_alpha(ch) && (contains_char(res, ch) == false)) {
			res = (res + ch)
		}
		i = (i + 1)
	}
	return res
}

func create_cipher_map(key string) []string {
	var alphabet string = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
	_ = alphabet
	_ = alphabet
	var cleaned string = remove_duplicates(to_upper(key))
	_ = cleaned
	var cipher []string = []string{}
	_ = cipher
	var i int = 0
	_ = i
	for i < len(cleaned) {
		cipher = append(cipher, string([]rune(cleaned)[i]))
		i = (i + 1)
	}
	var offset int = len(cleaned)
	_ = offset
	var j int = len(cipher)
	_ = j
	for j < 26 {
		var char string = string([]rune(alphabet)[(j - offset)])
		_ = char
		for contains_char(cleaned, char) {
			offset = (offset - 1)
			char = string([]rune(alphabet)[(j - offset)])
		}
		cipher = append(cipher, char)
		j = (j + 1)
	}
	return cipher
}

func index_in_list(lst []string, ch string) int {
	var i int = 0
	_ = i
	for i < len(lst) {
		if lst[i] == ch {
			return i
		}
		i = (i + 1)
	}
	return (0 - 1)
}

func encipher(message string, cipher []string) string {
	var alphabet string = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
	_ = alphabet
	var msg string = to_upper(message)
	_ = msg
	var res string = ""
	_ = res
	var i int = 0
	_ = i
	for i < len(msg) {
		var ch string = string([]rune(msg)[i])
		_ = ch
		var idx int = index_in_string(alphabet, ch)
		_ = idx
		if idx >= 0 {
			res = (res + cipher[idx])
		} else {
			res = (res + ch)
		}
		i = (i + 1)
	}
	return res
}

func decipher(message string, cipher []string) string {
	var alphabet string = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
	_ = alphabet
	_ = alphabet
	var msg string = to_upper(message)
	_ = msg
	var res string = ""
	_ = res
	var i int = 0
	_ = i
	for i < len(msg) {
		var ch string = string([]rune(msg)[i])
		_ = ch
		var idx int = index_in_list(func(v any) []string {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]string); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []string{}
				}
				out := make([]string, len(arr))
				for i, x := range arr {
					out[i] = x.(string)
				}
				return out
			}
			return v.([]string)
		}(cipher), ch)
		_ = idx
		if idx >= 0 {
			res = (res + string([]rune(alphabet)[idx]))
		} else {
			res = (res + ch)
		}
		i = (i + 1)
	}
	return res
}

var cipher_map []string

var encoded string

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		cipher_map = create_cipher_map("Goodbye!!")
		encoded = encipher("Hello World!!", func(v any) []string {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]string); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []string{}
				}
				out := make([]string, len(arr))
				for i, x := range arr {
					out[i] = x.(string)
				}
				return out
			}
			return v.([]string)
		}(cipher_map))
		fmt.Println(encoded)
		fmt.Println(decipher(encoded, func(v any) []string {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]string); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []string{}
				}
				out := make([]string, len(arr))
				for i, x := range arr {
					out[i] = x.(string)
				}
				return out
			}
			return v.([]string)
		}(cipher_map)))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
