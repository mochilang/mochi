//go:build ignore

// Generated by Mochi v0.10.59 on 2025-08-06 21:26:34 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"strings"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _mod(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func indexOf(s string, ch string) int {
	var i int = 0
	_ = i
	for i < len(s) {
		if string([]rune(s)[i]) == ch {
			return i
		}
		i = (i + 1)
	}
	return (0 - 1)
}

func ord(ch string) int {
	var upper string = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
	_ = upper
	var lower string = "abcdefghijklmnopqrstuvwxyz"
	_ = lower
	var idx int = strings.Index(upper, ch)
	_ = idx
	if idx >= 0 {
		return (65 + idx)
	}
	idx = strings.Index(lower, ch)
	if idx >= 0 {
		return (97 + idx)
	}
	return 0
}

func chr(n int) string {
	var upper string = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
	_ = upper
	_ = upper
	var lower string = "abcdefghijklmnopqrstuvwxyz"
	_ = lower
	_ = lower
	if (n >= 65) && (n < 91) {
		return string([]rune(upper)[(n - 65):(n - 64)])
	}
	if (n >= 97) && (n < 123) {
		return string([]rune(lower)[(n - 97):(n - 96)])
	}
	return "?"
}

func clean_text(s string) string {
	var out string = ""
	_ = out
	var i int = 0
	_ = i
	for i < len(s) {
		var ch string = string([]rune(s)[i])
		_ = ch
		if (ch >= "A") && (ch <= "Z") {
			out = (out + ch)
		} else {
			if (ch >= "a") && (ch <= "z") {
				out = (out + chr((ord(ch) - 32)))
			}
		}
		i = (i + 1)
	}
	return out
}

func running_key_encrypt(key string, plaintext string) string {
	var pt string = clean_text(plaintext)
	_ = pt
	var k string = clean_text(key)
	_ = k
	var key_len int = len(k)
	_ = key_len
	var res string = ""
	_ = res
	var ord_a int = ord("A")
	_ = ord_a
	var i int = 0
	_ = i
	for i < len(pt) {
		var p int = (ord(string([]rune(pt)[i])) - ord_a)
		_ = p
		var kv int = (ord(string([]rune(k)[_mod(i, key_len)])) - ord_a)
		_ = kv
		var c int = _mod((p + kv), 26)
		_ = c
		res = (res + chr((c + ord_a)))
		i = (i + 1)
	}
	return res
}

func running_key_decrypt(key string, ciphertext string) string {
	var ct string = clean_text(ciphertext)
	_ = ct
	var k string = clean_text(key)
	_ = k
	var key_len int = len(k)
	_ = key_len
	var res string = ""
	_ = res
	var ord_a int = ord("A")
	_ = ord_a
	var i int = 0
	_ = i
	for i < len(ct) {
		var c int = (ord(string([]rune(ct)[i])) - ord_a)
		_ = c
		var kv int = (ord(string([]rune(k)[_mod(i, key_len)])) - ord_a)
		_ = kv
		var p int = _mod(((c - kv) + 26), 26)
		_ = p
		res = (res + chr((p + ord_a)))
		i = (i + 1)
	}
	return res
}

var key string

var plaintext string

var ciphertext string

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		key = "How does the duck know that? said Victor"
		plaintext = "DEFEND THIS"
		ciphertext = running_key_encrypt(key, plaintext)
		fmt.Println(ciphertext)
		fmt.Println(running_key_decrypt(key, ciphertext))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
