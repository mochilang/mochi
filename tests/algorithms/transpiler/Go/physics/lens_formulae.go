//go:build ignore

// Generated by Mochi v0.10.69 on 2025-08-19 16:49:39 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

func focal_length_of_lens(object_distance_from_lens float64, image_distance_from_lens float64) float64 {
	if (object_distance_from_lens == 0.0) || (image_distance_from_lens == 0.0) {
		panic("Invalid inputs. Enter non zero values with respect to the sign convention.")
	}
	return (float64(1.0) / float64(((float64(1.0) / float64(image_distance_from_lens)) - (float64(1.0) / float64(object_distance_from_lens)))))
}

func object_distance(focal_length_of_lens float64, image_distance_from_lens float64) float64 {
	if (image_distance_from_lens == 0.0) || (focal_length_of_lens == 0.0) {
		panic("Invalid inputs. Enter non zero values with respect to the sign convention.")
	}
	return (float64(1.0) / float64(((float64(1.0) / float64(image_distance_from_lens)) - (float64(1.0) / float64(focal_length_of_lens)))))
}

func image_distance(focal_length_of_lens float64, object_distance_from_lens float64) float64 {
	if (object_distance_from_lens == 0.0) || (focal_length_of_lens == 0.0) {
		panic("Invalid inputs. Enter non zero values with respect to the sign convention.")
	}
	return (float64(1.0) / float64(((float64(1.0) / float64(object_distance_from_lens)) + (float64(1.0) / float64(focal_length_of_lens)))))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(fmt.Sprint(focal_length_of_lens(10.0, 4.0)))
		fmt.Println(fmt.Sprint(focal_length_of_lens(2.7, 5.8)))
		fmt.Println(fmt.Sprint(object_distance(10.0, 40.0)))
		fmt.Println(fmt.Sprint(object_distance(6.2, 1.5)))
		fmt.Println(fmt.Sprint(image_distance(50.0, 40.0)))
		fmt.Println(fmt.Sprint(image_distance(5.3, 7.9)))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
