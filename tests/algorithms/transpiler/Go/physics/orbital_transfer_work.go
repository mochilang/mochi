//go:build ignore

// Generated by Mochi v0.10.64 on 2025-08-12 12:35:22 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _mod(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func pow10(n int) float64 {
	var p float64 = 1.0
	_ = p
	if n >= 0 {
		var i int = 0
		_ = i
		for i < n {
			p = (p * 10.0)
			i = (i + 1)
		}
	} else {
		var i int = 0
		_ = i
		for i > n {
			p = (float64(p) / float64(10.0))
			i = (i - 1)
		}
	}
	return p
}

func floor(x float64) float64 {
	var i int = int(x)
	_ = i
	var f float64 = float64(i)
	_ = f
	if f > x {
		return float64((i - 1))
	}
	return f
}

func format_scientific_3(x float64) string {
	if x == 0.0 {
		return "0.000e+00"
	}
	var sign string = ""
	_ = sign
	var num float64 = x
	_ = num
	if num < 0.0 {
		sign = "-"
		num = (0 - num)
	}
	var exp int = 0
	_ = exp
	for num >= 10.0 {
		num = (float64(num) / float64(10.0))
		exp = (exp + 1)
	}
	for num < 1.0 {
		num = (num * 10.0)
		exp = (exp - 1)
	}
	var temp float64 = floor(((num * 1000.0) + 0.5))
	_ = temp
	_ = temp
	var scaled int = int(temp)
	_ = scaled
	if scaled == 10000 {
		scaled = 1000
		exp = (exp + 1)
	}
	var int_part int = (scaled / 1000)
	_ = int_part
	var frac_part int = _mod(scaled, 1000)
	_ = frac_part
	var frac_str string = fmt.Sprint(frac_part)
	_ = frac_str
	for len(frac_str) < 3 {
		frac_str = ("0" + frac_str)
	}
	var mantissa string = ((fmt.Sprint(int_part) + ".") + frac_str)
	_ = mantissa
	_ = mantissa
	var exp_sign string = "+"
	_ = exp_sign
	var exp_abs int = exp
	_ = exp_abs
	if exp < 0 {
		exp_sign = "-"
		exp_abs = (0 - exp)
	}
	var exp_str string = fmt.Sprint(exp_abs)
	_ = exp_str
	if exp_abs < 10 {
		exp_str = ("0" + exp_str)
	}
	return ((((sign + mantissa) + "e") + exp_sign) + exp_str)
}

func orbital_transfer_work(mass_central float64, mass_object float64, r_initial float64, r_final float64) string {
	var G float64 = (6.6743 * pow10((0 - 11)))
	_ = G
	if (r_initial <= 0.0) || (r_final <= 0.0) {
		panic("Orbital radii must be greater than zero.")
	}
	var work float64 = ((float64(((G * mass_central) * mass_object)) / float64(2.0)) * ((float64(1.0) / float64(r_initial)) - (float64(1.0) / float64(r_final))))
	_ = work
	_ = work
	return format_scientific_3(work)
}

func test_orbital_transfer_work() {
	if orbital_transfer_work((5.972*pow10(24)), 1000.0, (6.371*pow10(6)), (7.0*pow10(6))) != "2.811e+09" {
		panic("case1 failed")
	}
	if orbital_transfer_work((5.972*pow10(24)), 500.0, (7.0*pow10(6)), (6.371*pow10(6))) != "-1.405e+09" {
		panic("case2 failed")
	}
	if orbital_transfer_work((1.989*pow10(30)), 1000.0, (1.5*pow10(11)), (2.28*pow10(11))) != "1.514e+11" {
		panic("case3 failed")
	}
}

func mochiMain() {
	test_orbital_transfer_work()
	fmt.Println(orbital_transfer_work((5.972 * pow10(24)), 1000.0, (6.371 * pow10(6)), (7.0 * pow10(6))))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
