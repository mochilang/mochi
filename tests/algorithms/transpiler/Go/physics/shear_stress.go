//go:build ignore

// Generated by Mochi v0.10.70 on 2025-08-23 15:05:03 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

func _floatEqual(a, b float64) bool {
	if a > b {
		return a-b < 1e-6
	}
	return b-a < 1e-6
}

var __name__ string = "__main__"

type Result struct {
	Name  string  `json:"name"`
	Value float64 `json:"value"`
}

func shear_stress(stress float64, tangential_force float64, area float64) Result {
	var zeros int = 0
	_ = zeros
	if _floatEqual(stress, 0.0) {
		zeros = (zeros + 1)
	}
	if _floatEqual(tangential_force, 0.0) {
		zeros = (zeros + 1)
	}
	if _floatEqual(area, 0.0) {
		zeros = (zeros + 1)
	}
	if zeros != 1 {
		panic("You cannot supply more or less than 2 values")
	} else {
		if stress < 0.0 {
			panic("Stress cannot be negative")
		} else {
			if tangential_force < 0.0 {
				panic("Tangential Force cannot be negative")
			} else {
				if area < 0.0 {
					panic("Area cannot be negative")
				} else {
					if _floatEqual(stress, 0.0) {
						return Result{
							Name:  "stress",
							Value: (float64(tangential_force) / float64(area)),
						}
					} else {
						if _floatEqual(tangential_force, 0.0) {
							return Result{
								Name:  "tangential_force",
								Value: (stress * area),
							}
						} else {
							return Result{
								Name:  "area",
								Value: (float64(tangential_force) / float64(stress)),
							}
						}
					}
				}
			}
		}
	}
}

func str_result(r Result) string {
	return (((("Result(name='" + r.Name) + "', value=") + fmt.Sprint(r.Value)) + ")")
}

var r1 Result

var r2 Result

var r3 Result

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		r1 = shear_stress(25.0, 100.0, 0.0)
		fmt.Println(str_result(r1))
		r2 = shear_stress(0.0, 1600.0, 200.0)
		fmt.Println(str_result(r2))
		r3 = shear_stress(1000.0, 0.0, 1200.0)
		fmt.Println(str_result(r3))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
