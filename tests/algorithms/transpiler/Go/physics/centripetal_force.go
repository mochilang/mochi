//go:build ignore

// Generated by Mochi v0.10.64 on 2025-08-12 10:09:33 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func centripetal(mass float64, velocity float64, radius float64) float64 {
	if mass < 0.0 {
		panic("The mass of the body cannot be negative")
	}
	if radius <= 0.0 {
		panic("The radius is always a positive non zero integer")
	}
	return (float64(((mass * velocity) * velocity)) / float64(radius))
}

func floor(x float64) float64 {
	var i int = int(x)
	_ = i
	if float64(i) > x {
		i = (i - 1)
	}
	return float64(i)
}

func pow10(n int) float64 {
	var p float64 = 1.0
	_ = p
	var i int = 0
	_ = i
	for i < n {
		p = (p * 10.0)
		i = (i + 1)
	}
	return p
}

func round(x float64, n int) float64 {
	var m float64 = pow10(n)
	_ = m
	_ = m
	return (float64(floor(((x * m) + 0.5))) / float64(m))
}

func show(mass float64, velocity float64, radius float64) {
	var f float64 = centripetal(mass, velocity, radius)
	_ = f
	fmt.Println(fmt.Sprint(round(f, 2)))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		show(15.5, (0 - 30.0), 10.0)
		show(10.0, 15.0, 5.0)
		show(20.0, (0 - 50.0), 15.0)
		show(12.25, 40.0, 25.0)
		show(50.0, 100.0, 50.0)
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
