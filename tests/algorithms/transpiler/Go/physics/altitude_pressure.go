//go:build ignore

// Generated by Mochi v0.10.67 on 2025-08-17 13:29:45 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	math "math"
	"os"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

func to_float(x int) float64 {
	return (float64(x) * 1.0)
}

func ln(x float64) float64 {
	if x <= 0.0 {
		panic("ln domain error")
	}
	var y float64 = (float64((x - 1.0)) / float64((x + 1.0)))
	_ = y
	var y2 float64 = (y * y)
	_ = y2
	var term float64 = y
	_ = term
	var sum float64 = 0.0
	_ = sum
	var k int = 0
	_ = k
	for k < 10 {
		var denom float64 = float64(((2 * k) + 1))
		_ = denom
		sum = (sum + (float64(term) / float64(denom)))
		term = (term * y2)
		k = (k + 1)
	}
	return (2.0 * sum)
}

func exp(x float64) float64 {
	var term float64 = 1.0
	_ = term
	var sum float64 = 1.0
	_ = sum
	var n int = 1
	_ = n
	for n < 20 {
		term = (float64((term * x)) / float64(n))
		sum = (sum + term)
		n = (n + 1)
	}
	return sum
}

func pow_float(base float64, exponent float64) float64 {
	return math.Exp((exponent * math.Log(base)))
}

func get_altitude_at_pressure(pressure float64) float64 {
	if pressure > 101325.0 {
		panic("Value Higher than Pressure at Sea Level !")
	}
	if pressure < 0.0 {
		panic("Atmospheric Pressure can not be negative !")
	}
	var ratio float64 = (float64(pressure) / float64(101325.0))
	_ = ratio
	_ = ratio
	return (44330.0 * (1.0 - pow_float(ratio, (float64(1.0)/float64(5.5255)))))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(fmt.Sprint(get_altitude_at_pressure(100000.0)))
		fmt.Println(fmt.Sprint(get_altitude_at_pressure(101325.0)))
		fmt.Println(fmt.Sprint(get_altitude_at_pressure(80000.0)))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
