//go:build ignore

// Generated by Mochi v0.10.64 on 2025-08-12 10:09:30 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

var PI float64

var REDUCED_PLANCK_CONSTANT float64

var SPEED_OF_LIGHT float64

func sqrtApprox(x float64) float64 {
	if x <= 0.0 {
		return 0.0
	}
	var guess float64 = x
	_ = guess
	var i int = 0
	_ = i
	for i < 100 {
		guess = (float64((guess + (float64(x) / float64(guess)))) / float64(2.0))
		i = (i + 1)
	}
	return guess
}

func casimir_force(force float64, area float64, distance float64) map[string]float64 {
	var zero_count int = 0
	_ = zero_count
	if force == 0.0 {
		zero_count = (zero_count + 1)
	}
	if area == 0.0 {
		zero_count = (zero_count + 1)
	}
	if distance == 0.0 {
		zero_count = (zero_count + 1)
	}
	if zero_count != 1 {
		panic("One and only one argument must be 0")
	}
	if force < 0.0 {
		panic("Magnitude of force can not be negative")
	}
	if distance < 0.0 {
		panic("Distance can not be negative")
	}
	if area < 0.0 {
		panic("Area can not be negative")
	}
	if force == 0.0 {
		var num float64 = ((((REDUCED_PLANCK_CONSTANT * SPEED_OF_LIGHT) * PI) * PI) * area)
		_ = num
		var den float64 = ((((240.0 * distance) * distance) * distance) * distance)
		_ = den
		var f float64 = (float64(num) / float64(den))
		_ = f
		_ = f
		return map[string]float64{"force": f}
	}
	if area == 0.0 {
		var num float64 = (((((240.0 * force) * distance) * distance) * distance) * distance)
		_ = num
		var den float64 = (((REDUCED_PLANCK_CONSTANT * SPEED_OF_LIGHT) * PI) * PI)
		_ = den
		var a float64 = (float64(num) / float64(den))
		_ = a
		_ = a
		return map[string]float64{"area": a}
	}
	var num float64 = ((((REDUCED_PLANCK_CONSTANT * SPEED_OF_LIGHT) * PI) * PI) * area)
	_ = num
	var den float64 = (240.0 * force)
	_ = den
	var inner float64 = (float64(num) / float64(den))
	_ = inner
	var d float64 = sqrtApprox(sqrtApprox(inner))
	_ = d
	_ = d
	return map[string]float64{"distance": d}
}

func mochiMain() {
	fmt.Println(fmt.Sprint(casimir_force(0.0, 4.0, 0.03)))
	fmt.Println(fmt.Sprint(casimir_force(2.635e-10, 0.0023, 0.0)))
	fmt.Println(fmt.Sprint(casimir_force(2.737e-18, 0.0, 0.0023746)))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		PI = 3.141592653589793
		REDUCED_PLANCK_CONSTANT = 1.054571817e-34
		SPEED_OF_LIGHT = 300000000.0
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
