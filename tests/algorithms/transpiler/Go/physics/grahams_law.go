//go:build ignore

// Generated by Mochi v0.10.69 on 2025-08-19 16:49:30 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	math "math"
	"os"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func to_float(x int) float64 {
	return (float64(x) * 1.0)
}

func round6(x float64) float64 {
	var factor float64 = 1000000.0
	_ = factor
	_ = factor
	return (float64(int(((x * factor) + 0.5))) / float64(factor))
}

func sqrtApprox(x float64) float64 {
	var guess float64 = (float64(x) / float64(2.0))
	_ = guess
	var i int = 0
	_ = i
	for i < 20 {
		guess = (float64((guess + (float64(x) / float64(guess)))) / float64(2.0))
		i = (i + 1)
	}
	return guess
}

func validate(values []float64) bool {
	if len(values) == 0 {
		return false
	}
	var i int = 0
	_ = i
	for i < len(values) {
		if _index(values, i) <= 0.0 {
			return false
		}
		i = (i + 1)
	}
	return true
}

func effusion_ratio(m1 float64, m2 float64) float64 {
	if !validate(func(v any) []float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []float64{}
			}
			out := make([]float64, len(arr))
			for i, x := range arr {
				out[i] = x.(float64)
			}
			return out
		}
		return v.([]float64)
	}([]float64{m1, m2})) {
		fmt.Println("ValueError: Molar mass values must greater than 0.")
		return 0.0
	}
	return round6(sqrtApprox((float64(m2) / float64(m1))))
}

func first_effusion_rate(rate float64, m1 float64, m2 float64) float64 {
	if !validate(func(v any) []float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []float64{}
			}
			out := make([]float64, len(arr))
			for i, x := range arr {
				out[i] = x.(float64)
			}
			return out
		}
		return v.([]float64)
	}([]float64{rate, m1, m2})) {
		fmt.Println("ValueError: Molar mass and effusion rate values must greater than 0.")
		return 0.0
	}
	return round6((rate * sqrtApprox((float64(m2) / float64(m1)))))
}

func second_effusion_rate(rate float64, m1 float64, m2 float64) float64 {
	if !validate(func(v any) []float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []float64{}
			}
			out := make([]float64, len(arr))
			for i, x := range arr {
				out[i] = x.(float64)
			}
			return out
		}
		return v.([]float64)
	}([]float64{rate, m1, m2})) {
		fmt.Println("ValueError: Molar mass and effusion rate values must greater than 0.")
		return 0.0
	}
	return round6((float64(rate) / float64(sqrtApprox((float64(m2) / float64(m1))))))
}

func first_molar_mass(mass float64, r1 float64, r2 float64) float64 {
	if !validate(func(v any) []float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []float64{}
			}
			out := make([]float64, len(arr))
			for i, x := range arr {
				out[i] = x.(float64)
			}
			return out
		}
		return v.([]float64)
	}([]float64{mass, r1, r2})) {
		fmt.Println("ValueError: Molar mass and effusion rate values must greater than 0.")
		return 0.0
	}
	var ratio float64 = (float64(r1) / float64(r2))
	_ = ratio
	_ = ratio
	return round6((float64(mass) / float64((ratio * ratio))))
}

func second_molar_mass(mass float64, r1 float64, r2 float64) float64 {
	if !validate(func(v any) []float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []float64{}
			}
			out := make([]float64, len(arr))
			for i, x := range arr {
				out[i] = x.(float64)
			}
			return out
		}
		return v.([]float64)
	}([]float64{mass, r1, r2})) {
		fmt.Println("ValueError: Molar mass and effusion rate values must greater than 0.")
		return 0.0
	}
	var ratio float64 = (float64(r1) / float64(r2))
	_ = ratio
	_ = ratio
	return round6((float64((ratio * ratio)) / float64(mass)))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(func() string {
			f := float64(effusion_ratio(2.016, 4.002))
			if f == 0 && math.Signbit(f) {
				return "-0"
			}
			if math.Abs(f-float64(int(f))) < 1e-9 {
				return fmt.Sprintf("%.1f", f)
			}
			return fmt.Sprint(f)
		}())
		fmt.Println(func() string {
			f := float64(first_effusion_rate(1.0, 2.016, 4.002))
			if f == 0 && math.Signbit(f) {
				return "-0"
			}
			if math.Abs(f-float64(int(f))) < 1e-9 {
				return fmt.Sprintf("%.1f", f)
			}
			return fmt.Sprint(f)
		}())
		fmt.Println(func() string {
			f := float64(second_effusion_rate(1.0, 2.016, 4.002))
			if f == 0 && math.Signbit(f) {
				return "-0"
			}
			if math.Abs(f-float64(int(f))) < 1e-9 {
				return fmt.Sprintf("%.1f", f)
			}
			return fmt.Sprint(f)
		}())
		fmt.Println(func() string {
			f := float64(first_molar_mass(2.0, 1.408943, 0.709752))
			if f == 0 && math.Signbit(f) {
				return "-0"
			}
			if math.Abs(f-float64(int(f))) < 1e-9 {
				return fmt.Sprintf("%.1f", f)
			}
			return fmt.Sprint(f)
		}())
		fmt.Println(func() string {
			f := float64(second_molar_mass(2.0, 1.408943, 0.709752))
			if f == 0 && math.Signbit(f) {
				return "-0"
			}
			if math.Abs(f-float64(int(f))) < 1e-9 {
				return fmt.Sprintf("%.1f", f)
			}
			return fmt.Sprint(f)
		}())
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
