//go:build ignore

// Generated by Mochi v0.10.64 on 2025-08-12 10:10:27 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

var PI float64

var R float64

func sqrt(x float64) float64 {
	if x <= 0.0 {
		return 0.0
	}
	var guess float64 = x
	_ = guess
	var i int = 0
	_ = i
	for i < 20 {
		guess = (float64((guess + (float64(x) / float64(guess)))) / float64(2.0))
		i = (i + 1)
	}
	return guess
}

func avg_speed_of_molecule(temperature float64, molar_mass float64) float64 {
	if temperature < 0.0 {
		panic("Absolute temperature cannot be less than 0 K")
	}
	if molar_mass <= 0.0 {
		panic("Molar mass should be greater than 0 kg/mol")
	}
	var expr float64 = (float64(((8.0 * R) * temperature)) / float64((PI * molar_mass)))
	_ = expr
	var s float64 = sqrt(expr)
	_ = s
	_ = s
	return s
}

func mps_speed_of_molecule(temperature float64, molar_mass float64) float64 {
	if temperature < 0.0 {
		panic("Absolute temperature cannot be less than 0 K")
	}
	if molar_mass <= 0.0 {
		panic("Molar mass should be greater than 0 kg/mol")
	}
	var expr float64 = (float64(((2.0 * R) * temperature)) / float64(molar_mass))
	_ = expr
	var s float64 = sqrt(expr)
	_ = s
	_ = s
	return s
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		PI = 3.141592653589793
		R = 8.31446261815324
		fmt.Println(fmt.Sprint(avg_speed_of_molecule(273.0, 0.028)))
		fmt.Println(fmt.Sprint(avg_speed_of_molecule(300.0, 0.032)))
		fmt.Println(fmt.Sprint(mps_speed_of_molecule(273.0, 0.028)))
		fmt.Println(fmt.Sprint(mps_speed_of_molecule(300.0, 0.032)))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
