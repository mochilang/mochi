//go:build ignore

// Generated by Mochi v0.10.68 on 2025-08-17 20:41:37 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	math "math"
	"os"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

var UNIVERSAL_GAS_CONSTANT float64

func pressure_of_gas_system(moles float64, kelvin float64, volume float64) float64 {
	if ((moles < float64(0)) || (kelvin < float64(0))) || (volume < float64(0)) {
		panic("Invalid inputs. Enter positive value.")
	}
	return (float64(((moles * kelvin) * UNIVERSAL_GAS_CONSTANT)) / float64(volume))
}

func volume_of_gas_system(moles float64, kelvin float64, pressure float64) float64 {
	if ((moles < float64(0)) || (kelvin < float64(0))) || (pressure < float64(0)) {
		panic("Invalid inputs. Enter positive value.")
	}
	return (float64(((moles * kelvin) * UNIVERSAL_GAS_CONSTANT)) / float64(pressure))
}

func temperature_of_gas_system(moles float64, volume float64, pressure float64) float64 {
	if ((moles < float64(0)) || (volume < float64(0))) || (pressure < float64(0)) {
		panic("Invalid inputs. Enter positive value.")
	}
	return (float64((pressure * volume)) / float64((moles * UNIVERSAL_GAS_CONSTANT)))
}

func moles_of_gas_system(kelvin float64, volume float64, pressure float64) float64 {
	if ((kelvin < float64(0)) || (volume < float64(0))) || (pressure < float64(0)) {
		panic("Invalid inputs. Enter positive value.")
	}
	return (float64((pressure * volume)) / float64((kelvin * UNIVERSAL_GAS_CONSTANT)))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		UNIVERSAL_GAS_CONSTANT = 8.314462
		fmt.Println(func() string {
			f := float64(pressure_of_gas_system(2.0, 100.0, 5.0))
			if f == 0 && math.Signbit(f) {
				return "-0"
			}
			if math.Abs(f-float64(int(f))) < 1e-9 {
				return fmt.Sprintf("%.1f", f)
			}
			return fmt.Sprint(f)
		}())
		fmt.Println(func() string {
			f := float64(volume_of_gas_system(0.5, 273.0, 0.004))
			if f == 0 && math.Signbit(f) {
				return "-0"
			}
			if math.Abs(f-float64(int(f))) < 1e-9 {
				return fmt.Sprintf("%.1f", f)
			}
			return fmt.Sprint(f)
		}())
		fmt.Println(func() string {
			f := float64(temperature_of_gas_system(2.0, 100.0, 5.0))
			if f == 0 && math.Signbit(f) {
				return "-0"
			}
			if math.Abs(f-float64(int(f))) < 1e-9 {
				return fmt.Sprintf("%.1f", f)
			}
			return fmt.Sprint(f)
		}())
		fmt.Println(func() string {
			f := float64(moles_of_gas_system(100.0, 5.0, 10.0))
			if f == 0 && math.Signbit(f) {
				return "-0"
			}
			if math.Abs(f-float64(int(f))) < 1e-9 {
				return fmt.Sprintf("%.1f", f)
			}
			return fmt.Sprint(f)
		}())
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
