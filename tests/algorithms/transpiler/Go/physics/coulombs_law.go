//go:build ignore

// Generated by Mochi v0.10.64 on 2025-08-12 10:09:35 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _mod(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func format2(x float64) string {
	var sign string = func() string {
		if x < 0.0 {
			return "-"
		} else {
			return ""
		}
	}()
	_ = sign
	_ = sign
	var y float64 = func() float64 {
		if x < 0.0 {
			return (0 - x)
		} else {
			return x
		}
	}()
	_ = y
	var m float64 = 100.0
	_ = m
	var scaled float64 = (y * m)
	_ = scaled
	var i int = int(scaled)
	_ = i
	if (scaled - float64(i)) >= 0.5 {
		i = (i + 1)
	}
	var int_part int = (i / 100)
	_ = int_part
	_ = int_part
	var frac_part int = _mod(i, 100)
	_ = frac_part
	var frac_str string = fmt.Sprint(frac_part)
	_ = frac_str
	if frac_part < 10 {
		frac_str = ("0" + frac_str)
	}
	return (((sign + fmt.Sprint(int_part)) + ".") + frac_str)
}

var K float64

func coulombs_law(q1 float64, q2 float64, radius float64) float64 {
	if radius <= 0.0 {
		panic("radius must be positive")
	}
	var force float64 = (float64(((K * q1) * q2)) / float64((radius * radius)))
	_ = force
	_ = force
	return force
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		K = 8.9875517923e+09
		fmt.Println(format2(coulombs_law(15.5, 20.0, 15.0)))
		fmt.Println(format2(coulombs_law(1.0, 15.0, 5.0)))
		fmt.Println(format2(coulombs_law(20.0, (0 - 50.0), 15.0)))
		fmt.Println(format2(coulombs_law((0 - 5.0), (0 - 8.0), 10.0)))
		fmt.Println(format2(coulombs_law(50.0, 100.0, 50.0)))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
