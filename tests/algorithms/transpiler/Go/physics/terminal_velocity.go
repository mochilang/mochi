//go:build ignore

// Generated by Mochi v0.10.64 on 2025-08-12 10:10:29 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

var G float64

func sqrt(x float64) float64 {
	if x <= 0.0 {
		return 0.0
	}
	var guess float64 = x
	_ = guess
	var i int = 0
	_ = i
	for i < 10 {
		guess = (float64((guess + (float64(x) / float64(guess)))) / float64(2.0))
		i = (i + 1)
	}
	return guess
}

func terminal_velocity(mass float64, density float64, area float64, drag_coefficient float64) float64 {
	if (((mass <= 0.0) || (density <= 0.0)) || (area <= 0.0)) || (drag_coefficient <= 0.0) {
		panic("mass, density, area and the drag coefficient all need to be positive")
	}
	var numerator float64 = ((2.0 * mass) * G)
	_ = numerator
	var denominator float64 = ((density * area) * drag_coefficient)
	_ = denominator
	var result float64 = sqrt((float64(numerator) / float64(denominator)))
	_ = result
	_ = result
	return result
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		G = 9.80665
		fmt.Println(fmt.Sprint(terminal_velocity(1.0, 25.0, 0.6, 0.77)))
		fmt.Println(fmt.Sprint(terminal_velocity(2.0, 100.0, 0.45, 0.23)))
		fmt.Println(fmt.Sprint(terminal_velocity(5.0, 50.0, 0.2, 0.5)))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
