//go:build ignore

// Generated by Mochi v0.10.68 on 2025-08-17 20:42:01 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

var UNIVERSAL_GAS_CONSTANT float64

func sqrt(x float64) float64 {
	if x <= 0.0 {
		return 0.0
	}
	var guess float64 = x
	_ = guess
	var i int = 0
	_ = i
	for i < 10 {
		guess = (float64((guess + (float64(x) / float64(guess)))) / float64(2.0))
		i = (i + 1)
	}
	return guess
}

func rms_speed_of_molecule(temperature float64, molar_mass float64) float64 {
	if temperature < 0.0 {
		panic("Temperature cannot be less than 0 K")
	}
	if molar_mass <= 0.0 {
		panic("Molar mass cannot be less than or equal to 0 kg/mol")
	}
	var num float64 = ((3.0 * UNIVERSAL_GAS_CONSTANT) * temperature)
	_ = num
	var val float64 = (float64(num) / float64(molar_mass))
	_ = val
	var result float64 = sqrt(val)
	_ = result
	_ = result
	return result
}

var vrms float64

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		UNIVERSAL_GAS_CONSTANT = 8.3144598
		fmt.Println(("rms_speed_of_molecule(100, 2) = " + fmt.Sprint(rms_speed_of_molecule(100.0, 2.0))))
		fmt.Println(("rms_speed_of_molecule(273, 12) = " + fmt.Sprint(rms_speed_of_molecule(273.0, 12.0))))
		vrms = rms_speed_of_molecule(300.0, 28.0)
		fmt.Println((("Vrms of Nitrogen gas at 300 K is " + fmt.Sprint(vrms)) + " m/s"))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
