//go:build ignore

// Generated by Mochi v0.10.69 on 2025-08-19 16:49:29 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	math "math"
	"os"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

func pow10(n int) float64 {
	var p float64 = 1.0
	_ = p
	var k int = 0
	_ = k
	if n >= 0 {
		for k < n {
			p = (p * 10.0)
			k = (k + 1)
		}
	} else {
		var m int = (0 - n)
		_ = m
		for k < m {
			p = (float64(p) / float64(10.0))
			k = (k + 1)
		}
	}
	return p
}

func sqrt_newton(n float64) float64 {
	if n == 0.0 {
		return 0.0
	}
	var x float64 = n
	_ = x
	var j int = 0
	_ = j
	for j < 20 {
		x = (float64((x + (float64(n) / float64(x)))) / float64(2.0))
		j = (j + 1)
	}
	return x
}

func round3(x float64) float64 {
	var y float64 = ((x * 1000.0) + 0.5)
	_ = y
	var yi int = int(y)
	_ = yi
	if float64(yi) > y {
		yi = (yi - 1)
	}
	return (float64(yi) / float64(1000.0))
}

func escape_velocity(mass float64, radius float64) float64 {
	if radius == 0.0 {
		panic("Radius cannot be zero.")
	}
	var G float64 = (6.6743 * pow10((0 - 11)))
	_ = G
	var velocity float64 = sqrt_newton((float64(((2.0 * G) * mass)) / float64(radius)))
	_ = velocity
	_ = velocity
	return round3(velocity)
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(func() string {
			f := float64(escape_velocity(5.971999999999999e+24, 6.370999999999999e+06))
			if f == 0 && math.Signbit(f) {
				return "-0"
			}
			if math.Abs(f-float64(int(f))) < 1e-9 {
				return fmt.Sprintf("%.1f", f)
			}
			return fmt.Sprint(f)
		}())
		fmt.Println(func() string {
			f := float64(escape_velocity(7.347999999999999e+22, 1.7369999999999998e+06))
			if f == 0 && math.Signbit(f) {
				return "-0"
			}
			if math.Abs(f-float64(int(f))) < 1e-9 {
				return fmt.Sprintf("%.1f", f)
			}
			return fmt.Sprint(f)
		}())
		fmt.Println(func() string {
			f := float64(escape_velocity(1.8979999999999997e+27, 6.991099999999999e+07))
			if f == 0 && math.Signbit(f) {
				return "-0"
			}
			if math.Abs(f-float64(int(f))) < 1e-9 {
				return fmt.Sprintf("%.1f", f)
			}
			return fmt.Sprint(f)
		}())
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
