//go:build ignore

// Generated by Mochi v0.10.64 on 2025-08-12 12:35:27 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func exp_approx(x float64) float64 {
	var y float64 = x
	_ = y
	var is_neg bool = false
	_ = is_neg
	if x < 0.0 {
		is_neg = true
		y = (0 - x)
	}
	var term float64 = 1.0
	_ = term
	var sum float64 = 1.0
	_ = sum
	var n int = 1
	_ = n
	for n < 30 {
		term = (float64((term * y)) / float64(n))
		sum = (sum + term)
		n = (n + 1)
	}
	if is_neg {
		return (float64(1.0) / float64(sum))
	}
	return sum
}

func ln_series(x float64) float64 {
	var t float64 = (float64((x - 1.0)) / float64((x + 1.0)))
	_ = t
	var term float64 = t
	_ = term
	var sum float64 = 0.0
	_ = sum
	var n int = 1
	_ = n
	for n <= 19 {
		sum = (sum + (float64(term) / float64(n)))
		term = ((term * t) * t)
		n = (n + 2)
	}
	return (2.0 * sum)
}

func ln(x float64) float64 {
	var y float64 = x
	_ = y
	var k int = 0
	_ = k
	for y >= 10.0 {
		y = (float64(y) / float64(10.0))
		k = (k + 1)
	}
	for y < 1.0 {
		y = (y * 10.0)
		k = (k - 1)
	}
	return (ln_series(y) + (float64(k) * ln_series(10.0)))
}

func powf(base float64, exponent float64) float64 {
	return exp_approx((exponent * ln(base)))
}

func rainfall_intensity(coefficient_k float64, coefficient_a float64, coefficient_b float64, coefficient_c float64, return_period float64, duration float64) float64 {
	if coefficient_k <= 0.0 {
		panic("All parameters must be positive.")
	}
	if coefficient_a <= 0.0 {
		panic("All parameters must be positive.")
	}
	if coefficient_b <= 0.0 {
		panic("All parameters must be positive.")
	}
	if coefficient_c <= 0.0 {
		panic("All parameters must be positive.")
	}
	if return_period <= 0.0 {
		panic("All parameters must be positive.")
	}
	if duration <= 0.0 {
		panic("All parameters must be positive.")
	}
	var numerator float64 = (coefficient_k * powf(return_period, coefficient_a))
	_ = numerator
	_ = numerator
	var denominator float64 = powf((duration + coefficient_b), coefficient_c)
	_ = denominator
	_ = denominator
	return (float64(numerator) / float64(denominator))
}

var r1 float64

var r2 float64

var r3 float64

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		r1 = rainfall_intensity(1000.0, 0.2, 11.6, 0.81, 10.0, 60.0)
		fmt.Println(fmt.Sprint(r1))
		r2 = rainfall_intensity(1000.0, 0.2, 11.6, 0.81, 10.0, 30.0)
		fmt.Println(fmt.Sprint(r2))
		r3 = rainfall_intensity(1000.0, 0.2, 11.6, 0.81, 5.0, 60.0)
		fmt.Println(fmt.Sprint(r3))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
