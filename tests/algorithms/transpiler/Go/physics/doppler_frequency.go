//go:build ignore

// Generated by Mochi v0.10.69 on 2025-08-22 13:08:37 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	math "math"
	"os"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

func doppler_effect(org_freq float64, wave_vel float64, obs_vel float64, src_vel float64) float64 {
	if wave_vel == src_vel {
		panic("division by zero implies vs=v and observer in front of the source")
	}
	var doppler_freq float64 = (float64((org_freq * (wave_vel + obs_vel))) / float64((wave_vel - src_vel)))
	_ = doppler_freq
	if doppler_freq <= 0.0 {
		panic("non-positive frequency implies vs>v or v0>v (in the opposite direction)")
	}
	return doppler_freq
}

func absf(x float64) float64 {
	if x < 0.0 {
		return (0 - x)
	}
	return x
}

func almost_equal(a float64, b float64, tol float64) bool {
	return (absf((a - b)) <= tol)
}

func test_doppler_effect() {
	if !almost_equal(doppler_effect(100.0, 330.0, 10.0, 0.0), 103.03030303030303, 1e-07) {
		panic("test 1 failed")
	}
	if !almost_equal(doppler_effect(100.0, 330.0, (0-10.0), 0.0), 96.96969696969697, 1e-07) {
		panic("test 2 failed")
	}
	if !almost_equal(doppler_effect(100.0, 330.0, 0.0, 10.0), 103.125, 1e-07) {
		panic("test 3 failed")
	}
	if !almost_equal(doppler_effect(100.0, 330.0, 0.0, (0-10.0)), 97.05882352941177, 1e-07) {
		panic("test 4 failed")
	}
	if !almost_equal(doppler_effect(100.0, 330.0, 10.0, 10.0), 106.25, 1e-07) {
		panic("test 5 failed")
	}
	if !almost_equal(doppler_effect(100.0, 330.0, (0-10.0), (0-10.0)), 94.11764705882354, 1e-07) {
		panic("test 6 failed")
	}
}

func mochiMain() {
	test_doppler_effect()
	fmt.Println(func() string {
		f := float64(doppler_effect(100.0, 330.0, 10.0, 0.0))
		if f == 0 && math.Signbit(f) {
			return "-0"
		}
		if math.Abs(f-float64(int(f))) < 1e-9 {
			return fmt.Sprintf("%.1f", f)
		}
		return fmt.Sprint(f)
	}())
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
