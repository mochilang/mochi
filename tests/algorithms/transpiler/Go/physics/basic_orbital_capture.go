//go:build ignore

// Generated by Mochi v0.10.67 on 2025-08-17 15:07:58 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

var G float64

var C float64

var PI float64

func pow10(n int) float64 {
	var result float64 = 1.0
	_ = result
	var i int = 0
	_ = i
	for i < n {
		result = (result * 10.0)
		i = (i + 1)
	}
	return result
}

func sqrt(x float64) float64 {
	if x <= 0.0 {
		return 0.0
	}
	var guess float64 = x
	_ = guess
	var i int = 0
	_ = i
	for i < 20 {
		guess = (float64((guess + (float64(x) / float64(guess)))) / float64(2.0))
		i = (i + 1)
	}
	return guess
}

func abs(x float64) float64 {
	if x < 0.0 {
		return (0 - x)
	}
	return x
}

func capture_radii(target_body_radius float64, target_body_mass float64, projectile_velocity float64) float64 {
	if target_body_mass < 0.0 {
		panic("Mass cannot be less than 0")
	}
	if target_body_radius < 0.0 {
		panic("Radius cannot be less than 0")
	}
	if projectile_velocity > C {
		panic("Cannot go beyond speed of light")
	}
	var escape_velocity_squared float64 = (float64(((2.0 * G) * target_body_mass)) / float64(target_body_radius))
	_ = escape_velocity_squared
	var denom float64 = (projectile_velocity * projectile_velocity)
	_ = denom
	var capture_radius float64 = (target_body_radius * sqrt((1.0 + (float64(escape_velocity_squared) / float64(denom)))))
	_ = capture_radius
	_ = capture_radius
	return capture_radius
}

func capture_area(capture_radius float64) float64 {
	if capture_radius < 0.0 {
		panic("Cannot have a capture radius less than 0")
	}
	var sigma float64 = ((PI * capture_radius) * capture_radius)
	_ = sigma
	_ = sigma
	return sigma
}

func run_tests() {
	var r float64 = capture_radii(6.956999999999999e+08, 1.9899999999999998e+30, 25000.0)
	_ = r
	if abs((r - 1.7209590691437138e+10)) > 1.0 {
		panic("capture_radii failed")
	}
	var a float64 = capture_area(r)
	_ = a
	if abs((a - 9.304455331801811e+20)) > 1.0 {
		panic("capture_area failed")
	}
}

func mochiMain() {
	run_tests()
	var r float64 = capture_radii(6.956999999999999e+08, 1.9899999999999998e+30, 25000.0)
	_ = r
	fmt.Println(fmt.Sprint(r))
	fmt.Println(fmt.Sprint(capture_area(r)))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		G = 6.6743e-11
		C = 299792458.0
		PI = 3.141592653589793
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
