//go:build ignore

// Generated by Mochi v0.10.68 on 2025-08-17 20:41:50 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

var GRAVITATIONAL_CONSTANT float64

type Result struct {
	Kind  string  `json:"kind"`
	Value float64 `json:"value"`
}

func sqrtApprox(x float64) float64 {
	var guess float64 = (float64(x) / float64(2.0))
	_ = guess
	var i int = 0
	_ = i
	for i < 20 {
		guess = (float64((guess + (float64(x) / float64(guess)))) / float64(2.0))
		i = (i + 1)
	}
	return guess
}

func gravitational_law(force float64, mass_1 float64, mass_2 float64, distance float64) Result {
	var zero_count int = 0
	_ = zero_count
	if force == 0.0 {
		zero_count = (zero_count + 1)
	}
	if mass_1 == 0.0 {
		zero_count = (zero_count + 1)
	}
	if mass_2 == 0.0 {
		zero_count = (zero_count + 1)
	}
	if distance == 0.0 {
		zero_count = (zero_count + 1)
	}
	if zero_count != 1 {
		panic("One and only one argument must be 0")
	}
	if force < 0.0 {
		panic("Gravitational force can not be negative")
	}
	if distance < 0.0 {
		panic("Distance can not be negative")
	}
	if mass_1 < 0.0 {
		panic("Mass can not be negative")
	}
	if mass_2 < 0.0 {
		panic("Mass can not be negative")
	}
	var product_of_mass float64 = (mass_1 * mass_2)
	_ = product_of_mass
	if force == 0.0 {
		var f float64 = (float64((GRAVITATIONAL_CONSTANT * product_of_mass)) / float64((distance * distance)))
		_ = f
		_ = f
		return Result{
			Kind:  "force",
			Value: f,
		}
	}
	if mass_1 == 0.0 {
		var m1 float64 = (float64((force * (distance * distance))) / float64((GRAVITATIONAL_CONSTANT * mass_2)))
		_ = m1
		_ = m1
		return Result{
			Kind:  "mass_1",
			Value: m1,
		}
	}
	if mass_2 == 0.0 {
		var m2 float64 = (float64((force * (distance * distance))) / float64((GRAVITATIONAL_CONSTANT * mass_1)))
		_ = m2
		_ = m2
		return Result{
			Kind:  "mass_2",
			Value: m2,
		}
	}
	var d float64 = sqrtApprox((float64((GRAVITATIONAL_CONSTANT * product_of_mass)) / float64(force)))
	_ = d
	_ = d
	return Result{
		Kind:  "distance",
		Value: d,
	}
}

var r1 Result

var r2 Result

var r3 Result

var r4 Result

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		GRAVITATIONAL_CONSTANT = 6.6743e-11
		r1 = gravitational_law(0.0, 5.0, 10.0, 20.0)
		r2 = gravitational_law(7367.382, 0.0, 74.0, 3048.0)
		r3 = gravitational_law(100.0, 5.0, 0.0, 3.0)
		r4 = gravitational_law(100.0, 5.0, 10.0, 0.0)
		fmt.Println(((r1.Kind + " ") + fmt.Sprint(r1.Value)))
		fmt.Println(((r2.Kind + " ") + fmt.Sprint(r2.Value)))
		fmt.Println(((r3.Kind + " ") + fmt.Sprint(r3.Value)))
		fmt.Println(((r4.Kind + " ") + fmt.Sprint(r4.Value)))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
