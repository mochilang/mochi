//go:build ignore

// Generated by Mochi v0.10.69 on 2025-08-19 16:49:53 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

func pow10(exp int) float64 {
	var result float64 = 1.0
	_ = result
	var i int = 0
	_ = i
	for i < exp {
		result = (result * 10.0)
		i = (i + 1)
	}
	return result
}

var PLANCK_CONSTANT_JS float64

var PLANCK_CONSTANT_EVS float64

func maximum_kinetic_energy(frequency float64, work_function float64, in_ev bool) float64 {
	if frequency < 0.0 {
		panic("Frequency can't be negative.")
	}
	var energy float64 = func() float64 {
		if in_ev {
			return ((PLANCK_CONSTANT_EVS * frequency) - work_function)
		} else {
			return ((PLANCK_CONSTANT_JS * frequency) - work_function)
		}
	}()
	_ = energy
	if energy > 0.0 {
		return energy
	}
	return 0.0
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		PLANCK_CONSTANT_JS = (float64(6.6261) / float64(pow10(34)))
		PLANCK_CONSTANT_EVS = (float64(4.1357) / float64(pow10(15)))
		fmt.Println(fmt.Sprint(maximum_kinetic_energy(1000000.0, 2.0, false)))
		fmt.Println(fmt.Sprint(maximum_kinetic_energy(1000000.0, 2.0, true)))
		fmt.Println(fmt.Sprint(maximum_kinetic_energy(10000000000000000.0, 2.0, true)))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
