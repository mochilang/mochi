//go:build ignore

// Generated by Mochi v0.10.64 on 2025-08-12 10:09:55 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func abs_float(x float64) float64 {
	if x < 0.0 {
		return (0 - x)
	}
	return x
}

func isclose(a float64, b float64, tolerance float64) bool {
	return (abs_float((a - b)) < tolerance)
}

func focal_length(distance_of_object float64, distance_of_image float64) float64 {
	if (distance_of_object == 0.0) || (distance_of_image == 0.0) {
		panic("Invalid inputs. Enter non zero values with respect to the sign convention.")
	}
	return (float64(1.0) / float64(((float64(1.0) / float64(distance_of_object)) + (float64(1.0) / float64(distance_of_image)))))
}

func object_distance(focal_length float64, distance_of_image float64) float64 {
	if (distance_of_image == 0.0) || (focal_length == 0.0) {
		panic("Invalid inputs. Enter non zero values with respect to the sign convention.")
	}
	return (float64(1.0) / float64(((float64(1.0) / float64(focal_length)) - (float64(1.0) / float64(distance_of_image)))))
}

func image_distance(focal_length float64, distance_of_object float64) float64 {
	if (distance_of_object == 0.0) || (focal_length == 0.0) {
		panic("Invalid inputs. Enter non zero values with respect to the sign convention.")
	}
	return (float64(1.0) / float64(((float64(1.0) / float64(focal_length)) - (float64(1.0) / float64(distance_of_object)))))
}

func test_focal_length() {
	var f1 float64 = focal_length(10.0, 20.0)
	_ = f1
	if !isclose(f1, 6.66666666666666, 1e-08) {
		panic("focal_length test1 failed")
	}
	var f2 float64 = focal_length(9.5, 6.7)
	_ = f2
	if !isclose(f2, 3.929012346, 1e-08) {
		panic("focal_length test2 failed")
	}
}

func test_object_distance() {
	var u1 float64 = object_distance(30.0, 20.0)
	_ = u1
	if !isclose(u1, (0 - 60.0), 1e-08) {
		panic("object_distance test1 failed")
	}
	var u2 float64 = object_distance(10.5, 11.7)
	_ = u2
	if !isclose(u2, 102.375, 1e-08) {
		panic("object_distance test2 failed")
	}
}

func test_image_distance() {
	var v1 float64 = image_distance(10.0, 40.0)
	_ = v1
	if !isclose(v1, 13.33333333, 1e-08) {
		panic("image_distance test1 failed")
	}
	var v2 float64 = image_distance(1.5, 6.7)
	_ = v2
	if !isclose(v2, 1.932692308, 1e-08) {
		panic("image_distance test2 failed")
	}
}

func mochiMain() {
	test_focal_length()
	test_object_distance()
	test_image_distance()
	fmt.Println(fmt.Sprint(focal_length(10.0, 20.0)))
	fmt.Println(fmt.Sprint(object_distance(30.0, 20.0)))
	fmt.Println(fmt.Sprint(image_distance(10.0, 40.0)))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
