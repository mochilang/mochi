//go:build ignore

// Generated by Mochi v0.10.69 on 2025-08-19 16:49:54 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	math "math"
	"os"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

var G float64

func potential_energy(mass float64, height float64) float64 {
	if mass < 0.0 {
		panic("The mass of a body cannot be negative")
	}
	if height < 0.0 {
		panic("The height above the ground cannot be negative")
	}
	return ((mass * G) * height)
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		G = 9.80665
		fmt.Println(func() string {
			f := float64(potential_energy(10.0, 10.0))
			if f == 0 && math.Signbit(f) {
				return "-0"
			}
			if math.Abs(f-float64(int(f))) < 1e-9 {
				return fmt.Sprintf("%.1f", f)
			}
			return fmt.Sprint(f)
		}())
		fmt.Println(func() string {
			f := float64(potential_energy(10.0, 5.0))
			if f == 0 && math.Signbit(f) {
				return "-0"
			}
			if math.Abs(f-float64(int(f))) < 1e-9 {
				return fmt.Sprintf("%.1f", f)
			}
			return fmt.Sprint(f)
		}())
		fmt.Println(func() string {
			f := float64(potential_energy(2.0, 8.0))
			if f == 0 && math.Signbit(f) {
				return "-0"
			}
			if math.Abs(f-float64(int(f))) < 1e-9 {
				return fmt.Sprintf("%.1f", f)
			}
			return fmt.Sprint(f)
		}())
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
