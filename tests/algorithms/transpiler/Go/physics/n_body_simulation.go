//go:build ignore

// Generated by Mochi v0.10.68 on 2025-08-17 20:41:49 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		return
	}
	s[idx] = v
}

type Body struct {
	PositionX float64 `json:"position_x"`
	PositionY float64 `json:"position_y"`
	VelocityX float64 `json:"velocity_x"`
	VelocityY float64 `json:"velocity_y"`
	Mass      float64 `json:"mass"`
}

func make_body(px float64, py float64, vx float64, vy float64, mass float64) Body {
	return Body{
		PositionX: px,
		PositionY: py,
		VelocityX: vx,
		VelocityY: vy,
		Mass:      mass,
	}
}

func update_velocity(body Body, force_x float64, force_y float64, delta_time float64) Body {
	body.VelocityX = (body.VelocityX + (force_x * delta_time))
	body.VelocityY = (body.VelocityY + (force_y * delta_time))
	return body
}

func update_position(body Body, delta_time float64) Body {
	body.PositionX = (body.PositionX + (body.VelocityX * delta_time))
	body.PositionY = (body.PositionY + (body.VelocityY * delta_time))
	return body
}

type BodySystem struct {
	Bodies              []Body  `json:"bodies"`
	GravitationConstant float64 `json:"gravitation_constant"`
	TimeFactor          float64 `json:"time_factor"`
	SofteningFactor     float64 `json:"softening_factor"`
}

func make_body_system(bodies []Body, g float64, tf float64, sf float64) BodySystem {
	return BodySystem{
		Bodies:              bodies,
		GravitationConstant: g,
		TimeFactor:          tf,
		SofteningFactor:     sf,
	}
}

func sqrtApprox(x float64) float64 {
	var guess float64 = (float64(x) / float64(2.0))
	_ = guess
	var i int = 0
	_ = i
	for i < 20 {
		guess = (float64((guess + (float64(x) / float64(guess)))) / float64(2.0))
		i = (i + 1)
	}
	return guess
}

func update_system(system BodySystem, delta_time float64) BodySystem {
	var bodies []Body = system.Bodies
	_ = bodies
	var i int = 0
	_ = i
	for i < len(bodies) {
		var body1 Body = _index(bodies, i)
		_ = body1
		var force_x float64 = 0.0
		_ = force_x
		var force_y float64 = 0.0
		_ = force_y
		var j int = 0
		_ = j
		for j < len(bodies) {
			if i != j {
				var body2 Body = _index(bodies, j)
				_ = body2
				var dif_x float64 = (body2.PositionX - body1.PositionX)
				_ = dif_x
				var dif_y float64 = (body2.PositionY - body1.PositionY)
				_ = dif_y
				var distance_sq float64 = (((dif_x * dif_x) + (dif_y * dif_y)) + system.SofteningFactor)
				_ = distance_sq
				var distance float64 = sqrtApprox(distance_sq)
				_ = distance
				var denom float64 = ((distance * distance) * distance)
				_ = denom
				force_x = (force_x + (float64(((system.GravitationConstant * body2.Mass) * dif_x)) / float64(denom)))
				force_y = (force_y + (float64(((system.GravitationConstant * body2.Mass) * dif_y)) / float64(denom)))
			}
			j = (j + 1)
		}
		body1 = update_velocity(body1, force_x, force_y, (delta_time * system.TimeFactor))
		_setIndex(bodies, i, body1)
		i = (i + 1)
	}
	i = 0
	for i < len(bodies) {
		var body Body = _index(bodies, i)
		_ = body
		body = update_position(body, (delta_time * system.TimeFactor))
		_setIndex(bodies, i, body)
		i = (i + 1)
	}
	system.Bodies = bodies
	return system
}

func mochiMain() {
	var b1 Body = make_body(0.0, 0.0, 0.0, 0.0, 1.0)
	_ = b1
	var b2 Body = make_body(10.0, 0.0, 0.0, 0.0, 1.0)
	_ = b2
	var sys1 BodySystem = make_body_system(func(v any) []Body {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]Body); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []Body{}
			}
			out := make([]Body, len(arr))
			for i, x := range arr {
				out[i] = x.(Body)
			}
			return out
		}
		return v.([]Body)
	}([]Body{b1, b2}), 1.0, 1.0, 0.0)
	_ = sys1
	sys1 = update_system(sys1, 1.0)
	var b1_after Body = _index(sys1.Bodies, 0)
	_ = b1_after
	var pos1x float64 = b1_after.PositionX
	_ = pos1x
	_ = pos1x
	var pos1y float64 = b1_after.PositionY
	_ = pos1y
	_ = pos1y
	func() {
		b, _ := json.MarshalIndent(map[string]float64{"x": pos1x, "y": pos1y}, "", "  ")
		fmt.Println(string(b))
	}()
	var vel1x float64 = b1_after.VelocityX
	_ = vel1x
	_ = vel1x
	var vel1y float64 = b1_after.VelocityY
	_ = vel1y
	_ = vel1y
	func() {
		b, _ := json.MarshalIndent(map[string]float64{"vx": vel1x, "vy": vel1y}, "", "  ")
		fmt.Println(string(b))
	}()
	var b3 Body = make_body((0 - 10.0), 0.0, 0.0, 0.0, 1.0)
	_ = b3
	var b4 Body = make_body(10.0, 0.0, 0.0, 0.0, 4.0)
	_ = b4
	var sys2 BodySystem = make_body_system(func(v any) []Body {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]Body); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []Body{}
			}
			out := make([]Body, len(arr))
			for i, x := range arr {
				out[i] = x.(Body)
			}
			return out
		}
		return v.([]Body)
	}([]Body{b3, b4}), 1.0, 10.0, 0.0)
	_ = sys2
	sys2 = update_system(sys2, 1.0)
	var b2_after Body = _index(sys2.Bodies, 0)
	_ = b2_after
	var pos2x float64 = b2_after.PositionX
	_ = pos2x
	_ = pos2x
	var pos2y float64 = b2_after.PositionY
	_ = pos2y
	_ = pos2y
	func() {
		b, _ := json.MarshalIndent(map[string]float64{"x": pos2x, "y": pos2y}, "", "  ")
		fmt.Println(string(b))
	}()
	var vel2x float64 = b2_after.VelocityX
	_ = vel2x
	_ = vel2x
	var vel2y float64 = b2_after.VelocityY
	_ = vel2y
	_ = vel2y
	func() {
		b, _ := json.MarshalIndent(map[string]float64{"vx": vel2x, "vy": vel2y}, "", "  ")
		fmt.Println(string(b))
	}()
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
