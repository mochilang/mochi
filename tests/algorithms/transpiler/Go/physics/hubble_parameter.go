//go:build ignore

// Generated by Mochi v0.10.69 on 2025-08-19 16:49:33 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	math "math"
	"os"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func pow(base float64, exp int) float64 {
	var result float64 = 1.0
	_ = result
	var i int = 0
	_ = i
	for i < exp {
		result = (result * base)
		i = (i + 1)
	}
	return result
}

func sqrt_approx(x float64) float64 {
	if x == 0.0 {
		return 0.0
	}
	var guess float64 = (float64(x) / float64(2.0))
	_ = guess
	var i int = 0
	_ = i
	for i < 20 {
		guess = (float64((guess + (float64(x) / float64(guess)))) / float64(2.0))
		i = (i + 1)
	}
	return guess
}

func hubble_parameter(hubble_constant float64, radiation_density float64, matter_density float64, dark_energy float64, redshift float64) float64 {
	var parameters []float64 = []float64{redshift, radiation_density, matter_density, dark_energy}
	_ = parameters
	var i int = 0
	_ = i
	for i < len(parameters) {
		if _index(parameters, i) < 0.0 {
			panic("All input parameters must be positive")
		}
		i = (i + 1)
	}
	i = 1
	for i < 4 {
		if _index(parameters, i) > 1.0 {
			panic("Relative densities cannot be greater than one")
		}
		i = (i + 1)
	}
	var curvature float64 = (1.0 - ((matter_density + radiation_density) + dark_energy))
	_ = curvature
	var zp1 float64 = (redshift + 1.0)
	_ = zp1
	var e2 float64 = ((((radiation_density * pow(zp1, 4)) + (matter_density * pow(zp1, 3))) + (curvature * pow(zp1, 2))) + dark_energy)
	_ = e2
	_ = e2
	return (hubble_constant * sqrt_approx(e2))
}

func test_hubble_parameter() {
	var h float64 = hubble_parameter(68.3, 0.0001, 0.3, 0.7, 0.0)
	_ = h
	if (h < 68.2999) || (h > 68.3001) {
		panic("hubble_parameter test failed")
	}
}

func mochiMain() {
	test_hubble_parameter()
	fmt.Println(func() string {
		f := float64(hubble_parameter(68.3, 0.0001, 0.3, 0.7, 0.0))
		if f == 0 && math.Signbit(f) {
			return "-0"
		}
		if math.Abs(f-float64(int(f))) < 1e-9 {
			return fmt.Sprintf("%.1f", f)
		}
		return fmt.Sprint(f)
	}())
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
