//go:build ignore

// Generated by Mochi v0.10.68 on 2025-08-17 20:41:46 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

var C float64

func energy_from_mass(mass float64) float64 {
	if mass < 0.0 {
		panic("Mass can't be negative.")
	}
	return ((mass * C) * C)
}

func mass_from_energy(energy float64) float64 {
	if energy < 0.0 {
		panic("Energy can't be negative.")
	}
	return (float64(energy) / float64((C * C)))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		C = 299792458.0
		fmt.Println(fmt.Sprint(energy_from_mass(124.56)))
		fmt.Println(fmt.Sprint(energy_from_mass(320.0)))
		fmt.Println(fmt.Sprint(energy_from_mass(0.0)))
		fmt.Println(fmt.Sprint(mass_from_energy(124.56)))
		fmt.Println(fmt.Sprint(mass_from_energy(320.0)))
		fmt.Println(fmt.Sprint(mass_from_energy(0.0)))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
