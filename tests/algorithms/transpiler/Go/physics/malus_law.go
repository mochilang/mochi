//go:build ignore

// Generated by Mochi v0.10.68 on 2025-08-17 20:41:44 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	math "math"
	"os"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

var PI float64

var TWO_PI float64

func _mod(x float64, m float64) float64 {
	return (x - (math.Floor((float64(x) / float64(m))) * m))
}

func cos(x float64) float64 {
	var y float64 = (_mod((x+PI), TWO_PI) - PI)
	_ = y
	var y2 float64 = (y * y)
	_ = y2
	var y4 float64 = (y2 * y2)
	_ = y4
	var y6 float64 = (y4 * y2)
	_ = y6
	_ = y6
	return (((1.0 - (float64(y2) / float64(2.0))) + (float64(y4) / float64(24.0))) - (float64(y6) / float64(720.0)))
}

func radians(deg float64) float64 {
	return (float64((deg * PI)) / float64(180.0))
}

func abs_val(x float64) float64 {
	if x < 0.0 {
		return (0 - x)
	}
	return x
}

func malus_law(initial_intensity float64, angle float64) float64 {
	if initial_intensity < 0.0 {
		panic("The value of intensity cannot be negative")
	}
	if (angle < 0.0) || (angle > 360.0) {
		panic("In Malus Law, the angle is in the range 0-360 degrees")
	}
	var theta float64 = radians(angle)
	_ = theta
	var c float64 = cos(theta)
	_ = c
	_ = c
	return (initial_intensity * (c * c))
}

func mochiMain() {
	fmt.Println(fmt.Sprint(malus_law(100.0, 60.0)))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		PI = 3.141592653589793
		TWO_PI = 6.283185307179586
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
