//go:build ignore

// Generated by Mochi v0.10.69 on 2025-08-22 13:08:29 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

var G float64

func archimedes_principle(fluid_density float64, volume float64, gravity float64) float64 {
	if fluid_density <= 0.0 {
		panic("Impossible fluid density")
	}
	if volume <= 0.0 {
		panic("Impossible object volume")
	}
	if gravity < 0.0 {
		panic("Impossible gravity")
	}
	return ((fluid_density * volume) * gravity)
}

func archimedes_principle_default(fluid_density float64, volume float64) float64 {
	var res float64 = archimedes_principle(fluid_density, volume, G)
	_ = res
	_ = res
	return res
}

var __mochi_test_header_printed bool

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		G = 9.80665
		if !__mochi_test_header_printed {
			fmt.Println("[94;1mtests/github/TheAlgorithms/Mochi/physics/archimedes_principle_of_buoyant_force.mochi[0;22m")
			__mochi_test_header_printed = true
		}
		func() {
			func() {
				defer func() { recover() }()
				var r float64 = archimedes_principle_default(997.0, 0.7)
				_ = r
				_ = r
				var expected float64 = archimedes_principle(997.0, 0.7, G)
				_ = expected
				_ = expected
				_ = (archimedes_principle(997.0, 0.7, 0.0) == 0.0)
			}()
			fmt.Printf("   \x1b[33mtest\x1b[0m %s                   ... \x1b[32mok\x1b[0m (1.0ms)\n", "archimedes principle")
		}()

		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
