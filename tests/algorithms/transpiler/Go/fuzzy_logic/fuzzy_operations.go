//go:build ignore

// Generated by Mochi v0.10.65 on 2025-08-14 10:05:06 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

type FuzzySet struct {
	Name          string  `json:"name"`
	LeftBoundary  float64 `json:"left_boundary"`
	Peak          float64 `json:"peak"`
	RightBoundary float64 `json:"right_boundary"`
}

func stringify(fs FuzzySet) string {
	return (((((((fs.Name + ": [") + fmt.Sprint(fs.LeftBoundary)) + ", ") + fmt.Sprint(fs.Peak)) + ", ") + fmt.Sprint(fs.RightBoundary)) + "]")
}

func max2(a float64, b float64) float64 {
	if a > b {
		return a
	}
	return b
}

func min2(a float64, b float64) float64 {
	if a < b {
		return a
	}
	return b
}

func complement(fs FuzzySet) FuzzySet {
	return FuzzySet{
		Name:          ("Â¬" + fs.Name),
		LeftBoundary:  (1.0 - fs.RightBoundary),
		Peak:          (1.0 - fs.LeftBoundary),
		RightBoundary: (1.0 - fs.Peak),
	}
}

func intersection(a FuzzySet, b FuzzySet) FuzzySet {
	return FuzzySet{
		Name:          ((a.Name + " âˆ© ") + b.Name),
		LeftBoundary:  max2(a.LeftBoundary, b.LeftBoundary),
		Peak:          min2(a.RightBoundary, b.RightBoundary),
		RightBoundary: (float64((a.Peak + b.Peak)) / float64(2.0)),
	}
}

func union(a FuzzySet, b FuzzySet) FuzzySet {
	return FuzzySet{
		Name:          ((a.Name + " U ") + b.Name),
		LeftBoundary:  min2(a.LeftBoundary, b.LeftBoundary),
		Peak:          max2(a.RightBoundary, b.RightBoundary),
		RightBoundary: (float64((a.Peak + b.Peak)) / float64(2.0)),
	}
}

func membership(fs FuzzySet, x float64) float64 {
	if (x <= fs.LeftBoundary) || (x >= fs.RightBoundary) {
		return 0.0
	}
	if (fs.LeftBoundary < x) && (x <= fs.Peak) {
		return (float64((x - fs.LeftBoundary)) / float64((fs.Peak - fs.LeftBoundary)))
	}
	if (fs.Peak < x) && (x < fs.RightBoundary) {
		return (float64((fs.RightBoundary - x)) / float64((fs.RightBoundary - fs.Peak)))
	}
	return 0.0
}

var sheru FuzzySet

var siya FuzzySet

var sheru_comp FuzzySet

var inter FuzzySet

var uni FuzzySet

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		sheru = FuzzySet{
			Name:          "Sheru",
			LeftBoundary:  0.4,
			Peak:          1.0,
			RightBoundary: 0.6,
		}
		siya = FuzzySet{
			Name:          "Siya",
			LeftBoundary:  0.5,
			Peak:          1.0,
			RightBoundary: 0.7,
		}
		fmt.Println(stringify(sheru))
		fmt.Println(stringify(siya))
		sheru_comp = complement(sheru)
		fmt.Println(stringify(sheru_comp))
		inter = intersection(siya, sheru)
		fmt.Println(stringify(inter))
		fmt.Println(("Sheru membership 0.5: " + fmt.Sprint(membership(sheru, 0.5))))
		fmt.Println(("Sheru membership 0.6: " + fmt.Sprint(membership(sheru, 0.6))))
		uni = union(siya, sheru)
		fmt.Println(stringify(uni))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
