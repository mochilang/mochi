//go:build ignore

// Generated by Mochi v0.10.59 on 2025-08-06 21:46:28 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func flip_horizontal_image(img [][]int) [][]int {
	var flipped [][]int = [][]int{}
	_ = flipped
	var i int = 0
	_ = i
	for i < len(img) {
		var row []int = img[i]
		_ = row
		var j int = (len(row) - 1)
		_ = j
		var new_row []int = []int{}
		_ = new_row
		for j >= 0 {
			new_row = append(new_row, row[j])
			j = (j - 1)
		}
		flipped = append(flipped, new_row)
		i = (i + 1)
	}
	return flipped
}

func flip_vertical_image(img [][]int) [][]int {
	var flipped [][]int = [][]int{}
	_ = flipped
	var i int = (len(img) - 1)
	_ = i
	for i >= 0 {
		flipped = append(flipped, img[i])
		i = (i - 1)
	}
	return flipped
}

func flip_horizontal_boxes(boxes [][]float64) [][]float64 {
	var result [][]float64 = [][]float64{}
	_ = result
	var i int = 0
	_ = i
	for i < len(boxes) {
		var b []float64 = boxes[i]
		_ = b
		var x_new float64 = (1.0 - b[1])
		_ = x_new
		result = append(result, []float64{b[0], x_new, b[2], b[3], b[4]})
		i = (i + 1)
	}
	return result
}

func flip_vertical_boxes(boxes [][]float64) [][]float64 {
	var result [][]float64 = [][]float64{}
	_ = result
	var i int = 0
	_ = i
	for i < len(boxes) {
		var b []float64 = boxes[i]
		_ = b
		var y_new float64 = (1.0 - b[2])
		_ = y_new
		result = append(result, []float64{b[0], b[1], y_new, b[3], b[4]})
		i = (i + 1)
	}
	return result
}

func print_image(img [][]int) {
	var i int = 0
	_ = i
	for i < len(img) {
		var row []int = img[i]
		_ = row
		var j int = 0
		_ = j
		var line string = ""
		_ = line
		for j < len(row) {
			line = ((line + fmt.Sprint(row[j])) + " ")
			j = (j + 1)
		}
		fmt.Println(line)
		i = (i + 1)
	}
}

var image [][]int

var boxes [][]float64

var h_img [][]int

var h_boxes [][]float64

var v_img [][]int

var v_boxes [][]float64

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		image = [][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}
		boxes = [][]float64{[]float64{0.0, 0.25, 0.25, 0.5, 0.5}, []float64{1.0, 0.75, 0.75, 0.5, 0.5}}
		fmt.Println("Original image:")
		print_image(func(v any) [][]int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]int{}
				}
				out := make([][]int, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []int {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]int); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []int{}
							}
							out := make([]int, len(arr))
							for i, x := range arr {
								out[i] = x.(int)
							}
							return out
						}
						return v.([]int)
					}(x)
				}
				return out
			}
			return v.([][]int)
		}(image))
		fmt.Println(fmt.Sprint(boxes))
		fmt.Println("Horizontal flip:")
		h_img = flip_horizontal_image(func(v any) [][]int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]int{}
				}
				out := make([][]int, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []int {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]int); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []int{}
							}
							out := make([]int, len(arr))
							for i, x := range arr {
								out[i] = x.(int)
							}
							return out
						}
						return v.([]int)
					}(x)
				}
				return out
			}
			return v.([][]int)
		}(image))
		h_boxes = flip_horizontal_boxes(func(v any) [][]float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]float64{}
				}
				out := make([][]float64, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []float64 {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]float64); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []float64{}
							}
							out := make([]float64, len(arr))
							for i, x := range arr {
								out[i] = x.(float64)
							}
							return out
						}
						return v.([]float64)
					}(x)
				}
				return out
			}
			return v.([][]float64)
		}(boxes))
		print_image(func(v any) [][]int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]int{}
				}
				out := make([][]int, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []int {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]int); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []int{}
							}
							out := make([]int, len(arr))
							for i, x := range arr {
								out[i] = x.(int)
							}
							return out
						}
						return v.([]int)
					}(x)
				}
				return out
			}
			return v.([][]int)
		}(h_img))
		fmt.Println(fmt.Sprint(h_boxes))
		fmt.Println("Vertical flip:")
		v_img = flip_vertical_image(func(v any) [][]int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]int{}
				}
				out := make([][]int, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []int {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]int); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []int{}
							}
							out := make([]int, len(arr))
							for i, x := range arr {
								out[i] = x.(int)
							}
							return out
						}
						return v.([]int)
					}(x)
				}
				return out
			}
			return v.([][]int)
		}(image))
		v_boxes = flip_vertical_boxes(func(v any) [][]float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]float64{}
				}
				out := make([][]float64, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []float64 {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]float64); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []float64{}
							}
							out := make([]float64, len(arr))
							for i, x := range arr {
								out[i] = x.(float64)
							}
							return out
						}
						return v.([]float64)
					}(x)
				}
				return out
			}
			return v.([][]float64)
		}(boxes))
		print_image(func(v any) [][]int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]int{}
				}
				out := make([][]int, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []int {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]int); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []int{}
							}
							out := make([]int, len(arr))
							for i, x := range arr {
								out[i] = x.(int)
							}
							return out
						}
						return v.([]int)
					}(x)
				}
				return out
			}
			return v.([][]int)
		}(v_img))
		fmt.Println(fmt.Sprint(v_boxes))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
