//go:build ignore

// Generated by Mochi v0.10.59 on 2025-08-06 21:46:36 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"strings"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func segment_image(image [][]int, thresholds []int) [][]int {
	var segmented [][]int = [][]int{}
	_ = segmented
	var i int = 0
	_ = i
	for i < len(image) {
		var row []int = []int{}
		_ = row
		var j int = 0
		_ = j
		for j < len(image[i]) {
			var pixel int = image[i][j]
			_ = pixel
			var label int = 0
			_ = label
			var k int = 0
			_ = k
			for k < len(thresholds) {
				if pixel > thresholds[k] {
					label = (k + 1)
				}
				k = (k + 1)
			}
			row = append(row, label)
			j = (j + 1)
		}
		segmented = append(segmented, row)
		i = (i + 1)
	}
	return segmented
}

func mochiMain() {
	var image [][]int = [][]int{[]int{80, 120, 180}, []int{40, 90, 150}, []int{20, 60, 100}}
	_ = image
	var thresholds []int = []int{50, 100, 150}
	_ = thresholds
	var segmented [][]int = segment_image(func(v any) [][]int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]int{}
			}
			out := make([][]int, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []int {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]int); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []int{}
						}
						out := make([]int, len(arr))
						for i, x := range arr {
							out[i] = x.(int)
						}
						return out
					}
					return v.([]int)
				}(x)
			}
			return out
		}
		return v.([][]int)
	}(image), func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(thresholds))
	_ = segmented
	_ = segmented
	fmt.Println(func() string {
		b, _ := json.Marshal(segmented)
		s := string(b)
		s = strings.ReplaceAll(s, ":", ": ")
		s = strings.ReplaceAll(s, ",", ", ")
		s = strings.ReplaceAll(s, "}, {", "},{")
		return s
	}())
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
