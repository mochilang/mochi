//go:build ignore

// Generated by Mochi v0.10.59 on 2025-08-06 21:46:26 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	math "math"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func conv2d(image [][]float64, kernel [][]float64) [][]float64 {
	var rows int = len(image)
	_ = rows
	var cols int = len(image[0])
	_ = cols
	var k int = len(kernel)
	_ = k
	var output [][]float64 = [][]float64{}
	_ = output
	var i int = 0
	_ = i
	for i <= (rows - k) {
		var row []float64 = []float64{}
		_ = row
		var j int = 0
		_ = j
		for j <= (cols - k) {
			var sum float64 = 0.0
			_ = sum
			var ki int = 0
			_ = ki
			for ki < k {
				var kj int = 0
				_ = kj
				for kj < k {
					sum = (sum + (image[(i + ki)][(j+kj)] * kernel[ki][kj]))
					kj = (kj + 1)
				}
				ki = (ki + 1)
			}
			row = append(row, sum)
			j = (j + 1)
		}
		output = append(output, row)
		i = (i + 1)
	}
	return output
}

func relu_matrix(m [][]float64) [][]float64 {
	var out [][]float64 = [][]float64{}
	_ = out
	for _, row := range m {
		var new_row []float64 = []float64{}
		_ = new_row
		for _, v := range row {
			if v > 0.0 {
				new_row = append(new_row, v)
			} else {
				new_row = append(new_row, 0.0)
			}
		}
		out = append(out, new_row)
	}
	return out
}

func max_pool2x2(m [][]float64) [][]float64 {
	var rows int = len(m)
	_ = rows
	var cols int = len(m[0])
	_ = cols
	var out [][]float64 = [][]float64{}
	_ = out
	var i int = 0
	_ = i
	for i < rows {
		var new_row []float64 = []float64{}
		_ = new_row
		var j int = 0
		_ = j
		for j < cols {
			var max_val float64 = m[i][j]
			_ = max_val
			if m[i][(j+1)] > max_val {
				max_val = m[i][(j + 1)]
			}
			if m[(i + 1)][j] > max_val {
				max_val = m[(i + 1)][j]
			}
			if m[(i + 1)][(j+1)] > max_val {
				max_val = m[(i + 1)][(j + 1)]
			}
			new_row = append(new_row, max_val)
			j = (j + 2)
		}
		out = append(out, new_row)
		i = (i + 2)
	}
	return out
}

func flatten(m [][]float64) []float64 {
	var res []float64 = []float64{}
	_ = res
	for _, row := range m {
		for _, v := range row {
			res = append(res, v)
		}
	}
	return res
}

func dense(inputs []float64, weights []float64, bias float64) float64 {
	var s float64 = bias
	_ = s
	var i int = 0
	_ = i
	for i < len(inputs) {
		s = (s + (inputs[i] * weights[i]))
		i = (i + 1)
	}
	return s
}

func exp_approx(x float64) float64 {
	var sum float64 = 1.0
	_ = sum
	var term float64 = 1.0
	_ = term
	var i int = 1
	_ = i
	for i <= 10 {
		term = ((term * x) / float64(i))
		sum = (sum + term)
		i = (i + 1)
	}
	return sum
}

func sigmoid(x float64) float64 {
	return (1.0 / (1.0 + exp_approx((0 - x))))
}

var image [][]float64

var kernel [][]float64

var conv [][]float64

var activated [][]float64

var pooled [][]float64

var flat []float64

var weights []float64

var bias float64

var output float64

var probability float64

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		image = [][]float64{[]float64{0.0, 1.0, 1.0, 0.0, 0.0, 0.0}, []float64{0.0, 1.0, 1.0, 0.0, 0.0, 0.0}, []float64{0.0, 0.0, 1.0, 1.0, 0.0, 0.0}, []float64{0.0, 0.0, 1.0, 1.0, 0.0, 0.0}, []float64{0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, []float64{0.0, 0.0, 0.0, 0.0, 0.0, 0.0}}
		kernel = [][]float64{[]float64{1.0, 0.0, (0 - 1.0)}, []float64{1.0, 0.0, (0 - 1.0)}, []float64{1.0, 0.0, (0 - 1.0)}}
		conv = conv2d(func(v any) [][]float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]float64{}
				}
				out := make([][]float64, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []float64 {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]float64); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []float64{}
							}
							out := make([]float64, len(arr))
							for i, x := range arr {
								out[i] = x.(float64)
							}
							return out
						}
						return v.([]float64)
					}(x)
				}
				return out
			}
			return v.([][]float64)
		}(image), func(v any) [][]float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]float64{}
				}
				out := make([][]float64, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []float64 {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]float64); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []float64{}
							}
							out := make([]float64, len(arr))
							for i, x := range arr {
								out[i] = x.(float64)
							}
							return out
						}
						return v.([]float64)
					}(x)
				}
				return out
			}
			return v.([][]float64)
		}(kernel))
		activated = relu_matrix(func(v any) [][]float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]float64{}
				}
				out := make([][]float64, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []float64 {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]float64); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []float64{}
							}
							out := make([]float64, len(arr))
							for i, x := range arr {
								out[i] = x.(float64)
							}
							return out
						}
						return v.([]float64)
					}(x)
				}
				return out
			}
			return v.([][]float64)
		}(conv))
		pooled = max_pool2x2(func(v any) [][]float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]float64{}
				}
				out := make([][]float64, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []float64 {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]float64); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []float64{}
							}
							out := make([]float64, len(arr))
							for i, x := range arr {
								out[i] = x.(float64)
							}
							return out
						}
						return v.([]float64)
					}(x)
				}
				return out
			}
			return v.([][]float64)
		}(activated))
		flat = flatten(func(v any) [][]float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]float64{}
				}
				out := make([][]float64, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []float64 {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]float64); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []float64{}
							}
							out := make([]float64, len(arr))
							for i, x := range arr {
								out[i] = x.(float64)
							}
							return out
						}
						return v.([]float64)
					}(x)
				}
				return out
			}
			return v.([][]float64)
		}(pooled))
		weights = []float64{0.5, (0 - 0.4), 0.3, 0.1}
		bias = 0.0
		output = dense(func(v any) []float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []float64{}
				}
				out := make([]float64, len(arr))
				for i, x := range arr {
					out[i] = x.(float64)
				}
				return out
			}
			return v.([]float64)
		}(flat), func(v any) []float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []float64{}
				}
				out := make([]float64, len(arr))
				for i, x := range arr {
					out[i] = x.(float64)
				}
				return out
			}
			return v.([]float64)
		}(weights), bias)
		probability = sigmoid(output)
		if probability >= 0.5 {
			fmt.Println("Abnormality detected")
		} else {
			fmt.Println("Normal")
		}
		fmt.Println("Probability:")
		fmt.Println(func() string {
			f := float64(probability)
			if f == 0 && math.Signbit(f) {
				return "-0"
			}
			if f == float64(int(f)) {
				return fmt.Sprintf("%.1f", f)
			}
			return fmt.Sprint(f)
		}())
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
