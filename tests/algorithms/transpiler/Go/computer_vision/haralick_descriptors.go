//go:build ignore

// Generated by Mochi v0.10.59 on 2025-08-06 21:46:30 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _mod(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func abs_int(n int) int {
	if n < 0 {
		return (0 - n)
	}
	return n
}

func sqrt(x float64) float64 {
	if x <= 0.0 {
		return 0.0
	}
	var guess float64 = x
	_ = guess
	var i int = 0
	_ = i
	for i < 10 {
		guess = ((guess + (x / guess)) / 2.0)
		i = (i + 1)
	}
	return guess
}

func ln(x float64) float64 {
	if x <= 0.0 {
		return 0.0
	}
	var e float64 = 2.718281828
	_ = e
	var n int = 0
	_ = n
	var y float64 = x
	_ = y
	for y >= e {
		y = (y / e)
		n = (n + 1)
	}
	for y <= (1.0 / e) {
		y = (y * e)
		n = (n - 1)
	}
	y = (y - 1.0)
	var term float64 = y
	_ = term
	var result float64 = 0.0
	_ = result
	var k int = 1
	_ = k
	for k <= 20 {
		if _mod(k, 2) == 1 {
			result = (result + (term / (1.0 * float64(k))))
		} else {
			result = (result - (term / (1.0 * float64(k))))
		}
		term = (term * y)
		k = (k + 1)
	}
	return (result + (1.0 * float64(n)))
}

func matrix_concurrency(image [][]int, coord []int) [][]float64 {
	var offset_x int = coord[0]
	_ = offset_x
	var offset_y int = coord[1]
	_ = offset_y
	var max_val int = 0
	_ = max_val
	for r := 0; r < len(image); r++ {
		for c := 0; c < len(image[r]); c++ {
			if image[r][c] > max_val {
				max_val = image[r][c]
			}
		}
	}
	var size int = (max_val + 1)
	_ = size
	var matrix [][]float64 = [][]float64{}
	_ = matrix
	for i := 0; i < size; i++ {
		var row []float64 = []float64{}
		_ = row
		for j := 0; j < size; j++ {
			row = append(row, 0.0)
		}
		matrix = append(matrix, row)
	}
	for x := 1; x < (len(image) - 1); x++ {
		for y := 1; y < (len(image[x]) - 1); y++ {
			var base int = image[x][y]
			_ = base
			var offset int = image[(x + offset_x)][(y + offset_y)]
			_ = offset
			matrix[base][offset] = (matrix[base][offset] + 1.0)
		}
	}
	var total float64 = 0.0
	_ = total
	for i := 0; i < size; i++ {
		for j := 0; j < size; j++ {
			total = (total + matrix[i][j])
		}
	}
	if total == 0.0 {
		return matrix
	}
	for i := 0; i < size; i++ {
		for j := 0; j < size; j++ {
			matrix[i][j] = (matrix[i][j] / total)
		}
	}
	return matrix
}

func haralick_descriptors(matrix [][]float64) []float64 {
	var rows int = len(matrix)
	_ = rows
	var cols int = len(matrix[0])
	_ = cols
	var maximum_prob float64 = 0.0
	_ = maximum_prob
	var correlation float64 = 0.0
	_ = correlation
	var energy float64 = 0.0
	_ = energy
	var contrast float64 = 0.0
	_ = contrast
	var dissimilarity float64 = 0.0
	_ = dissimilarity
	var inverse_difference float64 = 0.0
	_ = inverse_difference
	var homogeneity float64 = 0.0
	_ = homogeneity
	var entropy float64 = 0.0
	_ = entropy
	var i int = 0
	_ = i
	for i < rows {
		var j int = 0
		_ = j
		for j < cols {
			var val float64 = matrix[i][j]
			_ = val
			if val > maximum_prob {
				maximum_prob = val
			}
			correlation = (correlation + (((1.0 * float64(i)) * j) * val))
			energy = (energy + (val * val))
			var diff int = (i - j)
			_ = diff
			var adiff int = abs_int(diff)
			_ = adiff
			contrast = (contrast + (val * ((1.0 * float64(diff)) * diff)))
			dissimilarity = (dissimilarity + (val * (1.0 * float64(adiff))))
			inverse_difference = (inverse_difference + (val / (1.0 + (1.0 * float64(adiff)))))
			homogeneity = (homogeneity + (val / (1.0 + ((1.0 * float64(diff)) * diff))))
			if val > 0.0 {
				entropy = (entropy - (val * ln(val)))
			}
			j = (j + 1)
		}
		i = (i + 1)
	}
	return []float64{maximum_prob, correlation, energy, contrast, dissimilarity, inverse_difference, homogeneity, entropy}
}

var image [][]int

var glcm [][]float64

var descriptors []float64

var idx int

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		image = [][]int{[]int{0, 1, 0}, []int{1, 0, 1}, []int{0, 1, 0}}
		glcm = matrix_concurrency(func(v any) [][]int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]int{}
				}
				out := make([][]int, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []int {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]int); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []int{}
							}
							out := make([]int, len(arr))
							for i, x := range arr {
								out[i] = x.(int)
							}
							return out
						}
						return v.([]int)
					}(x)
				}
				return out
			}
			return v.([][]int)
		}(image), func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}([]int{0, 1}))
		descriptors = haralick_descriptors(func(v any) [][]float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]float64{}
				}
				out := make([][]float64, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []float64 {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]float64); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []float64{}
							}
							out := make([]float64, len(arr))
							for i, x := range arr {
								out[i] = x.(float64)
							}
							return out
						}
						return v.([]float64)
					}(x)
				}
				return out
			}
			return v.([][]float64)
		}(glcm))
		idx = 0
		for idx < len(descriptors) {
			fmt.Println(fmt.Sprint(descriptors[idx]))
			idx = (idx + 1)
		}
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
