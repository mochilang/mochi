//go:build ignore

// Generated by Mochi v0.10.62 on 2025-08-09 16:25:00 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

type Point struct {
	X int `json:"x"`
	Y int `json:"y"`
}

func get_mid(p1 Point, p2 Point) Point {
	return Point{
		X: ((p1.X + p2.X) / 2),
		Y: ((p1.Y + p2.Y) / 2),
	}
}

func point_to_string(p Point) string {
	return (((("(" + fmt.Sprint(p.X)) + ",") + fmt.Sprint(p.Y)) + ")")
}

func triangle(v1 Point, v2 Point, v3 Point, depth int) {
	fmt.Println(((((point_to_string(v1) + " ") + point_to_string(v2)) + " ") + point_to_string(v3)))
	if depth == 0 {
		return
	}
	triangle(v1, get_mid(v1, v2), get_mid(v1, v3), (depth - 1))
	triangle(v2, get_mid(v1, v2), get_mid(v2, v3), (depth - 1))
	triangle(v3, get_mid(v3, v2), get_mid(v1, v3), (depth - 1))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		triangle(Point{
			X: (0 - 175),
			Y: (0 - 125),
		}, Point{
			X: 0,
			Y: 175,
		}, Point{
			X: 175,
			Y: (0 - 125),
		}, 2)
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
