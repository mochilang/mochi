//go:build ignore

// Generated by Mochi v0.10.64 on 2025-08-13 12:53:56 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

type Vec struct {
	X float64 `json:"x"`
	Y float64 `json:"y"`
}

var PI float64

var TWO_PI float64

func _mod(x float64, m float64) float64 {
	return (x - (float64(int((float64(x) / float64(m)))) * m))
}

func sin(x float64) float64 {
	var y float64 = (_mod((x+PI), TWO_PI) - PI)
	_ = y
	var y2 float64 = (y * y)
	_ = y2
	var y3 float64 = (y2 * y)
	_ = y3
	var y5 float64 = (y3 * y2)
	_ = y5
	var y7 float64 = (y5 * y2)
	_ = y7
	_ = y7
	return (((y - (float64(y3) / float64(6.0))) + (float64(y5) / float64(120.0))) - (float64(y7) / float64(5040.0)))
}

func cos(x float64) float64 {
	var y float64 = (_mod((x+PI), TWO_PI) - PI)
	_ = y
	var y2 float64 = (y * y)
	_ = y2
	var y4 float64 = (y2 * y2)
	_ = y4
	var y6 float64 = (y4 * y2)
	_ = y6
	_ = y6
	return (((1.0 - (float64(y2) / float64(2.0))) + (float64(y4) / float64(24.0))) - (float64(y6) / float64(720.0)))
}

func rotate(v Vec, angle_deg float64) Vec {
	var theta float64 = (float64((angle_deg * PI)) / float64(180.0))
	_ = theta
	var c float64 = cos(theta)
	_ = c
	_ = c
	var s float64 = sin(theta)
	_ = s
	_ = s
	return Vec{
		X: ((v.X * c) - (v.Y * s)),
		Y: ((v.X * s) + (v.Y * c)),
	}
}

func iteration_step(vectors []Vec) []Vec {
	var new_vectors []Vec = []Vec{}
	_ = new_vectors
	var i int = 0
	_ = i
	for i < (len(vectors) - 1) {
		var start Vec = _index(vectors, i)
		_ = start
		var end Vec = _index(vectors, (i + 1))
		_ = end
		new_vectors = append(new_vectors, start)
		var dx float64 = (end.X - start.X)
		_ = dx
		var dy float64 = (end.Y - start.Y)
		_ = dy
		var one_third Vec = Vec{
			X: (start.X + (float64(dx) / float64(3.0))),
			Y: (start.Y + (float64(dy) / float64(3.0))),
		}
		_ = one_third
		var mid Vec = rotate(Vec{
			X: (float64(dx) / float64(3.0)),
			Y: (float64(dy) / float64(3.0)),
		}, 60.0)
		_ = mid
		var peak Vec = Vec{
			X: (one_third.X + mid.X),
			Y: (one_third.Y + mid.Y),
		}
		_ = peak
		var two_third Vec = Vec{
			X: (start.X + (float64((dx * 2.0)) / float64(3.0))),
			Y: (start.Y + (float64((dy * 2.0)) / float64(3.0))),
		}
		_ = two_third
		new_vectors = append(new_vectors, one_third)
		new_vectors = append(new_vectors, peak)
		new_vectors = append(new_vectors, two_third)
		i = (i + 1)
	}
	new_vectors = append(new_vectors, _index(vectors, (len(vectors)-1)))
	return new_vectors
}

func iterate(initial []Vec, steps int) []Vec {
	var vectors []Vec = initial
	_ = vectors
	var i int = 0
	_ = i
	for i < steps {
		vectors = iteration_step(func(v any) []Vec {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]Vec); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []Vec{}
				}
				out := make([]Vec, len(arr))
				for i, x := range arr {
					out[i] = x.(Vec)
				}
				return out
			}
			return v.([]Vec)
		}(vectors))
		i = (i + 1)
	}
	return vectors
}

func vec_to_string(v Vec) string {
	return (((("(" + fmt.Sprint(v.X)) + ", ") + fmt.Sprint(v.Y)) + ")")
}

func vec_list_to_string(lst []Vec) string {
	var res string = "["
	_ = res
	var i int = 0
	_ = i
	for i < len(lst) {
		res = (res + vec_to_string(_index(lst, i)))
		if i < (len(lst) - 1) {
			res = (res + ", ")
		}
		i = (i + 1)
	}
	res = (res + "]")
	return res
}

var VECTOR_1 Vec

var VECTOR_2 Vec

var VECTOR_3 Vec

var INITIAL_VECTORS []Vec

var example []Vec

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		PI = 3.141592653589793
		TWO_PI = 6.283185307179586
		VECTOR_1 = Vec{
			X: 0.0,
			Y: 0.0,
		}
		VECTOR_2 = Vec{
			X: 0.5,
			Y: 0.8660254,
		}
		VECTOR_3 = Vec{
			X: 1.0,
			Y: 0.0,
		}
		INITIAL_VECTORS = []Vec{VECTOR_1, VECTOR_2, VECTOR_3, VECTOR_1}
		example = iterate(func(v any) []Vec {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]Vec); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []Vec{}
				}
				out := make([]Vec, len(arr))
				for i, x := range arr {
					out[i] = x.(Vec)
				}
				return out
			}
			return v.([]Vec)
		}([]Vec{VECTOR_1, VECTOR_3}), 1)
		fmt.Println(vec_list_to_string(func(v any) []Vec {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]Vec); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []Vec{}
				}
				out := make([]Vec, len(arr))
				for i, x := range arr {
					out[i] = x.(Vec)
				}
				return out
			}
			return v.([]Vec)
		}(example)))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
