//go:build ignore

// Generated by Mochi v0.10.61 on 2025-08-08 18:15:32 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

type CarrierResult struct {
	Name  string  `json:"name"`
	Value float64 `json:"value"`
}

func sqrtApprox(x float64) float64 {
	var guess float64 = (float64(x) / float64(2.0))
	_ = guess
	var i int = 0
	_ = i
	for i < 20 {
		guess = (float64((guess + (float64(x) / float64(guess)))) / float64(2.0))
		i = (i + 1)
	}
	return guess
}

func carrier_concentration(electron_conc float64, hole_conc float64, intrinsic_conc float64) CarrierResult {
	var zero_count int = 0
	_ = zero_count
	if electron_conc == 0.0 {
		zero_count = (zero_count + 1)
	}
	if hole_conc == 0.0 {
		zero_count = (zero_count + 1)
	}
	if intrinsic_conc == 0.0 {
		zero_count = (zero_count + 1)
	}
	if zero_count != 1 {
		panic("You cannot supply more or less than 2 values")
	}
	if electron_conc < 0.0 {
		panic("Electron concentration cannot be negative in a semiconductor")
	}
	if hole_conc < 0.0 {
		panic("Hole concentration cannot be negative in a semiconductor")
	}
	if intrinsic_conc < 0.0 {
		panic("Intrinsic concentration cannot be negative in a semiconductor")
	}
	if electron_conc == 0.0 {
		return CarrierResult{
			Name:  "electron_conc",
			Value: (float64((intrinsic_conc * intrinsic_conc)) / float64(hole_conc)),
		}
	}
	if hole_conc == 0.0 {
		return CarrierResult{
			Name:  "hole_conc",
			Value: (float64((intrinsic_conc * intrinsic_conc)) / float64(electron_conc)),
		}
	}
	if intrinsic_conc == 0.0 {
		return CarrierResult{
			Name:  "intrinsic_conc",
			Value: sqrtApprox((electron_conc * hole_conc)),
		}
	}
	return CarrierResult{
		Name:  "",
		Value: (0 - 1.0),
	}
}

var r1 CarrierResult

var r2 CarrierResult

var r3 CarrierResult

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		r1 = carrier_concentration(25.0, 100.0, 0.0)
		fmt.Println(((r1.Name + ", ") + fmt.Sprint(r1.Value)))
		r2 = carrier_concentration(0.0, 1600.0, 200.0)
		fmt.Println(((r2.Name + ", ") + fmt.Sprint(r2.Value)))
		r3 = carrier_concentration(1000.0, 0.0, 1200.0)
		fmt.Println(((r3.Name + ", ") + fmt.Sprint(r3.Value)))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
