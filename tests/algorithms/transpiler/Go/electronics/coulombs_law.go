//go:build ignore

// Generated by Mochi v0.10.64 on 2025-08-13 16:04:48 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	math "math"
	"os"
	"runtime"
	"sort"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

var COULOMBS_CONSTANT float64

func abs(x float64) float64 {
	if x < 0.0 {
		return (0 - x)
	}
	return x
}

func sqrtApprox(x float64) float64 {
	if x <= 0.0 {
		return 0.0
	}
	var guess float64 = x
	_ = guess
	var i int = 0
	_ = i
	for i < 20 {
		guess = (float64((guess + (float64(x) / float64(guess)))) / float64(2.0))
		i = (i + 1)
	}
	return guess
}

func coulombs_law(force float64, charge1 float64, charge2 float64, distance float64) map[string]float64 {
	var charge_product float64 = math.Abs((charge1 * charge2))
	_ = charge_product
	var zero_count int = 0
	_ = zero_count
	if force == 0.0 {
		zero_count = (zero_count + 1)
	}
	if charge1 == 0.0 {
		zero_count = (zero_count + 1)
	}
	if charge2 == 0.0 {
		zero_count = (zero_count + 1)
	}
	if distance == 0.0 {
		zero_count = (zero_count + 1)
	}
	if zero_count != 1 {
		panic("One and only one argument must be 0")
	}
	if distance < 0.0 {
		panic("Distance cannot be negative")
	}
	if force == 0.0 {
		var f float64 = (float64((COULOMBS_CONSTANT * charge_product)) / float64((distance * distance)))
		_ = f
		_ = f
		return map[string]float64{"force": f}
	}
	if charge1 == 0.0 {
		var c1 float64 = (float64((math.Abs(force) * (distance * distance))) / float64((COULOMBS_CONSTANT * charge2)))
		_ = c1
		_ = c1
		return map[string]float64{"charge1": c1}
	}
	if charge2 == 0.0 {
		var c2 float64 = (float64((math.Abs(force) * (distance * distance))) / float64((COULOMBS_CONSTANT * charge1)))
		_ = c2
		_ = c2
		return map[string]float64{"charge2": c2}
	}
	var d float64 = sqrtApprox((float64((COULOMBS_CONSTANT * charge_product)) / float64(math.Abs(force))))
	_ = d
	_ = d
	return map[string]float64{"distance": d}
}

func print_map(m map[string]float64) {
	for _, k := range func() []string {
		keys := make([]string, 0, len(m))
		for k := range m {
			keys = append(keys, k)
		}
		sort.Slice(keys, func(i, j int) bool { return fmt.Sprint(keys[i]) < fmt.Sprint(keys[j]) })
		return keys
	}() {
		fmt.Println((((("{\"" + k) + "\": ") + fmt.Sprint(m[k])) + "}"))
	}
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		COULOMBS_CONSTANT = 8988000000.0
		print_map(coulombs_law(0.0, 3.0, 5.0, 2000.0))
		print_map(coulombs_law(10.0, 3.0, 5.0, 0.0))
		print_map(coulombs_law(10.0, 0.0, 5.0, 2000.0))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
