//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-14 22:59:11 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func ohms_law(voltage float64, current float64, resistance float64) map[string]float64 {
	var zeros int = 0
	_ = zeros
	if voltage == 0.0 {
		zeros = (zeros + 1)
	}
	if current == 0.0 {
		zeros = (zeros + 1)
	}
	if resistance == 0.0 {
		zeros = (zeros + 1)
	}
	if zeros != 1 {
		fmt.Println("One and only one argument must be 0")
		return func(v any) map[string]float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.(map[string]float64); ok {
				return vv
			}
			return nil
		}(map[string]float64{})
	}
	if resistance < 0.0 {
		fmt.Println("Resistance cannot be negative")
		return func(v any) map[string]float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.(map[string]float64); ok {
				return vv
			}
			return nil
		}(map[string]float64{})
	}
	if voltage == 0.0 {
		return map[string]float64{"voltage": (current * resistance)}
	}
	if current == 0.0 {
		return map[string]float64{"current": (float64(voltage) / float64(resistance))}
	}
	return map[string]float64{"resistance": (float64(voltage) / float64(current))}
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		func() { b, _ := json.MarshalIndent(ohms_law(10.0, 0.0, 5.0), "", "  "); fmt.Println(string(b)) }()
		func() { b, _ := json.MarshalIndent(ohms_law((0-10.0), 1.0, 0.0), "", "  "); fmt.Println(string(b)) }()
		func() { b, _ := json.MarshalIndent(ohms_law(0.0, (0-1.5), 2.0), "", "  "); fmt.Println(string(b)) }()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
