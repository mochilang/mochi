//go:build ignore

// Generated by Mochi v0.10.65 on 2025-08-14 10:04:13 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func sqrt(x float64) float64 {
	if x <= 0.0 {
		return 0.0
	}
	var guess float64 = x
	_ = guess
	var i int = 0
	_ = i
	for i < 10 {
		guess = (float64((guess + (float64(x) / float64(guess)))) / float64(2.0))
		i = (i + 1)
	}
	return guess
}

func real_power(apparent_power float64, power_factor float64) float64 {
	if (power_factor < (0.0 - 1.0)) || (power_factor > 1.0) {
		panic("power_factor must be a valid float value between -1 and 1.")
	}
	return (apparent_power * power_factor)
}

func reactive_power(apparent_power float64, power_factor float64) float64 {
	if (power_factor < (0.0 - 1.0)) || (power_factor > 1.0) {
		panic("power_factor must be a valid float value between -1 and 1.")
	}
	return (apparent_power * sqrt((1.0 - (power_factor * power_factor))))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(fmt.Sprint(real_power(100.0, 0.9)))
		fmt.Println(fmt.Sprint(real_power(0.0, 0.8)))
		fmt.Println(fmt.Sprint(real_power(100.0, (0 - 0.9))))
		fmt.Println(fmt.Sprint(reactive_power(100.0, 0.9)))
		fmt.Println(fmt.Sprint(reactive_power(0.0, 0.8)))
		fmt.Println(fmt.Sprint(reactive_power(100.0, (0 - 0.9))))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
