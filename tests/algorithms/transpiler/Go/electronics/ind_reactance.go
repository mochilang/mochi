//go:build ignore

// Generated by Mochi v0.10.64 on 2025-08-13 12:53:07 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

var PI float64

func ind_reactance(inductance float64, frequency float64, reactance float64) map[string]float64 {
	var zero_count int = 0
	_ = zero_count
	if inductance == 0.0 {
		zero_count = (zero_count + 1)
	}
	if frequency == 0.0 {
		zero_count = (zero_count + 1)
	}
	if reactance == 0.0 {
		zero_count = (zero_count + 1)
	}
	if zero_count != 1 {
		panic("One and only one argument must be 0")
	}
	if inductance < 0.0 {
		panic("Inductance cannot be negative")
	}
	if frequency < 0.0 {
		panic("Frequency cannot be negative")
	}
	if reactance < 0.0 {
		panic("Inductive reactance cannot be negative")
	}
	if inductance == 0.0 {
		return map[string]float64{"inductance": (float64(reactance) / float64(((2.0 * PI) * frequency)))}
	}
	if frequency == 0.0 {
		return map[string]float64{"frequency": (float64(reactance) / float64(((2.0 * PI) * inductance)))}
	}
	return map[string]float64{"reactance": (((2.0 * PI) * frequency) * inductance)}
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		PI = 3.141592653589793
		fmt.Println(ind_reactance(0.0, 10000.0, 50.0))
		fmt.Println(ind_reactance(0.035, 0.0, 50.0))
		fmt.Println(ind_reactance(3.5e-05, 1000.0, 0.0))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
