//go:build ignore

// Generated by Mochi v0.10.65 on 2025-08-14 10:03:40 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	math "math"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func pow10(n int) float64 {
	var result float64 = 1.0
	_ = result
	var i int = 0
	_ = i
	for i < n {
		result = (result * 10.0)
		i = (i + 1)
	}
	return result
}

var BOLTZMANN float64

var ELECTRON_VOLT float64

var TEMPERATURE float64

func ln_series(x float64) float64 {
	var t float64 = (float64((x - 1.0)) / float64((x + 1.0)))
	_ = t
	var term float64 = t
	_ = term
	var sum float64 = 0.0
	_ = sum
	var n int = 1
	_ = n
	for n <= 19 {
		sum = (sum + (float64(term) / float64(n)))
		term = ((term * t) * t)
		n = (n + 2)
	}
	return (2.0 * sum)
}

func ln(x float64) float64 {
	var y float64 = x
	_ = y
	var k int = 0
	_ = k
	for y >= 10.0 {
		y = (float64(y) / float64(10.0))
		k = (k + 1)
	}
	for y < 1.0 {
		y = (y * 10.0)
		k = (k - 1)
	}
	return (ln_series(y) + (float64(k) * ln_series(10.0)))
}

func builtin_voltage(donor_conc float64, acceptor_conc float64, intrinsic_conc float64) float64 {
	if donor_conc <= 0.0 {
		panic("Donor concentration should be positive")
	}
	if acceptor_conc <= 0.0 {
		panic("Acceptor concentration should be positive")
	}
	if intrinsic_conc <= 0.0 {
		panic("Intrinsic concentration should be positive")
	}
	if donor_conc <= intrinsic_conc {
		panic("Donor concentration should be greater than intrinsic concentration")
	}
	if acceptor_conc <= intrinsic_conc {
		panic("Acceptor concentration should be greater than intrinsic concentration")
	}
	return (float64(((BOLTZMANN * TEMPERATURE) * math.Log((float64((donor_conc * acceptor_conc)) / float64((intrinsic_conc * intrinsic_conc)))))) / float64(ELECTRON_VOLT))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		BOLTZMANN = (float64(1.380649) / float64(pow10(23)))
		ELECTRON_VOLT = (float64(1.602176634) / float64(pow10(19)))
		TEMPERATURE = 300.0
		fmt.Println(fmt.Sprint(builtin_voltage(pow10(17), pow10(17), pow10(10))))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
