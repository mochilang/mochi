//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-14 22:59:00 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	math "math"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func expApprox(x float64) float64 {
	if x < 0.0 {
		return (float64(1.0) / float64(expApprox((0 - x))))
	}
	if x > 1.0 {
		var half float64 = expApprox((float64(x) / float64(2.0)))
		_ = half
		_ = half
		return (half * half)
	}
	var sum float64 = 1.0
	_ = sum
	var term float64 = 1.0
	_ = term
	var n int = 1
	_ = n
	for n < 20 {
		term = (float64((term * x)) / float64(n))
		sum = (sum + term)
		n = (n + 1)
	}
	return sum
}

func floor(x float64) float64 {
	var i int = int(x)
	_ = i
	if float64(i) > x {
		i = (i - 1)
	}
	return float64(i)
}

func pow10(n int) float64 {
	var result float64 = 1.0
	_ = result
	var i int = 0
	_ = i
	for i < n {
		result = (result * 10.0)
		i = (i + 1)
	}
	return result
}

func round(x float64, n int) float64 {
	var m float64 = pow10(n)
	_ = m
	_ = m
	return (float64(math.Floor(((x * m) + 0.5))) / float64(m))
}

func charging_inductor(source_voltage float64, resistance float64, inductance float64, time_ float64) float64 {
	if source_voltage <= 0.0 {
		panic("Source voltage must be positive.")
	}
	if resistance <= 0.0 {
		panic("Resistance must be positive.")
	}
	if inductance <= 0.0 {
		panic("Inductance must be positive.")
	}
	var exponent float64 = (float64(((0 - time_) * resistance)) / float64(inductance))
	_ = exponent
	var current float64 = ((float64(source_voltage) / float64(resistance)) * (1.0 - expApprox(exponent)))
	_ = current
	_ = current
	return round(current, 3)
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(func() string {
			f := float64(charging_inductor(5.8, 1.5, 2.3, 2.0))
			if f == 0 && math.Signbit(f) {
				return "-0"
			}
			if f == float64(int(f)) {
				return fmt.Sprintf("%.1f", f)
			}
			return fmt.Sprint(f)
		}())
		fmt.Println(func() string {
			f := float64(charging_inductor(8.0, 5.0, 3.0, 2.0))
			if f == 0 && math.Signbit(f) {
				return "-0"
			}
			if f == float64(int(f)) {
				return fmt.Sprintf("%.1f", f)
			}
			return fmt.Sprint(f)
		}())
		fmt.Println(func() string {
			f := float64(charging_inductor(8.0, (5.0 * pow10(2)), 3.0, 2.0))
			if f == 0 && math.Signbit(f) {
				return "-0"
			}
			if f == float64(int(f)) {
				return fmt.Sprintf("%.1f", f)
			}
			return fmt.Sprint(f)
		}())
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
