//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-15 06:49:07 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	math "math"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _mod(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func floor(x float64) float64 {
	var i int = int(x)
	_ = i
	if float64(i) > x {
		i = (i - 1)
	}
	return float64(i)
}

func pow10(n int) float64 {
	var p float64 = 1.0
	_ = p
	var i int = 0
	_ = i
	for i < n {
		p = (p * 10.0)
		i = (i + 1)
	}
	return p
}

func roundn(x float64, n int) float64 {
	var m float64 = pow10(n)
	_ = m
	_ = m
	return (float64(math.Floor(((x * m) + 0.5))) / float64(m))
}

func pad(signal []float64, target int) []float64 {
	var s []float64 = signal
	_ = s
	for len(s) < target {
		s = append(s, 0.0)
	}
	return s
}

func circular_convolution(a []float64, b []float64) []float64 {
	var n1 int = len(a)
	_ = n1
	_ = n1
	var n2 int = len(b)
	_ = n2
	_ = n2
	var n int = func() int {
		if n1 > n2 {
			return n1
		} else {
			return n2
		}
	}()
	_ = n
	var x []float64 = pad(func(v any) []float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []float64{}
			}
			out := make([]float64, len(arr))
			for i, x := range arr {
				out[i] = x.(float64)
			}
			return out
		}
		return v.([]float64)
	}(a), n)
	_ = x
	var y []float64 = pad(func(v any) []float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []float64{}
			}
			out := make([]float64, len(arr))
			for i, x := range arr {
				out[i] = x.(float64)
			}
			return out
		}
		return v.([]float64)
	}(b), n)
	_ = y
	var res []float64 = []float64{}
	_ = res
	var i int = 0
	_ = i
	for i < n {
		var sum float64 = 0.0
		_ = sum
		var k int = 0
		_ = k
		for k < n {
			var j int = _mod((i - k), n)
			_ = j
			_ = j
			var idx int = func() int {
				if j < 0 {
					return (j + n)
				} else {
					return j
				}
			}()
			_ = idx
			sum = (sum + (_index(x, k) * _index(y, idx)))
			k = (k + 1)
		}
		res = append(res, roundn(sum, 2))
		i = (i + 1)
	}
	return res
}

var example1 []float64

var example2 []float64

var example3 []float64

var example4 []float64

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		example1 = circular_convolution(func(v any) []float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []float64{}
				}
				out := make([]float64, len(arr))
				for i, x := range arr {
					out[i] = x.(float64)
				}
				return out
			}
			return v.([]float64)
		}([]float64{2.0, 1.0, 2.0, (0 - 1.0)}), func(v any) []float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []float64{}
				}
				out := make([]float64, len(arr))
				for i, x := range arr {
					out[i] = x.(float64)
				}
				return out
			}
			return v.([]float64)
		}([]float64{1.0, 2.0, 3.0, 4.0}))
		fmt.Println(fmt.Sprint(example1))
		example2 = circular_convolution(func(v any) []float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []float64{}
				}
				out := make([]float64, len(arr))
				for i, x := range arr {
					out[i] = x.(float64)
				}
				return out
			}
			return v.([]float64)
		}([]float64{0.2, 0.4, 0.6, 0.8, 1.0, 1.2, 1.4, 1.6}), func(v any) []float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []float64{}
				}
				out := make([]float64, len(arr))
				for i, x := range arr {
					out[i] = x.(float64)
				}
				return out
			}
			return v.([]float64)
		}([]float64{0.1, 0.3, 0.5, 0.7, 0.9, 1.1, 1.3, 1.5}))
		fmt.Println(fmt.Sprint(example2))
		example3 = circular_convolution(func(v any) []float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []float64{}
				}
				out := make([]float64, len(arr))
				for i, x := range arr {
					out[i] = x.(float64)
				}
				return out
			}
			return v.([]float64)
		}([]float64{(0 - 1.0), 1.0, 2.0, (0 - 2.0)}), func(v any) []float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []float64{}
				}
				out := make([]float64, len(arr))
				for i, x := range arr {
					out[i] = x.(float64)
				}
				return out
			}
			return v.([]float64)
		}([]float64{0.5, 1.0, (0 - 1.0), 2.0, 0.75}))
		fmt.Println(fmt.Sprint(example3))
		example4 = circular_convolution(func(v any) []float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []float64{}
				}
				out := make([]float64, len(arr))
				for i, x := range arr {
					out[i] = x.(float64)
				}
				return out
			}
			return v.([]float64)
		}([]float64{1.0, (0 - 1.0), 2.0, 3.0, (0 - 1.0)}), func(v any) []float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []float64{}
				}
				out := make([]float64, len(arr))
				for i, x := range arr {
					out[i] = x.(float64)
				}
				return out
			}
			return v.([]float64)
		}([]float64{1.0, 2.0, 3.0}))
		fmt.Println(fmt.Sprint(example4))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
