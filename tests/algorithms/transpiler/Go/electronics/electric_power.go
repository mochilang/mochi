//go:build ignore

// Generated by Mochi v0.10.64 on 2025-08-13 07:26:15 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	math "math"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

type Result struct {
	Name  string  `json:"name"`
	Value float64 `json:"value"`
}

func absf(x float64) float64 {
	if x < 0.0 {
		return (0 - x)
	}
	return x
}

func pow10(n int) float64 {
	var p float64 = 1.0
	_ = p
	var i int = 0
	_ = i
	for i < n {
		p = (p * 10.0)
		i = (i + 1)
	}
	return p
}

func round_to(x float64, n int) float64 {
	var m float64 = pow10(n)
	_ = m
	_ = m
	return (float64(math.Floor(((x * m) + 0.5))) / float64(m))
}

func electric_power(voltage float64, current float64, power float64) Result {
	var zeros int = 0
	_ = zeros
	if voltage == 0.0 {
		zeros = (zeros + 1)
	}
	if current == 0.0 {
		zeros = (zeros + 1)
	}
	if power == 0.0 {
		zeros = (zeros + 1)
	}
	if zeros != 1 {
		panic("Exactly one argument must be 0")
	} else {
		if power < 0.0 {
			panic("Power cannot be negative in any electrical/electronics system")
		} else {
			if voltage == 0.0 {
				return Result{
					Name:  "voltage",
					Value: (float64(power) / float64(current)),
				}
			} else {
				if current == 0.0 {
					return Result{
						Name:  "current",
						Value: (float64(power) / float64(voltage)),
					}
				} else {
					if power == 0.0 {
						var p float64 = absf((voltage * current))
						_ = p
						_ = p
						return Result{
							Name:  "power",
							Value: round_to(p, 2),
						}
					} else {
						panic("Unhandled case")
					}
				}
			}
		}
	}
}

func str_result(r Result) string {
	return (((("Result(name='" + r.Name) + "', value=") + fmt.Sprint(r.Value)) + ")")
}

var r1 Result

var r2 Result

var r3 Result

var r4 Result

var r5 Result

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		r1 = electric_power(0.0, 2.0, 5.0)
		fmt.Println(str_result(r1))
		r2 = electric_power(2.0, 2.0, 0.0)
		fmt.Println(str_result(r2))
		r3 = electric_power((0 - 2.0), 3.0, 0.0)
		fmt.Println(str_result(r3))
		r4 = electric_power(2.2, 2.2, 0.0)
		fmt.Println(str_result(r4))
		r5 = electric_power(2.0, 0.0, 6.0)
		fmt.Println(str_result(r5))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
