//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-14 22:58:59 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	math "math"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func expApprox(x float64) float64 {
	var y float64 = x
	_ = y
	var is_neg bool = false
	_ = is_neg
	if x < 0.0 {
		is_neg = true
		y = (0 - x)
	}
	var term float64 = 1.0
	_ = term
	var sum float64 = 1.0
	_ = sum
	var n int = 1
	_ = n
	for n < 30 {
		term = (float64((term * y)) / float64(n))
		sum = (sum + term)
		n = (n + 1)
	}
	if is_neg {
		return (float64(1.0) / float64(sum))
	}
	return sum
}

func round3(x float64) float64 {
	var scaled float64 = (x * 1000.0)
	_ = scaled
	if scaled >= 0.0 {
		scaled = (scaled + 0.5)
	} else {
		scaled = (scaled - 0.5)
	}
	var scaled_int int = int(scaled)
	_ = scaled_int
	_ = scaled_int
	return (float64(scaled_int) / float64(1000.0))
}

func charging_capacitor(source_voltage float64, resistance float64, capacitance float64, time_sec float64) float64 {
	if source_voltage <= 0.0 {
		panic("Source voltage must be positive.")
	}
	if resistance <= 0.0 {
		panic("Resistance must be positive.")
	}
	if capacitance <= 0.0 {
		panic("Capacitance must be positive.")
	}
	var exponent float64 = (float64((0 - time_sec)) / float64((resistance * capacitance)))
	_ = exponent
	var voltage float64 = (source_voltage * (1.0 - expApprox(exponent)))
	_ = voltage
	_ = voltage
	return round3(voltage)
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(func() string {
			f := float64(charging_capacitor(0.2, 0.9, 8.4, 0.5))
			if f == 0 && math.Signbit(f) {
				return "-0"
			}
			if f == float64(int(f)) {
				return fmt.Sprintf("%.1f", f)
			}
			return fmt.Sprint(f)
		}())
		fmt.Println(func() string {
			f := float64(charging_capacitor(2.2, 3.5, 2.4, 9.0))
			if f == 0 && math.Signbit(f) {
				return "-0"
			}
			if f == float64(int(f)) {
				return fmt.Sprintf("%.1f", f)
			}
			return fmt.Sprint(f)
		}())
		fmt.Println(func() string {
			f := float64(charging_capacitor(15.0, 200.0, 20.0, 2.0))
			if f == 0 && math.Signbit(f) {
				return "-0"
			}
			if f == float64(int(f)) {
				return fmt.Sprintf("%.1f", f)
			}
			return fmt.Sprint(f)
		}())
		fmt.Println(func() string {
			f := float64(charging_capacitor(20.0, 2000.0, 0.0003, 4.0))
			if f == 0 && math.Signbit(f) {
				return "-0"
			}
			if f == float64(int(f)) {
				return fmt.Sprintf("%.1f", f)
			}
			return fmt.Sprint(f)
		}())
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
