//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-14 22:59:07 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func sqrtApprox(x float64) float64 {
	if x <= 0.0 {
		return 0.0
	}
	var guess float64 = (float64(x) / float64(2.0))
	_ = guess
	var i int = 0
	_ = i
	for i < 20 {
		guess = (float64((guess + (float64(x) / float64(guess)))) / float64(2.0))
		i = (i + 1)
	}
	return guess
}

func electrical_impedance(resistance float64, reactance float64, impedance float64) map[string]float64 {
	var zero_count int = 0
	_ = zero_count
	if resistance == 0.0 {
		zero_count = (zero_count + 1)
	}
	if reactance == 0.0 {
		zero_count = (zero_count + 1)
	}
	if impedance == 0.0 {
		zero_count = (zero_count + 1)
	}
	if zero_count != 1 {
		panic("One and only one argument must be 0")
	}
	if resistance == 0.0 {
		var value float64 = sqrtApprox(((impedance * impedance) - (reactance * reactance)))
		_ = value
		_ = value
		return map[string]float64{"resistance": value}
	} else {
		if reactance == 0.0 {
			var value float64 = sqrtApprox(((impedance * impedance) - (resistance * resistance)))
			_ = value
			_ = value
			return map[string]float64{"reactance": value}
		} else {
			if impedance == 0.0 {
				var value float64 = sqrtApprox(((resistance * resistance) + (reactance * reactance)))
				_ = value
				_ = value
				return map[string]float64{"impedance": value}
			} else {
				panic("Exactly one argument must be 0")
			}
		}
	}
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(electrical_impedance(3.0, 4.0, 0.0))
		fmt.Println(electrical_impedance(0.0, 4.0, 5.0))
		fmt.Println(electrical_impedance(3.0, 0.0, 5.0))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
