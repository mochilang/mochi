//go:build ignore

// Generated by Mochi v0.10.59 on 2025-08-06 16:54:28 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func bit_and(a int, b int) int {
	var ua int = a
	_ = ua
	var ub int = b
	_ = ub
	var res int = 0
	_ = res
	var bit int = 1
	_ = bit
	for (ua > 0) || (ub > 0) {
		if ((ua % 2) == 1) && ((ub % 2) == 1) {
			res = (res + bit)
		}
		ua = any((ua / 2)).(int)
		ub = any((ub / 2)).(int)
		bit = (bit * 2)
	}
	return res
}

func count_bits_kernighan(n int) int {
	if n < 0 {
		panic("the value of input must not be negative")
	}
	var num int = n
	_ = num
	var result int = 0
	_ = result
	for num != 0 {
		num = bit_and(num, (num - 1))
		result = (result + 1)
	}
	return result
}

func count_bits_modulo(n int) int {
	if n < 0 {
		panic("the value of input must not be negative")
	}
	var num int = n
	_ = num
	var result int = 0
	_ = result
	for num != 0 {
		if (num % 2) == 1 {
			result = (result + 1)
		}
		num = any((num / 2)).(int)
	}
	return result
}

func mochiMain() {
	var numbers []int = []int{25, 37, 21, 58, 0, 256}
	_ = numbers
	var i int = 0
	_ = i
	for i < len(numbers) {
		fmt.Println(fmt.Sprint(count_bits_kernighan(numbers[i])))
		i = (i + 1)
	}
	i = 0
	for i < len(numbers) {
		fmt.Println(fmt.Sprint(count_bits_modulo(numbers[i])))
		i = (i + 1)
	}
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
