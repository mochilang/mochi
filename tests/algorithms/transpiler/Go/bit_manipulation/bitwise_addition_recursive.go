//go:build ignore

// Generated by Mochi v0.10.59 on 2025-08-06 16:54:24 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func bitwise_xor(a int, b int) int {
	var result int = 0
	_ = result
	var bit int = 1
	_ = bit
	var x int = a
	_ = x
	var y int = b
	_ = y
	for (x > 0) || (y > 0) {
		var ax int = (x % 2)
		_ = ax
		var by int = (y % 2)
		_ = by
		if ((ax + by) % 2) == 1 {
			result = (result + bit)
		}
		x = (x / 2)
		y = (y / 2)
		bit = (bit * 2)
	}
	return result
}

func bitwise_and(a int, b int) int {
	var result int = 0
	_ = result
	var bit int = 1
	_ = bit
	var x int = a
	_ = x
	var y int = b
	_ = y
	for (x > 0) && (y > 0) {
		if ((x % 2) == 1) && ((y % 2) == 1) {
			result = (result + bit)
		}
		x = (x / 2)
		y = (y / 2)
		bit = (bit * 2)
	}
	return result
}

func bitwise_addition_recursive(number int, other_number int) int {
	if (number < 0) || (other_number < 0) {
		panic("Both arguments MUST be non-negative!")
	}
	var bitwise_sum int = bitwise_xor(number, other_number)
	_ = bitwise_sum
	_ = bitwise_sum
	var carry int = bitwise_and(number, other_number)
	_ = carry
	if carry == 0 {
		return bitwise_sum
	}
	return bitwise_addition_recursive(bitwise_sum, (carry * 2))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(fmt.Sprint(bitwise_addition_recursive(4, 5)))
		fmt.Println(fmt.Sprint(bitwise_addition_recursive(8, 9)))
		fmt.Println(fmt.Sprint(bitwise_addition_recursive(0, 4)))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
