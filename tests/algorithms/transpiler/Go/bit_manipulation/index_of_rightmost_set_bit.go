//go:build ignore

// Generated by Mochi v0.10.59 on 2025-08-06 16:54:40 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func index_of_rightmost_set_bit(number int) int {
	if number < 0 {
		panic("Input must be a non-negative integer")
	}
	if number == 0 {
		return (0 - 1)
	}
	var n int = number
	_ = n
	var index int = 0
	_ = index
	for (n % 2) == 0 {
		n = (n / 2)
		index = (index + 1)
	}
	return index
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(fmt.Sprint(index_of_rightmost_set_bit(0)))
		fmt.Println(fmt.Sprint(index_of_rightmost_set_bit(5)))
		fmt.Println(fmt.Sprint(index_of_rightmost_set_bit(36)))
		fmt.Println(fmt.Sprint(index_of_rightmost_set_bit(8)))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
