//go:build ignore

// Generated by Mochi v0.10.59 on 2025-08-06 16:54:34 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func bit_xor(a int, b int) int {
	var ua int = a
	_ = ua
	var ub int = b
	_ = ub
	var res int = 0
	_ = res
	var bit int = 1
	_ = bit
	for (ua > 0) || (ub > 0) {
		var abit int = (ua % 2)
		_ = abit
		var bbit int = (ub % 2)
		_ = bbit
		if ((abit == 1) && (bbit == 0)) || ((abit == 0) && (bbit == 1)) {
			res = (res + bit)
		}
		ua = any((ua / 2)).(int)
		ub = any((ub / 2)).(int)
		bit = (bit * 2)
	}
	return res
}

func find_unique_number(arr []int) int {
	if len(arr) == 0 {
		panic("input list must not be empty")
	}
	var result int = 0
	_ = result
	for _, num := range arr {
		result = bit_xor(result, num)
	}
	return result
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(fmt.Sprint(find_unique_number(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}([]int{1, 1, 2, 2, 3}))))
		fmt.Println(fmt.Sprint(find_unique_number(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}([]int{4, 5, 4, 6, 6}))))
		fmt.Println(fmt.Sprint(find_unique_number(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}([]int{7}))))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
