//go:build ignore

// Generated by Mochi v0.10.59 on 2025-08-06 16:54:10 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func to_binary4(n int) string {
	var result string = ""
	_ = result
	var x int = n
	_ = x
	for x > 0 {
		result = (fmt.Sprint((x % 2)) + result)
		x = (x / 2)
	}
	for len(result) < 4 {
		result = ("0" + result)
	}
	return result
}

func binary_coded_decimal(number int) string {
	var n int = number
	_ = n
	if n < 0 {
		n = 0
	}
	var digits string = fmt.Sprint(n)
	_ = digits
	var out string = "0b"
	_ = out
	var i int = 0
	_ = i
	for i < len(digits) {
		var d string = string([]rune(digits)[i])
		_ = d
		_ = d
		var d_int int = func() int { n, _ := strconv.Atoi(d); return n }()
		_ = d_int
		out = (out + to_binary4(d_int))
		i = (i + 1)
	}
	return out
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(binary_coded_decimal((0 - 2)))
		fmt.Println(binary_coded_decimal((0 - 1)))
		fmt.Println(binary_coded_decimal(0))
		fmt.Println(binary_coded_decimal(3))
		fmt.Println(binary_coded_decimal(2))
		fmt.Println(binary_coded_decimal(12))
		fmt.Println(binary_coded_decimal(987))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
