//go:build ignore

// Generated by Mochi v0.10.59 on 2025-08-06 16:54:26 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func lowest_set_bit(n int) int {
	var lb int = 1
	_ = lb
	for (n % (lb * 2)) == 0 {
		lb = (lb * 2)
	}
	return lb
}

func get_1s_count(number int) int {
	if number < 0 {
		fmt.Println("ValueError: Input must be a non-negative integer")
		return 0
	}
	var n int = number
	_ = n
	var count int = 0
	_ = count
	for n > 0 {
		n = (n - lowest_set_bit(n))
		count = (count + 1)
	}
	return count
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(fmt.Sprint(get_1s_count(25)))
		fmt.Println(fmt.Sprint(get_1s_count(37)))
		fmt.Println(fmt.Sprint(get_1s_count(21)))
		fmt.Println(fmt.Sprint(get_1s_count(58)))
		fmt.Println(fmt.Sprint(get_1s_count(0)))
		fmt.Println(fmt.Sprint(get_1s_count(256)))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
