//go:build ignore

// Generated by Mochi v0.10.59 on 2025-08-06 20:58:21 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func pow2(exp int) int {
	var result int = 1
	_ = result
	var i int = 0
	_ = i
	for i < exp {
		result = (result * 2)
		i = (i + 1)
	}
	return result
}

func is_bit_set(number int, position int) bool {
	var shifted int = (number / pow2(position))
	_ = shifted
	var remainder int = (shifted % 2)
	_ = remainder
	_ = remainder
	return (remainder == 1)
}

func set_bit(number int, position int) int {
	if is_bit_set(number, position) {
		return number
	}
	return (number + pow2(position))
}

func clear_bit(number int, position int) int {
	if is_bit_set(number, position) {
		return (number - pow2(position))
	}
	return number
}

func flip_bit(number int, position int) int {
	if is_bit_set(number, position) {
		return (number - pow2(position))
	}
	return (number + pow2(position))
}

func get_bit(number int, position int) int {
	if is_bit_set(number, position) {
		return 1
	}
	return 0
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(fmt.Sprint(set_bit(13, 1)))
		fmt.Println(fmt.Sprint(clear_bit(18, 1)))
		fmt.Println(fmt.Sprint(flip_bit(5, 1)))
		fmt.Println(fmt.Sprint(is_bit_set(10, 3)))
		fmt.Println(fmt.Sprint(get_bit(10, 1)))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
