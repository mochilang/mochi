//go:build ignore

// Generated by Mochi v0.10.59 on 2025-08-06 20:58:26 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func pad_left_num(n int) string {
	var s string = fmt.Sprint(n)
	_ = s
	for len(s) < 5 {
		s = (" " + s)
	}
	return s
}

func to_binary(n int) string {
	var sign string = ""
	_ = sign
	var num int = n
	_ = num
	if num < 0 {
		sign = "-"
		num = (0 - num)
	}
	var bits string = ""
	_ = bits
	for num > 0 {
		bits = (fmt.Sprint((num % 2)) + bits)
		num = ((num - (num % 2)) / 2)
	}
	if bits == "" {
		bits = "0"
	}
	var min_width int = 8
	_ = min_width
	for len(bits) < (min_width - len(sign)) {
		bits = ("0" + bits)
	}
	return (sign + bits)
}

func show_bits(before int, after int) string {
	return ((((((pad_left_num(before) + ": ") + to_binary(before)) + "\n") + pad_left_num(after)) + ": ") + to_binary(after))
}

func lshift(num int, k int) int {
	var result int = num
	_ = result
	var i int = 0
	_ = i
	for i < k {
		result = (result * 2)
		i = (i + 1)
	}
	return result
}

func rshift(num int, k int) int {
	var result int = num
	_ = result
	var i int = 0
	_ = i
	for i < k {
		result = ((result - (result % 2)) / 2)
		i = (i + 1)
	}
	return result
}

func swap_odd_even_bits(num int) int {
	var n int = num
	_ = n
	if n < 0 {
		n = (n + 4294967296)
	}
	var result int = 0
	_ = result
	var i int = 0
	_ = i
	for i < 32 {
		var bit1 int = (rshift(n, i) % 2)
		_ = bit1
		var bit2 int = (rshift(n, (i+1)) % 2)
		_ = bit2
		result = ((result + lshift(bit1, (i+1))) + lshift(bit2, i))
		i = (i + 2)
	}
	return result
}

func mochiMain() {
	var nums []int = []int{(0 - 1), 0, 1, 2, 3, 4, 23, 24}
	_ = nums
	var i int = 0
	_ = i
	for i < len(nums) {
		var n int = nums[i]
		_ = n
		fmt.Println(show_bits(n, swap_odd_even_bits(n)))
		fmt.Println("")
		i = (i + 1)
	}
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
