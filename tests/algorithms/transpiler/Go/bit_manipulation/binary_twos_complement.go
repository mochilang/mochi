//go:build ignore

// Generated by Mochi v0.10.59 on 2025-08-06 16:54:20 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func repeat_char(ch string, times int) string {
	var res string = ""
	_ = res
	var i int = 0
	_ = i
	for i < times {
		res = (res + ch)
		i = (i + 1)
	}
	return res
}

func to_binary(n int) string {
	if n == 0 {
		return "0"
	}
	var res string = ""
	_ = res
	var v int = n
	_ = v
	for v > 0 {
		res = (fmt.Sprint((v % 2)) + res)
		v = (v / 2)
	}
	return res
}

func pow2(exp int) int {
	var res int = 1
	_ = res
	var i int = 0
	_ = i
	for i < exp {
		res = (res * 2)
		i = (i + 1)
	}
	return res
}

func twos_complement(number int) string {
	if number > 0 {
		panic("input must be a negative integer")
	}
	if number == 0 {
		return "0b0"
	}
	var abs_number int = func() int {
		if number < 0 {
			return (0 - number)
		} else {
			return number
		}
	}()
	_ = abs_number
	var binary_number_length int = len(to_binary(abs_number))
	_ = binary_number_length
	var complement_value int = (pow2(binary_number_length) - abs_number)
	_ = complement_value
	var complement_binary string = to_binary(complement_value)
	_ = complement_binary
	var padding string = repeat_char("0", (binary_number_length - len(complement_binary)))
	_ = padding
	var twos_complement_number string = (("1" + padding) + complement_binary)
	_ = twos_complement_number
	_ = twos_complement_number
	return ("0b" + twos_complement_number)
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(twos_complement(0))
		fmt.Println(twos_complement((0 - 1)))
		fmt.Println(twos_complement((0 - 5)))
		fmt.Println(twos_complement((0 - 17)))
		fmt.Println(twos_complement((0 - 207)))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
