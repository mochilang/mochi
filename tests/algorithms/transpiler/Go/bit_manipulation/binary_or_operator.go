//go:build ignore

// Generated by Mochi v0.10.59 on 2025-08-06 16:54:16 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func binary_or(a int, b int) string {
	if (a < 0) || (b < 0) {
		return "ValueError"
	}
	var res string = ""
	_ = res
	var x int = a
	_ = x
	var y int = b
	_ = y
	for (x > 0) || (y > 0) {
		var bit_a int = (x % 2)
		_ = bit_a
		var bit_b int = (y % 2)
		_ = bit_b
		if (bit_a == 1) || (bit_b == 1) {
			res = ("1" + res)
		} else {
			res = ("0" + res)
		}
		x = (x / 2)
		y = (y / 2)
	}
	if res == "" {
		res = "0"
	}
	return ("0b" + res)
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(binary_or(25, 32))
		fmt.Println(binary_or(37, 50))
		fmt.Println(binary_or(21, 30))
		fmt.Println(binary_or(58, 73))
		fmt.Println(binary_or(0, 255))
		fmt.Println(binary_or(0, 256))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
