//go:build ignore

// Generated by Mochi v0.10.59 on 2025-08-06 16:55:57 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func find_missing_number(nums []int) int {
	var low int = any(func() int {
		if len(nums) == 0 {
			return 0
		}
		m := nums[0]
		for _, n := range nums[1:] {
			if n < m {
				m = n
			}
		}
		return m
	}()).(int)
	_ = low
	var high int = any(func() int {
		if len(nums) == 0 {
			return 0
		}
		m := nums[0]
		for _, n := range nums[1:] {
			if n > m {
				m = n
			}
		}
		return m
	}()).(int)
	_ = high
	var count int = ((high - low) + 1)
	_ = count
	var expected_sum int = (((low + high) * count) / 2)
	_ = expected_sum
	_ = expected_sum
	var actual_sum int = 0
	_ = actual_sum
	var i int = 0
	_ = i
	var n int = len(nums)
	_ = n
	for i < n {
		actual_sum = (actual_sum + nums[i])
		i = (i + 1)
	}
	return (expected_sum - actual_sum)
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(find_missing_number(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}([]int{0, 1, 3, 4})))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
