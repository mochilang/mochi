//go:build ignore

// Generated by Mochi v0.10.59 on 2025-08-06 17:45:10 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func to_binary(n int) string {
	if n == 0 {
		return "0"
	}
	var num int = n
	_ = num
	var res string = ""
	_ = res
	for num > 0 {
		var bit int = (num % 2)
		_ = bit
		res = (fmt.Sprint(bit) + res)
		num = (num / 2)
	}
	return res
}

func zfill(s string, width int) string {
	var res string = s
	_ = res
	var pad int = (width - len(s))
	_ = pad
	for pad > 0 {
		res = ("0" + res)
		pad = (pad - 1)
	}
	return res
}

func binary_and(a int, b int) string {
	if (a < 0) || (b < 0) {
		panic("the value of both inputs must be positive")
	}
	var a_bin string = to_binary(a)
	_ = a_bin
	var b_bin string = to_binary(b)
	_ = b_bin
	var max_len int = len(a_bin)
	_ = max_len
	if len(b_bin) > max_len {
		max_len = len(b_bin)
	}
	var a_pad string = zfill(a_bin, max_len)
	_ = a_pad
	_ = a_pad
	var b_pad string = zfill(b_bin, max_len)
	_ = b_pad
	_ = b_pad
	var i int = 0
	_ = i
	var res string = ""
	_ = res
	for i < max_len {
		if (string([]rune(a_pad)[i]) == "1") && (string([]rune(b_pad)[i]) == "1") {
			res = (res + "1")
		} else {
			res = (res + "0")
		}
		i = (i + 1)
	}
	return ("0b" + res)
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(binary_and(25, 32))
		fmt.Println(binary_and(37, 50))
		fmt.Println(binary_and(21, 30))
		fmt.Println(binary_and(58, 73))
		fmt.Println(binary_and(0, 255))
		fmt.Println(binary_and(256, 256))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
