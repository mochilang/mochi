//go:build ignore

// Generated by Mochi v0.10.59 on 2025-08-06 16:54:18 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

func repeat_char(ch string, count int) string {
	var res string = ""
	_ = res
	var i int = 0
	_ = i
	for i < count {
		res = (res + ch)
		i = (i + 1)
	}
	return res
}

func abs_int(n int) int {
	if n < 0 {
		return (0 - n)
	}
	return n
}

func pow2(exp int) int {
	var res int = 1
	_ = res
	var i int = 0
	_ = i
	for i < exp {
		res = (res * 2)
		i = (i + 1)
	}
	return res
}

func to_binary_no_prefix(n int) string {
	var v int = n
	_ = v
	if v < 0 {
		v = (0 - v)
	}
	if v == 0 {
		return "0"
	}
	var res string = ""
	_ = res
	for v > 0 {
		res = (fmt.Sprint((v % 2)) + res)
		v = (v / 2)
	}
	return res
}

func logical_left_shift(number int, shift_amount int) string {
	if (number < 0) || (shift_amount < 0) {
		panic("both inputs must be positive integers")
	}
	var binary_number string = ("0b" + to_binary_no_prefix(number))
	_ = binary_number
	_ = binary_number
	return (binary_number + repeat_char("0", shift_amount))
}

func logical_right_shift(number int, shift_amount int) string {
	if (number < 0) || (shift_amount < 0) {
		panic("both inputs must be positive integers")
	}
	var binary_number string = to_binary_no_prefix(number)
	_ = binary_number
	if shift_amount >= len(binary_number) {
		return "0b0"
	}
	var shifted string = _substr(binary_number, 0, (len(binary_number) - shift_amount))
	_ = shifted
	_ = shifted
	return ("0b" + shifted)
}

func arithmetic_right_shift(number int, shift_amount int) string {
	var binary_number string
	_ = binary_number
	if number >= 0 {
		binary_number = ("0" + to_binary_no_prefix(number))
	} else {
		var length int = len(to_binary_no_prefix((0 - number)))
		_ = length
		var intermediate int = (abs_int(number) - pow2(length))
		_ = intermediate
		var bin_repr string = to_binary_no_prefix(intermediate)
		_ = bin_repr
		binary_number = (("1" + repeat_char("0", (length-len(bin_repr)))) + bin_repr)
	}
	if shift_amount >= len(binary_number) {
		var sign string = _substr(binary_number, 0, 1)
		_ = sign
		_ = sign
		return ("0b" + repeat_char(sign, len(binary_number)))
	}
	var sign string = _substr(binary_number, 0, 1)
	_ = sign
	_ = sign
	var shifted string = _substr(binary_number, 0, (len(binary_number) - shift_amount))
	_ = shifted
	_ = shifted
	return (("0b" + repeat_char(sign, shift_amount)) + shifted)
}

func mochiMain() {
	fmt.Println(logical_left_shift(17, 2))
	fmt.Println(logical_right_shift(1983, 4))
	fmt.Println(arithmetic_right_shift((0 - 17), 2))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
