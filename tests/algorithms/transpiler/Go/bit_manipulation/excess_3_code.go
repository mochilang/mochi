//go:build ignore

// Generated by Mochi v0.10.59 on 2025-08-06 16:54:30 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func excess_3_code(number int) string {
	var n int = number
	_ = n
	if n < 0 {
		n = 0
	}
	var mapping []string = []string{"0011", "0100", "0101", "0110", "0111", "1000", "1001", "1010", "1011", "1100"}
	_ = mapping
	var res string = ""
	_ = res
	if n == 0 {
		res = mapping[0]
	} else {
		for n > 0 {
			var digit int = (n % 10)
			_ = digit
			res = (mapping[digit] + res)
			n = (n / 10)
		}
	}
	return ("0b" + res)
}

func mochiMain() {
	fmt.Println(excess_3_code(0))
	fmt.Println(excess_3_code(3))
	fmt.Println(excess_3_code(2))
	fmt.Println(excess_3_code(20))
	fmt.Println(excess_3_code(120))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
