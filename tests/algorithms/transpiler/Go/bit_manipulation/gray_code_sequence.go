//go:build ignore

// Generated by Mochi v0.10.59 on 2025-08-06 16:54:36 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func pow2(exp int) int {
	var result int = 1
	_ = result
	var i int = 0
	_ = i
	for i < exp {
		result = (result * 2)
		i = (i + 1)
	}
	return result
}

func gray_code(bit_count int) []int {
	if bit_count == 0 {
		return []int{0}
	}
	var prev []int = gray_code((bit_count - 1))
	_ = prev
	var add_val int = pow2((bit_count - 1))
	_ = add_val
	var res []int = []int{}
	_ = res
	var i int = 0
	_ = i
	for i < len(prev) {
		res = append(res, prev[i])
		i = (i + 1)
	}
	var j int = (len(prev) - 1)
	_ = j
	for j >= 0 {
		res = append(res, (prev[j] + add_val))
		j = (j - 1)
	}
	return res
}

var seq2 []int

var seq1 []int

var seq3 []int

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		seq2 = gray_code(2)
		fmt.Println(fmt.Sprint(seq2))
		seq1 = gray_code(1)
		fmt.Println(fmt.Sprint(seq1))
		seq3 = gray_code(3)
		fmt.Println(fmt.Sprint(seq3))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
