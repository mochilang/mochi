//go:build ignore

// Generated by Mochi v0.10.59 on 2025-08-06 20:58:16 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func get_reverse_bit_string(number int) string {
	var bit_string string = ""
	_ = bit_string
	var n int = number
	_ = n
	var i int = 0
	_ = i
	for i < 32 {
		bit_string = (bit_string + fmt.Sprint((n % 2)))
		n = (n / 2)
		i = (i + 1)
	}
	return bit_string
}

func reverse_bit(number int) string {
	if number < 0 {
		panic("the value of input must be positive")
	}
	var n int = number
	_ = n
	var result int = 0
	_ = result
	var i int = 1
	_ = i
	for i <= 32 {
		result = (result * 2)
		var end_bit int = (n % 2)
		_ = end_bit
		n = (n / 2)
		result = (result + end_bit)
		i = (i + 1)
	}
	return get_reverse_bit_string(result)
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(reverse_bit(25))
		fmt.Println(reverse_bit(37))
		fmt.Println(reverse_bit(21))
		fmt.Println(reverse_bit(58))
		fmt.Println(reverse_bit(0))
		fmt.Println(reverse_bit(256))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
