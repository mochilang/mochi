//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-16 09:44:21 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	math "math"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func exp_approx(x float64) float64 {
	var neg bool = false
	_ = neg
	var y float64 = x
	_ = y
	if x < 0.0 {
		neg = true
		y = (0 - x)
	}
	var term float64 = 1.0
	_ = term
	var sum float64 = 1.0
	_ = sum
	var n int = 1
	_ = n
	for n < 30 {
		term = (float64((term * y)) / float64(n))
		sum = (sum + term)
		n = (n + 1)
	}
	if neg {
		return (float64(1.0) / float64(sum))
	}
	return sum
}

func ln_series(x float64) float64 {
	var t float64 = (float64((x - 1.0)) / float64((x + 1.0)))
	_ = t
	var term float64 = t
	_ = term
	var acc float64 = 0.0
	_ = acc
	var n int = 1
	_ = n
	for n <= 19 {
		acc = (acc + (float64(term) / float64(n)))
		term = ((term * t) * t)
		n = (n + 2)
	}
	return (2.0 * acc)
}

func ln(x float64) float64 {
	var y float64 = x
	_ = y
	var k int = 0
	_ = k
	for y >= 10.0 {
		y = (float64(y) / float64(10.0))
		k = (k + 1)
	}
	for y < 1.0 {
		y = (y * 10.0)
		k = (k - 1)
	}
	return (ln_series(y) + (float64(k) * ln_series(10.0)))
}

func softplus(x float64) float64 {
	return math.Log((1.0 + exp_approx(x)))
}

func tanh_approx(x float64) float64 {
	return ((float64(2.0) / float64((1.0 + exp_approx(((0 - 2.0) * x))))) - 1.0)
}

func mish(vector []float64) []float64 {
	var result []float64 = []float64{}
	_ = result
	var i int = 0
	_ = i
	for i < len(vector) {
		var x float64 = _index(vector, i)
		_ = x
		var sp float64 = softplus(x)
		_ = sp
		var y float64 = (x * tanh_approx(sp))
		_ = y
		result = append(result, y)
		i = (i + 1)
	}
	return result
}

func mochiMain() {
	var v1 []float64 = []float64{2.3, 0.6, (0 - 2.0), (0 - 3.8)}
	_ = v1
	var v2 []float64 = []float64{(0 - 9.2), (0 - 0.3), 0.45, (0 - 4.56)}
	_ = v2
	fmt.Println(fmt.Sprint(mish(func(v any) []float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []float64{}
			}
			out := make([]float64, len(arr))
			for i, x := range arr {
				out[i] = x.(float64)
			}
			return out
		}
		return v.([]float64)
	}(v1))))
	fmt.Println(fmt.Sprint(mish(func(v any) []float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []float64{}
			}
			out := make([]float64, len(arr))
			for i, x := range arr {
				out[i] = x.(float64)
			}
			return out
		}
		return v.([]float64)
	}(v2))))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
