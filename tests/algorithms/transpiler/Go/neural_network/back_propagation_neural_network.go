//go:build ignore

// Generated by Mochi v0.10.69 on 2025-08-22 13:07:48 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	math "math"
	"os"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

func _modi(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		return
	}
	s[idx] = v
}

var seed int

func rand() int {
	seed = _modi(((seed * 1103515245) + 12345), 2147483648)
	return seed
}

func random() float64 {
	return (float64((1.0 * float64(rand()))) / float64(2147483648.0))
}

func expApprox(x float64) float64 {
	var y float64 = x
	_ = y
	var is_neg bool = false
	_ = is_neg
	if x < 0.0 {
		is_neg = true
		y = (0 - x)
	}
	var term float64 = 1.0
	_ = term
	var sum float64 = 1.0
	_ = sum
	var n int = 1
	_ = n
	for n < 30 {
		term = (float64((term * y)) / float64(n))
		sum = (sum + term)
		n = (n + 1)
	}
	if is_neg {
		return (float64(1.0) / float64(sum))
	}
	return sum
}

func sigmoid(z float64) float64 {
	return (float64(1.0) / float64((1.0 + expApprox((0 - z)))))
}

func sigmoid_vec(v []float64) []float64 {
	var res []float64 = []float64{}
	_ = res
	var i int = 0
	_ = i
	for i < len(v) {
		res = append(res, sigmoid(_index(v, i)))
		i = (i + 1)
	}
	return res
}

func sigmoid_derivative(out []float64) []float64 {
	var res []float64 = []float64{}
	_ = res
	var i int = 0
	_ = i
	for i < len(out) {
		var val float64 = _index(out, i)
		_ = val
		res = append(res, (val * (1.0 - val)))
		i = (i + 1)
	}
	return res
}

type Layer struct {
	Units     int         `json:"units"`
	Weight    [][]float64 `json:"weight"`
	Bias      []float64   `json:"bias"`
	Output    []float64   `json:"output"`
	Xdata     []float64   `json:"xdata"`
	LearnRate float64     `json:"learn_rate"`
}

func random_vector(n int) []float64 {
	var v []float64 = []float64{}
	_ = v
	var i int = 0
	_ = i
	for i < n {
		v = append(v, (random() - 0.5))
		i = (i + 1)
	}
	return v
}

func random_matrix(r int, c int) [][]float64 {
	var m [][]float64 = [][]float64{}
	_ = m
	var i int = 0
	_ = i
	for i < r {
		m = append(m, random_vector(c))
		i = (i + 1)
	}
	return m
}

func matvec(mat [][]float64, vec []float64) []float64 {
	var res []float64 = []float64{}
	_ = res
	var i int = 0
	_ = i
	for i < len(mat) {
		var s float64 = 0.0
		_ = s
		var j int = 0
		_ = j
		for j < len(vec) {
			s = (s + (_index(_index(mat, i), j) * _index(vec, j)))
			j = (j + 1)
		}
		res = append(res, s)
		i = (i + 1)
	}
	return res
}

func matTvec(mat [][]float64, vec []float64) []float64 {
	var cols int = len(_index(mat, 0))
	_ = cols
	var res []float64 = []float64{}
	_ = res
	var j int = 0
	_ = j
	for j < cols {
		var s float64 = 0.0
		_ = s
		var i int = 0
		_ = i
		for i < len(mat) {
			s = (s + (_index(_index(mat, i), j) * _index(vec, i)))
			i = (i + 1)
		}
		res = append(res, s)
		j = (j + 1)
	}
	return res
}

func vec_sub(a []float64, b []float64) []float64 {
	var res []float64 = []float64{}
	_ = res
	var i int = 0
	_ = i
	for i < len(a) {
		res = append(res, (_index(a, i) - _index(b, i)))
		i = (i + 1)
	}
	return res
}

func vec_mul(a []float64, b []float64) []float64 {
	var res []float64 = []float64{}
	_ = res
	var i int = 0
	_ = i
	for i < len(a) {
		res = append(res, (_index(a, i) * _index(b, i)))
		i = (i + 1)
	}
	return res
}

func vec_scalar_mul(v []float64, s float64) []float64 {
	var res []float64 = []float64{}
	_ = res
	var i int = 0
	_ = i
	for i < len(v) {
		res = append(res, (_index(v, i) * s))
		i = (i + 1)
	}
	return res
}

func outer(a []float64, b []float64) [][]float64 {
	var res [][]float64 = [][]float64{}
	_ = res
	var i int = 0
	_ = i
	for i < len(a) {
		var row []float64 = []float64{}
		_ = row
		var j int = 0
		_ = j
		for j < len(b) {
			row = append(row, (_index(a, i) * _index(b, j)))
			j = (j + 1)
		}
		res = append(res, row)
		i = (i + 1)
	}
	return res
}

func mat_scalar_mul(mat [][]float64, s float64) [][]float64 {
	var res [][]float64 = [][]float64{}
	_ = res
	var i int = 0
	_ = i
	for i < len(mat) {
		var row []float64 = []float64{}
		_ = row
		var j int = 0
		_ = j
		for j < len(_index(mat, i)) {
			row = append(row, (_index(_index(mat, i), j) * s))
			j = (j + 1)
		}
		res = append(res, row)
		i = (i + 1)
	}
	return res
}

func mat_sub(a [][]float64, b [][]float64) [][]float64 {
	var res [][]float64 = [][]float64{}
	_ = res
	var i int = 0
	_ = i
	for i < len(a) {
		var row []float64 = []float64{}
		_ = row
		var j int = 0
		_ = j
		for j < len(_index(a, i)) {
			row = append(row, (_index(_index(a, i), j) - _index(_index(b, i), j)))
			j = (j + 1)
		}
		res = append(res, row)
		i = (i + 1)
	}
	return res
}

func init_layer(units int, back_units int, lr float64) Layer {
	return Layer{
		Units:     units,
		Weight:    random_matrix(units, back_units),
		Bias:      random_vector(units),
		Output:    []float64{},
		Xdata:     []float64{},
		LearnRate: lr,
	}
}

func forward(layers []Layer, x []float64) []Layer {
	var data []float64 = x
	_ = data
	var i int = 0
	_ = i
	for i < len(layers) {
		var layer Layer = _index(layers, i)
		_ = layer
		layer.Xdata = data
		if i == 0 {
			layer.Output = data
		} else {
			var z []float64 = vec_sub(func(v any) []float64 {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]float64); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []float64{}
					}
					out := make([]float64, len(arr))
					for i, x := range arr {
						out[i] = x.(float64)
					}
					return out
				}
				return v.([]float64)
			}(matvec(func(v any) [][]float64 {
				if v == nil {
					return nil
				}
				if vv, ok := v.([][]float64); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return [][]float64{}
					}
					out := make([][]float64, len(arr))
					for i, x := range arr {
						out[i] = func(v any) []float64 {
							if v == nil {
								return nil
							}
							if vv, ok := v.([]float64); ok {
								return vv
							}
							if arr, ok := v.([]any); ok {
								if len(arr) == 0 {
									return []float64{}
								}
								out := make([]float64, len(arr))
								for i, x := range arr {
									out[i] = x.(float64)
								}
								return out
							}
							return v.([]float64)
						}(x)
					}
					return out
				}
				return v.([][]float64)
			}(layer.Weight), func(v any) []float64 {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]float64); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []float64{}
					}
					out := make([]float64, len(arr))
					for i, x := range arr {
						out[i] = x.(float64)
					}
					return out
				}
				return v.([]float64)
			}(data))), func(v any) []float64 {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]float64); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []float64{}
					}
					out := make([]float64, len(arr))
					for i, x := range arr {
						out[i] = x.(float64)
					}
					return out
				}
				return v.([]float64)
			}(layer.Bias))
			_ = z
			layer.Output = sigmoid_vec(func(v any) []float64 {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]float64); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []float64{}
					}
					out := make([]float64, len(arr))
					for i, x := range arr {
						out[i] = x.(float64)
					}
					return out
				}
				return v.([]float64)
			}(z))
			data = layer.Output
		}
		_setIndex(layers, i, layer)
		i = (i + 1)
	}
	return layers
}

func backward(layers []Layer, grad []float64) []Layer {
	var g []float64 = grad
	_ = g
	var i int = (len(layers) - 1)
	_ = i
	for i > 0 {
		var layer Layer = _index(layers, i)
		_ = layer
		var deriv []float64 = sigmoid_derivative(func(v any) []float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []float64{}
				}
				out := make([]float64, len(arr))
				for i, x := range arr {
					out[i] = x.(float64)
				}
				return out
			}
			return v.([]float64)
		}(layer.Output))
		_ = deriv
		var delta []float64 = vec_mul(func(v any) []float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []float64{}
				}
				out := make([]float64, len(arr))
				for i, x := range arr {
					out[i] = x.(float64)
				}
				return out
			}
			return v.([]float64)
		}(g), func(v any) []float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []float64{}
				}
				out := make([]float64, len(arr))
				for i, x := range arr {
					out[i] = x.(float64)
				}
				return out
			}
			return v.([]float64)
		}(deriv))
		_ = delta
		var grad_w [][]float64 = outer(func(v any) []float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []float64{}
				}
				out := make([]float64, len(arr))
				for i, x := range arr {
					out[i] = x.(float64)
				}
				return out
			}
			return v.([]float64)
		}(delta), func(v any) []float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []float64{}
				}
				out := make([]float64, len(arr))
				for i, x := range arr {
					out[i] = x.(float64)
				}
				return out
			}
			return v.([]float64)
		}(layer.Xdata))
		_ = grad_w
		layer.Weight = mat_sub(func(v any) [][]float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]float64{}
				}
				out := make([][]float64, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []float64 {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]float64); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []float64{}
							}
							out := make([]float64, len(arr))
							for i, x := range arr {
								out[i] = x.(float64)
							}
							return out
						}
						return v.([]float64)
					}(x)
				}
				return out
			}
			return v.([][]float64)
		}(layer.Weight), func(v any) [][]float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]float64{}
				}
				out := make([][]float64, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []float64 {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]float64); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []float64{}
							}
							out := make([]float64, len(arr))
							for i, x := range arr {
								out[i] = x.(float64)
							}
							return out
						}
						return v.([]float64)
					}(x)
				}
				return out
			}
			return v.([][]float64)
		}(mat_scalar_mul(func(v any) [][]float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]float64{}
				}
				out := make([][]float64, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []float64 {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]float64); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []float64{}
							}
							out := make([]float64, len(arr))
							for i, x := range arr {
								out[i] = x.(float64)
							}
							return out
						}
						return v.([]float64)
					}(x)
				}
				return out
			}
			return v.([][]float64)
		}(grad_w), layer.LearnRate)))
		layer.Bias = vec_sub(func(v any) []float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []float64{}
				}
				out := make([]float64, len(arr))
				for i, x := range arr {
					out[i] = x.(float64)
				}
				return out
			}
			return v.([]float64)
		}(layer.Bias), func(v any) []float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []float64{}
				}
				out := make([]float64, len(arr))
				for i, x := range arr {
					out[i] = x.(float64)
				}
				return out
			}
			return v.([]float64)
		}(vec_scalar_mul(func(v any) []float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []float64{}
				}
				out := make([]float64, len(arr))
				for i, x := range arr {
					out[i] = x.(float64)
				}
				return out
			}
			return v.([]float64)
		}(delta), layer.LearnRate)))
		g = matTvec(func(v any) [][]float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]float64{}
				}
				out := make([][]float64, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []float64 {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]float64); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []float64{}
							}
							out := make([]float64, len(arr))
							for i, x := range arr {
								out[i] = x.(float64)
							}
							return out
						}
						return v.([]float64)
					}(x)
				}
				return out
			}
			return v.([][]float64)
		}(layer.Weight), func(v any) []float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []float64{}
				}
				out := make([]float64, len(arr))
				for i, x := range arr {
					out[i] = x.(float64)
				}
				return out
			}
			return v.([]float64)
		}(delta))
		_setIndex(layers, i, layer)
		i = (i - 1)
	}
	return layers
}

func calc_loss(y []float64, yhat []float64) float64 {
	var s float64 = 0.0
	_ = s
	var i int = 0
	_ = i
	for i < len(y) {
		var d float64 = (_index(y, i) - _index(yhat, i))
		_ = d
		s = (s + (d * d))
		i = (i + 1)
	}
	return s
}

func calc_gradient(y []float64, yhat []float64) []float64 {
	var g []float64 = []float64{}
	_ = g
	var i int = 0
	_ = i
	for i < len(y) {
		g = append(g, (2.0 * (_index(yhat, i) - _index(y, i))))
		i = (i + 1)
	}
	return g
}

func train(layers []Layer, xdata [][]float64, ydata [][]float64, rounds int, acc float64) float64 {
	var r int = 0
	_ = r
	for r < rounds {
		var i int = 0
		_ = i
		for i < len(xdata) {
			layers = forward(func(v any) []Layer {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]Layer); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []Layer{}
					}
					out := make([]Layer, len(arr))
					for i, x := range arr {
						out[i] = x.(Layer)
					}
					return out
				}
				return v.([]Layer)
			}(layers), func(v any) []float64 {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]float64); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []float64{}
					}
					out := make([]float64, len(arr))
					for i, x := range arr {
						out[i] = x.(float64)
					}
					return out
				}
				return v.([]float64)
			}(_index(xdata, i)))
			var out []float64 = _index(layers, (len(layers) - 1)).Output
			_ = out
			var grad []float64 = calc_gradient(func(v any) []float64 {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]float64); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []float64{}
					}
					out := make([]float64, len(arr))
					for i, x := range arr {
						out[i] = x.(float64)
					}
					return out
				}
				return v.([]float64)
			}(_index(ydata, i)), func(v any) []float64 {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]float64); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []float64{}
					}
					out := make([]float64, len(arr))
					for i, x := range arr {
						out[i] = x.(float64)
					}
					return out
				}
				return v.([]float64)
			}(out))
			_ = grad
			layers = backward(func(v any) []Layer {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]Layer); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []Layer{}
					}
					out := make([]Layer, len(arr))
					for i, x := range arr {
						out[i] = x.(Layer)
					}
					return out
				}
				return v.([]Layer)
			}(layers), func(v any) []float64 {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]float64); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []float64{}
					}
					out := make([]float64, len(arr))
					for i, x := range arr {
						out[i] = x.(float64)
					}
					return out
				}
				return v.([]float64)
			}(grad))
			i = (i + 1)
		}
		r = (r + 1)
	}
	return 0.0
}

type Data struct {
	X [][]float64 `json:"x"`
	Y [][]float64 `json:"y"`
}

func create_data() Data {
	var x [][]float64 = [][]float64{}
	_ = x
	var i int = 0
	_ = i
	for i < 10 {
		x = append(x, random_vector(10))
		i = (i + 1)
	}
	var y [][]float64 = [][]float64{[]float64{0.8, 0.4}, []float64{0.4, 0.3}, []float64{0.34, 0.45}, []float64{0.67, 0.32}, []float64{0.88, 0.67}, []float64{0.78, 0.77}, []float64{0.55, 0.66}, []float64{0.55, 0.43}, []float64{0.54, 0.1}, []float64{0.1, 0.5}}
	_ = y
	_ = y
	return Data{
		X: x,
		Y: y,
	}
}

func mochiMain() {
	var data Data = create_data()
	_ = data
	var x [][]float64 = data.X
	_ = x
	var y [][]float64 = data.Y
	_ = y
	var layers []Layer = []Layer{}
	_ = layers
	layers = append(layers, init_layer(10, 0, 0.3))
	layers = append(layers, init_layer(20, 10, 0.3))
	layers = append(layers, init_layer(30, 20, 0.3))
	layers = append(layers, init_layer(2, 30, 0.3))
	var final_mse float64 = train(func(v any) []Layer {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]Layer); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []Layer{}
			}
			out := make([]Layer, len(arr))
			for i, x := range arr {
				out[i] = x.(Layer)
			}
			return out
		}
		return v.([]Layer)
	}(layers), func(v any) [][]float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]float64{}
			}
			out := make([][]float64, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []float64 {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]float64); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []float64{}
						}
						out := make([]float64, len(arr))
						for i, x := range arr {
							out[i] = x.(float64)
						}
						return out
					}
					return v.([]float64)
				}(x)
			}
			return out
		}
		return v.([][]float64)
	}(x), func(v any) [][]float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]float64{}
			}
			out := make([][]float64, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []float64 {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]float64); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []float64{}
						}
						out := make([]float64, len(arr))
						for i, x := range arr {
							out[i] = x.(float64)
						}
						return out
					}
					return v.([]float64)
				}(x)
			}
			return out
		}
		return v.([][]float64)
	}(y), 100, 0.01)
	_ = final_mse
	_ = final_mse
	fmt.Println(func() string {
		f := float64(final_mse)
		if f == 0 && math.Signbit(f) {
			return "-0"
		}
		if math.Abs(f-float64(int(f))) < 1e-9 {
			return fmt.Sprintf("%.1f", f)
		}
		return fmt.Sprint(f)
	}())
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		seed = 1
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
