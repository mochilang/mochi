//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-16 09:44:33 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func _concat[T any](a, b []T) []T {
	return append(append([]T{}, a...), b...)
}

type DataSet struct {
	Images          [][]int `json:"images"`
	Labels          [][]int `json:"labels"`
	NumExamples     int     `json:"num_examples"`
	IndexInEpoch    int     `json:"index_in_epoch"`
	EpochsCompleted int     `json:"epochs_completed"`
}

type Datasets struct {
	Train      DataSet `json:"train"`
	Validation DataSet `json:"validation"`
	TestDs     DataSet `json:"test_ds"`
}

func dense_to_one_hot(labels []int, num_classes int) [][]int {
	var result [][]int = [][]int{}
	_ = result
	var i int = 0
	_ = i
	for i < len(labels) {
		var row []int = []int{}
		_ = row
		var j int = 0
		_ = j
		for j < num_classes {
			if j == _index(labels, i) {
				row = append(row, 1)
			} else {
				row = append(row, 0)
			}
			j = (j + 1)
		}
		result = append(result, row)
		i = (i + 1)
	}
	return result
}

func new_dataset(images [][]int, labels [][]int) DataSet {
	return DataSet{
		Images:          images,
		Labels:          labels,
		NumExamples:     len(images),
		IndexInEpoch:    0,
		EpochsCompleted: 0,
	}
}

type BatchResult struct {
	Dataset DataSet `json:"dataset"`
	Images  [][]int `json:"images"`
	Labels  [][]int `json:"labels"`
}

func next_batch(ds DataSet, batch_size int) BatchResult {
	var start int = ds.IndexInEpoch
	_ = start
	if (start + batch_size) > ds.NumExamples {
		var rest int = (ds.NumExamples - start)
		_ = rest
		var images_rest [][]int = ds.Images[start:ds.NumExamples]
		_ = images_rest
		var labels_rest [][]int = ds.Labels[start:ds.NumExamples]
		_ = labels_rest
		var new_index int = (batch_size - rest)
		_ = new_index
		var images_new [][]int = ds.Images[0:new_index]
		_ = images_new
		var labels_new [][]int = ds.Labels[0:new_index]
		_ = labels_new
		var batch_images [][]int = _concat(images_rest, images_new)
		_ = batch_images
		_ = batch_images
		var batch_labels [][]int = _concat(labels_rest, labels_new)
		_ = batch_labels
		_ = batch_labels
		var new_ds DataSet = DataSet{
			Images:          ds.Images,
			Labels:          ds.Labels,
			NumExamples:     ds.NumExamples,
			IndexInEpoch:    new_index,
			EpochsCompleted: (ds.EpochsCompleted + 1),
		}
		_ = new_ds
		_ = new_ds
		return BatchResult{
			Dataset: new_ds,
			Images:  batch_images,
			Labels:  batch_labels,
		}
	} else {
		var end int = (start + batch_size)
		_ = end
		var batch_images [][]int = ds.Images[start:end]
		_ = batch_images
		_ = batch_images
		var batch_labels [][]int = ds.Labels[start:end]
		_ = batch_labels
		_ = batch_labels
		var new_ds DataSet = DataSet{
			Images:          ds.Images,
			Labels:          ds.Labels,
			NumExamples:     ds.NumExamples,
			IndexInEpoch:    end,
			EpochsCompleted: ds.EpochsCompleted,
		}
		_ = new_ds
		_ = new_ds
		return BatchResult{
			Dataset: new_ds,
			Images:  batch_images,
			Labels:  batch_labels,
		}
	}
}

func read_data_sets(train_images [][]int, train_labels_raw []int, test_images [][]int, test_labels_raw []int, validation_size int, num_classes int) Datasets {
	var train_labels [][]int = dense_to_one_hot(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(train_labels_raw), num_classes)
	_ = train_labels
	var test_labels [][]int = dense_to_one_hot(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(test_labels_raw), num_classes)
	_ = test_labels
	var validation_images [][]int = train_images[0:validation_size]
	_ = validation_images
	var validation_labels [][]int = train_labels[0:validation_size]
	_ = validation_labels
	var train_images_rest [][]int = train_images[validation_size:len(train_images)]
	_ = train_images_rest
	var train_labels_rest [][]int = train_labels[validation_size:len(train_labels)]
	_ = train_labels_rest
	var train DataSet = new_dataset(func(v any) [][]int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]int{}
			}
			out := make([][]int, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []int {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]int); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []int{}
						}
						out := make([]int, len(arr))
						for i, x := range arr {
							out[i] = x.(int)
						}
						return out
					}
					return v.([]int)
				}(x)
			}
			return out
		}
		return v.([][]int)
	}(train_images_rest), func(v any) [][]int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]int{}
			}
			out := make([][]int, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []int {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]int); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []int{}
						}
						out := make([]int, len(arr))
						for i, x := range arr {
							out[i] = x.(int)
						}
						return out
					}
					return v.([]int)
				}(x)
			}
			return out
		}
		return v.([][]int)
	}(train_labels_rest))
	_ = train
	_ = train
	var validation DataSet = new_dataset(func(v any) [][]int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]int{}
			}
			out := make([][]int, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []int {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]int); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []int{}
						}
						out := make([]int, len(arr))
						for i, x := range arr {
							out[i] = x.(int)
						}
						return out
					}
					return v.([]int)
				}(x)
			}
			return out
		}
		return v.([][]int)
	}(validation_images), func(v any) [][]int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]int{}
			}
			out := make([][]int, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []int {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]int); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []int{}
						}
						out := make([]int, len(arr))
						for i, x := range arr {
							out[i] = x.(int)
						}
						return out
					}
					return v.([]int)
				}(x)
			}
			return out
		}
		return v.([][]int)
	}(validation_labels))
	_ = validation
	_ = validation
	var testset DataSet = new_dataset(func(v any) [][]int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]int{}
			}
			out := make([][]int, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []int {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]int); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []int{}
						}
						out := make([]int, len(arr))
						for i, x := range arr {
							out[i] = x.(int)
						}
						return out
					}
					return v.([]int)
				}(x)
			}
			return out
		}
		return v.([][]int)
	}(test_images), func(v any) [][]int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]int{}
			}
			out := make([][]int, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []int {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]int); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []int{}
						}
						out := make([]int, len(arr))
						for i, x := range arr {
							out[i] = x.(int)
						}
						return out
					}
					return v.([]int)
				}(x)
			}
			return out
		}
		return v.([][]int)
	}(test_labels))
	_ = testset
	_ = testset
	return Datasets{
		Train:      train,
		Validation: validation,
		TestDs:     testset,
	}
}

func mochiMain() {
	var train_images [][]int = [][]int{[]int{0, 1}, []int{1, 2}, []int{2, 3}, []int{3, 4}, []int{4, 5}}
	_ = train_images
	var train_labels_raw []int = []int{0, 1, 2, 3, 4}
	_ = train_labels_raw
	var test_images [][]int = [][]int{[]int{5, 6}, []int{6, 7}}
	_ = test_images
	var test_labels_raw []int = []int{5, 6}
	_ = test_labels_raw
	var data Datasets = read_data_sets(func(v any) [][]int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]int{}
			}
			out := make([][]int, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []int {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]int); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []int{}
						}
						out := make([]int, len(arr))
						for i, x := range arr {
							out[i] = x.(int)
						}
						return out
					}
					return v.([]int)
				}(x)
			}
			return out
		}
		return v.([][]int)
	}(train_images), func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(train_labels_raw), func(v any) [][]int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]int{}
			}
			out := make([][]int, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []int {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]int); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []int{}
						}
						out := make([]int, len(arr))
						for i, x := range arr {
							out[i] = x.(int)
						}
						return out
					}
					return v.([]int)
				}(x)
			}
			return out
		}
		return v.([][]int)
	}(test_images), func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(test_labels_raw), 2, 10)
	_ = data
	var ds DataSet = data.Train
	_ = ds
	var res BatchResult = next_batch(ds, 2)
	_ = res
	ds = res.Dataset
	fmt.Println(fmt.Sprint(res.Images))
	fmt.Println(fmt.Sprint(res.Labels))
	res = next_batch(ds, 2)
	ds = res.Dataset
	fmt.Println(fmt.Sprint(res.Images))
	fmt.Println(fmt.Sprint(res.Labels))
	res = next_batch(ds, 2)
	ds = res.Dataset
	fmt.Println(fmt.Sprint(res.Images))
	fmt.Println(fmt.Sprint(res.Labels))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
