//go:build ignore

// Generated by Mochi v0.10.64 on 2025-08-12 09:24:20 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	math "math"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _mod(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

var seed int

func rand() int {
	seed = _mod(((seed * 1103515245) + 12345), 2147483648)
	return seed
}

func randint(low int, high int) int {
	return (_mod(rand(), ((high-low)+1)) + low)
}

func expApprox(x float64) float64 {
	var y float64 = x
	_ = y
	var is_neg bool = false
	_ = is_neg
	if x < 0.0 {
		is_neg = true
		y = (0 - x)
	}
	var term float64 = 1.0
	_ = term
	var sum float64 = 1.0
	_ = sum
	var n int = 1
	_ = n
	for n < 30 {
		term = (float64((term * y)) / float64(n))
		sum = (sum + term)
		n = (n + 1)
	}
	if is_neg {
		return (float64(1.0) / float64(sum))
	}
	return sum
}

func sigmoid(x float64) float64 {
	return (float64(1.0) / float64((1.0 + expApprox((0 - x)))))
}

func sigmoid_derivative(sig_val float64) float64 {
	return (sig_val * (1.0 - sig_val))
}

var INITIAL_VALUE float64

func forward_propagation(expected int, number_propagations int) float64 {
	var weight float64 = ((2.0 * float64(randint(1, 100))) - 1.0)
	_ = weight
	var layer_1 float64 = 0.0
	_ = layer_1
	var i int = 0
	_ = i
	for i < number_propagations {
		layer_1 = sigmoid((INITIAL_VALUE * weight))
		var layer_1_error float64 = ((float64(expected) / float64(100.0)) - layer_1)
		_ = layer_1_error
		var layer_1_delta float64 = (layer_1_error * sigmoid_derivative(layer_1))
		_ = layer_1_delta
		weight = (weight + (INITIAL_VALUE * layer_1_delta))
		i = (i + 1)
	}
	return (layer_1 * 100.0)
}

var result float64

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		seed = 1
		INITIAL_VALUE = 0.02
		seed = 1
		result = forward_propagation(32, 450000)
		fmt.Println(func() string {
			f := float64(result)
			if f == 0 && math.Signbit(f) {
				return "-0"
			}
			if f == float64(int(f)) {
				return fmt.Sprintf("%.1f", f)
			}
			return fmt.Sprint(f)
		}())
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
