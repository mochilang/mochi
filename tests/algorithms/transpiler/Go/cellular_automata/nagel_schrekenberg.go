//go:build ignore

// Generated by Mochi v0.10.59 on 2025-08-06 21:05:45 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

var seed int

var NEG_ONE int

func rand() int {
	seed = (((seed * 1103515245) + 12345) % 2147483648)
	return seed
}

func randint(a int, b int) int {
	var r int = rand()
	_ = r
	_ = r
	return (a + (r % ((b - a) + 1)))
}

func random() float64 {
	return ((1.0 * float64(rand())) / 2147483648.0)
}

func construct_highway(number_of_cells int, frequency int, initial_speed int, random_frequency bool, random_speed bool, max_speed int) [][]int {
	var row []int = []int{}
	_ = row
	var i int = 0
	_ = i
	for i < number_of_cells {
		row = append(row, (0 - 1))
		i = (i + 1)
	}
	var highway [][]int = [][]int{}
	_ = highway
	highway = append(highway, row)
	i = 0
	if initial_speed < 0 {
		initial_speed = 0
	}
	for i < number_of_cells {
		var speed int = initial_speed
		_ = speed
		if random_speed {
			speed = randint(0, max_speed)
		}
		highway[0][i] = speed
		var step int = frequency
		_ = step
		if random_frequency {
			step = randint(1, (max_speed * 2))
		}
		i = (i + step)
	}
	return highway
}

func get_distance(highway_now []int, car_index int) int {
	var distance int = 0
	_ = distance
	var i int = (car_index + 1)
	_ = i
	for i < len(highway_now) {
		if highway_now[i] > NEG_ONE {
			return distance
		}
		distance = (distance + 1)
		i = (i + 1)
	}
	return (distance + get_distance(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(highway_now), (0-1)))
}

func update(highway_now []int, probability float64, max_speed int) []int {
	var number_of_cells int = len(highway_now)
	_ = number_of_cells
	var next_highway []int = []int{}
	_ = next_highway
	var i int = 0
	_ = i
	for i < number_of_cells {
		next_highway = append(next_highway, (0 - 1))
		i = (i + 1)
	}
	var car_index int = 0
	_ = car_index
	for car_index < number_of_cells {
		var speed int = highway_now[car_index]
		_ = speed
		if speed > NEG_ONE {
			var new_speed int = (speed + 1)
			_ = new_speed
			if new_speed > max_speed {
				new_speed = max_speed
			}
			var dn int = (get_distance(func(v any) []int {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]int); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []int{}
					}
					out := make([]int, len(arr))
					for i, x := range arr {
						out[i] = x.(int)
					}
					return out
				}
				return v.([]int)
			}(highway_now), car_index) - 1)
			_ = dn
			if new_speed > dn {
				new_speed = dn
			}
			if random() < probability {
				new_speed = (new_speed - 1)
				if new_speed < 0 {
					new_speed = 0
				}
			}
			next_highway[car_index] = new_speed
		}
		car_index = (car_index + 1)
	}
	return next_highway
}

func simulate(highway [][]int, number_of_update int, probability float64, max_speed int) [][]int {
	var number_of_cells int = len(highway[0])
	_ = number_of_cells
	var i int = 0
	_ = i
	for i < number_of_update {
		var next_speeds []int = update(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(highway[i]), probability, max_speed)
		_ = next_speeds
		var real_next []int = []int{}
		_ = real_next
		var j int = 0
		_ = j
		for j < number_of_cells {
			real_next = append(real_next, (0 - 1))
			j = (j + 1)
		}
		var k int = 0
		_ = k
		for k < number_of_cells {
			var speed int = next_speeds[k]
			_ = speed
			if speed > NEG_ONE {
				var index int = ((k + speed) % number_of_cells)
				_ = index
				real_next[index] = speed
			}
			k = (k + 1)
		}
		highway = append(highway, real_next)
		i = (i + 1)
	}
	return highway
}

func mochiMain() {
	var ex1 [][]int = simulate(func(v any) [][]int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]int{}
			}
			out := make([][]int, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []int {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]int); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []int{}
						}
						out := make([]int, len(arr))
						for i, x := range arr {
							out[i] = x.(int)
						}
						return out
					}
					return v.([]int)
				}(x)
			}
			return out
		}
		return v.([][]int)
	}(construct_highway(6, 3, 0, false, false, 2)), 2, 0.0, 2)
	_ = ex1
	fmt.Println(fmt.Sprint(ex1))
	var ex2 [][]int = simulate(func(v any) [][]int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]int{}
			}
			out := make([][]int, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []int {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]int); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []int{}
						}
						out := make([]int, len(arr))
						for i, x := range arr {
							out[i] = x.(int)
						}
						return out
					}
					return v.([]int)
				}(x)
			}
			return out
		}
		return v.([][]int)
	}(construct_highway(5, 2, (0-2), false, false, 2)), 3, 0.0, 2)
	_ = ex2
	fmt.Println(fmt.Sprint(ex2))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		seed = 1
		NEG_ONE = (0 - 1)
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
