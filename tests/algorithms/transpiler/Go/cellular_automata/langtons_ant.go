//go:build ignore

// Generated by Mochi v0.10.59 on 2025-08-06 21:05:40 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"reflect"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func create_board(width int, height int) [][]bool {
	var board [][]bool = [][]bool{}
	_ = board
	var i int = 0
	_ = i
	for i < height {
		var row []bool = []bool{}
		_ = row
		var j int = 0
		_ = j
		for j < width {
			row = append(row, true)
			j = (j + 1)
		}
		board = append(board, row)
		i = (i + 1)
	}
	return board
}

func move_ant(board [][]bool, x int, y int, direction int) []int {
	if board[x][y] {
		direction = ((direction + 1) % 4)
	} else {
		direction = ((direction + 3) % 4)
	}
	var old_x int = x
	_ = old_x
	var old_y int = y
	_ = old_y
	if direction == 0 {
		x = (x - 1)
	} else {
		if direction == 1 {
			y = (y + 1)
		} else {
			if direction == 2 {
				x = (x + 1)
			} else {
				y = (y - 1)
			}
		}
	}
	board[old_x][old_y] = !board[old_x][old_y]
	return []int{x, y, direction}
}

func langtons_ant(width int, height int, steps int) [][]bool {
	var board [][]bool = create_board(width, height)
	_ = board
	var x int = (width / 2)
	_ = x
	var y int = (height / 2)
	_ = y
	var dir int = 3
	_ = dir
	var s int = 0
	_ = s
	for s < steps {
		var state []int = move_ant(func(v any) [][]bool {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]bool); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]bool{}
				}
				out := make([][]bool, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []bool {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]bool); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []bool{}
							}
							out := make([]bool, len(arr))
							for i, x := range arr {
								out[i] = x.(bool)
							}
							return out
						}
						return v.([]bool)
					}(x)
				}
				return out
			}
			return v.([][]bool)
		}(board), x, y, dir)
		_ = state
		x = state[0]
		y = state[1]
		dir = state[2]
		s = (s + 1)
	}
	return board
}

var __mochi_test_header_printed bool

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		if !__mochi_test_header_printed {
			fmt.Println("[94;1mtests/github/TheAlgorithms/Mochi/cellular_automata/langtons_ant.mochi[0;22m")
			__mochi_test_header_printed = true
		}
		func() {
			func() {
				defer func() { recover() }()
				var board [][]bool = langtons_ant(2, 2, 1)
				_ = board
				_ = board
				_ = (reflect.DeepEqual(board, [][]bool{[]bool{true, true}, []bool{true, false}}))
			}()
			fmt.Printf("   \x1b[33mtest\x1b[0m %s                   ... \x1b[32mok\x1b[0m (1.0ms)\n", "first move")
		}()

		if !__mochi_test_header_printed {
			fmt.Println("[94;1mtests/github/TheAlgorithms/Mochi/cellular_automata/langtons_ant.mochi[0;22m")
			__mochi_test_header_printed = true
		}
		func() {
			func() {
				defer func() { recover() }()
				var board [][]bool = langtons_ant(2, 2, 2)
				_ = board
				_ = board
				_ = (reflect.DeepEqual(board, [][]bool{[]bool{true, false}, []bool{true, false}}))
			}()
			fmt.Printf("   \x1b[33mtest\x1b[0m %s                   ... \x1b[32mok\x1b[0m (1.0ms)\n", "second move")
		}()

		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
