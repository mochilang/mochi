//go:build ignore

// Generated by Mochi v0.10.59 on 2025-08-06 21:05:24 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"strings"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

var GLIDER [][]int

var BLINKER [][]int

func new_generation(cells [][]int) [][]int {
	var rows int = len(cells)
	_ = rows
	var cols int = len(cells[0])
	_ = cols
	var next [][]int = [][]int{}
	_ = next
	var i int = 0
	_ = i
	for i < rows {
		var row []int = []int{}
		_ = row
		var j int = 0
		_ = j
		for j < cols {
			var count int = 0
			_ = count
			if (i > 0) && (j > 0) {
				count = (count + cells[(i - 1)][(j-1)])
			}
			if i > 0 {
				count = (count + cells[(i - 1)][j])
			}
			if (i > 0) && (j < (cols - 1)) {
				count = (count + cells[(i - 1)][(j+1)])
			}
			if j > 0 {
				count = (count + cells[i][(j-1)])
			}
			if j < (cols - 1) {
				count = (count + cells[i][(j+1)])
			}
			if (i < (rows - 1)) && (j > 0) {
				count = (count + cells[(i + 1)][(j-1)])
			}
			if i < (rows - 1) {
				count = (count + cells[(i + 1)][j])
			}
			if (i < (rows - 1)) && (j < (cols - 1)) {
				count = (count + cells[(i + 1)][(j+1)])
			}
			var alive bool = (cells[i][j] == 1)
			_ = alive
			if ((alive && (count >= 2)) && (count <= 3)) || (!alive && (count == 3)) {
				row = append(row, 1)
			} else {
				row = append(row, 0)
			}
			j = (j + 1)
		}
		next = append(next, row)
		i = (i + 1)
	}
	return next
}

func generate_generations(cells [][]int, frames int) [][][]int {
	var result [][][]int = [][][]int{}
	_ = result
	var i int = 0
	_ = i
	var current [][]int = cells
	_ = current
	for i < frames {
		result = append(result, current)
		current = new_generation(func(v any) [][]int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]int{}
				}
				out := make([][]int, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []int {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]int); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []int{}
							}
							out := make([]int, len(arr))
							for i, x := range arr {
								out[i] = x.(int)
							}
							return out
						}
						return v.([]int)
					}(x)
				}
				return out
			}
			return v.([][]int)
		}(current))
		i = (i + 1)
	}
	return result
}

func mochiMain() {
	var frames [][][]int = generate_generations(func(v any) [][]int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]int{}
			}
			out := make([][]int, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []int {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]int); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []int{}
						}
						out := make([]int, len(arr))
						for i, x := range arr {
							out[i] = x.(int)
						}
						return out
					}
					return v.([]int)
				}(x)
			}
			return out
		}
		return v.([][]int)
	}(GLIDER), 4)
	_ = frames
	var i int = 0
	_ = i
	for i < len(frames) {
		fmt.Println(func() string {
			b, _ := json.Marshal(frames[i])
			s := string(b)
			s = strings.ReplaceAll(s, ":", ": ")
			s = strings.ReplaceAll(s, ",", ", ")
			s = strings.ReplaceAll(s, "}, {", "},{")
			return s
		}())
		i = (i + 1)
	}
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		GLIDER = [][]int{[]int{0, 1, 0, 0, 0, 0, 0, 0}, []int{0, 0, 1, 0, 0, 0, 0, 0}, []int{1, 1, 1, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0, 0, 0}}
		BLINKER = [][]int{[]int{0, 1, 0}, []int{0, 1, 0}, []int{0, 1, 0}}
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
