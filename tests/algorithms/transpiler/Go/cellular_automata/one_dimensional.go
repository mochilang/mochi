//go:build ignore

// Generated by Mochi v0.10.59 on 2025-08-06 21:07:25 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func format_ruleset(ruleset int) []int {
	var rs int = ruleset
	_ = rs
	var bits_rev []int = []int{}
	_ = bits_rev
	var i int = 0
	_ = i
	for i < 8 {
		bits_rev = append(bits_rev, (rs % 2))
		rs = (rs / 2)
		i = (i + 1)
	}
	var bits []int = []int{}
	_ = bits
	var j int = (len(bits_rev) - 1)
	_ = j
	for j >= 0 {
		bits = append(bits, bits_rev[j])
		j = (j - 1)
	}
	return bits
}

func new_generation(cells [][]int, rules []int, time_ int) []int {
	var population int = len(cells[0])
	_ = population
	var next_generation []int = []int{}
	_ = next_generation
	var i int = 0
	_ = i
	for i < population {
		var left_neighbor int = func() int {
			if i == 0 {
				return 0
			} else {
				return cells[time_][(i - 1)]
			}
		}()
		_ = left_neighbor
		var right_neighbor int = func() int {
			if i == (population - 1) {
				return 0
			} else {
				return cells[time_][(i + 1)]
			}
		}()
		_ = right_neighbor
		var center int = cells[time_][i]
		_ = center
		var idx int = (7 - (((left_neighbor * 4) + (center * 2)) + right_neighbor))
		_ = idx
		next_generation = append(next_generation, rules[idx])
		i = (i + 1)
	}
	return next_generation
}

func cells_to_string(row []int) string {
	var result string = ""
	_ = result
	var i int = 0
	_ = i
	for i < len(row) {
		if row[i] == 1 {
			result = (result + "#")
		} else {
			result = (result + ".")
		}
		i = (i + 1)
	}
	return result
}

var initial []int

var cells [][]int

var rules []int

var time_ int

var t int

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		initial = []int{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
		cells = [][]int{initial}
		rules = format_ruleset(30)
		time_ = 0
		for time_ < 16 {
			var next []int = new_generation(func(v any) [][]int {
				if v == nil {
					return nil
				}
				if vv, ok := v.([][]int); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return [][]int{}
					}
					out := make([][]int, len(arr))
					for i, x := range arr {
						out[i] = func(v any) []int {
							if v == nil {
								return nil
							}
							if vv, ok := v.([]int); ok {
								return vv
							}
							if arr, ok := v.([]any); ok {
								if len(arr) == 0 {
									return []int{}
								}
								out := make([]int, len(arr))
								for i, x := range arr {
									out[i] = x.(int)
								}
								return out
							}
							return v.([]int)
						}(x)
					}
					return out
				}
				return v.([][]int)
			}(cells), func(v any) []int {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]int); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []int{}
					}
					out := make([]int, len(arr))
					for i, x := range arr {
						out[i] = x.(int)
					}
					return out
				}
				return v.([]int)
			}(rules), time_)
			_ = next
			cells = append(cells, next)
			time_ = (time_ + 1)
		}
		t = 0
		for t < len(cells) {
			fmt.Println(cells_to_string(func(v any) []int {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]int); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []int{}
					}
					out := make([]int, len(arr))
					for i, x := range arr {
						out[i] = x.(int)
					}
					return out
				}
				return v.([]int)
			}(cells[t])))
			t = (t + 1)
		}
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
