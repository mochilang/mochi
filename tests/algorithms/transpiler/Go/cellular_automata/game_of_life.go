//go:build ignore

// Generated by Mochi v0.10.59 on 2025-08-06 21:05:31 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func count_alive_neighbours(board [][]bool, row int, col int) int {
	var size int = len(board)
	_ = size
	var alive int = 0
	_ = alive
	var dr int = (0 - 1)
	_ = dr
	for dr < 2 {
		var dc int = (0 - 1)
		_ = dc
		for dc < 2 {
			var nr int = (row + dr)
			_ = nr
			var nc int = (col + dc)
			_ = nc
			if (((!((dr == 0) && (dc == 0)) && (nr >= 0)) && (nr < size)) && (nc >= 0)) && (nc < size) {
				if board[nr][nc] {
					alive = (alive + 1)
				}
			}
			dc = (dc + 1)
		}
		dr = (dr + 1)
	}
	return alive
}

func next_state(current bool, alive int) bool {
	var state bool = current
	_ = state
	if current {
		if alive < 2 {
			state = false
		} else {
			if (alive == 2) || (alive == 3) {
				state = true
			} else {
				state = false
			}
		}
	} else {
		if alive == 3 {
			state = true
		}
	}
	return state
}

func step(board [][]bool) [][]bool {
	var size int = len(board)
	_ = size
	var new_board [][]bool = [][]bool{}
	_ = new_board
	var r int = 0
	_ = r
	for r < size {
		var new_row []bool = []bool{}
		_ = new_row
		var c int = 0
		_ = c
		for c < size {
			var alive int = count_alive_neighbours(func(v any) [][]bool {
				if v == nil {
					return nil
				}
				if vv, ok := v.([][]bool); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return [][]bool{}
					}
					out := make([][]bool, len(arr))
					for i, x := range arr {
						out[i] = func(v any) []bool {
							if v == nil {
								return nil
							}
							if vv, ok := v.([]bool); ok {
								return vv
							}
							if arr, ok := v.([]any); ok {
								if len(arr) == 0 {
									return []bool{}
								}
								out := make([]bool, len(arr))
								for i, x := range arr {
									out[i] = x.(bool)
								}
								return out
							}
							return v.([]bool)
						}(x)
					}
					return out
				}
				return v.([][]bool)
			}(board), r, c)
			_ = alive
			var cell bool = board[r][c]
			_ = cell
			var updated bool = next_state(cell, alive)
			_ = updated
			new_row = append(new_row, updated)
			c = (c + 1)
		}
		new_board = append(new_board, new_row)
		r = (r + 1)
	}
	return new_board
}

func show(board [][]bool) {
	var r int = 0
	_ = r
	for r < len(board) {
		var line string = ""
		_ = line
		var c int = 0
		_ = c
		for c < len(board[r]) {
			if board[r][c] {
				line = (line + "#")
			} else {
				line = (line + ".")
			}
			c = (c + 1)
		}
		fmt.Println(line)
		r = (r + 1)
	}
}

var glider [][]bool

var board [][]bool

var i int

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		glider = [][]bool{[]bool{false, true, false, false, false}, []bool{false, false, true, false, false}, []bool{true, true, true, false, false}, []bool{false, false, false, false, false}, []bool{false, false, false, false, false}}
		board = glider
		fmt.Println("Initial")
		show(func(v any) [][]bool {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]bool); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]bool{}
				}
				out := make([][]bool, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []bool {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]bool); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []bool{}
							}
							out := make([]bool, len(arr))
							for i, x := range arr {
								out[i] = x.(bool)
							}
							return out
						}
						return v.([]bool)
					}(x)
				}
				return out
			}
			return v.([][]bool)
		}(board))
		i = 0
		for i < 4 {
			board = step(func(v any) [][]bool {
				if v == nil {
					return nil
				}
				if vv, ok := v.([][]bool); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return [][]bool{}
					}
					out := make([][]bool, len(arr))
					for i, x := range arr {
						out[i] = func(v any) []bool {
							if v == nil {
								return nil
							}
							if vv, ok := v.([]bool); ok {
								return vv
							}
							if arr, ok := v.([]any); ok {
								if len(arr) == 0 {
									return []bool{}
								}
								out := make([]bool, len(arr))
								for i, x := range arr {
									out[i] = x.(bool)
								}
								return out
							}
							return v.([]bool)
						}(x)
					}
					return out
				}
				return v.([][]bool)
			}(board))
			fmt.Println(("\nStep " + fmt.Sprint((i + 1))))
			show(func(v any) [][]bool {
				if v == nil {
					return nil
				}
				if vv, ok := v.([][]bool); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return [][]bool{}
					}
					out := make([][]bool, len(arr))
					for i, x := range arr {
						out[i] = func(v any) []bool {
							if v == nil {
								return nil
							}
							if vv, ok := v.([]bool); ok {
								return vv
							}
							if arr, ok := v.([]any); ok {
								if len(arr) == 0 {
									return []bool{}
								}
								out := make([]bool, len(arr))
								for i, x := range arr {
									out[i] = x.(bool)
								}
								return out
							}
							return v.([]bool)
						}(x)
					}
					return out
				}
				return v.([][]bool)
			}(board))
			i = (i + 1)
		}
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
