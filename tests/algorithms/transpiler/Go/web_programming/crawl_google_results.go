//go:build ignore

// Generated by Mochi v0.10.70 on 2025-08-23 14:34:51 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func index_of_from(s string, sub string, start int) int {
	var i int = start
	_ = i
	var max int = (len(s) - len(sub))
	_ = max
	for i <= max {
		if string([]rune(s)[i:(i+len(sub))]) == sub {
			return i
		}
		i = (i + 1)
	}
	return (0 - 1)
}

func extract_links(html string) []map[string]string {
	var res []map[string]string = []map[string]string{}
	_ = res
	var i int = 0
	_ = i
	for {
		var tag_start int = index_of_from(html, "<a class=\"eZt8xd\"", i)
		_ = tag_start
		if tag_start == (0 - 1) {
			break
		}
		var href_start int = index_of_from(html, "href=\"", tag_start)
		_ = href_start
		if href_start == (0 - 1) {
			break
		}
		href_start = (href_start + len("href=\""))
		var href_end int = index_of_from(html, "\"", href_start)
		_ = href_end
		if href_end == (0 - 1) {
			break
		}
		var href string = string([]rune(html)[href_start:href_end])
		_ = href
		var text_start int = (index_of_from(html, ">", href_end) + 1)
		_ = text_start
		var text_end int = index_of_from(html, "</a>", text_start)
		_ = text_end
		if text_end == (0 - 1) {
			break
		}
		var text string = string([]rune(html)[text_start:text_end])
		_ = text
		link := map[string]string{"href": href, "text": text}
		_ = link
		res = append(res, link)
		i = (text_end + len("</a>"))
	}
	return res
}

func mochiMain() {
	var html string = (("<div><a class=\"eZt8xd\" href=\"/url?q=http://example1.com\">Example1</a>" + "<a class=\"eZt8xd\" href=\"/maps\">Maps</a>") + "<a class=\"eZt8xd\" href=\"/url?q=http://example2.com\">Example2</a></div>")
	_ = html
	var links []map[string]string = extract_links(html)
	_ = links
	fmt.Println(fmt.Sprint(len(links)))
	var i int = 0
	_ = i
	for (i < len(links)) && (i < 5) {
		var link map[string]string = _index(links, i)
		_ = link
		var href string = link["href"]
		_ = href
		var text string = link["text"]
		_ = text
		if text == "Maps" {
			fmt.Println(href)
		} else {
			fmt.Println(("https://google.com" + href))
		}
		i = (i + 1)
	}
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
