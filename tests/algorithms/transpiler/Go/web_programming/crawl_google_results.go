//go:build ignore

// Generated by Mochi v0.10.63 on 2025-08-11 15:36:34 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

func _len(v any) int {
	switch t := v.(type) {
	case string:
		return len([]rune(t))
	case []any:
		return len(t)
	case []string:
		return len(t)
	case []int:
		return len(t)
	case []float64:
		return len(t)
	case map[string]any:
		return len(t)
	case map[int]any:
		return len(t)
	case map[any]any:
		return len(t)
	default:
		return 0
	}
}

func index_of_from(s string, sub string, start int) int {
	var i int = start
	_ = i
	max := (len(s) - len(sub))
	_ = max
	for i <= max {
		if string([]rune(s)[i:(i+len(sub))]) == sub {
			return i
		}
		i = (i + 1)
	}
	return (0 - 1)
}

func extract_links(html string) []map[string]string {
	var res []map[string]string = []map[string]string{}
	_ = res
	var i int = 0
	_ = i
	for {
		tag_start := index_of_from(html, "<a class=\"eZt8xd\"", i)
		_ = tag_start
		if tag_start == (0 - 1) {
			break
		}
		var href_start any = index_of_from(html, "href=\"", tag_start)
		_ = href_start
		if href_start.(int) == (0 - 1) {
			break
		}
		href_start = (href_start.(int) + len("href=\""))
		href_end := index_of_from(html, "\"", href_start.(int))
		_ = href_end
		if href_end == (0 - 1) {
			break
		}
		href := string([]rune(html)[href_start:href_end])
		_ = href
		text_start := (index_of_from(html, ">", href_end) + 1)
		_ = text_start
		text_end := index_of_from(html, "</a>", text_start)
		_ = text_end
		if text_end == (0 - 1) {
			break
		}
		text := string([]rune(html)[text_start:text_end])
		_ = text
		var link map[any]any = map[string]string{"href": href, "text": text}
		_ = link
		res = append(res, link)
		i = (text_end + len("</a>"))
	}
	return res
}

func mochiMain() {
	var html string = (("<div><a class=\"eZt8xd\" href=\"/url?q=http://example1.com\">Example1</a>" + "<a class=\"eZt8xd\" href=\"/maps\">Maps</a>") + "<a class=\"eZt8xd\" href=\"/url?q=http://example2.com\">Example2</a></div>")
	_ = html
	links := extract_links(html)
	_ = links
	fmt.Println(fmt.Sprint(_len(links)))
	var i int = 0
	_ = i
	for (i < _len(links)) && (i < 5) {
		link := _index(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(links), i)
		_ = link
		href := func(v any) map[string]any {
			if v == nil {
				return nil
			}
			if vv, ok := v.(map[string]any); ok {
				return vv
			}
			return nil
		}(link)["href"]
		_ = href
		text := func(v any) map[string]any {
			if v == nil {
				return nil
			}
			if vv, ok := v.(map[string]any); ok {
				return vv
			}
			return nil
		}(link)["text"]
		_ = text
		if fmt.Sprint(text) == "Maps" {
			fmt.Println(href)
		} else {
			fmt.Println(("https://google.com" + fmt.Sprint(href)))
		}
		i = (i + 1)
	}
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
