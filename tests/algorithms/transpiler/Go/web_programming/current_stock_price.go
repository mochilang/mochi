//go:build ignore

// Generated by Mochi v0.10.63 on 2025-08-11 15:36:38 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

func find(text string, pattern string, start int) int {
	var i int = start
	_ = i
	limit := (len(text) - len(pattern))
	_ = limit
	for i <= limit {
		if _substr(text, i, (i+len(pattern))) == pattern {
			return i
		}
		i = (i + 1)
	}
	return (0 - 1)
}

func stock_price(symbol string) string {
	var pages map[any]any = map[string]string{"AAPL": "<span data-testid=\"qsp-price\">228.43</span>", "AMZN": "<span data-testid=\"qsp-price\">201.85</span>", "IBM": "<span data-testid=\"qsp-price\">210.30</span>", "GOOG": "<span data-testid=\"qsp-price\">177.86</span>", "MSFT": "<span data-testid=\"qsp-price\">414.82</span>", "ORCL": "<span data-testid=\"qsp-price\">188.87</span>"}
	_ = pages
	if func() bool { _, ok := pages[symbol]; return ok }() {
		var html string = pages[symbol]
		_ = html
		var marker string = "<span data-testid=\"qsp-price\">"
		_ = marker
		start_idx := find(html, marker, 0)
		_ = start_idx
		if start_idx != (0 - 1) {
			price_start := (start_idx + len(marker))
			_ = price_start
			end_idx := find(html, "</span>", price_start)
			_ = end_idx
			if end_idx != (0 - 1) {
				return _substr(html, price_start, end_idx)
			}
		}
	}
	return "No <fin-streamer> tag with the specified data-testid attribute found."
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		for _, symbol := range []string{"AAPL", "AMZN", "IBM", "GOOG", "MSFT", "ORCL"} {
			fmt.Println(((("Current " + symbol) + " stock price is ") + stock_price(symbol)))
		}
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
