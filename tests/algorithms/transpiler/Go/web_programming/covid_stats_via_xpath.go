//go:build ignore

// Generated by Mochi v0.10.63 on 2025-08-11 15:36:33 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

type CovidData struct {
	Cases     int `json:"cases"`
	Deaths    int `json:"deaths"`
	Recovered int `json:"recovered"`
}

func parse_int(s string) int {
	var value int = 0
	_ = value
	var i int = 0
	_ = i
	for i < len(s) {
		ch := _substr(s, i, (i + 1))
		_ = ch
		if fmt.Sprint(ch) == "," {
			i = (i + 1)
			continue
		}
		value = ((value * 10) + func() int { n, _ := strconv.Atoi(fmt.Sprint(ch)); return n }())
		i = (i + 1)
	}
	return value
}

func find(haystack string, needle string, start int) int {
	nlen := len(needle)
	_ = nlen
	var i int = start
	_ = i
	for i <= (len(haystack) - nlen) {
		var j int = 0
		_ = j
		var matched bool = true
		_ = matched
		for j < nlen {
			if _substr(haystack, (i+j), ((i+j)+1)) != _substr(needle, j, (j+1)) {
				matched = false
				break
			}
			j = (j + 1)
		}
		if matched {
			return i
		}
		i = (i + 1)
	}
	return (0 - 1)
}

func extract_numbers(html string) []int {
	var nums []int = []int{}
	_ = nums
	var pos int = 0
	_ = pos
	var start_tag string = "<span>"
	_ = start_tag
	var end_tag string = "</span>"
	_ = end_tag
	for {
		s := find(html, start_tag, pos)
		_ = s
		if s == (0 - 1) {
			break
		}
		content_start := (s + len(start_tag))
		_ = content_start
		e := find(html, end_tag, content_start)
		_ = e
		if e == (0 - 1) {
			break
		}
		num_str := _substr(html, content_start, e)
		_ = num_str
		nums = append(nums, parse_int(num_str))
		pos = (e + len(end_tag))
	}
	return nums
}

func covid_stats(html string) CovidData {
	nums := extract_numbers(html)
	_ = nums
	_ = nums
	return CovidData{
		Cases: _index(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(nums), 0),
		Deaths: _index(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(nums), 1),
		Recovered: _index(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(nums), 2),
	}
}

func mochiMain() {
	var sample_html string = (("<div class=\"maincounter-number\"><span>123456</span></div>" + "<div class=\"maincounter-number\"><span>7890</span></div>") + "<div class=\"maincounter-number\"><span>101112</span></div>")
	_ = sample_html
	stats := covid_stats(sample_html)
	_ = stats
	fmt.Println(("Total COVID-19 cases in the world: " + fmt.Sprint(CovidData(stats).Cases)))
	fmt.Println(("Total deaths due to COVID-19 in the world: " + fmt.Sprint(CovidData(stats).Deaths)))
	fmt.Println(("Total COVID-19 patients recovered in the world: " + fmt.Sprint(CovidData(stats).Recovered)))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
