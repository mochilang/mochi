//go:build ignore

// Generated by Mochi v0.10.63 on 2025-08-11 15:36:36 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _toFloat(v any) float64 {
	switch t := v.(type) {
	case int:
		return float64(t)
	case int64:
		return float64(t)
	case float64:
		return t
	default:
		return 0
	}
}

type Rate struct {
	Code string  `json:"code"`
	Rate float64 `json:"rate"`
}

var rates []Rate

func rate_of(code string) float64 {
	for _, r := range rates {
		if r.Code == code {
			return r.Rate
		}
	}
	return 0.0
}

func convert_currency(from_ string, to string, amount float64) float64 {
	from_rate := rate_of(from_)
	_ = from_rate
	to_rate := rate_of(to)
	_ = to_rate
	if (_toFloat(from_rate) == 0.0) || (_toFloat(to_rate) == 0.0) {
		return 0.0
	}
	var usd float64 = (float64(amount) / float64(_toFloat(from_rate)))
	_ = usd
	_ = usd
	return float64((usd * _toFloat(to_rate)))
}

var result float64

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		rates = []Rate{Rate{
			Code: "USD",
			Rate: 1.0,
		}, Rate{
			Code: "EUR",
			Rate: 0.9,
		}, Rate{
			Code: "INR",
			Rate: 83.0,
		}, Rate{
			Code: "JPY",
			Rate: 156.0,
		}, Rate{
			Code: "GBP",
			Rate: 0.78,
		}}
		result = convert_currency("USD", "INR", 10.0)
		fmt.Println(fmt.Sprint(result))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
