//go:build ignore

// Generated by Mochi v0.10.63 on 2025-08-11 15:36:35 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

var DIGITS string

func is_digit(ch string) bool {
	var i int = 0
	_ = i
	for i < len(DIGITS) {
		if string(_index([]rune(DIGITS), i)) == ch {
			return true
		}
		i = (i + 1)
	}
	return false
}

func find_substring(haystack string, needle string) int {
	var i int = 0
	_ = i
	for i <= (len(haystack) - len(needle)) {
		var j int = 0
		_ = j
		for j < len(needle) {
			if string(_index([]rune(haystack), (i+j))) != string(_index([]rune(needle), j)) {
				break
			}
			j = (j + 1)
		}
		if j == len(needle) {
			return i
		}
		i = (i + 1)
	}
	return (0 - 1)
}

func extract_citation(html string) string {
	var marker string = "Cited by "
	_ = marker
	idx := find_substring(html, marker)
	_ = idx
	if idx < 0 {
		return ""
	}
	var pos any = (idx + len(marker))
	_ = pos
	var result string = ""
	_ = result
	for pos.(int) < len(html) {
		ch := string(_index([]rune(html), pos))
		_ = ch
		if !is_digit(ch) {
			break
		}
		result = (result + fmt.Sprint(ch))
		pos = (pos.(int) + 1)
	}
	return result
}

func get_citation(base_url string, params map[string]string) string {
	var html string = "<div class=\"gs_ri\"><div class=\"gs_fl\"><a>Cited by 123</a></div></div>"
	_ = html
	_ = html
	return extract_citation(html)
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		DIGITS = "0123456789"
		if fmt.Sprint(__name__) == "__main__" {
			var params map[any]any = map[string]string{"title": "Precisely geometry controlled microsupercapacitors for ultrahigh areal capacitance, volumetric capacitance, and energy density", "journal": "Chem. Mater.", "volume": "30", "pages": "3979-3990", "year": "2018", "hl": "en"}
			_ = params
			fmt.Println(get_citation("https://scholar.google.com/scholar_lookup", params))
		}
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
