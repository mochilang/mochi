//go:build ignore

// Generated by Mochi v0.10.63 on 2025-08-11 15:36:30 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"net/http"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

func _fetch(url string) any {
	resp, err := http.Get(url)
	if err != nil {
		return nil
	}
	defer resp.Body.Close()
	var b any
	if err := json.NewDecoder(resp.Body).Decode(&b); err != nil {
		return nil
	}
	return b
}

func _fetch_Response(url string) Response {
	var out Response
	resp, err := http.Get(url)
	if err != nil {
		return out
	}
	defer resp.Body.Close()
	_ = json.NewDecoder(resp.Body).Decode(&out)
	return out
}

type Intensity struct {
	Forecast int    `json:"forecast"`
	Actual   int    `json:"actual"`
	Index    string `json:"index"`
}

type Entry struct {
	From      string    `json:"from"`
	To        string    `json:"to"`
	Intensity Intensity `json:"intensity"`
}

type Response struct {
	Data []Entry `json:"data"`
}

var BASE_URL string

func fetch_last_half_hour() int {
	var resp Response = _fetch_Response(BASE_URL)
	_ = resp
	var entry Entry = _index(resp.Data, 0)
	_ = entry
	_ = entry
	return entry.Intensity.Actual
}

func fetch_from_to(start string, end string) []Entry {
	var url string = ((((BASE_URL + "/") + start) + "/") + end)
	_ = url
	var resp Response = _fetch_Response(url)
	_ = resp
	_ = resp
	return resp.Data
}

func mochiMain() {
	entries := fetch_from_to("2020-10-01", "2020-10-03")
	_ = entries
	var i int = 0
	_ = i
	for i < len(entries) {
		var e Entry = _index(entries, i)
		_ = e
		fmt.Println("from", e.From, "to", e.To, ":", e.Intensity.Actual)
		i = (i + 1)
	}
	last := fetch_last_half_hour()
	_ = last
	fmt.Println("fetch_last_half_hour() =", last)
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		BASE_URL = "https://api.carbonintensity.org.uk/intensity"
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
