//go:build ignore

// Generated by Mochi v0.10.63 on 2025-08-11 15:36:39 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

var OPENWEATHERMAP_API_KEY string

var WEATHERSTACK_API_KEY string

var OPENWEATHERMAP_URL_BASE string

var WEATHERSTACK_URL_BASE string

func http_get(url string, params map[string]string) map[string]string {
	if func() bool { _, ok := params["q"]; return ok }() {
		return func(v any) map[string]string {
			if v == nil {
				return nil
			}
			if vv, ok := v.(map[string]string); ok {
				return vv
			}
			return nil
		}(map[string]string{"location": params["q"], "temperature": "20"})
	}
	return func(v any) map[string]string {
		if v == nil {
			return nil
		}
		if vv, ok := v.(map[string]string); ok {
			return vv
		}
		return nil
	}(map[string]string{"location": params["query"], "temperature": "20"})
}

func current_weather(location string) []map[string]map[string]string {
	var weather_data []map[string]map[string]string = []map[string]map[string]string{}
	_ = weather_data
	if OPENWEATHERMAP_API_KEY != "" {
		var params_openweathermap map[any]any = map[string]string{"q": location, "appid": OPENWEATHERMAP_API_KEY}
		_ = params_openweathermap
		response_openweathermap := http_get(OPENWEATHERMAP_URL_BASE, params_openweathermap)
		_ = response_openweathermap
		weather_data = append(weather_data, map[string]any{"OpenWeatherMap": response_openweathermap})
	}
	if WEATHERSTACK_API_KEY != "" {
		var params_weatherstack map[any]any = map[string]string{"query": location, "access_key": WEATHERSTACK_API_KEY}
		_ = params_weatherstack
		response_weatherstack := http_get(WEATHERSTACK_URL_BASE, params_weatherstack)
		_ = response_weatherstack
		weather_data = append(weather_data, map[string]any{"Weatherstack": response_weatherstack})
	}
	if len(weather_data) == 0 {
		panic("No API keys provided or no valid data returned.")
	}
	return weather_data
}

func mochiMain() {
	data := current_weather("New York")
	_ = data
	fmt.Println(fmt.Sprint(data))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		OPENWEATHERMAP_API_KEY = "demo"
		WEATHERSTACK_API_KEY = ""
		OPENWEATHERMAP_URL_BASE = "https://api.openweathermap.org/data/2.5/weather"
		WEATHERSTACK_URL_BASE = "http://api.weatherstack.com/current"
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
