//go:build ignore

// Generated by Mochi v0.10.67 on 2025-08-16 19:49:12 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		return
	}
	s[idx] = v
}

func get_winner(weights [][]float64, sample []int) int {
	var d0 float64 = 0.0
	_ = d0
	var d1 float64 = 0.0
	_ = d1
	for i := 0; i < len(sample); i++ {
		var diff0 float64 = (float64(_index(sample, i)) - _index(_index(weights, 0), i))
		_ = diff0
		var diff1 float64 = (float64(_index(sample, i)) - _index(_index(weights, 1), i))
		_ = diff1
		d0 = (d0 + (diff0 * diff0))
		d1 = (d1 + (diff1 * diff1))
		return func() int {
			if d0 > d1 {
				return 0
			} else {
				return 1
			}
		}()
	}
	return 0
}

func update(weights [][]float64, sample []int, j int, alpha float64) [][]float64 {
	for i := 0; i < len(weights); i++ {
		_setIndex(_index(weights, j), i, (_index(_index(weights, j), i) + (alpha * (float64(_index(sample, i)) - _index(_index(weights, j), i)))))
	}
	return weights
}

func list_to_string(xs []float64) string {
	var s string = "["
	_ = s
	var i int = 0
	_ = i
	for i < len(xs) {
		s = (s + fmt.Sprint(_index(xs, i)))
		if i < (len(xs) - 1) {
			s = (s + ", ")
		}
		i = (i + 1)
	}
	s = (s + "]")
	return s
}

func matrix_to_string(m [][]float64) string {
	var s string = "["
	_ = s
	var i int = 0
	_ = i
	for i < len(m) {
		s = (s + list_to_string(func(v any) []float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []float64{}
				}
				out := make([]float64, len(arr))
				for i, x := range arr {
					out[i] = x.(float64)
				}
				return out
			}
			return v.([]float64)
		}(_index(m, i))))
		if i < (len(m) - 1) {
			s = (s + ", ")
		}
		i = (i + 1)
	}
	s = (s + "]")
	return s
}

func mochiMain() {
	var training_samples [][]int = [][]int{[]int{1, 1, 0, 0}, []int{0, 0, 0, 1}, []int{1, 0, 0, 0}, []int{0, 0, 1, 1}}
	_ = training_samples
	var weights [][]float64 = [][]float64{[]float64{0.2, 0.6, 0.5, 0.9}, []float64{0.8, 0.4, 0.7, 0.3}}
	_ = weights
	var epochs int = 3
	_ = epochs
	var alpha float64 = 0.5
	_ = alpha
	for _i := 0; _i < epochs; _i++ {
		for j := 0; j < len(training_samples); j++ {
			var sample []int = _index(training_samples, j)
			_ = sample
			var winner int = get_winner(func(v any) [][]float64 {
				if v == nil {
					return nil
				}
				if vv, ok := v.([][]float64); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return [][]float64{}
					}
					out := make([][]float64, len(arr))
					for i, x := range arr {
						out[i] = func(v any) []float64 {
							if v == nil {
								return nil
							}
							if vv, ok := v.([]float64); ok {
								return vv
							}
							if arr, ok := v.([]any); ok {
								if len(arr) == 0 {
									return []float64{}
								}
								out := make([]float64, len(arr))
								for i, x := range arr {
									out[i] = x.(float64)
								}
								return out
							}
							return v.([]float64)
						}(x)
					}
					return out
				}
				return v.([][]float64)
			}(weights), func(v any) []int {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]int); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []int{}
					}
					out := make([]int, len(arr))
					for i, x := range arr {
						out[i] = x.(int)
					}
					return out
				}
				return v.([]int)
			}(sample))
			_ = winner
			weights = update(func(v any) [][]float64 {
				if v == nil {
					return nil
				}
				if vv, ok := v.([][]float64); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return [][]float64{}
					}
					out := make([][]float64, len(arr))
					for i, x := range arr {
						out[i] = func(v any) []float64 {
							if v == nil {
								return nil
							}
							if vv, ok := v.([]float64); ok {
								return vv
							}
							if arr, ok := v.([]any); ok {
								if len(arr) == 0 {
									return []float64{}
								}
								out := make([]float64, len(arr))
								for i, x := range arr {
									out[i] = x.(float64)
								}
								return out
							}
							return v.([]float64)
						}(x)
					}
					return out
				}
				return v.([][]float64)
			}(weights), func(v any) []int {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]int); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []int{}
					}
					out := make([]int, len(arr))
					for i, x := range arr {
						out[i] = x.(int)
					}
					return out
				}
				return v.([]int)
			}(sample), winner, alpha)
		}
	}
	var sample []int = []int{0, 0, 0, 1}
	_ = sample
	var winner int = get_winner(func(v any) [][]float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]float64{}
			}
			out := make([][]float64, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []float64 {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]float64); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []float64{}
						}
						out := make([]float64, len(arr))
						for i, x := range arr {
							out[i] = x.(float64)
						}
						return out
					}
					return v.([]float64)
				}(x)
			}
			return out
		}
		return v.([][]float64)
	}(weights), func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(sample))
	_ = winner
	fmt.Println(("Clusters that the test sample belongs to : " + fmt.Sprint(winner)))
	fmt.Println(("Weights that have been trained : " + matrix_to_string(func(v any) [][]float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]float64{}
			}
			out := make([][]float64, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []float64 {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]float64); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []float64{}
						}
						out := make([]float64, len(arr))
						for i, x := range arr {
							out[i] = x.(float64)
						}
						return out
					}
					return v.([]float64)
				}(x)
			}
			return out
		}
		return v.([][]float64)
	}(weights))))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
