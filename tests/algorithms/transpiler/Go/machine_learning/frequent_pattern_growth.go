//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-16 12:07:34 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"reflect"
	"runtime"
	"sort"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		return
	}
	s[idx] = v
}

func _toFloat(v any) float64 {
	switch t := v.(type) {
	case int:
		return float64(t)
	case int64:
		return float64(t)
	case float64:
		return t
	default:
		return 0
	}
}

func make_node(name string, count int, parent any) any {
	return map[string]any{"name": name, "count": count, "parent": parent, "children": map[any]any{}, "node_link": nil}
}

func update_header(node_to_test any, target_node any) {
	var current any = node_to_test
	_ = current
	for func(v any) map[string]any {
		if v == nil {
			return nil
		}
		if vv, ok := v.(map[string]any); ok {
			return vv
		}
		return nil
	}(current)["node_link"] != nil {
		current = func(v any) map[string]any {
			if v == nil {
				return nil
			}
			if vv, ok := v.(map[string]any); ok {
				return vv
			}
			return nil
		}(current)["node_link"]
	}
	func(v any) map[any]any {
		if v == nil {
			return nil
		}
		if vv, ok := v.(map[any]any); ok {
			return vv
		}
		return v.(map[any]any)
	}(current)["node_link"] = target_node
}

func update_tree(items []string, in_tree any, header_table any, count int) {
	var first string = _index(items, 0)
	_ = first
	var children map[any]any = func(v any) map[any]any {
		if v == nil {
			return nil
		}
		if vv, ok := v.(map[any]any); ok {
			return vv
		}
		return nil
	}(func(v any) map[string]any {
		if v == nil {
			return nil
		}
		if vv, ok := v.(map[string]any); ok {
			return vv
		}
		return nil
	}(in_tree)["children"])
	_ = children
	if func() bool { _, ok := children[first]; return ok }() {
		child := children[first]
		_ = child
		child["count"] = (int(func(v any) map[string]any {
			if v == nil {
				return nil
			}
			if vv, ok := v.(map[string]any); ok {
				return vv
			}
			return nil
		}(child)["count"]) + count)
		children[first] = child
		in_tree["children"] = children
	} else {
		new_node := make_node(first, count, in_tree)
		_ = new_node
		children[first] = new_node
		in_tree["children"] = children
		entry := func(v any) map[string]any {
			if v == nil {
				return nil
			}
			if vv, ok := v.(map[string]any); ok {
				return vv
			}
			return nil
		}(header_table)[first]
		_ = entry
		if func(v any) map[string]any {
			if v == nil {
				return nil
			}
			if vv, ok := v.(map[string]any); ok {
				return vv
			}
			return nil
		}(entry)["node"] == nil {
			entry["node"] = new_node
		} else {
			update_header(func(v any) map[string]any {
				if v == nil {
					return nil
				}
				if vv, ok := v.(map[string]any); ok {
					return vv
				}
				return nil
			}(entry)["node"], new_node)
		}
		header_table[first] = entry
	}
	if len(items) > 1 {
		var rest []string = items[1:len(items)]
		_ = rest
		update_tree(func(v any) []string {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]string); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []string{}
				}
				out := make([]string, len(arr))
				for i, x := range arr {
					out[i] = fmt.Sprint(x)
				}
				return out
			}
			return v.([]string)
		}(rest), children[first], header_table, count)
	}
}

func sort_items(items []string, header_table any) []string {
	var arr []string = items
	_ = arr
	var i int = 0
	_ = i
	for i < len(arr) {
		var j int = (i + 1)
		_ = j
		for j < len(arr) {
			if _toFloat(func(v any) map[string]any {
				if v == nil {
					return nil
				}
				if vv, ok := v.(map[string]any); ok {
					return vv
				}
				return nil
			}(func(v any) map[string]any {
				if v == nil {
					return nil
				}
				if vv, ok := v.(map[string]any); ok {
					return vv
				}
				return nil
			}(header_table)[_index(arr, i)])["count"]) < _toFloat(func(v any) map[string]any {
				if v == nil {
					return nil
				}
				if vv, ok := v.(map[string]any); ok {
					return vv
				}
				return nil
			}(func(v any) map[string]any {
				if v == nil {
					return nil
				}
				if vv, ok := v.(map[string]any); ok {
					return vv
				}
				return nil
			}(header_table)[_index(arr, j)])["count"]) {
				var tmp string = _index(arr, i)
				_ = tmp
				_setIndex(arr, i, _index(arr, j))
				_setIndex(arr, j, tmp)
			}
			j = (j + 1)
		}
		i = (i + 1)
	}
	return arr
}

func create_tree(data_set [][]string, min_sup int) any {
	var counts map[any]any = map[any]any{}
	_ = counts
	var i int = 0
	_ = i
	for i < len(data_set) {
		var trans []string = _index(data_set, i)
		_ = trans
		var j int = 0
		_ = j
		for j < len(trans) {
			var item string = _index(trans, j)
			_ = item
			if func() bool { _, ok := counts[item]; return ok }() {
				counts[item] = (counts[item] + 1)
			} else {
				counts[item] = 1
			}
			j = (j + 1)
		}
		i = (i + 1)
	}
	var header_table map[any]any = map[any]any{}
	_ = header_table
	for _, k := range func() []any {
		keys := make([]any, 0, len(counts))
		for k := range counts {
			keys = append(keys, k)
		}
		sort.Slice(keys, func(i, j int) bool { return fmt.Sprint(keys[i]) < fmt.Sprint(keys[j]) })
		return keys
	}() {
		_ = k
		cnt := counts[k]
		_ = cnt
		if cnt >= min_sup {
			header_table[k] = map[string]any{"count": cnt, "node": nil}
		}
	}
	var freq_items []any = []any{}
	_ = freq_items
	for _, k := range func() []any {
		keys := make([]any, 0, len(header_table))
		for k := range header_table {
			keys = append(keys, k)
		}
		sort.Slice(keys, func(i, j int) bool { return fmt.Sprint(keys[i]) < fmt.Sprint(keys[j]) })
		return keys
	}() {
		_ = k
		freq_items = append(freq_items, k)
	}
	if len(freq_items) == 0 {
		return map[string]any{"tree": make_node("Null Set", 1, nil), "header": map[any]any{}}
	}
	fp_tree := make_node("Null Set", 1, nil)
	_ = fp_tree
	i = 0
	for i < len(data_set) {
		var tran []string = _index(data_set, i)
		_ = tran
		var local_items []any = []any{}
		_ = local_items
		var j int = 0
		_ = j
		for j < len(tran) {
			var item string = _index(tran, j)
			_ = item
			if func() bool { _, ok := header_table[item]; return ok }() {
				local_items = append(local_items, item)
			}
			j = (j + 1)
		}
		if len(local_items) > 0 {
			local_items = sort_items(func(v any) []string {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]string); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []string{}
					}
					out := make([]string, len(arr))
					for i, x := range arr {
						out[i] = fmt.Sprint(x)
					}
					return out
				}
				return v.([]string)
			}(local_items), header_table)
			update_tree(func(v any) []string {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]string); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []string{}
					}
					out := make([]string, len(arr))
					for i, x := range arr {
						out[i] = fmt.Sprint(x)
					}
					return out
				}
				return v.([]string)
			}(local_items), fp_tree, header_table, 1)
		}
		i = (i + 1)
	}
	return map[string]any{"tree": fp_tree, "header": header_table}
}

func ascend_tree(leaf_node any, path []string) []string {
	var prefix []string = path
	_ = prefix
	if func(v any) map[string]any {
		if v == nil {
			return nil
		}
		if vv, ok := v.(map[string]any); ok {
			return vv
		}
		return nil
	}(leaf_node)["parent"] != nil {
		prefix = append(prefix, fmt.Sprint(fmt.Sprint(func(v any) map[string]any {
			if v == nil {
				return nil
			}
			if vv, ok := v.(map[string]any); ok {
				return vv
			}
			return nil
		}(leaf_node)["name"])))
		prefix = ascend_tree(func(v any) map[string]any {
			if v == nil {
				return nil
			}
			if vv, ok := v.(map[string]any); ok {
				return vv
			}
			return nil
		}(leaf_node)["parent"], func(v any) []string {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]string); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []string{}
				}
				out := make([]string, len(arr))
				for i, x := range arr {
					out[i] = fmt.Sprint(x)
				}
				return out
			}
			return v.([]string)
		}(prefix))
	} else {
		prefix = append(prefix, fmt.Sprint(fmt.Sprint(func(v any) map[string]any {
			if v == nil {
				return nil
			}
			if vv, ok := v.(map[string]any); ok {
				return vv
			}
			return nil
		}(leaf_node)["name"])))
	}
	return prefix
}

func find_prefix_path(base_pat string, tree_node any) []any {
	var cond_pats []any = []any{}
	_ = cond_pats
	var node any = tree_node
	_ = node
	for node != nil {
		var prefix []string = ascend_tree(node, func(v any) []string {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]string); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []string{}
				}
				out := make([]string, len(arr))
				for i, x := range arr {
					out[i] = fmt.Sprint(x)
				}
				return out
			}
			return v.([]string)
		}([]string{}))
		_ = prefix
		if len(prefix) > 1 {
			var items []string = prefix[1:len(prefix)]
			_ = items
			cond_pats = append(cond_pats, map[string]any{"items": items, "count": func(v any) map[string]any {
				if v == nil {
					return nil
				}
				if vv, ok := v.(map[string]any); ok {
					return vv
				}
				return nil
			}(node)["count"]})
		}
		node = func(v any) map[string]any {
			if v == nil {
				return nil
			}
			if vv, ok := v.(map[string]any); ok {
				return vv
			}
			return nil
		}(node)["node_link"]
	}
	return cond_pats
}

func mine_tree(in_tree any, header_table any, min_sup int, pre_fix []string, freq_item_list [][]string) [][]string {
	var freq_list [][]string = freq_item_list
	_ = freq_list
	var items []any = []any{}
	_ = items
	for _, k := range header_table {
		_ = k
		items = append(items, k)
	}
	var sorted_items []any = items
	_ = sorted_items
	var i int = 0
	_ = i
	for i < len(sorted_items) {
		var j int = (i + 1)
		_ = j
		for j < len(sorted_items) {
			if _toFloat(func(v any) map[string]any {
				if v == nil {
					return nil
				}
				if vv, ok := v.(map[string]any); ok {
					return vv
				}
				return nil
			}(_index(func(v any) []any {
				if v == nil {
					return nil
				}
				if arr, ok := v.([]any); ok {
					return arr
				}
				rv := reflect.ValueOf(v)
				if rv.Kind() != reflect.Slice {
					return v.([]any)
				}
				n := rv.Len()
				out := make([]any, n)
				for i := 0; i < n; i++ {
					out[i] = rv.Index(i).Interface()
				}
				return out
			}(header_table), _index(sorted_items, i)))["count"]) > _toFloat(func(v any) map[string]any {
				if v == nil {
					return nil
				}
				if vv, ok := v.(map[string]any); ok {
					return vv
				}
				return nil
			}(_index(func(v any) []any {
				if v == nil {
					return nil
				}
				if arr, ok := v.([]any); ok {
					return arr
				}
				rv := reflect.ValueOf(v)
				if rv.Kind() != reflect.Slice {
					return v.([]any)
				}
				n := rv.Len()
				out := make([]any, n)
				for i := 0; i < n; i++ {
					out[i] = rv.Index(i).Interface()
				}
				return out
			}(header_table), _index(sorted_items, j)))["count"]) {
				tmp := _index(sorted_items, i)
				_ = tmp
				_setIndex(sorted_items, i, _index(sorted_items, j))
				_setIndex(sorted_items, j, tmp)
			}
			j = (j + 1)
		}
		i = (i + 1)
	}
	var idx int = 0
	_ = idx
	for idx < len(sorted_items) {
		base_pat := _index(sorted_items, idx)
		_ = base_pat
		var new_freq []string = pre_fix
		_ = new_freq
		new_freq = append(new_freq, base_pat)
		freq_list = append(freq_list, new_freq)
		var cond_pats []any = find_prefix_path(base_pat, func(v any) map[string]any {
			if v == nil {
				return nil
			}
			if vv, ok := v.(map[string]any); ok {
				return vv
			}
			return nil
		}(_index(func(v any) []any {
			if v == nil {
				return nil
			}
			if arr, ok := v.([]any); ok {
				return arr
			}
			rv := reflect.ValueOf(v)
			if rv.Kind() != reflect.Slice {
				return v.([]any)
			}
			n := rv.Len()
			out := make([]any, n)
			for i := 0; i < n; i++ {
				out[i] = rv.Index(i).Interface()
			}
			return out
		}(header_table), base_pat))["node"])
		_ = cond_pats
		var cond_dataset []any = []any{}
		_ = cond_dataset
		var p int = 0
		_ = p
		for p < len(cond_pats) {
			pat := _index(cond_pats, p)
			_ = pat
			var r int = 0
			_ = r
			for r < int(func(v any) map[string]any {
				if v == nil {
					return nil
				}
				if vv, ok := v.(map[string]any); ok {
					return vv
				}
				return nil
			}(pat)["count"]) {
				cond_dataset = append(cond_dataset, func(v any) []string {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]string); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []string{}
						}
						out := make([]string, len(arr))
						for i, x := range arr {
							out[i] = fmt.Sprint(x)
						}
						return out
					}
					return v.([]string)
				}(func(v any) map[string]any {
					if v == nil {
						return nil
					}
					if vv, ok := v.(map[string]any); ok {
						return vv
					}
					return nil
				}(pat)["items"]))
				r = (r + 1)
			}
			p = (p + 1)
		}
		res2 := create_tree(func(v any) [][]string {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]string); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]string{}
				}
				out := make([][]string, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []string {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]string); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []string{}
							}
							out := make([]string, len(arr))
							for i, x := range arr {
								out[i] = x.(string)
							}
							return out
						}
						return v.([]string)
					}(x)
				}
				return out
			}
			return v.([][]string)
		}(cond_dataset), min_sup)
		_ = res2
		my_tree := func(v any) map[string]any {
			if v == nil {
				return nil
			}
			if vv, ok := v.(map[string]any); ok {
				return vv
			}
			return nil
		}(res2)["tree"]
		_ = my_tree
		var my_head map[any]any = func(v any) map[any]any {
			if v == nil {
				return nil
			}
			if vv, ok := v.(map[any]any); ok {
				return vv
			}
			return nil
		}(func(v any) map[string]any {
			if v == nil {
				return nil
			}
			if vv, ok := v.(map[string]any); ok {
				return vv
			}
			return nil
		}(res2)["header"])
		_ = my_head
		if len(my_head) > 0 {
			freq_list = mine_tree(my_tree, my_head, min_sup, func(v any) []string {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]string); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []string{}
					}
					out := make([]string, len(arr))
					for i, x := range arr {
						out[i] = fmt.Sprint(x)
					}
					return out
				}
				return v.([]string)
			}(new_freq), func(v any) [][]string {
				if v == nil {
					return nil
				}
				if vv, ok := v.([][]string); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return [][]string{}
					}
					out := make([][]string, len(arr))
					for i, x := range arr {
						out[i] = func(v any) []string {
							if v == nil {
								return nil
							}
							if vv, ok := v.([]string); ok {
								return vv
							}
							if arr, ok := v.([]any); ok {
								if len(arr) == 0 {
									return []string{}
								}
								out := make([]string, len(arr))
								for i, x := range arr {
									out[i] = x.(string)
								}
								return out
							}
							return v.([]string)
						}(x)
					}
					return out
				}
				return v.([][]string)
			}(freq_list))
		}
		idx = (idx + 1)
	}
	return freq_list
}

func list_to_string(xs []string) string {
	var s string = "["
	_ = s
	var i int = 0
	_ = i
	for i < len(xs) {
		s = (s + _index(xs, i))
		if i < (len(xs) - 1) {
			s = (s + ", ")
		}
		i = (i + 1)
	}
	return (s + "]")
}

func mochiMain() {
	var data_set [][]string = [][]string{[]string{"bread", "milk", "cheese"}, []string{"bread", "milk"}, []string{"bread", "diapers"}, []string{"bread", "milk", "diapers"}, []string{"milk", "diapers"}, []string{"milk", "cheese"}, []string{"diapers", "cheese"}, []string{"bread", "milk", "cheese", "diapers"}}
	_ = data_set
	res := create_tree(func(v any) [][]string {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]string); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]string{}
			}
			out := make([][]string, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []string {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]string); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []string{}
						}
						out := make([]string, len(arr))
						for i, x := range arr {
							out[i] = x.(string)
						}
						return out
					}
					return v.([]string)
				}(x)
			}
			return out
		}
		return v.([][]string)
	}(data_set), 3)
	_ = res
	fp_tree := func(v any) map[string]any {
		if v == nil {
			return nil
		}
		if vv, ok := v.(map[string]any); ok {
			return vv
		}
		return nil
	}(res)["tree"]
	_ = fp_tree
	var header_table map[any]any = func(v any) map[any]any {
		if v == nil {
			return nil
		}
		if vv, ok := v.(map[any]any); ok {
			return vv
		}
		return nil
	}(func(v any) map[string]any {
		if v == nil {
			return nil
		}
		if vv, ok := v.(map[string]any); ok {
			return vv
		}
		return nil
	}(res)["header"])
	_ = header_table
	var freq_items []any = []any{}
	_ = freq_items
	freq_items = mine_tree(fp_tree, header_table, 3, func(v any) []string {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]string); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []string{}
			}
			out := make([]string, len(arr))
			for i, x := range arr {
				out[i] = fmt.Sprint(x)
			}
			return out
		}
		return v.([]string)
	}([]string{}), func(v any) [][]string {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]string); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]string{}
			}
			out := make([][]string, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []string {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]string); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []string{}
						}
						out := make([]string, len(arr))
						for i, x := range arr {
							out[i] = x.(string)
						}
						return out
					}
					return v.([]string)
				}(x)
			}
			return out
		}
		return v.([][]string)
	}(freq_items))
	fmt.Println(len(data_set))
	fmt.Println(len(header_table))
	var i int = 0
	_ = i
	for i < len(freq_items) {
		fmt.Println(list_to_string(func(v any) []string {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]string); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []string{}
				}
				out := make([]string, len(arr))
				for i, x := range arr {
					out[i] = fmt.Sprint(x)
				}
				return out
			}
			return v.([]string)
		}(func(v any) []string {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]string); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []string{}
				}
				out := make([]string, len(arr))
				for i, x := range arr {
					out[i] = fmt.Sprint(x)
				}
				return out
			}
			return v.([]string)
		}(_index(freq_items, i)))))
		i = (i + 1)
	}
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
