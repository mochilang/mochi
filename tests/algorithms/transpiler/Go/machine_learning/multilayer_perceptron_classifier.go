//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-16 11:55:52 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		return
	}
	s[idx] = v
}

func exp_taylor(x float64) float64 {
	var term float64 = 1.0
	_ = term
	var sum float64 = 1.0
	_ = sum
	var i float64 = 1.0
	_ = i
	for i < 20.0 {
		term = (float64((term * x)) / float64(i))
		sum = (sum + term)
		i = (i + 1.0)
	}
	return sum
}

func sigmoid(x float64) float64 {
	return (float64(1.0) / float64((1.0 + exp_taylor((0 - x)))))
}

var X [][]float64

var Y []float64

var test_data [][]float64

var w1 [][]float64

var b1 []float64

var w2 []float64

var b2 float64

func train(epochs int, lr float64) {
	var e int = 0
	_ = e
	for e < epochs {
		var i int = 0
		_ = i
		for i < len(X) {
			var x0 float64 = _index(_index(X, i), 0)
			_ = x0
			var x1 float64 = _index(_index(X, i), 1)
			_ = x1
			var target float64 = _index(Y, i)
			_ = target
			var z1 float64 = (((_index(_index(w1, 0), 0) * x0) + (_index(_index(w1, 1), 0) * x1)) + _index(b1, 0))
			_ = z1
			var z2 float64 = (((_index(_index(w1, 0), 1) * x0) + (_index(_index(w1, 1), 1) * x1)) + _index(b1, 1))
			_ = z2
			var h1 float64 = sigmoid(z1)
			_ = h1
			var h2 float64 = sigmoid(z2)
			_ = h2
			var z3 float64 = (((_index(w2, 0) * h1) + (_index(w2, 1) * h2)) + b2)
			_ = z3
			var out float64 = sigmoid(z3)
			_ = out
			var error float64 = (out - target)
			_ = error
			var d1 float64 = (((h1 * (1.0 - h1)) * _index(w2, 0)) * error)
			_ = d1
			var d2 float64 = (((h2 * (1.0 - h2)) * _index(w2, 1)) * error)
			_ = d2
			_setIndex(w2, 0, (_index(w2, 0) - ((lr * error) * h1)))
			_setIndex(w2, 1, (_index(w2, 1) - ((lr * error) * h2)))
			b2 = (b2 - (lr * error))
			_setIndex(_index(w1, 0), 0, (_index(_index(w1, 0), 0) - ((lr * d1) * x0)))
			_setIndex(_index(w1, 1), 0, (_index(_index(w1, 1), 0) - ((lr * d1) * x1)))
			_setIndex(b1, 0, (_index(b1, 0) - (lr * d1)))
			_setIndex(_index(w1, 0), 1, (_index(_index(w1, 0), 1) - ((lr * d2) * x0)))
			_setIndex(_index(w1, 1), 1, (_index(_index(w1, 1), 1) - ((lr * d2) * x1)))
			_setIndex(b1, 1, (_index(b1, 1) - (lr * d2)))
			i = (i + 1)
		}
		e = (e + 1)
	}
}

func predict(samples [][]float64) []int {
	var preds []int = []int{}
	_ = preds
	var i int = 0
	_ = i
	for i < len(samples) {
		var x0 float64 = _index(_index(samples, i), 0)
		_ = x0
		var x1 float64 = _index(_index(samples, i), 1)
		_ = x1
		var z1 float64 = (((_index(_index(w1, 0), 0) * x0) + (_index(_index(w1, 1), 0) * x1)) + _index(b1, 0))
		_ = z1
		var z2 float64 = (((_index(_index(w1, 0), 1) * x0) + (_index(_index(w1, 1), 1) * x1)) + _index(b1, 1))
		_ = z2
		var h1 float64 = sigmoid(z1)
		_ = h1
		var h2 float64 = sigmoid(z2)
		_ = h2
		var z3 float64 = (((_index(w2, 0) * h1) + (_index(w2, 1) * h2)) + b2)
		_ = z3
		var out float64 = sigmoid(z3)
		_ = out
		var label int = 0
		_ = label
		if out >= 0.5 {
			label = 1
		}
		preds = append(preds, label)
		i = (i + 1)
	}
	return preds
}

func wrapper(y []int) []int {
	return y
}

var preds []int

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		X = [][]float64{[]float64{0.0, 0.0}, []float64{1.0, 1.0}, []float64{1.0, 0.0}, []float64{0.0, 1.0}}
		Y = []float64{0.0, 1.0, 0.0, 0.0}
		test_data = [][]float64{[]float64{0.0, 0.0}, []float64{0.0, 1.0}, []float64{1.0, 1.0}}
		w1 = [][]float64{[]float64{0.5, (0 - 0.5)}, []float64{0.5, 0.5}}
		b1 = []float64{0.0, 0.0}
		w2 = []float64{0.5, (0 - 0.5)}
		b2 = 0.0
		train(4000, 0.5)
		preds = wrapper(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(predict(func(v any) [][]float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]float64{}
				}
				out := make([][]float64, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []float64 {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]float64); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []float64{}
							}
							out := make([]float64, len(arr))
							for i, x := range arr {
								out[i] = x.(float64)
							}
							return out
						}
						return v.([]float64)
					}(x)
				}
				return out
			}
			return v.([][]float64)
		}(test_data))))
		fmt.Println(fmt.Sprint(preds))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
