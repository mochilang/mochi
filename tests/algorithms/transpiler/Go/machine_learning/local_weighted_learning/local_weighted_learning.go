//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-16 11:55:41 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		return
	}
	s[idx] = v
}

func expApprox(x float64) float64 {
	if x < 0.0 {
		return (float64(1.0) / float64(expApprox((0 - x))))
	}
	if x > 1.0 {
		var half float64 = expApprox((float64(x) / float64(2.0)))
		_ = half
		_ = half
		return (half * half)
	}
	var sum float64 = 1.0
	_ = sum
	var term float64 = 1.0
	_ = term
	var n int = 1
	_ = n
	for n < 20 {
		term = (float64((term * x)) / float64(n))
		sum = (sum + term)
		n = (n + 1)
	}
	return sum
}

func transpose(mat [][]float64) [][]float64 {
	var rows int = len(mat)
	_ = rows
	var cols int = len(_index(mat, 0))
	_ = cols
	var res [][]float64 = [][]float64{}
	_ = res
	var i int = 0
	_ = i
	for i < cols {
		var row []float64 = []float64{}
		_ = row
		var j int = 0
		_ = j
		for j < rows {
			row = append(row, _index(_index(mat, j), i))
			j = (j + 1)
		}
		res = append(res, row)
		i = (i + 1)
	}
	return res
}

func matMul(a [][]float64, b [][]float64) [][]float64 {
	var a_rows int = len(a)
	_ = a_rows
	var a_cols int = len(_index(a, 0))
	_ = a_cols
	var b_cols int = len(_index(b, 0))
	_ = b_cols
	var res [][]float64 = [][]float64{}
	_ = res
	var i int = 0
	_ = i
	for i < a_rows {
		var row []float64 = []float64{}
		_ = row
		var j int = 0
		_ = j
		for j < b_cols {
			var sum float64 = 0.0
			_ = sum
			var k int = 0
			_ = k
			for k < a_cols {
				sum = (sum + (_index(_index(a, i), k) * _index(_index(b, k), j)))
				k = (k + 1)
			}
			row = append(row, sum)
			j = (j + 1)
		}
		res = append(res, row)
		i = (i + 1)
	}
	return res
}

func matInv(mat [][]float64) [][]float64 {
	var n int = len(mat)
	_ = n
	var aug [][]float64 = [][]float64{}
	_ = aug
	var i int = 0
	_ = i
	for i < n {
		var row []float64 = []float64{}
		_ = row
		var j int = 0
		_ = j
		for j < n {
			row = append(row, _index(_index(mat, i), j))
			j = (j + 1)
		}
		j = 0
		for j < n {
			if i == j {
				row = append(row, 1.0)
			} else {
				row = append(row, 0.0)
			}
			j = (j + 1)
		}
		aug = append(aug, row)
		i = (i + 1)
	}
	var col int = 0
	_ = col
	for col < n {
		var pivot float64 = _index(_index(aug, col), col)
		_ = pivot
		if pivot == 0.0 {
			panic("Matrix is singular")
		}
		var j int = 0
		_ = j
		for j < (2 * n) {
			_setIndex(_index(aug, col), j, (float64(_index(_index(aug, col), j)) / float64(pivot)))
			j = (j + 1)
		}
		var r int = 0
		_ = r
		for r < n {
			if r != col {
				var factor float64 = _index(_index(aug, r), col)
				_ = factor
				j = 0
				for j < (2 * n) {
					_setIndex(_index(aug, r), j, (_index(_index(aug, r), j) - (factor * _index(_index(aug, col), j))))
					j = (j + 1)
				}
			}
			r = (r + 1)
		}
		col = (col + 1)
	}
	var inv [][]float64 = [][]float64{}
	_ = inv
	i = 0
	for i < n {
		var row []float64 = []float64{}
		_ = row
		var j int = 0
		_ = j
		for j < n {
			row = append(row, _index(_index(aug, i), (j+n)))
			j = (j + 1)
		}
		inv = append(inv, row)
		i = (i + 1)
	}
	return inv
}

func weight_matrix(point []float64, x_train [][]float64, tau float64) [][]float64 {
	var m int = len(x_train)
	_ = m
	var weights [][]float64 = [][]float64{}
	_ = weights
	var i int = 0
	_ = i
	for i < m {
		var row []float64 = []float64{}
		_ = row
		var j int = 0
		_ = j
		for j < m {
			if i == j {
				row = append(row, 1.0)
			} else {
				row = append(row, 0.0)
			}
			j = (j + 1)
		}
		weights = append(weights, row)
		i = (i + 1)
	}
	var j int = 0
	_ = j
	for j < m {
		var diff_sq float64 = 0.0
		_ = diff_sq
		var k int = 0
		_ = k
		for k < len(point) {
			var diff float64 = (_index(point, k) - _index(_index(x_train, j), k))
			_ = diff
			diff_sq = (diff_sq + (diff * diff))
			k = (k + 1)
		}
		_setIndex(_index(weights, j), j, expApprox((float64((0 - diff_sq)) / float64(((2.0 * tau) * tau)))))
		j = (j + 1)
	}
	return weights
}

func local_weight(point []float64, x_train [][]float64, y_train []float64, tau float64) [][]float64 {
	var w [][]float64 = weight_matrix(func(v any) []float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []float64{}
			}
			out := make([]float64, len(arr))
			for i, x := range arr {
				out[i] = x.(float64)
			}
			return out
		}
		return v.([]float64)
	}(point), func(v any) [][]float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]float64{}
			}
			out := make([][]float64, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []float64 {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]float64); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []float64{}
						}
						out := make([]float64, len(arr))
						for i, x := range arr {
							out[i] = x.(float64)
						}
						return out
					}
					return v.([]float64)
				}(x)
			}
			return out
		}
		return v.([][]float64)
	}(x_train), tau)
	_ = w
	var x_t [][]float64 = transpose(func(v any) [][]float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]float64{}
			}
			out := make([][]float64, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []float64 {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]float64); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []float64{}
						}
						out := make([]float64, len(arr))
						for i, x := range arr {
							out[i] = x.(float64)
						}
						return out
					}
					return v.([]float64)
				}(x)
			}
			return out
		}
		return v.([][]float64)
	}(x_train))
	_ = x_t
	var x_t_w [][]float64 = matMul(func(v any) [][]float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]float64{}
			}
			out := make([][]float64, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []float64 {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]float64); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []float64{}
						}
						out := make([]float64, len(arr))
						for i, x := range arr {
							out[i] = x.(float64)
						}
						return out
					}
					return v.([]float64)
				}(x)
			}
			return out
		}
		return v.([][]float64)
	}(x_t), func(v any) [][]float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]float64{}
			}
			out := make([][]float64, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []float64 {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]float64); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []float64{}
						}
						out := make([]float64, len(arr))
						for i, x := range arr {
							out[i] = x.(float64)
						}
						return out
					}
					return v.([]float64)
				}(x)
			}
			return out
		}
		return v.([][]float64)
	}(w))
	_ = x_t_w
	var x_t_w_x [][]float64 = matMul(func(v any) [][]float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]float64{}
			}
			out := make([][]float64, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []float64 {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]float64); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []float64{}
						}
						out := make([]float64, len(arr))
						for i, x := range arr {
							out[i] = x.(float64)
						}
						return out
					}
					return v.([]float64)
				}(x)
			}
			return out
		}
		return v.([][]float64)
	}(x_t_w), func(v any) [][]float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]float64{}
			}
			out := make([][]float64, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []float64 {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]float64); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []float64{}
						}
						out := make([]float64, len(arr))
						for i, x := range arr {
							out[i] = x.(float64)
						}
						return out
					}
					return v.([]float64)
				}(x)
			}
			return out
		}
		return v.([][]float64)
	}(x_train))
	_ = x_t_w_x
	var inv_part [][]float64 = matInv(func(v any) [][]float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]float64{}
			}
			out := make([][]float64, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []float64 {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]float64); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []float64{}
						}
						out := make([]float64, len(arr))
						for i, x := range arr {
							out[i] = x.(float64)
						}
						return out
					}
					return v.([]float64)
				}(x)
			}
			return out
		}
		return v.([][]float64)
	}(x_t_w_x))
	_ = inv_part
	_ = inv_part
	var y_col [][]float64 = [][]float64{}
	_ = y_col
	var i int = 0
	_ = i
	for i < len(y_train) {
		y_col = append(y_col, []float64{_index(y_train, i)})
		i = (i + 1)
	}
	var x_t_w_y [][]float64 = matMul(func(v any) [][]float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]float64{}
			}
			out := make([][]float64, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []float64 {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]float64); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []float64{}
						}
						out := make([]float64, len(arr))
						for i, x := range arr {
							out[i] = x.(float64)
						}
						return out
					}
					return v.([]float64)
				}(x)
			}
			return out
		}
		return v.([][]float64)
	}(x_t_w), func(v any) [][]float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]float64{}
			}
			out := make([][]float64, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []float64 {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]float64); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []float64{}
						}
						out := make([]float64, len(arr))
						for i, x := range arr {
							out[i] = x.(float64)
						}
						return out
					}
					return v.([]float64)
				}(x)
			}
			return out
		}
		return v.([][]float64)
	}(y_col))
	_ = x_t_w_y
	_ = x_t_w_y
	return matMul(func(v any) [][]float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]float64{}
			}
			out := make([][]float64, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []float64 {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]float64); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []float64{}
						}
						out := make([]float64, len(arr))
						for i, x := range arr {
							out[i] = x.(float64)
						}
						return out
					}
					return v.([]float64)
				}(x)
			}
			return out
		}
		return v.([][]float64)
	}(inv_part), func(v any) [][]float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]float64{}
			}
			out := make([][]float64, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []float64 {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]float64); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []float64{}
						}
						out := make([]float64, len(arr))
						for i, x := range arr {
							out[i] = x.(float64)
						}
						return out
					}
					return v.([]float64)
				}(x)
			}
			return out
		}
		return v.([][]float64)
	}(x_t_w_y))
}

func local_weight_regression(x_train [][]float64, y_train []float64, tau float64) []float64 {
	var m int = len(x_train)
	_ = m
	var preds []float64 = []float64{}
	_ = preds
	var i int = 0
	_ = i
	for i < m {
		var theta [][]float64 = local_weight(func(v any) []float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []float64{}
				}
				out := make([]float64, len(arr))
				for i, x := range arr {
					out[i] = x.(float64)
				}
				return out
			}
			return v.([]float64)
		}(_index(x_train, i)), func(v any) [][]float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]float64{}
				}
				out := make([][]float64, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []float64 {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]float64); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []float64{}
							}
							out := make([]float64, len(arr))
							for i, x := range arr {
								out[i] = x.(float64)
							}
							return out
						}
						return v.([]float64)
					}(x)
				}
				return out
			}
			return v.([][]float64)
		}(x_train), func(v any) []float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []float64{}
				}
				out := make([]float64, len(arr))
				for i, x := range arr {
					out[i] = x.(float64)
				}
				return out
			}
			return v.([]float64)
		}(y_train), tau)
		_ = theta
		var weights_vec []float64 = []float64{}
		_ = weights_vec
		var k int = 0
		_ = k
		for k < len(theta) {
			weights_vec = append(weights_vec, _index(_index(theta, k), 0))
			k = (k + 1)
		}
		var pred float64 = 0.0
		_ = pred
		var j int = 0
		_ = j
		for j < len(_index(x_train, i)) {
			pred = (pred + (_index(_index(x_train, i), j) * _index(weights_vec, j)))
			j = (j + 1)
		}
		preds = append(preds, pred)
		i = (i + 1)
	}
	return preds
}

var x_train [][]float64

var y_train []float64

var preds []float64

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		x_train = [][]float64{[]float64{16.99, 10.34}, []float64{21.01, 23.68}, []float64{24.59, 25.69}}
		y_train = []float64{1.01, 1.66, 3.5}
		preds = local_weight_regression(func(v any) [][]float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]float64{}
				}
				out := make([][]float64, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []float64 {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]float64); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []float64{}
							}
							out := make([]float64, len(arr))
							for i, x := range arr {
								out[i] = x.(float64)
							}
							return out
						}
						return v.([]float64)
					}(x)
				}
				return out
			}
			return v.([][]float64)
		}(x_train), func(v any) []float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []float64{}
				}
				out := make([]float64, len(arr))
				for i, x := range arr {
					out[i] = x.(float64)
				}
				return out
			}
			return v.([]float64)
		}(y_train), 0.6)
		func() { b, _ := json.MarshalIndent(preds, "", "  "); fmt.Println(string(b)) }()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
