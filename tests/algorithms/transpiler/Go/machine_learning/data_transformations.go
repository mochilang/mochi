//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-15 10:29:23 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	math "math"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func floor(x float64) float64 {
	var i int = int(x)
	_ = i
	if float64(i) > x {
		i = (i - 1)
	}
	return float64(i)
}

func pow10(n int) float64 {
	var result float64 = 1.0
	_ = result
	var i int = 0
	_ = i
	for i < n {
		result = (result * 10.0)
		i = (i + 1)
	}
	return result
}

func round(x float64, n int) float64 {
	var m float64 = pow10(n)
	_ = m
	var y float64 = float64(math.Floor(((x * m) + 0.5)))
	_ = y
	_ = y
	return (float64(y) / float64(m))
}

func sqrtApprox(x float64) float64 {
	var guess float64 = x
	_ = guess
	var i int = 0
	_ = i
	for i < 20 {
		guess = (float64((guess + (float64(x) / float64(guess)))) / float64(2.0))
		i = (i + 1)
	}
	return guess
}

func mean(data []float64) float64 {
	var total float64 = 0.0
	_ = total
	var i int = 0
	_ = i
	var n int = len(data)
	_ = n
	for i < n {
		total = (total + _index(data, i))
		i = (i + 1)
	}
	return (float64(total) / float64(n))
}

func stdev(data []float64) float64 {
	var n int = len(data)
	_ = n
	if n <= 1 {
		panic("data length must be > 1")
	}
	var m float64 = mean(func(v any) []float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []float64{}
			}
			out := make([]float64, len(arr))
			for i, x := range arr {
				out[i] = x.(float64)
			}
			return out
		}
		return v.([]float64)
	}(data))
	_ = m
	var sum_sq float64 = 0.0
	_ = sum_sq
	var i int = 0
	_ = i
	for i < n {
		var diff float64 = (_index(data, i) - m)
		_ = diff
		sum_sq = (sum_sq + (diff * diff))
		i = (i + 1)
	}
	return sqrtApprox((float64(sum_sq) / float64(float64((n - 1)))))
}

func normalization(data []float64, ndigits int) []float64 {
	var x_min float64 = float64(func() float64 {
		if len(data) == 0 {
			return 0
		}
		m := data[0]
		for _, n := range data[1:] {
			if n < m {
				m = n
			}
		}
		return m
	}())
	_ = x_min
	var x_max float64 = float64(func() float64 {
		if len(data) == 0 {
			return 0
		}
		m := data[0]
		for _, n := range data[1:] {
			if n > m {
				m = n
			}
		}
		return m
	}())
	_ = x_max
	var denom float64 = (x_max - x_min)
	_ = denom
	var result []float64 = []float64{}
	_ = result
	var i int = 0
	_ = i
	var n int = len(data)
	_ = n
	for i < n {
		var norm float64 = (float64((_index(data, i) - x_min)) / float64(denom))
		_ = norm
		result = append(result, round(norm, ndigits))
		i = (i + 1)
	}
	return result
}

func standardization(data []float64, ndigits int) []float64 {
	var mu float64 = mean(func(v any) []float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []float64{}
			}
			out := make([]float64, len(arr))
			for i, x := range arr {
				out[i] = x.(float64)
			}
			return out
		}
		return v.([]float64)
	}(data))
	_ = mu
	var sigma float64 = stdev(func(v any) []float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []float64{}
			}
			out := make([]float64, len(arr))
			for i, x := range arr {
				out[i] = x.(float64)
			}
			return out
		}
		return v.([]float64)
	}(data))
	_ = sigma
	var result []float64 = []float64{}
	_ = result
	var i int = 0
	_ = i
	var n int = len(data)
	_ = n
	for i < n {
		var z float64 = (float64((_index(data, i) - mu)) / float64(sigma))
		_ = z
		result = append(result, round(z, ndigits))
		i = (i + 1)
	}
	return result
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(fmt.Sprint(normalization(func(v any) []float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []float64{}
				}
				out := make([]float64, len(arr))
				for i, x := range arr {
					out[i] = x.(float64)
				}
				return out
			}
			return v.([]float64)
		}([]float64{2.0, 7.0, 10.0, 20.0, 30.0, 50.0}), 3)))
		fmt.Println(fmt.Sprint(normalization(func(v any) []float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []float64{}
				}
				out := make([]float64, len(arr))
				for i, x := range arr {
					out[i] = x.(float64)
				}
				return out
			}
			return v.([]float64)
		}([]float64{5.0, 10.0, 15.0, 20.0, 25.0}), 3)))
		fmt.Println(fmt.Sprint(standardization(func(v any) []float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []float64{}
				}
				out := make([]float64, len(arr))
				for i, x := range arr {
					out[i] = x.(float64)
				}
				return out
			}
			return v.([]float64)
		}([]float64{2.0, 7.0, 10.0, 20.0, 30.0, 50.0}), 3)))
		fmt.Println(fmt.Sprint(standardization(func(v any) []float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []float64{}
				}
				out := make([]float64, len(arr))
				for i, x := range arr {
					out[i] = x.(float64)
				}
				return out
			}
			return v.([]float64)
		}([]float64{5.0, 10.0, 15.0, 20.0, 25.0}), 3)))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
