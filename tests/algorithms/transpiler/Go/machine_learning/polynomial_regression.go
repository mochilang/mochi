//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-15 10:31:27 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		return
	}
	s[idx] = v
}

func design_matrix(xs []float64, degree int) [][]float64 {
	var i int = 0
	_ = i
	var matrix [][]float64 = [][]float64{}
	_ = matrix
	for i < len(xs) {
		var row []float64 = []float64{}
		_ = row
		var j int = 0
		_ = j
		var pow float64 = 1.0
		_ = pow
		for j <= degree {
			row = append(row, pow)
			pow = (pow * _index(xs, i))
			j = (j + 1)
		}
		matrix = append(matrix, row)
		i = (i + 1)
	}
	return matrix
}

func transpose(matrix [][]float64) [][]float64 {
	var rows int = len(matrix)
	_ = rows
	var cols int = len(_index(matrix, 0))
	_ = cols
	var j int = 0
	_ = j
	var result [][]float64 = [][]float64{}
	_ = result
	for j < cols {
		var row []float64 = []float64{}
		_ = row
		var i int = 0
		_ = i
		for i < rows {
			row = append(row, _index(_index(matrix, i), j))
			i = (i + 1)
		}
		result = append(result, row)
		j = (j + 1)
	}
	return result
}

func matmul(A [][]float64, B [][]float64) [][]float64 {
	var n int = len(A)
	_ = n
	var m int = len(_index(A, 0))
	_ = m
	var p int = len(_index(B, 0))
	_ = p
	var i int = 0
	_ = i
	var result [][]float64 = [][]float64{}
	_ = result
	for i < n {
		var row []float64 = []float64{}
		_ = row
		var k int = 0
		_ = k
		for k < p {
			var sum float64 = 0.0
			_ = sum
			var j int = 0
			_ = j
			for j < m {
				sum = (sum + (_index(_index(A, i), j) * _index(_index(B, j), k)))
				j = (j + 1)
			}
			row = append(row, sum)
			k = (k + 1)
		}
		result = append(result, row)
		i = (i + 1)
	}
	return result
}

func matvec_mul(A [][]float64, v []float64) []float64 {
	var n int = len(A)
	_ = n
	var m int = len(_index(A, 0))
	_ = m
	var i int = 0
	_ = i
	var result []float64 = []float64{}
	_ = result
	for i < n {
		var sum float64 = 0.0
		_ = sum
		var j int = 0
		_ = j
		for j < m {
			sum = (sum + (_index(_index(A, i), j) * _index(v, j)))
			j = (j + 1)
		}
		result = append(result, sum)
		i = (i + 1)
	}
	return result
}

func gaussian_elimination(A [][]float64, b []float64) []float64 {
	var n int = len(A)
	_ = n
	var M [][]float64 = [][]float64{}
	_ = M
	var i int = 0
	_ = i
	for i < n {
		M = append(M, append(_index(A, i), _index(b, i)))
		i = (i + 1)
	}
	var k int = 0
	_ = k
	for k < n {
		var j int = (k + 1)
		_ = j
		for j < n {
			var factor float64 = (float64(_index(_index(M, j), k)) / float64(_index(_index(M, k), k)))
			_ = factor
			var rowj []float64 = _index(M, j)
			_ = rowj
			var rowk []float64 = _index(M, k)
			_ = rowk
			var l int = k
			_ = l
			for l <= n {
				_setIndex(rowj, l, (_index(rowj, l) - (factor * _index(rowk, l))))
				l = (l + 1)
			}
			_setIndex(M, j, rowj)
			j = (j + 1)
		}
		k = (k + 1)
	}
	var x []float64 = []float64{}
	_ = x
	var t int = 0
	_ = t
	for t < n {
		x = append(x, 0.0)
		t = (t + 1)
	}
	var i2 int = (n - 1)
	_ = i2
	for i2 >= 0 {
		var sum float64 = _index(_index(M, i2), n)
		_ = sum
		var j2 int = (i2 + 1)
		_ = j2
		for j2 < n {
			sum = (sum - (_index(_index(M, i2), j2) * _index(x, j2)))
			j2 = (j2 + 1)
		}
		_setIndex(x, i2, (float64(sum) / float64(_index(_index(M, i2), i2))))
		i2 = (i2 - 1)
	}
	return x
}

func predict(xs []float64, coeffs []float64) []float64 {
	var i int = 0
	_ = i
	var result []float64 = []float64{}
	_ = result
	for i < len(xs) {
		var x float64 = _index(xs, i)
		_ = x
		var j int = 0
		_ = j
		var pow float64 = 1.0
		_ = pow
		var sum float64 = 0.0
		_ = sum
		for j < len(coeffs) {
			sum = (sum + (_index(coeffs, j) * pow))
			pow = (pow * x)
			j = (j + 1)
		}
		result = append(result, sum)
		i = (i + 1)
	}
	return result
}

var xs []float64

var ys []float64

var i int

var X [][]float64

var Xt [][]float64

var XtX [][]float64

var Xty []float64

var coeffs []float64

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		xs = []float64{0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0}
		ys = []float64{}
		i = 0
		for i < len(xs) {
			var x float64 = _index(xs, i)
			_ = x
			ys = append(ys, (((((x * x) * x) - ((2.0 * x) * x)) + (3.0 * x)) - 5.0))
			i = (i + 1)
		}
		X = design_matrix(func(v any) []float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []float64{}
				}
				out := make([]float64, len(arr))
				for i, x := range arr {
					out[i] = x.(float64)
				}
				return out
			}
			return v.([]float64)
		}(xs), 3)
		Xt = transpose(func(v any) [][]float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]float64{}
				}
				out := make([][]float64, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []float64 {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]float64); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []float64{}
							}
							out := make([]float64, len(arr))
							for i, x := range arr {
								out[i] = x.(float64)
							}
							return out
						}
						return v.([]float64)
					}(x)
				}
				return out
			}
			return v.([][]float64)
		}(X))
		XtX = matmul(func(v any) [][]float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]float64{}
				}
				out := make([][]float64, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []float64 {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]float64); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []float64{}
							}
							out := make([]float64, len(arr))
							for i, x := range arr {
								out[i] = x.(float64)
							}
							return out
						}
						return v.([]float64)
					}(x)
				}
				return out
			}
			return v.([][]float64)
		}(Xt), func(v any) [][]float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]float64{}
				}
				out := make([][]float64, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []float64 {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]float64); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []float64{}
							}
							out := make([]float64, len(arr))
							for i, x := range arr {
								out[i] = x.(float64)
							}
							return out
						}
						return v.([]float64)
					}(x)
				}
				return out
			}
			return v.([][]float64)
		}(X))
		Xty = matvec_mul(func(v any) [][]float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]float64{}
				}
				out := make([][]float64, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []float64 {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]float64); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []float64{}
							}
							out := make([]float64, len(arr))
							for i, x := range arr {
								out[i] = x.(float64)
							}
							return out
						}
						return v.([]float64)
					}(x)
				}
				return out
			}
			return v.([][]float64)
		}(Xt), func(v any) []float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []float64{}
				}
				out := make([]float64, len(arr))
				for i, x := range arr {
					out[i] = x.(float64)
				}
				return out
			}
			return v.([]float64)
		}(ys))
		coeffs = gaussian_elimination(func(v any) [][]float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]float64{}
				}
				out := make([][]float64, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []float64 {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]float64); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []float64{}
							}
							out := make([]float64, len(arr))
							for i, x := range arr {
								out[i] = x.(float64)
							}
							return out
						}
						return v.([]float64)
					}(x)
				}
				return out
			}
			return v.([][]float64)
		}(XtX), func(v any) []float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []float64{}
				}
				out := make([]float64, len(arr))
				for i, x := range arr {
					out[i] = x.(float64)
				}
				return out
			}
			return v.([]float64)
		}(Xty))
		fmt.Println(fmt.Sprint(coeffs))
		fmt.Println(fmt.Sprint(predict(func(v any) []float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []float64{}
				}
				out := make([]float64, len(arr))
				for i, x := range arr {
					out[i] = x.(float64)
				}
				return out
			}
			return v.([]float64)
		}([]float64{(0 - 1.0)}), func(v any) []float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []float64{}
				}
				out := make([]float64, len(arr))
				for i, x := range arr {
					out[i] = x.(float64)
				}
				return out
			}
			return v.([]float64)
		}(coeffs))))
		fmt.Println(fmt.Sprint(predict(func(v any) []float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []float64{}
				}
				out := make([]float64, len(arr))
				for i, x := range arr {
					out[i] = x.(float64)
				}
				return out
			}
			return v.([]float64)
		}([]float64{(0 - 2.0)}), func(v any) []float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []float64{}
				}
				out := make([]float64, len(arr))
				for i, x := range arr {
					out[i] = x.(float64)
				}
				return out
			}
			return v.([]float64)
		}(coeffs))))
		fmt.Println(fmt.Sprint(predict(func(v any) []float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []float64{}
				}
				out := make([]float64, len(arr))
				for i, x := range arr {
					out[i] = x.(float64)
				}
				return out
			}
			return v.([]float64)
		}([]float64{6.0}), func(v any) []float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []float64{}
				}
				out := make([]float64, len(arr))
				for i, x := range arr {
					out[i] = x.(float64)
				}
				return out
			}
			return v.([]float64)
		}(coeffs))))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
