//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-15 10:31:33 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

type Neighbor struct {
	Vector   []float64 `json:"vector"`
	Distance float64   `json:"distance"`
}

func sqrt(x float64) float64 {
	if x <= 0.0 {
		return 0.0
	}
	var guess float64 = x
	_ = guess
	var i int = 0
	_ = i
	for i < 10 {
		guess = (float64((guess + (float64(x) / float64(guess)))) / float64(2.0))
		i = (i + 1)
	}
	return guess
}

func euclidean(a []float64, b []float64) float64 {
	var sum float64 = 0.0
	_ = sum
	var i int = 0
	_ = i
	for i < len(a) {
		var diff float64 = (_index(a, i) - _index(b, i))
		_ = diff
		sum = (sum + (diff * diff))
		i = (i + 1)
	}
	var res float64 = sqrt(sum)
	_ = res
	_ = res
	return res
}

func similarity_search(dataset [][]float64, value_array [][]float64) []Neighbor {
	var dim int = len(_index(dataset, 0))
	_ = dim
	if dim != len(_index(value_array, 0)) {
		return func(v any) []Neighbor {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]Neighbor); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []Neighbor{}
				}
				out := make([]Neighbor, len(arr))
				for i, x := range arr {
					out[i] = x.(Neighbor)
				}
				return out
			}
			return v.([]Neighbor)
		}([]Neighbor{})
	}
	var result []Neighbor = []Neighbor{}
	_ = result
	var i int = 0
	_ = i
	for i < len(value_array) {
		var value []float64 = _index(value_array, i)
		_ = value
		var dist float64 = euclidean(func(v any) []float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []float64{}
				}
				out := make([]float64, len(arr))
				for i, x := range arr {
					out[i] = x.(float64)
				}
				return out
			}
			return v.([]float64)
		}(value), func(v any) []float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []float64{}
				}
				out := make([]float64, len(arr))
				for i, x := range arr {
					out[i] = x.(float64)
				}
				return out
			}
			return v.([]float64)
		}(_index(dataset, 0)))
		_ = dist
		var vec []float64 = _index(dataset, 0)
		_ = vec
		var j int = 1
		_ = j
		for j < len(dataset) {
			var d float64 = euclidean(func(v any) []float64 {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]float64); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []float64{}
					}
					out := make([]float64, len(arr))
					for i, x := range arr {
						out[i] = x.(float64)
					}
					return out
				}
				return v.([]float64)
			}(value), func(v any) []float64 {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]float64); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []float64{}
					}
					out := make([]float64, len(arr))
					for i, x := range arr {
						out[i] = x.(float64)
					}
					return out
				}
				return v.([]float64)
			}(_index(dataset, j)))
			_ = d
			if d < dist {
				dist = d
				vec = _index(dataset, j)
			}
			j = (j + 1)
		}
		var nb Neighbor = Neighbor{
			Vector:   vec,
			Distance: dist,
		}
		_ = nb
		result = append(result, nb)
		i = (i + 1)
	}
	return result
}

func cosine_similarity(a []float64, b []float64) float64 {
	var dot float64 = 0.0
	_ = dot
	var norm_a float64 = 0.0
	_ = norm_a
	var norm_b float64 = 0.0
	_ = norm_b
	var i int = 0
	_ = i
	for i < len(a) {
		dot = (dot + (_index(a, i) * _index(b, i)))
		norm_a = (norm_a + (_index(a, i) * _index(a, i)))
		norm_b = (norm_b + (_index(b, i) * _index(b, i)))
		i = (i + 1)
	}
	if (norm_a == 0.0) || (norm_b == 0.0) {
		return 0.0
	}
	return (float64(dot) / float64((sqrt(norm_a) * sqrt(norm_b))))
}

var dataset [][]float64

var value_array [][]float64

var neighbors []Neighbor

var k int

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		dataset = [][]float64{[]float64{0.0, 0.0, 0.0}, []float64{1.0, 1.0, 1.0}, []float64{2.0, 2.0, 2.0}}
		value_array = [][]float64{[]float64{0.0, 0.0, 0.0}, []float64{0.0, 0.0, 1.0}}
		neighbors = similarity_search(func(v any) [][]float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]float64{}
				}
				out := make([][]float64, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []float64 {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]float64); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []float64{}
							}
							out := make([]float64, len(arr))
							for i, x := range arr {
								out[i] = x.(float64)
							}
							return out
						}
						return v.([]float64)
					}(x)
				}
				return out
			}
			return v.([][]float64)
		}(dataset), func(v any) [][]float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]float64{}
				}
				out := make([][]float64, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []float64 {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]float64); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []float64{}
							}
							out := make([]float64, len(arr))
							for i, x := range arr {
								out[i] = x.(float64)
							}
							return out
						}
						return v.([]float64)
					}(x)
				}
				return out
			}
			return v.([][]float64)
		}(value_array))
		k = 0
		for k < len(neighbors) {
			var n Neighbor = _index(neighbors, k)
			_ = n
			fmt.Println((((("[" + fmt.Sprint(n.Vector)) + ", ") + fmt.Sprint(n.Distance)) + "]"))
			k = (k + 1)
		}
		fmt.Println(fmt.Sprint(cosine_similarity(func(v any) []float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []float64{}
				}
				out := make([]float64, len(arr))
				for i, x := range arr {
					out[i] = x.(float64)
				}
				return out
			}
			return v.([]float64)
		}([]float64{1.0, 2.0}), func(v any) []float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []float64{}
				}
				out := make([]float64, len(arr))
				for i, x := range arr {
					out[i] = x.(float64)
				}
				return out
			}
			return v.([]float64)
		}([]float64{6.0, 32.0}))))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
