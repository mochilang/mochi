//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-15 10:31:34 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		return
	}
	s[idx] = v
}

type SVC struct {
	Weights []float64 `json:"weights"`
	Bias    float64   `json:"bias"`
	Lr      float64   `json:"lr"`
	Lambda  float64   `json:"lambda"`
	Epochs  int       `json:"epochs"`
}

func dot(a []float64, b []float64) float64 {
	var s float64 = 0.0
	_ = s
	var i int = 0
	_ = i
	for i < len(a) {
		s = (s + (_index(a, i) * _index(b, i)))
		i = (i + 1)
	}
	return s
}

func new_svc(lr float64, lambda float64, epochs int) SVC {
	return SVC{
		Weights: []float64{},
		Bias:    0.0,
		Lr:      lr,
		Lambda:  lambda,
		Epochs:  epochs,
	}
}

func fit(model SVC, xs [][]float64, ys []int) SVC {
	var n_features int = len(_index(xs, 0))
	_ = n_features
	var w []float64 = []float64{}
	_ = w
	var i int = 0
	_ = i
	for i < n_features {
		w = append(w, 0.0)
		i = (i + 1)
	}
	var b float64 = 0.0
	_ = b
	var epoch int = 0
	_ = epoch
	for epoch < model.Epochs {
		var j int = 0
		_ = j
		for j < len(xs) {
			var x []float64 = _index(xs, j)
			_ = x
			var y float64 = float64(_index(ys, j))
			_ = y
			var prod float64 = (dot(func(v any) []float64 {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]float64); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []float64{}
					}
					out := make([]float64, len(arr))
					for i, x := range arr {
						out[i] = x.(float64)
					}
					return out
				}
				return v.([]float64)
			}(w), func(v any) []float64 {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]float64); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []float64{}
					}
					out := make([]float64, len(arr))
					for i, x := range arr {
						out[i] = x.(float64)
					}
					return out
				}
				return v.([]float64)
			}(x)) + b)
			_ = prod
			if (y * prod) < 1.0 {
				var k int = 0
				_ = k
				for k < len(w) {
					_setIndex(w, k, (_index(w, k) + (model.Lr * ((y * _index(x, k)) - ((2.0 * model.Lambda) * _index(w, k))))))
					k = (k + 1)
				}
				b = (b + (model.Lr * y))
			} else {
				var k int = 0
				_ = k
				for k < len(w) {
					_setIndex(w, k, (_index(w, k) - (model.Lr * ((2.0 * model.Lambda) * _index(w, k)))))
					k = (k + 1)
				}
			}
			j = (j + 1)
		}
		epoch = (epoch + 1)
	}
	return SVC{
		Weights: w,
		Bias:    b,
		Lr:      model.Lr,
		Lambda:  model.Lambda,
		Epochs:  model.Epochs,
	}
}

func predict(model SVC, x []float64) int {
	var s float64 = (dot(func(v any) []float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []float64{}
			}
			out := make([]float64, len(arr))
			for i, x := range arr {
				out[i] = x.(float64)
			}
			return out
		}
		return v.([]float64)
	}(model.Weights), func(v any) []float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []float64{}
			}
			out := make([]float64, len(arr))
			for i, x := range arr {
				out[i] = x.(float64)
			}
			return out
		}
		return v.([]float64)
	}(x)) + model.Bias)
	_ = s
	if s >= 0.0 {
		return 1
	} else {
		return (0 - 1)
	}
}

var xs [][]float64

var ys []int

var base SVC

var model SVC

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		xs = [][]float64{[]float64{0.0, 1.0}, []float64{0.0, 2.0}, []float64{1.0, 1.0}, []float64{1.0, 2.0}}
		ys = []int{1, 1, func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}((0 - 1)), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}((0 - 1))}
		base = new_svc(0.01, 0.01, 1000)
		model = fit(base, func(v any) [][]float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]float64{}
				}
				out := make([][]float64, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []float64 {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]float64); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []float64{}
							}
							out := make([]float64, len(arr))
							for i, x := range arr {
								out[i] = x.(float64)
							}
							return out
						}
						return v.([]float64)
					}(x)
				}
				return out
			}
			return v.([][]float64)
		}(xs), func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(ys))
		fmt.Println(predict(model, func(v any) []float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []float64{}
				}
				out := make([]float64, len(arr))
				for i, x := range arr {
					out[i] = x.(float64)
				}
				return out
			}
			return v.([]float64)
		}([]float64{0.0, 1.0})))
		fmt.Println(predict(model, func(v any) []float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []float64{}
				}
				out := make([]float64, len(arr))
				for i, x := range arr {
					out[i] = x.(float64)
				}
				return out
			}
			return v.([]float64)
		}([]float64{1.0, 1.0})))
		fmt.Println(predict(model, func(v any) []float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []float64{}
				}
				out := make([]float64, len(arr))
				for i, x := range arr {
					out[i] = x.(float64)
				}
				return out
			}
			return v.([]float64)
		}([]float64{2.0, 2.0})))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
