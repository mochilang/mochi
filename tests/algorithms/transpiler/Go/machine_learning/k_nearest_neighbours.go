//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-16 11:55:35 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		return
	}
	s[idx] = v
}

type PointLabel struct {
	Point []float64 `json:"point"`
	Label int       `json:"label"`
}

type KNN struct {
	Data   []PointLabel `json:"data"`
	Labels []string     `json:"labels"`
}

func sqrtApprox(x float64) float64 {
	if x <= 0.0 {
		return 0.0
	}
	var guess float64 = x
	_ = guess
	var i int = 0
	_ = i
	for i < 20 {
		guess = (float64((guess + (float64(x) / float64(guess)))) / float64(2.0))
		i = (i + 1)
	}
	return guess
}

func make_knn(train_data [][]float64, train_target []int, class_labels []string) KNN {
	var items []PointLabel = []PointLabel{}
	_ = items
	var i int = 0
	_ = i
	for i < len(train_data) {
		var pl PointLabel = PointLabel{
			Point: _index(train_data, i),
			Label: _index(train_target, i),
		}
		_ = pl
		items = append(items, pl)
		i = (i + 1)
	}
	return KNN{
		Data:   items,
		Labels: class_labels,
	}
}

func euclidean_distance(a []float64, b []float64) float64 {
	var sum float64 = 0.0
	_ = sum
	var i int = 0
	_ = i
	for i < len(a) {
		var diff float64 = (_index(a, i) - _index(b, i))
		_ = diff
		sum = (sum + (diff * diff))
		i = (i + 1)
	}
	return sqrtApprox(sum)
}

type DistLabel struct {
	Dist  float64 `json:"dist"`
	Label int     `json:"label"`
}

func classify(knn KNN, pred_point []float64, k int) string {
	var distances []DistLabel = []DistLabel{}
	_ = distances
	var i int = 0
	_ = i
	for i < len(knn.Data) {
		var d float64 = euclidean_distance(func(v any) []float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []float64{}
				}
				out := make([]float64, len(arr))
				for i, x := range arr {
					out[i] = x.(float64)
				}
				return out
			}
			return v.([]float64)
		}(_index(knn.Data, i).Point), func(v any) []float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []float64{}
				}
				out := make([]float64, len(arr))
				for i, x := range arr {
					out[i] = x.(float64)
				}
				return out
			}
			return v.([]float64)
		}(pred_point))
		_ = d
		distances = append(distances, DistLabel{
			Dist:  d,
			Label: _index(knn.Data, i).Label,
		})
		i = (i + 1)
	}
	var votes []int = []int{}
	_ = votes
	var count int = 0
	_ = count
	for count < k {
		var min_index int = 0
		_ = min_index
		var j int = 1
		_ = j
		for j < len(distances) {
			if _index(distances, j).Dist < _index(distances, min_index).Dist {
				min_index = j
			}
			j = (j + 1)
		}
		votes = append(votes, _index(distances, min_index).Label)
		_tmp1 := _index(distances, min_index)
		_ = _tmp1
		_tmp1.Dist = 1000000000000000000.0
		_setIndex(distances, min_index, _tmp1)
		count = (count + 1)
	}
	var tally []int = []int{}
	_ = tally
	var t int = 0
	_ = t
	for t < len(knn.Labels) {
		tally = append(tally, 0)
		t = (t + 1)
	}
	var v int = 0
	_ = v
	for v < len(votes) {
		var lbl int = _index(votes, v)
		_ = lbl
		_setIndex(tally, lbl, (_index(tally, lbl) + 1))
		v = (v + 1)
	}
	var max_idx int = 0
	_ = max_idx
	var m int = 1
	_ = m
	for m < len(tally) {
		if _index(tally, m) > _index(tally, max_idx) {
			max_idx = m
		}
		m = (m + 1)
	}
	return _index(knn.Labels, max_idx)
}

var train_X [][]float64

var train_y []int

var classes []string

var knn KNN

var point []float64

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		train_X = [][]float64{[]float64{0.0, 0.0}, []float64{1.0, 0.0}, []float64{0.0, 1.0}, []float64{0.5, 0.5}, []float64{3.0, 3.0}, []float64{2.0, 3.0}, []float64{3.0, 2.0}}
		train_y = []int{0, 0, 0, 0, 1, 1, 1}
		classes = []string{"A", "B"}
		knn = make_knn(func(v any) [][]float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]float64{}
				}
				out := make([][]float64, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []float64 {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]float64); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []float64{}
							}
							out := make([]float64, len(arr))
							for i, x := range arr {
								out[i] = x.(float64)
							}
							return out
						}
						return v.([]float64)
					}(x)
				}
				return out
			}
			return v.([][]float64)
		}(train_X), func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(train_y), func(v any) []string {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]string); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []string{}
				}
				out := make([]string, len(arr))
				for i, x := range arr {
					out[i] = fmt.Sprint(x)
				}
				return out
			}
			return v.([]string)
		}(classes))
		point = []float64{1.2, 1.2}
		fmt.Println(classify(knn, func(v any) []float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []float64{}
				}
				out := make([]float64, len(arr))
				for i, x := range arr {
					out[i] = x.(float64)
				}
				return out
			}
			return v.([]float64)
		}(point), 5))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
