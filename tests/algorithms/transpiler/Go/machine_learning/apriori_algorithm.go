//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-15 10:29:19 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		return
	}
	s[idx] = v
}

type Itemset struct {
	Items   []string `json:"items"`
	Support int      `json:"support"`
}

func load_data() [][]string {
	return [][]string{[]string{"milk"}, []string{"milk", "butter"}, []string{"milk", "bread"}, []string{"milk", "bread", "chips"}}
}

func contains_string(xs []string, s string) bool {
	for _, v := range xs {
		if v == s {
			return true
		}
	}
	return false
}

func is_subset(candidate []string, transaction []string) bool {
	for _, it := range candidate {
		if !contains_string(func(v any) []string {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]string); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []string{}
				}
				out := make([]string, len(arr))
				for i, x := range arr {
					out[i] = fmt.Sprint(x)
				}
				return out
			}
			return v.([]string)
		}(transaction), it) {
			return false
		}
	}
	return true
}

func lists_equal(a []string, b []string) bool {
	if len(a) != len(b) {
		return false
	}
	var i int = 0
	_ = i
	for i < len(a) {
		if _index(a, i) != _index(b, i) {
			return false
		}
		i = (i + 1)
	}
	return true
}

func contains_list(itemset [][]string, item []string) bool {
	for _, l := range itemset {
		if lists_equal(func(v any) []string {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]string); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []string{}
				}
				out := make([]string, len(arr))
				for i, x := range arr {
					out[i] = fmt.Sprint(x)
				}
				return out
			}
			return v.([]string)
		}(l), func(v any) []string {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]string); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []string{}
				}
				out := make([]string, len(arr))
				for i, x := range arr {
					out[i] = fmt.Sprint(x)
				}
				return out
			}
			return v.([]string)
		}(item)) {
			return true
		}
	}
	return false
}

func count_list(itemset [][]string, item []string) int {
	var c int = 0
	_ = c
	for _, l := range itemset {
		if lists_equal(func(v any) []string {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]string); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []string{}
				}
				out := make([]string, len(arr))
				for i, x := range arr {
					out[i] = fmt.Sprint(x)
				}
				return out
			}
			return v.([]string)
		}(l), func(v any) []string {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]string); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []string{}
				}
				out := make([]string, len(arr))
				for i, x := range arr {
					out[i] = fmt.Sprint(x)
				}
				return out
			}
			return v.([]string)
		}(item)) {
			c = (c + 1)
		}
	}
	return c
}

func slice_list(xs [][]string, start int) [][]string {
	var res [][]string = [][]string{}
	_ = res
	var i int = start
	_ = i
	for i < len(xs) {
		res = append(res, _index(xs, i))
		i = (i + 1)
	}
	return res
}

func combinations_lists(xs [][]string, k int) [][][]string {
	var result [][][]string = [][][]string{}
	_ = result
	if k == 0 {
		result = append(result, [][]string{})
		return result
	}
	var i int = 0
	_ = i
	for i < len(xs) {
		var head []string = _index(xs, i)
		_ = head
		var tail [][]string = slice_list(func(v any) [][]string {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]string); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]string{}
				}
				out := make([][]string, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []string {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]string); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []string{}
							}
							out := make([]string, len(arr))
							for i, x := range arr {
								out[i] = x.(string)
							}
							return out
						}
						return v.([]string)
					}(x)
				}
				return out
			}
			return v.([][]string)
		}(xs), (i + 1))
		_ = tail
		var tail_combos [][][]string = combinations_lists(func(v any) [][]string {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]string); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]string{}
				}
				out := make([][]string, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []string {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]string); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []string{}
							}
							out := make([]string, len(arr))
							for i, x := range arr {
								out[i] = x.(string)
							}
							return out
						}
						return v.([]string)
					}(x)
				}
				return out
			}
			return v.([][]string)
		}(tail), (k - 1))
		_ = tail_combos
		for _, combo := range tail_combos {
			var new_combo [][]string = [][]string{}
			_ = new_combo
			new_combo = append(new_combo, head)
			for _, c := range combo {
				new_combo = append(new_combo, c)
			}
			result = append(result, new_combo)
		}
		i = (i + 1)
	}
	return result
}

func prune(itemset [][]string, candidates [][][]string, length int) [][]string {
	var pruned [][]string = [][]string{}
	_ = pruned
	for _, candidate := range candidates {
		var is_subsequence bool = true
		_ = is_subsequence
		for _, item := range candidate {
			if !contains_list(func(v any) [][]string {
				if v == nil {
					return nil
				}
				if vv, ok := v.([][]string); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return [][]string{}
					}
					out := make([][]string, len(arr))
					for i, x := range arr {
						out[i] = func(v any) []string {
							if v == nil {
								return nil
							}
							if vv, ok := v.([]string); ok {
								return vv
							}
							if arr, ok := v.([]any); ok {
								if len(arr) == 0 {
									return []string{}
								}
								out := make([]string, len(arr))
								for i, x := range arr {
									out[i] = x.(string)
								}
								return out
							}
							return v.([]string)
						}(x)
					}
					return out
				}
				return v.([][]string)
			}(itemset), func(v any) []string {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]string); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []string{}
					}
					out := make([]string, len(arr))
					for i, x := range arr {
						out[i] = fmt.Sprint(x)
					}
					return out
				}
				return v.([]string)
			}(item)) || (count_list(func(v any) [][]string {
				if v == nil {
					return nil
				}
				if vv, ok := v.([][]string); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return [][]string{}
					}
					out := make([][]string, len(arr))
					for i, x := range arr {
						out[i] = func(v any) []string {
							if v == nil {
								return nil
							}
							if vv, ok := v.([]string); ok {
								return vv
							}
							if arr, ok := v.([]any); ok {
								if len(arr) == 0 {
									return []string{}
								}
								out := make([]string, len(arr))
								for i, x := range arr {
									out[i] = x.(string)
								}
								return out
							}
							return v.([]string)
						}(x)
					}
					return out
				}
				return v.([][]string)
			}(itemset), func(v any) []string {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]string); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []string{}
					}
					out := make([]string, len(arr))
					for i, x := range arr {
						out[i] = fmt.Sprint(x)
					}
					return out
				}
				return v.([]string)
			}(item)) < (length - 1)) {
				is_subsequence = false
				break
			}
		}
		if is_subsequence {
			var merged []string = []string{}
			_ = merged
			for _, item := range candidate {
				for _, s := range item {
					if !contains_string(func(v any) []string {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]string); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []string{}
							}
							out := make([]string, len(arr))
							for i, x := range arr {
								out[i] = fmt.Sprint(x)
							}
							return out
						}
						return v.([]string)
					}(merged), s) {
						merged = append(merged, s)
					}
				}
			}
			pruned = append(pruned, merged)
		}
	}
	return pruned
}

func sort_strings(xs []string) []string {
	var res []string = []string{}
	_ = res
	for _, s := range xs {
		res = append(res, s)
	}
	var i int = 0
	_ = i
	for i < len(res) {
		var j int = (i + 1)
		_ = j
		for j < len(res) {
			if _index(res, j) < _index(res, i) {
				var tmp string = _index(res, i)
				_ = tmp
				_setIndex(res, i, _index(res, j))
				_setIndex(res, j, tmp)
			}
			j = (j + 1)
		}
		i = (i + 1)
	}
	return res
}

func itemset_to_string(xs []string) string {
	var s string = "["
	_ = s
	var i int = 0
	_ = i
	for i < len(xs) {
		if i > 0 {
			s = (s + ", ")
		}
		s = (((s + "'") + _index(xs, i)) + "'")
		i = (i + 1)
	}
	s = (s + "]")
	return s
}

func apriori(data [][]string, min_support int) []Itemset {
	var itemset [][]string = [][]string{}
	_ = itemset
	for _, transaction := range data {
		var t []string = []string{}
		_ = t
		for _, v := range transaction {
			t = append(t, v)
		}
		itemset = append(itemset, t)
	}
	var frequent []Itemset = []Itemset{}
	_ = frequent
	var length int = 1
	_ = length
	for len(itemset) > 0 {
		var counts []int = []int{}
		_ = counts
		var idx int = 0
		_ = idx
		for idx < len(itemset) {
			counts = append(counts, 0)
			idx = (idx + 1)
		}
		for _, transaction := range data {
			var j int = 0
			_ = j
			for j < len(itemset) {
				var candidate []string = _index(itemset, j)
				_ = candidate
				if is_subset(func(v any) []string {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]string); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []string{}
						}
						out := make([]string, len(arr))
						for i, x := range arr {
							out[i] = fmt.Sprint(x)
						}
						return out
					}
					return v.([]string)
				}(candidate), func(v any) []string {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]string); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []string{}
						}
						out := make([]string, len(arr))
						for i, x := range arr {
							out[i] = fmt.Sprint(x)
						}
						return out
					}
					return v.([]string)
				}(transaction)) {
					_setIndex(counts, j, (_index(counts, j) + 1))
				}
				j = (j + 1)
			}
		}
		var new_itemset [][]string = [][]string{}
		_ = new_itemset
		var k int = 0
		_ = k
		for k < len(itemset) {
			if _index(counts, k) >= min_support {
				new_itemset = append(new_itemset, _index(itemset, k))
			}
			k = (k + 1)
		}
		itemset = new_itemset
		var m int = 0
		_ = m
		for m < len(itemset) {
			var sorted_item []string = sort_strings(func(v any) []string {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]string); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []string{}
					}
					out := make([]string, len(arr))
					for i, x := range arr {
						out[i] = fmt.Sprint(x)
					}
					return out
				}
				return v.([]string)
			}(_index(itemset, m)))
			_ = sorted_item
			frequent = append(frequent, Itemset{
				Items:   sorted_item,
				Support: _index(counts, m),
			})
			m = (m + 1)
		}
		length = (length + 1)
		var combos [][][]string = combinations_lists(func(v any) [][]string {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]string); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]string{}
				}
				out := make([][]string, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []string {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]string); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []string{}
							}
							out := make([]string, len(arr))
							for i, x := range arr {
								out[i] = x.(string)
							}
							return out
						}
						return v.([]string)
					}(x)
				}
				return out
			}
			return v.([][]string)
		}(itemset), length)
		_ = combos
		itemset = prune(func(v any) [][]string {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]string); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]string{}
				}
				out := make([][]string, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []string {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]string); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []string{}
							}
							out := make([]string, len(arr))
							for i, x := range arr {
								out[i] = x.(string)
							}
							return out
						}
						return v.([]string)
					}(x)
				}
				return out
			}
			return v.([][]string)
		}(itemset), func(v any) [][][]string {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][][]string); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][][]string{}
				}
				out := make([][][]string, len(arr))
				for i, x := range arr {
					out[i] = func(v any) [][]string {
						if v == nil {
							return nil
						}
						if vv, ok := v.([][]string); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return [][]string{}
							}
							out := make([][]string, len(arr))
							for i, x := range arr {
								out[i] = x.([]string)
							}
							return out
						}
						return v.([][]string)
					}(x)
				}
				return out
			}
			return v.([][][]string)
		}(combos), length)
	}
	return frequent
}

var frequent_itemsets []Itemset

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		frequent_itemsets = apriori(func(v any) [][]string {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]string); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]string{}
				}
				out := make([][]string, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []string {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]string); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []string{}
							}
							out := make([]string, len(arr))
							for i, x := range arr {
								out[i] = x.(string)
							}
							return out
						}
						return v.([]string)
					}(x)
				}
				return out
			}
			return v.([][]string)
		}(load_data()), 2)
		for _, fi := range frequent_itemsets {
			fmt.Println(((itemset_to_string(func(v any) []string {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]string); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []string{}
					}
					out := make([]string, len(arr))
					for i, x := range arr {
						out[i] = fmt.Sprint(x)
					}
					return out
				}
				return v.([]string)
			}(fi.Items)) + ": ") + fmt.Sprint(fi.Support)))
		}
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
