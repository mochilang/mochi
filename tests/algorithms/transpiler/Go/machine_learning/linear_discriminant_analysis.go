//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-16 11:55:37 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	math "math"
	"os"
	"runtime"
	"strconv"
	"strings"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _modi(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

var PI float64

var TWO_PI float64

var seed int

func rand() int {
	seed = _modi(((seed * 1103515245) + 12345), 2147483648)
	return seed
}

func random() float64 {
	return (float64(float64(rand())) / float64(2147483648.0))
}

func _mod(x float64, m float64) float64 {
	return (x - (float64(int((float64(x) / float64(m)))) * m))
}

func cos(x float64) float64 {
	var y float64 = (_mod((x+PI), TWO_PI) - PI)
	_ = y
	var y2 float64 = (y * y)
	_ = y2
	var y4 float64 = (y2 * y2)
	_ = y4
	var y6 float64 = (y4 * y2)
	_ = y6
	_ = y6
	return (((1.0 - (float64(y2) / float64(2.0))) + (float64(y4) / float64(24.0))) - (float64(y6) / float64(720.0)))
}

func sqrtApprox(x float64) float64 {
	if x <= 0.0 {
		return 0.0
	}
	var guess float64 = x
	_ = guess
	var i int = 0
	_ = i
	for i < 10 {
		guess = (float64((guess + (float64(x) / float64(guess)))) / float64(2.0))
		i = (i + 1)
	}
	return guess
}

func ln(x float64) float64 {
	var t float64 = (float64((x - 1.0)) / float64((x + 1.0)))
	_ = t
	var term float64 = t
	_ = term
	var sum float64 = 0.0
	_ = sum
	var n int = 1
	_ = n
	for n <= 19 {
		sum = (sum + (float64(term) / float64(n)))
		term = ((term * t) * t)
		n = (n + 2)
	}
	return (2.0 * sum)
}

func gaussian_distribution(mean float64, std_dev float64, instance_count int) []float64 {
	var res []float64 = []float64{}
	_ = res
	var i int = 0
	_ = i
	for i < instance_count {
		var u1 float64 = random()
		_ = u1
		var u2 float64 = random()
		_ = u2
		var r float64 = sqrtApprox(((0 - 2.0) * math.Log(u1)))
		_ = r
		var theta float64 = (TWO_PI * u2)
		_ = theta
		var z float64 = (r * cos(theta))
		_ = z
		res = append(res, (mean + (z * std_dev)))
		i = (i + 1)
	}
	return res
}

func y_generator(class_count int, instance_count []int) []int {
	var res []int = []int{}
	_ = res
	var k int = 0
	_ = k
	for k < class_count {
		var i int = 0
		_ = i
		for i < _index(instance_count, k) {
			res = append(res, k)
			i = (i + 1)
		}
		k = (k + 1)
	}
	return res
}

func calculate_mean(instance_count int, items []float64) float64 {
	var total float64 = 0.0
	_ = total
	var i int = 0
	_ = i
	for i < instance_count {
		total = (total + _index(items, i))
		i = (i + 1)
	}
	return (float64(total) / float64(instance_count))
}

func calculate_probabilities(instance_count int, total_count int) float64 {
	return (float64(instance_count) / float64(total_count))
}

func calculate_variance(items [][]float64, means []float64, total_count int) float64 {
	var squared_diff []float64 = []float64{}
	_ = squared_diff
	var i int = 0
	_ = i
	for i < len(items) {
		var j int = 0
		_ = j
		for j < len(_index(items, i)) {
			var diff float64 = (_index(_index(items, i), j) - _index(means, i))
			_ = diff
			squared_diff = append(squared_diff, (diff * diff))
			j = (j + 1)
		}
		i = (i + 1)
	}
	var sum_sq float64 = 0.0
	_ = sum_sq
	var k int = 0
	_ = k
	for k < len(squared_diff) {
		sum_sq = (sum_sq + _index(squared_diff, k))
		k = (k + 1)
	}
	var n_classes int = len(means)
	_ = n_classes
	_ = n_classes
	return ((float64(1.0) / float64(float64((total_count - n_classes)))) * sum_sq)
}

func predict_y_values(x_items [][]float64, means []float64, variance float64, probabilities []float64) []int {
	var results []int = []int{}
	_ = results
	var i int = 0
	_ = i
	for i < len(x_items) {
		var j int = 0
		_ = j
		for j < len(_index(x_items, i)) {
			var temp []float64 = []float64{}
			_ = temp
			var k int = 0
			_ = k
			for k < len(x_items) {
				var discr float64 = (((_index(_index(x_items, i), j) * (float64(_index(means, k)) / float64(variance))) - (float64((_index(means, k) * _index(means, k))) / float64((2.0 * variance)))) + math.Log(_index(probabilities, k)))
				_ = discr
				temp = append(temp, discr)
				k = (k + 1)
			}
			var max_idx int = 0
			_ = max_idx
			var max_val float64 = _index(temp, 0)
			_ = max_val
			var t int = 1
			_ = t
			for t < len(temp) {
				if _index(temp, t) > max_val {
					max_val = _index(temp, t)
					max_idx = t
				}
				t = (t + 1)
			}
			results = append(results, max_idx)
			j = (j + 1)
		}
		i = (i + 1)
	}
	return results
}

func accuracy(actual_y []int, predicted_y []int) float64 {
	var correct int = 0
	_ = correct
	var i int = 0
	_ = i
	for i < len(actual_y) {
		if _index(actual_y, i) == _index(predicted_y, i) {
			correct = (correct + 1)
		}
		i = (i + 1)
	}
	return ((float64(correct) / float64(float64(len(actual_y)))) * 100.0)
}

func mochiMain() {
	seed = 1
	var counts []int = []int{20, 20, 20}
	_ = counts
	var means []float64 = []float64{5.0, 10.0, 15.0}
	_ = means
	var std_dev float64 = 1.0
	_ = std_dev
	var x [][]float64 = [][]float64{}
	_ = x
	var i int = 0
	_ = i
	for i < len(counts) {
		x = append(x, gaussian_distribution(_index(means, i), std_dev, _index(counts, i)))
		i = (i + 1)
	}
	var y []int = y_generator(len(counts), func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(counts))
	_ = y
	_ = y
	var actual_means []float64 = []float64{}
	_ = actual_means
	i = 0
	for i < len(counts) {
		actual_means = append(actual_means, calculate_mean(_index(counts, i), func(v any) []float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []float64{}
				}
				out := make([]float64, len(arr))
				for i, x := range arr {
					out[i] = x.(float64)
				}
				return out
			}
			return v.([]float64)
		}(_index(x, i))))
		i = (i + 1)
	}
	var total_count int = 0
	_ = total_count
	i = 0
	for i < len(counts) {
		total_count = (total_count + _index(counts, i))
		i = (i + 1)
	}
	var probabilities []float64 = []float64{}
	_ = probabilities
	i = 0
	for i < len(counts) {
		probabilities = append(probabilities, calculate_probabilities(_index(counts, i), total_count))
		i = (i + 1)
	}
	var variance float64 = calculate_variance(func(v any) [][]float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]float64{}
			}
			out := make([][]float64, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []float64 {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]float64); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []float64{}
						}
						out := make([]float64, len(arr))
						for i, x := range arr {
							out[i] = x.(float64)
						}
						return out
					}
					return v.([]float64)
				}(x)
			}
			return out
		}
		return v.([][]float64)
	}(x), func(v any) []float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []float64{}
			}
			out := make([]float64, len(arr))
			for i, x := range arr {
				out[i] = x.(float64)
			}
			return out
		}
		return v.([]float64)
	}(actual_means), total_count)
	_ = variance
	var predicted []int = predict_y_values(func(v any) [][]float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]float64{}
			}
			out := make([][]float64, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []float64 {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]float64); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []float64{}
						}
						out := make([]float64, len(arr))
						for i, x := range arr {
							out[i] = x.(float64)
						}
						return out
					}
					return v.([]float64)
				}(x)
			}
			return out
		}
		return v.([][]float64)
	}(x), func(v any) []float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []float64{}
			}
			out := make([]float64, len(arr))
			for i, x := range arr {
				out[i] = x.(float64)
			}
			return out
		}
		return v.([]float64)
	}(actual_means), variance, func(v any) []float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []float64{}
			}
			out := make([]float64, len(arr))
			for i, x := range arr {
				out[i] = x.(float64)
			}
			return out
		}
		return v.([]float64)
	}(probabilities))
	_ = predicted
	_ = predicted
	fmt.Println(func() string {
		b, _ := json.Marshal(predicted)
		s := string(b)
		s = strings.ReplaceAll(s, ":", ": ")
		s = strings.ReplaceAll(s, ",", ", ")
		s = strings.ReplaceAll(s, "}, {", "},{")
		return s
	}())
	fmt.Println(func() string {
		f := float64(accuracy(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(y), func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(predicted)))
		if f == 0 && math.Signbit(f) {
			return "-0"
		}
		if f == float64(int(f)) {
			return fmt.Sprintf("%.1f", f)
		}
		return fmt.Sprint(f)
	}())
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		PI = 3.141592653589793
		TWO_PI = 6.283185307179586
		seed = 1
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
