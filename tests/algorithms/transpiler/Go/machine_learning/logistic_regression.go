//go:build ignore

// Generated by Mochi v0.10.67 on 2025-08-16 19:48:33 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	math "math"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		return
	}
	s[idx] = v
}

func expApprox(x float64) float64 {
	var y float64 = x
	_ = y
	var is_neg bool = false
	_ = is_neg
	if x < 0.0 {
		is_neg = true
		y = (0 - x)
	}
	var term float64 = 1.0
	_ = term
	var sum float64 = 1.0
	_ = sum
	var n int = 1
	_ = n
	for n < 30 {
		term = (float64((term * y)) / float64(n))
		sum = (sum + term)
		n = (n + 1)
	}
	if is_neg {
		return (float64(1.0) / float64(sum))
	}
	return sum
}

func sigmoid(z float64) float64 {
	return (float64(1.0) / float64((1.0 + expApprox((0 - z)))))
}

func dot(a []float64, b []float64) float64 {
	var s float64 = 0.0
	_ = s
	var i int = 0
	_ = i
	for i < len(a) {
		s = (s + (_index(a, i) * _index(b, i)))
		i = (i + 1)
	}
	return s
}

func zeros(n int) []float64 {
	var res []float64 = []float64{}
	_ = res
	var i int = 0
	_ = i
	for i < n {
		res = append(res, 0.0)
		i = (i + 1)
	}
	return res
}

func logistic_reg(alpha float64, x [][]float64, y []float64, iterations int) []float64 {
	var m int = len(x)
	_ = m
	var n int = len(_index(x, 0))
	_ = n
	var theta []float64 = zeros(n)
	_ = theta
	var iter int = 0
	_ = iter
	for iter < iterations {
		var grad []float64 = zeros(n)
		_ = grad
		var i int = 0
		_ = i
		for i < m {
			var z float64 = dot(func(v any) []float64 {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]float64); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []float64{}
					}
					out := make([]float64, len(arr))
					for i, x := range arr {
						out[i] = x.(float64)
					}
					return out
				}
				return v.([]float64)
			}(_index(x, i)), func(v any) []float64 {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]float64); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []float64{}
					}
					out := make([]float64, len(arr))
					for i, x := range arr {
						out[i] = x.(float64)
					}
					return out
				}
				return v.([]float64)
			}(theta))
			_ = z
			var h float64 = sigmoid(z)
			_ = h
			var k int = 0
			_ = k
			for k < n {
				_setIndex(grad, k, (_index(grad, k) + ((h - _index(y, i)) * _index(_index(x, i), k))))
				k = (k + 1)
			}
			i = (i + 1)
		}
		var k2 int = 0
		_ = k2
		for k2 < n {
			_setIndex(theta, k2, (_index(theta, k2) - (float64((alpha * _index(grad, k2))) / float64(m))))
			k2 = (k2 + 1)
		}
		iter = (iter + 1)
	}
	return theta
}

var x [][]float64

var y []float64

var alpha float64

var iterations int

var theta []float64

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		x = [][]float64{[]float64{0.5, 1.5}, []float64{1.0, 1.0}, []float64{1.5, 0.5}, []float64{3.0, 3.5}, []float64{3.5, 3.0}, []float64{4.0, 4.0}}
		y = []float64{0.0, 0.0, 0.0, 1.0, 1.0, 1.0}
		alpha = 0.1
		iterations = 1000
		theta = logistic_reg(alpha, func(v any) [][]float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]float64{}
				}
				out := make([][]float64, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []float64 {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]float64); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []float64{}
							}
							out := make([]float64, len(arr))
							for i, x := range arr {
								out[i] = x.(float64)
							}
							return out
						}
						return v.([]float64)
					}(x)
				}
				return out
			}
			return v.([][]float64)
		}(x), func(v any) []float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []float64{}
				}
				out := make([]float64, len(arr))
				for i, x := range arr {
					out[i] = x.(float64)
				}
				return out
			}
			return v.([]float64)
		}(y), iterations)
		for i := 0; i < len(theta); i++ {
			fmt.Println(func() string {
				f := float64(_index(theta, i))
				if f == 0 && math.Signbit(f) {
					return "-0"
				}
				if math.Abs(f-float64(int(f))) < 1e-9 {
					return fmt.Sprintf("%.1f", f)
				}
				return fmt.Sprint(f)
			}())
		}
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
