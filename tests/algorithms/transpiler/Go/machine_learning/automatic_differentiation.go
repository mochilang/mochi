//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-15 21:40:19 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

type Dual struct {
	Value float64 `json:"value"`
	Deriv float64 `json:"deriv"`
}

func dual(v float64, d float64) Dual {
	return Dual{
		Value: v,
		Deriv: d,
	}
}

func pow_float(base float64, exp int) float64 {
	var res float64 = 1.0
	_ = res
	var i int = 0
	_ = i
	for i < exp {
		res = (res * base)
		i = (i + 1)
	}
	return res
}

func add(a Dual, b Dual) Dual {
	return Dual{
		Value: (a.Value + b.Value),
		Deriv: (a.Deriv + b.Deriv),
	}
}

func sub(a Dual, b Dual) Dual {
	return Dual{
		Value: (a.Value - b.Value),
		Deriv: (a.Deriv - b.Deriv),
	}
}

func mul(a Dual, b Dual) Dual {
	return Dual{
		Value: (a.Value * b.Value),
		Deriv: ((a.Deriv * b.Value) + (b.Deriv * a.Value)),
	}
}

func div(a Dual, b Dual) Dual {
	return Dual{
		Value: (float64(a.Value) / float64(b.Value)),
		Deriv: (float64(((a.Deriv * b.Value) - (b.Deriv * a.Value))) / float64((b.Value * b.Value))),
	}
}

func power(a Dual, p int) Dual {
	return Dual{
		Value: pow_float(a.Value, p),
		Deriv: (((1.0 * float64(p)) * pow_float(a.Value, (p-1))) * a.Deriv),
	}
}

func mochiMain() {
	var a Dual = dual(2.0, 1.0)
	_ = a
	var b Dual = dual(1.0, 0.0)
	_ = b
	var c Dual = add(a, b)
	_ = c
	var d Dual = mul(a, b)
	_ = d
	var e Dual = div(c, d)
	_ = e
	fmt.Println(fmt.Sprint(e.Deriv))
	var x Dual = dual(2.0, 1.0)
	_ = x
	var y Dual = power(x, 3)
	_ = y
	fmt.Println(fmt.Sprint(y.Deriv))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
