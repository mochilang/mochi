//go:build ignore

// Generated by Mochi v0.10.67 on 2025-08-16 19:48:48 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	math "math"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

var PI float64

func sinApprox(x float64) float64 {
	var term float64 = x
	_ = term
	var sum float64 = x
	_ = sum
	var n int = 1
	_ = n
	for n <= 10 {
		var denom float64 = float64(((2 * n) * ((2 * n) + 1)))
		_ = denom
		term = (float64((((0 - term) * x) * x)) / float64(denom))
		sum = (sum + term)
		n = (n + 1)
	}
	return sum
}

func cosApprox(x float64) float64 {
	var term float64 = 1.0
	_ = term
	var sum float64 = 1.0
	_ = sum
	var n int = 1
	_ = n
	for n <= 10 {
		var denom float64 = float64((((2 * n) - 1) * (2 * n)))
		_ = denom
		term = (float64((((0 - term) * x) * x)) / float64(denom))
		sum = (sum + term)
		n = (n + 1)
	}
	return sum
}

func expApprox(x float64) float64 {
	var sum float64 = 1.0
	_ = sum
	var term float64 = 1.0
	_ = term
	var n int = 1
	_ = n
	for n < 10 {
		term = (float64((term * x)) / float64(n))
		sum = (sum + term)
		n = (n + 1)
	}
	return sum
}

func ln(x float64) float64 {
	var t float64 = (float64((x - 1.0)) / float64((x + 1.0)))
	_ = t
	var term float64 = t
	_ = term
	var sum float64 = 0.0
	_ = sum
	var n int = 1
	_ = n
	for n <= 19 {
		sum = (sum + (float64(term) / float64(n)))
		term = ((term * t) * t)
		n = (n + 2)
	}
	return (2.0 * sum)
}

func log10(x float64) float64 {
	return (float64(math.Log(x)) / float64(math.Log(10.0)))
}

func sqrtApprox(x float64) float64 {
	if x <= 0.0 {
		return 0.0
	}
	var guess float64 = x
	_ = guess
	var i int = 0
	_ = i
	for i < 10 {
		guess = (float64((guess + (float64(x) / float64(guess)))) / float64(2.0))
		i = (i + 1)
	}
	return guess
}

func absf(x float64) float64 {
	if x < 0.0 {
		return (0 - x)
	}
	return x
}

func normalize(audio []float64) []float64 {
	var max_val float64 = 0.0
	_ = max_val
	var i int = 0
	_ = i
	for i < len(audio) {
		var v float64 = absf(_index(audio, i))
		_ = v
		if v > max_val {
			max_val = v
		}
		i = (i + 1)
	}
	var res []float64 = []float64{}
	_ = res
	i = 0
	for i < len(audio) {
		res = append(res, (float64(_index(audio, i)) / float64(max_val)))
		i = (i + 1)
	}
	return res
}

func dft(frame []float64, bins int) []float64 {
	var N int = len(frame)
	_ = N
	var spec []float64 = []float64{}
	_ = spec
	var k int = 0
	_ = k
	for k < bins {
		var real float64 = 0.0
		_ = real
		var imag float64 = 0.0
		_ = imag
		var n int = 0
		_ = n
		for n < N {
			var angle float64 = (float64(((((0 - 2.0) * PI) * float64(k)) * float64(n))) / float64(N))
			_ = angle
			real = (real + (_index(frame, n) * cosApprox(angle)))
			imag = (imag + (_index(frame, n) * sinApprox(angle)))
			n = (n + 1)
		}
		spec = append(spec, ((real * real) + (imag * imag)))
		k = (k + 1)
	}
	return spec
}

func triangular_filters(bins int, spectrum_size int) [][]float64 {
	var filters [][]float64 = [][]float64{}
	_ = filters
	var b int = 0
	_ = b
	for b < bins {
		var center int = (((b + 1) * spectrum_size) / (bins + 1))
		_ = center
		var filt []float64 = []float64{}
		_ = filt
		var i int = 0
		_ = i
		for i < spectrum_size {
			var v float64 = 0.0
			_ = v
			if i <= center {
				v = (float64(i) / float64(center))
			} else {
				v = (float64(float64((spectrum_size - i))) / float64(float64((spectrum_size - center))))
			}
			filt = append(filt, v)
			i = (i + 1)
		}
		filters = append(filters, filt)
		b = (b + 1)
	}
	return filters
}

func dot(mat [][]float64, vec []float64) []float64 {
	var res []float64 = []float64{}
	_ = res
	var i int = 0
	_ = i
	for i < len(mat) {
		var sum float64 = 0.0
		_ = sum
		var j int = 0
		_ = j
		for j < len(vec) {
			sum = (sum + (_index(_index(mat, i), j) * _index(vec, j)))
			j = (j + 1)
		}
		res = append(res, sum)
		i = (i + 1)
	}
	return res
}

func discrete_cosine_transform(dct_filter_num int, filter_num int) [][]float64 {
	var basis [][]float64 = [][]float64{}
	_ = basis
	var i int = 0
	_ = i
	for i < dct_filter_num {
		var row []float64 = []float64{}
		_ = row
		var j int = 0
		_ = j
		for j < filter_num {
			if i == 0 {
				row = append(row, (float64(1.0) / float64(sqrtApprox(float64(filter_num)))))
			} else {
				var angle float64 = (float64(((float64(((2 * j) + 1)) * float64(i)) * PI)) / float64((2.0 * float64(filter_num))))
				_ = angle
				row = append(row, (cosApprox(angle) * sqrtApprox((float64(2.0) / float64(filter_num)))))
			}
			j = (j + 1)
		}
		basis = append(basis, row)
		i = (i + 1)
	}
	return basis
}

func mfcc(audio []float64, bins int, dct_num int) []float64 {
	var norm []float64 = normalize(func(v any) []float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []float64{}
			}
			out := make([]float64, len(arr))
			for i, x := range arr {
				out[i] = x.(float64)
			}
			return out
		}
		return v.([]float64)
	}(audio))
	_ = norm
	var spec []float64 = dft(func(v any) []float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []float64{}
			}
			out := make([]float64, len(arr))
			for i, x := range arr {
				out[i] = x.(float64)
			}
			return out
		}
		return v.([]float64)
	}(norm), (bins + 2))
	_ = spec
	var filters [][]float64 = triangular_filters(bins, len(spec))
	_ = filters
	var energies []float64 = dot(func(v any) [][]float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]float64{}
			}
			out := make([][]float64, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []float64 {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]float64); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []float64{}
						}
						out := make([]float64, len(arr))
						for i, x := range arr {
							out[i] = x.(float64)
						}
						return out
					}
					return v.([]float64)
				}(x)
			}
			return out
		}
		return v.([][]float64)
	}(filters), func(v any) []float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []float64{}
			}
			out := make([]float64, len(arr))
			for i, x := range arr {
				out[i] = x.(float64)
			}
			return out
		}
		return v.([]float64)
	}(spec))
	_ = energies
	var logfb []float64 = []float64{}
	_ = logfb
	var i int = 0
	_ = i
	for i < len(energies) {
		logfb = append(logfb, (10.0 * log10((_index(energies, i) + 1e-10))))
		i = (i + 1)
	}
	var dct_basis [][]float64 = discrete_cosine_transform(dct_num, bins)
	_ = dct_basis
	var res []float64 = dot(func(v any) [][]float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]float64{}
			}
			out := make([][]float64, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []float64 {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]float64); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []float64{}
						}
						out := make([]float64, len(arr))
						for i, x := range arr {
							out[i] = x.(float64)
						}
						return out
					}
					return v.([]float64)
				}(x)
			}
			return out
		}
		return v.([][]float64)
	}(dct_basis), func(v any) []float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []float64{}
			}
			out := make([]float64, len(arr))
			for i, x := range arr {
				out[i] = x.(float64)
			}
			return out
		}
		return v.([]float64)
	}(logfb))
	_ = res
	if len(res) == 0 {
		res = []float64{0.0, 0.0, 0.0}
	}
	return res
}

var sample_rate int

var size int

var audio []float64

var n int

var coeffs []float64

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		PI = 3.141592653589793
		sample_rate = 8000
		size = 16
		audio = []float64{}
		n = 0
		for n < size {
			var t float64 = (float64(n) / float64(sample_rate))
			_ = t
			audio = append(audio, sinApprox((((2.0 * PI) * 440.0) * t)))
			n = (n + 1)
		}
		coeffs = mfcc(func(v any) []float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []float64{}
				}
				out := make([]float64, len(arr))
				for i, x := range arr {
					out[i] = x.(float64)
				}
				return out
			}
			return v.([]float64)
		}(audio), 5, 3)
		for _, c := range coeffs {
			_ = c
			fmt.Println(func() string {
				f := float64(c)
				if f == 0 && math.Signbit(f) {
					return "-0"
				}
				if math.Abs(f-float64(int(f))) < 1e-9 {
					return fmt.Sprintf("%.1f", f)
				}
				return fmt.Sprint(f)
			}())
		}
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
