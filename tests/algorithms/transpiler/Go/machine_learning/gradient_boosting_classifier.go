//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-16 11:55:29 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		return
	}
	s[idx] = v
}

type Stump struct {
	Feature   int     `json:"feature"`
	Threshold float64 `json:"threshold"`
	Left      float64 `json:"left"`
	Right     float64 `json:"right"`
}

func exp_approx(x float64) float64 {
	var term float64 = 1.0
	_ = term
	var sum float64 = 1.0
	_ = sum
	var i int = 1
	_ = i
	for i < 10 {
		term = (float64((term * x)) / float64(i))
		sum = (sum + term)
		i = (i + 1)
	}
	return sum
}

func signf(x float64) float64 {
	if x >= 0.0 {
		return 1.0
	}
	return (0 - 1.0)
}

func gradient(target []float64, preds []float64) []float64 {
	var n int = len(target)
	_ = n
	var residuals []float64 = []float64{}
	_ = residuals
	var i int = 0
	_ = i
	for i < n {
		var t float64 = _index(target, i)
		_ = t
		var y float64 = _index(preds, i)
		_ = y
		var exp_val float64 = exp_approx((t * y))
		_ = exp_val
		var res float64 = (float64((0 - t)) / float64((1.0 + exp_val)))
		_ = res
		residuals = append(residuals, res)
		i = (i + 1)
	}
	return residuals
}

func predict_raw(models []Stump, features [][]float64, learning_rate float64) []float64 {
	var n int = len(features)
	_ = n
	var preds []float64 = []float64{}
	_ = preds
	var i int = 0
	_ = i
	for i < n {
		preds = append(preds, 0.0)
		i = (i + 1)
	}
	var m int = 0
	_ = m
	for m < len(models) {
		var stump Stump = _index(models, m)
		_ = stump
		i = 0
		for i < n {
			var value float64 = _index(_index(features, i), stump.Feature)
			_ = value
			if value <= stump.Threshold {
				_setIndex(preds, i, (_index(preds, i) + (learning_rate * stump.Left)))
			} else {
				_setIndex(preds, i, (_index(preds, i) + (learning_rate * stump.Right)))
			}
			i = (i + 1)
		}
		m = (m + 1)
	}
	return preds
}

func predict(models []Stump, features [][]float64, learning_rate float64) []float64 {
	var raw []float64 = predict_raw(func(v any) []Stump {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]Stump); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []Stump{}
			}
			out := make([]Stump, len(arr))
			for i, x := range arr {
				out[i] = x.(Stump)
			}
			return out
		}
		return v.([]Stump)
	}(models), func(v any) [][]float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]float64{}
			}
			out := make([][]float64, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []float64 {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]float64); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []float64{}
						}
						out := make([]float64, len(arr))
						for i, x := range arr {
							out[i] = x.(float64)
						}
						return out
					}
					return v.([]float64)
				}(x)
			}
			return out
		}
		return v.([][]float64)
	}(features), learning_rate)
	_ = raw
	var result []float64 = []float64{}
	_ = result
	var i int = 0
	_ = i
	for i < len(raw) {
		result = append(result, signf(_index(raw, i)))
		i = (i + 1)
	}
	return result
}

func train_stump(features [][]float64, residuals []float64) Stump {
	var n_samples int = len(features)
	_ = n_samples
	var n_features int = len(_index(features, 0))
	_ = n_features
	var best_feature int = 0
	_ = best_feature
	var best_threshold float64 = 0.0
	_ = best_threshold
	var best_error float64 = 1000000000.0
	_ = best_error
	var best_left float64 = 0.0
	_ = best_left
	var best_right float64 = 0.0
	_ = best_right
	var j int = 0
	_ = j
	for j < n_features {
		var t_index int = 0
		_ = t_index
		for t_index < n_samples {
			var t float64 = _index(_index(features, t_index), j)
			_ = t
			var sum_left float64 = 0.0
			_ = sum_left
			var count_left int = 0
			_ = count_left
			var sum_right float64 = 0.0
			_ = sum_right
			var count_right int = 0
			_ = count_right
			var i int = 0
			_ = i
			for i < n_samples {
				if _index(_index(features, i), j) <= t {
					sum_left = (sum_left + _index(residuals, i))
					count_left = (count_left + 1)
				} else {
					sum_right = (sum_right + _index(residuals, i))
					count_right = (count_right + 1)
				}
				i = (i + 1)
			}
			var left_val float64 = 0.0
			_ = left_val
			if count_left != 0 {
				left_val = (float64(sum_left) / float64(count_left))
			}
			var right_val float64 = 0.0
			_ = right_val
			if count_right != 0 {
				right_val = (float64(sum_right) / float64(count_right))
			}
			var error float64 = 0.0
			_ = error
			i = 0
			for i < n_samples {
				var pred float64 = func() float64 {
					if _index(_index(features, i), j) <= t {
						return left_val
					} else {
						return right_val
					}
				}()
				_ = pred
				var diff float64 = (_index(residuals, i) - pred)
				_ = diff
				error = (error + (diff * diff))
				i = (i + 1)
			}
			if error < best_error {
				best_error = error
				best_feature = j
				best_threshold = t
				best_left = left_val
				best_right = right_val
			}
			t_index = (t_index + 1)
		}
		j = (j + 1)
	}
	return Stump{
		Feature:   best_feature,
		Threshold: best_threshold,
		Left:      best_left,
		Right:     best_right,
	}
}

func fit(n_estimators int, learning_rate float64, features [][]float64, target []float64) []Stump {
	var models []Stump = []Stump{}
	_ = models
	var m int = 0
	_ = m
	for m < n_estimators {
		var preds []float64 = predict_raw(func(v any) []Stump {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]Stump); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []Stump{}
				}
				out := make([]Stump, len(arr))
				for i, x := range arr {
					out[i] = x.(Stump)
				}
				return out
			}
			return v.([]Stump)
		}(models), func(v any) [][]float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]float64{}
				}
				out := make([][]float64, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []float64 {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]float64); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []float64{}
							}
							out := make([]float64, len(arr))
							for i, x := range arr {
								out[i] = x.(float64)
							}
							return out
						}
						return v.([]float64)
					}(x)
				}
				return out
			}
			return v.([][]float64)
		}(features), learning_rate)
		_ = preds
		var grad []float64 = gradient(func(v any) []float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []float64{}
				}
				out := make([]float64, len(arr))
				for i, x := range arr {
					out[i] = x.(float64)
				}
				return out
			}
			return v.([]float64)
		}(target), func(v any) []float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []float64{}
				}
				out := make([]float64, len(arr))
				for i, x := range arr {
					out[i] = x.(float64)
				}
				return out
			}
			return v.([]float64)
		}(preds))
		_ = grad
		var residuals []float64 = []float64{}
		_ = residuals
		var i int = 0
		_ = i
		for i < len(grad) {
			residuals = append(residuals, (0 - _index(grad, i)))
			i = (i + 1)
		}
		var stump Stump = train_stump(func(v any) [][]float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]float64{}
				}
				out := make([][]float64, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []float64 {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]float64); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []float64{}
							}
							out := make([]float64, len(arr))
							for i, x := range arr {
								out[i] = x.(float64)
							}
							return out
						}
						return v.([]float64)
					}(x)
				}
				return out
			}
			return v.([][]float64)
		}(features), func(v any) []float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []float64{}
				}
				out := make([]float64, len(arr))
				for i, x := range arr {
					out[i] = x.(float64)
				}
				return out
			}
			return v.([]float64)
		}(residuals))
		_ = stump
		models = append(models, stump)
		m = (m + 1)
	}
	return models
}

func accuracy(preds []float64, target []float64) float64 {
	var n int = len(target)
	_ = n
	var correct int = 0
	_ = correct
	var i int = 0
	_ = i
	for i < n {
		if _index(preds, i) == _index(target, i) {
			correct = (correct + 1)
		}
		i = (i + 1)
	}
	return (float64(correct) / float64(n))
}

var features [][]float64

var target []float64

var models []Stump

var predictions []float64

var acc float64

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		features = [][]float64{[]float64{1.0}, []float64{2.0}, []float64{3.0}, []float64{4.0}}
		target = []float64{(0 - 1.0), (0 - 1.0), 1.0, 1.0}
		models = fit(5, 0.5, func(v any) [][]float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]float64{}
				}
				out := make([][]float64, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []float64 {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]float64); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []float64{}
							}
							out := make([]float64, len(arr))
							for i, x := range arr {
								out[i] = x.(float64)
							}
							return out
						}
						return v.([]float64)
					}(x)
				}
				return out
			}
			return v.([][]float64)
		}(features), func(v any) []float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []float64{}
				}
				out := make([]float64, len(arr))
				for i, x := range arr {
					out[i] = x.(float64)
				}
				return out
			}
			return v.([]float64)
		}(target))
		predictions = predict(func(v any) []Stump {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]Stump); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []Stump{}
				}
				out := make([]Stump, len(arr))
				for i, x := range arr {
					out[i] = x.(Stump)
				}
				return out
			}
			return v.([]Stump)
		}(models), func(v any) [][]float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]float64{}
				}
				out := make([][]float64, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []float64 {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]float64); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []float64{}
							}
							out := make([]float64, len(arr))
							for i, x := range arr {
								out[i] = x.(float64)
							}
							return out
						}
						return v.([]float64)
					}(x)
				}
				return out
			}
			return v.([][]float64)
		}(features), 0.5)
		acc = accuracy(func(v any) []float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []float64{}
				}
				out := make([]float64, len(arr))
				for i, x := range arr {
					out[i] = x.(float64)
				}
				return out
			}
			return v.([]float64)
		}(predictions), func(v any) []float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []float64{}
				}
				out := make([]float64, len(arr))
				for i, x := range arr {
					out[i] = x.(float64)
				}
				return out
			}
			return v.([]float64)
		}(target))
		fmt.Println(("Accuracy: " + fmt.Sprint(acc)))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
