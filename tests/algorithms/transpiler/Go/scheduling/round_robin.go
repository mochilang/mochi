//go:build ignore

// Generated by Mochi v0.10.70 on 2025-08-22 23:16:04 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

func _modi(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		return
	}
	s[idx] = v
}

func calculate_waiting_times(burst_times []int) []int {
	var quantum int = 2
	_ = quantum
	var rem []int = []int{}
	_ = rem
	var i int = 0
	_ = i
	for i < len(burst_times) {
		rem = append(rem, _index(burst_times, i))
		i = (i + 1)
	}
	var waiting []int = []int{}
	_ = waiting
	i = 0
	for i < len(burst_times) {
		waiting = append(waiting, 0)
		i = (i + 1)
	}
	var t int = 0
	_ = t
	for {
		var done bool = true
		_ = done
		var j int = 0
		_ = j
		for j < len(burst_times) {
			if _index(rem, j) > 0 {
				done = false
				if _index(rem, j) > quantum {
					t = (t + quantum)
					_setIndex(rem, j, (_index(rem, j) - quantum))
				} else {
					t = (t + _index(rem, j))
					_setIndex(waiting, j, (t - _index(burst_times, j)))
					_setIndex(rem, j, 0)
				}
			}
			j = (j + 1)
		}
		if done {
			return waiting
		}
	}
	return waiting
}

func calculate_turn_around_times(burst_times []int, waiting_times []int) []int {
	var result []int = []int{}
	_ = result
	var i int = 0
	_ = i
	for i < len(burst_times) {
		result = append(result, (_index(burst_times, i) + _index(waiting_times, i)))
		i = (i + 1)
	}
	return result
}

func mean(values []int) float64 {
	var total int = 0
	_ = total
	var i int = 0
	_ = i
	for i < len(values) {
		total = (total + _index(values, i))
		i = (i + 1)
	}
	return (float64(total) / float64(float64(len(values))))
}

func format_float_5(x float64) string {
	var scaled int = int(((x * 100000.0) + 0.5))
	_ = scaled
	var int_part int = (scaled / 100000)
	_ = int_part
	_ = int_part
	var frac_part int = _modi(scaled, 100000)
	_ = frac_part
	var frac_str string = fmt.Sprint(frac_part)
	_ = frac_str
	for len(frac_str) < 5 {
		frac_str = ("0" + frac_str)
	}
	return ((fmt.Sprint(int_part) + ".") + frac_str)
}

func mochiMain() {
	var burst_times []int = []int{3, 5, 7}
	_ = burst_times
	var waiting_times []int = calculate_waiting_times(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(burst_times))
	_ = waiting_times
	var turn_around_times []int = calculate_turn_around_times(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(burst_times), func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(waiting_times))
	_ = turn_around_times
	fmt.Println("Process ID \tBurst Time \tWaiting Time \tTurnaround Time")
	var i int = 0
	_ = i
	for i < len(burst_times) {
		var line string = ((((((("  " + fmt.Sprint((i + 1))) + "\t\t  ") + fmt.Sprint(_index(burst_times, i))) + "\t\t  ") + fmt.Sprint(_index(waiting_times, i))) + "\t\t  ") + fmt.Sprint(_index(turn_around_times, i)))
		_ = line
		fmt.Println(line)
		i = (i + 1)
	}
	fmt.Println("")
	fmt.Println(("Average waiting time = " + format_float_5(mean(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(waiting_times)))))
	fmt.Println(("Average turn around time = " + format_float_5(mean(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(turn_around_times)))))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
