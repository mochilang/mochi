//go:build ignore

// Generated by Mochi v0.10.63 on 2025-08-11 16:27:15 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"strings"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	s[idx] = v
}

func calculate_waitingtime(arrival_time []int, burst_time []int, no_of_processes int) []int {
	var remaining_time []int = []int{}
	_ = remaining_time
	var i int = 0
	_ = i
	for i < no_of_processes {
		remaining_time = append(remaining_time, _index(burst_time, i))
		i = (i + 1)
	}
	var waiting_time []int = []int{}
	_ = waiting_time
	i = 0
	for i < no_of_processes {
		waiting_time = append(waiting_time, 0)
		i = (i + 1)
	}
	var complete int = 0
	_ = complete
	var increment_time int = 0
	_ = increment_time
	var minm int = 1000000000
	_ = minm
	var short int = 0
	_ = short
	var check bool = false
	_ = check
	for complete != no_of_processes {
		var j int = 0
		_ = j
		for j < no_of_processes {
			if ((int(_index(arrival_time, j)) <= increment_time) && (int(_index(remaining_time, j)) > 0)) && (int(_index(remaining_time, j)) < minm) {
				minm = _index(remaining_time, j)
				short = j
				check = true
			}
			j = (j + 1)
		}
		if !check {
			increment_time = (increment_time + 1)
			continue
		}
		_setIndex(remaining_time, short, (int(_index(remaining_time, short)) - 1))
		minm = _index(remaining_time, short)
		if minm == 0 {
			minm = 1000000000
		}
		if int(_index(remaining_time, short)) == 0 {
			complete = (complete + 1)
			check = false
			var finish_time int = (increment_time + 1)
			_ = finish_time
			var finar int = (finish_time - int(_index(arrival_time, short)))
			_ = finar
			_setIndex(waiting_time, short, (finar - int(_index(burst_time, short))))
			if int(_index(waiting_time, short)) < 0 {
				_setIndex(waiting_time, short, 0)
			}
		}
		increment_time = (increment_time + 1)
	}
	return waiting_time
}

func calculate_turnaroundtime(burst_time []int, no_of_processes int, waiting_time []int) []int {
	var turn_around_time []int = []int{}
	_ = turn_around_time
	var i int = 0
	_ = i
	for i < no_of_processes {
		turn_around_time = append(turn_around_time, (int(_index(burst_time, i)) + int(_index(waiting_time, i))))
		i = (i + 1)
	}
	return turn_around_time
}

func to_float(x int) float64 {
	return (float64(x) * 1.0)
}

func calculate_average_times(waiting_time []int, turn_around_time []int, no_of_processes int) {
	var total_waiting_time int = 0
	_ = total_waiting_time
	var total_turn_around_time int = 0
	_ = total_turn_around_time
	var i int = 0
	_ = i
	for i < no_of_processes {
		total_waiting_time = (total_waiting_time + int(_index(waiting_time, i)))
		total_turn_around_time = (total_turn_around_time + int(_index(turn_around_time, i)))
		i = (i + 1)
	}
	avg_wait := (float64(to_float(total_waiting_time)) / float64(to_float(no_of_processes)))
	_ = avg_wait
	avg_turn := (float64(to_float(total_turn_around_time)) / float64(to_float(no_of_processes)))
	_ = avg_turn
	fmt.Println(("Average waiting time = " + fmt.Sprint(avg_wait)))
	fmt.Println(("Average turn around time = " + fmt.Sprint(avg_turn)))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(func() string {
			b, _ := json.Marshal(calculate_waitingtime(func(v any) []int {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]int); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []int{}
					}
					out := make([]int, len(arr))
					for i, x := range arr {
						out[i] = x.(int)
					}
					return out
				}
				return v.([]int)
			}([]int{func(v any) int {
				if vv, ok := v.(int); ok {
					return vv
				}
				return 0
			}(1), func(v any) int {
				if vv, ok := v.(int); ok {
					return vv
				}
				return 0
			}(2), func(v any) int {
				if vv, ok := v.(int); ok {
					return vv
				}
				return 0
			}(3), func(v any) int {
				if vv, ok := v.(int); ok {
					return vv
				}
				return 0
			}(4)}), func(v any) []int {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]int); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []int{}
					}
					out := make([]int, len(arr))
					for i, x := range arr {
						out[i] = x.(int)
					}
					return out
				}
				return v.([]int)
			}([]int{func(v any) int {
				if vv, ok := v.(int); ok {
					return vv
				}
				return 0
			}(3), func(v any) int {
				if vv, ok := v.(int); ok {
					return vv
				}
				return 0
			}(3), func(v any) int {
				if vv, ok := v.(int); ok {
					return vv
				}
				return 0
			}(5), func(v any) int {
				if vv, ok := v.(int); ok {
					return vv
				}
				return 0
			}(1)}), 4))
			s := string(b)
			s = strings.ReplaceAll(s, ":", ": ")
			s = strings.ReplaceAll(s, ",", ", ")
			s = strings.ReplaceAll(s, "}, {", "},{")
			return s
		}())
		fmt.Println(func() string {
			b, _ := json.Marshal(calculate_waitingtime(func(v any) []int {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]int); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []int{}
					}
					out := make([]int, len(arr))
					for i, x := range arr {
						out[i] = x.(int)
					}
					return out
				}
				return v.([]int)
			}([]int{func(v any) int {
				if vv, ok := v.(int); ok {
					return vv
				}
				return 0
			}(1), func(v any) int {
				if vv, ok := v.(int); ok {
					return vv
				}
				return 0
			}(2), func(v any) int {
				if vv, ok := v.(int); ok {
					return vv
				}
				return 0
			}(3)}), func(v any) []int {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]int); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []int{}
					}
					out := make([]int, len(arr))
					for i, x := range arr {
						out[i] = x.(int)
					}
					return out
				}
				return v.([]int)
			}([]int{func(v any) int {
				if vv, ok := v.(int); ok {
					return vv
				}
				return 0
			}(2), func(v any) int {
				if vv, ok := v.(int); ok {
					return vv
				}
				return 0
			}(5), func(v any) int {
				if vv, ok := v.(int); ok {
					return vv
				}
				return 0
			}(1)}), 3))
			s := string(b)
			s = strings.ReplaceAll(s, ":", ": ")
			s = strings.ReplaceAll(s, ",", ", ")
			s = strings.ReplaceAll(s, "}, {", "},{")
			return s
		}())
		fmt.Println(func() string {
			b, _ := json.Marshal(calculate_waitingtime(func(v any) []int {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]int); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []int{}
					}
					out := make([]int, len(arr))
					for i, x := range arr {
						out[i] = x.(int)
					}
					return out
				}
				return v.([]int)
			}([]int{func(v any) int {
				if vv, ok := v.(int); ok {
					return vv
				}
				return 0
			}(2), func(v any) int {
				if vv, ok := v.(int); ok {
					return vv
				}
				return 0
			}(3)}), func(v any) []int {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]int); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []int{}
					}
					out := make([]int, len(arr))
					for i, x := range arr {
						out[i] = x.(int)
					}
					return out
				}
				return v.([]int)
			}([]int{func(v any) int {
				if vv, ok := v.(int); ok {
					return vv
				}
				return 0
			}(5), func(v any) int {
				if vv, ok := v.(int); ok {
					return vv
				}
				return 0
			}(1)}), 2))
			s := string(b)
			s = strings.ReplaceAll(s, ":", ": ")
			s = strings.ReplaceAll(s, ",", ", ")
			s = strings.ReplaceAll(s, "}, {", "},{")
			return s
		}())
		fmt.Println(func() string {
			b, _ := json.Marshal(calculate_turnaroundtime(func(v any) []int {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]int); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []int{}
					}
					out := make([]int, len(arr))
					for i, x := range arr {
						out[i] = x.(int)
					}
					return out
				}
				return v.([]int)
			}([]int{func(v any) int {
				if vv, ok := v.(int); ok {
					return vv
				}
				return 0
			}(3), func(v any) int {
				if vv, ok := v.(int); ok {
					return vv
				}
				return 0
			}(3), func(v any) int {
				if vv, ok := v.(int); ok {
					return vv
				}
				return 0
			}(5), func(v any) int {
				if vv, ok := v.(int); ok {
					return vv
				}
				return 0
			}(1)}), 4, func(v any) []int {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]int); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []int{}
					}
					out := make([]int, len(arr))
					for i, x := range arr {
						out[i] = x.(int)
					}
					return out
				}
				return v.([]int)
			}([]int{func(v any) int {
				if vv, ok := v.(int); ok {
					return vv
				}
				return 0
			}(0), func(v any) int {
				if vv, ok := v.(int); ok {
					return vv
				}
				return 0
			}(3), func(v any) int {
				if vv, ok := v.(int); ok {
					return vv
				}
				return 0
			}(5), func(v any) int {
				if vv, ok := v.(int); ok {
					return vv
				}
				return 0
			}(0)})))
			s := string(b)
			s = strings.ReplaceAll(s, ":", ": ")
			s = strings.ReplaceAll(s, ",", ", ")
			s = strings.ReplaceAll(s, "}, {", "},{")
			return s
		}())
		fmt.Println(func() string {
			b, _ := json.Marshal(calculate_turnaroundtime(func(v any) []int {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]int); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []int{}
					}
					out := make([]int, len(arr))
					for i, x := range arr {
						out[i] = x.(int)
					}
					return out
				}
				return v.([]int)
			}([]int{func(v any) int {
				if vv, ok := v.(int); ok {
					return vv
				}
				return 0
			}(3), func(v any) int {
				if vv, ok := v.(int); ok {
					return vv
				}
				return 0
			}(3)}), 2, func(v any) []int {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]int); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []int{}
					}
					out := make([]int, len(arr))
					for i, x := range arr {
						out[i] = x.(int)
					}
					return out
				}
				return v.([]int)
			}([]int{func(v any) int {
				if vv, ok := v.(int); ok {
					return vv
				}
				return 0
			}(0), func(v any) int {
				if vv, ok := v.(int); ok {
					return vv
				}
				return 0
			}(3)})))
			s := string(b)
			s = strings.ReplaceAll(s, ":", ": ")
			s = strings.ReplaceAll(s, ",", ", ")
			s = strings.ReplaceAll(s, "}, {", "},{")
			return s
		}())
		fmt.Println(func() string {
			b, _ := json.Marshal(calculate_turnaroundtime(func(v any) []int {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]int); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []int{}
					}
					out := make([]int, len(arr))
					for i, x := range arr {
						out[i] = x.(int)
					}
					return out
				}
				return v.([]int)
			}([]int{func(v any) int {
				if vv, ok := v.(int); ok {
					return vv
				}
				return 0
			}(8), func(v any) int {
				if vv, ok := v.(int); ok {
					return vv
				}
				return 0
			}(10), func(v any) int {
				if vv, ok := v.(int); ok {
					return vv
				}
				return 0
			}(1)}), 3, func(v any) []int {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]int); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []int{}
					}
					out := make([]int, len(arr))
					for i, x := range arr {
						out[i] = x.(int)
					}
					return out
				}
				return v.([]int)
			}([]int{func(v any) int {
				if vv, ok := v.(int); ok {
					return vv
				}
				return 0
			}(1), func(v any) int {
				if vv, ok := v.(int); ok {
					return vv
				}
				return 0
			}(0), func(v any) int {
				if vv, ok := v.(int); ok {
					return vv
				}
				return 0
			}(3)})))
			s := string(b)
			s = strings.ReplaceAll(s, ":", ": ")
			s = strings.ReplaceAll(s, ",", ", ")
			s = strings.ReplaceAll(s, "}, {", "},{")
			return s
		}())
		calculate_average_times(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}([]int{func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(0), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(3), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(5), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(0)}), func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}([]int{func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(3), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(6), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(10), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(1)}), 4)
		calculate_average_times(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}([]int{func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(2), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(3)}), func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}([]int{func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(3), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(6)}), 2)
		calculate_average_times(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}([]int{func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(10), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(4), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(3)}), func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}([]int{func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(2), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(7), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(6)}), 3)
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
