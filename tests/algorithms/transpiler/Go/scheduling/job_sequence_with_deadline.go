//go:build ignore

// Generated by Mochi v0.10.70 on 2025-08-22 23:15:55 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		return
	}
	s[idx] = v
}

func max_tasks(tasks_info [][]int) []int {
	var order []int = []int{}
	_ = order
	var i int = 0
	_ = i
	for i < len(tasks_info) {
		order = append(order, i)
		i = (i + 1)
	}
	var n int = len(order)
	_ = n
	i = 0
	for i < n {
		var j int = (i + 1)
		_ = j
		for j < n {
			if _index(_index(tasks_info, _index(order, j)), 1) > _index(_index(tasks_info, _index(order, i)), 1) {
				var tmp int = _index(order, i)
				_ = tmp
				_setIndex(order, i, _index(order, j))
				_setIndex(order, j, tmp)
			}
			j = (j + 1)
		}
		i = (i + 1)
	}
	var result []int = []int{}
	_ = result
	var pos int = 1
	_ = pos
	i = 0
	for i < n {
		var id int = _index(order, i)
		_ = id
		var deadline int = _index(_index(tasks_info, id), 0)
		_ = deadline
		if deadline >= pos {
			result = append(result, id)
		}
		i = (i + 1)
		pos = (pos + 1)
	}
	return result
}

func mochiMain() {
	var ex1 [][]int = [][]int{[]int{4, 20}, []int{1, 10}, []int{1, 40}, []int{1, 30}}
	_ = ex1
	var ex2 [][]int = [][]int{[]int{1, 10}, []int{2, 20}, []int{3, 30}, []int{2, 40}}
	_ = ex2
	fmt.Println(fmt.Sprint(max_tasks(func(v any) [][]int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]int{}
			}
			out := make([][]int, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []int {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]int); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []int{}
						}
						out := make([]int, len(arr))
						for i, x := range arr {
							out[i] = x.(int)
						}
						return out
					}
					return v.([]int)
				}(x)
			}
			return out
		}
		return v.([][]int)
	}(ex1))))
	fmt.Println(fmt.Sprint(max_tasks(func(v any) [][]int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]int{}
			}
			out := make([][]int, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []int {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]int); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []int{}
						}
						out := make([]int, len(arr))
						for i, x := range arr {
							out[i] = x.(int)
						}
						return out
					}
					return v.([]int)
				}(x)
			}
			return out
		}
		return v.([][]int)
	}(ex2))))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
