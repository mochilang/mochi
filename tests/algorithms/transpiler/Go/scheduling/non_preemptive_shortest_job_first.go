//go:build ignore

// Generated by Mochi v0.10.70 on 2025-08-22 23:16:02 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		return
	}
	s[idx] = v
}

func calculate_waitingtime(arrival_time []int, burst_time []int, no_of_processes int) []int {
	var waiting_time []int
	_ = waiting_time
	var remaining_time []int
	_ = remaining_time
	var i int = 0
	_ = i
	for i < no_of_processes {
		waiting_time = append(waiting_time, 0)
		remaining_time = append(remaining_time, _index(burst_time, i))
		i = (i + 1)
	}
	var completed int = 0
	_ = completed
	var total_time int = 0
	_ = total_time
	for completed != no_of_processes {
		var ready_process []int = []int{}
		_ = ready_process
		var target_process int = (0 - 1)
		_ = target_process
		var j int = 0
		_ = j
		for j < no_of_processes {
			if (_index(arrival_time, j) <= total_time) && (_index(remaining_time, j) > 0) {
				ready_process = append(ready_process, j)
			}
			j = (j + 1)
		}
		if len(ready_process) > 0 {
			target_process = _index(ready_process, 0)
			var k int = 0
			_ = k
			for k < len(ready_process) {
				var idx int = _index(ready_process, k)
				_ = idx
				if _index(remaining_time, idx) < _index(remaining_time, target_process) {
					target_process = idx
				}
				k = (k + 1)
			}
			total_time = (total_time + _index(burst_time, target_process))
			completed = (completed + 1)
			_setIndex(remaining_time, target_process, 0)
			_setIndex(waiting_time, target_process, ((total_time - _index(arrival_time, target_process)) - _index(burst_time, target_process)))
		} else {
			total_time = (total_time + 1)
		}
	}
	return waiting_time
}

func calculate_turnaroundtime(burst_time []int, no_of_processes int, waiting_time []int) []int {
	var turn_around_time []int
	_ = turn_around_time
	var i int = 0
	_ = i
	for i < no_of_processes {
		turn_around_time = append(turn_around_time, (_index(burst_time, i) + _index(waiting_time, i)))
		i = (i + 1)
	}
	return turn_around_time
}

func average(values []int) float64 {
	var total int = 0
	_ = total
	var i int = 0
	_ = i
	for i < len(values) {
		total = (total + _index(values, i))
		i = (i + 1)
	}
	return (float64(total) / float64(float64(len(values))))
}

var no_of_processes int

var burst_time []int

var arrival_time []int

var waiting_time []int

var turn_around_time []int

var i int

var avg_wait float64

var avg_turn float64

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println("[TEST CASE 01]")
		no_of_processes = 4
		burst_time = []int{2, 5, 3, 7}
		arrival_time = []int{0, 0, 0, 0}
		waiting_time = calculate_waitingtime(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(arrival_time), func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(burst_time), no_of_processes)
		turn_around_time = calculate_turnaroundtime(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(burst_time), no_of_processes, func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(waiting_time))
		fmt.Println("PID\tBurst Time\tArrival Time\tWaiting Time\tTurnaround Time")
		i = 0
		for i < no_of_processes {
			var pid int = (i + 1)
			_ = pid
			fmt.Println(((((((((fmt.Sprint(pid) + "\t") + fmt.Sprint(_index(burst_time, i))) + "\t\t\t") + fmt.Sprint(_index(arrival_time, i))) + "\t\t\t\t") + fmt.Sprint(_index(waiting_time, i))) + "\t\t\t\t") + fmt.Sprint(_index(turn_around_time, i))))
			i = (i + 1)
		}
		avg_wait = average(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(waiting_time))
		avg_turn = average(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(turn_around_time))
		fmt.Println(("\nAverage waiting time = " + fmt.Sprint(avg_wait)))
		fmt.Println(("Average turnaround time = " + fmt.Sprint(avg_turn)))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
