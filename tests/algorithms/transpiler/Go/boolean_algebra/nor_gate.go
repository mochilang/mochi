//go:build ignore

// Generated by Mochi v0.10.59 on 2025-08-06 21:04:47 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func nor_gate(input_1 int, input_2 int) int {
	if (input_1 == 0) && (input_2 == 0) {
		return 1
	}
	return 0
}

func center(s string, width int) string {
	var total int = (width - len(s))
	_ = total
	if total <= 0 {
		return s
	}
	var left int = (total / 2)
	_ = left
	var right int = (total - left)
	_ = right
	var res string = s
	_ = res
	var i int = 0
	_ = i
	for i < left {
		res = (" " + res)
		i = (i + 1)
	}
	var j int = 0
	_ = j
	for j < right {
		res = (res + " ")
		j = (j + 1)
	}
	return res
}

func make_table_row(i int, j int) string {
	var output int = nor_gate(i, j)
	_ = output
	_ = output
	return (((((("| " + center(fmt.Sprint(i), 8)) + " | ") + center(fmt.Sprint(j), 8)) + " | ") + center(fmt.Sprint(output), 8)) + " |")
}

func truth_table() string {
	return (((((((("Truth Table of NOR Gate:\n" + "| Input 1 | Input 2 | Output  |\n") + make_table_row(0, 0)) + "\n") + make_table_row(0, 1)) + "\n") + make_table_row(1, 0)) + "\n") + make_table_row(1, 1))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(nor_gate(0, 0))
		fmt.Println(nor_gate(0, 1))
		fmt.Println(nor_gate(1, 0))
		fmt.Println(nor_gate(1, 1))
		fmt.Println(truth_table())
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
