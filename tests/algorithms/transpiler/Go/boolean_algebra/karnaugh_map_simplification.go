//go:build ignore

// Generated by Mochi v0.10.59 on 2025-08-06 20:58:53 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func row_string(row []int) string {
	var s string = "["
	_ = s
	var i int = 0
	_ = i
	for i < len(row) {
		s = (s + fmt.Sprint(row[i]))
		if i < (len(row) - 1) {
			s = (s + ", ")
		}
		i = (i + 1)
	}
	s = (s + "]")
	return s
}

func print_kmap(kmap [][]int) {
	var i int = 0
	_ = i
	for i < len(kmap) {
		fmt.Println(row_string(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(kmap[i])))
		i = (i + 1)
	}
}

func join_terms(terms []string) string {
	if len(terms) == 0 {
		return ""
	}
	var res string = terms[0]
	_ = res
	var i int = 1
	_ = i
	for i < len(terms) {
		res = ((res + " + ") + terms[i])
		i = (i + 1)
	}
	return res
}

func simplify_kmap(board [][]int) string {
	var terms []string = []string{}
	_ = terms
	var a int = 0
	_ = a
	for a < len(board) {
		var row []int = board[a]
		_ = row
		var b int = 0
		_ = b
		for b < len(row) {
			var item int = row[b]
			_ = item
			if item != 0 {
				var term string = (func() string {
					if a != 0 {
						return "A"
					} else {
						return "A'"
					}
				}() + func() string {
					if b != 0 {
						return "B"
					} else {
						return "B'"
					}
				}())
				_ = term
				terms = append(terms, term)
			}
			b = (b + 1)
		}
		a = (a + 1)
	}
	var expr string = join_terms(func(v any) []string {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]string); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []string{}
			}
			out := make([]string, len(arr))
			for i, x := range arr {
				out[i] = x.(string)
			}
			return out
		}
		return v.([]string)
	}(terms))
	_ = expr
	_ = expr
	return expr
}

var kmap [][]int

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		kmap = [][]int{[]int{0, 1}, []int{1, 1}}
		print_kmap(func(v any) [][]int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]int{}
				}
				out := make([][]int, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []int {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]int); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []int{}
							}
							out := make([]int, len(arr))
							for i, x := range arr {
								out[i] = x.(int)
							}
							return out
						}
						return v.([]int)
					}(x)
				}
				return out
			}
			return v.([][]int)
		}(kmap))
		fmt.Println("Simplified Expression:")
		fmt.Println(simplify_kmap(func(v any) [][]int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]int{}
				}
				out := make([][]int, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []int {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]int); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []int{}
							}
							out := make([]int, len(arr))
							for i, x := range arr {
								out[i] = x.(int)
							}
							return out
						}
						return v.([]int)
					}(x)
				}
				return out
			}
			return v.([][]int)
		}(kmap)))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
