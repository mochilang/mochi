//go:build ignore

// Generated by Mochi v0.10.59 on 2025-08-06 17:43:56 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func repeat_bool(times int) []bool {
	var res []bool = []bool{}
	_ = res
	var i int = 0
	_ = i
	for i < times {
		res = append(res, false)
		i = (i + 1)
	}
	return res
}

func set_bool(xs []bool, idx int, value bool) []bool {
	var res []bool = []bool{}
	_ = res
	var i int = 0
	_ = i
	for i < len(xs) {
		if i == idx {
			res = append(res, value)
		} else {
			res = append(res, xs[i])
		}
		i = (i + 1)
	}
	return res
}

func create_state_space_tree(sequence []any, current []any, index int, used []bool) {
	if index == len(sequence) {
		fmt.Println(fmt.Sprint(current))
		return
	}
	var i int = 0
	_ = i
	for i < len(sequence) {
		if !used[i] {
			var next_current []any = append(current, sequence[i])
			_ = next_current
			var next_used []bool = set_bool(func(v any) []bool {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]bool); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []bool{}
					}
					out := make([]bool, len(arr))
					for i, x := range arr {
						out[i] = x.(bool)
					}
					return out
				}
				return v.([]bool)
			}(used), i, true)
			_ = next_used
			create_state_space_tree(sequence, next_current, (index + 1), func(v any) []bool {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]bool); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []bool{}
					}
					out := make([]bool, len(arr))
					for i, x := range arr {
						out[i] = x.(bool)
					}
					return out
				}
				return v.([]bool)
			}(next_used))
		}
		i = (i + 1)
	}
}

func generate_all_permutations(sequence []any) {
	var used []bool = repeat_bool(len(sequence))
	_ = used
	create_state_space_tree(sequence, []any{}, 0, func(v any) []bool {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]bool); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []bool{}
			}
			out := make([]bool, len(arr))
			for i, x := range arr {
				out[i] = x.(bool)
			}
			return out
		}
		return v.([]bool)
	}(used))
}

var sequence []any

var sequence_2 []any

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		sequence = []any{3, 1, 2, 4}
		generate_all_permutations(sequence)
		sequence_2 = []any{"A", "B", "C"}
		generate_all_permutations(sequence_2)
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
