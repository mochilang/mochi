//go:build ignore

// Generated by Mochi v0.10.59 on 2025-08-06 17:43:46 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

func contains(xs []int, x int) bool {
	var i int = 0
	_ = i
	for i < len(xs) {
		if xs[i] == x {
			return true
		}
		i = (i + 1)
	}
	return false
}

func get_point_key(len_board int, len_board_column int, row int, column int) int {
	return (((len_board * len_board_column) * row) + column)
}

func search_from(board [][]string, word string, row int, column int, word_index int, visited []int) bool {
	if board[row][column] != _substr(word, word_index, (word_index+1)) {
		return false
	}
	if word_index == (len(word) - 1) {
		return true
	}
	var len_board int = len(board)
	_ = len_board
	var len_board_column int = len(board[0])
	_ = len_board_column
	var dir_i []int = []int{0, 0, (0 - 1), 1}
	_ = dir_i
	var dir_j []int = []int{1, (0 - 1), 0, 0}
	_ = dir_j
	var k int = 0
	_ = k
	for k < 4 {
		var next_i int = (row + dir_i[k])
		_ = next_i
		var next_j int = (column + dir_j[k])
		_ = next_j
		if !((((0 <= next_i) && (next_i < len_board)) && (0 <= next_j)) && (next_j < len_board_column)) {
			k = (k + 1)
			continue
		}
		var key int = get_point_key(len_board, len_board_column, next_i, next_j)
		_ = key
		if func() bool {
			for _, el := range visited {
				if el == key {
					return true
				}
			}
			return false
		}() {
			k = (k + 1)
			continue
		}
		var new_visited []int = append(visited, key)
		_ = new_visited
		if search_from(func(v any) [][]string {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]string); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]string{}
				}
				out := make([][]string, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []string {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]string); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []string{}
							}
							out := make([]string, len(arr))
							for i, x := range arr {
								out[i] = x.(string)
							}
							return out
						}
						return v.([]string)
					}(x)
				}
				return out
			}
			return v.([][]string)
		}(board), word, next_i, next_j, (word_index + 1), func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(new_visited)) {
			return true
		}
		k = (k + 1)
	}
	return false
}

func word_exists(board [][]string, word string) bool {
	var len_board int = len(board)
	_ = len_board
	var len_board_column int = len(board[0])
	_ = len_board_column
	var i int = 0
	_ = i
	for i < len_board {
		var j int = 0
		_ = j
		for j < len_board_column {
			var key int = get_point_key(len_board, len_board_column, i, j)
			_ = key
			var visited []int = append([]int{}, key)
			_ = visited
			if search_from(func(v any) [][]string {
				if v == nil {
					return nil
				}
				if vv, ok := v.([][]string); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return [][]string{}
					}
					out := make([][]string, len(arr))
					for i, x := range arr {
						out[i] = func(v any) []string {
							if v == nil {
								return nil
							}
							if vv, ok := v.([]string); ok {
								return vv
							}
							if arr, ok := v.([]any); ok {
								if len(arr) == 0 {
									return []string{}
								}
								out := make([]string, len(arr))
								for i, x := range arr {
									out[i] = x.(string)
								}
								return out
							}
							return v.([]string)
						}(x)
					}
					return out
				}
				return v.([][]string)
			}(board), word, i, j, 0, func(v any) []int {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]int); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []int{}
					}
					out := make([]int, len(arr))
					for i, x := range arr {
						out[i] = x.(int)
					}
					return out
				}
				return v.([]int)
			}(visited)) {
				return true
			}
			j = (j + 1)
		}
		i = (i + 1)
	}
	return false
}

func mochiMain() {
	var board [][]string = [][]string{[]string{"A", "B", "C", "E"}, []string{"S", "F", "C", "S"}, []string{"A", "D", "E", "E"}}
	_ = board
	fmt.Println(word_exists(func(v any) [][]string {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]string); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]string{}
			}
			out := make([][]string, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []string {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]string); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []string{}
						}
						out := make([]string, len(arr))
						for i, x := range arr {
							out[i] = x.(string)
						}
						return out
					}
					return v.([]string)
				}(x)
			}
			return out
		}
		return v.([][]string)
	}(board), "ABCCED"))
	fmt.Println(word_exists(func(v any) [][]string {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]string); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]string{}
			}
			out := make([][]string, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []string {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]string); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []string{}
						}
						out := make([]string, len(arr))
						for i, x := range arr {
							out[i] = x.(string)
						}
						return out
					}
					return v.([]string)
				}(x)
			}
			return out
		}
		return v.([][]string)
	}(board), "SEE"))
	fmt.Println(word_exists(func(v any) [][]string {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]string); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]string{}
			}
			out := make([][]string, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []string {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]string); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []string{}
						}
						out := make([]string, len(arr))
						for i, x := range arr {
							out[i] = x.(string)
						}
						return out
					}
					return v.([]string)
				}(x)
			}
			return out
		}
		return v.([][]string)
	}(board), "ABCB"))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
