//go:build ignore

// Generated by Mochi v0.10.59 on 2025-08-06 16:13:13 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

func get_value(keys []string, values []string, key string) string {
	var i int = 0
	_ = i
	for i < len(keys) {
		if keys[i] == key {
			return values[i]
		}
		i = (i + 1)
	}
	return ""
}

func contains_value(values []string, value string) bool {
	var i int = 0
	_ = i
	for i < len(values) {
		if values[i] == value {
			return true
		}
		i = (i + 1)
	}
	return false
}

func backtrack(pattern string, input_string string, pi int, si int, keys []string, values []string) bool {
	if (pi == len(pattern)) && (si == len(input_string)) {
		return true
	}
	if (pi == len(pattern)) || (si == len(input_string)) {
		return false
	}
	var ch string = _substr(pattern, pi, (pi + 1))
	_ = ch
	var mapped string = get_value(func(v any) []string {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]string); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []string{}
			}
			out := make([]string, len(arr))
			for i, x := range arr {
				out[i] = x.(string)
			}
			return out
		}
		return v.([]string)
	}(keys), func(v any) []string {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]string); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []string{}
			}
			out := make([]string, len(arr))
			for i, x := range arr {
				out[i] = x.(string)
			}
			return out
		}
		return v.([]string)
	}(values), ch)
	_ = mapped
	if mapped != "" {
		if _substr(input_string, si, (si+len(mapped))) == mapped {
			return backtrack(pattern, input_string, (pi + 1), (si + len(mapped)), func(v any) []string {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]string); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []string{}
					}
					out := make([]string, len(arr))
					for i, x := range arr {
						out[i] = x.(string)
					}
					return out
				}
				return v.([]string)
			}(keys), func(v any) []string {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]string); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []string{}
					}
					out := make([]string, len(arr))
					for i, x := range arr {
						out[i] = x.(string)
					}
					return out
				}
				return v.([]string)
			}(values))
		}
		return false
	}
	var end int = (si + 1)
	_ = end
	for end <= len(input_string) {
		var substr string = _substr(input_string, si, end)
		_ = substr
		if contains_value(func(v any) []string {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]string); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []string{}
				}
				out := make([]string, len(arr))
				for i, x := range arr {
					out[i] = x.(string)
				}
				return out
			}
			return v.([]string)
		}(values), substr) {
			end = (end + 1)
			continue
		}
		var new_keys []string = append(keys, ch)
		_ = new_keys
		var new_values []string = append(values, substr)
		_ = new_values
		if backtrack(pattern, input_string, (pi + 1), end, func(v any) []string {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]string); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []string{}
				}
				out := make([]string, len(arr))
				for i, x := range arr {
					out[i] = x.(string)
				}
				return out
			}
			return v.([]string)
		}(new_keys), func(v any) []string {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]string); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []string{}
				}
				out := make([]string, len(arr))
				for i, x := range arr {
					out[i] = x.(string)
				}
				return out
			}
			return v.([]string)
		}(new_values)) {
			return true
		}
		end = (end + 1)
	}
	return false
}

func match_word_pattern(pattern string, input_string string) bool {
	var keys []string = []string{}
	_ = keys
	_ = keys
	var values []string = []string{}
	_ = values
	_ = values
	return backtrack(pattern, input_string, 0, 0, func(v any) []string {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]string); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []string{}
			}
			out := make([]string, len(arr))
			for i, x := range arr {
				out[i] = x.(string)
			}
			return out
		}
		return v.([]string)
	}(keys), func(v any) []string {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]string); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []string{}
			}
			out := make([]string, len(arr))
			for i, x := range arr {
				out[i] = x.(string)
			}
			return out
		}
		return v.([]string)
	}(values))
}

func mochiMain() {
	fmt.Println(match_word_pattern("aba", "GraphTreesGraph"))
	fmt.Println(match_word_pattern("xyx", "PythonRubyPython"))
	fmt.Println(match_word_pattern("GG", "PythonJavaPython"))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
