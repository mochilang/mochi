//go:build ignore

// Generated by Mochi v0.10.59 on 2025-08-06 17:43:31 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func create_board(n int) [][]int {
	var board [][]int = [][]int{}
	_ = board
	var i int = 0
	_ = i
	for i < n {
		var row []int = []int{}
		_ = row
		var j int = 0
		_ = j
		for j < n {
			row = append(row, 0)
			j = (j + 1)
		}
		board = append(board, row)
		i = (i + 1)
	}
	return board
}

func is_safe(board [][]int, row int, column int) bool {
	var n int = len(board)
	_ = n
	var i int = 0
	_ = i
	for i < row {
		if board[i][column] == 1 {
			return false
		}
		i = (i + 1)
	}
	i = (row - 1)
	var j int = (column - 1)
	_ = j
	for (i >= 0) && (j >= 0) {
		if board[i][j] == 1 {
			return false
		}
		i = (i - 1)
		j = (j - 1)
	}
	i = (row - 1)
	j = (column + 1)
	for (i >= 0) && (j < n) {
		if board[i][j] == 1 {
			return false
		}
		i = (i - 1)
		j = (j + 1)
	}
	return true
}

func row_string(row []int) string {
	var s string = ""
	_ = s
	var j int = 0
	_ = j
	for j < len(row) {
		if row[j] == 1 {
			s = (s + "Q ")
		} else {
			s = (s + ". ")
		}
		j = (j + 1)
	}
	return s
}

func printboard(board [][]int) {
	var i int = 0
	_ = i
	for i < len(board) {
		fmt.Println(row_string(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(board[i])))
		i = (i + 1)
	}
}

func solve(board [][]int, row int) int {
	if row >= len(board) {
		printboard(func(v any) [][]int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]int{}
				}
				out := make([][]int, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []int {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]int); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []int{}
							}
							out := make([]int, len(arr))
							for i, x := range arr {
								out[i] = x.(int)
							}
							return out
						}
						return v.([]int)
					}(x)
				}
				return out
			}
			return v.([][]int)
		}(board))
		fmt.Println("")
		return 1
	}
	var count int = 0
	_ = count
	var i int = 0
	_ = i
	for i < len(board) {
		if is_safe(func(v any) [][]int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]int{}
				}
				out := make([][]int, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []int {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]int); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []int{}
							}
							out := make([]int, len(arr))
							for i, x := range arr {
								out[i] = x.(int)
							}
							return out
						}
						return v.([]int)
					}(x)
				}
				return out
			}
			return v.([][]int)
		}(board), row, i) {
			board[row][i] = 1
			count = (count + solve(func(v any) [][]int {
				if v == nil {
					return nil
				}
				if vv, ok := v.([][]int); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return [][]int{}
					}
					out := make([][]int, len(arr))
					for i, x := range arr {
						out[i] = func(v any) []int {
							if v == nil {
								return nil
							}
							if vv, ok := v.([]int); ok {
								return vv
							}
							if arr, ok := v.([]any); ok {
								if len(arr) == 0 {
									return []int{}
								}
								out := make([]int, len(arr))
								for i, x := range arr {
									out[i] = x.(int)
								}
								return out
							}
							return v.([]int)
						}(x)
					}
					return out
				}
				return v.([][]int)
			}(board), (row+1)))
			board[row][i] = 0
		}
		i = (i + 1)
	}
	return count
}

func n_queens(n int) int {
	var board [][]int = create_board(n)
	_ = board
	var total int = solve(func(v any) [][]int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]int{}
			}
			out := make([][]int, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []int {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]int); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []int{}
						}
						out := make([]int, len(arr))
						for i, x := range arr {
							out[i] = x.(int)
						}
						return out
					}
					return v.([]int)
				}(x)
			}
			return out
		}
		return v.([][]int)
	}(board), 0)
	_ = total
	fmt.Println(("The total number of solutions are: " + fmt.Sprint(total)))
	return total
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		n_queens(4)
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
