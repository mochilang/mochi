//go:build ignore

// Generated by Mochi v0.10.59 on 2025-08-06 16:50:56 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"strings"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _repeat(s string, n int) string {
	if n <= 0 {
		return ""
	}
	return strings.Repeat(s, n)
}

func _concat[T any](a, b []T) []T {
	return append(append([]T{}, a...), b...)
}

func contains(xs []int, x int) bool {
	var i int = 0
	_ = i
	for i < len(xs) {
		if xs[i] == x {
			return true
		}
		i = (i + 1)
	}
	return false
}

func repeat(s string, times int) string {
	var result string = ""
	_ = result
	var i int = 0
	_ = i
	for i < times {
		result = (result + s)
		i = (i + 1)
	}
	return result
}

func build_board(pos []int, n int) []string {
	var board []string = []string{}
	_ = board
	var i int = 0
	_ = i
	for i < len(pos) {
		var col int = pos[i]
		_ = col
		var line string = ((_repeat(". ", col) + "Q ") + _repeat(". ", ((n-1)-col)))
		_ = line
		board = append(board, line)
		i = (i + 1)
	}
	return board
}

func depth_first_search(pos []int, dr []int, dl []int, n int) [][]string {
	var row int = len(pos)
	_ = row
	if row == n {
		var single [][]string = [][]string{}
		_ = single
		single = append(single, build_board(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(pos), n))
		return single
	}
	var boards [][]string = [][]string{}
	_ = boards
	var col int = 0
	_ = col
	for col < n {
		if (func() bool {
			for _, el := range pos {
				if el == col {
					return true
				}
			}
			return false
		}() || func() bool {
			for _, el := range dr {
				if el == (row - col) {
					return true
				}
			}
			return false
		}()) || func() bool {
			for _, el := range dl {
				if el == (row + col) {
					return true
				}
			}
			return false
		}() {
			col = (col + 1)
			continue
		}
		var result [][]string = depth_first_search(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(append(pos, col)), func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(append(dr, (row-col))), func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(append(dl, (row+col))), n)
		_ = result
		boards = _concat(boards, result)
		col = (col + 1)
	}
	return boards
}

func n_queens_solution(n int) int {
	var boards [][]string = depth_first_search(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}([]int{}), func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}([]int{}), func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}([]int{}), n)
	_ = boards
	var i int = 0
	_ = i
	for i < len(boards) {
		var j int = 0
		_ = j
		for j < len(boards[i]) {
			fmt.Println(boards[i][j])
			j = (j + 1)
		}
		fmt.Println("")
		i = (i + 1)
	}
	fmt.Println(len(boards), "solutions were found.")
	return len(boards)
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		n_queens_solution(4)
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
