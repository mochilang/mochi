//go:build ignore

// Generated by Mochi v0.10.59 on 2025-08-06 16:08:08 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"strings"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func create_state_space_tree(sequence []any, current []any, index int) {
	if index == len(sequence) {
		fmt.Println(func() string {
			b, _ := json.Marshal(current)
			s := string(b)
			s = strings.ReplaceAll(s, ":", ": ")
			s = strings.ReplaceAll(s, ",", ", ")
			s = strings.ReplaceAll(s, "}, {", "},{")
			return s
		}())
		return
	}
	create_state_space_tree(sequence, current, (index + 1))
	var with_elem []any = append(current, sequence[index])
	_ = with_elem
	create_state_space_tree(sequence, with_elem, (index + 1))
}

func generate_all_subsequences(sequence []any) {
	create_state_space_tree(sequence, []any{}, 0)
}

var seq []any

var seq2 []any

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		seq = []any{1, 2, 3}
		generate_all_subsequences(seq)
		seq2 = []any{"A", "B", "C"}
		generate_all_subsequences(seq2)
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
