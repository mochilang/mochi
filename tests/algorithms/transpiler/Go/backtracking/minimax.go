//go:build ignore

// Generated by Mochi v0.10.59 on 2025-08-06 16:36:42 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func minimax(depth int, node_index int, is_max bool, scores []int, height int) int {
	if depth < 0 {
		panic("Depth cannot be less than 0")
	}
	if len(scores) == 0 {
		panic("Scores cannot be empty")
	}
	if depth == height {
		return scores[node_index]
	}
	if is_max {
		var left int = minimax((depth + 1), (node_index * 2), false, func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(scores), height)
		_ = left
		var right int = minimax((depth + 1), ((node_index * 2) + 1), false, func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(scores), height)
		_ = right
		if left > right {
			return left
		} else {
			return right
		}
	}
	var left int = minimax((depth + 1), (node_index * 2), true, func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(scores), height)
	_ = left
	var right int = minimax((depth + 1), ((node_index * 2) + 1), true, func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(scores), height)
	_ = right
	if left < right {
		return left
	} else {
		return right
	}
}

func tree_height(n int) int {
	var h int = 0
	_ = h
	var v int = n
	_ = v
	for v > 1 {
		v = (v / 2)
		h = (h + 1)
	}
	return h
}

func mochiMain() {
	var scores []int = []int{90, 23, 6, 33, 21, 65, 123, 34423}
	_ = scores
	var height int = tree_height(len(scores))
	_ = height
	fmt.Println(("Optimal value : " + fmt.Sprint(minimax(0, 0, true, func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(scores), height))))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
