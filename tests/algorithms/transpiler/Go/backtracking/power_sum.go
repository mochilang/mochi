//go:build ignore

// Generated by Mochi v0.10.59 on 2025-08-06 16:51:06 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func int_pow(base int, exp int) int {
	var result int = 1
	_ = result
	var i int = 0
	_ = i
	for i < exp {
		result = (result * base)
		i = (i + 1)
	}
	return result
}

func backtrack(target int, exp int, current int, current_sum int) int {
	if current_sum == target {
		return 1
	}
	var p int = int_pow(current, exp)
	_ = p
	var count int = 0
	_ = count
	if (current_sum + p) <= target {
		count = (count + backtrack(target, exp, (current+1), (current_sum+p)))
	}
	if p < target {
		count = (count + backtrack(target, exp, (current+1), current_sum))
	}
	return count
}

func solve(target int, exp int) int {
	if !((((1 <= target) && (target <= 1000)) && (2 <= exp)) && (exp <= 10)) {
		fmt.Println("Invalid input")
		return 0
	}
	return backtrack(target, exp, 1, 0)
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(solve(13, 2))
		fmt.Println(solve(10, 2))
		fmt.Println(solve(10, 3))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
