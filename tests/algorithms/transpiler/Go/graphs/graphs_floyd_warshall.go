//go:build ignore

// Generated by Mochi v0.10.61 on 2025-08-09 10:25:42 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	s[idx] = v
}

var INF float64

func floyd_warshall(graph [][]float64) [][]float64 {
	v := len(graph)
	_ = v
	var dist [][]float64 = [][]float64{}
	_ = dist
	var i int = 0
	_ = i
	for i < v {
		var row []float64 = []float64{}
		_ = row
		var j int = 0
		_ = j
		for j < v {
			row = append(row, _index(_index(graph, i), j))
			j = (j + 1)
		}
		dist = append(dist, row)
		i = (i + 1)
	}
	var k int = 0
	_ = k
	for k < v {
		var i int = 0
		_ = i
		for i < v {
			var j int = 0
			_ = j
			for j < v {
				if ((_index(_index(dist, i), k) < INF) && (_index(_index(dist, k), j) < INF)) && ((_index(_index(dist, i), k) + _index(_index(dist, k), j)) < _index(_index(dist, i), j)) {
					_setIndex(_index(dist, i), j, (_index(_index(dist, i), k) + _index(_index(dist, k), j)))
				}
				j = (j + 1)
			}
			i = (i + 1)
		}
		k = (k + 1)
	}
	return dist
}

func print_dist(dist [][]float64) {
	fmt.Println("\nThe shortest path matrix using Floyd Warshall algorithm\n")
	var i int = 0
	_ = i
	for i < len(dist) {
		var j int = 0
		_ = j
		var line string = ""
		_ = line
		for j < len(_index(dist, i)) {
			if _index(_index(dist, i), j) >= (float64(INF) / float64(2.0)) {
				line = (line + "INF\t")
			} else {
				line = ((line + fmt.Sprint(int(_index(_index(dist, i), j)))) + "\t")
			}
			j = (j + 1)
		}
		fmt.Println(line)
		i = (i + 1)
	}
}

var graph [][]float64

var result [][]float64

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		INF = 1000000000.0
		graph = [][]float64{[]float64{0.0, 5.0, INF, 10.0}, []float64{INF, 0.0, 3.0, INF}, []float64{INF, INF, 0.0, 1.0}, []float64{INF, INF, INF, 0.0}}
		result = floyd_warshall(func(v any) [][]float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]float64{}
				}
				out := make([][]float64, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []float64 {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]float64); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []float64{}
							}
							out := make([]float64, len(arr))
							for i, x := range arr {
								out[i] = x.(float64)
							}
							return out
						}
						return v.([]float64)
					}(x)
				}
				return out
			}
			return v.([][]float64)
		}(graph))
		print_dist(func(v any) [][]float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]float64{}
				}
				out := make([][]float64, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []float64 {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]float64); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []float64{}
							}
							out := make([]float64, len(arr))
							for i, x := range arr {
								out[i] = x.(float64)
							}
							return out
						}
						return v.([]float64)
					}(x)
				}
				return out
			}
			return v.([][]float64)
		}(result))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
