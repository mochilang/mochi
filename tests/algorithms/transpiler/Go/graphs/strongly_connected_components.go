//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-15 21:31:22 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		return
	}
	s[idx] = v
}

func _concat[T any](a, b []T) []T {
	return append(append([]T{}, a...), b...)
}

func topology_sort(graph [][]int, vert int, visited []bool) []int {
	_setIndex(visited, vert, true)
	var order []int = []int{}
	_ = order
	for _, neighbour := range _index(graph, vert) {
		_ = neighbour
		if !_index(visited, neighbour) {
			order = _concat(order, topology_sort(func(v any) [][]int {
				if v == nil {
					return nil
				}
				if vv, ok := v.([][]int); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return [][]int{}
					}
					out := make([][]int, len(arr))
					for i, x := range arr {
						out[i] = func(v any) []int {
							if v == nil {
								return nil
							}
							if vv, ok := v.([]int); ok {
								return vv
							}
							if arr, ok := v.([]any); ok {
								if len(arr) == 0 {
									return []int{}
								}
								out := make([]int, len(arr))
								for i, x := range arr {
									out[i] = x.(int)
								}
								return out
							}
							return v.([]int)
						}(x)
					}
					return out
				}
				return v.([][]int)
			}(graph), neighbour, func(v any) []bool {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]bool); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []bool{}
					}
					out := make([]bool, len(arr))
					for i, x := range arr {
						out[i] = x.(bool)
					}
					return out
				}
				return v.([]bool)
			}(visited)))
		}
	}
	order = append(order, vert)
	return order
}

func find_component(graph [][]int, vert int, visited []bool) []int {
	_setIndex(visited, vert, true)
	var comp []int = []int{func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(vert)}
	_ = comp
	for _, neighbour := range _index(graph, vert) {
		_ = neighbour
		if !_index(visited, neighbour) {
			comp = _concat(comp, find_component(func(v any) [][]int {
				if v == nil {
					return nil
				}
				if vv, ok := v.([][]int); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return [][]int{}
					}
					out := make([][]int, len(arr))
					for i, x := range arr {
						out[i] = func(v any) []int {
							if v == nil {
								return nil
							}
							if vv, ok := v.([]int); ok {
								return vv
							}
							if arr, ok := v.([]any); ok {
								if len(arr) == 0 {
									return []int{}
								}
								out := make([]int, len(arr))
								for i, x := range arr {
									out[i] = x.(int)
								}
								return out
							}
							return v.([]int)
						}(x)
					}
					return out
				}
				return v.([][]int)
			}(graph), neighbour, func(v any) []bool {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]bool); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []bool{}
					}
					out := make([]bool, len(arr))
					for i, x := range arr {
						out[i] = x.(bool)
					}
					return out
				}
				return v.([]bool)
			}(visited)))
		}
	}
	return comp
}

func strongly_connected_components(graph [][]int) [][]int {
	var n int = len(graph)
	_ = n
	var visited []bool = []bool{}
	_ = visited
	for _i := 0; _i < n; _i++ {
		visited = append(visited, false)
	}
	var reversed [][]int = [][]int{}
	_ = reversed
	for _i := 0; _i < n; _i++ {
		reversed = append(reversed, []int{})
	}
	for i := 0; i < n; i++ {
		for _, neighbour := range _index(graph, i) {
			_ = neighbour
			_setIndex(reversed, neighbour, append(_index(reversed, neighbour), i))
		}
	}
	var order []int = []int{}
	_ = order
	for i := 0; i < n; i++ {
		if !_index(visited, i) {
			order = _concat(order, topology_sort(func(v any) [][]int {
				if v == nil {
					return nil
				}
				if vv, ok := v.([][]int); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return [][]int{}
					}
					out := make([][]int, len(arr))
					for i, x := range arr {
						out[i] = func(v any) []int {
							if v == nil {
								return nil
							}
							if vv, ok := v.([]int); ok {
								return vv
							}
							if arr, ok := v.([]any); ok {
								if len(arr) == 0 {
									return []int{}
								}
								out := make([]int, len(arr))
								for i, x := range arr {
									out[i] = x.(int)
								}
								return out
							}
							return v.([]int)
						}(x)
					}
					return out
				}
				return v.([][]int)
			}(graph), i, func(v any) []bool {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]bool); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []bool{}
					}
					out := make([]bool, len(arr))
					for i, x := range arr {
						out[i] = x.(bool)
					}
					return out
				}
				return v.([]bool)
			}(visited)))
		}
	}
	visited = []bool{}
	for _i := 0; _i < n; _i++ {
		visited = append(visited, false)
	}
	var components [][]int = [][]int{}
	_ = components
	var i int = 0
	_ = i
	for i < n {
		var v int = _index(order, ((n - i) - 1))
		_ = v
		if !_index(visited, v) {
			var comp []int = find_component(func(v any) [][]int {
				if v == nil {
					return nil
				}
				if vv, ok := v.([][]int); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return [][]int{}
					}
					out := make([][]int, len(arr))
					for i, x := range arr {
						out[i] = func(v any) []int {
							if v == nil {
								return nil
							}
							if vv, ok := v.([]int); ok {
								return vv
							}
							if arr, ok := v.([]any); ok {
								if len(arr) == 0 {
									return []int{}
								}
								out := make([]int, len(arr))
								for i, x := range arr {
									out[i] = x.(int)
								}
								return out
							}
							return v.([]int)
						}(x)
					}
					return out
				}
				return v.([][]int)
			}(reversed), v, func(v any) []bool {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]bool); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []bool{}
					}
					out := make([]bool, len(arr))
					for i, x := range arr {
						out[i] = x.(bool)
					}
					return out
				}
				return v.([]bool)
			}(visited))
			_ = comp
			components = append(components, comp)
		}
		i = (i + 1)
	}
	return components
}

func mochiMain() {
	var test_graph_1 [][]int = [][]int{[]int{2, 3}, []int{0}, []int{1}, []int{4}, []int{}}
	_ = test_graph_1
	var test_graph_2 [][]int = [][]int{[]int{1, 2, 3}, []int{2}, []int{0}, []int{4}, []int{5}, []int{3}}
	_ = test_graph_2
	fmt.Println(fmt.Sprint(strongly_connected_components(func(v any) [][]int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]int{}
			}
			out := make([][]int, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []int {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]int); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []int{}
						}
						out := make([]int, len(arr))
						for i, x := range arr {
							out[i] = x.(int)
						}
						return out
					}
					return v.([]int)
				}(x)
			}
			return out
		}
		return v.([][]int)
	}(test_graph_1))))
	fmt.Println(fmt.Sprint(strongly_connected_components(func(v any) [][]int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]int{}
			}
			out := make([][]int, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []int {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]int); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []int{}
						}
						out := make([]int, len(arr))
						for i, x := range arr {
							out[i] = x.(int)
						}
						return out
					}
					return v.([]int)
				}(x)
			}
			return out
		}
		return v.([][]int)
	}(test_graph_2))))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
