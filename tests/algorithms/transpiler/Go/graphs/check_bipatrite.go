//go:build ignore

// Generated by Mochi v0.10.73 on 2025-08-25 16:50:25 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"sort"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

var __name__ string = "__main__"

func is_bipartite_bfs(graph map[int][]int) bool {
	var visited map[int]int = map[int]int{}
	if visited == nil {
		visited = map[int]int{}
	}
	_ = visited
	for _, node := range func() []int {
		keys := make([]int, 0, len(graph))
		for k := range graph {
			keys = append(keys, k)
		}
		sort.Slice(keys, func(i, j int) bool { return fmt.Sprint(keys[i]) < fmt.Sprint(keys[j]) })
		return keys
	}() {
		_ = node
		if !func() bool { _, ok := visited[node]; return ok }() {
			var queue []int = []int{}
			_ = queue
			queue = append(queue, node)
			visited[node] = 0
			for len(queue) > 0 {
				var curr int = _index(queue, 0)
				_ = curr
				queue = queue[1:len(queue)]
				for _, neighbor := range graph[curr] {
					_ = neighbor
					if !func() bool { _, ok := visited[neighbor]; return ok }() {
						visited[neighbor] = (1 - visited[curr])
						queue = append(queue, neighbor)
					} else {
						if visited[neighbor] == visited[curr] {
							return false
						}
					}
				}
			}
		}
	}
	return true
}

var graph map[int][]int

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		graph = map[int][]int{0: []int{1, 3}, 1: []int{0, 2}, 2: []int{1, 3}, 3: []int{0, 2}}
		fmt.Println(fmt.Sprint(is_bipartite_bfs(graph)))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
