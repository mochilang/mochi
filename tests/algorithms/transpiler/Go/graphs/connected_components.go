//go:build ignore

// Generated by Mochi v0.10.73 on 2025-08-25 16:50:27 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var nowSeed int64 = 1

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
		}
	}
}
func _now() int {
	nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
	return int(nowSeed)
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		return
	}
	s[idx] = v
}

func _concat[T any](a, b []T) []T {
	return append(append([]T{}, a...), b...)
}

var __name__ string = "__main__"

var test_graph_1 map[int][]int

var test_graph_2 map[int][]int

func dfs(graph map[int][]int, vert int, visited []bool) []int {
	_setIndex(visited, vert, true)
	var connected_verts []int = []int{}
	_ = connected_verts
	for _, neighbour := range graph[vert] {
		_ = neighbour
		if !_index(visited, neighbour) {
			connected_verts = _concat(connected_verts, dfs(graph, neighbour, func(v any) []bool {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]bool); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []bool{}
					}
					out := make([]bool, len(arr))
					for i, x := range arr {
						out[i] = x.(bool)
					}
					return out
				}
				return v.([]bool)
			}(visited)))
		}
	}
	return func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(_concat([]int{func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(vert)}, connected_verts))
}

func connected_components(graph map[int][]int) [][]int {
	var graph_size int = len(graph)
	_ = graph_size
	var visited []bool = []bool{}
	_ = visited
	for _i := 0; _i < graph_size; _i++ {
		visited = append(visited, false)
	}
	var components_list [][]int = [][]int{}
	_ = components_list
	for i := 0; i < graph_size; i++ {
		if !_index(visited, i) {
			var component []int = dfs(graph, i, func(v any) []bool {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]bool); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []bool{}
					}
					out := make([]bool, len(arr))
					for i, x := range arr {
						out[i] = x.(bool)
					}
					return out
				}
				return v.([]bool)
			}(visited))
			_ = component
			components_list = append(components_list, component)
		}
	}
	return components_list
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		test_graph_1 = map[int][]int{0: []int{1, 2}, 1: []int{0, 3}, 2: []int{0}, 3: []int{1}, 4: []int{5, 6}, 5: []int{4, 6}, 6: []int{4, 5}}
		test_graph_2 = map[int][]int{0: []int{1, 2, 3}, 1: []int{0, 3}, 2: []int{0}, 3: []int{0, 1}, 4: []int{}, 5: []int{}}
		fmt.Println(fmt.Sprint(connected_components(test_graph_1)))
		fmt.Println(fmt.Sprint(connected_components(test_graph_2)))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
