//go:build ignore

// Generated by Mochi v0.10.61 on 2025-08-09 10:25:27 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _mod(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	s[idx] = v
}

type CheckResult struct {
	Status  int `json:"status"`
	OddNode int `json:"odd_node"`
}

func make_matrix(n int) [][]bool {
	var matrix [][]bool = [][]bool{}
	_ = matrix
	var i int = 0
	_ = i
	for i <= n {
		var row []bool = []bool{}
		_ = row
		var j int = 0
		_ = j
		for j <= n {
			row = append(row, false)
			j = (j + 1)
		}
		matrix = append(matrix, row)
		i = (i + 1)
	}
	return matrix
}

func dfs(u int, graph map[int][]int, visited_edge [][]bool, path []int) []int {
	path = append(path, u)
	if func() bool { _, ok := graph[u]; return ok }() {
		var neighbors []int = graph[u]
		_ = neighbors
		var i int = 0
		_ = i
		for i < len(neighbors) {
			var v int = _index(neighbors, i)
			_ = v
			if _index(_index(visited_edge, u), v) == false {
				_setIndex(_index(visited_edge, u), v, true)
				_setIndex(_index(visited_edge, v), u, true)
				path = dfs(v, graph, func(v any) [][]bool {
					if v == nil {
						return nil
					}
					if vv, ok := v.([][]bool); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return [][]bool{}
						}
						out := make([][]bool, len(arr))
						for i, x := range arr {
							out[i] = func(v any) []bool {
								if v == nil {
									return nil
								}
								if vv, ok := v.([]bool); ok {
									return vv
								}
								if arr, ok := v.([]any); ok {
									if len(arr) == 0 {
										return []bool{}
									}
									out := make([]bool, len(arr))
									for i, x := range arr {
										out[i] = x.(bool)
									}
									return out
								}
								return v.([]bool)
							}(x)
						}
						return out
					}
					return v.([][]bool)
				}(visited_edge), func(v any) []int {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]int); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []int{}
						}
						out := make([]int, len(arr))
						for i, x := range arr {
							out[i] = x.(int)
						}
						return out
					}
					return v.([]int)
				}(path))
			}
			i = (i + 1)
		}
	}
	return path
}

func check_circuit_or_path(graph map[int][]int, max_node int) CheckResult {
	var odd_degree_nodes int = 0
	_ = odd_degree_nodes
	var odd_node int = (0 - 1)
	_ = odd_node
	var i int = 0
	_ = i
	for i < max_node {
		if func() bool { _, ok := graph[i]; return ok }() {
			if _mod(len(graph[i]), 2) == 1 {
				odd_degree_nodes = (odd_degree_nodes + 1)
				odd_node = i
			}
		}
		i = (i + 1)
	}
	if odd_degree_nodes == 0 {
		return CheckResult{
			Status:  1,
			OddNode: odd_node,
		}
	}
	if odd_degree_nodes == 2 {
		return CheckResult{
			Status:  2,
			OddNode: odd_node,
		}
	}
	return CheckResult{
		Status:  3,
		OddNode: odd_node,
	}
}

func check_euler(graph map[int][]int, max_node int) {
	var visited_edge [][]bool = make_matrix(max_node)
	_ = visited_edge
	res := check_circuit_or_path(graph, max_node)
	_ = res
	if int(CheckResult(res).Status) == 3 {
		fmt.Println("graph is not Eulerian")
		fmt.Println("no path")
		return
	}
	var start_node int = 1
	_ = start_node
	if int(CheckResult(res).Status) == 2 {
		start_node = CheckResult(res).OddNode
		fmt.Println("graph has a Euler path")
	}
	if int(CheckResult(res).Status) == 1 {
		fmt.Println("graph has a Euler cycle")
	}
	path := dfs(start_node, graph, func(v any) [][]bool {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]bool); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]bool{}
			}
			out := make([][]bool, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []bool {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]bool); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []bool{}
						}
						out := make([]bool, len(arr))
						for i, x := range arr {
							out[i] = x.(bool)
						}
						return out
					}
					return v.([]bool)
				}(x)
			}
			return out
		}
		return v.([][]bool)
	}(visited_edge), func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}([]int{}))
	_ = path
	fmt.Println(fmt.Sprint(path))
}

var g1 map[int][]int

var g2 map[int][]int

var g3 map[int][]int

var g4 map[int][]int

var g5 map[int][]int

var max_node int

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		g1 = map[int][]int{1: []int{func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(2), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(3), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(4)}, 2: []int{func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(1), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(3)}, 3: []int{func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(1), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(2)}, 4: []int{func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(1), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(5)}, 5: []int{func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(4)}}
		g2 = map[int][]int{1: []int{func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(2), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(3), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(4), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(5)}, 2: []int{func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(1), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(3)}, 3: []int{func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(1), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(2)}, 4: []int{func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(1), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(5)}, 5: []int{func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(1), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(4)}}
		g3 = map[int][]int{1: []int{func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(2), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(3), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(4)}, 2: []int{func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(1), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(3), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(4)}, 3: []int{func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(1), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(2)}, 4: []int{func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(1), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(2), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(5)}, 5: []int{func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(4)}}
		g4 = map[int][]int{1: []int{func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(2), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(3)}, 2: []int{func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(1), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(3)}, 3: []int{func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(1), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(2)}}
		g5 = map[int][]int{1: []int{}, 2: []int{}}
		max_node = 10
		check_euler(g1, max_node)
		check_euler(g2, max_node)
		check_euler(g3, max_node)
		check_euler(g4, max_node)
		check_euler(g5, max_node)
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
