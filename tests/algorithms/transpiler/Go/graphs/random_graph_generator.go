//go:build ignore

// Generated by Mochi v0.10.63 on 2025-08-12 08:43:27 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _mod(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

var seed int

func rand() int {
	seed = _mod(((seed * 1103515245) + 12345), 2147483648)
	return seed
}

func random() float64 {
	return (float64((1.0 * float64(rand()))) / float64(2147483648.0))
}

func complete_graph(vertices_number int) map[int][]int {
	var graph map[int][]int = map[int][]int{}
	_ = graph
	var i int = 0
	_ = i
	for i < vertices_number {
		var neighbors []int = []int{}
		_ = neighbors
		var j int = 0
		_ = j
		for j < vertices_number {
			if j != i {
				neighbors = append(neighbors, j)
			}
			j = (j + 1)
		}
		graph[i] = neighbors
		i = (i + 1)
	}
	return graph
}

func random_graph(vertices_number int, probability float64, directed bool) map[int][]int {
	var graph map[int][]int = map[int][]int{}
	_ = graph
	var i int = 0
	_ = i
	for i < vertices_number {
		graph[i] = []int{}
		i = (i + 1)
	}
	if probability >= 1.0 {
		return complete_graph(vertices_number)
	}
	if probability <= 0.0 {
		return graph
	}
	i = 0
	for i < vertices_number {
		var j int = (i + 1)
		_ = j
		for j < vertices_number {
			if random() < probability {
				graph[i] = append(graph[i], j)
				if !directed {
					graph[j] = append(graph[j], i)
				}
			}
			j = (j + 1)
		}
		i = (i + 1)
	}
	return graph
}

func mochiMain() {
	seed = 1
	var g1 map[int][]int = random_graph(4, 0.5, false)
	_ = g1
	fmt.Println(g1)
	seed = 1
	var g2 map[int][]int = random_graph(4, 0.5, true)
	_ = g2
	fmt.Println(g2)
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		seed = 1
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
