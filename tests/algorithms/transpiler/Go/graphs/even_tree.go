//go:build ignore

// Generated by Mochi v0.10.65 on 2025-08-14 16:29:34 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _mod(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

var tree map[int][]int

func dfs(start int, visited map[int]bool) []int {
	var size int = 1
	_ = size
	var cuts int = 0
	_ = cuts
	visited[start] = true
	for _, v := range tree[start] {
		if !func() bool { _, ok := visited[v]; return ok }() {
			var res []int = dfs(v, visited)
			_ = res
			size = (size + int(_index(res, 0)))
			cuts = (cuts + int(_index(res, 1)))
		}
	}
	if _mod(size, 2) == 0 {
		cuts = (cuts + 1)
	}
	return []int{func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(size), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(cuts)}
}

func even_tree() int {
	var visited map[int]bool = map[int]bool{}
	_ = visited
	var res []int = dfs(1, visited)
	_ = res
	_ = res
	return (int(_index(res, 1)) - 1)
}

func mochiMain() {
	var edges [][]int = [][]int{[]int{2, 1}, []int{3, 1}, []int{4, 3}, []int{5, 2}, []int{6, 1}, []int{7, 2}, []int{8, 6}, []int{9, 8}, []int{10, 8}}
	_ = edges
	var i int = 0
	_ = i
	for i < len(edges) {
		var u int = _index(_index(edges, i), 0)
		_ = u
		var v int = _index(_index(edges, i), 1)
		_ = v
		if !func() bool { _, ok := tree[u]; return ok }() {
			tree[u] = []int{}
		}
		if !func() bool { _, ok := tree[v]; return ok }() {
			tree[v] = []int{}
		}
		tree[u] = append(tree[u], v)
		tree[v] = append(tree[v], u)
		i = (i + 1)
	}
	fmt.Println(fmt.Sprint(even_tree()))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		tree = map[int][]int{}
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
