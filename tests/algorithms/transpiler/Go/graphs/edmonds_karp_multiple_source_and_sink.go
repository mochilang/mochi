//go:build ignore

// Generated by Mochi v0.10.65 on 2025-08-14 16:29:21 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	s[idx] = v
}

func push_relabel_max_flow(graph [][]int, sources []int, sinks []int) int {
	if (len(sources) == 0) || (len(sinks) == 0) {
		return 0
	}
	var g [][]int = graph
	_ = g
	var source_index int = _index(sources, 0)
	_ = source_index
	var sink_index int = _index(sinks, 0)
	_ = sink_index
	if (len(sources) > 1) || (len(sinks) > 1) {
		var max_input_flow int = 0
		_ = max_input_flow
		var i int = 0
		_ = i
		for i < len(sources) {
			var j int = 0
			_ = j
			for j < len(_index(g, _index(sources, i))) {
				max_input_flow = (max_input_flow + int(_index(_index(g, _index(sources, i)), j)))
				j = (j + 1)
			}
			i = (i + 1)
		}
		var size int = (len(g) + 1)
		_ = size
		var new_graph [][]int = [][]int{}
		_ = new_graph
		var zero_row []int = []int{}
		_ = zero_row
		var j int = 0
		_ = j
		for j < size {
			zero_row = append(zero_row, 0)
			j = (j + 1)
		}
		new_graph = append(new_graph, zero_row)
		var r int = 0
		_ = r
		for r < len(g) {
			var row []int = []int{0}
			_ = row
			var c int = 0
			_ = c
			for c < len(_index(g, r)) {
				row = append(row, _index(_index(g, r), c))
				c = (c + 1)
			}
			new_graph = append(new_graph, row)
			r = (r + 1)
		}
		g = new_graph
		i = 0
		for i < len(sources) {
			_setIndex(_index(g, 0), (int(_index(sources, i)) + 1), max_input_flow)
			i = (i + 1)
		}
		source_index = 0
		size = (len(g) + 1)
		new_graph = [][]int{}
		r = 0
		for r < len(g) {
			var row2 []int = _index(g, r)
			_ = row2
			row2 = append(row2, 0)
			new_graph = append(new_graph, row2)
			r = (r + 1)
		}
		var last_row []int = []int{}
		_ = last_row
		j = 0
		for j < size {
			last_row = append(last_row, 0)
			j = (j + 1)
		}
		new_graph = append(new_graph, last_row)
		g = new_graph
		i = 0
		for i < len(sinks) {
			_setIndex(_index(g, (int(_index(sinks, i))+1)), (size - 1), max_input_flow)
			i = (i + 1)
		}
		sink_index = (size - 1)
	}
	var n int = len(g)
	_ = n
	var preflow [][]int = [][]int{}
	_ = preflow
	var i int = 0
	_ = i
	for i < n {
		var row []int = []int{}
		_ = row
		var j int = 0
		_ = j
		for j < n {
			row = append(row, 0)
			j = (j + 1)
		}
		preflow = append(preflow, row)
		i = (i + 1)
	}
	var heights []int = []int{}
	_ = heights
	i = 0
	for i < n {
		heights = append(heights, 0)
		i = (i + 1)
	}
	var excesses []int = []int{}
	_ = excesses
	i = 0
	for i < n {
		excesses = append(excesses, 0)
		i = (i + 1)
	}
	_setIndex(heights, source_index, n)
	i = 0
	for i < n {
		var bandwidth int = _index(_index(g, source_index), i)
		_ = bandwidth
		_setIndex(_index(preflow, source_index), i, (int(_index(_index(preflow, source_index), i)) + bandwidth))
		_setIndex(_index(preflow, i), source_index, (int(_index(_index(preflow, i), source_index)) - bandwidth))
		_setIndex(excesses, i, (int(_index(excesses, i)) + bandwidth))
		i = (i + 1)
	}
	var vertices_list []int = []int{}
	_ = vertices_list
	i = 0
	for i < n {
		if (i != source_index) && (i != sink_index) {
			vertices_list = append(vertices_list, i)
		}
		i = (i + 1)
	}
	var idx int = 0
	_ = idx
	for idx < len(vertices_list) {
		var v int = _index(vertices_list, idx)
		_ = v
		var prev_height int = _index(heights, v)
		_ = prev_height
		for int(_index(excesses, v)) > 0 {
			var nb int = 0
			_ = nb
			for nb < n {
				if ((int(_index(_index(g, v), nb)) - int(_index(_index(preflow, v), nb))) > 0) && (int(_index(heights, v)) > int(_index(heights, nb))) {
					var delta int = _index(excesses, v)
					_ = delta
					var capacity int = (int(_index(_index(g, v), nb)) - int(_index(_index(preflow, v), nb)))
					_ = capacity
					if delta > capacity {
						delta = capacity
					}
					_setIndex(_index(preflow, v), nb, (int(_index(_index(preflow, v), nb)) + delta))
					_setIndex(_index(preflow, nb), v, (int(_index(_index(preflow, nb), v)) - delta))
					_setIndex(excesses, v, (int(_index(excesses, v)) - delta))
					_setIndex(excesses, nb, (int(_index(excesses, nb)) + delta))
				}
				nb = (nb + 1)
			}
			var min_height int = (0 - 1)
			_ = min_height
			nb = 0
			for nb < n {
				if (int(_index(_index(g, v), nb)) - int(_index(_index(preflow, v), nb))) > 0 {
					if (min_height == (0 - 1)) || (int(_index(heights, nb)) < min_height) {
						min_height = _index(heights, nb)
					}
				}
				nb = (nb + 1)
			}
			if min_height != (0 - 1) {
				_setIndex(heights, v, (min_height + 1))
			} else {
				break
			}
		}
		if int(_index(heights, v)) > prev_height {
			var vertex int = _index(vertices_list, idx)
			_ = vertex
			var j int = idx
			_ = j
			for j > 0 {
				_setIndex(vertices_list, j, _index(vertices_list, (j-1)))
				j = (j - 1)
			}
			_setIndex(vertices_list, 0, vertex)
			idx = 0
		} else {
			idx = (idx + 1)
		}
	}
	var flow int = 0
	_ = flow
	i = 0
	for i < n {
		flow = (flow + int(_index(_index(preflow, source_index), i)))
		i = (i + 1)
	}
	if flow < 0 {
		flow = (0 - flow)
	}
	return flow
}

var graph [][]int

var sources []int

var sinks []int

var result int

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		graph = [][]int{[]int{0, 7, 0, 0}, []int{0, 0, 6, 0}, []int{0, 0, 0, 8}, []int{9, 0, 0, 0}}
		sources = []int{0}
		sinks = []int{3}
		result = push_relabel_max_flow(func(v any) [][]int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]int{}
				}
				out := make([][]int, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []int {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]int); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []int{}
							}
							out := make([]int, len(arr))
							for i, x := range arr {
								out[i] = x.(int)
							}
							return out
						}
						return v.([]int)
					}(x)
				}
				return out
			}
			return v.([][]int)
		}(graph), func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(sources), func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(sinks))
		fmt.Println(("maximum flow is " + fmt.Sprint(result)))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
