//go:build ignore

// Generated by Mochi v0.10.61 on 2025-08-09 10:25:14 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	s[idx] = v
}

var INF float64

func print_dist(dist []float64) {
	fmt.Println("Vertex Distance")
	var i int = 0
	_ = i
	for i < len(dist) {
		if _index(dist, i) >= INF {
			fmt.Println(i, "\tINF")
		} else {
			fmt.Println(i, "\t", int(_index(dist, i)))
		}
		i = (i + 1)
	}
}

func min_dist(mdist []float64, vset []bool) int {
	var min_val float64 = INF
	_ = min_val
	var min_ind int = (0 - 1)
	_ = min_ind
	var i int = 0
	_ = i
	for i < len(mdist) {
		if !_index(vset, i) && (_index(mdist, i) < min_val) {
			min_val = _index(mdist, i)
			min_ind = i
		}
		i = (i + 1)
	}
	return min_ind
}

func dijkstra(graph [][]float64, src int) []float64 {
	v := len(graph)
	_ = v
	var mdist []float64 = []float64{}
	_ = mdist
	var vset []bool = []bool{}
	_ = vset
	var i int = 0
	_ = i
	for i < v {
		mdist = append(mdist, INF)
		vset = append(vset, false)
		i = (i + 1)
	}
	_setIndex(mdist, src, 0.0)
	var count int = 0
	_ = count
	for count < (v - 1) {
		u := min_dist(func(v any) []float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []float64{}
				}
				out := make([]float64, len(arr))
				for i, x := range arr {
					out[i] = x.(float64)
				}
				return out
			}
			return v.([]float64)
		}(mdist), func(v any) []bool {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]bool); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []bool{}
				}
				out := make([]bool, len(arr))
				for i, x := range arr {
					out[i] = x.(bool)
				}
				return out
			}
			return v.([]bool)
		}(vset))
		_ = u
		_setIndex(vset, u, true)
		var i int = 0
		_ = i
		for i < v {
			var alt float64 = (_index(mdist, u) + _index(_index(graph, u), i))
			_ = alt
			if (!_index(vset, i) && (_index(_index(graph, u), i) < INF)) && (alt < _index(mdist, i)) {
				_setIndex(mdist, i, alt)
			}
			i = (i + 1)
		}
		count = (count + 1)
	}
	return mdist
}

func mochiMain() {
	var graph [][]float64 = [][]float64{[]float64{0.0, 10.0, INF, INF, 5.0}, []float64{INF, 0.0, 1.0, INF, 2.0}, []float64{INF, INF, 0.0, 4.0, INF}, []float64{INF, INF, 6.0, 0.0, INF}, []float64{INF, 3.0, 9.0, 2.0, 0.0}}
	_ = graph
	dist := dijkstra(func(v any) [][]float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]float64{}
			}
			out := make([][]float64, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []float64 {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]float64); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []float64{}
						}
						out := make([]float64, len(arr))
						for i, x := range arr {
							out[i] = x.(float64)
						}
						return out
					}
					return v.([]float64)
				}(x)
			}
			return out
		}
		return v.([][]float64)
	}(graph), 0)
	_ = dist
	print_dist(func(v any) []float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []float64{}
			}
			out := make([]float64, len(arr))
			for i, x := range arr {
				out[i] = x.(float64)
			}
			return out
		}
		return v.([]float64)
	}(func(v any) []float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []float64{}
			}
			out := make([]float64, len(arr))
			for i, x := range arr {
				out[i] = x.(float64)
			}
			return out
		}
		return v.([]float64)
	}(dist)))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		INF = 1000000000.0
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
