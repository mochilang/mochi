//go:build ignore

// Generated by Mochi v0.10.64 on 2025-08-13 16:29:07 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"strings"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	s[idx] = v
}

var DIRECTIONS [][]int

type SearchResult struct {
	Path   [][]int `json:"path"`
	Action [][]int `json:"action"`
}

func iabs(x int) int {
	if x < 0 {
		return (0 - x)
	}
	return x
}

func search(grid [][]int, init []int, goal []int, cost int, heuristic [][]int) SearchResult {
	var closed [][]int = [][]int{}
	_ = closed
	var r int = 0
	_ = r
	for r < len(grid) {
		var row []int = []int{}
		_ = row
		var c int = 0
		_ = c
		for c < len(_index(grid, 0)) {
			row = append(row, 0)
			c = (c + 1)
		}
		closed = append(closed, row)
		r = (r + 1)
	}
	_setIndex(_index(closed, _index(init, 0)), _index(init, 1), 1)
	var action [][]int = [][]int{}
	_ = action
	r = 0
	for r < len(grid) {
		var row []int = []int{}
		_ = row
		var c int = 0
		_ = c
		for c < len(_index(grid, 0)) {
			row = append(row, 0)
			c = (c + 1)
		}
		action = append(action, row)
		r = (r + 1)
	}
	var x int = _index(init, 0)
	_ = x
	var y int = _index(init, 1)
	_ = y
	var g int = 0
	_ = g
	var f int = (g + int(_index(_index(heuristic, x), y)))
	_ = f
	var cell [][]int = [][]int{[]int{func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(f), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(g), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(x), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(y)}}
	_ = cell
	var found bool = false
	_ = found
	var resign bool = false
	_ = resign
	for !found && !resign {
		if len(cell) == 0 {
			panic("Algorithm is unable to find solution")
		} else {
			var best_i int = 0
			_ = best_i
			var best_f int = _index(_index(cell, 0), 0)
			_ = best_f
			var i int = 1
			_ = i
			for i < len(cell) {
				if int(_index(_index(cell, i), 0)) < best_f {
					best_f = _index(_index(cell, i), 0)
					best_i = i
				}
				i = (i + 1)
			}
			var next_cell []int = _index(cell, best_i)
			_ = next_cell
			var new_cell [][]int = [][]int{}
			_ = new_cell
			i = 0
			for i < len(cell) {
				if i != best_i {
					new_cell = append(new_cell, _index(cell, i))
				}
				i = (i + 1)
			}
			cell = new_cell
			x = _index(next_cell, 2)
			y = _index(next_cell, 3)
			g = _index(next_cell, 1)
			if (x == int(_index(goal, 0))) && (y == int(_index(goal, 1))) {
				found = true
			} else {
				var d int = 0
				_ = d
				for d < len(DIRECTIONS) {
					var x2 int = (x + int(_index(_index(DIRECTIONS, d), 0)))
					_ = x2
					var y2 int = (y + int(_index(_index(DIRECTIONS, d), 1)))
					_ = y2
					if (((((x2 >= 0) && (x2 < len(grid))) && (y2 >= 0)) && (y2 < len(_index(grid, 0)))) && (int(_index(_index(closed, x2), y2)) == 0)) && (int(_index(_index(grid, x2), y2)) == 0) {
						var g2 int = (g + cost)
						_ = g2
						var f2 int = (g2 + int(_index(_index(heuristic, x2), y2)))
						_ = f2
						cell = append(cell, []int{func(v any) int {
							if vv, ok := v.(int); ok {
								return vv
							}
							return 0
						}(f2), func(v any) int {
							if vv, ok := v.(int); ok {
								return vv
							}
							return 0
						}(g2), func(v any) int {
							if vv, ok := v.(int); ok {
								return vv
							}
							return 0
						}(x2), func(v any) int {
							if vv, ok := v.(int); ok {
								return vv
							}
							return 0
						}(y2)})
						_setIndex(_index(closed, x2), y2, 1)
						_setIndex(_index(action, x2), y2, d)
					}
					d = (d + 1)
				}
			}
		}
	}
	var invpath [][]int = [][]int{}
	_ = invpath
	x = _index(goal, 0)
	y = _index(goal, 1)
	invpath = append(invpath, []int{func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(x), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}(y)})
	for (x != int(_index(init, 0))) || (y != int(_index(init, 1))) {
		var dir int = _index(_index(action, x), y)
		_ = dir
		var x2 int = (x - int(_index(_index(DIRECTIONS, dir), 0)))
		_ = x2
		var y2 int = (y - int(_index(_index(DIRECTIONS, dir), 1)))
		_ = y2
		x = x2
		y = y2
		invpath = append(invpath, []int{func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(x), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(y)})
	}
	var path [][]int = [][]int{}
	_ = path
	var idx int = (len(invpath) - 1)
	_ = idx
	for idx >= 0 {
		path = append(path, _index(invpath, idx))
		idx = (idx - 1)
	}
	return SearchResult{
		Path:   path,
		Action: action,
	}
}

func mochiMain() {
	var grid [][]int = [][]int{[]int{0, 1, 0, 0, 0, 0}, []int{0, 1, 0, 0, 0, 0}, []int{0, 1, 0, 0, 0, 0}, []int{0, 1, 0, 0, 1, 0}, []int{0, 0, 0, 0, 1, 0}}
	_ = grid
	var init []int = []int{0, 0}
	_ = init
	var goal []int = []int{func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}((len(grid) - 1)), func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}((len(_index(grid, 0)) - 1))}
	_ = goal
	var cost int = 1
	_ = cost
	var heuristic [][]int = [][]int{}
	_ = heuristic
	var i int = 0
	_ = i
	for i < len(grid) {
		var row []int = []int{}
		_ = row
		var j int = 0
		_ = j
		for j < len(_index(grid, 0)) {
			var h int = (iabs((i - int(_index(goal, 0)))) + iabs((j - int(_index(goal, 1)))))
			_ = h
			if int(_index(_index(grid, i), j)) == 1 {
				row = append(row, 99)
			} else {
				row = append(row, h)
			}
			j = (j + 1)
		}
		heuristic = append(heuristic, row)
		i = (i + 1)
	}
	var result SearchResult = search(func(v any) [][]int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]int{}
			}
			out := make([][]int, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []int {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]int); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []int{}
						}
						out := make([]int, len(arr))
						for i, x := range arr {
							out[i] = x.(int)
						}
						return out
					}
					return v.([]int)
				}(x)
			}
			return out
		}
		return v.([][]int)
	}(grid), func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(init), func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(goal), cost, func(v any) [][]int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]int{}
			}
			out := make([][]int, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []int {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]int); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []int{}
						}
						out := make([]int, len(arr))
						for i, x := range arr {
							out[i] = x.(int)
						}
						return out
					}
					return v.([]int)
				}(x)
			}
			return out
		}
		return v.([][]int)
	}(heuristic))
	_ = result
	fmt.Println("ACTION MAP")
	var rr int = 0
	_ = rr
	for rr < len(result.Action) {
		fmt.Println(func() string {
			b, _ := json.Marshal(_index(result.Action, rr))
			s := string(b)
			s = strings.ReplaceAll(s, ":", ": ")
			s = strings.ReplaceAll(s, ",", ", ")
			s = strings.ReplaceAll(s, "}, {", "},{")
			return s
		}())
		rr = (rr + 1)
	}
	var p int = 0
	_ = p
	for p < len(result.Path) {
		fmt.Println(func() string {
			b, _ := json.Marshal(_index(result.Path, p))
			s := string(b)
			s = strings.ReplaceAll(s, ":", ": ")
			s = strings.ReplaceAll(s, ",", ", ")
			s = strings.ReplaceAll(s, "}, {", "},{")
			return s
		}())
		p = (p + 1)
	}
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		DIRECTIONS = [][]int{[]int{func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}((0 - 1)), 0}, []int{0, func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}((0 - 1))}, []int{1, 0}, []int{0, 1}}
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
