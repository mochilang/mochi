//go:build ignore

// Generated by Mochi v0.10.64 on 2025-08-13 12:54:22 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	s[idx] = v
}

func dfs_skip(graph [][]int, visited []bool, skip int, at int) int {
	_setIndex(visited, at, true)
	var count int = 1
	_ = count
	for _, to := range _index(graph, at) {
		if to == skip {
			continue
		}
		if _index(visited, to) == false {
			count = (count + dfs_skip(func(v any) [][]int {
				if v == nil {
					return nil
				}
				if vv, ok := v.([][]int); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return [][]int{}
					}
					out := make([][]int, len(arr))
					for i, x := range arr {
						out[i] = func(v any) []int {
							if v == nil {
								return nil
							}
							if vv, ok := v.([]int); ok {
								return vv
							}
							if arr, ok := v.([]any); ok {
								if len(arr) == 0 {
									return []int{}
								}
								out := make([]int, len(arr))
								for i, x := range arr {
									out[i] = x.(int)
								}
								return out
							}
							return v.([]int)
						}(x)
					}
					return out
				}
				return v.([][]int)
			}(graph), func(v any) []bool {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]bool); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []bool{}
					}
					out := make([]bool, len(arr))
					for i, x := range arr {
						out[i] = x.(bool)
					}
					return out
				}
				return v.([]bool)
			}(visited), skip, to))
		}
	}
	return count
}

func articulation_points(graph [][]int) []int {
	var n int = len(graph)
	_ = n
	var result []int = []int{}
	_ = result
	var v int = 0
	_ = v
	for v < n {
		var visited []bool = []bool{}
		_ = visited
		var i int = 0
		_ = i
		for i < n {
			visited = append(visited, false)
			i = (i + 1)
		}
		var start int = 0
		_ = start
		for (start == v) && (start < n) {
			start = (start + 1)
		}
		var reach int = dfs_skip(func(v any) [][]int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]int{}
				}
				out := make([][]int, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []int {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]int); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []int{}
							}
							out := make([]int, len(arr))
							for i, x := range arr {
								out[i] = x.(int)
							}
							return out
						}
						return v.([]int)
					}(x)
				}
				return out
			}
			return v.([][]int)
		}(graph), func(v any) []bool {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]bool); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []bool{}
				}
				out := make([]bool, len(arr))
				for i, x := range arr {
					out[i] = x.(bool)
				}
				return out
			}
			return v.([]bool)
		}(visited), v, start)
		_ = reach
		if reach < (n - 1) {
			result = append(result, v)
			fmt.Println(v)
		}
		v = (v + 1)
	}
	return result
}

func mochiMain() {
	var graph [][]int = [][]int{[]int{1, 2}, []int{0, 2}, []int{0, 1, 3, 5}, []int{2, 4}, []int{3}, []int{2, 6, 8}, []int{5, 7}, []int{6, 8}, []int{5, 7}}
	_ = graph
	articulation_points(func(v any) [][]int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]int{}
			}
			out := make([][]int, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []int {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]int); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []int{}
						}
						out := make([]int, len(arr))
						for i, x := range arr {
							out[i] = x.(int)
						}
						return out
					}
					return v.([]int)
				}(x)
			}
			return out
		}
		return v.([][]int)
	}(graph))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
