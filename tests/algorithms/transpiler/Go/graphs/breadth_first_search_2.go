//go:build ignore

// Generated by Mochi v0.10.61 on 2025-08-09 10:24:56 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

func join(xs []string) string {
	var s string = ""
	_ = s
	var i int = 0
	_ = i
	for i < len(xs) {
		s = (s + _index(xs, i))
		i = (i + 1)
	}
	return s
}

func breadth_first_search(graph map[string][]string, start string) []string {
	var explored map[string]bool = map[string]bool{}
	_ = explored
	explored[start] = true
	var result []string = []string{start}
	_ = result
	var queue []string = []string{start}
	_ = queue
	for len(queue) > 0 {
		var v string = _index(queue, 0)
		_ = v
		queue = queue[1:len(queue)]
		var children []string = graph[v]
		_ = children
		var i int = 0
		_ = i
		for i < len(children) {
			var w string = _index(children, i)
			_ = w
			if !func() bool { _, ok := explored[w]; return ok }() {
				explored[w] = true
				result = append(result, w)
				queue = append(queue, w)
			}
			i = (i + 1)
		}
	}
	return result
}

func breadth_first_search_with_deque(graph map[string][]string, start string) []string {
	var visited map[string]bool = map[string]bool{}
	_ = visited
	visited[start] = true
	var result []string = []string{start}
	_ = result
	var queue []string = []string{start}
	_ = queue
	var head int = 0
	_ = head
	for head < len(queue) {
		var v string = _index(queue, head)
		_ = v
		head = (head + 1)
		var children []string = graph[v]
		_ = children
		var i int = 0
		_ = i
		for i < len(children) {
			var child string = _index(children, i)
			_ = child
			if !func() bool { _, ok := visited[child]; return ok }() {
				visited[child] = true
				result = append(result, child)
				queue = append(queue, child)
			}
			i = (i + 1)
		}
	}
	return result
}

var G map[string][]string

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		G = map[string][]string{"A": []string{"B", "C"}, "B": []string{"A", "D", "E"}, "C": []string{"A", "F"}, "D": []string{"B"}, "E": []string{"B", "F"}, "F": []string{"C", "E"}}
		fmt.Println(join(func(v any) []string {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]string); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []string{}
				}
				out := make([]string, len(arr))
				for i, x := range arr {
					out[i] = fmt.Sprint(x)
				}
				return out
			}
			return v.([]string)
		}(breadth_first_search(G, "A"))))
		fmt.Println(join(func(v any) []string {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]string); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []string{}
				}
				out := make([]string, len(arr))
				for i, x := range arr {
					out[i] = fmt.Sprint(x)
				}
				return out
			}
			return v.([]string)
		}(breadth_first_search_with_deque(G, "A"))))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
