//go:build ignore

// Generated by Mochi v0.10.65 on 2025-08-14 16:30:38 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	s[idx] = v
}

func index_of(xs []int, x int) int {
	var i int = 0
	_ = i
	for i < len(xs) {
		if int(_index(xs, i)) == x {
			return i
		}
		i = (i + 1)
	}
	return (0 - 1)
}

func remove_item(xs []int, x int) []int {
	var res []int = []int{}
	_ = res
	var removed bool = false
	_ = removed
	var i int = 0
	_ = i
	for i < len(xs) {
		if !removed && (int(_index(xs, i)) == x) {
			removed = true
		} else {
			res = append(res, _index(xs, i))
		}
		i = (i + 1)
	}
	return res
}

func stable_matching(donor_pref [][]int, recipient_pref [][]int) []int {
	if len(donor_pref) != len(recipient_pref) {
		panic("unequal groups")
	}
	var n int = len(donor_pref)
	_ = n
	var unmatched []int = []int{}
	_ = unmatched
	var i int = 0
	_ = i
	for i < n {
		unmatched = append(unmatched, i)
		i = (i + 1)
	}
	var donor_record []int = []int{}
	_ = donor_record
	i = 0
	for i < n {
		donor_record = append(donor_record, (0 - 1))
		i = (i + 1)
	}
	var rec_record []int = []int{}
	_ = rec_record
	i = 0
	for i < n {
		rec_record = append(rec_record, (0 - 1))
		i = (i + 1)
	}
	var num_donations []int = []int{}
	_ = num_donations
	i = 0
	for i < n {
		num_donations = append(num_donations, 0)
		i = (i + 1)
	}
	for len(unmatched) > 0 {
		var donor int = _index(unmatched, 0)
		_ = donor
		var donor_preference []int = _index(donor_pref, donor)
		_ = donor_preference
		var recipient int = _index(donor_preference, _index(num_donations, donor))
		_ = recipient
		_setIndex(num_donations, donor, (int(_index(num_donations, donor)) + 1))
		var rec_preference []int = _index(recipient_pref, recipient)
		_ = rec_preference
		var prev_donor int = _index(rec_record, recipient)
		_ = prev_donor
		if prev_donor != (0 - 1) {
			var prev_index int = index_of(func(v any) []int {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]int); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []int{}
					}
					out := make([]int, len(arr))
					for i, x := range arr {
						out[i] = x.(int)
					}
					return out
				}
				return v.([]int)
			}(rec_preference), prev_donor)
			_ = prev_index
			var new_index int = index_of(func(v any) []int {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]int); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []int{}
					}
					out := make([]int, len(arr))
					for i, x := range arr {
						out[i] = x.(int)
					}
					return out
				}
				return v.([]int)
			}(rec_preference), donor)
			_ = new_index
			if prev_index > new_index {
				_setIndex(rec_record, recipient, donor)
				_setIndex(donor_record, donor, recipient)
				unmatched = append(unmatched, prev_donor)
				unmatched = remove_item(func(v any) []int {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]int); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []int{}
						}
						out := make([]int, len(arr))
						for i, x := range arr {
							out[i] = x.(int)
						}
						return out
					}
					return v.([]int)
				}(unmatched), donor)
			}
		} else {
			_setIndex(rec_record, recipient, donor)
			_setIndex(donor_record, donor, recipient)
			unmatched = remove_item(func(v any) []int {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]int); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []int{}
					}
					out := make([]int, len(arr))
					for i, x := range arr {
						out[i] = x.(int)
					}
					return out
				}
				return v.([]int)
			}(unmatched), donor)
		}
	}
	return donor_record
}

var donor_pref [][]int

var recipient_pref [][]int

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		donor_pref = [][]int{[]int{0, 1, 3, 2}, []int{0, 2, 3, 1}, []int{1, 0, 2, 3}, []int{0, 3, 1, 2}}
		recipient_pref = [][]int{[]int{3, 1, 2, 0}, []int{3, 1, 0, 2}, []int{0, 3, 1, 2}, []int{1, 0, 3, 2}}
		fmt.Println(fmt.Sprint(stable_matching(func(v any) [][]int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]int{}
				}
				out := make([][]int, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []int {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]int); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []int{}
							}
							out := make([]int, len(arr))
							for i, x := range arr {
								out[i] = x.(int)
							}
							return out
						}
						return v.([]int)
					}(x)
				}
				return out
			}
			return v.([][]int)
		}(donor_pref), func(v any) [][]int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]int{}
				}
				out := make([][]int, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []int {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]int); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []int{}
							}
							out := make([]int, len(arr))
							for i, x := range arr {
								out[i] = x.(int)
							}
							return out
						}
						return v.([]int)
					}(x)
				}
				return out
			}
			return v.([][]int)
		}(recipient_pref))))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
