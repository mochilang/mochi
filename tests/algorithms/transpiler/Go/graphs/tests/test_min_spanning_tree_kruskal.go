//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-15 21:31:26 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		return
	}
	s[idx] = v
}

func sort_edges(edges [][]int) [][]int {
	var es [][]int = edges
	_ = es
	var i int = 0
	_ = i
	for i < len(es) {
		var j int = 0
		_ = j
		for j < ((len(es) - i) - 1) {
			if _index(_index(es, j), 2) > _index(_index(es, (j+1)), 2) {
				var tmp []int = _index(es, j)
				_ = tmp
				_setIndex(es, j, _index(es, (j+1)))
				_setIndex(es, (j + 1), tmp)
			}
			j = (j + 1)
		}
		i = (i + 1)
	}
	return es
}

func find(parent []int, x int) int {
	var r int = x
	_ = r
	for _index(parent, r) != r {
		r = _index(parent, r)
	}
	return r
}

func kruskal(n int, edges [][]int) [][]int {
	var parent []int = []int{}
	_ = parent
	var i int = 0
	_ = i
	for i < n {
		parent = append(parent, i)
		i = (i + 1)
	}
	var sorted [][]int = sort_edges(func(v any) [][]int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]int{}
			}
			out := make([][]int, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []int {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]int); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []int{}
						}
						out := make([]int, len(arr))
						for i, x := range arr {
							out[i] = x.(int)
						}
						return out
					}
					return v.([]int)
				}(x)
			}
			return out
		}
		return v.([][]int)
	}(edges))
	_ = sorted
	var mst [][]int = [][]int{}
	_ = mst
	var e int = 0
	_ = e
	for e < len(sorted) {
		if len(mst) == (n - 1) {
			break
		}
		var edge []int = _index(sorted, e)
		_ = edge
		e = (e + 1)
		var u int = _index(edge, 0)
		_ = u
		var v int = _index(edge, 1)
		_ = v
		var w int = _index(edge, 2)
		_ = w
		var ru int = find(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(parent), u)
		_ = ru
		var rv int = find(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(parent), v)
		_ = rv
		if ru != rv {
			_setIndex(parent, ru, rv)
			mst = append(mst, []int{func(v any) int {
				if vv, ok := v.(int); ok {
					return vv
				}
				return 0
			}(u), func(v any) int {
				if vv, ok := v.(int); ok {
					return vv
				}
				return 0
			}(v), func(v any) int {
				if vv, ok := v.(int); ok {
					return vv
				}
				return 0
			}(w)})
		}
	}
	return mst
}

func edges_equal(a [][]int, b [][]int) bool {
	if len(a) != len(b) {
		return false
	}
	var i int = 0
	_ = i
	for i < len(a) {
		var e1 []int = _index(a, i)
		_ = e1
		var e2 []int = _index(b, i)
		_ = e2
		if ((_index(e1, 0) != _index(e2, 0)) || (_index(e1, 1) != _index(e2, 1))) || (_index(e1, 2) != _index(e2, 2)) {
			return false
		}
		i = (i + 1)
	}
	return true
}

func mochiMain() {
	var num_nodes int = 9
	_ = num_nodes
	var edges [][]int = [][]int{[]int{0, 1, 4}, []int{0, 7, 8}, []int{1, 2, 8}, []int{7, 8, 7}, []int{7, 6, 1}, []int{2, 8, 2}, []int{8, 6, 6}, []int{2, 3, 7}, []int{2, 5, 4}, []int{6, 5, 2}, []int{3, 5, 14}, []int{3, 4, 9}, []int{5, 4, 10}, []int{1, 7, 11}}
	_ = edges
	var expected [][]int = [][]int{[]int{7, 6, 1}, []int{2, 8, 2}, []int{6, 5, 2}, []int{0, 1, 4}, []int{2, 5, 4}, []int{2, 3, 7}, []int{0, 7, 8}, []int{3, 4, 9}}
	_ = expected
	var result [][]int = kruskal(num_nodes, func(v any) [][]int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]int{}
			}
			out := make([][]int, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []int {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]int); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []int{}
						}
						out := make([]int, len(arr))
						for i, x := range arr {
							out[i] = x.(int)
						}
						return out
					}
					return v.([]int)
				}(x)
			}
			return out
		}
		return v.([][]int)
	}(edges))
	_ = result
	var sorted_result [][]int = sort_edges(func(v any) [][]int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]int{}
			}
			out := make([][]int, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []int {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]int); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []int{}
						}
						out := make([]int, len(arr))
						for i, x := range arr {
							out[i] = x.(int)
						}
						return out
					}
					return v.([]int)
				}(x)
			}
			return out
		}
		return v.([][]int)
	}(result))
	_ = sorted_result
	var sorted_expected [][]int = sort_edges(func(v any) [][]int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]int{}
			}
			out := make([][]int, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []int {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]int); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []int{}
						}
						out := make([]int, len(arr))
						for i, x := range arr {
							out[i] = x.(int)
						}
						return out
					}
					return v.([]int)
				}(x)
			}
			return out
		}
		return v.([][]int)
	}(expected))
	_ = sorted_expected
	fmt.Println(fmt.Sprint(sorted_result))
	if edges_equal(func(v any) [][]int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]int{}
			}
			out := make([][]int, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []int {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]int); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []int{}
						}
						out := make([]int, len(arr))
						for i, x := range arr {
							out[i] = x.(int)
						}
						return out
					}
					return v.([]int)
				}(x)
			}
			return out
		}
		return v.([][]int)
	}(sorted_expected), func(v any) [][]int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]int{}
			}
			out := make([][]int, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []int {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]int); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []int{}
						}
						out := make([]int, len(arr))
						for i, x := range arr {
							out[i] = x.(int)
						}
						return out
					}
					return v.([]int)
				}(x)
			}
			return out
		}
		return v.([][]int)
	}(sorted_result)) {
		fmt.Println(true)
	} else {
		fmt.Println(false)
	}
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
