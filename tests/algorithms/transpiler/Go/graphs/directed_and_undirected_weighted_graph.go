//go:build ignore

// Generated by Mochi v0.10.61 on 2025-08-09 10:25:24 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"sort"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _mod(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

func _toFloat(v any) float64 {
	switch t := v.(type) {
	case int:
		return float64(t)
	case int64:
		return float64(t)
	case float64:
		return t
	default:
		return 0
	}
}

func list_contains_int(xs []int, x int) bool {
	var i int = 0
	_ = i
	for i < len(xs) {
		if int(_index(xs, i)) == x {
			return true
		}
		i = (i + 1)
	}
	return false
}

func edge_exists(edges [][]int, w int, v int) bool {
	var i int = 0
	_ = i
	for i < len(edges) {
		if (int(_index(_index(edges, i), 0)) == w) && (int(_index(_index(edges, i), 1)) == v) {
			return true
		}
		i = (i + 1)
	}
	return false
}

func first_key(m map[int][][]int) int {
	for _, k := range func() []int {
		keys := make([]int, 0, len(m))
		for k := range m {
			keys = append(keys, k)
		}
		sort.Slice(keys, func(i, j int) bool { return fmt.Sprint(keys[i]) < fmt.Sprint(keys[j]) })
		return keys
	}() {
		return k
	}
	return 0
}

func rand_range(low int, high int) int {
	return (_mod(_now(), (high-low)) + low)
}

type DirectedGraph struct {
	Graph map[int][][]int `json:"graph"`
}

func dg_make_graph() DirectedGraph {
	return DirectedGraph{
		Graph: map[int][][]int{},
	}
}

func dg_add_pair(g DirectedGraph, u int, v int, w int) {
	if func() bool { _, ok := g.Graph[u]; return ok }() {
		var edges [][]int = g.Graph[u]
		_ = edges
		if !edge_exists(func(v any) [][]int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]int{}
				}
				out := make([][]int, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []int {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]int); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []int{}
							}
							out := make([]int, len(arr))
							for i, x := range arr {
								out[i] = x.(int)
							}
							return out
						}
						return v.([]int)
					}(x)
				}
				return out
			}
			return v.([][]int)
		}(edges), w, v) {
			edges = append(edges, []int{func(v any) int {
				if vv, ok := v.(int); ok {
					return vv
				}
				return 0
			}(w), func(v any) int {
				if vv, ok := v.(int); ok {
					return vv
				}
				return 0
			}(v)})
			var m map[int][][]int = g.Graph
			_ = m
			m[u] = edges
			g.Graph = m
		}
	} else {
		var m0 map[int][][]int = g.Graph
		_ = m0
		m0[u] = [][]int{[]int{func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(w), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(v)}}
		g.Graph = m0
	}
	if !func() bool { _, ok := g.Graph[v]; return ok }() {
		var m1 map[int][][]int = g.Graph
		_ = m1
		m1[v] = [][]int{}
		g.Graph = m1
	}
}

func dg_remove_pair(g DirectedGraph, u int, v int) {
	if func() bool { _, ok := g.Graph[u]; return ok }() {
		var edges [][]int = g.Graph[u]
		_ = edges
		var new_edges [][]int = [][]int{}
		_ = new_edges
		var i int = 0
		_ = i
		for i < len(edges) {
			if int(_index(_index(edges, i), 1)) != v {
				new_edges = append(new_edges, _index(edges, i))
			}
			i = (i + 1)
		}
		var m map[int][][]int = g.Graph
		_ = m
		m[u] = new_edges
		g.Graph = m
	}
}

func dg_all_nodes(g DirectedGraph) []int {
	var res []int = []int{}
	_ = res
	for _, k := range func() []int {
		keys := make([]int, 0, len(g.Graph))
		for k := range g.Graph {
			keys = append(keys, k)
		}
		sort.Slice(keys, func(i, j int) bool { return fmt.Sprint(keys[i]) < fmt.Sprint(keys[j]) })
		return keys
	}() {
		res = append(res, k)
	}
	return res
}

func dg_dfs_util(g DirectedGraph, node int, visited map[int]bool, order []int, d int) []int {
	visited[node] = true
	order = append(order, node)
	if (d != (0 - 1)) && (node == d) {
		return order
	}
	var edges [][]int = g.Graph[node]
	_ = edges
	var i int = 0
	_ = i
	for i < len(edges) {
		var neigh int = _index(_index(edges, i), 1)
		_ = neigh
		if !func() bool { _, ok := visited[neigh]; return ok }() {
			order = dg_dfs_util(g, neigh, visited, func(v any) []int {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]int); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []int{}
					}
					out := make([]int, len(arr))
					for i, x := range arr {
						out[i] = x.(int)
					}
					return out
				}
				return v.([]int)
			}(order), d)
			if (d != (0 - 1)) && (int(_index(order, (len(order)-1))) == d) {
				return order
			}
		}
		i = (i + 1)
	}
	return order
}

func dg_dfs(g DirectedGraph, s int, d int) []int {
	if s == d {
		return func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}([]int{})
	}
	start := func() int {
		if s == (0 - 2) {
			return first_key(g.Graph)
		} else {
			return s
		}
	}()
	_ = start
	var visited map[int]bool = map[int]bool{}
	_ = visited
	var order []int = []int{}
	_ = order
	order = dg_dfs_util(g, start, visited, func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(order), d)
	return order
}

func dg_bfs(g DirectedGraph, s int) []int {
	var queue []int = []int{}
	_ = queue
	var visited map[int]bool = map[int]bool{}
	_ = visited
	var order []int = []int{}
	_ = order
	start := func() int {
		if s == (0 - 2) {
			return first_key(g.Graph)
		} else {
			return s
		}
	}()
	_ = start
	queue = append(queue, start)
	visited[start] = true
	for len(queue) > 0 {
		var node int = _index(queue, 0)
		_ = node
		queue = queue[1:len(queue)]
		order = append(order, node)
		var edges [][]int = g.Graph[node]
		_ = edges
		var i int = 0
		_ = i
		for i < len(edges) {
			var neigh int = _index(_index(edges, i), 1)
			_ = neigh
			if !func() bool { _, ok := visited[neigh]; return ok }() {
				queue = append(queue, neigh)
				visited[neigh] = true
			}
			i = (i + 1)
		}
	}
	return order
}

func dg_in_degree(g DirectedGraph, u int) int {
	var count int = 0
	_ = count
	for _, k := range func() []int {
		keys := make([]int, 0, len(g.Graph))
		for k := range g.Graph {
			keys = append(keys, k)
		}
		sort.Slice(keys, func(i, j int) bool { return fmt.Sprint(keys[i]) < fmt.Sprint(keys[j]) })
		return keys
	}() {
		var edges [][]int = g.Graph[k]
		_ = edges
		var i int = 0
		_ = i
		for i < len(edges) {
			if int(_index(_index(edges, i), 1)) == u {
				count = (count + 1)
			}
			i = (i + 1)
		}
	}
	return count
}

func dg_out_degree(g DirectedGraph, u int) int {
	if func() bool { _, ok := g.Graph[u]; return ok }() {
		return len(g.Graph[u])
	}
	return 0
}

func dg_topo_util(g DirectedGraph, node int, visited map[int]bool, stack []int) []int {
	visited[node] = true
	var edges [][]int = g.Graph[node]
	_ = edges
	var i int = 0
	_ = i
	for i < len(edges) {
		var neigh int = _index(_index(edges, i), 1)
		_ = neigh
		if !func() bool { _, ok := visited[neigh]; return ok }() {
			stack = dg_topo_util(g, neigh, visited, func(v any) []int {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]int); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []int{}
					}
					out := make([]int, len(arr))
					for i, x := range arr {
						out[i] = x.(int)
					}
					return out
				}
				return v.([]int)
			}(stack))
		}
		i = (i + 1)
	}
	stack = append(stack, node)
	return stack
}

func dg_topological_sort(g DirectedGraph) []int {
	var visited map[int]bool = map[int]bool{}
	_ = visited
	var stack []int = []int{}
	_ = stack
	for _, k := range func() []int {
		keys := make([]int, 0, len(g.Graph))
		for k := range g.Graph {
			keys = append(keys, k)
		}
		sort.Slice(keys, func(i, j int) bool { return fmt.Sprint(keys[i]) < fmt.Sprint(keys[j]) })
		return keys
	}() {
		if !func() bool { _, ok := visited[k]; return ok }() {
			stack = dg_topo_util(g, k, visited, func(v any) []int {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]int); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []int{}
					}
					out := make([]int, len(arr))
					for i, x := range arr {
						out[i] = x.(int)
					}
					return out
				}
				return v.([]int)
			}(stack))
		}
	}
	var res []int = []int{}
	_ = res
	var i int = (len(stack) - 1)
	_ = i
	for i >= 0 {
		res = append(res, _index(stack, i))
		i = (i - 1)
	}
	return res
}

func dg_cycle_util(g DirectedGraph, node int, visited map[int]bool, rec map[int]bool, res []int) []int {
	visited[node] = true
	rec[node] = true
	var edges [][]int = g.Graph[node]
	_ = edges
	var i int = 0
	_ = i
	for i < len(edges) {
		var neigh int = _index(_index(edges, i), 1)
		_ = neigh
		if !func() bool { _, ok := visited[neigh]; return ok }() {
			res = dg_cycle_util(g, neigh, visited, rec, func(v any) []int {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]int); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []int{}
					}
					out := make([]int, len(arr))
					for i, x := range arr {
						out[i] = x.(int)
					}
					return out
				}
				return v.([]int)
			}(res))
		} else {
			if rec[neigh] {
				if !list_contains_int(func(v any) []int {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]int); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []int{}
						}
						out := make([]int, len(arr))
						for i, x := range arr {
							out[i] = x.(int)
						}
						return out
					}
					return v.([]int)
				}(res), neigh) {
					res = append(res, neigh)
				}
				if !list_contains_int(func(v any) []int {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]int); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []int{}
						}
						out := make([]int, len(arr))
						for i, x := range arr {
							out[i] = x.(int)
						}
						return out
					}
					return v.([]int)
				}(res), node) {
					res = append(res, node)
				}
			}
		}
		i = (i + 1)
	}
	rec[node] = false
	return res
}

func dg_cycle_nodes(g DirectedGraph) []int {
	var visited map[int]bool = map[int]bool{}
	_ = visited
	var rec map[int]bool = map[int]bool{}
	_ = rec
	var res []int = []int{}
	_ = res
	for _, k := range func() []int {
		keys := make([]int, 0, len(g.Graph))
		for k := range g.Graph {
			keys = append(keys, k)
		}
		sort.Slice(keys, func(i, j int) bool { return fmt.Sprint(keys[i]) < fmt.Sprint(keys[j]) })
		return keys
	}() {
		if !func() bool { _, ok := visited[k]; return ok }() {
			res = dg_cycle_util(g, k, visited, rec, func(v any) []int {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]int); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []int{}
					}
					out := make([]int, len(arr))
					for i, x := range arr {
						out[i] = x.(int)
					}
					return out
				}
				return v.([]int)
			}(res))
		}
	}
	return res
}

func dg_has_cycle_util(g DirectedGraph, node int, visited map[int]bool, rec map[int]bool) bool {
	visited[node] = true
	rec[node] = true
	var edges [][]int = g.Graph[node]
	_ = edges
	var i int = 0
	_ = i
	for i < len(edges) {
		var neigh int = _index(_index(edges, i), 1)
		_ = neigh
		if !func() bool { _, ok := visited[neigh]; return ok }() {
			if dg_has_cycle_util(g, neigh, visited, rec) {
				return true
			}
		} else {
			if rec[neigh] {
				return true
			}
		}
		i = (i + 1)
	}
	rec[node] = false
	return false
}

func dg_has_cycle(g DirectedGraph) bool {
	var visited map[int]bool = map[int]bool{}
	_ = visited
	var rec map[int]bool = map[int]bool{}
	_ = rec
	for _, k := range func() []int {
		keys := make([]int, 0, len(g.Graph))
		for k := range g.Graph {
			keys = append(keys, k)
		}
		sort.Slice(keys, func(i, j int) bool { return fmt.Sprint(keys[i]) < fmt.Sprint(keys[j]) })
		return keys
	}() {
		if !func() bool { _, ok := visited[k]; return ok }() {
			if dg_has_cycle_util(g, k, visited, rec) {
				return true
			}
		}
	}
	return false
}

func dg_fill_graph_randomly(g DirectedGraph, c int) {
	var count int = c
	_ = count
	if count == (0 - 1) {
		count = rand_range(10, 10010)
	}
	var i int = 0
	_ = i
	for i < count {
		var edge_count int = rand_range(1, 103)
		_ = edge_count
		var j int = 0
		_ = j
		for j < edge_count {
			n := rand_range(0, count)
			_ = n
			if n != i {
				dg_add_pair(g, i, n, 1)
			}
			j = (j + 1)
		}
		i = (i + 1)
	}
}

func dg_dfs_time(g DirectedGraph, s int, e int) int {
	begin := _now()
	_ = begin
	_ = begin
	dg_dfs(g, s, e)
	end := _now()
	_ = end
	_ = end
	return int((_toFloat(end) - _toFloat(begin)))
}

func dg_bfs_time(g DirectedGraph, s int) int {
	begin := _now()
	_ = begin
	_ = begin
	dg_bfs(g, s)
	end := _now()
	_ = end
	_ = end
	return int((_toFloat(end) - _toFloat(begin)))
}

type Graph struct {
	Graph map[int][][]int `json:"graph"`
}

func g_make_graph() Graph {
	return Graph{
		Graph: map[int][][]int{},
	}
}

func g_add_pair(g Graph, u int, v int, w int) {
	if func() bool { _, ok := g.Graph[u]; return ok }() {
		var edges [][]int = g.Graph[u]
		_ = edges
		if !edge_exists(func(v any) [][]int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]int{}
				}
				out := make([][]int, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []int {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]int); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []int{}
							}
							out := make([]int, len(arr))
							for i, x := range arr {
								out[i] = x.(int)
							}
							return out
						}
						return v.([]int)
					}(x)
				}
				return out
			}
			return v.([][]int)
		}(edges), w, v) {
			edges = append(edges, []int{func(v any) int {
				if vv, ok := v.(int); ok {
					return vv
				}
				return 0
			}(w), func(v any) int {
				if vv, ok := v.(int); ok {
					return vv
				}
				return 0
			}(v)})
			var m map[int][][]int = g.Graph
			_ = m
			m[u] = edges
			g.Graph = m
		}
	} else {
		var m0 map[int][][]int = g.Graph
		_ = m0
		m0[u] = [][]int{[]int{func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(w), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(v)}}
		g.Graph = m0
	}
	if func() bool { _, ok := g.Graph[v]; return ok }() {
		var edges2 [][]int = g.Graph[v]
		_ = edges2
		if !edge_exists(func(v any) [][]int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]int{}
				}
				out := make([][]int, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []int {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]int); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []int{}
							}
							out := make([]int, len(arr))
							for i, x := range arr {
								out[i] = x.(int)
							}
							return out
						}
						return v.([]int)
					}(x)
				}
				return out
			}
			return v.([][]int)
		}(edges2), w, u) {
			edges2 = append(edges2, []int{func(v any) int {
				if vv, ok := v.(int); ok {
					return vv
				}
				return 0
			}(w), func(v any) int {
				if vv, ok := v.(int); ok {
					return vv
				}
				return 0
			}(u)})
			var m2 map[int][][]int = g.Graph
			_ = m2
			m2[v] = edges2
			g.Graph = m2
		}
	} else {
		var m3 map[int][][]int = g.Graph
		_ = m3
		m3[v] = [][]int{[]int{func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(w), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(u)}}
		g.Graph = m3
	}
}

func g_remove_pair(g Graph, u int, v int) {
	if func() bool { _, ok := g.Graph[u]; return ok }() {
		var edges [][]int = g.Graph[u]
		_ = edges
		var new_edges [][]int = [][]int{}
		_ = new_edges
		var i int = 0
		_ = i
		for i < len(edges) {
			if int(_index(_index(edges, i), 1)) != v {
				new_edges = append(new_edges, _index(edges, i))
			}
			i = (i + 1)
		}
		var m map[int][][]int = g.Graph
		_ = m
		m[u] = new_edges
		g.Graph = m
	}
	if func() bool { _, ok := g.Graph[v]; return ok }() {
		var edges2 [][]int = g.Graph[v]
		_ = edges2
		var new_edges2 [][]int = [][]int{}
		_ = new_edges2
		var j int = 0
		_ = j
		for j < len(edges2) {
			if int(_index(_index(edges2, j), 1)) != u {
				new_edges2 = append(new_edges2, _index(edges2, j))
			}
			j = (j + 1)
		}
		var m2 map[int][][]int = g.Graph
		_ = m2
		m2[v] = new_edges2
		g.Graph = m2
	}
}

func g_all_nodes(g Graph) []int {
	var res []int = []int{}
	_ = res
	for _, k := range func() []int {
		keys := make([]int, 0, len(g.Graph))
		for k := range g.Graph {
			keys = append(keys, k)
		}
		sort.Slice(keys, func(i, j int) bool { return fmt.Sprint(keys[i]) < fmt.Sprint(keys[j]) })
		return keys
	}() {
		res = append(res, k)
	}
	return res
}

func g_dfs_util(g Graph, node int, visited map[int]bool, order []int, d int) []int {
	visited[node] = true
	order = append(order, node)
	if (d != (0 - 1)) && (node == d) {
		return order
	}
	var edges [][]int = g.Graph[node]
	_ = edges
	var i int = 0
	_ = i
	for i < len(edges) {
		var neigh int = _index(_index(edges, i), 1)
		_ = neigh
		if !func() bool { _, ok := visited[neigh]; return ok }() {
			order = g_dfs_util(g, neigh, visited, func(v any) []int {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]int); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []int{}
					}
					out := make([]int, len(arr))
					for i, x := range arr {
						out[i] = x.(int)
					}
					return out
				}
				return v.([]int)
			}(order), d)
			if (d != (0 - 1)) && (int(_index(order, (len(order)-1))) == d) {
				return order
			}
		}
		i = (i + 1)
	}
	return order
}

func g_dfs(g Graph, s int, d int) []int {
	if s == d {
		return func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}([]int{})
	}
	start := func() int {
		if s == (0 - 2) {
			return first_key(g.Graph)
		} else {
			return s
		}
	}()
	_ = start
	var visited map[int]bool = map[int]bool{}
	_ = visited
	var order []int = []int{}
	_ = order
	order = g_dfs_util(g, start, visited, func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(order), d)
	return order
}

func g_bfs(g Graph, s int) []int {
	var queue []int = []int{}
	_ = queue
	var visited map[int]bool = map[int]bool{}
	_ = visited
	var order []int = []int{}
	_ = order
	start := func() int {
		if s == (0 - 2) {
			return first_key(g.Graph)
		} else {
			return s
		}
	}()
	_ = start
	queue = append(queue, start)
	visited[start] = true
	for len(queue) > 0 {
		var node int = _index(queue, 0)
		_ = node
		queue = queue[1:len(queue)]
		order = append(order, node)
		var edges [][]int = g.Graph[node]
		_ = edges
		var i int = 0
		_ = i
		for i < len(edges) {
			var neigh int = _index(_index(edges, i), 1)
			_ = neigh
			if !func() bool { _, ok := visited[neigh]; return ok }() {
				queue = append(queue, neigh)
				visited[neigh] = true
			}
			i = (i + 1)
		}
	}
	return order
}

func g_degree(g Graph, u int) int {
	if func() bool { _, ok := g.Graph[u]; return ok }() {
		return len(g.Graph[u])
	}
	return 0
}

func g_cycle_util(g Graph, node int, visited map[int]bool, parent int, res []int) []int {
	visited[node] = true
	var edges [][]int = g.Graph[node]
	_ = edges
	var i int = 0
	_ = i
	for i < len(edges) {
		var neigh int = _index(_index(edges, i), 1)
		_ = neigh
		if !func() bool { _, ok := visited[neigh]; return ok }() {
			res = g_cycle_util(g, neigh, visited, node, func(v any) []int {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]int); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []int{}
					}
					out := make([]int, len(arr))
					for i, x := range arr {
						out[i] = x.(int)
					}
					return out
				}
				return v.([]int)
			}(res))
		} else {
			if neigh != parent {
				if !list_contains_int(func(v any) []int {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]int); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []int{}
						}
						out := make([]int, len(arr))
						for i, x := range arr {
							out[i] = x.(int)
						}
						return out
					}
					return v.([]int)
				}(res), neigh) {
					res = append(res, neigh)
				}
				if !list_contains_int(func(v any) []int {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]int); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []int{}
						}
						out := make([]int, len(arr))
						for i, x := range arr {
							out[i] = x.(int)
						}
						return out
					}
					return v.([]int)
				}(res), node) {
					res = append(res, node)
				}
			}
		}
		i = (i + 1)
	}
	return res
}

func g_cycle_nodes(g Graph) []int {
	var visited map[int]bool = map[int]bool{}
	_ = visited
	var res []int = []int{}
	_ = res
	for _, k := range func() []int {
		keys := make([]int, 0, len(g.Graph))
		for k := range g.Graph {
			keys = append(keys, k)
		}
		sort.Slice(keys, func(i, j int) bool { return fmt.Sprint(keys[i]) < fmt.Sprint(keys[j]) })
		return keys
	}() {
		if !func() bool { _, ok := visited[k]; return ok }() {
			res = g_cycle_util(g, k, visited, (0 - 1), func(v any) []int {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]int); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []int{}
					}
					out := make([]int, len(arr))
					for i, x := range arr {
						out[i] = x.(int)
					}
					return out
				}
				return v.([]int)
			}(res))
		}
	}
	return res
}

func g_has_cycle_util(g Graph, node int, visited map[int]bool, parent int) bool {
	visited[node] = true
	var edges [][]int = g.Graph[node]
	_ = edges
	var i int = 0
	_ = i
	for i < len(edges) {
		var neigh int = _index(_index(edges, i), 1)
		_ = neigh
		if !func() bool { _, ok := visited[neigh]; return ok }() {
			if g_has_cycle_util(g, neigh, visited, node) {
				return true
			}
		} else {
			if neigh != parent {
				return true
			}
		}
		i = (i + 1)
	}
	return false
}

func g_has_cycle(g Graph) bool {
	var visited map[int]bool = map[int]bool{}
	_ = visited
	for _, k := range func() []int {
		keys := make([]int, 0, len(g.Graph))
		for k := range g.Graph {
			keys = append(keys, k)
		}
		sort.Slice(keys, func(i, j int) bool { return fmt.Sprint(keys[i]) < fmt.Sprint(keys[j]) })
		return keys
	}() {
		if !func() bool { _, ok := visited[k]; return ok }() {
			if g_has_cycle_util(g, k, visited, (0 - 1)) {
				return true
			}
		}
	}
	return false
}

func g_fill_graph_randomly(g Graph, c int) {
	var count int = c
	_ = count
	if count == (0 - 1) {
		count = rand_range(10, 10010)
	}
	var i int = 0
	_ = i
	for i < count {
		var edge_count int = rand_range(1, 103)
		_ = edge_count
		var j int = 0
		_ = j
		for j < edge_count {
			n := rand_range(0, count)
			_ = n
			if n != i {
				g_add_pair(g, i, n, 1)
			}
			j = (j + 1)
		}
		i = (i + 1)
	}
}

func g_dfs_time(g Graph, s int, e int) int {
	begin := _now()
	_ = begin
	_ = begin
	g_dfs(g, s, e)
	end := _now()
	_ = end
	_ = end
	return int((_toFloat(end) - _toFloat(begin)))
}

func g_bfs_time(g Graph, s int) int {
	begin := _now()
	_ = begin
	_ = begin
	g_bfs(g, s)
	end := _now()
	_ = end
	_ = end
	return int((_toFloat(end) - _toFloat(begin)))
}

func mochiMain() {
	var dg DirectedGraph = dg_make_graph()
	_ = dg
	dg_add_pair(dg, 0, 1, 5)
	dg_add_pair(dg, 0, 2, 3)
	dg_add_pair(dg, 1, 3, 2)
	dg_add_pair(dg, 2, 3, 4)
	fmt.Println(fmt.Sprint(dg_dfs(dg, (0 - 2), (0 - 1))))
	fmt.Println(fmt.Sprint(dg_bfs(dg, (0 - 2))))
	fmt.Println(fmt.Sprint(dg_in_degree(dg, 3)))
	fmt.Println(fmt.Sprint(dg_out_degree(dg, 0)))
	fmt.Println(fmt.Sprint(dg_topological_sort(dg)))
	fmt.Println(fmt.Sprint(dg_has_cycle(dg)))
	var ug Graph = g_make_graph()
	_ = ug
	g_add_pair(ug, 0, 1, 1)
	g_add_pair(ug, 1, 2, 1)
	g_add_pair(ug, 2, 0, 1)
	fmt.Println(fmt.Sprint(g_dfs(ug, (0 - 2), (0 - 1))))
	fmt.Println(fmt.Sprint(g_bfs(ug, (0 - 2))))
	fmt.Println(fmt.Sprint(g_degree(ug, 1)))
	fmt.Println(fmt.Sprint(g_has_cycle(ug)))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
