//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-15 15:32:52 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"sort"
	"strconv"
	"strings"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		return
	}
	s[idx] = v
}

func topological_sort(graph map[int][]int) []int {
	var indegree []int = []int{}
	_ = indegree
	var i int = 0
	_ = i
	for i < len(graph) {
		indegree = append(indegree, 0)
		i = (i + 1)
	}
	for _, edges := range func() [][]int {
		res := make([][]int, 0, len(graph))
		for _, val := range graph {
			res = append(res, val)
		}
		sort.Slice(res, func(i, j int) bool { return fmt.Sprint(res[i]) < fmt.Sprint(res[j]) })
		return res
	}() {
		_ = edges
		var j int = 0
		_ = j
		for j < len(edges) {
			var v int = _index(edges, j)
			_ = v
			_setIndex(indegree, v, (_index(indegree, v) + 1))
			j = (j + 1)
		}
	}
	var queue []int = []int{}
	_ = queue
	i = 0
	for i < len(indegree) {
		if _index(indegree, i) == 0 {
			queue = append(queue, i)
		}
		i = (i + 1)
	}
	var order []int = []int{}
	_ = order
	var head int = 0
	_ = head
	var processed int = 0
	_ = processed
	for head < len(queue) {
		var v int = _index(queue, head)
		_ = v
		head = (head + 1)
		processed = (processed + 1)
		order = append(order, v)
		var neighbors []int = graph[v]
		_ = neighbors
		var k int = 0
		_ = k
		for k < len(neighbors) {
			var nb int = _index(neighbors, k)
			_ = nb
			_setIndex(indegree, nb, (_index(indegree, nb) - 1))
			if _index(indegree, nb) == 0 {
				queue = append(queue, nb)
			}
			k = (k + 1)
		}
	}
	if processed != len(graph) {
		return nil
	}
	return order
}

func mochiMain() {
	var graph map[int][]int = map[int][]int{0: []int{1, 2}, 1: []int{3}, 2: []int{3}, 3: []int{4, 5}, 4: []int{}, 5: []int{}}
	_ = graph
	_ = graph
	fmt.Println(func() string {
		b, _ := json.Marshal(topological_sort(graph))
		s := string(b)
		s = strings.ReplaceAll(s, ":", ": ")
		s = strings.ReplaceAll(s, ",", ", ")
		s = strings.ReplaceAll(s, "}, {", "},{")
		return s
	}())
	var cyclic map[int][]int = map[int][]int{0: []int{1}, 1: []int{2}, 2: []int{0}}
	_ = cyclic
	_ = cyclic
	fmt.Println(func() string {
		b, _ := json.Marshal(topological_sort(cyclic))
		s := string(b)
		s = strings.ReplaceAll(s, ":", ": ")
		s = strings.ReplaceAll(s, ",", ", ")
		s = strings.ReplaceAll(s, "}, {", "},{")
		return s
	}())
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
