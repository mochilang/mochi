//go:build ignore

// Generated by Mochi v0.10.61 on 2025-08-09 10:25:11 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	s[idx] = v
}

type Graph struct {
	Vertex map[int][]int `json:"vertex"`
	Size   int           `json:"size"`
}

func add_edge(g Graph, from_vertex int, to_vertex int) Graph {
	var v map[int][]int = g.Vertex
	_ = v
	if func() bool { _, ok := v[from_vertex]; return ok }() {
		var lst []int = v[from_vertex]
		_ = lst
		lst = append(lst, to_vertex)
		v[from_vertex] = lst
	} else {
		v[from_vertex] = []int{func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(to_vertex)}
	}
	g.Vertex = v
	if (from_vertex + 1) > g.Size {
		g.Size = (from_vertex + 1)
	}
	if (to_vertex + 1) > g.Size {
		g.Size = (to_vertex + 1)
	}
	return g
}

func list_to_string(lst []int) string {
	var res string = ""
	_ = res
	var i int = 0
	_ = i
	for i < len(lst) {
		res = (res + fmt.Sprint(_index(lst, i)))
		if i < (len(lst) - 1) {
			res = (res + " ")
		}
		i = (i + 1)
	}
	return res
}

func list_to_arrow(lst []int) string {
	var res string = ""
	_ = res
	var i int = 0
	_ = i
	for i < len(lst) {
		res = (res + fmt.Sprint(_index(lst, i)))
		if i < (len(lst) - 1) {
			res = (res + " -> ")
		}
		i = (i + 1)
	}
	return res
}

func print_graph(g Graph) {
	fmt.Println(fmt.Sprint(g.Vertex))
	var i int = 0
	_ = i
	for i < g.Size {
		var edges []int = []int{}
		_ = edges
		if func() bool { _, ok := g.Vertex[i]; return ok }() {
			edges = g.Vertex[i]
		}
		var line string = ((fmt.Sprint(i) + "  ->  ") + list_to_arrow(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(edges)))
		_ = line
		fmt.Println(line)
		i = (i + 1)
	}
}

func dfs_recursive(g Graph, start_vertex int, visited []bool, order []int) []int {
	_setIndex(visited, start_vertex, true)
	order = append(order, start_vertex)
	if func() bool { _, ok := g.Vertex[start_vertex]; return ok }() {
		var neighbors []int = g.Vertex[start_vertex]
		_ = neighbors
		var i int = 0
		_ = i
		for i < len(neighbors) {
			var nb int = _index(neighbors, i)
			_ = nb
			if !_index(visited, nb) {
				order = dfs_recursive(g, nb, func(v any) []bool {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]bool); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []bool{}
						}
						out := make([]bool, len(arr))
						for i, x := range arr {
							out[i] = x.(bool)
						}
						return out
					}
					return v.([]bool)
				}(visited), func(v any) []int {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]int); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []int{}
						}
						out := make([]int, len(arr))
						for i, x := range arr {
							out[i] = x.(int)
						}
						return out
					}
					return v.([]int)
				}(order))
			}
			i = (i + 1)
		}
	}
	return order
}

func dfs(g Graph) []int {
	var n int = g.Size
	_ = n
	var visited []bool = []bool{}
	_ = visited
	var i int = 0
	_ = i
	for i < n {
		visited = append(visited, false)
		i = (i + 1)
	}
	var order []int = []int{}
	_ = order
	i = 0
	for i < n {
		if !_index(visited, i) {
			order = dfs_recursive(g, i, func(v any) []bool {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]bool); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []bool{}
					}
					out := make([]bool, len(arr))
					for i, x := range arr {
						out[i] = x.(bool)
					}
					return out
				}
				return v.([]bool)
			}(visited), func(v any) []int {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]int); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []int{}
					}
					out := make([]int, len(arr))
					for i, x := range arr {
						out[i] = x.(int)
					}
					return out
				}
				return v.([]int)
			}(order))
		}
		i = (i + 1)
	}
	return order
}

var g Graph

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		g = Graph{
			Vertex: map[int][]int{},
			Size:   0,
		}
		g = add_edge(g, 0, 1)
		g = add_edge(g, 0, 2)
		g = add_edge(g, 1, 2)
		g = add_edge(g, 2, 0)
		g = add_edge(g, 2, 3)
		g = add_edge(g, 3, 3)
		print_graph(g)
		fmt.Println("DFS:")
		fmt.Println(list_to_string(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(dfs(g))))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
