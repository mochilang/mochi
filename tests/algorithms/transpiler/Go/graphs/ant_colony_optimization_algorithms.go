//go:build ignore

// Generated by Mochi v0.10.61 on 2025-08-09 10:24:39 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"sort"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _mod(a, b int) int {
	if b == 0 {
		return 0
	}
	r := a % b
	if (r < 0 && b > 0) || (r > 0 && b < 0) {
		r += b
	}
	return r
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	s[idx] = v
}

func _toFloat(v any) float64 {
	switch t := v.(type) {
	case int:
		return float64(t)
	case int64:
		return float64(t)
	case float64:
		return t
	default:
		return 0
	}
}

func sqrtApprox(x float64) float64 {
	var guess float64 = (float64(x) / float64(2.0))
	_ = guess
	var i int = 0
	_ = i
	for i < 20 {
		guess = (float64((guess + (float64(x) / float64(guess)))) / float64(2.0))
		i = (i + 1)
	}
	return guess
}

func rand_float() float64 {
	return (float64(float64(_mod(_now(), 1000000))) / float64(1000000.0))
}

func pow_float(base float64, exp float64) float64 {
	var result float64 = 1.0
	_ = result
	var i int = 0
	_ = i
	var e int = int(exp)
	_ = e
	for i < e {
		result = (result * base)
		i = (i + 1)
	}
	return result
}

func distance(city1 []int, city2 []int) float64 {
	var dx float64 = float64((int(_index(city1, 0)) - int(_index(city2, 0))))
	_ = dx
	_ = dx
	var dy float64 = float64((int(_index(city1, 1)) - int(_index(city2, 1))))
	_ = dy
	_ = dy
	return sqrtApprox(((dx * dx) + (dy * dy)))
}

func choose_weighted(options []int, weights []float64) int {
	var total float64 = 0.0
	_ = total
	var i int = 0
	_ = i
	for i < len(weights) {
		total = (total + _index(weights, i))
		i = (i + 1)
	}
	r := (rand_float() * total)
	_ = r
	var accum float64 = 0.0
	_ = accum
	i = 0
	for i < len(weights) {
		accum = (accum + _index(weights, i))
		if _toFloat(r) <= accum {
			return _index(options, i)
		}
		i = (i + 1)
	}
	return _index(options, (len(options) - 1))
}

func city_select(pheromone [][]float64, current int, unvisited []int, alpha float64, beta float64, cities map[int][]int) int {
	var probs []float64 = []float64{}
	_ = probs
	var i int = 0
	_ = i
	for i < len(unvisited) {
		var city int = _index(unvisited, i)
		_ = city
		dist := distance(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(cities[city]), func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(cities[current]))
		_ = dist
		var trail float64 = _index(_index(pheromone, city), current)
		_ = trail
		prob := (pow_float(trail, alpha) * pow_float(float64((float64(1.0)/float64(_toFloat(dist)))), beta))
		_ = prob
		probs = append(probs, prob)
		i = (i + 1)
	}
	return choose_weighted(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(unvisited), func(v any) []float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []float64{}
			}
			out := make([]float64, len(arr))
			for i, x := range arr {
				out[i] = x.(float64)
			}
			return out
		}
		return v.([]float64)
	}(probs))
}

func pheromone_update(pheromone [][]float64, cities map[int][]int, evaporation float64, ants_route [][]int, q float64) [][]float64 {
	n := len(pheromone)
	_ = n
	var i int = 0
	_ = i
	for i < n {
		var j int = 0
		_ = j
		for j < n {
			_setIndex(_index(pheromone, i), j, (_index(_index(pheromone, i), j) * evaporation))
			j = (j + 1)
		}
		i = (i + 1)
	}
	var a int = 0
	_ = a
	for a < len(ants_route) {
		var route []int = _index(ants_route, a)
		_ = route
		var total float64 = 0.0
		_ = total
		var r int = 0
		_ = r
		for r < (len(route) - 1) {
			total = (total + distance(func(v any) []int {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]int); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []int{}
					}
					out := make([]int, len(arr))
					for i, x := range arr {
						out[i] = x.(int)
					}
					return out
				}
				return v.([]int)
			}(cities[_index(route, r)]), func(v any) []int {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]int); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []int{}
					}
					out := make([]int, len(arr))
					for i, x := range arr {
						out[i] = x.(int)
					}
					return out
				}
				return v.([]int)
			}(cities[_index(route, (r+1))])))
			r = (r + 1)
		}
		var delta float64 = (float64(q) / float64(total))
		_ = delta
		r = 0
		for r < (len(route) - 1) {
			var u int = _index(route, r)
			_ = u
			var v int = _index(route, (r + 1))
			_ = v
			_setIndex(_index(pheromone, u), v, (_index(_index(pheromone, u), v) + delta))
			_setIndex(_index(pheromone, v), u, _index(_index(pheromone, u), v))
			r = (r + 1)
		}
		a = (a + 1)
	}
	return pheromone
}

func remove_value(lst []int, val int) []int {
	var res []int = []int{}
	_ = res
	var i int = 0
	_ = i
	for i < len(lst) {
		if int(_index(lst, i)) != val {
			res = append(res, _index(lst, i))
		}
		i = (i + 1)
	}
	return res
}

func ant_colony(cities map[int][]int, ants_num int, iterations int, evaporation float64, alpha float64, beta float64, q float64) {
	n := len(cities)
	_ = n
	var pheromone [][]float64 = [][]float64{}
	_ = pheromone
	var i int = 0
	_ = i
	for i < n {
		var row []float64 = []float64{}
		_ = row
		var j int = 0
		_ = j
		for j < n {
			row = append(row, 1.0)
			j = (j + 1)
		}
		pheromone = append(pheromone, row)
		i = (i + 1)
	}
	var best_path []int = []int{}
	_ = best_path
	var best_distance float64 = 1000000000.0
	_ = best_distance
	var iter int = 0
	_ = iter
	for iter < iterations {
		var ants_route [][]int = [][]int{}
		_ = ants_route
		var k int = 0
		_ = k
		for k < ants_num {
			var route []int = []int{func(v any) int {
				if vv, ok := v.(int); ok {
					return vv
				}
				return 0
			}(0)}
			_ = route
			var unvisited []int = []int{}
			_ = unvisited
			for _, key := range func() []int {
				keys := make([]int, 0, len(cities))
				for k := range cities {
					keys = append(keys, k)
				}
				sort.Slice(keys, func(i, j int) bool { return fmt.Sprint(keys[i]) < fmt.Sprint(keys[j]) })
				return keys
			}() {
				if key != 0 {
					unvisited = append(unvisited, key)
				}
			}
			var current int = 0
			_ = current
			for len(unvisited) > 0 {
				next_city := city_select(func(v any) [][]float64 {
					if v == nil {
						return nil
					}
					if vv, ok := v.([][]float64); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return [][]float64{}
						}
						out := make([][]float64, len(arr))
						for i, x := range arr {
							out[i] = func(v any) []float64 {
								if v == nil {
									return nil
								}
								if vv, ok := v.([]float64); ok {
									return vv
								}
								if arr, ok := v.([]any); ok {
									if len(arr) == 0 {
										return []float64{}
									}
									out := make([]float64, len(arr))
									for i, x := range arr {
										out[i] = x.(float64)
									}
									return out
								}
								return v.([]float64)
							}(x)
						}
						return out
					}
					return v.([][]float64)
				}(pheromone), current, func(v any) []int {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]int); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []int{}
						}
						out := make([]int, len(arr))
						for i, x := range arr {
							out[i] = x.(int)
						}
						return out
					}
					return v.([]int)
				}(unvisited), alpha, beta, cities)
				_ = next_city
				route = append(route, next_city)
				unvisited = remove_value(func(v any) []int {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]int); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []int{}
						}
						out := make([]int, len(arr))
						for i, x := range arr {
							out[i] = x.(int)
						}
						return out
					}
					return v.([]int)
				}(unvisited), next_city)
				current = next_city
			}
			route = append(route, 0)
			ants_route = append(ants_route, route)
			k = (k + 1)
		}
		pheromone = pheromone_update(func(v any) [][]float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]float64{}
				}
				out := make([][]float64, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []float64 {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]float64); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []float64{}
							}
							out := make([]float64, len(arr))
							for i, x := range arr {
								out[i] = x.(float64)
							}
							return out
						}
						return v.([]float64)
					}(x)
				}
				return out
			}
			return v.([][]float64)
		}(pheromone), cities, evaporation, func(v any) [][]int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]int{}
				}
				out := make([][]int, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []int {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]int); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []int{}
							}
							out := make([]int, len(arr))
							for i, x := range arr {
								out[i] = x.(int)
							}
							return out
						}
						return v.([]int)
					}(x)
				}
				return out
			}
			return v.([][]int)
		}(ants_route), q)
		var a int = 0
		_ = a
		for a < len(ants_route) {
			var route []int = _index(ants_route, a)
			_ = route
			var dist float64 = 0.0
			_ = dist
			var r int = 0
			_ = r
			for r < (len(route) - 1) {
				dist = (dist + distance(func(v any) []int {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]int); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []int{}
						}
						out := make([]int, len(arr))
						for i, x := range arr {
							out[i] = x.(int)
						}
						return out
					}
					return v.([]int)
				}(cities[_index(route, r)]), func(v any) []int {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]int); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []int{}
						}
						out := make([]int, len(arr))
						for i, x := range arr {
							out[i] = x.(int)
						}
						return out
					}
					return v.([]int)
				}(cities[_index(route, (r+1))])))
				r = (r + 1)
			}
			if dist < best_distance {
				best_distance = dist
				best_path = route
			}
			a = (a + 1)
		}
		iter = (iter + 1)
	}
	fmt.Println(("best_path = " + fmt.Sprint(best_path)))
	fmt.Println(("best_distance = " + fmt.Sprint(best_distance)))
}

var cities map[int][]int

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		cities = map[int][]int{0: []int{func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(0), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(0)}, 1: []int{func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(0), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(5)}, 2: []int{func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(3), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(8)}, 3: []int{func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(8), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(10)}, 4: []int{func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(12), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(8)}, 5: []int{func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(12), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(4)}, 6: []int{func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(8), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(0)}, 7: []int{func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(6), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(2)}}
		ant_colony(cities, 10, 20, 0.7, 1.0, 5.0, 10.0)
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
