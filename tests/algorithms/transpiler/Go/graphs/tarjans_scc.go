//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-15 21:31:24 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		return
	}
	s[idx] = v
}

func tarjan(g [][]int) [][]int {
	var n int = len(g)
	_ = n
	var stack []int = []int{}
	_ = stack
	_ = stack
	var on_stack []bool = []bool{}
	_ = on_stack
	var index_of []int = []int{}
	_ = index_of
	var lowlink_of []int = []int{}
	_ = lowlink_of
	var i int = 0
	_ = i
	for i < n {
		on_stack = append(on_stack, false)
		index_of = append(index_of, (0 - 1))
		lowlink_of = append(lowlink_of, (0 - 1))
		i = (i + 1)
	}
	var components [][]int = [][]int{}
	_ = components
	_ = components
	var strong_connect func(int, int) int
	_ = strong_connect
	strong_connect = func(v int, index int) int {
		_setIndex(index_of, v, index)
		_setIndex(lowlink_of, v, index)
		var current_index int = (index + 1)
		_ = current_index
		stack = append(stack, v)
		_setIndex(on_stack, v, true)
		for _, w := range _index(g, v) {
			_ = w
			if _index(index_of, w) == (0 - 1) {
				current_index = strong_connect(w, current_index)
				if _index(lowlink_of, w) < _index(lowlink_of, v) {
					_setIndex(lowlink_of, v, _index(lowlink_of, w))
				}
			} else {
				if _index(on_stack, w) {
					if _index(lowlink_of, w) < _index(lowlink_of, v) {
						_setIndex(lowlink_of, v, _index(lowlink_of, w))
					}
				}
			}
		}
		if _index(lowlink_of, v) == _index(index_of, v) {
			var component []int = []int{}
			_ = component
			var w int = _index(stack, (len(stack) - 1))
			_ = w
			stack = stack[0:(len(stack) - 1)]
			_setIndex(on_stack, w, false)
			component = append(component, w)
			for w != v {
				w = _index(stack, (len(stack) - 1))
				stack = stack[0:(len(stack) - 1)]
				_setIndex(on_stack, w, false)
				component = append(component, w)
			}
			components = append(components, component)
		}
		return current_index
	}
	var v int = 0
	_ = v
	for v < n {
		if _index(index_of, v) == (0 - 1) {
			strong_connect(v, 0)
		}
		v = (v + 1)
	}
	return components
}

func create_graph(n int, edges [][]int) [][]int {
	var g [][]int = [][]int{}
	_ = g
	var i int = 0
	_ = i
	for i < n {
		g = append(g, []int{})
		i = (i + 1)
	}
	for _, e := range edges {
		_ = e
		var u int = _index(e, 0)
		_ = u
		var v int = _index(e, 1)
		_ = v
		_setIndex(g, u, append(_index(g, u), v))
	}
	return g
}

func mochiMain() {
	var n_vertices int = 7
	_ = n_vertices
	var source []int = []int{0, 0, 1, 2, 3, 3, 4, 4, 6}
	_ = source
	var target []int = []int{1, 3, 2, 0, 1, 4, 5, 6, 5}
	_ = target
	var edges [][]int = [][]int{}
	_ = edges
	var i int = 0
	_ = i
	for i < len(source) {
		edges = append(edges, []int{func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(_index(source, i)), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(_index(target, i))})
		i = (i + 1)
	}
	var g [][]int = create_graph(n_vertices, func(v any) [][]int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]int{}
			}
			out := make([][]int, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []int {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]int); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []int{}
						}
						out := make([]int, len(arr))
						for i, x := range arr {
							out[i] = x.(int)
						}
						return out
					}
					return v.([]int)
				}(x)
			}
			return out
		}
		return v.([][]int)
	}(edges))
	_ = g
	fmt.Println(fmt.Sprint(tarjan(func(v any) [][]int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]int{}
			}
			out := make([][]int, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []int {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]int); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []int{}
						}
						out := make([]int, len(arr))
						for i, x := range arr {
							out[i] = x.(int)
						}
						return out
					}
					return v.([]int)
				}(x)
			}
			return out
		}
		return v.([][]int)
	}(g))))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
