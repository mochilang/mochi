//go:build ignore

// Generated by Mochi v0.10.65 on 2025-08-14 10:13:30 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	s[idx] = v
}

type Edge struct {
	Src    int `json:"src"`
	Dst    int `json:"dst"`
	Weight int `json:"weight"`
}

var INF float64

func list_to_string(arr []float64) string {
	var s string = "["
	_ = s
	var i int = 0
	_ = i
	for i < len(arr) {
		s = (s + fmt.Sprint(_index(arr, i)))
		if i < (len(arr) - 1) {
			s = (s + ", ")
		}
		i = (i + 1)
	}
	return (s + "]")
}

func check_negative_cycle(graph []Edge, distance []float64, edge_count int) bool {
	var j int = 0
	_ = j
	for j < edge_count {
		var e Edge = _index(graph, j)
		_ = e
		var u int = e.Src
		_ = u
		var v int = e.Dst
		_ = v
		var w float64 = float64(e.Weight)
		_ = w
		if (_index(distance, u) < INF) && ((_index(distance, u) + w) < _index(distance, v)) {
			return true
		}
		j = (j + 1)
	}
	return false
}

func bellman_ford(graph []Edge, vertex_count int, edge_count int, src int) []float64 {
	var distance []float64 = []float64{}
	_ = distance
	var i int = 0
	_ = i
	for i < vertex_count {
		distance = append(distance, INF)
		i = (i + 1)
	}
	_setIndex(distance, src, 0.0)
	var k int = 0
	_ = k
	for k < (vertex_count - 1) {
		var j int = 0
		_ = j
		for j < edge_count {
			var e Edge = _index(graph, j)
			_ = e
			var u int = e.Src
			_ = u
			var v int = e.Dst
			_ = v
			var w float64 = float64(e.Weight)
			_ = w
			if (_index(distance, u) < INF) && ((_index(distance, u) + w) < _index(distance, v)) {
				_setIndex(distance, v, (_index(distance, u) + w))
			}
			j = (j + 1)
		}
		k = (k + 1)
	}
	if check_negative_cycle(func(v any) []Edge {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]Edge); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []Edge{}
			}
			out := make([]Edge, len(arr))
			for i, x := range arr {
				out[i] = x.(Edge)
			}
			return out
		}
		return v.([]Edge)
	}(graph), func(v any) []float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []float64{}
			}
			out := make([]float64, len(arr))
			for i, x := range arr {
				out[i] = x.(float64)
			}
			return out
		}
		return v.([]float64)
	}(distance), edge_count) {
		panic("Negative cycle found")
	}
	return distance
}

var edges []Edge

var distances []float64

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		INF = 1000000000.0
		edges = []Edge{Edge{
			Src:    2,
			Dst:    1,
			Weight: (0 - 10),
		}, Edge{
			Src:    3,
			Dst:    2,
			Weight: 3,
		}, Edge{
			Src:    0,
			Dst:    3,
			Weight: 5,
		}, Edge{
			Src:    0,
			Dst:    1,
			Weight: 4,
		}}
		distances = bellman_ford(func(v any) []Edge {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]Edge); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []Edge{}
				}
				out := make([]Edge, len(arr))
				for i, x := range arr {
					out[i] = x.(Edge)
				}
				return out
			}
			return v.([]Edge)
		}(edges), 4, len(edges), 0)
		fmt.Println(list_to_string(func(v any) []float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []float64{}
				}
				out := make([]float64, len(arr))
				for i, x := range arr {
					out[i] = x.(float64)
				}
				return out
			}
			return v.([]float64)
		}(distances)))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
