//go:build ignore

// Generated by Mochi v0.10.61 on 2025-08-09 10:25:39 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"reflect"
	"runtime"
	"sort"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	s[idx] = v
}

type Graph struct {
	Directed      bool        `json:"directed"`
	VertexToIndex map[int]int `json:"vertex_to_index"`
	AdjMatrix     [][]int     `json:"adj_matrix"`
}

func make_graph(vertices []int, edges [][]int, directed bool) Graph {
	var g Graph = Graph{
		Directed:      directed,
		VertexToIndex: map[int]int{},
		AdjMatrix:     [][]int{},
	}
	_ = g
	var i int = 0
	_ = i
	for i < len(vertices) {
		add_vertex(g, _index(vertices, i))
		i = (i + 1)
	}
	var j int = 0
	_ = j
	for j < len(edges) {
		var e []int = _index(edges, j)
		_ = e
		add_edge(g, _index(e, 0), _index(e, 1))
		j = (j + 1)
	}
	return g
}

func contains_vertex(g Graph, v int) bool {
	return func() bool { _, ok := g.VertexToIndex[v]; return ok }()
}

func add_vertex(g Graph, v int) {
	if contains_vertex(g, v) {
		panic("vertex already exists")
	}
	var matrix [][]int = g.AdjMatrix
	_ = matrix
	var i int = 0
	_ = i
	for i < len(matrix) {
		_setIndex(matrix, i, append(_index(matrix, i), 0))
		i = (i + 1)
	}
	var row []int = []int{}
	_ = row
	var j int = 0
	_ = j
	for j < (len(matrix) + 1) {
		row = append(row, 0)
		j = (j + 1)
	}
	matrix = append(matrix, row)
	g.AdjMatrix = matrix
	var idx_map map[int]int = g.VertexToIndex
	_ = idx_map
	idx_map[v] = (len(matrix) - 1)
	g.VertexToIndex = idx_map
}

func remove_key(m map[int]int, k int) map[int]int {
	var out map[int]int = map[int]int{}
	_ = out
	for _, key := range func() []int {
		keys := make([]int, 0, len(m))
		for k := range m {
			keys = append(keys, k)
		}
		sort.Slice(keys, func(i, j int) bool { return fmt.Sprint(keys[i]) < fmt.Sprint(keys[j]) })
		return keys
	}() {
		if key != k {
			out[key] = m[key]
		}
	}
	return out
}

func decrement_indices(m map[int]int, start int) map[int]int {
	var out map[int]int = map[int]int{}
	_ = out
	for _, key := range func() []int {
		keys := make([]int, 0, len(m))
		for k := range m {
			keys = append(keys, k)
		}
		sort.Slice(keys, func(i, j int) bool { return fmt.Sprint(keys[i]) < fmt.Sprint(keys[j]) })
		return keys
	}() {
		var idx int = m[key]
		_ = idx
		if idx > start {
			out[key] = (idx - 1)
		} else {
			out[key] = idx
		}
	}
	return out
}

func remove_vertex(g Graph, v int) {
	if !contains_vertex(g, v) {
		panic("vertex does not exist")
	}
	idx := _index(func(v any) []any {
		if v == nil {
			return nil
		}
		if arr, ok := v.([]any); ok {
			return arr
		}
		rv := reflect.ValueOf(v)
		if rv.Kind() != reflect.Slice {
			return v.([]any)
		}
		n := rv.Len()
		out := make([]any, n)
		for i := 0; i < n; i++ {
			out[i] = rv.Index(i).Interface()
		}
		return out
	}(g.VertexToIndex), v)
	_ = idx
	var new_matrix [][]int = [][]int{}
	_ = new_matrix
	var i int = 0
	_ = i
	for i < len(g.AdjMatrix) {
		if i != idx {
			var row []int = _index(g.AdjMatrix, i)
			_ = row
			var new_row []int = []int{}
			_ = new_row
			var j int = 0
			_ = j
			for j < len(row) {
				if j != idx {
					new_row = append(new_row, _index(row, j))
				}
				j = (j + 1)
			}
			new_matrix = append(new_matrix, new_row)
		}
		i = (i + 1)
	}
	g.AdjMatrix = new_matrix
	var m map[int]int = remove_key(g.VertexToIndex, v)
	_ = m
	g.VertexToIndex = decrement_indices(m, idx)
}

func add_edge(g Graph, u int, v int) {
	if !(contains_vertex(g, u) && contains_vertex(g, v)) {
		panic("missing vertex")
	}
	i := _index(func(v any) []any {
		if v == nil {
			return nil
		}
		if arr, ok := v.([]any); ok {
			return arr
		}
		rv := reflect.ValueOf(v)
		if rv.Kind() != reflect.Slice {
			return v.([]any)
		}
		n := rv.Len()
		out := make([]any, n)
		for i := 0; i < n; i++ {
			out[i] = rv.Index(i).Interface()
		}
		return out
	}(g.VertexToIndex), u)
	_ = i
	j := _index(func(v any) []any {
		if v == nil {
			return nil
		}
		if arr, ok := v.([]any); ok {
			return arr
		}
		rv := reflect.ValueOf(v)
		if rv.Kind() != reflect.Slice {
			return v.([]any)
		}
		n := rv.Len()
		out := make([]any, n)
		for i := 0; i < n; i++ {
			out[i] = rv.Index(i).Interface()
		}
		return out
	}(g.VertexToIndex), v)
	_ = j
	var matrix [][]int = g.AdjMatrix
	_ = matrix
	_setIndex(_index(matrix, i), j, 1)
	if !g.Directed {
		_setIndex(_index(matrix, j), i, 1)
	}
	g.AdjMatrix = matrix
}

func remove_edge(g Graph, u int, v int) {
	if !(contains_vertex(g, u) && contains_vertex(g, v)) {
		panic("missing vertex")
	}
	i := _index(func(v any) []any {
		if v == nil {
			return nil
		}
		if arr, ok := v.([]any); ok {
			return arr
		}
		rv := reflect.ValueOf(v)
		if rv.Kind() != reflect.Slice {
			return v.([]any)
		}
		n := rv.Len()
		out := make([]any, n)
		for i := 0; i < n; i++ {
			out[i] = rv.Index(i).Interface()
		}
		return out
	}(g.VertexToIndex), u)
	_ = i
	j := _index(func(v any) []any {
		if v == nil {
			return nil
		}
		if arr, ok := v.([]any); ok {
			return arr
		}
		rv := reflect.ValueOf(v)
		if rv.Kind() != reflect.Slice {
			return v.([]any)
		}
		n := rv.Len()
		out := make([]any, n)
		for i := 0; i < n; i++ {
			out[i] = rv.Index(i).Interface()
		}
		return out
	}(g.VertexToIndex), v)
	_ = j
	var matrix [][]int = g.AdjMatrix
	_ = matrix
	_setIndex(_index(matrix, i), j, 0)
	if !g.Directed {
		_setIndex(_index(matrix, j), i, 0)
	}
	g.AdjMatrix = matrix
}

func contains_edge(g Graph, u int, v int) bool {
	if !(contains_vertex(g, u) && contains_vertex(g, v)) {
		panic("missing vertex")
	}
	i := _index(func(v any) []any {
		if v == nil {
			return nil
		}
		if arr, ok := v.([]any); ok {
			return arr
		}
		rv := reflect.ValueOf(v)
		if rv.Kind() != reflect.Slice {
			return v.([]any)
		}
		n := rv.Len()
		out := make([]any, n)
		for i := 0; i < n; i++ {
			out[i] = rv.Index(i).Interface()
		}
		return out
	}(g.VertexToIndex), u)
	_ = i
	_ = i
	j := _index(func(v any) []any {
		if v == nil {
			return nil
		}
		if arr, ok := v.([]any); ok {
			return arr
		}
		rv := reflect.ValueOf(v)
		if rv.Kind() != reflect.Slice {
			return v.([]any)
		}
		n := rv.Len()
		out := make([]any, n)
		for i := 0; i < n; i++ {
			out[i] = rv.Index(i).Interface()
		}
		return out
	}(g.VertexToIndex), v)
	_ = j
	_ = j
	var matrix [][]int = g.AdjMatrix
	_ = matrix
	_ = matrix
	return (int(_index(_index(matrix, i), j)) == 1)
}

func clear_graph(g Graph) {
	g.VertexToIndex = map[any]any{}
	g.AdjMatrix = []any{}
}

var g Graph

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		g = make_graph(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}([]int{func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(1), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(2), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(3)}), func(v any) [][]int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]int{}
				}
				out := make([][]int, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []int {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]int); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []int{}
							}
							out := make([]int, len(arr))
							for i, x := range arr {
								out[i] = x.(int)
							}
							return out
						}
						return v.([]int)
					}(x)
				}
				return out
			}
			return v.([][]int)
		}([][]int{[]int{func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(1), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(2)}, []int{func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(2), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(3)}}), false)
		fmt.Println(fmt.Sprint(g.AdjMatrix))
		fmt.Println(fmt.Sprint(contains_edge(g, 1, 2)))
		fmt.Println(fmt.Sprint(contains_edge(g, 2, 1)))
		remove_edge(g, 1, 2)
		fmt.Println(fmt.Sprint(contains_edge(g, 1, 2)))
		remove_vertex(g, 2)
		fmt.Println(fmt.Sprint(g.AdjMatrix))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
