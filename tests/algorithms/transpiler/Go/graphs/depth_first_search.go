//go:build ignore

// Generated by Mochi v0.10.61 on 2025-08-09 10:25:09 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"strings"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _slice[T any](s []T, start, end int) []T {
	if start < 0 {
		start = 0
	}
	if end > len(s) {
		end = len(s)
	}
	if start > len(s) {
		start = len(s)
	}
	if end < start {
		end = start
	}
	return s[start:end]
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

func contains(lst []string, v string) bool {
	var i int = 0
	_ = i
	for i < len(lst) {
		if _index(lst, i) == v {
			return true
		}
		i = (i + 1)
	}
	return false
}

func depth_first_search(graph map[string][]string, start string) []string {
	var explored []string = []string{}
	_ = explored
	var stack []string = []string{}
	_ = stack
	stack = append(stack, start)
	explored = append(explored, start)
	for len(stack) > 0 {
		idx := (len(stack) - 1)
		_ = idx
		var v string = _index(stack, idx)
		_ = v
		stack = _slice(stack, 0, idx)
		var neighbors []string = graph[v]
		_ = neighbors
		var i int = (len(neighbors) - 1)
		_ = i
		for i >= 0 {
			var adj string = _index(neighbors, i)
			_ = adj
			if !contains(explored, adj) {
				explored = append(explored, adj)
				stack = append(stack, adj)
			}
			i = (i - 1)
		}
	}
	return explored
}

var G map[string][]string

var result []string

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		G = map[string][]string{"A": []string{"B", "C", "D"}, "B": []string{"A", "D", "E"}, "C": []string{"A", "F"}, "D": []string{"B", "D"}, "E": []string{"B", "F"}, "F": []string{"C", "E", "G"}, "G": []string{"F"}}
		result = depth_first_search(G, "A")
		fmt.Println(func() string {
			b, _ := json.Marshal(result)
			s := string(b)
			s = strings.ReplaceAll(s, ":", ": ")
			s = strings.ReplaceAll(s, ",", ", ")
			s = strings.ReplaceAll(s, "}, {", "},{")
			return s
		}())
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
