//go:build ignore

// Generated by Mochi v0.10.65 on 2025-08-14 16:30:40 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"sort"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

type Graph struct {
	Adj      map[string][]string `json:"adj"`
	Directed bool                `json:"directed"`
}

func create_graph(vertices []string, edges [][]string, directed bool) Graph {
	var adj map[string][]string = map[string][]string{}
	_ = adj
	for _, v := range vertices {
		adj[v] = []string{}
	}
	for _, e := range edges {
		var s string = _index(e, 0)
		_ = s
		var d string = _index(e, 1)
		_ = d
		if !func() bool { _, ok := adj[s]; return ok }() {
			adj[s] = []string{}
		}
		if !func() bool { _, ok := adj[d]; return ok }() {
			adj[d] = []string{}
		}
		adj[s] = append(adj[s], d)
		if !directed {
			adj[d] = append(adj[d], s)
		}
	}
	return Graph{
		Adj:      adj,
		Directed: directed,
	}
}

func add_vertex(graph Graph, v string) Graph {
	if func() bool { _, ok := graph.Adj[v]; return ok }() {
		panic("vertex exists")
	}
	var adj map[string][]string = map[string][]string{}
	_ = adj
	for _, k := range func() []string {
		keys := make([]string, 0, len(graph.Adj))
		for k := range graph.Adj {
			keys = append(keys, k)
		}
		sort.Slice(keys, func(i, j int) bool { return fmt.Sprint(keys[i]) < fmt.Sprint(keys[j]) })
		return keys
	}() {
		adj[k] = graph.Adj[k]
	}
	adj[v] = []string{}
	return Graph{
		Adj:      adj,
		Directed: graph.Directed,
	}
}

func remove_from_list(lst []string, value string) []string {
	var res []string = []string{}
	_ = res
	var i int = 0
	_ = i
	for i < len(lst) {
		if _index(lst, i) != value {
			res = append(res, _index(lst, i))
		}
		i = (i + 1)
	}
	return res
}

func remove_key(m map[string][]string, key string) map[string][]string {
	var res map[string][]string = map[string][]string{}
	_ = res
	for _, k := range func() []string {
		keys := make([]string, 0, len(m))
		for k := range m {
			keys = append(keys, k)
		}
		sort.Slice(keys, func(i, j int) bool { return fmt.Sprint(keys[i]) < fmt.Sprint(keys[j]) })
		return keys
	}() {
		if k != key {
			res[k] = m[k]
		}
	}
	return res
}

func add_edge(graph Graph, s string, d string) Graph {
	if !func() bool { _, ok := graph.Adj[s]; return ok }() || !func() bool { _, ok := graph.Adj[d]; return ok }() {
		panic("vertex missing")
	}
	if contains_edge(graph, s, d) {
		panic("edge exists")
	}
	var adj map[string][]string = map[string][]string{}
	_ = adj
	for _, k := range func() []string {
		keys := make([]string, 0, len(graph.Adj))
		for k := range graph.Adj {
			keys = append(keys, k)
		}
		sort.Slice(keys, func(i, j int) bool { return fmt.Sprint(keys[i]) < fmt.Sprint(keys[j]) })
		return keys
	}() {
		adj[k] = graph.Adj[k]
	}
	var list_s []string = adj[s]
	_ = list_s
	list_s = append(list_s, d)
	adj[s] = list_s
	if !graph.Directed {
		var list_d []string = adj[d]
		_ = list_d
		list_d = append(list_d, s)
		adj[d] = list_d
	}
	return Graph{
		Adj:      adj,
		Directed: graph.Directed,
	}
}

func remove_edge(graph Graph, s string, d string) Graph {
	if !func() bool { _, ok := graph.Adj[s]; return ok }() || !func() bool { _, ok := graph.Adj[d]; return ok }() {
		panic("vertex missing")
	}
	if !contains_edge(graph, s, d) {
		panic("edge missing")
	}
	var adj map[string][]string = map[string][]string{}
	_ = adj
	for _, k := range func() []string {
		keys := make([]string, 0, len(graph.Adj))
		for k := range graph.Adj {
			keys = append(keys, k)
		}
		sort.Slice(keys, func(i, j int) bool { return fmt.Sprint(keys[i]) < fmt.Sprint(keys[j]) })
		return keys
	}() {
		adj[k] = graph.Adj[k]
	}
	adj[s] = remove_from_list(func(v any) []string {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]string); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []string{}
			}
			out := make([]string, len(arr))
			for i, x := range arr {
				out[i] = fmt.Sprint(x)
			}
			return out
		}
		return v.([]string)
	}(adj[s]), d)
	if !graph.Directed {
		adj[d] = remove_from_list(func(v any) []string {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]string); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []string{}
				}
				out := make([]string, len(arr))
				for i, x := range arr {
					out[i] = fmt.Sprint(x)
				}
				return out
			}
			return v.([]string)
		}(adj[d]), s)
	}
	return Graph{
		Adj:      adj,
		Directed: graph.Directed,
	}
}

func remove_vertex(graph Graph, v string) Graph {
	if !func() bool { _, ok := graph.Adj[v]; return ok }() {
		panic("vertex missing")
	}
	var adj map[string][]string = map[string][]string{}
	_ = adj
	for _, k := range func() []string {
		keys := make([]string, 0, len(graph.Adj))
		for k := range graph.Adj {
			keys = append(keys, k)
		}
		sort.Slice(keys, func(i, j int) bool { return fmt.Sprint(keys[i]) < fmt.Sprint(keys[j]) })
		return keys
	}() {
		if k != v {
			adj[k] = remove_from_list(func(v any) []string {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]string); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []string{}
					}
					out := make([]string, len(arr))
					for i, x := range arr {
						out[i] = fmt.Sprint(x)
					}
					return out
				}
				return v.([]string)
			}(graph.Adj[k]), v)
		}
	}
	return Graph{
		Adj:      adj,
		Directed: graph.Directed,
	}
}

func contains_vertex(graph Graph, v string) bool {
	return func() bool { _, ok := graph.Adj[v]; return ok }()
}

func contains_edge(graph Graph, s string, d string) bool {
	if !func() bool { _, ok := graph.Adj[s]; return ok }() || !func() bool { _, ok := graph.Adj[d]; return ok }() {
		panic("vertex missing")
	}
	for _, x := range graph.Adj[s] {
		if x == d {
			return true
		}
	}
	return false
}

func clear_graph(graph Graph) Graph {
	return Graph{
		Adj:      map[string][]string{},
		Directed: graph.Directed,
	}
}

func to_string(graph Graph) string {
	return fmt.Sprint(graph.Adj)
}

func mochiMain() {
	var vertices []string = []string{"1", "2", "3", "4"}
	_ = vertices
	var edges [][]string = [][]string{[]string{"1", "2"}, []string{"2", "3"}, []string{"3", "4"}}
	_ = edges
	var g Graph = create_graph(func(v any) []string {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]string); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []string{}
			}
			out := make([]string, len(arr))
			for i, x := range arr {
				out[i] = fmt.Sprint(x)
			}
			return out
		}
		return v.([]string)
	}(vertices), func(v any) [][]string {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]string); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]string{}
			}
			out := make([][]string, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []string {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]string); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []string{}
						}
						out := make([]string, len(arr))
						for i, x := range arr {
							out[i] = x.(string)
						}
						return out
					}
					return v.([]string)
				}(x)
			}
			return out
		}
		return v.([][]string)
	}(edges), false)
	_ = g
	fmt.Println(to_string(g))
	g = add_vertex(g, "5")
	g = add_edge(g, "4", "5")
	fmt.Println(fmt.Sprint(contains_edge(g, "4", "5")))
	g = remove_edge(g, "1", "2")
	g = remove_vertex(g, "3")
	fmt.Println(to_string(g))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
