//go:build ignore

// Generated by Mochi v0.10.61 on 2025-08-09 10:25:47 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	s[idx] = v
}

func longest_distance(graph [][]int) int {
	n := len(graph)
	_ = n
	var indegree []int = []int{}
	_ = indegree
	var i int = 0
	_ = i
	for i < n {
		indegree = append(indegree, 0)
		i = (i + 1)
	}
	var long_dist []int = []int{}
	_ = long_dist
	var j int = 0
	_ = j
	for j < n {
		long_dist = append(long_dist, 1)
		j = (j + 1)
	}
	var u int = 0
	_ = u
	for u < n {
		for _, v := range _index(graph, u) {
			_setIndex(indegree, v, (int(_index(indegree, v)) + 1))
		}
		u = (u + 1)
	}
	var queue []int = []int{}
	_ = queue
	var head int = 0
	_ = head
	var k int = 0
	_ = k
	for k < n {
		if int(_index(indegree, k)) == 0 {
			queue = append(queue, k)
		}
		k = (k + 1)
	}
	for head < len(queue) {
		var vertex int = _index(queue, head)
		_ = vertex
		head = (head + 1)
		for _, x := range _index(graph, vertex) {
			_setIndex(indegree, x, (int(_index(indegree, x)) - 1))
			var new_dist int = (int(_index(long_dist, vertex)) + 1)
			_ = new_dist
			if new_dist > int(_index(long_dist, x)) {
				_setIndex(long_dist, x, new_dist)
			}
			if int(_index(indegree, x)) == 0 {
				queue = append(queue, x)
			}
		}
	}
	var max_len int = _index(long_dist, 0)
	_ = max_len
	var m int = 1
	_ = m
	for m < n {
		if int(_index(long_dist, m)) > max_len {
			max_len = _index(long_dist, m)
		}
		m = (m + 1)
	}
	return max_len
}

var graph [][]int

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		graph = [][]int{[]int{func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(2), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(3), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(4)}, []int{func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(2), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(7)}, []int{func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(5)}, []int{func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(5), func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(7)}, []int{func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(7)}, []int{func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(6)}, []int{func(v any) int {
			if vv, ok := v.(int); ok {
				return vv
			}
			return 0
		}(7)}, []int{}}
		fmt.Println(longest_distance(func(v any) [][]int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]int{}
				}
				out := make([][]int, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []int {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]int); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []int{}
							}
							out := make([]int, len(arr))
							for i, x := range arr {
								out[i] = x.(int)
							}
							return out
						}
						return v.([]int)
					}(x)
				}
				return out
			}
			return v.([][]int)
		}(graph)))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
