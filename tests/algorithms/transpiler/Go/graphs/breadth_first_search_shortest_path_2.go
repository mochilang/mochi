//go:build ignore

// Generated by Mochi v0.10.61 on 2025-08-09 10:24:59 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"reflect"
	"runtime"
	"sort"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _slice[T any](s []T, start, end int) []T {
	if start < 0 {
		start = 0
	}
	if end > len(s) {
		end = len(s)
	}
	if start > len(s) {
		start = len(s)
	}
	if end < start {
		end = start
	}
	return s[start:end]
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

func contains(xs []string, x string) bool {
	var i int = 0
	_ = i
	for i < len(xs) {
		if _index(xs, i) == x {
			return true
		}
		i = (i + 1)
	}
	return false
}

func contains_key(m map[string][]string, key string) bool {
	for _, k := range func() []string {
		keys := make([]string, 0, len(m))
		for k := range m {
			keys = append(keys, k)
		}
		sort.Slice(keys, func(i, j int) bool { return fmt.Sprint(keys[i]) < fmt.Sprint(keys[j]) })
		return keys
	}() {
		if k == key {
			return true
		}
	}
	return false
}

func bfs_shortest_path(graph map[string][]string, start string, goal string) []string {
	var explored []string = []string{}
	_ = explored
	var queue [][]string = [][]string{[]string{start}}
	_ = queue
	if start == goal {
		return []string{start}
	}
	for len(queue) > 0 {
		var path []string = _index(queue, 0)
		_ = path
		queue = _slice(queue, 1, len(queue))
		var node string = _index(path, (len(path) - 1))
		_ = node
		if !contains(explored, node) {
			var neighbours []string = graph[node]
			_ = neighbours
			var i int = 0
			_ = i
			for i < len(neighbours) {
				var neighbour string = _index(neighbours, i)
				_ = neighbour
				var new_path []string = path
				_ = new_path
				new_path = append(new_path, neighbour)
				queue = append(queue, new_path)
				if neighbour == goal {
					return new_path
				}
				i = (i + 1)
			}
			explored = append(explored, node)
		}
	}
	return func(v any) []string {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]string); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []string{}
			}
			out := make([]string, len(arr))
			for i, x := range arr {
				out[i] = fmt.Sprint(x)
			}
			return out
		}
		return v.([]string)
	}([]string{})
}

func bfs_shortest_path_distance(graph map[string][]string, start string, target string) int {
	if (contains_key(graph, start) == false) || (contains_key(graph, target) == false) {
		return (0 - 1)
	}
	if start == target {
		return 0
	}
	var queue []string = []string{start}
	_ = queue
	var visited []string = []string{start}
	_ = visited
	var dist map[string]int = map[string]int{}
	_ = dist
	dist[start] = 0
	dist[target] = (0 - 1)
	for len(queue) > 0 {
		var node string = _index(queue, 0)
		_ = node
		queue = _slice(queue, 1, len(queue))
		if node == target {
			if (int(dist[target]) == (0 - 1)) || (int(dist[node]) < int(dist[target])) {
				dist[target] = dist[node]
			}
		}
		var adj []string = graph[node]
		_ = adj
		var i int = 0
		_ = i
		for i < len(adj) {
			var next string = _index(adj, i)
			_ = next
			if !contains(visited, next) {
				visited = append(visited, next)
				queue = append(queue, next)
				dist[next] = (int(dist[node]) + 1)
			}
			i = (i + 1)
		}
	}
	return dist[target]
}

var demo_graph map[string][]string

var __mochi_test_header_printed bool

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		demo_graph = map[string][]string{"A": []string{"B", "C", "E"}, "B": []string{"A", "D", "E"}, "C": []string{"A", "F", "G"}, "D": []string{"B"}, "E": []string{"A", "B", "D"}, "F": []string{"C"}, "G": []string{"C"}}
		if !__mochi_test_header_printed {
			fmt.Println("[94;1mtests/github/TheAlgorithms/Mochi/graphs/breadth_first_search_shortest_path_2.mochi[0;22m")
			__mochi_test_header_printed = true
		}
		func() {
			func() {
				defer func() { recover() }()
				_ = (reflect.DeepEqual(bfs_shortest_path(demo_graph, "G", "D"), []string{"G", "C", "A", "B", "D"}))
			}()
			fmt.Printf("   \x1b[33mtest\x1b[0m %s                   ... \x1b[32mok\x1b[0m (1.0ms)\n", "path found")
		}()

		if !__mochi_test_header_printed {
			fmt.Println("[94;1mtests/github/TheAlgorithms/Mochi/graphs/breadth_first_search_shortest_path_2.mochi[0;22m")
			__mochi_test_header_printed = true
		}
		func() {
			func() {
				defer func() { recover() }()
				_ = (reflect.DeepEqual(bfs_shortest_path(demo_graph, "G", "G"), []string{"G"}))
			}()
			fmt.Printf("   \x1b[33mtest\x1b[0m %s                   ... \x1b[32mok\x1b[0m (1.0ms)\n", "path to self")
		}()

		if !__mochi_test_header_printed {
			fmt.Println("[94;1mtests/github/TheAlgorithms/Mochi/graphs/breadth_first_search_shortest_path_2.mochi[0;22m")
			__mochi_test_header_printed = true
		}
		func() {
			func() {
				defer func() { recover() }()
				_ = (len(bfs_shortest_path(demo_graph, "G", "Unknown")) == 0)
			}()
			fmt.Printf("   \x1b[33mtest\x1b[0m %s                   ... \x1b[32mok\x1b[0m (1.0ms)\n", "path not found")
		}()

		if !__mochi_test_header_printed {
			fmt.Println("[94;1mtests/github/TheAlgorithms/Mochi/graphs/breadth_first_search_shortest_path_2.mochi[0;22m")
			__mochi_test_header_printed = true
		}
		func() {
			func() {
				defer func() { recover() }()
				_ = (bfs_shortest_path_distance(demo_graph, "G", "D") == 4)
			}()
			fmt.Printf("   \x1b[33mtest\x1b[0m %s                   ... \x1b[32mok\x1b[0m (1.0ms)\n", "distance found")
		}()

		if !__mochi_test_header_printed {
			fmt.Println("[94;1mtests/github/TheAlgorithms/Mochi/graphs/breadth_first_search_shortest_path_2.mochi[0;22m")
			__mochi_test_header_printed = true
		}
		func() {
			func() {
				defer func() { recover() }()
				_ = (bfs_shortest_path_distance(demo_graph, "A", "A") == 0)
			}()
			fmt.Printf("   \x1b[33mtest\x1b[0m %s                   ... \x1b[32mok\x1b[0m (1.0ms)\n", "distance to self")
		}()

		if !__mochi_test_header_printed {
			fmt.Println("[94;1mtests/github/TheAlgorithms/Mochi/graphs/breadth_first_search_shortest_path_2.mochi[0;22m")
			__mochi_test_header_printed = true
		}
		func() {
			func() {
				defer func() { recover() }()
				_ = (bfs_shortest_path_distance(demo_graph, "A", "Unknown") == (0 - 1))
			}()
			fmt.Printf("   \x1b[33mtest\x1b[0m %s                   ... \x1b[32mok\x1b[0m (1.0ms)\n", "distance not found")
		}()

		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
