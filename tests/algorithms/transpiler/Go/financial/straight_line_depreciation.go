//go:build ignore

// Generated by Mochi v0.10.61 on 2025-08-08 18:16:22 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func straight_line_depreciation(useful_years int, purchase_value float64, residual_value float64) []float64 {
	if useful_years < 1 {
		panic("Useful years cannot be less than 1")
	}
	if purchase_value < 0.0 {
		panic("Purchase value cannot be less than zero")
	}
	if purchase_value < residual_value {
		panic("Purchase value cannot be less than residual value")
	}
	var depreciable_cost float64 = (purchase_value - residual_value)
	_ = depreciable_cost
	var annual_expense float64 = (float64(depreciable_cost) / float64((1.0 * float64(useful_years))))
	_ = annual_expense
	var expenses []float64 = []float64{}
	_ = expenses
	var accumulated float64 = 0.0
	_ = accumulated
	var period int = 0
	_ = period
	for period < useful_years {
		if period != (useful_years - 1) {
			accumulated = (accumulated + annual_expense)
			expenses = append(expenses, annual_expense)
		} else {
			var end_year_expense float64 = (depreciable_cost - accumulated)
			_ = end_year_expense
			expenses = append(expenses, end_year_expense)
		}
		period = (period + 1)
	}
	return expenses
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(fmt.Sprint(straight_line_depreciation(10, 1100.0, 100.0)))
		fmt.Println(fmt.Sprint(straight_line_depreciation(6, 1250.0, 50.0)))
		fmt.Println(fmt.Sprint(straight_line_depreciation(4, 1001.0, 0.0)))
		fmt.Println(fmt.Sprint(straight_line_depreciation(11, 380.0, 50.0)))
		fmt.Println(fmt.Sprint(straight_line_depreciation(1, 4985.0, 100.0)))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
