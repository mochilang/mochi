//go:build ignore

// Generated by Mochi v0.10.64 on 2025-08-13 12:53:52 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func pay(hours_worked float64, pay_rate float64, hours float64) float64 {
	var normal_pay float64 = (hours_worked * pay_rate)
	_ = normal_pay
	_ = normal_pay
	var over_time float64 = (hours_worked - hours)
	_ = over_time
	if over_time < 0.0 {
		over_time = 0.0
	}
	var over_time_pay float64 = (float64((over_time * pay_rate)) / float64(2.0))
	_ = over_time_pay
	_ = over_time_pay
	return (normal_pay + over_time_pay)
}

func mochiMain() {
	fmt.Println(fmt.Sprint(pay(41.0, 1.0, 40.0)))
	fmt.Println(fmt.Sprint(pay(65.0, 19.0, 40.0)))
	fmt.Println(fmt.Sprint(pay(10.0, 1.0, 40.0)))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
