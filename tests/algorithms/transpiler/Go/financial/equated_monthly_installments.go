//go:build ignore

// Generated by Mochi v0.10.65 on 2025-08-14 10:04:33 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func pow_float(base float64, exp int) float64 {
	var result float64 = 1.0
	_ = result
	var i int = 0
	_ = i
	for i < exp {
		result = (result * base)
		i = (i + 1)
	}
	return result
}

func equated_monthly_installments(principal float64, rate_per_annum float64, years_to_repay int) float64 {
	if principal <= 0.0 {
		panic("Principal borrowed must be > 0")
	}
	if rate_per_annum < 0.0 {
		panic("Rate of interest must be >= 0")
	}
	if years_to_repay <= 0 {
		panic("Years to repay must be an integer > 0")
	}
	var rate_per_month float64 = (float64(rate_per_annum) / float64(12.0))
	_ = rate_per_month
	var number_of_payments int = (years_to_repay * 12)
	_ = number_of_payments
	var factor float64 = pow_float((1.0 + rate_per_month), number_of_payments)
	_ = factor
	_ = factor
	return (float64(((principal * rate_per_month) * factor)) / float64((factor - 1.0)))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(fmt.Sprint(equated_monthly_installments(25000.0, 0.12, 3)))
		fmt.Println(fmt.Sprint(equated_monthly_installments(25000.0, 0.12, 10)))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
