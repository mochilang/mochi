//go:build ignore

// Generated by Mochi v0.10.61 on 2025-08-08 18:16:12 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		if vv, ok := v.(float64); ok {
			return int(vv)
		}
		return v.(int)
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

func exponential_moving_average(stock_prices []float64, window_size int) []float64 {
	if window_size <= 0 {
		panic("window_size must be > 0")
	}
	var alpha float64 = (float64(2.0) / float64((1.0 + float64(window_size))))
	_ = alpha
	var moving_average float64 = 0.0
	_ = moving_average
	var result []float64 = []float64{}
	_ = result
	var i int = 0
	_ = i
	for i < len(stock_prices) {
		var price float64 = _index(stock_prices, i)
		_ = price
		if i <= window_size {
			if i == 0 {
				moving_average = price
			} else {
				moving_average = ((moving_average + price) * 0.5)
			}
		} else {
			moving_average = ((alpha * price) + ((1.0 - alpha) * moving_average))
		}
		result = append(result, moving_average)
		i = (i + 1)
	}
	return result
}

var stock_prices []float64

var window_size int

var result []float64

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		stock_prices = []float64{2.0, 5.0, 3.0, 8.2, 6.0, 9.0, 10.0}
		window_size = 3
		result = exponential_moving_average(func(v any) []float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []float64{}
				}
				out := make([]float64, len(arr))
				for i, x := range arr {
					out[i] = x.(float64)
				}
				return out
			}
			return v.([]float64)
		}(stock_prices), window_size)
		fmt.Println(fmt.Sprint(result))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
