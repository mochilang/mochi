//go:build ignore

// Generated by Mochi v0.10.64 on 2025-08-13 16:26:07 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

func powf(base float64, exponent int) float64 {
	var result float64 = 1.0
	_ = result
	var i int = 0
	_ = i
	for i < exponent {
		result = (result * base)
		i = (i + 1)
	}
	return result
}

func round2(value float64) float64 {
	if value >= 0.0 {
		var scaled int = int(((value * 100.0) + 0.5))
		_ = scaled
		_ = scaled
		return (float64(scaled) / float64(100.0))
	}
	var scaled int = int(((value * 100.0) - 0.5))
	_ = scaled
	_ = scaled
	return (float64(scaled) / float64(100.0))
}

func present_value(discount_rate float64, cash_flows []float64) float64 {
	if discount_rate < 0.0 {
		panic("Discount rate cannot be negative")
	}
	if len(cash_flows) == 0 {
		panic("Cash flows list cannot be empty")
	}
	var pv float64 = 0.0
	_ = pv
	var i int = 0
	_ = i
	var factor float64 = (1.0 + discount_rate)
	_ = factor
	for i < len(cash_flows) {
		var cf float64 = _index(cash_flows, i)
		_ = cf
		pv = (pv + (float64(cf) / float64(powf(factor, i))))
		i = (i + 1)
	}
	return round2(pv)
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(fmt.Sprint(present_value(0.13, func(v any) []float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []float64{}
				}
				out := make([]float64, len(arr))
				for i, x := range arr {
					out[i] = x.(float64)
				}
				return out
			}
			return v.([]float64)
		}([]float64{10.0, 20.7, (0 - 293.0), 297.0}))))
		fmt.Println(fmt.Sprint(present_value(0.07, func(v any) []float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []float64{}
				}
				out := make([]float64, len(arr))
				for i, x := range arr {
					out[i] = x.(float64)
				}
				return out
			}
			return v.([]float64)
		}([]float64{(0 - 109129.39), 30923.23, 15098.93, 29734.0, 39.0}))))
		fmt.Println(fmt.Sprint(present_value(0.07, func(v any) []float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []float64{}
				}
				out := make([]float64, len(arr))
				for i, x := range arr {
					out[i] = x.(float64)
				}
				return out
			}
			return v.([]float64)
		}([]float64{109129.39, 30923.23, 15098.93, 29734.0, 39.0}))))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
