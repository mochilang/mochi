//go:build ignore

// Generated by Mochi v0.10.65 on 2025-08-14 10:04:46 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	return s[idx]
}

type SMAValue struct {
	Value float64 `json:"value"`
	Ok    bool    `json:"ok"`
}

func simple_moving_average(data []float64, window_size int) []SMAValue {
	if window_size < 1 {
		panic("Window size must be a positive integer")
	}
	var result []SMAValue = []SMAValue{}
	_ = result
	var window_sum float64 = 0.0
	_ = window_sum
	var i int = 0
	_ = i
	for i < len(data) {
		window_sum = (window_sum + _index(data, i))
		if i >= window_size {
			window_sum = (window_sum - _index(data, (i-window_size)))
		}
		if i >= (window_size - 1) {
			var avg float64 = (float64(window_sum) / float64(window_size))
			_ = avg
			result = append(result, SMAValue{
				Value: avg,
				Ok:    true,
			})
		} else {
			result = append(result, SMAValue{
				Value: 0.0,
				Ok:    false,
			})
		}
		i = (i + 1)
	}
	return result
}

var data []float64

var window_size int

var sma_values []SMAValue

var idx int

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		data = []float64{10.0, 12.0, 15.0, 13.0, 14.0, 16.0, 18.0, 17.0, 19.0, 21.0}
		window_size = 3
		sma_values = simple_moving_average(func(v any) []float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []float64{}
				}
				out := make([]float64, len(arr))
				for i, x := range arr {
					out[i] = x.(float64)
				}
				return out
			}
			return v.([]float64)
		}(data), window_size)
		idx = 0
		for idx < len(sma_values) {
			var item SMAValue = _index(sma_values, idx)
			_ = item
			if item.Ok {
				fmt.Println(((("Day " + fmt.Sprint((idx + 1))) + ": ") + fmt.Sprint(item.Value)))
			} else {
				fmt.Println((("Day " + fmt.Sprint((idx + 1))) + ": Not enough data for SMA"))
			}
			idx = (idx + 1)
		}
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
