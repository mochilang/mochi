//go:build ignore

// Generated by Mochi v0.10.65 on 2025-08-14 10:04:38 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func panic(msg string) {
	fmt.Println(msg)
}

func powf(base float64, exp float64) float64 {
	var result float64 = 1.0
	_ = result
	var i int = 0
	_ = i
	for i < int(exp) {
		result = (result * base)
		i = (i + 1)
	}
	return result
}

func simple_interest(principal float64, daily_rate float64, days float64) float64 {
	if days <= 0.0 {
		panic("days_between_payments must be > 0")
		return 0.0
	}
	if daily_rate < 0.0 {
		panic("daily_interest_rate must be >= 0")
		return 0.0
	}
	if principal <= 0.0 {
		panic("principal must be > 0")
		return 0.0
	}
	return ((principal * daily_rate) * days)
}

func compound_interest(principal float64, nominal_rate float64, periods float64) float64 {
	if periods <= 0.0 {
		panic("number_of_compounding_periods must be > 0")
		return 0.0
	}
	if nominal_rate < 0.0 {
		panic("nominal_annual_interest_rate_percentage must be >= 0")
		return 0.0
	}
	if principal <= 0.0 {
		panic("principal must be > 0")
		return 0.0
	}
	return (principal * (powf((1.0+nominal_rate), periods) - 1.0))
}

func apr_interest(principal float64, apr float64, years float64) float64 {
	if years <= 0.0 {
		panic("number_of_years must be > 0")
		return 0.0
	}
	if apr < 0.0 {
		panic("nominal_annual_percentage_rate must be >= 0")
		return 0.0
	}
	if principal <= 0.0 {
		panic("principal must be > 0")
		return 0.0
	}
	return compound_interest(principal, (float64(apr) / float64(365.0)), (years * 365.0))
}

func mochiMain() {
	fmt.Println(fmt.Sprint(simple_interest(18000.0, 0.06, 3.0)))
	fmt.Println(fmt.Sprint(simple_interest(0.5, 0.06, 3.0)))
	fmt.Println(fmt.Sprint(simple_interest(18000.0, 0.01, 10.0)))
	fmt.Println(fmt.Sprint(compound_interest(10000.0, 0.05, 3.0)))
	fmt.Println(fmt.Sprint(compound_interest(10000.0, 0.05, 1.0)))
	fmt.Println(fmt.Sprint(apr_interest(10000.0, 0.05, 3.0)))
	fmt.Println(fmt.Sprint(apr_interest(10000.0, 0.05, 1.0)))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
