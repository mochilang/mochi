//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-15 21:35:57 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"strings"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func absf(x float64) float64 {
	return func() float64 {
		if x < 0.0 {
			return (0 - x)
		} else {
			return x
		}
	}()
}

func strictly_diagonally_dominant(matrix [][]float64) bool {
	var n int = len(matrix)
	_ = n
	var i int = 0
	_ = i
	for i < n {
		var sum float64 = 0.0
		_ = sum
		var j int = 0
		_ = j
		for j < n {
			if i != j {
				sum = (sum + absf(_index(_index(matrix, i), j)))
			}
			j = (j + 1)
		}
		if absf(_index(_index(matrix, i), i)) <= sum {
			panic("Coefficient matrix is not strictly diagonally dominant")
		}
		i = (i + 1)
	}
	return true
}

func jacobi_iteration_method(coefficient [][]float64, constant []float64, init_val []float64, iterations int) []float64 {
	var n int = len(coefficient)
	_ = n
	if n == 0 {
		panic("Coefficient matrix cannot be empty")
	}
	if len(constant) != n {
		panic("Constant vector length must equal number of rows in coefficient matrix")
	}
	if len(init_val) != n {
		panic("Initial values count must match matrix size")
	}
	var r int = 0
	_ = r
	for r < n {
		if len(_index(coefficient, r)) != n {
			panic("Coefficient matrix must be square")
		}
		r = (r + 1)
	}
	if iterations <= 0 {
		panic("Iterations must be at least 1")
	}
	strictly_diagonally_dominant(func(v any) [][]float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]float64{}
			}
			out := make([][]float64, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []float64 {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]float64); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []float64{}
						}
						out := make([]float64, len(arr))
						for i, x := range arr {
							out[i] = x.(float64)
						}
						return out
					}
					return v.([]float64)
				}(x)
			}
			return out
		}
		return v.([][]float64)
	}(coefficient))
	var x []float64 = init_val
	_ = x
	var k int = 0
	_ = k
	for k < iterations {
		var new_x []float64 = []float64{}
		_ = new_x
		var i int = 0
		_ = i
		for i < n {
			var sum float64 = 0.0
			_ = sum
			var j int = 0
			_ = j
			for j < n {
				if i != j {
					sum = (sum + (_index(_index(coefficient, i), j) * _index(x, j)))
				}
				j = (j + 1)
			}
			var value float64 = (float64((_index(constant, i) - sum)) / float64(_index(_index(coefficient, i), i)))
			_ = value
			new_x = append(new_x, value)
			i = (i + 1)
		}
		x = new_x
		k = (k + 1)
	}
	return x
}

var coefficient [][]float64

var constant []float64

var init_val []float64

var iterations int

var result []float64

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		coefficient = [][]float64{[]float64{4.0, 1.0, 1.0}, []float64{1.0, 5.0, 2.0}, []float64{1.0, 2.0, 4.0}}
		constant = []float64{2.0, (0 - 6.0), (0 - 4.0)}
		init_val = []float64{0.5, (0 - 0.5), (0 - 0.5)}
		iterations = 3
		result = jacobi_iteration_method(func(v any) [][]float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]float64{}
				}
				out := make([][]float64, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []float64 {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]float64); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []float64{}
							}
							out := make([]float64, len(arr))
							for i, x := range arr {
								out[i] = x.(float64)
							}
							return out
						}
						return v.([]float64)
					}(x)
				}
				return out
			}
			return v.([][]float64)
		}(coefficient), func(v any) []float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []float64{}
				}
				out := make([]float64, len(arr))
				for i, x := range arr {
					out[i] = x.(float64)
				}
				return out
			}
			return v.([]float64)
		}(constant), func(v any) []float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []float64{}
				}
				out := make([]float64, len(arr))
				for i, x := range arr {
					out[i] = x.(float64)
				}
				return out
			}
			return v.([]float64)
		}(init_val), iterations)
		fmt.Println(func() string {
			b, _ := json.Marshal(result)
			s := string(b)
			s = strings.ReplaceAll(s, ":", ": ")
			s = strings.ReplaceAll(s, ",", ", ")
			s = strings.ReplaceAll(s, "}, {", "},{")
			return s
		}())
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
