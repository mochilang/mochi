//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-15 21:38:06 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		return
	}
	s[idx] = v
}

func rank_of_matrix(matrix [][]float64) int {
	var rows int = len(matrix)
	_ = rows
	if rows == 0 {
		return 0
	}
	var columns int = func() int {
		if len(_index(matrix, 0)) > 0 {
			return len(_index(matrix, 0))
		} else {
			return 0
		}
	}()
	_ = columns
	var rank int = func() int {
		if rows < columns {
			return rows
		} else {
			return columns
		}
	}()
	_ = rank
	var row int = 0
	_ = row
	for row < rank {
		if _index(_index(matrix, row), row) != 0.0 {
			var col int = (row + 1)
			_ = col
			for col < rows {
				var mult float64 = (float64(_index(_index(matrix, col), row)) / float64(_index(_index(matrix, row), row)))
				_ = mult
				var i int = row
				_ = i
				for i < columns {
					_setIndex(_index(matrix, col), i, (_index(_index(matrix, col), i) - (mult * _index(_index(matrix, row), i))))
					i = (i + 1)
				}
				col = (col + 1)
			}
		} else {
			var reduce bool = true
			_ = reduce
			var i int = (row + 1)
			_ = i
			for i < rows {
				if _index(_index(matrix, i), row) != 0.0 {
					var temp []float64 = _index(matrix, row)
					_ = temp
					_setIndex(matrix, row, _index(matrix, i))
					_setIndex(matrix, i, temp)
					reduce = false
					break
				}
				i = (i + 1)
			}
			if reduce {
				rank = (rank - 1)
				var j int = 0
				_ = j
				for j < rows {
					_setIndex(_index(matrix, j), row, _index(_index(matrix, j), rank))
					j = (j + 1)
				}
			}
			row = (row - 1)
		}
		row = (row + 1)
	}
	return rank
}

var __mochi_test_header_printed bool

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		if !__mochi_test_header_printed {
			fmt.Println("[94;1mtests/github/TheAlgorithms/Mochi/linear_algebra/src/rank_of_matrix.mochi[0;22m")
			__mochi_test_header_printed = true
		}
		func() {
			func() {
				defer func() { recover() }()
				var matrix1 [][]float64 = [][]float64{[]float64{1.0, 2.0, 3.0}, []float64{4.0, 5.0, 6.0}, []float64{7.0, 8.0, 9.0}}
				_ = matrix1
				_ = matrix1
				_ = (rank_of_matrix(func(v any) [][]float64 {
					if v == nil {
						return nil
					}
					if vv, ok := v.([][]float64); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return [][]float64{}
						}
						out := make([][]float64, len(arr))
						for i, x := range arr {
							out[i] = func(v any) []float64 {
								if v == nil {
									return nil
								}
								if vv, ok := v.([]float64); ok {
									return vv
								}
								if arr, ok := v.([]any); ok {
									if len(arr) == 0 {
										return []float64{}
									}
									out := make([]float64, len(arr))
									for i, x := range arr {
										out[i] = x.(float64)
									}
									return out
								}
								return v.([]float64)
							}(x)
						}
						return out
					}
					return v.([][]float64)
				}(matrix1)) == 2)
			}()
			fmt.Printf("   \x1b[33mtest\x1b[0m %s                   ... \x1b[32mok\x1b[0m (1.0ms)\n", "matrix1")
		}()

		if !__mochi_test_header_printed {
			fmt.Println("[94;1mtests/github/TheAlgorithms/Mochi/linear_algebra/src/rank_of_matrix.mochi[0;22m")
			__mochi_test_header_printed = true
		}
		func() {
			func() {
				defer func() { recover() }()
				var matrix2 [][]float64 = [][]float64{[]float64{1.0, 0.0, 0.0}, []float64{0.0, 1.0, 0.0}, []float64{0.0, 0.0, 0.0}}
				_ = matrix2
				_ = matrix2
				_ = (rank_of_matrix(func(v any) [][]float64 {
					if v == nil {
						return nil
					}
					if vv, ok := v.([][]float64); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return [][]float64{}
						}
						out := make([][]float64, len(arr))
						for i, x := range arr {
							out[i] = func(v any) []float64 {
								if v == nil {
									return nil
								}
								if vv, ok := v.([]float64); ok {
									return vv
								}
								if arr, ok := v.([]any); ok {
									if len(arr) == 0 {
										return []float64{}
									}
									out := make([]float64, len(arr))
									for i, x := range arr {
										out[i] = x.(float64)
									}
									return out
								}
								return v.([]float64)
							}(x)
						}
						return out
					}
					return v.([][]float64)
				}(matrix2)) == 2)
			}()
			fmt.Printf("   \x1b[33mtest\x1b[0m %s                   ... \x1b[32mok\x1b[0m (1.0ms)\n", "matrix2")
		}()

		if !__mochi_test_header_printed {
			fmt.Println("[94;1mtests/github/TheAlgorithms/Mochi/linear_algebra/src/rank_of_matrix.mochi[0;22m")
			__mochi_test_header_printed = true
		}
		func() {
			func() {
				defer func() { recover() }()
				var matrix3 [][]float64 = [][]float64{[]float64{1.0, 2.0, 3.0, 4.0}, []float64{5.0, 6.0, 7.0, 8.0}, []float64{9.0, 10.0, 11.0, 12.0}}
				_ = matrix3
				_ = matrix3
				_ = (rank_of_matrix(func(v any) [][]float64 {
					if v == nil {
						return nil
					}
					if vv, ok := v.([][]float64); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return [][]float64{}
						}
						out := make([][]float64, len(arr))
						for i, x := range arr {
							out[i] = func(v any) []float64 {
								if v == nil {
									return nil
								}
								if vv, ok := v.([]float64); ok {
									return vv
								}
								if arr, ok := v.([]any); ok {
									if len(arr) == 0 {
										return []float64{}
									}
									out := make([]float64, len(arr))
									for i, x := range arr {
										out[i] = x.(float64)
									}
									return out
								}
								return v.([]float64)
							}(x)
						}
						return out
					}
					return v.([][]float64)
				}(matrix3)) == 2)
			}()
			fmt.Printf("   \x1b[33mtest\x1b[0m %s                   ... \x1b[32mok\x1b[0m (1.0ms)\n", "matrix3")
		}()

		if !__mochi_test_header_printed {
			fmt.Println("[94;1mtests/github/TheAlgorithms/Mochi/linear_algebra/src/rank_of_matrix.mochi[0;22m")
			__mochi_test_header_printed = true
		}
		func() {
			func() {
				defer func() { recover() }()
				var matrix4 [][]float64 = [][]float64{[]float64{2.0, 3.0, (0 - 1.0), (0 - 1.0)}, []float64{1.0, (0 - 1.0), (0 - 2.0), 4.0}, []float64{3.0, 1.0, 3.0, (0 - 2.0)}, []float64{6.0, 3.0, 0.0, (0 - 7.0)}}
				_ = matrix4
				_ = matrix4
				_ = (rank_of_matrix(func(v any) [][]float64 {
					if v == nil {
						return nil
					}
					if vv, ok := v.([][]float64); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return [][]float64{}
						}
						out := make([][]float64, len(arr))
						for i, x := range arr {
							out[i] = func(v any) []float64 {
								if v == nil {
									return nil
								}
								if vv, ok := v.([]float64); ok {
									return vv
								}
								if arr, ok := v.([]any); ok {
									if len(arr) == 0 {
										return []float64{}
									}
									out := make([]float64, len(arr))
									for i, x := range arr {
										out[i] = x.(float64)
									}
									return out
								}
								return v.([]float64)
							}(x)
						}
						return out
					}
					return v.([][]float64)
				}(matrix4)) == 4)
			}()
			fmt.Printf("   \x1b[33mtest\x1b[0m %s                   ... \x1b[32mok\x1b[0m (1.0ms)\n", "matrix4")
		}()

		if !__mochi_test_header_printed {
			fmt.Println("[94;1mtests/github/TheAlgorithms/Mochi/linear_algebra/src/rank_of_matrix.mochi[0;22m")
			__mochi_test_header_printed = true
		}
		func() {
			func() {
				defer func() { recover() }()
				var matrix5 [][]float64 = [][]float64{[]float64{2.0, 1.0, (0 - 3.0), (0 - 6.0)}, []float64{3.0, (0 - 3.0), 1.0, 2.0}, []float64{1.0, 1.0, 1.0, 2.0}}
				_ = matrix5
				_ = matrix5
				_ = (rank_of_matrix(func(v any) [][]float64 {
					if v == nil {
						return nil
					}
					if vv, ok := v.([][]float64); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return [][]float64{}
						}
						out := make([][]float64, len(arr))
						for i, x := range arr {
							out[i] = func(v any) []float64 {
								if v == nil {
									return nil
								}
								if vv, ok := v.([]float64); ok {
									return vv
								}
								if arr, ok := v.([]any); ok {
									if len(arr) == 0 {
										return []float64{}
									}
									out := make([]float64, len(arr))
									for i, x := range arr {
										out[i] = x.(float64)
									}
									return out
								}
								return v.([]float64)
							}(x)
						}
						return out
					}
					return v.([][]float64)
				}(matrix5)) == 3)
			}()
			fmt.Printf("   \x1b[33mtest\x1b[0m %s                   ... \x1b[32mok\x1b[0m (1.0ms)\n", "matrix5")
		}()

		if !__mochi_test_header_printed {
			fmt.Println("[94;1mtests/github/TheAlgorithms/Mochi/linear_algebra/src/rank_of_matrix.mochi[0;22m")
			__mochi_test_header_printed = true
		}
		func() {
			func() {
				defer func() { recover() }()
				var matrix6 [][]float64 = [][]float64{[]float64{2.0, (0 - 1.0), 0.0}, []float64{1.0, 3.0, 4.0}, []float64{4.0, 1.0, (0 - 3.0)}}
				_ = matrix6
				_ = matrix6
				_ = (rank_of_matrix(func(v any) [][]float64 {
					if v == nil {
						return nil
					}
					if vv, ok := v.([][]float64); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return [][]float64{}
						}
						out := make([][]float64, len(arr))
						for i, x := range arr {
							out[i] = func(v any) []float64 {
								if v == nil {
									return nil
								}
								if vv, ok := v.([]float64); ok {
									return vv
								}
								if arr, ok := v.([]any); ok {
									if len(arr) == 0 {
										return []float64{}
									}
									out := make([]float64, len(arr))
									for i, x := range arr {
										out[i] = x.(float64)
									}
									return out
								}
								return v.([]float64)
							}(x)
						}
						return out
					}
					return v.([][]float64)
				}(matrix6)) == 3)
			}()
			fmt.Printf("   \x1b[33mtest\x1b[0m %s                   ... \x1b[32mok\x1b[0m (1.0ms)\n", "matrix6")
		}()

		if !__mochi_test_header_printed {
			fmt.Println("[94;1mtests/github/TheAlgorithms/Mochi/linear_algebra/src/rank_of_matrix.mochi[0;22m")
			__mochi_test_header_printed = true
		}
		func() {
			func() {
				defer func() { recover() }()
				var matrix7 [][]float64 = [][]float64{[]float64{3.0, 2.0, 1.0}, []float64{(0 - 6.0), (0 - 4.0), (0 - 2.0)}}
				_ = matrix7
				_ = matrix7
				_ = (rank_of_matrix(func(v any) [][]float64 {
					if v == nil {
						return nil
					}
					if vv, ok := v.([][]float64); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return [][]float64{}
						}
						out := make([][]float64, len(arr))
						for i, x := range arr {
							out[i] = func(v any) []float64 {
								if v == nil {
									return nil
								}
								if vv, ok := v.([]float64); ok {
									return vv
								}
								if arr, ok := v.([]any); ok {
									if len(arr) == 0 {
										return []float64{}
									}
									out := make([]float64, len(arr))
									for i, x := range arr {
										out[i] = x.(float64)
									}
									return out
								}
								return v.([]float64)
							}(x)
						}
						return out
					}
					return v.([][]float64)
				}(matrix7)) == 1)
			}()
			fmt.Printf("   \x1b[33mtest\x1b[0m %s                   ... \x1b[32mok\x1b[0m (1.0ms)\n", "matrix7")
		}()

		if !__mochi_test_header_printed {
			fmt.Println("[94;1mtests/github/TheAlgorithms/Mochi/linear_algebra/src/rank_of_matrix.mochi[0;22m")
			__mochi_test_header_printed = true
		}
		func() {
			func() {
				defer func() { recover() }()
				var matrix8 [][]float64 = [][]float64{[]float64{}, []float64{}}
				_ = matrix8
				_ = matrix8
				_ = (rank_of_matrix(func(v any) [][]float64 {
					if v == nil {
						return nil
					}
					if vv, ok := v.([][]float64); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return [][]float64{}
						}
						out := make([][]float64, len(arr))
						for i, x := range arr {
							out[i] = func(v any) []float64 {
								if v == nil {
									return nil
								}
								if vv, ok := v.([]float64); ok {
									return vv
								}
								if arr, ok := v.([]any); ok {
									if len(arr) == 0 {
										return []float64{}
									}
									out := make([]float64, len(arr))
									for i, x := range arr {
										out[i] = x.(float64)
									}
									return out
								}
								return v.([]float64)
							}(x)
						}
						return out
					}
					return v.([][]float64)
				}(matrix8)) == 0)
			}()
			fmt.Printf("   \x1b[33mtest\x1b[0m %s                   ... \x1b[32mok\x1b[0m (1.0ms)\n", "matrix_empty_cols")
		}()

		if !__mochi_test_header_printed {
			fmt.Println("[94;1mtests/github/TheAlgorithms/Mochi/linear_algebra/src/rank_of_matrix.mochi[0;22m")
			__mochi_test_header_printed = true
		}
		func() {
			func() {
				defer func() { recover() }()
				var matrix9 [][]float64 = [][]float64{[]float64{1.0}}
				_ = matrix9
				_ = matrix9
				_ = (rank_of_matrix(func(v any) [][]float64 {
					if v == nil {
						return nil
					}
					if vv, ok := v.([][]float64); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return [][]float64{}
						}
						out := make([][]float64, len(arr))
						for i, x := range arr {
							out[i] = func(v any) []float64 {
								if v == nil {
									return nil
								}
								if vv, ok := v.([]float64); ok {
									return vv
								}
								if arr, ok := v.([]any); ok {
									if len(arr) == 0 {
										return []float64{}
									}
									out := make([]float64, len(arr))
									for i, x := range arr {
										out[i] = x.(float64)
									}
									return out
								}
								return v.([]float64)
							}(x)
						}
						return out
					}
					return v.([][]float64)
				}(matrix9)) == 1)
			}()
			fmt.Printf("   \x1b[33mtest\x1b[0m %s                   ... \x1b[32mok\x1b[0m (1.0ms)\n", "matrix_single")
		}()

		if !__mochi_test_header_printed {
			fmt.Println("[94;1mtests/github/TheAlgorithms/Mochi/linear_algebra/src/rank_of_matrix.mochi[0;22m")
			__mochi_test_header_printed = true
		}
		func() {
			func() {
				defer func() { recover() }()
				var matrix10 [][]float64 = [][]float64{[]float64{}}
				_ = matrix10
				_ = matrix10
				_ = (rank_of_matrix(func(v any) [][]float64 {
					if v == nil {
						return nil
					}
					if vv, ok := v.([][]float64); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return [][]float64{}
						}
						out := make([][]float64, len(arr))
						for i, x := range arr {
							out[i] = func(v any) []float64 {
								if v == nil {
									return nil
								}
								if vv, ok := v.([]float64); ok {
									return vv
								}
								if arr, ok := v.([]any); ok {
									if len(arr) == 0 {
										return []float64{}
									}
									out := make([]float64, len(arr))
									for i, x := range arr {
										out[i] = x.(float64)
									}
									return out
								}
								return v.([]float64)
							}(x)
						}
						return out
					}
					return v.([][]float64)
				}(matrix10)) == 0)
			}()
			fmt.Printf("   \x1b[33mtest\x1b[0m %s                   ... \x1b[32mok\x1b[0m (1.0ms)\n", "matrix_empty")
		}()

		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
