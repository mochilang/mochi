//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-15 21:36:05 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		return
	}
	s[idx] = v
}

func panic(msg string) {
	fmt.Println(msg)
}

func abs_float(x float64) float64 {
	if x < 0.0 {
		return (0 - x)
	}
	return x
}

func copy_matrix(src [][]float64) [][]float64 {
	var res [][]float64 = [][]float64{}
	_ = res
	var i int = 0
	_ = i
	for i < len(src) {
		var row_src []float64 = _index(src, i)
		_ = row_src
		var row []float64 = []float64{}
		_ = row
		var j int = 0
		_ = j
		for j < len(row_src) {
			row = append(row, _index(row_src, j))
			j = (j + 1)
		}
		res = append(res, row)
		i = (i + 1)
	}
	return res
}

func solve_linear_system(matrix [][]float64) []float64 {
	var ab [][]float64 = copy_matrix(func(v any) [][]float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]float64{}
			}
			out := make([][]float64, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []float64 {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]float64); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []float64{}
						}
						out := make([]float64, len(arr))
						for i, x := range arr {
							out[i] = x.(float64)
						}
						return out
					}
					return v.([]float64)
				}(x)
			}
			return out
		}
		return v.([][]float64)
	}(matrix))
	_ = ab
	var num_rows int = len(ab)
	_ = num_rows
	var num_cols int = (len(_index(ab, 0)) - 1)
	_ = num_cols
	if num_rows != num_cols {
		panic("Matrix is not square")
		return func(v any) []float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []float64{}
				}
				out := make([]float64, len(arr))
				for i, x := range arr {
					out[i] = x.(float64)
				}
				return out
			}
			return v.([]float64)
		}([]float64{})
	}
	var column_num int = 0
	_ = column_num
	for column_num < num_rows {
		var i int = column_num
		_ = i
		for i < num_cols {
			if abs_float(_index(_index(ab, i), column_num)) > abs_float(_index(_index(ab, column_num), column_num)) {
				var temp []float64 = _index(ab, column_num)
				_ = temp
				_setIndex(ab, column_num, _index(ab, i))
				_setIndex(ab, i, temp)
			}
			i = (i + 1)
		}
		if abs_float(_index(_index(ab, column_num), column_num)) < 1e-08 {
			panic("Matrix is singular")
			return func(v any) []float64 {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]float64); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []float64{}
					}
					out := make([]float64, len(arr))
					for i, x := range arr {
						out[i] = x.(float64)
					}
					return out
				}
				return v.([]float64)
			}([]float64{})
		}
		if column_num != 0 {
			i = column_num
			for i < num_rows {
				var factor float64 = (float64(_index(_index(ab, i), (column_num-1))) / float64(_index(_index(ab, (column_num-1)), (column_num-1))))
				_ = factor
				var j int = 0
				_ = j
				for j < len(_index(ab, i)) {
					_setIndex(_index(ab, i), j, (_index(_index(ab, i), j) - (factor * _index(_index(ab, (column_num-1)), j))))
					j = (j + 1)
				}
				i = (i + 1)
			}
		}
		column_num = (column_num + 1)
	}
	var x_lst []float64 = []float64{}
	_ = x_lst
	var t int = 0
	_ = t
	for t < num_rows {
		x_lst = append(x_lst, 0.0)
		t = (t + 1)
	}
	column_num = (num_rows - 1)
	for column_num >= 0 {
		var x float64 = (float64(_index(_index(ab, column_num), num_cols)) / float64(_index(_index(ab, column_num), column_num)))
		_ = x
		_setIndex(x_lst, column_num, x)
		var i int = (column_num - 1)
		_ = i
		for i >= 0 {
			_setIndex(_index(ab, i), num_cols, (_index(_index(ab, i), num_cols) - (_index(_index(ab, i), column_num) * x)))
			i = (i - 1)
		}
		column_num = (column_num - 1)
	}
	return x_lst
}

var example_matrix [][]float64

var solution []float64

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		example_matrix = [][]float64{[]float64{5.0, (0 - 5.0), (0 - 3.0), 4.0, (0 - 11.0)}, []float64{1.0, (0 - 4.0), 6.0, (0 - 4.0), (0 - 10.0)}, []float64{(0 - 2.0), (0 - 5.0), 4.0, (0 - 5.0), (0 - 12.0)}, []float64{(0 - 3.0), (0 - 3.0), 5.0, (0 - 5.0), 8.0}}
		fmt.Println("Matrix:")
		fmt.Println(fmt.Sprint(example_matrix))
		solution = solve_linear_system(func(v any) [][]float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]float64{}
				}
				out := make([][]float64, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []float64 {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]float64); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []float64{}
							}
							out := make([]float64, len(arr))
							for i, x := range arr {
								out[i] = x.(float64)
							}
							return out
						}
						return v.([]float64)
					}(x)
				}
				return out
			}
			return v.([][]float64)
		}(example_matrix))
		fmt.Println(fmt.Sprint(solution))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
