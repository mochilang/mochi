//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-15 10:29:12 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		return
	}
	s[idx] = v
}

func _concat[T any](a, b []T) []T {
	return append(append([]T{}, a...), b...)
}

type OptionMatrix struct {
	Value [][]float64 `json:"value"`
	Ok    bool        `json:"ok"`
}

func identity(n int) [][]float64 {
	var mat [][]float64 = [][]float64{}
	_ = mat
	var i int = 0
	_ = i
	for i < n {
		var row []float64 = []float64{}
		_ = row
		var j int = 0
		_ = j
		for j < n {
			if i == j {
				row = append(row, 1.0)
			} else {
				row = append(row, 0.0)
			}
			j = (j + 1)
		}
		mat = append(mat, row)
		i = (i + 1)
	}
	return mat
}

func transpose(mat [][]float64) [][]float64 {
	var rows int = len(mat)
	_ = rows
	var cols int = len(_index(mat, 0))
	_ = cols
	var res [][]float64 = [][]float64{}
	_ = res
	var j int = 0
	_ = j
	for j < cols {
		var row []float64 = []float64{}
		_ = row
		var i int = 0
		_ = i
		for i < rows {
			row = append(row, _index(_index(mat, i), j))
			i = (i + 1)
		}
		res = append(res, row)
		j = (j + 1)
	}
	return res
}

func matmul(a [][]float64, b [][]float64) [][]float64 {
	var rows int = len(a)
	_ = rows
	var cols int = len(_index(b, 0))
	_ = cols
	var inner int = len(_index(a, 0))
	_ = inner
	var res [][]float64 = [][]float64{}
	_ = res
	var i int = 0
	_ = i
	for i < rows {
		var row []float64 = []float64{}
		_ = row
		var j int = 0
		_ = j
		for j < cols {
			var sum float64 = 0.0
			_ = sum
			var k int = 0
			_ = k
			for k < inner {
				sum = (sum + (_index(_index(a, i), k) * _index(_index(b, k), j)))
				k = (k + 1)
			}
			row = append(row, sum)
			j = (j + 1)
		}
		res = append(res, row)
		i = (i + 1)
	}
	return res
}

func mat_sub(a [][]float64, b [][]float64) [][]float64 {
	var rows int = len(a)
	_ = rows
	var cols int = len(_index(a, 0))
	_ = cols
	var res [][]float64 = [][]float64{}
	_ = res
	var i int = 0
	_ = i
	for i < rows {
		var row []float64 = []float64{}
		_ = row
		var j int = 0
		_ = j
		for j < cols {
			row = append(row, (_index(_index(a, i), j) - _index(_index(b, i), j)))
			j = (j + 1)
		}
		res = append(res, row)
		i = (i + 1)
	}
	return res
}

func inverse(mat [][]float64) [][]float64 {
	var n int = len(mat)
	_ = n
	var id [][]float64 = identity(n)
	_ = id
	var aug [][]float64 = [][]float64{}
	_ = aug
	var i int = 0
	_ = i
	for i < n {
		var row []float64 = _concat(_index(mat, i), _index(id, i))
		_ = row
		aug = append(aug, row)
		i = (i + 1)
	}
	var col int = 0
	_ = col
	for col < n {
		var pivot_row []float64 = _index(aug, col)
		_ = pivot_row
		var pivot float64 = _index(pivot_row, col)
		_ = pivot
		if pivot == 0.0 {
			panic("matrix is singular")
		}
		var j int = 0
		_ = j
		for j < (2 * n) {
			_setIndex(pivot_row, j, (float64(_index(pivot_row, j)) / float64(pivot)))
			j = (j + 1)
		}
		_setIndex(aug, col, pivot_row)
		var r int = 0
		_ = r
		for r < n {
			if r != col {
				var row_r []float64 = _index(aug, r)
				_ = row_r
				var factor float64 = _index(row_r, col)
				_ = factor
				j = 0
				for j < (2 * n) {
					_setIndex(row_r, j, (_index(row_r, j) - (factor * _index(pivot_row, j))))
					j = (j + 1)
				}
				_setIndex(aug, r, row_r)
			}
			r = (r + 1)
		}
		col = (col + 1)
	}
	var inv [][]float64 = [][]float64{}
	_ = inv
	var r int = 0
	_ = r
	for r < n {
		var row []float64 = []float64{}
		_ = row
		var c int = n
		_ = c
		for c < (2 * n) {
			row = append(row, _index(_index(aug, r), c))
			c = (c + 1)
		}
		inv = append(inv, row)
		r = (r + 1)
	}
	return inv
}

func schur_complement(mat_a [][]float64, mat_b [][]float64, mat_c [][]float64, pseudo_inv OptionMatrix) [][]float64 {
	var a_rows int = len(mat_a)
	_ = a_rows
	var a_cols int = len(_index(mat_a, 0))
	_ = a_cols
	if a_rows != a_cols {
		panic("Matrix A must be square")
	}
	if a_rows != len(mat_b) {
		panic("Expected the same number of rows for A and B")
	}
	if len(_index(mat_b, 0)) != len(_index(mat_c, 0)) {
		panic("Expected the same number of columns for B and C")
	}
	var a_inv [][]float64
	_ = a_inv
	if pseudo_inv.Ok {
		a_inv = pseudo_inv.Value
	} else {
		a_inv = inverse(func(v any) [][]float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]float64{}
				}
				out := make([][]float64, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []float64 {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]float64); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []float64{}
							}
							out := make([]float64, len(arr))
							for i, x := range arr {
								out[i] = x.(float64)
							}
							return out
						}
						return v.([]float64)
					}(x)
				}
				return out
			}
			return v.([][]float64)
		}(mat_a))
	}
	var bt [][]float64 = transpose(func(v any) [][]float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]float64{}
			}
			out := make([][]float64, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []float64 {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]float64); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []float64{}
						}
						out := make([]float64, len(arr))
						for i, x := range arr {
							out[i] = x.(float64)
						}
						return out
					}
					return v.([]float64)
				}(x)
			}
			return out
		}
		return v.([][]float64)
	}(mat_b))
	_ = bt
	var a_inv_b [][]float64 = matmul(func(v any) [][]float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]float64{}
			}
			out := make([][]float64, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []float64 {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]float64); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []float64{}
						}
						out := make([]float64, len(arr))
						for i, x := range arr {
							out[i] = x.(float64)
						}
						return out
					}
					return v.([]float64)
				}(x)
			}
			return out
		}
		return v.([][]float64)
	}(a_inv), func(v any) [][]float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]float64{}
			}
			out := make([][]float64, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []float64 {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]float64); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []float64{}
						}
						out := make([]float64, len(arr))
						for i, x := range arr {
							out[i] = x.(float64)
						}
						return out
					}
					return v.([]float64)
				}(x)
			}
			return out
		}
		return v.([][]float64)
	}(mat_b))
	_ = a_inv_b
	var bt_a_inv_b [][]float64 = matmul(func(v any) [][]float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]float64{}
			}
			out := make([][]float64, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []float64 {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]float64); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []float64{}
						}
						out := make([]float64, len(arr))
						for i, x := range arr {
							out[i] = x.(float64)
						}
						return out
					}
					return v.([]float64)
				}(x)
			}
			return out
		}
		return v.([][]float64)
	}(bt), func(v any) [][]float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]float64{}
			}
			out := make([][]float64, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []float64 {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]float64); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []float64{}
						}
						out := make([]float64, len(arr))
						for i, x := range arr {
							out[i] = x.(float64)
						}
						return out
					}
					return v.([]float64)
				}(x)
			}
			return out
		}
		return v.([][]float64)
	}(a_inv_b))
	_ = bt_a_inv_b
	_ = bt_a_inv_b
	return mat_sub(func(v any) [][]float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]float64{}
			}
			out := make([][]float64, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []float64 {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]float64); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []float64{}
						}
						out := make([]float64, len(arr))
						for i, x := range arr {
							out[i] = x.(float64)
						}
						return out
					}
					return v.([]float64)
				}(x)
			}
			return out
		}
		return v.([][]float64)
	}(mat_c), func(v any) [][]float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]float64{}
			}
			out := make([][]float64, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []float64 {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]float64); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []float64{}
						}
						out := make([]float64, len(arr))
						for i, x := range arr {
							out[i] = x.(float64)
						}
						return out
					}
					return v.([]float64)
				}(x)
			}
			return out
		}
		return v.([][]float64)
	}(bt_a_inv_b))
}

func print_matrix(mat [][]float64) {
	var i int = 0
	_ = i
	for i < len(mat) {
		var line string = ""
		_ = line
		var j int = 0
		_ = j
		var row []float64 = _index(mat, i)
		_ = row
		for j < len(row) {
			line = (line + fmt.Sprint(_index(row, j)))
			if (j + 1) < len(row) {
				line = (line + " ")
			}
			j = (j + 1)
		}
		fmt.Println(line)
		i = (i + 1)
	}
}

func mochiMain() {
	var a [][]float64 = [][]float64{[]float64{1.0, 2.0}, []float64{2.0, 1.0}}
	_ = a
	var b [][]float64 = [][]float64{[]float64{0.0, 3.0}, []float64{3.0, 0.0}}
	_ = b
	var c [][]float64 = [][]float64{[]float64{2.0, 1.0}, []float64{6.0, 3.0}}
	_ = c
	var none OptionMatrix = OptionMatrix{
		Value: [][]float64{},
		Ok:    false,
	}
	_ = none
	var s [][]float64 = schur_complement(func(v any) [][]float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]float64{}
			}
			out := make([][]float64, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []float64 {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]float64); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []float64{}
						}
						out := make([]float64, len(arr))
						for i, x := range arr {
							out[i] = x.(float64)
						}
						return out
					}
					return v.([]float64)
				}(x)
			}
			return out
		}
		return v.([][]float64)
	}(a), func(v any) [][]float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]float64{}
			}
			out := make([][]float64, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []float64 {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]float64); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []float64{}
						}
						out := make([]float64, len(arr))
						for i, x := range arr {
							out[i] = x.(float64)
						}
						return out
					}
					return v.([]float64)
				}(x)
			}
			return out
		}
		return v.([][]float64)
	}(b), func(v any) [][]float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]float64{}
			}
			out := make([][]float64, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []float64 {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]float64); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []float64{}
						}
						out := make([]float64, len(arr))
						for i, x := range arr {
							out[i] = x.(float64)
						}
						return out
					}
					return v.([]float64)
				}(x)
			}
			return out
		}
		return v.([][]float64)
	}(c), none)
	_ = s
	print_matrix(func(v any) [][]float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]float64{}
			}
			out := make([][]float64, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []float64 {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]float64); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []float64{}
						}
						out := make([]float64, len(arr))
						for i, x := range arr {
							out[i] = x.(float64)
						}
						return out
					}
					return v.([]float64)
				}(x)
			}
			return out
		}
		return v.([][]float64)
	}(s))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
