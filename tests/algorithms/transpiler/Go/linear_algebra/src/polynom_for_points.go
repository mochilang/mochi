//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-15 21:36:09 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		return
	}
	s[idx] = v
}

func contains_int(xs []int, x int) bool {
	var i int = 0
	_ = i
	for i < len(xs) {
		if _index(xs, i) == x {
			return true
		}
		i = (i + 1)
	}
	return false
}

func split(s string, sep string) []string {
	var res []string = []string{}
	_ = res
	var current string = ""
	_ = current
	var i int = 0
	_ = i
	for i < len(s) {
		var ch string = _substr(s, i, (i + 1))
		_ = ch
		if ch == sep {
			res = append(res, current)
			current = ""
		} else {
			current = (current + ch)
		}
		i = (i + 1)
	}
	res = append(res, current)
	return res
}

func pow_int_float(base int, exp int) float64 {
	var result float64 = 1.0
	_ = result
	var i int = 0
	_ = i
	for i < exp {
		result = (result * float64(base))
		i = (i + 1)
	}
	return result
}

func points_to_polynomial(coordinates [][]int) string {
	if len(coordinates) == 0 {
		panic("The program cannot work out a fitting polynomial.")
	}
	var i int = 0
	_ = i
	for i < len(coordinates) {
		if len(_index(coordinates, i)) != 2 {
			panic("The program cannot work out a fitting polynomial.")
		}
		i = (i + 1)
	}
	var j int = 0
	_ = j
	for j < len(coordinates) {
		var k int = (j + 1)
		_ = k
		for k < len(coordinates) {
			if (_index(_index(coordinates, j), 0) == _index(_index(coordinates, k), 0)) && (_index(_index(coordinates, j), 1) == _index(_index(coordinates, k), 1)) {
				panic("The program cannot work out a fitting polynomial.")
			}
			k = (k + 1)
		}
		j = (j + 1)
	}
	var set_x []int = []int{}
	_ = set_x
	i = 0
	for i < len(coordinates) {
		var x_val int = _index(_index(coordinates, i), 0)
		_ = x_val
		if !contains_int(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(set_x), x_val) {
			set_x = append(set_x, x_val)
		}
		i = (i + 1)
	}
	if len(set_x) == 1 {
		return ("x=" + fmt.Sprint(_index(_index(coordinates, 0), 0)))
	}
	if len(set_x) != len(coordinates) {
		panic("The program cannot work out a fitting polynomial.")
	}
	var n int = len(coordinates)
	_ = n
	var matrix [][]float64 = [][]float64{}
	_ = matrix
	var row int = 0
	_ = row
	for row < n {
		var line []float64 = []float64{}
		_ = line
		var col int = 0
		_ = col
		for col < n {
			var power float64 = pow_int_float(_index(_index(coordinates, row), 0), (n - (col + 1)))
			_ = power
			line = append(line, power)
			col = (col + 1)
		}
		matrix = append(matrix, line)
		row = (row + 1)
	}
	var vector []float64 = []float64{}
	_ = vector
	row = 0
	for row < n {
		vector = append(vector, float64(_index(_index(coordinates, row), 1)))
		row = (row + 1)
	}
	var count int = 0
	_ = count
	for count < n {
		var number int = 0
		_ = number
		for number < n {
			if count != number {
				var fraction float64 = (float64(_index(_index(matrix, number), count)) / float64(_index(_index(matrix, count), count)))
				_ = fraction
				var cc int = 0
				_ = cc
				for cc < n {
					_setIndex(_index(matrix, number), cc, (_index(_index(matrix, number), cc) - (_index(_index(matrix, count), cc) * fraction)))
					cc = (cc + 1)
				}
				_setIndex(vector, number, (_index(vector, number) - (_index(vector, count) * fraction)))
			}
			number = (number + 1)
		}
		count = (count + 1)
	}
	var solution []string = []string{}
	_ = solution
	count = 0
	for count < n {
		var value float64 = (float64(_index(vector, count)) / float64(_index(_index(matrix, count), count)))
		_ = value
		solution = append(solution, fmt.Sprint(value))
		count = (count + 1)
	}
	var solved string = "f(x)="
	_ = solved
	count = 0
	for count < n {
		var parts []string = split(_index(solution, count), "e")
		_ = parts
		var coeff string = _index(solution, count)
		_ = coeff
		if len(parts) > 1 {
			coeff = ((_index(parts, 0) + "*10^") + _index(parts, 1))
		}
		solved = ((((solved + "x^") + fmt.Sprint((n - (count + 1)))) + "*") + coeff)
		if (count + 1) != n {
			solved = (solved + "+")
		}
		count = (count + 1)
	}
	return solved
}

func mochiMain() {
	fmt.Println(points_to_polynomial(func(v any) [][]int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]int{}
			}
			out := make([][]int, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []int {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]int); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []int{}
						}
						out := make([]int, len(arr))
						for i, x := range arr {
							out[i] = x.(int)
						}
						return out
					}
					return v.([]int)
				}(x)
			}
			return out
		}
		return v.([][]int)
	}([][]int{[]int{1, 0}, []int{2, 0}, []int{3, 0}})))
	fmt.Println(points_to_polynomial(func(v any) [][]int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]int{}
			}
			out := make([][]int, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []int {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]int); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []int{}
						}
						out := make([]int, len(arr))
						for i, x := range arr {
							out[i] = x.(int)
						}
						return out
					}
					return v.([]int)
				}(x)
			}
			return out
		}
		return v.([][]int)
	}([][]int{[]int{1, 1}, []int{2, 1}, []int{3, 1}})))
	fmt.Println(points_to_polynomial(func(v any) [][]int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]int{}
			}
			out := make([][]int, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []int {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]int); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []int{}
						}
						out := make([]int, len(arr))
						for i, x := range arr {
							out[i] = x.(int)
						}
						return out
					}
					return v.([]int)
				}(x)
			}
			return out
		}
		return v.([][]int)
	}([][]int{[]int{1, 1}, []int{2, 4}, []int{3, 9}})))
	fmt.Println(points_to_polynomial(func(v any) [][]int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]int{}
			}
			out := make([][]int, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []int {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]int); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []int{}
						}
						out := make([]int, len(arr))
						for i, x := range arr {
							out[i] = x.(int)
						}
						return out
					}
					return v.([]int)
				}(x)
			}
			return out
		}
		return v.([][]int)
	}([][]int{[]int{1, 3}, []int{2, 6}, []int{3, 11}})))
	fmt.Println(points_to_polynomial(func(v any) [][]int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]int{}
			}
			out := make([][]int, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []int {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]int); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []int{}
						}
						out := make([]int, len(arr))
						for i, x := range arr {
							out[i] = x.(int)
						}
						return out
					}
					return v.([]int)
				}(x)
			}
			return out
		}
		return v.([][]int)
	}([][]int{[]int{1, func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}((0 - 3))}, []int{2, func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}((0 - 6))}, []int{3, func(v any) int {
		if vv, ok := v.(int); ok {
			return vv
		}
		return 0
	}((0 - 11))}})))
	fmt.Println(points_to_polynomial(func(v any) [][]int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]int{}
			}
			out := make([][]int, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []int {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]int); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []int{}
						}
						out := make([]int, len(arr))
						for i, x := range arr {
							out[i] = x.(int)
						}
						return out
					}
					return v.([]int)
				}(x)
			}
			return out
		}
		return v.([][]int)
	}([][]int{[]int{1, 1}, []int{1, 2}, []int{1, 3}})))
	fmt.Println(points_to_polynomial(func(v any) [][]int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]int{}
			}
			out := make([][]int, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []int {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]int); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []int{}
						}
						out := make([]int, len(arr))
						for i, x := range arr {
							out[i] = x.(int)
						}
						return out
					}
					return v.([]int)
				}(x)
			}
			return out
		}
		return v.([][]int)
	}([][]int{[]int{1, 5}, []int{2, 2}, []int{3, 9}})))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
