//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-15 21:35:59 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		return
	}
	s[idx] = v
}

type LU struct {
	Lower [][]float64 `json:"lower"`
	Upper [][]float64 `json:"upper"`
}

func lu_decomposition(mat [][]float64) LU {
	var n int = len(mat)
	_ = n
	if n == 0 {
		return LU{
			Lower: [][]float64{},
			Upper: [][]float64{},
		}
	}
	var m int = len(_index(mat, 0))
	_ = m
	if n != m {
		panic("Matrix must be square")
	}
	var lower [][]float64 = [][]float64{}
	_ = lower
	var upper [][]float64 = [][]float64{}
	_ = upper
	var i int = 0
	_ = i
	for i < n {
		var lrow []float64 = []float64{}
		_ = lrow
		var urow []float64 = []float64{}
		_ = urow
		var j int = 0
		_ = j
		for j < n {
			lrow = append(lrow, 0.0)
			urow = append(urow, 0.0)
			j = (j + 1)
		}
		lower = append(lower, lrow)
		upper = append(upper, urow)
		i = (i + 1)
	}
	i = 0
	for i < n {
		var j1 int = 0
		_ = j1
		for j1 < i {
			var total float64 = 0.0
			_ = total
			var k int = 0
			_ = k
			for k < i {
				total = (total + (_index(_index(lower, i), k) * _index(_index(upper, k), j1)))
				k = (k + 1)
			}
			if _index(_index(upper, j1), j1) == 0.0 {
				panic("No LU decomposition exists")
			}
			_setIndex(_index(lower, i), j1, (float64((_index(_index(mat, i), j1) - total)) / float64(_index(_index(upper, j1), j1))))
			j1 = (j1 + 1)
		}
		_setIndex(_index(lower, i), i, 1.0)
		var j2 int = i
		_ = j2
		for j2 < n {
			var total2 float64 = 0.0
			_ = total2
			var k2 int = 0
			_ = k2
			for k2 < i {
				total2 = (total2 + (_index(_index(lower, i), k2) * _index(_index(upper, k2), j2)))
				k2 = (k2 + 1)
			}
			_setIndex(_index(upper, i), j2, (_index(_index(mat, i), j2) - total2))
			j2 = (j2 + 1)
		}
		i = (i + 1)
	}
	return LU{
		Lower: lower,
		Upper: upper,
	}
}

func print_matrix(mat [][]float64) {
	var i int = 0
	_ = i
	for i < len(mat) {
		var line string = ""
		_ = line
		var j int = 0
		_ = j
		for j < len(_index(mat, i)) {
			line = (line + fmt.Sprint(_index(_index(mat, i), j)))
			if (j + 1) < len(_index(mat, i)) {
				line = (line + " ")
			}
			j = (j + 1)
		}
		fmt.Println(line)
		i = (i + 1)
	}
}

var matrix [][]float64

var result LU

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		matrix = [][]float64{[]float64{2.0, (0 - 2.0), 1.0}, []float64{0.0, 1.0, 2.0}, []float64{5.0, 3.0, 1.0}}
		result = lu_decomposition(func(v any) [][]float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]float64{}
				}
				out := make([][]float64, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []float64 {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]float64); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []float64{}
							}
							out := make([]float64, len(arr))
							for i, x := range arr {
								out[i] = x.(float64)
							}
							return out
						}
						return v.([]float64)
					}(x)
				}
				return out
			}
			return v.([][]float64)
		}(matrix))
		print_matrix(func(v any) [][]float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]float64{}
				}
				out := make([][]float64, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []float64 {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]float64); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []float64{}
							}
							out := make([]float64, len(arr))
							for i, x := range arr {
								out[i] = x.(float64)
							}
							return out
						}
						return v.([]float64)
					}(x)
				}
				return out
			}
			return v.([][]float64)
		}(result.Lower))
		print_matrix(func(v any) [][]float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]float64{}
				}
				out := make([][]float64, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []float64 {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]float64); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []float64{}
							}
							out := make([]float64, len(arr))
							for i, x := range arr {
								out[i] = x.(float64)
							}
							return out
						}
						return v.([]float64)
					}(x)
				}
				return out
			}
			return v.([][]float64)
		}(result.Upper))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
