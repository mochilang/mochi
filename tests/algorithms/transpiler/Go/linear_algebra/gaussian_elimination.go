//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-15 21:35:55 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"strings"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		return
	}
	s[idx] = v
}

func retroactive_resolution(coefficients [][]float64, vector [][]float64) [][]float64 {
	var rows int = len(coefficients)
	_ = rows
	var x [][]float64 = [][]float64{}
	_ = x
	var i int = 0
	_ = i
	for i < rows {
		var inner []float64 = []float64{}
		_ = inner
		inner = append(inner, 0.0)
		x = append(x, inner)
		i = (i + 1)
	}
	var r int = (rows - 1)
	_ = r
	for r >= 0 {
		var total float64 = 0.0
		_ = total
		var c int = (r + 1)
		_ = c
		for c < rows {
			total = (total + (_index(_index(coefficients, r), c) * _index(_index(x, c), 0)))
			c = (c + 1)
		}
		_setIndex(_index(x, r), 0, (float64((_index(_index(vector, r), 0) - total)) / float64(_index(_index(coefficients, r), r))))
		r = (r - 1)
	}
	return x
}

func gaussian_elimination(coefficients [][]float64, vector [][]float64) [][]float64 {
	var rows int = len(coefficients)
	_ = rows
	var columns int = len(_index(coefficients, 0))
	_ = columns
	if rows != columns {
		return func(v any) [][]float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]float64{}
				}
				out := make([][]float64, len(arr))
				for i, x := range arr {
					out[i] = func(v any) []float64 {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]float64); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []float64{}
							}
							out := make([]float64, len(arr))
							for i, x := range arr {
								out[i] = x.(float64)
							}
							return out
						}
						return v.([]float64)
					}(x)
				}
				return out
			}
			return v.([][]float64)
		}([][]float64{})
	}
	var augmented [][]float64 = [][]float64{}
	_ = augmented
	var i int = 0
	_ = i
	for i < rows {
		var row []float64 = []float64{}
		_ = row
		var j int = 0
		_ = j
		for j < columns {
			row = append(row, _index(_index(coefficients, i), j))
			j = (j + 1)
		}
		row = append(row, _index(_index(vector, i), 0))
		augmented = append(augmented, row)
		i = (i + 1)
	}
	var row_idx int = 0
	_ = row_idx
	for row_idx < (rows - 1) {
		var pivot float64 = _index(_index(augmented, row_idx), row_idx)
		_ = pivot
		var col int = (row_idx + 1)
		_ = col
		for col < rows {
			var factor float64 = (float64(_index(_index(augmented, col), row_idx)) / float64(pivot))
			_ = factor
			var k int = row_idx
			_ = k
			for k < (columns + 1) {
				_setIndex(_index(augmented, col), k, (_index(_index(augmented, col), k) - (factor * _index(_index(augmented, row_idx), k))))
				k = (k + 1)
			}
			col = (col + 1)
		}
		row_idx = (row_idx + 1)
	}
	var coeffs [][]float64 = [][]float64{}
	_ = coeffs
	var vec [][]float64 = [][]float64{}
	_ = vec
	var r int = 0
	_ = r
	for r < rows {
		var row []float64 = []float64{}
		_ = row
		var c int = 0
		_ = c
		for c < columns {
			row = append(row, _index(_index(augmented, r), c))
			c = (c + 1)
		}
		coeffs = append(coeffs, row)
		vec = append(vec, []float64{_index(_index(augmented, r), columns)})
		r = (r + 1)
	}
	var x [][]float64 = retroactive_resolution(func(v any) [][]float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]float64{}
			}
			out := make([][]float64, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []float64 {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]float64); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []float64{}
						}
						out := make([]float64, len(arr))
						for i, x := range arr {
							out[i] = x.(float64)
						}
						return out
					}
					return v.([]float64)
				}(x)
			}
			return out
		}
		return v.([][]float64)
	}(coeffs), func(v any) [][]float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]float64{}
			}
			out := make([][]float64, len(arr))
			for i, x := range arr {
				out[i] = func(v any) []float64 {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]float64); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []float64{}
						}
						out := make([]float64, len(arr))
						for i, x := range arr {
							out[i] = x.(float64)
						}
						return out
					}
					return v.([]float64)
				}(x)
			}
			return out
		}
		return v.([][]float64)
	}(vec))
	_ = x
	_ = x
	return x
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(func() string {
			b, _ := json.Marshal(gaussian_elimination(func(v any) [][]float64 {
				if v == nil {
					return nil
				}
				if vv, ok := v.([][]float64); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return [][]float64{}
					}
					out := make([][]float64, len(arr))
					for i, x := range arr {
						out[i] = func(v any) []float64 {
							if v == nil {
								return nil
							}
							if vv, ok := v.([]float64); ok {
								return vv
							}
							if arr, ok := v.([]any); ok {
								if len(arr) == 0 {
									return []float64{}
								}
								out := make([]float64, len(arr))
								for i, x := range arr {
									out[i] = x.(float64)
								}
								return out
							}
							return v.([]float64)
						}(x)
					}
					return out
				}
				return v.([][]float64)
			}([][]float64{[]float64{1.0, (0 - 4.0), (0 - 2.0)}, []float64{5.0, 2.0, (0 - 2.0)}, []float64{1.0, (0 - 1.0), 0.0}}), func(v any) [][]float64 {
				if v == nil {
					return nil
				}
				if vv, ok := v.([][]float64); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return [][]float64{}
					}
					out := make([][]float64, len(arr))
					for i, x := range arr {
						out[i] = func(v any) []float64 {
							if v == nil {
								return nil
							}
							if vv, ok := v.([]float64); ok {
								return vv
							}
							if arr, ok := v.([]any); ok {
								if len(arr) == 0 {
									return []float64{}
								}
								out := make([]float64, len(arr))
								for i, x := range arr {
									out[i] = x.(float64)
								}
								return out
							}
							return v.([]float64)
						}(x)
					}
					return out
				}
				return v.([][]float64)
			}([][]float64{[]float64{(0 - 2.0)}, []float64{(0 - 3.0)}, []float64{4.0}})))
			s := string(b)
			s = strings.ReplaceAll(s, ":", ": ")
			s = strings.ReplaceAll(s, ",", ", ")
			s = strings.ReplaceAll(s, "}, {", "},{")
			return s
		}())
		fmt.Println(func() string {
			b, _ := json.Marshal(gaussian_elimination(func(v any) [][]float64 {
				if v == nil {
					return nil
				}
				if vv, ok := v.([][]float64); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return [][]float64{}
					}
					out := make([][]float64, len(arr))
					for i, x := range arr {
						out[i] = func(v any) []float64 {
							if v == nil {
								return nil
							}
							if vv, ok := v.([]float64); ok {
								return vv
							}
							if arr, ok := v.([]any); ok {
								if len(arr) == 0 {
									return []float64{}
								}
								out := make([]float64, len(arr))
								for i, x := range arr {
									out[i] = x.(float64)
								}
								return out
							}
							return v.([]float64)
						}(x)
					}
					return out
				}
				return v.([][]float64)
			}([][]float64{[]float64{1.0, 2.0}, []float64{5.0, 2.0}}), func(v any) [][]float64 {
				if v == nil {
					return nil
				}
				if vv, ok := v.([][]float64); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return [][]float64{}
					}
					out := make([][]float64, len(arr))
					for i, x := range arr {
						out[i] = func(v any) []float64 {
							if v == nil {
								return nil
							}
							if vv, ok := v.([]float64); ok {
								return vv
							}
							if arr, ok := v.([]any); ok {
								if len(arr) == 0 {
									return []float64{}
								}
								out := make([]float64, len(arr))
								for i, x := range arr {
									out[i] = x.(float64)
								}
								return out
							}
							return v.([]float64)
						}(x)
					}
					return out
				}
				return v.([][]float64)
			}([][]float64{[]float64{5.0}, []float64{5.0}})))
			s := string(b)
			s = strings.ReplaceAll(s, ":", ": ")
			s = strings.ReplaceAll(s, ",", ", ")
			s = strings.ReplaceAll(s, "}, {", "},{")
			return s
		}())
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
