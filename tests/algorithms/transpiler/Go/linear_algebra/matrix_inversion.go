//go:build ignore

// Generated by Mochi v0.10.66 on 2025-08-15 21:36:01 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"strings"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _index[T any](s []T, i any) T {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		var zero T
		return zero
	}
	return s[idx]
}

func _setIndex[T any](s []T, i any, v T) {
	idx := func(v any) int {
		switch vv := v.(type) {
		case int:
			return vv
		case int64:
			return int(vv)
		case float64:
			return int(vv)
		case float32:
			return int(vv)
		default:
			return v.(int)
		}
	}(i)
	if idx < 0 {
		idx += len(s)
	}
	if idx < 0 || idx >= len(s) {
		return
	}
	s[idx] = v
}

func invert_matrix(matrix [][]float64) [][]float64 {
	var n int = len(matrix)
	_ = n
	var aug [][]float64 = [][]float64{}
	_ = aug
	var i int = 0
	_ = i
	for i < n {
		var row []float64 = []float64{}
		_ = row
		var j int = 0
		_ = j
		for j < n {
			row = append(row, _index(_index(matrix, i), j))
			j = (j + 1)
		}
		var k int = 0
		_ = k
		for k < n {
			if i == k {
				row = append(row, 1.0)
			} else {
				row = append(row, 0.0)
			}
			k = (k + 1)
		}
		aug = append(aug, row)
		i = (i + 1)
	}
	var col int = 0
	_ = col
	for col < n {
		var pivot_row int = col
		_ = pivot_row
		var r int = col
		_ = r
		for r < n {
			if _index(_index(aug, r), col) != 0.0 {
				pivot_row = r
				break
			}
			r = (r + 1)
		}
		if _index(_index(aug, pivot_row), col) == 0.0 {
			panic("Matrix is not invertible")
		}
		if pivot_row != col {
			var temp []float64 = _index(aug, col)
			_ = temp
			_setIndex(aug, col, _index(aug, pivot_row))
			_setIndex(aug, pivot_row, temp)
		}
		var pivot float64 = _index(_index(aug, col), col)
		_ = pivot
		var c int = 0
		_ = c
		for c < (2 * n) {
			_setIndex(_index(aug, col), c, (float64(_index(_index(aug, col), c)) / float64(pivot)))
			c = (c + 1)
		}
		var r2 int = 0
		_ = r2
		for r2 < n {
			if r2 != col {
				var factor float64 = _index(_index(aug, r2), col)
				_ = factor
				var c2 int = 0
				_ = c2
				for c2 < (2 * n) {
					_setIndex(_index(aug, r2), c2, (_index(_index(aug, r2), c2) - (factor * _index(_index(aug, col), c2))))
					c2 = (c2 + 1)
				}
			}
			r2 = (r2 + 1)
		}
		col = (col + 1)
	}
	var inv [][]float64 = [][]float64{}
	_ = inv
	var r3 int = 0
	_ = r3
	for r3 < n {
		var row []float64 = []float64{}
		_ = row
		var c3 int = 0
		_ = c3
		for c3 < n {
			row = append(row, _index(_index(aug, r3), (c3+n)))
			c3 = (c3 + 1)
		}
		inv = append(inv, row)
		r3 = (r3 + 1)
	}
	return inv
}

var mat [][]float64

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mat = [][]float64{[]float64{4.0, 7.0}, []float64{2.0, 6.0}}
		fmt.Println("Original Matrix:")
		fmt.Println(func() string {
			b, _ := json.Marshal(mat)
			s := string(b)
			s = strings.ReplaceAll(s, ":", ": ")
			s = strings.ReplaceAll(s, ",", ", ")
			s = strings.ReplaceAll(s, "}, {", "},{")
			return s
		}())
		fmt.Println("Inverted Matrix:")
		fmt.Println(func() string {
			b, _ := json.Marshal(invert_matrix(func(v any) [][]float64 {
				if v == nil {
					return nil
				}
				if vv, ok := v.([][]float64); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return [][]float64{}
					}
					out := make([][]float64, len(arr))
					for i, x := range arr {
						out[i] = func(v any) []float64 {
							if v == nil {
								return nil
							}
							if vv, ok := v.([]float64); ok {
								return vv
							}
							if arr, ok := v.([]any); ok {
								if len(arr) == 0 {
									return []float64{}
								}
								out := make([]float64, len(arr))
								for i, x := range arr {
									out[i] = x.(float64)
								}
								return out
							}
							return v.([]float64)
						}(x)
					}
					return out
				}
				return v.([][]float64)
			}(mat)))
			s := string(b)
			s = strings.ReplaceAll(s, ":", ": ")
			s = strings.ReplaceAll(s, ",", ", ")
			s = strings.ReplaceAll(s, "}, {", "},{")
			return s
		}())
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
