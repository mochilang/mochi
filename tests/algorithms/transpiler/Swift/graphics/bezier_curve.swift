// Generated by Mochi transpiler v0.10.59 on 2025-08-07 08:55:28 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func n_choose_k(_ n: Int, _ k: Int) -> Double {
        if ((k < 0) || (k > n)) {
            return 0.0
        }
        if ((k == 0) || (k == n)) {
            return 1.0
        }
        var result: Double = 1.0
        var i: Int = 1
        while (i <= k) {
            result = Double(((result * Double((1.0 * Double(Int(((n &- k) &+ i)))))) / Double((1.0 * Double(i)))))
            i = Int((i &+ 1))
        }
        return result
    }
    func pow_float(_ base: Double, _ exp: Int) -> Double {
        var result: Double = 1.0
        var i: Int = 0
        while (i < exp) {
            result = Double((result * base))
            i = Int((i &+ 1))
        }
        return result
    }
    func basis_function(_ points: [[Double]], _ t: Double) -> [Double] {
        let degree = (Int(((points).count)) &- 1)
        var res: [Double] = ([] as! [Double])
        var i: Int = 0
        while (i <= degree) {
            let coef = Double(n_choose_k(degree, i))
            let term = (Double(pow_float(Double((1.0 - t)), (degree &- i))) * Double(pow_float(Double(t), i)))
            res = (_append(res, (coef * term)) as! [Double])
            i = Int((i &+ 1))
        }
        return res
    }
    func bezier_point(_ points: [[Double]], _ t: Double) -> [Double] {
        let basis: [Double] = (basis_function((points as! [[Double]]), Double(t)) as! [Double])
        var x: Double = 0.0
        var y: Double = 0.0
        var i: Int = 0
        while (i < Int(((points).count))) {
            x = Double((x + (Double(basis[i]) * Double(points[i][0]))))
            y = Double((y + (Double(basis[i]) * Double(points[i][1]))))
            i = Int((i &+ 1))
        }
        return ([x, y] as! [Double])
    }
    let control: [[Double]] = ([([1.0, 1.0] as! [Double]), ([1.0, 2.0] as! [Double])] as! [[Double]])
    print(_p("[" + (basis_function((control as! [[Double]]), 0.0) as! [Double]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    print(_p("[" + (basis_function((control as! [[Double]]), 1.0) as! [Double]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    print(_p("[" + (bezier_point((control as! [[Double]]), 0.0) as! [Double]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    print(_p("[" + (bezier_point((control as! [[Double]]), 1.0) as! [Double]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
