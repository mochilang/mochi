// Generated by Mochi transpiler v0.10.59 on 2025-08-07 08:56:32 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let PI: Double = 3.141592653589793
    func floor(_ x: Double) -> Double {
        var i: Int = Int(x)
        if (Double(i) > x) {
            i = Int((i &- 1))
        }
        return Double(i)
    }
    func modf(_ x: Double, _ m: Double) -> Double {
        return (x - (Double(floor(Double((x / m)))) * m))
    }
    func sin_taylor(_ x: Double) -> Double {
        var term: Double = x
        var sum: Double = x
        var i: Int = 1
        while (i < 10) {
            let k1 = (2.0 * Double(i))
            let k2 = (k1 + 1.0)
            term = Double((((-term * x) * x) / Double((k1 * k2))))
            sum = Double((sum + term))
            i = Int((i &+ 1))
        }
        return sum
    }
    func cos_taylor(_ x: Double) -> Double {
        var term: Double = 1.0
        var sum: Double = 1.0
        var i: Int = 1
        while (i < 10) {
            let k1 = ((2.0 * Double(i)) - 1.0)
            let k2 = (2.0 * Double(i))
            term = Double((((-term * x) * x) / Double((k1 * k2))))
            sum = Double((sum + term))
            i = Int((i &+ 1))
        }
        return sum
    }
    func convert_to_2d(_ x: Double, _ y: Double, _ z: Double, _ scale: Double, _ distance: Double) -> [Double] {
        let projected_x = (Double((Double((x * distance)) / Double((z + distance)))) * scale)
        let projected_y = (Double((Double((y * distance)) / Double((z + distance)))) * scale)
        return ([projected_x, projected_y] as! [Double])
    }
    func rotate(_ x: Double, _ y: Double, _ z: Double, _ axis: String, _ angle: Double) -> [Double] {
        var angle: Double = (((Double(modf(Double(angle), 360.0)) / 450.0) * 180.0) / PI)
        angle = Double(modf(Double(angle), Double((2.0 * PI))))
        if (angle > PI) {
            angle = Double((angle - (2.0 * PI)))
        }
        if (axis == "z") {
            let new_x = ((x * Double(cos_taylor(Double(angle)))) - (y * Double(sin_taylor(Double(angle)))))
            let new_y = ((y * Double(cos_taylor(Double(angle)))) + (x * Double(sin_taylor(Double(angle)))))
            let new_z = z
            return ([new_x, new_y, new_z] as! [Double])
        }
        if (axis == "x") {
            let new_y = ((y * Double(cos_taylor(Double(angle)))) - (z * Double(sin_taylor(Double(angle)))))
            let new_z = ((z * Double(cos_taylor(Double(angle)))) + (y * Double(sin_taylor(Double(angle)))))
            let new_x = x
            return ([new_x, new_y, new_z] as! [Double])
        }
        if (axis == "y") {
            let new_x = ((x * Double(cos_taylor(Double(angle)))) - (z * Double(sin_taylor(Double(angle)))))
            let new_z = ((z * Double(cos_taylor(Double(angle)))) + (x * Double(sin_taylor(Double(angle)))))
            let new_y = y
            return ([new_x, new_y, new_z] as! [Double])
        }
        print(_p("not a valid axis, choose one of 'x', 'y', 'z'"))
        return ([0.0, 0.0, 0.0] as! [Double])
    }
    print(_p("[" + (convert_to_2d(1.0, 2.0, 3.0, 10.0, 10.0) as! [Double]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    print(_p("[" + (rotate(1.0, 2.0, 3.0, "y", 90.0) as! [Double]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
