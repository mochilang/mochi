// Generated by Mochi transpiler v0.10.64 on 2025-08-13 12:56:45 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
struct Point: Codable {
    var x: Int
    var y: Int
    init() {
        self.x = 0
        self.y = 0
    }
    init(x: Int, y: Int) {
        self.x = x
        self.y = y
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func abs_int(_ n: Int) -> Int {
        if (n < 0) {
            return -n
        }
        return n
    }
    func round_int(_ x: Double) -> Int {
        return _int((x + 0.5))
    }
    func digital_differential_analyzer_line(_ p1: Point, _ p2: Point) -> [Point] {
        let dx = (p2.x &- p1.x)
        let dy = (p2.y &- p1.y)
        let abs_dx = _int(abs_int(dx))
        let abs_dy = _int(abs_int(dy))
        let steps = _int(((abs_dx > abs_dy) ? abs_dx : abs_dy))
        let x_increment = (Double(dx) / Double(steps))
        let y_increment = (Double(dy) / Double(steps))
        var coordinates: [Point] = ([] as! [Point])
        var x = Double(p1.x)
        var y = Double(p1.y)
        var i = 0
        while (i < steps) {
            x = Double((x + x_increment))
            y = Double((y + y_increment))
            let point = Point(x: _int(round_int(Double(x))), y: _int(round_int(Double(y))))
            coordinates = (_append(coordinates, point) as! [Point])
            i = _int((i &+ 1))
        }
        return coordinates
    }
    func main() {
        let result: [Point] = (digital_differential_analyzer_line((Point(x: 1, y: 1) as! Point), (Point(x: 4, y: 4) as! Point)) as! [Point])
        print(_p("[" + result.map{ if let s = $0 as? String { "\"" + s.replacingOccurrences(of: "\"", with: "\\\"") + "\"" } else { _p($0) } }.joined(separator: ", ") + "]"))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
