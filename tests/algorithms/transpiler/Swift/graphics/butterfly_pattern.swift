// Generated by Mochi transpiler v0.10.59 on 2025-08-07 08:55:30 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func repeat_char(_ ch: String, _ count: Int) -> String {
        var result: String = ""
        var i: Int = 0
        while (i < count) {
            result = ((result + ch) as! String)
            i = Int((i &+ 1))
        }
        return result
    }
    func butterfly_pattern(_ n: Int) -> String {
        var lines: [String] = ([] as! [String])
        var i: Int = 1
        while (i < n) {
            let left = String(describing: repeat_char("*", i))
            let mid = String(describing: repeat_char(" ", ((2 &* Int((n &- i))) &- 1)))
            let right = String(describing: repeat_char("*", i))
            lines = (_append(lines, ((left + mid) + right)) as! [String])
            i = Int((i &+ 1))
        }
        lines = (_append(lines, String(describing: repeat_char("*", ((2 &* n) &- 1)))) as! [String])
        var j: Int = (n &- 1)
        while (j > 0) {
            let left = String(describing: repeat_char("*", j))
            let mid = String(describing: repeat_char(" ", ((2 &* Int((n &- j))) &- 1)))
            let right = String(describing: repeat_char("*", j))
            lines = (_append(lines, ((left + mid) + right)) as! [String])
            j = Int((j &- 1))
        }
        var out: String = ""
        var k: Int = 0
        while (k < Int(((lines).count))) {
            if (k > 0) {
                out = ((out + "\n") as! String)
            }
            out = ((out + (lines[k] as! String)) as! String)
            k = Int((k &+ 1))
        }
        return out
    }
    print(_p(String(describing: butterfly_pattern(3))))
    print(_p(String(describing: butterfly_pattern(5))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
