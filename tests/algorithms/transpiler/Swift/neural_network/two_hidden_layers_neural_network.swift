// Generated by Mochi transpiler v0.10.73 on 2025-08-25 22:34:35 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.isNaN || d.isInfinite {
                return String(d)
            }
            if d.rounded(.towardZero) == d {
                // avoid overflow when converting to Int64
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _num(_ v: Any) -> Double {
    if let d = v as? Double { return d }
    if let i = v as? Int { return Double(i) }
    if let i = v as? Int64 { return Double(i) }
    return 0
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first!
}
func _idx<K: Hashable, V>(_ m: [K: V], _ k: K) -> V? {
    return m[k]
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    var i = idx
    if i < 0 { i += out.count }
    if i < out.count {
        out[i] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: i - out.count + 1))
        out[i] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
struct Network: Codable {
    var w1: [[Double]]
    var w2: [[Double]]
    var w3: [[Double]]
    init() {
        self.w1 = []
        self.w2 = []
        self.w3 = []
    }
    init(w1: [[Double]], w2: [[Double]], w3: [[Double]]) {
        self.w1 = w1
        self.w2 = w2
        self.w3 = w3
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func exp_approx(_ x: Double) -> Double {
        var sum: Double = 1.0
        var term: Double = 1.0
        var i: Int = 1
        while ((i < 10)) {
            term = _num(((term * x) / _num(Double(i))))
            sum = _num((sum + term))
            i = _int((i &+ 1))
        }
        return sum
    }
    func sigmoid(_ x: Double) -> Double {
        return (1.0 / _num((1.0 + _num(exp_approx(_num(-x))))))
    }
    func sigmoid_derivative(_ x: Double) -> Double {
        return (x * _num((1.0 - x)))
    }
    func new_network() -> Network {
        return Network(w1: ({
            var _arr: [[Double]] = []
            _arr = _append(_arr, ({
                var _arr: [Double] = []
                _arr = _append(_arr, 0.10000000000000001)
                _arr = _append(_arr, 0.20000000000000001)
                _arr = _append(_arr, 0.29999999999999999)
                _arr = _append(_arr, 0.40000000000000002)
                return _arr
            }() as! [Double]))
            _arr = _append(_arr, ({
                var _arr: [Double] = []
                _arr = _append(_arr, 0.5)
                _arr = _append(_arr, 0.59999999999999998)
                _arr = _append(_arr, 0.69999999999999996)
                _arr = _append(_arr, 0.80000000000000004)
                return _arr
            }() as! [Double]))
            _arr = _append(_arr, ({
                var _arr: [Double] = []
                _arr = _append(_arr, 0.90000000000000002)
                _arr = _append(_arr, 1.0)
                _arr = _append(_arr, 1.1000000000000001)
                _arr = _append(_arr, 1.2)
                return _arr
            }() as! [Double]))
            return _arr
        }() as! [[Double]]), w2: ({
            var _arr: [[Double]] = []
            _arr = _append(_arr, ({
                var _arr: [Double] = []
                _arr = _append(_arr, 0.10000000000000001)
                _arr = _append(_arr, 0.20000000000000001)
                _arr = _append(_arr, 0.29999999999999999)
                return _arr
            }() as! [Double]))
            _arr = _append(_arr, ({
                var _arr: [Double] = []
                _arr = _append(_arr, 0.40000000000000002)
                _arr = _append(_arr, 0.5)
                _arr = _append(_arr, 0.59999999999999998)
                return _arr
            }() as! [Double]))
            _arr = _append(_arr, ({
                var _arr: [Double] = []
                _arr = _append(_arr, 0.69999999999999996)
                _arr = _append(_arr, 0.80000000000000004)
                _arr = _append(_arr, 0.90000000000000002)
                return _arr
            }() as! [Double]))
            _arr = _append(_arr, ({
                var _arr: [Double] = []
                _arr = _append(_arr, 1.0)
                _arr = _append(_arr, 1.1000000000000001)
                _arr = _append(_arr, 1.2)
                return _arr
            }() as! [Double]))
            return _arr
        }() as! [[Double]]), w3: ({
            var _arr: [[Double]] = []
            _arr = _append(_arr, ({
                var _arr: [Double] = []
                _arr = _append(_arr, 0.10000000000000001)
                return _arr
            }() as! [Double]))
            _arr = _append(_arr, ({
                var _arr: [Double] = []
                _arr = _append(_arr, 0.20000000000000001)
                return _arr
            }() as! [Double]))
            _arr = _append(_arr, ({
                var _arr: [Double] = []
                _arr = _append(_arr, 0.29999999999999999)
                return _arr
            }() as! [Double]))
            return _arr
        }() as! [[Double]]))
    }
    func feedforward(_ net: Network, _ input: [Double]) -> Double {
        var hidden1: [Double] = ([] as! [Double])
        var j: Int = 0
        while ((j < 4)) {
            var sum1: Double = 0.0
            var i: Int = 0
            while ((i < 3)) {
                sum1 = _num((sum1 + (_num(_idx(input, i)) * _num(_idx(_idx(net.w1, i), j)))))
                i = _int((i &+ 1))
            }
            hidden1 = (_append(hidden1, _num(sigmoid(_num(sum1)))) as! [Double])
            j = _int((j &+ 1))
        }
        var hidden2: [Double] = ([] as! [Double])
        var k: Int = 0
        while ((k < 3)) {
            var sum2: Double = 0.0
            var j2: Int = 0
            while ((j2 < 4)) {
                sum2 = _num((sum2 + (_num(_idx(hidden1, j2)) * _num(_idx(_idx(net.w2, j2), k)))))
                j2 = _int((j2 &+ 1))
            }
            hidden2 = (_append(hidden2, _num(sigmoid(_num(sum2)))) as! [Double])
            k = _int((k &+ 1))
        }
        var sum3: Double = 0.0
        var k2: Int = 0
        while ((k2 < 3)) {
            sum3 = _num((sum3 + (_num(_idx(hidden2, k2)) * _num(_idx(_idx(net.w3, k2), 0)))))
            k2 = _int((k2 &+ 1))
        }
        let out = _num(sigmoid(_num(sum3)))
        return out
    }
    func train(_ net: inout Network, _ inputs: [[Double]], _ outputs: [Double], _ iterations: Int) {
        var iter: Int = 0
        while ((iter < iterations)) {
            var s: Int = 0
            while ((s < _int(((inputs).count)))) {
                let inp: [Double] = (_idx(inputs, s) as! [Double])
                let target = _num(_idx(outputs, s))
                var hidden1: [Double] = ([] as! [Double])
                var j: Int = 0
                while ((j < 4)) {
                    var sum1: Double = 0.0
                    var i: Int = 0
                    while ((i < 3)) {
                        sum1 = _num((sum1 + (_num(_idx(inp, i)) * _num(_idx(_idx(net.w1, i), j)))))
                        i = _int((i &+ 1))
                    }
                    hidden1 = (_append(hidden1, _num(sigmoid(_num(sum1)))) as! [Double])
                    j = _int((j &+ 1))
                }
                var hidden2: [Double] = ([] as! [Double])
                var k: Int = 0
                while ((k < 3)) {
                    var sum2: Double = 0.0
                    var j2: Int = 0
                    while ((j2 < 4)) {
                        sum2 = _num((sum2 + (_num(_idx(hidden1, j2)) * _num(_idx(_idx(net.w2, j2), k)))))
                        j2 = _int((j2 &+ 1))
                    }
                    hidden2 = (_append(hidden2, _num(sigmoid(_num(sum2)))) as! [Double])
                    k = _int((k &+ 1))
                }
                var sum3: Double = 0.0
                var k3: Int = 0
                while ((k3 < 3)) {
                    sum3 = _num((sum3 + (_num(_idx(hidden2, k3)) * _num(_idx(_idx(net.w3, k3), 0)))))
                    k3 = _int((k3 &+ 1))
                }
                let output = _num(sigmoid(_num(sum3)))
                let error = (target - output)
                let delta_output = (error * _num(sigmoid_derivative(_num(output))))
                var new_w3: [[Double]] = ([] as! [[Double]])
                var k4: Int = 0
                while ((k4 < 3)) {
                    var w3row: [Double] = (_idx(net.w3, k4) as! [Double])
                    w3row = _set(w3row, 0, { let _tmp0 = _num((_num(_idx(w3row, 0)) + (_num(_idx(hidden2, k4)) * delta_output))); return _tmp0 }())
                    new_w3 = (_append(new_w3, w3row) as! [[Double]])
                    k4 = _int((k4 &+ 1))
                }
                net.w3 = (new_w3 as! [[Double]])
                var delta_hidden2: [Double] = ([] as! [Double])
                var k5: Int = 0
                while ((k5 < 3)) {
                    let row: [Double] = (_idx(net.w3, k5) as! [Double])
                    let dh2 = ((_num(_idx(row, 0)) * delta_output) * _num(sigmoid_derivative(_num(_idx(hidden2, k5)))))
                    delta_hidden2 = (_append(delta_hidden2, dh2) as! [Double])
                    k5 = _int((k5 &+ 1))
                }
                var new_w2: [[Double]] = ([] as! [[Double]])
                j = 0
                while ((j < 4)) {
                    var w2row: [Double] = (_idx(net.w2, j) as! [Double])
                    var k6: Int = 0
                    while ((k6 < 3)) {
                        w2row = _set(w2row, k6, { let _tmp1 = _num((_num(_idx(w2row, k6)) + (_num(_idx(hidden1, j)) * _num(_idx(delta_hidden2, k6))))); return _tmp1 }())
                        k6 = _int((k6 &+ 1))
                    }
                    new_w2 = (_append(new_w2, w2row) as! [[Double]])
                    j = _int((j &+ 1))
                }
                net.w2 = (new_w2 as! [[Double]])
                var delta_hidden1: [Double] = ([] as! [Double])
                j = 0
                while ((j < 4)) {
                    var sumdh: Double = 0.0
                    var k7: Int = 0
                    while ((k7 < 3)) {
                        let row2: [Double] = (_idx(net.w2, j) as! [Double])
                        sumdh = _num((sumdh + (_num(_idx(row2, k7)) * _num(_idx(delta_hidden2, k7)))))
                        k7 = _int((k7 &+ 1))
                    }
                    delta_hidden1 = (_append(delta_hidden1, (sumdh * _num(sigmoid_derivative(_num(_idx(hidden1, j)))))) as! [Double])
                    j = _int((j &+ 1))
                }
                var new_w1: [[Double]] = ([] as! [[Double]])
                var i2: Int = 0
                while ((i2 < 3)) {
                    var w1row: [Double] = (_idx(net.w1, i2) as! [Double])
                    j = 0
                    while ((j < 4)) {
                        w1row = _set(w1row, j, { let _tmp2 = _num((_num(_idx(w1row, j)) + (_num(_idx(inp, i2)) * _num(_idx(delta_hidden1, j))))); return _tmp2 }())
                        j = _int((j &+ 1))
                    }
                    new_w1 = (_append(new_w1, w1row) as! [[Double]])
                    i2 = _int((i2 &+ 1))
                }
                net.w1 = (new_w1 as! [[Double]])
                s = _int((s &+ 1))
            }
            iter = _int((iter &+ 1))
        }
    }
    func predict(_ net: Network, _ input: [Double]) -> Int {
        let out = _num(feedforward((net as! Network), (input as! [Double])))
        if ((out > 0.59999999999999998)) {
            return 1
        }
        return 0
    }
    func example() -> Int {
        let inputs: [[Double]] = ({
            var _arr: [[Double]] = []
            _arr = _append(_arr, ({
                var _arr: [Double] = []
                _arr = _append(_arr, 0.0)
                _arr = _append(_arr, 0.0)
                _arr = _append(_arr, 0.0)
                return _arr
            }() as! [Double]))
            _arr = _append(_arr, ({
                var _arr: [Double] = []
                _arr = _append(_arr, 0.0)
                _arr = _append(_arr, 0.0)
                _arr = _append(_arr, 1.0)
                return _arr
            }() as! [Double]))
            _arr = _append(_arr, ({
                var _arr: [Double] = []
                _arr = _append(_arr, 0.0)
                _arr = _append(_arr, 1.0)
                _arr = _append(_arr, 0.0)
                return _arr
            }() as! [Double]))
            _arr = _append(_arr, ({
                var _arr: [Double] = []
                _arr = _append(_arr, 0.0)
                _arr = _append(_arr, 1.0)
                _arr = _append(_arr, 1.0)
                return _arr
            }() as! [Double]))
            _arr = _append(_arr, ({
                var _arr: [Double] = []
                _arr = _append(_arr, 1.0)
                _arr = _append(_arr, 0.0)
                _arr = _append(_arr, 0.0)
                return _arr
            }() as! [Double]))
            _arr = _append(_arr, ({
                var _arr: [Double] = []
                _arr = _append(_arr, 1.0)
                _arr = _append(_arr, 0.0)
                _arr = _append(_arr, 1.0)
                return _arr
            }() as! [Double]))
            _arr = _append(_arr, ({
                var _arr: [Double] = []
                _arr = _append(_arr, 1.0)
                _arr = _append(_arr, 1.0)
                _arr = _append(_arr, 0.0)
                return _arr
            }() as! [Double]))
            _arr = _append(_arr, ({
                var _arr: [Double] = []
                _arr = _append(_arr, 1.0)
                _arr = _append(_arr, 1.0)
                _arr = _append(_arr, 1.0)
                return _arr
            }() as! [Double]))
            return _arr
        }() as! [[Double]])
        let outputs: [Double] = ({
            var _arr: [Double] = []
            _arr = _append(_arr, 0.0)
            _arr = _append(_arr, 1.0)
            _arr = _append(_arr, 1.0)
            _arr = _append(_arr, 0.0)
            _arr = _append(_arr, 1.0)
            _arr = _append(_arr, 0.0)
            _arr = _append(_arr, 0.0)
            _arr = _append(_arr, 1.0)
            return _arr
        }() as! [Double])
        var net = new_network()
        _ = train(&net, (inputs as! [[Double]]), (outputs as! [Double]), 10)
        let result = _int(predict((net as! Network), ({
            var _arr: [Double] = []
            _arr = _append(_arr, 1.0)
            _arr = _append(_arr, 1.0)
            _arr = _append(_arr, 1.0)
            return _arr
        }() as! [Double])))
        print(_p(_p(result)))
        return result
    }
    func main() {
        _ = _int(example())
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
