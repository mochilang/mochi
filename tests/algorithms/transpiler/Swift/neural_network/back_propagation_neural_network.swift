// Generated by Mochi transpiler v0.10.64 on 2025-08-12 16:30:25 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
struct Layer: Codable {
    var units: Int
    var weight: [[Double]]
    var bias: [Double]
    var output: [Double]
    var xdata: [Double]
    var learn_rate: Double
    init() {
        self.units = 0
        self.weight = []
        self.bias = []
        self.output = []
        self.xdata = []
        self.learn_rate = 0
    }
    init(units: Int, weight: [[Double]], bias: [Double], output: [Double], xdata: [Double], learn_rate: Double) {
        self.units = units
        self.weight = weight
        self.bias = bias
        self.output = output
        self.xdata = xdata
        self.learn_rate = learn_rate
    }
}
struct Data: Codable {
    var x: [[Double]]
    var y: [[Double]]
    init() {
        self.x = []
        self.y = []
    }
    init(x: [[Double]], y: [[Double]]) {
        self.x = x
        self.y = y
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    var seed = 1
    func rand() -> Int {
        seed = _int(((_int(((seed &* 1103515245) &+ 12345)) % 2147483648 + 2147483648) % 2147483648))
        return seed
    }
    func random() -> Double {
        return (Double((1.0 * Double(_int(rand())))) / 2147483648.0)
    }
    func expApprox(_ x: Double) -> Double {
        var y: Double = x
        var is_neg: Bool = false
        if (x < 0.0) {
            is_neg = true
            y = Double(-x)
        }
        var term: Double = 1.0
        var sum: Double = 1.0
        var n: Int = 1
        while (n < 30) {
            term = Double(((term * y) / Double(n)))
            sum = Double((sum + term))
            n = _int((n &+ 1))
        }
        if is_neg {
            return (1.0 / sum)
        }
        return sum
    }
    func sigmoid(_ z: Double) -> Double {
        return (1.0 / Double((1.0 + Double(expApprox(Double(-z))))))
    }
    func sigmoid_vec(_ v: [Double]) -> [Double] {
        var res: [Double] = ([] as! [Double])
        var i = 0
        while (i < _int(((v).count))) {
            res = (_append(res, Double(sigmoid(Double(_idx(v, i))))) as! [Double])
            i = _int((i &+ 1))
        }
        return res
    }
    func sigmoid_derivative(_ out: [Double]) -> [Double] {
        var res: [Double] = ([] as! [Double])
        var i = 0
        while (i < _int(((out).count))) {
            let val = Double(_idx(out, i))
            res = (_append(res, (val * Double((1.0 - val)))) as! [Double])
            i = _int((i &+ 1))
        }
        return res
    }
    func random_vector(_ n: Int) -> [Double] {
        var v: [Double] = ([] as! [Double])
        var i = 0
        while (i < n) {
            v = (_append(v, (Double(random()) - 0.5)) as! [Double])
            i = _int((i &+ 1))
        }
        return v
    }
    func random_matrix(_ r: Int, _ c: Int) -> [[Double]] {
        var m: [[Double]] = ([] as! [[Double]])
        var i = 0
        while (i < r) {
            m = (_append(m, (random_vector(c) as! [Double])) as! [[Double]])
            i = _int((i &+ 1))
        }
        return m
    }
    func matvec(_ mat: [[Double]], _ vec: [Double]) -> [Double] {
        var res: [Double] = ([] as! [Double])
        var i = 0
        while (i < _int(((mat).count))) {
            var s = 0.0
            var j = 0
            while (j < _int(((vec).count))) {
                s = Double((s + (Double(_idx(_idx(mat, i)!, j)) * Double(_idx(vec, j)))))
                j = _int((j &+ 1))
            }
            res = (_append(res, s) as! [Double])
            i = _int((i &+ 1))
        }
        return res
    }
    func matTvec(_ mat: [[Double]], _ vec: [Double]) -> [Double] {
        var cols = _int((((_idx(mat, 0) as! [Double])).count))
        var res: [Double] = ([] as! [Double])
        var j = 0
        while (j < cols) {
            var s = 0.0
            var i = 0
            while (i < _int(((mat).count))) {
                s = Double((s + (Double(_idx(_idx(mat, i)!, j)) * Double(_idx(vec, i)))))
                i = _int((i &+ 1))
            }
            res = (_append(res, s) as! [Double])
            j = _int((j &+ 1))
        }
        return res
    }
    func vec_sub(_ a: [Double], _ b: [Double]) -> [Double] {
        var res: [Double] = ([] as! [Double])
        var i = 0
        while (i < _int(((a).count))) {
            res = (_append(res, (Double(_idx(a, i)) - Double(_idx(b, i)))) as! [Double])
            i = _int((i &+ 1))
        }
        return res
    }
    func vec_mul(_ a: [Double], _ b: [Double]) -> [Double] {
        var res: [Double] = ([] as! [Double])
        var i = 0
        while (i < _int(((a).count))) {
            res = (_append(res, (Double(_idx(a, i)) * Double(_idx(b, i)))) as! [Double])
            i = _int((i &+ 1))
        }
        return res
    }
    func vec_scalar_mul(_ v: [Double], _ s: Double) -> [Double] {
        var res: [Double] = ([] as! [Double])
        var i = 0
        while (i < _int(((v).count))) {
            res = (_append(res, (Double(_idx(v, i)) * s)) as! [Double])
            i = _int((i &+ 1))
        }
        return res
    }
    func outer(_ a: [Double], _ b: [Double]) -> [[Double]] {
        var res: [[Double]] = ([] as! [[Double]])
        var i = 0
        while (i < _int(((a).count))) {
            var row: [Double] = ([] as! [Double])
            var j = 0
            while (j < _int(((b).count))) {
                row = (_append(row, (Double(_idx(a, i)) * Double(_idx(b, j)))) as! [Double])
                j = _int((j &+ 1))
            }
            res = (_append(res, row) as! [[Double]])
            i = _int((i &+ 1))
        }
        return res
    }
    func mat_scalar_mul(_ mat: [[Double]], _ s: Double) -> [[Double]] {
        var res: [[Double]] = ([] as! [[Double]])
        var i = 0
        while (i < _int(((mat).count))) {
            var row: [Double] = ([] as! [Double])
            var j = 0
            while (j < _int((((_idx(mat, i) as! [Double])).count))) {
                row = (_append(row, (Double(_idx(_idx(mat, i)!, j)) * s)) as! [Double])
                j = _int((j &+ 1))
            }
            res = (_append(res, row) as! [[Double]])
            i = _int((i &+ 1))
        }
        return res
    }
    func mat_sub(_ a: [[Double]], _ b: [[Double]]) -> [[Double]] {
        var res: [[Double]] = ([] as! [[Double]])
        var i = 0
        while (i < _int(((a).count))) {
            var row: [Double] = ([] as! [Double])
            var j = 0
            while (j < _int((((_idx(a, i) as! [Double])).count))) {
                row = (_append(row, (Double(_idx(_idx(a, i)!, j)) - Double(_idx(_idx(b, i)!, j)))) as! [Double])
                j = _int((j &+ 1))
            }
            res = (_append(res, row) as! [[Double]])
            i = _int((i &+ 1))
        }
        return res
    }
    func init_layer(_ units: Int, _ back_units: Int, _ lr: Double) -> Layer {
        return Layer(units: Int(units), weight: (random_matrix(units, back_units) as! [[Double]]), bias: (random_vector(units) as! [Double]), output: ([] as! [Double]), xdata: ([] as! [Double]), learn_rate: Double(lr))
    }
    func forward(_ layers: inout [Layer], _ x: [Double]) -> [Layer] {
        var data = x
        var i = 0
        while (i < _int(((layers).count))) {
            var layer = (_idx(layers, i) as! Layer)
            layer.xdata = (data as! [Double])
            if (i == 0) {
                layer.output = (data as! [Double])
            } else {
                let z: [Double] = (vec_sub((matvec((layer.weight as! [[Double]]), (data as! [Double])) as! [Double]), (layer.bias as! [Double])) as! [Double])
                layer.output = (sigmoid_vec((z as! [Double])) as! [Double])
                data = (layer.output as! [Double])
            }
            layers = _set(layers, i, (layer as! Layer))
            i = _int((i &+ 1))
        }
        return layers
    }
    func backward(_ layers: inout [Layer], _ grad: [Double]) -> [Layer] {
        var g = grad
        var i = (_int(((layers).count)) &- 1)
        while (i > 0) {
            var layer = (_idx(layers, i) as! Layer)
            let deriv: [Double] = (sigmoid_derivative((layer.output as! [Double])) as! [Double])
            let delta: [Double] = (vec_mul((g as! [Double]), (deriv as! [Double])) as! [Double])
            let grad_w: [[Double]] = (outer((delta as! [Double]), (layer.xdata as! [Double])) as! [[Double]])
            layer.weight = (mat_sub((layer.weight as! [[Double]]), (mat_scalar_mul((grad_w as! [[Double]]), Double(layer.learn_rate)) as! [[Double]])) as! [[Double]])
            layer.bias = (vec_sub((layer.bias as! [Double]), (vec_scalar_mul((delta as! [Double]), Double(layer.learn_rate)) as! [Double])) as! [Double])
            g = (matTvec((layer.weight as! [[Double]]), (delta as! [Double])) as! [Double])
            layers = _set(layers, i, (layer as! Layer))
            i = _int((i &- 1))
        }
        return layers
    }
    func calc_loss(_ y: [Double], _ yhat: [Double]) -> Double {
        var s = 0.0
        var i = 0
        while (i < _int(((y).count))) {
            let d = (Double(_idx(y, i)) - Double(_idx(yhat, i)))
            s = Double((s + (d * d)))
            i = _int((i &+ 1))
        }
        return s
    }
    func calc_gradient(_ y: [Double], _ yhat: [Double]) -> [Double] {
        var g: [Double] = ([] as! [Double])
        var i = 0
        while (i < _int(((y).count))) {
            g = (_append(g, (2.0 * Double((Double(_idx(yhat, i)) - Double(_idx(y, i)))))) as! [Double])
            i = _int((i &+ 1))
        }
        return g
    }
    func train(_ layers: inout [Layer], _ xdata: [[Double]], _ ydata: [[Double]], _ rounds: Int, _ acc: Double) -> Double {
        var r = 0
        while (r < rounds) {
            var i = 0
            while (i < _int(((xdata).count))) {
                layers = (forward(&layers, (_idx(xdata, i) as! [Double])) as! [Layer])
                let out = (_idx(layers, (_int(((layers).count)) &- 1))!.output)
                let grad: [Double] = (calc_gradient((_idx(ydata, i) as! [Double]), (out as! [Double])) as! [Double])
                layers = (backward(&layers, (grad as! [Double])) as! [Layer])
                i = _int((i &+ 1))
            }
            r = _int((r &+ 1))
        }
        return 0.0
    }
    func create_data() -> Data {
        var x: [[Double]] = ([] as! [[Double]])
        var i = 0
        while (i < 10) {
            x = (_append(x, (random_vector(10) as! [Double])) as! [[Double]])
            i = _int((i &+ 1))
        }
        let y: [[Double]] = ({
            var _arr: [[Double]] = []
            _arr = _append(_arr, ({
                var _arr: [Double] = []
                _arr = _append(_arr, 0.8)
                _arr = _append(_arr, 0.4)
                return _arr
            }() as! [Double]))
            _arr = _append(_arr, ({
                var _arr: [Double] = []
                _arr = _append(_arr, 0.4)
                _arr = _append(_arr, 0.3)
                return _arr
            }() as! [Double]))
            _arr = _append(_arr, ({
                var _arr: [Double] = []
                _arr = _append(_arr, 0.34)
                _arr = _append(_arr, 0.45)
                return _arr
            }() as! [Double]))
            _arr = _append(_arr, ({
                var _arr: [Double] = []
                _arr = _append(_arr, 0.67)
                _arr = _append(_arr, 0.32)
                return _arr
            }() as! [Double]))
            _arr = _append(_arr, ({
                var _arr: [Double] = []
                _arr = _append(_arr, 0.88)
                _arr = _append(_arr, 0.67)
                return _arr
            }() as! [Double]))
            _arr = _append(_arr, ({
                var _arr: [Double] = []
                _arr = _append(_arr, 0.78)
                _arr = _append(_arr, 0.77)
                return _arr
            }() as! [Double]))
            _arr = _append(_arr, ({
                var _arr: [Double] = []
                _arr = _append(_arr, 0.55)
                _arr = _append(_arr, 0.66)
                return _arr
            }() as! [Double]))
            _arr = _append(_arr, ({
                var _arr: [Double] = []
                _arr = _append(_arr, 0.55)
                _arr = _append(_arr, 0.43)
                return _arr
            }() as! [Double]))
            _arr = _append(_arr, ({
                var _arr: [Double] = []
                _arr = _append(_arr, 0.54)
                _arr = _append(_arr, 0.1)
                return _arr
            }() as! [Double]))
            _arr = _append(_arr, ({
                var _arr: [Double] = []
                _arr = _append(_arr, 0.1)
                _arr = _append(_arr, 0.5)
                return _arr
            }() as! [Double]))
            return _arr
        }() as! [[Double]])
        return Data(x: (x as! [[Double]]), y: (y as! [[Double]]))
    }
    func main() {
        let data = create_data()
        let x: [[Double]] = data.x
        let y: [[Double]] = data.y
        var layers: [Layer] = ([] as! [Layer])
        layers = (_append(layers, init_layer(10, 0, 0.3)) as! [Layer])
        layers = (_append(layers, init_layer(20, 10, 0.3)) as! [Layer])
        layers = (_append(layers, init_layer(30, 20, 0.3)) as! [Layer])
        layers = (_append(layers, init_layer(2, 30, 0.3)) as! [Layer])
        let final_mse = Double(train(&layers, (x as! [[Double]]), (y as! [[Double]]), 100, 0.01))
        print(_p(final_mse))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
