// Generated by Mochi transpiler v0.10.64 on 2025-08-12 16:30:37 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    var seed: Int = 1
    func rand() -> Int {
        seed = _int(((_int(((seed &* 1103515245) &+ 12345)) % 2147483648 + 2147483648) % 2147483648))
        return seed
    }
    func randint(_ low: Int, _ high: Int) -> Int {
        return (_int(((_int(rand()) % _int(((high &- low) &+ 1)) + _int(((high &- low) &+ 1))) % _int(((high &- low) &+ 1)))) &+ low)
    }
    func expApprox(_ x: Double) -> Double {
        var y: Double = x
        var is_neg: Bool = false
        if (x < 0.0) {
            is_neg = true
            y = Double(-x)
        }
        var term: Double = 1.0
        var sum: Double = 1.0
        var n: Int = 1
        while (n < 30) {
            term = Double(((term * y) / Double(n)))
            sum = Double((sum + term))
            n = _int((n &+ 1))
        }
        if is_neg {
            return (1.0 / sum)
        }
        return sum
    }
    func sigmoid(_ x: Double) -> Double {
        return (1.0 / Double((1.0 + Double(expApprox(Double(-x))))))
    }
    func sigmoid_derivative(_ sig_val: Double) -> Double {
        return (sig_val * Double((1.0 - sig_val)))
    }
    let INITIAL_VALUE: Double = 0.02
    func forward_propagation(_ expected: Int, _ number_propagations: Int) -> Double {
        var weight: Double = ((2.0 * Double(randint(1, 100))) - 1.0)
        var layer_1: Double = 0.0
        var i: Int = 0
        while (i < number_propagations) {
            layer_1 = Double(sigmoid(Double((INITIAL_VALUE * weight))))
            let layer_1_error: Double = (Double((Double(expected) / 100.0)) - layer_1)
            let layer_1_delta: Double = (layer_1_error * Double(sigmoid_derivative(Double(layer_1))))
            weight = Double((weight + (INITIAL_VALUE * layer_1_delta)))
            i = _int((i &+ 1))
        }
        return (layer_1 * 100.0)
    }
    seed = 1
    let result = Double(forward_propagation(32, 450000))
    print(_p(result))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
