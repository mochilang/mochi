// Generated by Mochi transpiler v0.10.64 on 2025-08-12 16:30:31 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
struct CNN: Codable {
    var conv_kernels: [[[Double]]]
    var conv_bias: [Double]
    var conv_step: Int
    var pool_size: Int
    var w_hidden: [[Double]]
    var w_out: [[Double]]
    var b_hidden: [Double]
    var b_out: [Double]
    var rate_weight: Double
    var rate_bias: Double
    init() {
        self.conv_kernels = []
        self.conv_bias = []
        self.conv_step = 0
        self.pool_size = 0
        self.w_hidden = []
        self.w_out = []
        self.b_hidden = []
        self.b_out = []
        self.rate_weight = 0
        self.rate_bias = 0
    }
    init(conv_kernels: [[[Double]]], conv_bias: [Double], conv_step: Int, pool_size: Int, w_hidden: [[Double]], w_out: [[Double]], b_hidden: [Double], b_out: [Double], rate_weight: Double, rate_bias: Double) {
        self.conv_kernels = conv_kernels
        self.conv_bias = conv_bias
        self.conv_step = conv_step
        self.pool_size = pool_size
        self.w_hidden = w_hidden
        self.w_out = w_out
        self.b_hidden = b_hidden
        self.b_out = b_out
        self.rate_weight = rate_weight
        self.rate_bias = rate_bias
    }
}
struct TrainSample: Codable {
    var image: [[Double]]
    var target: [Double]
    init() {
        self.image = []
        self.target = []
    }
    init(image: [[Double]], target: [Double]) {
        self.image = image
        self.target = target
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    var seed = 1
    func random() -> Double {
        seed = _int(((_int(((seed &* 13) &+ 7)) % 100 + 100) % 100))
        return (Double(seed) / 100.0)
    }
    func sigmoid(_ x: Double) -> Double {
        return (1.0 / Double((1.0 + Double(exp(Double(-x))))))
    }
    func to_float(_ x: Int) -> Double {
        return (Double(x) * 1.0)
    }
    func exp(_ x: Double) -> Double {
        var term = 1.0
        var sum = 1.0
        var n = 1
        while (n < 20) {
            term = Double(((term * x) / Double(Double(n))))
            sum = Double((sum + term))
            n = _int((n &+ 1))
        }
        return sum
    }
    func convolve(_ data: [[Double]], _ kernel: [[Double]], _ step: Int, _ bias: Double) -> [[Double]] {
        let size_data = _int(((data).count))
        let size_kernel = _int(((kernel).count))
        var out: [[Double]] = ([] as! [[Double]])
        var i: Int = 0
        while (i <= (size_data &- size_kernel)) {
            var row: [Double] = ([] as! [Double])
            var j: Int = 0
            while (j <= (size_data &- size_kernel)) {
                var sum: Double = 0.0
                var a: Int = 0
                while (a < size_kernel) {
                    var b: Int = 0
                    while (b < size_kernel) {
                        sum = Double((sum + (Double(_idx(_idx(data, (i &+ a))!, (j &+ b))) * Double(_idx(_idx(kernel, a)!, b)))))
                        b = _int((b &+ 1))
                    }
                    a = _int((a &+ 1))
                }
                row = (_append(row, Double(sigmoid(Double((sum - bias))))) as! [Double])
                j = _int((j &+ step))
            }
            out = (_append(out, row) as! [[Double]])
            i = _int((i &+ step))
        }
        return out
    }
    func average_pool(_ map: [[Double]], _ size: Int) -> [[Double]] {
        var out: [[Double]] = ([] as! [[Double]])
        var i: Int = 0
        while (i < _int(((map).count))) {
            var row: [Double] = ([] as! [Double])
            var j: Int = 0
            while (j < _int((((_idx(map, i) as! [Double])).count))) {
                var sum: Double = 0.0
                var a: Int = 0
                while (a < size) {
                    var b: Int = 0
                    while (b < size) {
                        sum = Double((sum + Double(_idx(_idx(map, (i &+ a))!, (j &+ b)))))
                        b = _int((b &+ 1))
                    }
                    a = _int((a &+ 1))
                }
                row = (_append(row, (sum / Double((size &* size)))) as! [Double])
                j = _int((j &+ size))
            }
            out = (_append(out, row) as! [[Double]])
            i = _int((i &+ size))
        }
        return out
    }
    func flatten(_ maps: [[[Double]]]) -> [Double] {
        var out: [Double] = ([] as! [Double])
        var i: Int = 0
        while (i < _int(((maps).count))) {
            var j: Int = 0
            while (j < _int((((_idx(maps, i) as! [[Double]])).count))) {
                var k: Int = 0
                while (k < _int((((_idx(_idx(maps, i)!, j) as! [Double])).count))) {
                    out = (_append(out, Double(_idx(_idx(_idx(maps, i)!, j)!, k))) as! [Double])
                    k = _int((k &+ 1))
                }
                j = _int((j &+ 1))
            }
            i = _int((i &+ 1))
        }
        return out
    }
    func vec_mul_mat(_ v: [Double], _ m: [[Double]]) -> [Double] {
        var cols: Int = _int((((_idx(m, 0) as! [Double])).count))
        var res: [Double] = ([] as! [Double])
        var j: Int = 0
        while (j < cols) {
            var sum: Double = 0.0
            var i: Int = 0
            while (i < _int(((v).count))) {
                sum = Double((sum + (Double(_idx(v, i)) * Double(_idx(_idx(m, i)!, j)))))
                i = _int((i &+ 1))
            }
            res = (_append(res, sum) as! [Double])
            j = _int((j &+ 1))
        }
        return res
    }
    func matT_vec_mul(_ m: [[Double]], _ v: [Double]) -> [Double] {
        var res: [Double] = ([] as! [Double])
        var i: Int = 0
        while (i < _int(((m).count))) {
            var sum: Double = 0.0
            var j: Int = 0
            while (j < _int((((_idx(m, i) as! [Double])).count))) {
                sum = Double((sum + (Double(_idx(_idx(m, i)!, j)) * Double(_idx(v, j)))))
                j = _int((j &+ 1))
            }
            res = (_append(res, sum) as! [Double])
            i = _int((i &+ 1))
        }
        return res
    }
    func vec_add(_ a: [Double], _ b: [Double]) -> [Double] {
        var res: [Double] = ([] as! [Double])
        var i: Int = 0
        while (i < _int(((a).count))) {
            res = (_append(res, (Double(_idx(a, i)) + Double(_idx(b, i)))) as! [Double])
            i = _int((i &+ 1))
        }
        return res
    }
    func vec_sub(_ a: [Double], _ b: [Double]) -> [Double] {
        var res: [Double] = ([] as! [Double])
        var i: Int = 0
        while (i < _int(((a).count))) {
            res = (_append(res, (Double(_idx(a, i)) - Double(_idx(b, i)))) as! [Double])
            i = _int((i &+ 1))
        }
        return res
    }
    func vec_mul(_ a: [Double], _ b: [Double]) -> [Double] {
        var res: [Double] = ([] as! [Double])
        var i: Int = 0
        while (i < _int(((a).count))) {
            res = (_append(res, (Double(_idx(a, i)) * Double(_idx(b, i)))) as! [Double])
            i = _int((i &+ 1))
        }
        return res
    }
    func vec_map_sig(_ v: [Double]) -> [Double] {
        var res: [Double] = ([] as! [Double])
        var i: Int = 0
        while (i < _int(((v).count))) {
            res = (_append(res, Double(sigmoid(Double(_idx(v, i))))) as! [Double])
            i = _int((i &+ 1))
        }
        return res
    }
    func new_cnn() -> CNN {
        let k1: [[Double]] = ({
            var _arr: [[Double]] = []
            _arr = _append(_arr, ({
                var _arr: [Double] = []
                _arr = _append(_arr, 1.0)
                _arr = _append(_arr, 0.0)
                return _arr
            }() as! [Double]))
            _arr = _append(_arr, ({
                var _arr: [Double] = []
                _arr = _append(_arr, 0.0)
                _arr = _append(_arr, 1.0)
                return _arr
            }() as! [Double]))
            return _arr
        }() as! [[Double]])
        let k2: [[Double]] = ({
            var _arr: [[Double]] = []
            _arr = _append(_arr, ({
                var _arr: [Double] = []
                _arr = _append(_arr, 0.0)
                _arr = _append(_arr, 1.0)
                return _arr
            }() as! [Double]))
            _arr = _append(_arr, ({
                var _arr: [Double] = []
                _arr = _append(_arr, 1.0)
                _arr = _append(_arr, 0.0)
                return _arr
            }() as! [Double]))
            return _arr
        }() as! [[Double]])
        let conv_kernels: [[[Double]]] = ({
            var _arr: [[[Double]]] = []
            _arr = _append(_arr, k1)
            _arr = _append(_arr, k2)
            return _arr
        }() as! [[[Double]]])
        let conv_bias: [Double] = ({
            var _arr: [Double] = []
            _arr = _append(_arr, 0.0)
            _arr = _append(_arr, 0.0)
            return _arr
        }() as! [Double])
        let conv_step = 2
        let pool_size = 2
        let input_size = 2
        let hidden_size = 2
        let output_size = 2
        var w_hidden: [[Double]] = ([] as! [[Double]])
        var i: Int = 0
        while (i < input_size) {
            var row: [Double] = ([] as! [Double])
            var j: Int = 0
            while (j < hidden_size) {
                row = (_append(row, (Double(random()) - 0.5)) as! [Double])
                j = _int((j &+ 1))
            }
            w_hidden = (_append(w_hidden, row) as! [[Double]])
            i = _int((i &+ 1))
        }
        var w_out: [[Double]] = ([] as! [[Double]])
        i = 0
        while (i < hidden_size) {
            var row: [Double] = ([] as! [Double])
            var j: Int = 0
            while (j < output_size) {
                row = (_append(row, (Double(random()) - 0.5)) as! [Double])
                j = _int((j &+ 1))
            }
            w_out = (_append(w_out, row) as! [[Double]])
            i = _int((i &+ 1))
        }
        let b_hidden: [Double] = ({
            var _arr: [Double] = []
            _arr = _append(_arr, 0.0)
            _arr = _append(_arr, 0.0)
            return _arr
        }() as! [Double])
        let b_out: [Double] = ({
            var _arr: [Double] = []
            _arr = _append(_arr, 0.0)
            _arr = _append(_arr, 0.0)
            return _arr
        }() as! [Double])
        return CNN(conv_kernels: (conv_kernels as! [[[Double]]]), conv_bias: (conv_bias as! [Double]), conv_step: Int(conv_step), pool_size: Int(pool_size), w_hidden: (w_hidden as! [[Double]]), w_out: (w_out as! [[Double]]), b_hidden: (b_hidden as! [Double]), b_out: (b_out as! [Double]), rate_weight: 0.2, rate_bias: 0.2)
    }
    func forward(_ cnn: CNN, _ data: [[Double]]) -> [Double] {
        var maps: [[[Double]]] = ([] as! [[[Double]]])
        var i: Int = 0
        while (i < _int(((cnn.conv_kernels).count))) {
            let conv_map: [[Double]] = (convolve((data as! [[Double]]), (_idx(cnn.conv_kernels, i) as! [[Double]]), cnn.conv_step, Double(_idx(cnn.conv_bias, i))) as! [[Double]])
            let pooled: [[Double]] = (average_pool((conv_map as! [[Double]]), cnn.pool_size) as! [[Double]])
            maps = (_append(maps, pooled) as! [[[Double]]])
            i = _int((i &+ 1))
        }
        let flat: [Double] = (flatten((maps as! [[[Double]]])) as! [Double])
        let hidden_net: [Double] = (vec_add((vec_mul_mat((flat as! [Double]), (cnn.w_hidden as! [[Double]])) as! [Double]), (cnn.b_hidden as! [Double])) as! [Double])
        let hidden_out: [Double] = (vec_map_sig((hidden_net as! [Double])) as! [Double])
        let out_net: [Double] = (vec_add((vec_mul_mat((hidden_out as! [Double]), (cnn.w_out as! [[Double]])) as! [Double]), (cnn.b_out as! [Double])) as! [Double])
        let out: [Double] = (vec_map_sig((out_net as! [Double])) as! [Double])
        return out
    }
    func train(_ cnn: CNN, _ samples: [TrainSample], _ epochs: Int) -> CNN {
        var w_out = cnn.w_out
        var b_out = cnn.b_out
        var w_hidden = cnn.w_hidden
        var b_hidden = cnn.b_hidden
        var e: Int = 0
        while (e < epochs) {
            var s: Int = 0
            while (s < _int(((samples).count))) {
                let data = (_idx(samples, s)!.image)
                let target = (_idx(samples, s)!.target)
                var maps: [[[Double]]] = ([] as! [[[Double]]])
                var i: Int = 0
                while (i < _int(((cnn.conv_kernels).count))) {
                    let conv_map: [[Double]] = (convolve((data as! [[Double]]), (_idx(cnn.conv_kernels, i) as! [[Double]]), cnn.conv_step, Double(_idx(cnn.conv_bias, i))) as! [[Double]])
                    let pooled: [[Double]] = (average_pool((conv_map as! [[Double]]), cnn.pool_size) as! [[Double]])
                    maps = (_append(maps, pooled) as! [[[Double]]])
                    i = _int((i &+ 1))
                }
                let flat: [Double] = (flatten((maps as! [[[Double]]])) as! [Double])
                let hidden_net: [Double] = (vec_add((vec_mul_mat((flat as! [Double]), (w_hidden as! [[Double]])) as! [Double]), (b_hidden as! [Double])) as! [Double])
                let hidden_out: [Double] = (vec_map_sig((hidden_net as! [Double])) as! [Double])
                let out_net: [Double] = (vec_add((vec_mul_mat((hidden_out as! [Double]), (w_out as! [[Double]])) as! [Double]), (b_out as! [Double])) as! [Double])
                let out: [Double] = (vec_map_sig((out_net as! [Double])) as! [Double])
                let error_out: [Double] = (vec_sub((target as! [Double]), (out as! [Double])) as! [Double])
                let pd_out: [Double] = (vec_mul((error_out as! [Double]), (vec_mul((out as! [Double]), (vec_sub(({
                    var _arr: [Double] = []
                    _arr = _append(_arr, 1.0)
                    _arr = _append(_arr, 1.0)
                    return _arr
                }() as! [Double]), (out as! [Double])) as! [Double])) as! [Double])) as! [Double])
                let error_hidden: [Double] = (matT_vec_mul((w_out as! [[Double]]), (pd_out as! [Double])) as! [Double])
                let pd_hidden: [Double] = (vec_mul((error_hidden as! [Double]), (vec_mul((hidden_out as! [Double]), (vec_sub(({
                    var _arr: [Double] = []
                    _arr = _append(_arr, 1.0)
                    _arr = _append(_arr, 1.0)
                    return _arr
                }() as! [Double]), (hidden_out as! [Double])) as! [Double])) as! [Double])) as! [Double])
                var j: Int = 0
                while (j < _int(((w_out).count))) {
                    var k: Int = 0
                    while (k < _int((((_idx(w_out, j) as! [Double])).count))) {
                        var _tmp3 = (_idx(w_out, j) as! [Double])
                        _tmp3 = _set(_tmp3, k, Double((Double(_idx(_idx(w_out, j)!, k)) + ((cnn.rate_weight * Double(_idx(hidden_out, j))) * Double(_idx(pd_out, k))))))
                        w_out = _set(w_out, j, (_tmp3 as! [Double]))
                        k = _int((k &+ 1))
                    }
                    j = _int((j &+ 1))
                }
                j = 0
                while (j < _int(((b_out).count))) {
                    b_out = _set(b_out, j, Double((Double(_idx(b_out, j)) - (cnn.rate_bias * Double(_idx(pd_out, j))))))
                    j = _int((j &+ 1))
                }
                var i_h: Int = 0
                while (i_h < _int(((w_hidden).count))) {
                    var j_h: Int = 0
                    while (j_h < _int((((_idx(w_hidden, i_h) as! [Double])).count))) {
                        var _tmp4 = (_idx(w_hidden, i_h) as! [Double])
                        _tmp4 = _set(_tmp4, j_h, Double((Double(_idx(_idx(w_hidden, i_h)!, j_h)) + ((cnn.rate_weight * Double(_idx(flat, i_h))) * Double(_idx(pd_hidden, j_h))))))
                        w_hidden = _set(w_hidden, i_h, (_tmp4 as! [Double]))
                        j_h = _int((j_h &+ 1))
                    }
                    i_h = _int((i_h &+ 1))
                }
                j = 0
                while (j < _int(((b_hidden).count))) {
                    b_hidden = _set(b_hidden, j, Double((Double(_idx(b_hidden, j)) - (cnn.rate_bias * Double(_idx(pd_hidden, j))))))
                    j = _int((j &+ 1))
                }
                s = _int((s &+ 1))
            }
            e = _int((e &+ 1))
        }
        return CNN(conv_kernels: (cnn.conv_kernels as! [[[Double]]]), conv_bias: (cnn.conv_bias as! [Double]), conv_step: (cnn.conv_step as? Int ?? 0), pool_size: (cnn.pool_size as? Int ?? 0), w_hidden: (w_hidden as! [[Double]]), w_out: (w_out as! [[Double]]), b_hidden: (b_hidden as! [Double]), b_out: (b_out as! [Double]), rate_weight: Double(cnn.rate_weight), rate_bias: Double(cnn.rate_bias))
    }
    func main() -> Void {
        let cnn = new_cnn()
        let image: [[Double]] = ({
            var _arr: [[Double]] = []
            _arr = _append(_arr, ({
                var _arr: [Double] = []
                _arr = _append(_arr, 1.0)
                _arr = _append(_arr, 0.0)
                _arr = _append(_arr, 1.0)
                _arr = _append(_arr, 0.0)
                return _arr
            }() as! [Double]))
            _arr = _append(_arr, ({
                var _arr: [Double] = []
                _arr = _append(_arr, 0.0)
                _arr = _append(_arr, 1.0)
                _arr = _append(_arr, 0.0)
                _arr = _append(_arr, 1.0)
                return _arr
            }() as! [Double]))
            _arr = _append(_arr, ({
                var _arr: [Double] = []
                _arr = _append(_arr, 1.0)
                _arr = _append(_arr, 0.0)
                _arr = _append(_arr, 1.0)
                _arr = _append(_arr, 0.0)
                return _arr
            }() as! [Double]))
            _arr = _append(_arr, ({
                var _arr: [Double] = []
                _arr = _append(_arr, 0.0)
                _arr = _append(_arr, 1.0)
                _arr = _append(_arr, 0.0)
                _arr = _append(_arr, 1.0)
                return _arr
            }() as! [Double]))
            return _arr
        }() as! [[Double]])
        let sample = TrainSample(image: (image as! [[Double]]), target: ({
            var _arr: [Double] = []
            _arr = _append(_arr, 1.0)
            _arr = _append(_arr, 0.0)
            return _arr
        }() as! [Double]))
        print(_p("Before training:"), _p("[" + (forward((cnn as! CNN), (image as! [[Double]])) as! [Double]).map{ if let s = $0 as? String { "\"" + s.replacingOccurrences(of: "\"", with: "\\\"") + "\"" } else { _p($0) } }.joined(separator: ", ") + "]"))
        let trained = train((cnn as! CNN), ({
            var _arr: [TrainSample] = []
            _arr = _append(_arr, sample)
            return _arr
        }() as! [TrainSample]), 50)
        print(_p("After training:"), _p("[" + (forward((trained as! CNN), (image as! [[Double]])) as! [Double]).map{ if let s = $0 as? String { "\"" + s.replacingOccurrences(of: "\"", with: "\\\"") + "\"" } else { _p($0) } }.joined(separator: ", ") + "]"))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
