// Generated by Mochi transpiler v0.10.64 on 2025-08-12 16:25:42 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func exp(_ x: Double) -> Double {
        var term = 1.0
        var sum = 1.0
        var n = 1
        while (n < 20) {
            term = Double(((term * x) / Double(n)))
            sum = Double((sum + term))
            n = _int((n &+ 1))
        }
        return sum
    }
    func scaled_exponential_linear_unit(_ vector: [Double], _ alpha: Double, _ lambda_: Double) -> [Double] {
        var result: [Double] = ([] as! [Double])
        var i = 0
        while (i < _int(((vector).count))) {
            let x = Double(_idx(vector, i))
            let y = Double(((x > 0.0) ? (lambda_ * x) : ((lambda_ * alpha) * Double((Double(exp(Double(x))) - 1.0)))))
            result = (_append(result, y) as! [Double])
            i = _int((i &+ 1))
        }
        return result
    }
    print(_p("[" + (scaled_exponential_linear_unit(({
        var _arr: [Double] = []
        _arr = _append(_arr, 1.3)
        _arr = _append(_arr, 3.7)
        _arr = _append(_arr, 2.4)
        return _arr
    }() as! [Double]), 1.6732, 1.0507) as! [Double]).map{ if let s = $0 as? String { "\"" + s.replacingOccurrences(of: "\"", with: "\\\"") + "\"" } else { _p($0) } }.joined(separator: ", ") + "]"))
    print(_p("[" + (scaled_exponential_linear_unit(({
        var _arr: [Double] = []
        _arr = _append(_arr, 1.3)
        _arr = _append(_arr, 4.7)
        _arr = _append(_arr, 8.2)
        return _arr
    }() as! [Double]), 1.6732, 1.0507) as! [Double]).map{ if let s = $0 as? String { "\"" + s.replacingOccurrences(of: "\"", with: "\\\"") + "\"" } else { _p($0) } }.joined(separator: ", ") + "]"))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
