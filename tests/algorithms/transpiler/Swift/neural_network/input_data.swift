// Generated by Mochi transpiler v0.10.64 on 2025-08-12 16:30:34 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _concat<T>(_ a: [T], _ b: [T]) -> [T] {
    var out = a
    out.append(contentsOf: b)
    return out
}
func _slice<T>(_ xs: [T], _ start: Int, _ end: Int) -> [T] {
    var s = start
    var e = end
    if s < 0 { s = 0 }
    if e > xs.count { e = xs.count }
    if s > e { s = e }
    return Array(xs[s..<e])
}
struct DataSet: Codable {
    var images: [[Int]]
    var labels: [[Int]]
    var num_examples: Int
    var index_in_epoch: Int
    var epochs_completed: Int
    init() {
        self.images = []
        self.labels = []
        self.num_examples = 0
        self.index_in_epoch = 0
        self.epochs_completed = 0
    }
    init(images: [[Int]], labels: [[Int]], num_examples: Int, index_in_epoch: Int, epochs_completed: Int) {
        self.images = images
        self.labels = labels
        self.num_examples = num_examples
        self.index_in_epoch = index_in_epoch
        self.epochs_completed = epochs_completed
    }
}
struct Datasets: Codable {
    var train: DataSet
    var validation: DataSet
    var test_ds: DataSet
    init() {
        self.train = DataSet()
        self.validation = DataSet()
        self.test_ds = DataSet()
    }
    init(train: DataSet, validation: DataSet, test_ds: DataSet) {
        self.train = train
        self.validation = validation
        self.test_ds = test_ds
    }
}
struct BatchResult: Codable {
    var dataset: DataSet
    var images: [[Int]]
    var labels: [[Int]]
    init() {
        self.dataset = DataSet()
        self.images = []
        self.labels = []
    }
    init(dataset: DataSet, images: [[Int]], labels: [[Int]]) {
        self.dataset = dataset
        self.images = images
        self.labels = labels
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func dense_to_one_hot(_ labels: [Int], _ num_classes: Int) -> [[Int]] {
        var result: [[Int]] = ([] as! [[Int]])
        var i = 0
        while (i < _int(((labels).count))) {
            var row: [Int] = ([] as! [Int])
            var j = 0
            while (j < num_classes) {
                if (j == (_idx(labels, i) as? Int ?? 0)) {
                    row = (_append(row, 1) as! [Int])
                } else {
                    row = (_append(row, 0) as! [Int])
                }
                j = _int((j &+ 1))
            }
            result = (_append(result, row) as! [[Int]])
            i = _int((i &+ 1))
        }
        return result
    }
    func new_dataset(_ images: [[Int]], _ labels: [[Int]]) -> DataSet {
        return DataSet(images: (images as! [[Int]]), labels: (labels as! [[Int]]), num_examples: _int(((images).count)), index_in_epoch: 0, epochs_completed: 0)
    }
    func next_batch(_ ds: DataSet, _ batch_size: Int) -> BatchResult {
        let start = ds.index_in_epoch
        if ((start &+ batch_size) > ds.num_examples) {
            let rest = (ds.num_examples &- start)
            let images_rest: [[Int]] = (_slice(Array(ds.images), start, ds.num_examples) as! [[Int]])
            let labels_rest: [[Int]] = (_slice(Array(ds.labels), start, ds.num_examples) as! [[Int]])
            let new_index = (batch_size &- rest)
            let images_new: [[Int]] = (_slice(Array(ds.images), 0, new_index) as! [[Int]])
            let labels_new: [[Int]] = (_slice(Array(ds.labels), 0, new_index) as! [[Int]])
            let batch_images: [Any?] = (_concat(images_rest, images_new) as! [Any?])
            let batch_labels: [Any?] = (_concat(labels_rest, labels_new) as! [Any?])
            let new_ds = DataSet(images: (ds.images as! [[Int]]), labels: (ds.labels as! [[Int]]), num_examples: (ds.num_examples as? Int ?? 0), index_in_epoch: Int(new_index), epochs_completed: _int((ds.epochs_completed &+ 1)))
            return BatchResult(dataset: (new_ds as! DataSet), images: (batch_images as! [[Int]]), labels: (batch_labels as! [[Int]]))
        } else {
            let end = (start &+ batch_size)
            let batch_images: [[Int]] = (_slice(Array(ds.images), start, end) as! [[Int]])
            let batch_labels: [[Int]] = (_slice(Array(ds.labels), start, end) as! [[Int]])
            let new_ds = DataSet(images: (ds.images as! [[Int]]), labels: (ds.labels as! [[Int]]), num_examples: (ds.num_examples as? Int ?? 0), index_in_epoch: Int(end), epochs_completed: (ds.epochs_completed as? Int ?? 0))
            return BatchResult(dataset: (new_ds as! DataSet), images: (batch_images as! [[Int]]), labels: (batch_labels as! [[Int]]))
        }
    }
    func read_data_sets(_ train_images: [[Int]], _ train_labels_raw: [Int], _ test_images: [[Int]], _ test_labels_raw: [Int], _ validation_size: Int, _ num_classes: Int) -> Datasets {
        let train_labels: [[Int]] = (dense_to_one_hot((train_labels_raw as! [Int]), num_classes) as! [[Int]])
        let test_labels: [[Int]] = (dense_to_one_hot((test_labels_raw as! [Int]), num_classes) as! [[Int]])
        let validation_images: [[Int]] = (_slice(Array(train_images), 0, validation_size) as! [[Int]])
        let validation_labels: [[Int]] = (_slice(Array(train_labels), 0, validation_size) as! [[Int]])
        let train_images_rest: [[Int]] = (_slice(Array(train_images), validation_size, _int(((train_images).count))) as! [[Int]])
        let train_labels_rest: [[Int]] = (_slice(Array(train_labels), validation_size, _int(((train_labels).count))) as! [[Int]])
        let train = new_dataset((train_images_rest as! [[Int]]), (train_labels_rest as! [[Int]]))
        let validation = new_dataset((validation_images as! [[Int]]), (validation_labels as! [[Int]]))
        let testset = new_dataset((test_images as! [[Int]]), (test_labels as! [[Int]]))
        return Datasets(train: (train as! DataSet), validation: (validation as! DataSet), test_ds: (testset as! DataSet))
    }
    func main() {
        let train_images: [[Int]] = ({
            var _arr: [[Int]] = []
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 0)
                _arr = _append(_arr, 1)
                return _arr
            }() as! [Int]))
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 1)
                _arr = _append(_arr, 2)
                return _arr
            }() as! [Int]))
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 2)
                _arr = _append(_arr, 3)
                return _arr
            }() as! [Int]))
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 3)
                _arr = _append(_arr, 4)
                return _arr
            }() as! [Int]))
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 4)
                _arr = _append(_arr, 5)
                return _arr
            }() as! [Int]))
            return _arr
        }() as! [[Int]])
        let train_labels_raw: [Int] = ({
            var _arr: [Int] = []
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 1)
            _arr = _append(_arr, 2)
            _arr = _append(_arr, 3)
            _arr = _append(_arr, 4)
            return _arr
        }() as! [Int])
        let test_images: [[Int]] = ({
            var _arr: [[Int]] = []
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 5)
                _arr = _append(_arr, 6)
                return _arr
            }() as! [Int]))
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 6)
                _arr = _append(_arr, 7)
                return _arr
            }() as! [Int]))
            return _arr
        }() as! [[Int]])
        let test_labels_raw: [Int] = ({
            var _arr: [Int] = []
            _arr = _append(_arr, 5)
            _arr = _append(_arr, 6)
            return _arr
        }() as! [Int])
        let data = read_data_sets((train_images as! [[Int]]), (train_labels_raw as! [Int]), (test_images as! [[Int]]), (test_labels_raw as! [Int]), 2, 10)
        var ds = data.train
        var res = next_batch((ds as! DataSet), 2)
        ds = (res.dataset as! DataSet)
        print(_p("[" + res.images.map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
        print(_p("[" + res.labels.map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
        res = (next_batch((ds as! DataSet), 2) as! BatchResult)
        ds = (res.dataset as! DataSet)
        print(_p("[" + res.images.map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
        print(_p("[" + res.labels.map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
        res = (next_batch((ds as! DataSet), 2) as! BatchResult)
        ds = (res.dataset as! DataSet)
        print(_p("[" + res.images.map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
        print(_p("[" + res.labels.map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
