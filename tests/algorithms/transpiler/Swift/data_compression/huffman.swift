// Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:36:56 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
indirect enum Huffman {
    case Leaf(symbol: String, freq: Int)
    case Node(freq: Int, left: Huffman, right: Huffman)
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func get_freq(_ n: Huffman) -> Int {
        return Int({ () -> Int in
        switch n {
            case let .Leaf(_, f):
            return f
            case let .Node(f, _, _):
            return f
            default:
            var z: Int
            return z
        }
    }())
}
func sort_nodes(_ nodes: [Huffman]) -> [Huffman] {
    var arr: [Huffman] = nodes
    var i: Int = 1
    while (i < Int(((arr).count))) {
        let key = (arr[i] as! Huffman)
        var j: Int = (i &- 1)
        while ((j >= 0) && (Int(get_freq((arr[j] as! Huffman))) > Int(get_freq((key as! Huffman))))) {
            arr = _set(arr, (j &+ 1), (arr[j] as! Huffman))
            j = Int((j &- 1))
        }
        arr = _set(arr, (j &+ 1), (key as! Huffman))
        i = Int((i &+ 1))
    }
    return arr
}
func rest(_ nodes: [Huffman]) -> [Huffman] {
    var res: [Huffman] = ([] as! [Huffman])
    var i: Int = 1
    while (i < Int(((nodes).count))) {
        res = (_append(res, (nodes[i] as! Huffman)) as! [Huffman])
        i = Int((i &+ 1))
    }
    return res
}
func count_freq(_ text: String) -> [Huffman] {
    var chars: [String] = ([] as! [String])
    var freqs: [Int] = ([] as! [Int])
    var i: Int = 0
    while (i < Int(((text).count))) {
        let c = String(describing: String(Array(String(describing: (text as! String)))[i..<(i &+ 1)]))
        var j: Int = 0
        var found: Bool = false
        while (j < Int(((chars).count))) {
            if ((chars[j] as! String) == c) {
                freqs = _set(freqs, j, Int(((freqs[j] as? Int ?? 0) &+ 1)))
                found = true
                break
            }
            j = Int((j &+ 1))
        }
        if (!found) {
            chars = (_append(chars, c) as! [String])
            freqs = (_append(freqs, 1) as! [Int])
        }
        i = Int((i &+ 1))
    }
    var leaves: [Huffman] = ([] as! [Huffman])
    var k: Int = 0
    while (k < Int(((chars).count))) {
        leaves = (_append(leaves, Huffman.Leaf(symbol: (chars[k] as! String), freq: (freqs[k] as? Int ?? 0))) as! [Huffman])
        k = Int((k &+ 1))
    }
    return (sort_nodes((leaves as! [Huffman])) as! [Huffman])
}
func build_tree(_ nodes: [Huffman]) -> Huffman {
    var arr: [Huffman] = nodes
    while (Int(((arr).count)) > 1) {
        let left = (arr[0] as! Huffman)
        arr = (rest((arr as! [Huffman])) as! [Huffman])
        let right = (arr[0] as! Huffman)
        arr = (rest((arr as! [Huffman])) as! [Huffman])
        let node = Huffman.Node(freq: (Int(get_freq((left as! Huffman))) &+ Int(get_freq((right as! Huffman)))), left: left, right: right)
        arr = (_append(arr, node) as! [Huffman])
        arr = (sort_nodes((arr as! [Huffman])) as! [Huffman])
    }
    return (arr[0] as! Huffman)
}
func concat_pairs(_ a: [[String]], _ b: [[String]]) -> [[String]] {
    var res: [[String]] = a
    var i: Int = 0
    while (i < Int(((b).count))) {
        res = (_append(res, (b[i] as! [String])) as! [[String]])
        i = Int((i &+ 1))
    }
    return res
}
func collect_codes(_ tree: Huffman, _ prefix: String) -> [[String]] {
    return ({ () -> [[String]] in
    switch tree {
        case let .Leaf(s, _):
        return ([([s, prefix] as! [String])] as! [[String]])
        case let .Node(_, l, r):
        return (concat_pairs((collect_codes((l as! Huffman), ((prefix + "0") as! String)) as! [[String]]), (collect_codes((r as! Huffman), ((prefix + "1") as! String)) as! [[String]])) as! [[String]])
        default:
        var z: [[String]]
        return z
    }
}() as! [[String]])
}
func find_code(_ pairs: [[String]], _ ch: String) -> String {
    var i: Int = 0
    while (i < Int(((pairs).count))) {
        if ((pairs[i][0] as! String) == ch) {
            return (pairs[i][1] as! String)
        }
        i = Int((i &+ 1))
    }
    return ""
}
func huffman_encode(_ text: String) -> String {
    if (text == "") {
        return ""
    }
    let leaves: [Huffman] = (count_freq((text as! String)) as! [Huffman])
    let tree = build_tree((leaves as! [Huffman]))
    let codes: [[String]] = (collect_codes((tree as! Huffman), "") as! [[String]])
    var encoded: String = ""
    var i: Int = 0
    while (i < Int(((text).count))) {
        let c = String(describing: String(Array(String(describing: (text as! String)))[i..<(i &+ 1)]))
        encoded = (((encoded + String(describing: find_code((codes as! [[String]]), (c as! String)))) + " ") as! String)
        i = Int((i &+ 1))
    }
    return encoded
}
print(_p(String(describing: huffman_encode("beep boop beer!"))))
let _benchEnd = _now()
let _benchMemEnd = _mem()
print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
