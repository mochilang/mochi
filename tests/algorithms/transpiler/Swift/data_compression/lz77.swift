// Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:37:23 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
struct Token: Codable {
    var offset: Int
    var length: Int
    var indicator: String
    init() {
        self.offset = 0
        self.length = 0
        self.indicator = ""
    }
    init(offset: Int, length: Int, indicator: String) {
        self.offset = offset
        self.length = length
        self.indicator = indicator
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func token_to_string(_ t: Token) -> String {
        return (((((("(" + String(describing: t.offset)) + ", ") + String(describing: t.length)) + ", ") + t.indicator) + ")")
    }
    func tokens_to_string(_ ts: [Token]) -> String {
        var res: String = "["
        var i: Int = 0
        while (i < Int(((ts).count))) {
            res = ((res + String(describing: token_to_string((ts[i] as! Token)))) as! String)
            if (i < (Int(((ts).count)) &- 1)) {
                res = ((res + ", ") as! String)
            }
            i = Int((i &+ 1))
        }
        return (res + "]")
    }
    func match_length_from_index(_ text: String, _ window: String, _ text_index: Int, _ window_index: Int) -> Int {
        if ((text_index >= Int(((text).count))) || (window_index >= Int(((window).count)))) {
            return 0
        }
        let tc = String(describing: String(Array(String(describing: (text as! String)))[text_index..<(text_index &+ 1)]))
        let wc = String(describing: String(Array(String(describing: (window as! String)))[window_index..<(window_index &+ 1)]))
        if (tc != wc) {
            return 0
        }
        return (1 &+ Int(match_length_from_index((text as! String), ((window + tc) as! String), (text_index &+ 1), (window_index &+ 1))))
    }
    func find_encoding_token(_ text: String, _ search_buffer: String) -> Token {
        if (Int(((text).count)) == 0) {
            _ = fatalError("We need some text to work with.")
        }
        var length: Int = 0
        var offset: Int = 0
        if (Int(((search_buffer).count)) == 0) {
            return Token(offset: offset, length: length, indicator: String(describing: String(Array(String(describing: (text as! String)))[0..<1])))
        }
        var i: Int = 0
        while (i < Int(((search_buffer).count))) {
            let ch = String(describing: String(Array(String(describing: (search_buffer as! String)))[i..<(i &+ 1)]))
            let found_offset = (Int(((search_buffer).count)) &- i)
            if (ch == String(describing: String(Array(String(describing: (text as! String)))[0..<1]))) {
                let found_length = Int(match_length_from_index((text as! String), (search_buffer as! String), 0, i))
                if (found_length >= length) {
                    offset = Int(found_offset)
                    length = Int(found_length)
                }
            }
            i = Int((i &+ 1))
        }
        return Token(offset: offset, length: length, indicator: String(describing: String(Array(String(describing: (text as! String)))[length..<(length &+ 1)])))
    }
    func lz77_compress(_ text: String, _ window_size: Int, _ lookahead: Int) -> [Token] {
        let search_buffer_size = (window_size &- lookahead)
        var output: [Token] = ([] as! [Token])
        var search_buffer: String = ""
        var remaining: String = text
        while (Int(((remaining).count)) > 0) {
            let token = find_encoding_token((remaining as! String), (search_buffer as! String))
            let add_len = (token.length &+ 1)
            search_buffer = ((search_buffer + String(describing: String(Array(String(describing: (remaining as! String)))[0..<add_len]))) as! String)
            if (Int(((search_buffer).count)) > search_buffer_size) {
                search_buffer = String(describing: String(Array(String(describing: (search_buffer as! String)))[(Int(((search_buffer).count)) &- search_buffer_size)..<Int(((search_buffer).count))]))
            }
            remaining = String(describing: String(Array(String(describing: (remaining as! String)))[add_len..<Int(((remaining).count))]))
            output = (_append(output, token) as! [Token])
        }
        return output
    }
    func lz77_decompress(_ tokens: [Token]) -> String {
        var output: String = ""
        for t in tokens {
            var i: Int = 0
            while (i < t.length) {
                output = ((output + String(describing: String(Array(String(describing: (output as! String)))[(Int(((output).count)) &- t.offset)..<((Int(((output).count)) &- t.offset) &+ 1)]))) as! String)
                i = Int((i &+ 1))
            }
            output = ((output + t.indicator) as! String)
        }
        return output
    }
    let c1: [Token] = (lz77_compress("ababcbababaa", 13, 6) as! [Token])
    print(_p(String(describing: tokens_to_string((c1 as! [Token])))))
    let c2: [Token] = (lz77_compress("aacaacabcabaaac", 13, 6) as! [Token])
    print(_p(String(describing: tokens_to_string((c2 as! [Token])))))
    let tokens_example: [Token] = ([Token(offset: 0, length: 0, indicator: "c"), Token(offset: 0, length: 0, indicator: "a"), Token(offset: 0, length: 0, indicator: "b"), Token(offset: 0, length: 0, indicator: "r"), Token(offset: 3, length: 1, indicator: "c"), Token(offset: 2, length: 1, indicator: "d"), Token(offset: 7, length: 4, indicator: "r"), Token(offset: 3, length: 5, indicator: "d")] as! [Token])
    print(_p(String(describing: lz77_decompress((tokens_example as! [Token])))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
