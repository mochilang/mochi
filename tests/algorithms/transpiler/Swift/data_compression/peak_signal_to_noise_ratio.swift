// Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:37:26 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func abs(_ x: Double) -> Double {
        if (x < 0.0) {
            return -x
        }
        return x
    }
    func sqrtApprox(_ x: Double) -> Double {
        if (x <= 0.0) {
            return 0.0
        }
        var guess: Double = x
        var i: Int = 0
        while (i < 10) {
            guess = Double((Double((guess + (x / guess))) / 2.0))
            i = Int((i &+ 1))
        }
        return guess
    }
    func ln(_ x: Double) -> Double {
        let t = (Double((x - 1.0)) / Double((x + 1.0)))
        var term: Double = t
        var sum: Double = 0.0
        var n: Int = 1
        while (n <= 19) {
            sum = Double((sum + (term / Double(n))))
            term = Double(((term * t) * t))
            n = Int((n &+ 2))
        }
        return (2.0 * sum)
    }
    func log10(_ x: Double) -> Double {
        return (Double(ln(Double(x))) / Double(ln(10.0)))
    }
    func peak_signal_to_noise_ratio(_ original: [[Int]], _ contrast: [[Int]]) -> Double {
        var mse: Double = 0.0
        var i: Int = 0
        while (i < Int(((original).count))) {
            var j: Int = 0
            while (j < Int((((original[i] as! [Int])).count))) {
                let diff = Double(((original[i][j] as? Int ?? 0) &- (contrast[i][j] as? Int ?? 0)))
                mse = Double((mse + (diff * diff)))
                j = Int((j &+ 1))
            }
            i = Int((i &+ 1))
        }
        let size = Double((Int(((original).count)) &* Int((((original[0] as! [Int])).count))))
        mse = Double((mse / size))
        if (mse == 0.0) {
            return 100.0
        }
        let PIXEL_MAX = 255.0
        return (20.0 * Double(log10(Double((PIXEL_MAX / Double(sqrtApprox(Double(mse))))))))
    }
    do {
        let img: [[Int]] = ([([52, 55] as! [Int]), ([61, 59] as! [Int])] as! [[Int]])
        assert((Double(peak_signal_to_noise_ratio((img as! [[Int]]), (img as! [[Int]]))) == 100.0))
    }
    do {
        let original: [[Int]] = ([([0, 0] as! [Int]), ([0, 0] as! [Int])] as! [[Int]])
        let contrast: [[Int]] = ([([0, 0] as! [Int]), ([0, 1] as! [Int])] as! [[Int]])
        let psnr = Double(peak_signal_to_noise_ratio((original as! [[Int]]), (contrast as! [[Int]])))
        let expected = (20.0 * Double(log10(Double((255.0 / Double(sqrtApprox(0.25)))))))
        assert((Double(abs(Double((psnr - expected)))) < 0.0001))
    }
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
