// Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:37:18 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _keys<K,V>(_ m: [K: V]) -> [K] {
    return Array(m.keys)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func to_binary(_ n: Int) -> String {
        if (n == 0) {
            return "0"
        }
        var num: Int = n
        var res: String = ""
        while (num > 0) {
            let bit = ((num % 2 + 2) % 2)
            res = ((String(describing: bit) + res) as! String)
            num = Int((num / 2))
        }
        return res
    }
    func contains_key_int(_ m: [String: Int], _ key: String) -> Bool {
        for k in (_keys(m) as! [String]) {
            if (k == key) {
                return true
            }
        }
        return false
    }
    func lzw_compress(_ bits: String) -> String {
        var dict: [String: Int] = (["0": 0, "1": 1] as! [String: Int])
        var current: String = ""
        var result: String = ""
        var index: Int = 2
        var i: Int = 0
        while (i < Int(((bits).count))) {
            let ch = (String(Array(bits)[i]) as! String)
            let candidate = (current + ch)
            if contains_key_int((dict as! [String: Int]), (candidate as! String)) {
                current = (candidate as! String)
            } else {
                result = ((result + String(describing: to_binary((dict[String(String(describing: current))] as? Int ?? 0)))) as! String)
                dict = _set(dict, String(describing: candidate), Int(index))
                index = Int((index &+ 1))
                current = (ch as! String)
            }
            i = Int((i &+ 1))
        }
        if (current != "") {
            result = ((result + String(describing: to_binary((dict[String(String(describing: current))] as? Int ?? 0)))) as! String)
        }
        return result
    }
    let data = "01001100100111"
    print(_p(String(describing: lzw_compress((data as! String)))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
