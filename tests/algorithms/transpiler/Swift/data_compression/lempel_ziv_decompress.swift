// Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:37:20 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func list_contains(_ xs: [String], _ v: String) -> Bool {
        var i: Int = 0
        while (i < Int(((xs).count))) {
            if ((xs[i] as! String) == v) {
                return true
            }
            i = Int((i &+ 1))
        }
        return false
    }
    func is_power_of_two(_ n: Int) -> Bool {
        if (n < 1) {
            return false
        }
        var x: Int = n
        while (x > 1) {
            if (((x % 2 + 2) % 2) != 0) {
                return false
            }
            x = Int((x / 2))
        }
        return true
    }
    func bin_string(_ n: Int) -> String {
        if (n == 0) {
            return "0"
        }
        var res: String = ""
        var x: Int = n
        while (x > 0) {
            let bit = ((x % 2 + 2) % 2)
            res = ((String(describing: bit) + res) as! String)
            x = Int((x / 2))
        }
        return res
    }
    func decompress_data(_ data_bits: String) -> String {
        var lexicon: [String: String] = (["0": "0", "1": "1"] as! [String: String])
        var keys: [String] = (["0", "1"] as! [String])
        var result: String = ""
        var curr_string: String = ""
        var index: Int = 2
        var i: Int = 0
        while (i < Int(((data_bits).count))) {
            curr_string = ((curr_string + String(describing: String(Array(String(describing: (data_bits as! String)))[i..<(i &+ 1)]))) as! String)
            if (!list_contains((keys as! [String]), (curr_string as! String))) {
                i = Int((i &+ 1))
                continue
            }
            let last_match_id = (lexicon[String(String(describing: curr_string))] as! String)
            result = ((result + last_match_id) as! String)
            lexicon = _set(lexicon, String(describing: curr_string), ((last_match_id + "0") as! String))
            if is_power_of_two(index) {
                var new_lex: [String: String] = ([:] as! [String: String])
                var new_keys: [String] = ([] as! [String])
                var j: Int = 0
                while (j < Int(((keys).count))) {
                    let curr_key = (keys[j] as! String)
                    new_lex = _set(new_lex, String(describing: ("0" + curr_key)), (lexicon[String(String(describing: curr_key))] as! String))
                    new_keys = (_append(new_keys, ("0" + curr_key)) as! [String])
                    j = Int((j &+ 1))
                }
                lexicon = (new_lex as! [String: String])
                keys = (new_keys as! [String])
            }
            let new_key = String(describing: bin_string(index))
            lexicon = _set(lexicon, String(describing: new_key), ((last_match_id + "1") as! String))
            keys = (_append(keys, new_key) as! [String])
            index = Int((index &+ 1))
            curr_string = ""
            i = Int((i &+ 1))
        }
        return result
    }
    let sample: String = "1011001"
    let decompressed = String(describing: decompress_data((sample as! String)))
    print(_p(decompressed))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
