// Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:37:29 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func run_length_encode(_ text: String) -> String {
        if (Int(((text).count)) == 0) {
            return ""
        }
        var encoded: String = ""
        var count: Int = 1
        var i: Int = 0
        while (i < Int(((text).count))) {
            if (((i &+ 1) < Int(((text).count))) && ((String(Array(text)[i]) as! String) == (String(Array(text)[(i &+ 1)]) as! String))) {
                count = Int((count &+ 1))
            } else {
                encoded = (((encoded + (String(Array(text)[i]) as! String)) + String(describing: count)) as! String)
                count = 1
            }
            i = Int((i &+ 1))
        }
        return encoded
    }
    func run_length_decode(_ encoded: String) -> String {
        var res: String = ""
        var i: Int = 0
        while (i < Int(((encoded).count))) {
            let ch = (String(Array(encoded)[i]) as! String)
            i = Int((i &+ 1))
            var num_str: String = ""
            while (((i < Int(((encoded).count))) && ((String(Array(encoded)[i]) as! String) >= "0")) && ((String(Array(encoded)[i]) as! String) <= "9")) {
                num_str = ((num_str + (String(Array(encoded)[i]) as! String)) as! String)
                i = Int((i &+ 1))
            }
            let count = Int(_int(num_str))
            var j: Int = 0
            while (j < count) {
                res = ((res + ch) as! String)
                j = Int((j &+ 1))
            }
        }
        return res
    }
    let example1 = "AAAABBBCCDAA"
    let encoded1 = String(describing: run_length_encode((example1 as! String)))
    print(_p(encoded1))
    print(_p(String(describing: run_length_decode((encoded1 as! String)))))
    let example2 = "A"
    let encoded2 = String(describing: run_length_encode((example2 as! String)))
    print(_p(encoded2))
    print(_p(String(describing: run_length_decode((encoded2 as! String)))))
    let example3 = "AAADDDDDDFFFCCCAAVVVV"
    let encoded3 = String(describing: run_length_encode((example3 as! String)))
    print(_p(encoded3))
    print(_p(String(describing: run_length_decode((encoded3 as! String)))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
