// Generated by Mochi transpiler v0.10.66 on 2025-08-14 18:43:59 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _idx<K: Hashable, V>(_ m: [K: V], _ k: K) -> V? {
    return m[k]
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func is_prime(_ number: Int) -> Bool {
        if ((1 < number) && (number < 4)) {
            return true
        }
        if (((number < 2) || (((number % 2 + 2) % 2) == 0)) || (((number % 3 + 3) % 3) == 0)) {
            return false
        }
        var i = 5
        while ((i &* i) <= number) {
            if ((((number % i + i) % i) == 0) || (((number % _int((i &+ 2)) + _int((i &+ 2))) % _int((i &+ 2))) == 0)) {
                return false
            }
            i = _int((i &+ 6))
        }
        return true
    }
    func search(_ target: Int, _ arr: [Int]) -> Bool {
        var left = 0
        var right = (_int(((arr).count)) &- 1)
        while (left <= right) {
            let middle = (_int((left &+ right)) / 2)
            if ((_idx(arr, middle) as? Int ?? 0) == target) {
                return true
            }
            if ((_idx(arr, middle) as? Int ?? 0) < target) {
                left = _int((middle &+ 1))
            } else {
                right = _int((middle &- 1))
            }
        }
        return false
    }
    func sort_int(_ xs: [Int]) -> [Int] {
        var arr = xs
        var i = 0
        while (i < _int(((arr).count))) {
            var j = (i &+ 1)
            while (j < _int(((arr).count))) {
                if ((_idx(arr, j) as? Int ?? 0) < (_idx(arr, i) as? Int ?? 0)) {
                    let tmp = (_idx(arr, i) as? Int ?? 0)
                    arr = _set(arr, i, (_idx(arr, j) as? Int ?? 0))
                    arr = _set(arr, j, Int(tmp))
                }
                j = _int((j &+ 1))
            }
            i = _int((i &+ 1))
        }
        return arr
    }
    func permutations_of_number(_ n: Int) -> [Int] {
        let s = _p(n)
        var d: [Int] = ([] as! [Int])
        var i = 0
        while (i < _int(((s).count))) {
            d = (_append(d, _int(_int((String(Array(s)[i]) as! String)))) as! [Int])
            i = _int((i &+ 1))
        }
        var res: [Int] = ([] as! [Int])
        var a = 0
        while (a < _int(((d).count))) {
            var b = 0
            while (b < _int(((d).count))) {
                if (b != a) {
                    var c = 0
                    while (c < _int(((d).count))) {
                        if ((c != a) && (c != b)) {
                            var e = 0
                            while (e < _int(((d).count))) {
                                if (((e != a) && (e != b)) && (e != c)) {
                                    let val = (((((_idx(d, a) as? Int ?? 0) &* 1000) &+ ((_idx(d, b) as? Int ?? 0) &* 100)) &+ ((_idx(d, c) as? Int ?? 0) &* 10)) &+ (_idx(d, e) as? Int ?? 0))
                                    res = (_append(res, val) as! [Int])
                                }
                                e = _int((e &+ 1))
                            }
                        }
                        c = _int((c &+ 1))
                    }
                }
                b = _int((b &+ 1))
            }
            a = _int((a &+ 1))
        }
        return res
    }
    func abs_int(_ x: Int) -> Int {
        if (x < 0) {
            return -x
        }
        return x
    }
    func contains_int(_ xs: [Int], _ v: Int) -> Bool {
        var i = 0
        while (i < _int(((xs).count))) {
            if ((_idx(xs, i) as? Int ?? 0) == v) {
                return true
            }
            i = _int((i &+ 1))
        }
        return false
    }
    func solution() -> Int {
        var prime_list: [Int] = ([] as! [Int])
        var n = 1001
        while (n < 10000) {
            if is_prime(n) {
                prime_list = (_append(prime_list, n) as! [Int])
            }
            n = _int((n &+ 2))
        }
        var candidates: [[Int]] = ([] as! [[Int]])
        var i = 0
        while (i < _int(((prime_list).count))) {
            let number = (_idx(prime_list, i) as? Int ?? 0)
            var tmp: [Int] = ([] as! [Int])
            let perms: [Int] = (permutations_of_number(number) as! [Int])
            var j = 0
            while (j < _int(((perms).count))) {
                let prime = (_idx(perms, j) as? Int ?? 0)
                if ((((prime % 2 + 2) % 2) != 0) && search(prime, (prime_list as! [Int]))) {
                    tmp = (_append(tmp, prime) as! [Int])
                }
                j = _int((j &+ 1))
            }
            tmp = (sort_int((tmp as! [Int])) as! [Int])
            if (_int(((tmp).count)) >= 3) {
                candidates = (_append(candidates, tmp) as! [[Int]])
            }
            i = _int((i &+ 1))
        }
        var passed: [[Int]] = ([] as! [[Int]])
        i = 0
        while (i < _int(((candidates).count))) {
            let candidate: [Int] = (_idx(candidates, i) as! [Int])
            var found = false
            var a = 0
            while (a < _int(((candidate).count))) {
                var b = (a &+ 1)
                while (b < _int(((candidate).count))) {
                    var c = (b &+ 1)
                    while (c < _int(((candidate).count))) {
                        let x = (_idx(candidate, a) as? Int ?? 0)
                        let y = (_idx(candidate, b) as? Int ?? 0)
                        let z = (_idx(candidate, c) as? Int ?? 0)
                        if ((((_int(abs_int((x &- y))) == _int(abs_int((y &- z)))) && (x != y)) && (x != z)) && (y != z)) {
                            let triple: [Int] = (sort_int(({
                                var _arr: [Int] = []
                                _arr = _append(_arr, x)
                                _arr = _append(_arr, y)
                                _arr = _append(_arr, z)
                                return _arr
                            }() as! [Int])) as! [Int])
                            passed = (_append(passed, triple) as! [[Int]])
                            found = true
                            break
                        }
                        c = _int((c &+ 1))
                    }
                    if found {
                        break
                    }
                    b = _int((b &+ 1))
                }
                if found {
                    break
                }
                a = _int((a &+ 1))
            }
            i = _int((i &+ 1))
        }
        var answer_nums: [Int] = ([] as! [Int])
        i = 0
        while (i < _int(((passed).count))) {
            let seq: [Int] = (_idx(passed, i) as! [Int])
            let val = _int(_int(((_p((_idx(seq, 0) as? Int ?? 0)) + _p((_idx(seq, 1) as? Int ?? 0))) + _p((_idx(seq, 2) as? Int ?? 0)))))
            if (!contains_int((answer_nums as! [Int]), val)) {
                answer_nums = (_append(answer_nums, val) as! [Int])
            }
            i = _int((i &+ 1))
        }
        var max_val = (_idx(answer_nums, 0) as? Int ?? 0)
        i = 1
        while (i < _int(((answer_nums).count))) {
            if ((_idx(answer_nums, i) as? Int ?? 0) > max_val) {
                max_val = (_idx(answer_nums, i) as? Int ?? 0)
            }
            i = _int((i &+ 1))
        }
        return max_val
    }
    print(_p(_int(solution())))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
