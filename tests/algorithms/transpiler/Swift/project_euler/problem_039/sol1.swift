// Generated by Mochi transpiler v0.10.66 on 2025-08-14 18:34:49 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func int_sqrt(_ n: Int) -> Int {
        var low: Int = 0
        var high: Int = n
        while (low <= high) {
            let mid = (_int((low &+ high)) / 2)
            let sq = (mid &* mid)
            if (sq == n) {
                return mid
            }
            if (sq < n) {
                low = _int((mid &+ 1))
            } else {
                high = _int((mid &- 1))
            }
        }
        return high
    }
    func pythagorean_triple(_ max_perimeter: Int) -> [Int: Int] {
        var triplets: [Int: Int] = ([:] as! [Int: Int])
        var base: Int = 1
        while (base <= max_perimeter) {
            var perpendicular: Int = base
            while (perpendicular <= max_perimeter) {
                let hyp_sq = ((base &* base) &+ (perpendicular &* perpendicular))
                let hyp = _int(int_sqrt(hyp_sq))
                if ((hyp &* hyp) == hyp_sq) {
                    let perimeter = ((base &+ perpendicular) &+ hyp)
                    if (perimeter <= max_perimeter) {
                        if (triplets[perimeter] != nil) {
                            triplets = _set(triplets, perimeter, _int((((triplets[perimeter] ?? 0) as? Int ?? 0) &+ 1)))
                        } else {
                            triplets = _set(triplets, perimeter, 1)
                        }
                    }
                }
                perpendicular = _int((perpendicular &+ 1))
            }
            base = _int((base &+ 1))
        }
        return triplets
    }
    func max_perimeter(_ counts: [Int: Int]) -> Int {
        var best_p = 0
        var max_count = 0
        for p in counts.keys.sorted() {
            let count = ((counts[p] ?? 0) as? Int ?? 0)
            if ((count > max_count) || ((count == max_count) && (p > best_p))) {
                max_count = Int(count)
                best_p = Int(p)
            }
        }
        return best_p
    }
    func solution(_ n: Int) -> Int {
        let triplets: [Int: Int] = (pythagorean_triple(n) as! [Int: Int])
        return _int(max_perimeter((triplets as! [Int: Int])))
    }
    func main() {
        let s200 = _int(max_perimeter((pythagorean_triple(200) as! [Int: Int])))
        let s100 = _int(max_perimeter((pythagorean_triple(100) as! [Int: Int])))
        print(_p(_p(s100)))
        print(_p(_p(s200)))
        let best = _int(max_perimeter((pythagorean_triple(1000) as! [Int: Int])))
        print(_p(_p(best)))
        print(_p((("Perimeter " + _p(best)) + " has maximum solutions")))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
