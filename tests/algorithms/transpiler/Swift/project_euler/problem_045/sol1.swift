// Generated by Mochi transpiler v0.10.66 on 2025-08-14 18:36:09 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func to_float(_ x: Int) -> Double {
        return (Double(x) * 1.0)
    }
    func sqrt(_ x: Double) -> Double {
        if (x <= 0.0) {
            return 0.0
        }
        var guess: Double = x
        var i: Int = 0
        while (i < 10) {
            guess = Double((Double((guess + (x / guess))) / 2.0))
            i = _int((i &+ 1))
        }
        return guess
    }
    func floor(_ x: Double) -> Int {
        var n: Int = 0
        var y: Double = x
        while (y >= 1.0) {
            y = Double((y - 1.0))
            n = _int((n &+ 1))
        }
        return n
    }
    func hexagonal_num(_ n: Int) -> Int {
        return (n &* _int(((2 &* n) &- 1)))
    }
    func is_pentagonal(_ n: Int) -> Bool {
        let root: Double = Double(sqrt(Double((1.0 + (24.0 * Double(Double(n)))))))
        let val: Double = (Double((1.0 + root)) / 6.0)
        return (val == Double(Double(_int(floor(Double(val))))))
    }
    func solution(_ start: Int) -> Int {
        var idx: Int = start
        var num: Int = _int(hexagonal_num(idx))
        while (!is_pentagonal(num)) {
            idx = _int((idx &+ 1))
            num = _int(hexagonal_num(idx))
        }
        return num
    }
    func test_hexagonal_num() {
        if (_int(hexagonal_num(143)) != 40755) {
            _ = fatalError("hexagonal_num(143) failed")
        }
        if (_int(hexagonal_num(21)) != 861) {
            _ = fatalError("hexagonal_num(21) failed")
        }
        if (_int(hexagonal_num(10)) != 190) {
            _ = fatalError("hexagonal_num(10) failed")
        }
    }
    func test_is_pentagonal() {
        if (!is_pentagonal(330)) {
            _ = fatalError("330 should be pentagonal")
        }
        if is_pentagonal(7683) {
            _ = fatalError("7683 should not be pentagonal")
        }
        if (!is_pentagonal(2380)) {
            _ = fatalError("2380 should be pentagonal")
        }
    }
    func test_solution() {
        if (_int(solution(144)) != 1533776805) {
            _ = fatalError("solution failed")
        }
    }
    _ = test_hexagonal_num()
    _ = test_is_pentagonal()
    _ = test_solution()
    print(_p((_p(_int(solution(144))) + " = ")))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
