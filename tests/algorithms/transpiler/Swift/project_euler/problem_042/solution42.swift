// Generated by Mochi transpiler v0.10.69 on 2025-08-22 14:34:27 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.isNaN || d.isInfinite {
                return String(d)
            }
            if d.rounded(.towardZero) == d {
                // avoid overflow when converting to Int64
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
let _dataDir = "/workspace/mochi/tests/github/TheAlgorithms/Mochi/project_euler/problem_042"
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _num(_ v: Any) -> Double {
    if let d = v as? Double { return d }
    if let i = v as? Int { return Double(i) }
    if let i = v as? Int64 { return Double(i) }
    return 0
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _read_file(_ path: String) -> String {
    let fm = FileManager.default
    var p = path
    if !fm.fileExists(atPath: p) {
        p = URL(fileURLWithPath: _dataDir).appendingPathComponent(path).path
    }
    return (try? String(contentsOfFile: p)) ?? ""
}
func _ord(_ s: String) -> Int {
    return Int(Character(s).unicodeScalars.first?.value ?? 0)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _slice<T>(_ xs: [T], _ start: Int, _ end: Int) -> [T] {
    var s = start
    var e = end
    if s < 0 { s = 0 }
    if e > xs.count { e = xs.count }
    if s > e { s = e }
    return Array(xs[s..<e])
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    
    func triangular_numbers(_ limit: Int) -> [Int] {
        var res: [Int] = ([] as! [Int])
        var n = 1
        while (n <= limit) {
            res = (_append(res, (_int((n &* _int((n &+ 1)))) / 2)) as! [Int])
            n = _int((n &+ 1))
        }
        return res
    }
    func parse_words(_ text: String) -> [String] {
        var words: [String] = ([] as! [String])
        var current = ""
        var i = 0
        while (i < _int(((text).count))) {
            let c = String(_slice(Array(text), i, (i &+ 1)))
            if ((c == ",")) {
                words = (_append(words, current) as! [String])
                current = ""
            } else if ((c == "\"")) {
            } else if (((c == "\r") || (c == "\n"))) {
            } else {
                current = ((_p(current) + _p(c)) as! String)
            }
            
            
            i = _int((i &+ 1))
        }
        if ((_int(((current).count)) > 0)) {
            words = (_append(words, current) as! [String])
        }
        return words
    }
    func word_value(_ word: String) -> Int {
        var total = 0
        var i = 0
        while (i < _int(((word).count))) {
            total = _int(((total &+ _int(_ord(String(_slice(Array(word), i, (i &+ 1)))))) &- 64))
            i = _int((i &+ 1))
        }
        return total
    }
    func contains(_ xs: [Int], _ target: Int) -> Bool {
        for x in xs {
            if ((x == target)) {
                return true
            }
        }
        return false
    }
    func solution() -> Int {
        let text = String(describing: _read_file("words.txt"))
        let words: [String] = (parse_words((text as! String)) as! [String])
        let tri: [Int] = (triangular_numbers(100) as! [Int])
        var count = 0
        for w in words {
            let v = _int(word_value((w as! String)))
            if (contains((tri as! [Int]), v)) {
                count = _int((count &+ 1))
            }
        }
        return count
    }
    print(_p(_p(_int(solution()))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
