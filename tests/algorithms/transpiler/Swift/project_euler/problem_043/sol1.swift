// Generated by Mochi transpiler v0.10.66 on 2025-08-14 18:35:15 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _idx<K: Hashable, V>(_ m: [K: V], _ k: K) -> V? {
    return m[k]
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func is_substring_divisible(_ num: [Int]) -> Bool {
        if ((((_idx(num, 3) as? Int ?? 0) % 2 + 2) % 2) != 0) {
            return false
        }
        if (((_int((((_idx(num, 2) as? Int ?? 0) &+ (_idx(num, 3) as? Int ?? 0)) &+ (_idx(num, 4) as? Int ?? 0))) % 3 + 3) % 3) != 0) {
            return false
        }
        if ((((_idx(num, 5) as? Int ?? 0) % 5 + 5) % 5) != 0) {
            return false
        }
        let primes: [Int] = ({
            var _arr: [Int] = []
            _arr = _append(_arr, 7)
            _arr = _append(_arr, 11)
            _arr = _append(_arr, 13)
            _arr = _append(_arr, 17)
            return _arr
        }() as! [Int])
        var i = 0
        while (i < _int(((primes).count))) {
            let p = (_idx(primes, i) as? Int ?? 0)
            let idx = (i &+ 4)
            let val = ((((_idx(num, idx) as? Int ?? 0) &* 100) &+ ((_idx(num, (idx &+ 1)) as? Int ?? 0) &* 10)) &+ (_idx(num, (idx &+ 2)) as? Int ?? 0))
            if (((val % p + p) % p) != 0) {
                return false
            }
            i = _int((i &+ 1))
        }
        return true
    }
    func remove_at(_ xs: [Int], _ idx: Int) -> [Int] {
        var res: [Int] = ([] as! [Int])
        var i = 0
        while (i < _int(((xs).count))) {
            if (i != idx) {
                res = (_append(res, (_idx(xs, i) as? Int ?? 0)) as! [Int])
            }
            i = _int((i &+ 1))
        }
        return res
    }
    func digits_to_number(_ xs: [Int]) -> Int {
        var value = 0
        var i = 0
        while (i < _int(((xs).count))) {
            value = _int(((value &* 10) &+ (_idx(xs, i) as? Int ?? 0)))
            i = _int((i &+ 1))
        }
        return value
    }
    func search(_ prefix: [Int], _ remaining: [Int]) -> Int {
        if (_int(((remaining).count)) == 0) {
            if is_substring_divisible((prefix as! [Int])) {
                return _int(digits_to_number((prefix as! [Int])))
            }
            return 0
        }
        var total = 0
        var i = 0
        while (i < _int(((remaining).count))) {
            let d = (_idx(remaining, i) as? Int ?? 0)
            let next_prefix: [Int] = (_append(prefix, d) as! [Int])
            let next_remaining: [Int] = (remove_at((remaining as! [Int]), i) as! [Int])
            total = _int((total &+ _int(search((next_prefix as! [Int]), (next_remaining as! [Int])))))
            i = _int((i &+ 1))
        }
        return total
    }
    func solution(_ n: Int) -> Int {
        var digits: [Int] = ([] as! [Int])
        var i = 0
        while (i < n) {
            digits = (_append(digits, i) as! [Int])
            i = _int((i &+ 1))
        }
        return _int(search(([] as! [Int]), (digits as! [Int])))
    }
    print(_p("solution() ="), _p(_int(solution(10))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
