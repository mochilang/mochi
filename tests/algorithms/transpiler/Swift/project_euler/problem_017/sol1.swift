// Generated by Mochi transpiler v0.10.66 on 2025-08-14 18:26:12 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _idx<K: Hashable, V>(_ m: [K: V], _ k: K) -> V? {
    return m[k]
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func solution(_ n: Int) -> Int {
        let ones_counts: [Int] = ({
            var _arr: [Int] = []
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 3)
            _arr = _append(_arr, 3)
            _arr = _append(_arr, 5)
            _arr = _append(_arr, 4)
            _arr = _append(_arr, 4)
            _arr = _append(_arr, 3)
            _arr = _append(_arr, 5)
            _arr = _append(_arr, 5)
            _arr = _append(_arr, 4)
            _arr = _append(_arr, 3)
            _arr = _append(_arr, 6)
            _arr = _append(_arr, 6)
            _arr = _append(_arr, 8)
            _arr = _append(_arr, 8)
            _arr = _append(_arr, 7)
            _arr = _append(_arr, 7)
            _arr = _append(_arr, 9)
            _arr = _append(_arr, 8)
            _arr = _append(_arr, 8)
            return _arr
        }() as! [Int])
        let tens_counts: [Int] = ({
            var _arr: [Int] = []
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 6)
            _arr = _append(_arr, 6)
            _arr = _append(_arr, 5)
            _arr = _append(_arr, 5)
            _arr = _append(_arr, 5)
            _arr = _append(_arr, 7)
            _arr = _append(_arr, 6)
            _arr = _append(_arr, 6)
            return _arr
        }() as! [Int])
        var count = 0
        var i = 1
        while (i <= n) {
            if (i < 1000) {
                if (i >= 100) {
                    count = _int(((count &+ (_idx(ones_counts, (i / 100)) as? Int ?? 0)) &+ 7))
                    if (((i % 100 + 100) % 100) != 0) {
                        count = _int((count &+ 3))
                    }
                }
                let remainder = ((i % 100 + 100) % 100)
                if ((remainder > 0) && (remainder < 20)) {
                    count = _int((count &+ (_idx(ones_counts, remainder) as? Int ?? 0)))
                } else {
                    count = _int((count &+ (_idx(ones_counts, ((i % 10 + 10) % 10)) as? Int ?? 0)))
                    count = _int((count &+ (_idx(tens_counts, (_int((remainder &- ((i % 10 + 10) % 10))) / 10)) as? Int ?? 0)))
                }
            } else {
                count = _int(((count &+ (_idx(ones_counts, (i / 1000)) as? Int ?? 0)) &+ 8))
            }
            i = _int((i &+ 1))
        }
        return count
    }
    print(_p(_p(_int(solution(1000)))))
    print(_p(_p(_int(solution(5)))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
