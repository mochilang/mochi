// Generated by Mochi transpiler v0.10.66 on 2025-08-14 18:26:37 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _idx<K: Hashable, V>(_ m: [K: V], _ k: K) -> V? {
    return m[k]
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
func _slice<T>(_ xs: [T], _ start: Int, _ end: Int) -> [T] {
    var s = start
    var e = end
    if s < 0 { s = 0 }
    if e > xs.count { e = xs.count }
    if s > e { s = e }
    return Array(xs[s..<e])
}
struct Name: Codable {
    var name: String
    init() {
        self.name = ""
    }
    init(name: String) {
        self.name = name
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func ord_letter(_ ch: String) -> Int {
        let alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
        var i = 0
        while (i < _int(((alphabet).count))) {
            if (String(_slice(Array(alphabet), i, (i &+ 1))) == ch) {
                return (i &+ 1)
            }
            i = _int((i &+ 1))
        }
        return 0
    }
    func name_value(_ name: String) -> Int {
        var total = 0
        var i = 0
        while (i < _int(((name).count))) {
            total = _int((total &+ _int(ord_letter((String(_slice(Array(name), i, (i &+ 1))) as! String)))))
            i = _int((i &+ 1))
        }
        return total
    }
    func bubble_sort(_ arr: inout [String]) -> [String] {
        var n = _int(((arr).count))
        var i = 0
        while (i < n) {
            var j = 0
            while (j < ((n &- i) &- 1)) {
                if ((_idx(arr, j) as! String) > (_idx(arr, (j &+ 1)) as! String)) {
                    let temp = (_idx(arr, j) as! String)
                    arr = _set(arr, j, (_idx(arr, (j &+ 1)) as! String))
                    arr = _set(arr, (j &+ 1), (temp as! String))
                }
                j = _int((j &+ 1))
            }
            i = _int((i &+ 1))
        }
        return arr
    }
