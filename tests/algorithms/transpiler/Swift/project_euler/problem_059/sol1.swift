// Generated by Mochi transpiler v0.10.66 on 2025-08-14 18:40:59 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _idx<K: Hashable, V>(_ m: [K: V], _ k: K) -> V? {
    return m[k]
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _slice<T>(_ xs: [T], _ start: Int, _ end: Int) -> [T] {
    var s = start
    var e = end
    if s < 0 { s = 0 }
    if e > xs.count { e = xs.count }
    if s > e { s = e }
    return Array(xs[s..<e])
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func xor(_ a: Int, _ b: Int) -> Int {
        var res = 0
        var bit = 1
        var x = a
        var y = b
        while ((x > 0) || (y > 0)) {
            let abit = ((x % 2 + 2) % 2)
            let bbit = ((y % 2 + 2) % 2)
            if (abit != bbit) {
                res = _int((res &+ bit))
            }
            x = _int((x / 2))
            y = _int((y / 2))
            bit = _int((bit &* 2))
        }
        return res
    }
    let ascii_chars: String = " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"
    func chr(_ code: Int) -> String {
        if (code == 10) {
            return "\n"
        }
        if (code == 13) {
            return "\r"
        }
        if (code == 9) {
            return "\t"
        }
        if ((code >= 32) && (code < 127)) {
            return String(_slice(Array(ascii_chars), (code &- 32), (code &- 31)))
        }
        return ""
    }
    func ord(_ ch: String) -> Int {
        if (ch == "\n") {
            return 10
        }
        if (ch == "\r") {
            return 13
        }
        if (ch == "\t") {
            return 9
        }
        var i = 0
        while (i < _int(((ascii_chars).count))) {
            if (String(_slice(Array(ascii_chars), i, (i &+ 1))) == ch) {
                return (32 &+ i)
            }
            i = _int((i &+ 1))
        }
        return 0
    }
    func is_valid_ascii(_ code: Int) -> Bool {
        if ((code >= 32) && (code <= 126)) {
            return true
        }
        if (((code == 9) || (code == 10)) || (code == 13)) {
            return true
        }
        return false
    }
    var LOWERCASE_INTS: [Int] = ([] as! [Int])
    var i = 97
    while (i <= 122) {
        LOWERCASE_INTS = (_append(LOWERCASE_INTS, i) as! [Int])
        i = _int((i &+ 1))
    }
    var COMMON_WORDS: [String] = ({
        var _arr: [String] = []
        _arr = _append(_arr, "the")
        _arr = _append(_arr, "be")
        _arr = _append(_arr, "to")
        _arr = _append(_arr, "of")
        _arr = _append(_arr, "and")
        _arr = _append(_arr, "in")
        _arr = _append(_arr, "that")
        _arr = _append(_arr, "have")
        return _arr
    }() as! [String])
    func try_key(_ ciphertext: [Int], _ key: [Int]) -> String? {
        var decoded = ""
        var i = 0
        let klen = _int(((key).count))
        while (i < _int(((ciphertext).count))) {
            let decodedchar = _int(xor((_idx(ciphertext, i) as? Int ?? 0), (_idx(key, ((i % klen + klen) % klen)) as? Int ?? 0)))
            if (!is_valid_ascii(decodedchar)) {
                return nil
            }
            decoded = ((decoded + String(describing: chr(decodedchar))) as! String)
            i = _int((i &+ 1))
        }
        return (decoded as! String?)
    }
    func filter_valid_chars(_ ciphertext: [Int]) -> [String] {
        var possibles: [String] = ([] as! [String])
        var i = 0
        while (i < _int(((LOWERCASE_INTS).count))) {
            var j = 0
            while (j < _int(((LOWERCASE_INTS).count))) {
                var k = 0
                while (k < _int(((LOWERCASE_INTS).count))) {
                    let key: [Int] = ({
                        var _arr: [Int] = []
                        _arr = _append(_arr, (_idx(LOWERCASE_INTS, i) as? Int ?? 0))
                        _arr = _append(_arr, (_idx(LOWERCASE_INTS, j) as? Int ?? 0))
                        _arr = _append(_arr, (_idx(LOWERCASE_INTS, k) as? Int ?? 0))
                        return _arr
                    }() as! [Int])
                    let decoded: String? = try_key((ciphertext as! [Int]), (key as! [Int]))
                    if ((decoded as! String) != nil) {
                        possibles = (((_append(possibles, decoded) as! [String]) as! [Any?]) as! [String])
                    }
                    k = _int((k &+ 1))
                }
                j = _int((j &+ 1))
            }
            i = _int((i &+ 1))
        }
        return possibles
    }
    func contains(_ s: String, _ sub: String) -> Bool {
        let n = _int(((s).count))
        let m = _int(((sub).count))
        if (m == 0) {
            return true
        }
        var i = 0
        while (i <= (n &- m)) {
            var j = 0
            var is_match = true
            while (j < m) {
                if ((String(Array(s)[(i &+ j)]) as! String) != (String(Array(sub)[j]) as! String)) {
                    is_match = false
                    break
                }
                j = _int((j &+ 1))
            }
            if is_match {
                return true
            }
            i = _int((i &+ 1))
        }
        return false
    }
    func filter_common_word(_ possibles: [String], _ common_word: String) -> [String] {
        var res: [String] = ([] as! [String])
        var i = 0
        while (i < _int(((possibles).count))) {
            let p = (_idx(possibles, i) as! String)
            if contains(String(describing: (p.lowercased())), (common_word as! String)) {
                res = (_append(res, p) as! [String])
            }
            i = _int((i &+ 1))
        }
        return res
    }
    func solution(_ ciphertext: [Int]) -> Int {
        var possibles = (filter_valid_chars((ciphertext as! [Int])) as! [String])
        var i = 0
        while (i < _int(((COMMON_WORDS).count))) {
            let word = (_idx(COMMON_WORDS, i) as! String)
            possibles = (filter_common_word((possibles as! [String]), (word as! String)) as! [String])
            if (_int(((possibles).count)) == 1) {
                break
            }
            i = _int((i &+ 1))
        }
        let decoded_text = (_idx(possibles, 0) as! String)
        var sum = 0
        var j = 0
        while (j < _int(((decoded_text).count))) {
            sum = _int((sum &+ _int(ord(String(describing: String(Array(String(describing: (decoded_text as! String)))[j..<(j &+ 1)]))))))
            j = _int((j &+ 1))
        }
        return sum
    }
    let ciphertext: [Int] = ({
        var _arr: [Int] = []
        _arr = _append(_arr, 17)
        _arr = _append(_arr, 6)
        _arr = _append(_arr, 1)
        _arr = _append(_arr, 69)
        _arr = _append(_arr, 12)
        _arr = _append(_arr, 1)
        _arr = _append(_arr, 69)
        _arr = _append(_arr, 26)
        _arr = _append(_arr, 11)
        _arr = _append(_arr, 69)
        _arr = _append(_arr, 1)
        _arr = _append(_arr, 2)
        _arr = _append(_arr, 69)
        _arr = _append(_arr, 15)
        _arr = _append(_arr, 10)
        _arr = _append(_arr, 1)
        _arr = _append(_arr, 78)
        _arr = _append(_arr, 13)
        _arr = _append(_arr, 11)
        _arr = _append(_arr, 78)
        _arr = _append(_arr, 16)
        _arr = _append(_arr, 13)
        _arr = _append(_arr, 15)
        _arr = _append(_arr, 16)
        _arr = _append(_arr, 69)
        _arr = _append(_arr, 6)
        _arr = _append(_arr, 5)
        _arr = _append(_arr, 19)
        _arr = _append(_arr, 11)
        return _arr
    }() as! [Int])
    print(_p(_p(_int(solution((ciphertext as! [Int]))))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
