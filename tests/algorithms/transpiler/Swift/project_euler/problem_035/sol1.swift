// Generated by Mochi transpiler v0.10.66 on 2025-08-14 18:33:57 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _idx<K: Hashable, V>(_ m: [K: V], _ k: K) -> V? {
    return m[k]
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let LIMIT = 10000
    var sieve: [Bool] = ([] as! [Bool])
    var i = 0
    while (i <= LIMIT) {
        sieve = (_append(sieve, true) as! [Bool])
        i = _int((i &+ 1))
    }
    var p = 2
    while ((p &* p) <= LIMIT) {
        if (_idx(sieve, p) as! Bool) {
            var j = (p &* p)
            while (j <= LIMIT) {
                sieve = _set(sieve, j, false)
                j = _int((j &+ p))
            }
        }
        p = _int((p &+ 1))
    }
    func is_prime(_ n: Int) -> Bool {
        return (_idx(sieve, n) as! Bool)
    }
    func contains_an_even_digit(_ n: Int) -> Bool {
        let s = _p(n)
        var idx = 0
        while (idx < _int(((s).count))) {
            let c = (String(Array(s)[idx]) as! String)
            if (((((c == "0") || (c == "2")) || (c == "4")) || (c == "6")) || (c == "8")) {
                return true
            }
            idx = _int((idx &+ 1))
        }
        return false
    }
    func parse_int(_ s: String) -> Int {
        var value = 0
        var k = 0
        while (k < _int(((s).count))) {
            let ch = (String(Array(s)[k]) as! String)
            value = _int(((value &* 10) &+ _int(_int(ch))))
            k = _int((k &+ 1))
        }
        return value
    }
    func find_circular_primes(_ limit: Int) -> [Int] {
        var result: [Int] = ({
            var _arr: [Int] = []
            _arr = _append(_arr, 2)
            return _arr
        }() as! [Int])
        var num = 3
        while (num <= limit) {
            if (is_prime(num) && (contains_an_even_digit(num) == false)) {
                let s = _p(num)
                var all_prime = true
                var j = 0
                while (j < _int(((s).count))) {
                    let rotated_str = (String(describing: String(Array(String(describing: (s as! String)))[j..<_int(((s).count))])) + String(describing: String(Array(String(describing: (s as! String)))[0..<j])))
                    let rotated = _int(parse_int((rotated_str as! String)))
                    if (!is_prime(rotated)) {
                        all_prime = false
                        break
                    }
                    j = _int((j &+ 1))
                }
                if all_prime {
                    result = (_append(result, num) as! [Int])
                }
            }
            num = _int((num &+ 2))
        }
        return result
    }
    func solution() -> Int {
        return _int((((find_circular_primes(LIMIT) as! [Int])).count))
    }
    print(_p(("len(find_circular_primes()) = " + _p(_int(solution())))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
