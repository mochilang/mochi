// Generated by Mochi transpiler v0.10.66 on 2025-08-14 18:44:18 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _idx<K: Hashable, V>(_ m: [K: V], _ k: K) -> V? {
    return m[k]
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func prime_sieve(_ limit: Int) -> [Int] {
        if (limit <= 2) {
            return ([] as! [Int])
        }
        var is_prime: [Bool] = ([] as! [Bool])
        var i = 0
        while (i < limit) {
            is_prime = (_append(is_prime, true) as! [Bool])
            i = _int((i &+ 1))
        }
        is_prime = _set(is_prime, 0, false)
        is_prime = _set(is_prime, 1, false)
        var p = 3
        while ((p &* p) < limit) {
            var index = (p &* 2)
            while (index < limit) {
                is_prime = _set(is_prime, index, false)
                index = _int((index &+ p))
            }
            p = _int((p &+ 2))
        }
        var primes: [Int] = ({
            var _arr: [Int] = []
            _arr = _append(_arr, 2)
            return _arr
        }() as! [Int])
        var n = 3
        while (n < limit) {
            if (_idx(is_prime, n) as! Bool) {
                primes = (_append(primes, n) as! [Int])
            }
            n = _int((n &+ 2))
        }
        return primes
    }
    func solution(_ ceiling: Int) -> Int {
        let primes: [Int] = (prime_sieve(ceiling) as! [Int])
        var prime_map: [Int: Bool] = ([:] as! [Int: Bool])
        var i = 0
        while (i < _int(((primes).count))) {
            prime_map = _set(prime_map, (_idx(primes, i) as? Int ?? 0), true)
            i = _int((i &+ 1))
        }
        var prefix: [Int] = ({
            var _arr: [Int] = []
            _arr = _append(_arr, 0)
            return _arr
        }() as! [Int])
        i = 0
        while (i < _int(((primes).count))) {
            prefix = (_append(prefix, ((_idx(prefix, i) as? Int ?? 0) &+ (_idx(primes, i) as? Int ?? 0))) as! [Int])
            i = _int((i &+ 1))
        }
        var max_len = 0
        while ((max_len < _int(((prefix).count))) && ((_idx(prefix, max_len) as? Int ?? 0) < ceiling)) {
            max_len = _int((max_len &+ 1))
        }
        var L = max_len
        while (L > 0) {
            var start = 0
            while ((start &+ L) <= _int(((primes).count))) {
                let s = ((_idx(prefix, (start &+ L)) as? Int ?? 0) &- (_idx(prefix, start) as? Int ?? 0))
                if (s >= ceiling) {
                    break
                }
                if ((prime_map[s] ?? false) as! Bool) {
                    return s
                }
                start = _int((start &+ 1))
            }
            L = _int((L &- 1))
        }
        return 0
    }
    let ans = _int(solution(1000000))
    print(_p(("solution() = " + _p(ans))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
