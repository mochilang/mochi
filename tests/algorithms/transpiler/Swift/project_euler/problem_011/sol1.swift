// Generated by Mochi transpiler v0.10.64 on 2025-08-12 12:45:27 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func largest_product(_ grid: [[Int]]) -> Int {
        let n_rows: Int = _int(((grid).count))
        let n_cols: Int = _int((((_idx(grid, 0) as! [Int])).count))
        var largest: Int = 0
        var i: Int = 0
        while (i < n_rows) {
            var j: Int = 0
            while (j < n_cols) {
                if (j <= (n_cols &- 4)) {
                    let horz: Int = ((((_idx(_idx(grid, i)!, j) as? Int ?? 0) &* (_idx(_idx(grid, i)!, (j &+ 1)) as? Int ?? 0)) &* (_idx(_idx(grid, i)!, (j &+ 2)) as? Int ?? 0)) &* (_idx(_idx(grid, i)!, (j &+ 3)) as? Int ?? 0))
                    if (horz > largest) {
                        largest = Int(horz)
                    }
                }
                if (i <= (n_rows &- 4)) {
                    let vert: Int = ((((_idx(_idx(grid, i)!, j) as? Int ?? 0) &* (_idx(_idx(grid, (i &+ 1))!, j) as? Int ?? 0)) &* (_idx(_idx(grid, (i &+ 2))!, j) as? Int ?? 0)) &* (_idx(_idx(grid, (i &+ 3))!, j) as? Int ?? 0))
                    if (vert > largest) {
                        largest = Int(vert)
                    }
                    if (j <= (n_cols &- 4)) {
                        let lr: Int = ((((_idx(_idx(grid, i)!, j) as? Int ?? 0) &* (_idx(_idx(grid, (i &+ 1))!, (j &+ 1)) as? Int ?? 0)) &* (_idx(_idx(grid, (i &+ 2))!, (j &+ 2)) as? Int ?? 0)) &* (_idx(_idx(grid, (i &+ 3))!, (j &+ 3)) as? Int ?? 0))
                        if (lr > largest) {
                            largest = Int(lr)
                        }
                    }
                    if (j >= 3) {
                        let rl: Int = ((((_idx(_idx(grid, i)!, j) as? Int ?? 0) &* (_idx(_idx(grid, (i &+ 1))!, (j &- 1)) as? Int ?? 0)) &* (_idx(_idx(grid, (i &+ 2))!, (j &- 2)) as? Int ?? 0)) &* (_idx(_idx(grid, (i &+ 3))!, (j &- 3)) as? Int ?? 0))
                        if (rl > largest) {
                            largest = Int(rl)
                        }
                    }
                }
                j = _int((j &+ 1))
            }
            i = _int((i &+ 1))
        }
        return largest
    }
    func main() {
        let grid: [[Int]] = ({
            var _arr: [[Int]] = []
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 8)
                _arr = _append(_arr, 2)
                _arr = _append(_arr, 22)
                _arr = _append(_arr, 97)
                _arr = _append(_arr, 38)
                _arr = _append(_arr, 15)
                _arr = _append(_arr, 0)
                _arr = _append(_arr, 40)
                _arr = _append(_arr, 0)
                _arr = _append(_arr, 75)
                _arr = _append(_arr, 4)
                _arr = _append(_arr, 5)
                _arr = _append(_arr, 7)
                _arr = _append(_arr, 78)
                _arr = _append(_arr, 52)
                _arr = _append(_arr, 12)
                _arr = _append(_arr, 50)
                _arr = _append(_arr, 77)
                _arr = _append(_arr, 91)
                _arr = _append(_arr, 8)
                return _arr
            }() as! [Int]))
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 49)
                _arr = _append(_arr, 49)
                _arr = _append(_arr, 99)
                _arr = _append(_arr, 40)
                _arr = _append(_arr, 17)
                _arr = _append(_arr, 81)
                _arr = _append(_arr, 18)
                _arr = _append(_arr, 57)
                _arr = _append(_arr, 60)
                _arr = _append(_arr, 87)
                _arr = _append(_arr, 17)
                _arr = _append(_arr, 40)
                _arr = _append(_arr, 98)
                _arr = _append(_arr, 43)
                _arr = _append(_arr, 69)
                _arr = _append(_arr, 48)
                _arr = _append(_arr, 4)
                _arr = _append(_arr, 56)
                _arr = _append(_arr, 62)
                _arr = _append(_arr, 0)
                return _arr
            }() as! [Int]))
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 81)
                _arr = _append(_arr, 49)
                _arr = _append(_arr, 31)
                _arr = _append(_arr, 73)
                _arr = _append(_arr, 55)
                _arr = _append(_arr, 79)
                _arr = _append(_arr, 14)
                _arr = _append(_arr, 29)
                _arr = _append(_arr, 93)
                _arr = _append(_arr, 71)
                _arr = _append(_arr, 40)
                _arr = _append(_arr, 67)
                _arr = _append(_arr, 53)
                _arr = _append(_arr, 88)
                _arr = _append(_arr, 30)
                _arr = _append(_arr, 3)
                _arr = _append(_arr, 49)
                _arr = _append(_arr, 13)
                _arr = _append(_arr, 36)
                _arr = _append(_arr, 65)
                return _arr
            }() as! [Int]))
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 52)
                _arr = _append(_arr, 70)
                _arr = _append(_arr, 95)
                _arr = _append(_arr, 23)
                _arr = _append(_arr, 4)
                _arr = _append(_arr, 60)
                _arr = _append(_arr, 11)
                _arr = _append(_arr, 42)
                _arr = _append(_arr, 69)
                _arr = _append(_arr, 24)
                _arr = _append(_arr, 68)
                _arr = _append(_arr, 56)
                _arr = _append(_arr, 1)
                _arr = _append(_arr, 32)
                _arr = _append(_arr, 56)
                _arr = _append(_arr, 71)
                _arr = _append(_arr, 37)
                _arr = _append(_arr, 2)
                _arr = _append(_arr, 36)
                _arr = _append(_arr, 91)
                return _arr
            }() as! [Int]))
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 22)
                _arr = _append(_arr, 31)
                _arr = _append(_arr, 16)
                _arr = _append(_arr, 71)
                _arr = _append(_arr, 51)
                _arr = _append(_arr, 67)
                _arr = _append(_arr, 63)
                _arr = _append(_arr, 89)
                _arr = _append(_arr, 41)
                _arr = _append(_arr, 92)
                _arr = _append(_arr, 36)
                _arr = _append(_arr, 54)
                _arr = _append(_arr, 22)
                _arr = _append(_arr, 40)
                _arr = _append(_arr, 40)
                _arr = _append(_arr, 28)
                _arr = _append(_arr, 66)
                _arr = _append(_arr, 33)
                _arr = _append(_arr, 13)
                _arr = _append(_arr, 80)
                return _arr
            }() as! [Int]))
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 24)
                _arr = _append(_arr, 47)
                _arr = _append(_arr, 32)
                _arr = _append(_arr, 60)
                _arr = _append(_arr, 99)
                _arr = _append(_arr, 3)
                _arr = _append(_arr, 45)
                _arr = _append(_arr, 2)
                _arr = _append(_arr, 44)
                _arr = _append(_arr, 75)
                _arr = _append(_arr, 33)
                _arr = _append(_arr, 53)
                _arr = _append(_arr, 78)
                _arr = _append(_arr, 36)
                _arr = _append(_arr, 84)
                _arr = _append(_arr, 20)
                _arr = _append(_arr, 35)
                _arr = _append(_arr, 17)
                _arr = _append(_arr, 12)
                _arr = _append(_arr, 50)
                return _arr
            }() as! [Int]))
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 32)
                _arr = _append(_arr, 98)
                _arr = _append(_arr, 81)
                _arr = _append(_arr, 28)
                _arr = _append(_arr, 64)
                _arr = _append(_arr, 23)
                _arr = _append(_arr, 67)
                _arr = _append(_arr, 10)
                _arr = _append(_arr, 26)
                _arr = _append(_arr, 38)
                _arr = _append(_arr, 40)
                _arr = _append(_arr, 67)
                _arr = _append(_arr, 59)
                _arr = _append(_arr, 54)
                _arr = _append(_arr, 70)
                _arr = _append(_arr, 66)
                _arr = _append(_arr, 18)
                _arr = _append(_arr, 38)
                _arr = _append(_arr, 64)
                _arr = _append(_arr, 70)
                return _arr
            }() as! [Int]))
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 67)
                _arr = _append(_arr, 26)
                _arr = _append(_arr, 20)
                _arr = _append(_arr, 68)
                _arr = _append(_arr, 2)
                _arr = _append(_arr, 62)
                _arr = _append(_arr, 12)
                _arr = _append(_arr, 20)
                _arr = _append(_arr, 95)
                _arr = _append(_arr, 63)
                _arr = _append(_arr, 94)
                _arr = _append(_arr, 39)
                _arr = _append(_arr, 63)
                _arr = _append(_arr, 8)
                _arr = _append(_arr, 40)
                _arr = _append(_arr, 91)
                _arr = _append(_arr, 66)
                _arr = _append(_arr, 49)
                _arr = _append(_arr, 94)
                _arr = _append(_arr, 21)
                return _arr
            }() as! [Int]))
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 24)
                _arr = _append(_arr, 55)
                _arr = _append(_arr, 58)
                _arr = _append(_arr, 5)
                _arr = _append(_arr, 66)
                _arr = _append(_arr, 73)
                _arr = _append(_arr, 99)
                _arr = _append(_arr, 26)
                _arr = _append(_arr, 97)
                _arr = _append(_arr, 17)
                _arr = _append(_arr, 78)
                _arr = _append(_arr, 78)
                _arr = _append(_arr, 96)
                _arr = _append(_arr, 83)
                _arr = _append(_arr, 14)
                _arr = _append(_arr, 88)
                _arr = _append(_arr, 34)
                _arr = _append(_arr, 89)
                _arr = _append(_arr, 63)
                _arr = _append(_arr, 72)
                return _arr
            }() as! [Int]))
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 21)
                _arr = _append(_arr, 36)
                _arr = _append(_arr, 23)
                _arr = _append(_arr, 9)
                _arr = _append(_arr, 75)
                _arr = _append(_arr, 0)
                _arr = _append(_arr, 76)
                _arr = _append(_arr, 44)
                _arr = _append(_arr, 20)
                _arr = _append(_arr, 45)
                _arr = _append(_arr, 35)
                _arr = _append(_arr, 14)
                _arr = _append(_arr, 0)
                _arr = _append(_arr, 61)
                _arr = _append(_arr, 33)
                _arr = _append(_arr, 97)
                _arr = _append(_arr, 34)
                _arr = _append(_arr, 31)
                _arr = _append(_arr, 33)
                _arr = _append(_arr, 95)
                return _arr
            }() as! [Int]))
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 78)
                _arr = _append(_arr, 17)
                _arr = _append(_arr, 53)
                _arr = _append(_arr, 28)
                _arr = _append(_arr, 22)
                _arr = _append(_arr, 75)
                _arr = _append(_arr, 31)
                _arr = _append(_arr, 67)
                _arr = _append(_arr, 15)
                _arr = _append(_arr, 94)
                _arr = _append(_arr, 3)
                _arr = _append(_arr, 80)
                _arr = _append(_arr, 4)
                _arr = _append(_arr, 62)
                _arr = _append(_arr, 16)
                _arr = _append(_arr, 14)
                _arr = _append(_arr, 9)
                _arr = _append(_arr, 53)
                _arr = _append(_arr, 56)
                _arr = _append(_arr, 92)
                return _arr
            }() as! [Int]))
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 16)
                _arr = _append(_arr, 39)
                _arr = _append(_arr, 5)
                _arr = _append(_arr, 42)
                _arr = _append(_arr, 96)
                _arr = _append(_arr, 35)
                _arr = _append(_arr, 31)
                _arr = _append(_arr, 47)
                _arr = _append(_arr, 55)
                _arr = _append(_arr, 58)
                _arr = _append(_arr, 88)
                _arr = _append(_arr, 24)
                _arr = _append(_arr, 0)
                _arr = _append(_arr, 17)
                _arr = _append(_arr, 54)
                _arr = _append(_arr, 24)
                _arr = _append(_arr, 36)
                _arr = _append(_arr, 29)
                _arr = _append(_arr, 85)
                _arr = _append(_arr, 57)
                return _arr
            }() as! [Int]))
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 86)
                _arr = _append(_arr, 56)
                _arr = _append(_arr, 0)
                _arr = _append(_arr, 48)
                _arr = _append(_arr, 35)
                _arr = _append(_arr, 71)
                _arr = _append(_arr, 89)
                _arr = _append(_arr, 7)
                _arr = _append(_arr, 5)
                _arr = _append(_arr, 44)
                _arr = _append(_arr, 44)
                _arr = _append(_arr, 37)
                _arr = _append(_arr, 44)
                _arr = _append(_arr, 60)
                _arr = _append(_arr, 21)
                _arr = _append(_arr, 58)
                _arr = _append(_arr, 51)
                _arr = _append(_arr, 54)
                _arr = _append(_arr, 17)
                _arr = _append(_arr, 58)
                return _arr
            }() as! [Int]))
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 19)
                _arr = _append(_arr, 80)
                _arr = _append(_arr, 81)
                _arr = _append(_arr, 68)
                _arr = _append(_arr, 5)
                _arr = _append(_arr, 94)
                _arr = _append(_arr, 47)
                _arr = _append(_arr, 69)
                _arr = _append(_arr, 28)
                _arr = _append(_arr, 73)
                _arr = _append(_arr, 92)
                _arr = _append(_arr, 13)
                _arr = _append(_arr, 86)
                _arr = _append(_arr, 52)
                _arr = _append(_arr, 17)
                _arr = _append(_arr, 77)
                _arr = _append(_arr, 4)
                _arr = _append(_arr, 89)
                _arr = _append(_arr, 55)
                _arr = _append(_arr, 40)
                return _arr
            }() as! [Int]))
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 4)
                _arr = _append(_arr, 52)
                _arr = _append(_arr, 8)
                _arr = _append(_arr, 83)
                _arr = _append(_arr, 97)
                _arr = _append(_arr, 35)
                _arr = _append(_arr, 99)
                _arr = _append(_arr, 16)
                _arr = _append(_arr, 7)
                _arr = _append(_arr, 97)
                _arr = _append(_arr, 57)
                _arr = _append(_arr, 32)
                _arr = _append(_arr, 16)
                _arr = _append(_arr, 26)
                _arr = _append(_arr, 26)
                _arr = _append(_arr, 79)
                _arr = _append(_arr, 33)
                _arr = _append(_arr, 27)
                _arr = _append(_arr, 98)
                _arr = _append(_arr, 66)
                return _arr
            }() as! [Int]))
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 88)
                _arr = _append(_arr, 36)
                _arr = _append(_arr, 68)
                _arr = _append(_arr, 87)
                _arr = _append(_arr, 57)
                _arr = _append(_arr, 62)
                _arr = _append(_arr, 20)
                _arr = _append(_arr, 72)
                _arr = _append(_arr, 3)
                _arr = _append(_arr, 46)
                _arr = _append(_arr, 33)
                _arr = _append(_arr, 67)
                _arr = _append(_arr, 46)
                _arr = _append(_arr, 55)
                _arr = _append(_arr, 12)
                _arr = _append(_arr, 32)
                _arr = _append(_arr, 63)
                _arr = _append(_arr, 93)
                _arr = _append(_arr, 53)
                _arr = _append(_arr, 69)
                return _arr
            }() as! [Int]))
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 4)
                _arr = _append(_arr, 42)
                _arr = _append(_arr, 16)
                _arr = _append(_arr, 73)
                _arr = _append(_arr, 38)
                _arr = _append(_arr, 25)
                _arr = _append(_arr, 39)
                _arr = _append(_arr, 11)
                _arr = _append(_arr, 24)
                _arr = _append(_arr, 94)
                _arr = _append(_arr, 72)
                _arr = _append(_arr, 18)
                _arr = _append(_arr, 8)
                _arr = _append(_arr, 46)
                _arr = _append(_arr, 29)
                _arr = _append(_arr, 32)
                _arr = _append(_arr, 40)
                _arr = _append(_arr, 62)
                _arr = _append(_arr, 76)
                _arr = _append(_arr, 36)
                return _arr
            }() as! [Int]))
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 20)
                _arr = _append(_arr, 69)
                _arr = _append(_arr, 36)
                _arr = _append(_arr, 41)
                _arr = _append(_arr, 72)
                _arr = _append(_arr, 30)
                _arr = _append(_arr, 23)
                _arr = _append(_arr, 88)
                _arr = _append(_arr, 34)
                _arr = _append(_arr, 62)
                _arr = _append(_arr, 99)
                _arr = _append(_arr, 69)
                _arr = _append(_arr, 82)
                _arr = _append(_arr, 67)
                _arr = _append(_arr, 59)
                _arr = _append(_arr, 85)
                _arr = _append(_arr, 74)
                _arr = _append(_arr, 4)
                _arr = _append(_arr, 36)
                _arr = _append(_arr, 16)
                return _arr
            }() as! [Int]))
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 20)
                _arr = _append(_arr, 73)
                _arr = _append(_arr, 35)
                _arr = _append(_arr, 29)
                _arr = _append(_arr, 78)
                _arr = _append(_arr, 31)
                _arr = _append(_arr, 90)
                _arr = _append(_arr, 1)
                _arr = _append(_arr, 74)
                _arr = _append(_arr, 31)
                _arr = _append(_arr, 49)
                _arr = _append(_arr, 71)
                _arr = _append(_arr, 48)
                _arr = _append(_arr, 86)
                _arr = _append(_arr, 81)
                _arr = _append(_arr, 16)
                _arr = _append(_arr, 23)
                _arr = _append(_arr, 57)
                _arr = _append(_arr, 5)
                _arr = _append(_arr, 54)
                return _arr
            }() as! [Int]))
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 1)
                _arr = _append(_arr, 70)
                _arr = _append(_arr, 54)
                _arr = _append(_arr, 71)
                _arr = _append(_arr, 83)
                _arr = _append(_arr, 51)
                _arr = _append(_arr, 54)
                _arr = _append(_arr, 69)
                _arr = _append(_arr, 16)
                _arr = _append(_arr, 92)
                _arr = _append(_arr, 33)
                _arr = _append(_arr, 48)
                _arr = _append(_arr, 61)
                _arr = _append(_arr, 43)
                _arr = _append(_arr, 52)
                _arr = _append(_arr, 1)
                _arr = _append(_arr, 89)
                _arr = _append(_arr, 19)
                _arr = _append(_arr, 67)
                _arr = _append(_arr, 48)
                return _arr
            }() as! [Int]))
            return _arr
        }() as! [[Int]])
        let ans: Int = _int(largest_product((grid as! [[Int]])))
        print(_p(_p(ans)))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
