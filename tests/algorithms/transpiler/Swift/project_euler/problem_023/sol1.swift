// Generated by Mochi transpiler v0.10.66 on 2025-08-14 18:26:39 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _idx<K: Hashable, V>(_ m: [K: V], _ k: K) -> V? {
    return m[k]
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func int_sqrt(_ n: Int) -> Int {
        var x = 1
        while ((_int((x &+ 1)) &* _int((x &+ 1))) <= n) {
            x = _int((x &+ 1))
        }
        return x
    }
    func solution(_ limit: Int) -> Int {
        var sum_divs: [Int] = ([] as! [Int])
        var i = 0
        while (i <= limit) {
            sum_divs = (_append(sum_divs, 1) as! [Int])
            i = _int((i &+ 1))
        }
        let sqrt_limit = _int(int_sqrt(limit))
        i = 2
        while (i <= sqrt_limit) {
            sum_divs = _set(sum_divs, (i &* i), _int(((_idx(sum_divs, (i &* i)) as? Int ?? 0) &+ i)))
            var k = (i &+ 1)
            while (k <= (limit / i)) {
                sum_divs = _set(sum_divs, (k &* i), _int((((_idx(sum_divs, (k &* i)) as? Int ?? 0) &+ k) &+ i)))
                k = _int((k &+ 1))
            }
            i = _int((i &+ 1))
        }
        var is_abundant: [Bool] = ([] as! [Bool])
        i = 0
        while (i <= limit) {
            is_abundant = (_append(is_abundant, false) as! [Bool])
            i = _int((i &+ 1))
        }
        var abundants: [Int] = ([] as! [Int])
        var res = 0
        var n = 1
        while (n <= limit) {
            if ((_idx(sum_divs, n) as? Int ?? 0) > n) {
                abundants = (_append(abundants, n) as! [Int])
                is_abundant = _set(is_abundant, n, true)
            }
            var has_pair = false
            var j = 0
            while (j < _int(((abundants).count))) {
                let a = (_idx(abundants, j) as? Int ?? 0)
                if (a > n) {
                    break
                }
                let b = (n &- a)
                if ((b <= limit) && (_idx(is_abundant, b) as! Bool)) {
                    has_pair = true
                    break
                }
                j = _int((j &+ 1))
            }
            if (!has_pair) {
                res = _int((res &+ n))
            }
            n = _int((n &+ 1))
        }
        return res
    }
    print(_p(_p(_int(solution(28123)))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
