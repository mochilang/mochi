// Generated by Mochi transpiler v0.10.66 on 2025-08-14 18:34:44 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _idx<K: Hashable, V>(_ m: [K: V], _ k: K) -> V? {
    return m[k]
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func is_9_pandigital(_ n: Int) -> Bool {
        var digits: [Int] = ([] as! [Int])
        var i = 0
        while (i < 10) {
            digits = (_append(digits, 0) as! [Int])
            i = _int((i &+ 1))
        }
        var count = 0
        var x = n
        while (x > 0) {
            let digit = ((x % 10 + 10) % 10)
            if (digit == 0) {
                return false
            }
            if ((_idx(digits, digit) as? Int ?? 0) == 1) {
                return false
            }
            digits = _set(digits, digit, 1)
            x = _int((x / 10))
            count = _int((count &+ 1))
        }
        return ((((((((((count == 9) && ((_idx(digits, 1) as? Int ?? 0) == 1)) && ((_idx(digits, 2) as? Int ?? 0) == 1)) && ((_idx(digits, 3) as? Int ?? 0) == 1)) && ((_idx(digits, 4) as? Int ?? 0) == 1)) && ((_idx(digits, 5) as? Int ?? 0) == 1)) && ((_idx(digits, 6) as? Int ?? 0) == 1)) && ((_idx(digits, 7) as? Int ?? 0) == 1)) && ((_idx(digits, 8) as? Int ?? 0) == 1)) && ((_idx(digits, 9) as? Int ?? 0) == 1))
    }
    func solution() -> Int {
        var base_num = 9999
        while (base_num >= 5000) {
            let candidate = (100002 &* base_num)
            if is_9_pandigital(candidate) {
                return candidate
            }
            base_num = _int((base_num &- 1))
        }
        base_num = 333
        while (base_num >= 100) {
            let candidate = (1002003 &* base_num)
            if is_9_pandigital(candidate) {
                return candidate
            }
            base_num = _int((base_num &- 1))
        }
        return 0
    }
    print(_p(("solution() = " + _p(_int(solution())))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
