// Generated by Mochi transpiler v0.10.66 on 2025-08-14 18:33:40 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _idx<K: Hashable, V>(_ m: [K: V], _ k: K) -> V? {
    return m[k]
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
struct FractionPair: Codable {
    var num: Int
    var den: Int
    init() {
        self.num = 0
        self.den = 0
    }
    init(num: Int, den: Int) {
        self.num = num
        self.den = den
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func gcd(_ a: Int, _ b: Int) -> Int {
        var x = _int(((a < 0) ? -a : a))
        var y = _int(((b < 0) ? -b : b))
        while (y != 0) {
            let t = ((x % y + y) % y)
            x = Int(y)
            y = Int(t)
        }
        return x
    }
    func is_digit_cancelling(_ num: Int, _ den: Int) -> Bool {
        if (num >= den) {
            return false
        }
        let num_unit = ((num % 10 + 10) % 10)
        let num_tens = (num / 10)
        let den_unit = ((den % 10 + 10) % 10)
        let den_tens = (den / 10)
        if (num_unit != den_tens) {
            return false
        }
        if (den_unit == 0) {
            return false
        }
        return ((num &* den_unit) == (num_tens &* den))
    }
    func find_fractions() -> [FractionPair] {
        var sols: [FractionPair] = ([] as! [FractionPair])
        var num = 10
        while (num < 100) {
            var den = (num &+ 1)
            while (den < 100) {
                if is_digit_cancelling(num, den) {
                    sols = (_append(sols, FractionPair(num: Int(num), den: Int(den))) as! [FractionPair])
                }
                den = _int((den &+ 1))
            }
            num = _int((num &+ 1))
        }
        return sols
    }
    func solution() -> Int {
        let fracs: [FractionPair] = (find_fractions() as! [FractionPair])
        var num_prod = 1
        var den_prod = 1
        var i = 0
        while (i < _int(((fracs).count))) {
            let f = (_idx(fracs, i) as! FractionPair)
            num_prod = _int((num_prod &* f.num))
            den_prod = _int((den_prod &* f.den))
            i = _int((i &+ 1))
        }
        let g = _int(gcd(num_prod, den_prod))
        return (den_prod / g)
    }
    func main() {
        print(_p(_p(_int(solution()))))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
