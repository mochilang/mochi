// Generated by Mochi transpiler v0.10.66 on 2025-08-14 18:35:42 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _idx<K: Hashable, V>(_ m: [K: V], _ k: K) -> V? {
    return m[k]
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func sqrt(_ x: Double) -> Double {
        if (x <= 0.0) {
            return 0.0
        }
        var guess = x
        var i = 0
        while (i < 10) {
            guess = Double((Double((guess + (x / guess))) / 2.0))
            i = _int((i &+ 1))
        }
        return guess
    }
    func is_pentagonal(_ n: Int) -> Bool {
        let root = Double(sqrt(Double((1.0 + (24.0 * Double((1.0 * Double(n))))))))
        let val = (Double((1.0 + root)) / 6.0)
        let val_int = _int(_int(val))
        return (val == Double((1.0 * Double(val_int))))
    }
    func pentagonal(_ k: Int) -> Int {
        return (_int((k &* _int(((3 &* k) &- 1)))) / 2)
    }
    func solution(_ limit: Int) -> Int {
        var pentagonal_nums: [Int] = ([] as! [Int])
        var i = 1
        while (i < limit) {
            pentagonal_nums = (_append(pentagonal_nums, _int(pentagonal(i))) as! [Int])
            i = _int((i &+ 1))
        }
        var a_idx = 0
        while (a_idx < _int(((pentagonal_nums).count))) {
            let pentagonal_i = (_idx(pentagonal_nums, a_idx) as? Int ?? 0)
            var b_idx = a_idx
            while (b_idx < _int(((pentagonal_nums).count))) {
                let pentagonal_j = (_idx(pentagonal_nums, b_idx) as? Int ?? 0)
                let s = (pentagonal_i &+ pentagonal_j)
                let d = (pentagonal_j &- pentagonal_i)
                if (is_pentagonal(s) && is_pentagonal(d)) {
                    return d
                }
                b_idx = _int((b_idx &+ 1))
            }
            a_idx = _int((a_idx &+ 1))
        }
        return -1
    }
    let result = _int(solution(5000))
    print(_p(("solution() = " + _p(result))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
