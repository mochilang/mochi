// Generated by Mochi transpiler v0.10.63 on 2025-08-11 16:28:07 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func parse_int(_ s: String) -> Int {
        var value = 0
        var i = 0
        while (i < _int(((s).count))) {
            let c = (String(Array(s)[i]) as! String)
            value = _int(((value &* 10) &+ _int(_int(c))))
            i = _int((i &+ 1))
        }
        return value
    }
    func join(_ xs: [String]) -> String {
        var s = ""
        var i = 0
        while (i < _int(((xs).count))) {
            s = ((s + (_idx(xs, i) as! String)) as! String)
            i = _int((i &+ 1))
        }
        return s
    }
    func contains(_ xs: [String], _ c: String) -> Bool {
        var i = 0
        while (i < _int(((xs).count))) {
            if ((_idx(xs, i) as! String) == c) {
                return true
            }
            i = _int((i &+ 1))
        }
        return false
    }
    func index_of(_ xs: [String], _ c: String) -> Int {
        var i = 0
        while (i < _int(((xs).count))) {
            if ((_idx(xs, i) as! String) == c) {
                return i
            }
            i = _int((i &+ 1))
        }
        return -1
    }
    func remove_at(_ xs: [String], _ idx: Int) -> [String] {
        var res: [String] = ([] as! [String])
        var i = 0
        while (i < _int(((xs).count))) {
            if (i != idx) {
                res = (_append(res, (_idx(xs, i) as! String)) as! [String])
            }
            i = _int((i &+ 1))
        }
        return res
    }
    func unique_chars(_ logins: [String]) -> [String] {
        var chars: [String] = ([] as! [String])
        var i = 0
        while (i < _int(((logins).count))) {
            let login = (_idx(logins, i) as! String)
            var j = 0
            while (j < _int(((login).count))) {
                let c = (String(Array(login)[j]) as! String)
                if (!contains((chars as! [String]), (c as! String))) {
                    chars = (_append(chars, c) as! [String])
                }
                j = _int((j &+ 1))
            }
            i = _int((i &+ 1))
        }
        return chars
    }
    func satisfies(_ permutation: [String], _ logins: [String]) -> Bool {
        var i = 0
        while (i < _int(((logins).count))) {
            let login = (_idx(logins, i) as! String)
            let i0 = _int(index_of((permutation as! [String]), (String(Array(login)[0]) as! String)))
            let i1 = _int(index_of((permutation as! [String]), (String(Array(login)[1]) as! String)))
            let i2 = _int(index_of((permutation as! [String]), (String(Array(login)[2]) as! String)))
            if (!((i0 < i1) && (i1 < i2))) {
                return false
            }
            i = _int((i &+ 1))
        }
        return true
    }
    func search(_ chars: [String], _ current: [String], _ logins: [String]) -> String {
        if (_int(((chars).count)) == 0) {
            if satisfies((current as! [String]), (logins as! [String])) {
                return String(describing: join((current as! [String])))
            }
            return ""
        }
        var i = 0
        while (i < _int(((chars).count))) {
            let c = (_idx(chars, i) as! String)
            let rest: [String] = (remove_at((chars as! [String]), i) as! [String])
            let next: [String] = (_append(current, c) as! [String])
            let res = String(describing: search((rest as! [String]), (next as! [String]), (logins as! [String])))
            if (res != "") {
                return res
            }
            i = _int((i &+ 1))
        }
        return ""
    }
    func find_secret_passcode(_ logins: [String]) -> Int {
        let chars: [String] = (unique_chars((logins as! [String])) as! [String])
        let s = String(describing: search((chars as! [String]), ([] as! [String]), (logins as! [String])))
        if (s == "") {
            return -1
        }
        return _int(parse_int((s as! String)))
    }
    let logins1: [String] = ({
        var _arr: [String] = []
        _arr = _append(_arr, "135")
        _arr = _append(_arr, "259")
        _arr = _append(_arr, "235")
        _arr = _append(_arr, "189")
        _arr = _append(_arr, "690")
        _arr = _append(_arr, "168")
        _arr = _append(_arr, "120")
        _arr = _append(_arr, "136")
        _arr = _append(_arr, "289")
        _arr = _append(_arr, "589")
        _arr = _append(_arr, "160")
        _arr = _append(_arr, "165")
        _arr = _append(_arr, "580")
        _arr = _append(_arr, "369")
        _arr = _append(_arr, "250")
        _arr = _append(_arr, "280")
        return _arr
    }() as! [String])
    print(_p(_p(_int(find_secret_passcode((logins1 as! [String]))))))
    let logins2: [String] = ({
        var _arr: [String] = []
        _arr = _append(_arr, "426")
        _arr = _append(_arr, "281")
        _arr = _append(_arr, "061")
        _arr = _append(_arr, "819")
        _arr = _append(_arr, "268")
        _arr = _append(_arr, "406")
        _arr = _append(_arr, "420")
        _arr = _append(_arr, "428")
        _arr = _append(_arr, "209")
        _arr = _append(_arr, "689")
        _arr = _append(_arr, "019")
        _arr = _append(_arr, "421")
        _arr = _append(_arr, "469")
        _arr = _append(_arr, "261")
        _arr = _append(_arr, "681")
        _arr = _append(_arr, "201")
        return _arr
    }() as! [String])
    print(_p(_p(_int(find_secret_passcode((logins2 as! [String]))))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
