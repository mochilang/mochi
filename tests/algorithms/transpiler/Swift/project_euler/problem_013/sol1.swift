// Generated by Mochi transpiler v0.10.66 on 2025-08-14 18:25:56 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _idx<K: Hashable, V>(_ m: [K: V], _ k: K) -> V? {
    return m[k]
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let numbers: [String] = ({
        var _arr: [String] = []
        _arr = _append(_arr, "37107287533902102798797998220837590246510135740250")
        _arr = _append(_arr, "46376937677490009712648124896970078050417018260538")
        _arr = _append(_arr, "74324986199524741059474233309513058123726617309629")
        _arr = _append(_arr, "91942213363574161572522430563301811072406154908250")
        _arr = _append(_arr, "23067588207539346171171980310421047513778063246676")
        _arr = _append(_arr, "89261670696623633820136378418383684178734361726757")
        _arr = _append(_arr, "28112879812849979408065481931592621691275889832738")
        _arr = _append(_arr, "44274228917432520321923589422876796487670272189318")
        _arr = _append(_arr, "47451445736001306439091167216856844588711603153276")
        _arr = _append(_arr, "70386486105843025439939619828917593665686757934951")
        _arr = _append(_arr, "62176457141856560629502157223196586755079324193331")
        _arr = _append(_arr, "64906352462741904929101432445813822663347944758178")
        _arr = _append(_arr, "92575867718337217661963751590579239728245598838407")
        _arr = _append(_arr, "58203565325359399008402633568948830189458628227828")
        _arr = _append(_arr, "80181199384826282014278194139940567587151170094390")
        _arr = _append(_arr, "35398664372827112653829987240784473053190104293586")
        _arr = _append(_arr, "86515506006295864861532075273371959191420517255829")
        _arr = _append(_arr, "71693888707715466499115593487603532921714970056938")
        _arr = _append(_arr, "54370070576826684624621495650076471787294438377604")
        _arr = _append(_arr, "53282654108756828443191190634694037855217779295145")
        _arr = _append(_arr, "36123272525000296071075082563815656710885258350721")
        _arr = _append(_arr, "45876576172410976447339110607218265236877223636045")
        _arr = _append(_arr, "17423706905851860660448207621209813287860733969412")
        _arr = _append(_arr, "81142660418086830619328460811191061556940512689692")
        _arr = _append(_arr, "51934325451728388641918047049293215058642563049483")
        _arr = _append(_arr, "62467221648435076201727918039944693004732956340691")
        _arr = _append(_arr, "15732444386908125794514089057706229429197107928209")
        _arr = _append(_arr, "55037687525678773091862540744969844508330393682126")
        _arr = _append(_arr, "18336384825330154686196124348767681297534375946515")
        _arr = _append(_arr, "80386287592878490201521685554828717201219257766954")
        _arr = _append(_arr, "78182833757993103614740356856449095527097864797581")
        _arr = _append(_arr, "16726320100436897842553539920931837441497806860984")
        _arr = _append(_arr, "48403098129077791799088218795327364475675590848030")
        _arr = _append(_arr, "87086987551392711854517078544161852424320693150332")
        _arr = _append(_arr, "59959406895756536782107074926966537676326235447210")
        _arr = _append(_arr, "69793950679652694742597709739166693763042633987085")
        _arr = _append(_arr, "41052684708299085211399427365734116182760315001271")
        _arr = _append(_arr, "65378607361501080857009149939512557028198746004375")
        _arr = _append(_arr, "35829035317434717326932123578154982629742552737307")
        _arr = _append(_arr, "94953759765105305946966067683156574377167401875275")
        _arr = _append(_arr, "88902802571733229619176668713819931811048770190271")
        _arr = _append(_arr, "25267680276078003013678680992525463401061632866526")
        _arr = _append(_arr, "36270218540497705585629946580636237993140746255962")
        _arr = _append(_arr, "24074486908231174977792365466257246923322810917141")
        _arr = _append(_arr, "91430288197103288597806669760892938638285025333403")
        _arr = _append(_arr, "34413065578016127815921815005561868836468420090470")
        _arr = _append(_arr, "23053081172816430487623791969842487255036638784583")
        _arr = _append(_arr, "11487696932154902810424020138335124462181441773470")
        _arr = _append(_arr, "63783299490636259666498587618221225225512486764533")
        _arr = _append(_arr, "67720186971698544312419572409913959008952310058822")
        _arr = _append(_arr, "95548255300263520781532296796249481641953868218774")
        _arr = _append(_arr, "76085327132285723110424803456124867697064507995236")
        _arr = _append(_arr, "37774242535411291684276865538926205024910326572967")
        _arr = _append(_arr, "23701913275725675285653248258265463092207058596522")
        _arr = _append(_arr, "29798860272258331913126375147341994889534765745501")
        _arr = _append(_arr, "18495701454879288984856827726077713721403798879715")
        _arr = _append(_arr, "38298203783031473527721580348144513491373226651381")
        _arr = _append(_arr, "34829543829199918180278916522431027392251122869539")
        _arr = _append(_arr, "40957953066405232632538044100059654939159879593635")
        _arr = _append(_arr, "29746152185502371307642255121183693803580388584903")
        _arr = _append(_arr, "41698116222072977186158236678424689157993532961922")
        _arr = _append(_arr, "62467957194401269043877107275048102390895523597457")
        _arr = _append(_arr, "23189706772547915061505504953922979530901129967519")
        _arr = _append(_arr, "86188088225875314529584099251203829009407770775672")
        _arr = _append(_arr, "11306739708304724483816533873502340845647058077308")
        _arr = _append(_arr, "82959174767140363198008187129011875491310547126581")
        _arr = _append(_arr, "97623331044818386269515456334926366572897563400500")
        _arr = _append(_arr, "42846280183517070527831839425882145521227251250327")
        _arr = _append(_arr, "55121603546981200581762165212827652751691296897789")
        _arr = _append(_arr, "32238195734329339946437501907836945765883352399886")
        _arr = _append(_arr, "75506164965184775180738168837861091527357929701337")
        _arr = _append(_arr, "62177842752192623401942399639168044983993173312731")
        _arr = _append(_arr, "32924185707147349566916674687634660915035914677504")
        _arr = _append(_arr, "99518671430235219628894890102423325116913619626622")
        _arr = _append(_arr, "73267460800591547471830798392868535206946944540724")
        _arr = _append(_arr, "76841822524674417161514036427982273348055556214818")
        _arr = _append(_arr, "97142617910342598647204516893989422179826088076852")
        _arr = _append(_arr, "87783646182799346313767754307809363333018982642090")
        _arr = _append(_arr, "10848802521674670883215120185883543223812876952786")
        _arr = _append(_arr, "71329612474782464538636993009049310363619763878039")
        _arr = _append(_arr, "62184073572399794223406235393808339651327408011116")
        _arr = _append(_arr, "66627891981488087797941876876144230030984490851411")
        _arr = _append(_arr, "60661826293682836764744779239180335110989069790714")
        _arr = _append(_arr, "85786944089552990653640447425576083659976645795096")
        _arr = _append(_arr, "66024396409905389607120198219976047599490197230297")
        _arr = _append(_arr, "64913982680032973156037120041377903785566085089252")
        _arr = _append(_arr, "16730939319872750275468906903707539413042652315011")
        _arr = _append(_arr, "94809377245048795150954100921645863754710598436791")
        _arr = _append(_arr, "78639167021187492431995700641917969777599028300699")
        _arr = _append(_arr, "15368713711936614952811305876380278410754449733078")
        _arr = _append(_arr, "40789923115535562561142322423255033685442488917353")
        _arr = _append(_arr, "44889911501440648020369068063960672322193204149535")
        _arr = _append(_arr, "41503128880339536053299340368006977710650566631954")
        _arr = _append(_arr, "81234880673210146739058568557934581403627822703280")
        _arr = _append(_arr, "82616570773948327592232845941706525094512325230608")
        _arr = _append(_arr, "22918802058777319719839450180888072429661980811197")
        _arr = _append(_arr, "77158542502016545090413245809786882778948721859617")
        _arr = _append(_arr, "72107838435069186155435662884062257473692284509516")
        _arr = _append(_arr, "20849603980134001723930671666823555245252804609722")
        _arr = _append(_arr, "53503534226472524250874054075591789781264330331690")
        return _arr
    }() as! [String])
    func add_strings(_ a: String, _ b: String) -> String {
        var i = (_int(((a).count)) &- 1)
        var j = (_int(((b).count)) &- 1)
        var carry = 0
        var res = ""
        while (((i >= 0) || (j >= 0)) || (carry > 0)) {
            var da = 0
            if (i >= 0) {
                da = _int((_int(_int(String(Array(a)[i]))) &- 48))
                i = _int((i &- 1))
            }
            var db = 0
            if (j >= 0) {
                db = _int((_int(_int(String(Array(b)[j]))) &- 48))
                j = _int((j &- 1))
            }
            let s = ((da &+ db) &+ carry)
            carry = _int((s / 10))
            let digit = ((s % 10 + 10) % 10)
            res = ((_p(digit) + res) as! String)
        }
        return res
    }
    func first_ten_digits(_ nums: [String]) -> String {
        var total = "0"
        var idx = 0
        while (idx < _int(((nums).count))) {
            total = String(describing: add_strings((total as! String), (_idx(nums, idx) as! String)))
            idx = _int((idx &+ 1))
        }
        return String(describing: String(Array(String(describing: (total as! String)))[0..<10]))
    }
    func main() {
        let ans = String(describing: first_ten_digits((numbers as! [String])))
        print(_p(ans))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
