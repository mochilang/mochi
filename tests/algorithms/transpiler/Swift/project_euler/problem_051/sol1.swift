// Generated by Mochi transpiler v0.10.66 on 2025-08-14 18:39:56 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _idx<K: Hashable, V>(_ m: [K: V], _ k: K) -> V? {
    return m[k]
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func parse_int(_ s: String) -> Int {
        var value = 0
        var i = 0
        while (i < _int(((s).count))) {
            value = _int(((value &* 10) &+ _int(_int(String(Array(s)[i])))))
            i = _int((i &+ 1))
        }
        return value
    }
    func digit_replacements(_ number: Int) -> [[Int]] {
        let num_str = _p(number)
        var counts: [Int] = ({
            var _arr: [Int] = []
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 0)
            return _arr
        }() as! [Int])
        var i = 0
        while (i < _int(((num_str).count))) {
            let d = _int(_int(String(Array(num_str)[i])))
            counts = _set(counts, d, _int(((_idx(counts, d) as? Int ?? 0) &+ 1)))
            i = _int((i &+ 1))
        }
        var result: [[Int]] = ([] as! [[Int]])
        let digits = "0123456789"
        var digit = 0
        while (digit < 10) {
            if ((_idx(counts, digit) as? Int ?? 0) > 1) {
                var family: [Int] = ([] as! [Int])
                var repl = 0
                while (repl < 10) {
                    var new_str = ""
                    var j = 0
                    while (j < _int(((num_str).count))) {
                        let c = (String(Array(num_str)[j]) as! String)
                        if (c == (String(Array(digits)[digit]) as! String)) {
                            new_str = ((new_str + (String(Array(digits)[repl]) as! String)) as! String)
                        } else {
                            new_str = ((new_str + c) as! String)
                        }
                        j = _int((j &+ 1))
                    }
                    family = (_append(family, _int(parse_int((new_str as! String)))) as! [Int])
                    repl = _int((repl &+ 1))
                }
                result = (_append(result, family) as! [[Int]])
            }
            digit = _int((digit &+ 1))
        }
        return result
    }
    func is_prime(_ num: Int) -> Bool {
        if (num < 2) {
            return false
        }
        if (((num % 2 + 2) % 2) == 0) {
            return (num == 2)
        }
        var i = 3
        while ((i &* i) <= num) {
            if (((num % i + i) % i) == 0) {
                return false
            }
            i = _int((i &+ 2))
        }
        return true
    }
    func solution(_ family_length: Int) -> Int {
        let candidate = 121313
        if (!is_prime(candidate)) {
            return -1
        }
        let reps: [[Int]] = (digit_replacements(candidate) as! [[Int]])
        var r = 0
        while (r < _int(((reps).count))) {
            let family: [Int] = (_idx(reps, r) as! [Int])
            var count = 0
            var min_prime = 0
            var first = true
            var i = 0
            while (i < _int(((family).count))) {
                let num = (_idx(family, i) as? Int ?? 0)
                if is_prime(num) {
                    if first {
                        min_prime = Int(num)
                        first = false
                    } else {
                        if (num < min_prime) {
                            min_prime = Int(num)
                        }
                    }
                    count = _int((count &+ 1))
                }
                i = _int((i &+ 1))
            }
            if (count == family_length) {
                return min_prime
            }
            r = _int((r &+ 1))
        }
        return -1
    }
    print(_p(_p(_int(solution(8)))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
