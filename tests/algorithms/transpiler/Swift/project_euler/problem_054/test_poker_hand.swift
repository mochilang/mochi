// Generated by Mochi transpiler v0.10.66 on 2025-08-14 18:40:20 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _idx<K: Hashable, V>(_ m: [K: V], _ k: K) -> V? {
    return m[k]
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
func _split(_ s: String, _ sep: String) -> [String] {
    let d = sep.isEmpty ? " " : sep
    return s.components(separatedBy: d)
}
func _slice<T>(_ xs: [T], _ start: Int, _ end: Int) -> [T] {
    var s = start
    var e = end
    if s < 0 { s = 0 }
    if e > xs.count { e = xs.count }
    if s > e { s = e }
    return Array(xs[s..<e])
}
struct Hand: Codable {
    var rank: Int
    var values: [Int]
    init() {
        self.rank = 0
        self.values = []
    }
    init(rank: Int, values: [Int]) {
        self.rank = rank
        self.values = values
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func split(_ s: String, _ sep: String) -> [String] {
        var parts: [String] = ([] as! [String])
        var cur: String = ""
        var i: Int = 0
        while (i < _int(((s).count))) {
            if (((_int(((sep).count)) > 0) && ((i &+ _int(((sep).count))) <= _int(((s).count)))) && (String(describing: String(Array(String(describing: (s as! String)))[i..<(i &+ _int(((sep).count)))])) == sep)) {
                parts = (_append(parts, cur) as! [String])
                cur = ""
                i = _int((i &+ _int(((sep).count))))
            } else {
                cur = ((cur + String(_slice(Array(s), i, (i &+ 1)))) as! String)
                i = _int((i &+ 1))
            }
        }
        parts = (_append(parts, cur) as! [String])
        return parts
    }
    func card_value(_ ch: String) -> Int {
        if (ch == "A") {
            return 14
        } else if (ch == "K") {
            return 13
        } else if (ch == "Q") {
            return 12
        } else if (ch == "J") {
            return 11
        } else if (ch == "T") {
            return 10
        } else if (ch == "9") {
            return 9
        } else if (ch == "8") {
            return 8
        } else if (ch == "7") {
            return 7
        } else if (ch == "6") {
            return 6
        } else if (ch == "5") {
            return 5
        } else if (ch == "4") {
            return 4
        } else if (ch == "3") {
            return 3
        } else {
            return 2
        }
        
        
        
        
        
        
        
        
        
        
        
    }
    func parse_hand(_ hand: String) -> Hand {
        var counts: [Int] = ([] as! [Int])
        var i: Int = 0
        while (i <= 14) {
            counts = (_append(counts, 0) as! [Int])
            i = _int((i &+ 1))
        }
        var suits: [String] = ([] as! [String])
        for card in (_split(hand, " ") as! [String]) {
            let v = _int(card_value((String(_slice(Array(card), 0, 1)) as! String)))
            counts = _set(counts, v, _int(((_idx(counts, v) as? Int ?? 0) &+ 1)))
            suits = (_append(suits, String(_slice(Array(card), 1, 2))) as! [String])
        }
        var vals: [Int] = ([] as! [Int])
        var v: Int = 14
        while (v >= 2) {
            var c: Int = (_idx(counts, v) as? Int ?? 0)
            var k: Int = 0
            while (k < c) {
                vals = (_append(vals, v) as! [Int])
                k = _int((k &+ 1))
            }
            v = _int((v &- 1))
        }
        var is_straight: Bool = false
        if ((((((_int(((vals).count)) == 5) && ((_idx(vals, 0) as? Int ?? 0) == 14)) && ((_idx(vals, 1) as? Int ?? 0) == 5)) && ((_idx(vals, 2) as? Int ?? 0) == 4)) && ((_idx(vals, 3) as? Int ?? 0) == 3)) && ((_idx(vals, 4) as? Int ?? 0) == 2)) {
            is_straight = true
            vals = _set(vals, 0, 5)
            vals = _set(vals, 1, 4)
            vals = _set(vals, 2, 3)
            vals = _set(vals, 3, 2)
            vals = _set(vals, 4, 14)
        } else {
            is_straight = true
            var j: Int = 0
            while (j < 4) {
                if (((_idx(vals, j) as? Int ?? 0) &- (_idx(vals, (j &+ 1)) as? Int ?? 0)) != 1) {
                    is_straight = false
                }
                j = _int((j &+ 1))
            }
        }
        var is_flush: Bool = true
        var s0: String = (_idx(suits, 0) as! String)
        var t: Int = 1
        while (t < _int(((suits).count))) {
            if ((_idx(suits, t) as! String) != s0) {
                is_flush = false
            }
            t = _int((t &+ 1))
        }
        var four_val: Int = 0
        var three_val: Int = 0
        var pair_vals: [Int] = ([] as! [Int])
        v = 14
        while (v >= 2) {
            if ((_idx(counts, v) as? Int ?? 0) == 4) {
                four_val = Int(v)
            } else if ((_idx(counts, v) as? Int ?? 0) == 3) {
                three_val = Int(v)
            } else if ((_idx(counts, v) as? Int ?? 0) == 2) {
                pair_vals = (_append(pair_vals, v) as! [Int])
            }
            
            
            v = _int((v &- 1))
        }
        var rank: Int = 1
        if (((is_flush && is_straight) && ((_idx(vals, 0) as? Int ?? 0) == 14)) && ((_idx(vals, 4) as? Int ?? 0) == 10)) {
            rank = 10
        } else if (is_flush && is_straight) {
            rank = 9
        } else if (four_val != 0) {
            rank = 8
        } else if ((three_val != 0) && (_int(((pair_vals).count)) == 1)) {
            rank = 7
        } else if is_flush {
            rank = 6
        } else if is_straight {
            rank = 5
        } else if (three_val != 0) {
            rank = 4
        } else if (_int(((pair_vals).count)) == 2) {
            rank = 3
        } else if (_int(((pair_vals).count)) == 1) {
            rank = 2
        } else {
            rank = 1
        }
        
        
        
        
        
        
        
        
        return Hand(rank: Int(rank), values: (vals as! [Int]))
    }
    func compare(_ a: Hand, _ b: Hand) -> String {
        if (a.rank > b.rank) {
            return "Win"
        }
        if (a.rank < b.rank) {
            return "Loss"
        }
        var i: Int = 0
        while (i < _int(((a.values).count))) {
            if ((_idx(a.values, i) as? Int ?? 0) > (_idx(b.values, i) as? Int ?? 0)) {
                return "Win"
            }
            if ((_idx(a.values, i) as? Int ?? 0) < (_idx(b.values, i) as? Int ?? 0)) {
                return "Loss"
            }
            i = _int((i &+ 1))
        }
        return "Tie"
    }
    func main() {
        let tests: [[String]] = ({
            var _arr: [[String]] = []
            _arr = _append(_arr, ({
                var _arr: [String] = []
                _arr = _append(_arr, "2H 3H 4H 5H 6H")
                _arr = _append(_arr, "KS AS TS QS JS")
                _arr = _append(_arr, "Loss")
                return _arr
            }() as! [String]))
            _arr = _append(_arr, ({
                var _arr: [String] = []
                _arr = _append(_arr, "2H 3H 4H 5H 6H")
                _arr = _append(_arr, "AS AD AC AH JD")
                _arr = _append(_arr, "Win")
                return _arr
            }() as! [String]))
            _arr = _append(_arr, ({
                var _arr: [String] = []
                _arr = _append(_arr, "AS AH 2H AD AC")
                _arr = _append(_arr, "JS JD JC JH 3D")
                _arr = _append(_arr, "Win")
                return _arr
            }() as! [String]))
            _arr = _append(_arr, ({
                var _arr: [String] = []
                _arr = _append(_arr, "2S AH 2H AS AC")
                _arr = _append(_arr, "JS JD JC JH AD")
                _arr = _append(_arr, "Loss")
                return _arr
            }() as! [String]))
            _arr = _append(_arr, ({
                var _arr: [String] = []
                _arr = _append(_arr, "2S AH 2H AS AC")
                _arr = _append(_arr, "2H 3H 5H 6H 7H")
                _arr = _append(_arr, "Win")
                return _arr
            }() as! [String]))
            return _arr
        }() as! [[String]])
        for t in tests {
            let res = String(describing: compare((parse_hand((_idx(t, 0) as! String)) as! Hand), (parse_hand((_idx(t, 1) as! String)) as! Hand)))
            print(_p(((res + " expected ") + (_idx(t, 2) as! String))))
        }
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
