// Generated by Mochi transpiler v0.10.66 on 2025-08-14 18:33:35 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _idx<K: Hashable, V>(_ m: [K: V], _ k: K) -> V? {
    return m[k]
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _slice<T>(_ xs: [T], _ start: Int, _ end: Int) -> [T] {
    var s = start
    var e = end
    if s < 0 { s = 0 }
    if e > xs.count { e = xs.count }
    if s > e { s = e }
    return Array(xs[s..<e])
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func join_digits(_ xs: [String]) -> String {
        var s = ""
        var i = 0
        while (i < _int(((xs).count))) {
            s = ((s + (_idx(xs, i) as! String)) as! String)
            i = _int((i &+ 1))
        }
        return s
    }
    func digits_to_int(_ xs: [String]) -> Int {
        return _int(_int(String(describing: join_digits((xs as! [String])))))
    }
    func contains_int(_ xs: [Int], _ value: Int) -> Bool {
        var i = 0
        while (i < _int(((xs).count))) {
            if ((_idx(xs, i) as? Int ?? 0) == value) {
                return true
            }
            i = _int((i &+ 1))
        }
        return false
    }
    func remove_at(_ xs: [String], _ idx: Int) -> [String] {
        var res: [String] = ([] as! [String])
        var i = 0
        while (i < _int(((xs).count))) {
            if (i != idx) {
                res = (_append(res, (_idx(xs, i) as! String)) as! [String])
            }
            i = _int((i &+ 1))
        }
        return res
    }
    func is_combination_valid(_ comb: [String]) -> Bool {
        let prod = _int(digits_to_int((_slice(Array(comb), 5, 9) as! [String])))
        let mul2 = _int(digits_to_int((_slice(Array(comb), 0, 2) as! [String])))
        let mul3 = _int(digits_to_int((_slice(Array(comb), 2, 5) as! [String])))
        if ((mul2 &* mul3) == prod) {
            return true
        }
        let mul1 = _int(digits_to_int((String(Array(comb)[0]) as! [String])))
        let mul4 = _int(digits_to_int((_slice(Array(comb), 1, 5) as! [String])))
        return ((mul1 &* mul4) == prod)
    }
    func search(_ prefix: [String], _ remaining: [String], _ products: inout [Int]) -> [Int] {
        if (_int(((remaining).count)) == 0) {
            if is_combination_valid((prefix as! [String])) {
                let p = _int(digits_to_int((_slice(Array(prefix), 5, 9) as! [String])))
                if (!contains_int((products as! [Int]), p)) {
                    products = (_append(products, p) as! [Int])
                }
            }
            return products
        }
        var i = 0
        while (i < _int(((remaining).count))) {
            let next_prefix: [String] = (_append(prefix, (_idx(remaining, i) as! String)) as! [String])
            let next_remaining: [String] = (remove_at((remaining as! [String]), i) as! [String])
            products = (search((next_prefix as! [String]), (next_remaining as! [String]), &products) as! [Int])
            i = _int((i &+ 1))
        }
        return products
    }
    let digits: [String] = ({
        var _arr: [String] = []
        _arr = _append(_arr, "1")
        _arr = _append(_arr, "2")
        _arr = _append(_arr, "3")
        _arr = _append(_arr, "4")
        _arr = _append(_arr, "5")
        _arr = _append(_arr, "6")
        _arr = _append(_arr, "7")
        _arr = _append(_arr, "8")
        _arr = _append(_arr, "9")
        return _arr
    }() as! [String])
    var products: [Int] = ([] as! [Int])
    products = (search(([] as! [String]), (digits as! [String]), &products) as! [Int])
    var total = 0
    var i = 0
    while (i < _int(((products).count))) {
        total = _int((total &+ (_idx(products, i) as? Int ?? 0)))
        i = _int((i &+ 1))
    }
    print(_p(_p(total)))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
