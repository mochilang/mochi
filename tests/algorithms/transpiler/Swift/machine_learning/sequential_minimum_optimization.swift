// Generated by Mochi transpiler v0.10.62 on 2025-08-09 10:33:56 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func dot(_ a: [Double], _ b: [Double]) -> Double {
        var sum = 0.0
        var i = 0
        while (i < _int(((a).count))) {
            sum = Double((sum + (Double(_idx(a, i)) * Double(_idx(b, i)))))
            i = _int((i &+ 1))
        }
        return sum
    }
    func maxf(_ a: Double, _ b: Double) -> Double {
        if (a > b) {
            return a
        }
        return b
    }
    func minf(_ a: Double, _ b: Double) -> Double {
        if (a < b) {
            return a
        }
        return b
    }
    func absf(_ x: Double) -> Double {
        if (x >= 0.0) {
            return x
        }
        return (0.0 - x)
    }
    func predict_raw(_ samples: [[Double]], _ labels: [Double], _ alphas: [Double], _ b: Double, _ x: [Double]) -> Double {
        var res = 0.0
        var i = 0
        while (i < _int(((samples).count))) {
            res = Double((res + ((Double(_idx(alphas, i)) * Double(_idx(labels, i))) * Double(dot((_idx(samples, i) as! [Double]), (x as! [Double]))))))
            i = _int((i &+ 1))
        }
        return (res + b)
    }
    func smo_train(_ samples: [[Double]], _ labels: [Double], _ c: Double, _ tol: Double, _ max_passes: Int) -> [[Double]] {
        let m = _int(((samples).count))
        var alphas: [Double] = ([] as! [Double])
        var i = 0
        while (i < m) {
            alphas = (_append(alphas, 0.0) as! [Double])
            i = _int((i &+ 1))
        }
        var b = 0.0
        var passes = 0
        while (passes < max_passes) {
            var num_changed = 0
            var i1 = 0
            while (i1 < m) {
                let Ei = (Double(predict_raw((samples as! [[Double]]), (labels as! [Double]), (alphas as! [Double]), Double(b), (_idx(samples, i1) as! [Double]))) - Double(_idx(labels, i1)))
                if ((((Double(_idx(labels, i1)) * Ei) < (0.0 - tol)) && (Double(_idx(alphas, i1)) < c)) || (((Double(_idx(labels, i1)) * Ei) > tol) && (Double(_idx(alphas, i1)) > 0.0))) {
                    var i2 = ((_int((i1 &+ 1)) % m + m) % m)
                    let Ej = (Double(predict_raw((samples as! [[Double]]), (labels as! [Double]), (alphas as! [Double]), Double(b), (_idx(samples, i2) as! [Double]))) - Double(_idx(labels, i2)))
                    let alpha1_old = Double(_idx(alphas, i1))
                    let alpha2_old = Double(_idx(alphas, i2))
                    var L = 0.0
                    var H = 0.0
                    if (Double(_idx(labels, i1)) != Double(_idx(labels, i2))) {
                        L = Double(maxf(0.0, Double((alpha2_old - alpha1_old))))
                        H = Double(minf(Double(c), Double(((c + alpha2_old) - alpha1_old))))
                    } else {
                        L = Double(maxf(0.0, Double(((alpha2_old + alpha1_old) - c))))
                        H = Double(minf(Double(c), Double((alpha2_old + alpha1_old))))
                    }
                    if (L == H) {
                        i1 = _int((i1 &+ 1))
                        continue
                    }
                    let eta = (((2.0 * Double(dot((_idx(samples, i1) as! [Double]), (_idx(samples, i2) as! [Double])))) - Double(dot((_idx(samples, i1) as! [Double]), (_idx(samples, i1) as! [Double])))) - Double(dot((_idx(samples, i2) as! [Double]), (_idx(samples, i2) as! [Double]))))
                    if (eta >= 0.0) {
                        i1 = _int((i1 &+ 1))
                        continue
                    }
                    alphas = _set(alphas, i2, Double((alpha2_old - ((Double(_idx(labels, i2)) * Double((Ei - Ej))) / eta))))
                    if (Double(_idx(alphas, i2)) > H) {
                        alphas = _set(alphas, i2, Double(H))
                    }
                    if (Double(_idx(alphas, i2)) < L) {
                        alphas = _set(alphas, i2, Double(L))
                    }
                    if (Double(absf(Double((Double(_idx(alphas, i2)) - alpha2_old)))) < 0.00001) {
                        i1 = _int((i1 &+ 1))
                        continue
                    }
                    alphas = _set(alphas, i1, Double((alpha1_old + ((Double(_idx(labels, i1)) * Double(_idx(labels, i2))) * Double((alpha2_old - Double(_idx(alphas, i2))))))))
                    let b1 = (((b - Ei) - ((Double(_idx(labels, i1)) * Double((Double(_idx(alphas, i1)) - alpha1_old))) * Double(dot((_idx(samples, i1) as! [Double]), (_idx(samples, i1) as! [Double]))))) - ((Double(_idx(labels, i2)) * Double((Double(_idx(alphas, i2)) - alpha2_old))) * Double(dot((_idx(samples, i1) as! [Double]), (_idx(samples, i2) as! [Double])))))
                    let b2 = (((b - Ej) - ((Double(_idx(labels, i1)) * Double((Double(_idx(alphas, i1)) - alpha1_old))) * Double(dot((_idx(samples, i1) as! [Double]), (_idx(samples, i2) as! [Double]))))) - ((Double(_idx(labels, i2)) * Double((Double(_idx(alphas, i2)) - alpha2_old))) * Double(dot((_idx(samples, i2) as! [Double]), (_idx(samples, i2) as! [Double])))))
                    if ((Double(_idx(alphas, i1)) > 0.0) && (Double(_idx(alphas, i1)) < c)) {
                        b = Double(b1)
                    } else if ((Double(_idx(alphas, i2)) > 0.0) && (Double(_idx(alphas, i2)) < c)) {
                        b = Double(b2)
                    } else {
                        b = Double((Double((b1 + b2)) / 2.0))
                    }
                    
                    num_changed = _int((num_changed &+ 1))
                }
                i1 = _int((i1 &+ 1))
            }
            if (num_changed == 0) {
                passes = _int((passes &+ 1))
            } else {
                passes = 0
            }
        }
        return ({
            var _arr: [[Double]] = []
            _arr = _append(_arr, alphas)
            _arr = _append(_arr, ({
                var _arr: [Double] = []
                _arr = _append(_arr, b)
                return _arr
            }() as! [Double]))
            return _arr
        }() as! [[Double]])
    }
    func predict(_ samples: [[Double]], _ labels: [Double], _ model: [[Double]], _ x: [Double]) -> Double {
        let alphas: [Double] = (_idx(model, 0) as! [Double])
        let b = Double(_idx(_idx(model, 1)!, 0))
        let val = Double(predict_raw((samples as! [[Double]]), (labels as! [Double]), (alphas as! [Double]), Double(b), (x as! [Double])))
        if (val >= 0.0) {
            return 1.0
        }
        return -1.0
    }
    let samples: [[Double]] = ({
        var _arr: [[Double]] = []
        _arr = _append(_arr, ({
            var _arr: [Double] = []
            _arr = _append(_arr, 2.0)
            _arr = _append(_arr, 2.0)
            return _arr
        }() as! [Double]))
        _arr = _append(_arr, ({
            var _arr: [Double] = []
            _arr = _append(_arr, 1.5)
            _arr = _append(_arr, 1.5)
            return _arr
        }() as! [Double]))
        _arr = _append(_arr, ({
            var _arr: [Double] = []
            _arr = _append(_arr, 0.0)
            _arr = _append(_arr, 0.0)
            return _arr
        }() as! [Double]))
        _arr = _append(_arr, ({
            var _arr: [Double] = []
            _arr = _append(_arr, 0.5)
            _arr = _append(_arr, 0.0)
            return _arr
        }() as! [Double]))
        return _arr
    }() as! [[Double]])
    let labels: [Double] = ({
        var _arr: [Double] = []
        _arr = _append(_arr, 1.0)
        _arr = _append(_arr, 1.0)
        _arr = _append(_arr, -1.0)
        _arr = _append(_arr, -1.0)
        return _arr
    }() as! [Double])
    let model: [[Double]] = (smo_train((samples as! [[Double]]), (labels as! [Double]), 1.0, 0.001, 10) as! [[Double]])
    print(_p(Double(predict((samples as! [[Double]]), (labels as! [Double]), (model as! [[Double]]), ({
        var _arr: [Double] = []
        _arr = _append(_arr, 1.5)
        _arr = _append(_arr, 1.0)
        return _arr
    }() as! [Double])))))
    print(_p(Double(predict((samples as! [[Double]]), (labels as! [Double]), (model as! [[Double]]), ({
        var _arr: [Double] = []
        _arr = _append(_arr, 0.2)
        _arr = _append(_arr, 0.1)
        return _arr
    }() as! [Double])))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
