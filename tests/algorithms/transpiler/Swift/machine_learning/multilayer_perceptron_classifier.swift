// Generated by Mochi transpiler v0.10.62 on 2025-08-09 10:33:46 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func exp_taylor(_ x: Double) -> Double {
        var term = 1.0
        var sum = 1.0
        var i = 1.0
        while (i < 20.0) {
            term = Double(((term * x) / i))
            sum = Double((sum + term))
            i = Double((i + 1.0))
        }
        return sum
    }
    func sigmoid(_ x: Double) -> Double {
        return (1.0 / Double((1.0 + Double(exp_taylor(Double(-x))))))
    }
    let X: [[Double]] = ({
        var _arr: [[Double]] = []
        _arr = _append(_arr, ({
            var _arr: [Double] = []
            _arr = _append(_arr, 0.0)
            _arr = _append(_arr, 0.0)
            return _arr
        }() as! [Double]))
        _arr = _append(_arr, ({
            var _arr: [Double] = []
            _arr = _append(_arr, 1.0)
            _arr = _append(_arr, 1.0)
            return _arr
        }() as! [Double]))
        _arr = _append(_arr, ({
            var _arr: [Double] = []
            _arr = _append(_arr, 1.0)
            _arr = _append(_arr, 0.0)
            return _arr
        }() as! [Double]))
        _arr = _append(_arr, ({
            var _arr: [Double] = []
            _arr = _append(_arr, 0.0)
            _arr = _append(_arr, 1.0)
            return _arr
        }() as! [Double]))
        return _arr
    }() as! [[Double]])
    let Y: [Double] = ({
        var _arr: [Double] = []
        _arr = _append(_arr, 0.0)
        _arr = _append(_arr, 1.0)
        _arr = _append(_arr, 0.0)
        _arr = _append(_arr, 0.0)
        return _arr
    }() as! [Double])
    let test_data: [[Double]] = ({
        var _arr: [[Double]] = []
        _arr = _append(_arr, ({
            var _arr: [Double] = []
            _arr = _append(_arr, 0.0)
            _arr = _append(_arr, 0.0)
            return _arr
        }() as! [Double]))
        _arr = _append(_arr, ({
            var _arr: [Double] = []
            _arr = _append(_arr, 0.0)
            _arr = _append(_arr, 1.0)
            return _arr
        }() as! [Double]))
        _arr = _append(_arr, ({
            var _arr: [Double] = []
            _arr = _append(_arr, 1.0)
            _arr = _append(_arr, 1.0)
            return _arr
        }() as! [Double]))
        return _arr
    }() as! [[Double]])
    var w1: [[Double]] = ({
        var _arr: [[Double]] = []
        _arr = _append(_arr, ({
            var _arr: [Double] = []
            _arr = _append(_arr, 0.5)
            _arr = _append(_arr, -0.5)
            return _arr
        }() as! [Double]))
        _arr = _append(_arr, ({
            var _arr: [Double] = []
            _arr = _append(_arr, 0.5)
            _arr = _append(_arr, 0.5)
            return _arr
        }() as! [Double]))
        return _arr
    }() as! [[Double]])
    var b1: [Double] = ({
        var _arr: [Double] = []
        _arr = _append(_arr, 0.0)
        _arr = _append(_arr, 0.0)
        return _arr
    }() as! [Double])
    var w2: [Double] = ({
        var _arr: [Double] = []
        _arr = _append(_arr, 0.5)
        _arr = _append(_arr, -0.5)
        return _arr
    }() as! [Double])
    var b2: Double = 0.0
    func train(_ epochs: Int, _ lr: Double) {
        var e = 0
        while (e < epochs) {
            var i = 0
            while (i < _int(((X).count))) {
                let x0 = Double(_idx(_idx(X, i)!, 0))
                let x1 = Double(_idx(_idx(X, i)!, 1))
                let target = Double(_idx(Y, i))
                let z1 = (((Double(_idx(_idx(w1, 0)!, 0)) * x0) + (Double(_idx(_idx(w1, 1)!, 0)) * x1)) + Double(_idx(b1, 0)))
                let z2 = (((Double(_idx(_idx(w1, 0)!, 1)) * x0) + (Double(_idx(_idx(w1, 1)!, 1)) * x1)) + Double(_idx(b1, 1)))
                let h1 = Double(sigmoid(Double(z1)))
                let h2 = Double(sigmoid(Double(z2)))
                let z3 = (((Double(_idx(w2, 0)) * h1) + (Double(_idx(w2, 1)) * h2)) + b2)
                let out = Double(sigmoid(Double(z3)))
                let error = (out - target)
                let d1 = (((h1 * Double((1.0 - h1))) * Double(_idx(w2, 0))) * error)
                let d2 = (((h2 * Double((1.0 - h2))) * Double(_idx(w2, 1))) * error)
                w2 = _set(w2, 0, Double((Double(_idx(w2, 0)) - ((lr * error) * h1))))
                w2 = _set(w2, 1, Double((Double(_idx(w2, 1)) - ((lr * error) * h2))))
                b2 = Double((b2 - (lr * error)))
                var _tmp5 = (_idx(w1, 0) as! [Double])
                _tmp5 = _set(_tmp5, 0, Double((Double(_idx(_idx(w1, 0)!, 0)) - ((lr * d1) * x0))))
                w1 = _set(w1, 0, (_tmp5 as! [Double]))
                var _tmp6 = (_idx(w1, 1) as! [Double])
                _tmp6 = _set(_tmp6, 0, Double((Double(_idx(_idx(w1, 1)!, 0)) - ((lr * d1) * x1))))
                w1 = _set(w1, 1, (_tmp6 as! [Double]))
                b1 = _set(b1, 0, Double((Double(_idx(b1, 0)) - (lr * d1))))
                var _tmp7 = (_idx(w1, 0) as! [Double])
                _tmp7 = _set(_tmp7, 1, Double((Double(_idx(_idx(w1, 0)!, 1)) - ((lr * d2) * x0))))
                w1 = _set(w1, 0, (_tmp7 as! [Double]))
                var _tmp8 = (_idx(w1, 1) as! [Double])
                _tmp8 = _set(_tmp8, 1, Double((Double(_idx(_idx(w1, 1)!, 1)) - ((lr * d2) * x1))))
                w1 = _set(w1, 1, (_tmp8 as! [Double]))
                b1 = _set(b1, 1, Double((Double(_idx(b1, 1)) - (lr * d2))))
                i = _int((i &+ 1))
            }
            e = _int((e &+ 1))
        }
    }
    func predict(_ samples: [[Double]]) -> [Int] {
        var preds: [Int] = ([] as! [Int])
        var i = 0
        while (i < _int(((samples).count))) {
            let x0 = Double(_idx(_idx(samples, i)!, 0))
            let x1 = Double(_idx(_idx(samples, i)!, 1))
            let z1 = (((Double(_idx(_idx(w1, 0)!, 0)) * x0) + (Double(_idx(_idx(w1, 1)!, 0)) * x1)) + Double(_idx(b1, 0)))
            let z2 = (((Double(_idx(_idx(w1, 0)!, 1)) * x0) + (Double(_idx(_idx(w1, 1)!, 1)) * x1)) + Double(_idx(b1, 1)))
            let h1 = Double(sigmoid(Double(z1)))
            let h2 = Double(sigmoid(Double(z2)))
            let z3 = (((Double(_idx(w2, 0)) * h1) + (Double(_idx(w2, 1)) * h2)) + b2)
            let out = Double(sigmoid(Double(z3)))
            var label = 0
            if (out >= 0.5) {
                label = 1
            }
            preds = (_append(preds, label) as! [Int])
            i = _int((i &+ 1))
        }
        return preds
    }
    func wrapper(_ y: [Int]) -> [Int] {
        return y
    }
    _ = train(4000, 0.5)
    var preds: [Int] = (wrapper((predict((test_data as! [[Double]])) as! [Int])) as! [Int])
    print(_p("[" + preds.map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
