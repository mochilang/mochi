// Generated by Mochi transpiler v0.10.62 on 2025-08-09 16:38:11 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
struct PointLabel: Codable {
    var point: [Double]
    var label: Int
    init() {
        self.point = []
        self.label = 0
    }
    init(point: [Double], label: Int) {
        self.point = point
        self.label = label
    }
}
struct KNN: Codable {
    var data: [PointLabel]
    var labels: [String]
    init() {
        self.data = []
        self.labels = []
    }
    init(data: [PointLabel], labels: [String]) {
        self.data = data
        self.labels = labels
    }
}
struct DistLabel: Codable {
    var dist: Double
    var label: Int
    init() {
        self.dist = 0
        self.label = 0
    }
    init(dist: Double, label: Int) {
        self.dist = dist
        self.label = label
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func sqrtApprox(_ x: Double) -> Double {
        if (x <= 0.0) {
            return 0.0
        }
        var guess: Double = x
        var i = 0
        while (i < 20) {
            guess = Double((Double((guess + (x / guess))) / 2.0))
            i = _int((i &+ 1))
        }
        return guess
    }
    func make_knn(_ train_data: [[Double]], _ train_target: [Int], _ class_labels: [String]) -> KNN {
        var items: [PointLabel] = ([] as! [PointLabel])
        var i = 0
        while (i < _int(((train_data).count))) {
            let pl = PointLabel(point: (_idx(train_data, i) as! [Double]), label: (_idx(train_target, i) as? Int ?? 0))
            items = (_append(items, pl) as! [PointLabel])
            i = _int((i &+ 1))
        }
        return KNN(data: (items as! [PointLabel]), labels: (class_labels as! [String]))
    }
    func euclidean_distance(_ a: [Double], _ b: [Double]) -> Double {
        var sum = 0.0
        var i = 0
        while (i < _int(((a).count))) {
            let diff = (Double(_idx(a, i)) - Double(_idx(b, i)))
            sum = Double((sum + (diff * diff)))
            i = _int((i &+ 1))
        }
        return Double(sqrtApprox(Double(sum)))
    }
    func classify(_ knn: KNN, _ pred_point: [Double], _ k: Int) -> String {
        var distances: [DistLabel] = ([] as! [DistLabel])
        var i = 0
        while (i < _int(((knn.data).count))) {
            let d = Double(euclidean_distance(((_idx(knn.data, i)!.point) as! [Double]), (pred_point as! [Double])))
            distances = (_append(distances, DistLabel(dist: Double(d), label: ((_idx(knn.data, i)!.label) as? Int ?? 0))) as! [DistLabel])
            i = _int((i &+ 1))
        }
        var votes: [Int] = ([] as! [Int])
        var count = 0
        while (count < k) {
            var min_index = 0
            var j = 1
            while (j < _int(((distances).count))) {
                if (String(describing: (_idx(distances, j)!.dist)) < String(describing: (_idx(distances, min_index)!.dist))
                ) {
                    min_index = Int(j)
                }
                j = _int((j &+ 1))
            }
            votes = ((_append(votes, (_idx(distances, min_index)!.label)) as! [Any?]) as! [Int])
            var _tmp2 = (_idx(distances, min_index) as! DistLabel)
            _tmp2.dist = 1000000000000000000.0
            distances = _set(distances, min_index, (_tmp2 as! DistLabel))
            count = _int((count &+ 1))
        }
        var tally: [Int] = ([] as! [Int])
        var t = 0
        while (t < _int(((knn.labels).count))) {
            tally = (_append(tally, 0) as! [Int])
            t = _int((t &+ 1))
        }
        var v = 0
        while (v < _int(((votes).count))) {
            let lbl = (_idx(votes, v) as? Int ?? 0)
            tally = _set(tally, lbl, _int(((_idx(tally, lbl) as? Int ?? 0) &+ 1)))
            v = _int((v &+ 1))
        }
        var max_idx = 0
        var m = 1
        while (m < _int(((tally).count))) {
            if ((_idx(tally, m) as? Int ?? 0) > (_idx(tally, max_idx) as? Int ?? 0)) {
                max_idx = Int(m)
            }
            m = _int((m &+ 1))
        }
        return (_idx(knn.labels, max_idx) as! String)
    }
    let train_X: [[Double]] = ({
        var _arr: [[Double]] = []
        _arr = _append(_arr, ({
            var _arr: [Double] = []
            _arr = _append(_arr, 0.0)
            _arr = _append(_arr, 0.0)
            return _arr
        }() as! [Double]))
        _arr = _append(_arr, ({
            var _arr: [Double] = []
            _arr = _append(_arr, 1.0)
            _arr = _append(_arr, 0.0)
            return _arr
        }() as! [Double]))
        _arr = _append(_arr, ({
            var _arr: [Double] = []
            _arr = _append(_arr, 0.0)
            _arr = _append(_arr, 1.0)
            return _arr
        }() as! [Double]))
        _arr = _append(_arr, ({
            var _arr: [Double] = []
            _arr = _append(_arr, 0.5)
            _arr = _append(_arr, 0.5)
            return _arr
        }() as! [Double]))
        _arr = _append(_arr, ({
            var _arr: [Double] = []
            _arr = _append(_arr, 3.0)
            _arr = _append(_arr, 3.0)
            return _arr
        }() as! [Double]))
        _arr = _append(_arr, ({
            var _arr: [Double] = []
            _arr = _append(_arr, 2.0)
            _arr = _append(_arr, 3.0)
            return _arr
        }() as! [Double]))
        _arr = _append(_arr, ({
            var _arr: [Double] = []
            _arr = _append(_arr, 3.0)
            _arr = _append(_arr, 2.0)
            return _arr
        }() as! [Double]))
        return _arr
    }() as! [[Double]])
    let train_y: [Int] = ({
        var _arr: [Int] = []
        _arr = _append(_arr, 0)
        _arr = _append(_arr, 0)
        _arr = _append(_arr, 0)
        _arr = _append(_arr, 0)
        _arr = _append(_arr, 1)
        _arr = _append(_arr, 1)
        _arr = _append(_arr, 1)
        return _arr
    }() as! [Int])
    let classes: [String] = ({
        var _arr: [String] = []
        _arr = _append(_arr, "A")
        _arr = _append(_arr, "B")
        return _arr
    }() as! [String])
    let knn = make_knn((train_X as! [[Double]]), (train_y as! [Int]), (classes as! [String]))
    let point: [Double] = ({
        var _arr: [Double] = []
        _arr = _append(_arr, 1.2)
        _arr = _append(_arr, 1.2)
        return _arr
    }() as! [Double])
    print(_p(String(describing: classify((knn as! KNN), (point as! [Double]), 5))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
