// Generated by Mochi transpiler v0.10.67 on 2025-08-16 21:28:24 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first!
}
func _idx<K: Hashable, V>(_ m: [K: V], _ k: K) -> V? {
    return m[k]
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
struct Neighbor: Codable {
    var vector: [Double]
    var distance: Double
    init() {
        self.vector = []
        self.distance = 0
    }
    init(vector: [Double], distance: Double) {
        self.vector = vector
        self.distance = distance
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func sqrt(_ x: Double) -> Double {
        if (x <= 0.0) {
            return 0.0
        }
        var guess = x
        var i = 0
        while (i < 10) {
            guess = Double((Double((guess + (x / guess))) / 2.0))
            i = _int((i &+ 1))
        }
        return guess
    }
    func euclidean(_ a: [Double], _ b: [Double]) -> Double {
        var sum: Double = 0.0
        var i = 0
        while (i < _int(((a).count))) {
            let diff = (Double(_idx(a, i)) - Double(_idx(b, i)))
            sum = Double((sum + (diff * diff)))
            i = _int((i &+ 1))
        }
        let res = Double(sqrt(Double(sum)))
        return res
    }
    func similarity_search(_ dataset: [[Double]], _ value_array: [[Double]]) -> [Neighbor] {
        let dim = _int((((_idx(dataset, 0) as! [Double])).count))
        if (dim != _int((((_idx(value_array, 0) as! [Double])).count))) {
            return ([] as! [Neighbor])
        }
        var result: [Neighbor] = ([] as! [Neighbor])
        var i = 0
        while (i < _int(((value_array).count))) {
            let value: [Double] = (_idx(value_array, i) as! [Double])
            var dist: Double = Double(euclidean((value as! [Double]), (_idx(dataset, 0) as! [Double])))
            var vec: [Double] = (_idx(dataset, 0) as! [Double])
            var j = 1
            while (j < _int(((dataset).count))) {
                let d: Double = Double(euclidean((value as! [Double]), (_idx(dataset, j) as! [Double])))
                if (d < dist) {
                    dist = Double(d)
                    vec = (_idx(dataset, j) as! [Double])
                }
                j = _int((j &+ 1))
            }
            let nb = Neighbor(vector: (vec as! [Double]), distance: Double(dist))
            result = (_append(result, nb) as! [Neighbor])
            i = _int((i &+ 1))
        }
        return result
    }
    func cosine_similarity(_ a: [Double], _ b: [Double]) -> Double {
        var dot = 0.0
        var norm_a = 0.0
        var norm_b = 0.0
        var i = 0
        while (i < _int(((a).count))) {
            dot = Double((dot + (Double(_idx(a, i)) * Double(_idx(b, i)))))
            norm_a = Double((norm_a + (Double(_idx(a, i)) * Double(_idx(a, i)))))
            norm_b = Double((norm_b + (Double(_idx(b, i)) * Double(_idx(b, i)))))
            i = _int((i &+ 1))
        }
        if ((norm_a == 0.0) || (norm_b == 0.0)) {
            return 0.0
        }
        return (dot / Double((Double(sqrt(Double(norm_a))) * Double(sqrt(Double(norm_b))))))
    }
    let dataset: [[Double]] = ({
        var _arr: [[Double]] = []
        _arr = _append(_arr, ({
            var _arr: [Double] = []
            _arr = _append(_arr, 0.0)
            _arr = _append(_arr, 0.0)
            _arr = _append(_arr, 0.0)
            return _arr
        }() as! [Double]))
        _arr = _append(_arr, ({
            var _arr: [Double] = []
            _arr = _append(_arr, 1.0)
            _arr = _append(_arr, 1.0)
            _arr = _append(_arr, 1.0)
            return _arr
        }() as! [Double]))
        _arr = _append(_arr, ({
            var _arr: [Double] = []
            _arr = _append(_arr, 2.0)
            _arr = _append(_arr, 2.0)
            _arr = _append(_arr, 2.0)
            return _arr
        }() as! [Double]))
        return _arr
    }() as! [[Double]])
    let value_array: [[Double]] = ({
        var _arr: [[Double]] = []
        _arr = _append(_arr, ({
            var _arr: [Double] = []
            _arr = _append(_arr, 0.0)
            _arr = _append(_arr, 0.0)
            _arr = _append(_arr, 0.0)
            return _arr
        }() as! [Double]))
        _arr = _append(_arr, ({
            var _arr: [Double] = []
            _arr = _append(_arr, 0.0)
            _arr = _append(_arr, 0.0)
            _arr = _append(_arr, 1.0)
            return _arr
        }() as! [Double]))
        return _arr
    }() as! [[Double]])
    let neighbors: [Neighbor] = (similarity_search((dataset as! [[Double]]), (value_array as! [[Double]])) as! [Neighbor])
    var k = 0
    while (k < _int(((neighbors).count))) {
        let n = (_idx(neighbors, k) as! Neighbor)
        print(_p((_p((_p((_p((_p("[") + _p("[" + n.vector.map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))) + _p(", "))) + _p(_p(n.distance)))) + _p("]"))))
        k = _int((k &+ 1))
    }
    print(_p(_p(Double(cosine_similarity(({
        var _arr: [Double] = []
        _arr = _append(_arr, 1.0)
        _arr = _append(_arr, 2.0)
        return _arr
    }() as! [Double]), ({
        var _arr: [Double] = []
        _arr = _append(_arr, 6.0)
        _arr = _append(_arr, 32.0)
        return _arr
    }() as! [Double]))))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
