// Generated by Mochi transpiler v0.10.62 on 2025-08-09 10:33:48 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func design_matrix(_ xs: [Double], _ degree: Int) -> [[Double]] {
        var i = 0
        var matrix: [[Double]] = ([] as! [[Double]])
        while (i < _int(((xs).count))) {
            var row: [Double] = ([] as! [Double])
            var j = 0
            var pow = 1.0
            while (j <= degree) {
                row = (_append(row, pow) as! [Double])
                pow = Double((pow * Double(_idx(xs, i))))
                j = _int((j &+ 1))
            }
            matrix = (_append(matrix, row) as! [[Double]])
            i = _int((i &+ 1))
        }
        return matrix
    }
    func transpose(_ matrix: [[Double]]) -> [[Double]] {
        let rows = _int(((matrix).count))
        let cols = _int((((_idx(matrix, 0) as! [Double])).count))
        var j = 0
        var result: [[Double]] = ([] as! [[Double]])
        while (j < cols) {
            var row: [Double] = ([] as! [Double])
            var i = 0
            while (i < rows) {
                row = (_append(row, Double(_idx(_idx(matrix, i)!, j))) as! [Double])
                i = _int((i &+ 1))
            }
            result = (_append(result, row) as! [[Double]])
            j = _int((j &+ 1))
        }
        return result
    }
    func matmul(_ A: [[Double]], _ B: [[Double]]) -> [[Double]] {
        let n = _int(((A).count))
        let m = _int((((_idx(A, 0) as! [Double])).count))
        let p = _int((((_idx(B, 0) as! [Double])).count))
        var i = 0
        var result: [[Double]] = ([] as! [[Double]])
        while (i < n) {
            var row: [Double] = ([] as! [Double])
            var k = 0
            while (k < p) {
                var sum = 0.0
                var j = 0
                while (j < m) {
                    sum = Double((sum + (Double(_idx(_idx(A, i)!, j)) * Double(_idx(_idx(B, j)!, k)))))
                    j = _int((j &+ 1))
                }
                row = (_append(row, sum) as! [Double])
                k = _int((k &+ 1))
            }
            result = (_append(result, row) as! [[Double]])
            i = _int((i &+ 1))
        }
        return result
    }
    func matvec_mul(_ A: [[Double]], _ v: [Double]) -> [Double] {
        let n = _int(((A).count))
        let m = _int((((_idx(A, 0) as! [Double])).count))
        var i = 0
        var result: [Double] = ([] as! [Double])
        while (i < n) {
            var sum = 0.0
            var j = 0
            while (j < m) {
                sum = Double((sum + (Double(_idx(_idx(A, i)!, j)) * Double(_idx(v, j)))))
                j = _int((j &+ 1))
            }
            result = (_append(result, sum) as! [Double])
            i = _int((i &+ 1))
        }
        return result
    }
    func gaussian_elimination(_ A: [[Double]], _ b: [Double]) -> [Double] {
        let n = _int(((A).count))
        var M: [[Double]] = ([] as! [[Double]])
        var i = 0
        while (i < n) {
            M = (_append(M, (_append((_idx(A, i) as! [Double]), Double(_idx(b, i))) as! [Double])) as! [[Double]])
            i = _int((i &+ 1))
        }
        var k = 0
        while (k < n) {
            var j = (k &+ 1)
            while (j < n) {
                let factor = (Double(_idx(_idx(M, j)!, k)) / Double(_idx(_idx(M, k)!, k)))
                var rowj = (_idx(M, j) as! [Double])
                var rowk = (_idx(M, k) as! [Double])
                var l = k
                while (l <= n) {
                    rowj = _set(rowj, l, Double((Double(_idx(rowj, l)) - (factor * Double(_idx(rowk, l))))))
                    l = _int((l &+ 1))
                }
                M = _set(M, j, (rowj as! [Double]))
                j = _int((j &+ 1))
            }
            k = _int((k &+ 1))
        }
        var x: [Double] = ([] as! [Double])
        var t = 0
        while (t < n) {
            x = (_append(x, 0.0) as! [Double])
            t = _int((t &+ 1))
        }
        var i2 = (n &- 1)
        while (i2 >= 0) {
            var sum = Double(_idx(_idx(M, i2)!, n))
            var j2 = (i2 &+ 1)
            while (j2 < n) {
                sum = Double((sum - (Double(_idx(_idx(M, i2)!, j2)) * Double(_idx(x, j2)))))
                j2 = _int((j2 &+ 1))
            }
            x = _set(x, i2, Double((sum / Double(_idx(_idx(M, i2)!, i2)))))
            i2 = _int((i2 &- 1))
        }
        return x
    }
    func predict(_ xs: [Double], _ coeffs: [Double]) -> [Double] {
        var i = 0
        var result: [Double] = ([] as! [Double])
        while (i < _int(((xs).count))) {
            let x = Double(_idx(xs, i))
            var j = 0
            var pow = 1.0
            var sum = 0.0
            while (j < _int(((coeffs).count))) {
                sum = Double((sum + (Double(_idx(coeffs, j)) * pow)))
                pow = Double((pow * x))
                j = _int((j &+ 1))
            }
            result = (_append(result, sum) as! [Double])
            i = _int((i &+ 1))
        }
        return result
    }
    let xs: [Double] = ({
        var _arr: [Double] = []
        _arr = _append(_arr, 0.0)
        _arr = _append(_arr, 1.0)
        _arr = _append(_arr, 2.0)
        _arr = _append(_arr, 3.0)
        _arr = _append(_arr, 4.0)
        _arr = _append(_arr, 5.0)
        _arr = _append(_arr, 6.0)
        _arr = _append(_arr, 7.0)
        _arr = _append(_arr, 8.0)
        _arr = _append(_arr, 9.0)
        _arr = _append(_arr, 10.0)
        return _arr
    }() as! [Double])
    var ys: [Double] = ([] as! [Double])
    var i = 0
    while (i < _int(((xs).count))) {
        let x = Double(_idx(xs, i))
        ys = (_append(ys, (((((x * x) * x) - ((2.0 * x) * x)) + (3.0 * x)) - 5.0)) as! [Double])
        i = _int((i &+ 1))
    }
    var X = (design_matrix((xs as! [Double]), 3) as! [[Double]])
    var Xt = (transpose((X as! [[Double]])) as! [[Double]])
    var XtX = (matmul((Xt as! [[Double]]), (X as! [[Double]])) as! [[Double]])
    var Xty = (matvec_mul((Xt as! [[Double]]), (ys as! [Double])) as! [Double])
    let coeffs: [Double] = (gaussian_elimination((XtX as! [[Double]]), (Xty as! [Double])) as! [Double])
    print(_p("[" + coeffs.map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    print(_p("[" + (predict(({
        var _arr: [Double] = []
        _arr = _append(_arr, -1.0)
        return _arr
    }() as! [Double]), (coeffs as! [Double])) as! [Double]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    print(_p("[" + (predict(({
        var _arr: [Double] = []
        _arr = _append(_arr, -2.0)
        return _arr
    }() as! [Double]), (coeffs as! [Double])) as! [Double]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    print(_p("[" + (predict(({
        var _arr: [Double] = []
        _arr = _append(_arr, 6.0)
        return _arr
    }() as! [Double]), (coeffs as! [Double])) as! [Double]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
