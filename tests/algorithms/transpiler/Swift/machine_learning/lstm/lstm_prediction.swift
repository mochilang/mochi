// Generated by Mochi transpiler v0.10.62 on 2025-08-09 16:38:28 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _slice<T>(_ xs: [T], _ start: Int, _ end: Int) -> [T] {
    var s = start
    var e = end
    if s < 0 { s = 0 }
    if e > xs.count { e = xs.count }
    if s > e { s = e }
    return Array(xs[s..<e])
}
struct LSTMWeights: Codable {
    var w_i: Double
    var u_i: Double
    var b_i: Double
    var w_f: Double
    var u_f: Double
    var b_f: Double
    var w_o: Double
    var u_o: Double
    var b_o: Double
    var w_c: Double
    var u_c: Double
    var b_c: Double
    var w_y: Double
    var b_y: Double
    init() {
        self.w_i = 0
        self.u_i = 0
        self.b_i = 0
        self.w_f = 0
        self.u_f = 0
        self.b_f = 0
        self.w_o = 0
        self.u_o = 0
        self.b_o = 0
        self.w_c = 0
        self.u_c = 0
        self.b_c = 0
        self.w_y = 0
        self.b_y = 0
    }
    init(w_i: Double, u_i: Double, b_i: Double, w_f: Double, u_f: Double, b_f: Double, w_o: Double, u_o: Double, b_o: Double, w_c: Double, u_c: Double, b_c: Double, w_y: Double, b_y: Double) {
        self.w_i = w_i
        self.u_i = u_i
        self.b_i = b_i
        self.w_f = w_f
        self.u_f = u_f
        self.b_f = b_f
        self.w_o = w_o
        self.u_o = u_o
        self.b_o = b_o
        self.w_c = w_c
        self.u_c = u_c
        self.b_c = b_c
        self.w_y = w_y
        self.b_y = b_y
    }
}
struct LSTMState: Codable {
    var i: [Double]
    var f: [Double]
    var o: [Double]
    var g: [Double]
    var c: [Double]
    var h: [Double]
    init() {
        self.i = []
        self.f = []
        self.o = []
        self.g = []
        self.c = []
        self.h = []
    }
    init(i: [Double], f: [Double], o: [Double], g: [Double], c: [Double], h: [Double]) {
        self.i = i
        self.f = f
        self.o = o
        self.g = g
        self.c = c
        self.h = h
    }
}
struct Samples: Codable {
    var x: [[Double]]
    var y: [Double]
    init() {
        self.x = []
        self.y = []
    }
    init(x: [[Double]], y: [Double]) {
        self.x = x
        self.y = y
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func exp_approx(_ x: Double) -> Double {
        var sum: Double = 1.0
        var term: Double = 1.0
        var n: Int = 1
        while (n < 20) {
            term = Double(((term * x) / Double(n)))
            sum = Double((sum + term))
            n = _int((n &+ 1))
        }
        return sum
    }
    func sigmoid(_ x: Double) -> Double {
        return (1.0 / Double((1.0 + Double(exp_approx(Double(-x))))))
    }
    func tanh_approx(_ x: Double) -> Double {
        let e = Double(exp_approx(Double((2.0 * x))))
        return (Double((e - 1.0)) / Double((e + 1.0)))
    }
    func forward(_ seq: [Double], _ w: LSTMWeights) -> LSTMState {
        var i_arr: [Double] = ([] as! [Double])
        var f_arr: [Double] = ([] as! [Double])
        var o_arr: [Double] = ([] as! [Double])
        var g_arr: [Double] = ([] as! [Double])
        var c_arr: [Double] = ({
            var _arr: [Double] = []
            _arr = _append(_arr, 0.0)
            return _arr
        }() as! [Double])
        var h_arr: [Double] = ({
            var _arr: [Double] = []
            _arr = _append(_arr, 0.0)
            return _arr
        }() as! [Double])
        var t: Int = 0
        while (t < _int(((seq).count))) {
            let x = Double(_idx(seq, t))
            let h_prev = Double(_idx(h_arr, t))
            let c_prev = Double(_idx(c_arr, t))
            let i_t = Double(sigmoid(Double((((w.w_i * x) + (w.u_i * h_prev)) + w.b_i))))
            let f_t = Double(sigmoid(Double((((w.w_f * x) + (w.u_f * h_prev)) + w.b_f))))
            let o_t = Double(sigmoid(Double((((w.w_o * x) + (w.u_o * h_prev)) + w.b_o))))
            let g_t = Double(tanh_approx(Double((((w.w_c * x) + (w.u_c * h_prev)) + w.b_c))))
            let c_t = ((f_t * c_prev) + (i_t * g_t))
            let h_t = (o_t * Double(tanh_approx(Double(c_t))))
            i_arr = (_append(i_arr, i_t) as! [Double])
            f_arr = (_append(f_arr, f_t) as! [Double])
            o_arr = (_append(o_arr, o_t) as! [Double])
            g_arr = (_append(g_arr, g_t) as! [Double])
            c_arr = (_append(c_arr, c_t) as! [Double])
            h_arr = (_append(h_arr, h_t) as! [Double])
            t = _int((t &+ 1))
        }
        return LSTMState(i: (i_arr as! [Double]), f: (f_arr as! [Double]), o: (o_arr as! [Double]), g: (g_arr as! [Double]), c: (c_arr as! [Double]), h: (h_arr as! [Double]))
    }
    func backward(_ seq: [Double], _ target: Double, _ w: inout LSTMWeights, _ s: LSTMState, _ lr: Double) -> LSTMWeights {
        var dw_i: Double = 0.0
        var du_i: Double = 0.0
        var db_i: Double = 0.0
        var dw_f: Double = 0.0
        var du_f: Double = 0.0
        var db_f: Double = 0.0
        var dw_o: Double = 0.0
        var du_o: Double = 0.0
        var db_o: Double = 0.0
        var dw_c: Double = 0.0
        var du_c: Double = 0.0
        var db_c: Double = 0.0
        var dw_y: Double = 0.0
        var db_y: Double = 0.0
        let T = _int(((seq).count))
        let h_last = Double(_idx(s.h, T))
        let y = ((w.w_y * h_last) + w.b_y)
        let dy = (y - target)
        dw_y = Double((dy * h_last))
        db_y = Double(dy)
        var dh_next: Double = (dy * w.w_y)
        var dc_next: Double = 0.0
        var t: Int = (T &- 1)
        while (t >= 0) {
            let i_t = Double(_idx(s.i, t))
            let f_t = Double(_idx(s.f, t))
            let o_t = Double(_idx(s.o, t))
            let g_t = Double(_idx(s.g, t))
            let c_t = Double(_idx(s.c, (t &+ 1)))
            let c_prev = Double(_idx(s.c, t))
            let h_prev = Double(_idx(s.h, t))
            let tanh_c = Double(tanh_approx(Double(c_t)))
            let do_t = (dh_next * tanh_c)
            let da_o = ((do_t * o_t) * Double((1.0 - o_t)))
            let dc = (((dh_next * o_t) * Double((1.0 - (tanh_c * tanh_c)))) + dc_next)
            let di_t = (dc * g_t)
            let da_i = ((di_t * i_t) * Double((1.0 - i_t)))
            let dg_t = (dc * i_t)
            let da_g = (dg_t * Double((1.0 - (g_t * g_t))))
            let df_t = (dc * c_prev)
            let da_f = ((df_t * f_t) * Double((1.0 - f_t)))
            dw_i = Double((dw_i + (da_i * Double(_idx(seq, t)))))
            du_i = Double((du_i + (da_i * h_prev)))
            db_i = Double((db_i + da_i))
            dw_f = Double((dw_f + (da_f * Double(_idx(seq, t)))))
            du_f = Double((du_f + (da_f * h_prev)))
            db_f = Double((db_f + da_f))
            dw_o = Double((dw_o + (da_o * Double(_idx(seq, t)))))
            du_o = Double((du_o + (da_o * h_prev)))
            db_o = Double((db_o + da_o))
            dw_c = Double((dw_c + (da_g * Double(_idx(seq, t)))))
            du_c = Double((du_c + (da_g * h_prev)))
            db_c = Double((db_c + da_g))
            dh_next = Double(((((da_i * w.u_i) + (da_f * w.u_f)) + (da_o * w.u_o)) + (da_g * w.u_c)))
            dc_next = Double((dc * f_t))
            t = _int((t &- 1))
        }
        w.w_y = Double((w.w_y - (lr * dw_y)))
        w.b_y = Double((w.b_y - (lr * db_y)))
        w.w_i = Double((w.w_i - (lr * dw_i)))
        w.u_i = Double((w.u_i - (lr * du_i)))
        w.b_i = Double((w.b_i - (lr * db_i)))
        w.w_f = Double((w.w_f - (lr * dw_f)))
        w.u_f = Double((w.u_f - (lr * du_f)))
        w.b_f = Double((w.b_f - (lr * db_f)))
        w.w_o = Double((w.w_o - (lr * dw_o)))
        w.u_o = Double((w.u_o - (lr * du_o)))
        w.b_o = Double((w.b_o - (lr * db_o)))
        w.w_c = Double((w.w_c - (lr * dw_c)))
        w.u_c = Double((w.u_c - (lr * du_c)))
        w.b_c = Double((w.b_c - (lr * db_c)))
        return w
    }
    func make_samples(_ data: [Double], _ look_back: Int) -> Samples {
        var X: [[Double]] = ([] as! [[Double]])
        var Y: [Double] = ([] as! [Double])
        var i: Int = 0
        while ((i &+ look_back) < _int(((data).count))) {
            let seq = _slice(Array(data), i, (i &+ look_back))
            X = ((_append(X, seq) as! [Any?]) as! [[Double]])
            Y = (_append(Y, Double(_idx(data, (i &+ look_back)))) as! [Double])
            i = _int((i &+ 1))
        }
        return Samples(x: (X as! [[Double]]), y: (Y as! [Double]))
    }
    func init_weights() -> LSTMWeights {
        return LSTMWeights(w_i: 0.1, u_i: 0.2, b_i: 0.0, w_f: 0.1, u_f: 0.2, b_f: 0.0, w_o: 0.1, u_o: 0.2, b_o: 0.0, w_c: 0.1, u_c: 0.2, b_c: 0.0, w_y: 0.1, b_y: 0.0)
    }
    func train(_ data: [Double], _ look_back: Int, _ epochs: Int, _ lr: Double) -> LSTMWeights {
        let samples = make_samples((data as! [Double]), look_back)
        var w = init_weights()
        var ep: Int = 0
        while (ep < epochs) {
            var j: Int = 0
            while (j < _int(((samples.x).count))) {
                let seq: [Double] = (_idx(samples.x, j) as! [Double])
                let target = Double(_idx(samples.y, j))
                let state = forward((seq as! [Double]), (w as! LSTMWeights))
                w = (backward((seq as! [Double]), Double(target), &w, (state as! LSTMState), Double(lr)) as! LSTMWeights)
                j = _int((j &+ 1))
            }
            ep = _int((ep &+ 1))
        }
        return w
    }
    func predict(_ seq: [Double], _ w: LSTMWeights) -> Double {
        let state = forward((seq as! [Double]), (w as! LSTMWeights))
        let h_last = Double(_idx(state.h, (_int(((state.h).count)) &- 1)))
        return ((w.w_y * h_last) + w.b_y)
    }
    let data: [Double] = ({
        var _arr: [Double] = []
        _arr = _append(_arr, 0.1)
        _arr = _append(_arr, 0.2)
        _arr = _append(_arr, 0.3)
        _arr = _append(_arr, 0.4)
        _arr = _append(_arr, 0.5)
        _arr = _append(_arr, 0.6)
        _arr = _append(_arr, 0.7)
        _arr = _append(_arr, 0.8)
        return _arr
    }() as! [Double])
    let look_back = 3
    let epochs = 200
    let lr = 0.1
    var w = train((data as! [Double]), look_back, epochs, Double(lr))
    let test_seq: [Double] = ({
        var _arr: [Double] = []
        _arr = _append(_arr, 0.6)
        _arr = _append(_arr, 0.7)
        _arr = _append(_arr, 0.8)
        return _arr
    }() as! [Double])
    let pred = Double(predict((test_seq as! [Double]), (w as! LSTMWeights)))
    print(_p(("Predicted value: " + _p(pred))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
