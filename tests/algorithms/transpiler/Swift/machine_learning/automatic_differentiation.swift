// Generated by Mochi transpiler v0.10.62 on 2025-08-09 10:33:14 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
struct Dual: Codable {
    var value: Double
    var deriv: Double
    init() {
        self.value = 0
        self.deriv = 0
    }
    init(value: Double, deriv: Double) {
        self.value = value
        self.deriv = deriv
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func dual(_ v: Double, _ d: Double) -> Dual {
        return Dual(value: Double(v), deriv: Double(d))
    }
    func pow_float(_ base: Double, _ exp: Int) -> Double {
        var res = 1.0
        var i = 0
        while (i < exp) {
            res = Double((res * base))
            i = _int((i &+ 1))
        }
        return res
    }
    func add(_ a: Dual, _ b: Dual) -> Dual {
        return Dual(value: Double((a.value + b.value)), deriv: Double((a.deriv + b.deriv)))
    }
    func sub(_ a: Dual, _ b: Dual) -> Dual {
        return Dual(value: Double((a.value - b.value)), deriv: Double((a.deriv - b.deriv)))
    }
    func mul(_ a: Dual, _ b: Dual) -> Dual {
        return Dual(value: Double((a.value * b.value)), deriv: Double(((a.deriv * b.value) + (b.deriv * a.value))))
    }
    func div(_ a: Dual, _ b: Dual) -> Dual {
        return Dual(value: Double((a.value / b.value)), deriv: Double((Double(((a.deriv * b.value) - (b.deriv * a.value))) / Double((b.value * b.value)))))
    }
    func power(_ a: Dual, _ p: Int) -> Dual {
        return Dual(value: Double(pow_float(Double(a.value), p)), deriv: Double(((Double((1.0 * Double(p))) * Double(pow_float(Double(a.value), (p &- 1)))) * a.deriv)))
    }
    func main() {
        let a = dual(2.0, 1.0)
        let b = dual(1.0, 0.0)
        let c = add((a as! Dual), (b as! Dual))
        let d = mul((a as! Dual), (b as! Dual))
        let e = div((c as! Dual), (d as! Dual))
        print(_p(_p(e.deriv)))
        let x = dual(2.0, 1.0)
        let y = power((x as! Dual), 3)
        print(_p(_p(y.deriv)))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
