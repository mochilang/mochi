// Generated by Mochi transpiler v0.10.62 on 2025-08-09 16:37:58 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func int_to_float(_ x: Int) -> Double {
        return (Double(x) * 1.0)
    }
    func abs_float(_ x: Double) -> Double {
        if (x < 0.0) {
            return (0.0 - x)
        }
        return x
    }
    func exp_approx(_ x: Double) -> Double {
        var term = 1.0
        var sum = 1.0
        var i = 1
        while (i < 10) {
            term = Double(((term * x) / Double(int_to_float(i))))
            sum = Double((sum + term))
            i = _int((i &+ 1))
        }
        return sum
    }
    func floor_int(_ x: Double) -> Int {
        var i = 0
        while (Double(int_to_float((i &+ 1))) <= x) {
            i = _int((i &+ 1))
        }
        return i
    }
    func dot(_ a: [Double], _ b: [Double]) -> Double {
        var s = 0.0
        var i = 0
        while (i < _int(((a).count))) {
            s = Double((s + (Double(_idx(a, i)) * Double(_idx(b, i)))))
            i = _int((i &+ 1))
        }
        return s
    }
    func transpose(_ m: [[Double]]) -> [[Double]] {
        let rows = _int(((m).count))
        let cols = _int((((_idx(m, 0) as! [Double])).count))
        var res: [[Double]] = ([] as! [[Double]])
        var j = 0
        while (j < cols) {
            var row: [Double] = ([] as! [Double])
            var i = 0
            while (i < rows) {
                row = (_append(row, Double(_idx(_idx(m, i)!, j))) as! [Double])
                i = _int((i &+ 1))
            }
            res = (_append(res, row) as! [[Double]])
            j = _int((j &+ 1))
        }
        return res
    }
    func matmul(_ a: [[Double]], _ b: [[Double]]) -> [[Double]] {
        let n = _int(((a).count))
        let m = _int((((_idx(b, 0) as! [Double])).count))
        let p = _int(((b).count))
        var res: [[Double]] = ([] as! [[Double]])
        var i = 0
        while (i < n) {
            var row: [Double] = ([] as! [Double])
            var j = 0
            while (j < m) {
                var s = 0.0
                var k = 0
                while (k < p) {
                    s = Double((s + (Double(_idx(_idx(a, i)!, k)) * Double(_idx(_idx(b, k)!, j)))))
                    k = _int((k &+ 1))
                }
                row = (_append(row, s) as! [Double])
                j = _int((j &+ 1))
            }
            res = (_append(res, row) as! [[Double]])
            i = _int((i &+ 1))
        }
        return res
    }
    func matvec(_ a: [[Double]], _ b: [Double]) -> [Double] {
        var res: [Double] = ([] as! [Double])
        var i = 0
        while (i < _int(((a).count))) {
            res = (_append(res, Double(dot((_idx(a, i) as! [Double]), (b as! [Double])))) as! [Double])
            i = _int((i &+ 1))
        }
        return res
    }
    func identity(_ n: Int) -> [[Double]] {
        var res: [[Double]] = ([] as! [[Double]])
        var i = 0
        while (i < n) {
            var row: [Double] = ([] as! [Double])
            var j = 0
            while (j < n) {
                row = (_append(row, Double(((i == j) ? 1.0 : 0.0))) as! [Double])
                j = _int((j &+ 1))
            }
            res = (_append(res, row) as! [[Double]])
            i = _int((i &+ 1))
        }
        return res
    }
    func invert(_ mat: [[Double]]) -> [[Double]] {
        let n = _int(((mat).count))
        var a = mat
        var inv = (identity(n) as! [[Double]])
        var i = 0
        while (i < n) {
            let pivot = Double(_idx(_idx(a, i)!, i))
            var j = 0
            while (j < n) {
                var _tmp5 = (_idx(a, i) as! [Double])
                _tmp5 = _set(_tmp5, j, Double((Double(_idx(_idx(a, i)!, j)) / pivot)))
                a = _set(a, i, (_tmp5 as! [Double]))
                var _tmp6 = (_idx(inv, i) as! [Double])
                _tmp6 = _set(_tmp6, j, Double((Double(_idx(_idx(inv, i)!, j)) / pivot)))
                inv = _set(inv, i, (_tmp6 as! [Double]))
                j = _int((j &+ 1))
            }
            var k = 0
            while (k < n) {
                if (k != i) {
                    let factor = Double(_idx(_idx(a, k)!, i))
                    j = 0
                    while (j < n) {
                        var _tmp7 = (_idx(a, k) as! [Double])
                        _tmp7 = _set(_tmp7, j, Double((Double(_idx(_idx(a, k)!, j)) - (factor * Double(_idx(_idx(a, i)!, j))))))
                        a = _set(a, k, (_tmp7 as! [Double]))
                        var _tmp8 = (_idx(inv, k) as! [Double])
                        _tmp8 = _set(_tmp8, j, Double((Double(_idx(_idx(inv, k)!, j)) - (factor * Double(_idx(_idx(inv, i)!, j))))))
                        inv = _set(inv, k, (_tmp8 as! [Double]))
                        j = _int((j &+ 1))
                    }
                }
                k = _int((k &+ 1))
            }
            i = _int((i &+ 1))
        }
        return inv
    }
    func normal_equation(_ X: [[Double]], _ y: [Double]) -> [Double] {
        let Xt: [[Double]] = (transpose((X as! [[Double]])) as! [[Double]])
        let XtX: [[Double]] = (matmul((Xt as! [[Double]]), (X as! [[Double]])) as! [[Double]])
        let XtX_inv: [[Double]] = (invert((XtX as! [[Double]])) as! [[Double]])
        let Xty: [Double] = (matvec((Xt as! [[Double]]), (y as! [Double])) as! [Double])
        return (matvec((XtX_inv as! [[Double]]), (Xty as! [Double])) as! [Double])
    }
    func linear_regression_prediction(_ train_dt: [Double], _ train_usr: [Double], _ train_mtch: [Double], _ test_dt: [Double], _ test_mtch: [Double]) -> Double {
        var X: [[Double]] = ([] as! [[Double]])
        var i = 0
        while (i < _int(((train_dt).count))) {
            X = (_append(X, ({
                var _arr: [Double] = []
                _arr = _append(_arr, 1.0)
                _arr = _append(_arr, Double(_idx(train_dt, i)))
                _arr = _append(_arr, Double(_idx(train_mtch, i)))
                return _arr
            }() as! [Double])) as! [[Double]])
            i = _int((i &+ 1))
        }
        let beta: [Double] = (normal_equation((X as! [[Double]]), (train_usr as! [Double])) as! [Double])
        return Double(abs_float(Double(((Double(_idx(beta, 0)) + (Double(_idx(test_dt, 0)) * Double(_idx(beta, 1)))) + (Double(_idx(test_mtch, 0)) * Double(_idx(beta, 2)))))))
    }
    func sarimax_predictor(_ train_user: [Double], _ train_match: [Double], _ test_match: [Double]) -> Double {
        let n = _int(((train_user).count))
        var X: [[Double]] = ([] as! [[Double]])
        var y: [Double] = ([] as! [Double])
        var i = 1
        while (i < n) {
            X = (_append(X, ({
                var _arr: [Double] = []
                _arr = _append(_arr, 1.0)
                _arr = _append(_arr, Double(_idx(train_user, (i &- 1))))
                _arr = _append(_arr, Double(_idx(train_match, i)))
                return _arr
            }() as! [Double])) as! [[Double]])
            y = (_append(y, Double(_idx(train_user, i))) as! [Double])
            i = _int((i &+ 1))
        }
        let beta: [Double] = (normal_equation((X as! [[Double]]), (y as! [Double])) as! [Double])
        return ((Double(_idx(beta, 0)) + (Double(_idx(beta, 1)) * Double(_idx(train_user, (n &- 1))))) + (Double(_idx(beta, 2)) * Double(_idx(test_match, 0))))
    }
    func rbf_kernel(_ a: [Double], _ b: [Double], _ gamma: Double) -> Double {
        var sum = 0.0
        var i = 0
        while (i < _int(((a).count))) {
            let diff = (Double(_idx(a, i)) - Double(_idx(b, i)))
            sum = Double((sum + (diff * diff)))
            i = _int((i &+ 1))
        }
        return Double(exp_approx(Double((-gamma * sum))))
    }
    func support_vector_regressor(_ x_train: [[Double]], _ x_test: [[Double]], _ train_user: [Double]) -> Double {
        let gamma = 0.1
        var weights: [Double] = ([] as! [Double])
        var i = 0
        while (i < _int(((x_train).count))) {
            weights = (_append(weights, Double(rbf_kernel((_idx(x_train, i) as! [Double]), (_idx(x_test, 0) as! [Double]), Double(gamma)))) as! [Double])
            i = _int((i &+ 1))
        }
        var num = 0.0
        var den = 0.0
        i = 0
        while (i < _int(((train_user).count))) {
            num = Double((num + (Double(_idx(weights, i)) * Double(_idx(train_user, i)))))
            den = Double((den + Double(_idx(weights, i))))
            i = _int((i &+ 1))
        }
        return (num / den)
    }
    func set_at_float(_ xs: [Double], _ idx: Int, _ value: Double) -> [Double] {
        var i = 0
        var res: [Double] = ([] as! [Double])
        while (i < _int(((xs).count))) {
            if (i == idx) {
                res = (_append(res, value) as! [Double])
            } else {
                res = (_append(res, Double(_idx(xs, i))) as! [Double])
            }
            i = _int((i &+ 1))
        }
        return res
    }
    func sort_float(_ xs: [Double]) -> [Double] {
        var res = xs
        var i = 1
        while (i < _int(((res).count))) {
            let key = Double(_idx(res, i))
            var j = (i &- 1)
            while ((j >= 0) && (Double(_idx(res, j)) > key)) {
                res = (set_at_float((res as! [Double]), (j &+ 1), Double(_idx(res, j))) as! [Double])
                j = _int((j &- 1))
            }
            res = (set_at_float((res as! [Double]), (j &+ 1), Double(key)) as! [Double])
            i = _int((i &+ 1))
        }
        return res
    }
    func percentile(_ data: [Double], _ q: Double) -> Double {
        var sorted = (sort_float((data as! [Double])) as! [Double])
        let n = _int(((sorted).count))
        let pos = (Double((q / 100.0)) * Double(int_to_float((n &- 1))))
        let idx = _int(floor_int(Double(pos)))
        let frac = (pos - Double(int_to_float(idx)))
        if ((idx &+ 1) < n) {
            return ((Double(_idx(sorted, idx)) * Double((1.0 - frac))) + (Double(_idx(sorted, (idx &+ 1))) * frac))
        }
        return Double(_idx(sorted, idx))
    }
    func interquartile_range_checker(_ train_user: [Double]) -> Double {
        let q1 = Double(percentile((train_user as! [Double]), 25.0))
        let q3 = Double(percentile((train_user as! [Double]), 75.0))
        let iqr = (q3 - q1)
        return (q1 - (iqr * 0.1))
    }
    func data_safety_checker(_ list_vote: [Double], _ actual_result: Double) -> Bool {
        var safe = 0
        var not_safe = 0
        var i = 0
        while (i < _int(((list_vote).count))) {
            let v = Double(_idx(list_vote, i))
            if (v > actual_result) {
                safe = _int((not_safe &+ 1))
            } else if (Double(abs_float(Double((Double(abs_float(Double(v))) - Double(abs_float(Double(actual_result))))))) <= 0.1) {
                safe = _int((safe &+ 1))
            } else {
                not_safe = _int((not_safe &+ 1))
            }
            
            i = _int((i &+ 1))
        }
        return (safe > not_safe)
    }
    func main() -> Void {
        let vote: [Double] = ({
            var _arr: [Double] = []
            _arr = _append(_arr, Double(linear_regression_prediction(({
                var _arr: [Double] = []
                _arr = _append(_arr, 2.0)
                _arr = _append(_arr, 3.0)
                _arr = _append(_arr, 4.0)
                _arr = _append(_arr, 5.0)
                return _arr
            }() as! [Double]), ({
                var _arr: [Double] = []
                _arr = _append(_arr, 5.0)
                _arr = _append(_arr, 3.0)
                _arr = _append(_arr, 4.0)
                _arr = _append(_arr, 6.0)
                return _arr
            }() as! [Double]), ({
                var _arr: [Double] = []
                _arr = _append(_arr, 3.0)
                _arr = _append(_arr, 1.0)
                _arr = _append(_arr, 2.0)
                _arr = _append(_arr, 4.0)
                return _arr
            }() as! [Double]), ({
                var _arr: [Double] = []
                _arr = _append(_arr, 2.0)
                return _arr
            }() as! [Double]), ({
                var _arr: [Double] = []
                _arr = _append(_arr, 2.0)
                return _arr
            }() as! [Double]))))
            _arr = _append(_arr, Double(sarimax_predictor(({
                var _arr: [Double] = []
                _arr = _append(_arr, 4.0)
                _arr = _append(_arr, 2.0)
                _arr = _append(_arr, 6.0)
                _arr = _append(_arr, 8.0)
                return _arr
            }() as! [Double]), ({
                var _arr: [Double] = []
                _arr = _append(_arr, 3.0)
                _arr = _append(_arr, 1.0)
                _arr = _append(_arr, 2.0)
                _arr = _append(_arr, 4.0)
                return _arr
            }() as! [Double]), ({
                var _arr: [Double] = []
                _arr = _append(_arr, 2.0)
                return _arr
            }() as! [Double]))))
            _arr = _append(_arr, Double(support_vector_regressor(({
                var _arr: [[Double]] = []
                _arr = _append(_arr, ({
                    var _arr: [Double] = []
                    _arr = _append(_arr, 5.0)
                    _arr = _append(_arr, 2.0)
                    return _arr
                }() as! [Double]))
                _arr = _append(_arr, ({
                    var _arr: [Double] = []
                    _arr = _append(_arr, 1.0)
                    _arr = _append(_arr, 5.0)
                    return _arr
                }() as! [Double]))
                _arr = _append(_arr, ({
                    var _arr: [Double] = []
                    _arr = _append(_arr, 6.0)
                    _arr = _append(_arr, 2.0)
                    return _arr
                }() as! [Double]))
                return _arr
            }() as! [[Double]]), ({
                var _arr: [[Double]] = []
                _arr = _append(_arr, ({
                    var _arr: [Double] = []
                    _arr = _append(_arr, 3.0)
                    _arr = _append(_arr, 2.0)
                    return _arr
                }() as! [Double]))
                return _arr
            }() as! [[Double]]), ({
                var _arr: [Double] = []
                _arr = _append(_arr, 2.0)
                _arr = _append(_arr, 1.0)
                _arr = _append(_arr, 4.0)
                return _arr
            }() as! [Double]))))
            return _arr
        }() as! [Double])
        print(_p(Double(_idx(vote, 0))))
        print(_p(Double(_idx(vote, 1))))
        print(_p(Double(_idx(vote, 2))))
        print(_p(data_safety_checker((vote as! [Double]), 5.0)))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
