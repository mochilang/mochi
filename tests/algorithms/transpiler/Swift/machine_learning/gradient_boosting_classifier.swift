// Generated by Mochi transpiler v0.10.62 on 2025-08-09 16:38:03 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
struct Stump: Codable {
    var feature: Int
    var threshold: Double
    var left: Double
    var right: Double
    init() {
        self.feature = 0
        self.threshold = 0
        self.left = 0
        self.right = 0
    }
    init(feature: Int, threshold: Double, left: Double, right: Double) {
        self.feature = feature
        self.threshold = threshold
        self.left = left
        self.right = right
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func exp_approx(_ x: Double) -> Double {
        var term = 1.0
        var sum = 1.0
        var i = 1
        while (i < 10) {
            term = Double(((term * x) / Double(i)))
            sum = Double((sum + term))
            i = _int((i &+ 1))
        }
        return sum
    }
    func signf(_ x: Double) -> Double {
        if (x >= 0.0) {
            return 1.0
        }
        return -1.0
    }
    func gradient(_ target: [Double], _ preds: [Double]) -> [Double] {
        let n = _int(((target).count))
        var residuals: [Double] = ([] as! [Double])
        var i = 0
        while (i < n) {
            let t = Double(_idx(target, i))
            let y = Double(_idx(preds, i))
            let exp_val = Double(exp_approx(Double((t * y))))
            let res = (-t / Double((1.0 + exp_val)))
            residuals = (_append(residuals, res) as! [Double])
            i = _int((i &+ 1))
        }
        return residuals
    }
    func predict_raw(_ models: [Stump], _ features: [[Double]], _ learning_rate: Double) -> [Double] {
        let n = _int(((features).count))
        var preds: [Double] = ([] as! [Double])
        var i = 0
        while (i < n) {
            preds = (_append(preds, 0.0) as! [Double])
            i = _int((i &+ 1))
        }
        var m = 0
        while (m < _int(((models).count))) {
            let stump = (_idx(models, m) as! Stump)
            i = 0
            while (i < n) {
                let value = Double(_idx(_idx(features, i)!, stump.feature))
                if (value <= stump.threshold) {
                    preds = _set(preds, i, Double((Double(_idx(preds, i)) + (learning_rate * stump.left))))
                } else {
                    preds = _set(preds, i, Double((Double(_idx(preds, i)) + (learning_rate * stump.right))))
                }
                i = _int((i &+ 1))
            }
            m = _int((m &+ 1))
        }
        return preds
    }
    func predict(_ models: [Stump], _ features: [[Double]], _ learning_rate: Double) -> [Double] {
        let raw: [Double] = (predict_raw((models as! [Stump]), (features as! [[Double]]), Double(learning_rate)) as! [Double])
        var result: [Double] = ([] as! [Double])
        var i = 0
        while (i < _int(((raw).count))) {
            result = (_append(result, Double(signf(Double(_idx(raw, i))))) as! [Double])
            i = _int((i &+ 1))
        }
        return result
    }
    func train_stump(_ features: [[Double]], _ residuals: [Double]) -> Stump {
        let n_samples = _int(((features).count))
        let n_features = _int((((_idx(features, 0) as! [Double])).count))
        var best_feature = 0
        var best_threshold = 0.0
        var best_error: Double = 1000000000.0
        var best_left = 0.0
        var best_right = 0.0
        var j = 0
        while (j < n_features) {
            var t_index = 0
            while (t_index < n_samples) {
                let t = Double(_idx(_idx(features, t_index)!, j))
                var sum_left = 0.0
                var count_left = 0
                var sum_right = 0.0
                var count_right = 0
                var i = 0
                while (i < n_samples) {
                    if (Double(_idx(_idx(features, i)!, j)) <= t) {
                        sum_left = Double((sum_left + Double(_idx(residuals, i))))
                        count_left = _int((count_left &+ 1))
                    } else {
                        sum_right = Double((sum_right + Double(_idx(residuals, i))))
                        count_right = _int((count_right &+ 1))
                    }
                    i = _int((i &+ 1))
                }
                var left_val = 0.0
                if (count_left != 0) {
                    left_val = Double((sum_left / Double(count_left)))
                }
                var right_val = 0.0
                if (count_right != 0) {
                    right_val = Double((sum_right / Double(count_right)))
                }
                var error = 0.0
                i = 0
                while (i < n_samples) {
                    let pred = Double(((Double(_idx(_idx(features, i)!, j)) <= t) ? left_val : right_val))
                    let diff = (Double(_idx(residuals, i)) - pred)
                    error = Double((error + (diff * diff)))
                    i = _int((i &+ 1))
                }
                if (error < best_error) {
                    best_error = Double(error)
                    best_feature = Int(j)
                    best_threshold = Double(t)
                    best_left = Double(left_val)
                    best_right = Double(right_val)
                }
                t_index = _int((t_index &+ 1))
            }
            j = _int((j &+ 1))
        }
        return Stump(feature: Int(best_feature), threshold: Double(best_threshold), left: Double(best_left), right: Double(best_right))
    }
    func fit(_ n_estimators: Int, _ learning_rate: Double, _ features: [[Double]], _ target: [Double]) -> [Stump] {
        var models: [Stump] = ([] as! [Stump])
        var m = 0
        while (m < n_estimators) {
            let preds: [Double] = (predict_raw((models as! [Stump]), (features as! [[Double]]), Double(learning_rate)) as! [Double])
            let grad: [Double] = (gradient((target as! [Double]), (preds as! [Double])) as! [Double])
            var residuals: [Double] = ([] as! [Double])
            var i = 0
            while (i < _int(((grad).count))) {
                residuals = (_append(residuals, -Double(_idx(grad, i))) as! [Double])
                i = _int((i &+ 1))
            }
            let stump = train_stump((features as! [[Double]]), (residuals as! [Double]))
            models = (_append(models, stump) as! [Stump])
            m = _int((m &+ 1))
        }
        return models
    }
    func accuracy(_ preds: [Double], _ target: [Double]) -> Double {
        let n = _int(((target).count))
        var correct = 0
        var i = 0
        while (i < n) {
            if (Double(_idx(preds, i)) == Double(_idx(target, i))) {
                correct = _int((correct &+ 1))
            }
            i = _int((i &+ 1))
        }
        return (Double(correct) / Double(n))
    }
    let features: [[Double]] = ({
        var _arr: [[Double]] = []
        _arr = _append(_arr, ({
            var _arr: [Double] = []
            _arr = _append(_arr, 1.0)
            return _arr
        }() as! [Double]))
        _arr = _append(_arr, ({
            var _arr: [Double] = []
            _arr = _append(_arr, 2.0)
            return _arr
        }() as! [Double]))
        _arr = _append(_arr, ({
            var _arr: [Double] = []
            _arr = _append(_arr, 3.0)
            return _arr
        }() as! [Double]))
        _arr = _append(_arr, ({
            var _arr: [Double] = []
            _arr = _append(_arr, 4.0)
            return _arr
        }() as! [Double]))
        return _arr
    }() as! [[Double]])
    let target: [Double] = ({
        var _arr: [Double] = []
        _arr = _append(_arr, -1.0)
        _arr = _append(_arr, -1.0)
        _arr = _append(_arr, 1.0)
        _arr = _append(_arr, 1.0)
        return _arr
    }() as! [Double])
    var models: [Stump] = (fit(5, 0.5, (features as! [[Double]]), (target as! [Double])) as! [Stump])
    let predictions: [Double] = (predict((models as! [Stump]), (features as! [[Double]]), 0.5) as! [Double])
    let acc = Double(accuracy((predictions as! [Double]), (target as! [Double])))
    print(_p(("Accuracy: " + _p(acc))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
