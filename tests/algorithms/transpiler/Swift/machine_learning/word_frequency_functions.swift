// Generated by Mochi transpiler v0.10.67 on 2025-08-16 21:28:28 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first!
}
func _idx<K: Hashable, V>(_ m: [K: V], _ k: K) -> V? {
    return m[k]
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _split(_ s: String, _ sep: String) -> [String] {
    let d = sep.isEmpty ? " " : sep
    return s.components(separatedBy: d)
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let LOWER = "abcdefghijklmnopqrstuvwxyz"
    let UPPER = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    let PUNCT = "!\"#$%&'()*+,-./:;<=>?@[\\]^_{|}~"
    func to_lowercase(_ s: String) -> String {
        var res = ""
        var i = 0
        while (i < _int(((s).count))) {
            let c = (String(Array(s)[i]) as! String)
            var j = 0
            var found = false
            while (j < _int(((UPPER).count))) {
                if (c == (String(Array(UPPER)[j]) as! String)) {
                    res = ((_p(res) + _p((String(Array(LOWER)[j]) as! String))) as! String)
                    found = true
                    break
                }
                j = _int((j &+ 1))
            }
            if (!found) {
                res = ((_p(res) + _p(c)) as! String)
            }
            i = _int((i &+ 1))
        }
        return res
    }
    func is_punct(_ c: String) -> Bool {
        var i = 0
        while (i < _int(((PUNCT).count))) {
            if (c == (String(Array(PUNCT)[i]) as! String)) {
                return true
            }
            i = _int((i &+ 1))
        }
        return false
    }
    func clean_text(_ text: String, _ keep_newlines: Bool) -> String {
        let lower = String(describing: to_lowercase((text as! String)))
        var res = ""
        var i = 0
        while (i < _int(((lower).count))) {
            let ch = (String(Array(lower)[i]) as! String)
            if is_punct((ch as! String)) {
            } else if (ch == "\n") {
                if keep_newlines {
                    res = ((_p(res) + _p("\n")) as! String)
                }
            } else {
                res = ((_p(res) + _p(ch)) as! String)
            }
            
            i = _int((i &+ 1))
        }
        return res
    }
    func split(_ s: String, _ sep: String) -> [String] {
        var res: [String] = ([] as! [String])
        var current = ""
        var i = 0
        while (i < _int(((s).count))) {
            let ch = (String(Array(s)[i]) as! String)
            if (ch == sep) {
                res = (_append(res, current) as! [String])
                current = ""
            } else {
                current = ((_p(current) + _p(ch)) as! String)
            }
            i = _int((i &+ 1))
        }
        res = (_append(res, current) as! [String])
        return res
    }
    func contains(_ s: String, _ sub: String) -> Bool {
        let n = _int(((s).count))
        let m = _int(((sub).count))
        if (m == 0) {
            return true
        }
        var i = 0
        while (i <= (n &- m)) {
            var j = 0
            var is_match = true
            while (j < m) {
                if ((String(Array(s)[(i &+ j)]) as! String) != (String(Array(sub)[j]) as! String)) {
                    is_match = false
                    break
                }
                j = _int((j &+ 1))
            }
            if is_match {
                return true
            }
            i = _int((i &+ 1))
        }
        return false
    }
    func floor(_ x: Double) -> Double {
        var i = Int(x)
        if (Double(i) > x) {
            i = _int((i &- 1))
        }
        return Double(i)
    }
    func round3(_ x: Double) -> Double {
        return (Double(floor(Double(((x * 1000.0) + 0.5)))) / 1000.0)
    }
    func ln(_ x: Double) -> Double {
        let t = (Double((x - 1.0)) / Double((x + 1.0)))
        var term = t
        var sum = 0.0
        var k = 1
        while (k <= 99) {
            sum = Double((sum + (term / Double(k))))
            term = Double(((term * t) * t))
            k = _int((k &+ 2))
        }
        return (2.0 * sum)
    }
    func log10(_ x: Double) -> Double {
        return (Double(ln(Double(x))) / Double(ln(10.0)))
    }
    func term_frequency(_ term: String, _ document: String) -> Int {
        let clean = String(describing: clean_text((document as! String), false))
        let tokens: [String] = (_split(clean, " ") as! [String])
        let t = String(describing: to_lowercase((term as! String)))
        var count = 0
        var i = 0
        while (i < _int(((tokens).count))) {
            if (((_idx(tokens, i) as! String) != "") && ((_idx(tokens, i) as! String) == t)) {
                count = _int((count &+ 1))
            }
            i = _int((i &+ 1))
        }
        return count
    }
    func document_frequency(_ term: String, _ corpus: String) -> [Int] {
        let clean = String(describing: clean_text((corpus as! String), true))
        let docs: [String] = (_split(clean, "\n") as! [String])
        let t = String(describing: to_lowercase((term as! String)))
        var matches = 0
        var i = 0
        while (i < _int(((docs).count))) {
            if contains((_idx(docs, i) as! String), (t as! String)) {
                matches = _int((matches &+ 1))
            }
            i = _int((i &+ 1))
        }
        return ({
            var _arr: [Int] = []
            _arr = _append(_arr, matches)
            _arr = _append(_arr, _int(((docs).count)))
            return _arr
        }() as! [Int])
    }
    func inverse_document_frequency(_ df: Int, _ n: Int, _ smoothing: Bool) -> Double {
        if smoothing {
            if (n == 0) {
                _ = fatalError("log10(0) is undefined.")
            }
            let ratio: Double = (Double(n) / Double((1.0 + Double(df))))
            let l: Double = Double(log10(Double(ratio)))
            let result = Double(round3(Double((1.0 + l))))
            print(_p(result))
            return result
        }
        if (df == 0) {
            _ = fatalError("df must be > 0")
        }
        if (n == 0) {
            _ = fatalError("log10(0) is undefined.")
        }
        let ratio: Double = (Double(n) / Double(df))
        let l: Double = Double(log10(Double(ratio)))
        let result = Double(round3(Double(l)))
        print(_p(result))
        return result
    }
    func tf_idf(_ tf: Int, _ idf: Double) -> Double {
        let prod: Double = (Double(tf) * idf)
        let result = Double(round3(Double(prod)))
        print(_p(result))
        return result
    }
    print(_p(_int(term_frequency("to", "To be, or not to be"))))
    let corpus = "This is the first document in the corpus.\nThIs is the second document in the corpus.\nTHIS is the third document in the corpus."
    print(_p("[" + (document_frequency("first", (corpus as! String)) as! [Int]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    let idf_val = Double(inverse_document_frequency(1, 3, false))
    _ = Double(tf_idf(2, Double(idf_val)))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
