// Generated by Mochi transpiler v0.10.62 on 2025-08-09 10:33:32 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let PI: Double = 3.141592653589793
    let TWO_PI: Double = 6.283185307179586
    var seed = 1
    func rand() -> Int {
        seed = _int(((_int(((seed &* 1103515245) &+ 12345)) % 2147483648 + 2147483648) % 2147483648))
        return seed
    }
    func random() -> Double {
        return (Double(rand()) / 2147483648.0)
    }
    func _mod(_ x: Double, _ m: Double) -> Double {
        return (x - (Double(_int((x / m))) * m))
    }
    func cos(_ x: Double) -> Double {
        let y = (Double(_mod(Double((x + PI)), Double(TWO_PI))) - PI)
        let y2 = (y * y)
        let y4 = (y2 * y2)
        let y6 = (y4 * y2)
        return (((1.0 - (y2 / 2.0)) + (y4 / 24.0)) - (y6 / 720.0))
    }
    func sqrtApprox(_ x: Double) -> Double {
        if (x <= 0.0) {
            return 0.0
        }
        var guess = x
        var i = 0
        while (i < 10) {
            guess = Double((Double((guess + (x / guess))) / 2.0))
            i = _int((i &+ 1))
        }
        return guess
    }
    func ln(_ x: Double) -> Double {
        let t = (Double((x - 1.0)) / Double((x + 1.0)))
        var term = t
        var sum = 0.0
        var n = 1
        while (n <= 19) {
            sum = Double((sum + (term / Double(n))))
            term = Double(((term * t) * t))
            n = _int((n &+ 2))
        }
        return (2.0 * sum)
    }
    func gaussian_distribution(_ mean: Double, _ std_dev: Double, _ instance_count: Int) -> [Double] {
        var res: [Double] = ([] as! [Double])
        var i = 0
        while (i < instance_count) {
            let u1 = Double(random())
            let u2 = Double(random())
            let r = Double(sqrtApprox(Double((-2.0 * Double(ln(Double(u1)))))))
            let theta = (TWO_PI * u2)
            let z = (r * Double(cos(Double(theta))))
            res = (_append(res, (mean + (z * std_dev))) as! [Double])
            i = _int((i &+ 1))
        }
        return res
    }
    func y_generator(_ class_count: Int, _ instance_count: [Int]) -> [Int] {
        var res: [Int] = ([] as! [Int])
        var k = 0
        while (k < class_count) {
            var i = 0
            while (i < (_idx(instance_count, k) as? Int ?? 0)) {
                res = (_append(res, k) as! [Int])
                i = _int((i &+ 1))
            }
            k = _int((k &+ 1))
        }
        return res
    }
    func calculate_mean(_ instance_count: Int, _ items: [Double]) -> Double {
        var total = 0.0
        var i = 0
        while (i < instance_count) {
            total = Double((total + Double(_idx(items, i))))
            i = _int((i &+ 1))
        }
        return (total / Double(instance_count))
    }
    func calculate_probabilities(_ instance_count: Int, _ total_count: Int) -> Double {
        return (Double(instance_count) / Double(total_count))
    }
    func calculate_variance(_ items: [[Double]], _ means: [Double], _ total_count: Int) -> Double {
        var squared_diff: [Double] = ([] as! [Double])
        var i = 0
        while (i < _int(((items).count))) {
            var j = 0
            while (j < _int((((_idx(items, i) as! [Double])).count))) {
                let diff = (Double(_idx(_idx(items, i)!, j)) - Double(_idx(means, i)))
                squared_diff = (_append(squared_diff, (diff * diff)) as! [Double])
                j = _int((j &+ 1))
            }
            i = _int((i &+ 1))
        }
        var sum_sq = 0.0
        var k = 0
        while (k < _int(((squared_diff).count))) {
            sum_sq = Double((sum_sq + Double(_idx(squared_diff, k))))
            k = _int((k &+ 1))
        }
        let n_classes = _int(((means).count))
        return (Double((1.0 / Double((total_count &- n_classes)))) * sum_sq)
    }
    func predict_y_values(_ x_items: [[Double]], _ means: [Double], _ variance: Double, _ probabilities: [Double]) -> [Int] {
        var results: [Int] = ([] as! [Int])
        var i = 0
        while (i < _int(((x_items).count))) {
            var j = 0
            while (j < _int((((_idx(x_items, i) as! [Double])).count))) {
                var temp: [Double] = ([] as! [Double])
                var k = 0
                while (k < _int(((x_items).count))) {
                    let discr = (((Double(_idx(_idx(x_items, i)!, j)) * Double((Double(_idx(means, k)) / variance))) - (Double((Double(_idx(means, k)) * Double(_idx(means, k)))) / Double((2.0 * variance)))) + Double(ln(Double(_idx(probabilities, k)))))
                    temp = (_append(temp, discr) as! [Double])
                    k = _int((k &+ 1))
                }
                var max_idx = 0
                var max_val = Double(_idx(temp, 0))
                var t = 1
                while (t < _int(((temp).count))) {
                    if (Double(_idx(temp, t)) > max_val) {
                        max_val = Double(_idx(temp, t))
                        max_idx = Int(t)
                    }
                    t = _int((t &+ 1))
                }
                results = (_append(results, max_idx) as! [Int])
                j = _int((j &+ 1))
            }
            i = _int((i &+ 1))
        }
        return results
    }
    func accuracy(_ actual_y: [Int], _ predicted_y: [Int]) -> Double {
        var correct = 0
        var i = 0
        while (i < _int(((actual_y).count))) {
            if ((_idx(actual_y, i) as? Int ?? 0) == (_idx(predicted_y, i) as? Int ?? 0)) {
                correct = _int((correct &+ 1))
            }
            i = _int((i &+ 1))
        }
        return ((Double(correct) / Double(((actual_y).count))) * 100.0)
    }
    func main() {
        seed = 1
        let counts: [Int] = ({
            var _arr: [Int] = []
            _arr = _append(_arr, 20)
            _arr = _append(_arr, 20)
            _arr = _append(_arr, 20)
            return _arr
        }() as! [Int])
        let means: [Double] = ({
            var _arr: [Double] = []
            _arr = _append(_arr, 5.0)
            _arr = _append(_arr, 10.0)
            _arr = _append(_arr, 15.0)
            return _arr
        }() as! [Double])
        let std_dev = 1.0
        var x: [[Double]] = ([] as! [[Double]])
        var i = 0
        while (i < _int(((counts).count))) {
            x = (_append(x, (gaussian_distribution(Double(_idx(means, i)), Double(std_dev), (_idx(counts, i) as? Int ?? 0)) as! [Double])) as! [[Double]])
            i = _int((i &+ 1))
        }
        let y: [Int] = (y_generator(_int(((counts).count)), (counts as! [Int])) as! [Int])
        var actual_means: [Double] = ([] as! [Double])
        i = 0
        while (i < _int(((counts).count))) {
            actual_means = (_append(actual_means, Double(calculate_mean((_idx(counts, i) as? Int ?? 0), (_idx(x, i) as! [Double])))) as! [Double])
            i = _int((i &+ 1))
        }
        var total_count = 0
        i = 0
        while (i < _int(((counts).count))) {
            total_count = _int((total_count &+ (_idx(counts, i) as? Int ?? 0)))
            i = _int((i &+ 1))
        }
        var probabilities: [Double] = ([] as! [Double])
        i = 0
        while (i < _int(((counts).count))) {
            probabilities = (_append(probabilities, Double(calculate_probabilities((_idx(counts, i) as? Int ?? 0), total_count))) as! [Double])
            i = _int((i &+ 1))
        }
        let variance = Double(calculate_variance((x as! [[Double]]), (actual_means as! [Double]), total_count))
        let predicted: [Int] = (predict_y_values((x as! [[Double]]), (actual_means as! [Double]), Double(variance), (probabilities as! [Double])) as! [Int])
        print(_p("[" + predicted.map{ if let s = $0 as? String { "\"" + s.replacingOccurrences(of: "\"", with: "\\\"") + "\"" } else { _p($0) } }.joined(separator: ", ") + "]"))
        print(_p(Double(accuracy((y as! [Int]), (predicted as! [Int])))))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
