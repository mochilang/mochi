// Generated by Mochi transpiler v0.10.67 on 2025-08-16 21:28:17 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first!
}
func _idx<K: Hashable, V>(_ m: [K: V], _ k: K) -> V? {
    return m[k]
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func absf(_ x: Double) -> Double {
        if (x < 0.0) {
            return (0.0 - x)
        }
        return x
    }
    func sqrtApprox(_ x: Double) -> Double {
        if (x <= 0.0) {
            return 0.0
        }
        var guess: Double = x
        var i = 0
        while (i < 20) {
            guess = Double((Double((guess + (x / guess))) / 2.0))
            i = _int((i &+ 1))
        }
        return guess
    }
    func ln_series(_ x: Double) -> Double {
        let t = (Double((x - 1.0)) / Double((x + 1.0)))
        var term = t
        var sum = 0.0
        var n = 1
        while (n <= 19) {
            sum = Double((sum + (term / Double(n))))
            term = Double(((term * t) * t))
            n = _int((n &+ 2))
        }
        return (2.0 * sum)
    }
    func ln(_ x: Double) -> Double {
        var y = x
        var k = 0
        while (y >= 10.0) {
            y = Double((y / 10.0))
            k = _int((k &+ 1))
        }
        while (y < 1.0) {
            y = Double((y * 10.0))
            k = _int((k &- 1))
        }
        return (Double(ln_series(Double(y))) + (Double(k) * Double(ln_series(10.0))))
    }
    func mae(_ predict: [Double], _ actual: [Double]) -> Double {
        var sum = 0.0
        var i = 0
        while (i < _int(((predict).count))) {
            let diff = (Double(_idx(predict, i)) - Double(_idx(actual, i)))
            sum = Double((sum + Double(absf(Double(diff)))))
            i = _int((i &+ 1))
        }
        return (sum / Double(((predict).count)))
    }
    func mse(_ predict: [Double], _ actual: [Double]) -> Double {
        var sum = 0.0
        var i = 0
        while (i < _int(((predict).count))) {
            let diff = (Double(_idx(predict, i)) - Double(_idx(actual, i)))
            sum = Double((sum + (diff * diff)))
            i = _int((i &+ 1))
        }
        return (sum / Double(((predict).count)))
    }
    func rmse(_ predict: [Double], _ actual: [Double]) -> Double {
        return Double(sqrtApprox(Double(mse((predict as! [Double]), (actual as! [Double])))))
    }
    func rmsle(_ predict: [Double], _ actual: [Double]) -> Double {
        var sum = 0.0
        var i = 0
        while (i < _int(((predict).count))) {
            let lp = Double(ln(Double((Double(_idx(predict, i)) + 1.0))))
            let la = Double(ln(Double((Double(_idx(actual, i)) + 1.0))))
            let diff = (lp - la)
            sum = Double((sum + (diff * diff)))
            i = _int((i &+ 1))
        }
        return Double(sqrtApprox(Double((sum / Double(((predict).count))))))
    }
    func mbd(_ predict: [Double], _ actual: [Double]) -> Double {
        var diff_sum = 0.0
        var actual_sum = 0.0
        var i = 0
        while (i < _int(((predict).count))) {
            diff_sum = Double((diff_sum + Double((Double(_idx(predict, i)) - Double(_idx(actual, i))))))
            actual_sum = Double((actual_sum + Double(_idx(actual, i))))
            i = _int((i &+ 1))
        }
        let n = Double(((predict).count))
        let numerator = (diff_sum / n)
        let denominator = (actual_sum / n)
        return ((numerator / denominator) * 100.0)
    }
    func manual_accuracy(_ predict: [Double], _ actual: [Double]) -> Double {
        var correct = 0
        var i = 0
        while (i < _int(((predict).count))) {
            if (Double(_idx(predict, i)) == Double(_idx(actual, i))) {
                correct = _int((correct &+ 1))
            }
            i = _int((i &+ 1))
        }
        return (Double(correct) / Double(((predict).count)))
    }
    func main() {
        let actual: [Double] = ({
            var _arr: [Double] = []
            _arr = _append(_arr, 1.0)
            _arr = _append(_arr, 2.0)
            _arr = _append(_arr, 3.0)
            return _arr
        }() as! [Double])
        let predict: [Double] = ({
            var _arr: [Double] = []
            _arr = _append(_arr, 1.0)
            _arr = _append(_arr, 4.0)
            _arr = _append(_arr, 3.0)
            return _arr
        }() as! [Double])
        print(_p(_p(Double(mae((predict as! [Double]), (actual as! [Double]))))))
        print(_p(_p(Double(mse((predict as! [Double]), (actual as! [Double]))))))
        print(_p(_p(Double(rmse((predict as! [Double]), (actual as! [Double]))))))
        print(_p(_p(Double(rmsle(({
            var _arr: [Double] = []
            _arr = _append(_arr, 10.0)
            _arr = _append(_arr, 2.0)
            _arr = _append(_arr, 30.0)
            return _arr
        }() as! [Double]), ({
            var _arr: [Double] = []
            _arr = _append(_arr, 10.0)
            _arr = _append(_arr, 10.0)
            _arr = _append(_arr, 30.0)
            return _arr
        }() as! [Double]))))))
        print(_p(_p(Double(mbd(({
            var _arr: [Double] = []
            _arr = _append(_arr, 2.0)
            _arr = _append(_arr, 3.0)
            _arr = _append(_arr, 4.0)
            return _arr
        }() as! [Double]), ({
            var _arr: [Double] = []
            _arr = _append(_arr, 1.0)
            _arr = _append(_arr, 2.0)
            _arr = _append(_arr, 3.0)
            return _arr
        }() as! [Double]))))))
        print(_p(_p(Double(mbd(({
            var _arr: [Double] = []
            _arr = _append(_arr, 0.0)
            _arr = _append(_arr, 1.0)
            _arr = _append(_arr, 1.0)
            return _arr
        }() as! [Double]), ({
            var _arr: [Double] = []
            _arr = _append(_arr, 1.0)
            _arr = _append(_arr, 2.0)
            _arr = _append(_arr, 3.0)
            return _arr
        }() as! [Double]))))))
        print(_p(_p(Double(manual_accuracy((predict as! [Double]), (actual as! [Double]))))))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
