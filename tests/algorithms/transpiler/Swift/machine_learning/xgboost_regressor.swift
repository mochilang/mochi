// Generated by Mochi transpiler v0.10.62 on 2025-08-09 10:34:05 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
struct Dataset: Codable {
    var data: [[Double]]
    var target: [Double]
    init() {
        self.data = []
        self.target = []
    }
    init(data: [[Double]], target: [Double]) {
        self.data = data
        self.target = target
    }
}
struct Tree: Codable {
    var threshold: Double
    var left_value: Double
    var right_value: Double
    init() {
        self.threshold = 0
        self.left_value = 0
        self.right_value = 0
    }
    init(threshold: Double, left_value: Double, right_value: Double) {
        self.threshold = threshold
        self.left_value = left_value
        self.right_value = right_value
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func data_handling(_ dataset: Dataset) -> Dataset {
        return dataset
    }
    func xgboost(_ features: [[Double]], _ target: [Double], _ test_features: [[Double]]) -> [Double] {
        let learning_rate = 0.5
        let n_estimators = 3
        var trees: [Tree] = ([] as! [Tree])
        var predictions: [Double] = ([] as! [Double])
        var i = 0
        while (i < _int(((target).count))) {
            predictions = (_append(predictions, 0.0) as! [Double])
            i = _int((i &+ 1))
        }
        var est = 0
        while (est < n_estimators) {
            var residuals: [Double] = ([] as! [Double])
            var j = 0
            while (j < _int(((target).count))) {
                residuals = (_append(residuals, (Double(_idx(target, j)) - Double(_idx(predictions, j)))) as! [Double])
                j = _int((j &+ 1))
            }
            var sum_feat = 0.0
            j = 0
            while (j < _int(((features).count))) {
                sum_feat = Double((sum_feat + Double(_idx(_idx(features, j)!, 0))))
                j = _int((j &+ 1))
            }
            let threshold = (sum_feat / Double(((features).count)))
            var left_sum = 0.0
            var left_count = 0
            var right_sum = 0.0
            var right_count = 0
            j = 0
            while (j < _int(((features).count))) {
                if (Double(_idx(_idx(features, j)!, 0)) <= threshold) {
                    left_sum = Double((left_sum + Double(_idx(residuals, j))))
                    left_count = _int((left_count &+ 1))
                } else {
                    right_sum = Double((right_sum + Double(_idx(residuals, j))))
                    right_count = _int((right_count &+ 1))
                }
                j = _int((j &+ 1))
            }
            var left_value = 0.0
            if (left_count > 0) {
                left_value = Double((left_sum / Double(left_count)))
            }
            var right_value = 0.0
            if (right_count > 0) {
                right_value = Double((right_sum / Double(right_count)))
            }
            j = 0
            while (j < _int(((features).count))) {
                if (Double(_idx(_idx(features, j)!, 0)) <= threshold) {
                    predictions = _set(predictions, j, Double((Double(_idx(predictions, j)) + (learning_rate * left_value))))
                } else {
                    predictions = _set(predictions, j, Double((Double(_idx(predictions, j)) + (learning_rate * right_value))))
                }
                j = _int((j &+ 1))
            }
            trees = (_append(trees, Tree(threshold: Double(threshold), left_value: Double(left_value), right_value: Double(right_value))) as! [Tree])
            est = _int((est &+ 1))
        }
        var preds: [Double] = ([] as! [Double])
        var t = 0
        while (t < _int(((test_features).count))) {
            var pred = 0.0
            var k = 0
            while (k < _int(((trees).count))) {
                if (String(describing: Double(_idx(_idx(test_features, t)!, 0))) <= String(describing: (_idx(trees, k)!.threshold))
                ) {
                    pred = Double((pred + (learning_rate * (_idx(trees, k)!.left_value))))
                } else {
                    pred = Double((pred + (learning_rate * (_idx(trees, k)!.right_value))))
                }
                k = _int((k &+ 1))
            }
            preds = (_append(preds, pred) as! [Double])
            t = _int((t &+ 1))
        }
        return preds
    }
    func mean_absolute_error(_ y_true: [Double], _ y_pred: [Double]) -> Double {
        var sum = 0.0
        var i = 0
        while (i < _int(((y_true).count))) {
            var diff = (Double(_idx(y_true, i)) - Double(_idx(y_pred, i)))
            if (diff < 0.0) {
                diff = Double(-diff)
            }
            sum = Double((sum + diff))
            i = _int((i &+ 1))
        }
        return (sum / Double(((y_true).count)))
    }
    func mean_squared_error(_ y_true: [Double], _ y_pred: [Double]) -> Double {
        var sum = 0.0
        var i = 0
        while (i < _int(((y_true).count))) {
            let diff = (Double(_idx(y_true, i)) - Double(_idx(y_pred, i)))
            sum = Double((sum + (diff * diff)))
            i = _int((i &+ 1))
        }
        return (sum / Double(((y_true).count)))
    }
    func main() -> Void {
        let california = Dataset(data: ({
            var _arr: [[Double]] = []
            _arr = _append(_arr, ({
                var _arr: [Double] = []
                _arr = _append(_arr, 1.0)
                return _arr
            }() as! [Double]))
            _arr = _append(_arr, ({
                var _arr: [Double] = []
                _arr = _append(_arr, 2.0)
                return _arr
            }() as! [Double]))
            _arr = _append(_arr, ({
                var _arr: [Double] = []
                _arr = _append(_arr, 3.0)
                return _arr
            }() as! [Double]))
            _arr = _append(_arr, ({
                var _arr: [Double] = []
                _arr = _append(_arr, 4.0)
                return _arr
            }() as! [Double]))
            return _arr
        }() as! [[Double]]), target: ({
            var _arr: [Double] = []
            _arr = _append(_arr, 2.0)
            _arr = _append(_arr, 3.0)
            _arr = _append(_arr, 4.0)
            _arr = _append(_arr, 5.0)
            return _arr
        }() as! [Double]))
        let ds = data_handling((california as! Dataset))
        let x_train: [[Double]] = ds.data
        let y_train: [Double] = ds.target
        let x_test: [[Double]] = ({
            var _arr: [[Double]] = []
            _arr = _append(_arr, ({
                var _arr: [Double] = []
                _arr = _append(_arr, 1.5)
                return _arr
            }() as! [Double]))
            _arr = _append(_arr, ({
                var _arr: [Double] = []
                _arr = _append(_arr, 3.5)
                return _arr
            }() as! [Double]))
            return _arr
        }() as! [[Double]])
        let y_test: [Double] = ({
            var _arr: [Double] = []
            _arr = _append(_arr, 2.5)
            _arr = _append(_arr, 4.5)
            return _arr
        }() as! [Double])
        let predictions: [Double] = (xgboost((x_train as! [[Double]]), (y_train as! [Double]), (x_test as! [[Double]])) as! [Double])
        print(_p("Predictions:"))
        print(_p("[" + predictions.map{ if let s = $0 as? String { "\"" + s.replacingOccurrences(of: "\"", with: "\\\"") + "\"" } else { _p($0) } }.joined(separator: ", ") + "]"))
        print(_p("Mean Absolute Error:"))
        print(_p(Double(mean_absolute_error((y_test as! [Double]), (predictions as! [Double])))))
        print(_p("Mean Square Error:"))
        print(_p(Double(mean_squared_error((y_test as! [Double]), (predictions as! [Double])))))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
