// Generated by Mochi transpiler v0.10.61 on 2025-08-08 16:01:50 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return nil
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func expApprox(_ x: Double) -> Double {
        var y: Double = x
        var is_neg: Bool = false
        if (x < 0.0) {
            is_neg = true
            y = Double(-x)
        }
        var term: Double = 1.0
        var sum: Double = 1.0
        var n: Int = 1
        while (n < 30) {
            term = Double(((term * y) / Double(n)))
            sum = Double((sum + term))
            n = _int((n &+ 1))
        }
        if is_neg {
            return (1.0 / sum)
        }
        return sum
    }
    func sigmoid(_ z: Double) -> Double {
        return (1.0 / Double((1.0 + Double(expApprox(Double(-z))))))
    }
    func dot(_ a: [Double], _ b: [Double]) -> Double {
        var s: Double = 0.0
        var i: Int = 0
        while (i < _int(((a).count))) {
            s = Double((s + (Double(_idx(a, i)) * Double(_idx(b, i)))))
            i = _int((i &+ 1))
        }
        return s
    }
    func zeros(_ n: Int) -> [Double] {
        var res: [Double] = ([] as! [Double])
        var i: Int = 0
        while (i < n) {
            res = (_append(res, 0.0) as! [Double])
            i = _int((i &+ 1))
        }
        return res
    }
    func logistic_reg(_ alpha: Double, _ x: [[Double]], _ y: [Double], _ iterations: Int) -> [Double] {
        let m = _int(((x).count))
        let n = _int((((_idx(x, 0) as! [Double])).count))
        var theta: [Double] = (zeros(n) as! [Double])
        var iter: Int = 0
        while (iter < iterations) {
            var grad: [Double] = (zeros(n) as! [Double])
            var i: Int = 0
            while (i < m) {
                let z = Double(dot((_idx(x, i) as! [Double]), (theta as! [Double])))
                let h = Double(sigmoid(Double(z)))
                var k: Int = 0
                while (k < n) {
                    grad = _set(grad, k, Double((Double(_idx(grad, k)) + (Double((h - Double(_idx(y, i)))) * Double(_idx(_idx(x, i), k))))))
                    k = _int((k &+ 1))
                }
                i = _int((i &+ 1))
            }
            var k2: Int = 0
            while (k2 < n) {
                theta = _set(theta, k2, Double((Double(_idx(theta, k2)) - ((alpha * Double(_idx(grad, k2))) / Double(m)))))
                k2 = _int((k2 &+ 1))
            }
            iter = _int((iter &+ 1))
        }
        return theta
    }
    let x: [[Double]] = ([([0.5, 1.5] as! [Double]), ([1.0, 1.0] as! [Double]), ([1.5, 0.5] as! [Double]), ([3.0, 3.5] as! [Double]), ([3.5, 3.0] as! [Double]), ([4.0, 4.0] as! [Double])] as! [[Double]])
    var y: [Double] = ([0.0, 0.0, 0.0, 1.0, 1.0, 1.0] as! [Double])
    let alpha = 0.1
    let iterations = 1000
    var theta: [Double] = (logistic_reg(Double(alpha), (x as! [[Double]]), (y as! [Double]), iterations) as! [Double])
    for i in 0..<_int(((theta).count)) {
        print(_p(Double(_idx(theta, i))))
    }
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
