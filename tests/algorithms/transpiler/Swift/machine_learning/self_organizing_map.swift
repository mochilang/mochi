// Generated by Mochi transpiler v0.10.67 on 2025-08-16 21:28:19 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first!
}
func _idx<K: Hashable, V>(_ m: [K: V], _ k: K) -> V? {
    return m[k]
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func get_winner(_ weights: [[Double]], _ sample: [Int]) -> Int {
        var d0 = 0.0
        var d1 = 0.0
        for i in 0..<_int(((sample).count)) {
            let diff0 = (Double((_idx(sample, i) as? Int ?? 0)) - Double(_idx(_idx(weights, 0), i)))
            let diff1 = (Double((_idx(sample, i) as? Int ?? 0)) - Double(_idx(_idx(weights, 1), i)))
            d0 = Double((d0 + (diff0 * diff0)))
            d1 = Double((d1 + (diff1 * diff1)))
            return _int(((d0 > d1) ? 0 : 1))
        }
        return 0
    }
    func update(_ weights: inout [[Double]], _ sample: [Int], _ j: Int, _ alpha: Double) -> [[Double]] {
        for i in 0..<_int(((weights).count)) {
            var _tmp2 = (_idx(weights, j) as! [Double])
            _tmp2 = _set(_tmp2, i, { let _tmp2 = Double((Double(_idx(_idx(weights, j), i)) + (alpha * Double((Double((_idx(sample, i) as? Int ?? 0)) - Double(_idx(_idx(weights, j), i))))))); return _tmp2 }())
            weights = _set(weights, j, { let _tmp3 = (_tmp2 as! [Double]); return _tmp3 }())
        }
        return weights
    }
    func list_to_string(_ xs: [Double]) -> String {
        var s = "["
        var i = 0
        while (i < _int(((xs).count))) {
            s = ((_p(s) + _p(_p(Double(_idx(xs, i))))) as! String)
            if (i < (_int(((xs).count)) &- 1)) {
                s = ((_p(s) + _p(", ")) as! String)
            }
            i = _int((i &+ 1))
        }
        s = ((_p(s) + _p("]")) as! String)
        return s
    }
    func matrix_to_string(_ m: [[Double]]) -> String {
        var s = "["
        var i = 0
        while (i < _int(((m).count))) {
            s = ((_p(s) + _p(String(describing: list_to_string((_idx(m, i) as! [Double]))))) as! String)
            if (i < (_int(((m).count)) &- 1)) {
                s = ((_p(s) + _p(", ")) as! String)
            }
            i = _int((i &+ 1))
        }
        s = ((_p(s) + _p("]")) as! String)
        return s
    }
    func main() {
        let training_samples: [[Int]] = ({
            var _arr: [[Int]] = []
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 1)
                _arr = _append(_arr, 1)
                _arr = _append(_arr, 0)
                _arr = _append(_arr, 0)
                return _arr
            }() as! [Int]))
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 0)
                _arr = _append(_arr, 0)
                _arr = _append(_arr, 0)
                _arr = _append(_arr, 1)
                return _arr
            }() as! [Int]))
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 1)
                _arr = _append(_arr, 0)
                _arr = _append(_arr, 0)
                _arr = _append(_arr, 0)
                return _arr
            }() as! [Int]))
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 0)
                _arr = _append(_arr, 0)
                _arr = _append(_arr, 1)
                _arr = _append(_arr, 1)
                return _arr
            }() as! [Int]))
            return _arr
        }() as! [[Int]])
        var weights: [[Double]] = ({
            var _arr: [[Double]] = []
            _arr = _append(_arr, ({
                var _arr: [Double] = []
                _arr = _append(_arr, 0.2)
                _arr = _append(_arr, 0.6)
                _arr = _append(_arr, 0.5)
                _arr = _append(_arr, 0.9)
                return _arr
            }() as! [Double]))
            _arr = _append(_arr, ({
                var _arr: [Double] = []
                _arr = _append(_arr, 0.8)
                _arr = _append(_arr, 0.4)
                _arr = _append(_arr, 0.7)
                _arr = _append(_arr, 0.3)
                return _arr
            }() as! [Double]))
            return _arr
        }() as! [[Double]])
        let epochs = 3
        let alpha = 0.5
        for _ in 0..<epochs {
            for j in 0..<_int(((training_samples).count)) {
                let sample: [Int] = (_idx(training_samples, j) as! [Int])
                let winner = _int(get_winner((weights as! [[Double]]), (sample as! [Int])))
                weights = (update(&weights, (sample as! [Int]), winner, Double(alpha)) as! [[Double]])
            }
        }
        let sample: [Int] = ({
            var _arr: [Int] = []
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 1)
            return _arr
        }() as! [Int])
        let winner = _int(get_winner((weights as! [[Double]]), (sample as! [Int])))
        print(_p((_p("Clusters that the test sample belongs to : ") + _p(_p(winner)))))
        print(_p((_p("Weights that have been trained : ") + _p(String(describing: matrix_to_string((weights as! [[Double]])))))))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
