// Generated by Mochi transpiler v0.10.62 on 2025-08-09 16:43:00 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
struct Itemset: Codable {
    var items: [String]
    var support: Int
    init() {
        self.items = []
        self.support = 0
    }
    init(items: [String], support: Int) {
        self.items = items
        self.support = support
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func load_data() -> [[String]] {
        return ({
            var _arr: [[String]] = []
            _arr = _append(_arr, ({
                var _arr: [String] = []
                _arr = _append(_arr, "milk")
                return _arr
            }() as! [String]))
            _arr = _append(_arr, ({
                var _arr: [String] = []
                _arr = _append(_arr, "milk")
                _arr = _append(_arr, "butter")
                return _arr
            }() as! [String]))
            _arr = _append(_arr, ({
                var _arr: [String] = []
                _arr = _append(_arr, "milk")
                _arr = _append(_arr, "bread")
                return _arr
            }() as! [String]))
            _arr = _append(_arr, ({
                var _arr: [String] = []
                _arr = _append(_arr, "milk")
                _arr = _append(_arr, "bread")
                _arr = _append(_arr, "chips")
                return _arr
            }() as! [String]))
            return _arr
        }() as! [[String]])
    }
    func contains_string(_ xs: [String], _ s: String) -> Bool {
        for v in xs {
            if (v == s) {
                return true
            }
        }
        return false
    }
    func is_subset(_ candidate: [String], _ transaction: [String]) -> Bool {
        for it in candidate {
            if (!contains_string((transaction as! [String]), (it as! String))) {
                return false
            }
        }
        return true
    }
    func lists_equal(_ a: [String], _ b: [String]) -> Bool {
        if (_int(((a).count)) != _int(((b).count))) {
            return false
        }
        var i = 0
        while (i < _int(((a).count))) {
            if ((_idx(a, i) as! String) != (_idx(b, i) as! String)) {
                return false
            }
            i = _int((i &+ 1))
        }
        return true
    }
    func contains_list(_ itemset: [[String]], _ item: [String]) -> Bool {
        for l in itemset {
            if lists_equal((l as! [String]), (item as! [String])) {
                return true
            }
        }
        return false
    }
    func count_list(_ itemset: [[String]], _ item: [String]) -> Int {
        var c = 0
        for l in itemset {
            if lists_equal((l as! [String]), (item as! [String])) {
                c = _int((c &+ 1))
            }
        }
        return c
    }
    func slice_list(_ xs: [[String]], _ start: Int) -> [[String]] {
        var res: [[String]] = ([] as! [[String]])
        var i = start
        while (i < _int(((xs).count))) {
            res = (_append(res, (_idx(xs, i) as! [String])) as! [[String]])
            i = _int((i &+ 1))
        }
        return res
    }
    func combinations_lists(_ xs: [[String]], _ k: Int) -> [[[String]]] {
        var result: [[[String]]] = ([] as! [[[String]]])
        if (k == 0) {
            result = (((_append(result, ([] as! [[String]])) as! [[[String]]]) as! [Any?]) as! [[[String]]])
            return result
        }
        var i = 0
        while (i < _int(((xs).count))) {
            let head: [String] = (_idx(xs, i) as! [String])
            let tail: [[String]] = (slice_list((xs as! [[String]]), (i &+ 1)) as! [[String]])
            let tail_combos: [[[String]]] = (combinations_lists((tail as! [[String]]), (k &- 1)) as! [[[String]]])
            for combo in tail_combos {
                var new_combo: [[String]] = ([] as! [[String]])
                new_combo = (_append(new_combo, head) as! [[String]])
                for c in combo {
                    new_combo = (_append(new_combo, c) as! [[String]])
                }
                result = (_append(result, new_combo) as! [[[String]]])
            }
            i = _int((i &+ 1))
        }
        return result
    }
    func prune(_ itemset: [[String]], _ candidates: [[[String]]], _ length: Int) -> [[[String]]] {
        var pruned: [[[String]]] = ([] as! [[[String]]])
        for candidate in candidates {
            var is_subsequence = true
            for item in candidate {
                if ((!contains_list((itemset as! [[String]]), (item as! [String]))) || (_int(count_list((itemset as! [[String]]), (item as! [String]))) < (length &- 1))) {
                    is_subsequence = false
                    break
                }
            }
            if is_subsequence {
                pruned = (_append(pruned, candidate) as! [[[String]]])
            }
        }
        return pruned
    }
    func sort_strings(_ xs: [String]) -> [String] {
        var res: [String] = ([] as! [String])
        for s in xs {
            res = (_append(res, s) as! [String])
        }
        var i = 0
        while (i < _int(((res).count))) {
            var j = (i &+ 1)
            while (j < _int(((res).count))) {
                if ((_idx(res, j) as! String) < (_idx(res, i) as! String)) {
                    let tmp = (_idx(res, i) as! String)
                    res = _set(res, i, (_idx(res, j) as! String))
                    res = _set(res, j, (tmp as! String))
                }
                j = _int((j &+ 1))
            }
            i = _int((i &+ 1))
        }
        return res
    }
    func itemset_to_string(_ xs: [String]) -> String {
        var s = "["
        var i = 0
        while (i < _int(((xs).count))) {
            if (i > 0) {
                s = ((s + ", ") as! String)
            }
            s = ((((s + "'") + (_idx(xs, i) as! String)) + "'") as! String)
            i = _int((i &+ 1))
        }
        s = ((s + "]") as! String)
        return s
    }
    func apriori(_ data: [[String]], _ min_support: Int) -> [Itemset] {
        var itemset: [[String]] = ([] as! [[String]])
        for transaction in data {
            var t: [String] = ([] as! [String])
            for v in transaction {
                t = (_append(t, v) as! [String])
            }
            itemset = (_append(itemset, t) as! [[String]])
        }
        var frequent: [Itemset] = ([] as! [Itemset])
        var length = 1
        while (_int(((itemset).count)) > 0) {
            var counts: [Int] = ([] as! [Int])
            var idx = 0
            while (idx < _int(((itemset).count))) {
                counts = (_append(counts, 0) as! [Int])
                idx = _int((idx &+ 1))
            }
            for transaction in data {
                var j = 0
                while (j < _int(((itemset).count))) {
                    let candidate: [String] = (_idx(itemset, j) as! [String])
                    if is_subset((candidate as! [String]), (transaction as! [String])) {
                        counts = _set(counts, j, _int(((_idx(counts, j) as? Int ?? 0) &+ 1)))
                    }
                    j = _int((j &+ 1))
                }
            }
            var new_itemset: [[String]] = ([] as! [[String]])
            var k = 0
            while (k < _int(((itemset).count))) {
                if ((_idx(counts, k) as? Int ?? 0) >= min_support) {
                    new_itemset = (_append(new_itemset, (_idx(itemset, k) as! [String])) as! [[String]])
                }
                k = _int((k &+ 1))
            }
            itemset = (new_itemset as! [[String]])
            var m = 0
            while (m < _int(((itemset).count))) {
                var sorted_item = (sort_strings((_idx(itemset, m) as! [String])) as! [String])
                frequent = (_append(frequent, Itemset(items: (sorted_item as! [String]), support: (_idx(counts, m) as? Int ?? 0))) as! [Itemset])
                m = _int((m &+ 1))
            }
            length = _int((length &+ 1))
            let combos: [[[String]]] = (combinations_lists((itemset as! [[String]]), length) as! [[[String]]])
            itemset = ((prune((itemset as! [[String]]), (combos as! [[[String]]]), length) as! [[[String]]]) as! [[String]])
        }
        return frequent
    }
    var frequent_itemsets = (apriori((load_data() as! [[String]]), 2) as! [Itemset])
    for fi in frequent_itemsets {
        print(_p(((String(describing: itemset_to_string((fi.items as! [String]))) + ": ") + _p(fi.support))))
    }
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
