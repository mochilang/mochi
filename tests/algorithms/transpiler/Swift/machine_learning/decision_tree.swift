// Generated by Mochi transpiler v0.10.61 on 2025-08-08 16:01:31 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return nil
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
indirect enum Tree {
    case Leaf(prediction: Double)
    case Branch(decision_boundary: Double, left: Tree, right: Tree)
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let PI: Double = 3.141592653589793
    let TWO_PI: Double = 6.283185307179586
    func _mod(_ x: Double, _ m: Double) -> Double {
        return (x - (Double(_int((x / m))) * m))
    }
    func sin(_ x: Double) -> Double {
        let y = (Double(_mod(Double((x + PI)), Double(TWO_PI))) - PI)
        let y2 = (y * y)
        let y3 = (y2 * y)
        let y5 = (y3 * y2)
        let y7 = (y5 * y2)
        return (((y - (y3 / 6.0)) + (y5 / 120.0)) - (y7 / 5040.0))
    }
    var seed: Int = 123456789
    func rand() -> Double {
        seed = _int(((_int(((1103515245 &* seed) &+ 12345)) % 2147483648 + 2147483648) % 2147483648))
        return (Double(seed) / 2147483648.0)
    }
    func mean(_ vals: [Double]) -> Double {
        var sum: Double = 0.0
        var i: Int = 0
        while (i < _int(((vals).count))) {
            sum = Double((sum + Double(_idx(vals, i))))
            i = _int((i &+ 1))
        }
        return (sum / Double(_int(((vals).count))))
    }
    func mean_squared_error(_ labels: [Double], _ prediction: Double) -> Double {
        var total: Double = 0.0
        var i: Int = 0
        while (i < _int(((labels).count))) {
            let diff = (Double(_idx(labels, i)) - prediction)
            total = Double((total + (diff * diff)))
            i = _int((i &+ 1))
        }
        return (total / Double(_int(((labels).count))))
    }
    func train_tree(_ x: [Double], _ y: [Double], _ depth: Int, _ min_leaf_size: Int) -> Tree {
        if (_int(((x).count)) < (2 &* min_leaf_size)) {
            return (Tree.Leaf(prediction: Double(mean((y as! [Double])))) as! Tree)
        }
        if (depth == 1) {
            return (Tree.Leaf(prediction: Double(mean((y as! [Double])))) as! Tree)
        }
        var best_split: Int = 0
        var min_error: Double = (Double(mean_squared_error((x as! [Double]), Double(mean((y as! [Double]))))) * 2.0)
        var i: Int = 0
        while (i < _int(((x).count))) {
            if (_int((((Array(x[0..<i]) as! [Double])).count)) < min_leaf_size) {
                i = Int(i)
            } else {
                if (_int((((Array(x[i..<x.count]) as! [Double])).count)) < min_leaf_size) {
                    i = Int(i)
                } else {
                    let err_left = Double(mean_squared_error((Array(x[0..<i]) as! [Double]), Double(mean((Array(y[0..<i]) as! [Double])))))
                    let err_right = Double(mean_squared_error((Array(x[i..<x.count]) as! [Double]), Double(mean((Array(y[i..<y.count]) as! [Double])))))
                    let err = (err_left + err_right)
                    if (err < min_error) {
                        best_split = Int(i)
                        min_error = Double(err)
                    }
                }
            }
            i = _int((i &+ 1))
        }
        if (best_split != 0) {
            let left_x: [Double] = (Array(x[0..<best_split]) as! [Double])
            let left_y: [Double] = (Array(y[0..<best_split]) as! [Double])
            let right_x: [Double] = (Array(x[best_split..<x.count]) as! [Double])
            let right_y: [Double] = (Array(y[best_split..<y.count]) as! [Double])
            let boundary = Double(_idx(x, best_split))
            let left_tree = train_tree((left_x as! [Double]), (left_y as! [Double]), (depth &- 1), min_leaf_size)
            let right_tree = train_tree((right_x as! [Double]), (right_y as! [Double]), (depth &- 1), min_leaf_size)
            return (Tree.Branch(decision_boundary: boundary, left: left_tree, right: right_tree) as! Tree)
        }
        return (Tree.Leaf(prediction: Double(mean((y as! [Double])))) as! Tree)
    }
    func predict(_ tree: Tree, _ value: Double) -> Double {
        return Double({ () -> Double in
        switch tree {
            case let .Leaf(p):
            return p
            case let .Branch(b, l, r):
            return Double(((value >= b) ? Double(predict((r as! Tree), Double(value))) : Double(predict((l as! Tree), Double(value)))))
            default:
            var z: Double
            return z
        }
    }())
}
func main() {
    var x: [Double] = ([] as! [Double])
    var v: Double = -1.0
    while (v < 1.0) {
        x = (_append(x, v) as! [Double])
        v = Double((v + 0.005))
    }
    var y: [Double] = ([] as! [Double])
    var i: Int = 0
    while (i < _int(((x).count))) {
        y = (_append(y, Double(sin(Double(_idx(x, i))))) as! [Double])
        i = _int((i &+ 1))
    }
    let tree = train_tree((x as! [Double]), (y as! [Double]), 10, 10)
    var test_cases: [Double] = ([] as! [Double])
    i = 0
    while (i < 10) {
        test_cases = (_append(test_cases, ((Double(rand()) * 2.0) - 1.0)) as! [Double])
        i = _int((i &+ 1))
    }
    var predictions: [Double] = ([] as! [Double])
    i = 0
    while (i < _int(((test_cases).count))) {
        predictions = (_append(predictions, Double(predict((tree as! Tree), Double(_idx(test_cases, i))))) as! [Double])
        i = _int((i &+ 1))
    }
    var sum_err: Double = 0.0
    i = 0
    while (i < _int(((test_cases).count))) {
        let diff = (Double(_idx(predictions, i)) - Double(_idx(test_cases, i)))
        sum_err = Double((sum_err + (diff * diff)))
        i = _int((i &+ 1))
    }
    let avg_error = (sum_err / Double(_int(((test_cases).count))))
    print(_p(("Test values: " + "[" + test_cases.map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]")))
    print(_p(("Predictions: " + "[" + predictions.map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]")))
    print(_p(("Average error: " + _p(avg_error))))
}
_ = main()
let _benchEnd = _now()
let _benchMemEnd = _mem()
print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
