// Generated by Mochi transpiler v0.10.62 on 2025-08-09 16:38:31 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let PI = 3.141592653589793
    func sinApprox(_ x: Double) -> Double {
        var term = x
        var sum = x
        var n = 1
        while (n <= 10) {
            let denom = Double((_int((2 &* n)) &* _int(((2 &* n) &+ 1))))
            term = Double((((-term * x) * x) / denom))
            sum = Double((sum + term))
            n = _int((n &+ 1))
        }
        return sum
    }
    func cosApprox(_ x: Double) -> Double {
        var term = 1.0
        var sum = 1.0
        var n = 1
        while (n <= 10) {
            let denom = Double((_int(((2 &* n) &- 1)) &* _int((2 &* n))))
            term = Double((((-term * x) * x) / denom))
            sum = Double((sum + term))
            n = _int((n &+ 1))
        }
        return sum
    }
    func expApprox(_ x: Double) -> Double {
        var sum = 1.0
        var term = 1.0
        var n = 1
        while (n < 10) {
            term = Double(((term * x) / Double(n)))
            sum = Double((sum + term))
            n = _int((n &+ 1))
        }
        return sum
    }
    func ln(_ x: Double) -> Double {
        let t = (Double((x - 1.0)) / Double((x + 1.0)))
        var term = t
        var sum = 0.0
        var n = 1
        while (n <= 19) {
            sum = Double((sum + (term / Double(n))))
            term = Double(((term * t) * t))
            n = _int((n &+ 2))
        }
        return (2.0 * sum)
    }
    func log10(_ x: Double) -> Double {
        return (Double(ln(Double(x))) / Double(ln(10.0)))
    }
    func sqrtApprox(_ x: Double) -> Double {
        if (x <= 0.0) {
            return 0.0
        }
        var guess = x
        var i = 0
        while (i < 10) {
            guess = Double((Double((guess + (x / guess))) / 2.0))
            i = _int((i &+ 1))
        }
        return guess
    }
    func absf(_ x: Double) -> Double {
        if (x < 0.0) {
            return -x
        }
        return x
    }
    func normalize(_ audio: [Double]) -> [Double] {
        var max_val = 0.0
        var i = 0
        while (i < _int(((audio).count))) {
            let v = Double(absf(Double(_idx(audio, i))))
            if (v > max_val) {
                max_val = Double(v)
            }
            i = _int((i &+ 1))
        }
        var res: [Double] = ([] as! [Double])
        i = 0
        while (i < _int(((audio).count))) {
            res = (_append(res, (Double(_idx(audio, i)) / max_val)) as! [Double])
            i = _int((i &+ 1))
        }
        return res
    }
    func dft(_ frame: [Double], _ bins: Int) -> [Double] {
        let N = _int(((frame).count))
        var spec: [Double] = ([] as! [Double])
        var k = 0
        while (k < bins) {
            var real = 0.0
            var imag = 0.0
            var n = 0
            while (n < N) {
                let angle = ((((-2.0 * PI) * Double(k)) * Double(n)) / Double(N))
                real = Double((real + (Double(_idx(frame, n)) * Double(cosApprox(Double(angle))))))
                imag = Double((imag + (Double(_idx(frame, n)) * Double(sinApprox(Double(angle))))))
                n = _int((n &+ 1))
            }
            spec = (_append(spec, ((real * real) + (imag * imag))) as! [Double])
            k = _int((k &+ 1))
        }
        return spec
    }
    func triangular_filters(_ bins: Int, _ spectrum_size: Int) -> [[Double]] {
        var filters: [[Double]] = ([] as! [[Double]])
        var b = 0
        while (b < bins) {
            let center = (_int((_int((b &+ 1)) &* spectrum_size)) / _int((bins &+ 1)))
            var filt: [Double] = ([] as! [Double])
            var i = 0
            while (i < spectrum_size) {
                var v = 0.0
                if (i <= center) {
                    v = Double((Double(i) / Double(center)))
                } else {
                    v = Double((Double((spectrum_size &- i)) / Double((spectrum_size &- center))))
                }
                filt = (_append(filt, v) as! [Double])
                i = _int((i &+ 1))
            }
            filters = (_append(filters, filt) as! [[Double]])
            b = _int((b &+ 1))
        }
        return filters
    }
    func dot(_ mat: [[Double]], _ vec: [Double]) -> [Double] {
        var res: [Double] = ([] as! [Double])
        var i = 0
        while (i < _int(((mat).count))) {
            var sum = 0.0
            var j = 0
            while (j < _int(((vec).count))) {
                sum = Double((sum + (Double(_idx(_idx(mat, i)!, j)) * Double(_idx(vec, j)))))
                j = _int((j &+ 1))
            }
            res = (_append(res, sum) as! [Double])
            i = _int((i &+ 1))
        }
        return res
    }
    func discrete_cosine_transform(_ dct_filter_num: Int, _ filter_num: Int) -> [[Double]] {
        var basis: [[Double]] = ([] as! [[Double]])
        var i = 0
        while (i < dct_filter_num) {
            var row: [Double] = ([] as! [Double])
            var j = 0
            while (j < filter_num) {
                if (i == 0) {
                    row = (_append(row, (1.0 / Double(sqrtApprox(Double(filter_num))))) as! [Double])
                } else {
                    let angle = (((Double(((2 &* j) &+ 1)) * Double(i)) * PI) / Double((2.0 * Double(filter_num))))
                    row = (_append(row, (Double(cosApprox(Double(angle))) * Double(sqrtApprox(Double((2.0 / Double(filter_num))))))) as! [Double])
                }
                j = _int((j &+ 1))
            }
            basis = (_append(basis, row) as! [[Double]])
            i = _int((i &+ 1))
        }
        return basis
    }
    func mfcc(_ audio: [Double], _ bins: Int, _ dct_num: Int) -> [Double] {
        let norm: [Double] = (normalize((audio as! [Double])) as! [Double])
        let spec: [Double] = (dft((norm as! [Double]), (bins &+ 2)) as! [Double])
        let filters: [[Double]] = (triangular_filters(bins, _int(((spec).count))) as! [[Double]])
        let energies: [Double] = (dot((filters as! [[Double]]), (spec as! [Double])) as! [Double])
        var logfb: [Double] = ([] as! [Double])
        var i = 0
        while (i < _int(((energies).count))) {
            logfb = (_append(logfb, (10.0 * Double(log10(Double((Double(_idx(energies, i)) + 0.0000000001)))))) as! [Double])
            i = _int((i &+ 1))
        }
        let dct_basis: [[Double]] = (discrete_cosine_transform(dct_num, bins) as! [[Double]])
        var res = (dot((dct_basis as! [[Double]]), (logfb as! [Double])) as! [Double])
        if (_int(((res).count)) == 0) {
            res = ({
                var _arr: [Double] = []
                _arr = _append(_arr, 0.0)
                _arr = _append(_arr, 0.0)
                _arr = _append(_arr, 0.0)
                return _arr
            }() as! [Double])
        }
        return res
    }
    let sample_rate = 8000
    let size = 16
    var audio: [Double] = ([] as! [Double])
    var n = 0
    while (n < size) {
        let t = (Double(n) / Double(sample_rate))
        audio = (_append(audio, Double(sinApprox(Double((((2.0 * PI) * 440.0) * t))))) as! [Double])
        n = _int((n &+ 1))
    }
    let coeffs: [Double] = (mfcc((audio as! [Double]), 5, 3) as! [Double])
    for c in coeffs {
        print(_p(c))
    }
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
