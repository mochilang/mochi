// Generated by Mochi transpiler v0.10.62 on 2025-08-09 10:34:04 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _concat<T>(_ a: [T], _ b: [T]) -> [T] {
    var out = a
    out.append(contentsOf: b)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
struct Stump: Codable {
    var feature: Int
    var threshold: Double
    var left: Double
    var right: Double
    init() {
        self.feature = 0
        self.threshold = 0
        self.left = 0
        self.right = 0
    }
    init(feature: Int, threshold: Double, left: Double, right: Double) {
        self.feature = feature
        self.threshold = threshold
        self.left = left
        self.right = right
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func mean(_ xs: [Double]) -> Double {
        var sum: Double = 0.0
        var i: Int = 0
        while (i < _int(((xs).count))) {
            sum = Double((sum + Double(_idx(xs, i))))
            i = _int((i &+ 1))
        }
        return (sum / Double((Double(_int(((xs).count))) * 1.0)))
    }
    func stump_predict(_ s: Stump, _ x: [Double]) -> Double {
        if (Double(_idx(x, s.feature)) < s.threshold) {
            return s.left
        }
        return s.right
    }
    func train_stump(_ features: [[Double]], _ residuals: [Double]) -> Stump {
        var best_feature: Int = 0
        var best_threshold: Double = 0.0
        var best_error: Double = 1000000000.0
        var best_left: Double = 0.0
        var best_right: Double = 0.0
        let num_features: Int = _int((((_idx(features, 0) as! [Double])).count))
        var f: Int = 0
        while (f < num_features) {
            var i: Int = 0
            while (i < _int(((features).count))) {
                let threshold: Double = Double(_idx(_idx(features, i)!, f))
                var left: [Double] = ([] as! [Double])
                var right: [Double] = ([] as! [Double])
                var j: Int = 0
                while (j < _int(((features).count))) {
                    if (Double(_idx(_idx(features, j)!, f)) < threshold) {
                        left = ((_concat(left, ({
                            var _arr: [Double] = []
                            _arr = _append(_arr, Double(_idx(residuals, j)))
                            return _arr
                        }() as! [Double])) as! [Any?]) as! [Double])
                    } else {
                        right = ((_concat(right, ({
                            var _arr: [Double] = []
                            _arr = _append(_arr, Double(_idx(residuals, j)))
                            return _arr
                        }() as! [Double])) as! [Any?]) as! [Double])
                    }
                    j = _int((j &+ 1))
                }
                if ((_int(((left).count)) != 0) && (_int(((right).count)) != 0)) {
                    let left_mean: Double = Double(mean((left as! [Double])))
                    let right_mean: Double = Double(mean((right as! [Double])))
                    var err: Double = 0.0
                    j = 0
                    while (j < _int(((features).count))) {
                        let pred: Double = Double(((Double(_idx(_idx(features, j)!, f)) < threshold) ? left_mean : right_mean))
                        let diff: Double = (Double(_idx(residuals, j)) - pred)
                        err = Double((err + (diff * diff)))
                        j = _int((j &+ 1))
                    }
                    if (err < best_error) {
                        best_error = Double(err)
                        best_feature = Int(f)
                        best_threshold = Double(threshold)
                        best_left = Double(left_mean)
                        best_right = Double(right_mean)
                    }
                }
                i = _int((i &+ 1))
            }
            f = _int((f &+ 1))
        }
        return Stump(feature: Int(best_feature), threshold: Double(best_threshold), left: Double(best_left), right: Double(best_right))
    }
    func boost(_ features: [[Double]], _ targets: [Int], _ rounds: Int) -> [Stump] {
        var model: [Stump] = ([] as! [Stump])
        var preds: [Double] = ([] as! [Double])
        var i: Int = 0
        while (i < _int(((targets).count))) {
            preds = ((_concat(preds, ({
                var _arr: [Double] = []
                _arr = _append(_arr, 0.0)
                return _arr
            }() as! [Double])) as! [Any?]) as! [Double])
            i = _int((i &+ 1))
        }
        var r: Int = 0
        while (r < rounds) {
            var residuals: [Double] = ([] as! [Double])
            var j: Int = 0
            while (j < _int(((targets).count))) {
                residuals = ((_concat(residuals, ({
                    var _arr: [Double] = []
                    _arr = _append(_arr, (Double((_idx(targets, j) as? Int ?? 0)) - Double(_idx(preds, j))))
                    return _arr
                }() as! [Double])) as! [Any?]) as! [Double])
                j = _int((j &+ 1))
            }
            let stump: Stump = train_stump((features as! [[Double]]), (residuals as! [Double]))
            model = ((_concat(model, ({
                var _arr: [Stump] = []
                _arr = _append(_arr, stump)
                return _arr
            }() as! [Stump])) as! [Any?]) as! [Stump])
            j = 0
            while (j < _int(((preds).count))) {
                preds = _set(preds, j, Double((Double(_idx(preds, j)) + Double(stump_predict((stump as! Stump), (_idx(features, j) as! [Double]))))))
                j = _int((j &+ 1))
            }
            r = _int((r &+ 1))
        }
        return model
    }
    func predict(_ model: [Stump], _ x: [Double]) -> Double {
        var score: Double = 0.0
        var i: Int = 0
        while (i < _int(((model).count))) {
            let s: Stump = (_idx(model, i) as! Stump)
            if (Double(_idx(x, s.feature)) < s.threshold) {
                score = Double((score + s.left))
            } else {
                score = Double((score + s.right))
            }
            i = _int((i &+ 1))
        }
        return score
    }
    func main() {
        let features: [[Double]] = ({
            var _arr: [[Double]] = []
            _arr = _append(_arr, ({
                var _arr: [Double] = []
                _arr = _append(_arr, 5.1)
                _arr = _append(_arr, 3.5)
                return _arr
            }() as! [Double]))
            _arr = _append(_arr, ({
                var _arr: [Double] = []
                _arr = _append(_arr, 4.9)
                _arr = _append(_arr, 3.0)
                return _arr
            }() as! [Double]))
            _arr = _append(_arr, ({
                var _arr: [Double] = []
                _arr = _append(_arr, 6.2)
                _arr = _append(_arr, 3.4)
                return _arr
            }() as! [Double]))
            _arr = _append(_arr, ({
                var _arr: [Double] = []
                _arr = _append(_arr, 5.9)
                _arr = _append(_arr, 3.0)
                return _arr
            }() as! [Double]))
            return _arr
        }() as! [[Double]])
        let targets: [Int] = ({
            var _arr: [Int] = []
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 1)
            _arr = _append(_arr, 1)
            return _arr
        }() as! [Int])
        let model: [Stump] = (boost((features as! [[Double]]), (targets as! [Int]), 3) as! [Stump])
        var out: String = ""
        var i: Int = 0
        while (i < _int(((features).count))) {
            let s: Double = Double(predict((model as! [Stump]), (_idx(features, i) as! [Double])))
            let label: Int = _int(((s >= 0.5) ? 1 : 0))
            if (i == 0) {
                out = _p(label)
            } else {
                out = (((out + " ") + _p(label)) as! String)
            }
            i = _int((i &+ 1))
        }
        print(_p(out))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
