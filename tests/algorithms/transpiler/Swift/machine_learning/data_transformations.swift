// Generated by Mochi transpiler v0.10.61 on 2025-08-08 16:01:30 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return nil
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func floor(_ x: Double) -> Double {
        var i: Int = Int(x)
        if (Double(i) > x) {
            i = _int((i &- 1))
        }
        return Double(i)
    }
    func pow10(_ n: Int) -> Double {
        var result: Double = 1.0
        var i: Int = 0
        while (i < n) {
            result = Double((result * 10.0))
            i = _int((i &+ 1))
        }
        return result
    }
    func round(_ x: Double, _ n: Int) -> Double {
        let m = Double(pow10(n))
        let y = Double(floor(Double(((x * m) + 0.5))))
        return (y / m)
    }
    func sqrtApprox(_ x: Double) -> Double {
        var guess: Double = x
        var i: Int = 0
        while (i < 20) {
            guess = Double((Double((guess + (x / guess))) / 2.0))
            i = _int((i &+ 1))
        }
        return guess
    }
    func mean(_ data: [Double]) -> Double {
        var total: Double = 0.0
        var i: Int = 0
        let n = _int(((data).count))
        while (i < n) {
            total = Double((total + Double(_idx(data, i))))
            i = _int((i &+ 1))
        }
        return (total / Double(n))
    }
    func stdev(_ data: [Double]) -> Double {
        let n = _int(((data).count))
        if (n <= 1) {
            _ = fatalError("data length must be > 1")
        }
        let m = Double(mean((data as! [Double])))
        var sum_sq: Double = 0.0
        var i: Int = 0
        while (i < n) {
            let diff = (Double(_idx(data, i)) - m)
            sum_sq = Double((sum_sq + (diff * diff)))
            i = _int((i &+ 1))
        }
        return Double(sqrtApprox(Double((sum_sq / Double((n &- 1))))))
    }
    func normalization(_ data: [Double], _ ndigits: Int) -> [Double] {
        let x_min = Double((data.min()!))
        let x_max = Double((data.max()!))
        let denom = (x_max - x_min)
        var result: [Double] = ([] as! [Double])
        var i: Int = 0
        let n = _int(((data).count))
        while (i < n) {
            let norm = (Double((Double(_idx(data, i)) - x_min)) / denom)
            result = (_append(result, Double(round(Double(norm), ndigits))) as! [Double])
            i = _int((i &+ 1))
        }
        return result
    }
    func standardization(_ data: [Double], _ ndigits: Int) -> [Double] {
        let mu = Double(mean((data as! [Double])))
        let sigma = Double(stdev((data as! [Double])))
        var result: [Double] = ([] as! [Double])
        var i: Int = 0
        let n = _int(((data).count))
        while (i < n) {
            let z = (Double((Double(_idx(data, i)) - mu)) / sigma)
            result = (_append(result, Double(round(Double(z), ndigits))) as! [Double])
            i = _int((i &+ 1))
        }
        return result
    }
    print(_p("[" + (normalization(([2.0, 7.0, 10.0, 20.0, 30.0, 50.0] as! [Double]), 3) as! [Double]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    print(_p("[" + (normalization(([5.0, 10.0, 15.0, 20.0, 25.0] as! [Double]), 3) as! [Double]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    print(_p("[" + (standardization(([2.0, 7.0, 10.0, 20.0, 30.0, 50.0] as! [Double]), 3) as! [Double]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    print(_p("[" + (standardization(([5.0, 10.0, 15.0, 20.0, 25.0] as! [Double]), 3) as! [Double]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
