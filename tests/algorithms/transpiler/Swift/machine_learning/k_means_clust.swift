// Generated by Mochi transpiler v0.10.62 on 2025-08-09 16:38:08 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
struct KMeansResult: Codable {
    var centroids: [[Double]]
    var assignments: [Int]
    var heterogeneity: [Double]
    init() {
        self.centroids = []
        self.assignments = []
        self.heterogeneity = []
    }
    init(centroids: [[Double]], assignments: [Int], heterogeneity: [Double]) {
        self.centroids = centroids
        self.assignments = assignments
        self.heterogeneity = heterogeneity
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func distance_sq(_ a: [Double], _ b: [Double]) -> Double {
        var sum = 0.0
        for i in 0..<_int(((a).count)) {
            let diff = (Double(_idx(a, i)) - Double(_idx(b, i)))
            sum = Double((sum + (diff * diff)))
        }
        return sum
    }
    func assign_clusters(_ data: [[Double]], _ centroids: [[Double]]) -> [Int] {
        var assignments: [Int] = ([] as! [Int])
        for i in 0..<_int(((data).count)) {
            var best_idx = 0
            var best = Double(distance_sq((_idx(data, i) as! [Double]), (_idx(centroids, 0) as! [Double])))
            for j in 1..<_int(((centroids).count)) {
                let dist = Double(distance_sq((_idx(data, i) as! [Double]), (_idx(centroids, j) as! [Double])))
                if (dist < best) {
                    best = Double(dist)
                    best_idx = Int(j)
                }
            }
            assignments = (_append(assignments, best_idx) as! [Int])
        }
        return assignments
    }
    func revise_centroids(_ data: [[Double]], _ k: Int, _ assignment: [Int]) -> [[Double]] {
        let dim = _int((((_idx(data, 0) as! [Double])).count))
        var sums: [[Double]] = ([] as! [[Double]])
        var counts: [Int] = ([] as! [Int])
        for i in 0..<k {
            var row: [Double] = ([] as! [Double])
            for j in 0..<dim {
                row = (_append(row, 0.0) as! [Double])
            }
            sums = (_append(sums, row) as! [[Double]])
            counts = (_append(counts, 0) as! [Int])
        }
        for i in 0..<_int(((data).count)) {
            let c = (_idx(assignment, i) as? Int ?? 0)
            counts = _set(counts, c, _int(((_idx(counts, c) as? Int ?? 0) &+ 1)))
            for j in 0..<dim {
                var _tmp2 = (_idx(sums, c) as! [Double])
                _tmp2 = _set(_tmp2, j, Double((Double(_idx(_idx(sums, c)!, j)) + Double(_idx(_idx(data, i)!, j)))))
                sums = _set(sums, c, (_tmp2 as! [Double]))
            }
        }
        var centroids: [[Double]] = ([] as! [[Double]])
        for i in 0..<k {
            var row: [Double] = ([] as! [Double])
            if ((_idx(counts, i) as? Int ?? 0) > 0) {
                for j in 0..<dim {
                    row = (_append(row, (Double(_idx(_idx(sums, i)!, j)) / Double(_idx(counts, i)))) as! [Double])
                }
            } else {
                for j in 0..<dim {
                    row = (_append(row, 0.0) as! [Double])
                }
            }
            centroids = (_append(centroids, row) as! [[Double]])
        }
        return centroids
    }
    func compute_heterogeneity(_ data: [[Double]], _ centroids: [[Double]], _ assignment: [Int]) -> Double {
        var total = 0.0
        for i in 0..<_int(((data).count)) {
            let c = (_idx(assignment, i) as? Int ?? 0)
            total = Double((total + Double(distance_sq((_idx(data, i) as! [Double]), (_idx(centroids, c) as! [Double])))))
        }
        return total
    }
    func lists_equal(_ a: [Int], _ b: [Int]) -> Bool {
        if (_int(((a).count)) != _int(((b).count))) {
            return false
        }
        for i in 0..<_int(((a).count)) {
            if ((_idx(a, i) as? Int ?? 0) != (_idx(b, i) as? Int ?? 0)) {
                return false
            }
        }
        return true
    }
    func kmeans(_ data: [[Double]], _ k: Int, _ initial_centroids: [[Double]], _ max_iter: Int) -> KMeansResult {
        var centroids = initial_centroids
        var assignment: [Int] = ([] as! [Int])
        var prev: [Int] = ([] as! [Int])
        var heterogeneity: [Double] = ([] as! [Double])
        var iter = 0
        while (iter < max_iter) {
            assignment = (assign_clusters((data as! [[Double]]), (centroids as! [[Double]])) as! [Int])
            centroids = (revise_centroids((data as! [[Double]]), k, (assignment as! [Int])) as! [[Double]])
            let h = Double(compute_heterogeneity((data as! [[Double]]), (centroids as! [[Double]]), (assignment as! [Int])))
            heterogeneity = (_append(heterogeneity, h) as! [Double])
            if ((iter > 0) && lists_equal((prev as! [Int]), (assignment as! [Int]))) {
                break
            }
            prev = (assignment as! [Int])
            iter = _int((iter &+ 1))
        }
        return KMeansResult(centroids: (centroids as! [[Double]]), assignments: (assignment as! [Int]), heterogeneity: (heterogeneity as! [Double]))
    }
    let data: [[Double]] = ({
        var _arr: [[Double]] = []
        _arr = _append(_arr, ({
            var _arr: [Double] = []
            _arr = _append(_arr, 1.0)
            _arr = _append(_arr, 2.0)
            return _arr
        }() as! [Double]))
        _arr = _append(_arr, ({
            var _arr: [Double] = []
            _arr = _append(_arr, 1.5)
            _arr = _append(_arr, 1.8)
            return _arr
        }() as! [Double]))
        _arr = _append(_arr, ({
            var _arr: [Double] = []
            _arr = _append(_arr, 5.0)
            _arr = _append(_arr, 8.0)
            return _arr
        }() as! [Double]))
        _arr = _append(_arr, ({
            var _arr: [Double] = []
            _arr = _append(_arr, 8.0)
            _arr = _append(_arr, 8.0)
            return _arr
        }() as! [Double]))
        _arr = _append(_arr, ({
            var _arr: [Double] = []
            _arr = _append(_arr, 1.0)
            _arr = _append(_arr, 0.6)
            return _arr
        }() as! [Double]))
        _arr = _append(_arr, ({
            var _arr: [Double] = []
            _arr = _append(_arr, 9.0)
            _arr = _append(_arr, 11.0)
            return _arr
        }() as! [Double]))
        return _arr
    }() as! [[Double]])
    let k = 3
    let initial_centroids: [[Double]] = ({
        var _arr: [[Double]] = []
        _arr = _append(_arr, (_idx(data, 0) as! [Double]))
        _arr = _append(_arr, (_idx(data, 2) as! [Double]))
        _arr = _append(_arr, (_idx(data, 5) as! [Double]))
        return _arr
    }() as! [[Double]])
    let result = kmeans((data as! [[Double]]), k, (initial_centroids as! [[Double]]), 10)
    print(_p("[" + result.centroids.map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    print(_p("[" + result.assignments.map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    print(_p("[" + result.heterogeneity.map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
