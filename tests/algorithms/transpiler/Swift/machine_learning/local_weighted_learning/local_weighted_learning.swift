// Generated by Mochi transpiler v0.10.62 on 2025-08-09 10:33:36 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _json(_ v: Any) {
    if JSONSerialization.isValidJSONObject(v),
    let data = try? JSONSerialization.data(withJSONObject: v, options: [.sortedKeys, .prettyPrinted]),
    let str = String(data: data, encoding: .utf8) {
        print(str)
    } else {
        print(_p(v))
    }
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func expApprox(_ x: Double) -> Double {
        if (x < 0.0) {
            return (1.0 / Double(expApprox(Double(-x))))
        }
        if (x > 1.0) {
            let half = Double(expApprox(Double((x / 2.0))))
            return (half * half)
        }
        var sum = 1.0
        var term = 1.0
        var n = 1
        while (n < 20) {
            term = Double(((term * x) / Double(n)))
            sum = Double((sum + term))
            n = _int((n &+ 1))
        }
        return sum
    }
    func transpose(_ mat: [[Double]]) -> [[Double]] {
        let rows = _int(((mat).count))
        let cols = _int((((_idx(mat, 0) as! [Double])).count))
        var res: [[Double]] = ([] as! [[Double]])
        var i = 0
        while (i < cols) {
            var row: [Double] = ([] as! [Double])
            var j = 0
            while (j < rows) {
                row = (_append(row, Double(_idx(_idx(mat, j)!, i))) as! [Double])
                j = _int((j &+ 1))
            }
            res = (_append(res, row) as! [[Double]])
            i = _int((i &+ 1))
        }
        return res
    }
    func matMul(_ a: [[Double]], _ b: [[Double]]) -> [[Double]] {
        let a_rows = _int(((a).count))
        let a_cols = _int((((_idx(a, 0) as! [Double])).count))
        let b_cols = _int((((_idx(b, 0) as! [Double])).count))
        var res: [[Double]] = ([] as! [[Double]])
        var i = 0
        while (i < a_rows) {
            var row: [Double] = ([] as! [Double])
            var j = 0
            while (j < b_cols) {
                var sum = 0.0
                var k = 0
                while (k < a_cols) {
                    sum = Double((sum + (Double(_idx(_idx(a, i)!, k)) * Double(_idx(_idx(b, k)!, j)))))
                    k = _int((k &+ 1))
                }
                row = (_append(row, sum) as! [Double])
                j = _int((j &+ 1))
            }
            res = (_append(res, row) as! [[Double]])
            i = _int((i &+ 1))
        }
        return res
    }
    func matInv(_ mat: [[Double]]) -> [[Double]] {
        let n = _int(((mat).count))
        var aug: [[Double]] = ([] as! [[Double]])
        var i = 0
        while (i < n) {
            var row: [Double] = ([] as! [Double])
            var j = 0
            while (j < n) {
                row = (_append(row, Double(_idx(_idx(mat, i)!, j))) as! [Double])
                j = _int((j &+ 1))
            }
            j = 0
            while (j < n) {
                if (i == j) {
                    row = (_append(row, 1.0) as! [Double])
                } else {
                    row = (_append(row, 0.0) as! [Double])
                }
                j = _int((j &+ 1))
            }
            aug = (_append(aug, row) as! [[Double]])
            i = _int((i &+ 1))
        }
        var col = 0
        while (col < n) {
            let pivot = Double(_idx(_idx(aug, col)!, col))
            if (pivot == 0.0) {
                _ = fatalError("Matrix is singular")
            }
            var j = 0
            while (j < (2 &* n)) {
                var _tmp4 = (_idx(aug, col) as! [Double])
                _tmp4 = _set(_tmp4, j, Double((Double(_idx(_idx(aug, col)!, j)) / pivot)))
                aug = _set(aug, col, (_tmp4 as! [Double]))
                j = _int((j &+ 1))
            }
            var r = 0
            while (r < n) {
                if (r != col) {
                    let factor = Double(_idx(_idx(aug, r)!, col))
                    j = 0
                    while (j < (2 &* n)) {
                        var _tmp5 = (_idx(aug, r) as! [Double])
                        _tmp5 = _set(_tmp5, j, Double((Double(_idx(_idx(aug, r)!, j)) - (factor * Double(_idx(_idx(aug, col)!, j))))))
                        aug = _set(aug, r, (_tmp5 as! [Double]))
                        j = _int((j &+ 1))
                    }
                }
                r = _int((r &+ 1))
            }
            col = _int((col &+ 1))
        }
        var inv: [[Double]] = ([] as! [[Double]])
        i = 0
        while (i < n) {
            var row: [Double] = ([] as! [Double])
            var j = 0
            while (j < n) {
                row = (_append(row, Double(_idx(_idx(aug, i)!, (j &+ n)))) as! [Double])
                j = _int((j &+ 1))
            }
            inv = (_append(inv, row) as! [[Double]])
            i = _int((i &+ 1))
        }
        return inv
    }
    func weight_matrix(_ point: [Double], _ x_train: [[Double]], _ tau: Double) -> [[Double]] {
        let m = _int(((x_train).count))
        var weights: [[Double]] = ([] as! [[Double]])
        var i = 0
        while (i < m) {
            var row: [Double] = ([] as! [Double])
            var j = 0
            while (j < m) {
                if (i == j) {
                    row = (_append(row, 1.0) as! [Double])
                } else {
                    row = (_append(row, 0.0) as! [Double])
                }
                j = _int((j &+ 1))
            }
            weights = (_append(weights, row) as! [[Double]])
            i = _int((i &+ 1))
        }
        var j = 0
        while (j < m) {
            var diff_sq = 0.0
            var k = 0
            while (k < _int(((point).count))) {
                let diff = (Double(_idx(point, k)) - Double(_idx(_idx(x_train, j)!, k)))
                diff_sq = Double((diff_sq + (diff * diff)))
                k = _int((k &+ 1))
            }
            var _tmp6 = (_idx(weights, j) as! [Double])
            _tmp6 = _set(_tmp6, j, Double(expApprox(Double((-diff_sq / Double(((2.0 * tau) * tau)))))))
            weights = _set(weights, j, (_tmp6 as! [Double]))
            j = _int((j &+ 1))
        }
        return weights
    }
    func local_weight(_ point: [Double], _ x_train: [[Double]], _ y_train: [Double], _ tau: Double) -> [[Double]] {
        let w: [[Double]] = (weight_matrix((point as! [Double]), (x_train as! [[Double]]), Double(tau)) as! [[Double]])
        let x_t: [[Double]] = (transpose((x_train as! [[Double]])) as! [[Double]])
        let x_t_w: [[Double]] = (matMul((x_t as! [[Double]]), (w as! [[Double]])) as! [[Double]])
        let x_t_w_x: [[Double]] = (matMul((x_t_w as! [[Double]]), (x_train as! [[Double]])) as! [[Double]])
        let inv_part: [[Double]] = (matInv((x_t_w_x as! [[Double]])) as! [[Double]])
        var y_col: [[Double]] = ([] as! [[Double]])
        var i = 0
        while (i < _int(((y_train).count))) {
            y_col = (_append(y_col, ({
                var _arr: [Double] = []
                _arr = _append(_arr, Double(_idx(y_train, i)))
                return _arr
            }() as! [Double])) as! [[Double]])
            i = _int((i &+ 1))
        }
        let x_t_w_y: [[Double]] = (matMul((x_t_w as! [[Double]]), (y_col as! [[Double]])) as! [[Double]])
        return (matMul((inv_part as! [[Double]]), (x_t_w_y as! [[Double]])) as! [[Double]])
    }
    func local_weight_regression(_ x_train: [[Double]], _ y_train: [Double], _ tau: Double) -> [Double] {
        let m = _int(((x_train).count))
        var preds: [Double] = ([] as! [Double])
        var i = 0
        while (i < m) {
            let theta: [[Double]] = (local_weight((_idx(x_train, i) as! [Double]), (x_train as! [[Double]]), (y_train as! [Double]), Double(tau)) as! [[Double]])
            var weights_vec: [Double] = ([] as! [Double])
            var k = 0
            while (k < _int(((theta).count))) {
                weights_vec = (_append(weights_vec, Double(_idx(_idx(theta, k)!, 0))) as! [Double])
                k = _int((k &+ 1))
            }
            var pred = 0.0
            var j = 0
            while (j < _int((((_idx(x_train, i) as! [Double])).count))) {
                pred = Double((pred + (Double(_idx(_idx(x_train, i)!, j)) * Double(_idx(weights_vec, j)))))
                j = _int((j &+ 1))
            }
            preds = (_append(preds, pred) as! [Double])
            i = _int((i &+ 1))
        }
        return preds
    }
    let x_train: [[Double]] = ({
        var _arr: [[Double]] = []
        _arr = _append(_arr, ({
            var _arr: [Double] = []
            _arr = _append(_arr, 16.99)
            _arr = _append(_arr, 10.34)
            return _arr
        }() as! [Double]))
        _arr = _append(_arr, ({
            var _arr: [Double] = []
            _arr = _append(_arr, 21.01)
            _arr = _append(_arr, 23.68)
            return _arr
        }() as! [Double]))
        _arr = _append(_arr, ({
            var _arr: [Double] = []
            _arr = _append(_arr, 24.59)
            _arr = _append(_arr, 25.69)
            return _arr
        }() as! [Double]))
        return _arr
    }() as! [[Double]])
    let y_train: [Double] = ({
        var _arr: [Double] = []
        _arr = _append(_arr, 1.01)
        _arr = _append(_arr, 1.66)
        _arr = _append(_arr, 3.5)
        return _arr
    }() as! [Double])
    var preds: [Double] = (local_weight_regression((x_train as! [[Double]]), (y_train as! [Double]), 0.6) as! [Double])
    _ = _json(preds)
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
