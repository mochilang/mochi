// Generated by Mochi transpiler v0.10.62 on 2025-08-09 10:33:12 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
struct Point: Codable {
    var x: Int
    var y: Int
    init() {
        self.x = 0
        self.y = 0
    }
    init(x: Int, y: Int) {
        self.x = x
        self.y = y
    }
}
struct Node: Codable {
    var pos: Point
    var parent: Point
    var g: Int
    var h: Int
    var f: Int
    init() {
        self.pos = Point()
        self.parent = Point()
        self.g = 0
        self.h = 0
        self.f = 0
    }
    init(pos: Point, parent: Point, g: Int, h: Int, f: Int) {
        self.pos = pos
        self.parent = parent
        self.g = g
        self.h = h
        self.f = f
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func get_neighbours(_ p: Point, _ x_limit: Int, _ y_limit: Int) -> [Point] {
        let deltas: [Point] = ({
            var _arr: [Point] = []
            _arr = _append(_arr, Point(x: _int((0 &- 1)), y: _int((0 &- 1))))
            _arr = _append(_arr, Point(x: _int((0 &- 1)), y: 0))
            _arr = _append(_arr, Point(x: _int((0 &- 1)), y: 1))
            _arr = _append(_arr, Point(x: 0, y: _int((0 &- 1))))
            _arr = _append(_arr, Point(x: 0, y: 1))
            _arr = _append(_arr, Point(x: 1, y: _int((0 &- 1))))
            _arr = _append(_arr, Point(x: 1, y: 0))
            _arr = _append(_arr, Point(x: 1, y: 1))
            return _arr
        }() as! [Point])
        var neighbours: [Point] = ([] as! [Point])
        for d in deltas {
            let nx = (p.x &+ d.x)
            let ny = (p.y &+ d.y)
            if ((((0 <= nx) && (nx < x_limit)) && (0 <= ny)) && (ny < y_limit)) {
                neighbours = (_append(neighbours, Point(x: Int(nx), y: Int(ny))) as! [Point])
            }
        }
        return neighbours
    }
    func contains(_ nodes: [Node], _ p: Point) -> Bool {
        for n in nodes {
            if ((n.pos.x == p.x) && (n.pos.y == p.y)) {
                return true
            }
        }
        return false
    }
    func get_node(_ nodes: [Node], _ p: Point) -> Node {
        for n in nodes {
            if ((n.pos.x == p.x) && (n.pos.y == p.y)) {
                return n
            }
        }
        return Node(pos: (p as! Point), parent: (Point(x: _int((0 &- 1)), y: _int((0 &- 1))) as! Point), g: 0, h: 0, f: 0)
    }
    func astar(_ x_limit: Int, _ y_limit: Int, _ start: Point, _ goal: Point) -> [Point] {
        var open: [Node] = ([] as! [Node])
        var closed: [Node] = ([] as! [Node])
        open = (_append(open, Node(pos: (start as! Point), parent: (Point(x: _int((0 &- 1)), y: _int((0 &- 1))) as! Point), g: 0, h: 0, f: 0)) as! [Node])
        var current = (_idx(open, 0) as! Node)
        while (_int(((open).count)) > 0) {
            var min_index = 0
            var i = 1
            while (i < _int(((open).count))) {
                if (String(describing: (_idx(open, i)!.f)) < String(describing: (_idx(open, min_index)!.f))
                ) {
                    min_index = Int(i)
                }
                i = _int((i &+ 1))
            }
            current = (_idx(open, min_index) as! Node)
            var new_open: [Node] = ([] as! [Node])
            var j = 0
            while (j < _int(((open).count))) {
                if (j != min_index) {
                    new_open = (_append(new_open, (_idx(open, j) as! Node)) as! [Node])
                }
                j = _int((j &+ 1))
            }
            open = (new_open as! [Node])
            closed = (_append(closed, current) as! [Node])
            if ((current.pos.x == goal.x) && (current.pos.y == goal.y)) {
                break
            }
            let neighbours: [Point] = (get_neighbours((current.pos as! Point), x_limit, y_limit) as! [Point])
            for np in neighbours {
                if contains((closed as! [Node]), (np as! Point)) {
                    continue
                }
                let g = (current.g &+ 1)
                let dx = (goal.x &- np.x)
                let dy = (goal.y &- np.y)
                let h = ((dx &* dx) &+ (dy &* dy))
                let f = (g &+ h)
                var skip = false
                for node in open {
                    if (((node.pos.x == np.x) && (node.pos.y == np.y)) && (node.f < f)) {
                        skip = true
                    }
                }
                if skip {
                    continue
                }
                open = (_append(open, Node(pos: (np as! Point), parent: (current.pos as! Point), g: Int(g), h: Int(h), f: Int(f))) as! [Node])
            }
        }
        var path: [Point] = ([] as! [Point])
        path = (_append(path, current.pos) as! [Point])
        while (!((current.parent.x == _int((0 &- 1))) && (current.parent.y == _int((0 &- 1))))) {
            current = (get_node((closed as! [Node]), (current.parent as! Point)) as! Node)
            path = (_append(path, current.pos) as! [Point])
        }
        var rev: [Point] = ([] as! [Point])
        var k = (_int(((path).count)) &- 1)
        while (k >= 0) {
            rev = (_append(rev, (_idx(path, k) as! Point)) as! [Point])
            k = _int((k &- 1))
        }
        return rev
    }
    func create_world(_ x_limit: Int, _ y_limit: Int) -> [[Int]] {
        var world: [[Int]] = ([] as! [[Int]])
        var i = 0
        while (i < x_limit) {
            var row: [Int] = ([] as! [Int])
            var j = 0
            while (j < y_limit) {
                row = (_append(row, 0) as! [Int])
                j = _int((j &+ 1))
            }
            world = (_append(world, row) as! [[Int]])
            i = _int((i &+ 1))
        }
        return world
    }
    func mark_path(_ world: inout [[Int]], _ path: [Point]) {
        for p in path {
            var _tmp2 = (_idx(world, p.x) as! [Int])
            _tmp2 = _set(_tmp2, p.y, 1)
            world = _set(world, p.x, (_tmp2 as! [Int]))
        }
    }
    func print_world(_ world: [[Int]]) {
        for row in world {
            print(_p("[" + row.map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
        }
    }
    let world_x = 5
    let world_y = 5
    let start = Point(x: 0, y: 0)
    let goal = Point(x: 4, y: 4)
    var path: [Point] = (astar(world_x, world_y, (start as! Point), (goal as! Point)) as! [Point])
    print(_p((((((((("path from (" + _p(start.x)) + ", ") + _p(start.y)) + ") to (") + _p(goal.x)) + ", ") + _p(goal.y)) + ")")))
    var world: [[Int]] = (create_world(world_x, world_y) as! [[Int]])
    _ = mark_path(&world, (path as! [Point]))
    _ = print_world((world as! [[Int]]))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
