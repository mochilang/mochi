// Generated by Mochi transpiler v0.10.67 on 2025-08-16 21:28:26 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first!
}
func _idx<K: Hashable, V>(_ m: [K: V], _ k: K) -> V? {
    return m[k]
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
struct SVC: Codable {
    var weights: [Double]
    var bias: Double
    var lr: Double
    var lambda: Double
    var epochs: Int
    init() {
        self.weights = []
        self.bias = 0
        self.lr = 0
        self.lambda = 0
        self.epochs = 0
    }
    init(weights: [Double], bias: Double, lr: Double, lambda: Double, epochs: Int) {
        self.weights = weights
        self.bias = bias
        self.lr = lr
        self.lambda = lambda
        self.epochs = epochs
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func dot(_ a: [Double], _ b: [Double]) -> Double {
        var s = 0.0
        var i = 0
        while (i < _int(((a).count))) {
            s = Double((s + (Double(_idx(a, i)) * Double(_idx(b, i)))))
            i = _int((i &+ 1))
        }
        return s
    }
    func new_svc(_ lr: Double, _ lambda: Double, _ epochs: Int) -> SVC {
        return SVC(weights: ([] as! [Double]), bias: 0.0, lr: Double(lr), lambda: Double(lambda), epochs: Int(epochs))
    }
    func fit(_ model: SVC, _ xs: [[Double]], _ ys: [Int]) -> SVC {
        let n_features = _int((((_idx(xs, 0) as! [Double])).count))
        var w: [Double] = ([] as! [Double])
        var i = 0
        while (i < n_features) {
            w = (_append(w, 0.0) as! [Double])
            i = _int((i &+ 1))
        }
        var b = 0.0
        var epoch = 0
        while (epoch < model.epochs) {
            var j = 0
            while (j < _int(((xs).count))) {
                let x: [Double] = (_idx(xs, j) as! [Double])
                let y = Double(_idx(ys, j))
                let prod = (Double(dot((w as! [Double]), (x as! [Double]))) + b)
                if ((y * prod) < 1.0) {
                    var k = 0
                    while (k < _int(((w).count))) {
                        w = _set(w, k, { let _tmp0 = Double((Double(_idx(w, k)) + (model.lr * Double(((y * Double(_idx(x, k))) - ((2.0 * model.lambda) * Double(_idx(w, k)))))))); return _tmp0 }())
                        k = _int((k &+ 1))
                    }
                    b = Double((b + (model.lr * y)))
                } else {
                    var k = 0
                    while (k < _int(((w).count))) {
                        w = _set(w, k, { let _tmp1 = Double((Double(_idx(w, k)) - (model.lr * Double(((2.0 * model.lambda) * Double(_idx(w, k))))))); return _tmp1 }())
                        k = _int((k &+ 1))
                    }
                }
                j = _int((j &+ 1))
            }
            epoch = _int((epoch &+ 1))
        }
        return SVC(weights: (w as! [Double]), bias: Double(b), lr: Double(model.lr), lambda: Double(model.lambda), epochs: (model.epochs as? Int ?? 0))
    }
    func predict(_ model: SVC, _ x: [Double]) -> Int {
        let s = (Double(dot((model.weights as! [Double]), (x as! [Double]))) + model.bias)
        if (s >= 0.0) {
            return 1
        } else {
            return -1
        }
    }
    let xs: [[Double]] = ({
        var _arr: [[Double]] = []
        _arr = _append(_arr, ({
            var _arr: [Double] = []
            _arr = _append(_arr, 0.0)
            _arr = _append(_arr, 1.0)
            return _arr
        }() as! [Double]))
        _arr = _append(_arr, ({
            var _arr: [Double] = []
            _arr = _append(_arr, 0.0)
            _arr = _append(_arr, 2.0)
            return _arr
        }() as! [Double]))
        _arr = _append(_arr, ({
            var _arr: [Double] = []
            _arr = _append(_arr, 1.0)
            _arr = _append(_arr, 1.0)
            return _arr
        }() as! [Double]))
        _arr = _append(_arr, ({
            var _arr: [Double] = []
            _arr = _append(_arr, 1.0)
            _arr = _append(_arr, 2.0)
            return _arr
        }() as! [Double]))
        return _arr
    }() as! [[Double]])
    let ys: [Int] = ({
        var _arr: [Int] = []
        _arr = _append(_arr, 1)
        _arr = _append(_arr, 1)
        _arr = _append(_arr, -1)
        _arr = _append(_arr, -1)
        return _arr
    }() as! [Int])
    let base = new_svc(0.01, 0.01, 1000)
    let model = fit((base as! SVC), (xs as! [[Double]]), (ys as! [Int]))
    print(_p(_int(predict((model as! SVC), ({
        var _arr: [Double] = []
        _arr = _append(_arr, 0.0)
        _arr = _append(_arr, 1.0)
        return _arr
    }() as! [Double])))))
    print(_p(_int(predict((model as! SVC), ({
        var _arr: [Double] = []
        _arr = _append(_arr, 1.0)
        _arr = _append(_arr, 1.0)
        return _arr
    }() as! [Double])))))
    print(_p(_int(predict((model as! SVC), ({
        var _arr: [Double] = []
        _arr = _append(_arr, 2.0)
        _arr = _append(_arr, 2.0)
        return _arr
    }() as! [Double])))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
