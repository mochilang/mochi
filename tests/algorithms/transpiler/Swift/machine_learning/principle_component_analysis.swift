// Generated by Mochi transpiler v0.10.62 on 2025-08-09 10:33:50 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
struct PCAResult: Codable {
    var transformed: [[Double]]
    var variance_ratio: [Double]
    init() {
        self.transformed = []
        self.variance_ratio = []
    }
    init(transformed: [[Double]], variance_ratio: [Double]) {
        self.transformed = transformed
        self.variance_ratio = variance_ratio
    }
}
struct Eigen: Codable {
    var values: [Double]
    var vectors: [[Double]]
    init() {
        self.values = []
        self.vectors = []
    }
    init(values: [Double], vectors: [[Double]]) {
        self.values = values
        self.vectors = vectors
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func sqrt(_ x: Double) -> Double {
        var guess = Double(((x > 1.0) ? (x / 2.0) : 1.0))
        var i = 0
        while (i < 20) {
            guess = Double((0.5 * Double((guess + (x / guess)))))
            i = _int((i &+ 1))
        }
        return guess
    }
    func mean(_ xs: [Double]) -> Double {
        var sum = 0.0
        var i = 0
        while (i < _int(((xs).count))) {
            sum = Double((sum + Double(_idx(xs, i))))
            i = _int((i &+ 1))
        }
        return (sum / Double(_int(((xs).count))))
    }
    func standardize(_ data: [[Double]]) -> [[Double]] {
        let n_samples = _int(((data).count))
        let n_features = _int((((_idx(data, 0) as! [Double])).count))
        var means: [Double] = ([] as! [Double])
        var stds: [Double] = ([] as! [Double])
        var j = 0
        while (j < n_features) {
            var column: [Double] = ([] as! [Double])
            var i = 0
            while (i < n_samples) {
                column = (_append(column, Double(_idx(_idx(data, i)!, j))) as! [Double])
                i = _int((i &+ 1))
            }
            let m = Double(mean((column as! [Double])))
            means = (_append(means, m) as! [Double])
            var variance = 0.0
            var k = 0
            while (k < n_samples) {
                let diff = (Double(_idx(column, k)) - m)
                variance = Double((variance + (diff * diff)))
                k = _int((k &+ 1))
            }
            stds = (_append(stds, Double(sqrt(Double((variance / Double(_int((n_samples &- 1)))))))) as! [Double])
            j = _int((j &+ 1))
        }
        var standardized: [[Double]] = ([] as! [[Double]])
        var r = 0
        while (r < n_samples) {
            var row: [Double] = ([] as! [Double])
            var c = 0
            while (c < n_features) {
                row = (_append(row, (Double((Double(_idx(_idx(data, r)!, c)) - Double(_idx(means, c)))) / Double(_idx(stds, c)))) as! [Double])
                c = _int((c &+ 1))
            }
            standardized = (_append(standardized, row) as! [[Double]])
            r = _int((r &+ 1))
        }
        return standardized
    }
    func covariance_matrix(_ data: [[Double]]) -> [[Double]] {
        let n_samples = _int(((data).count))
        let n_features = _int((((_idx(data, 0) as! [Double])).count))
        var cov: [[Double]] = ([] as! [[Double]])
        var i = 0
        while (i < n_features) {
            var row: [Double] = ([] as! [Double])
            var j = 0
            while (j < n_features) {
                var sum = 0.0
                var k = 0
                while (k < n_samples) {
                    sum = Double((sum + (Double(_idx(_idx(data, k)!, i)) * Double(_idx(_idx(data, k)!, j)))))
                    k = _int((k &+ 1))
                }
                row = (_append(row, (sum / Double(_int((n_samples &- 1))))) as! [Double])
                j = _int((j &+ 1))
            }
            cov = (_append(cov, row) as! [[Double]])
            i = _int((i &+ 1))
        }
        return cov
    }
    func normalize(_ vec: [Double]) -> [Double] {
        var sum = 0.0
        var i = 0
        while (i < _int(((vec).count))) {
            sum = Double((sum + (Double(_idx(vec, i)) * Double(_idx(vec, i)))))
            i = _int((i &+ 1))
        }
        let n = Double(sqrt(Double(sum)))
        var res: [Double] = ([] as! [Double])
        var j = 0
        while (j < _int(((vec).count))) {
            res = (_append(res, (Double(_idx(vec, j)) / n)) as! [Double])
            j = _int((j &+ 1))
        }
        return res
    }
    func eigen_decomposition_2x2(_ matrix: [[Double]]) -> Eigen {
        let a = Double(_idx(_idx(matrix, 0)!, 0))
        let b = Double(_idx(_idx(matrix, 0)!, 1))
        let c = Double(_idx(_idx(matrix, 1)!, 1))
        let diff = (a - c)
        let discriminant = Double(sqrt(Double(((diff * diff) + ((4.0 * b) * b)))))
        let lambda1 = (Double(((a + c) + discriminant)) / 2.0)
        let lambda2 = (Double(((a + c) - discriminant)) / 2.0)
        var v1: [Double] = []
        var v2: [Double] = []
        if (b != 0.0) {
            v1 = (normalize(({
                var _arr: [Double] = []
                _arr = _append(_arr, (lambda1 - c))
                _arr = _append(_arr, b)
                return _arr
            }() as! [Double])) as! [Double])
            v2 = (normalize(({
                var _arr: [Double] = []
                _arr = _append(_arr, (lambda2 - c))
                _arr = _append(_arr, b)
                return _arr
            }() as! [Double])) as! [Double])
        } else {
            v1 = ({
                var _arr: [Double] = []
                _arr = _append(_arr, 1.0)
                _arr = _append(_arr, 0.0)
                return _arr
            }() as! [Double])
            v2 = ({
                var _arr: [Double] = []
                _arr = _append(_arr, 0.0)
                _arr = _append(_arr, 1.0)
                return _arr
            }() as! [Double])
        }
        var eigenvalues: [Double] = ({
            var _arr: [Double] = []
            _arr = _append(_arr, lambda1)
            _arr = _append(_arr, lambda2)
            return _arr
        }() as! [Double])
        var eigenvectors: [[Double]] = ({
            var _arr: [[Double]] = []
            _arr = _append(_arr, v1)
            _arr = _append(_arr, v2)
            return _arr
        }() as! [[Double]])
        if (Double(_idx(eigenvalues, 0)) < Double(_idx(eigenvalues, 1))) {
            let tmp_val = Double(_idx(eigenvalues, 0))
            eigenvalues = _set(eigenvalues, 0, Double(_idx(eigenvalues, 1)))
            eigenvalues = _set(eigenvalues, 1, Double(tmp_val))
            let tmp_vec: [Double] = (_idx(eigenvectors, 0) as! [Double])
            eigenvectors = _set(eigenvectors, 0, (_idx(eigenvectors, 1) as! [Double]))
            eigenvectors = _set(eigenvectors, 1, (tmp_vec as! [Double]))
        }
        return Eigen(values: (eigenvalues as! [Double]), vectors: (eigenvectors as! [[Double]]))
    }
    func transpose(_ matrix: [[Double]]) -> [[Double]] {
        let rows = _int(((matrix).count))
        let cols = _int((((_idx(matrix, 0) as! [Double])).count))
        var trans: [[Double]] = ([] as! [[Double]])
        var i = 0
        while (i < cols) {
            var row: [Double] = ([] as! [Double])
            var j = 0
            while (j < rows) {
                row = (_append(row, Double(_idx(_idx(matrix, j)!, i))) as! [Double])
                j = _int((j &+ 1))
            }
            trans = (_append(trans, row) as! [[Double]])
            i = _int((i &+ 1))
        }
        return trans
    }
    func matrix_multiply(_ a: [[Double]], _ b: [[Double]]) -> [[Double]] {
        let rows_a = _int(((a).count))
        let cols_a = _int((((_idx(a, 0) as! [Double])).count))
        let rows_b = _int(((b).count))
        let cols_b = _int((((_idx(b, 0) as! [Double])).count))
        if (cols_a != rows_b) {
            _ = fatalError("Incompatible matrices")
        }
        var result: [[Double]] = ([] as! [[Double]])
        var i = 0
        while (i < rows_a) {
            var row: [Double] = ([] as! [Double])
            var j = 0
            while (j < cols_b) {
                var sum = 0.0
                var k = 0
                while (k < cols_a) {
                    sum = Double((sum + (Double(_idx(_idx(a, i)!, k)) * Double(_idx(_idx(b, k)!, j)))))
                    k = _int((k &+ 1))
                }
                row = (_append(row, sum) as! [Double])
                j = _int((j &+ 1))
            }
            result = (_append(result, row) as! [[Double]])
            i = _int((i &+ 1))
        }
        return result
    }
    func apply_pca(_ data: [[Double]], _ n_components: Int) -> PCAResult {
        let standardized: [[Double]] = (standardize((data as! [[Double]])) as! [[Double]])
        let cov: [[Double]] = (covariance_matrix((standardized as! [[Double]])) as! [[Double]])
        let eig = eigen_decomposition_2x2((cov as! [[Double]]))
        let eigenvalues: [Double] = eig.values
        let eigenvectors: [[Double]] = eig.vectors
        let components: [[Double]] = (transpose((eigenvectors as! [[Double]])) as! [[Double]])
        let transformed: [[Double]] = (matrix_multiply((standardized as! [[Double]]), (components as! [[Double]])) as! [[Double]])
        let total = (Double(_idx(eigenvalues, 0)) + Double(_idx(eigenvalues, 1)))
        var ratios: [Double] = ([] as! [Double])
        var i = 0
        while (i < n_components) {
            ratios = (_append(ratios, (Double(_idx(eigenvalues, i)) / total)) as! [Double])
            i = _int((i &+ 1))
        }
        return PCAResult(transformed: (transformed as! [[Double]]), variance_ratio: (ratios as! [Double]))
    }
    let data: [[Double]] = ({
        var _arr: [[Double]] = []
        _arr = _append(_arr, ({
            var _arr: [Double] = []
            _arr = _append(_arr, 2.5)
            _arr = _append(_arr, 2.4)
            return _arr
        }() as! [Double]))
        _arr = _append(_arr, ({
            var _arr: [Double] = []
            _arr = _append(_arr, 0.5)
            _arr = _append(_arr, 0.7)
            return _arr
        }() as! [Double]))
        _arr = _append(_arr, ({
            var _arr: [Double] = []
            _arr = _append(_arr, 2.2)
            _arr = _append(_arr, 2.9)
            return _arr
        }() as! [Double]))
        _arr = _append(_arr, ({
            var _arr: [Double] = []
            _arr = _append(_arr, 1.9)
            _arr = _append(_arr, 2.2)
            return _arr
        }() as! [Double]))
        _arr = _append(_arr, ({
            var _arr: [Double] = []
            _arr = _append(_arr, 3.1)
            _arr = _append(_arr, 3.0)
            return _arr
        }() as! [Double]))
        _arr = _append(_arr, ({
            var _arr: [Double] = []
            _arr = _append(_arr, 2.3)
            _arr = _append(_arr, 2.7)
            return _arr
        }() as! [Double]))
        _arr = _append(_arr, ({
            var _arr: [Double] = []
            _arr = _append(_arr, 2.0)
            _arr = _append(_arr, 1.6)
            return _arr
        }() as! [Double]))
        _arr = _append(_arr, ({
            var _arr: [Double] = []
            _arr = _append(_arr, 1.0)
            _arr = _append(_arr, 1.1)
            return _arr
        }() as! [Double]))
        _arr = _append(_arr, ({
            var _arr: [Double] = []
            _arr = _append(_arr, 1.5)
            _arr = _append(_arr, 1.6)
            return _arr
        }() as! [Double]))
        _arr = _append(_arr, ({
            var _arr: [Double] = []
            _arr = _append(_arr, 1.1)
            _arr = _append(_arr, 0.9)
            return _arr
        }() as! [Double]))
        return _arr
    }() as! [[Double]])
    var result = apply_pca((data as! [[Double]]), 2)
    print(_p("Transformed Data (first 5 rows):"))
    var idx = 0
    while (idx < 5) {
        print(_p("[" + (_idx(result.transformed, idx) as! [Double]).map{ if let s = $0 as? String { "\"" + s.replacingOccurrences(of: "\"", with: "\\\"") + "\"" } else { _p($0) } }.joined(separator: ", ") + "]"))
        idx = _int((idx &+ 1))
    }
    print(_p("Explained Variance Ratio:"))
    print(_p("[" + result.variance_ratio.map{ if let s = $0 as? String { "\"" + s.replacingOccurrences(of: "\"", with: "\\\"") + "\"" } else { _p($0) } }.joined(separator: ", ") + "]"))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
