// Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:18:04 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    var seed: Int = 1
    func rand(_ max: Int) -> Int {
        seed = Int((Int(((seed &* 1103515245) &+ 12345)) % 2147483647))
        return (seed % max)
    }
    func generate_valid_block_size(_ message_length: Int) -> Int {
        var factors: [Int] = ([] as! [Int])
        var i: Int = 2
        while (i <= message_length) {
            if ((message_length % i) == 0) {
                factors = (_append(factors, i) as! [Int])
            }
            i = Int((i &+ 1))
        }
        let idx = Int(rand(Int(((factors).count))))
        return (factors[idx] as? Int ?? 0)
    }
    func generate_permutation_key(_ block_size: Int) -> [Int] {
        var digits: [Int] = ([] as! [Int])
        var i: Int = 0
        while (i < block_size) {
            digits = (_append(digits, i) as! [Int])
            i = Int((i &+ 1))
        }
        var j: Int = (block_size &- 1)
        while (j > 0) {
            let k = Int(rand((j &+ 1)))
            let temp = (digits[j] as? Int ?? 0)
            digits = _set(digits, j, (digits[k] as? Int ?? 0))
            digits = _set(digits, k, Int(temp))
            j = Int((j &- 1))
        }
        return digits
    }
    func encrypt(_ message: String, _ key: [Int], _ block_size: Int) -> String {
        var encrypted: String = ""
        var i: Int = 0
        while (i < Int(((message).count))) {
            let block = String(describing: String(Array(String(describing: (message as! String)))[i..<(i &+ block_size)]))
            var j: Int = 0
            while (j < block_size) {
                encrypted = ((encrypted + String(describing: String(Array(String(describing: (block as! String)))[(key[j] as? Int ?? 0)..<((key[j] as? Int ?? 0) &+ 1)]))) as! String)
                j = Int((j &+ 1))
            }
            i = Int((i &+ block_size))
        }
        return encrypted
    }
    func repeat_string(_ times: Int) -> [String] {
        var res: [String] = ([] as! [String])
        var i: Int = 0
        while (i < times) {
            res = (_append(res, "") as! [String])
            i = Int((i &+ 1))
        }
        return res
    }
    func decrypt(_ encrypted: String, _ key: [Int]) -> String {
        let klen = Int(((key).count))
        var decrypted: String = ""
        var i: Int = 0
        while (i < Int(((encrypted).count))) {
            let block = String(describing: String(Array(String(describing: (encrypted as! String)))[i..<(i &+ klen)]))
            var original: [String] = (repeat_string(klen) as! [String])
            var j: Int = 0
            while (j < klen) {
                original = _set(original, (key[j] as? Int ?? 0), String(describing: String(Array(String(describing: (block as! String)))[j..<(j &+ 1)])))
                j = Int((j &+ 1))
            }
            j = 0
            while (j < klen) {
                decrypted = ((decrypted + (original[j] as! String)) as! String)
                j = Int((j &+ 1))
            }
            i = Int((i &+ klen))
        }
        return decrypted
    }
    let message = "HELLO WORLD"
    let block_size = Int(generate_valid_block_size(Int(((message).count))))
    let key: [Int] = (generate_permutation_key(block_size) as! [Int])
    var encrypted = String(describing: encrypt((message as! String), (key as! [Int]), block_size))
    var decrypted = String(describing: decrypt((encrypted as! String), (key as! [Int])))
    print(_p(("Block size: " + String(describing: block_size))))
    print(_p(("Key: " + "[" + key.map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]")))
    print(_p(("Encrypted: " + encrypted)))
    print(_p(("Decrypted: " + decrypted)))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
