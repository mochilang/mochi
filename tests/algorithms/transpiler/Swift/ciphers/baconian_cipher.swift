// Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:58:29 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let encode_map: [String: String] = (["a": "AAAAA", "b": "AAAAB", "c": "AAABA", "d": "AAABB", "e": "AABAA", "f": "AABAB", "g": "AABBA", "h": "AABBB", "i": "ABAAA", "j": "BBBAA", "k": "ABAAB", "l": "ABABA", "m": "ABABB", "n": "ABBAA", "o": "ABBAB", "p": "ABBBA", "q": "ABBBB", "r": "BAAAA", "s": "BAAAB", "t": "BAABA", "u": "BAABB", "v": "BBBAB", "w": "BABAA", "x": "BABAB", "y": "BABBA", "z": "BABBB", " ": " "] as! [String: String])
    func make_decode_map() -> [String: String] {
        var m: [String: String] = ([:] as! [String: String])
        for k in encode_map.keys.sorted() {
            m = _set(m, (encode_map[String(String(describing: k))] as! String), (k as! String))
        }
        return m
    }
    let decode_map: [String: String] = (make_decode_map() as! [String: String])
    func split_spaces(_ s: String) -> [String] {
        var parts: [String] = ([] as! [String])
        var current: String = ""
        var i: Int = 0
        while (i < Int(((s).count))) {
            let ch = String(describing: String(Array(String(describing: (s as! String)))[i..<(i &+ 1)]))
            if (ch == " ") {
                parts = (_append(parts, current) as! [String])
                current = ""
            } else {
                current = ((current + ch) as! String)
            }
            i = Int((i &+ 1))
        }
        parts = (_append(parts, current) as! [String])
        return parts
    }
    func encode(_ word: String) -> String {
        let w = String(describing: (word.lowercased()))
        var encoded: String = ""
        var i: Int = 0
        while (i < Int(((w).count))) {
            let ch = String(describing: String(Array(String(describing: (w as! String)))[i..<(i &+ 1)]))
            if (encode_map[ch] != nil) {
                encoded = ((encoded + (encode_map[String(String(describing: ch))] as! String)) as! String)
            } else {
                _ = fatalError("encode() accepts only letters of the alphabet and spaces")
            }
            i = Int((i &+ 1))
        }
        return encoded
    }
    func decode(_ coded: String) -> String {
        var i: Int = 0
        while (i < Int(((coded).count))) {
            let ch = String(describing: String(Array(String(describing: (coded as! String)))[i..<(i &+ 1)]))
            if (((ch != "A") && (ch != "B")) && (ch != " ")) {
                _ = fatalError("decode() accepts only 'A', 'B' and spaces")
            }
            i = Int((i &+ 1))
        }
        let words: [String] = (split_spaces((coded as! String)) as! [String])
        var decoded: String = ""
        var w: Int = 0
        while (w < Int(((words).count))) {
            let word = (words[w] as! String)
            var j: Int = 0
            while (j < Int(((word).count))) {
                let segment = String(describing: String(Array(String(describing: (word as! String)))[j..<(j &+ 5)]))
                decoded = ((decoded + (decode_map[String(String(describing: segment))] as! String)) as! String)
                j = Int((j &+ 5))
            }
            if (w < (Int(((words).count)) &- 1)) {
                decoded = ((decoded + " ") as! String)
            }
            w = Int((w &+ 1))
        }
        return decoded
    }
    print(_p(String(describing: encode("hello"))))
    print(_p(String(describing: encode("hello world"))))
    print(_p(String(describing: decode("AABBBAABAAABABAABABAABBAB BABAAABBABBAAAAABABAAAABB"))))
    print(_p(String(describing: decode("AABBBAABAAABABAABABAABBAB"))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
