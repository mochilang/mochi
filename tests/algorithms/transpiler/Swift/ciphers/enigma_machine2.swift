// Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:17:20 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let abc = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    let low_abc = "abcdefghijklmnopqrstuvwxyz"
    let rotor1 = "EGZWVONAHDCLFQMSIPJBYUKXTR"
    let rotor2 = "FOBHMDKEXQNRAULPGSJVTYICZW"
    let rotor3 = "ZJXESIUQLHAVRMDOYGTNFWPBKC"
    let rotor4 = "RMDJXFUWGISLHVTCQNKYPBEZOA"
    let rotor5 = "SGLCPQWZHKXAREONTFBVIYJUDM"
    let rotor6 = "HVSICLTYKQUBXDWAJZOMFGPREN"
    let rotor7 = "RZWQHFMVDBKICJLNTUXAGYPSOE"
    let rotor8 = "LFKIJODBEGAMQPXVUHYSTCZRWN"
    let rotor9 = "KOAEGVDHXPQZMLFTYWJNBRCIUS"
    let reflector_pairs: [String] = (["AN", "BO", "CP", "DQ", "ER", "FS", "GT", "HU", "IV", "JW", "KX", "LY", "MZ"] as! [String])
    func list_contains(_ xs: [String], _ x: String) -> Bool {
        var i: Int = 0
        while (i < Int(((xs).count))) {
            if ((xs[i] as! String) == x) {
                return true
            }
            i = Int((i &+ 1))
        }
        return false
    }
    func index_in_string(_ s: String, _ ch: String) -> Int {
        var i: Int = 0
        while (i < Int(((s).count))) {
            if (String(describing: String(Array(String(describing: (s as! String)))[i..<(i &+ 1)])) == ch) {
                return i
            }
            i = Int((i &+ 1))
        }
        return -1
    }
    func contains_char(_ s: String, _ ch: String) -> Bool {
        return (Int(index_in_string((s as! String), (ch as! String))) >= 0)
    }
    func to_uppercase(_ s: String) -> String {
        var res: String = ""
        var i: Int = 0
        while (i < Int(((s).count))) {
            let ch = String(describing: String(Array(String(describing: (s as! String)))[i..<(i &+ 1)]))
            let idx = Int(index_in_string((low_abc as! String), (ch as! String)))
            if (idx >= 0) {
                res = ((res + String(describing: String(Array(String(describing: (abc as! String)))[idx..<(idx &+ 1)]))) as! String)
            } else {
                res = ((res + ch) as! String)
            }
            i = Int((i &+ 1))
        }
        return res
    }
    func plugboard_map(_ pb: [String], _ ch: String) -> String {
        var i: Int = 0
        while (i < Int(((pb).count))) {
            let pair = (pb[i] as! String)
            let a = String(describing: String(Array(String(describing: (pair as! String)))[0..<1]))
            let b = String(describing: String(Array(String(describing: (pair as! String)))[1..<2]))
            if (ch == a) {
                return b
            }
            if (ch == b) {
                return a
            }
            i = Int((i &+ 1))
        }
        return ch
    }
    func reflector_map(_ ch: String) -> String {
        var i: Int = 0
        while (i < Int(((reflector_pairs).count))) {
            let pair = (reflector_pairs[i] as! String)
            let a = String(describing: String(Array(String(describing: (pair as! String)))[0..<1]))
            let b = String(describing: String(Array(String(describing: (pair as! String)))[1..<2]))
            if (ch == a) {
                return b
            }
            if (ch == b) {
                return a
            }
            i = Int((i &+ 1))
        }
        return ch
    }
    func count_unique(_ xs: [String]) -> Int {
        var unique: [String] = ([] as! [String])
        var i: Int = 0
        while (i < Int(((xs).count))) {
            if (!list_contains((unique as! [String]), (xs[i] as! String))) {
                unique = (_append(unique, (xs[i] as! String)) as! [String])
            }
            i = Int((i &+ 1))
        }
        return Int(((unique).count))
    }
    func build_plugboard(_ pbstring: String) -> [String] {
        if (Int(((pbstring).count)) == 0) {
            return ([] as! [String])
        }
        if ((Int(((pbstring).count)) % 2) != 0) {
            _ = fatalError((("Odd number of symbols(" + String(describing: Int(((pbstring).count)))) + ")"))
        }
        var pbstring_nospace: String = ""
        var i: Int = 0
        while (i < Int(((pbstring).count))) {
            let ch = String(describing: String(Array(String(describing: (pbstring as! String)))[i..<(i &+ 1)]))
            if (ch != " ") {
                pbstring_nospace = ((pbstring_nospace + ch) as! String)
            }
            i = Int((i &+ 1))
        }
        var seen: [String] = ([] as! [String])
        i = 0
        while (i < Int(((pbstring_nospace).count))) {
            let ch = String(describing: String(Array(String(describing: (pbstring_nospace as! String)))[i..<(i &+ 1)]))
            if (!contains_char((abc as! String), (ch as! String))) {
                _ = fatalError((("'" + ch) + "' not in list of symbols"))
            }
            if list_contains((seen as! [String]), (ch as! String)) {
                _ = fatalError((("Duplicate symbol(" + ch) + ")"))
            }
            seen = (_append(seen, ch) as! [String])
            i = Int((i &+ 1))
        }
        var pb: [String] = ([] as! [String])
        i = 0
        while (i < (Int(((pbstring_nospace).count)) &- 1)) {
            let a = String(describing: String(Array(String(describing: (pbstring_nospace as! String)))[i..<(i &+ 1)]))
            let b = String(describing: String(Array(String(describing: (pbstring_nospace as! String)))[(i &+ 1)..<(i &+ 2)]))
            pb = (_append(pb, (a + b)) as! [String])
            i = Int((i &+ 2))
        }
        return pb
    }
    func validator(_ rotpos: [Int], _ rotsel: [String], _ pb: String) {
        if (Int(count_unique((rotsel as! [String]))) < 3) {
            _ = fatalError((("Please use 3 unique rotors (not " + String(describing: Int(count_unique((rotsel as! [String]))))) + ")"))
        }
        if (Int(((rotpos).count)) != 3) {
            _ = fatalError("Rotor position must have 3 values")
        }
        let r1 = (rotpos[0] as? Int ?? 0)
        let r2 = (rotpos[1] as? Int ?? 0)
        let r3 = (rotpos[2] as? Int ?? 0)
        if (!((0 < r1) && (r1 <= Int(((abc).count))))) {
            _ = fatalError((("First rotor position is not within range of 1..26 (" + String(describing: r1)) + ")"))
        }
        if (!((0 < r2) && (r2 <= Int(((abc).count))))) {
            _ = fatalError((("Second rotor position is not within range of 1..26 (" + String(describing: r2)) + ")"))
        }
        if (!((0 < r3) && (r3 <= Int(((abc).count))))) {
            _ = fatalError((("Third rotor position is not within range of 1..26 (" + String(describing: r3)) + ")"))
        }
    }
    func enigma(_ text: String, _ rotor_position: [Int], _ rotor_selection: [String], _ plugb: String) -> String {
        let up_text = String(describing: to_uppercase((text as! String)))
        let up_pb = String(describing: to_uppercase((plugb as! String)))
        _ = validator((rotor_position as! [Int]), (rotor_selection as! [String]), (up_pb as! String))
        let plugboard: [String] = (build_plugboard((up_pb as! String)) as! [String])
        var rotorpos1: Int = ((rotor_position[0] as? Int ?? 0) &- 1)
        var rotorpos2: Int = ((rotor_position[1] as? Int ?? 0) &- 1)
        var rotorpos3: Int = ((rotor_position[2] as? Int ?? 0) &- 1)
        let rotor_a = (rotor_selection[0] as! String)
        let rotor_b = (rotor_selection[1] as! String)
        let rotor_c = (rotor_selection[2] as! String)
        var result: String = ""
        var i: Int = 0
        while (i < Int(((up_text).count))) {
            var symbol: String = String(describing: String(Array(String(describing: (up_text as! String)))[i..<(i &+ 1)]))
            if contains_char((abc as! String), (symbol as! String)) {
                symbol = String(describing: plugboard_map((plugboard as! [String]), (symbol as! String)))
                var index: Int = (Int(index_in_string((abc as! String), (symbol as! String))) &+ rotorpos1)
                symbol = String(describing: String(Array(String(describing: (rotor_a as! String)))[(index % Int(((abc).count)))..<((index % Int(((abc).count))) &+ 1)]))
                index = Int((Int(index_in_string((abc as! String), (symbol as! String))) &+ rotorpos2))
                symbol = String(describing: String(Array(String(describing: (rotor_b as! String)))[(index % Int(((abc).count)))..<((index % Int(((abc).count))) &+ 1)]))
                index = Int((Int(index_in_string((abc as! String), (symbol as! String))) &+ rotorpos3))
                symbol = String(describing: String(Array(String(describing: (rotor_c as! String)))[(index % Int(((abc).count)))..<((index % Int(((abc).count))) &+ 1)]))
                symbol = String(describing: reflector_map((symbol as! String)))
                index = Int((Int(index_in_string((rotor_c as! String), (symbol as! String))) &- rotorpos3))
                if (index < 0) {
                    index = Int((index &+ Int(((abc).count))))
                }
                symbol = String(describing: String(Array(String(describing: (abc as! String)))[index..<(index &+ 1)]))
                index = Int((Int(index_in_string((rotor_b as! String), (symbol as! String))) &- rotorpos2))
                if (index < 0) {
                    index = Int((index &+ Int(((abc).count))))
                }
                symbol = String(describing: String(Array(String(describing: (abc as! String)))[index..<(index &+ 1)]))
                index = Int((Int(index_in_string((rotor_a as! String), (symbol as! String))) &- rotorpos1))
                if (index < 0) {
                    index = Int((index &+ Int(((abc).count))))
                }
                symbol = String(describing: String(Array(String(describing: (abc as! String)))[index..<(index &+ 1)]))
                symbol = String(describing: plugboard_map((plugboard as! [String]), (symbol as! String)))
                rotorpos1 = Int((rotorpos1 &+ 1))
                if (rotorpos1 >= Int(((abc).count))) {
                    rotorpos1 = 0
                    rotorpos2 = Int((rotorpos2 &+ 1))
                }
                if (rotorpos2 >= Int(((abc).count))) {
                    rotorpos2 = 0
                    rotorpos3 = Int((rotorpos3 &+ 1))
                }
                if (rotorpos3 >= Int(((abc).count))) {
                    rotorpos3 = 0
                }
            }
            result = ((result + symbol) as! String)
            i = Int((i &+ 1))
        }
        return result
    }
    func main() {
        let message = "This is my Python script that emulates the Enigma machine from WWII."
        let rotor_pos: [Int] = ([1, 1, 1] as! [Int])
        let pb = "pictures"
        let rotor_sel: [String] = ([rotor2, rotor4, rotor8] as! [String])
        let en = String(describing: enigma((message as! String), (rotor_pos as! [Int]), (rotor_sel as! [String]), (pb as! String)))
        print(_p(("Encrypted message: " + en)))
        print(_p(("Decrypted message: " + String(describing: enigma((en as! String), (rotor_pos as! [Int]), (rotor_sel as! [String]), (pb as! String))))))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
