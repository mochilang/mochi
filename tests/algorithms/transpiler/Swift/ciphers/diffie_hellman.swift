// Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:17:10 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func int_to_hex(_ n: Int) -> String {
        if (n == 0) {
            return "0"
        }
        let digits = "0123456789abcdef"
        var num: Int = n
        var res: String = ""
        while (num > 0) {
            let d = (num % 16)
            res = (((String(Array(digits)[d]) as! String) + res) as! String)
            num = Int((num / 16))
        }
        return res
    }
    var seed: Int = 123456789
    func rand_int() -> Int {
        seed = Int((Int(((1103515245 &* seed) &+ 12345)) % 2147483648))
        return seed
    }
    let PRIME = 23
    func mod_pow(_ base: Int, _ exp: Int) -> Int {
        var result: Int = 1
        var b: Int = (base % PRIME)
        var e: Int = exp
        while (e > 0) {
            if ((e % 2) == 1) {
                result = Int((Int((result &* b)) % PRIME))
            }
            b = Int((Int((b &* b)) % PRIME))
            e = Int((e / 2))
        }
        return result
    }
    func is_valid_public_key(_ key: Int) -> Bool {
        if ((key < 2) || (key > (PRIME &- 2))) {
            return false
        }
        return (Int(mod_pow(key, (Int((PRIME &- 1)) / 2))) == 1)
    }
    func generate_private_key() -> Int {
        return ((Int(rand_int()) % Int((PRIME &- 2))) &+ 2)
    }
    let generator = 5
    let alice_private = Int(generate_private_key())
    let alice_public = Int(mod_pow(generator, alice_private))
    let bob_private = Int(generate_private_key())
    let bob_public = Int(mod_pow(generator, bob_private))
    if (!is_valid_public_key(alice_public)) {
        _ = fatalError("Invalid public key")
    }
    if (!is_valid_public_key(bob_public)) {
        _ = fatalError("Invalid public key")
    }
    let alice_shared = Int(mod_pow(bob_public, alice_private))
    let bob_shared = Int(mod_pow(alice_public, bob_private))
    print(_p(String(describing: int_to_hex(alice_shared))))
    print(_p(String(describing: int_to_hex(bob_shared))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
