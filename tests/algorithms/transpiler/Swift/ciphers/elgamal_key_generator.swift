// Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:17:14 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
struct GCD: Codable {
    var g: Int
    var x: Int
    var y: Int
    init() {
        self.g = 0
        self.x = 0
        self.y = 0
    }
    init(g: Int, x: Int, y: Int) {
        self.g = g
        self.x = x
        self.y = y
    }
}
struct PublicKey: Codable {
    var key_size: Int
    var g: Int
    var e2: Int
    var p: Int
    init() {
        self.key_size = 0
        self.g = 0
        self.e2 = 0
        self.p = 0
    }
    init(key_size: Int, g: Int, e2: Int, p: Int) {
        self.key_size = key_size
        self.g = g
        self.e2 = e2
        self.p = p
    }
}
struct PrivateKey: Codable {
    var key_size: Int
    var d: Int
    init() {
        self.key_size = 0
        self.d = 0
    }
    init(key_size: Int, d: Int) {
        self.key_size = key_size
        self.d = d
    }
}
struct KeyPair: Codable {
    var public_key: PublicKey
    var private_key: PrivateKey
    init() {
        self.public_key = PublicKey()
        self.private_key = PrivateKey()
    }
    init(public_key: PublicKey, private_key: PrivateKey) {
        self.public_key = public_key
        self.private_key = private_key
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    var seed: Int = 123456789
    func rand() -> Int {
        seed = Int((Int(((seed &* 1103515245) &+ 12345)) % 2147483647))
        return seed
    }
    func rand_range(_ min: Int, _ max: Int) -> Int {
        return (min &+ (Int(rand()) % Int(((max &- min) &+ 1))))
    }
    func mod_pow(_ base: Int, _ exponent: Int, _ modulus: Int) -> Int {
        var result: Int = 1
        var b: Int = (base % modulus)
        var e: Int = exponent
        while (e > 0) {
            if ((e % 2) == 1) {
                result = Int((Int((result &* b)) % modulus))
            }
            e = Int((e / 2))
            b = Int((Int((b &* b)) % modulus))
        }
        return result
    }
    func extended_gcd(_ a: Int, _ b: Int) -> GCD {
        if (b == 0) {
            return GCD(g: a, x: 1, y: 0)
        }
        let res = extended_gcd(b, (a % b))
        return GCD(g: res.g, x: res.y, y: (res.x &- (Int((a / b)) &* res.y)))
    }
    func mod_inverse(_ a: Int, _ m: Int) -> Int {
        let res = extended_gcd(a, m)
        if (res.g != 1) {
            _ = fatalError("inverse does not exist")
        }
        let r = (res.x % m)
        if (r < 0) {
            return (r &+ m)
        }
        return r
    }
    func pow2(_ n: Int) -> Int {
        var r: Int = 1
        var i: Int = 0
        while (i < n) {
            r = Int((r &* 2))
            i = Int((i &+ 1))
        }
        return r
    }
    func is_probable_prime(_ n: Int, _ k: Int) -> Bool {
        if (n <= 1) {
            return false
        }
        if (n <= 3) {
            return true
        }
        if ((n % 2) == 0) {
            return false
        }
        var r: Int = 0
        var d: Int = (n &- 1)
        while ((d % 2) == 0) {
            d = Int((d / 2))
            r = Int((r &+ 1))
        }
        var i: Int = 0
        while (i < k) {
            let a = Int(rand_range(2, (n &- 2)))
            var x: Int = Int(mod_pow(a, d, n))
            if ((x == 1) || (x == (n &- 1))) {
                i = Int((i &+ 1))
                continue
            }
            var j: Int = 1
            var found: Bool = false
            while (j < r) {
                x = Int(mod_pow(x, 2, n))
                if (x == (n &- 1)) {
                    found = true
                    break
                }
                j = Int((j &+ 1))
            }
            if (!found) {
                return false
            }
            i = Int((i &+ 1))
        }
        return true
    }
    func generate_large_prime(_ bits: Int) -> Int {
        let min = Int(pow2((bits &- 1)))
        let max = (Int(pow2(bits)) &- 1)
        var p: Int = Int(rand_range(min, max))
        if ((p % 2) == 0) {
            p = Int((p &+ 1))
        }
        while (!is_probable_prime(p, 5)) {
            p = Int((p &+ 2))
            if (p > max) {
                p = Int((min &+ 1))
            }
        }
        return p
    }
    func primitive_root(_ p: Int) -> Int {
        while true {
            let g = Int(rand_range(3, (p &- 1)))
            if (Int(mod_pow(g, 2, p)) == 1) {
                continue
            }
            if (Int(mod_pow(g, p, p)) == 1) {
                continue
            }
            return g
        }
    }
    func generate_key(_ key_size: Int) -> KeyPair {
        let p = Int(generate_large_prime(key_size))
        let e1 = Int(primitive_root(p))
        let d = Int(rand_range(3, (p &- 1)))
        let e2 = Int(mod_inverse(Int(mod_pow(e1, d, p)), p))
        let public_key = PublicKey(key_size: key_size, g: e1, e2: e2, p: p)
        let private_key = PrivateKey(key_size: key_size, d: d)
        return KeyPair(public_key: public_key, private_key: private_key)
    }
    func main() {
        let key_size = 16
        let kp = generate_key(key_size)
        let pub = kp.public_key
        let priv = kp.private_key
        print(_p((((((((("public key: (" + String(describing: pub.key_size)) + ", ") + String(describing: pub.g)) + ", ") + String(describing: pub.e2)) + ", ") + String(describing: pub.p)) + ")")))
        print(_p((((("private key: (" + String(describing: priv.key_size)) + ", ") + String(describing: priv.d)) + ")")))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
