// Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:17:35 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let KEY_STRING = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
    func mod36(_ n: Int) -> Int {
        var r: Int = (n % 36)
        if (r < 0) {
            r = Int((r &+ 36))
        }
        return r
    }
    func gcd(_ a: Int, _ b: Int) -> Int {
        var x: Int = a
        var y: Int = b
        while (y != 0) {
            let t = y
            y = Int((x % y))
            x = Int(t)
        }
        if (x < 0) {
            x = Int(-x)
        }
        return x
    }
    func replace_letters(_ letter: String) -> Int {
        var i: Int = 0
        while (i < Int(((KEY_STRING).count))) {
            if ((String(Array(KEY_STRING)[i]) as! String) == letter) {
                return i
            }
            i = Int((i &+ 1))
        }
        return 0
    }
    func replace_digits(_ num: Int) -> String {
        let idx = Int(mod36(num))
        return (String(Array(KEY_STRING)[idx]) as! String)
    }
    func to_upper(_ c: String) -> String {
        let lower = "abcdefghijklmnopqrstuvwxyz"
        let upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
        var i: Int = 0
        while (i < Int(((lower).count))) {
            if (c == (String(Array(lower)[i]) as! String)) {
                return (String(Array(upper)[i]) as! String)
            }
            i = Int((i &+ 1))
        }
        return c
    }
    func process_text(_ text: String, _ break_key: Int) -> String {
        var chars: [String] = ([] as! [String])
        var i: Int = 0
        while (i < Int(((text).count))) {
            var c: String = String(describing: to_upper((String(Array(text)[i]) as! String)))
            var j: Int = 0
            var ok: Bool = false
            while (j < Int(((KEY_STRING).count))) {
                if ((String(Array(KEY_STRING)[j]) as! String) == c) {
                    ok = true
                    break
                }
                j = Int((j &+ 1))
            }
            if ok {
                chars = (_append(chars, c) as! [String])
            }
            i = Int((i &+ 1))
        }
        if (Int(((chars).count)) == 0) {
            return ""
        }
        let last = (chars[(Int(((chars).count)) &- 1)] as! String)
        while ((Int(((chars).count)) % break_key) != 0) {
            chars = (_append(chars, last) as! [String])
        }
        var res: String = ""
        var k: Int = 0
        while (k < Int(((chars).count))) {
            res = ((res + (chars[k] as! String)) as! String)
            k = Int((k &+ 1))
        }
        return res
    }
    func matrix_minor(_ m: [[Int]], _ row: Int, _ col: Int) -> [[Int]] {
        var res: [[Int]] = ([] as! [[Int]])
        var i: Int = 0
        while (i < Int(((m).count))) {
            if (i != row) {
                var r: [Int] = ([] as! [Int])
                var j: Int = 0
                while (j < Int((((m[i] as! [Int])).count))) {
                    if (j != col) {
                        r = (_append(r, (m[i][j] as? Int ?? 0)) as! [Int])
                    }
                    j = Int((j &+ 1))
                }
                res = (_append(res, r) as! [[Int]])
            }
            i = Int((i &+ 1))
        }
        return res
    }
    func determinant(_ m: [[Int]]) -> Int {
        let n = Int(((m).count))
        if (n == 1) {
            return (m[0][0] as? Int ?? 0)
        }
        if (n == 2) {
            return (((m[0][0] as? Int ?? 0) &* (m[1][1] as? Int ?? 0)) &- ((m[0][1] as? Int ?? 0) &* (m[1][0] as? Int ?? 0)))
        }
        var det: Int = 0
        var col: Int = 0
        while (col < n) {
            let minor_mat: [[Int]] = (matrix_minor((m as! [[Int]]), 0, col) as! [[Int]])
            var sign: Int = 1
            if ((col % 2) == 1) {
                sign = Int(-1)
            }
            det = Int((det &+ ((sign &* (m[0][col] as? Int ?? 0)) &* Int(determinant((minor_mat as! [[Int]]))))))
            col = Int((col &+ 1))
        }
        return det
    }
    func cofactor_matrix(_ m: [[Int]]) -> [[Int]] {
        let n = Int(((m).count))
        var res: [[Int]] = ([] as! [[Int]])
        var i: Int = 0
        while (i < n) {
            var row: [Int] = ([] as! [Int])
            var j: Int = 0
            while (j < n) {
                let minor_mat: [[Int]] = (matrix_minor((m as! [[Int]]), i, j) as! [[Int]])
                let det_minor = Int(determinant((minor_mat as! [[Int]])))
                var sign: Int = 1
                if ((Int((i &+ j)) % 2) == 1) {
                    sign = Int(-1)
                }
                row = (_append(row, (sign &* det_minor)) as! [Int])
                j = Int((j &+ 1))
            }
            res = (_append(res, row) as! [[Int]])
            i = Int((i &+ 1))
        }
        return res
    }
    func transpose(_ m: [[Int]]) -> [[Int]] {
        let rows = Int(((m).count))
        let cols = Int((((m[0] as! [Int])).count))
        var res: [[Int]] = ([] as! [[Int]])
        var j: Int = 0
        while (j < cols) {
            var row: [Int] = ([] as! [Int])
            var i: Int = 0
            while (i < rows) {
                row = (_append(row, (m[i][j] as? Int ?? 0)) as! [Int])
                i = Int((i &+ 1))
            }
            res = (_append(res, row) as! [[Int]])
            j = Int((j &+ 1))
        }
        return res
    }
    func matrix_mod(_ m: [[Int]]) -> [[Int]] {
        var res: [[Int]] = ([] as! [[Int]])
        var i: Int = 0
        while (i < Int(((m).count))) {
            var row: [Int] = ([] as! [Int])
            var j: Int = 0
            while (j < Int((((m[i] as! [Int])).count))) {
                row = (_append(row, Int(mod36((m[i][j] as? Int ?? 0)))) as! [Int])
                j = Int((j &+ 1))
            }
            res = (_append(res, row) as! [[Int]])
            i = Int((i &+ 1))
        }
        return res
    }
    func scalar_matrix_mult(_ s: Int, _ m: [[Int]]) -> [[Int]] {
        var res: [[Int]] = ([] as! [[Int]])
        var i: Int = 0
        while (i < Int(((m).count))) {
            var row: [Int] = ([] as! [Int])
            var j: Int = 0
            while (j < Int((((m[i] as! [Int])).count))) {
                row = (_append(row, Int(mod36((s &* (m[i][j] as? Int ?? 0))))) as! [Int])
                j = Int((j &+ 1))
            }
            res = (_append(res, row) as! [[Int]])
            i = Int((i &+ 1))
        }
        return res
    }
    func adjugate(_ m: [[Int]]) -> [[Int]] {
        let cof: [[Int]] = (cofactor_matrix((m as! [[Int]])) as! [[Int]])
        let n = Int(((cof).count))
        var res: [[Int]] = ([] as! [[Int]])
        var i: Int = 0
        while (i < n) {
            var row: [Int] = ([] as! [Int])
            var j: Int = 0
            while (j < n) {
                row = (_append(row, (cof[j][i] as? Int ?? 0)) as! [Int])
                j = Int((j &+ 1))
            }
            res = (_append(res, row) as! [[Int]])
            i = Int((i &+ 1))
        }
        return res
    }
    func multiply_matrix_vector(_ m: [[Int]], _ v: [Int]) -> [Int] {
        let n = Int(((m).count))
        var res: [Int] = ([] as! [Int])
        var i: Int = 0
        while (i < n) {
            var sum: Int = 0
            var j: Int = 0
            while (j < n) {
                sum = Int((sum &+ ((m[i][j] as? Int ?? 0) &* (v[j] as? Int ?? 0))))
                j = Int((j &+ 1))
            }
            res = (_append(res, Int(mod36(sum))) as! [Int])
            i = Int((i &+ 1))
        }
        return res
    }
    func inverse_key(_ key: [[Int]]) -> [[Int]] {
        let det_val = Int(determinant((key as! [[Int]])))
        var det_mod: Int = Int(mod36(det_val))
        var det_inv: Int = 0
        var i: Int = 0
        while (i < 36) {
            if ((Int((det_mod &* i)) % 36) == 1) {
                det_inv = Int(i)
                break
            }
            i = Int((i &+ 1))
        }
        let adj: [[Int]] = (adjugate((key as! [[Int]])) as! [[Int]])
        let tmp: [[Int]] = (scalar_matrix_mult(det_inv, (adj as! [[Int]])) as! [[Int]])
        let res: [[Int]] = (matrix_mod((tmp as! [[Int]])) as! [[Int]])
        return res
    }
    func hill_encrypt(_ key: [[Int]], _ text: String) -> String {
        let break_key = Int(((key).count))
        let processed = String(describing: process_text((text as! String), break_key))
        var encrypted: String = ""
        var i: Int = 0
        while (i < Int(((processed).count))) {
            var vec: [Int] = ([] as! [Int])
            var j: Int = 0
            while (j < break_key) {
                vec = (_append(vec, Int(replace_letters((String(Array(processed)[(i &+ j)]) as! String)))) as! [Int])
                j = Int((j &+ 1))
            }
            let enc_vec: [Int] = (multiply_matrix_vector((key as! [[Int]]), (vec as! [Int])) as! [Int])
            var k: Int = 0
            while (k < break_key) {
                encrypted = ((encrypted + String(describing: replace_digits((enc_vec[k] as? Int ?? 0)))) as! String)
                k = Int((k &+ 1))
            }
            i = Int((i &+ break_key))
        }
        return encrypted
    }
    func hill_decrypt(_ key: [[Int]], _ text: String) -> String {
        let break_key = Int(((key).count))
        let decrypt_key: [[Int]] = (inverse_key((key as! [[Int]])) as! [[Int]])
        let processed = String(describing: process_text((text as! String), break_key))
        var decrypted: String = ""
        var i: Int = 0
        while (i < Int(((processed).count))) {
            var vec: [Int] = ([] as! [Int])
            var j: Int = 0
            while (j < break_key) {
                vec = (_append(vec, Int(replace_letters((String(Array(processed)[(i &+ j)]) as! String)))) as! [Int])
                j = Int((j &+ 1))
            }
            let dec_vec: [Int] = (multiply_matrix_vector((decrypt_key as! [[Int]]), (vec as! [Int])) as! [Int])
            var k: Int = 0
            while (k < break_key) {
                decrypted = ((decrypted + String(describing: replace_digits((dec_vec[k] as? Int ?? 0)))) as! String)
                k = Int((k &+ 1))
            }
            i = Int((i &+ break_key))
        }
        return decrypted
    }
    let key: [[Int]] = ([([2, 5] as! [Int]), ([1, 6] as! [Int])] as! [[Int]])
    print(_p(String(describing: hill_encrypt((key as! [[Int]]), "testing hill cipher"))))
    print(_p(String(describing: hill_encrypt((key as! [[Int]]), "hello"))))
    print(_p(String(describing: hill_decrypt((key as! [[Int]]), "WHXYJOLM9C6XT085LL"))))
    print(_p(String(describing: hill_decrypt((key as! [[Int]]), "85FF00"))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
