// Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:18:40 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let BYTE_SIZE: Int = 256
    func pow_int(_ base: Int, _ exp: Int) -> Int {
        var result: Int = 1
        var i: Int = 0
        while (i < exp) {
            result = Int((result &* base))
            i = Int((i &+ 1))
        }
        return result
    }
    func mod_pow(_ base: Int, _ exponent: Int, _ modulus: Int) -> Int {
        var result: Int = 1
        var b: Int = (base % modulus)
        var e: Int = exponent
        while (e > 0) {
            if ((e % 2) == 1) {
                result = Int((Int((result &* b)) % modulus))
            }
            e = Int((e / 2))
            b = Int((Int((b &* b)) % modulus))
        }
        return result
    }
    func ord(_ ch: String) -> Int {
        if (ch == " ") {
            return 32
        }
        if (ch == "a") {
            return 97
        }
        if (ch == "b") {
            return 98
        }
        if (ch == "c") {
            return 99
        }
        if (ch == "d") {
            return 100
        }
        if (ch == "e") {
            return 101
        }
        if (ch == "f") {
            return 102
        }
        if (ch == "g") {
            return 103
        }
        if (ch == "h") {
            return 104
        }
        if (ch == "i") {
            return 105
        }
        if (ch == "j") {
            return 106
        }
        if (ch == "k") {
            return 107
        }
        if (ch == "l") {
            return 108
        }
        if (ch == "m") {
            return 109
        }
        if (ch == "n") {
            return 110
        }
        if (ch == "o") {
            return 111
        }
        if (ch == "p") {
            return 112
        }
        if (ch == "q") {
            return 113
        }
        if (ch == "r") {
            return 114
        }
        if (ch == "s") {
            return 115
        }
        if (ch == "t") {
            return 116
        }
        if (ch == "u") {
            return 117
        }
        if (ch == "v") {
            return 118
        }
        if (ch == "w") {
            return 119
        }
        if (ch == "x") {
            return 120
        }
        if (ch == "y") {
            return 121
        }
        if (ch == "z") {
            return 122
        }
        return 0
    }
    func chr(_ code: Int) -> String {
        if (code == 32) {
            return " "
        }
        if (code == 97) {
            return "a"
        }
        if (code == 98) {
            return "b"
        }
        if (code == 99) {
            return "c"
        }
        if (code == 100) {
            return "d"
        }
        if (code == 101) {
            return "e"
        }
        if (code == 102) {
            return "f"
        }
        if (code == 103) {
            return "g"
        }
        if (code == 104) {
            return "h"
        }
        if (code == 105) {
            return "i"
        }
        if (code == 106) {
            return "j"
        }
        if (code == 107) {
            return "k"
        }
        if (code == 108) {
            return "l"
        }
        if (code == 109) {
            return "m"
        }
        if (code == 110) {
            return "n"
        }
        if (code == 111) {
            return "o"
        }
        if (code == 112) {
            return "p"
        }
        if (code == 113) {
            return "q"
        }
        if (code == 114) {
            return "r"
        }
        if (code == 115) {
            return "s"
        }
        if (code == 116) {
            return "t"
        }
        if (code == 117) {
            return "u"
        }
        if (code == 118) {
            return "v"
        }
        if (code == 119) {
            return "w"
        }
        if (code == 120) {
            return "x"
        }
        if (code == 121) {
            return "y"
        }
        if (code == 122) {
            return "z"
        }
        return ""
    }
    func get_blocks_from_text(_ message: String, _ block_size: Int) -> [Int] {
        var block_ints: [Int] = ([] as! [Int])
        var block_start: Int = 0
        while (block_start < Int(((message).count))) {
            var block_int: Int = 0
            var i: Int = block_start
            while ((i < (block_start &+ block_size)) && (i < Int(((message).count)))) {
                block_int = Int((block_int &+ (Int(ord((String(Array(message)[i]) as! String))) &* Int(pow_int(BYTE_SIZE, (i &- block_start))))))
                i = Int((i &+ 1))
            }
            block_ints = (_append(block_ints, block_int) as! [Int])
            block_start = Int((block_start &+ block_size))
        }
        return block_ints
    }
    func get_text_from_blocks(_ block_ints: [Int], _ message_length: Int, _ block_size: Int) -> String {
        var message: String = ""
        for block_int in block_ints {
            var block: Int = block_int
            var i: Int = (block_size &- 1)
            var block_message: String = ""
            while (i >= 0) {
                if ((Int(((message).count)) &+ i) < message_length) {
                    let ascii_number = (block / Int(pow_int(BYTE_SIZE, i)))
                    block = Int((block % Int(pow_int(BYTE_SIZE, i))))
                    block_message = ((String(describing: chr(ascii_number)) + block_message) as! String)
                }
                i = Int((i &- 1))
            }
            message = ((message + block_message) as! String)
        }
        return message
    }
    func encrypt_message(_ message: String, _ n: Int, _ e: Int, _ block_size: Int) -> [Int] {
        var encrypted: [Int] = ([] as! [Int])
        let blocks: [Int] = (get_blocks_from_text((message as! String), block_size) as! [Int])
        for block in blocks {
            encrypted = (_append(encrypted, Int(mod_pow(block, e, n))) as! [Int])
        }
        return encrypted
    }
    func decrypt_message(_ blocks: [Int], _ message_length: Int, _ n: Int, _ d: Int, _ block_size: Int) -> String {
        var decrypted_blocks: [Int] = ([] as! [Int])
        for block in blocks {
            decrypted_blocks = (_append(decrypted_blocks, Int(mod_pow(block, d, n))) as! [Int])
        }
        var message: String = ""
        for num in decrypted_blocks {
            message = ((message + String(describing: chr(num))) as! String)
        }
        return message
    }
    func main() {
        let message = "hello world"
        let n = 3233
        let e = 17
        let d = 2753
        let block_size = 1
        let encrypted: [Int] = (encrypt_message((message as! String), n, e, block_size) as! [Int])
        print(_p("[" + encrypted.map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
        let decrypted = String(describing: decrypt_message((encrypted as! [Int]), Int(((message).count)), n, d, block_size))
        print(_p(decrypted))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
