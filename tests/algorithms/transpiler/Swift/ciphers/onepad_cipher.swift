// Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:17:53 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    var seed: Int = 1
    func set_seed(_ s: Int) {
        seed = Int(s)
    }
    func randint(_ a: Int, _ b: Int) -> Int {
        seed = Int((Int(((seed &* 1103515245) &+ 12345)) % 2147483648))
        return (Int((seed % Int(((b &- a) &+ 1)))) &+ a)
    }
    let ascii_chars = " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"
    func ord(_ ch: String) -> Int {
        var i: Int = 0
        while (i < Int(((ascii_chars).count))) {
            if ((String(Array(ascii_chars)[i]) as! String) == ch) {
                return (32 &+ i)
            }
            i = Int((i &+ 1))
        }
        return 0
    }
    func chr(_ code: Int) -> String {
        if ((code < 32) || (code > 126)) {
            return ""
        }
        return (String(Array(ascii_chars)[(code &- 32)]) as! String)
    }
    func encrypt(_ text: String) -> [String: [Int]] {
        var cipher: [Int] = ([] as! [Int])
        var key: [Int] = ([] as! [Int])
        var i: Int = 0
        while (i < Int(((text).count))) {
            let p = Int(ord((String(Array(text)[i]) as! String)))
            let k = Int(randint(1, 300))
            let c = (Int((p &+ k)) &* k)
            cipher = (_append(cipher, c) as! [Int])
            key = (_append(key, k) as! [Int])
            i = Int((i &+ 1))
        }
        var res: [String: [Int]] = ([:] as! [String: [Int]])
        res = _set(res, "cipher", (cipher as! [Int]))
        res = _set(res, "key", (key as! [Int]))
        return res
    }
    func decrypt(_ cipher: [Int], _ key: [Int]) -> String {
        var plain: String = ""
        var i: Int = 0
        while (i < Int(((key).count))) {
            let p = Int((Int(((cipher[i] as? Int ?? 0) &- ((key[i] as? Int ?? 0) &* (key[i] as? Int ?? 0)))) / (key[i] as? Int ?? 0)))
            plain = ((plain + String(describing: chr(p))) as! String)
            i = Int((i &+ 1))
        }
        return plain
    }
    _ = set_seed(1)
    var res: [String: [Int]] = (encrypt("Hello") as! [String: [Int]])
    var cipher: [Int] = (res[String("cipher")] as! [Int])
    var key: [Int] = (res[String("key")] as! [Int])
    print(_p("[" + cipher.map{ if let s = $0 as? String { "\"" + s.replacingOccurrences(of: "\"", with: "\\\"") + "\"" } else { _p($0) } }.joined(separator: ", ") + "]"))
    print(_p("[" + key.map{ if let s = $0 as? String { "\"" + s.replacingOccurrences(of: "\"", with: "\\\"") + "\"" } else { _p($0) } }.joined(separator: ", ") + "]"))
    print(_p(String(describing: decrypt((cipher as! [Int]), (key as! [Int])))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
