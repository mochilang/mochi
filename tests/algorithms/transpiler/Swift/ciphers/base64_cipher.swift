// Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:58:36 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _repeat(_ s: String, _ n: Int) -> String {
    if n <= 0 { return "" }
    return String(repeating: s, count: n)
}
func _json(_ v: Any) {
    if let data = try? JSONSerialization.data(withJSONObject: v, options: [.sortedKeys, .prettyPrinted]),
    let str = String(data: data, encoding: .utf8) {
        print(str)
    }
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let B64_CHARSET = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"
    func to_binary(_ n: Int) -> String {
        if (n == 0) {
            return "0"
        }
        var num: Int = n
        var res: String = ""
        while (num > 0) {
            let bit = (num % 2)
            res = ((String(describing: bit) + res) as! String)
            num = Int((num / 2))
        }
        return res
    }
    func zfill(_ s: String, _ width: Int) -> String {
        var res: String = s
        var pad: Int = (width &- Int(((s).count)))
        while (pad > 0) {
            res = (("0" + res) as! String)
            pad = Int((pad &- 1))
        }
        return res
    }
    func from_binary(_ s: String) -> Int {
        var i: Int = 0
        var result: Int = 0
        while (i < Int(((s).count))) {
            result = Int((result &* 2))
            if (String(describing: String(Array(String(describing: (s as! String)))[i..<(i &+ 1)])) == "1") {
                result = Int((result &+ 1))
            }
            i = Int((i &+ 1))
        }
        return result
    }
    func `repeat`(_ ch: String, _ times: Int) -> String {
        var res: String = ""
        var i: Int = 0
        while (i < times) {
            res = ((res + ch) as! String)
            i = Int((i &+ 1))
        }
        return res
    }
    func char_index(_ s: String, _ c: String) -> Int {
        var i: Int = 0
        while (i < Int(((s).count))) {
            if (String(describing: String(Array(String(describing: (s as! String)))[i..<(i &+ 1)])) == c) {
                return i
            }
            i = Int((i &+ 1))
        }
        return -1
    }
    func base64_encode(_ data: [Int]) -> String {
        var bits: String = ""
        var i: Int = 0
        while (i < Int(((data).count))) {
            bits = ((bits + String(describing: zfill(String(describing: to_binary((data[i] as? Int ?? 0))), 8))) as! String)
            i = Int((i &+ 1))
        }
        var pad_bits: Int = 0
        if ((Int(((bits).count)) % 6) != 0) {
            pad_bits = Int((6 &- (Int(((bits).count)) % 6)))
            bits = ((bits + String(describing: _repeat("0", pad_bits))) as! String)
        }
        var j: Int = 0
        var encoded: String = ""
        while (j < Int(((bits).count))) {
            let chunk = String(describing: String(Array(String(describing: (bits as! String)))[j..<(j &+ 6)]))
            let idx = Int(from_binary((chunk as! String)))
            encoded = ((encoded + String(describing: String(Array(String(describing: (B64_CHARSET as! String)))[idx..<(idx &+ 1)]))) as! String)
            j = Int((j &+ 6))
        }
        var pad: Int = (pad_bits / 2)
        while (pad > 0) {
            encoded = ((encoded + "=") as! String)
            pad = Int((pad &- 1))
        }
        return encoded
    }
    func base64_decode(_ s: String) -> [Int] {
        var padding: Int = 0
        var end: Int = Int(((s).count))
        while ((end > 0) && (String(describing: String(Array(String(describing: (s as! String)))[(end &- 1)..<end])) == "=")) {
            padding = Int((padding &+ 1))
            end = Int((end &- 1))
        }
        var bits: String = ""
        var k: Int = 0
        while (k < end) {
            let c = String(describing: String(Array(String(describing: (s as! String)))[k..<(k &+ 1)]))
            let idx = Int(char_index((B64_CHARSET as! String), (c as! String)))
            bits = ((bits + String(describing: zfill(String(describing: to_binary(idx)), 6))) as! String)
            k = Int((k &+ 1))
        }
        if (padding > 0) {
            bits = String(describing: String(Array(String(describing: (bits as! String)))[0..<(Int(((bits).count)) &- (padding &* 2))]))
        }
        var bytes: [Int] = ([] as! [Int])
        var m: Int = 0
        while (m < Int(((bits).count))) {
            let byte = Int(from_binary(String(describing: String(Array(String(describing: (bits as! String)))[m..<(m &+ 8)]))))
            bytes = (_append(bytes, byte) as! [Int])
            m = Int((m &+ 8))
        }
        return bytes
    }
    func main() {
        let data: [Int] = ([77, 111, 99, 104, 105] as! [Int])
        let encoded = String(describing: base64_encode((data as! [Int])))
        print(_p(encoded))
        _ = _json((base64_decode((encoded as! String)) as! [Int]))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
