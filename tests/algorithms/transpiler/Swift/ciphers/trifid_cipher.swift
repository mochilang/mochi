// Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:19:35 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let triagrams: [String] = (["111", "112", "113", "121", "122", "123", "131", "132", "133", "211", "212", "213", "221", "222", "223", "231", "232", "233", "311", "312", "313", "321", "322", "323", "331", "332", "333"] as! [String])
    func remove_spaces(_ s: String) -> String {
        var res: String = ""
        var i: Int = 0
        while (i < Int(((s).count))) {
            let c = String(describing: String(Array(String(describing: (s as! String)))[i..<(i &+ 1)]))
            if (c != " ") {
                res = ((res + c) as! String)
            }
            i = Int((i &+ 1))
        }
        return res
    }
    func char_to_trigram(_ ch: String, _ alphabet: String) -> String {
        var i: Int = 0
        while (i < Int(((alphabet).count))) {
            if (String(describing: String(Array(String(describing: (alphabet as! String)))[i..<(i &+ 1)])) == ch) {
                return (triagrams[i] as! String)
            }
            i = Int((i &+ 1))
        }
        return ""
    }
    func trigram_to_char(_ tri: String, _ alphabet: String) -> String {
        var i: Int = 0
        while (i < Int(((triagrams).count))) {
            if ((triagrams[i] as! String) == tri) {
                return String(describing: String(Array(String(describing: (alphabet as! String)))[i..<(i &+ 1)]))
            }
            i = Int((i &+ 1))
        }
        return ""
    }
    func encrypt_part(_ part: String, _ alphabet: String) -> String {
        var one: String = ""
        var two: String = ""
        var three: String = ""
        var i: Int = 0
        while (i < Int(((part).count))) {
            let tri = String(describing: char_to_trigram(String(describing: String(Array(String(describing: (part as! String)))[i..<(i &+ 1)])), (alphabet as! String)))
            one = ((one + String(describing: String(Array(String(describing: (tri as! String)))[0..<1]))) as! String)
            two = ((two + String(describing: String(Array(String(describing: (tri as! String)))[1..<2]))) as! String)
            three = ((three + String(describing: String(Array(String(describing: (tri as! String)))[2..<3]))) as! String)
            i = Int((i &+ 1))
        }
        return ((one + two) + three)
    }
    func encrypt_message(_ message: String, _ alphabet: String, _ period: Int) -> String {
        let msg = String(describing: remove_spaces((message as! String)))
        let alpha = String(describing: remove_spaces((alphabet as! String)))
        if (Int(((alpha).count)) != 27) {
            return ""
        }
        var encrypted_numeric: String = ""
        var i: Int = 0
        while (i < Int(((msg).count))) {
            var end: Int = (i &+ period)
            if (end > Int(((msg).count))) {
                end = Int(((msg).count))
            }
            let part = String(describing: String(Array(String(describing: (msg as! String)))[i..<end]))
            encrypted_numeric = ((encrypted_numeric + String(describing: encrypt_part((part as! String), (alpha as! String)))) as! String)
            i = Int((i &+ period))
        }
        var encrypted: String = ""
        var j: Int = 0
        while (j < Int(((encrypted_numeric).count))) {
            let tri = String(describing: String(Array(String(describing: (encrypted_numeric as! String)))[j..<(j &+ 3)]))
            encrypted = ((encrypted + String(describing: trigram_to_char((tri as! String), (alpha as! String)))) as! String)
            j = Int((j &+ 3))
        }
        return encrypted
    }
    func decrypt_part(_ part: String, _ alphabet: String) -> [String] {
        var converted: String = ""
        var i: Int = 0
        while (i < Int(((part).count))) {
            let tri = String(describing: char_to_trigram(String(describing: String(Array(String(describing: (part as! String)))[i..<(i &+ 1)])), (alphabet as! String)))
            converted = ((converted + tri) as! String)
            i = Int((i &+ 1))
        }
        var result: [String] = ([] as! [String])
        var tmp: String = ""
        var j: Int = 0
        while (j < Int(((converted).count))) {
            tmp = ((tmp + String(describing: String(Array(String(describing: (converted as! String)))[j..<(j &+ 1)]))) as! String)
            if (Int(((tmp).count)) == Int(((part).count))) {
                result = (_append(result, tmp) as! [String])
                tmp = ""
            }
            j = Int((j &+ 1))
        }
        return result
    }
    func decrypt_message(_ message: String, _ alphabet: String, _ period: Int) -> String {
        let msg = String(describing: remove_spaces((message as! String)))
        let alpha = String(describing: remove_spaces((alphabet as! String)))
        if (Int(((alpha).count)) != 27) {
            return ""
        }
        var decrypted_numeric: [String] = ([] as! [String])
        var i: Int = 0
        while (i < Int(((msg).count))) {
            var end: Int = (i &+ period)
            if (end > Int(((msg).count))) {
                end = Int(((msg).count))
            }
            let part = String(describing: String(Array(String(describing: (msg as! String)))[i..<end]))
            let groups: [String] = (decrypt_part((part as! String), (alpha as! String)) as! [String])
            var k: Int = 0
            while (k < Int((((groups[0] as! String)).count))) {
                let tri = ((String(describing: String(Array(String(describing: (groups[0] as! String)))[k..<(k &+ 1)])) + String(describing: String(Array(String(describing: (groups[1] as! String)))[k..<(k &+ 1)]))) + String(describing: String(Array(String(describing: (groups[2] as! String)))[k..<(k &+ 1)])))
                decrypted_numeric = (_append(decrypted_numeric, tri) as! [String])
                k = Int((k &+ 1))
            }
            i = Int((i &+ period))
        }
        var decrypted: String = ""
        var j: Int = 0
        while (j < Int(((decrypted_numeric).count))) {
            decrypted = ((decrypted + String(describing: trigram_to_char((decrypted_numeric[j] as! String), (alpha as! String)))) as! String)
            j = Int((j &+ 1))
        }
        return decrypted
    }
    func main() {
        let msg = "DEFEND THE EAST WALL OF THE CASTLE."
        let alphabet = "EPSDUCVWYM.ZLKXNBTFGORIJHAQ"
        let encrypted = String(describing: encrypt_message((msg as! String), (alphabet as! String), 5))
        let decrypted = String(describing: decrypt_message((encrypted as! String), (alphabet as! String), 5))
        print(_p(("Encrypted: " + encrypted)))
        print(_p(("Decrypted: " + decrypted)))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
