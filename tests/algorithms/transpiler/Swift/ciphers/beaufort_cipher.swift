// Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:58:42 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let ALPHABET = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    func index_of(_ ch: String) -> Int {
        for i in 0..<Int(((ALPHABET).count)) {
            if ((String(Array(ALPHABET)[i]) as! String) == ch) {
                return i
            }
        }
        return -1
    }
    func generate_key(_ message: String, _ key: String) -> String {
        var key_new: String = key
        var i: Int = 0
        while (Int(((key_new).count)) < Int(((message).count))) {
            key_new = ((key_new + (String(Array(key)[i]) as! String)) as! String)
            i = Int((i &+ 1))
            if (i == Int(((key).count))) {
                i = 0
            }
        }
        return key_new
    }
    func cipher_text(_ message: String, _ key_new: String) -> String {
        var res: String = ""
        var i: Int = 0
        for idx in 0..<Int(((message).count)) {
            let ch = (String(Array(message)[idx]) as! String)
            if (ch == " ") {
                res = ((res + " ") as! String)
            } else {
                let x = (Int(((Int(index_of((ch as! String))) &- Int(index_of((String(Array(key_new)[i]) as! String)))) &+ 26)) % 26)
                i = Int((i &+ 1))
                res = ((res + (String(Array(ALPHABET)[x]) as! String)) as! String)
            }
        }
        return res
    }
    func original_text(_ cipher: String, _ key_new: String) -> String {
        var res: String = ""
        var i: Int = 0
        for idx in 0..<Int(((cipher).count)) {
            let ch = (String(Array(cipher)[idx]) as! String)
            if (ch == " ") {
                res = ((res + " ") as! String)
            } else {
                let x = (Int(((Int(index_of((ch as! String))) &+ Int(index_of((String(Array(key_new)[i]) as! String)))) &+ 26)) % 26)
                i = Int((i &+ 1))
                res = ((res + (String(Array(ALPHABET)[x]) as! String)) as! String)
            }
        }
        return res
    }
    let message = "THE GERMAN ATTACK"
    let key = "SECRET"
    var key_new = String(describing: generate_key((message as! String), (key as! String)))
    let encrypted = String(describing: cipher_text((message as! String), (key_new as! String)))
    print(_p(("Encrypted Text = " + encrypted)))
    print(_p(("Original Text = " + String(describing: original_text((encrypted as! String), (key_new as! String))))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
