// Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:58:22 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let SYMBOLS = " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"
    func gcd(_ a: Int, _ b: Int) -> Int {
        var x: Int = a
        var y: Int = b
        while (y != 0) {
            let temp = (x % y)
            x = Int(y)
            y = Int(temp)
        }
        return x
    }
    func mod_inverse(_ a: Int, _ m: Int) -> Int {
        if (Int(gcd(a, m)) != 1) {
            _ = fatalError((((("mod inverse of " + String(describing: a)) + " and ") + String(describing: m)) + " does not exist"))
        }
        var u1: Int = 1
        var u2: Int = 0
        var u3: Int = a
        var v1: Int = 0
        var v2: Int = 1
        var v3: Int = m
        while (v3 != 0) {
            let q = (u3 / v3)
            let t1 = (u1 &- (q &* v1))
            let t2 = (u2 &- (q &* v2))
            let t3 = (u3 &- (q &* v3))
            u1 = Int(v1)
            u2 = Int(v2)
            u3 = Int(v3)
            v1 = Int(t1)
            v2 = Int(t2)
            v3 = Int(t3)
        }
        let res = (u1 % m)
        if (res < 0) {
            return (res &+ m)
        }
        return res
    }
    func find_symbol(_ ch: String) -> Int {
        var i: Int = 0
        while (i < Int(((SYMBOLS).count))) {
            if ((String(Array(SYMBOLS)[i]) as! String) == ch) {
                return i
            }
            i = Int((i &+ 1))
        }
        return -1
    }
    func check_keys(_ key_a: Int, _ key_b: Int, _ mode: String) -> Void {
        let m = Int(((SYMBOLS).count))
        if (mode == "encrypt") {
            if (key_a == 1) {
                _ = fatalError("The affine cipher becomes weak when key A is set to 1. Choose different key")
            }
            if (key_b == 0) {
                _ = fatalError("The affine cipher becomes weak when key B is set to 0. Choose different key")
            }
        }
        if (((key_a < 0) || (key_b < 0)) || (key_b > (m &- 1))) {
            _ = fatalError(("Key A must be greater than 0 and key B must be between 0 and " + String(describing: (m &- 1))))
        }
        if (Int(gcd(key_a, m)) != 1) {
            _ = fatalError((((("Key A " + String(describing: key_a)) + " and the symbol set size ") + String(describing: m)) + " are not relatively prime. Choose a different key."))
        }
    }
    func encrypt_message(_ key: Int, _ message: String) -> String {
        let m = Int(((SYMBOLS).count))
        let key_a = (key / m)
        let key_b = (key % m)
        _ = check_keys(key_a, key_b, "encrypt")
        var cipher_text: String = ""
        var i: Int = 0
        while (i < Int(((message).count))) {
            let ch = (String(Array(message)[i]) as! String)
            let index = Int(find_symbol((ch as! String)))
            if (index >= 0) {
                cipher_text = ((cipher_text + (String(Array(SYMBOLS)[(Int(((index &* key_a) &+ key_b)) % m)]) as! String)) as! String)
            } else {
                cipher_text = ((cipher_text + ch) as! String)
            }
            i = Int((i &+ 1))
        }
        return cipher_text
    }
    func decrypt_message(_ key: Int, _ message: String) -> String {
        let m = Int(((SYMBOLS).count))
        let key_a = (key / m)
        let key_b = (key % m)
        _ = check_keys(key_a, key_b, "decrypt")
        let inv = Int(mod_inverse(key_a, m))
        var plain_text: String = ""
        var i: Int = 0
        while (i < Int(((message).count))) {
            let ch = (String(Array(message)[i]) as! String)
            let index = Int(find_symbol((ch as! String)))
            if (index >= 0) {
                var n: Int = (Int((index &- key_b)) &* inv)
                let pos = (n % m)
                let final = Int(((pos < 0) ? (pos &+ m) : pos))
                plain_text = ((plain_text + (String(Array(SYMBOLS)[final]) as! String)) as! String)
            } else {
                plain_text = ((plain_text + ch) as! String)
            }
            i = Int((i &+ 1))
        }
        return plain_text
    }
    func main() -> Void {
        let key = 4545
        let msg = "The affine cipher is a type of monoalphabetic substitution cipher."
        let enc = String(describing: encrypt_message(key, (msg as! String)))
        print(_p(enc))
        print(_p(String(describing: decrypt_message(key, (enc as! String)))))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
