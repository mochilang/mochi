// Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:18:21 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let UPPER = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    let LOWER = "abcdefghijklmnopqrstuvwxyz"
    let BASE_TOP = "ABCDEFGHIJKLM"
    let BASE_BOTTOM = "NOPQRSTUVWXYZ"
    func to_upper(_ s: String) -> String {
        var res: String = ""
        var i: Int = 0
        while (i < Int(((s).count))) {
            let ch = String(describing: String(Array(String(describing: (s as! String)))[i..<(i &+ 1)]))
            var j: Int = 0
            var replaced: Bool = false
            while (j < Int(((LOWER).count))) {
                if (String(describing: String(Array(String(describing: (LOWER as! String)))[j..<(j &+ 1)])) == ch) {
                    res = ((res + String(describing: String(Array(String(describing: (UPPER as! String)))[j..<(j &+ 1)]))) as! String)
                    replaced = true
                    break
                }
                j = Int((j &+ 1))
            }
            if (!replaced) {
                res = ((res + ch) as! String)
            }
            i = Int((i &+ 1))
        }
        return res
    }
    func char_index(_ c: String) -> Int {
        var i: Int = 0
        while (i < Int(((UPPER).count))) {
            if (String(describing: String(Array(String(describing: (UPPER as! String)))[i..<(i &+ 1)])) == c) {
                return i
            }
            i = Int((i &+ 1))
        }
        return -1
    }
    func rotate_right(_ s: String, _ k: Int) -> String {
        let n = Int(((s).count))
        let shift = (k % n)
        return (String(describing: String(Array(String(describing: (s as! String)))[(n &- shift)..<n])) + String(describing: String(Array(String(describing: (s as! String)))[0..<(n &- shift)])))
    }
    func table_for(_ c: String) -> [String] {
        let idx = Int(char_index((c as! String)))
        let shift = (idx / 2)
        let row1 = String(describing: rotate_right((BASE_BOTTOM as! String), shift))
        let pair: [String] = ([BASE_TOP, row1] as! [String])
        return pair
    }
    func generate_table(_ key: String) -> [[String]] {
        let up = String(describing: to_upper((key as! String)))
        var i: Int = 0
        var result: [[String]] = ([] as! [[String]])
        while (i < Int(((up).count))) {
            let ch = String(describing: String(Array(String(describing: (up as! String)))[i..<(i &+ 1)]))
            let pair: [String] = (table_for((ch as! String)) as! [String])
            result = (_append(result, pair) as! [[String]])
            i = Int((i &+ 1))
        }
        return result
    }
    func str_index(_ s: String, _ ch: String) -> Int {
        var i: Int = 0
        while (i < Int(((s).count))) {
            if (String(describing: String(Array(String(describing: (s as! String)))[i..<(i &+ 1)])) == ch) {
                return i
            }
            i = Int((i &+ 1))
        }
        return (0 &- 1)
    }
    func get_position(_ table: [String], _ ch: String) -> [Int] {
        var row: Int = 0
        if (Int(str_index((table[0] as! String), (ch as! String))) == (0 &- 1)) {
            row = 1
        }
        let col = Int(str_index((table[row] as! String), (ch as! String)))
        return ([row, col] as! [Int])
    }
    func get_opponent(_ table: [String], _ ch: String) -> String {
        let pos: [Int] = (get_position((table as! [String]), (ch as! String)) as! [Int])
        let row = (pos[0] as? Int ?? 0)
        let col = (pos[1] as? Int ?? 0)
        if (col == (0 &- 1)) {
            return ch
        }
        if (row == 1) {
            return String(describing: String(Array(String(describing: (table[0] as! String)))[col..<(col &+ 1)]))
        }
        return String(describing: String(Array(String(describing: (table[1] as! String)))[col..<(col &+ 1)]))
    }
    func encrypt(_ key: String, _ words: String) -> String {
        let table: [[String]] = (generate_table((key as! String)) as! [[String]])
        let up_words = String(describing: to_upper((words as! String)))
        var cipher: String = ""
        var count: Int = 0
        var i: Int = 0
        while (i < Int(((up_words).count))) {
            let ch = String(describing: String(Array(String(describing: (up_words as! String)))[i..<(i &+ 1)]))
            cipher = ((cipher + String(describing: get_opponent((table[count] as! [String]), (ch as! String)))) as! String)
            count = Int((Int((count &+ 1)) % Int(((table).count))))
            i = Int((i &+ 1))
        }
        return cipher
    }
    func decrypt(_ key: String, _ words: String) -> String {
        let res = String(describing: encrypt((key as! String), (words as! String)))
        return res
    }
    func main() {
        print(_p(String(describing: encrypt("marvin", "jessica"))))
        print(_p(String(describing: decrypt("marvin", "QRACRWU"))))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
