// Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:19:40 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func indexOf(_ s: String, _ ch: String) -> Int {
        var i: Int = 0
        while (i < Int(((s).count))) {
            if (String(describing: String(Array(String(describing: (s as! String)))[i..<(i &+ 1)])) == ch) {
                return i
            }
            i = Int((i &+ 1))
        }
        return -1
    }
    func ord(_ ch: String) -> Int {
        let upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
        let idx = Int((String(describing: (upper as! String)).range(of: String(describing: (ch as! String)))?.lowerBound.utf16Offset(in: String(describing: (upper as! String))) ?? -1))
        if (idx >= 0) {
            return (65 &+ idx)
        }
        return 0
    }
    func chr(_ n: Int) -> String {
        let upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
        if ((n >= 65) && (n < 91)) {
            return String(describing: String(Array(String(describing: (upper as! String)))[(n &- 65)..<(n &- 64)]))
        }
        return "?"
    }
    func vernam_encrypt(_ plaintext: String, _ key: String) -> String {
        var ciphertext: String = ""
        var i: Int = 0
        while (i < Int(((plaintext).count))) {
            let p = (Int(ord(String(describing: String(Array(String(describing: (plaintext as! String)))[i..<(i &+ 1)])))) &- 65)
            let k = (Int(ord(String(describing: String(Array(String(describing: (key as! String)))[(i % Int(((key).count)))..<((i % Int(((key).count))) &+ 1)])))) &- 65)
            var ct: Int = (p &+ k)
            while (ct > 25) {
                ct = Int((ct &- 26))
            }
            ciphertext = ((ciphertext + String(describing: chr((ct &+ 65)))) as! String)
            i = Int((i &+ 1))
        }
        return ciphertext
    }
    func vernam_decrypt(_ ciphertext: String, _ key: String) -> String {
        var decrypted: String = ""
        var i: Int = 0
        while (i < Int(((ciphertext).count))) {
            let c = Int(ord(String(describing: String(Array(String(describing: (ciphertext as! String)))[i..<(i &+ 1)]))))
            let k = Int(ord(String(describing: String(Array(String(describing: (key as! String)))[(i % Int(((key).count)))..<((i % Int(((key).count))) &+ 1)]))))
            var val: Int = (c &- k)
            while (val < 0) {
                val = Int((val &+ 26))
            }
            decrypted = ((decrypted + String(describing: chr((val &+ 65)))) as! String)
            i = Int((i &+ 1))
        }
        return decrypted
    }
    let plaintext = "HELLO"
    let key = "KEY"
    let encrypted = String(describing: vernam_encrypt((plaintext as! String), (key as! String)))
    var decrypted = String(describing: vernam_decrypt((encrypted as! String), (key as! String)))
    print(_p(("Plaintext: " + plaintext)))
    print(_p(("Encrypted: " + encrypted)))
    print(_p(("Decrypted: " + decrypted)))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
