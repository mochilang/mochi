// Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:58:34 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _repeat(_ s: String, _ n: Int) -> String {
    if n <= 0 { return "" }
    return String(repeating: s, count: n)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let B32_CHARSET = "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567"
    func indexOfChar(_ s: String, _ ch: String) -> Int {
        var i: Int = 0
        while (i < Int(((s).count))) {
            if ((String(Array(s)[i]) as! String) == ch) {
                return i
            }
            i = Int((i &+ 1))
        }
        return -1
    }
    func ord(_ ch: String) -> Int {
        let upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
        let lower = "abcdefghijklmnopqrstuvwxyz"
        let digits = "0123456789"
        var idx: Int = Int(indexOfChar((upper as! String), (ch as! String)))
        if (idx >= 0) {
            return (65 &+ idx)
        }
        idx = Int(indexOfChar((lower as! String), (ch as! String)))
        if (idx >= 0) {
            return (97 &+ idx)
        }
        idx = Int(indexOfChar((digits as! String), (ch as! String)))
        if (idx >= 0) {
            return (48 &+ idx)
        }
        if (ch == " ") {
            return 32
        }
        if (ch == "!") {
            return 33
        }
        return 0
    }
    func chr(_ code: Int) -> String {
        let upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
        let lower = "abcdefghijklmnopqrstuvwxyz"
        let digits = "0123456789"
        if (code == 32) {
            return " "
        }
        if (code == 33) {
            return "!"
        }
        var idx: Int = (code &- 65)
        if ((idx >= 0) && (idx < Int(((upper).count)))) {
            return (String(Array(upper)[idx]) as! String)
        }
        idx = Int((code &- 97))
        if ((idx >= 0) && (idx < Int(((lower).count)))) {
            return (String(Array(lower)[idx]) as! String)
        }
        idx = Int((code &- 48))
        if ((idx >= 0) && (idx < Int(((digits).count)))) {
            return (String(Array(digits)[idx]) as! String)
        }
        return ""
    }
    func `repeat`(_ s: String, _ n: Int) -> String {
        var out: String = ""
        var i: Int = 0
        while (i < n) {
            out = ((out + s) as! String)
            i = Int((i &+ 1))
        }
        return out
    }
    func to_binary(_ n: Int, _ bits: Int) -> String {
        var v: Int = n
        var out: String = ""
        var i: Int = 0
        while (i < bits) {
            out = ((String(describing: (v % 2)) + out) as! String)
            v = Int((v / 2))
            i = Int((i &+ 1))
        }
        return out
    }
    func binary_to_int(_ bits: String) -> Int {
        var n: Int = 0
        var i: Int = 0
        while (i < Int(((bits).count))) {
            n = Int((n &* 2))
            if ((String(Array(bits)[i]) as! String) == "1") {
                n = Int((n &+ 1))
            }
            i = Int((i &+ 1))
        }
        return n
    }
    func base32_encode(_ data: String) -> String {
        var binary_data: String = ""
        var i: Int = 0
        while (i < Int(((data).count))) {
            binary_data = ((binary_data + String(describing: to_binary(Int(ord((String(Array(data)[i]) as! String))), 8))) as! String)
            i = Int((i &+ 1))
        }
        let remainder = (Int(((binary_data).count)) % 5)
        if (remainder != 0) {
            binary_data = ((binary_data + String(describing: _repeat("0", (5 &- remainder)))) as! String)
        }
        var b32_result: String = ""
        var j: Int = 0
        while (j < Int(((binary_data).count))) {
            let chunk = String(Array(binary_data)[j..<(j &+ 5)])
            let index = Int(binary_to_int((chunk as! String)))
            b32_result = ((b32_result + (String(Array(B32_CHARSET)[index]) as! String)) as! String)
            j = Int((j &+ 5))
        }
        let rem = (Int(((b32_result).count)) % 8)
        if (rem != 0) {
            b32_result = ((b32_result + String(describing: _repeat("=", (8 &- rem)))) as! String)
        }
        return b32_result
    }
    func base32_decode(_ data: String) -> String {
        var clean: String = ""
        var i: Int = 0
        while (i < Int(((data).count))) {
            let ch = (String(Array(data)[i]) as! String)
            if (ch != "=") {
                clean = ((clean + ch) as! String)
            }
            i = Int((i &+ 1))
        }
        var binary_chunks: String = ""
        i = 0
        while (i < Int(((clean).count))) {
            let idx = Int(indexOfChar((B32_CHARSET as! String), (String(Array(clean)[i]) as! String)))
            binary_chunks = ((binary_chunks + String(describing: to_binary(idx, 5))) as! String)
            i = Int((i &+ 1))
        }
        var result: String = ""
        var j: Int = 0
        while ((j &+ 8) <= Int(((binary_chunks).count))) {
            let byte_bits = String(Array(binary_chunks)[j..<(j &+ 8)])
            let code = Int(binary_to_int((byte_bits as! String)))
            result = ((result + String(describing: chr(code))) as! String)
            j = Int((j &+ 8))
        }
        return result
    }
    print(_p(String(describing: base32_encode("Hello World!"))))
    print(_p(String(describing: base32_encode("123456"))))
    print(_p(String(describing: base32_encode("some long complex string"))))
    print(_p(String(describing: base32_decode("JBSWY3DPEBLW64TMMQQQ===="))))
    print(_p(String(describing: base32_decode("GEZDGNBVGY======"))))
    print(_p(String(describing: base32_decode("ONXW2ZJANRXW4ZZAMNXW24DMMV4CA43UOJUW4ZY="))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
