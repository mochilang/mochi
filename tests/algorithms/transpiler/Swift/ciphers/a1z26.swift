// Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:58:20 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func indexOf(_ s: String, _ ch: String) -> Int {
        var i: Int = 0
        while (i < Int(((s).count))) {
            if (String(describing: String(Array(String(describing: (s as! String)))[i..<(i &+ 1)])) == ch) {
                return i
            }
            i = Int((i &+ 1))
        }
        return -1
    }
    func charToNum(_ ch: String) -> Int {
        let letters = "abcdefghijklmnopqrstuvwxyz"
        let idx = Int((String(describing: (letters as! String)).range(of: String(describing: (ch as! String)))?.lowerBound.utf16Offset(in: String(describing: (letters as! String))) ?? -1))
        if (idx >= 0) {
            return (idx &+ 1)
        }
        return 0
    }
    func numToChar(_ n: Int) -> String {
        let letters = "abcdefghijklmnopqrstuvwxyz"
        if ((n >= 1) && (n <= 26)) {
            return String(describing: String(Array(String(describing: (letters as! String)))[(n &- 1)..<n]))
        }
        return "?"
    }
    func encode(_ plain: String) -> [Int] {
        var res: [Int] = ([] as! [Int])
        var i: Int = 0
        while (i < Int(((plain).count))) {
            let ch = String(describing: (String(describing: String(Array(String(describing: (plain as! String)))[i..<(i &+ 1)])).lowercased()))
            let val = Int(charToNum((ch as! String)))
            if (val > 0) {
                res = (_append(res, val) as! [Int])
            }
            i = Int((i &+ 1))
        }
        return res
    }
    func decode(_ encoded: [Int]) -> String {
        var out: String = ""
        for n in encoded {
            out = ((out + String(describing: numToChar(n))) as! String)
        }
        return out
    }
    func main() {
        print(_p("-> "))
        let text = String(describing: ((readLine() ?? "").lowercased()))
        let enc: [Int] = (encode((text as! String)) as! [Int])
        print(_p(("Encoded: " + "[" + enc.map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]")))
        print(_p(("Decoded: " + String(describing: decode((enc as! [Int]))))))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
