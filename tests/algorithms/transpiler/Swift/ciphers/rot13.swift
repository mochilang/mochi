// Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:18:35 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let uppercase = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    let lowercase = "abcdefghijklmnopqrstuvwxyz"
    func index_of(_ s: String, _ c: String) -> Int {
        var i: Int = 0
        while (i < Int(((s).count))) {
            if (String(describing: String(Array(String(describing: (s as! String)))[i..<(i &+ 1)])) == c) {
                return i
            }
            i = Int((i &+ 1))
        }
        return -1
    }
    func dencrypt(_ s: String, _ n: Int) -> String {
        var out: String = ""
        var i: Int = 0
        while (i < Int(((s).count))) {
            let ch = String(describing: String(Array(String(describing: (s as! String)))[i..<(i &+ 1)]))
            let idx_u = Int(index_of((uppercase as! String), (ch as! String)))
            if (idx_u >= 0) {
                let new_idx = (Int((idx_u &+ n)) % 26)
                out = ((out + String(describing: String(Array(String(describing: (uppercase as! String)))[new_idx..<(new_idx &+ 1)]))) as! String)
            } else {
                let idx_l = Int(index_of((lowercase as! String), (ch as! String)))
                if (idx_l >= 0) {
                    let new_idx = (Int((idx_l &+ n)) % 26)
                    out = ((out + String(describing: String(Array(String(describing: (lowercase as! String)))[new_idx..<(new_idx &+ 1)]))) as! String)
                } else {
                    out = ((out + ch) as! String)
                }
            }
            i = Int((i &+ 1))
        }
        return out
    }
    func main() {
        let msg = "My secret bank account number is 173-52946 so don't tell anyone!!"
        let s = String(describing: dencrypt((msg as! String), 13))
        print(_p(s))
        print(_p(String(describing: (String(describing: dencrypt((s as! String), 13)) == msg))))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
