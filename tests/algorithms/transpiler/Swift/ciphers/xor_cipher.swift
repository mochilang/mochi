// Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:21:02 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func xor(_ a: Int, _ b: Int) -> Int {
        var res: Int = 0
        var bit: Int = 1
        var x: Int = a
        var y: Int = b
        while ((x > 0) || (y > 0)) {
            let abit = ((x % 2 + 2) % 2)
            let bbit = ((y % 2 + 2) % 2)
            if (abit != bbit) {
                res = Int((res &+ bit))
            }
            x = Int((x / 2))
            y = Int((y / 2))
            bit = Int((bit &* 2))
        }
        return res
    }
    let ascii = " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"
    func ord(_ ch: String) -> Int {
        var i: Int = 0
        while (i < Int(((ascii).count))) {
            if (String(Array(ascii)[i..<(i &+ 1)]) == ch) {
                return (32 &+ i)
            }
            i = Int((i &+ 1))
        }
        return 0
    }
    func chr(_ n: Int) -> String {
        if ((n >= 32) && (n < 127)) {
            return String(Array(ascii)[(n &- 32)..<(n &- 31)])
        }
        return ""
    }
    func normalize_key(_ key: Int) -> Int {
        var k: Int = key
        if (k == 0) {
            k = 1
        }
        k = Int(((k % 256 + 256) % 256))
        if (k < 0) {
            k = Int((k &+ 256))
        }
        return k
    }
    func encrypt(_ content: String, _ key: Int) -> [String] {
        let k = Int(normalize_key(key))
        var result: [String] = ([] as! [String])
        var i: Int = 0
        while (i < Int(((content).count))) {
            let c = Int(ord((String(Array(content)[i..<(i &+ 1)]) as! String)))
            let e = Int(xor(c, k))
            result = (_append(result, String(describing: chr(e))) as! [String])
            i = Int((i &+ 1))
        }
        return result
    }
    func encrypt_string(_ content: String, _ key: Int) -> String {
        let chars: [String] = (encrypt((content as! String), key) as! [String])
        var out: String = ""
        for ch in chars {
            out = ((out + ch) as! String)
        }
        return out
    }
    let sample = "hallo welt"
    let enc = String(describing: encrypt_string((sample as! String), 1))
    let dec = String(describing: encrypt_string((enc as! String), 1))
    print(_p("[" + (encrypt((sample as! String), 1) as! [String]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    print(_p(enc))
    print(_p(dec))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
