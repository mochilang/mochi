// Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:18:54 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func indexOf(_ s: String, _ ch: String) -> Int {
        var i: Int = 0
        while (i < Int(((s).count))) {
            if ((String(Array(s)[i]) as! String) == ch) {
                return i
            }
            i = Int((i &+ 1))
        }
        return -1
    }
    func ord(_ ch: String) -> Int {
        let upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
        let lower = "abcdefghijklmnopqrstuvwxyz"
        var idx: Int = Int((String(describing: (upper as! String)).range(of: String(describing: (ch as! String)))?.lowerBound.utf16Offset(in: String(describing: (upper as! String))) ?? -1))
        if (idx >= 0) {
            return (65 &+ idx)
        }
        idx = Int((String(describing: (lower as! String)).range(of: String(describing: (ch as! String)))?.lowerBound.utf16Offset(in: String(describing: (lower as! String))) ?? -1))
        if (idx >= 0) {
            return (97 &+ idx)
        }
        return 0
    }
    func chr(_ n: Int) -> String {
        let upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
        let lower = "abcdefghijklmnopqrstuvwxyz"
        if ((n >= 65) && (n < 91)) {
            return String(Array(upper)[(n &- 65)..<(n &- 64)])
        }
        if ((n >= 97) && (n < 123)) {
            return String(Array(lower)[(n &- 97)..<(n &- 96)])
        }
        return "?"
    }
    func clean_text(_ s: String) -> String {
        var out: String = ""
        var i: Int = 0
        while (i < Int(((s).count))) {
            let ch = (String(Array(s)[i]) as! String)
            if ((ch >= "A") && (ch <= "Z")) {
                out = ((out + ch) as! String)
            } else if ((ch >= "a") && (ch <= "z")) {
                out = ((out + String(describing: chr((Int(ord((ch as! String))) &- 32)))) as! String)
            }
            
            i = Int((i &+ 1))
        }
        return out
    }
    func running_key_encrypt(_ key: String, _ plaintext: String) -> String {
        let pt = String(describing: clean_text((plaintext as! String)))
        let k = String(describing: clean_text((key as! String)))
        let key_len = Int(((k).count))
        var res: String = ""
        let ord_a = Int(ord("A"))
        var i: Int = 0
        while (i < Int(((pt).count))) {
            let p = (Int(ord((String(Array(pt)[i]) as! String))) &- ord_a)
            let kv = (Int(ord((String(Array(k)[(i % key_len)]) as! String))) &- ord_a)
            let c = (Int((p &+ kv)) % 26)
            res = ((res + String(describing: chr((c &+ ord_a)))) as! String)
            i = Int((i &+ 1))
        }
        return res
    }
    func running_key_decrypt(_ key: String, _ ciphertext: String) -> String {
        let ct = String(describing: clean_text((ciphertext as! String)))
        let k = String(describing: clean_text((key as! String)))
        let key_len = Int(((k).count))
        var res: String = ""
        let ord_a = Int(ord("A"))
        var i: Int = 0
        while (i < Int(((ct).count))) {
            let c = (Int(ord((String(Array(ct)[i]) as! String))) &- ord_a)
            let kv = (Int(ord((String(Array(k)[(i % key_len)]) as! String))) &- ord_a)
            let p = (Int(((c &- kv) &+ 26)) % 26)
            res = ((res + String(describing: chr((p &+ ord_a)))) as! String)
            i = Int((i &+ 1))
        }
        return res
    }
    let key = "How does the duck know that? said Victor"
    let plaintext = "DEFEND THIS"
    let ciphertext = String(describing: running_key_encrypt((key as! String), (plaintext as! String)))
    print(_p(ciphertext))
    print(_p(String(describing: running_key_decrypt((key as! String), (ciphertext as! String)))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
