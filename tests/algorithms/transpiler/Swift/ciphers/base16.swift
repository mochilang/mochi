// Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:58:32 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func base16_encode(_ data: [Int]) -> String {
        let digits = "0123456789ABCDEF"
        var res: String = ""
        var i: Int = 0
        while (i < Int(((data).count))) {
            let b = (data[i] as? Int ?? 0)
            if ((b < 0) || (b > 255)) {
                _ = fatalError("byte out of range")
            }
            let hi = (b / 16)
            let lo = (b % 16)
            res = (((res + String(Array(digits)[hi..<(hi &+ 1)])) + String(Array(digits)[lo..<(lo &+ 1)])) as! String)
            i = Int((i &+ 1))
        }
        return res
    }
    func base16_decode(_ data: String) -> [Int] {
        let digits = "0123456789ABCDEF"
        if ((Int(((data).count)) % 2) != 0) {
            _ = fatalError("Base16 encoded data is invalid: Data does not have an even number of hex digits.")
        }
        func hex_value(_ ch: String) -> Int {
            var j: Int = 0
            while (j < 16) {
                if (String(Array(digits)[j..<(j &+ 1)]) == ch) {
                    return j
                }
                j = Int((j &+ 1))
            }
            return -1
        }
        var out: [Int] = ([] as! [Int])
        var i: Int = 0
        while (i < Int(((data).count))) {
            let hi_char = String(Array(data)[i..<(i &+ 1)])
            let lo_char = String(Array(data)[(i &+ 1)..<(i &+ 2)])
            let hi = Int(hex_value((hi_char as! String)))
            let lo = Int(hex_value((lo_char as! String)))
            if ((hi < 0) || (lo < 0)) {
                _ = fatalError("Base16 encoded data is invalid: Data is not uppercase hex or it contains invalid characters.")
            }
            out = (_append(out, ((hi &* 16) &+ lo)) as! [Int])
            i = Int((i &+ 2))
        }
        return out
    }
    let example1: [Int] = ([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33] as! [Int])
    let example2: [Int] = ([72, 69, 76, 76, 79, 32, 87, 79, 82, 76, 68, 33] as! [Int])
    print(_p(String(describing: base16_encode((example1 as! [Int])))))
    print(_p(String(describing: base16_encode((example2 as! [Int])))))
    print(_p(String(describing: base16_encode(([] as! [Int])))))
    print(_p("[" + (base16_decode("48656C6C6F20576F726C6421") as! [Int]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    print(_p("[" + (base16_decode("48454C4C4F20574F524C4421") as! [Int]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    print(_p("[" + (base16_decode("") as! [Int]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
