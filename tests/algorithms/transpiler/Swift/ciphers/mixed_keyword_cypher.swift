// Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:17:41 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let UPPER = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    let LOWER = "abcdefghijklmnopqrstuvwxyz"
    func to_upper(_ s: String) -> String {
        var res: String = ""
        var i: Int = 0
        while (i < Int(((s).count))) {
            let ch = (String(Array(s)[i]) as! String)
            var j: Int = 0
            var found: Bool = false
            while (j < 26) {
                if (ch == (String(Array(LOWER)[j]) as! String)) {
                    res = ((res + (String(Array(UPPER)[j]) as! String)) as! String)
                    found = true
                    break
                }
                j = Int((j &+ 1))
            }
            if (found == false) {
                res = ((res + ch) as! String)
            }
            i = Int((i &+ 1))
        }
        return res
    }
    func contains(_ xs: [String], _ x: String) -> Bool {
        var i: Int = 0
        while (i < Int(((xs).count))) {
            if ((xs[i] as! String) == x) {
                return true
            }
            i = Int((i &+ 1))
        }
        return false
    }
    func contains_char(_ s: String, _ ch: String) -> Bool {
        var i: Int = 0
        while (i < Int(((s).count))) {
            if ((String(Array(s)[i]) as! String) == ch) {
                return true
            }
            i = Int((i &+ 1))
        }
        return false
    }
    func get_value(_ keys: [String], _ values: [String], _ key: String) -> String? {
        var i: Int = 0
        while (i < Int(((keys).count))) {
            if ((keys[i] as! String) == key) {
                return ((values[i] as! String) as! String?)
            }
            i = Int((i &+ 1))
        }
        return nil
    }
    func print_mapping(_ keys: [String], _ values: [String]) {
        var s: String = "{"
        var i: Int = 0
        while (i < Int(((keys).count))) {
            s = ((((((s + "'") + (keys[i] as! String)) + "': '") + (values[i] as! String)) + "'") as! String)
            if ((i &+ 1) < Int(((keys).count))) {
                s = ((s + ", ") as! String)
            }
            i = Int((i &+ 1))
        }
        s = ((s + "}") as! String)
        print(_p(s))
    }
    func mixed_keyword(_ keyword: String, _ plaintext: String, _ verbose: Bool) -> String {
        let alphabet = UPPER
        let keyword_u = String(describing: to_upper((keyword as! String)))
        let plaintext_u = String(describing: to_upper((plaintext as! String)))
        var unique: [String] = ([] as! [String])
        var i: Int = 0
        while (i < Int(((keyword_u).count))) {
            let ch = (String(Array(keyword_u)[i]) as! String)
            if (contains_char((alphabet as! String), (ch as! String)) && (((unique as! [String]).contains((ch as! String))) == false)) {
                unique = (_append(unique, ch) as! [String])
            }
            i = Int((i &+ 1))
        }
        let num_unique = Int(((unique).count))
        var shifted: [String] = ([] as! [String])
        i = 0
        while (i < Int(((unique).count))) {
            shifted = (_append(shifted, (unique[i] as! String)) as! [String])
            i = Int((i &+ 1))
        }
        i = 0
        while (i < Int(((alphabet).count))) {
            let ch = (String(Array(alphabet)[i]) as! String)
            if (((unique as! [String]).contains((ch as! String))) == false) {
                shifted = (_append(shifted, ch) as! [String])
            }
            i = Int((i &+ 1))
        }
        var modified: [[String]] = ([] as! [[String]])
        var k: Int = 0
        while (k < Int(((shifted).count))) {
            var row: [String] = ([] as! [String])
            var r: Int = 0
            while ((r < num_unique) && ((k &+ r) < Int(((shifted).count)))) {
                row = (_append(row, (shifted[(k &+ r)] as! String)) as! [String])
                r = Int((r &+ 1))
            }
            modified = (_append(modified, row) as! [[String]])
            k = Int((k &+ num_unique))
        }
        var keys: [String] = ([] as! [String])
        var values: [String] = ([] as! [String])
        var column: Int = 0
        var letter_index: Int = 0
        while (column < num_unique) {
            var row_idx: Int = 0
            while (row_idx < Int(((modified).count))) {
                let row: [String] = (modified[row_idx] as! [String])
                if (Int(((row).count)) <= column) {
                    break
                }
                keys = (_append(keys, (String(Array(alphabet)[letter_index]) as! String)) as! [String])
                values = (_append(values, (row[column] as! String)) as! [String])
                letter_index = Int((letter_index &+ 1))
                row_idx = Int((row_idx &+ 1))
            }
            column = Int((column &+ 1))
        }
        if verbose {
            _ = print_mapping((keys as! [String]), (values as! [String]))
        }
        var result: String = ""
        i = 0
        while (i < Int(((plaintext_u).count))) {
            let ch = (String(Array(plaintext_u)[i]) as! String)
            let mapped: String? = String(describing: get_value((keys as! [String]), (values as! [String]), (ch as! String)))
            if (String(describing: mapped) == nil) {
                result = ((result + ch) as! String)
            } else {
                result = ((result + String(describing: mapped)) as! String)
            }
            i = Int((i &+ 1))
        }
        return result
    }
    print(_p(String(describing: mixed_keyword("college", "UNIVERSITY", true))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
