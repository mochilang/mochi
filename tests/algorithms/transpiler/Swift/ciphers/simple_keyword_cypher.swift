// Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:19:05 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func index_in_string(_ s: String, _ ch: String) -> Int {
        var i: Int = 0
        while (i < Int(((s).count))) {
            if ((String(Array(s)[i]) as! String) == ch) {
                return i
            }
            i = Int((i &+ 1))
        }
        return -1
    }
    func contains_char(_ s: String, _ ch: String) -> Bool {
        return (Int(index_in_string((s as! String), (ch as! String))) >= 0)
    }
    func is_alpha(_ ch: String) -> Bool {
        let lower = "abcdefghijklmnopqrstuvwxyz"
        let upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
        return (contains_char((lower as! String), (ch as! String)) || contains_char((upper as! String), (ch as! String)))
    }
    func to_upper(_ s: String) -> String {
        let lower = "abcdefghijklmnopqrstuvwxyz"
        let upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
        var res: String = ""
        var i: Int = 0
        while (i < Int(((s).count))) {
            let ch = (String(Array(s)[i]) as! String)
            let idx = Int(index_in_string((lower as! String), (ch as! String)))
            if (idx >= 0) {
                res = ((res + (String(Array(upper)[idx]) as! String)) as! String)
            } else {
                res = ((res + ch) as! String)
            }
            i = Int((i &+ 1))
        }
        return res
    }
    func remove_duplicates(_ key: String) -> String {
        var res: String = ""
        var i: Int = 0
        while (i < Int(((key).count))) {
            let ch = (String(Array(key)[i]) as! String)
            if ((ch == " ") || (is_alpha((ch as! String)) && (contains_char((res as! String), (ch as! String)) == false))) {
                res = ((res + ch) as! String)
            }
            i = Int((i &+ 1))
        }
        return res
    }
    func create_cipher_map(_ key: String) -> [String] {
        let alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
        let cleaned = String(describing: remove_duplicates(String(describing: to_upper((key as! String)))))
        var cipher: [String] = ([] as! [String])
        var i: Int = 0
        while (i < Int(((cleaned).count))) {
            cipher = (_append(cipher, (String(Array(cleaned)[i]) as! String)) as! [String])
            i = Int((i &+ 1))
        }
        var offset: Int = Int(((cleaned).count))
        var j: Int = Int(((cipher).count))
        while (j < 26) {
            var char: String = (String(Array(alphabet)[(j &- offset)]) as! String)
            while contains_char((cleaned as! String), (char as! String)) {
                offset = Int((offset &- 1))
                char = (String(Array(alphabet)[(j &- offset)]) as! String)
            }
            cipher = (_append(cipher, char) as! [String])
            j = Int((j &+ 1))
        }
        return cipher
    }
    func index_in_list(_ lst: [String], _ ch: String) -> Int {
        var i: Int = 0
        while (i < Int(((lst).count))) {
            if ((lst[i] as! String) == ch) {
                return i
            }
            i = Int((i &+ 1))
        }
        return -1
    }
    func encipher(_ message: String, _ cipher: [String]) -> String {
        let alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
        let msg = String(describing: to_upper((message as! String)))
        var res: String = ""
        var i: Int = 0
        while (i < Int(((msg).count))) {
            let ch = (String(Array(msg)[i]) as! String)
            let idx = Int(index_in_string((alphabet as! String), (ch as! String)))
            if (idx >= 0) {
                res = ((res + (cipher[idx] as! String)) as! String)
            } else {
                res = ((res + ch) as! String)
            }
            i = Int((i &+ 1))
        }
        return res
    }
    func decipher(_ message: String, _ cipher: [String]) -> String {
        let alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
        let msg = String(describing: to_upper((message as! String)))
        var res: String = ""
        var i: Int = 0
        while (i < Int(((msg).count))) {
            let ch = (String(Array(msg)[i]) as! String)
            let idx = Int(index_in_list((cipher as! [String]), (ch as! String)))
            if (idx >= 0) {
                res = ((res + (String(Array(alphabet)[idx]) as! String)) as! String)
            } else {
                res = ((res + ch) as! String)
            }
            i = Int((i &+ 1))
        }
        return res
    }
    let cipher_map: [String] = (create_cipher_map("Goodbye!!") as! [String])
    let encoded = String(describing: encipher("Hello World!!", (cipher_map as! [String])))
    print(_p(encoded))
    print(_p(String(describing: decipher((encoded as! String), (cipher_map as! [String])))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
