// Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:18:17 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let square: [[String]] = ([(["a", "b", "c", "d", "e"] as! [String]), (["f", "g", "h", "i", "k"] as! [String]), (["l", "m", "n", "o", "p"] as! [String]), (["q", "r", "s", "t", "u"] as! [String]), (["v", "w", "x", "y", "z"] as! [String])] as! [[String]])
    func letter_to_numbers(_ letter: String) -> [Int] {
        var i: Int = 0
        while (i < Int(((square).count))) {
            var j: Int = 0
            while (j < Int((((square[i] as! [String])).count))) {
                if ((square[i][j] as! String) == letter) {
                    return ([(i &+ 1), (j &+ 1)] as! [Int])
                }
                j = Int((j &+ 1))
            }
            i = Int((i &+ 1))
        }
        return ([0, 0] as! [Int])
    }
    func numbers_to_letter(_ index1: Int, _ index2: Int) -> String {
        return (square[(index1 &- 1)][(index2 &- 1)] as! String)
    }
    func char_to_int(_ ch: String) -> Int {
        if (ch == "1") {
            return 1
        }
        if (ch == "2") {
            return 2
        }
        if (ch == "3") {
            return 3
        }
        if (ch == "4") {
            return 4
        }
        if (ch == "5") {
            return 5
        }
        return 0
    }
    func encode(_ message: String) -> String {
        var message = message
        message = String(describing: (message.lowercased()))
        var encoded: String = ""
        var i: Int = 0
        while (i < Int(((message).count))) {
            var ch: String = (String(Array(message)[i]) as! String)
            if (ch == "j") {
                ch = "i"
            }
            if (ch != " ") {
                let nums: [Int] = (letter_to_numbers((ch as! String)) as! [Int])
                encoded = (((encoded + String(describing: (nums[0] as? Int ?? 0))) + String(describing: (nums[1] as? Int ?? 0))) as! String)
            } else {
                encoded = ((encoded + " ") as! String)
            }
            i = Int((i &+ 1))
        }
        return encoded
    }
    func decode(_ message: String) -> String {
        var decoded: String = ""
        var i: Int = 0
        while (i < Int(((message).count))) {
            if ((String(Array(message)[i]) as! String) == " ") {
                decoded = ((decoded + " ") as! String)
                i = Int((i &+ 1))
            } else {
                let index1 = Int(char_to_int((String(Array(message)[i]) as! String)))
                let index2 = Int(char_to_int((String(Array(message)[(i &+ 1)]) as! String)))
                let letter = String(describing: numbers_to_letter(index1, index2))
                decoded = ((decoded + letter) as! String)
                i = Int((i &+ 2))
            }
        }
        return decoded
    }
    print(_p(String(describing: encode("test message"))))
    print(_p(String(describing: encode("Test Message"))))
    print(_p(String(describing: decode("44154344 32154343112215"))))
    print(_p(String(describing: decode("4415434432154343112215"))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
