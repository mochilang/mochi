// Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:17:30 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    if let b = v as? BigInt { return b.toInt() }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
struct BigInt: Comparable, CustomStringConvertible {
    private var digits: [UInt32] = []
    init() {}
    init(_ v: Int) {
        var n = v
        while n > 0 { digits.append(UInt32(n % 1000000000)); n /= 1000000000 }
    }
    init(_ other: BigInt) { digits = other.digits }
    func toInt() -> Int {
        var res: Int64 = 0
        for d in digits.reversed() {
            if res > (Int64.max - Int64(d)) / 1000000000 {
                return Int.max
            }
            res = res * 1000000000 + Int64(d)
        }
        return Int(res)
    }
    static func +(lhs: BigInt, rhs: BigInt) -> BigInt {
        var carry: UInt64 = 0
        var result: [UInt32] = []
        let maxLen = max(lhs.digits.count, rhs.digits.count)
        for i in 0..<maxLen {
            let a = i < lhs.digits.count ? UInt64(lhs.digits[i]) : 0
            let b = i < rhs.digits.count ? UInt64(rhs.digits[i]) : 0
            let sum = a + b + carry
            result.append(UInt32(sum % 1000000000))
            carry = sum / 1000000000
        }
        if carry > 0 { result.append(UInt32(carry)) }
        var r = BigInt(); r.digits = result; return r
    }
    static func -(lhs: BigInt, rhs: BigInt) -> BigInt {
        var borrow: Int64 = 0
        var result: [UInt32] = []
        for i in 0..<lhs.digits.count {
            var a = Int64(lhs.digits[i]) - borrow
            let b = i < rhs.digits.count ? Int64(rhs.digits[i]) : 0
            var diff = a - b
            if diff < 0 { diff += 1000000000; borrow = 1 } else { borrow = 0 }
            result.append(UInt32(diff))
        }
        while result.last == 0 { result.removeLast(); if result.isEmpty { break } }
        var r = BigInt(); r.digits = result; return r
    }
    static func *(lhs: BigInt, rhs: BigInt) -> BigInt {
        if lhs.digits.isEmpty || rhs.digits.isEmpty { return BigInt() }
        var result = Array(repeating: UInt64(0), count: lhs.digits.count + rhs.digits.count)
        for i in 0..<lhs.digits.count {
            var carry: UInt64 = 0
            for j in 0..<rhs.digits.count {
                let idx = i + j
                let prod = UInt64(lhs.digits[i]) * UInt64(rhs.digits[j]) + result[idx] + carry
                result[idx] = prod % 1000000000
                carry = prod / 1000000000
            }
            if carry > 0 { result[i + rhs.digits.count] += carry }
        }
        var resDigits: [UInt32] = result.map { UInt32($0) }
        while resDigits.last == 0 { resDigits.removeLast(); if resDigits.isEmpty { break } }
        var r = BigInt(); r.digits = resDigits; return r
    }
    func bitLength() -> Int {
        if digits.isEmpty { return 0 }
        var v = digits.last!
        var bits = 0
        while v > 0 { v >>= 1; bits += 1 }
        return bits + (digits.count - 1) * 30
    }
    static func <(lhs: BigInt, rhs: BigInt) -> Bool {
        if lhs.digits.count != rhs.digits.count { return lhs.digits.count < rhs.digits.count }
        for i in stride(from: lhs.digits.count-1, through: 0, by: -1) {
            if lhs.digits[i] != rhs.digits[i] { return lhs.digits[i] < rhs.digits[i] }
        }
        return false
    }
    static func >(lhs: BigInt, rhs: BigInt) -> Bool { return rhs < lhs }
    static func <=(lhs: BigInt, rhs: BigInt) -> Bool { return !(rhs < lhs) }
    static func >=(lhs: BigInt, rhs: BigInt) -> Bool { return !(lhs < rhs) }
    static func /(lhs: BigInt, rhs: BigInt) -> BigInt {
        let divisor = rhs.toInt()
        if divisor == 0 { return BigInt() }
        var result: [UInt32] = Array(repeating: 0, count: lhs.digits.count)
        var rem: Int64 = 0
        for i in stride(from: lhs.digits.count - 1, through: 0, by: -1) {
            let cur = rem * 1000000000 + Int64(lhs.digits[i])
            result[i] = UInt32(cur / Int64(divisor))
            rem = cur % Int64(divisor)
        }
        var r = BigInt(); r.digits = result
        while r.digits.last == 0 { r.digits.removeLast(); if r.digits.isEmpty { break } }
        return r
    }
    static func %(lhs: BigInt, rhs: BigInt) -> BigInt {
        let divisor = rhs.toInt()
        if divisor == 0 { return BigInt() }
        var rem: Int64 = 0
        for d in lhs.digits.reversed() {
            rem = (rem * 1000000000 + Int64(d)) % Int64(divisor)
        }
        return BigInt(Int(rem))
    }
    static func +(lhs: BigInt, rhs: Int) -> BigInt { return lhs + BigInt(rhs) }
    static func +(lhs: Int, rhs: BigInt) -> BigInt { return BigInt(lhs) + rhs }
    static func ==(lhs: BigInt, rhs: BigInt) -> Bool { lhs.digits == rhs.digits }
    var description: String {
        if digits.isEmpty { return "0" }
        var s = String(digits.last!)
        for d in digits.dropLast().reversed() { s += String(format: "%09d", d) }
        return s
    }
}
extension Int { init(_ b: BigInt) { self = b.toInt() } }
extension Double { init(_ b: BigInt) { self = Double(b.toInt()) } }
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let ASCII_UPPERCASE = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    let ASCII_LOWERCASE = "abcdefghijklmnopqrstuvwxyz"
    let NEG_ONE = (0 &- 1)
    func index_of(_ s: String, _ ch: String) -> Int {
        var i: Int = 0
        while (i < Int(((s).count))) {
            if (String(describing: String(Array(String(describing: (s as! String)))[i..<(i &+ 1)])) == ch) {
                return i
            }
            i = Int((i &+ 1))
        }
        return NEG_ONE
    }
    func to_uppercase(_ s: String) -> String {
        var result: String = ""
        var i: Int = 0
        while (i < Int(((s).count))) {
            let ch = String(describing: String(Array(String(describing: (s as! String)))[i..<(i &+ 1)]))
            let idx = Int(index_of((ASCII_LOWERCASE as! String), (ch as! String)))
            if (idx == NEG_ONE) {
                result = ((result + ch) as! String)
            } else {
                result = ((result + String(describing: String(Array(String(describing: (ASCII_UPPERCASE as! String)))[idx..<(idx &+ 1)]))) as! String)
            }
            i = Int((i &+ 1))
        }
        return result
    }
    func gronsfeld(_ text: String, _ key: String) -> String {
        let ascii_len = Int(((ASCII_UPPERCASE).count))
        let key_len = Int(((key).count))
        if (key_len == 0) {
            _ = fatalError("integer modulo by zero")
        }
        let upper_text = String(describing: to_uppercase((text as! String)))
        var encrypted: String = ""
        var i: Int = 0
        while (i < Int(((upper_text).count))) {
            let ch = String(describing: String(Array(String(describing: (upper_text as! String)))[i..<(i &+ 1)]))
            let idx = Int(index_of((ASCII_UPPERCASE as! String), (ch as! String)))
            if (idx == NEG_ONE) {
                encrypted = ((encrypted + ch) as! String)
            } else {
                let key_idx = (i % key_len)
                let shift = Int(_int(String(describing: String(Array(String(describing: (key as! String)))[key_idx..<(key_idx &+ 1)]))))
                let new_position = (Int((idx &+ shift)) % ascii_len)
                encrypted = ((encrypted + String(describing: String(Array(String(describing: (ASCII_UPPERCASE as! String)))[new_position..<(new_position &+ 1)]))) as! String)
            }
            i = Int((i &+ 1))
        }
        return encrypted
    }
    print(_p(String(describing: gronsfeld("hello", "412"))))
    print(_p(String(describing: gronsfeld("hello", "123"))))
    print(_p(String(describing: gronsfeld("", "123"))))
    print(_p(String(describing: gronsfeld("yes, ¥€$ - _!@#%?", "0"))))
    print(_p(String(describing: gronsfeld("yes, ¥€$ - _!@#%?", "01"))))
    print(_p(String(describing: gronsfeld("yes, ¥€$ - _!@#%?", "012"))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
