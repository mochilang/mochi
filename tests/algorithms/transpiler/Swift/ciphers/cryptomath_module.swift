// Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:58:52 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func gcd(_ a: Int, _ b: Int) -> Int {
        var x: Int = Int(((a < 0) ? -a : a))
        var y: Int = Int(((b < 0) ? -b : b))
        while (y != 0) {
            let t = (x % y)
            x = Int(y)
            y = Int(t)
        }
        return x
    }
    func find_mod_inverse(_ a: Int, _ m: Int) -> Int {
        if (Int(gcd(a, m)) != 1) {
            _ = fatalError((((("mod inverse of " + String(describing: a)) + " and ") + String(describing: m)) + " does not exist"))
        }
        var u1: Int = 1
        var u2: Int = 0
        var u3: Int = a
        var v1: Int = 0
        var v2: Int = 1
        var v3: Int = m
        while (v3 != 0) {
            let q = (u3 / v3)
            let t1 = (u1 &- (q &* v1))
            let t2 = (u2 &- (q &* v2))
            let t3 = (u3 &- (q &* v3))
            u1 = Int(v1)
            u2 = Int(v2)
            u3 = Int(v3)
            v1 = Int(t1)
            v2 = Int(t2)
            v3 = Int(t3)
        }
        var res = (u1 % m)
        if (res < 0) {
            res = Int((res &+ m))
        }
        return res
    }
    print(_p(String(describing: Int(find_mod_inverse(3, 11)))))
    print(_p(String(describing: Int(find_mod_inverse(7, 26)))))
    print(_p(String(describing: Int(find_mod_inverse(11, 26)))))
    print(_p(String(describing: Int(find_mod_inverse(17, 43)))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
