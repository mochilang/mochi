// Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:18:59 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
struct Cipher: Codable {
    var passcode: [String]
    var key_list: [String]
    var shift_key: Int
    init() {
        self.passcode = []
        self.key_list = []
        self.shift_key = 0
    }
    init(passcode: [String], key_list: [String], shift_key: Int) {
        self.passcode = passcode
        self.key_list = key_list
        self.shift_key = shift_key
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func ord(_ ch: String) -> Int {
        let digits = "0123456789"
        var i: Int = 0
        while (i < Int(((digits).count))) {
            if (String(describing: String(Array(String(describing: (digits as! String)))[i..<(i &+ 1)])) == ch) {
                return (48 &+ i)
            }
            i = Int((i &+ 1))
        }
        let upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
        i = 0
        while (i < Int(((upper).count))) {
            if (String(describing: String(Array(String(describing: (upper as! String)))[i..<(i &+ 1)])) == ch) {
                return (65 &+ i)
            }
            i = Int((i &+ 1))
        }
        let lower = "abcdefghijklmnopqrstuvwxyz"
        i = 0
        while (i < Int(((lower).count))) {
            if (String(describing: String(Array(String(describing: (lower as! String)))[i..<(i &+ 1)])) == ch) {
                return (97 &+ i)
            }
            i = Int((i &+ 1))
        }
        return 0
    }
    func neg_pos(_ iterlist: inout [Int]) -> [Int] {
        var i: Int = 1
        while (i < Int(((iterlist).count))) {
            iterlist = _set(iterlist, i, Int(-(iterlist[i] as? Int ?? 0)))
            i = Int((i &+ 2))
        }
        return iterlist
    }
    func passcode_creator() -> [String] {
        let choices = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
        var seed: Int = Int(_now())
        let length = (10 &+ Int((seed % 11)))
        var password: [String] = ([] as! [String])
        var i: Int = 0
        while (i < length) {
            seed = Int((Int(((seed &* 1103515245) &+ 12345)) % 2147483647))
            let idx = (seed % Int(((choices).count)))
            password = (_append(password, String(describing: String(Array(String(describing: (choices as! String)))[idx..<(idx &+ 1)]))) as! [String])
            i = Int((i &+ 1))
        }
        return password
    }
    func unique_sorted(_ chars: [String]) -> [String] {
        var uniq: [String] = ([] as! [String])
        var i: Int = 0
        while (i < Int(((chars).count))) {
            let ch = (chars[i] as! String)
            if (!(uniq.contains(ch))) {
                uniq = (_append(uniq, ch) as! [String])
            }
            i = Int((i &+ 1))
        }
        var j: Int = 0
        while (j < Int(((uniq).count))) {
            var k: Int = (j &+ 1)
            var min_idx: Int = j
            while (k < Int(((uniq).count))) {
                if ((uniq[k] as! String) < (uniq[min_idx] as! String)) {
                    min_idx = Int(k)
                }
                k = Int((k &+ 1))
            }
            if (min_idx != j) {
                let tmp = (uniq[j] as! String)
                uniq = _set(uniq, j, (uniq[min_idx] as! String))
                uniq = _set(uniq, min_idx, (tmp as! String))
            }
            j = Int((j &+ 1))
        }
        return uniq
    }
    func make_key_list(_ passcode: [String]) -> [String] {
        let key_list_options = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~ \t\n"
        let breakpoints: [String] = (unique_sorted((passcode as! [String])) as! [String])
        var keys_l: [String] = ([] as! [String])
        var temp_list: [String] = ([] as! [String])
        var i: Int = 0
        while (i < Int(((key_list_options).count))) {
            let ch = String(describing: String(Array(String(describing: (key_list_options as! String)))[i..<(i &+ 1)]))
            temp_list = (_append(temp_list, ch) as! [String])
            if ((breakpoints.contains(ch)) || (i == (Int(((key_list_options).count)) &- 1))) {
                var k: Int = (Int(((temp_list).count)) &- 1)
                while (k >= 0) {
                    keys_l = (_append(keys_l, (temp_list[k] as! String)) as! [String])
                    k = Int((k &- 1))
                }
                temp_list = ([] as! [String])
            }
            i = Int((i &+ 1))
        }
        return keys_l
    }
    func make_shift_key(_ passcode: [String]) -> Int {
        var codes: [Int] = ([] as! [Int])
        var i: Int = 0
        while (i < Int(((passcode).count))) {
            codes = (_append(codes, Int(ord((passcode[i] as! String)))) as! [Int])
            i = Int((i &+ 1))
        }
        codes = (neg_pos(&codes) as! [Int])
        var total: Int = 0
        i = 0
        while (i < Int(((codes).count))) {
            total = Int((total &+ (codes[i] as? Int ?? 0)))
            i = Int((i &+ 1))
        }
        if (total > 0) {
            return total
        }
        return Int(((passcode).count))
    }
    func new_cipher(_ passcode_str: String) -> Cipher {
        var passcode: [String] = ([] as! [String])
        if (Int(((passcode_str).count)) == 0) {
            passcode = (passcode_creator() as! [String])
        } else {
            var i: Int = 0
            while (i < Int(((passcode_str).count))) {
                passcode = (_append(passcode, String(describing: String(Array(String(describing: (passcode_str as! String)))[i..<(i &+ 1)]))) as! [String])
                i = Int((i &+ 1))
            }
        }
        let key_list: [String] = (make_key_list((passcode as! [String])) as! [String])
        let shift_key = Int(make_shift_key((passcode as! [String])))
        return Cipher(passcode: passcode, key_list: key_list, shift_key: shift_key)
    }
    func index_of(_ lst: [String], _ ch: String) -> Int {
        var i: Int = 0
        while (i < Int(((lst).count))) {
            if ((lst[i] as! String) == ch) {
                return i
            }
            i = Int((i &+ 1))
        }
        return -1
    }
    func encrypt(_ c: Cipher, _ plaintext: String) -> String {
        var encoded: String = ""
        var i: Int = 0
        let n = Int(((c.key_list).count))
        while (i < Int(((plaintext).count))) {
            let ch = String(describing: String(Array(String(describing: (plaintext as! String)))[i..<(i &+ 1)]))
            let position = Int(index_of((c.key_list as! [String]), (ch as! String)))
            let new_pos = (Int((position &+ c.shift_key)) % n)
            encoded = ((encoded + (c.key_list[new_pos] as! String)) as! String)
            i = Int((i &+ 1))
        }
        return encoded
    }
    func decrypt(_ c: Cipher, _ encoded_message: String) -> String {
        var decoded: String = ""
        var i: Int = 0
        let n = Int(((c.key_list).count))
        while (i < Int(((encoded_message).count))) {
            let ch = String(describing: String(Array(String(describing: (encoded_message as! String)))[i..<(i &+ 1)]))
            let position = Int(index_of((c.key_list as! [String]), (ch as! String)))
            var new_pos: Int = (Int((position &- c.shift_key)) % n)
            if (new_pos < 0) {
                new_pos = Int((new_pos &+ n))
            }
            decoded = ((decoded + (c.key_list[new_pos] as! String)) as! String)
            i = Int((i &+ 1))
        }
        return decoded
    }
    func test_end_to_end() -> String {
        let msg = "Hello, this is a modified Caesar cipher"
        let cip = new_cipher("")
        return String(describing: decrypt((cip as! Cipher), String(describing: encrypt((cip as! Cipher), (msg as! String)))))
    }
    let ssc = new_cipher("4PYIXyqeQZr44")
    var encoded = String(describing: encrypt((ssc as! Cipher), "Hello, this is a modified Caesar cipher"))
    print(_p(encoded))
    print(_p(String(describing: decrypt((ssc as! Cipher), (encoded as! String)))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
