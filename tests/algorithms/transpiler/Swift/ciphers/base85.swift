// Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:58:39 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let ascii85_chars = "!\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstu"
    func indexOf(_ s: String, _ ch: String) -> Int {
        var i: Int = 0
        while (i < Int(((s).count))) {
            if ((String(Array(s)[i]) as! String) == ch) {
                return i
            }
            i = Int((i &+ 1))
        }
        return -1
    }
    func ord(_ ch: String) -> Int {
        let idx = Int((String(describing: (ascii85_chars as! String)).range(of: String(describing: (ch as! String)))?.lowerBound.utf16Offset(in: String(describing: (ascii85_chars as! String))) ?? -1))
        if (idx >= 0) {
            return (33 &+ idx)
        }
        return 0
    }
    func chr(_ n: Int) -> String {
        if ((n >= 33) && (n <= 117)) {
            return String(Array(ascii85_chars)[(n &- 33)..<(n &- 32)])
        }
        return "?"
    }
    func to_binary(_ n: Int, _ bits: Int) -> String {
        var b: String = ""
        var val: Int = n
        while (val > 0) {
            b = ((String(describing: (val % 2)) + b) as! String)
            val = Int((val / 2))
        }
        while (Int(((b).count)) < bits) {
            b = (("0" + b) as! String)
        }
        if (Int(((b).count)) == 0) {
            b = "0"
        }
        return b
    }
    func bin_to_int(_ bits: String) -> Int {
        var n: Int = 0
        var i: Int = 0
        while (i < Int(((bits).count))) {
            if ((String(Array(bits)[i]) as! String) == "1") {
                n = Int(((n &* 2) &+ 1))
            } else {
                n = Int((n &* 2))
            }
            i = Int((i &+ 1))
        }
        return n
    }
    func reverse(_ s: String) -> String {
        var res: String = ""
        var i: Int = (Int(((s).count)) &- 1)
        while (i >= 0) {
            res = ((res + (String(Array(s)[i]) as! String)) as! String)
            i = Int((i &- 1))
        }
        return res
    }
    func base10_to_85(_ d: Int) -> String {
        if (d > 0) {
            return (String(describing: chr(((d % 85) &+ 33))) + String(describing: base10_to_85((d / 85))))
        }
        return ""
    }
    func base85_to_10(_ digits: String) -> Int {
        var value: Int = 0
        var i: Int = 0
        while (i < Int(((digits).count))) {
            value = Int(((value &* 85) &+ Int((Int(ord((String(Array(digits)[i]) as! String))) &- 33))))
            i = Int((i &+ 1))
        }
        return value
    }
    func ascii85_encode(_ data: String) -> String {
        var binary_data: String = ""
        for ch in data {
            let ch = String(ch)
            binary_data = ((binary_data + String(describing: to_binary(Int(ord((ch as! String))), 8))) as! String)
        }
        var null_values: Int = (Int(((32 &* Int((Int((Int(((binary_data).count)) / 32)) &+ 1))) &- Int(((binary_data).count)))) / 8)
        var total_bits: Int = (32 &* Int((Int((Int(((binary_data).count)) / 32)) &+ 1)))
        while (Int(((binary_data).count)) < total_bits) {
            binary_data = ((binary_data + "0") as! String)
        }
        var result: String = ""
        var i: Int = 0
        while (i < Int(((binary_data).count))) {
            let chunk_bits = String(Array(binary_data)[i..<(i &+ 32)])
            let chunk_val = Int(bin_to_int((chunk_bits as! String)))
            let encoded = String(describing: reverse(String(describing: base10_to_85(chunk_val))))
            result = ((result + encoded) as! String)
            i = Int((i &+ 32))
        }
        if ((null_values % 4) != 0) {
            result = (String(Array(result)[0..<(Int(((result).count)) &- null_values)]) as! String)
        }
        return result
    }
    func ascii85_decode(_ data: String) -> String {
        var null_values: Int = ((5 &* Int((Int((Int(((data).count)) / 5)) &+ 1))) &- Int(((data).count)))
        var binary_data: String = data
        var i: Int = 0
        while (i < null_values) {
            binary_data = ((binary_data + "u") as! String)
            i = Int((i &+ 1))
        }
        var result: String = ""
        i = 0
        while (i < Int(((binary_data).count))) {
            let chunk = String(Array(binary_data)[i..<(i &+ 5)])
            let value = Int(base85_to_10((chunk as! String)))
            let bits = String(describing: to_binary(value, 32))
            var j: Int = 0
            while (j < 32) {
                let byte_bits = String(Array(bits)[j..<(j &+ 8)])
                let c = String(describing: chr(Int(bin_to_int((byte_bits as! String)))))
                result = ((result + c) as! String)
                j = Int((j &+ 8))
            }
            i = Int((i &+ 5))
        }
        var trim: Int = null_values
        if ((null_values % 5) == 0) {
            trim = Int((null_values &- 1))
        }
        return String(Array(result)[0..<(Int(((result).count)) &- trim)])
    }
    print(_p(String(describing: ascii85_encode(""))))
    print(_p(String(describing: ascii85_encode("12345"))))
    print(_p(String(describing: ascii85_encode("base 85"))))
    print(_p(String(describing: ascii85_decode(""))))
    print(_p(String(describing: ascii85_decode("0etOA2#"))))
    print(_p(String(describing: ascii85_decode("@UX=h+?24"))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
