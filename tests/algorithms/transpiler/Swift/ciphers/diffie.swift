// Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:17:00 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func mod_pow(_ base: Int, _ exp: Int, _ mod: Int) -> Int {
        var result: Int = 1
        var b: Int = (base % mod)
        var e: Int = exp
        while (e > 0) {
            if ((e % 2) == 1) {
                result = Int((Int((result &* b)) % mod))
            }
            e = Int((e / 2))
            b = Int((Int((b &* b)) % mod))
        }
        return result
    }
    func contains(_ xs: [Int], _ val: Int) -> Bool {
        var i: Int = 0
        while (i < Int(((xs).count))) {
            if ((xs[i] as? Int ?? 0) == val) {
                return true
            }
            i = Int((i &+ 1))
        }
        return false
    }
    func find_primitive(_ modulus: Int) -> Int {
        var r: Int = 1
        while (r < modulus) {
            var li: [Int] = ([] as! [Int])
            var x: Int = 0
            var valid: Bool = true
            while ((x < (modulus &- 1)) && valid) {
                let value = Int(mod_pow(r, x, modulus))
                if ((li as! [Int]).contains(value)) {
                    valid = false
                } else {
                    li = (_append(li, value) as! [Int])
                    x = Int((x &+ 1))
                }
            }
            if valid {
                return r
            }
            r = Int((r &+ 1))
        }
        return -1
    }
    print(_p(Int(find_primitive(7))))
    print(_p(Int(find_primitive(11))))
    print(_p(Int(find_primitive(8))))
    let prime = 23
    let primitive_root = Int(find_primitive(prime))
    if (primitive_root == Int((0 &- 1))) {
        print(_p("Cannot find the primitive for the value: -1"))
    } else {
        let a_private = 6
        let b_private = 15
        let a_public = Int(mod_pow(primitive_root, a_private, prime))
        let b_public = Int(mod_pow(primitive_root, b_private, prime))
        let a_secret = Int(mod_pow(b_public, a_private, prime))
        let b_secret = Int(mod_pow(a_public, b_private, prime))
        print(_p(("The key value generated by A is: " + String(describing: a_secret))))
        print(_p(("The key value generated by B is: " + String(describing: b_secret))))
    }
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
