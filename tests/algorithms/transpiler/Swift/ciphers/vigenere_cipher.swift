// Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:20:55 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let LETTERS: String = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    let LETTERS_LOWER: String = "abcdefghijklmnopqrstuvwxyz"
    func find_index(_ s: String, _ ch: String) -> Int {
        var i: Int = 0
        while (i < Int(((s).count))) {
            if ((String(Array(s)[i]) as! String) == ch) {
                return i
            }
            i = Int((i &+ 1))
        }
        return -1
    }
    func to_upper_char(_ ch: String) -> String {
        let idx = Int(find_index((LETTERS_LOWER as! String), (ch as! String)))
        if (idx >= 0) {
            return (String(Array(LETTERS)[idx]) as! String)
        }
        return ch
    }
    func to_lower_char(_ ch: String) -> String {
        let idx = Int(find_index((LETTERS as! String), (ch as! String)))
        if (idx >= 0) {
            return (String(Array(LETTERS_LOWER)[idx]) as! String)
        }
        return ch
    }
    func is_upper(_ ch: String) -> Bool {
        return (Int(find_index((LETTERS as! String), (ch as! String))) >= 0)
    }
    func to_upper_string(_ s: String) -> String {
        var res: String = ""
        var i: Int = 0
        while (i < Int(((s).count))) {
            res = ((res + String(describing: to_upper_char((String(Array(s)[i]) as! String)))) as! String)
            i = Int((i &+ 1))
        }
        return res
    }
    let key = "HDarji"
    let message = "This is Harshil Darji from Dharmaj."
    let key_up = String(describing: to_upper_string((key as! String)))
    var encrypted: String = ""
    var key_index: Int = 0
    var i: Int = 0
    while (i < Int(((message).count))) {
        let symbol = (String(Array(message)[i]) as! String)
        let upper_symbol = String(describing: to_upper_char((symbol as! String)))
        var num: Int = Int(find_index((LETTERS as! String), (upper_symbol as! String)))
        if (num >= 0) {
            num = Int((num &+ Int(find_index((LETTERS as! String), (String(Array(key_up)[key_index]) as! String)))))
            num = Int(((num % Int(((LETTERS).count)) + Int(((LETTERS).count))) % Int(((LETTERS).count))))
            if is_upper((symbol as! String)) {
                encrypted = ((encrypted + (String(Array(LETTERS)[num]) as! String)) as! String)
            } else {
                encrypted = ((encrypted + String(describing: to_lower_char((String(Array(LETTERS)[num]) as! String)))) as! String)
            }
            key_index = Int((key_index &+ 1))
            if (key_index == Int(((key_up).count))) {
                key_index = 0
            }
        } else {
            encrypted = ((encrypted + symbol) as! String)
        }
        i = Int((i &+ 1))
    }
    print(_p(encrypted))
    var decrypted: String = ""
    key_index = 0
    i = 0
    while (i < Int(((encrypted).count))) {
        let symbol = (String(Array(encrypted)[i]) as! String)
        let upper_symbol = String(describing: to_upper_char((symbol as! String)))
        var num: Int = Int(find_index((LETTERS as! String), (upper_symbol as! String)))
        if (num >= 0) {
            num = Int((num &- Int(find_index((LETTERS as! String), (String(Array(key_up)[key_index]) as! String)))))
            num = Int(((num % Int(((LETTERS).count)) + Int(((LETTERS).count))) % Int(((LETTERS).count))))
            if is_upper((symbol as! String)) {
                decrypted = ((decrypted + (String(Array(LETTERS)[num]) as! String)) as! String)
            } else {
                decrypted = ((decrypted + String(describing: to_lower_char((String(Array(LETTERS)[num]) as! String)))) as! String)
            }
            key_index = Int((key_index &+ 1))
            if (key_index == Int(((key_up).count))) {
                key_index = 0
            }
        } else {
            decrypted = ((decrypted + symbol) as! String)
        }
        i = Int((i &+ 1))
    }
    print(_p(decrypted))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
