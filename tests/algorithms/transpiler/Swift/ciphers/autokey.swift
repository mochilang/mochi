// Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:58:27 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let LOWER = "abcdefghijklmnopqrstuvwxyz"
    let UPPER = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    func to_lowercase(_ s: String) -> String {
        var res: String = ""
        var i: Int = 0
        while (i < Int(((s).count))) {
            let c = (String(Array(s)[i]) as! String)
            var j: Int = 0
            var found: Bool = false
            while (j < 26) {
                if (c == (String(Array(UPPER)[j]) as! String)) {
                    res = ((res + (String(Array(LOWER)[j]) as! String)) as! String)
                    found = true
                    break
                }
                j = Int((j &+ 1))
            }
            if (!found) {
                res = ((res + c) as! String)
            }
            i = Int((i &+ 1))
        }
        return res
    }
    func char_index(_ c: String) -> Int {
        var i: Int = 0
        while (i < 26) {
            if (c == (String(Array(LOWER)[i]) as! String)) {
                return i
            }
            i = Int((i &+ 1))
        }
        return -1
    }
    func index_char(_ i: Int) -> String {
        return (String(Array(LOWER)[i]) as! String)
    }
    func encrypt(_ plaintext: String, _ key: String) -> String {
        var plaintext = plaintext
        if (Int(((plaintext).count)) == 0) {
            _ = fatalError("plaintext is empty")
        }
        if (Int(((key).count)) == 0) {
            _ = fatalError("key is empty")
        }
        var full_key: String = (key + plaintext)
        plaintext = String(describing: to_lowercase((plaintext as! String)))
        full_key = String(describing: to_lowercase((full_key as! String)))
        var p_i: Int = 0
        var k_i: Int = 0
        var ciphertext: String = ""
        while (p_i < Int(((plaintext).count))) {
            let p_char = (String(Array(plaintext)[p_i]) as! String)
            let p_idx = Int(char_index((p_char as! String)))
            if (p_idx < 0) {
                ciphertext = ((ciphertext + p_char) as! String)
                p_i = Int((p_i &+ 1))
            } else {
                let k_char = (String(Array(full_key)[k_i]) as! String)
                let k_idx = Int(char_index((k_char as! String)))
                if (k_idx < 0) {
                    k_i = Int((k_i &+ 1))
                } else {
                    let c_idx = (Int((p_idx &+ k_idx)) % 26)
                    ciphertext = ((ciphertext + String(describing: index_char(c_idx))) as! String)
                    k_i = Int((k_i &+ 1))
                    p_i = Int((p_i &+ 1))
                }
            }
        }
        return ciphertext
    }
    func decrypt(_ ciphertext: String, _ key: String) -> String {
        if (Int(((ciphertext).count)) == 0) {
            _ = fatalError("ciphertext is empty")
        }
        if (Int(((key).count)) == 0) {
            _ = fatalError("key is empty")
        }
        var current_key: String = String(describing: to_lowercase((key as! String)))
        var c_i: Int = 0
        var k_i: Int = 0
        var plaintext: String = ""
        while (c_i < Int(((ciphertext).count))) {
            let c_char = (String(Array(ciphertext)[c_i]) as! String)
            let c_idx = Int(char_index((c_char as! String)))
            if (c_idx < 0) {
                plaintext = ((plaintext + c_char) as! String)
            } else {
                let k_char = (String(Array(current_key)[k_i]) as! String)
                let k_idx = Int(char_index((k_char as! String)))
                let p_idx = (Int(((c_idx &- k_idx) &+ 26)) % 26)
                let p_char = String(describing: index_char(p_idx))
                plaintext = ((plaintext + p_char) as! String)
                current_key = ((current_key + p_char) as! String)
                k_i = Int((k_i &+ 1))
            }
            c_i = Int((c_i &+ 1))
        }
        return plaintext
    }
    print(_p(String(describing: encrypt("hello world", "coffee"))))
    print(_p(String(describing: decrypt("jsqqs avvwo", "coffee"))))
    print(_p(String(describing: encrypt("coffee is good as python", "TheAlgorithms"))))
    print(_p(String(describing: decrypt("vvjfpk wj ohvp su ddylsv", "TheAlgorithms"))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
