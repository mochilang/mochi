// Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:18:48 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
struct Keys: Codable {
    var public_key: [Int]
    var private_key: [Int]
    init() {
        self.public_key = []
        self.private_key = []
    }
    init(public_key: [Int], private_key: [Int]) {
        self.public_key = public_key
        self.private_key = private_key
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func pow2(_ exp: Int) -> Int {
        var res: Int = 1
        var i: Int = 0
        while (i < exp) {
            res = Int((res &* 2))
            i = Int((i &+ 1))
        }
        return res
    }
    var seed: Int = 1
    func next_seed(_ x: Int) -> Int {
        return (Int(((x &* 1103515245) &+ 12345)) % 2147483648)
    }
    func rand_range(_ min: Int, _ max: Int) -> Int {
        seed = Int(next_seed(seed))
        return (min &+ (seed % Int((max &- min))))
    }
    func gcd(_ a: Int, _ b: Int) -> Int {
        var x: Int = a
        var y: Int = b
        while (y != 0) {
            let temp = (x % y)
            x = Int(y)
            y = Int(temp)
        }
        return x
    }
    func mod_inverse(_ e: Int, _ phi: Int) -> Int {
        var t: Int = 0
        var newt: Int = 1
        var r: Int = phi
        var newr: Int = e
        while (newr != 0) {
            let quotient = (r / newr)
            let tmp = newt
            newt = Int((t &- (quotient &* newt)))
            t = Int(tmp)
            let tmp_r = newr
            newr = Int((r &- (quotient &* newr)))
            r = Int(tmp_r)
        }
        if (r > 1) {
            return 0
        }
        if (t < 0) {
            t = Int((t &+ phi))
        }
        return t
    }
    func is_prime(_ n: Int) -> Bool {
        if (n < 2) {
            return false
        }
        var i: Int = 2
        while ((i &* i) <= n) {
            if ((n % i) == 0) {
                return false
            }
            i = Int((i &+ 1))
        }
        return true
    }
    func generate_prime(_ bits: Int) -> Int {
        let min = Int(pow2((bits &- 1)))
        let max = Int(pow2(bits))
        var p: Int = Int(rand_range(min, max))
        if ((p % 2) == 0) {
            p = Int((p &+ 1))
        }
        while (!is_prime(p)) {
            p = Int((p &+ 2))
            if (p >= max) {
                p = Int((min &+ 1))
            }
        }
        return p
    }
    func generate_key(_ bits: Int) -> Keys {
        let p = Int(generate_prime(bits))
        let q = Int(generate_prime(bits))
        let n = (p &* q)
        let phi = (Int((p &- 1)) &* Int((q &- 1)))
        var e: Int = Int(rand_range(2, phi))
        while (Int(gcd(e, phi)) != 1) {
            e = Int((e &+ 1))
            if (e >= phi) {
                e = 2
            }
        }
        let d = Int(mod_inverse(e, phi))
        return Keys(public_key: ([n, e] as! [Int]), private_key: ([n, d] as! [Int]))
    }
    let keys = generate_key(8)
    let pub: [Int] = keys.public_key
    let priv: [Int] = keys.private_key
    print(_p((((("Public key: (" + String(describing: (pub[0] as? Int ?? 0))) + ", ") + String(describing: (pub[1] as? Int ?? 0))) + ")")))
    print(_p((((("Private key: (" + String(describing: (priv[0] as? Int ?? 0))) + ", ") + String(describing: (priv[1] as? Int ?? 0))) + ")")))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
