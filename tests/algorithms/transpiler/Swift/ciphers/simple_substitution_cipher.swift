// Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:19:10 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let LETTERS = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    let LOWERCASE = "abcdefghijklmnopqrstuvwxyz"
    var seed: Int = 1
    func rand(_ n: Int) -> Int {
        seed = Int((Int(((seed &* 1664525) &+ 1013904223)) % 2147483647))
        return (seed % n)
    }
    func get_random_key() -> String {
        var chars: [String] = []
        var i: Int = 0
        while (i < Int(((LETTERS).count))) {
            chars = (_append(chars, (String(Array(LETTERS)[i]) as! String)) as! [String])
            i = Int((i &+ 1))
        }
        var j: Int = (Int(((chars).count)) &- 1)
        while (j > 0) {
            let k = Int(rand((j &+ 1)))
            let tmp = (chars[j] as! String)
            chars = _set(chars, j, (chars[k] as! String))
            chars = _set(chars, k, (tmp as! String))
            j = Int((j &- 1))
        }
        var res: String = ""
        i = 0
        while (i < Int(((chars).count))) {
            res = ((res + (chars[i] as! String)) as! String)
            i = Int((i &+ 1))
        }
        return res
    }
    func check_valid_key(_ key: String) -> Bool {
        if (Int(((key).count)) != Int(((LETTERS).count))) {
            return false
        }
        var used: [String: Bool] = ([:] as! [String: Bool])
        var i: Int = 0
        while (i < Int(((key).count))) {
            let ch = (String(Array(key)[i]) as! String)
            if (used[String(String(describing: ch))] as! Bool) {
                return false
            }
            used = _set(used, String(describing: ch), true)
            i = Int((i &+ 1))
        }
        i = 0
        while (i < Int(((LETTERS).count))) {
            let ch = (String(Array(LETTERS)[i]) as! String)
            if !(used[String(String(describing: ch))] ?? false) {
                return false
            }
            i = Int((i &+ 1))
        }
        return true
    }
    func index_in(_ s: String, _ ch: String) -> Int {
        var i: Int = 0
        while (i < Int(((s).count))) {
            if ((String(Array(s)[i]) as! String) == ch) {
                return i
            }
            i = Int((i &+ 1))
        }
        return -1
    }
    func char_to_upper(_ c: String) -> String {
        var i: Int = 0
        while (i < Int(((LOWERCASE).count))) {
            if (c == (String(Array(LOWERCASE)[i]) as! String)) {
                return (String(Array(LETTERS)[i]) as! String)
            }
            i = Int((i &+ 1))
        }
        return c
    }
    func char_to_lower(_ c: String) -> String {
        var i: Int = 0
        while (i < Int(((LETTERS).count))) {
            if (c == (String(Array(LETTERS)[i]) as! String)) {
                return (String(Array(LOWERCASE)[i]) as! String)
            }
            i = Int((i &+ 1))
        }
        return c
    }
    func is_upper(_ c: String) -> Bool {
        var i: Int = 0
        while (i < Int(((LETTERS).count))) {
            if (c == (String(Array(LETTERS)[i]) as! String)) {
                return true
            }
            i = Int((i &+ 1))
        }
        return false
    }
    func translate_message(_ key: String, _ message: String, _ mode: String) -> String {
        var chars_a: String = LETTERS
        var chars_b: String = key
        if (mode == "decrypt") {
            let tmp = chars_a
            chars_a = (chars_b as! String)
            chars_b = (tmp as! String)
        }
        var translated: String = ""
        var i: Int = 0
        while (i < Int(((message).count))) {
            let symbol = (String(Array(message)[i]) as! String)
            let upper_symbol = String(describing: char_to_upper((symbol as! String)))
            let idx = Int(index_in((chars_a as! String), (upper_symbol as! String)))
            if (idx >= 0) {
                let mapped = (String(Array(chars_b)[idx]) as! String)
                if is_upper((symbol as! String)) {
                    translated = ((translated + mapped) as! String)
                } else {
                    translated = ((translated + String(describing: char_to_lower((mapped as! String)))) as! String)
                }
            } else {
                translated = ((translated + symbol) as! String)
            }
            i = Int((i &+ 1))
        }
        return translated
    }
    func encrypt_message(_ key: String, _ message: String) -> String {
        let res = String(describing: translate_message((key as! String), (message as! String), "encrypt"))
        return res
    }
    func decrypt_message(_ key: String, _ message: String) -> String {
        let res = String(describing: translate_message((key as! String), (message as! String), "decrypt"))
        return res
    }
    let key = "LFWOAYUISVKMNXPBDCRJTQEGHZ"
    print(_p(String(describing: encrypt_message((key as! String), "Harshil Darji"))))
    print(_p(String(describing: decrypt_message((key as! String), "Ilcrism Olcvs"))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
