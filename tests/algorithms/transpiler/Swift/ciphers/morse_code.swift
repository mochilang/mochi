// Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:17:49 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let CHARS: [String] = (["A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "&", "@", ":", ",", ".", "'", "\"", "?", "/", "=", "+", "-", "(", ")", "!", " "] as! [String])
    let CODES: [String] = ([".-", "-...", "-.-.", "-..", ".", "..-.", "--.", "....", "..", ".---", "-.-", ".-..", "--", "-.", "---", ".--.", "--.-", ".-.", "...", "-", "..-", "...-", ".--", "-..-", "-.--", "--..", ".----", "..---", "...--", "....-", ".....", "-....", "--...", "---..", "----.", "-----", ".-...", ".--.-.", "---...", "--..--", ".-.-.-", ".----.", ".-..-.", "..--..", "-..-.", "-...-", ".-.-.", "-....-", "-.--.", "-.--.-", "-.-.--", "/"] as! [String])
    func to_upper_char(_ c: String) -> String {
        if (c == "a") {
            return "A"
        }
        if (c == "b") {
            return "B"
        }
        if (c == "c") {
            return "C"
        }
        if (c == "d") {
            return "D"
        }
        if (c == "e") {
            return "E"
        }
        if (c == "f") {
            return "F"
        }
        if (c == "g") {
            return "G"
        }
        if (c == "h") {
            return "H"
        }
        if (c == "i") {
            return "I"
        }
        if (c == "j") {
            return "J"
        }
        if (c == "k") {
            return "K"
        }
        if (c == "l") {
            return "L"
        }
        if (c == "m") {
            return "M"
        }
        if (c == "n") {
            return "N"
        }
        if (c == "o") {
            return "O"
        }
        if (c == "p") {
            return "P"
        }
        if (c == "q") {
            return "Q"
        }
        if (c == "r") {
            return "R"
        }
        if (c == "s") {
            return "S"
        }
        if (c == "t") {
            return "T"
        }
        if (c == "u") {
            return "U"
        }
        if (c == "v") {
            return "V"
        }
        if (c == "w") {
            return "W"
        }
        if (c == "x") {
            return "X"
        }
        if (c == "y") {
            return "Y"
        }
        if (c == "z") {
            return "Z"
        }
        return c
    }
    func to_upper(_ s: String) -> String {
        var res: String = ""
        var i: Int = 0
        while (i < Int(((s).count))) {
            res = ((res + String(describing: to_upper_char((String(Array(s)[i]) as! String)))) as! String)
            i = Int((i &+ 1))
        }
        return res
    }
    func index_of(_ xs: [String], _ target: String) -> Int {
        var i: Int = 0
        while (i < Int(((xs).count))) {
            if ((xs[i] as! String) == target) {
                return i
            }
            i = Int((i &+ 1))
        }
        return -1
    }
    func encrypt(_ message: String) -> String {
        let msg = String(describing: to_upper((message as! String)))
        var res: String = ""
        var i: Int = 0
        while (i < Int(((msg).count))) {
            let c = (String(Array(msg)[i]) as! String)
            let idx = Int(index_of((CHARS as! [String]), (c as! String)))
            if (idx >= 0) {
                if (res != "") {
                    res = ((res + " ") as! String)
                }
                res = ((res + (CODES[idx] as! String)) as! String)
            }
            i = Int((i &+ 1))
        }
        return res
    }
    func split_spaces(_ s: String) -> [String] {
        var res: [String] = ([] as! [String])
        var current: String = ""
        var i: Int = 0
        while (i < Int(((s).count))) {
            let ch = (String(Array(s)[i]) as! String)
            if (ch == " ") {
                if (current != "") {
                    res = (_append(res, current) as! [String])
                    current = ""
                }
            } else {
                current = ((current + ch) as! String)
            }
            i = Int((i &+ 1))
        }
        if (current != "") {
            res = (_append(res, current) as! [String])
        }
        return res
    }
    func decrypt(_ message: String) -> String {
        let parts: [String] = (split_spaces((message as! String)) as! [String])
        var res: String = ""
        for code in parts {
            let idx = Int(index_of((CODES as! [String]), (code as! String)))
            if (idx >= 0) {
                res = ((res + (CHARS[idx] as! String)) as! String)
            }
        }
        return res
    }
    let msg = "Morse code here!"
    print(_p(msg))
    let enc = String(describing: encrypt((msg as! String)))
    print(_p(enc))
    let dec = String(describing: decrypt((enc as! String)))
    print(_p(dec))
    print(_p(String(describing: encrypt("Sos!"))))
    print(_p(String(describing: decrypt("... --- ... -.-.--"))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
