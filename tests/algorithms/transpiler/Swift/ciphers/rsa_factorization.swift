// Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:18:44 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func gcd(_ a: Int, _ b: Int) -> Int {
        var x: Int = a
        var y: Int = b
        while (y != 0) {
            let t = (x % y)
            x = Int(y)
            y = Int(t)
        }
        if (x < 0) {
            return -x
        }
        return x
    }
    func pow_mod(_ base: Int, _ exp: Int, _ mod: Int) -> Int {
        var result: Int = 1
        var b: Int = (base % mod)
        var e: Int = exp
        while (e > 0) {
            if ((e % 2) == 1) {
                result = Int((Int((result &* b)) % mod))
            }
            e = Int((e / 2))
            b = Int((Int((b &* b)) % mod))
        }
        return result
    }
    func rsa_factor(_ d: Int, _ e: Int, _ n: Int) -> [Int] {
        let k = ((d &* e) &- 1)
        var p: Int = 0
        var q: Int = 0
        var g: Int = 2
        while ((p == 0) && (g < n)) {
            var t: Int = k
            while ((t % 2) == 0) {
                t = Int((t / 2))
                let x = Int(pow_mod(g, t, n))
                let y = Int(gcd((x &- 1), n))
                if ((x > 1) && (y > 1)) {
                    p = Int(y)
                    q = Int((n / y))
                    break
                }
            }
            g = Int((g &+ 1))
        }
        if (p > q) {
            return ([q, p] as! [Int])
        }
        return ([p, q] as! [Int])
    }
    print(_p("[" + (rsa_factor(3, 16971, 25777) as! [Int]).map{ if let s = $0 as? String { "\"" + s.replacingOccurrences(of: "\"", with: "\\\"") + "\"" } else { _p($0) } }.joined(separator: ", ") + "]"))
    print(_p("[" + (rsa_factor(7331, 11, 27233) as! [Int]).map{ if let s = $0 as? String { "\"" + s.replacingOccurrences(of: "\"", with: "\\\"") + "\"" } else { _p($0) } }.joined(separator: ", ") + "]"))
    print(_p("[" + (rsa_factor(4021, 13, 17711) as! [Int]).map{ if let s = $0 as? String { "\"" + s.replacingOccurrences(of: "\"", with: "\\\"") + "\"" } else { _p($0) } }.joined(separator: ", ") + "]"))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
