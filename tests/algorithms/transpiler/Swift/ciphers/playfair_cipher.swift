// Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:18:08 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func contains(_ xs: [String], _ x: String) -> Bool {
        var i: Int = 0
        while (i < Int(((xs).count))) {
            if ((xs[i] as! String) == x) {
                return true
            }
            i = Int((i &+ 1))
        }
        return false
    }
    func index_of(_ xs: [String], _ x: String) -> Int {
        var i: Int = 0
        while (i < Int(((xs).count))) {
            if ((xs[i] as! String) == x) {
                return i
            }
            i = Int((i &+ 1))
        }
        return -1
    }
    func prepare_input(_ dirty: String) -> String {
        let letters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
        let upper_dirty = String(describing: ((dirty as! String).uppercased()))
        var filtered: String = ""
        var i: Int = 0
        while (i < Int(((upper_dirty).count))) {
            let c = String(describing: String(Array(String(describing: (upper_dirty as! String)))[i..<(i &+ 1)]))
            if (letters.contains(c)) {
                filtered = ((filtered + c) as! String)
            }
            i = Int((i &+ 1))
        }
        if (Int(((filtered).count)) < 2) {
            return filtered
        }
        var clean: String = ""
        i = 0
        while (i < (Int(((filtered).count)) &- 1)) {
            let c1 = String(describing: String(Array(String(describing: (filtered as! String)))[i..<(i &+ 1)]))
            let c2 = String(describing: String(Array(String(describing: (filtered as! String)))[(i &+ 1)..<(i &+ 2)]))
            clean = ((clean + c1) as! String)
            if (c1 == c2) {
                clean = ((clean + "X") as! String)
            }
            i = Int((i &+ 1))
        }
        clean = ((clean + String(describing: String(Array(String(describing: (filtered as! String)))[(Int(((filtered).count)) &- 1)..<Int(((filtered).count))]))) as! String)
        if ((Int(((clean).count)) % 2) == 1) {
            clean = ((clean + "X") as! String)
        }
        return clean
    }
    func generate_table(_ key: String) -> [String] {
        let alphabet = "ABCDEFGHIKLMNOPQRSTUVWXYZ"
        var table: [String] = ([] as! [String])
        let upper_key = String(describing: ((key as! String).uppercased()))
        var i: Int = 0
        while (i < Int(((upper_key).count))) {
            let c = String(describing: String(Array(String(describing: (upper_key as! String)))[i..<(i &+ 1)]))
            if (alphabet.contains(c)) {
                if (!((table as! [String]).contains((c as! String)))) {
                    table = (_append(table, c) as! [String])
                }
            }
            i = Int((i &+ 1))
        }
        i = 0
        while (i < Int(((alphabet).count))) {
            let c = String(describing: String(Array(String(describing: (alphabet as! String)))[i..<(i &+ 1)]))
            if (!((table as! [String]).contains((c as! String)))) {
                table = (_append(table, c) as! [String])
            }
            i = Int((i &+ 1))
        }
        return table
    }
    func encode(_ plaintext: String, _ key: String) -> String {
        let table: [String] = (generate_table((key as! String)) as! [String])
        let text = String(describing: prepare_input((plaintext as! String)))
        var cipher: String = ""
        var i: Int = 0
        while (i < Int(((text).count))) {
            let c1 = String(describing: String(Array(String(describing: (text as! String)))[i..<(i &+ 1)]))
            let c2 = String(describing: String(Array(String(describing: (text as! String)))[(i &+ 1)..<(i &+ 2)]))
            let idx1 = Int(index_of((table as! [String]), (c1 as! String)))
            let idx2 = Int(index_of((table as! [String]), (c2 as! String)))
            let row1 = (idx1 / 5)
            let col1 = (idx1 % 5)
            let row2 = (idx2 / 5)
            let col2 = (idx2 % 5)
            if (row1 == row2) {
                cipher = ((cipher + (table[((row1 &* 5) &+ (Int((col1 &+ 1)) % 5))] as! String)) as! String)
                cipher = ((cipher + (table[((row2 &* 5) &+ (Int((col2 &+ 1)) % 5))] as! String)) as! String)
            } else if (col1 == col2) {
                cipher = ((cipher + (table[((Int((Int((row1 &+ 1)) % 5)) &* 5) &+ col1)] as! String)) as! String)
                cipher = ((cipher + (table[((Int((Int((row2 &+ 1)) % 5)) &* 5) &+ col2)] as! String)) as! String)
            } else {
                cipher = ((cipher + (table[((row1 &* 5) &+ col2)] as! String)) as! String)
                cipher = ((cipher + (table[((row2 &* 5) &+ col1)] as! String)) as! String)
            }
            
            i = Int((i &+ 2))
        }
        return cipher
    }
    func decode(_ cipher: String, _ key: String) -> String {
        let table: [String] = (generate_table((key as! String)) as! [String])
        var plain: String = ""
        var i: Int = 0
        while (i < Int(((cipher).count))) {
            let c1 = String(describing: String(Array(String(describing: (cipher as! String)))[i..<(i &+ 1)]))
            let c2 = String(describing: String(Array(String(describing: (cipher as! String)))[(i &+ 1)..<(i &+ 2)]))
            let idx1 = Int(index_of((table as! [String]), (c1 as! String)))
            let idx2 = Int(index_of((table as! [String]), (c2 as! String)))
            let row1 = (idx1 / 5)
            let col1 = (idx1 % 5)
            let row2 = (idx2 / 5)
            let col2 = (idx2 % 5)
            if (row1 == row2) {
                plain = ((plain + (table[((row1 &* 5) &+ (Int((col1 &+ 4)) % 5))] as! String)) as! String)
                plain = ((plain + (table[((row2 &* 5) &+ (Int((col2 &+ 4)) % 5))] as! String)) as! String)
            } else if (col1 == col2) {
                plain = ((plain + (table[((Int((Int((row1 &+ 4)) % 5)) &* 5) &+ col1)] as! String)) as! String)
                plain = ((plain + (table[((Int((Int((row2 &+ 4)) % 5)) &* 5) &+ col2)] as! String)) as! String)
            } else {
                plain = ((plain + (table[((row1 &* 5) &+ col2)] as! String)) as! String)
                plain = ((plain + (table[((row2 &* 5) &+ col1)] as! String)) as! String)
            }
            
            i = Int((i &+ 2))
        }
        return plain
    }
    func main() {
        print(_p("Encoded:"), _p(String(describing: encode("BYE AND THANKS", "GREETING"))))
        print(_p("Decoded:"), _p(String(describing: decode("CXRBANRLBALQ", "GREETING"))))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
