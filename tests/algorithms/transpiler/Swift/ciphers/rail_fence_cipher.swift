// Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:18:31 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func encrypt(_ input_string: String, _ key: Int) -> String {
        if (key <= 0) {
            _ = fatalError("Height of grid can't be 0 or negative")
        }
        if ((key == 1) || (Int(((input_string).count)) <= key)) {
            return input_string
        }
        let lowest = (key &- 1)
        var temp_grid: [[String]] = ([] as! [[String]])
        var i: Int = 0
        while (i < key) {
            temp_grid = (_append(temp_grid, ([] as! [String])) as! [[String]])
            i = Int((i &+ 1))
        }
        var position: Int = 0
        while (position < Int(((input_string).count))) {
            var num: Int = (position % Int((lowest &* 2)))
            let alt = ((lowest &* 2) &- num)
            if (num > alt) {
                num = Int(alt)
            }
            var row: [String] = (temp_grid[num] as! [String])
            row = (_append(row, String(describing: String(Array(String(describing: (input_string as! String)))[position..<(position &+ 1)]))) as! [String])
            temp_grid = _set(temp_grid, num, (row as! [String]))
            position = Int((position &+ 1))
        }
        var output: String = ""
        i = 0
        while (i < key) {
            var row: [String] = (temp_grid[i] as! [String])
            var j: Int = 0
            while (j < Int(((row).count))) {
                output = ((output + (row[j] as! String)) as! String)
                j = Int((j &+ 1))
            }
            i = Int((i &+ 1))
        }
        return output
    }
    func decrypt(_ input_string: String, _ key: Int) -> String {
        if (key <= 0) {
            _ = fatalError("Height of grid can't be 0 or negative")
        }
        if (key == 1) {
            return input_string
        }
        let lowest = (key &- 1)
        var counts: [Int] = ([] as! [Int])
        var i: Int = 0
        while (i < key) {
            counts = (_append(counts, 0) as! [Int])
            i = Int((i &+ 1))
        }
        var pos: Int = 0
        while (pos < Int(((input_string).count))) {
            var num: Int = (pos % Int((lowest &* 2)))
            let alt = ((lowest &* 2) &- num)
            if (num > alt) {
                num = Int(alt)
            }
            counts = _set(counts, num, Int(((counts[num] as? Int ?? 0) &+ 1)))
            pos = Int((pos &+ 1))
        }
        var grid: [[String]] = ([] as! [[String]])
        var counter: Int = 0
        i = 0
        while (i < key) {
            let length = (counts[i] as? Int ?? 0)
            let slice = String(describing: String(Array(String(describing: (input_string as! String)))[counter..<(counter &+ length)]))
            var row: [String] = ([] as! [String])
            var j: Int = 0
            while (j < Int(((slice).count))) {
                row = (_append(row, (String(Array(slice)[j]) as! String)) as! [String])
                j = Int((j &+ 1))
            }
            grid = (_append(grid, row) as! [[String]])
            counter = Int((counter &+ length))
            i = Int((i &+ 1))
        }
        var indices: [Int] = ([] as! [Int])
        i = 0
        while (i < key) {
            indices = (_append(indices, 0) as! [Int])
            i = Int((i &+ 1))
        }
        var output: String = ""
        pos = 0
        while (pos < Int(((input_string).count))) {
            var num: Int = (pos % Int((lowest &* 2)))
            let alt = ((lowest &* 2) &- num)
            if (num > alt) {
                num = Int(alt)
            }
            output = ((output + (grid[num][(indices[num] as? Int ?? 0)] as! String)) as! String)
            indices = _set(indices, num, Int(((indices[num] as? Int ?? 0) &+ 1)))
            pos = Int((pos &+ 1))
        }
        return output
    }
    func bruteforce(_ input_string: String) -> [Int: String] {
        var results: [Int: String] = ([:] as! [Int: String])
        var key_guess: Int = 1
        while (key_guess < Int(((input_string).count))) {
            results = _set(results, key_guess, String(describing: decrypt((input_string as! String), key_guess)))
            key_guess = Int((key_guess &+ 1))
        }
        return results
    }
    print(_p(String(describing: encrypt("Hello World", 4))))
    print(_p(String(describing: decrypt("HWe olordll", 4))))
    let bf: [Int: String] = (bruteforce("HWe olordll") as! [Int: String])
    print(_p((bf[4] as! String)))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
