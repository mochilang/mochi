// Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:58:45 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let SQUARE: [[String]] = ([(["a", "b", "c", "d", "e"] as! [String]), (["f", "g", "h", "i", "k"] as! [String]), (["l", "m", "n", "o", "p"] as! [String]), (["q", "r", "s", "t", "u"] as! [String]), (["v", "w", "x", "y", "z"] as! [String])] as! [[String]])
    func index_of(_ s: String, _ ch: String) -> Int {
        var i: Int = 0
        while (i < Int(((s).count))) {
            if ((String(Array(s)[i]) as! String) == ch) {
                return i
            }
            i = Int((i &+ 1))
        }
        return -1
    }
    func to_lower_without_spaces(_ message: String, _ replace_j: Bool) -> String {
        let upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
        let lower = "abcdefghijklmnopqrstuvwxyz"
        var res: String = ""
        var i: Int = 0
        while (i < Int(((message).count))) {
            var ch: String = (String(Array(message)[i]) as! String)
            let pos = Int(index_of((upper as! String), (ch as! String)))
            if (pos >= 0) {
                ch = (String(Array(lower)[pos]) as! String)
            }
            if (ch != " ") {
                if (replace_j && (ch == "j")) {
                    ch = "i"
                }
                res = ((res + ch) as! String)
            }
            i = Int((i &+ 1))
        }
        return res
    }
    func letter_to_numbers(_ letter: String) -> [Int] {
        var r: Int = 0
        while (r < Int(((SQUARE).count))) {
            var c: Int = 0
            while (c < Int((((SQUARE[r] as! [String])).count))) {
                if ((SQUARE[r][c] as! String) == letter) {
                    return ([(r &+ 1), (c &+ 1)] as! [Int])
                }
                c = Int((c &+ 1))
            }
            r = Int((r &+ 1))
        }
        return ([0, 0] as! [Int])
    }
    func numbers_to_letter(_ row: Int, _ col: Int) -> String {
        return (SQUARE[(row &- 1)][(col &- 1)] as! String)
    }
    func encode(_ message: String) -> String {
        let clean = String(describing: to_lower_without_spaces((message as! String), true))
        let l = Int(((clean).count))
        var rows: [Int] = ([] as! [Int])
        var cols: [Int] = ([] as! [Int])
        var i: Int = 0
        while (i < l) {
            let nums: [Int] = (letter_to_numbers((String(Array(clean)[i]) as! String)) as! [Int])
            rows = (_append(rows, (nums[0] as? Int ?? 0)) as! [Int])
            cols = (_append(cols, (nums[1] as? Int ?? 0)) as! [Int])
            i = Int((i &+ 1))
        }
        var seq: [Int] = ([] as! [Int])
        i = 0
        while (i < l) {
            seq = (_append(seq, (rows[i] as? Int ?? 0)) as! [Int])
            i = Int((i &+ 1))
        }
        i = 0
        while (i < l) {
            seq = (_append(seq, (cols[i] as? Int ?? 0)) as! [Int])
            i = Int((i &+ 1))
        }
        var encoded: String = ""
        i = 0
        while (i < l) {
            let r = (seq[(2 &* i)] as? Int ?? 0)
            let c = (seq[((2 &* i) &+ 1)] as? Int ?? 0)
            encoded = ((encoded + String(describing: numbers_to_letter(r, c))) as! String)
            i = Int((i &+ 1))
        }
        return encoded
    }
    func decode(_ message: String) -> String {
        let clean = String(describing: to_lower_without_spaces((message as! String), false))
        let l = Int(((clean).count))
        var first: [Int] = ([] as! [Int])
        var i: Int = 0
        while (i < l) {
            let nums: [Int] = (letter_to_numbers((String(Array(clean)[i]) as! String)) as! [Int])
            first = (_append(first, (nums[0] as? Int ?? 0)) as! [Int])
            first = (_append(first, (nums[1] as? Int ?? 0)) as! [Int])
            i = Int((i &+ 1))
        }
        var top: [Int] = ([] as! [Int])
        var bottom: [Int] = ([] as! [Int])
        i = 0
        while (i < l) {
            top = (_append(top, (first[i] as? Int ?? 0)) as! [Int])
            bottom = (_append(bottom, (first[(i &+ l)] as? Int ?? 0)) as! [Int])
            i = Int((i &+ 1))
        }
        var decoded: String = ""
        i = 0
        while (i < l) {
            let r = (top[i] as? Int ?? 0)
            let c = (bottom[i] as? Int ?? 0)
            decoded = ((decoded + String(describing: numbers_to_letter(r, c))) as! String)
            i = Int((i &+ 1))
        }
        return decoded
    }
    print(_p(String(describing: encode("testmessage"))))
    print(_p(String(describing: encode("Test Message"))))
    print(_p(String(describing: encode("test j"))))
    print(_p(String(describing: encode("test i"))))
    print(_p(String(describing: decode("qtltbdxrxlk"))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
