// Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:17:45 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let LETTERS = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    func find_char(_ s: String, _ ch: String) -> Int {
        var i: Int = 0
        while (i < Int(((s).count))) {
            if ((String(Array(s)[i]) as! String) == ch) {
                return i
            }
            i = Int((i &+ 1))
        }
        return -1
    }
    func encrypt_message(_ key: String, _ message: String) -> String {
        let chars_a = key
        let chars_b = LETTERS
        var translated: String = ""
        var i: Int = 0
        while (i < Int(((message).count))) {
            let symbol = (String(Array(message)[i]) as! String)
            let upper_sym = String(describing: ((symbol as! String).uppercased()))
            let sym_index = Int(find_char((chars_a as! String), (upper_sym as! String)))
            if (sym_index >= 0) {
                let sub_char = (String(Array(chars_b)[sym_index]) as! String)
                if (symbol == upper_sym) {
                    translated = ((translated + String(describing: ((sub_char as! String).uppercased()))) as! String)
                } else {
                    translated = ((translated + String(describing: (sub_char.lowercased()))) as! String)
                }
            } else {
                translated = ((translated + symbol) as! String)
            }
            i = Int((i &+ 1))
        }
        return translated
    }
    func decrypt_message(_ key: String, _ message: String) -> String {
        let chars_a = LETTERS
        let chars_b = key
        var translated: String = ""
        var i: Int = 0
        while (i < Int(((message).count))) {
            let symbol = (String(Array(message)[i]) as! String)
            let upper_sym = String(describing: ((symbol as! String).uppercased()))
            let sym_index = Int(find_char((chars_a as! String), (upper_sym as! String)))
            if (sym_index >= 0) {
                let sub_char = (String(Array(chars_b)[sym_index]) as! String)
                if (symbol == upper_sym) {
                    translated = ((translated + String(describing: ((sub_char as! String).uppercased()))) as! String)
                } else {
                    translated = ((translated + String(describing: (sub_char.lowercased()))) as! String)
                }
            } else {
                translated = ((translated + symbol) as! String)
            }
            i = Int((i &+ 1))
        }
        return translated
    }
    func main() -> Void {
        let message = "Hello World"
        let key = "QWERTYUIOPASDFGHJKLZXCVBNM"
        let mode = "decrypt"
        var translated: String = ""
        if (mode == "encrypt") {
            translated = String(describing: encrypt_message((key as! String), (message as! String)))
        } else {
            if (mode == "decrypt") {
                translated = String(describing: decrypt_message((key as! String), (message as! String)))
            }
        }
        print(_p(((((("Using the key " + key) + ", the ") + mode) + "ed message is: ") + translated)))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
