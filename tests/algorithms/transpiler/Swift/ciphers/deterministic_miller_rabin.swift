// Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:58:57 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func mod_pow(_ base: Int, _ exp: Int, _ mod: Int) -> Int {
        var result: Int = 1
        var b: Int = (base % mod)
        var e: Int = exp
        while (e > 0) {
            if ((e % 2) == 1) {
                result = Int((Int((result &* b)) % mod))
            }
            b = Int((Int((b &* b)) % mod))
            e = Int((e / 2))
        }
        return result
    }
    func miller_rabin(_ n: Int, _ allow_probable: Bool) -> Bool {
        if (n == 2) {
            return true
        }
        if ((n < 2) || ((n % 2) == 0)) {
            return false
        }
        if (n > 5) {
            let last = (n % 10)
            if (!((((last == 1) || (last == 3)) || (last == 7)) || (last == 9))) {
                return false
            }
        }
        let limit = 3825123056546413051
        if ((n > limit) && ((!allow_probable) as! Bool)) {
            _ = fatalError("Warning: upper bound of deterministic test is exceeded. Pass allow_probable=true to allow probabilistic test.")
        }
        let bounds: [Int] = ([2047, 1373653, 25326001, 3215031751, 2152302898747, 3474749660383, 341550071728321, limit] as! [Int])
        let primes: [Int] = ([2, 3, 5, 7, 11, 13, 17, 19] as! [Int])
        var i: Int = 0
        var plist_len: Int = Int(((primes).count))
        while (i < Int(((bounds).count))) {
            if (n < (bounds[i] as? Int ?? 0)) {
                plist_len = Int((i &+ 1))
                i = Int(((bounds).count))
            } else {
                i = Int((i &+ 1))
            }
        }
        var d: Int = (n &- 1)
        var s: Int = 0
        while ((d % 2) == 0) {
            d = Int((d / 2))
            s = Int((s &+ 1))
        }
        var j: Int = 0
        while (j < plist_len) {
            let prime = (primes[j] as? Int ?? 0)
            var x: Int = Int(mod_pow(prime, d, n))
            var pr: Bool = false
            if ((x == 1) || (x == (n &- 1))) {
                pr = true
            } else {
                var r: Int = 1
                while ((r < s) && ((!pr) as! Bool)) {
                    x = Int((Int((x &* x)) % n))
                    if (x == (n &- 1)) {
                        pr = true
                    }
                    r = Int((r &+ 1))
                }
            }
            if (!pr) {
                return false
            }
            j = Int((j &+ 1))
        }
        return true
    }
    print(_p(String(describing: miller_rabin(561, false))))
    print(_p(String(describing: miller_rabin(563, false))))
    print(_p(String(describing: miller_rabin(838201, false))))
    print(_p(String(describing: miller_rabin(838207, false))))
    print(_p(String(describing: miller_rabin(17316001, false))))
    print(_p(String(describing: miller_rabin(17316017, false))))
    print(_p(String(describing: miller_rabin(3078386641, false))))
    print(_p(String(describing: miller_rabin(3078386653, false))))
    print(_p(String(describing: miller_rabin(1713045574801, false))))
    print(_p(String(describing: miller_rabin(1713045574819, false))))
    print(_p(String(describing: miller_rabin(2779799728307, false))))
    print(_p(String(describing: miller_rabin(2779799728327, false))))
    print(_p(String(describing: miller_rabin(113850023909441, false))))
    print(_p(String(describing: miller_rabin(113850023909527, false))))
    print(_p(String(describing: miller_rabin(1275041018848804351, false))))
    print(_p(String(describing: miller_rabin(1275041018848804391, false))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
