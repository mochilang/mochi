// Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:17:25 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let MORSE_CODE_DICT: [String: String] = (["A": ".-", "B": "-...", "C": "-.-.", "D": "-..", "E": ".", "F": "..-.", "G": "--.", "H": "....", "I": "..", "J": ".---", "K": "-.-", "L": ".-..", "M": "--", "N": "-.", "O": "---", "P": ".--.", "Q": "--.-", "R": ".-.", "S": "...", "T": "-", "U": "..-", "V": "...-", "W": ".--", "X": "-..-", "Y": "-.--", "Z": "--..", " ": ""] as! [String: String])
    let MORSE_COMBINATIONS: [String] = (["...", "..-", "..x", ".-.", ".--", ".-x", ".x.", ".x-", ".xx", "-..", "-.-", "-.x", "--.", "---", "--x", "-x.", "-x-", "-xx", "x..", "x.-", "x.x", "x-.", "x--", "x-x", "xx.", "xx-", "xxx"] as! [String])
    let REVERSE_DICT: [String: String] = ([".-": "A", "-...": "B", "-.-.": "C", "-..": "D", ".": "E", "..-.": "F", "--.": "G", "....": "H", "..": "I", ".---": "J", "-.-": "K", ".-..": "L", "--": "M", "-.": "N", "---": "O", ".--.": "P", "--.-": "Q", ".-.": "R", "...": "S", "-": "T", "..-": "U", "...-": "V", ".--": "W", "-..-": "X", "-.--": "Y", "--..": "Z", "": " "] as! [String: String])
    func encodeToMorse(_ plaintext: String) -> String {
        var morse: String = ""
        var i: Int = 0
        while (i < Int(((plaintext).count))) {
            let ch = String(describing: ((String(Array(plaintext)[i..<(i &+ 1)]) as! String).uppercased()))
            var code: String = ""
            if (MORSE_CODE_DICT[ch] != nil) {
                code = (MORSE_CODE_DICT[String(String(describing: ch))] as! String)
            }
            if (i > 0) {
                morse = ((morse + "x") as! String)
            }
            morse = ((morse + code) as! String)
            i = Int((i &+ 1))
        }
        return morse
    }
    func encryptFractionatedMorse(_ plaintext: String, _ key: String) -> String {
        var morseCode: String = String(describing: encodeToMorse((plaintext as! String)))
        var combinedKey: String = (String(describing: ((key as! String).uppercased())) + "ABCDEFGHIJKLMNOPQRSTUVWXYZ")
        var dedupKey: String = ""
        var i: Int = 0
        while (i < Int(((combinedKey).count))) {
            let ch = String(Array(combinedKey)[i..<(i &+ 1)])
            if (!(dedupKey.contains(ch))) {
                dedupKey = ((dedupKey + ch) as! String)
            }
            i = Int((i &+ 1))
        }
        var paddingLength: Int = (3 &- Int((Int(((morseCode).count)) % 3)))
        var p: Int = 0
        while (p < paddingLength) {
            morseCode = ((morseCode + "x") as! String)
            p = Int((p &+ 1))
        }
        var dict: [String: String] = ([:] as! [String: String])
        var j: Int = 0
        while (j < 26) {
            let combo = (MORSE_COMBINATIONS[j] as! String)
            let letter = String(Array(dedupKey)[j..<(j &+ 1)])
            dict = _set(dict, String(describing: combo), (letter as! String))
            j = Int((j &+ 1))
        }
        dict = _set(dict, "xxx", "")
        var encrypted: String = ""
        var k: Int = 0
        while (k < Int(((morseCode).count))) {
            let group = String(Array(morseCode)[k..<(k &+ 3)])
            encrypted = ((encrypted + (dict[String(String(describing: group))] as! String)) as! String)
            k = Int((k &+ 3))
        }
        return encrypted
    }
    func decryptFractionatedMorse(_ ciphertext: String, _ key: String) -> String {
        var combinedKey: String = (String(describing: ((key as! String).uppercased())) + "ABCDEFGHIJKLMNOPQRSTUVWXYZ")
        var dedupKey: String = ""
        var i: Int = 0
        while (i < Int(((combinedKey).count))) {
            let ch = String(Array(combinedKey)[i..<(i &+ 1)])
            if (!(dedupKey.contains(ch))) {
                dedupKey = ((dedupKey + ch) as! String)
            }
            i = Int((i &+ 1))
        }
        var inv: [String: String] = ([:] as! [String: String])
        var j: Int = 0
        while (j < 26) {
            let letter = String(Array(dedupKey)[j..<(j &+ 1)])
            inv = _set(inv, String(describing: letter), (MORSE_COMBINATIONS[j] as! String))
            j = Int((j &+ 1))
        }
        var morse: String = ""
        var k: Int = 0
        while (k < Int(((ciphertext).count))) {
            let ch = String(Array(ciphertext)[k..<(k &+ 1)])
            if (inv[ch] != nil) {
                morse = ((morse + (inv[String(String(describing: ch))] as! String)) as! String)
            }
            k = Int((k &+ 1))
        }
        var codes: [String] = ([] as! [String])
        var current: String = ""
        var m: Int = 0
        while (m < Int(((morse).count))) {
            let ch = String(Array(morse)[m..<(m &+ 1)])
            if (ch == "x") {
                codes = (_append(codes, current) as! [String])
                current = ""
            } else {
                current = ((current + ch) as! String)
            }
            m = Int((m &+ 1))
        }
        codes = (_append(codes, current) as! [String])
        var decrypted: String = ""
        var idx: Int = 0
        while (idx < Int(((codes).count))) {
            let code = (codes[idx] as! String)
            decrypted = ((decrypted + (REVERSE_DICT[String(String(describing: code))] as! String)) as! String)
            idx = Int((idx &+ 1))
        }
        var start: Int = 0
        while true {
            if (start < Int(((decrypted).count))) {
                if (String(Array(decrypted)[start..<(start &+ 1)]) == " ") {
                    start = Int((start &+ 1))
                    continue
                }
            }
            break
        }
        var end: Int = Int(((decrypted).count))
        while true {
            if (end > start) {
                if (String(Array(decrypted)[(end &- 1)..<end]) == " ") {
                    end = Int((end &- 1))
                    continue
                }
            }
            break
        }
        return String(Array(decrypted)[start..<end])
    }
    let plaintext = "defend the east"
    print(_p("Plain Text:"), _p(plaintext))
    let key = "ROUNDTABLE"
    let ciphertext = String(describing: encryptFractionatedMorse((plaintext as! String), (key as! String)))
    print(_p("Encrypted:"), _p(ciphertext))
    var decrypted = String(describing: decryptFractionatedMorse((ciphertext as! String), (key as! String)))
    print(_p("Decrypted:"), _p(decrypted))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
