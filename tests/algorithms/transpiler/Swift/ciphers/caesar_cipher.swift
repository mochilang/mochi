// Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:58:49 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let default_alphabet = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
    func index_of(_ s: String, _ ch: String) -> Int {
        var i: Int = 0
        while (i < Int(((s).count))) {
            if (String(describing: String(Array(String(describing: (s as! String)))[i..<(i &+ 1)])) == ch) {
                return i
            }
            i = Int((i &+ 1))
        }
        return -1
    }
    func encrypt(_ input_string: String, _ key: Int, _ alphabet: String) -> String {
        var result: String = ""
        var i: Int = 0
        let n = Int(((alphabet).count))
        while (i < Int(((input_string).count))) {
            let ch = String(describing: String(Array(String(describing: (input_string as! String)))[i..<(i &+ 1)]))
            let idx = Int(index_of((alphabet as! String), (ch as! String)))
            if (idx < 0) {
                result = ((result + ch) as! String)
            } else {
                var new_key: Int = (Int((idx &+ key)) % n)
                if (new_key < 0) {
                    new_key = Int((new_key &+ n))
                }
                result = ((result + String(describing: String(Array(String(describing: (alphabet as! String)))[new_key..<(new_key &+ 1)]))) as! String)
            }
            i = Int((i &+ 1))
        }
        return result
    }
    func decrypt(_ input_string: String, _ key: Int, _ alphabet: String) -> String {
        var result: String = ""
        var i: Int = 0
        let n = Int(((alphabet).count))
        while (i < Int(((input_string).count))) {
            let ch = String(describing: String(Array(String(describing: (input_string as! String)))[i..<(i &+ 1)]))
            let idx = Int(index_of((alphabet as! String), (ch as! String)))
            if (idx < 0) {
                result = ((result + ch) as! String)
            } else {
                var new_key: Int = (Int((idx &- key)) % n)
                if (new_key < 0) {
                    new_key = Int((new_key &+ n))
                }
                result = ((result + String(describing: String(Array(String(describing: (alphabet as! String)))[new_key..<(new_key &+ 1)]))) as! String)
            }
            i = Int((i &+ 1))
        }
        return result
    }
    func brute_force(_ input_string: String, _ alphabet: String) -> [String] {
        var results: [String] = ([] as! [String])
        var key: Int = 1
        let n = Int(((alphabet).count))
        while (key <= n) {
            let message = String(describing: decrypt((input_string as! String), key, (alphabet as! String)))
            results = (_append(results, message) as! [String])
            key = Int((key &+ 1))
        }
        return results
    }
    func main() {
        let alpha = default_alphabet
        let enc = String(describing: encrypt("The quick brown fox jumps over the lazy dog", 8, (alpha as! String)))
        print(_p(enc))
        let dec = String(describing: decrypt((enc as! String), 8, (alpha as! String)))
        print(_p(dec))
        let brute: [String] = (brute_force("jFyuMy xIH'N vLONy zILwy Gy!", (alpha as! String)) as! [String])
        print(_p((brute[19] as! String)))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
