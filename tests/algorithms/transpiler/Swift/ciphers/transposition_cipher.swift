// Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:19:15 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func join_strings(_ xs: [String]) -> String {
        var res: String = ""
        var i: Int = 0
        while (i < Int(((xs).count))) {
            res = ((res + (xs[i] as! String)) as! String)
            i = Int((i &+ 1))
        }
        return res
    }
    func encrypt_message(_ key: Int, _ message: String) -> String {
        var result: String = ""
        var col: Int = 0
        while (col < key) {
            var pointer: Int = col
            while (pointer < Int(((message).count))) {
                result = ((result + String(describing: String(Array(String(describing: (message as! String)))[pointer..<(pointer &+ 1)]))) as! String)
                pointer = Int((pointer &+ key))
            }
            col = Int((col &+ 1))
        }
        return result
    }
    func decrypt_message(_ key: Int, _ message: String) -> String {
        let num_cols: Int = (Int(((Int(((message).count)) &+ key) &- 1)) / key)
        let num_rows: Int = key
        let num_shaded_boxes: Int = (Int((num_cols &* num_rows)) &- Int(((message).count)))
        var plain_text: [String] = ([] as! [String])
        var i: Int = 0
        while (i < num_cols) {
            plain_text = (_append(plain_text, "") as! [String])
            i = Int((i &+ 1))
        }
        var col: Int = 0
        var row: Int = 0
        var index: Int = 0
        while (index < Int(((message).count))) {
            plain_text = _set(plain_text, col, (((plain_text[col] as! String) + String(describing: String(Array(String(describing: (message as! String)))[index..<(index &+ 1)]))) as! String))
            col = Int((col &+ 1))
            if ((col == num_cols) || ((col == (num_cols &- 1)) && (row >= (num_rows &- num_shaded_boxes)))) {
                col = 0
                row = Int((row &+ 1))
            }
            index = Int((index &+ 1))
        }
        return String(describing: join_strings((plain_text as! [String])))
    }
    func main() {
        print(_p("Enter message: "))
        let message: String = (readLine() ?? "")
        let max_key: Int = (Int(((message).count)) &- 1)
        print(_p((("Enter key [2-" + String(describing: max_key)) + "]: ")))
        let key: Int = Int(_int((readLine() ?? "")))
        print(_p("Encryption/Decryption [e/d]: "))
        let mode: String = (readLine() ?? "")
        var text: String = ""
        let first: String = String(describing: String(Array(String(describing: (mode as! String)))[0..<1]))
        if ((first == "e") || (first == "E")) {
            text = String(describing: encrypt_message(key, (message as! String)))
        } else if ((first == "d") || (first == "D")) {
            text = String(describing: decrypt_message(key, (message as! String)))
        }
        
        print(_p((("Output:\n" + text) + "|")))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
