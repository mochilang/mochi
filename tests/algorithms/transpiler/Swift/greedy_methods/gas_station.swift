// Generated by Mochi transpiler v0.10.65 on 2025-08-14 16:20:37 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
struct GasStation: Codable {
    var gas_quantity: Int
    var cost: Int
    init() {
        self.gas_quantity = 0
        self.cost = 0
    }
    init(gas_quantity: Int, cost: Int) {
        self.gas_quantity = gas_quantity
        self.cost = cost
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func get_gas_stations(_ gas_quantities: [Int], _ costs: [Int]) -> [GasStation] {
        var stations: [GasStation] = ([] as! [GasStation])
        var i = 0
        while (i < _int(((gas_quantities).count))) {
            stations = (_append(stations, GasStation(gas_quantity: (_idx(gas_quantities, i) as? Int ?? 0), cost: (_idx(costs, i) as? Int ?? 0))) as! [GasStation])
            i = _int((i &+ 1))
        }
        return stations
    }
    func can_complete_journey(_ gas_stations: [GasStation]) -> Int {
        var total_gas = 0
        var total_cost = 0
        var i = 0
        while (i < _int(((gas_stations).count))) {
            total_gas = _int((total_gas &+ _idx(gas_stations, i)!.gas_quantity))
            total_cost = _int((total_cost &+ _idx(gas_stations, i)!.cost))
            i = _int((i &+ 1))
        }
        if (total_gas < total_cost) {
            return -1
        }
        var start = 0
        var net = 0
        i = 0
        while (i < _int(((gas_stations).count))) {
            let station = (_idx(gas_stations, i) as! GasStation)
            net = _int(((net &+ station.gas_quantity) &- station.cost))
            if (net < 0) {
                start = _int((i &+ 1))
                net = 0
            }
            i = _int((i &+ 1))
        }
        return start
    }
    let example1: [GasStation] = (get_gas_stations(({
        var _arr: [Int] = []
        _arr = _append(_arr, 1)
        _arr = _append(_arr, 2)
        _arr = _append(_arr, 3)
        _arr = _append(_arr, 4)
        _arr = _append(_arr, 5)
        return _arr
    }() as! [Int]), ({
        var _arr: [Int] = []
        _arr = _append(_arr, 3)
        _arr = _append(_arr, 4)
        _arr = _append(_arr, 5)
        _arr = _append(_arr, 1)
        _arr = _append(_arr, 2)
        return _arr
    }() as! [Int])) as! [GasStation])
    print(_p(_p(_int(can_complete_journey((example1 as! [GasStation]))))))
    let example2: [GasStation] = (get_gas_stations(({
        var _arr: [Int] = []
        _arr = _append(_arr, 2)
        _arr = _append(_arr, 3)
        _arr = _append(_arr, 4)
        return _arr
    }() as! [Int]), ({
        var _arr: [Int] = []
        _arr = _append(_arr, 3)
        _arr = _append(_arr, 4)
        _arr = _append(_arr, 3)
        return _arr
    }() as! [Int])) as! [GasStation])
    print(_p(_p(_int(can_complete_journey((example2 as! [GasStation]))))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
