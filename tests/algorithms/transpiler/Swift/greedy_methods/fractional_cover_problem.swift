// Generated by Mochi transpiler v0.10.65 on 2025-08-14 16:20:25 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
struct Item: Codable {
    var weight: Int
    var value: Int
    init() {
        self.weight = 0
        self.value = 0
    }
    init(weight: Int, value: Int) {
        self.weight = weight
        self.value = value
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func ratio(_ item: Item) -> Double {
        return (Double(item.value) / Double(item.weight))
    }
    func fractional_cover(_ items: [Item], _ capacity: Int) -> Double {
        if (capacity < 0) {
            _ = fatalError("Capacity cannot be negative")
        }
        var total: Double = 0.0
        var remaining: Int = capacity
        let sorted: [Item] = (({ var _res: [Item] = []
        for it in items {
            _res.append(it)
        }
        var _list = _res
        _list.sort { left, right in
        var it = left
        let _ka = -Double(ratio((it as! Item)))
        it = right
        let _kb = -Double(ratio((it as! Item)))
        return String(describing: _ka) < String(describing: _kb)
    }
    return _list })() as! [Item])
    var idx = 0
    while ((idx < _int(((sorted).count))) && (remaining > 0)) {
        let item = (_idx(sorted, idx) as! Item)
        let take = _int(((item.weight < remaining) ? item.weight : remaining))
        total = Double((total + (Double(take) * Double(ratio((item as! Item))))))
        remaining = _int((remaining &- take))
        idx = _int((idx &+ 1))
    }
    return total
}
let items1: [Item] = ({
    var _arr: [Item] = []
    _arr = _append(_arr, Item(weight: 10, value: 60))
    _arr = _append(_arr, Item(weight: 20, value: 100))
    _arr = _append(_arr, Item(weight: 30, value: 120))
    return _arr
}() as! [Item])
print(_p(_p(Double(fractional_cover((items1 as! [Item]), 50)))))
let items2: [Item] = ({
    var _arr: [Item] = []
    _arr = _append(_arr, Item(weight: 20, value: 100))
    _arr = _append(_arr, Item(weight: 30, value: 120))
    _arr = _append(_arr, Item(weight: 10, value: 60))
    return _arr
}() as! [Item])
print(_p(_p(Double(fractional_cover((items2 as! [Item]), 25)))))
let items3: [Item] = ([] as! [Item])
print(_p(_p(Double(fractional_cover((items3 as! [Item]), 50)))))
let items4: [Item] = ({
    var _arr: [Item] = []
    _arr = _append(_arr, Item(weight: 10, value: 60))
    return _arr
}() as! [Item])
print(_p(_p(Double(fractional_cover((items4 as! [Item]), 5)))))
print(_p(_p(Double(fractional_cover((items4 as! [Item]), 1)))))
print(_p(_p(Double(fractional_cover((items4 as! [Item]), 0)))))
let _benchEnd = _now()
let _benchMemEnd = _mem()
print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
