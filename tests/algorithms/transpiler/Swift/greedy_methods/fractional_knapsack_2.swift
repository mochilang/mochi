// Generated by Mochi transpiler v0.10.65 on 2025-08-14 16:20:33 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
struct KnapsackResult: Codable {
    var max_value: Double
    var fractions: [Double]
    init() {
        self.max_value = 0
        self.fractions = []
    }
    init(max_value: Double, fractions: [Double]) {
        self.max_value = max_value
        self.fractions = fractions
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func sort_by_ratio(_ index: inout [Int], _ ratio: [Double]) -> [Int] {
        var i = 1
        while (i < _int(((index).count))) {
            let key = (_idx(index, i) as? Int ?? 0)
            let key_ratio = Double(_idx(ratio, key))
            var j = (i &- 1)
            while ((j >= 0) && (Double(_idx(ratio, (_idx(index, j) as? Int ?? 0))) < key_ratio)) {
                index = _set(index, (j &+ 1), (_idx(index, j) as? Int ?? 0))
                j = _int((j &- 1))
            }
            index = _set(index, (j &+ 1), Int(key))
            i = _int((i &+ 1))
        }
        return index
    }
    func fractional_knapsack(_ value: [Double], _ weight: [Double], _ capacity: Double) -> KnapsackResult {
        var capacity = capacity
        let n = _int(((value).count))
        var index: [Int] = ([] as! [Int])
        var i = 0
        while (i < n) {
            index = (_append(index, i) as! [Int])
            i = _int((i &+ 1))
        }
        var ratio: [Double] = ([] as! [Double])
        i = 0
        while (i < n) {
            ratio = (_append(ratio, (Double(_idx(value, i)) / Double(_idx(weight, i)))) as! [Double])
            i = _int((i &+ 1))
        }
        index = (sort_by_ratio(&index, (ratio as! [Double])) as! [Int])
        var fractions: [Double] = ([] as! [Double])
        i = 0
        while (i < n) {
            fractions = (_append(fractions, 0.0) as! [Double])
            i = _int((i &+ 1))
        }
        var max_value: Double = 0.0
        var idx = 0
        while (idx < _int(((index).count))) {
            let item = (_idx(index, idx) as? Int ?? 0)
            if (Double(_idx(weight, item)) <= capacity) {
                fractions = _set(fractions, item, 1.0)
                max_value = Double((max_value + Double(_idx(value, item))))
                capacity = Double((capacity - Double(_idx(weight, item))))
            } else {
                fractions = _set(fractions, item, Double((capacity / Double(_idx(weight, item)))))
                max_value = Double((max_value + ((Double(_idx(value, item)) * capacity) / Double(_idx(weight, item)))))
                break
            }
            idx = _int((idx &+ 1))
        }
        return KnapsackResult(max_value: Double(max_value), fractions: (fractions as! [Double]))
    }
    let v: [Double] = ({
        var _arr: [Double] = []
        _arr = _append(_arr, 1.0)
        _arr = _append(_arr, 3.0)
        _arr = _append(_arr, 5.0)
        _arr = _append(_arr, 7.0)
        _arr = _append(_arr, 9.0)
        return _arr
    }() as! [Double])
    let w: [Double] = ({
        var _arr: [Double] = []
        _arr = _append(_arr, 0.9)
        _arr = _append(_arr, 0.7)
        _arr = _append(_arr, 0.5)
        _arr = _append(_arr, 0.3)
        _arr = _append(_arr, 0.1)
        return _arr
    }() as! [Double])
    print(_p(String(describing: fractional_knapsack((v as! [Double]), (w as! [Double]), 5.0))))
    print(_p(String(describing: fractional_knapsack(({
        var _arr: [Double] = []
        _arr = _append(_arr, 1.0)
        _arr = _append(_arr, 3.0)
        _arr = _append(_arr, 5.0)
        _arr = _append(_arr, 7.0)
        return _arr
    }() as! [Double]), ({
        var _arr: [Double] = []
        _arr = _append(_arr, 0.9)
        _arr = _append(_arr, 0.7)
        _arr = _append(_arr, 0.5)
        _arr = _append(_arr, 0.3)
        return _arr
    }() as! [Double]), 30.0))))
    print(_p(String(describing: fractional_knapsack(([] as! [Double]), ([] as! [Double]), 30.0))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
