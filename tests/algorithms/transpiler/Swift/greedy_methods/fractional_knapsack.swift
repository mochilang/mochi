// Generated by Mochi transpiler v0.10.65 on 2025-08-14 16:20:29 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
struct Item: Codable {
    var value: Double
    var weight: Double
    init() {
        self.value = 0
        self.weight = 0
    }
    init(value: Double, weight: Double) {
        self.value = value
        self.weight = weight
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func sort_by_ratio_desc(_ arr: inout [Item]) -> [Item] {
        var i = 1
        while (i < _int(((arr).count))) {
            let key = (_idx(arr, i) as! Item)
            var j = (i &- 1)
            while (j >= 0) {
                let current = (_idx(arr, j) as! Item)
                if ((current.value / current.weight) < (key.value / key.weight)) {
                    arr = _set(arr, (j &+ 1), (current as! Item))
                    j = _int((j &- 1))
                } else {
                    break
                }
            }
            arr = _set(arr, (j &+ 1), (key as! Item))
            i = _int((i &+ 1))
        }
        return arr
    }
    func sum_first(_ arr: [Double], _ k: Int) -> Double {
        var s = 0.0
        var i = 0
        while ((i < k) && (i < _int(((arr).count)))) {
            s = Double((s + Double(_idx(arr, i))))
            i = _int((i &+ 1))
        }
        return s
    }
    func frac_knapsack(_ vl: [Double], _ wt: [Double], _ w: Double, _ n: Int) -> Double {
        var items: [Item] = ([] as! [Item])
        var i = 0
        while ((i < _int(((vl).count))) && (i < _int(((wt).count)))) {
            items = (_append(items, Item(value: Double(_idx(vl, i)), weight: Double(_idx(wt, i)))) as! [Item])
            i = _int((i &+ 1))
        }
        items = (sort_by_ratio_desc(&items) as! [Item])
        var values: [Double] = ([] as! [Double])
        var weights: [Double] = ([] as! [Double])
        i = 0
        while (i < _int(((items).count))) {
            let itm = (_idx(items, i) as! Item)
            values = (_append(values, itm.value) as! [Double])
            weights = (_append(weights, itm.weight) as! [Double])
            i = _int((i &+ 1))
        }
        var acc: [Double] = ([] as! [Double])
        var total = 0.0
        i = 0
        while (i < _int(((weights).count))) {
            total = Double((total + Double(_idx(weights, i))))
            acc = (_append(acc, total) as! [Double])
            i = _int((i &+ 1))
        }
        var k = 0
        while ((k < _int(((acc).count))) && (w >= Double(_idx(acc, k)))) {
            k = _int((k &+ 1))
        }
        if (k == 0) {
            return 0.0
        }
        if (k >= _int(((values).count))) {
            return Double(sum_first((values as! [Double]), _int(((values).count))))
        }
        if (k != n) {
            return (Double(sum_first((values as! [Double]), k)) + ((Double((w - Double(_idx(acc, (k &- 1))))) * Double(_idx(values, k))) / Double(_idx(weights, k))))
        }
        return Double(sum_first((values as! [Double]), k))
    }
    let vl: [Double] = ({
        var _arr: [Double] = []
        _arr = _append(_arr, 60.0)
        _arr = _append(_arr, 100.0)
        _arr = _append(_arr, 120.0)
        return _arr
    }() as! [Double])
    let wt: [Double] = ({
        var _arr: [Double] = []
        _arr = _append(_arr, 10.0)
        _arr = _append(_arr, 20.0)
        _arr = _append(_arr, 30.0)
        return _arr
    }() as! [Double])
    let result = Double(frac_knapsack((vl as! [Double]), (wt as! [Double]), 50.0, 3))
    print(_p(_p(result)))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
