// Generated by Mochi transpiler v0.10.66 on 2025-08-15 15:26:07 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _idx<K: Hashable, V>(_ m: [K: V], _ k: K) -> V? {
    return m[k]
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
struct HeapItem: Codable {
    var value: Int
    var list_idx: Int
    var elem_idx: Int
    init() {
        self.value = 0
        self.list_idx = 0
        self.elem_idx = 0
    }
    init(value: Int, list_idx: Int, elem_idx: Int) {
        self.value = value
        self.list_idx = list_idx
        self.elem_idx = elem_idx
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let INF = 1000000000
    func smallest_range(_ nums: [[Int]]) -> [Int] {
        var heap: [HeapItem] = ([] as! [HeapItem])
        var current_max = -INF
        var i = 0
        while (i < _int(((nums).count))) {
            let first_val = (_idx(_idx(nums, i)!, 0) as? Int ?? 0)
            heap = (_append(heap, HeapItem(value: Int(first_val), list_idx: Int(i), elem_idx: 0)) as! [HeapItem])
            if (first_val > current_max) {
                current_max = Int(first_val)
            }
            i = _int((i &+ 1))
        }
        var best: [Int] = ({
            var _arr: [Int] = []
            _arr = _append(_arr, -INF)
            _arr = _append(_arr, INF)
            return _arr
        }() as! [Int])
        while (_int(((heap).count)) > 0) {
            var min_idx = 0
            var j = 1
            while (j < _int(((heap).count))) {
                let hj = (_idx(heap, j) as! HeapItem)
                let hmin = (_idx(heap, min_idx) as! HeapItem)
                if (hj.value < hmin.value) {
                    min_idx = Int(j)
                }
                j = _int((j &+ 1))
            }
            let item = (_idx(heap, min_idx) as! HeapItem)
            var new_heap: [HeapItem] = ([] as! [HeapItem])
            var k = 0
            while (k < _int(((heap).count))) {
                if (k != min_idx) {
                    new_heap = (_append(new_heap, (_idx(heap, k) as! HeapItem)) as! [HeapItem])
                }
                k = _int((k &+ 1))
            }
            heap = (new_heap as! [HeapItem])
            let current_min = item.value
            if ((current_max &- current_min) < ((_idx(best, 1) as? Int ?? 0) &- (_idx(best, 0) as? Int ?? 0))) {
                best = ({
                    var _arr: [Int] = []
                    _arr = _append(_arr, current_min)
                    _arr = _append(_arr, current_max)
                    return _arr
                }() as! [Int])
            }
            if (item.elem_idx == (_int((((_idx(nums, item.list_idx) as! [Int])).count)) &- 1)) {
                break
            }
            let next_val = (_idx(_idx(nums, item.list_idx)!, (item.elem_idx &+ 1)) as? Int ?? 0)
            heap = (_append(heap, HeapItem(value: Int(next_val), list_idx: (item.list_idx as? Int ?? 0), elem_idx: _int((item.elem_idx &+ 1)))) as! [HeapItem])
            if (next_val > current_max) {
                current_max = Int(next_val)
            }
        }
        return best
    }
    func list_to_string(_ arr: [Int]) -> String {
        var s = "["
        var i = 0
        while (i < _int(((arr).count))) {
            s = ((_p(s) + _p(_p((_idx(arr, i) as? Int ?? 0)))) as! String)
            if (i < (_int(((arr).count)) &- 1)) {
                s = ((_p(s) + _p(", ")) as! String)
            }
            i = _int((i &+ 1))
        }
        return (_p(s) + _p("]"))
    }
    func main() {
        let result1: [Int] = (smallest_range(({
            var _arr: [[Int]] = []
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 4)
                _arr = _append(_arr, 10)
                _arr = _append(_arr, 15)
                _arr = _append(_arr, 24)
                _arr = _append(_arr, 26)
                return _arr
            }() as! [Int]))
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 0)
                _arr = _append(_arr, 9)
                _arr = _append(_arr, 12)
                _arr = _append(_arr, 20)
                return _arr
            }() as! [Int]))
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 5)
                _arr = _append(_arr, 18)
                _arr = _append(_arr, 22)
                _arr = _append(_arr, 30)
                return _arr
            }() as! [Int]))
            return _arr
        }() as! [[Int]])) as! [Int])
        print(_p(String(describing: list_to_string((result1 as! [Int])))))
        let result2: [Int] = (smallest_range(({
            var _arr: [[Int]] = []
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 1)
                _arr = _append(_arr, 2)
                _arr = _append(_arr, 3)
                return _arr
            }() as! [Int]))
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 1)
                _arr = _append(_arr, 2)
                _arr = _append(_arr, 3)
                return _arr
            }() as! [Int]))
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 1)
                _arr = _append(_arr, 2)
                _arr = _append(_arr, 3)
                return _arr
            }() as! [Int]))
            return _arr
        }() as! [[Int]])) as! [Int])
        print(_p(String(describing: list_to_string((result2 as! [Int])))))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
