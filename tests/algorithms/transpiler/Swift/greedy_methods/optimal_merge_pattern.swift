// Generated by Mochi transpiler v0.10.61 on 2025-08-08 15:52:17 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func index_of_min(_ xs: [Int]) -> Int {
        var min_idx: Int = 0
        var i: Int = 1
        while (i < _int(((xs).count))) {
            if ((xs[i] as? Int ?? 0) < (xs[min_idx] as? Int ?? 0)) {
                min_idx = Int(i)
            }
            i = _int((i &+ 1))
        }
        return min_idx
    }
    func remove_at(_ xs: [Int], _ idx: Int) -> [Int] {
        var res: [Int] = ([] as! [Int])
        var i: Int = 0
        while (i < _int(((xs).count))) {
            if (i != idx) {
                res = (_append(res, (xs[i] as? Int ?? 0)) as! [Int])
            }
            i = _int((i &+ 1))
        }
        return res
    }
    func optimal_merge_pattern(_ files: [Int]) -> Int {
        var arr: [Int] = files
        var optimal_merge_cost: Int = 0
        while (_int(((arr).count)) > 1) {
            var temp: Int = 0
            var k: Int = 0
            while (k < 2) {
                let min_idx = _int(index_of_min((arr as! [Int])))
                temp = _int((temp &+ (arr[min_idx] as? Int ?? 0)))
                arr = (remove_at((arr as! [Int]), min_idx) as! [Int])
                k = _int((k &+ 1))
            }
            arr = (_append(arr, temp) as! [Int])
            optimal_merge_cost = _int((optimal_merge_cost &+ temp))
        }
        return optimal_merge_cost
    }
    print(_p(_int(optimal_merge_pattern(([2, 3, 4] as! [Int])))))
    print(_p(_int(optimal_merge_pattern(([5, 10, 20, 30, 30] as! [Int])))))
    print(_p(_int(optimal_merge_pattern(([8, 8, 8, 8, 8] as! [Int])))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
