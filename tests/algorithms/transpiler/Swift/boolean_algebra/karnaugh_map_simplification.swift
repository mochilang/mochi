// Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:57:39 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func row_string(_ row: [Int]) -> String {
        var s: String = "["
        var i: Int = 0
        while (i < Int(((row).count))) {
            s = ((s + String(describing: (row[i] as? Int ?? 0))) as! String)
            if (i < (Int(((row).count)) &- 1)) {
                s = ((s + ", ") as! String)
            }
            i = Int((i &+ 1))
        }
        s = ((s + "]") as! String)
        return s
    }
    func print_kmap(_ kmap: [[Int]]) {
        var i: Int = 0
        while (i < Int(((kmap).count))) {
            print(_p(String(describing: row_string((kmap[i] as! [Int])))))
            i = Int((i &+ 1))
        }
    }
    func join_terms(_ terms: [String]) -> String {
        if (Int(((terms).count)) == 0) {
            return ""
        }
        var res: String = (terms[0] as! String)
        var i: Int = 1
        while (i < Int(((terms).count))) {
            res = (((res + " + ") + (terms[i] as! String)) as! String)
            i = Int((i &+ 1))
        }
        return res
    }
    func simplify_kmap(_ board: [[Int]]) -> String {
        var terms: [String] = ([] as! [String])
        var a: Int = 0
        while (a < Int(((board).count))) {
            let row: [Int] = (board[a] as! [Int])
            var b: Int = 0
            while (b < Int(((row).count))) {
                let item = (row[b] as? Int ?? 0)
                if (item != 0) {
                    let term = (String(describing: ((a != 0) ? "A" : "A'")) + String(describing: ((b != 0) ? "B" : "B'")))
                    terms = (_append(terms, term) as! [String])
                }
                b = Int((b &+ 1))
            }
            a = Int((a &+ 1))
        }
        let expr = String(describing: join_terms((terms as! [String])))
        return expr
    }
    var kmap: [[Int]] = ([([0, 1] as! [Int]), ([1, 1] as! [Int])] as! [[Int]])
    _ = print_kmap((kmap as! [[Int]]))
    print(_p("Simplified Expression:"))
    print(_p(String(describing: simplify_kmap((kmap as! [[Int]])))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
