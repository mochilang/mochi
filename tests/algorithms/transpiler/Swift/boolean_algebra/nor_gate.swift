// Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:57:48 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func nor_gate(_ input_1: Int, _ input_2: Int) -> Int {
        if ((input_1 == 0) && (input_2 == 0)) {
            return 1
        }
        return 0
    }
    func center(_ s: String, _ width: Int) -> String {
        var total: Int = (width &- Int(((s).count)))
        if (total <= 0) {
            return s
        }
        var left: Int = (total / 2)
        var right: Int = (total &- left)
        var res: String = s
        var i: Int = 0
        while (i < left) {
            res = ((" " + res) as! String)
            i = Int((i &+ 1))
        }
        var j: Int = 0
        while (j < right) {
            res = ((res + " ") as! String)
            j = Int((j &+ 1))
        }
        return res
    }
    func make_table_row(_ i: Int, _ j: Int) -> String {
        let output = Int(nor_gate(i, j))
        return (((((("| " + String(describing: center(String(describing: i), 8))) + " | ") + String(describing: center(String(describing: j), 8))) + " | ") + String(describing: center(String(describing: output), 8))) + " |")
    }
    func truth_table() -> String {
        return (((((((("Truth Table of NOR Gate:\n" + "| Input 1 | Input 2 | Output  |\n") + String(describing: make_table_row(0, 0))) + "\n") + String(describing: make_table_row(0, 1))) + "\n") + String(describing: make_table_row(1, 0))) + "\n") + String(describing: make_table_row(1, 1)))
    }
    print(_p(Int(nor_gate(0, 0))))
    print(_p(Int(nor_gate(0, 1))))
    print(_p(Int(nor_gate(1, 0))))
    print(_p(Int(nor_gate(1, 1))))
    print(_p(String(describing: truth_table())))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
