// Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:57:55 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func compare_string(_ string1: String, _ string2: String) -> String {
        var result: String = ""
        var count: Int = 0
        var i: Int = 0
        while (i < Int(((string1).count))) {
            let c1 = String(describing: String(Array(String(describing: (string1 as! String)))[i..<(i &+ 1)]))
            let c2 = String(describing: String(Array(String(describing: (string2 as! String)))[i..<(i &+ 1)]))
            if (c1 != c2) {
                count = Int((count &+ 1))
                result = ((result + "_") as! String)
            } else {
                result = ((result + c1) as! String)
            }
            i = Int((i &+ 1))
        }
        if (count > 1) {
            return ""
        }
        return result
    }
    func contains_string(_ arr: [String], _ value: String) -> Bool {
        var i: Int = 0
        while (i < Int(((arr).count))) {
            if ((arr[i] as! String) == value) {
                return true
            }
            i = Int((i &+ 1))
        }
        return false
    }
    func unique_strings(_ arr: [String]) -> [String] {
        var res: [String] = ([] as! [String])
        var i: Int = 0
        while (i < Int(((arr).count))) {
            if (!contains_string((res as! [String]), (arr[i] as! String))) {
                res = (_append(res, (arr[i] as! String)) as! [String])
            }
            i = Int((i &+ 1))
        }
        return res
    }
    func check(_ binary: [String]) -> [String] {
        var pi: [String] = ([] as! [String])
        var current: [String] = binary
        while true {
            var check1: [String] = ([] as! [String])
            var i: Int = 0
            while (i < Int(((current).count))) {
                check1 = (_append(check1, "$") as! [String])
                i = Int((i &+ 1))
            }
            var temp: [String] = ([] as! [String])
            i = 0
            while (i < Int(((current).count))) {
                var j: Int = (i &+ 1)
                while (j < Int(((current).count))) {
                    let k = String(describing: compare_string((current[i] as! String), (current[j] as! String)))
                    if (k == "") {
                        check1 = _set(check1, i, "*")
                        check1 = _set(check1, j, "*")
                        temp = (_append(temp, "X") as! [String])
                    }
                    j = Int((j &+ 1))
                }
                i = Int((i &+ 1))
            }
            i = 0
            while (i < Int(((current).count))) {
                if ((check1[i] as! String) == "$") {
                    pi = (_append(pi, (current[i] as! String)) as! [String])
                }
                i = Int((i &+ 1))
            }
            if (Int(((temp).count)) == 0) {
                return pi
            }
            current = (unique_strings((temp as! [String])) as! [String])
        }
    }
    func decimal_to_binary(_ no_of_variable: Int, _ minterms: [Int]) -> [String] {
        var temp: [String] = ([] as! [String])
        var idx: Int = 0
        while (idx < Int(((minterms).count))) {
            var minterm: Int = (minterms[idx] as? Int ?? 0)
            var string: String = ""
            var i: Int = 0
            while (i < no_of_variable) {
                string = ((String(describing: (minterm % 2)) + string) as! String)
                minterm = Int((minterm / 2))
                i = Int((i &+ 1))
            }
            temp = (_append(temp, string) as! [String])
            idx = Int((idx &+ 1))
        }
        return temp
    }
    func is_for_table(_ string1: String, _ string2: String, _ count: Int) -> Bool {
        var count_n: Int = 0
        var i: Int = 0
        while (i < Int(((string1).count))) {
            let c1 = String(describing: String(Array(String(describing: (string1 as! String)))[i..<(i &+ 1)]))
            let c2 = String(describing: String(Array(String(describing: (string2 as! String)))[i..<(i &+ 1)]))
            if (c1 != c2) {
                count_n = Int((count_n &+ 1))
            }
            i = Int((i &+ 1))
        }
        return (count_n == count)
    }
    func count_ones(_ row: [Int]) -> Int {
        var c: Int = 0
        var j: Int = 0
        while (j < Int(((row).count))) {
            if ((row[j] as? Int ?? 0) == 1) {
                c = Int((c &+ 1))
            }
            j = Int((j &+ 1))
        }
        return c
    }
    func selection(_ chart: inout [[Int]], _ prime_implicants: [String]) -> [String] {
        var temp: [String] = ([] as! [String])
        var select: [Int] = ([] as! [Int])
        var i: Int = 0
        while (i < Int(((chart).count))) {
            select = (_append(select, 0) as! [Int])
            i = Int((i &+ 1))
        }
        var col: Int = 0
        while (col < Int((((chart[0] as! [Int])).count))) {
            var count: Int = 0
            var row: Int = 0
            while (row < Int(((chart).count))) {
                if ((chart[row][col] as? Int ?? 0) == 1) {
                    count = Int((count &+ 1))
                }
                row = Int((row &+ 1))
            }
            if (count == 1) {
                var rem: Int = 0
                row = 0
                while (row < Int(((chart).count))) {
                    if ((chart[row][col] as? Int ?? 0) == 1) {
                        rem = Int(row)
                    }
                    row = Int((row &+ 1))
                }
                select = _set(select, rem, 1)
            }
            col = Int((col &+ 1))
        }
        i = 0
        while (i < Int(((select).count))) {
            if ((select[i] as? Int ?? 0) == 1) {
                var j: Int = 0
                while (j < Int((((chart[0] as! [Int])).count))) {
                    if ((chart[i][j] as? Int ?? 0) == 1) {
                        var r: Int = 0
                        while (r < Int(((chart).count))) {
                            chart[r][j] = 0
                            r = Int((r &+ 1))
                        }
                    }
                    j = Int((j &+ 1))
                }
                temp = (_append(temp, (prime_implicants[i] as! String)) as! [String])
            }
            i = Int((i &+ 1))
        }
        while true {
            var counts: [Int] = ([] as! [Int])
            var r: Int = 0
            while (r < Int(((chart).count))) {
                counts = (_append(counts, Int(count_ones((chart[r] as! [Int])))) as! [Int])
                r = Int((r &+ 1))
            }
            var max_n: Int = (counts[0] as? Int ?? 0)
            var rem: Int = 0
            var k: Int = 1
            while (k < Int(((counts).count))) {
                if ((counts[k] as? Int ?? 0) > max_n) {
                    max_n = (counts[k] as? Int ?? 0)
                    rem = Int(k)
                }
                k = Int((k &+ 1))
            }
            if (max_n == 0) {
                return temp
            }
            temp = (_append(temp, (prime_implicants[rem] as! String)) as! [String])
            var j: Int = 0
            while (j < Int((((chart[0] as! [Int])).count))) {
                if ((chart[rem][j] as? Int ?? 0) == 1) {
                    var r2: Int = 0
                    while (r2 < Int(((chart).count))) {
                        chart[r2][j] = 0
                        r2 = Int((r2 &+ 1))
                    }
                }
                j = Int((j &+ 1))
            }
        }
    }
    func count_char(_ s: String, _ ch: String) -> Int {
        var cnt: Int = 0
        var i: Int = 0
        while (i < Int(((s).count))) {
            if (String(describing: String(Array(String(describing: (s as! String)))[i..<(i &+ 1)])) == ch) {
                cnt = Int((cnt &+ 1))
            }
            i = Int((i &+ 1))
        }
        return cnt
    }
    func prime_implicant_chart(_ prime_implicants: [String], _ binary: [String]) -> [[Int]] {
        var chart: [[Int]] = ([] as! [[Int]])
        var i: Int = 0
        while (i < Int(((prime_implicants).count))) {
            var row: [Int] = ([] as! [Int])
            var j: Int = 0
            while (j < Int(((binary).count))) {
                row = (_append(row, 0) as! [Int])
                j = Int((j &+ 1))
            }
            chart = (_append(chart, row) as! [[Int]])
            i = Int((i &+ 1))
        }
        i = 0
        while (i < Int(((prime_implicants).count))) {
            let count = Int(count_char((prime_implicants[i] as! String), "_"))
            var j: Int = 0
            while (j < Int(((binary).count))) {
                if is_for_table((prime_implicants[i] as! String), (binary[j] as! String), count) {
                    chart[i][j] = 1
                }
                j = Int((j &+ 1))
            }
            i = Int((i &+ 1))
        }
        return chart
    }
    func main() {
        let no_of_variable = 3
        let minterms: [Int] = ([1, 5, 7] as! [Int])
        let binary: [String] = (decimal_to_binary(no_of_variable, (minterms as! [Int])) as! [String])
        let prime_implicants: [String] = (check((binary as! [String])) as! [String])
        print(_p("Prime Implicants are:"))
        print(_p("[" + prime_implicants.map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
        var chart: [[Int]] = (prime_implicant_chart((prime_implicants as! [String]), (binary as! [String])) as! [[Int]])
        let essential_prime_implicants: [String] = (selection(&chart, (prime_implicants as! [String])) as! [String])
        print(_p("Essential Prime Implicants are:"))
        print(_p("[" + essential_prime_implicants.map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
