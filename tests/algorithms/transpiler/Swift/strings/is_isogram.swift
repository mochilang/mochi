// Generated by Mochi transpiler v0.10.63 on 2025-08-11 17:29:19 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _slice<T>(_ xs: [T], _ start: Int, _ end: Int) -> [T] {
    var s = start
    var e = end
    if s < 0 { s = 0 }
    if e > xs.count { e = xs.count }
    if s > e { s = e }
    return Array(xs[s..<e])
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func index_of(_ s: String, _ ch: String) -> Int {
        var i: Int = 0
        while (i < _int(((s).count))) {
            if ((String(Array(s)[i]) as! String) == ch) {
                return i
            }
            i = _int((i &+ 1))
        }
        return -1
    }
    func ord(_ ch: String) -> Int {
        let upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
        let lower = "abcdefghijklmnopqrstuvwxyz"
        var idx: Int = _int(index_of((upper as! String), (ch as! String)))
        if (idx >= 0) {
            return (65 &+ idx)
        }
        idx = _int(index_of((lower as! String), (ch as! String)))
        if (idx >= 0) {
            return (97 &+ idx)
        }
        return -1
    }
    func chr(_ n: Int) -> String {
        let upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
        let lower = "abcdefghijklmnopqrstuvwxyz"
        if ((n >= 65) && (n < 91)) {
            return String(_slice(Array(upper), (n &- 65), (n &- 64)))
        }
        if ((n >= 97) && (n < 123)) {
            return String(_slice(Array(lower), (n &- 97), (n &- 96)))
        }
        return "?"
    }
    func to_lower_char(_ c: String) -> String {
        let code: Int = _int(ord((c as! String)))
        if ((code >= 65) && (code <= 90)) {
            return String(describing: chr((code &+ 32)))
        }
        return c
    }
    func is_alpha(_ c: String) -> Bool {
        let code: Int = _int(ord((c as! String)))
        return (((code >= 65) && (code <= 90)) || ((code >= 97) && (code <= 122)))
    }
    func is_isogram(_ s: String) -> Bool {
        var seen: String = ""
        var i: Int = 0
        while (i < _int(((s).count))) {
            let ch: String = (String(Array(s)[i]) as! String)
            if (!is_alpha((ch as! String))) {
                _ = fatalError("String must only contain alphabetic characters.")
            }
            let lower: String = String(describing: to_lower_char((ch as! String)))
            if (_int(index_of((seen as! String), (lower as! String))) >= 0) {
                return false
            }
            seen = ((seen + lower) as! String)
            i = _int((i &+ 1))
        }
        return true
    }
    print(_p(_p(is_isogram("Uncopyrightable"))))
    print(_p(_p(is_isogram("allowance"))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
