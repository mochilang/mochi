// Generated by Mochi transpiler v0.10.64 on 2025-08-12 14:08:15 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func palindromic_string(_ input_string: String) -> String {
        var max_length = 0
        var new_input_string: String = ""
        var output_string: String = ""
        let n = _int(((input_string).count))
        var i = 0
        while (i < (n &- 1)) {
            new_input_string = (((new_input_string + String(describing: String(Array(String(describing: (input_string as! String)))[i..<(i &+ 1)]))) + "|") as! String)
            i = _int((i &+ 1))
        }
        new_input_string = ((new_input_string + String(describing: String(Array(String(describing: (input_string as! String)))[(n &- 1)..<n]))) as! String)
        var left = 0
        var right = 0
        var length: [Int] = ([] as! [Int])
        i = 0
        let m = _int(((new_input_string).count))
        while (i < m) {
            length = (_append(length, 1) as! [Int])
            i = _int((i &+ 1))
        }
        var start = 0
        var j = 0
        while (j < m) {
            var k = 1
            if (j <= right) {
                let mirror = ((left &+ right) &- j)
                k = _int(((_idx(length, mirror) as? Int ?? 0) / 2))
                let diff = ((right &- j) &+ 1)
                if (diff < k) {
                    k = Int(diff)
                }
                if (k < 1) {
                    k = 1
                }
            }
            while ((((j &- k) >= 0) && ((j &+ k) < m)) && (String(describing: String(Array(String(describing: (new_input_string as! String)))[(j &+ k)..<((j &+ k) &+ 1)])) == String(describing: String(Array(String(describing: (new_input_string as! String)))[(j &- k)..<((j &- k) &+ 1)])))) {
                k = _int((k &+ 1))
            }
            length = _set(length, j, _int(((2 &* k) &- 1)))
            if (((j &+ k) &- 1) > right) {
                left = _int(((j &- k) &+ 1))
                right = _int(((j &+ k) &- 1))
            }
            if ((_idx(length, j) as? Int ?? 0) > max_length) {
                max_length = (_idx(length, j) as? Int ?? 0)
                start = Int(j)
            }
            j = _int((j &+ 1))
        }
        let s = String(describing: String(Array(String(describing: (new_input_string as! String)))[(start &- (max_length / 2))..<((start &+ (max_length / 2)) &+ 1)]))
        var idx = 0
        while (idx < _int(((s).count))) {
            let ch = String(describing: String(Array(String(describing: (s as! String)))[idx..<(idx &+ 1)]))
            if (ch != "|") {
                output_string = ((output_string + ch) as! String)
            }
            idx = _int((idx &+ 1))
        }
        return output_string
    }
    func main() {
        print(_p(String(describing: palindromic_string("abbbaba"))))
        print(_p(String(describing: palindromic_string("ababa"))))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
