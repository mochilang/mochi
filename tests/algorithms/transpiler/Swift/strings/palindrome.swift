// Generated by Mochi transpiler v0.10.64 on 2025-08-12 14:08:29 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _slice<T>(_ xs: [T], _ start: Int, _ end: Int) -> [T] {
    var s = start
    var e = end
    if s < 0 { s = 0 }
    if e > xs.count { e = xs.count }
    if s > e { s = e }
    return Array(xs[s..<e])
}
struct Case: Codable {
    var text: String
    var expected: Bool
    init() {
        self.text = ""
        self.expected = false
    }
    init(text: String, expected: Bool) {
        self.text = text
        self.expected = expected
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func reverse(_ s: String) -> String {
        var res: String = ""
        var i: Int = (_int(((s).count)) &- 1)
        while (i >= 0) {
            res = ((res + (String(Array(s)[i]) as! String)) as! String)
            i = _int((i &- 1))
        }
        return res
    }
    func is_palindrome(_ s: String) -> Bool {
        var start_i: Int = 0
        var end_i: Int = (_int(((s).count)) &- 1)
        while (start_i < end_i) {
            if ((String(Array(s)[start_i]) as! String) == (String(Array(s)[end_i]) as! String)) {
                start_i = _int((start_i &+ 1))
                end_i = _int((end_i &- 1))
            } else {
                return false
            }
        }
        return true
    }
    func is_palindrome_traversal(_ s: String) -> Bool {
        let end: Int = (_int(((s).count)) / 2)
        let n: Int = _int(((s).count))
        var i: Int = 0
        while (i < end) {
            if ((String(Array(s)[i]) as! String) != (String(Array(s)[((n &- i) &- 1)]) as! String)) {
                return false
            }
            i = _int((i &+ 1))
        }
        return true
    }
    func is_palindrome_recursive(_ s: String) -> Bool {
        if (_int(((s).count)) <= 1) {
            return true
        }
        if ((String(Array(s)[0]) as! String) == (String(Array(s)[(_int(((s).count)) &- 1)]) as! String)) {
            return is_palindrome_recursive((String(_slice(Array(s), 1, (_int(((s).count)) &- 1))) as! String))
        }
        return false
    }
    func is_palindrome_slice(_ s: String) -> Bool {
        return (s == String(describing: reverse((s as! String))))
    }
    let test_data: [Case] = ({
        var _arr: [Case] = []
        _arr = _append(_arr, Case(text: "MALAYALAM", expected: true))
        _arr = _append(_arr, Case(text: "String", expected: false))
        _arr = _append(_arr, Case(text: "rotor", expected: true))
        _arr = _append(_arr, Case(text: "level", expected: true))
        _arr = _append(_arr, Case(text: "A", expected: true))
        _arr = _append(_arr, Case(text: "BB", expected: true))
        _arr = _append(_arr, Case(text: "ABC", expected: false))
        _arr = _append(_arr, Case(text: "amanaplanacanalpanama", expected: true))
        return _arr
    }() as! [Case])
    func main() {
        for t in test_data {
            let s: String = t.text
            let expected: Bool = t.expected
            let r1: Bool = is_palindrome((s as! String))
            let r2: Bool = is_palindrome_traversal((s as! String))
            let r3: Bool = is_palindrome_recursive((s as! String))
            let r4: Bool = is_palindrome_slice((s as! String))
            if ((((r1 != expected) || (r2 != expected)) || (r3 != expected)) || (r4 != expected)) {
                _ = fatalError("algorithm mismatch")
            }
            print(_p(((s + " ") + _p(expected))))
        }
        print(_p("a man a plan a canal panama"))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
