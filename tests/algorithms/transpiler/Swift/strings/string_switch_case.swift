// Generated by Mochi transpiler v0.10.64 on 2025-08-12 14:08:59 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _slice<T>(_ xs: [T], _ start: Int, _ end: Int) -> [T] {
    var s = start
    var e = end
    if s < 0 { s = 0 }
    if e > xs.count { e = xs.count }
    if s > e { s = e }
    return Array(xs[s..<e])
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func split_words(_ s: String) -> [String] {
        var words: [String] = ([] as! [String])
        var current: String = ""
        for ch in s {
            let ch = String(ch)
            if (ch == " ") {
                if (current != "") {
                    words = (_append(words, current) as! [String])
                    current = ""
                }
            } else {
                current = ((current + ch) as! String)
            }
        }
        if (current != "") {
            words = (_append(words, current) as! [String])
        }
        return words
    }
    func is_alnum(_ c: String) -> Bool {
        return (((("0123456789".contains(c)) || ("abcdefghijklmnopqrstuvwxyz".contains(c))) || ("ABCDEFGHIJKLMNOPQRSTUVWXYZ".contains(c))) || (c == " "))
    }
    func split_input(_ text: String) -> [[String]] {
        var result: [[String]] = ([] as! [[String]])
        var current: String = ""
        for ch in text {
            let ch = String(ch)
            if is_alnum((ch as! String)) {
                current = ((current + ch) as! String)
            } else {
                if (current != "") {
                    result = (_append(result, (split_words((current as! String)) as! [String])) as! [[String]])
                    current = ""
                }
            }
        }
        if (current != "") {
            result = (_append(result, (split_words((current as! String)) as! [String])) as! [[String]])
        }
        return result
    }
    func capitalize(_ word: String) -> String {
        if (_int(((word).count)) == 0) {
            return ""
        }
        if (_int(((word).count)) == 1) {
            return String(describing: ((word as! String).uppercased()))
        }
        return (String(describing: ((String(_slice(Array(word), 0, 1)) as! String).uppercased())) + String(describing: (String(_slice(Array(word), 1, Array(word).count)).lowercased())))
    }
    func to_simple_case(_ text: String) -> String {
        let parts: [[String]] = (split_input((text as! String)) as! [[String]])
        var res: String = ""
        for sub in parts {
            for w in sub {
                res = ((res + String(describing: capitalize((w as! String)))) as! String)
            }
        }
        return res
    }
    func to_complex_case(_ text: String, _ upper_flag: Bool, _ sep: String) -> String {
        let parts: [[String]] = (split_input((text as! String)) as! [[String]])
        var res: String = ""
        for sub in parts {
            var first: Bool = true
            for w in sub {
                var word = String(describing: (upper_flag ? String(describing: ((w as! String).uppercased())) : String(describing: (w.lowercased()))))
                if first {
                    res = ((res + word) as! String)
                    first = false
                } else {
                    res = (((res + sep) + word) as! String)
                }
            }
        }
        return res
    }
    func to_pascal_case(_ text: String) -> String {
        return String(describing: to_simple_case((text as! String)))
    }
    func to_camel_case(_ text: String) -> String {
        let s = String(describing: to_simple_case((text as! String)))
        if (_int(((s).count)) == 0) {
            return ""
        }
        return (String(describing: (String(_slice(Array(s), 0, 1)).lowercased())) + String(_slice(Array(s), 1, Array(s).count)))
    }
    func to_snake_case(_ text: String, _ upper_flag: Bool) -> String {
        return String(describing: to_complex_case((text as! String), (upper_flag as! Bool), "_"))
    }
    func to_kebab_case(_ text: String, _ upper_flag: Bool) -> String {
        return String(describing: to_complex_case((text as! String), (upper_flag as! Bool), "-"))
    }
    print(_p(String(describing: to_pascal_case("one two 31235three4four"))))
    print(_p(String(describing: to_camel_case("one two 31235three4four"))))
    print(_p(String(describing: to_snake_case("one two 31235three4four", true))))
    print(_p(String(describing: to_snake_case("one two 31235three4four", false))))
    print(_p(String(describing: to_kebab_case("one two 31235three4four", true))))
    print(_p(String(describing: to_kebab_case("one two 31235three4four", false))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
