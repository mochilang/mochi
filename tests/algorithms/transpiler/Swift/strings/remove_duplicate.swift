// Generated by Mochi transpiler v0.10.64 on 2025-08-12 14:08:43 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func split_ws(_ s: String) -> [String] {
        var res: [String] = ([] as! [String])
        var word = ""
        var i = 0
        while (i < _int(((s).count))) {
            let ch = String(describing: String(Array(String(describing: (s as! String)))[i..<(i &+ 1)]))
            if (ch == " ") {
                if (word != "") {
                    res = (_append(res, word) as! [String])
                    word = ""
                }
            } else {
                word = ((word + ch) as! String)
            }
            i = _int((i &+ 1))
        }
        if (word != "") {
            res = (_append(res, word) as! [String])
        }
        return res
    }
    func contains(_ xs: [String], _ x: String) -> Bool {
        var i = 0
        while (i < _int(((xs).count))) {
            if ((_idx(xs, i) as! String) == x) {
                return true
            }
            i = _int((i &+ 1))
        }
        return false
    }
    func unique(_ xs: [String]) -> [String] {
        var res: [String] = ([] as! [String])
        var i = 0
        while (i < _int(((xs).count))) {
            let w = (_idx(xs, i) as! String)
            if (!contains((res as! [String]), (w as! String))) {
                res = (_append(res, w) as! [String])
            }
            i = _int((i &+ 1))
        }
        return res
    }
    func insertion_sort(_ arr: [String]) -> [String] {
        var a = arr
        var i = 1
        while (i < _int(((a).count))) {
            let key = (_idx(a, i) as! String)
            var j = (i &- 1)
            while ((j >= 0) && ((_idx(a, j) as! String) > key)) {
                a = _set(a, (j &+ 1), (_idx(a, j) as! String))
                j = _int((j &- 1))
            }
            a = _set(a, (j &+ 1), (key as! String))
            i = _int((i &+ 1))
        }
        return a
    }
    func join_with_space(_ xs: [String]) -> String {
        var s = ""
        var i = 0
        while (i < _int(((xs).count))) {
            if (i > 0) {
                s = ((s + " ") as! String)
            }
            s = ((s + (_idx(xs, i) as! String)) as! String)
            i = _int((i &+ 1))
        }
        return s
    }
    func remove_duplicates(_ sentence: String) -> String {
        let words: [String] = (split_ws((sentence as! String)) as! [String])
        let uniq: [String] = (unique((words as! [String])) as! [String])
        let sorted_words: [String] = (insertion_sort((uniq as! [String])) as! [String])
        return String(describing: join_with_space((sorted_words as! [String])))
    }
    print(_p(String(describing: remove_duplicates("Python is great and Java is also great"))))
    print(_p(String(describing: remove_duplicates("Python   is      great and Java is also great"))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
