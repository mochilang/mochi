// Generated by Mochi transpiler v0.10.63 on 2025-08-11 17:29:17 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func ord(_ ch: String) -> Int {
        let lower = "abcdefghijklmnopqrstuvwxyz"
        let upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
        let digits = "0123456789"
        var i = 0
        while (i < _int(((lower).count))) {
            if ((String(Array(lower)[i]) as! String) == ch) {
                return (97 &+ i)
            }
            i = _int((i &+ 1))
        }
        i = 0
        while (i < _int(((upper).count))) {
            if ((String(Array(upper)[i]) as! String) == ch) {
                return (65 &+ i)
            }
            i = _int((i &+ 1))
        }
        i = 0
        while (i < _int(((digits).count))) {
            if ((String(Array(digits)[i]) as! String) == ch) {
                return (48 &+ i)
            }
            i = _int((i &+ 1))
        }
        if (ch == " ") {
            return 32
        }
        if (ch == "_") {
            return 95
        }
        if (ch == ".") {
            return 46
        }
        if (ch == "'") {
            return 39
        }
        return 0
    }
    func lshift(_ num: Int, _ k: Int) -> Int {
        var result = num
        var i = 0
        while (i < k) {
            result = _int((result &* 2))
            i = _int((i &+ 1))
        }
        return result
    }
    func rshift(_ num: Int, _ k: Int) -> Int {
        var result = num
        var i = 0
        while (i < k) {
            result = _int((_int((result &- _int(((result % 2 + 2) % 2)))) / 2))
            i = _int((i &+ 1))
        }
        return result
    }
    func is_contains_unique_chars(_ input_str: String) -> Bool {
        var bitmap: Int = 0
        var i = 0
        while (i < _int(((input_str).count))) {
            let code = _int(ord((String(Array(input_str)[i]) as! String)))
            if (((_int(rshift(bitmap, code)) % 2 + 2) % 2) == 1) {
                return false
            }
            bitmap = _int((bitmap &+ _int(lshift(1, code))))
            i = _int((i &+ 1))
        }
        return true
    }
    print(_p(_p(is_contains_unique_chars("I_love.py"))))
    print(_p(_p(is_contains_unique_chars("I don't love Python"))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
