// Generated by Mochi transpiler v0.10.64 on 2025-08-12 14:09:05 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _slice<T>(_ xs: [T], _ start: Int, _ end: Int) -> [T] {
    var s = start
    var e = end
    if s < 0 { s = 0 }
    if e > xs.count { e = xs.count }
    if s > e { s = e }
    return Array(xs[s..<e])
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func repeat_str(_ s: String, _ count: Int) -> String {
        var res: String = ""
        var i: Int = 0
        while (i < count) {
            res = ((res + s) as! String)
            i = _int((i &+ 1))
        }
        return res
    }
    func split_words(_ s: String) -> [String] {
        var res: [String] = ([] as! [String])
        var current: String = ""
        var i: Int = 0
        while (i < _int(((s).count))) {
            let ch = String(_slice(Array(s), i, (i &+ 1)))
            if (ch == " ") {
                if (current != "") {
                    res = (_append(res, current) as! [String])
                    current = ""
                }
            } else {
                current = ((current + ch) as! String)
            }
            i = _int((i &+ 1))
        }
        if (current != "") {
            res = (_append(res, current) as! [String])
        }
        return res
    }
    func justify_line(_ line: [String], _ width: Int, _ max_width: Int) -> String {
        let overall_spaces_count: Int = (max_width &- width)
        let words_count: Int = _int(((line).count))
        if (words_count == 1) {
            return ((_idx(line, 0) as! String) + String(describing: repeat_str(" ", overall_spaces_count)))
        }
        let spaces_to_insert_between_words: Int = (words_count &- 1)
        var num_spaces_between_words_list: [Int] = ([] as! [Int])
        let base: Int = (overall_spaces_count / spaces_to_insert_between_words)
        let extra: Int = ((overall_spaces_count % spaces_to_insert_between_words + spaces_to_insert_between_words) % spaces_to_insert_between_words)
        var i: Int = 0
        while (i < spaces_to_insert_between_words) {
            var spaces: Int = base
            if (i < extra) {
                spaces = _int((spaces &+ 1))
            }
            num_spaces_between_words_list = (_append(num_spaces_between_words_list, spaces) as! [Int])
            i = _int((i &+ 1))
        }
        var aligned: String = ""
        i = 0
        while (i < spaces_to_insert_between_words) {
            aligned = (((aligned + (_idx(line, i) as! String)) + String(describing: repeat_str(" ", (_idx(num_spaces_between_words_list, i) as? Int ?? 0)))) as! String)
            i = _int((i &+ 1))
        }
        aligned = ((aligned + (_idx(line, spaces_to_insert_between_words) as! String)) as! String)
        return aligned
    }
    func text_justification(_ word: String, _ max_width: Int) -> [String] {
        let words: [String] = (split_words((word as! String)) as! [String])
        var answer: [String] = ([] as! [String])
        var line: [String] = ([] as! [String])
        var width: Int = 0
        var idx: Int = 0
        while (idx < _int(((words).count))) {
            let w = (_idx(words, idx) as! String)
            if (((width &+ _int(((w).count))) &+ _int(((line).count))) <= max_width) {
                line = (_append(line, w) as! [String])
                width = _int((width &+ _int(((w).count))))
            } else {
                answer = (_append(answer, String(describing: justify_line((line as! [String]), width, max_width))) as! [String])
                line = ({
                    var _arr: [String] = []
                    _arr = _append(_arr, w)
                    return _arr
                }() as! [String])
                width = _int(((w).count))
            }
            idx = _int((idx &+ 1))
        }
        let remaining_spaces: Int = ((max_width &- width) &- _int(((line).count)))
        var last_line: String = ""
        var j: Int = 0
        while (j < _int(((line).count))) {
            if (j > 0) {
                last_line = ((last_line + " ") as! String)
            }
            last_line = ((last_line + (_idx(line, j) as! String)) as! String)
            j = _int((j &+ 1))
        }
        last_line = ((last_line + String(describing: repeat_str(" ", (remaining_spaces &+ 1)))) as! String)
        answer = (_append(answer, last_line) as! [String])
        return answer
    }
    print(_p("[" + (text_justification("This is an example of text justification.", 16) as! [String]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    print(_p("[" + (text_justification("Two roads diverged in a yellow wood", 16) as! [String]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
