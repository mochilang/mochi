// Generated by Mochi transpiler v0.10.64 on 2025-08-12 14:08:46 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _split(_ s: String, _ sep: String) -> [String] {
    let d = sep.isEmpty ? " " : sep
    return s.components(separatedBy: d)
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func split(_ s: String, _ sep: String) -> [String] {
        var res: [String] = ([] as! [String])
        var current = ""
        var i = 0
        while (i < _int(((s).count))) {
            let ch = (String(Array(s)[i]) as! String)
            if (ch == sep) {
                res = (_append(res, current) as! [String])
                current = ""
            } else {
                current = ((current + ch) as! String)
            }
            i = _int((i &+ 1))
        }
        res = (_append(res, current) as! [String])
        return res
    }
    func join_with_space(_ xs: [String]) -> String {
        var s = ""
        var i = 0
        while (i < _int(((xs).count))) {
            s = ((s + (_idx(xs, i) as! String)) as! String)
            if ((i &+ 1) < _int(((xs).count))) {
                s = ((s + " ") as! String)
            }
            i = _int((i &+ 1))
        }
        return s
    }
    func reverse_str(_ s: String) -> String {
        var res = ""
        var i = (_int(((s).count)) &- 1)
        while (i >= 0) {
            res = ((res + (String(Array(s)[i]) as! String)) as! String)
            i = _int((i &- 1))
        }
        return res
    }
    func reverse_letters(_ sentence: String, _ length: Int) -> String {
        let words: [String] = (_split(sentence, " ") as! [String])
        var result: [String] = ([] as! [String])
        var i = 0
        while (i < _int(((words).count))) {
            let word = (_idx(words, i) as! String)
            if (_int(((word).count)) > length) {
                result = (_append(result, String(describing: reverse_str((word as! String)))) as! [String])
            } else {
                result = (_append(result, word) as! [String])
            }
            i = _int((i &+ 1))
        }
        return String(describing: join_with_space((result as! [String])))
    }
    func test_reverse_letters() {
        if (String(describing: reverse_letters("Hey wollef sroirraw", 3)) != "Hey fellow warriors") {
            _ = fatalError("test1 failed")
        }
        if (String(describing: reverse_letters("nohtyP is nohtyP", 2)) != "Python is Python") {
            _ = fatalError("test2 failed")
        }
        if (String(describing: reverse_letters("1 12 123 1234 54321 654321", 0)) != "1 21 321 4321 12345 123456") {
            _ = fatalError("test3 failed")
        }
        if (String(describing: reverse_letters("racecar", 0)) != "racecar") {
            _ = fatalError("test4 failed")
        }
    }
    func main() {
        _ = test_reverse_letters()
        print(_p(String(describing: reverse_letters("Hey wollef sroirraw", 3))))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
