// Generated by Mochi transpiler v0.10.64 on 2025-08-12 14:08:33 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let VOWELS = "aeiou"
    func strip(_ s: String) -> String {
        var start = 0
        var end = _int(((s).count))
        while ((start < end) && (String(describing: String(Array(String(describing: (s as! String)))[start..<(start &+ 1)])) == " ")) {
            start = _int((start &+ 1))
        }
        while ((end > start) && (String(describing: String(Array(String(describing: (s as! String)))[(end &- 1)..<end])) == " ")) {
            end = _int((end &- 1))
        }
        return String(describing: String(Array(String(describing: (s as! String)))[start..<end]))
    }
    func is_vowel(_ c: String) -> Bool {
        var i = 0
        while (i < _int(((VOWELS).count))) {
            if (c == String(describing: String(Array(String(describing: (VOWELS as! String)))[i..<(i &+ 1)]))) {
                return true
            }
            i = _int((i &+ 1))
        }
        return false
    }
    func pig_latin(_ word: String) -> String {
        let trimmed = String(describing: strip((word as! String)))
        if (_int(((trimmed).count)) == 0) {
            return ""
        }
        let w = String(describing: (trimmed.lowercased()))
        let first = String(describing: String(Array(String(describing: (w as! String)))[0..<1]))
        if is_vowel((first as! String)) {
            return (w + "way")
        }
        var i = 0
        while (i < _int(((w).count))) {
            let ch = String(describing: String(Array(String(describing: (w as! String)))[i..<(i &+ 1)]))
            if is_vowel((ch as! String)) {
                break
            }
            i = _int((i &+ 1))
        }
        return ((String(describing: String(Array(String(describing: (w as! String)))[i..<_int(((w).count))])) + String(describing: String(Array(String(describing: (w as! String)))[0..<i]))) + "ay")
    }
    print(_p(("pig_latin('friends') = " + String(describing: pig_latin("friends")))))
    print(_p(("pig_latin('smile') = " + String(describing: pig_latin("smile")))))
    print(_p(("pig_latin('eat') = " + String(describing: pig_latin("eat")))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
