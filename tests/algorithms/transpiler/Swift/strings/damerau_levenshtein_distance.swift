// Generated by Mochi transpiler v0.10.64 on 2025-08-12 14:04:40 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func damerau_levenshtein_distance(_ first_string: String, _ second_string: String) -> Int {
        let len1 = _int(((first_string).count))
        let len2 = _int(((second_string).count))
        var dp_matrix: [[Int]] = ([] as! [[Int]])
        for _ in 0..<_int((len1 &+ 1)) {
            var row: [Int] = ([] as! [Int])
            for _2 in 0..<_int((len2 &+ 1)) {
                row = (_append(row, 0) as! [Int])
            }
            dp_matrix = (_append(dp_matrix, row) as! [[Int]])
        }
        for i in 0..<_int((len1 &+ 1)) {
            var row = (_idx(dp_matrix, i) as! [Int])
            row = _set(row, 0, Int(i))
            dp_matrix = _set(dp_matrix, i, (row as! [Int]))
        }
        var first_row = (_idx(dp_matrix, 0) as! [Int])
        for j in 0..<_int((len2 &+ 1)) {
            first_row = _set(first_row, j, Int(j))
        }
        dp_matrix = _set(dp_matrix, 0, (first_row as! [Int]))
        for i in 1..<_int((len1 &+ 1)) {
            var row = (_idx(dp_matrix, i) as! [Int])
            let first_char = String(describing: String(Array(String(describing: (first_string as! String)))[(i &- 1)..<i]))
            for j in 1..<_int((len2 &+ 1)) {
                let second_char = String(describing: String(Array(String(describing: (second_string as! String)))[(j &- 1)..<j]))
                let cost = _int(((first_char == second_char) ? 0 : 1))
                var value = ((_idx(_idx(dp_matrix, (i &- 1))!, j) as? Int ?? 0) &+ 1)
                let insertion = ((_idx(row, (j &- 1)) as? Int ?? 0) &+ 1)
                if (insertion < value) {
                    value = Int(insertion)
                }
                let substitution = ((_idx(_idx(dp_matrix, (i &- 1))!, (j &- 1)) as? Int ?? 0) &+ cost)
                if (substitution < value) {
                    value = Int(substitution)
                }
                row = _set(row, j, Int(value))
                if ((((i > 1) && (j > 1)) && (String(describing: String(Array(String(describing: (first_string as! String)))[(i &- 1)..<i])) == String(describing: String(Array(String(describing: (second_string as! String)))[(j &- 2)..<(j &- 1)])))) && (String(describing: String(Array(String(describing: (first_string as! String)))[(i &- 2)..<(i &- 1)])) == String(describing: String(Array(String(describing: (second_string as! String)))[(j &- 1)..<j])))) {
                    let transposition = ((_idx(_idx(dp_matrix, (i &- 2))!, (j &- 2)) as? Int ?? 0) &+ cost)
                    if (transposition < (_idx(row, j) as? Int ?? 0)) {
                        row = _set(row, j, Int(transposition))
                    }
                }
            }
            dp_matrix = _set(dp_matrix, i, (row as! [Int]))
        }
        return (_idx(_idx(dp_matrix, len1)!, len2) as? Int ?? 0)
    }
    print(_p(_p(_int(damerau_levenshtein_distance("cat", "cut")))))
    print(_p(_p(_int(damerau_levenshtein_distance("kitten", "sitting")))))
    print(_p(_p(_int(damerau_levenshtein_distance("hello", "world")))))
    print(_p(_p(_int(damerau_levenshtein_distance("book", "back")))))
    print(_p(_p(_int(damerau_levenshtein_distance("container", "containment")))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
