// Generated by Mochi transpiler v0.10.70 on 2025-08-23 13:52:48 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.isNaN || d.isInfinite {
                return String(d)
            }
            if d.rounded(.towardZero) == d {
                // avoid overflow when converting to Int64
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _num(_ v: Any) -> Double {
    if let d = v as? Double { return d }
    if let i = v as? Int { return Double(i) }
    if let i = v as? Int64 { return Double(i) }
    return 0
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first!
}
func _idx<K: Hashable, V>(_ m: [K: V], _ k: K) -> V? {
    return m[k]
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
func _slice<T>(_ xs: [T], _ start: Int, _ end: Int) -> [T] {
    var s = start
    var e = end
    if s < 0 { s = 0 }
    if e > xs.count { e = xs.count }
    if s > e { s = e }
    return Array(xs[s..<e])
}
struct TransformTables: Codable {
    var costs: [[Int]]
    var ops: [[String]]
    init() {
        self.costs = []
        self.ops = []
    }
    init(costs: [[Int]], ops: [[String]]) {
        self.costs = costs
        self.ops = ops
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func string_to_chars(_ s: String) -> [String] {
        var chars: [String] = ([] as! [String])
        var i = 0
        while ((i < _int(((s).count)))) {
            chars = (_append(chars, String(describing: String(_slice(Array(s), i, (i &+ 1))))) as! [String])
            i = _int((i &+ 1))
        }
        return chars
    }
    func join_chars(_ chars: [String]) -> String {
        var res = ""
        var i = 0
        while ((i < _int(((chars).count)))) {
            res = ((_p(res) + _p((_idx(chars, i) as! String))) as! String)
            i = _int((i &+ 1))
        }
        return res
    }
    func insert_at(_ chars: [String], _ index: Int, _ ch: String) -> [String] {
        var res: [String] = ([] as! [String])
        var i = 0
        while ((i < index)) {
            res = (_append(res, (_idx(chars, i) as! String)) as! [String])
            i = _int((i &+ 1))
        }
        res = (_append(res, ch) as! [String])
        while ((i < _int(((chars).count)))) {
            res = (_append(res, (_idx(chars, i) as! String)) as! [String])
            i = _int((i &+ 1))
        }
        return res
    }
    func remove_at(_ chars: [String], _ index: Int) -> [String] {
        var res: [String] = ([] as! [String])
        var i = 0
        while ((i < _int(((chars).count)))) {
            if ((i != index)) {
                res = (_append(res, (_idx(chars, i) as! String)) as! [String])
            }
            i = _int((i &+ 1))
        }
        return res
    }
    func make_matrix_int(_ rows: Int, _ cols: Int, _ `init`: Int) -> [[Int]] {
        var matrix: [[Int]] = ([] as! [[Int]])
        for _ in 0..<rows {
            var row: [Int] = ([] as! [Int])
            for _2 in 0..<cols {
                row = (_append(row, `init`) as! [Int])
            }
            matrix = (_append(matrix, row) as! [[Int]])
        }
        return matrix
    }
    func make_matrix_string(_ rows: Int, _ cols: Int, _ `init`: String) -> [[String]] {
        var matrix: [[String]] = ([] as! [[String]])
        for _ in 0..<rows {
            var row: [String] = ([] as! [String])
            for _2 in 0..<cols {
                row = (_append(row, `init`) as! [String])
            }
            matrix = (_append(matrix, row) as! [[String]])
        }
        return matrix
    }
    func compute_transform_tables(_ source_string: String, _ destination_string: String, _ copy_cost: Int, _ replace_cost: Int, _ delete_cost: Int, _ insert_cost: Int) -> TransformTables {
        let source_seq: [String] = (string_to_chars((source_string as! String)) as! [String])
        let dest_seq: [String] = (string_to_chars((destination_string as! String)) as! [String])
        let m = _int(((source_seq).count))
        let n = _int(((dest_seq).count))
        var costs = (make_matrix_int((m &+ 1), (n &+ 1), 0) as! [[Int]])
        var ops = (make_matrix_string((m &+ 1), (n &+ 1), "0") as! [[String]])
        var i = 1
        while ((i <= m)) {
            var _tmp13 = (_idx(costs, i) as! [Int])
            _tmp13 = _set(_tmp13, 0, { let _tmp24 = _int((i &* delete_cost)); return _tmp24 }())
            costs = _set(costs, i, { let _tmp25 = (_tmp13 as! [Int]); return _tmp25 }())
            var _tmp14 = (_idx(ops, i) as! [String])
            _tmp14 = _set(_tmp14, 0, { let _tmp26 = ((_p("D") + _p((_idx(source_seq, (i &- 1)) as! String))) as! String); return _tmp26 }())
            ops = _set(ops, i, { let _tmp27 = (_tmp14 as! [String]); return _tmp27 }())
            i = _int((i &+ 1))
        }
        var j = 1
        while ((j <= n)) {
            var _tmp15 = (_idx(costs, 0) as! [Int])
            _tmp15 = _set(_tmp15, j, { let _tmp28 = _int((j &* insert_cost)); return _tmp28 }())
            costs = _set(costs, 0, { let _tmp29 = (_tmp15 as! [Int]); return _tmp29 }())
            var _tmp16 = (_idx(ops, 0) as! [String])
            _tmp16 = _set(_tmp16, j, { let _tmp30 = ((_p("I") + _p((_idx(dest_seq, (j &- 1)) as! String))) as! String); return _tmp30 }())
            ops = _set(ops, 0, { let _tmp31 = (_tmp16 as! [String]); return _tmp31 }())
            j = _int((j &+ 1))
        }
        i = 1
        while ((i <= m)) {
            j = 1
            while ((j <= n)) {
                if (((_idx(source_seq, (i &- 1)) as! String) == (_idx(dest_seq, (j &- 1)) as! String))) {
                    var _tmp17 = (_idx(costs, i) as! [Int])
                    _tmp17 = _set(_tmp17, j, { let _tmp32 = _int(((_idx(_idx(costs, (i &- 1)), (j &- 1)) as? Int ?? 0) &+ copy_cost)); return _tmp32 }())
                    costs = _set(costs, i, { let _tmp33 = (_tmp17 as! [Int]); return _tmp33 }())
                    var _tmp18 = (_idx(ops, i) as! [String])
                    _tmp18 = _set(_tmp18, j, { let _tmp34 = ((_p("C") + _p((_idx(source_seq, (i &- 1)) as! String))) as! String); return _tmp34 }())
                    ops = _set(ops, i, { let _tmp35 = (_tmp18 as! [String]); return _tmp35 }())
                } else {
                    var _tmp19 = (_idx(costs, i) as! [Int])
                    _tmp19 = _set(_tmp19, j, { let _tmp36 = _int(((_idx(_idx(costs, (i &- 1)), (j &- 1)) as? Int ?? 0) &+ replace_cost)); return _tmp36 }())
                    costs = _set(costs, i, { let _tmp37 = (_tmp19 as! [Int]); return _tmp37 }())
                    var _tmp20 = (_idx(ops, i) as! [String])
                    _tmp20 = _set(_tmp20, j, { let _tmp38 = ((_p((_p("R") + _p((_idx(source_seq, (i &- 1)) as! String)))) + _p((_idx(dest_seq, (j &- 1)) as! String))) as! String); return _tmp38 }())
                    ops = _set(ops, i, { let _tmp39 = (_tmp20 as! [String]); return _tmp39 }())
                }
                if ((((_idx(_idx(costs, (i &- 1)), j) as? Int ?? 0) &+ delete_cost) < (_idx(_idx(costs, i), j) as? Int ?? 0))) {
                    var _tmp21 = (_idx(costs, i) as! [Int])
                    _tmp21 = _set(_tmp21, j, { let _tmp40 = _int(((_idx(_idx(costs, (i &- 1)), j) as? Int ?? 0) &+ delete_cost)); return _tmp40 }())
                    costs = _set(costs, i, { let _tmp41 = (_tmp21 as! [Int]); return _tmp41 }())
                    var _tmp22 = (_idx(ops, i) as! [String])
                    _tmp22 = _set(_tmp22, j, { let _tmp42 = ((_p("D") + _p((_idx(source_seq, (i &- 1)) as! String))) as! String); return _tmp42 }())
                    ops = _set(ops, i, { let _tmp43 = (_tmp22 as! [String]); return _tmp43 }())
                }
                if ((((_idx(_idx(costs, i), (j &- 1)) as? Int ?? 0) &+ insert_cost) < (_idx(_idx(costs, i), j) as? Int ?? 0))) {
                    var _tmp23 = (_idx(costs, i) as! [Int])
                    _tmp23 = _set(_tmp23, j, { let _tmp44 = _int(((_idx(_idx(costs, i), (j &- 1)) as? Int ?? 0) &+ insert_cost)); return _tmp44 }())
                    costs = _set(costs, i, { let _tmp45 = (_tmp23 as! [Int]); return _tmp45 }())
                    var _tmp24 = (_idx(ops, i) as! [String])
                    _tmp24 = _set(_tmp24, j, { let _tmp46 = ((_p("I") + _p((_idx(dest_seq, (j &- 1)) as! String))) as! String); return _tmp46 }())
                    ops = _set(ops, i, { let _tmp47 = (_tmp24 as! [String]); return _tmp47 }())
                }
                j = _int((j &+ 1))
            }
            i = _int((i &+ 1))
        }
        return TransformTables(costs: (costs as! [[Int]]), ops: (ops as! [[String]]))
    }
    func assemble_transformation(_ ops: [[String]], _ i: Int, _ j: Int) -> [String] {
        if (((i == 0) && (j == 0))) {
            return ([] as! [String])
        }
        let op = (_idx(_idx(ops, i), j) as! String)
        let kind = String(describing: String(_slice(Array(op), 0, 1)))
        if (((kind == "C") || (kind == "R"))) {
            var seq = (assemble_transformation((ops as! [[String]]), (i &- 1), (j &- 1)) as! [String])
            seq = (_append(seq, op) as! [String])
            return seq
        } else if ((kind == "D")) {
            var seq = (assemble_transformation((ops as! [[String]]), (i &- 1), j) as! [String])
            seq = (_append(seq, op) as! [String])
            return seq
        } else {
            var seq = (assemble_transformation((ops as! [[String]]), i, (j &- 1)) as! [String])
            seq = (_append(seq, op) as! [String])
            return seq
        }
        
    }
    func main() {
        let copy_cost = -1
        let replace_cost = 1
        let delete_cost = 2
        let insert_cost = 2
        let src = "Python"
        let dst = "Algorithms"
        let tables = compute_transform_tables((src as! String), (dst as! String), copy_cost, replace_cost, delete_cost, insert_cost)
        let operations: [[String]] = tables.ops
        let m = _int(((operations).count))
        let n = _int((((_idx(operations, 0) as! [String])).count))
        var sequence = (assemble_transformation((operations as! [[String]]), (m &- 1), (n &- 1)) as! [String])
        var string_list = (string_to_chars((src as! String)) as! [String])
        var idx = 0
        var cost = 0
        var k = 0
        while ((k < _int(((sequence).count)))) {
            print(_p(String(describing: join_chars((string_list as! [String])))))
            let op = (_idx(sequence, k) as! String)
            let kind = String(describing: String(_slice(Array(op), 0, 1)))
            if ((kind == "C")) {
                cost = _int((cost &+ copy_cost))
            } else if ((kind == "R")) {
                string_list = _set(string_list, idx, { let _tmp48 = String(describing: String(_slice(Array(op), 2, 3))); return _tmp48 }())
                cost = _int((cost &+ replace_cost))
            } else if ((kind == "D")) {
                string_list = (remove_at((string_list as! [String]), idx) as! [String])
                cost = _int((cost &+ delete_cost))
            } else {
                string_list = (insert_at((string_list as! [String]), idx, String(describing: String(_slice(Array(op), 1, 2)))) as! [String])
                cost = _int((cost &+ insert_cost))
            }
            
            
            idx = _int((idx &+ 1))
            k = _int((k &+ 1))
        }
        print(_p(String(describing: join_chars((string_list as! [String])))))
        print(_p((_p("Cost: ") + _p(_p(cost)))))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
