// Generated by Mochi transpiler v0.10.66 on 2025-08-16 12:00:02 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _idx<K: Hashable, V>(_ m: [K: V], _ k: K) -> V? {
    return m[k]
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
func _slice<T>(_ xs: [T], _ start: Int, _ end: Int) -> [T] {
    var s = start
    var e = end
    if s < 0 { s = 0 }
    if e > xs.count { e = xs.count }
    if s > e { s = e }
    return Array(xs[s..<e])
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func make_matrix_bool(_ rows: Int, _ cols: Int, _ `init`: Bool) -> [[Bool]] {
        var matrix: [[Bool]] = ([] as! [[Bool]])
        for _ in 0..<rows {
            var row: [Bool] = ([] as! [Bool])
            for _2 in 0..<cols {
                row = (_append(row, `init`) as! [Bool])
            }
            matrix = (_append(matrix, row) as! [[Bool]])
        }
        return matrix
    }
    func match_pattern(_ input_string: String, _ pattern: String) -> Bool {
        let len_string = (_int(((input_string).count)) &+ 1)
        let len_pattern = (_int(((pattern).count)) &+ 1)
        var dp = (make_matrix_bool(len_string, len_pattern, false) as! [[Bool]])
        var row0 = (_idx(dp, 0) as! [Bool])
        row0 = _set(row0, 0, true)
        dp = _set(dp, 0, (row0 as! [Bool]))
        var j = 1
        while (j < len_pattern) {
            row0 = (_idx(dp, 0) as! [Bool])
            if (String(describing: String(_slice(Array(pattern), (j &- 1), j))) == "*") {
                row0 = _set(row0, j, (_idx(row0, (j &- 2)) as! Bool))
            } else {
                row0 = _set(row0, j, false)
            }
            dp = _set(dp, 0, (row0 as! [Bool]))
            j = _int((j &+ 1))
        }
        var i = 1
        while (i < len_string) {
            var row = (_idx(dp, i) as! [Bool])
            var j2 = 1
            while (j2 < len_pattern) {
                let s_char = String(describing: String(_slice(Array(input_string), (i &- 1), i)))
                let p_char = String(describing: String(_slice(Array(pattern), (j2 &- 1), j2)))
                if ((s_char == p_char) || (p_char == ".")) {
                    row = _set(row, j2, (_idx(_idx(dp, (i &- 1))!, (j2 &- 1)) as! Bool))
                } else if (p_char == "*") {
                    var val = (_idx(_idx(dp, i)!, (j2 &- 2)) as! Bool)
                    let prev_p = String(describing: String(_slice(Array(pattern), (j2 &- 2), (j2 &- 1))))
                    if ((!val) && ((prev_p == s_char) || (prev_p == "."))) {
                        val = (_idx(_idx(dp, (i &- 1))!, j2) as! Bool)
                    }
                    row = _set(row, j2, (val as! Bool))
                } else {
                    row = _set(row, j2, false)
                }
                
                j2 = _int((j2 &+ 1))
            }
            dp = _set(dp, i, (row as! [Bool]))
            i = _int((i &+ 1))
        }
        return (_idx(_idx(dp, (len_string &- 1))!, (len_pattern &- 1)) as! Bool)
    }
    func main() {
        if (!match_pattern("aab", "c*a*b")) {
            _ = fatalError("case1 failed")
        }
        if match_pattern("dabc", "*abc") {
            _ = fatalError("case2 failed")
        }
        if match_pattern("aaa", "aa") {
            _ = fatalError("case3 failed")
        }
        if (!match_pattern("aaa", "a.a")) {
            _ = fatalError("case4 failed")
        }
        if match_pattern("aaab", "aa*") {
            _ = fatalError("case5 failed")
        }
        if (!match_pattern("aaab", ".*")) {
            _ = fatalError("case6 failed")
        }
        if match_pattern("a", "bbbb") {
            _ = fatalError("case7 failed")
        }
        if match_pattern("", "bbbb") {
            _ = fatalError("case8 failed")
        }
        if match_pattern("a", "") {
            _ = fatalError("case9 failed")
        }
        if (!match_pattern("", "")) {
            _ = fatalError("case10 failed")
        }
        print(_p(_p(match_pattern("aab", "c*a*b"))))
        print(_p(_p(match_pattern("dabc", "*abc"))))
        print(_p(_p(match_pattern("aaa", "aa"))))
        print(_p(_p(match_pattern("aaa", "a.a"))))
        print(_p(_p(match_pattern("aaab", "aa*"))))
        print(_p(_p(match_pattern("aaab", ".*"))))
        print(_p(_p(match_pattern("a", "bbbb"))))
        print(_p(_p(match_pattern("", "bbbb"))))
        print(_p(_p(match_pattern("a", ""))))
        print(_p(_p(match_pattern("", ""))))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
