// Generated by Mochi transpiler v0.10.64 on 2025-08-12 14:08:36 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func prefix_function(_ s: String) -> [Int] {
        var pi: [Int] = ([] as! [Int])
        var i = 0
        while (i < _int(((s).count))) {
            pi = (_append(pi, 0) as! [Int])
            i = _int((i &+ 1))
        }
        i = 1
        while (i < _int(((s).count))) {
            var j = (_idx(pi, (i &- 1)) as? Int ?? 0)
            while ((j > 0) && ((String(Array(s)[i]) as! String) != (String(Array(s)[j]) as! String))) {
                j = (_idx(pi, (j &- 1)) as? Int ?? 0)
            }
            if ((String(Array(s)[i]) as! String) == (String(Array(s)[j]) as! String)) {
                j = _int((j &+ 1))
            }
            pi = _set(pi, i, Int(j))
            i = _int((i &+ 1))
        }
        return pi
    }
    func longest_prefix(_ s: String) -> Int {
        let pi: [Int] = (prefix_function((s as! String)) as! [Int])
        var max_val = 0
        var i = 0
        while (i < _int(((pi).count))) {
            if ((_idx(pi, i) as? Int ?? 0) > max_val) {
                max_val = (_idx(pi, i) as? Int ?? 0)
            }
            i = _int((i &+ 1))
        }
        return max_val
    }
    func list_eq_int(_ a: [Int], _ b: [Int]) -> Bool {
        if (_int(((a).count)) != _int(((b).count))) {
            return false
        }
        var i = 0
        while (i < _int(((a).count))) {
            if ((_idx(a, i) as? Int ?? 0) != (_idx(b, i) as? Int ?? 0)) {
                return false
            }
            i = _int((i &+ 1))
        }
        return true
    }
    func test_prefix_function() {
        let s1 = "aabcdaabc"
        let expected1: [Int] = ({
            var _arr: [Int] = []
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 1)
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 1)
            _arr = _append(_arr, 2)
            _arr = _append(_arr, 3)
            _arr = _append(_arr, 4)
            return _arr
        }() as! [Int])
        let r1: [Int] = (prefix_function((s1 as! String)) as! [Int])
        if (!list_eq_int((r1 as! [Int]), (expected1 as! [Int]))) {
            _ = fatalError("prefix_function aabcdaabc failed")
        }
        let s2 = "asdasdad"
        let expected2: [Int] = ({
            var _arr: [Int] = []
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 1)
            _arr = _append(_arr, 2)
            _arr = _append(_arr, 3)
            _arr = _append(_arr, 4)
            _arr = _append(_arr, 0)
            return _arr
        }() as! [Int])
        let r2: [Int] = (prefix_function((s2 as! String)) as! [Int])
        if (!list_eq_int((r2 as! [Int]), (expected2 as! [Int]))) {
            _ = fatalError("prefix_function asdasdad failed")
        }
    }
    func test_longest_prefix() {
        if (_int(longest_prefix("aabcdaabc")) != 4) {
            _ = fatalError("longest_prefix example1 failed")
        }
        if (_int(longest_prefix("asdasdad")) != 4) {
            _ = fatalError("longest_prefix example2 failed")
        }
        if (_int(longest_prefix("abcab")) != 2) {
            _ = fatalError("longest_prefix example3 failed")
        }
    }
    func main() {
        _ = test_prefix_function()
        _ = test_longest_prefix()
        let r1: [Int] = (prefix_function("aabcdaabc") as! [Int])
        let r2: [Int] = (prefix_function("asdasdad") as! [Int])
        print(_p("[" + r1.map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
        print(_p("[" + r2.map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
        print(_p(_p(_int(longest_prefix("aabcdaabc")))))
        print(_p(_p(_int(longest_prefix("abcab")))))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
