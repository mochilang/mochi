// Generated by Mochi transpiler v0.10.70 on 2025-08-23 13:51:43 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.isNaN || d.isInfinite {
                return String(d)
            }
            if d.rounded(.towardZero) == d {
                // avoid overflow when converting to Int64
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _num(_ v: Any) -> Double {
    if let d = v as? Double { return d }
    if let i = v as? Int { return Double(i) }
    if let i = v as? Int64 { return Double(i) }
    return 0
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _slice<T>(_ xs: [T], _ start: Int, _ end: Int) -> [T] {
    var s = start
    var e = end
    if s < 0 { s = 0 }
    if e > xs.count { e = xs.count }
    if s > e { s = e }
    return Array(xs[s..<e])
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func all_digits(_ s: String) -> Bool {
        if ((_int(((s).count)) == 0)) {
            return false
        }
        var i = 0
        while (i < _int(((s).count))) {
            let c = (String(Array(s)[i]) as! String)
            if (((c < "0") || (c > "9"))) {
                return false
            }
            i = _int((i &+ 1))
        }
        return true
    }
    func indian_phone_validator(_ phone: String) -> Bool {
        var s = phone
        if (((_int(((s).count)) >= 3) && (String(describing: String(_slice(Array(s), 0, 3))) == "+91"))) {
            s = String(describing: String(_slice(Array(s), 3, _int(((s).count)))))
            if ((_int(((s).count)) > 0)) {
                let c = (String(Array(s)[0]) as! String)
                if (((c == "-") || (c == " "))) {
                    s = String(describing: String(_slice(Array(s), 1, _int(((s).count)))))
                }
            }
        }
        if (((_int(((s).count)) > 0) && ((String(Array(s)[0]) as! String) == "0"))) {
            s = String(describing: String(_slice(Array(s), 1, _int(((s).count)))))
        }
        if (((_int(((s).count)) >= 2) && (String(describing: String(_slice(Array(s), 0, 2))) == "91"))) {
            s = String(describing: String(_slice(Array(s), 2, _int(((s).count)))))
        }
        if ((_int(((s).count)) != 10)) {
            return false
        }
        let first = (String(Array(s)[0]) as! String)
        if ((!(((first == "7") || (first == "8")) || (first == "9")))) {
            return false
        }
        if ((!all_digits((s as! String)))) {
            return false
        }
        return true
    }
    print(_p(_p(indian_phone_validator("+91123456789"))))
    print(_p(_p(indian_phone_validator("+919876543210"))))
    print(_p(_p(indian_phone_validator("01234567896"))))
    print(_p(_p(indian_phone_validator("919876543218"))))
    print(_p(_p(indian_phone_validator("+91-1234567899"))))
    print(_p(_p(indian_phone_validator("+91-9876543218"))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
