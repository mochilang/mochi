// Generated by Mochi transpiler v0.10.64 on 2025-08-12 14:08:09 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func range_list(_ n: Int) -> [Int] {
        var lst: [Int] = ([] as! [Int])
        var i = 0
        while (i < n) {
            lst = (_append(lst, i) as! [Int])
            i = _int((i &+ 1))
        }
        return lst
    }
    func min3(_ a: Int, _ b: Int, _ c: Int) -> Int {
        var m = a
        if (b < m) {
            m = Int(b)
        }
        if (c < m) {
            m = Int(c)
        }
        return m
    }
    func levenshtein_distance(_ first_word: String, _ second_word: String) -> Int {
        if (_int(((first_word).count)) < _int(((second_word).count))) {
            return _int(levenshtein_distance((second_word as! String), (first_word as! String)))
        }
        if (_int(((second_word).count)) == 0) {
            return _int(((first_word).count))
        }
        var previous_row: [Int] = (range_list((_int(((second_word).count)) &+ 1)) as! [Int])
        var i = 0
        while (i < _int(((first_word).count))) {
            let c1 = (String(Array(first_word)[i]) as! String)
            var current_row: [Int] = ([] as! [Int])
            current_row = (_append(current_row, (i &+ 1)) as! [Int])
            var j = 0
            while (j < _int(((second_word).count))) {
                let c2 = (String(Array(second_word)[j]) as! String)
                let insertions = ((_idx(previous_row, (j &+ 1)) as? Int ?? 0) &+ 1)
                let deletions = ((_idx(current_row, j) as? Int ?? 0) &+ 1)
                let substitutions = ((_idx(previous_row, j) as? Int ?? 0) &+ _int(((c1 == c2) ? 0 : 1)))
                let min_val = _int(min3(insertions, deletions, substitutions))
                current_row = (_append(current_row, min_val) as! [Int])
                j = _int((j &+ 1))
            }
            previous_row = (current_row as! [Int])
            i = _int((i &+ 1))
        }
        return (_idx(previous_row, (_int(((previous_row).count)) &- 1)) as? Int ?? 0)
    }
    func levenshtein_distance_optimized(_ first_word: String, _ second_word: String) -> Int {
        if (_int(((first_word).count)) < _int(((second_word).count))) {
            return _int(levenshtein_distance_optimized((second_word as! String), (first_word as! String)))
        }
        if (_int(((second_word).count)) == 0) {
            return _int(((first_word).count))
        }
        var previous_row: [Int] = (range_list((_int(((second_word).count)) &+ 1)) as! [Int])
        var i = 0
        while (i < _int(((first_word).count))) {
            let c1 = (String(Array(first_word)[i]) as! String)
            var current_row: [Int] = ([] as! [Int])
            current_row = (_append(current_row, (i &+ 1)) as! [Int])
            var k = 0
            while (k < _int(((second_word).count))) {
                current_row = (_append(current_row, 0) as! [Int])
                k = _int((k &+ 1))
            }
            var j = 0
            while (j < _int(((second_word).count))) {
                let c2 = (String(Array(second_word)[j]) as! String)
                let insertions = ((_idx(previous_row, (j &+ 1)) as? Int ?? 0) &+ 1)
                let deletions = ((_idx(current_row, j) as? Int ?? 0) &+ 1)
                let substitutions = ((_idx(previous_row, j) as? Int ?? 0) &+ _int(((c1 == c2) ? 0 : 1)))
                let min_val = _int(min3(insertions, deletions, substitutions))
                current_row = _set(current_row, (j &+ 1), Int(min_val))
                j = _int((j &+ 1))
            }
            previous_row = (current_row as! [Int])
            i = _int((i &+ 1))
        }
        return (_idx(previous_row, (_int(((previous_row).count)) &- 1)) as? Int ?? 0)
    }
    func main() {
        let a = "kitten"
        let b = "sitting"
        print(_p(_p(_int(levenshtein_distance((a as! String), (b as! String))))))
        print(_p(_p(_int(levenshtein_distance_optimized((a as! String), (b as! String))))))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
