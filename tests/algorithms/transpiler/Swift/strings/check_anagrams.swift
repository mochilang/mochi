// Generated by Mochi transpiler v0.10.63 on 2025-08-11 17:28:57 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func strip_and_remove_spaces(_ s: String) -> String {
        var start = 0
        var end = (_int(((s).count)) &- 1)
        while ((start < _int(((s).count))) && ((String(Array(s)[start]) as! String) == " ")) {
            start = _int((start &+ 1))
        }
        while ((end >= start) && ((String(Array(s)[end]) as! String) == " ")) {
            end = _int((end &- 1))
        }
        var res = ""
        var i = start
        while (i <= end) {
            let ch = (String(Array(s)[i]) as! String)
            if (ch != " ") {
                res = ((res + ch) as! String)
            }
            i = _int((i &+ 1))
        }
        return res
    }
    func check_anagrams(_ a: String, _ b: String) -> Bool {
        var s1 = String(describing: (a.lowercased()))
        var s2 = String(describing: (b.lowercased()))
        s1 = String(describing: strip_and_remove_spaces((s1 as! String)))
        s2 = String(describing: strip_and_remove_spaces((s2 as! String)))
        if (_int(((s1).count)) != _int(((s2).count))) {
            return false
        }
        var count: [String: Int] = ([:] as! [String: Int])
        var i = 0
        while (i < _int(((s1).count))) {
            let c1 = (String(Array(s1)[i]) as! String)
            let c2 = (String(Array(s2)[i]) as! String)
            if (count[c1] != nil) {
                count = _set(count, String(describing: c1), _int(((count[String(String(describing: c1))] as? Int ?? 0) &+ 1)))
            } else {
                count = _set(count, String(describing: c1), 1)
            }
            if (count[c2] != nil) {
                count = _set(count, String(describing: c2), _int(((count[String(String(describing: c2))] as? Int ?? 0) &- 1)))
            } else {
                count = _set(count, String(describing: c2), _int(-1))
            }
            i = _int((i &+ 1))
        }
        for ch in count.keys.sorted() {
            if ((count[String(String(describing: ch))] as? Int ?? 0) != 0) {
                return false
            }
        }
        return true
    }
    func print_bool(_ b: Bool) {
        if b {
            print(_p(true))
        } else {
            print(_p(false))
        }
    }
    _ = print_bool(check_anagrams("Silent", "Listen"))
    _ = print_bool(check_anagrams("This is a string", "Is this a string"))
    _ = print_bool(check_anagrams("This is    a      string", "Is     this a string"))
    _ = print_bool(check_anagrams("There", "Their"))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
