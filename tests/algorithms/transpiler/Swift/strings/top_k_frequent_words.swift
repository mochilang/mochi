// Generated by Mochi transpiler v0.10.64 on 2025-08-12 14:09:12 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
struct WordCount: Codable {
    var word: String
    var count: Int
    init() {
        self.word = ""
        self.count = 0
    }
    init(word: String, count: Int) {
        self.word = word
        self.count = count
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    var freq_map: [String: Int] = ([:] as! [String: Int])
    func heapify(_ arr: inout [WordCount], _ index: Int, _ heap_size: Int) {
        var largest: Int = index
        let left: Int = ((2 &* index) &+ 1)
        let right: Int = ((2 &* index) &+ 2)
        if (left < heap_size) {
            let left_item: WordCount = (_idx(arr, left) as! WordCount)
            let largest_item: WordCount = (_idx(arr, largest) as! WordCount)
            if (left_item.count > largest_item.count) {
                largest = Int(left)
            }
        }
        if (right < heap_size) {
            let right_item: WordCount = (_idx(arr, right) as! WordCount)
            let largest_item2: WordCount = (_idx(arr, largest) as! WordCount)
            if (right_item.count > largest_item2.count) {
                largest = Int(right)
            }
        }
        if (largest != index) {
            let temp: WordCount = (_idx(arr, largest) as! WordCount)
            arr = _set(arr, largest, (_idx(arr, index) as! WordCount))
            arr = _set(arr, index, (temp as! WordCount))
            _ = heapify(&arr, largest, heap_size)
        }
    }
    func build_max_heap(_ arr: inout [WordCount]) {
        var i: Int = ((_int(((arr).count)) / 2) &- 1)
        while (i >= 0) {
            _ = heapify(&arr, i, _int(((arr).count)))
            i = _int((i &- 1))
        }
    }
    func top_k_frequent_words(_ words: [String], _ k_value: Int) -> [String] {
        freq_map = ([:] as! [String: Int])
        var i: Int = 0
        while (i < _int(((words).count))) {
            let w: String = (_idx(words, i) as! String)
            if (freq_map[w] != nil) {
                freq_map = _set(freq_map, String(describing: w), _int(((freq_map[String(String(describing: w))] as? Int ?? 0) &+ 1)))
            } else {
                freq_map = _set(freq_map, String(describing: w), 1)
            }
            i = _int((i &+ 1))
        }
        var heap: [WordCount] = ([] as! [WordCount])
        for w in freq_map.keys.sorted() {
            heap = (_append(heap, WordCount(word: String(describing: w), count: (freq_map[String(String(describing: w))] as? Int ?? 0))) as! [WordCount])
        }
        _ = build_max_heap(&heap)
        var result: [String] = ([] as! [String])
        var heap_size: Int = _int(((heap).count))
        var limit: Int = k_value
        if (limit > heap_size) {
            limit = Int(heap_size)
        }
        var j: Int = 0
        while (j < limit) {
            let item: WordCount = (_idx(heap, 0) as! WordCount)
            result = (_append(result, item.word) as! [String])
            heap = _set(heap, 0, (_idx(heap, (heap_size &- 1)) as! WordCount))
            heap = _set(heap, (heap_size &- 1), (item as! WordCount))
            heap_size = _int((heap_size &- 1))
            _ = heapify(&heap, 0, heap_size)
            j = _int((j &+ 1))
        }
        return result
    }
    func main() {
        let sample: [String] = ({
            var _arr: [String] = []
            _arr = _append(_arr, "a")
            _arr = _append(_arr, "b")
            _arr = _append(_arr, "c")
            _arr = _append(_arr, "a")
            _arr = _append(_arr, "c")
            _arr = _append(_arr, "c")
            return _arr
        }() as! [String])
        print(_p("[" + (top_k_frequent_words((sample as! [String]), 3) as! [String]).map{ if let s = $0 as? String { "\"" + s.replacingOccurrences(of: "\"", with: "\\\"") + "\"" } else { _p($0) } }.joined(separator: ", ") + "]"))
        print(_p("[" + (top_k_frequent_words((sample as! [String]), 2) as! [String]).map{ if let s = $0 as? String { "\"" + s.replacingOccurrences(of: "\"", with: "\\\"") + "\"" } else { _p($0) } }.joined(separator: ", ") + "]"))
        print(_p("[" + (top_k_frequent_words((sample as! [String]), 1) as! [String]).map{ if let s = $0 as? String { "\"" + s.replacingOccurrences(of: "\"", with: "\\\"") + "\"" } else { _p($0) } }.joined(separator: ", ") + "]"))
        print(_p("[" + (top_k_frequent_words((sample as! [String]), 0) as! [String]).map{ if let s = $0 as? String { "\"" + s.replacingOccurrences(of: "\"", with: "\\\"") + "\"" } else { _p($0) } }.joined(separator: ", ") + "]"))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
