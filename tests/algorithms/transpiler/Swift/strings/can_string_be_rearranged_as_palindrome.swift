// Generated by Mochi transpiler v0.10.64 on 2025-08-12 14:04:23 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let LETTERS = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    let LOWERCASE = "abcdefghijklmnopqrstuvwxyz"
    func char_to_lower(_ c: String) -> String {
        var i = 0
        while (i < _int(((LETTERS).count))) {
            if (c == String(describing: String(Array(String(describing: (LETTERS as! String)))[i..<(i &+ 1)]))) {
                return String(describing: String(Array(String(describing: (LOWERCASE as! String)))[i..<(i &+ 1)]))
            }
            i = _int((i &+ 1))
        }
        return c
    }
    func normalize(_ input_str: String) -> String {
        var res = ""
        var i = 0
        while (i < _int(((input_str).count))) {
            let ch = String(describing: String(Array(String(describing: (input_str as! String)))[i..<(i &+ 1)]))
            let lc = String(describing: char_to_lower((ch as! String)))
            if ((lc >= "a") && (lc <= "z")) {
                res = ((res + lc) as! String)
            }
            i = _int((i &+ 1))
        }
        return res
    }
    func can_string_be_rearranged_as_palindrome_counter(_ input_str: String) -> Bool {
        let s = String(describing: normalize((input_str as! String)))
        var freq: [String: Int] = ([:] as! [String: Int])
        var i = 0
        while (i < _int(((s).count))) {
            let ch = String(describing: String(Array(String(describing: (s as! String)))[i..<(i &+ 1)]))
            if (freq[ch] != nil) {
                freq = _set(freq, String(describing: ch), _int(((freq[String(String(describing: ch))] as? Int ?? 0) &+ 1)))
            } else {
                freq = _set(freq, String(describing: ch), 1)
            }
            i = _int((i &+ 1))
        }
        var odd = 0
        for key in freq.keys.sorted() {
            if ((((freq[String(String(describing: key))] as? Int ?? 0) % 2 + 2) % 2) != 0) {
                odd = _int((odd &+ 1))
            }
        }
        return (odd < 2)
    }
    func can_string_be_rearranged_as_palindrome(_ input_str: String) -> Bool {
        let s = String(describing: normalize((input_str as! String)))
        if (_int(((s).count)) == 0) {
            return true
        }
        var character_freq_dict: [String: Int] = ([:] as! [String: Int])
        var i = 0
        while (i < _int(((s).count))) {
            let character = String(describing: String(Array(String(describing: (s as! String)))[i..<(i &+ 1)]))
            if (character_freq_dict[character] != nil) {
                character_freq_dict = _set(character_freq_dict, String(describing: character), _int(((character_freq_dict[String(String(describing: character))] as? Int ?? 0) &+ 1)))
            } else {
                character_freq_dict = _set(character_freq_dict, String(describing: character), 1)
            }
            i = _int((i &+ 1))
        }
        var odd_char = 0
        for character_key in character_freq_dict.keys.sorted() {
            let character_count = (character_freq_dict[String(String(describing: character_key))] as? Int ?? 0)
            if (((character_count % 2 + 2) % 2) != 0) {
                odd_char = _int((odd_char &+ 1))
            }
        }
        return (!(odd_char > 1))
    }
    print(_p(can_string_be_rearranged_as_palindrome_counter("Momo")))
    print(_p(can_string_be_rearranged_as_palindrome_counter("Mother")))
    print(_p(can_string_be_rearranged_as_palindrome("Momo")))
    print(_p(can_string_be_rearranged_as_palindrome("Mother")))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
