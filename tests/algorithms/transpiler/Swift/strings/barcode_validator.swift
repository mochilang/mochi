// Generated by Mochi transpiler v0.10.63 on 2025-08-11 17:28:46 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func has_alpha(_ s: String) -> Bool {
        var i = 0
        while (i < _int(((s).count))) {
            let c = (String(Array(s)[i]) as! String)
            if (((c >= "a") && (c <= "z")) || ((c >= "A") && (c <= "Z"))) {
                return true
            }
            i = _int((i &+ 1))
        }
        return false
    }
    func parse_decimal(_ s: String) -> Int {
        var value = 0
        var i = 0
        while (i < _int(((s).count))) {
            let c = (String(Array(s)[i]) as! String)
            if ((c < "0") || (c > "9")) {
                _ = fatalError("Non-digit character encountered")
            }
            value = _int(((value &* 10) &+ _int(_int(c))))
            i = _int((i &+ 1))
        }
        return value
    }
    func get_barcode(_ barcode: String) -> Int {
        if has_alpha((barcode as! String)) {
            _ = fatalError((("Barcode '" + barcode) + "' has alphabetic characters."))
        }
        if ((_int(((barcode).count)) > 0) && ((String(Array(barcode)[0]) as! String) == "-")) {
            _ = fatalError("The entered barcode has a negative value. Try again.")
        }
        return _int(parse_decimal((barcode as! String)))
    }
    func get_check_digit(_ barcode: Int) -> Int {
        var num = (barcode / 10)
        var s = 0
        var position = 0
        while (num != 0) {
            let mult = _int(((((position % 2 + 2) % 2) == 0) ? 3 : 1))
            s = _int((s &+ (mult &* _int(((num % 10 + 10) % 10)))))
            num = _int((num / 10))
            position = _int((position &+ 1))
        }
        return ((_int((10 &- _int(((s % 10 + 10) % 10)))) % 10 + 10) % 10)
    }
    func is_valid(_ barcode: Int) -> Bool {
        return ((_int(((_p(barcode)).count)) == 13) && (_int(get_check_digit(barcode)) == ((barcode % 10 + 10) % 10)))
    }
    print(_p(_p(_int(get_check_digit(8718452538119)))))
    print(_p(_p(_int(get_check_digit(87184523)))))
    print(_p(_p(_int(get_check_digit(87193425381086)))))
    var res: [Int] = ([] as! [Int])
    var x = 0
    while (x < 100) {
        res = (_append(res, _int(get_check_digit(x))) as! [Int])
        x = _int((x &+ 10))
    }
    print(_p("[" + res.map{ if let s = $0 as? String { "\"" + s.replacingOccurrences(of: "\"", with: "\\\"") + "\"" } else { _p($0) } }.joined(separator: ", ") + "]"))
    print(_p(_p(is_valid(8718452538119))))
    print(_p(_p(is_valid(87184525))))
    print(_p(_p(is_valid(87193425381089))))
    print(_p(_p(is_valid(0))))
    print(_p(_p(_int(get_barcode("8718452538119")))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
