// Generated by Mochi transpiler v0.10.64 on 2025-08-12 14:05:14 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func parse_int(_ s: String) -> Int {
        var value = 0
        var i = 0
        while (i < _int(((s).count))) {
            let c = (String(Array(s)[i]) as! String)
            value = _int(((value &* 10) &+ _int(_int(c))))
            i = _int((i &+ 1))
        }
        return value
    }
    func is_polish_national_id(_ id: String) -> Bool {
        if (_int(((id).count)) == 0) {
            return false
        }
        if (String(describing: String(Array(String(describing: (id as! String)))[0..<1])) == "-") {
            return false
        }
        let input_int = _int(parse_int((id as! String)))
        if ((input_int < 10100000) || (input_int > 99923199999)) {
            return false
        }
        let month = _int(parse_int(String(describing: String(Array(String(describing: (id as! String)))[2..<4]))))
        if (!((((((month >= 1) && (month <= 12)) || ((month >= 21) && (month <= 32))) || ((month >= 41) && (month <= 52))) || ((month >= 61) && (month <= 72))) || ((month >= 81) && (month <= 92)))) {
            return false
        }
        let day = _int(parse_int(String(describing: String(Array(String(describing: (id as! String)))[4..<6]))))
        if ((day < 1) || (day > 31)) {
            return false
        }
        let multipliers: [Int] = ({
            var _arr: [Int] = []
            _arr = _append(_arr, 1)
            _arr = _append(_arr, 3)
            _arr = _append(_arr, 7)
            _arr = _append(_arr, 9)
            _arr = _append(_arr, 1)
            _arr = _append(_arr, 3)
            _arr = _append(_arr, 7)
            _arr = _append(_arr, 9)
            _arr = _append(_arr, 1)
            _arr = _append(_arr, 3)
            return _arr
        }() as! [Int])
        var subtotal = 0
        var i = 0
        while (i < _int(((multipliers).count))) {
            let digit = _int(parse_int(String(describing: String(Array(String(describing: (id as! String)))[i..<(i &+ 1)]))))
            subtotal = _int((subtotal &+ ((_int((digit &* (_idx(multipliers, i) as? Int ?? 0))) % 10 + 10) % 10)))
            i = _int((i &+ 1))
        }
        let checksum = (10 &- _int(((subtotal % 10 + 10) % 10)))
        return (checksum == ((input_int % 10 + 10) % 10))
    }
    print(_p(_p(is_polish_national_id("02070803628"))))
    print(_p(_p(is_polish_national_id("02150803629"))))
    print(_p(_p(is_polish_national_id("02075503622"))))
    print(_p(_p(is_polish_national_id("-99012212349"))))
    print(_p(_p(is_polish_national_id("990122123499999"))))
    print(_p(_p(is_polish_national_id("02070803621"))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
