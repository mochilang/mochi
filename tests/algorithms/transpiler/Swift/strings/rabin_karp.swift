// Generated by Mochi transpiler v0.10.64 on 2025-08-12 14:08:40 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let alphabet_size: Int = 256
    let modulus: Int = 1000003
    func index_of_char(_ s: String, _ ch: String) -> Int {
        var i: Int = 0
        while (i < _int(((s).count))) {
            if ((String(Array(s)[i]) as! String) == ch) {
                return i
            }
            i = _int((i &+ 1))
        }
        return -1
    }
    func ord(_ ch: String) -> Int {
        let upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
        let lower = "abcdefghijklmnopqrstuvwxyz"
        let digits = "0123456789"
        var idx: Int = _int(index_of_char((upper as! String), (ch as! String)))
        if (idx >= 0) {
            return (65 &+ idx)
        }
        idx = _int(index_of_char((lower as! String), (ch as! String)))
        if (idx >= 0) {
            return (97 &+ idx)
        }
        idx = _int(index_of_char((digits as! String), (ch as! String)))
        if (idx >= 0) {
            return (48 &+ idx)
        }
        if (ch == "ü") {
            return 252
        }
        if (ch == "Ü") {
            return 220
        }
        if (ch == " ") {
            return 32
        }
        return 0
    }
    func rabin_karp(_ pattern: String, _ text: String) -> Bool {
        let p_len: Int = _int(((pattern).count))
        let t_len: Int = _int(((text).count))
        if (p_len > t_len) {
            return false
        }
        var p_hash: Int = 0
        var t_hash: Int = 0
        var modulus_power: Int = 1
        var i: Int = 0
        while (i < p_len) {
            p_hash = _int(((_int((_int(ord((String(Array(pattern)[i]) as! String))) &+ (p_hash &* alphabet_size))) % modulus + modulus) % modulus))
            t_hash = _int(((_int((_int(ord((String(Array(text)[i]) as! String))) &+ (t_hash &* alphabet_size))) % modulus + modulus) % modulus))
            if (i != (p_len &- 1)) {
                modulus_power = _int(((_int((modulus_power &* alphabet_size)) % modulus + modulus) % modulus))
            }
            i = _int((i &+ 1))
        }
        var j: Int = 0
        while (j <= (t_len &- p_len)) {
            if ((t_hash == p_hash) && (String(describing: String(Array(String(describing: (text as! String)))[j..<(j &+ p_len)])) == pattern)) {
                return true
            }
            if (j == (t_len &- p_len)) {
                j = _int((j &+ 1))
                continue
            }
            t_hash = _int(((_int(((_int((t_hash &- (_int(ord((String(Array(text)[j]) as! String))) &* modulus_power))) &* alphabet_size) &+ _int(ord((String(Array(text)[(j &+ p_len)]) as! String))))) % modulus + modulus) % modulus))
            if (t_hash < 0) {
                t_hash = _int((t_hash &+ modulus))
            }
            j = _int((j &+ 1))
        }
        return false
    }
    func test_rabin_karp() -> Void {
        let pattern1: String = "abc1abc12"
        let text1: String = "alskfjaldsabc1abc1abc12k23adsfabcabc"
        let text2: String = "alskfjaldsk23adsfabcabc"
        if ((!rabin_karp((pattern1 as! String), (text1 as! String))) || rabin_karp((pattern1 as! String), (text2 as! String))) {
            print(_p("Failure"))
            return
        }
        let pattern2: String = "ABABX"
        let text3: String = "ABABZABABYABABX"
        if (!rabin_karp((pattern2 as! String), (text3 as! String))) {
            print(_p("Failure"))
            return
        }
        let pattern3: String = "AAAB"
        let text4: String = "ABAAAAAB"
        if (!rabin_karp((pattern3 as! String), (text4 as! String))) {
            print(_p("Failure"))
            return
        }
        let pattern4: String = "abcdabcy"
        let text5: String = "abcxabcdabxabcdabcdabcy"
        if (!rabin_karp((pattern4 as! String), (text5 as! String))) {
            print(_p("Failure"))
            return
        }
        let pattern5: String = "Lü"
        let text6: String = "Lüsai"
        if (!rabin_karp((pattern5 as! String), (text6 as! String))) {
            print(_p("Failure"))
            return
        }
        let pattern6: String = "Lue"
        if rabin_karp((pattern6 as! String), (text6 as! String)) {
            print(_p("Failure"))
            return
        }
        print(_p("Success."))
    }
    _ = test_rabin_karp()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
