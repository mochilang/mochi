// Generated by Mochi transpiler v0.10.64 on 2025-08-12 14:07:52 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let MAX_LOCAL_PART_OCTETS = 64
    let MAX_DOMAIN_OCTETS = 255
    let ASCII_LETTERS = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
    let DIGITS = "0123456789"
    let LOCAL_EXTRA = ".(!#$%&'*+-/=?^_`{|}~)"
    let DOMAIN_EXTRA = ".-"
    func count_char(_ s: String, _ target: String) -> Int {
        var cnt = 0
        var i = 0
        while (i < _int(((s).count))) {
            if (String(describing: String(Array(String(describing: (s as! String)))[i..<(i &+ 1)])) == target) {
                cnt = _int((cnt &+ 1))
            }
            i = _int((i &+ 1))
        }
        return cnt
    }
    func char_in(_ c: String, _ allowed: String) -> Bool {
        var i = 0
        while (i < _int(((allowed).count))) {
            if (String(describing: String(Array(String(describing: (allowed as! String)))[i..<(i &+ 1)])) == c) {
                return true
            }
            i = _int((i &+ 1))
        }
        return false
    }
    func starts_with_char(_ s: String, _ c: String) -> Bool {
        return ((_int(((s).count)) > 0) && (String(describing: String(Array(String(describing: (s as! String)))[0..<1])) == c))
    }
    func ends_with_char(_ s: String, _ c: String) -> Bool {
        return ((_int(((s).count)) > 0) && (String(describing: String(Array(String(describing: (s as! String)))[(_int(((s).count)) &- 1)..<_int(((s).count))])) == c))
    }
    func contains_double_dot(_ s: String) -> Bool {
        if (_int(((s).count)) < 2) {
            return false
        }
        var i = 0
        while (i < (_int(((s).count)) &- 1)) {
            if (String(describing: String(Array(String(describing: (s as! String)))[i..<(i &+ 2)])) == "..") {
                return true
            }
            i = _int((i &+ 1))
        }
        return false
    }
    func is_valid_email_address(_ email: String) -> Bool {
        if (_int(count_char((email as! String), "@")) != 1) {
            return false
        }
        var at_idx = 0
        var i = 0
        while (i < _int(((email).count))) {
            if (String(describing: String(Array(String(describing: (email as! String)))[i..<(i &+ 1)])) == "@") {
                at_idx = Int(i)
                break
            }
            i = _int((i &+ 1))
        }
        let local_part = String(describing: String(Array(String(describing: (email as! String)))[0..<at_idx]))
        let domain = String(describing: String(Array(String(describing: (email as! String)))[(at_idx &+ 1)..<_int(((email).count))]))
        if ((_int(((local_part).count)) > MAX_LOCAL_PART_OCTETS) || (_int(((domain).count)) > MAX_DOMAIN_OCTETS)) {
            return false
        }
        i = 0
        while (i < _int(((local_part).count))) {
            let ch = String(describing: String(Array(String(describing: (local_part as! String)))[i..<(i &+ 1)]))
            if (!char_in((ch as! String), (((ASCII_LETTERS + DIGITS) + LOCAL_EXTRA) as! String))) {
                return false
            }
            i = _int((i &+ 1))
        }
        if ((starts_with_char((local_part as! String), ".") || ends_with_char((local_part as! String), ".")) || contains_double_dot((local_part as! String))) {
            return false
        }
        i = 0
        while (i < _int(((domain).count))) {
            let ch = String(describing: String(Array(String(describing: (domain as! String)))[i..<(i &+ 1)]))
            if (!char_in((ch as! String), (((ASCII_LETTERS + DIGITS) + DOMAIN_EXTRA) as! String))) {
                return false
            }
            i = _int((i &+ 1))
        }
        if (starts_with_char((domain as! String), "-") || ends_with_char((domain as! String), ".")) {
            return false
        }
        if ((starts_with_char((domain as! String), ".") || ends_with_char((domain as! String), ".")) || contains_double_dot((domain as! String))) {
            return false
        }
        return true
    }
    let email_tests: [String] = ({
        var _arr: [String] = []
        _arr = _append(_arr, "simple@example.com")
        _arr = _append(_arr, "very.common@example.com")
        _arr = _append(_arr, "disposable.style.email.with+symbol@example.com")
        _arr = _append(_arr, "other-email-with-hyphen@and.subdomains.example.com")
        _arr = _append(_arr, "fully-qualified-domain@example.com")
        _arr = _append(_arr, "user.name+tag+sorting@example.com")
        _arr = _append(_arr, "x@example.com")
        _arr = _append(_arr, "example-indeed@strange-example.com")
        _arr = _append(_arr, "test/test@test.com")
        _arr = _append(_arr, "123456789012345678901234567890123456789012345678901234567890123@example.com")
        _arr = _append(_arr, "admin@mailserver1")
        _arr = _append(_arr, "example@s.example")
        _arr = _append(_arr, "Abc.example.com")
        _arr = _append(_arr, "A@b@c@example.com")
        _arr = _append(_arr, "abc@example..com")
        _arr = _append(_arr, "a(c)d,e:f;g<h>i[j\\k]l@example.com")
        _arr = _append(_arr, "12345678901234567890123456789012345678901234567890123456789012345@example.com")
        _arr = _append(_arr, "i.like.underscores@but_its_not_allowed_in_this_part")
        _arr = _append(_arr, "")
        return _arr
    }() as! [String])
    var idx = 0
    while (idx < _int(((email_tests).count))) {
        let email = (_idx(email_tests, idx) as! String)
        print(_p(_p(is_valid_email_address((email as! String)))))
        idx = _int((idx &+ 1))
    }
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
