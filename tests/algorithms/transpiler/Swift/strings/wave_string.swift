// Generated by Mochi transpiler v0.10.70 on 2025-08-23 13:53:22 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.isNaN || d.isInfinite {
                return String(d)
            }
            if d.rounded(.towardZero) == d {
                // avoid overflow when converting to Int64
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _num(_ v: Any) -> Double {
    if let d = v as? Double { return d }
    if let i = v as? Int { return Double(i) }
    if let i = v as? Int64 { return Double(i) }
    return 0
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _slice<T>(_ xs: [T], _ start: Int, _ end: Int) -> [T] {
    var s = start
    var e = end
    if s < 0 { s = 0 }
    if e > xs.count { e = xs.count }
    if s > e { s = e }
    return Array(xs[s..<e])
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let lowercase = "abcdefghijklmnopqrstuvwxyz"
    let uppercase = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    func index_of(_ s: String, _ c: String) -> Int {
        var i = 0
        while ((i < _int(((s).count)))) {
            if ((String(describing: String(_slice(Array(s), i, (i &+ 1)))) == c)) {
                return i
            }
            i = _int((i &+ 1))
        }
        return -1
    }
    func is_alpha(_ c: String) -> Bool {
        return ((_int(index_of((lowercase as! String), (c as! String))) >= 0) || (_int(index_of((uppercase as! String), (c as! String))) >= 0))
    }
    func to_upper(_ c: String) -> String {
        let idx = _int(index_of((lowercase as! String), (c as! String)))
        if ((idx >= 0)) {
            return String(describing: String(_slice(Array(uppercase), idx, (idx &+ 1))))
        }
        return c
    }
    func wave(_ txt: String) -> [String] {
        var result: [String] = ([] as! [String])
        var i = 0
        while ((i < _int(((txt).count)))) {
            let ch = String(describing: String(_slice(Array(txt), i, (i &+ 1))))
            if (is_alpha((ch as! String))) {
                let prefix = String(describing: String(_slice(Array(txt), 0, i)))
                let suffix = String(describing: String(_slice(Array(txt), (i &+ 1), _int(((txt).count)))))
                result = (_append(result, (_p((_p(prefix) + _p(String(describing: to_upper((ch as! String)))))) + _p(suffix))) as! [String])
            }
            i = _int((i &+ 1))
        }
        return result
    }
    print(_p("[" + (wave("cat") as! [String]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    print(_p("[" + (wave("one") as! [String]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    print(_p("[" + (wave("book") as! [String]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
