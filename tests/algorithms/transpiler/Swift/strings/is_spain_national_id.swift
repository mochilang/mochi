// Generated by Mochi transpiler v0.10.64 on 2025-08-12 14:05:17 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let DIGITS = "0123456789"
    let UPPER = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    let LOWER = "abcdefghijklmnopqrstuvwxyz"
    let LOOKUP_LETTERS = "TRWAGMYFPDXBNJZSQVHLCKE"
    let ERROR_MSG = "Input must be a string of 8 numbers plus letter"
    func to_upper(_ s: String) -> String {
        var res = ""
        var i = 0
        while (i < _int(((s).count))) {
            let ch = (String(Array(s)[i]) as! String)
            var j = 0
            var converted = ch
            while (j < _int(((LOWER).count))) {
                if ((String(Array(LOWER)[j]) as! String) == ch) {
                    converted = (String(Array(UPPER)[j]) as! String)
                    break
                }
                j = _int((j &+ 1))
            }
            res = ((res + converted) as! String)
            i = _int((i &+ 1))
        }
        return res
    }
    func is_digit(_ ch: String) -> Bool {
        var i = 0
        while (i < _int(((DIGITS).count))) {
            if ((String(Array(DIGITS)[i]) as! String) == ch) {
                return true
            }
            i = _int((i &+ 1))
        }
        return false
    }
    func clean_id(_ spanish_id: String) -> String {
        let upper_id = String(describing: to_upper((spanish_id as! String)))
        var cleaned = ""
        var i = 0
        while (i < _int(((upper_id).count))) {
            let ch = (String(Array(upper_id)[i]) as! String)
            if (ch != "-") {
                cleaned = ((cleaned + ch) as! String)
            }
            i = _int((i &+ 1))
        }
        return cleaned
    }
    func is_spain_national_id(_ spanish_id: String) -> Bool {
        let sid = String(describing: clean_id((spanish_id as! String)))
        if (_int(((sid).count)) != 9) {
            _ = fatalError(ERROR_MSG)
        }
        var i = 0
        while (i < 8) {
            if (!is_digit((String(Array(sid)[i]) as! String))) {
                _ = fatalError(ERROR_MSG)
            }
            i = _int((i &+ 1))
        }
        let number = _int(_int(String(describing: String(Array(String(describing: (sid as! String)))[0..<8]))))
        let letter = (String(Array(sid)[8]) as! String)
        if is_digit((letter as! String)) {
            _ = fatalError(ERROR_MSG)
        }
        let expected = (String(Array(LOOKUP_LETTERS)[((number % 23 + 23) % 23)]) as! String)
        return (letter == expected)
    }
    func main() {
        print(_p(is_spain_national_id("12345678Z")))
        print(_p(is_spain_national_id("12345678z")))
        print(_p(is_spain_national_id("12345678x")))
        print(_p(is_spain_national_id("12345678I")))
        print(_p(is_spain_national_id("12345678-Z")))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
