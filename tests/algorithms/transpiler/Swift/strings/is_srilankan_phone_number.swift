// Generated by Mochi transpiler v0.10.64 on 2025-08-12 14:05:21 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func starts_with(_ s: String, _ prefix: String) -> Bool {
        if (_int(((s).count)) < _int(((prefix).count))) {
            return false
        }
        return (String(describing: String(Array(String(describing: (s as! String)))[0..<_int(((prefix).count))])) == prefix)
    }
    func all_digits(_ s: String) -> Bool {
        var i = 0
        while (i < _int(((s).count))) {
            let c = (String(Array(s)[i]) as! String)
            if ((c < "0") || (c > "9")) {
                return false
            }
            i = _int((i &+ 1))
        }
        return true
    }
    func is_sri_lankan_phone_number(_ phone: String) -> Bool {
        var p = phone
        if starts_with((p as! String), "+94") {
            p = String(describing: String(Array(String(describing: (p as! String)))[3..<_int(((p).count))]))
        } else if starts_with((p as! String), "0094") {
            p = String(describing: String(Array(String(describing: (p as! String)))[4..<_int(((p).count))]))
        } else if starts_with((p as! String), "94") {
            p = String(describing: String(Array(String(describing: (p as! String)))[2..<_int(((p).count))]))
        } else if starts_with((p as! String), "0") {
            p = String(describing: String(Array(String(describing: (p as! String)))[1..<_int(((p).count))]))
        } else {
            return false
        }
        
        
        
        if ((_int(((p).count)) != 9) && (_int(((p).count)) != 10)) {
            return false
        }
        if ((String(Array(p)[0]) as! String) != "7") {
            return false
        }
        let second = (String(Array(p)[1]) as! String)
        let allowed: [String] = ({
            var _arr: [String] = []
            _arr = _append(_arr, "0")
            _arr = _append(_arr, "1")
            _arr = _append(_arr, "2")
            _arr = _append(_arr, "4")
            _arr = _append(_arr, "5")
            _arr = _append(_arr, "6")
            _arr = _append(_arr, "7")
            _arr = _append(_arr, "8")
            return _arr
        }() as! [String])
        if (!(allowed.contains(second))) {
            return false
        }
        var idx = 2
        if (_int(((p).count)) == 10) {
            let sep = (String(Array(p)[2]) as! String)
            if ((sep != "-") && (sep != " ")) {
                return false
            }
            idx = 3
        }
        if ((_int(((p).count)) &- idx) != 7) {
            return false
        }
        let rest = String(describing: String(Array(String(describing: (p as! String)))[idx..<_int(((p).count))]))
        return all_digits((rest as! String))
    }
    let phone = "0094702343221"
    print(_p(_p(is_sri_lankan_phone_number((phone as! String)))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
