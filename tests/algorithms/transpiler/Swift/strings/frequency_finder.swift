// Generated by Mochi transpiler v0.10.63 on 2025-08-11 17:29:11 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let ETAOIN = "ETAOINSHRDLCUMWFGYPBVKJXQZ"
    let LETTERS = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    func etaoin_index(_ letter: String) -> Int {
        var i = 0
        while (i < _int(((ETAOIN).count))) {
            if (String(describing: String(Array(String(describing: (ETAOIN as! String)))[i..<(i &+ 1)])) == letter) {
                return i
            }
            i = _int((i &+ 1))
        }
        return _int(((ETAOIN).count))
    }
    func get_letter_count(_ message: String) -> [String: Int] {
        var letter_count: [String: Int] = ([:] as! [String: Int])
        var i = 0
        while (i < _int(((LETTERS).count))) {
            let c = String(describing: String(Array(String(describing: (LETTERS as! String)))[i..<(i &+ 1)]))
            letter_count = _set(letter_count, String(describing: c), 0)
            i = _int((i &+ 1))
        }
        let msg = String(describing: ((message as! String).uppercased()))
        var j = 0
        while (j < _int(((msg).count))) {
            let ch = String(describing: String(Array(String(describing: (msg as! String)))[j..<(j &+ 1)]))
            if (LETTERS.contains(ch)) {
                letter_count = _set(letter_count, String(describing: ch), _int(((letter_count[String(String(describing: ch))] as? Int ?? 0) &+ 1)))
            }
            j = _int((j &+ 1))
        }
        return letter_count
    }
    func get_frequency_order(_ message: String) -> String {
        let letter_to_freq: [String: Int] = (get_letter_count((message as! String)) as! [String: Int])
        var max_freq = 0
        var i = 0
        while (i < _int(((LETTERS).count))) {
            let letter = String(describing: String(Array(String(describing: (LETTERS as! String)))[i..<(i &+ 1)]))
            let f = (letter_to_freq[String(String(describing: letter))] as? Int ?? 0)
            if (f > max_freq) {
                max_freq = Int(f)
            }
            i = _int((i &+ 1))
        }
        var result = ""
        var freq = max_freq
        while (freq >= 0) {
            var group: [String] = ([] as! [String])
            var j = 0
            while (j < _int(((LETTERS).count))) {
                let letter = String(describing: String(Array(String(describing: (LETTERS as! String)))[j..<(j &+ 1)]))
                if ((letter_to_freq[String(String(describing: letter))] as? Int ?? 0) == freq) {
                    group = (_append(group, letter) as! [String])
                }
                j = _int((j &+ 1))
            }
            var g_len = _int(((group).count))
            var a = 0
            while (a < g_len) {
                var b = 0
                while (b < ((g_len &- a) &- 1)) {
                    let g1 = (_idx(group, b) as! String)
                    let g2 = (_idx(group, (b &+ 1)) as! String)
                    let idx1 = _int(etaoin_index((g1 as! String)))
                    let idx2 = _int(etaoin_index((g2 as! String)))
                    if (idx1 < idx2) {
                        let tmp = (_idx(group, b) as! String)
                        group = _set(group, b, (_idx(group, (b &+ 1)) as! String))
                        group = _set(group, (b &+ 1), (tmp as! String))
                    }
                    b = _int((b &+ 1))
                }
                a = _int((a &+ 1))
            }
            var g = 0
            while (g < _int(((group).count))) {
                result = ((result + (_idx(group, g) as! String)) as! String)
                g = _int((g &+ 1))
            }
            freq = _int((freq &- 1))
        }
        return result
    }
    func english_freq_match_score(_ message: String) -> Int {
        let freq_order = String(describing: get_frequency_order((message as! String)))
        let top = String(describing: String(Array(String(describing: (freq_order as! String)))[0..<6]))
        let bottom = String(describing: String(Array(String(describing: (freq_order as! String)))[(_int(((freq_order).count)) &- 6)..<_int(((freq_order).count))]))
        var score = 0
        var i = 0
        while (i < 6) {
            let c = String(describing: String(Array(String(describing: (ETAOIN as! String)))[i..<(i &+ 1)]))
            if (top.contains(c)) {
                score = _int((score &+ 1))
            }
            i = _int((i &+ 1))
        }
        var j = (_int(((ETAOIN).count)) &- 6)
        while (j < _int(((ETAOIN).count))) {
            let c = String(describing: String(Array(String(describing: (ETAOIN as! String)))[j..<(j &+ 1)]))
            if (bottom.contains(c)) {
                score = _int((score &+ 1))
            }
            j = _int((j &+ 1))
        }
        return score
    }
    func main() {
        print(_p(String(describing: get_frequency_order("Hello World"))))
        print(_p(_int(english_freq_match_score("Hello World"))))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
