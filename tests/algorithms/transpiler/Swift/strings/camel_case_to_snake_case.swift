// Generated by Mochi transpiler v0.10.64 on 2025-08-12 14:04:20 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _slice<T>(_ xs: [T], _ start: Int, _ end: Int) -> [T] {
    var s = start
    var e = end
    if s < 0 { s = 0 }
    if e > xs.count { e = xs.count }
    if s > e { s = e }
    return Array(xs[s..<e])
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let LOWER = "abcdefghijklmnopqrstuvwxyz"
    let UPPER = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    let DIGITS = "0123456789"
    func is_lower(_ ch: String) -> Bool {
        var i = 0
        while (i < _int(((LOWER).count))) {
            if ((String(Array(LOWER)[i]) as! String) == ch) {
                return true
            }
            i = _int((i &+ 1))
        }
        return false
    }
    func is_upper(_ ch: String) -> Bool {
        var i = 0
        while (i < _int(((UPPER).count))) {
            if ((String(Array(UPPER)[i]) as! String) == ch) {
                return true
            }
            i = _int((i &+ 1))
        }
        return false
    }
    func is_digit(_ ch: String) -> Bool {
        var i = 0
        while (i < _int(((DIGITS).count))) {
            if ((String(Array(DIGITS)[i]) as! String) == ch) {
                return true
            }
            i = _int((i &+ 1))
        }
        return false
    }
    func is_alpha(_ ch: String) -> Bool {
        if is_lower((ch as! String)) {
            return true
        }
        if is_upper((ch as! String)) {
            return true
        }
        return false
    }
    func is_alnum(_ ch: String) -> Bool {
        if is_alpha((ch as! String)) {
            return true
        }
        if is_digit((ch as! String)) {
            return true
        }
        return false
    }
    func to_lower(_ ch: String) -> String {
        var i = 0
        while (i < _int(((UPPER).count))) {
            if ((String(Array(UPPER)[i]) as! String) == ch) {
                return (String(Array(LOWER)[i]) as! String)
            }
            i = _int((i &+ 1))
        }
        return ch
    }
    func camel_to_snake_case(_ input_str: String) -> String {
        var snake_str = ""
        var i = 0
        var prev_is_digit = false
        var prev_is_alpha = false
        while (i < _int(((input_str).count))) {
            let ch = (String(Array(input_str)[i]) as! String)
            if is_upper((ch as! String)) {
                snake_str = (((snake_str + "_") + String(describing: to_lower((ch as! String)))) as! String)
            } else if (prev_is_digit && is_lower((ch as! String))) {
                snake_str = (((snake_str + "_") + ch) as! String)
            } else if (prev_is_alpha && is_digit((ch as! String))) {
                snake_str = (((snake_str + "_") + ch) as! String)
            } else if (!is_alnum((ch as! String))) {
                snake_str = ((snake_str + "_") as! String)
            } else {
                snake_str = ((snake_str + ch) as! String)
            }
            
            
            
            prev_is_digit = is_digit((ch as! String))
            prev_is_alpha = is_alpha((ch as! String))
            i = _int((i &+ 1))
        }
        if ((_int(((snake_str).count)) > 0) && ((String(Array(snake_str)[0]) as! String) == "_")) {
            snake_str = (String(_slice(Array(snake_str), 1, _int(((snake_str).count)))) as! String)
        }
        return snake_str
    }
    func main() {
        print(_p(String(describing: camel_to_snake_case("someRandomString"))))
        print(_p(String(describing: camel_to_snake_case("SomeRandomStr#ng"))))
        print(_p(String(describing: camel_to_snake_case("123SomeRandom123String123"))))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
