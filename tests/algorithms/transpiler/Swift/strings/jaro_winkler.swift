// Generated by Mochi transpiler v0.10.70 on 2025-08-23 13:51:58 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.isNaN || d.isInfinite {
                return String(d)
            }
            if d.rounded(.towardZero) == d {
                // avoid overflow when converting to Int64
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _num(_ v: Any) -> Double {
    if let d = v as? Double { return d }
    if let i = v as? Int { return Double(i) }
    if let i = v as? Int64 { return Double(i) }
    return 0
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first!
}
func _idx<K: Hashable, V>(_ m: [K: V], _ k: K) -> V? {
    return m[k]
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _slice<T>(_ xs: [T], _ start: Int, _ end: Int) -> [T] {
    var s = start
    var e = end
    if s < 0 { s = 0 }
    if e > xs.count { e = xs.count }
    if s > e { s = e }
    return Array(xs[s..<e])
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func min_int(_ a: Int, _ b: Int) -> Int {
        if ((a < b)) {
            return a
        } else {
            return b
        }
    }
    func max_int(_ a: Int, _ b: Int) -> Int {
        if ((a > b)) {
            return a
        } else {
            return b
        }
    }
    func repeat_bool(_ n: Int, _ value: Bool) -> [Bool] {
        var res: [Bool] = ([] as! [Bool])
        var i = 0
        while (i < n) {
            res = (_append(res, value) as! [Bool])
            i = _int((i &+ 1))
        }
        return res
    }
    func set_bool(_ xs: [Bool], _ idx: Int, _ value: Bool) -> [Bool] {
        var res: [Bool] = ([] as! [Bool])
        var i = 0
        while (i < _int(((xs).count))) {
            if ((i == idx)) {
                res = (_append(res, value) as! [Bool])
            } else {
                res = (_append(res, (_idx(xs, i) as! Bool)) as! [Bool])
            }
            i = _int((i &+ 1))
        }
        return res
    }
    func jaro_winkler(_ s1: String, _ s2: String) -> Double {
        let len1 = _int(((s1).count))
        let len2 = _int(((s2).count))
        let limit = (_int(min_int(len1, len2)) / 2)
        var match1 = (repeat_bool(len1, false) as! [Bool])
        var match2 = (repeat_bool(len2, false) as! [Bool])
        var matches = 0
        var i = 0
        while (i < len1) {
            let start = _int(max_int(0, (i &- limit)))
            let end = _int(min_int(((i &+ limit) &+ 1), len2))
            var j = start
            while (j < end) {
                if ((!(_idx(match2, j) ?? false) && (String(describing: String(_slice(Array(s1), i, (i &+ 1)))) == String(describing: String(_slice(Array(s2), j, (j &+ 1))))))) {
                    match1 = (set_bool((match1 as! [Bool]), i, true) as! [Bool])
                    match2 = (set_bool((match2 as! [Bool]), j, true) as! [Bool])
                    matches = _int((matches &+ 1))
                    break
                }
                j = _int((j &+ 1))
            }
            i = _int((i &+ 1))
        }
        if ((matches == 0)) {
            return 0.0
        }
        var transpositions = 0
        var k = 0
        i = 0
        while (i < len1) {
            if ((_idx(match1, i) as! Bool)) {
                while !(_idx(match2, k) ?? false) {
                    k = _int((k &+ 1))
                }
                if ((String(describing: String(_slice(Array(s1), i, (i &+ 1)))) != String(describing: String(_slice(Array(s2), k, (k &+ 1)))))) {
                    transpositions = _int((transpositions &+ 1))
                }
                k = _int((k &+ 1))
            }
            i = _int((i &+ 1))
        }
        let m = _num(matches)
        let jaro = (_num(((_num((m / _num(len1))) + _num((m / _num(len2)))) + _num((_num((m - (_num(transpositions) / 2.0))) / m)))) / 3.0)
        var prefix_len = 0
        i = 0
        while (((i < 4) && (i < len1)) && (i < len2)) {
            if ((String(describing: String(_slice(Array(s1), i, (i &+ 1)))) == String(describing: String(_slice(Array(s2), i, (i &+ 1)))))) {
                prefix_len = _int((prefix_len &+ 1))
            } else {
                break
            }
            i = _int((i &+ 1))
        }
        return (jaro + ((0.10000000000000001 * _num(prefix_len)) * _num((1.0 - jaro))))
    }
    print(_p(_p(_num(jaro_winkler("hello", "world")))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
