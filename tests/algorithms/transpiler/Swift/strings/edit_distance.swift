// Generated by Mochi transpiler v0.10.63 on 2025-08-11 17:29:09 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func min3(_ a: Int, _ b: Int, _ c: Int) -> Int {
        var m = a
        if (b < m) {
            m = Int(b)
        }
        if (c < m) {
            m = Int(c)
        }
        return m
    }
    func edit_distance(_ source: String, _ target: String) -> Int {
        if (_int(((source).count)) == 0) {
            return _int(((target).count))
        }
        if (_int(((target).count)) == 0) {
            return _int(((source).count))
        }
        let last_source = String(describing: String(Array(String(describing: (source as! String)))[(_int(((source).count)) &- 1)..<_int(((source).count))]))
        let last_target = String(describing: String(Array(String(describing: (target as! String)))[(_int(((target).count)) &- 1)..<_int(((target).count))]))
        let delta = _int(((last_source == last_target) ? 0 : 1))
        let delete_cost = (_int(edit_distance(String(describing: String(Array(String(describing: (source as! String)))[0..<(_int(((source).count)) &- 1)])), (target as! String))) &+ 1)
        let insert_cost = (_int(edit_distance((source as! String), String(describing: String(Array(String(describing: (target as! String)))[0..<(_int(((target).count)) &- 1)])))) &+ 1)
        let replace_cost = (_int(edit_distance(String(describing: String(Array(String(describing: (source as! String)))[0..<(_int(((source).count)) &- 1)])), String(describing: String(Array(String(describing: (target as! String)))[0..<(_int(((target).count)) &- 1)])))) &+ delta)
        return _int(min3(delete_cost, insert_cost, replace_cost))
    }
    func main() {
        let result = _int(edit_distance("ATCGCTG", "TAGCTAA"))
        print(_p(_p(result)))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
