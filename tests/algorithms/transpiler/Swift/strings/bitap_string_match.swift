// Generated by Mochi transpiler v0.10.64 on 2025-08-12 14:04:13 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
func _slice<T>(_ xs: [T], _ start: Int, _ end: Int) -> [T] {
    var s = start
    var e = end
    if s < 0 { s = 0 }
    if e > xs.count { e = xs.count }
    if s > e { s = e }
    return Array(xs[s..<e])
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func pow2(_ n: Int) -> Int {
        var res = 1
        var i = 0
        while (i < n) {
            res = _int((res &* 2))
            i = _int((i &+ 1))
        }
        return res
    }
    func bit_and(_ a: Int, _ b: Int) -> Int {
        var x = a
        var y = b
        var res = 0
        var bit = 1
        while ((x > 0) || (y > 0)) {
            if ((((x % 2 + 2) % 2) == 1) && (((y % 2 + 2) % 2) == 1)) {
                res = _int((res &+ bit))
            }
            x = _int(_int((x / 2)))
            y = _int(_int((y / 2)))
            bit = _int((bit &* 2))
        }
        return res
    }
    func bit_or(_ a: Int, _ b: Int) -> Int {
        var x = a
        var y = b
        var res = 0
        var bit = 1
        while ((x > 0) || (y > 0)) {
            if ((((x % 2 + 2) % 2) == 1) || (((y % 2 + 2) % 2) == 1)) {
                res = _int((res &+ bit))
            }
            x = _int(_int((x / 2)))
            y = _int(_int((y / 2)))
            bit = _int((bit &* 2))
        }
        return res
    }
    func char_to_index(_ ch: String) -> Int {
        let letters = "abcdefghijklmnopqrstuvwxyz"
        var i = 0
        while (i < _int(((letters).count))) {
            if (String(_slice(Array(letters), i, (i &+ 1))) == ch) {
                return i
            }
            i = _int((i &+ 1))
        }
        return 26
    }
    func bitap_string_match(_ text: String, _ pattern: String) -> Int {
        if (pattern == "") {
            return 0
        }
        let m = _int(((pattern).count))
        if (m > _int(((text).count))) {
            return -1
        }
        let limit = _int(pow2((m &+ 1)))
        let all_ones = (limit &- 1)
        var pattern_mask: [Int] = ([] as! [Int])
        var i = 0
        while (i < 27) {
            pattern_mask = (_append(pattern_mask, all_ones) as! [Int])
            i = _int((i &+ 1))
        }
        i = 0
        while (i < m) {
            let ch = String(_slice(Array(pattern), i, (i &+ 1)))
            let idx = _int(char_to_index((ch as! String)))
            pattern_mask = _set(pattern_mask, idx, _int(bit_and((_idx(pattern_mask, idx) as? Int ?? 0), (all_ones &- _int(pow2(i))))))
            i = _int((i &+ 1))
        }
        var state = (all_ones &- 1)
        i = 0
        while (i < _int(((text).count))) {
            let ch = String(_slice(Array(text), i, (i &+ 1)))
            let idx = _int(char_to_index((ch as! String)))
            state = _int(bit_or(state, (_idx(pattern_mask, idx) as? Int ?? 0)))
            state = _int(((_int((state &* 2)) % limit + limit) % limit))
            if (_int(bit_and(state, _int(pow2(m)))) == 0) {
                return ((i &- m) &+ 1)
            }
            i = _int((i &+ 1))
        }
        return -1
    }
    func main() {
        print(_p(_p(_int(bitap_string_match("abdabababc", "ababc")))))
        print(_p(_p(_int(bitap_string_match("abdabababc", "")))))
        print(_p(_p(_int(bitap_string_match("abdabababc", "c")))))
        print(_p(_p(_int(bitap_string_match("abdabababc", "fofosdfo")))))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
