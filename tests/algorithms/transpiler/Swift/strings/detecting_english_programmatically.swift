// Generated by Mochi transpiler v0.10.64 on 2025-08-12 14:04:44 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
func _slice<T>(_ xs: [T], _ start: Int, _ end: Int) -> [T] {
    var s = start
    var e = end
    if s < 0 { s = 0 }
    if e > xs.count { e = xs.count }
    if s > e { s = e }
    return Array(xs[s..<e])
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let LETTERS_AND_SPACE: String = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz \t\n"
    let LOWER: String = "abcdefghijklmnopqrstuvwxyz"
    let UPPER: String = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    func to_upper(_ s: String) -> String {
        var res = ""
        var i = 0
        while (i < _int(((s).count))) {
            let c = String(_slice(Array(s), i, (i &+ 1)))
            var j = 0
            var up = c
            while (j < _int(((LOWER).count))) {
                if (c == String(_slice(Array(LOWER), j, (j &+ 1)))) {
                    up = (String(_slice(Array(UPPER), j, (j &+ 1))) as! String)
                    break
                }
                j = _int((j &+ 1))
            }
            res = ((res + up) as! String)
            i = _int((i &+ 1))
        }
        return res
    }
    func char_in(_ chars: String, _ c: String) -> Bool {
        var i = 0
        while (i < _int(((chars).count))) {
            if (String(_slice(Array(chars), i, (i &+ 1))) == c) {
                return true
            }
            i = _int((i &+ 1))
        }
        return false
    }
    func remove_non_letters(_ message: String) -> String {
        var res = ""
        var i = 0
        while (i < _int(((message).count))) {
            let ch = String(_slice(Array(message), i, (i &+ 1)))
            if char_in((LETTERS_AND_SPACE as! String), (ch as! String)) {
                res = ((res + ch) as! String)
            }
            i = _int((i &+ 1))
        }
        return res
    }
    func split_spaces(_ text: String) -> [String] {
        var res: [String] = ([] as! [String])
        var current = ""
        var i = 0
        while (i < _int(((text).count))) {
            let ch = String(_slice(Array(text), i, (i &+ 1)))
            if (ch == " ") {
                res = (_append(res, current) as! [String])
                current = ""
            } else {
                current = ((current + ch) as! String)
            }
            i = _int((i &+ 1))
        }
        res = (_append(res, current) as! [String])
        return res
    }
    func load_dictionary() -> [String: Bool] {
        let words: [String] = ({
            var _arr: [String] = []
            _arr = _append(_arr, "HELLO")
            _arr = _append(_arr, "WORLD")
            _arr = _append(_arr, "HOW")
            _arr = _append(_arr, "ARE")
            _arr = _append(_arr, "YOU")
            _arr = _append(_arr, "THE")
            _arr = _append(_arr, "QUICK")
            _arr = _append(_arr, "BROWN")
            _arr = _append(_arr, "FOX")
            _arr = _append(_arr, "JUMPS")
            _arr = _append(_arr, "OVER")
            _arr = _append(_arr, "LAZY")
            _arr = _append(_arr, "DOG")
            return _arr
        }() as! [String])
        var dict: [String: Bool] = ([:] as! [String: Bool])
        for w in words {
            dict = _set(dict, String(describing: w), true)
        }
        return dict
    }
    let ENGLISH_WORDS: [String: Bool] = (load_dictionary() as! [String: Bool])
    func get_english_count(_ message: String) -> Double {
        let upper = String(describing: to_upper((message as! String)))
        let cleaned = String(describing: remove_non_letters((upper as! String)))
        let possible: [String] = (split_spaces((cleaned as! String)) as! [String])
        var matches = 0
        var total = 0
        for w in possible {
            if (w != "") {
                total = _int((total &+ 1))
                if (ENGLISH_WORDS[w] != nil) {
                    matches = _int((matches &+ 1))
                }
            }
        }
        if (total == 0) {
            return 0.0
        }
        return (Double(matches) / Double(total))
    }
    func is_english(_ message: String, _ word_percentage: Int, _ letter_percentage: Int) -> Bool {
        let words_match = ((Double(get_english_count((message as! String))) * 100.0) >= Double(word_percentage))
        let num_letters = _int(((String(describing: remove_non_letters((message as! String)))).count))
        let letters_pct = Double(((_int(((message).count)) == 0) ? 0.0 : ((Double(num_letters) / Double(((message).count))) * 100.0)))
        let letters_match = (letters_pct >= Double(letter_percentage))
        return (words_match && letters_match)
    }
    print(_p(_p(is_english("Hello World", 20, 85))))
    print(_p(_p(is_english("llold HorWd", 20, 85))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
