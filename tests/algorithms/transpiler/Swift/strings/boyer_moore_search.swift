// Generated by Mochi transpiler v0.10.64 on 2025-08-12 14:04:16 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func match_in_pattern(_ pat: String, _ ch: String) -> Int {
        var i = (_int(((pat).count)) &- 1)
        while (i >= 0) {
            if (String(describing: String(Array(String(describing: (pat as! String)))[i..<(i &+ 1)])) == ch) {
                return i
            }
            i = _int((i &- 1))
        }
        return -1
    }
    func mismatch_in_text(_ text: String, _ pat: String, _ current_pos: Int) -> Int {
        var i = (_int(((pat).count)) &- 1)
        while (i >= 0) {
            if (String(describing: String(Array(String(describing: (pat as! String)))[i..<(i &+ 1)])) != String(describing: String(Array(String(describing: (text as! String)))[(current_pos &+ i)..<((current_pos &+ i) &+ 1)]))) {
                return (current_pos &+ i)
            }
            i = _int((i &- 1))
        }
        return -1
    }
    func bad_character_heuristic(_ text: String, _ pat: String) -> [Int] {
        let textLen = _int(((text).count))
        let patLen = _int(((pat).count))
        var positions: [Int] = ([] as! [Int])
        var i = 0
        while (i <= (textLen &- patLen)) {
            let mismatch_index = _int(mismatch_in_text((text as! String), (pat as! String), i))
            if (mismatch_index < 0) {
                positions = (_append(positions, i) as! [Int])
                i = _int((i &+ 1))
            } else {
                let ch = String(describing: String(Array(String(describing: (text as! String)))[mismatch_index..<(mismatch_index &+ 1)]))
                let match_index = _int(match_in_pattern((pat as! String), (ch as! String)))
                if (match_index < 0) {
                    i = _int((mismatch_index &+ 1))
                } else {
                    i = _int((mismatch_index &- match_index))
                }
            }
        }
        return positions
    }
    do {
        let positions: [Int] = (bad_character_heuristic("ABAABA", "AB") as! [Int])
        assert((positions == ({
            var _arr: [Int] = []
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 3)
            return _arr
        }() as! [Int])))
    }
    do {
        let positions: [Int] = (bad_character_heuristic("THIS IS A TEST TEXT", "TEST") as! [Int])
        assert((positions == ({
            var _arr: [Int] = []
            _arr = _append(_arr, 10)
            return _arr
        }() as! [Int])))
    }
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
