// Generated by Mochi transpiler v0.10.64 on 2025-08-12 14:04:37 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _slice<T>(_ xs: [T], _ start: Int, _ end: Int) -> [T] {
    var s = start
    var e = end
    if s < 0 { s = 0 }
    if e > xs.count { e = xs.count }
    if s > e { s = e }
    return Array(xs[s..<e])
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func validate_initial_digits(_ cc: String) -> Bool {
        return ((((((String(_slice(Array(cc), 0, 2)) == "34") || (String(_slice(Array(cc), 0, 2)) == "35")) || (String(_slice(Array(cc), 0, 2)) == "37")) || (String(_slice(Array(cc), 0, 1)) == "4")) || (String(_slice(Array(cc), 0, 1)) == "5")) || (String(_slice(Array(cc), 0, 1)) == "6"))
    }
    func luhn_validation(_ cc: String) -> Bool {
        var sum = 0
        var double_digit = false
        var i = (_int(((cc).count)) &- 1)
        while (i >= 0) {
            var n = _int(String(_slice(Array(cc), i, (i &+ 1))))
            if double_digit {
                n = _int((n &* 2))
                if (n > 9) {
                    n = _int((n &- 9))
                }
            }
            sum = _int((sum &+ n))
            double_digit = ((!double_digit) as! Bool)
            i = _int((i &- 1))
        }
        return (((sum % 10 + 10) % 10) == 0)
    }
    func is_digit_string(_ s: String) -> Bool {
        var i = 0
        while (i < _int(((s).count))) {
            let c = String(_slice(Array(s), i, (i &+ 1)))
            if ((c < "0") || (c > "9")) {
                return false
            }
            i = _int((i &+ 1))
        }
        return true
    }
    func validate_credit_card_number(_ cc: String) -> Bool {
        let error_message = (cc + " is an invalid credit card number because")
        if (!is_digit_string((cc as! String))) {
            print(_p((error_message + " it has nonnumerical characters.")))
            return false
        }
        if (!((_int(((cc).count)) >= 13) && (_int(((cc).count)) <= 16))) {
            print(_p((error_message + " of its length.")))
            return false
        }
        if (!validate_initial_digits((cc as! String))) {
            print(_p((error_message + " of its first two digits.")))
            return false
        }
        if (!luhn_validation((cc as! String))) {
            print(_p((error_message + " it fails the Luhn check.")))
            return false
        }
        print(_p((cc + " is a valid credit card number.")))
        return true
    }
    func main() {
        _ = validate_credit_card_number("4111111111111111")
        _ = validate_credit_card_number("32323")
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
