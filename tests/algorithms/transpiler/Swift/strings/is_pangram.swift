// Generated by Mochi transpiler v0.10.64 on 2025-08-12 14:05:11 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func is_pangram(_ input_str: String) -> Bool {
        var letters: [String] = ([] as! [String])
        var i = 0
        while (i < _int(((input_str).count))) {
            let c = String(describing: ((String(Array(input_str)[i]) as! String).lowercased()))
            let is_new = (!(letters.contains(c)))
            if ((((c != " ") && ("a" <= c)) && (c <= "z")) && is_new) {
                letters = (_append(letters, c) as! [String])
            }
            i = _int((i &+ 1))
        }
        return (_int(((letters).count)) == 26)
    }
    func is_pangram_faster(_ input_str: String) -> Bool {
        let alphabet = "abcdefghijklmnopqrstuvwxyz"
        var flag: [Bool] = ([] as! [Bool])
        var i = 0
        while (i < 26) {
            flag = (_append(flag, false) as! [Bool])
            i = _int((i &+ 1))
        }
        var j = 0
        while (j < _int(((input_str).count))) {
            let c = String(describing: ((String(Array(input_str)[j]) as! String).lowercased()))
            var k = 0
            while (k < 26) {
                if ((String(Array(alphabet)[k]) as! String) == c) {
                    flag = _set(flag, k, true)
                    break
                }
                k = _int((k &+ 1))
            }
            j = _int((j &+ 1))
        }
        var t = 0
        while (t < 26) {
            if !(_idx(flag, t) ?? false) {
                return false
            }
            t = _int((t &+ 1))
        }
        return true
    }
    func is_pangram_fastest(_ input_str: String) -> Bool {
        let s = String(describing: (input_str.lowercased()))
        let alphabet = "abcdefghijklmnopqrstuvwxyz"
        var i = 0
        while (i < _int(((alphabet).count))) {
            let letter = (String(Array(alphabet)[i]) as! String)
            if (!(s.contains(letter))) {
                return false
            }
            i = _int((i &+ 1))
        }
        return true
    }
    let s1 = "The quick brown fox jumps over the lazy dog"
    let s2 = "My name is Unknown"
    print(_p(_p(is_pangram((s1 as! String)))))
    print(_p(_p(is_pangram((s2 as! String)))))
    print(_p(_p(is_pangram_faster((s1 as! String)))))
    print(_p(_p(is_pangram_faster((s2 as! String)))))
    print(_p(_p(is_pangram_fastest((s1 as! String)))))
    print(_p(_p(is_pangram_fastest((s2 as! String)))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
