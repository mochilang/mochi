// Generated by Mochi transpiler v0.10.61 on 2025-08-08 19:13:43 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
struct ConnMock: Codable {
    var recv_called: Int
    var send_called: Int
    var close_called: Int
    init() {
        self.recv_called = 0
        self.send_called = 0
        self.close_called = 0
    }
    init(recv_called: Int, send_called: Int, close_called: Int) {
        self.recv_called = recv_called
        self.send_called = send_called
        self.close_called = close_called
    }
}
struct SocketMock: Codable {
    var bind_called: Int
    var listen_called: Int
    var accept_called: Int
    var shutdown_called: Int
    var close_called: Int
    var conn: ConnMock
    init() {
        self.bind_called = 0
        self.listen_called = 0
        self.accept_called = 0
        self.shutdown_called = 0
        self.close_called = 0
        self.conn = ConnMock()
    }
    init(bind_called: Int, listen_called: Int, accept_called: Int, shutdown_called: Int, close_called: Int, conn: ConnMock) {
        self.bind_called = bind_called
        self.listen_called = listen_called
        self.accept_called = accept_called
        self.shutdown_called = shutdown_called
        self.close_called = close_called
        self.conn = conn
    }
}
struct FileMock: Codable {
    var read_called: Int
    var data: [Int]
    init() {
        self.read_called = 0
        self.data = []
    }
    init(read_called: Int, data: [Int]) {
        self.read_called = read_called
        self.data = data
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func make_conn_mock() -> ConnMock {
        return ConnMock(recv_called: 0, send_called: 0, close_called: 0)
    }
    func conn_recv(_ conn: inout ConnMock, _ size: Int) -> Int {
        conn.recv_called = _int((conn.recv_called &+ 1))
        return 0
    }
    func conn_send(_ conn: inout ConnMock, _ data: Int) -> Void {
        conn.send_called = _int((conn.send_called &+ 1))
    }
    func conn_close(_ conn: inout ConnMock) -> Void {
        conn.close_called = _int((conn.close_called &+ 1))
    }
    func make_socket_mock(_ conn: ConnMock) -> SocketMock {
        return SocketMock(bind_called: 0, listen_called: 0, accept_called: 0, shutdown_called: 0, close_called: 0, conn: (conn as! ConnMock))
    }
    func socket_bind(_ sock: inout SocketMock) -> Void {
        sock.bind_called = _int((sock.bind_called &+ 1))
    }
    func socket_listen(_ sock: inout SocketMock) -> Void {
        sock.listen_called = _int((sock.listen_called &+ 1))
    }
    func socket_accept(_ sock: inout SocketMock) -> ConnMock {
        sock.accept_called = _int((sock.accept_called &+ 1))
        return sock.conn
    }
    func socket_shutdown(_ sock: inout SocketMock) -> Void {
        sock.shutdown_called = _int((sock.shutdown_called &+ 1))
    }
    func socket_close(_ sock: inout SocketMock) -> Void {
        sock.close_called = _int((sock.close_called &+ 1))
    }
    func make_file_mock(_ values: [Int]) -> FileMock {
        return FileMock(read_called: 0, data: (values as! [Int]))
    }
    func file_read(_ f: inout FileMock, _ size: Int) -> Int {
        if (f.read_called < _int(((f.data).count))) {
            let value = (_idx(f.data, f.read_called) as? Int ?? 0)
            f.read_called = _int((f.read_called &+ 1))
            return value
        }
        f.read_called = _int((f.read_called &+ 1))
        return 0
    }
    func file_open() -> FileMock {
        return make_file_mock(({
            var _arr: [Int] = []
            _arr = _append(_arr, 1)
            _arr = _append(_arr, 0)
            return _arr
        }() as! [Int]))
    }
    func send_file(_ sock: inout SocketMock, _ f: inout FileMock) -> Void {
        _ = socket_bind(&sock)
        _ = socket_listen(&sock)
        var conn = socket_accept(&sock)
        let _ = _int(conn_recv(&conn, 1024))
        var data = _int(file_read(&f, 1024))
        while (data != 0) {
            _ = conn_send(&conn, data)
            data = _int(file_read(&f, 1024))
        }
        _ = conn_close(&conn)
        _ = socket_shutdown(&sock)
        _ = socket_close(&sock)
    }
    func test_send_file_running_as_expected() -> String {
        let conn = make_conn_mock()
        var sock = make_socket_mock((conn as! ConnMock))
        var f = file_open()
        _ = send_file(&sock, &f)
        if (((((((((sock.bind_called == 1) && (sock.listen_called == 1)) && (sock.accept_called == 1)) && (conn.recv_called == 1)) && (f.read_called >= 1)) && (conn.send_called == 1)) && (conn.close_called == 1)) && (sock.shutdown_called == 1)) && (sock.close_called == 1)) {
            return "pass"
        }
        return "fail"
    }
    print(_p(String(describing: test_send_file_running_as_expected())))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
