// Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:57:29 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func pad_left_num(_ n: Int) -> String {
        var s: String = String(describing: n)
        while (Int(((s).count)) < 5) {
            s = ((" " + s) as! String)
        }
        return s
    }
    func to_binary(_ n: Int) -> String {
        var sign: String = ""
        var num: Int = n
        if (num < 0) {
            sign = "-"
            num = Int((0 &- num))
        }
        var bits: String = ""
        while (num > 0) {
            bits = ((String(describing: (num % 2)) + bits) as! String)
            num = Int((Int((num &- Int((num % 2)))) / 2))
        }
        if (bits == "") {
            bits = "0"
        }
        let min_width = 8
        while (Int(((bits).count)) < Int((min_width &- Int(((sign).count))))) {
            bits = (("0" + bits) as! String)
        }
        return (sign + bits)
    }
    func show_bits(_ before: Int, _ after: Int) -> String {
        return ((((((String(describing: pad_left_num(before)) + ": ") + String(describing: to_binary(before))) + "\n") + String(describing: pad_left_num(after))) + ": ") + String(describing: to_binary(after)))
    }
    func lshift(_ num: Int, _ k: Int) -> Int {
        var result: Int = num
        var i: Int = 0
        while (i < k) {
            result = Int((result &* 2))
            i = Int((i &+ 1))
        }
        return result
    }
    func rshift(_ num: Int, _ k: Int) -> Int {
        var result: Int = num
        var i: Int = 0
        while (i < k) {
            result = Int((Int((result &- Int((result % 2)))) / 2))
            i = Int((i &+ 1))
        }
        return result
    }
    func swap_odd_even_bits(_ num: Int) -> Int {
        var n: Int = num
        if (n < 0) {
            n = Int((n &+ 4294967296))
        }
        var result: Int = 0
        var i: Int = 0
        while (i < 32) {
            let bit1 = (Int(rshift(n, i)) % 2)
            let bit2 = (Int(rshift(n, (i &+ 1))) % 2)
            result = Int(((result &+ Int(lshift(bit1, (i &+ 1)))) &+ Int(lshift(bit2, i))))
            i = Int((i &+ 2))
        }
        return result
    }
    func main() {
        var nums: [Int] = ([-1, 0, 1, 2, 3, 4, 23, 24] as! [Int])
        var i: Int = 0
        while (i < Int(((nums).count))) {
            let n = (nums[i] as? Int ?? 0)
            print(_p(String(describing: show_bits(n, Int(swap_odd_even_bits(n))))))
            print(_p(""))
            i = Int((i &+ 1))
        }
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
