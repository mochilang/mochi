// Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:38:45 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func repeat_char(_ ch: String, _ times: Int) -> String {
        var res: String = ""
        var i: Int = 0
        while (i < times) {
            res = ((res + ch) as! String)
            i = Int((i &+ 1))
        }
        return res
    }
    func to_binary(_ n: Int) -> String {
        if (n == 0) {
            return "0"
        }
        var res: String = ""
        var v: Int = n
        while (v > 0) {
            res = ((String(describing: (v % 2)) + res) as! String)
            v = Int((v / 2))
        }
        return res
    }
    func pow2(_ exp: Int) -> Int {
        var res: Int = 1
        var i: Int = 0
        while (i < exp) {
            res = Int((res &* 2))
            i = Int((i &+ 1))
        }
        return res
    }
    func twos_complement(_ number: Int) -> String {
        if (number > 0) {
            _ = fatalError("input must be a negative integer")
        }
        if (number == 0) {
            return "0b0"
        }
        let abs_number = Int(((number < 0) ? -number : number))
        let binary_number_length = Int(((String(describing: to_binary(abs_number))).count))
        let complement_value = (Int(pow2(binary_number_length)) &- abs_number)
        let complement_binary = String(describing: to_binary(complement_value))
        let padding = String(describing: repeat_char("0", (binary_number_length &- Int(((complement_binary).count)))))
        let twos_complement_number = (("1" + padding) + complement_binary)
        return ("0b" + twos_complement_number)
    }
    print(_p(String(describing: twos_complement(0))))
    print(_p(String(describing: twos_complement(-1))))
    print(_p(String(describing: twos_complement(-5))))
    print(_p(String(describing: twos_complement(-17))))
    print(_p(String(describing: twos_complement(-207))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
