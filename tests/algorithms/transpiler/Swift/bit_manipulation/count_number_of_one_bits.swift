// Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:39:10 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func bit_and(_ a: Int, _ b: Int) -> Int {
        var ua: Int = a
        var ub: Int = b
        var res: Int = 0
        var bit: Int = 1
        while ((ua > 0) || (ub > 0)) {
            if (((ua % 2) == 1) && ((ub % 2) == 1)) {
                res = Int((res &+ bit))
            }
            ua = Int((ua / 2))
            ub = Int((ub / 2))
            bit = Int((bit &* 2))
        }
        return res
    }
    func count_bits_kernighan(_ n: Int) -> Int {
        if (n < 0) {
            _ = fatalError("the value of input must not be negative")
        }
        var num: Int = n
        var result: Int = 0
        while (num != 0) {
            num = Int(bit_and(num, (num &- 1)))
            result = Int((result &+ 1))
        }
        return result
    }
    func count_bits_modulo(_ n: Int) -> Int {
        if (n < 0) {
            _ = fatalError("the value of input must not be negative")
        }
        var num: Int = n
        var result: Int = 0
        while (num != 0) {
            if ((num % 2) == 1) {
                result = Int((result &+ 1))
            }
            num = Int((num / 2))
        }
        return result
    }
    func main() {
        let numbers: [Int] = ([25, 37, 21, 58, 0, 256] as! [Int])
        var i: Int = 0
        while (i < Int(((numbers).count))) {
            print(_p(String(describing: Int(count_bits_kernighan((numbers[i] as? Int ?? 0))))))
            i = Int((i &+ 1))
        }
        i = 0
        while (i < Int(((numbers).count))) {
            print(_p(String(describing: Int(count_bits_modulo((numbers[i] as? Int ?? 0))))))
            i = Int((i &+ 1))
        }
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
