// Generated by Mochi transpiler v0.10.61 on 2025-08-08 15:53:00 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let ASCII = " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}"
    func build_alphabet() -> [String] {
        var result: [String] = ([] as! [String])
        var i: Int = 0
        while (i < _int(((ASCII).count))) {
            result = (_append(result, (String(Array(ASCII)[i]) as! String)) as! [String])
            i = _int((i &+ 1))
        }
        return result
    }
    func range_list(_ n: Int) -> [Int] {
        var lst: [Int] = ([] as! [Int])
        var i: Int = 0
        while (i < n) {
            lst = (_append(lst, i) as! [Int])
            i = _int((i &+ 1))
        }
        return lst
    }
    func reversed_range_list(_ n: Int) -> [Int] {
        var lst: [Int] = ([] as! [Int])
        var i: Int = (n &- 1)
        while (i >= 0) {
            lst = (_append(lst, i) as! [Int])
            i = _int((i &- 1))
        }
        return lst
    }
    func index_of_char(_ lst: [String], _ ch: String) -> Int {
        var i: Int = 0
        while (i < _int(((lst).count))) {
            if ((lst[i] as! String) == ch) {
                return i
            }
            i = _int((i &+ 1))
        }
        return -1
    }
    func index_of_int(_ lst: [Int], _ value: Int) -> Int {
        var i: Int = 0
        while (i < _int(((lst).count))) {
            if ((lst[i] as? Int ?? 0) == value) {
                return i
            }
            i = _int((i &+ 1))
        }
        return -1
    }
    func enigma_encrypt(_ message: String, _ token: Int) -> String {
        let alphabets: [String] = (build_alphabet() as! [String])
        let n = _int(((alphabets).count))
        var gear_one: [Int] = (range_list(n) as! [Int])
        var gear_two: [Int] = (range_list(n) as! [Int])
        var gear_three: [Int] = (range_list(n) as! [Int])
        let reflector: [Int] = (reversed_range_list(n) as! [Int])
        var gear_one_pos: Int = 0
        var gear_two_pos: Int = 0
        var gear_three_pos: Int = 0
        func rotator() {
            var i: Int = (gear_one[0] as? Int ?? 0)
            gear_one = (Array(gear_one[1..<_int(((gear_one).count))]) as! [Int])
            gear_one = (_append(gear_one, i) as! [Int])
            gear_one_pos = _int((gear_one_pos &+ 1))
            if (((gear_one_pos % n + n) % n) == 0) {
                i = (gear_two[0] as? Int ?? 0)
                gear_two = (Array(gear_two[1..<_int(((gear_two).count))]) as! [Int])
                gear_two = (_append(gear_two, i) as! [Int])
                gear_two_pos = _int((gear_two_pos &+ 1))
                if (((gear_two_pos % n + n) % n) == 0) {
                    i = (gear_three[0] as? Int ?? 0)
                    gear_three = (Array(gear_three[1..<_int(((gear_three).count))]) as! [Int])
                    gear_three = (_append(gear_three, i) as! [Int])
                    gear_three_pos = _int((gear_three_pos &+ 1))
                }
            }
        }
        func engine(_ ch: String) -> String {
            var target: Int = _int(index_of_char((alphabets as! [String]), (ch as! String)))
            target = (gear_one[target] as? Int ?? 0)
            target = (gear_two[target] as? Int ?? 0)
            target = (gear_three[target] as? Int ?? 0)
            target = (reflector[target] as? Int ?? 0)
            target = _int(index_of_int((gear_three as! [Int]), target))
            target = _int(index_of_int((gear_two as! [Int]), target))
            target = _int(index_of_int((gear_one as! [Int]), target))
            _ = rotator()
            return (alphabets[target] as! String)
        }
        var t: Int = 0
        while (t < token) {
            _ = rotator()
            t = _int((t &+ 1))
        }
        var result: String = ""
        var idx: Int = 0
        while (idx < _int(((message).count))) {
            result = ((result + String(describing: engine((String(Array(message)[idx]) as! String)))) as! String)
            idx = _int((idx &+ 1))
        }
        return result
    }
    let message = "HELLO WORLD"
    let token = 123
    let encoded = String(describing: enigma_encrypt((message as! String), token))
    print(_p(encoded))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
