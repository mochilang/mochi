// Generated by Mochi transpiler v0.10.65 on 2025-08-14 16:21:18 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
func _slice<T>(_ xs: [T], _ start: Int, _ end: Int) -> [T] {
    var s = start
    var e = end
    if s < 0 { s = 0 }
    if e > xs.count { e = xs.count }
    if s > e { s = e }
    return Array(xs[s..<e])
}
struct DecodeResult: Codable {
    var data: [Int]
    var ack: Bool
    init() {
        self.data = []
        self.ack = false
    }
    init(data: [Int], ack: Bool) {
        self.data = data
        self.ack = ack
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func index_of(_ s: String, _ ch: String) -> Int {
        var i = 0
        while (i < _int(((s).count))) {
            if ((String(Array(s)[i]) as! String) == ch) {
                return i
            }
            i = _int((i &+ 1))
        }
        return -1
    }
    func ord(_ ch: String) -> Int {
        let upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
        let lower = "abcdefghijklmnopqrstuvwxyz"
        var idx = _int(index_of((upper as! String), (ch as! String)))
        if (idx >= 0) {
            return (65 &+ idx)
        }
        idx = _int(index_of((lower as! String), (ch as! String)))
        if (idx >= 0) {
            return (97 &+ idx)
        }
        return 0
    }
    func chr(_ n: Int) -> String {
        let upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
        let lower = "abcdefghijklmnopqrstuvwxyz"
        if ((n >= 65) && (n < 91)) {
            return String(_slice(Array(upper), (n &- 65), (n &- 64)))
        }
        if ((n >= 97) && (n < 123)) {
            return String(_slice(Array(lower), (n &- 97), (n &- 96)))
        }
        return "?"
    }
    func text_to_bits(_ text: String) -> String {
        var bits = ""
        var i = 0
        while (i < _int(((text).count))) {
            let code = _int(ord((String(Array(text)[i]) as! String)))
            var j = 7
            while (j >= 0) {
                let p = _int(pow2(j))
                if (_int(((_int((code / p)) % 2 + 2) % 2)) == 1) {
                    bits = ((bits + "1") as! String)
                } else {
                    bits = ((bits + "0") as! String)
                }
                j = _int((j &- 1))
            }
            i = _int((i &+ 1))
        }
        return bits
    }
    func text_from_bits(_ bits: String) -> String {
        var text = ""
        var i = 0
        while (i < _int(((bits).count))) {
            var code = 0
            var j = 0
            while ((j < 8) && ((i &+ j) < _int(((bits).count)))) {
                code = _int((code &* 2))
                if ((String(Array(bits)[(i &+ j)]) as! String) == "1") {
                    code = _int((code &+ 1))
                }
                j = _int((j &+ 1))
            }
            text = ((text + String(describing: chr(code))) as! String)
            i = _int((i &+ 8))
        }
        return text
    }
    func bool_to_string(_ b: Bool) -> String {
        if b {
            return "True"
        }
        return "False"
    }
    func string_to_bitlist(_ s: String) -> [Int] {
        var res: [Int] = ([] as! [Int])
        var i = 0
        while (i < _int(((s).count))) {
            if ((String(Array(s)[i]) as! String) == "1") {
                res = (_append(res, 1) as! [Int])
            } else {
                res = (_append(res, 0) as! [Int])
            }
            i = _int((i &+ 1))
        }
        return res
    }
    func bitlist_to_string(_ bits: [Int]) -> String {
        var s = ""
        var i = 0
        while (i < _int(((bits).count))) {
            if ((_idx(bits, i) as? Int ?? 0) == 1) {
                s = ((s + "1") as! String)
            } else {
                s = ((s + "0") as! String)
            }
            i = _int((i &+ 1))
        }
        return s
    }
    func is_power_of_two(_ x: Int) -> Bool {
        if (x < 1) {
            return false
        }
        var p = 1
        while (p < x) {
            p = _int((p &* 2))
        }
        return (p == x)
    }
    func list_eq(_ a: [Int], _ b: [Int]) -> Bool {
        if (_int(((a).count)) != _int(((b).count))) {
            return false
        }
        var i = 0
        while (i < _int(((a).count))) {
            if ((_idx(a, i) as? Int ?? 0) != (_idx(b, i) as? Int ?? 0)) {
                return false
            }
            i = _int((i &+ 1))
        }
        return true
    }
    func pow2(_ e: Int) -> Int {
        var res = 1
        var i = 0
        while (i < e) {
            res = _int((res &* 2))
            i = _int((i &+ 1))
        }
        return res
    }
    func has_bit(_ n: Int, _ b: Int) -> Bool {
        let p = _int(pow2(b))
        if (_int(((_int((n / p)) % 2 + 2) % 2)) == 1) {
            return true
        }
        return false
    }
    func hamming_encode(_ r: Int, _ data_bits: [Int]) -> [Int] {
        let total = (r &+ _int(((data_bits).count)))
        var data_ord: [Int] = ([] as! [Int])
        var cont_data = 0
        var x = 1
        while (x <= total) {
            if is_power_of_two(x) {
                data_ord = (_append(data_ord, -1) as! [Int])
            } else {
                data_ord = (_append(data_ord, (_idx(data_bits, cont_data) as? Int ?? 0)) as! [Int])
                cont_data = _int((cont_data &+ 1))
            }
            x = _int((x &+ 1))
        }
        var parity: [Int] = ([] as! [Int])
        var bp = 0
        while (bp < r) {
            var cont_bo = 0
            var j = 0
            while (j < _int(((data_ord).count))) {
                let bit = (_idx(data_ord, j) as? Int ?? 0)
                if (bit >= 0) {
                    let pos = (j &+ 1)
                    if (has_bit(pos, bp) && (bit == 1)) {
                        cont_bo = _int((cont_bo &+ 1))
                    }
                }
                j = _int((j &+ 1))
            }
            parity = (_append(parity, ((cont_bo % 2 + 2) % 2)) as! [Int])
            bp = _int((bp &+ 1))
        }
        var result: [Int] = ([] as! [Int])
        var cont_bp = 0
        var i = 0
        while (i < _int(((data_ord).count))) {
            if ((_idx(data_ord, i) as? Int ?? 0) < 0) {
                result = (_append(result, (_idx(parity, cont_bp) as? Int ?? 0)) as! [Int])
                cont_bp = _int((cont_bp &+ 1))
            } else {
                result = (_append(result, (_idx(data_ord, i) as? Int ?? 0)) as! [Int])
            }
            i = _int((i &+ 1))
        }
        return result
    }
    func hamming_decode(_ r: Int, _ code: [Int]) -> DecodeResult {
        var data_output: [Int] = ([] as! [Int])
        var parity_received: [Int] = ([] as! [Int])
        var i = 1
        var idx = 0
        while (i <= _int(((code).count))) {
            if is_power_of_two(i) {
                parity_received = (_append(parity_received, (_idx(code, idx) as? Int ?? 0)) as! [Int])
            } else {
                data_output = (_append(data_output, (_idx(code, idx) as? Int ?? 0)) as! [Int])
            }
            idx = _int((idx &+ 1))
            i = _int((i &+ 1))
        }
        let recomputed: [Int] = (hamming_encode(r, (data_output as! [Int])) as! [Int])
        var parity_calc: [Int] = ([] as! [Int])
        var j = 0
        while (j < _int(((recomputed).count))) {
            if is_power_of_two((j &+ 1)) {
                parity_calc = (_append(parity_calc, (_idx(recomputed, j) as? Int ?? 0)) as! [Int])
            }
            j = _int((j &+ 1))
        }
        let ack = list_eq((parity_received as! [Int]), (parity_calc as! [Int]))
        return DecodeResult(data: (data_output as! [Int]), ack: Bool(ack))
    }
    func main() {
        let sizePari = 4
        let be = 2
        let text = "Message01"
        let binary = String(describing: text_to_bits((text as! String)))
        print(_p((("Text input in binary is '" + binary) + "'")))
        let data_bits: [Int] = (string_to_bitlist((binary as! String)) as! [Int])
        let encoded: [Int] = (hamming_encode(sizePari, (data_bits as! [Int])) as! [Int])
        print(_p(("Data converted ----------> " + String(describing: bitlist_to_string((encoded as! [Int]))))))
        let decoded = hamming_decode(sizePari, (encoded as! [Int]))
        print(_p(((("Data receive ------------> " + String(describing: bitlist_to_string((decoded.data as! [Int])))) + " -- Data integrity: ") + String(describing: bool_to_string((decoded.ack as! Bool))))))
        var corrupted: [Int] = ([] as! [Int])
        var i = 0
        while (i < _int(((encoded).count))) {
            corrupted = (_append(corrupted, (_idx(encoded, i) as? Int ?? 0)) as! [Int])
            i = _int((i &+ 1))
        }
        let pos = (be &- 1)
        if ((_idx(corrupted, pos) as? Int ?? 0) == 0) {
            corrupted = _set(corrupted, pos, 1)
        } else {
            corrupted = _set(corrupted, pos, 0)
        }
        let decoded_err = hamming_decode(sizePari, (corrupted as! [Int]))
        print(_p(((("Data receive (error) ----> " + String(describing: bitlist_to_string((decoded_err.data as! [Int])))) + " -- Data integrity: ") + String(describing: bool_to_string((decoded_err.ack as! Bool))))))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
