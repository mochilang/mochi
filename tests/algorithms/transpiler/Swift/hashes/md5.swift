// Generated by Mochi transpiler v0.10.66 on 2025-08-15 15:26:32 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _idx<K: Hashable, V>(_ m: [K: V], _ k: K) -> V? {
    return m[k]
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _slice<T>(_ xs: [T], _ start: Int, _ end: Int) -> [T] {
    var s = start
    var e = end
    if s < 0 { s = 0 }
    if e > xs.count { e = xs.count }
    if s > e { s = e }
    return Array(xs[s..<e])
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let MOD = 4294967296
    let ASCII = " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"
    func ord(_ ch: String) -> Int {
        var i = 0
        while (i < _int(((ASCII).count))) {
            if (String(_slice(Array(ASCII), i, (i &+ 1))) == ch) {
                return (32 &+ i)
            }
            i = _int((i &+ 1))
        }
        return 0
    }
    func to_little_endian(_ s: String) -> String {
        if (_int(((s).count)) != 32) {
            _ = fatalError("Input must be of length 32")
        }
        return (_p((_p((_p(String(_slice(Array(s), 24, 32))) + _p(String(_slice(Array(s), 16, 24))))) + _p(String(_slice(Array(s), 8, 16))))) + _p(String(_slice(Array(s), 0, 8))))
    }
    func int_to_bits(_ n: Int, _ width: Int) -> String {
        var bits = ""
        var num = n
        while (num > 0) {
            bits = ((_p(_p(((num % 2 + 2) % 2))) + _p(bits)) as! String)
            num = _int((num / 2))
        }
        while (_int(((bits).count)) < width) {
            bits = ((_p("0") + _p(bits)) as! String)
        }
        if (_int(((bits).count)) > width) {
            bits = (String(_slice(Array(bits), (_int(((bits).count)) &- width), _int(((bits).count)))) as! String)
        }
        return bits
    }
    func bits_to_int(_ bits: String) -> Int {
        var num = 0
        var i = 0
        while (i < _int(((bits).count))) {
            if (String(_slice(Array(bits), i, (i &+ 1))) == "1") {
                num = _int(((num &* 2) &+ 1))
            } else {
                num = _int((num &* 2))
            }
            i = _int((i &+ 1))
        }
        return num
    }
    func to_hex(_ n: Int) -> String {
        let digits = "0123456789abcdef"
        if (n == 0) {
            return "0"
        }
        var num = n
        var s = ""
        while (num > 0) {
            let d = ((num % 16 + 16) % 16)
            s = ((_p(String(_slice(Array(digits), d, (d &+ 1)))) + _p(s)) as! String)
            num = _int((num / 16))
        }
        return s
    }
    func reformat_hex(_ i: Int) -> String {
        if (i < 0) {
            _ = fatalError("Input must be non-negative")
        }
        var hex = String(describing: to_hex(i))
        while (_int(((hex).count)) < 8) {
            hex = ((_p("0") + _p(hex)) as! String)
        }
        if (_int(((hex).count)) > 8) {
            hex = (String(_slice(Array(hex), (_int(((hex).count)) &- 8), _int(((hex).count)))) as! String)
        }
        var le = ""
        var j = (_int(((hex).count)) &- 2)
        while (j >= 0) {
            le = ((_p(le) + _p(String(_slice(Array(hex), j, (j &+ 2))))) as! String)
            j = _int((j &- 2))
        }
        return le
    }
    func preprocess(_ message: String) -> String {
        var bit_string = ""
        var i = 0
        while (i < _int(((message).count))) {
            let ch = String(_slice(Array(message), i, (i &+ 1)))
            bit_string = ((_p(bit_string) + _p(String(describing: int_to_bits(_int(ord((ch as! String))), 8)))) as! String)
            i = _int((i &+ 1))
        }
        let start_len = String(describing: int_to_bits(_int(((bit_string).count)), 64))
        bit_string = ((_p(bit_string) + _p("1")) as! String)
        while (((_int(((bit_string).count)) % 512 + 512) % 512) != 448) {
            bit_string = ((_p(bit_string) + _p("0")) as! String)
        }
        bit_string = ((_p((_p(bit_string) + _p(String(describing: to_little_endian((String(_slice(Array(start_len), 32, 64)) as! String)))))) + _p(String(describing: to_little_endian((String(_slice(Array(start_len), 0, 32)) as! String))))) as! String)
        return bit_string
    }
    func get_block_words(_ bit_string: String) -> [[Int]] {
        if (((_int(((bit_string).count)) % 512 + 512) % 512) != 0) {
            _ = fatalError("Input must have length that's a multiple of 512")
        }
        var blocks: [[Int]] = ([] as! [[Int]])
        var pos = 0
        while (pos < _int(((bit_string).count))) {
            var block: [Int] = ([] as! [Int])
            var i = 0
            while (i < 512) {
                let part = String(_slice(Array(bit_string), (pos &+ i), ((pos &+ i) &+ 32)))
                let word = _int(bits_to_int(String(describing: to_little_endian((part as! String)))))
                block = (_append(block, word) as! [Int])
                i = _int((i &+ 32))
            }
            blocks = (_append(blocks, block) as! [[Int]])
            pos = _int((pos &+ 512))
        }
        return blocks
    }
    func bit_and(_ a: Int, _ b: Int) -> Int {
        var x = a
        var y = b
        var res = 0
        var bit = 1
        var i = 0
        while (i < 32) {
            if ((((x % 2 + 2) % 2) == 1) && (((y % 2 + 2) % 2) == 1)) {
                res = _int((res &+ bit))
            }
            x = _int((x / 2))
            y = _int((y / 2))
            bit = _int((bit &* 2))
            i = _int((i &+ 1))
        }
        return res
    }
    func bit_or(_ a: Int, _ b: Int) -> Int {
        var x = a
        var y = b
        var res = 0
        var bit = 1
        var i = 0
        while (i < 32) {
            let abit = ((x % 2 + 2) % 2)
            let bbit = ((y % 2 + 2) % 2)
            if ((abit == 1) || (bbit == 1)) {
                res = _int((res &+ bit))
            }
            x = _int((x / 2))
            y = _int((y / 2))
            bit = _int((bit &* 2))
            i = _int((i &+ 1))
        }
        return res
    }
    func bit_xor(_ a: Int, _ b: Int) -> Int {
        var x = a
        var y = b
        var res = 0
        var bit = 1
        var i = 0
        while (i < 32) {
            let abit = ((x % 2 + 2) % 2)
            let bbit = ((y % 2 + 2) % 2)
            if (((_int((abit &+ bbit)) % 2 + 2) % 2) == 1) {
                res = _int((res &+ bit))
            }
            x = _int((x / 2))
            y = _int((y / 2))
            bit = _int((bit &* 2))
            i = _int((i &+ 1))
        }
        return res
    }
    func not_32(_ i: Int) -> Int {
        if (i < 0) {
            _ = fatalError("Input must be non-negative")
        }
        return (4294967295 &- i)
    }
    func sum_32(_ a: Int, _ b: Int) -> Int {
        return ((_int((a &+ b)) % MOD + MOD) % MOD)
    }
    func lshift(_ num: Int, _ k: Int) -> Int {
        var result = ((num % MOD + MOD) % MOD)
        var i = 0
        while (i < k) {
            result = _int(((_int((result &* 2)) % MOD + MOD) % MOD))
            i = _int((i &+ 1))
        }
        return result
    }
    func rshift(_ num: Int, _ k: Int) -> Int {
        var result = num
        var i = 0
        while (i < k) {
            result = _int((result / 2))
            i = _int((i &+ 1))
        }
        return result
    }
    func left_rotate_32(_ i: Int, _ shift: Int) -> Int {
        if (i < 0) {
            _ = fatalError("Input must be non-negative")
        }
        if (shift < 0) {
            _ = fatalError("Shift must be non-negative")
        }
        let left = _int(lshift(i, shift))
        let right = _int(rshift(i, (32 &- shift)))
        return ((_int((left &+ right)) % MOD + MOD) % MOD)
    }
    func md5_me(_ message: String) -> String {
        let bit_string = String(describing: preprocess((message as! String)))
        let added_consts: [Int] = ({
            var _arr: [Int] = []
            _arr = _append(_arr, 3614090360)
            _arr = _append(_arr, 3905402710)
            _arr = _append(_arr, 606105819)
            _arr = _append(_arr, 3250441966)
            _arr = _append(_arr, 4118548399)
            _arr = _append(_arr, 1200080426)
            _arr = _append(_arr, 2821735955)
            _arr = _append(_arr, 4249261313)
            _arr = _append(_arr, 1770035416)
            _arr = _append(_arr, 2336552879)
            _arr = _append(_arr, 4294925233)
            _arr = _append(_arr, 2304563134)
            _arr = _append(_arr, 1804603682)
            _arr = _append(_arr, 4254626195)
            _arr = _append(_arr, 2792965006)
            _arr = _append(_arr, 1236535329)
            _arr = _append(_arr, 4129170786)
            _arr = _append(_arr, 3225465664)
            _arr = _append(_arr, 643717713)
            _arr = _append(_arr, 3921069994)
            _arr = _append(_arr, 3593408605)
            _arr = _append(_arr, 38016083)
            _arr = _append(_arr, 3634488961)
            _arr = _append(_arr, 3889429448)
            _arr = _append(_arr, 568446438)
            _arr = _append(_arr, 3275163606)
            _arr = _append(_arr, 4107603335)
            _arr = _append(_arr, 1163531501)
            _arr = _append(_arr, 2850285829)
            _arr = _append(_arr, 4243563512)
            _arr = _append(_arr, 1735328473)
            _arr = _append(_arr, 2368359562)
            _arr = _append(_arr, 4294588738)
            _arr = _append(_arr, 2272392833)
            _arr = _append(_arr, 1839030562)
            _arr = _append(_arr, 4259657740)
            _arr = _append(_arr, 2763975236)
            _arr = _append(_arr, 1272893353)
            _arr = _append(_arr, 4139469664)
            _arr = _append(_arr, 3200236656)
            _arr = _append(_arr, 681279174)
            _arr = _append(_arr, 3936430074)
            _arr = _append(_arr, 3572445317)
            _arr = _append(_arr, 76029189)
            _arr = _append(_arr, 3654602809)
            _arr = _append(_arr, 3873151461)
            _arr = _append(_arr, 530742520)
            _arr = _append(_arr, 3299628645)
            _arr = _append(_arr, 4096336452)
            _arr = _append(_arr, 1126891415)
            _arr = _append(_arr, 2878612391)
            _arr = _append(_arr, 4237533241)
            _arr = _append(_arr, 1700485571)
            _arr = _append(_arr, 2399980690)
            _arr = _append(_arr, 4293915773)
            _arr = _append(_arr, 2240044497)
            _arr = _append(_arr, 1873313359)
            _arr = _append(_arr, 4264355552)
            _arr = _append(_arr, 2734768916)
            _arr = _append(_arr, 1309151649)
            _arr = _append(_arr, 4149444226)
            _arr = _append(_arr, 3174756917)
            _arr = _append(_arr, 718787259)
            _arr = _append(_arr, 3951481745)
            return _arr
        }() as! [Int])
        let shift_amounts: [Int] = ({
            var _arr: [Int] = []
            _arr = _append(_arr, 7)
            _arr = _append(_arr, 12)
            _arr = _append(_arr, 17)
            _arr = _append(_arr, 22)
            _arr = _append(_arr, 7)
            _arr = _append(_arr, 12)
            _arr = _append(_arr, 17)
            _arr = _append(_arr, 22)
            _arr = _append(_arr, 7)
            _arr = _append(_arr, 12)
            _arr = _append(_arr, 17)
            _arr = _append(_arr, 22)
            _arr = _append(_arr, 7)
            _arr = _append(_arr, 12)
            _arr = _append(_arr, 17)
            _arr = _append(_arr, 22)
            _arr = _append(_arr, 5)
            _arr = _append(_arr, 9)
            _arr = _append(_arr, 14)
            _arr = _append(_arr, 20)
            _arr = _append(_arr, 5)
            _arr = _append(_arr, 9)
            _arr = _append(_arr, 14)
            _arr = _append(_arr, 20)
            _arr = _append(_arr, 5)
            _arr = _append(_arr, 9)
            _arr = _append(_arr, 14)
            _arr = _append(_arr, 20)
            _arr = _append(_arr, 5)
            _arr = _append(_arr, 9)
            _arr = _append(_arr, 14)
            _arr = _append(_arr, 20)
            _arr = _append(_arr, 4)
            _arr = _append(_arr, 11)
            _arr = _append(_arr, 16)
            _arr = _append(_arr, 23)
            _arr = _append(_arr, 4)
            _arr = _append(_arr, 11)
            _arr = _append(_arr, 16)
            _arr = _append(_arr, 23)
            _arr = _append(_arr, 4)
            _arr = _append(_arr, 11)
            _arr = _append(_arr, 16)
            _arr = _append(_arr, 23)
            _arr = _append(_arr, 4)
            _arr = _append(_arr, 11)
            _arr = _append(_arr, 16)
            _arr = _append(_arr, 23)
            _arr = _append(_arr, 6)
            _arr = _append(_arr, 10)
            _arr = _append(_arr, 15)
            _arr = _append(_arr, 21)
            _arr = _append(_arr, 6)
            _arr = _append(_arr, 10)
            _arr = _append(_arr, 15)
            _arr = _append(_arr, 21)
            _arr = _append(_arr, 6)
            _arr = _append(_arr, 10)
            _arr = _append(_arr, 15)
            _arr = _append(_arr, 21)
            _arr = _append(_arr, 6)
            _arr = _append(_arr, 10)
            _arr = _append(_arr, 15)
            _arr = _append(_arr, 21)
            return _arr
        }() as! [Int])
        var a0 = 1732584193
        var b0 = 4023233417
        var c0 = 2562383102
        var d0 = 271733878
        let blocks: [[Int]] = (get_block_words((bit_string as! String)) as! [[Int]])
        var bi = 0
        while (bi < _int(((blocks).count))) {
            let block: [Int] = (_idx(blocks, bi) as! [Int])
            var a = a0
            var b = b0
            var c = c0
            var d = d0
            var i = 0
            while (i < 64) {
                var f = 0
                var g = 0
                if (i <= 15) {
                    f = _int(bit_xor(d, _int(bit_and(b, _int(bit_xor(c, d))))))
                    g = Int(i)
                } else if (i <= 31) {
                    f = _int(bit_xor(c, _int(bit_and(d, _int(bit_xor(b, c))))))
                    g = _int(((_int(((5 &* i) &+ 1)) % 16 + 16) % 16))
                } else if (i <= 47) {
                    f = _int(bit_xor(_int(bit_xor(b, c)), d))
                    g = _int(((_int(((3 &* i) &+ 5)) % 16 + 16) % 16))
                } else {
                    f = _int(bit_xor(c, _int(bit_or(b, _int(not_32(d))))))
                    g = _int(((_int((7 &* i)) % 16 + 16) % 16))
                }
                
                
                f = _int(sum_32(f, a))
                f = _int(sum_32(f, (_idx(added_consts, i) as? Int ?? 0)))
                f = _int(sum_32(f, (_idx(block, g) as? Int ?? 0)))
                let rotated = _int(left_rotate_32(f, (_idx(shift_amounts, i) as? Int ?? 0)))
                let new_b = _int(sum_32(b, rotated))
                a = Int(d)
                d = Int(c)
                c = Int(b)
                b = Int(new_b)
                i = _int((i &+ 1))
            }
            a0 = _int(sum_32(a0, a))
            b0 = _int(sum_32(b0, b))
            c0 = _int(sum_32(c0, c))
            d0 = _int(sum_32(d0, d))
            bi = _int((bi &+ 1))
        }
        let digest = (_p((_p((_p(String(describing: reformat_hex(a0))) + _p(String(describing: reformat_hex(b0))))) + _p(String(describing: reformat_hex(c0))))) + _p(String(describing: reformat_hex(d0))))
        return digest
    }
    do {
        assert((String(describing: md5_me("")) == "d41d8cd98f00b204e9800998ecf8427e"))
    }
    do {
        assert((String(describing: md5_me("The quick brown fox jumps over the lazy dog")) == "9e107d9d372bb6826bd81d3542a419d6"))
    }
    do {
        assert((String(describing: md5_me("The quick brown fox jumps over the lazy dog.")) == "e4d909c290d0fb1ca068ffaddf22cbd0"))
    }
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
