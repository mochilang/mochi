// Generated by Mochi transpiler v0.10.66 on 2025-08-15 15:26:19 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _slice<T>(_ xs: [T], _ start: Int, _ end: Int) -> [T] {
    var s = start
    var e = end
    if s < 0 { s = 0 }
    if e > xs.count { e = xs.count }
    if s > e { s = e }
    return Array(xs[s..<e])
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let ascii = " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"
    func ord(_ ch: String) -> Int {
        var i = 0
        while (i < _int(((ascii).count))) {
            if (String(_slice(Array(ascii), i, (i &+ 1))) == ch) {
                return (32 &+ i)
            }
            i = _int((i &+ 1))
        }
        return 0
    }
    func bit_and(_ a: Int, _ b: Int) -> Int {
        var ua = a
        var ub = b
        var res = 0
        var bit = 1
        while ((ua > 0) || (ub > 0)) {
            if ((((ua % 2 + 2) % 2) == 1) && (((ub % 2 + 2) % 2) == 1)) {
                res = _int((res &+ bit))
            }
            ua = _int(_int((ua / 2)))
            ub = _int(_int((ub / 2)))
            bit = _int((bit &* 2))
        }
        return res
    }
    func bit_xor(_ a: Int, _ b: Int) -> Int {
        var ua = a
        var ub = b
        var res = 0
        var bit = 1
        while ((ua > 0) || (ub > 0)) {
            let abit = ((ua % 2 + 2) % 2)
            let bbit = ((ub % 2 + 2) % 2)
            if (abit != bbit) {
                res = _int((res &+ bit))
            }
            ua = _int(_int((ua / 2)))
            ub = _int(_int((ub / 2)))
            bit = _int((bit &* 2))
        }
        return res
    }
    func bit_not32(_ x: Int) -> Int {
        var ux = x
        var res = 0
        var bit = 1
        var count = 0
        while (count < 32) {
            if (((ux % 2 + 2) % 2) == 0) {
                res = _int((res &+ bit))
            }
            ux = _int(_int((ux / 2)))
            bit = _int((bit &* 2))
            count = _int((count &+ 1))
        }
        return res
    }
    func elf_hash(_ data: String) -> Int {
        var hash_ = 0
        var i = 0
        while (i < _int(((data).count))) {
            let c = _int(ord((String(_slice(Array(data), i, (i &+ 1))) as! String)))
            hash_ = _int(((hash_ &* 16) &+ c))
            let x = _int(bit_and(hash_, 4026531840))
            if (x != 0) {
                hash_ = _int(bit_xor(hash_, _int((x / 16777216))))
            }
            hash_ = _int(bit_and(hash_, _int(bit_not32(x))))
            i = _int((i &+ 1))
        }
        return hash_
    }
    print(_p(_p(_int(elf_hash("lorem ipsum")))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
