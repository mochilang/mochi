// Generated by Mochi transpiler v0.10.65 on 2025-08-14 16:21:34 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
func _slice<T>(_ xs: [T], _ start: Int, _ end: Int) -> [T] {
    var s = start
    var e = end
    if s < 0 { s = 0 }
    if e > xs.count { e = xs.count }
    if s > e { s = e }
    return Array(xs[s..<e])
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let MOD = 4294967296
    let ASCII = " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"
    func ord(_ ch: String) -> Int {
        var i = 0
        while (i < _int(((ASCII).count))) {
            if (String(_slice(Array(ASCII), i, (i &+ 1))) == ch) {
                return (32 &+ i)
            }
            i = _int((i &+ 1))
        }
        return 0
    }
    func pow2(_ n: Int) -> Int {
        var res = 1
        var i = 0
        while (i < n) {
            res = _int((res &* 2))
            i = _int((i &+ 1))
        }
        return res
    }
    func bit_and(_ a: Int, _ b: Int) -> Int {
        var x = a
        var y = b
        var res = 0
        var bit = 1
        var i = 0
        while (i < 32) {
            if ((((x % 2 + 2) % 2) == 1) && (((y % 2 + 2) % 2) == 1)) {
                res = _int((res &+ bit))
            }
            x = _int((x / 2))
            y = _int((y / 2))
            bit = _int((bit &* 2))
            i = _int((i &+ 1))
        }
        return res
    }
    func bit_or(_ a: Int, _ b: Int) -> Int {
        var x = a
        var y = b
        var res = 0
        var bit = 1
        var i = 0
        while (i < 32) {
            let abit = ((x % 2 + 2) % 2)
            let bbit = ((y % 2 + 2) % 2)
            if ((abit == 1) || (bbit == 1)) {
                res = _int((res &+ bit))
            }
            x = _int((x / 2))
            y = _int((y / 2))
            bit = _int((bit &* 2))
            i = _int((i &+ 1))
        }
        return res
    }
    func bit_xor(_ a: Int, _ b: Int) -> Int {
        var x = a
        var y = b
        var res = 0
        var bit = 1
        var i = 0
        while (i < 32) {
            let abit = ((x % 2 + 2) % 2)
            let bbit = ((y % 2 + 2) % 2)
            if (((abit == 1) && (bbit == 0)) || ((abit == 0) && (bbit == 1))) {
                res = _int((res &+ bit))
            }
            x = _int((x / 2))
            y = _int((y / 2))
            bit = _int((bit &* 2))
            i = _int((i &+ 1))
        }
        return res
    }
    func bit_not(_ a: Int) -> Int {
        return (_int((MOD &- 1)) &- a)
    }
    func rotate_left(_ n: Int, _ b: Int) -> Int {
        let left = ((_int((n &* _int(pow2(b)))) % MOD + MOD) % MOD)
        let right = (n / _int(pow2((32 &- b))))
        return ((_int((left &+ right)) % MOD + MOD) % MOD)
    }
    func to_hex32(_ n: Int) -> String {
        let digits = "0123456789abcdef"
        var num = n
        var s = ""
        if (num == 0) {
            s = "0"
        }
        while (num > 0) {
            let d = ((num % 16 + 16) % 16)
            s = ((String(_slice(Array(digits), d, (d &+ 1))) + s) as! String)
            num = _int((num / 16))
        }
        while (_int(((s).count)) < 8) {
            s = (("0" + s) as! String)
        }
        if (_int(((s).count)) > 8) {
            s = (String(_slice(Array(s), (_int(((s).count)) &- 8), _int(((s).count)))) as! String)
        }
        return s
    }
    func sha1(_ message: String) -> String {
        var bytes: [Int] = ([] as! [Int])
        var i = 0
        while (i < _int(((message).count))) {
            bytes = (_append(bytes, _int(ord((String(_slice(Array(message), i, (i &+ 1))) as! String)))) as! [Int])
            i = _int((i &+ 1))
        }
        bytes = (_append(bytes, 128) as! [Int])
        while (((_int((_int(((bytes).count)) &+ 8)) % 64 + 64) % 64) != 0) {
            bytes = (_append(bytes, 0) as! [Int])
        }
        let bit_len = (_int(((message).count)) &* 8)
        var len_bytes: [Int] = ({
            var _arr: [Int] = []
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 0)
            return _arr
        }() as! [Int])
        var bl = bit_len
        var k = 7
        while (k >= 0) {
            len_bytes = _set(len_bytes, k, _int(((bl % 256 + 256) % 256)))
            bl = _int((bl / 256))
            k = _int((k &- 1))
        }
        var j = 0
        while (j < 8) {
            bytes = (_append(bytes, (_idx(len_bytes, j) as? Int ?? 0)) as! [Int])
            j = _int((j &+ 1))
        }
        var blocks: [[Int]] = ([] as! [[Int]])
        var pos = 0
        while (pos < _int(((bytes).count))) {
            var block: [Int] = ([] as! [Int])
            var j2 = 0
            while (j2 < 64) {
                block = (_append(block, (_idx(bytes, (pos &+ j2)) as? Int ?? 0)) as! [Int])
                j2 = _int((j2 &+ 1))
            }
            blocks = (_append(blocks, block) as! [[Int]])
            pos = _int((pos &+ 64))
        }
        var h0 = 1732584193
        var h1 = 4023233417
        var h2 = 2562383102
        var h3 = 271733878
        var h4 = 3285377520
        var bindex = 0
        while (bindex < _int(((blocks).count))) {
            let block: [Int] = (_idx(blocks, bindex) as! [Int])
            var w: [Int] = ([] as! [Int])
            var t = 0
            while (t < 16) {
                let j3 = (t &* 4)
                let word = _int(((_int(((_int((((_idx(block, j3) as? Int ?? 0) &* 256) &+ (_idx(block, (j3 &+ 1)) as? Int ?? 0))) &* 256) &+ (_idx(block, (j3 &+ 2)) as? Int ?? 0))) &* 256) &+ (_idx(block, (j3 &+ 3)) as? Int ?? 0)))
                w = (_append(w, word) as! [Int])
                t = _int((t &+ 1))
            }
            while (t < 80) {
                let tmp = _int(bit_xor(_int(bit_xor(_int(bit_xor((_idx(w, (t &- 3)) as? Int ?? 0), (_idx(w, (t &- 8)) as? Int ?? 0))), (_idx(w, (t &- 14)) as? Int ?? 0))), (_idx(w, (t &- 16)) as? Int ?? 0)))
                w = (_append(w, _int(rotate_left(tmp, 1))) as! [Int])
                t = _int((t &+ 1))
            }
            var a = h0
            var b = h1
            var c = h2
            var d = h3
            var e = h4
            var i2 = 0
            while (i2 < 80) {
                var f = 0
                var kconst = 0
                if (i2 < 20) {
                    f = _int(bit_or(_int(bit_and(b, c)), _int(bit_and(_int(bit_not(b)), d))))
                    kconst = 1518500249
                } else if (i2 < 40) {
                    f = _int(bit_xor(_int(bit_xor(b, c)), d))
                    kconst = 1859775393
                } else if (i2 < 60) {
                    f = _int(bit_or(_int(bit_or(_int(bit_and(b, c)), _int(bit_and(b, d)))), _int(bit_and(c, d))))
                    kconst = 2400959708
                } else {
                    f = _int(bit_xor(_int(bit_xor(b, c)), d))
                    kconst = 3395469782
                }
                
                
                let temp = ((_int(((((_int(rotate_left(a, 5)) &+ f) &+ e) &+ kconst) &+ (_idx(w, i2) as? Int ?? 0))) % MOD + MOD) % MOD)
                e = Int(d)
                d = Int(c)
                c = _int(rotate_left(b, 30))
                b = Int(a)
                a = Int(temp)
                i2 = _int((i2 &+ 1))
            }
            h0 = _int(((_int((h0 &+ a)) % MOD + MOD) % MOD))
            h1 = _int(((_int((h1 &+ b)) % MOD + MOD) % MOD))
            h2 = _int(((_int((h2 &+ c)) % MOD + MOD) % MOD))
            h3 = _int(((_int((h3 &+ d)) % MOD + MOD) % MOD))
            h4 = _int(((_int((h4 &+ e)) % MOD + MOD) % MOD))
            bindex = _int((bindex &+ 1))
        }
        return ((((String(describing: to_hex32(h0)) + String(describing: to_hex32(h1))) + String(describing: to_hex32(h2))) + String(describing: to_hex32(h3))) + String(describing: to_hex32(h4)))
    }
    func main() {
        print(_p(String(describing: sha1("Test String"))))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
