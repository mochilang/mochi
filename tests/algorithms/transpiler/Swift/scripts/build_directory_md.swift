// Generated by Mochi transpiler v0.10.63 on 2025-08-11 16:25:32 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _repeat(_ s: String, _ n: Int) -> String {
    if n <= 0 { return "" }
    return String(repeating: s, count: n)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
func _split(_ s: String, _ sep: String) -> [String] {
    let d = sep.isEmpty ? " " : sep
    return s.components(separatedBy: d)
}
func _slice<T>(_ xs: [T], _ start: Int, _ end: Int) -> [T] {
    var s = start
    var e = end
    if s < 0 { s = 0 }
    if e > xs.count { e = xs.count }
    if s > e { s = e }
    return Array(xs[s..<e])
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func split(_ s: String, _ sep: String) -> [String] {
        var parts: [String] = ([] as! [String])
        var cur = ""
        var i = 0
        while (i < _int(((s).count))) {
            if (((_int(((sep).count)) > 0) && ((i &+ _int(((sep).count))) <= _int(((s).count)))) && (String(describing: String(Array(String(describing: (s as! String)))[i..<(i &+ _int(((sep).count)))])) == sep)) {
                parts = (_append(parts, cur) as! [String])
                cur = ""
                i = _int((i &+ _int(((sep).count))))
            } else {
                cur = ((cur + String(describing: String(Array(String(describing: (s as! String)))[i..<(i &+ 1)]))) as! String)
                i = _int((i &+ 1))
            }
        }
        parts = (_append(parts, cur) as! [String])
        return parts
    }
    func join(_ xs: [String], _ sep: String) -> String {
        var res = ""
        var i = 0
        while (i < _int(((xs).count))) {
            if (i > 0) {
                res = ((res + sep) as! String)
            }
            res = ((res + (_idx(xs, i) as! String)) as! String)
            i = _int((i &+ 1))
        }
        return res
    }
    func `repeat`(_ s: String, _ n: Int) -> String {
        var out = ""
        var i = 0
        while (i < n) {
            out = ((out + s) as! String)
            i = _int((i &+ 1))
        }
        return out
    }
    func replace_char(_ s: String, _ old: String, _ new: String) -> String {
        var out = ""
        var i = 0
        while (i < _int(((s).count))) {
            let c = String(describing: String(Array(String(describing: (s as! String)))[i..<(i &+ 1)]))
            if (c == old) {
                out = ((out + new) as! String)
            } else {
                out = ((out + c) as! String)
            }
            i = _int((i &+ 1))
        }
        return out
    }
    func contains(_ s: String, _ sub: String) -> Bool {
        if (_int(((sub).count)) == 0) {
            return true
        }
        var i = 0
        while ((i &+ _int(((sub).count))) <= _int(((s).count))) {
            if (String(describing: String(Array(String(describing: (s as! String)))[i..<(i &+ _int(((sub).count)))])) == sub) {
                return true
            }
            i = _int((i &+ 1))
        }
        return false
    }
    func file_extension(_ name: String) -> String {
        var i = (_int(((name).count)) &- 1)
        while (i >= 0) {
            if (String(describing: String(Array(String(describing: (name as! String)))[i..<(i &+ 1)])) == ".") {
                return String(_slice(Array(name), i, Array(name).count))
            }
            i = _int((i &- 1))
        }
        return ""
    }
    func remove_extension(_ name: String) -> String {
        var i = (_int(((name).count)) &- 1)
        while (i >= 0) {
            if (String(describing: String(Array(String(describing: (name as! String)))[i..<(i &+ 1)])) == ".") {
                return String(_slice(Array(name), 0, i))
            }
            i = _int((i &- 1))
        }
        return name
    }
    func title_case(_ s: String) -> String {
        var out = ""
        var cap = true
        var i = 0
        while (i < _int(((s).count))) {
            let c = String(describing: String(Array(String(describing: (s as! String)))[i..<(i &+ 1)]))
            if (c == " ") {
                out = ((out + c) as! String)
                cap = true
            } else {
                if cap {
                    out = ((out + String(describing: ((c as! String).uppercased()))) as! String)
                    cap = false
                } else {
                    out = ((out + String(describing: (c.lowercased()))) as! String)
                }
            }
            i = _int((i &+ 1))
        }
        return out
    }
    func count_char(_ s: String, _ ch: String) -> Int {
        var cnt = 0
        var i = 0
        while (i < _int(((s).count))) {
            if (String(describing: String(Array(String(describing: (s as! String)))[i..<(i &+ 1)])) == ch) {
                cnt = _int((cnt &+ 1))
            }
            i = _int((i &+ 1))
        }
        return cnt
    }
    func md_prefix(_ level: Int) -> String {
        if (level == 0) {
            return "\n##"
        }
        return (String(describing: _repeat("  ", level)) + "*")
    }
    func print_path(_ old_path: String, _ new_path: String) -> String {
        let old_parts: [String] = (_split(old_path, "/") as! [String])
        let new_parts: [String] = (_split(new_path, "/") as! [String])
        var i = 0
        while (i < _int(((new_parts).count))) {
            if (((i >= _int(((old_parts).count))) || ((_idx(old_parts, i) as! String) != (_idx(new_parts, i) as! String))) && ((_idx(new_parts, i) as! String) != "")) {
                let title = String(describing: title_case(String(describing: replace_char((_idx(new_parts, i) as! String), "_", " "))))
                print(_p(((String(describing: md_prefix(i)) + " ") + title)))
            }
            i = _int((i &+ 1))
        }
        return new_path
    }
    func sort_strings(_ xs: [String]) -> [String] {
        var arr = xs
        var i = 0
        while (i < _int(((arr).count))) {
            var min_idx = i
            var j = (i &+ 1)
            while (j < _int(((arr).count))) {
                if ((_idx(arr, j) as! String) < (_idx(arr, min_idx) as! String)) {
                    min_idx = Int(j)
                }
                j = _int((j &+ 1))
            }
            let tmp = (_idx(arr, i) as! String)
            arr = _set(arr, i, (_idx(arr, min_idx) as! String))
            arr = _set(arr, min_idx, (tmp as! String))
            i = _int((i &+ 1))
        }
        return arr
    }
    func good_file_paths(_ paths: [String]) -> [String] {
        var res: [String] = ([] as! [String])
        for p in paths {
            let parts: [String] = (_split(p, "/") as! [String])
            var skip = false
            var k = 0
            while (k < (_int(((parts).count)) &- 1)) {
                let part = (_idx(parts, k) as! String)
                if ((((part == "scripts") || (String(_slice(Array(part), 0, 1)) == ".")) || (String(_slice(Array(part), 0, 1)) == "_")) || contains((part as! String), "venv")) {
                    skip = true
                }
                k = _int((k &+ 1))
            }
            if skip {
                continue
            }
            let filename = (_idx(parts, (_int(((parts).count)) &- 1)) as! String)
            if (filename == "__init__.py") {
                continue
            }
            let ext = String(describing: file_extension((filename as! String)))
            if ((ext == ".py") || (ext == ".ipynb")) {
                res = (_append(res, p) as! [String])
            }
        }
        return res
    }
    func print_directory_md(_ paths: [String]) {
        var files = (sort_strings((good_file_paths((paths as! [String])) as! [String])) as! [String])
        var old_path = ""
        var i = 0
        while (i < _int(((files).count))) {
            let fp = (_idx(files, i) as! String)
            let parts: [String] = (_split(fp, "/") as! [String])
            let filename = (_idx(parts, (_int(((parts).count)) &- 1)) as! String)
            var filepath = ""
            if (_int(((parts).count)) > 1) {
                filepath = String(describing: join((_slice(Array(parts), 0, (_int(((parts).count)) &- 1)) as! [String]), "/"))
            }
            if (filepath != old_path) {
                old_path = String(describing: print_path((old_path as! String), (filepath as! String)))
            }
            var indent = 0
            if (_int(((filepath).count)) > 0) {
                indent = _int((_int(count_char((filepath as! String), "/")) &+ 1))
            }
            let url = String(describing: replace_char((fp as! String), " ", "%20"))
            let name = String(describing: title_case(String(describing: replace_char(String(describing: remove_extension((filename as! String))), "_", " "))))
            print(_p((((((String(describing: md_prefix(indent)) + " [") + name) + "](") + url) + ")")))
            i = _int((i &+ 1))
        }
    }
    let sample: [String] = ({
        var _arr: [String] = []
        _arr = _append(_arr, "data_structures/linked_list.py")
        _arr = _append(_arr, "data_structures/binary_tree.py")
        _arr = _append(_arr, "math/number_theory/prime_check.py")
        _arr = _append(_arr, "math/number_theory/greatest_common_divisor.ipynb")
        return _arr
    }() as! [String])
    _ = print_directory_md((sample as! [String]))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
