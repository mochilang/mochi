// Generated by Mochi transpiler v0.10.63 on 2025-08-11 16:25:34 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func indexOf(_ s: String, _ sub: String) -> Int {
        let n = _int(((s).count))
        let m = _int(((sub).count))
        var i = 0
        while (i <= (n &- m)) {
            if (String(describing: String(Array(String(describing: (s as! String)))[i..<(i &+ m)])) == sub) {
                return i
            }
            i = _int((i &+ 1))
        }
        return -1
    }
    func contains(_ s: String, _ sub: String) -> Bool {
        return (_int((String(describing: (s as! String)).range(of: String(describing: (sub as! String)))?.lowerBound.utf16Offset(in: String(describing: (s as! String))) ?? -1)) >= 0)
    }
    func validate(_ files: [String]) -> Int {
        var upper: [String] = ([] as! [String])
        var space: [String] = ([] as! [String])
        var hyphen: [String] = ([] as! [String])
        var nodir: [String] = ([] as! [String])
        for f in files {
            if (f != String(describing: (f.lowercased()))) {
                upper = (_append(upper, f) as! [String])
            }
            if contains((f as! String), " ") {
                space = (_append(space, f) as! [String])
            }
            if (contains((f as! String), "-") && (contains((f as! String), "/site-packages/") == false)) {
                hyphen = (_append(hyphen, f) as! [String])
            }
            if (!contains((f as! String), "/")) {
                nodir = (_append(nodir, f) as! [String])
            }
        }
        if (_int(((upper).count)) > 0) {
            print(_p((_p(_int(((upper).count))) + " files contain uppercase characters:")))
            for f in upper {
                print(_p(f))
            }
            print(_p(""))
        }
        if (_int(((space).count)) > 0) {
            print(_p((_p(_int(((space).count))) + " files contain space characters:")))
            for f in space {
                print(_p(f))
            }
            print(_p(""))
        }
        if (_int(((hyphen).count)) > 0) {
            print(_p((_p(_int(((hyphen).count))) + " files contain hyphen characters:")))
            for f in hyphen {
                print(_p(f))
            }
            print(_p(""))
        }
        if (_int(((nodir).count)) > 0) {
            print(_p((_p(_int(((nodir).count))) + " files are not in a directory:")))
            for f in nodir {
                print(_p(f))
            }
            print(_p(""))
        }
        return (((_int(((upper).count)) &+ _int(((space).count))) &+ _int(((hyphen).count))) &+ _int(((nodir).count)))
    }
    func main() {
        let files: [String] = ({
            var _arr: [String] = []
            _arr = _append(_arr, "scripts/Validate_filenames.py")
            _arr = _append(_arr, "good/file.txt")
            _arr = _append(_arr, "bad file.txt")
            _arr = _append(_arr, "/site-packages/pkg-name.py")
            _arr = _append(_arr, "nopath")
            _arr = _append(_arr, "src/hyphen-name.py")
            return _arr
        }() as! [String])
        let bad = _int(validate((files as! [String])))
        print(_p(_p(bad)))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
