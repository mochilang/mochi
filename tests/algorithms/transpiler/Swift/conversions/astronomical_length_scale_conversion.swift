// Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:22:04 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let UNIT_SYMBOL: [String: String] = (["meter": "m", "kilometer": "km", "megametre": "Mm", "gigametre": "Gm", "terametre": "Tm", "petametre": "Pm", "exametre": "Em", "zettametre": "Zm", "yottametre": "Ym"] as! [String: String])
    let METRIC_CONVERSION: [String: Int] = (["m": 0, "km": 3, "Mm": 6, "Gm": 9, "Tm": 12, "Pm": 15, "Em": 18, "Zm": 21, "Ym": 24] as! [String: Int])
    let ABBREVIATIONS = "m, km, Mm, Gm, Tm, Pm, Em, Zm, Ym"
    func sanitize(_ unit: String) -> String {
        var res: String = String(describing: (unit.lowercased()))
        if (Int(((res).count)) > 0) {
            let last = String(describing: String(Array(String(describing: (res as! String)))[(Int(((res).count)) &- 1)..<Int(((res).count))]))
            if (last == "s") {
                res = String(describing: String(Array(String(describing: (res as! String)))[0..<(Int(((res).count)) &- 1)]))
            }
        }
        if (UNIT_SYMBOL[res] != nil) {
            return (UNIT_SYMBOL[String(String(describing: res))] as! String)
        }
        return res
    }
    func pow10(_ exp: Int) -> Double {
        if (exp == 0) {
            return 1.0
        }
        var e: Int = exp
        var res: Double = 1.0
        if (e < 0) {
            e = Int(-e)
        }
        var i: Int = 0
        while (i < e) {
            res = Double((res * 10.0))
            i = Int((i &+ 1))
        }
        if (exp < 0) {
            return (1.0 / res)
        }
        return res
    }
    func length_conversion(_ value: Double, _ from_type: String, _ to_type: String) -> Double {
        let from_sanitized = String(describing: sanitize((from_type as! String)))
        let to_sanitized = String(describing: sanitize((to_type as! String)))
        if (!(METRIC_CONVERSION[from_sanitized] != nil)) {
            _ = fatalError(((("Invalid 'from_type' value: '" + from_type) + "'.\nConversion abbreviations are: ") + ABBREVIATIONS))
        }
        if (!(METRIC_CONVERSION[to_sanitized] != nil)) {
            _ = fatalError(((("Invalid 'to_type' value: '" + to_type) + "'.\nConversion abbreviations are: ") + ABBREVIATIONS))
        }
        let from_exp = (METRIC_CONVERSION[String(String(describing: from_sanitized))] as? Int ?? 0)
        let to_exp = (METRIC_CONVERSION[String(String(describing: to_sanitized))] as? Int ?? 0)
        var exponent: Int = 0
        if (from_exp > to_exp) {
            exponent = Int((from_exp &- to_exp))
        } else {
            exponent = Int(-Int((to_exp &- from_exp)))
        }
        return (value * Double(pow10(exponent)))
    }
    print(_p(String(describing: Double(length_conversion(1.0, "meter", "kilometer")))))
    print(_p(String(describing: Double(length_conversion(1.0, "meter", "megametre")))))
    print(_p(String(describing: Double(length_conversion(1.0, "gigametre", "meter")))))
    print(_p(String(describing: Double(length_conversion(1.0, "terametre", "zettametre")))))
    print(_p(String(describing: Double(length_conversion(1.0, "yottametre", "zettametre")))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
