// Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:08:14 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func bin_to_octal(_ bin_string: String) -> String {
        var i: Int = 0
        while (i < Int(((bin_string).count))) {
            let c = (String(Array(bin_string)[i]) as! String)
            if (!((c == "0") || (c == "1"))) {
                _ = fatalError("Non-binary value was passed to the function")
            }
            i = Int((i &+ 1))
        }
        if (Int(((bin_string).count)) == 0) {
            _ = fatalError("Empty string was passed to the function")
        }
        var padded: String = bin_string
        while (((Int(((padded).count)) % 3 + 3) % 3) != 0) {
            padded = (("0" + padded) as! String)
        }
        var oct_string: String = ""
        var index: Int = 0
        while (index < Int(((padded).count))) {
            let group = String(Array(padded)[index..<(index &+ 3)])
            let b0 = Int((((String(Array(group)[0]) as! String) == "1") ? 1 : 0))
            let b1 = Int((((String(Array(group)[1]) as! String) == "1") ? 1 : 0))
            let b2 = Int((((String(Array(group)[2]) as! String) == "1") ? 1 : 0))
            let oct_val = (((b0 &* 4) &+ (b1 &* 2)) &+ b2)
            oct_string = ((oct_string + String(describing: oct_val)) as! String)
            index = Int((index &+ 3))
        }
        return oct_string
    }
    print(_p(String(describing: bin_to_octal("1111"))))
    print(_p(String(describing: bin_to_octal("101010101010011"))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
