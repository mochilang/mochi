// Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:07:59 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func strip_spaces(_ s: String) -> String {
        var start: Int = 0
        var end: Int = (Int(((s).count)) &- 1)
        while ((start < Int(((s).count))) && ((String(Array(s)[start]) as! String) == " ")) {
            start = Int((start &+ 1))
        }
        while ((end >= start) && ((String(Array(s)[end]) as! String) == " ")) {
            end = Int((end &- 1))
        }
        var res: String = ""
        var i: Int = start
        while (i <= end) {
            res = ((res + (String(Array(s)[i]) as! String)) as! String)
            i = Int((i &+ 1))
        }
        return res
    }
    func repeat_char(_ ch: String, _ count: Int) -> String {
        var res: String = ""
        var i: Int = 0
        while (i < count) {
            res = ((res + ch) as! String)
            i = Int((i &+ 1))
        }
        return res
    }
    func slice(_ s: String, _ start: Int, _ end: Int) -> String {
        var res: String = ""
        var i: Int = start
        while (i < end) {
            res = ((res + (String(Array(s)[i]) as! String)) as! String)
            i = Int((i &+ 1))
        }
        return res
    }
    func bits_to_int(_ bits: String) -> Int {
        var value: Int = 0
        var i: Int = 0
        while (i < Int(((bits).count))) {
            value = Int((value &* 2))
            if ((String(Array(bits)[i]) as! String) == "1") {
                value = Int((value &+ 1))
            }
            i = Int((i &+ 1))
        }
        return value
    }
    func bin_to_hexadecimal(_ binary_str: String) -> String {
        var s: String = String(describing: strip_spaces((binary_str as! String)))
        if (Int(((s).count)) == 0) {
            _ = fatalError("Empty string was passed to the function")
        }
        var is_negative: Bool = false
        if ((String(Array(s)[0]) as! String) == "-") {
            is_negative = true
            s = String(describing: String(Array(s)[1..<Int(((s).count))]))
        }
        var i: Int = 0
        while (i < Int(((s).count))) {
            let c = (String(Array(s)[i]) as! String)
            if ((c != "0") && (c != "1")) {
                _ = fatalError("Non-binary value was passed to the function")
            }
            i = Int((i &+ 1))
        }
        let groups = ((Int(((s).count)) / 4) &+ 1)
        let pad_len = ((groups &* 4) &- Int(((s).count)))
        s = ((String(describing: repeat_char("0", pad_len)) + s) as! String)
        let digits = "0123456789abcdef"
        var res: String = "0x"
        var j: Int = 0
        while (j < Int(((s).count))) {
            let chunk = String(describing: String(Array(s)[j..<(j &+ 4)]))
            let val = Int(bits_to_int((chunk as! String)))
            res = ((res + (String(Array(digits)[val]) as! String)) as! String)
            j = Int((j &+ 4))
        }
        if is_negative {
            return ("-" + res)
        }
        return res
    }
    print(_p(String(describing: bin_to_hexadecimal("101011111"))))
    print(_p(String(describing: bin_to_hexadecimal(" 1010   "))))
    print(_p(String(describing: bin_to_hexadecimal("-11101"))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
