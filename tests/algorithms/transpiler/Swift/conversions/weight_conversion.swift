// Generated by Mochi transpiler v0.10.71 on 2025-08-24 15:52:40 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.isNaN || d.isInfinite {
                return String(d)
            }
            if d.rounded(.towardZero) == d {
                // avoid overflow when converting to Int64
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _num(_ v: Any) -> Double {
    if let d = v as? Double { return d }
    if let i = v as? Int { return Double(i) }
    if let i = v as? Int64 { return Double(i) }
    return 0
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func pow10(_ exp: Int) -> Double {
        var result = 1.0
        if ((exp >= 0)) {
            var i = 0
            while ((i < exp)) {
                result = _num((result * 10.0))
                i = _int((i &+ 1))
            }
        } else {
            var i = 0
            while ((i < _int((0 &- exp)))) {
                result = _num((result / 10.0))
                i = _int((i &+ 1))
            }
        }
        return result
    }
    let KILOGRAM_CHART: [String: Double] = (["kilogram": 1.0, "gram": 1000.0, "milligram": 1000000.0, "metric-ton": 0.001, "long-ton": 0.00098420730000000007, "short-ton": 0.0011023122000000001, "pound": 2.2046244202, "stone": 0.15747317280000001, "ounce": 35.273990722999997, "carrat": 5000.0, "atomic-mass-unit": (6.0221366520000004 * _num(pow10(26)))] as! [String: Double])
    let WEIGHT_TYPE_CHART: [String: Double] = (["kilogram": 1.0, "gram": 0.001, "milligram": 9.9999999999999995e-07, "metric-ton": 1000.0, "long-ton": 1016.04608, "short-ton": 907.18399999999997, "pound": 0.453592, "stone": 6.3502900000000002, "ounce": 0.0283495, "carrat": 0.00020000000000000001, "atomic-mass-unit": (1.6605401989999999 * _num(pow10(-27)))] as! [String: Double])
    func weight_conversion(_ from_type: String, _ to_type: String, _ value: Double) -> Double {
        let has_to = (KILOGRAM_CHART[to_type] != nil)
        let has_from = (WEIGHT_TYPE_CHART[from_type] != nil)
        if ((has_to && has_from)) {
            return ((value * _num((KILOGRAM_CHART[String(String(describing: to_type))] ?? 0.0))) * _num((WEIGHT_TYPE_CHART[String(String(describing: from_type))] ?? 0.0)))
        }
        print(_p("Invalid 'from_type' or 'to_type'"))
        return 0.0
    }
    print(_p(_num(weight_conversion("kilogram", "gram", 1.0))))
    print(_p(_num(weight_conversion("gram", "pound", 3.0))))
    print(_p(_num(weight_conversion("ounce", "kilogram", 3.0))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
