// Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:08:23 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let ones: [String] = (["zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine"] as! [String])
    let teens: [String] = (["ten", "eleven", "twelve", "thirteen", "fourteen", "fifteen", "sixteen", "seventeen", "eighteen", "nineteen"] as! [String])
    let tens: [String] = (["", "", "twenty", "thirty", "forty", "fifty", "sixty", "seventy", "eighty", "ninety"] as! [String])
    let short_powers: [Int] = ([15, 12, 9, 6, 3, 2] as! [Int])
    let short_units: [String] = (["quadrillion", "trillion", "billion", "million", "thousand", "hundred"] as! [String])
    let long_powers: [Int] = ([15, 9, 6, 3, 2] as! [Int])
    let long_units: [String] = (["billiard", "milliard", "million", "thousand", "hundred"] as! [String])
    let indian_powers: [Int] = ([14, 12, 7, 5, 3, 2] as! [Int])
    let indian_units: [String] = (["crore crore", "lakh crore", "crore", "lakh", "thousand", "hundred"] as! [String])
    func pow10(_ exp: Int) -> Int {
        var res: Int = 1
        var i: Int = 0
        while (i < exp) {
            res = Int((res &* 10))
            i = Int((i &+ 1))
        }
        return res
    }
    func max_value(_ system: String) -> Int {
        if (system == "short") {
            return (Int(pow10(18)) &- 1)
        }
        if (system == "long") {
            return (Int(pow10(21)) &- 1)
        }
        if (system == "indian") {
            return (Int(pow10(19)) &- 1)
        }
        return 0
    }
    func join_words(_ words: [String]) -> String {
        var res: String = ""
        var i: Int = 0
        while (i < Int(((words).count))) {
            if (i > 0) {
                res = ((res + " ") as! String)
            }
            res = ((res + (words[i] as! String)) as! String)
            i = Int((i &+ 1))
        }
        return res
    }
    func convert_small_number(_ num: Int) -> String {
        if (num < 0) {
            return ""
        }
        if (num >= 100) {
            return ""
        }
        let tens_digit = (num / 10)
        let ones_digit = ((num % 10 + 10) % 10)
        if (tens_digit == 0) {
            return (ones[ones_digit] as! String)
        }
        if (tens_digit == 1) {
            return (teens[ones_digit] as! String)
        }
        let hyphen = String(describing: ((ones_digit > 0) ? "-" : ""))
        let tail = String(describing: ((ones_digit > 0) ? (ones[ones_digit] as! String) : ""))
        return (((tens[tens_digit] as! String) + hyphen) + tail)
    }
    func convert_number(_ num: Int, _ system: String) -> String {
        var word_groups: [String] = ([] as! [String])
        var n: Int = num
        if (n < 0) {
            word_groups = (_append(word_groups, "negative") as! [String])
            n = Int(-n)
        }
        if (n > Int(max_value((system as! String)))) {
            return ""
        }
        var powers: [Int] = ([] as! [Int])
        var units: [String] = ([] as! [String])
        if (system == "short") {
            powers = (short_powers as! [Int])
            units = (short_units as! [String])
        } else {
            if (system == "long") {
                powers = (long_powers as! [Int])
                units = (long_units as! [String])
            } else {
                if (system == "indian") {
                    powers = (indian_powers as! [Int])
                    units = (indian_units as! [String])
                } else {
                    return ""
                }
            }
        }
        var i: Int = 0
        while (i < Int(((powers).count))) {
            let power = (powers[i] as? Int ?? 0)
            let unit = (units[i] as! String)
            let divisor = Int(pow10(power))
            let digit_group = (n / divisor)
            n = Int(((n % divisor + divisor) % divisor))
            if (digit_group > 0) {
                let word_group = String(describing: ((digit_group >= 100) ? String(describing: convert_number(digit_group, (system as! String))) : String(describing: convert_small_number(digit_group))))
                word_groups = (_append(word_groups, ((word_group + " ") + unit)) as! [String])
            }
            i = Int((i &+ 1))
        }
        if ((n > 0) || (Int(((word_groups).count)) == 0)) {
            word_groups = (_append(word_groups, String(describing: convert_small_number(n))) as! [String])
        }
        let joined = String(describing: join_words((word_groups as! [String])))
        return joined
    }
    print(_p(String(describing: convert_number(123456789012345, "short"))))
    print(_p(String(describing: convert_number(123456789012345, "long"))))
    print(_p(String(describing: convert_number(123456789012345, "indian"))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
