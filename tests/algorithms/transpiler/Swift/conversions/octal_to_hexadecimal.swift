// Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:09:37 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func octal_to_hex(_ octal: String) -> String {
        var s: String = octal
        if (((Int(((s).count)) >= 2) && ((String(Array(s)[0]) as! String) == "0")) && ((String(Array(s)[1]) as! String) == "o")) {
            s = String(describing: String(Array(String(describing: (s as! String)))[2..<Int(((s).count))]))
        }
        if (Int(((s).count)) == 0) {
            _ = fatalError("Empty string was passed to the function")
        }
        var j: Int = 0
        while (j < Int(((s).count))) {
            let c = (String(Array(s)[j]) as! String)
            if ((((((((c != "0") && (c != "1")) && (c != "2")) && (c != "3")) && (c != "4")) && (c != "5")) && (c != "6")) && (c != "7")) {
                _ = fatalError("Not a Valid Octal Number")
            }
            j = Int((j &+ 1))
        }
        var decimal: Int = 0
        var k: Int = 0
        while (k < Int(((s).count))) {
            let d = (String(Array(s)[k]) as? Int ?? 0)
            decimal = Int(((decimal &* 8) &+ d))
            k = Int((k &+ 1))
        }
        let hex_chars = "0123456789ABCDEF"
        if (decimal == 0) {
            return "0x"
        }
        var hex: String = ""
        while (decimal > 0) {
            let idx = ((decimal % 16 + 16) % 16)
            hex = (((String(Array(hex_chars)[idx]) as! String) + hex) as! String)
            decimal = Int((decimal / 16))
        }
        return ("0x" + hex)
    }
    let nums: [String] = (["030", "100", "247", "235", "007"] as! [String])
    var t: Int = 0
    while (t < Int(((nums).count))) {
        let num = (nums[t] as! String)
        print(_p(String(describing: octal_to_hex((num as! String)))))
        t = Int((t &+ 1))
    }
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
