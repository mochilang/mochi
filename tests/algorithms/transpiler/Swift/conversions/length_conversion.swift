// Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:09:14 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func rstrip_s(_ s: String) -> String {
        if ((Int(((s).count)) > 0) && ((String(Array(s)[(Int(((s).count)) &- 1)]) as! String) == "s")) {
            return String(describing: String(Array(String(describing: (s as! String)))[0..<(Int(((s).count)) &- 1)]))
        }
        return s
    }
    func normalize_alias(_ u: String) -> String {
        if (u == "millimeter") {
            return "mm"
        }
        if (u == "centimeter") {
            return "cm"
        }
        if (u == "meter") {
            return "m"
        }
        if (u == "kilometer") {
            return "km"
        }
        if (u == "inch") {
            return "in"
        }
        if (u == "inche") {
            return "in"
        }
        if (u == "feet") {
            return "ft"
        }
        if (u == "foot") {
            return "ft"
        }
        if (u == "yard") {
            return "yd"
        }
        if (u == "mile") {
            return "mi"
        }
        return u
    }
    func has_unit(_ u: String) -> Bool {
        return ((((((((u == "mm") || (u == "cm")) || (u == "m")) || (u == "km")) || (u == "in")) || (u == "ft")) || (u == "yd")) || (u == "mi"))
    }
    func from_factor(_ u: String) -> Double {
        if (u == "mm") {
            return 0.001
        }
        if (u == "cm") {
            return 0.01
        }
        if (u == "m") {
            return 1.0
        }
        if (u == "km") {
            return 1000.0
        }
        if (u == "in") {
            return 0.0254
        }
        if (u == "ft") {
            return 0.3048
        }
        if (u == "yd") {
            return 0.9144
        }
        if (u == "mi") {
            return 1609.34
        }
        return 0.0
    }
    func to_factor(_ u: String) -> Double {
        if (u == "mm") {
            return 1000.0
        }
        if (u == "cm") {
            return 100.0
        }
        if (u == "m") {
            return 1.0
        }
        if (u == "km") {
            return 0.001
        }
        if (u == "in") {
            return 39.3701
        }
        if (u == "ft") {
            return 3.28084
        }
        if (u == "yd") {
            return 1.09361
        }
        if (u == "mi") {
            return 0.000621371
        }
        return 0.0
    }
    func length_conversion(_ value: Double, _ from_type: String, _ to_type: String) -> Double {
        var new_from: String = String(describing: normalize_alias(String(describing: rstrip_s(String(describing: (from_type.lowercased()))))))
        var new_to: String = String(describing: normalize_alias(String(describing: rstrip_s(String(describing: (to_type.lowercased()))))))
        if (!has_unit((new_from as! String))) {
            _ = fatalError((("Invalid 'from_type' value: '" + from_type) + "'.\nConversion abbreviations are: mm, cm, m, km, in, ft, yd, mi"))
        }
        if (!has_unit((new_to as! String))) {
            _ = fatalError((("Invalid 'to_type' value: '" + to_type) + "'.\nConversion abbreviations are: mm, cm, m, km, in, ft, yd, mi"))
        }
        return ((value * Double(from_factor((new_from as! String)))) * Double(to_factor((new_to as! String))))
    }
    print(_p(Double(length_conversion(4.0, "METER", "FEET"))))
    print(_p(Double(length_conversion(1.0, "kilometer", "inch"))))
    print(_p(Double(length_conversion(2.0, "feet", "meter"))))
    print(_p(Double(length_conversion(2.0, "centimeter", "millimeter"))))
    print(_p(Double(length_conversion(4.0, "yard", "kilometer"))))
    print(_p(Double(length_conversion(3.0, "foot", "inch"))))
    print(_p(Double(length_conversion(3.0, "mm", "in"))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
