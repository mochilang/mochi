// Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:09:48 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
struct Prefix: Codable {
    var name: String
    var exp: Int
    init() {
        self.name = ""
        self.exp = 0
    }
    init(name: String, exp: Int) {
        self.name = name
        self.exp = exp
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let si_positive: [Prefix] = ([Prefix(name: "yotta", exp: 24), Prefix(name: "zetta", exp: 21), Prefix(name: "exa", exp: 18), Prefix(name: "peta", exp: 15), Prefix(name: "tera", exp: 12), Prefix(name: "giga", exp: 9), Prefix(name: "mega", exp: 6), Prefix(name: "kilo", exp: 3), Prefix(name: "hecto", exp: 2), Prefix(name: "deca", exp: 1)] as! [Prefix])
    let si_negative: [Prefix] = ([Prefix(name: "deci", exp: -1), Prefix(name: "centi", exp: -2), Prefix(name: "milli", exp: -3), Prefix(name: "micro", exp: -6), Prefix(name: "nano", exp: -9), Prefix(name: "pico", exp: -12), Prefix(name: "femto", exp: -15), Prefix(name: "atto", exp: -18), Prefix(name: "zepto", exp: -21), Prefix(name: "yocto", exp: -24)] as! [Prefix])
    let binary_prefixes: [Prefix] = ([Prefix(name: "yotta", exp: 80), Prefix(name: "zetta", exp: 70), Prefix(name: "exa", exp: 60), Prefix(name: "peta", exp: 50), Prefix(name: "tera", exp: 40), Prefix(name: "giga", exp: 30), Prefix(name: "mega", exp: 20), Prefix(name: "kilo", exp: 10)] as! [Prefix])
    func pow(_ base: Double, _ exp: Int) -> Double {
        var result: Double = 1.0
        var e: Int = exp
        if (e < 0) {
            e = Int(-e)
            var i: Int = 0
            while (i < e) {
                result = Double((result * base))
                i = Int((i &+ 1))
            }
            return (1.0 / result)
        }
        var i: Int = 0
        while (i < e) {
            result = Double((result * base))
            i = Int((i &+ 1))
        }
        return result
    }
    func add_si_prefix(_ value: Double) -> String {
        var prefixes: [Prefix] = []
        if (value > 0.0) {
            prefixes = (si_positive as! [Prefix])
        } else {
            prefixes = (si_negative as! [Prefix])
        }
        var i: Int = 0
        while (i < Int(((prefixes).count))) {
            let p = (prefixes[i] as! Prefix)
            let num = (value / Double(pow(10.0, p.exp)))
            if (num > 1.0) {
                return ((String(describing: num) + " ") + p.name)
            }
            i = Int((i &+ 1))
        }
        return String(describing: value)
    }
    func add_binary_prefix(_ value: Double) -> String {
        var i: Int = 0
        while (i < Int(((binary_prefixes).count))) {
            let p = (binary_prefixes[i] as! Prefix)
            let num = (value / Double(pow(2.0, p.exp)))
            if (num > 1.0) {
                return ((String(describing: num) + " ") + p.name)
            }
            i = Int((i &+ 1))
        }
        return String(describing: value)
    }
    print(_p(String(describing: add_si_prefix(10000.0))))
    print(_p(String(describing: add_si_prefix(0.005))))
    print(_p(String(describing: add_binary_prefix(65536.0))))
    print(_p(String(describing: add_binary_prefix(512.0))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
