// Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:09:41 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let SI_UNITS: [String: Int] = (["yotta": 24, "zetta": 21, "exa": 18, "peta": 15, "tera": 12, "giga": 9, "mega": 6, "kilo": 3, "hecto": 2, "deca": 1, "deci": -1, "centi": -2, "milli": -3, "micro": -6, "nano": -9, "pico": -12, "femto": -15, "atto": -18, "zepto": -21, "yocto": -24] as! [String: Int])
    let BINARY_UNITS: [String: Int] = (["yotta": 8, "zetta": 7, "exa": 6, "peta": 5, "tera": 4, "giga": 3, "mega": 2, "kilo": 1] as! [String: Int])
    func pow(_ base: Double, _ exp: Int) -> Double {
        if (exp == 0) {
            return 1.0
        }
        var e: Int = exp
        if (e < 0) {
            e = Int(-e)
        }
        var result: Double = 1.0
        var i: Int = 0
        while (i < e) {
            result = Double((result * base))
            i = Int((i &+ 1))
        }
        if (exp < 0) {
            return (1.0 / result)
        }
        return result
    }
    func convert_si_prefix(_ known_amount: Double, _ known_prefix: String, _ unknown_prefix: String) -> Double {
        let kp = String(describing: (known_prefix.lowercased()))
        let up = String(describing: (unknown_prefix.lowercased()))
        if (!(SI_UNITS[kp] != nil)) {
            _ = fatalError(("unknown prefix: " + known_prefix))
        }
        if (!(SI_UNITS[up] != nil)) {
            _ = fatalError(("unknown prefix: " + unknown_prefix))
        }
        let diff = ((SI_UNITS[String(String(describing: kp))] as? Int ?? 0) &- (SI_UNITS[String(String(describing: up))] as? Int ?? 0))
        return (known_amount * Double(pow(10.0, diff)))
    }
    func convert_binary_prefix(_ known_amount: Double, _ known_prefix: String, _ unknown_prefix: String) -> Double {
        let kp = String(describing: (known_prefix.lowercased()))
        let up = String(describing: (unknown_prefix.lowercased()))
        if (!(BINARY_UNITS[kp] != nil)) {
            _ = fatalError(("unknown prefix: " + known_prefix))
        }
        if (!(BINARY_UNITS[up] != nil)) {
            _ = fatalError(("unknown prefix: " + unknown_prefix))
        }
        let diff = (Int(((BINARY_UNITS[String(String(describing: kp))] as? Int ?? 0) &- (BINARY_UNITS[String(String(describing: up))] as? Int ?? 0))) &* 10)
        return (known_amount * Double(pow(2.0, diff)))
    }
    print(_p(String(describing: Double(convert_si_prefix(1.0, "giga", "mega")))))
    print(_p(String(describing: Double(convert_si_prefix(1.0, "mega", "giga")))))
    print(_p(String(describing: Double(convert_si_prefix(1.0, "kilo", "kilo")))))
    print(_p(String(describing: Double(convert_binary_prefix(1.0, "giga", "mega")))))
    print(_p(String(describing: Double(convert_binary_prefix(1.0, "mega", "giga")))))
    print(_p(String(describing: Double(convert_binary_prefix(1.0, "kilo", "kilo")))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
