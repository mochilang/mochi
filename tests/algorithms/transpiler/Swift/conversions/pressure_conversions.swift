// Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:18:00 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _keys<K,V>(_ m: [K: V]) -> [K] {
    return Array(m.keys)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
struct FromTo: Codable {
    var from_factor: Double
    var to_factor: Double
    init() {
        self.from_factor = 0
        self.to_factor = 0
    }
    init(from_factor: Double, to_factor: Double) {
        self.from_factor = from_factor
        self.to_factor = to_factor
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let PRESSURE_CONVERSION: [String: FromTo] = (["atm": FromTo(from_factor: 1.0, to_factor: 1.0), "pascal": FromTo(from_factor: 0.0000098, to_factor: 101325.0), "bar": FromTo(from_factor: 0.986923, to_factor: 1.01325), "kilopascal": FromTo(from_factor: 0.00986923, to_factor: 101.325), "megapascal": FromTo(from_factor: 9.86923, to_factor: 0.101325), "psi": FromTo(from_factor: 0.068046, to_factor: 14.6959), "inHg": FromTo(from_factor: 0.0334211, to_factor: 29.9213), "torr": FromTo(from_factor: 0.00131579, to_factor: 760.0)] as! [String: FromTo])
    func pressure_conversion(_ value: Double, _ from_type: String, _ to_type: String) -> Double {
        if (!(PRESSURE_CONVERSION[from_type] != nil)) {
            let keys = ((_keys(PRESSURE_CONVERSION)).joined(separator: ", ") as! [Any?])
            _ = fatalError(((("Invalid 'from_type' value: '" + from_type) + "'  Supported values are:\n") + keys))
        }
        if (!(PRESSURE_CONVERSION[to_type] != nil)) {
            let keys = ((_keys(PRESSURE_CONVERSION)).joined(separator: ", ") as! [Any?])
            _ = fatalError(((("Invalid 'to_type' value: '" + to_type) + ".  Supported values are:\n") + keys))
        }
        let from = (PRESSURE_CONVERSION[String(String(describing: from_type))] as! FromTo)
        let to = (PRESSURE_CONVERSION[String(String(describing: to_type))] as! FromTo)
        return ((value * from.from_factor) * to.to_factor)
    }
    print(_p(Double(pressure_conversion(4.0, "atm", "pascal"))))
    print(_p(Double(pressure_conversion(1.0, "pascal", "psi"))))
    print(_p(Double(pressure_conversion(1.0, "bar", "atm"))))
    print(_p(Double(pressure_conversion(3.0, "kilopascal", "bar"))))
    print(_p(Double(pressure_conversion(2.0, "megapascal", "psi"))))
    print(_p(Double(pressure_conversion(4.0, "psi", "torr"))))
    print(_p(Double(pressure_conversion(1.0, "inHg", "atm"))))
    print(_p(Double(pressure_conversion(1.0, "torr", "psi"))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
