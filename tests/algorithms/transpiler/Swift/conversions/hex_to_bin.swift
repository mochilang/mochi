// Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:08:57 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func panic(_ msg: String) {
        print(_p(msg))
    }
    func trim_spaces(_ s: String) -> String {
        var start: Int = 0
        var end: Int = Int(((s).count))
        while ((start < end) && (String(describing: String(Array(String(describing: (s as! String)))[start..<(start &+ 1)])) == " ")) {
            start = Int((start &+ 1))
        }
        while ((end > start) && (String(describing: String(Array(String(describing: (s as! String)))[(end &- 1)..<end])) == " ")) {
            end = Int((end &- 1))
        }
        return String(describing: String(Array(String(describing: (s as! String)))[start..<end]))
    }
    func hex_digit_value(_ ch: String) -> Int {
        if (ch == "0") {
            return 0
        }
        if (ch == "1") {
            return 1
        }
        if (ch == "2") {
            return 2
        }
        if (ch == "3") {
            return 3
        }
        if (ch == "4") {
            return 4
        }
        if (ch == "5") {
            return 5
        }
        if (ch == "6") {
            return 6
        }
        if (ch == "7") {
            return 7
        }
        if (ch == "8") {
            return 8
        }
        if (ch == "9") {
            return 9
        }
        if ((ch == "a") || (ch == "A")) {
            return 10
        }
        if ((ch == "b") || (ch == "B")) {
            return 11
        }
        if ((ch == "c") || (ch == "C")) {
            return 12
        }
        if ((ch == "d") || (ch == "D")) {
            return 13
        }
        if ((ch == "e") || (ch == "E")) {
            return 14
        }
        if ((ch == "f") || (ch == "F")) {
            return 15
        }
        _ = fatalError("Invalid value was passed to the function")
    }
    func hex_to_bin(_ hex_num: String) -> Int {
        let trimmed = String(describing: trim_spaces((hex_num as! String)))
        if (Int(((trimmed).count)) == 0) {
            _ = fatalError("No value was passed to the function")
        }
        var s: String = trimmed
        var is_negative: Bool = false
        if (String(describing: String(Array(String(describing: (s as! String)))[0..<1])) == "-") {
            is_negative = true
            s = String(describing: String(Array(String(describing: (s as! String)))[1..<Int(((s).count))]))
        }
        var int_num: Int = 0
        var i: Int = 0
        while (i < Int(((s).count))) {
            let ch = String(describing: String(Array(String(describing: (s as! String)))[i..<(i &+ 1)]))
            let val = Int(hex_digit_value((ch as! String)))
            int_num = Int(((int_num &* 16) &+ val))
            i = Int((i &+ 1))
        }
        var bin_str: String = ""
        var n: Int = int_num
        if (n == 0) {
            bin_str = "0"
        }
        while (n > 0) {
            bin_str = ((String(describing: ((n % 2 + 2) % 2)) + bin_str) as! String)
            n = Int((n / 2))
        }
        var result: Int = Int(bin_str)!
        if is_negative {
            result = Int(-result)
        }
        return result
    }
    print(_p(String(describing: Int(hex_to_bin("AC")))))
    print(_p(String(describing: Int(hex_to_bin("9A4")))))
    print(_p(String(describing: Int(hex_to_bin("   12f   ")))))
    print(_p(String(describing: Int(hex_to_bin("FfFf")))))
    print(_p(String(describing: Int(hex_to_bin("-fFfF")))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
