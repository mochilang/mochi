// Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:09:08 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let hex_digits = "0123456789abcdef"
    func split_by_dot(_ s: String) -> [String] {
        var res: [String] = ([] as! [String])
        var current: String = ""
        var i: Int = 0
        while (i < Int(((s).count))) {
            let c = (String(Array(s)[i]) as! String)
            if (c == ".") {
                res = (_append(res, current) as! [String])
                current = ""
            } else {
                current = ((current + c) as! String)
            }
            i = Int((i &+ 1))
        }
        res = (_append(res, current) as! [String])
        return res
    }
    func parse_decimal(_ s: String) -> Int {
        if (Int(((s).count)) == 0) {
            _ = fatalError("Invalid IPv4 address format")
        }
        var value: Int = 0
        var i: Int = 0
        while (i < Int(((s).count))) {
            let c = (String(Array(s)[i]) as! String)
            if ((c < "0") || (c > "9")) {
                _ = fatalError("Invalid IPv4 address format")
            }
            value = Int(((value &* 10) &+ Int(c)!))
            i = Int((i &+ 1))
        }
        return value
    }
    func to_hex2(_ n: Int) -> String {
        var x: Int = n
        var res: String = ""
        while (x > 0) {
            let d = ((x % 16 + 16) % 16)
            res = (((String(Array(hex_digits)[d]) as! String) + res) as! String)
            x = Int((x / 16))
        }
        while (Int(((res).count)) < 2) {
            res = (("0" + res) as! String)
        }
        return res
    }
    func ipv4_to_decimal(_ ipv4_address: String) -> Int {
        let parts: [String] = (split_by_dot((ipv4_address as! String)) as! [String])
        if (Int(((parts).count)) != 4) {
            _ = fatalError("Invalid IPv4 address format")
        }
        var result: Int = 0
        var i: Int = 0
        while (i < 4) {
            let oct = Int(parse_decimal((parts[i] as! String)))
            if ((oct < 0) || (oct > 255)) {
                _ = fatalError(("Invalid IPv4 octet " + String(describing: oct)))
            }
            result = Int(((result &* 256) &+ oct))
            i = Int((i &+ 1))
        }
        return result
    }
    func alt_ipv4_to_decimal(_ ipv4_address: String) -> Int {
        let parts: [String] = (split_by_dot((ipv4_address as! String)) as! [String])
        if (Int(((parts).count)) != 4) {
            _ = fatalError("Invalid IPv4 address format")
        }
        var hex_str: String = ""
        var i: Int = 0
        while (i < 4) {
            let oct = Int(parse_decimal((parts[i] as! String)))
            if ((oct < 0) || (oct > 255)) {
                _ = fatalError(("Invalid IPv4 octet " + String(describing: oct)))
            }
            hex_str = ((hex_str + String(describing: to_hex2(oct))) as! String)
            i = Int((i &+ 1))
        }
        var value: Int = 0
        var k: Int = 0
        while (k < Int(((hex_str).count))) {
            let c = (String(Array(hex_str)[k]) as! String)
            var digit: Int = (0 &- 1)
            var j: Int = 0
            while (j < Int(((hex_digits).count))) {
                if ((String(Array(hex_digits)[j]) as! String) == c) {
                    digit = Int(j)
                }
                j = Int((j &+ 1))
            }
            if (digit < 0) {
                _ = fatalError("Invalid hex digit")
            }
            value = Int(((value &* 16) &+ digit))
            k = Int((k &+ 1))
        }
        return value
    }
    func decimal_to_ipv4(_ decimal_ipv4: Int) -> String {
        if ((decimal_ipv4 < 0) || (decimal_ipv4 > 4294967295)) {
            _ = fatalError("Invalid decimal IPv4 address")
        }
        var n: Int = decimal_ipv4
        var parts: [String] = ([] as! [String])
        var i: Int = 0
        while (i < 4) {
            let octet = ((n % 256 + 256) % 256)
            parts = (_append(parts, String(describing: octet)) as! [String])
            n = Int((n / 256))
            i = Int((i &+ 1))
        }
        var res: String = ""
        var j: Int = (Int(((parts).count)) &- 1)
        while (j >= 0) {
            res = ((res + (parts[j] as! String)) as! String)
            if (j > 0) {
                res = ((res + ".") as! String)
            }
            j = Int((j &- 1))
        }
        return res
    }
    print(_p(Int(ipv4_to_decimal("192.168.0.1"))))
    print(_p(Int(ipv4_to_decimal("10.0.0.255"))))
    print(_p(Int(alt_ipv4_to_decimal("192.168.0.1"))))
    print(_p(Int(alt_ipv4_to_decimal("10.0.0.255"))))
    print(_p(String(describing: decimal_to_ipv4(3232235521))))
    print(_p(String(describing: decimal_to_ipv4(167772415))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
