// Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:21:21 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func zeros(_ h: Int, _ w: Int) -> [[Double]] {
        var m: [[Double]] = ([] as! [[Double]])
        var y: Int = 0
        while (y < h) {
            var row: [Double] = ([] as! [Double])
            var x: Int = 0
            while (x < w) {
                row = (_append(row, 0.0) as! [Double])
                x = Int((x &+ 1))
            }
            m = (_append(m, row) as! [[Double]])
            y = Int((y &+ 1))
        }
        return m
    }
    func gradient(_ img: [[Int]]) -> [[[Double]]] {
        let h = Int(((img).count))
        let w = Int((((img[0] as! [Int])).count))
        var dx: [[Double]] = (zeros(h, w) as! [[Double]])
        var dy: [[Double]] = (zeros(h, w) as! [[Double]])
        var y: Int = 1
        while (y < (h &- 1)) {
            var x: Int = 1
            while (x < (w &- 1)) {
                dx[y][x] = Double((Double(img[y][(x &+ 1)]) - Double(img[y][(x &- 1)])))
                dy[y][x] = Double((Double(img[(y &+ 1)][x]) - Double(img[(y &- 1)][x])))
                x = Int((x &+ 1))
            }
            y = Int((y &+ 1))
        }
        return ([dx, dy] as! [[[Double]]])
    }
    func harris(_ img: [[Int]], _ k: Double, _ window: Int, _ thresh: Double) -> [[Int]] {
        let h = Int(((img).count))
        let w = Int((((img[0] as! [Int])).count))
        let grads: [[[Double]]] = (gradient((img as! [[Int]])) as! [[[Double]]])
        let dx: [[Double]] = (grads[0] as! [[Double]])
        let dy: [[Double]] = (grads[1] as! [[Double]])
        var ixx: [[Double]] = (zeros(h, w) as! [[Double]])
        var iyy: [[Double]] = (zeros(h, w) as! [[Double]])
        var ixy: [[Double]] = (zeros(h, w) as! [[Double]])
        var y: Int = 0
        while (y < h) {
            var x: Int = 0
            while (x < w) {
                let gx = Double(dx[y][x])
                let gy = Double(dy[y][x])
                ixx[y][x] = Double((gx * gx))
                iyy[y][x] = Double((gy * gy))
                ixy[y][x] = Double((gx * gy))
                x = Int((x &+ 1))
            }
            y = Int((y &+ 1))
        }
        let offset = (window / 2)
        var corners: [[Int]] = ([] as! [[Int]])
        y = Int(offset)
        while (y < (h &- offset)) {
            var x: Int = offset
            while (x < (w &- offset)) {
                var wxx: Double = 0.0
                var wyy: Double = 0.0
                var wxy: Double = 0.0
                var yy: Int = (y &- offset)
                while (yy <= (y &+ offset)) {
                    var xx: Int = (x &- offset)
                    while (xx <= (x &+ offset)) {
                        wxx = Double((wxx + Double(ixx[yy][xx])))
                        wyy = Double((wyy + Double(iyy[yy][xx])))
                        wxy = Double((wxy + Double(ixy[yy][xx])))
                        xx = Int((xx &+ 1))
                    }
                    yy = Int((yy &+ 1))
                }
                let det = ((wxx * wyy) - Double((wxy * wxy)))
                let trace = (wxx + wyy)
                let r = (det - (k * Double((trace * trace))))
                if (r > thresh) {
                    corners = (_append(corners, ([x, y] as! [Int])) as! [[Int]])
                }
                x = Int((x &+ 1))
            }
            y = Int((y &+ 1))
        }
        return corners
    }
    let img: [[Int]] = ([([1, 1, 1, 1, 1] as! [Int]), ([1, 255, 255, 255, 1] as! [Int]), ([1, 255, 0, 255, 1] as! [Int]), ([1, 255, 255, 255, 1] as! [Int]), ([1, 1, 1, 1, 1] as! [Int])] as! [[Int]])
    var corners: [[Int]] = (harris((img as! [[Int]]), 0.04, 3, 10000000000.0) as! [[Int]])
    print(_p("[" + corners.map{ if let s = $0 as? String { "\"" + s.replacingOccurrences(of: "\"", with: "\\\"") + "\"" } else { _p($0) } }.joined(separator: ", ") + "]"))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
