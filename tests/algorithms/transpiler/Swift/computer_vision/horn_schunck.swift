// Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:21:26 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func round_int(_ x: Double) -> Int {
        if (x >= 0.0) {
            return Int(_int((x + 0.5)))
        }
        return Int(_int((x - 0.5)))
    }
    func zeros(_ rows: Int, _ cols: Int) -> [[Double]] {
        var res: [[Double]] = ([] as! [[Double]])
        var i: Int = 0
        while (i < rows) {
            var row: [Double] = ([] as! [Double])
            var j: Int = 0
            while (j < cols) {
                row = (_append(row, 0.0) as! [Double])
                j = Int((j &+ 1))
            }
            res = (_append(res, row) as! [[Double]])
            i = Int((i &+ 1))
        }
        return res
    }
    func warp(_ image: [[Double]], _ h_flow: [[Double]], _ v_flow: [[Double]]) -> [[Double]] {
        let h = Int(((image).count))
        let w = Int((((image[0] as! [Double])).count))
        var out: [[Double]] = ([] as! [[Double]])
        var y: Int = 0
        while (y < h) {
            var row: [Double] = ([] as! [Double])
            var x: Int = 0
            while (x < w) {
                let sx = (x &- Int(round_int(Double(h_flow[y][x]))))
                let sy = (y &- Int(round_int(Double(v_flow[y][x]))))
                if ((((sx >= 0) && (sx < w)) && (sy >= 0)) && (sy < h)) {
                    row = (_append(row, Double(image[sy][sx])) as! [Double])
                } else {
                    row = (_append(row, 0.0) as! [Double])
                }
                x = Int((x &+ 1))
            }
            out = (_append(out, row) as! [[Double]])
            y = Int((y &+ 1))
        }
        return out
    }
    func convolve(_ img: [[Double]], _ ker: [[Double]]) -> [[Double]] {
        let h = Int(((img).count))
        let w = Int((((img[0] as! [Double])).count))
        let kh = Int(((ker).count))
        let kw = Int((((ker[0] as! [Double])).count))
        let py = (kh / 2)
        let px = (kw / 2)
        var out: [[Double]] = ([] as! [[Double]])
        var y: Int = 0
        while (y < h) {
            var row: [Double] = ([] as! [Double])
            var x: Int = 0
            while (x < w) {
                var s: Double = 0.0
                var ky: Int = 0
                while (ky < kh) {
                    var kx: Int = 0
                    while (kx < kw) {
                        let iy = ((y &+ ky) &- py)
                        let ix = ((x &+ kx) &- px)
                        if ((((iy >= 0) && (iy < h)) && (ix >= 0)) && (ix < w)) {
                            s = Double((s + (Double(img[iy][ix]) * Double(ker[ky][kx]))))
                        }
                        kx = Int((kx &+ 1))
                    }
                    ky = Int((ky &+ 1))
                }
                row = (_append(row, s) as! [Double])
                x = Int((x &+ 1))
            }
            out = (_append(out, row) as! [[Double]])
            y = Int((y &+ 1))
        }
        return out
    }
    func horn_schunck(_ image0: [[Double]], _ image1: [[Double]], _ num_iter: Int, _ alpha: Double) -> [[[Double]]] {
        let h = Int(((image0).count))
        let w = Int((((image0[0] as! [Double])).count))
        var u: [[Double]] = (zeros(h, w) as! [[Double]])
        var v: [[Double]] = (zeros(h, w) as! [[Double]])
        let kernel_x: [[Double]] = ([([-0.25, 0.25] as! [Double]), ([-0.25, 0.25] as! [Double])] as! [[Double]])
        let kernel_y: [[Double]] = ([([-0.25, -0.25] as! [Double]), ([0.25, 0.25] as! [Double])] as! [[Double]])
        let kernel_t: [[Double]] = ([([0.25, 0.25] as! [Double]), ([0.25, 0.25] as! [Double])] as! [[Double]])
        let laplacian: [[Double]] = ([([0.0833333333333, 0.166666666667, 0.0833333333333] as! [Double]), ([0.166666666667, 0.0, 0.166666666667] as! [Double]), ([0.0833333333333, 0.166666666667, 0.0833333333333] as! [Double])] as! [[Double]])
        var it: Int = 0
        while (it < num_iter) {
            let warped: [[Double]] = (warp((image0 as! [[Double]]), (u as! [[Double]]), (v as! [[Double]])) as! [[Double]])
            let dx1: [[Double]] = (convolve((warped as! [[Double]]), (kernel_x as! [[Double]])) as! [[Double]])
            let dx2: [[Double]] = (convolve((image1 as! [[Double]]), (kernel_x as! [[Double]])) as! [[Double]])
            let dy1: [[Double]] = (convolve((warped as! [[Double]]), (kernel_y as! [[Double]])) as! [[Double]])
            let dy2: [[Double]] = (convolve((image1 as! [[Double]]), (kernel_y as! [[Double]])) as! [[Double]])
            let dt1: [[Double]] = (convolve((warped as! [[Double]]), (kernel_t as! [[Double]])) as! [[Double]])
            let dt2: [[Double]] = (convolve((image1 as! [[Double]]), (kernel_t as! [[Double]])) as! [[Double]])
            let avg_u: [[Double]] = (convolve((u as! [[Double]]), (laplacian as! [[Double]])) as! [[Double]])
            let avg_v: [[Double]] = (convolve((v as! [[Double]]), (laplacian as! [[Double]])) as! [[Double]])
            var y: Int = 0
            while (y < h) {
                var x: Int = 0
                while (x < w) {
                    let dx = (Double(dx1[y][x]) + Double(dx2[y][x]))
                    let dy = (Double(dy1[y][x]) + Double(dy2[y][x]))
                    let dt = (Double(dt1[y][x]) - Double(dt2[y][x]))
                    let au = Double(avg_u[y][x])
                    let av = Double(avg_v[y][x])
                    let numer = (((dx * au) + (dy * av)) + dt)
                    let denom = (((alpha * alpha) + (dx * dx)) + (dy * dy))
                    let upd = (numer / denom)
                    u[y][x] = Double((au - (dx * upd)))
                    v[y][x] = Double((av - (dy * upd)))
                    x = Int((x &+ 1))
                }
                y = Int((y &+ 1))
            }
            it = Int((it &+ 1))
        }
        return ([u, v] as! [[[Double]]])
    }
    func print_matrix(_ mat: [[Double]]) {
        var y: Int = 0
        while (y < Int(((mat).count))) {
            var row: [Double] = (mat[y] as! [Double])
            var x: Int = 0
            var line: String = ""
            while (x < Int(((row).count))) {
                line = ((line + String(describing: Int(round_int(Double(row[x]))))) as! String)
                if ((x &+ 1) < Int(((row).count))) {
                    line = ((line + " ") as! String)
                }
                x = Int((x &+ 1))
            }
            print(_p(line))
            y = Int((y &+ 1))
        }
    }
    func main() {
        let image0: [[Double]] = ([([0.0, 0.0, 2.0] as! [Double]), ([0.0, 0.0, 2.0] as! [Double])] as! [[Double]])
        let image1: [[Double]] = ([([0.0, 2.0, 0.0] as! [Double]), ([0.0, 2.0, 0.0] as! [Double])] as! [[Double]])
        let flows: [[[Double]]] = (horn_schunck((image0 as! [[Double]]), (image1 as! [[Double]]), 20, 0.1) as! [[[Double]]])
        let u: [[Double]] = (flows[0] as! [[Double]])
        let v: [[Double]] = (flows[1] as! [[Double]])
        _ = print_matrix((u as! [[Double]]))
        print(_p("---"))
        _ = print_matrix((v as! [[Double]]))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
