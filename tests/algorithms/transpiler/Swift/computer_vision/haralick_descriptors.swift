// Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:21:16 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func abs_int(_ n: Int) -> Int {
        if (n < 0) {
            return -n
        }
        return n
    }
    func sqrt(_ x: Double) -> Double {
        if (x <= 0.0) {
            return 0.0
        }
        var guess: Double = x
        var i: Int = 0
        while (i < 10) {
            guess = Double((Double((guess + (x / guess))) / 2.0))
            i = Int((i &+ 1))
        }
        return guess
    }
    func ln(_ x: Double) -> Double {
        if (x <= 0.0) {
            return 0.0
        }
        let e = 2.718281828
        var n: Int = 0
        var y: Double = x
        while (y >= e) {
            y = Double((y / e))
            n = Int((n &+ 1))
        }
        while (y <= (1.0 / e)) {
            y = Double((y * e))
            n = Int((n &- 1))
        }
        y = Double((y - 1.0))
        var term: Double = y
        var result: Double = 0.0
        var k: Int = 1
        while (k <= 20) {
            if (((k % 2 + 2) % 2) == 1) {
                result = Double((result + (term / Double((1.0 * Double(k))))))
            } else {
                result = Double((result - (term / Double((1.0 * Double(k))))))
            }
            term = Double((term * y))
            k = Int((k &+ 1))
        }
        return (result + Double((1.0 * Double(n))))
    }
    func matrix_concurrency(_ image: [[Int]], _ coord: [Int]) -> [[Double]] {
        let offset_x = (coord[0] as? Int ?? 0)
        let offset_y = (coord[1] as? Int ?? 0)
        var max_val: Int = 0
        for r in 0..<Int(((image).count)) {
            for c in 0..<Int((((image[r] as! [Int])).count)) {
                if ((image[r][c] as? Int ?? 0) > max_val) {
                    max_val = (image[r][c] as? Int ?? 0)
                }
            }
        }
        let size = (max_val &+ 1)
        var matrix: [[Double]] = ([] as! [[Double]])
        for i in 0..<size {
            var row: [Double] = ([] as! [Double])
            for j in 0..<size {
                row = (_append(row, 0.0) as! [Double])
            }
            matrix = (_append(matrix, row) as! [[Double]])
        }
        for x in 1..<(Int(((image).count)) &- 1) {
            for y in 1..<(Int((((image[x] as! [Int])).count)) &- 1) {
                let base = (image[x][y] as? Int ?? 0)
                let offset = (image[(x &+ offset_x)][(y &+ offset_y)] as? Int ?? 0)
                matrix[base][offset] = Double((Double(matrix[base][offset]) + 1.0))
            }
        }
        var total: Double = 0.0
        for i in 0..<size {
            for j in 0..<size {
                total = Double((total + Double(matrix[i][j])))
            }
        }
        if (total == 0.0) {
            return matrix
        }
        for i in 0..<size {
            for j in 0..<size {
                matrix[i][j] = Double((Double(matrix[i][j]) / total))
            }
        }
        return matrix
    }
    func haralick_descriptors(_ matrix: [[Double]]) -> [Double] {
        let rows = Int(((matrix).count))
        let cols = Int((((matrix[0] as! [Double])).count))
        var maximum_prob: Double = 0.0
        var correlation: Double = 0.0
        var energy: Double = 0.0
        var contrast: Double = 0.0
        var dissimilarity: Double = 0.0
        var inverse_difference: Double = 0.0
        var homogeneity: Double = 0.0
        var entropy: Double = 0.0
        var i: Int = 0
        while (i < rows) {
            var j: Int = 0
            while (j < cols) {
                let val = Double(matrix[i][j])
                if (val > maximum_prob) {
                    maximum_prob = Double(val)
                }
                correlation = Double((correlation + (Double(((1.0 * Double(i)) * Double(j))) * val)))
                energy = Double((energy + (val * val)))
                let diff = (i &- j)
                let adiff = Int(abs_int(diff))
                contrast = Double((contrast + (val * Double(((1.0 * Double(diff)) * Double(diff))))))
                dissimilarity = Double((dissimilarity + (val * Double((1.0 * Double(adiff))))))
                inverse_difference = Double((inverse_difference + (val / Double((1.0 + Double((1.0 * Double(adiff))))))))
                homogeneity = Double((homogeneity + (val / Double((1.0 + Double(((1.0 * Double(diff)) * Double(diff))))))))
                if (val > 0.0) {
                    entropy = Double((entropy - Double((val * Double(ln(Double(val)))))))
                }
                j = Int((j &+ 1))
            }
            i = Int((i &+ 1))
        }
        return ([maximum_prob, correlation, energy, contrast, dissimilarity, inverse_difference, homogeneity, entropy] as! [Double])
    }
    let image: [[Int]] = ([([0, 1, 0] as! [Int]), ([1, 0, 1] as! [Int]), ([0, 1, 0] as! [Int])] as! [[Int]])
    let glcm: [[Double]] = (matrix_concurrency((image as! [[Int]]), ([0, 1] as! [Int])) as! [[Double]])
    let descriptors: [Double] = (haralick_descriptors((glcm as! [[Double]])) as! [Double])
    var idx: Int = 0
    while (idx < Int(((descriptors).count))) {
        print(_p(String(describing: Double(descriptors[idx]))))
        idx = Int((idx &+ 1))
    }
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
