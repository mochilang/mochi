// Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:21:43 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
struct MosaicResult: Codable {
    var img: [[Int]]
    var annos: [[Double]]
    var path: String
    init() {
        self.img = []
        self.annos = []
        self.path = ""
    }
    init(img: [[Int]], annos: [[Double]], path: String) {
        self.img = img
        self.annos = annos
        self.path = path
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func update_image_and_anno(_ all_img_list: [String], _ all_annos: [[[Double]]], _ idxs: [Int], _ output_size: [Int], _ scale_range: [Double], _ filter_scale: Double) -> MosaicResult {
        let height: Int = (output_size[0] as? Int ?? 0)
        let width: Int = (output_size[1] as? Int ?? 0)
        var output_img: [[Int]] = []
        var r: Int = 0
        while (r < height) {
            var row: [Int] = []
            var c: Int = 0
            while (c < width) {
                row = (_append(row, 0) as! [Int])
                c = Int((c &+ 1))
            }
            output_img = (_append(output_img, row) as! [[Int]])
            r = Int((r &+ 1))
        }
        let scale_x: Double = (Double((Double(scale_range[0]) + Double(scale_range[1]))) / 2.0)
        let scale_y: Double = (Double((Double(scale_range[0]) + Double(scale_range[1]))) / 2.0)
        let divid_point_x: Int = Int((scale_x * Double(width)))
        let divid_point_y: Int = Int((scale_y * Double(height)))
        var new_anno: [[Double]] = []
        var path_list: [String] = []
        var i: Int = 0
        while (i < Int(((idxs).count))) {
            let index: Int = (idxs[i] as? Int ?? 0)
            let path: String = (all_img_list[index] as! String)
            path_list = (_append(path_list, path) as! [String])
            let img_annos: [[Double]] = (all_annos[index] as! [[Double]])
            if (i == 0) {
                var y0: Int = 0
                while (y0 < divid_point_y) {
                    var x0: Int = 0
                    while (x0 < divid_point_x) {
                        output_img[y0][x0] = Int((i &+ 1))
                        x0 = Int((x0 &+ 1))
                    }
                    y0 = Int((y0 &+ 1))
                }
                var j0: Int = 0
                while (j0 < Int(((img_annos).count))) {
                    let bbox: [Double] = (img_annos[j0] as! [Double])
                    let xmin: Double = (Double(bbox[1]) * scale_x)
                    let ymin: Double = (Double(bbox[2]) * scale_y)
                    let xmax: Double = (Double(bbox[3]) * scale_x)
                    let ymax: Double = (Double(bbox[4]) * scale_y)
                    new_anno = (_append(new_anno, ([Double(bbox[0]), xmin, ymin, xmax, ymax] as! [Double])) as! [[Double]])
                    j0 = Int((j0 &+ 1))
                }
            } else if (i == 1) {
                var y1: Int = 0
                while (y1 < divid_point_y) {
                    var x1: Int = divid_point_x
                    while (x1 < width) {
                        output_img[y1][x1] = Int((i &+ 1))
                        x1 = Int((x1 &+ 1))
                    }
                    y1 = Int((y1 &+ 1))
                }
                var j1: Int = 0
                while (j1 < Int(((img_annos).count))) {
                    let bbox1: [Double] = (img_annos[j1] as! [Double])
                    let xmin1: Double = (scale_x + (Double(bbox1[1]) * Double((1.0 - scale_x))))
                    let ymin1: Double = (Double(bbox1[2]) * scale_y)
                    let xmax1: Double = (scale_x + (Double(bbox1[3]) * Double((1.0 - scale_x))))
                    let ymax1: Double = (Double(bbox1[4]) * scale_y)
                    new_anno = (_append(new_anno, ([Double(bbox1[0]), xmin1, ymin1, xmax1, ymax1] as! [Double])) as! [[Double]])
                    j1 = Int((j1 &+ 1))
                }
            } else if (i == 2) {
                var y2: Int = divid_point_y
                while (y2 < height) {
                    var x2: Int = 0
                    while (x2 < divid_point_x) {
                        output_img[y2][x2] = Int((i &+ 1))
                        x2 = Int((x2 &+ 1))
                    }
                    y2 = Int((y2 &+ 1))
                }
                var j2: Int = 0
                while (j2 < Int(((img_annos).count))) {
                    let bbox2: [Double] = (img_annos[j2] as! [Double])
                    let xmin2: Double = (Double(bbox2[1]) * scale_x)
                    let ymin2: Double = (scale_y + (Double(bbox2[2]) * Double((1.0 - scale_y))))
                    let xmax2: Double = (Double(bbox2[3]) * scale_x)
                    let ymax2: Double = (scale_y + (Double(bbox2[4]) * Double((1.0 - scale_y))))
                    new_anno = (_append(new_anno, ([Double(bbox2[0]), xmin2, ymin2, xmax2, ymax2] as! [Double])) as! [[Double]])
                    j2 = Int((j2 &+ 1))
                }
            } else {
                var y3: Int = divid_point_y
                while (y3 < height) {
                    var x3: Int = divid_point_x
                    while (x3 < width) {
                        output_img[y3][x3] = Int((i &+ 1))
                        x3 = Int((x3 &+ 1))
                    }
                    y3 = Int((y3 &+ 1))
                }
                var j3: Int = 0
                while (j3 < Int(((img_annos).count))) {
                    let bbox3: [Double] = (img_annos[j3] as! [Double])
                    let xmin3: Double = (scale_x + (Double(bbox3[1]) * Double((1.0 - scale_x))))
                    let ymin3: Double = (scale_y + (Double(bbox3[2]) * Double((1.0 - scale_y))))
                    let xmax3: Double = (scale_x + (Double(bbox3[3]) * Double((1.0 - scale_x))))
                    let ymax3: Double = (scale_y + (Double(bbox3[4]) * Double((1.0 - scale_y))))
                    new_anno = (_append(new_anno, ([Double(bbox3[0]), xmin3, ymin3, xmax3, ymax3] as! [Double])) as! [[Double]])
                    j3 = Int((j3 &+ 1))
                }
            }
            
            
            i = Int((i &+ 1))
        }
        if (filter_scale > 0.0) {
            var filtered: [[Double]] = []
            var k: Int = 0
            while (k < Int(((new_anno).count))) {
                let anno: [Double] = (new_anno[k] as! [Double])
                let w: Double = (Double(anno[3]) - Double(anno[1]))
                let h: Double = (Double(anno[4]) - Double(anno[2]))
                if ((filter_scale < w) && (filter_scale < h)) {
                    filtered = (_append(filtered, anno) as! [[Double]])
                }
                k = Int((k &+ 1))
            }
            new_anno = (filtered as! [[Double]])
        }
        return MosaicResult(img: output_img, annos: new_anno, path: (path_list[0] as! String))
    }
    func main() -> Void {
        let all_img_list: [String] = (["img0.jpg", "img1.jpg", "img2.jpg", "img3.jpg"] as! [String])
        let all_annos: [[[Double]]] = ([([([0.0, 0.1, 0.1, 0.4, 0.4] as! [Double])] as! [[Double]]), ([([1.0, 0.2, 0.3, 0.5, 0.7] as! [Double])] as! [[Double]]), ([([2.0, 0.6, 0.2, 0.9, 0.5] as! [Double])] as! [[Double]]), ([([3.0, 0.5, 0.5, 0.8, 0.8] as! [Double])] as! [[Double]])] as! [[[Double]]])
        let idxs: [Int] = ([0, 1, 2, 3] as! [Int])
        let output_size: [Int] = ([100, 100] as! [Int])
        let scale_range: [Double] = ([0.4, 0.6] as! [Double])
        let filter_scale: Double = 0.05
        let res: MosaicResult = update_image_and_anno((all_img_list as! [String]), (all_annos as! [[[Double]]]), (idxs as! [Int]), (output_size as! [Int]), (scale_range as! [Double]), Double(filter_scale))
        let new_annos: [[Double]] = res.annos
        let path: String = res.path
        print(_p(("Base image: " + path)))
        print(_p(("Mosaic annotation count: " + String(describing: Int(((new_annos).count))))))
        var i: Int = 0
        while (i < Int(((new_annos).count))) {
            let a: [Double] = (new_annos[i] as! [Double])
            print(_p(((((((((String(describing: Double(a[0])) + " ") + String(describing: Double(a[1]))) + " ") + String(describing: Double(a[2]))) + " ") + String(describing: Double(a[3]))) + " ") + String(describing: Double(a[4])))))
            i = Int((i &+ 1))
        }
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
