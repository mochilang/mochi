// Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:21:11 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func flip_horizontal_image(_ img: [[Int]]) -> [[Int]] {
        var flipped: [[Int]] = ([] as! [[Int]])
        var i: Int = 0
        while (i < Int(((img).count))) {
            var row: [Int] = (img[i] as! [Int])
            var j: Int = (Int(((row).count)) &- 1)
            var new_row: [Int] = ([] as! [Int])
            while (j >= 0) {
                new_row = (_append(new_row, (row[j] as? Int ?? 0)) as! [Int])
                j = Int((j &- 1))
            }
            flipped = (_append(flipped, new_row) as! [[Int]])
            i = Int((i &+ 1))
        }
        return flipped
    }
    func flip_vertical_image(_ img: [[Int]]) -> [[Int]] {
        var flipped: [[Int]] = ([] as! [[Int]])
        var i: Int = (Int(((img).count)) &- 1)
        while (i >= 0) {
            flipped = (_append(flipped, (img[i] as! [Int])) as! [[Int]])
            i = Int((i &- 1))
        }
        return flipped
    }
    func flip_horizontal_boxes(_ boxes: [[Double]]) -> [[Double]] {
        var result: [[Double]] = ([] as! [[Double]])
        var i: Int = 0
        while (i < Int(((boxes).count))) {
            var b: [Double] = (boxes[i] as! [Double])
            let x_new = (1.0 - Double(b[1]))
            result = (_append(result, ([Double(b[0]), x_new, Double(b[2]), Double(b[3]), Double(b[4])] as! [Double])) as! [[Double]])
            i = Int((i &+ 1))
        }
        return result
    }
    func flip_vertical_boxes(_ boxes: [[Double]]) -> [[Double]] {
        var result: [[Double]] = ([] as! [[Double]])
        var i: Int = 0
        while (i < Int(((boxes).count))) {
            var b: [Double] = (boxes[i] as! [Double])
            let y_new = (1.0 - Double(b[2]))
            result = (_append(result, ([Double(b[0]), Double(b[1]), y_new, Double(b[3]), Double(b[4])] as! [Double])) as! [[Double]])
            i = Int((i &+ 1))
        }
        return result
    }
    func print_image(_ img: [[Int]]) {
        var i: Int = 0
        while (i < Int(((img).count))) {
            var row: [Int] = (img[i] as! [Int])
            var j: Int = 0
            var line: String = ""
            while (j < Int(((row).count))) {
                line = (((line + String(describing: (row[j] as? Int ?? 0))) + " ") as! String)
                j = Int((j &+ 1))
            }
            print(_p(line))
            i = Int((i &+ 1))
        }
    }
    let image: [[Int]] = ([([1, 2, 3] as! [Int]), ([4, 5, 6] as! [Int]), ([7, 8, 9] as! [Int])] as! [[Int]])
    let boxes: [[Double]] = ([([0.0, 0.25, 0.25, 0.5, 0.5] as! [Double]), ([1.0, 0.75, 0.75, 0.5, 0.5] as! [Double])] as! [[Double]])
    print(_p("Original image:"))
    _ = print_image((image as! [[Int]]))
    print(_p("[" + boxes.map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    print(_p("Horizontal flip:"))
    let h_img: [[Int]] = (flip_horizontal_image((image as! [[Int]])) as! [[Int]])
    let h_boxes: [[Double]] = (flip_horizontal_boxes((boxes as! [[Double]])) as! [[Double]])
    _ = print_image((h_img as! [[Int]]))
    print(_p("[" + h_boxes.map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    print(_p("Vertical flip:"))
    let v_img: [[Int]] = (flip_vertical_image((image as! [[Int]])) as! [[Int]])
    let v_boxes: [[Double]] = (flip_vertical_boxes((boxes as! [[Double]])) as! [[Double]])
    _ = print_image((v_img as! [[Int]]))
    print(_p("[" + v_boxes.map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
