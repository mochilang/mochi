// Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:21:52 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func maxpooling(_ arr: [[Int]], _ size: Int, _ stride: Int) -> [[Int]] {
        let n = Int(((arr).count))
        if ((n == 0) || (Int((((arr[0] as! [Int])).count)) != n)) {
            _ = fatalError("The input array is not a square matrix")
        }
        var result: [[Int]] = ([] as! [[Int]])
        var i: Int = 0
        while ((i &+ size) <= n) {
            var row: [Int] = ([] as! [Int])
            var j: Int = 0
            while ((j &+ size) <= n) {
                var max_val: Int = (arr[i][j] as? Int ?? 0)
                var r: Int = i
                while (r < (i &+ size)) {
                    var c: Int = j
                    while (c < (j &+ size)) {
                        let val = (arr[r][c] as? Int ?? 0)
                        if (val > max_val) {
                            max_val = Int(val)
                        }
                        c = Int((c &+ 1))
                    }
                    r = Int((r &+ 1))
                }
                row = (_append(row, max_val) as! [Int])
                j = Int((j &+ stride))
            }
            result = (_append(result, row) as! [[Int]])
            i = Int((i &+ stride))
        }
        return result
    }
    func avgpooling(_ arr: [[Int]], _ size: Int, _ stride: Int) -> [[Int]] {
        let n = Int(((arr).count))
        if ((n == 0) || (Int((((arr[0] as! [Int])).count)) != n)) {
            _ = fatalError("The input array is not a square matrix")
        }
        var result: [[Int]] = ([] as! [[Int]])
        var i: Int = 0
        while ((i &+ size) <= n) {
            var row: [Int] = ([] as! [Int])
            var j: Int = 0
            while ((j &+ size) <= n) {
                var sum: Int = 0
                var r: Int = i
                while (r < (i &+ size)) {
                    var c: Int = j
                    while (c < (j &+ size)) {
                        sum = Int((sum &+ (arr[r][c] as? Int ?? 0)))
                        c = Int((c &+ 1))
                    }
                    r = Int((r &+ 1))
                }
                row = (_append(row, (sum / Int((size &* size)))) as! [Int])
                j = Int((j &+ stride))
            }
            result = (_append(result, row) as! [[Int]])
            i = Int((i &+ stride))
        }
        return result
    }
    func print_matrix(_ mat: [[Int]]) -> Void {
        var i: Int = 0
        while (i < Int(((mat).count))) {
            var line: String = ""
            var j: Int = 0
            while (j < Int((((mat[i] as! [Int])).count))) {
                line = ((line + String(describing: (mat[i][j] as? Int ?? 0))) as! String)
                if (j < (Int((((mat[i] as! [Int])).count)) &- 1)) {
                    line = ((line + " ") as! String)
                }
                j = Int((j &+ 1))
            }
            print(_p(line))
            i = Int((i &+ 1))
        }
    }
    func main() {
        let arr1: [[Int]] = ([([1, 2, 3, 4] as! [Int]), ([5, 6, 7, 8] as! [Int]), ([9, 10, 11, 12] as! [Int]), ([13, 14, 15, 16] as! [Int])] as! [[Int]])
        let arr2: [[Int]] = ([([147, 180, 122] as! [Int]), ([241, 76, 32] as! [Int]), ([126, 13, 157] as! [Int])] as! [[Int]])
        _ = print_matrix((maxpooling((arr1 as! [[Int]]), 2, 2) as! [[Int]]))
        _ = print_matrix((maxpooling((arr2 as! [[Int]]), 2, 1) as! [[Int]]))
        _ = print_matrix((avgpooling((arr1 as! [[Int]]), 2, 2) as! [[Int]]))
        _ = print_matrix((avgpooling((arr2 as! [[Int]]), 2, 1) as! [[Int]]))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
