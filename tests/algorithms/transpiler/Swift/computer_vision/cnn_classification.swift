// Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:21:07 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func conv2d(_ image: [[Double]], _ kernel: [[Double]]) -> [[Double]] {
        let rows = Int(((image).count))
        let cols = Int((((image[0] as! [Double])).count))
        let k = Int(((kernel).count))
        var output: [[Double]] = ([] as! [[Double]])
        var i: Int = 0
        while (i <= (rows &- k)) {
            var row: [Double] = ([] as! [Double])
            var j: Int = 0
            while (j <= (cols &- k)) {
                var sum: Double = 0.0
                var ki: Int = 0
                while (ki < k) {
                    var kj: Int = 0
                    while (kj < k) {
                        sum = Double((sum + (Double(image[(i &+ ki)][(j &+ kj)]) * Double(kernel[ki][kj]))))
                        kj = Int((kj &+ 1))
                    }
                    ki = Int((ki &+ 1))
                }
                row = (_append(row, sum) as! [Double])
                j = Int((j &+ 1))
            }
            output = (_append(output, row) as! [[Double]])
            i = Int((i &+ 1))
        }
        return output
    }
    func relu_matrix(_ m: [[Double]]) -> [[Double]] {
        var out: [[Double]] = ([] as! [[Double]])
        for row in m {
            var new_row: [Double] = ([] as! [Double])
            for v in row {
                if (v > 0.0) {
                    new_row = (_append(new_row, v) as! [Double])
                } else {
                    new_row = (_append(new_row, 0.0) as! [Double])
                }
            }
            out = (_append(out, new_row) as! [[Double]])
        }
        return out
    }
    func max_pool2x2(_ m: [[Double]]) -> [[Double]] {
        let rows = Int(((m).count))
        let cols = Int((((m[0] as! [Double])).count))
        var out: [[Double]] = ([] as! [[Double]])
        var i: Int = 0
        while (i < rows) {
            var new_row: [Double] = ([] as! [Double])
            var j: Int = 0
            while (j < cols) {
                var max_val: Double = Double(m[i][j])
                if (Double(m[i][(j &+ 1)]) > max_val) {
                    max_val = Double(m[i][(j &+ 1)])
                }
                if (Double(m[(i &+ 1)][j]) > max_val) {
                    max_val = Double(m[(i &+ 1)][j])
                }
                if (Double(m[(i &+ 1)][(j &+ 1)]) > max_val) {
                    max_val = Double(m[(i &+ 1)][(j &+ 1)])
                }
                new_row = (_append(new_row, max_val) as! [Double])
                j = Int((j &+ 2))
            }
            out = (_append(out, new_row) as! [[Double]])
            i = Int((i &+ 2))
        }
        return out
    }
    func flatten(_ m: [[Double]]) -> [Double] {
        var res: [Double] = ([] as! [Double])
        for row in m {
            for v in row {
                res = (_append(res, v) as! [Double])
            }
        }
        return res
    }
    func dense(_ inputs: [Double], _ weights: [Double], _ bias: Double) -> Double {
        var s: Double = bias
        var i: Int = 0
        while (i < Int(((inputs).count))) {
            s = Double((s + (Double(inputs[i]) * Double(weights[i]))))
            i = Int((i &+ 1))
        }
        return s
    }
    func exp_approx(_ x: Double) -> Double {
        var sum: Double = 1.0
        var term: Double = 1.0
        var i: Int = 1
        while (i <= 10) {
            term = Double(((term * x) / Double(i)))
            sum = Double((sum + term))
            i = Int((i &+ 1))
        }
        return sum
    }
    func sigmoid(_ x: Double) -> Double {
        return (1.0 / Double((1.0 + Double(exp_approx(Double(-x))))))
    }
    let image: [[Double]] = ([([0.0, 1.0, 1.0, 0.0, 0.0, 0.0] as! [Double]), ([0.0, 1.0, 1.0, 0.0, 0.0, 0.0] as! [Double]), ([0.0, 0.0, 1.0, 1.0, 0.0, 0.0] as! [Double]), ([0.0, 0.0, 1.0, 1.0, 0.0, 0.0] as! [Double]), ([0.0, 0.0, 0.0, 0.0, 0.0, 0.0] as! [Double]), ([0.0, 0.0, 0.0, 0.0, 0.0, 0.0] as! [Double])] as! [[Double]])
    let kernel: [[Double]] = ([([1.0, 0.0, -1.0] as! [Double]), ([1.0, 0.0, -1.0] as! [Double]), ([1.0, 0.0, -1.0] as! [Double])] as! [[Double]])
    let conv: [[Double]] = (conv2d((image as! [[Double]]), (kernel as! [[Double]])) as! [[Double]])
    let activated: [[Double]] = (relu_matrix((conv as! [[Double]])) as! [[Double]])
    let pooled: [[Double]] = (max_pool2x2((activated as! [[Double]])) as! [[Double]])
    let flat: [Double] = (flatten((pooled as! [[Double]])) as! [Double])
    let weights: [Double] = ([0.5, -0.4, 0.3, 0.1] as! [Double])
    let bias: Double = 0.0
    var output = Double(dense((flat as! [Double]), (weights as! [Double]), Double(bias)))
    let probability = Double(sigmoid(Double(output)))
    if (probability >= 0.5) {
        print(_p("Abnormality detected"))
    } else {
        print(_p("Normal"))
    }
    print(_p("Probability:"))
    print(_p(probability))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
