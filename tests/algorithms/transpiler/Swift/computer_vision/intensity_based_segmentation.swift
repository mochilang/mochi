// Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:21:30 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func segment_image(_ image: [[Int]], _ thresholds: [Int]) -> [[Int]] {
        var segmented: [[Int]] = ([] as! [[Int]])
        var i: Int = 0
        while (i < Int(((image).count))) {
            var row: [Int] = ([] as! [Int])
            var j: Int = 0
            while (j < Int((((image[i] as! [Int])).count))) {
                let pixel = (image[i][j] as? Int ?? 0)
                var label: Int = 0
                var k: Int = 0
                while (k < Int(((thresholds).count))) {
                    if (pixel > (thresholds[k] as? Int ?? 0)) {
                        label = Int((k &+ 1))
                    }
                    k = Int((k &+ 1))
                }
                row = (_append(row, label) as! [Int])
                j = Int((j &+ 1))
            }
            segmented = (_append(segmented, row) as! [[Int]])
            i = Int((i &+ 1))
        }
        return segmented
    }
    func main() {
        let image: [[Int]] = ([([80, 120, 180] as! [Int]), ([40, 90, 150] as! [Int]), ([20, 60, 100] as! [Int])] as! [[Int]])
        let thresholds: [Int] = ([50, 100, 150] as! [Int])
        let segmented: [[Int]] = (segment_image((image as! [[Int]]), (thresholds as! [Int])) as! [[Int]])
        print(_p("[" + segmented.map{ if let s = $0 as? String { "\"" + s.replacingOccurrences(of: "\"", with: "\\\"") + "\"" } else { _p($0) } }.joined(separator: ", ") + "]"))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
