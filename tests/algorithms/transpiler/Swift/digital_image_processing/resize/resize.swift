// Generated by Mochi transpiler v0.10.60 on 2025-08-07 17:01:06 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func zeros3d(_ h: Int, _ w: Int, _ c: Int) -> [[[Int]]] {
        var arr: [[[Int]]] = ([] as! [[[Int]]])
        var y: Int = 0
        while (y < h) {
            var row: [[Int]] = ([] as! [[Int]])
            var x: Int = 0
            while (x < w) {
                var pixel: [Int] = ([] as! [Int])
                var k: Int = 0
                while (k < c) {
                    pixel = (_append(pixel, 0) as! [Int])
                    k = _int((k &+ 1))
                }
                row = (_append(row, pixel) as! [[Int]])
                x = _int((x &+ 1))
            }
            arr = (_append(arr, row) as! [[[Int]]])
            y = _int((y &+ 1))
        }
        return arr
    }
    func resize_nn(_ img: [[[Int]]], _ dst_w: Int, _ dst_h: Int) -> [[[Int]]] {
        let src_h = _int(((img).count))
        let src_w = _int((((img[0] as! [[Int]])).count))
        let channels = _int((((img[0][0] as! [Int])).count))
        let ratio_x = (Double(src_w) / Double(dst_w))
        let ratio_y = (Double(src_h) / Double(dst_h))
        var out: [[[Int]]] = (zeros3d(dst_h, dst_w, channels) as! [[[Int]]])
        var i: Int = 0
        while (i < dst_h) {
            var j: Int = 0
            while (j < dst_w) {
                let src_x = _int((ratio_x * Double(j)))
                let src_y = _int((ratio_y * Double(i)))
                out[i][j] = (img[src_y][src_x] as! [Int])
                j = _int((j &+ 1))
            }
            i = _int((i &+ 1))
        }
        return out
    }
    func main() {
        let img: [[[Int]]] = ([([([0, 0, 0] as! [Int]), ([255, 255, 255] as! [Int])] as! [[Int]]), ([([255, 0, 0] as! [Int]), ([0, 255, 0] as! [Int])] as! [[Int]])] as! [[[Int]]])
        let resized: [[[Int]]] = (resize_nn((img as! [[[Int]]]), 4, 4) as! [[[Int]]])
        print(_p("[" + resized.map{ if let s = $0 as? String { "\"" + s.replacingOccurrences(of: "\"", with: "\\\"") + "\"" } else { _p($0) } }.joined(separator: ", ") + "]"))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
