// Generated by Mochi transpiler v0.10.59 on 2025-08-07 00:30:08 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func ndvi(_ red: Double, _ nir: Double) -> Double {
        return (Double((nir - red)) / Double((nir + red)))
    }
    func bndvi(_ blue: Double, _ nir: Double) -> Double {
        return (Double((nir - blue)) / Double((nir + blue)))
    }
    func gndvi(_ green: Double, _ nir: Double) -> Double {
        return (Double((nir - green)) / Double((nir + green)))
    }
    func ndre(_ redEdge: Double, _ nir: Double) -> Double {
        return (Double((nir - redEdge)) / Double((nir + redEdge)))
    }
    func ccci(_ red: Double, _ redEdge: Double, _ nir: Double) -> Double {
        return (Double(ndre(Double(redEdge), Double(nir))) / Double(ndvi(Double(red), Double(nir))))
    }
    func cvi(_ red: Double, _ green: Double, _ nir: Double) -> Double {
        return (Double((nir * red)) / Double((green * green)))
    }
    func gli(_ red: Double, _ green: Double, _ blue: Double) -> Double {
        return (Double((((2.0 * green) - red) - blue)) / Double((((2.0 * green) + red) + blue)))
    }
    func dvi(_ red: Double, _ nir: Double) -> Double {
        return (nir / red)
    }
    func calc(_ index: String, _ red: Double, _ green: Double, _ blue: Double, _ redEdge: Double, _ nir: Double) -> Double {
        if (index == "NDVI") {
            return Double(ndvi(Double(red), Double(nir)))
        }
        if (index == "BNDVI") {
            return Double(bndvi(Double(blue), Double(nir)))
        }
        if (index == "GNDVI") {
            return Double(gndvi(Double(green), Double(nir)))
        }
        if (index == "NDRE") {
            return Double(ndre(Double(redEdge), Double(nir)))
        }
        if (index == "CCCI") {
            return Double(ccci(Double(red), Double(redEdge), Double(nir)))
        }
        if (index == "CVI") {
            return Double(cvi(Double(red), Double(green), Double(nir)))
        }
        if (index == "GLI") {
            return Double(gli(Double(red), Double(green), Double(blue)))
        }
        if (index == "DVI") {
            return Double(dvi(Double(red), Double(nir)))
        }
        return 0.0
    }
    func main() {
        let red = 50.0
        let green = 30.0
        let blue = 10.0
        let redEdge = 40.0
        let nir = 100.0
        print(_p(("NDVI=" + String(describing: Double(ndvi(Double(red), Double(nir)))))))
        print(_p(("CCCI=" + String(describing: Double(ccci(Double(red), Double(redEdge), Double(nir)))))))
        print(_p(("CVI=" + String(describing: Double(cvi(Double(red), Double(green), Double(nir)))))))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
