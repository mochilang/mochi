// Generated by Mochi transpiler v0.10.59 on 2025-08-07 00:29:47 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let PI = 3.141592653589793
    func sqrtApprox(_ x: Double) -> Double {
        var guess: Double = (x / 2.0)
        var i: Int = 0
        while (i < 20) {
            guess = Double((Double((guess + (x / guess))) / 2.0))
            i = Int((i &+ 1))
        }
        return guess
    }
    func atanApprox(_ x: Double) -> Double {
        if (x > 1.0) {
            return ((PI / 2.0) - (x / Double(((x * x) + 0.28))))
        }
        if (x < Double(-1.0)) {
            return ((-PI / 2.0) - (x / Double(((x * x) + 0.28))))
        }
        return (x / Double((1.0 + ((0.28 * x) * x))))
    }
    func atan2Approx(_ y: Double, _ x: Double) -> Double {
        if (x > 0.0) {
            let r = Double(atanApprox(Double((y / x))))
            return r
        }
        if (x < 0.0) {
            if (y >= 0.0) {
                return (Double(atanApprox(Double((y / x)))) + PI)
            }
            return (Double(atanApprox(Double((y / x)))) - PI)
        }
        if (y > 0.0) {
            return (PI / 2.0)
        }
        if (y < 0.0) {
            return (-PI / 2.0)
        }
        return 0.0
    }
    func deg(_ rad: Double) -> Double {
        return ((rad * 180.0) / PI)
    }
    let GAUSSIAN_KERNEL: [[Double?]] = ([([0.0625, 0.125, 0.0625] as! [Double?]), ([0.125, 0.25, 0.125] as! [Double?]), ([0.0625, 0.125, 0.0625] as! [Double?])] as! [[Double?]])
    let SOBEL_GX: [[Double?]] = ([([-1.0, 0.0, 1.0] as! [Double?]), ([-2.0, 0.0, 2.0] as! [Double?]), ([-1.0, 0.0, 1.0] as! [Double?])] as! [[Double?]])
    let SOBEL_GY: [[Double?]] = ([([1.0, 2.0, 1.0] as! [Double?]), ([0.0, 0.0, 0.0] as! [Double?]), ([-1.0, -2.0, -1.0] as! [Double?])] as! [[Double?]])
    func zero_matrix(_ h: Int, _ w: Int) -> [[Double?]] {
        var out: [[Double?]] = ([] as! [[Double?]])
        var i: Int = 0
        while (i < h) {
            var row: [Double?] = ([] as! [Double?])
            var j: Int = 0
            while (j < w) {
                row = (_append(row, 0.0) as! [Double?])
                j = Int((j &+ 1))
            }
            out = (_append(out, row) as! [[Double?]])
            i = Int((i &+ 1))
        }
        return out
    }
    func convolve(_ img: [[Double?]], _ kernel: [[Double?]]) -> [[Double?]] {
        let h = Int(((img).count))
        let w = Int((((img[0] as! [Double?])).count))
        let k = Int(((kernel).count))
        let pad = (k / 2)
        var out: [[Double?]] = (zero_matrix(h, w) as! [[Double?]])
        var y: Int = pad
        while (y < (h &- pad)) {
            var x: Int = pad
            while (x < (w &- pad)) {
                var sum: Double = 0.0
                var ky: Int = 0
                while (ky < k) {
                    var kx: Int = 0
                    while (kx < k) {
                        let pixel = Double(img[((y &- pad) &+ ky)][((x &- pad) &+ kx)])
                        let weight = Double(kernel[ky][kx])
                        sum = Double((sum + (pixel * weight)))
                        kx = Int((kx &+ 1))
                    }
                    ky = Int((ky &+ 1))
                }
                out[y][x] = Double(sum)
                x = Int((x &+ 1))
            }
            y = Int((y &+ 1))
        }
        return out
    }
    func gaussian_blur(_ img: [[Double?]]) -> [[Double?]] {
        return (convolve((img as! [[Double?]]), (GAUSSIAN_KERNEL as! [[Double?]])) as! [[Double?]])
    }
    func sobel_filter(_ img: [[Double?]]) -> [String: [[Double?]]] {
        let gx: [[Double?]] = (convolve((img as! [[Double?]]), (SOBEL_GX as! [[Double?]])) as! [[Double?]])
        let gy: [[Double?]] = (convolve((img as! [[Double?]]), (SOBEL_GY as! [[Double?]])) as! [[Double?]])
        let h = Int(((img).count))
        let w = Int((((img[0] as! [Double?])).count))
        var grad: [[Double?]] = (zero_matrix(h, w) as! [[Double?]])
        var dir: [[Double?]] = (zero_matrix(h, w) as! [[Double?]])
        var i: Int = 0
        while (i < h) {
            var j: Int = 0
            while (j < w) {
                let gxx = Double(gx[i][j])
                let gyy = Double(gy[i][j])
                grad[i][j] = Double(sqrtApprox(Double(((gxx * gxx) + (gyy * gyy)))))
                dir[i][j] = Double((Double(deg(Double(atan2Approx(Double(gyy), Double(gxx))))) + 180.0))
                j = Int((j &+ 1))
            }
            i = Int((i &+ 1))
        }
        return (["grad": grad, "dir": dir] as! [String: [[Double?]]])
    }
    func suppress_non_maximum(_ h: Int, _ w: Int, _ direction: [[Double?]], _ grad: [[Double?]]) -> [[Double?]] {
        var dest: [[Double?]] = (zero_matrix(h, w) as! [[Double?]])
        var r: Int = 1
        while (r < (h &- 1)) {
            var c: Int = 1
            while (c < (w &- 1)) {
                let angle = Double(direction[r][c])
                var q: Double = 0.0
                var p: Double = 0.0
                if ((((angle >= 0.0) && (angle < 22.5)) || ((angle >= 157.5) && (angle <= 180.0))) || (angle >= 337.5)) {
                    q = Double(grad[r][(c &+ 1)])
                    p = Double(grad[r][(c &- 1)])
                } else if (((angle >= 22.5) && (angle < 67.5)) || ((angle >= 202.5) && (angle < 247.5))) {
                    q = Double(grad[(r &+ 1)][(c &- 1)])
                    p = Double(grad[(r &- 1)][(c &+ 1)])
                } else if (((angle >= 67.5) && (angle < 112.5)) || ((angle >= 247.5) && (angle < 292.5))) {
                    q = Double(grad[(r &+ 1)][c])
                    p = Double(grad[(r &- 1)][c])
                } else {
                    q = Double(grad[(r &- 1)][(c &- 1)])
                    p = Double(grad[(r &+ 1)][(c &+ 1)])
                }
                
                
                if ((Double(grad[r][c]) >= q) && (Double(grad[r][c]) >= p)) {
                    dest[r][c] = Double(grad[r][c])
                }
                c = Int((c &+ 1))
            }
            r = Int((r &+ 1))
        }
        return dest
    }
    func double_threshold(_ h: Int, _ w: Int, _ img: inout [[Double?]], _ low: Double, _ high: Double, _ weak: Double, _ strong: Double) {
        var r: Int = 0
        while (r < h) {
            var c: Int = 0
            while (c < w) {
                let v = Double(img[r][c])
                if (v >= high) {
                    img[r][c] = Double(strong)
                } else if (v < low) {
                    img[r][c] = 0.0
                } else {
                    img[r][c] = Double(weak)
                }
                
                c = Int((c &+ 1))
            }
            r = Int((r &+ 1))
        }
    }
    func track_edge(_ h: Int, _ w: Int, _ img: inout [[Double?]], _ weak: Double, _ strong: Double) {
        var r: Int = 1
        while (r < (h &- 1)) {
            var c: Int = 1
            while (c < (w &- 1)) {
                if (Double(img[r][c]) == weak) {
                    if ((((((((Double(img[(r &+ 1)][c]) == strong) || (Double(img[(r &- 1)][c]) == strong)) || (Double(img[r][(c &+ 1)]) == strong)) || (Double(img[r][(c &- 1)]) == strong)) || (Double(img[(r &- 1)][(c &- 1)]) == strong)) || (Double(img[(r &- 1)][(c &+ 1)]) == strong)) || (Double(img[(r &+ 1)][(c &- 1)]) == strong)) || (Double(img[(r &+ 1)][(c &+ 1)]) == strong)) {
                        img[r][c] = Double(strong)
                    } else {
                        img[r][c] = 0.0
                    }
                }
                c = Int((c &+ 1))
            }
            r = Int((r &+ 1))
        }
    }
    func canny(_ image: [[Double?]], _ low: Double, _ high: Double, _ weak: Double, _ strong: Double) -> [[Double?]] {
        let blurred: [[Double?]] = (gaussian_blur((image as! [[Double?]])) as! [[Double?]])
        let sob: [String: [[Double?]]] = (sobel_filter((blurred as! [[Double?]])) as! [String: [[Double?]]])
        let grad: [[Double?]] = (sob[String("grad")] as! [[Double?]])
        let direction: [[Double?]] = (sob[String("dir")] as! [[Double?]])
        let h = Int(((image).count))
        let w = Int((((image[0] as! [Double?])).count))
        var suppressed: [[Double?]] = (suppress_non_maximum(h, w, (direction as! [[Double?]]), (grad as! [[Double?]])) as! [[Double?]])
        _ = double_threshold(h, w, &suppressed, Double(low), Double(high), Double(weak), Double(strong))
        _ = track_edge(h, w, &suppressed, Double(weak), Double(strong))
        return suppressed
    }
    func print_image(_ img: [[Double?]]) {
        var r: Int = 0
        while (r < Int(((img).count))) {
            var c: Int = 0
            var line: String = ""
            while (c < Int((((img[r] as! [Double?])).count))) {
                line = (((line + String(describing: (img[r][c] as? Int ?? 0))) + " ") as! String)
                c = Int((c &+ 1))
            }
            print(_p(line))
            r = Int((r &+ 1))
        }
    }
    let image: [[Double?]] = ([([0.0, 0.0, 0.0, 0.0, 0.0] as! [Double?]), ([0.0, 255.0, 255.0, 255.0, 0.0] as! [Double?]), ([0.0, 255.0, 255.0, 255.0, 0.0] as! [Double?]), ([0.0, 255.0, 255.0, 255.0, 0.0] as! [Double?]), ([0.0, 0.0, 0.0, 0.0, 0.0] as! [Double?])] as! [[Double?]])
    let edges: [[Double?]] = (canny((image as! [[Double?]]), 20.0, 40.0, 128.0, 255.0) as! [[Double?]])
    _ = print_image((edges as! [[Double?]]))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
