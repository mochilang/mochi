// Generated by Mochi transpiler v0.10.59 on 2025-08-07 00:30:16 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func mat_inverse3(_ m: [[Double?]]) -> [[Double?]] {
        let a = Double(m[0][0])
        let b = Double(m[0][1])
        let c = Double(m[0][2])
        let d = Double(m[1][0])
        let e = Double(m[1][1])
        let f = Double(m[1][2])
        let g = Double(m[2][0])
        let h = Double(m[2][1])
        let i = Double(m[2][2])
        let det = (((a * Double(((e * i) - (f * h)))) - (b * Double(((d * i) - (f * g))))) + (c * Double(((d * h) - (e * g)))))
        if (det == 0.0) {
            _ = fatalError("singular matrix")
        }
        let adj00 = ((e * i) - (f * h))
        let adj01 = ((c * h) - (b * i))
        let adj02 = ((b * f) - (c * e))
        let adj10 = ((f * g) - (d * i))
        let adj11 = ((a * i) - (c * g))
        let adj12 = ((c * d) - (a * f))
        let adj20 = ((d * h) - (e * g))
        let adj21 = ((b * g) - (a * h))
        let adj22 = ((a * e) - (b * d))
        var inv: [[Double?]] = ([] as! [[Double?]])
        inv = (_append(inv, ([(adj00 / det), (adj01 / det), (adj02 / det)] as! [Double?])) as! [[Double?]])
        inv = (_append(inv, ([(adj10 / det), (adj11 / det), (adj12 / det)] as! [Double?])) as! [[Double?]])
        inv = (_append(inv, ([(adj20 / det), (adj21 / det), (adj22 / det)] as! [Double?])) as! [[Double?]])
        return inv
    }
    func mat_vec_mul(_ m: [[Double?]], _ v: [Double?]) -> [Double?] {
        var res: [Double?] = ([] as! [Double?])
        var i: Int = 0
        while (i < 3) {
            let val = (((Double(m[i][0]) * Double(v[0])) + (Double(m[i][1]) * Double(v[1]))) + (Double(m[i][2]) * Double(v[2])))
            res = (_append(res, val) as! [Double?])
            i = Int((i &+ 1))
        }
        return res
    }
    func create_matrix(_ rows: Int, _ cols: Int, _ value: Int) -> [[Int?]] {
        var result: [[Int?]] = ([] as! [[Int?]])
        var r: Int = 0
        while (r < rows) {
            var row: [Int?] = ([] as! [Int?])
            var c: Int = 0
            while (c < cols) {
                row = (_append(row, value) as! [Int?])
                c = Int((c &+ 1))
            }
            result = (_append(result, row) as! [[Int?]])
            r = Int((r &+ 1))
        }
        return result
    }
    func round_to_int(_ x: Double) -> Int {
        if (x >= 0.0) {
            return Int(_int((x + 0.5)))
        }
        return Int(_int((x - 0.5)))
    }
    func get_rotation(_ img: [[Int?]], _ pt1: [[Double?]], _ pt2: [[Double?]], _ rows: Int, _ cols: Int) -> [[Int?]] {
        let src: [[Double?]] = ([([Double(pt1[0][0]), Double(pt1[0][1]), 1.0] as! [Double?]), ([Double(pt1[1][0]), Double(pt1[1][1]), 1.0] as! [Double?]), ([Double(pt1[2][0]), Double(pt1[2][1]), 1.0] as! [Double?])] as! [[Double?]])
        let inv: [[Double?]] = (mat_inverse3((src as! [[Double?]])) as! [[Double?]])
        let vecx: [Double?] = ([Double(pt2[0][0]), Double(pt2[1][0]), Double(pt2[2][0])] as! [Double?])
        let vecy: [Double?] = ([Double(pt2[0][1]), Double(pt2[1][1]), Double(pt2[2][1])] as! [Double?])
        let avec: [Double?] = (mat_vec_mul((inv as! [[Double?]]), (vecx as! [Double?])) as! [Double?])
        let bvec: [Double?] = (mat_vec_mul((inv as! [[Double?]]), (vecy as! [Double?])) as! [Double?])
        let a0 = Double(avec[0])
        let a1 = Double(avec[1])
        let a2 = Double(avec[2])
        let b0 = Double(bvec[0])
        let b1 = Double(bvec[1])
        let b2 = Double(bvec[2])
        var out: [[Int?]] = (create_matrix(rows, cols, 0) as! [[Int?]])
        var y: Int = 0
        while (y < rows) {
            var x: Int = 0
            while (x < cols) {
                let xf = (((a0 * Double((1.0 * Double(x)))) + (a1 * Double((1.0 * Double(y))))) + a2)
                let yf = (((b0 * Double((1.0 * Double(x)))) + (b1 * Double((1.0 * Double(y))))) + b2)
                let sx = Int(round_to_int(Double(xf)))
                let sy = Int(round_to_int(Double(yf)))
                if ((((sx >= 0) && (sx < cols)) && (sy >= 0)) && (sy < rows)) {
                    out[sy][sx] = (img[y][x] as? Int ?? 0)
                }
                x = Int((x &+ 1))
            }
            y = Int((y &+ 1))
        }
        return out
    }
    let img: [[Int?]] = ([([1, 2, 3] as! [Int?]), ([4, 5, 6] as! [Int?]), ([7, 8, 9] as! [Int?])] as! [[Int?]])
    let pts1: [[Double?]] = ([([0.0, 0.0] as! [Double?]), ([2.0, 0.0] as! [Double?]), ([0.0, 2.0] as! [Double?])] as! [[Double?]])
    let pts2: [[Double?]] = ([([0.0, 2.0] as! [Double?]), ([0.0, 0.0] as! [Double?]), ([2.0, 2.0] as! [Double?])] as! [[Double?]])
    let rotated: [[Int?]] = (get_rotation((img as! [[Int?]]), (pts1 as! [[Double?]]), (pts2 as! [[Double?]]), 3, 3) as! [[Int?]])
    print(_p("[" + rotated.map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
