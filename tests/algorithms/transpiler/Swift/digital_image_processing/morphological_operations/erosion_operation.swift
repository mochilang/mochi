// Generated by Mochi transpiler v0.10.59 on 2025-08-07 00:30:12 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func rgb_to_gray(_ rgb: [[[Int?]]]) -> [[Double?]] {
        var gray: [[Double?]] = ([] as! [[Double?]])
        var i: Int = 0
        while (i < Int(((rgb).count))) {
            var row: [Double?] = ([] as! [Double?])
            var j: Int = 0
            while (j < Int((((rgb[i] as! [[Int?]])).count))) {
                let r = Double(rgb[i][j][0])
                let g = Double(rgb[i][j][1])
                let b = Double(rgb[i][j][2])
                let value = (((0.2989 * r) + (0.587 * g)) + (0.114 * b))
                row = (_append(row, value) as! [Double?])
                j = Int((j &+ 1))
            }
            gray = (_append(gray, row) as! [[Double?]])
            i = Int((i &+ 1))
        }
        return gray
    }
    func gray_to_binary(_ gray: [[Double?]]) -> [[Bool?]] {
        var binary: [[Bool?]] = ([] as! [[Bool?]])
        var i: Int = 0
        while (i < Int(((gray).count))) {
            var row: [Bool?] = ([] as! [Bool?])
            var j: Int = 0
            while (j < Int((((gray[i] as! [Double?])).count))) {
                row = (_append(row, ((Double(gray[i][j]) > 127.0) && (Double(gray[i][j]) <= 255.0))) as! [Bool?])
                j = Int((j &+ 1))
            }
            binary = (_append(binary, row) as! [[Bool?]])
            i = Int((i &+ 1))
        }
        return binary
    }
    func erosion(_ image: [[Bool?]], _ kernel: [[Int?]]) -> [[Bool?]] {
        let h = Int(((image).count))
        let w = Int((((image[0] as! [Bool?])).count))
        let k_h = Int(((kernel).count))
        let k_w = Int((((kernel[0] as! [Int?])).count))
        let pad_y = (k_h / 2)
        let pad_x = (k_w / 2)
        var padded: [[Bool?]] = ([] as! [[Bool?]])
        var y: Int = 0
        while (y < (h &+ (2 &* pad_y))) {
            var row: [Bool?] = ([] as! [Bool?])
            var x: Int = 0
            while (x < (w &+ (2 &* pad_x))) {
                row = (_append(row, false) as! [Bool?])
                x = Int((x &+ 1))
            }
            padded = (_append(padded, row) as! [[Bool?]])
            y = Int((y &+ 1))
        }
        y = 0
        while (y < h) {
            var x: Int = 0
            while (x < w) {
                padded[(pad_y &+ y)][(pad_x &+ x)] = (image[y][x] as! Bool)
                x = Int((x &+ 1))
            }
            y = Int((y &+ 1))
        }
        var output: [[Bool?]] = ([] as! [[Bool?]])
        y = 0
        while (y < h) {
            var row_out: [Bool?] = ([] as! [Bool?])
            var x: Int = 0
            while (x < w) {
                var sum: Int = 0
                var ky: Int = 0
                while (ky < k_h) {
                    var kx: Int = 0
                    while (kx < k_w) {
                        if (((kernel[ky][kx] as? Int ?? 0) == 1) && (padded[(y &+ ky)][(x &+ kx)] as! Bool)) {
                            sum = Int((sum &+ 1))
                        }
                        kx = Int((kx &+ 1))
                    }
                    ky = Int((ky &+ 1))
                }
                row_out = (_append(row_out, (sum == 5)) as! [Bool?])
                x = Int((x &+ 1))
            }
            output = (_append(output, row_out) as! [[Bool?]])
            y = Int((y &+ 1))
        }
        return output
    }
    let rgb_img: [[[Int?]]] = ([([([127, 255, 0] as! [Int?])] as! [[Int?]])] as! [[[Int?]]])
    print(_p("[" + (rgb_to_gray((rgb_img as! [[[Int?]]])) as! [[Double?]]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    let gray_img: [[Double?]] = ([([127.0, 255.0, 0.0] as! [Double?])] as! [[Double?]])
    print(_p("[" + (gray_to_binary((gray_img as! [[Double?]])) as! [[Bool?]]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    let img1: [[Bool?]] = ([([true, true, false] as! [Bool?])] as! [[Bool?]])
    let kernel1: [[Int?]] = ([([0, 1, 0] as! [Int?])] as! [[Int?]])
    print(_p("[" + (erosion((img1 as! [[Bool?]]), (kernel1 as! [[Int?]])) as! [[Bool?]]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    let img2: [[Bool?]] = ([([true, false, false] as! [Bool?])] as! [[Bool?]])
    let kernel2: [[Int?]] = ([([1, 1, 0] as! [Int?])] as! [[Int?]])
    print(_p("[" + (erosion((img2 as! [[Bool?]]), (kernel2 as! [[Int?]])) as! [[Bool?]]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
