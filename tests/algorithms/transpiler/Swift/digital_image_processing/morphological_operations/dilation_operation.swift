// Generated by Mochi transpiler v0.10.59 on 2025-08-07 00:30:10 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func rgb_to_gray(_ rgb: [[[Int?]]]) -> [[Double?]] {
        var result: [[Double?]] = ([] as! [[Double?]])
        var i: Int = 0
        while (i < Int(((rgb).count))) {
            var row: [Double?] = ([] as! [Double?])
            var j: Int = 0
            while (j < Int((((rgb[i] as! [[Int?]])).count))) {
                let r = (rgb[i][j][0] as? Int ?? 0)
                let g = (rgb[i][j][1] as? Int ?? 0)
                let b = (rgb[i][j][2] as? Int ?? 0)
                let gray = (((0.2989 * Double((1.0 * Double(r)))) + (0.587 * Double((1.0 * Double(g))))) + (0.114 * Double((1.0 * Double(b)))))
                row = (_append(row, gray) as! [Double?])
                j = Int((j &+ 1))
            }
            result = (_append(result, row) as! [[Double?]])
            i = Int((i &+ 1))
        }
        return result
    }
    func gray_to_binary(_ gray: [[Double?]]) -> [[Int?]] {
        var result: [[Int?]] = ([] as! [[Int?]])
        var i: Int = 0
        while (i < Int(((gray).count))) {
            var row: [Int?] = ([] as! [Int?])
            var j: Int = 0
            while (j < Int((((gray[i] as! [Double?])).count))) {
                let v = Double(gray[i][j])
                if ((v > 127.0) && (v <= 255.0)) {
                    row = (_append(row, 1) as! [Int?])
                } else {
                    row = (_append(row, 0) as! [Int?])
                }
                j = Int((j &+ 1))
            }
            result = (_append(result, row) as! [[Int?]])
            i = Int((i &+ 1))
        }
        return result
    }
    func dilation(_ image: [[Int?]], _ kernel: [[Int?]]) -> [[Int?]] {
        let img_h = Int(((image).count))
        let img_w = Int((((image[0] as! [Int?])).count))
        let k_h = Int(((kernel).count))
        let k_w = Int((((kernel[0] as! [Int?])).count))
        let pad_h = (k_h / 2)
        let pad_w = (k_w / 2)
        let p_h = (img_h &+ (2 &* pad_h))
        let p_w = (img_w &+ (2 &* pad_w))
        var padded: [[Int?]] = ([] as! [[Int?]])
        var i: Int = 0
        while (i < p_h) {
            var row: [Int?] = ([] as! [Int?])
            var j: Int = 0
            while (j < p_w) {
                row = (_append(row, 0) as! [Int?])
                j = Int((j &+ 1))
            }
            padded = (_append(padded, row) as! [[Int?]])
            i = Int((i &+ 1))
        }
        i = 0
        while (i < img_h) {
            var j: Int = 0
            while (j < img_w) {
                padded[(pad_h &+ i)][(pad_w &+ j)] = (image[i][j] as? Int ?? 0)
                j = Int((j &+ 1))
            }
            i = Int((i &+ 1))
        }
        var output: [[Int?]] = ([] as! [[Int?]])
        i = 0
        while (i < img_h) {
            var row: [Int?] = ([] as! [Int?])
            var j: Int = 0
            while (j < img_w) {
                var sum: Int = 0
                var ky: Int = 0
                while (ky < k_h) {
                    var kx: Int = 0
                    while (kx < k_w) {
                        if ((kernel[ky][kx] as? Int ?? 0) == 1) {
                            sum = Int((sum &+ (padded[(i &+ ky)][(j &+ kx)] as? Int ?? 0)))
                        }
                        kx = Int((kx &+ 1))
                    }
                    ky = Int((ky &+ 1))
                }
                if (sum > 0) {
                    row = (_append(row, 1) as! [Int?])
                } else {
                    row = (_append(row, 0) as! [Int?])
                }
                j = Int((j &+ 1))
            }
            output = (_append(output, row) as! [[Int?]])
            i = Int((i &+ 1))
        }
        return output
    }
    func print_float_matrix(_ mat: [[Double?]]) -> Void {
        var i: Int = 0
        while (i < Int(((mat).count))) {
            var line: String = ""
            var j: Int = 0
            while (j < Int((((mat[i] as! [Double?])).count))) {
                line = ((line + String(describing: Double(mat[i][j]))) as! String)
                if (j < (Int((((mat[i] as! [Double?])).count)) &- 1)) {
                    line = ((line + " ") as! String)
                }
                j = Int((j &+ 1))
            }
            print(_p(line))
            i = Int((i &+ 1))
        }
    }
    func print_int_matrix(_ mat: [[Int?]]) -> Void {
        var i: Int = 0
        while (i < Int(((mat).count))) {
            var line: String = ""
            var j: Int = 0
            while (j < Int((((mat[i] as! [Int?])).count))) {
                line = ((line + String(describing: (mat[i][j] as? Int ?? 0))) as! String)
                if (j < (Int((((mat[i] as! [Int?])).count)) &- 1)) {
                    line = ((line + " ") as! String)
                }
                j = Int((j &+ 1))
            }
            print(_p(line))
            i = Int((i &+ 1))
        }
    }
    func main() {
        let rgb_example: [[[Int?]]] = ([([([127, 255, 0] as! [Int?])] as! [[Int?]])] as! [[[Int?]]])
        _ = print_float_matrix((rgb_to_gray((rgb_example as! [[[Int?]]])) as! [[Double?]]))
        let gray_example: [[Double?]] = ([([26.0, 255.0, 14.0] as! [Double?]), ([5.0, 147.0, 20.0] as! [Double?]), ([1.0, 200.0, 0.0] as! [Double?])] as! [[Double?]])
        _ = print_int_matrix((gray_to_binary((gray_example as! [[Double?]])) as! [[Int?]]))
        let binary_image: [[Int?]] = ([([0, 1, 0] as! [Int?]), ([0, 1, 0] as! [Int?]), ([0, 1, 0] as! [Int?])] as! [[Int?]])
        let kernel: [[Int?]] = ([([0, 1, 0] as! [Int?]), ([1, 1, 1] as! [Int?]), ([0, 1, 0] as! [Int?])] as! [[Int?]])
        _ = print_int_matrix((dilation((binary_image as! [[Int?]]), (kernel as! [[Int?]])) as! [[Int?]]))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
