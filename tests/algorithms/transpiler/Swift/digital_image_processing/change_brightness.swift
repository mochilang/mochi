// Generated by Mochi transpiler v0.10.59 on 2025-08-07 00:29:37 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func clamp(_ value: Int) -> Int {
        if (value < 0) {
            return 0
        }
        if (value > 255) {
            return 255
        }
        return value
    }
    func change_brightness(_ img: [[Int?]], _ level: Int) -> [[Int?]] {
        if ((level < Int(-255)) || (level > 255)) {
            _ = fatalError("level must be between -255 and 255")
        }
        var result: [[Int?]] = ([] as! [[Int?]])
        var i: Int = 0
        while (i < Int(((img).count))) {
            var row_res: [Int?] = ([] as! [Int?])
            var j: Int = 0
            while (j < Int((((img[i] as! [Int?])).count))) {
                row_res = (_append(row_res, Int(clamp(((img[i][j] as? Int ?? 0) &+ level)))) as! [Int?])
                j = Int((j &+ 1))
            }
            result = (_append(result, row_res) as! [[Int?]])
            i = Int((i &+ 1))
        }
        return result
    }
    let sample: [[Int?]] = ([([100, 150] as! [Int?]), ([200, 250] as! [Int?])] as! [[Int?]])
    print(_p("[" + (change_brightness((sample as! [[Int?]]), 30) as! [[Int?]]).map{ if let s = $0 as? String { "\"" + s.replacingOccurrences(of: "\"", with: "\\\"") + "\"" } else { _p($0) } }.joined(separator: ", ") + "]"))
    print(_p("[" + (change_brightness((sample as! [[Int?]]), -60) as! [[Int?]]).map{ if let s = $0 as? String { "\"" + s.replacingOccurrences(of: "\"", with: "\\\"") + "\"" } else { _p($0) } }.joined(separator: ", ") + "]"))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
