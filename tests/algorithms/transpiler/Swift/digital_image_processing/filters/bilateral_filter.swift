// Generated by Mochi transpiler v0.10.59 on 2025-08-07 00:29:49 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let PI = 3.141592653589793
    func abs(_ x: Double) -> Double {
        if (x < 0.0) {
            return -x
        }
        return x
    }
    func sqrtApprox(_ x: Double) -> Double {
        if (x <= 0.0) {
            return 0.0
        }
        var guess: Double = x
        var i: Int = 0
        while (i < 10) {
            guess = Double((Double((guess + (x / guess))) / 2.0))
            i = Int((i &+ 1))
        }
        return guess
    }
    func expApprox(_ x: Double) -> Double {
        var term: Double = 1.0
        var sum: Double = 1.0
        var n: Int = 1
        while (n < 10) {
            term = Double(((term * x) / Double(n)))
            sum = Double((sum + term))
            n = Int((n &+ 1))
        }
        return sum
    }
    func vec_gaussian(_ mat: [[Double?]], _ variance: Double) -> [[Double?]] {
        var i: Int = 0
        var out: [[Double?]] = ([] as! [[Double?]])
        while (i < Int(((mat).count))) {
            var row: [Double?] = ([] as! [Double?])
            var j: Int = 0
            while (j < Int((((mat[i] as! [Double?])).count))) {
                let v = Double(mat[i][j])
                let e = (-Double((v * v)) / Double((2.0 * variance)))
                row = ((row + ([Double(expApprox(Double(e)))] as! [Double?])) as! [Double?])
                j = Int((j &+ 1))
            }
            out = ((out + ([row] as! [[Double?]])) as! [[Double?]])
            i = Int((i &+ 1))
        }
        return out
    }
    func get_slice(_ img: [[Double?]], _ x: Int, _ y: Int, _ kernel_size: Int) -> [[Double?]] {
        let half = (kernel_size / 2)
        var i: Int = (x &- half)
        var slice: [[Double?]] = ([] as! [[Double?]])
        while (i <= (x &+ half)) {
            var row: [Double?] = ([] as! [Double?])
            var j: Int = (y &- half)
            while (j <= (y &+ half)) {
                row = ((row + ([Double(img[i][j])] as! [Double?])) as! [Double?])
                j = Int((j &+ 1))
            }
            slice = ((slice + ([row] as! [[Double?]])) as! [[Double?]])
            i = Int((i &+ 1))
        }
        return slice
    }
    func get_gauss_kernel(_ kernel_size: Int, _ spatial_variance: Double) -> [[Double?]] {
        var arr: [[Double?]] = ([] as! [[Double?]])
        var i: Int = 0
        while (i < kernel_size) {
            var row: [Double?] = ([] as! [Double?])
            var j: Int = 0
            while (j < kernel_size) {
                let di = Double((i &- (kernel_size / 2)))
                let dj = Double((j &- (kernel_size / 2)))
                let dist = Double(sqrtApprox(Double(((di * di) + (dj * dj)))))
                row = ((row + ([dist] as! [Double?])) as! [Double?])
                j = Int((j &+ 1))
            }
            arr = ((arr + ([row] as! [[Double?]])) as! [[Double?]])
            i = Int((i &+ 1))
        }
        return (vec_gaussian((arr as! [[Double?]]), Double(spatial_variance)) as! [[Double?]])
    }
    func elementwise_sub(_ mat: [[Double?]], _ value: Double) -> [[Double?]] {
        var res: [[Double?]] = ([] as! [[Double?]])
        var i: Int = 0
        while (i < Int(((mat).count))) {
            var row: [Double?] = ([] as! [Double?])
            var j: Int = 0
            while (j < Int((((mat[i] as! [Double?])).count))) {
                row = ((row + ([(Double(mat[i][j]) - value)] as! [Double?])) as! [Double?])
                j = Int((j &+ 1))
            }
            res = ((res + ([row] as! [[Double?]])) as! [[Double?]])
            i = Int((i &+ 1))
        }
        return res
    }
    func elementwise_mul(_ a: [[Double?]], _ b: [[Double?]]) -> [[Double?]] {
        var res: [[Double?]] = ([] as! [[Double?]])
        var i: Int = 0
        while (i < Int(((a).count))) {
            var row: [Double?] = ([] as! [Double?])
            var j: Int = 0
            while (j < Int((((a[i] as! [Double?])).count))) {
                row = ((row + ([(Double(a[i][j]) * Double(b[i][j]))] as! [Double?])) as! [Double?])
                j = Int((j &+ 1))
            }
            res = ((res + ([row] as! [[Double?]])) as! [[Double?]])
            i = Int((i &+ 1))
        }
        return res
    }
    func matrix_sum(_ mat: [[Double?]]) -> Double {
        var total: Double = 0.0
        var i: Int = 0
        while (i < Int(((mat).count))) {
            var j: Int = 0
            while (j < Int((((mat[i] as! [Double?])).count))) {
                total = Double((total + Double(mat[i][j])))
                j = Int((j &+ 1))
            }
            i = Int((i &+ 1))
        }
        return total
    }
    func bilateral_filter(_ img: [[Double?]], _ spatial_variance: Double, _ intensity_variance: Double, _ kernel_size: Int) -> Double {
        let gauss_ker: [[Double?]] = (get_gauss_kernel(kernel_size, Double(spatial_variance)) as! [[Double?]])
        let img_s: [[Double?]] = img
        let center = Double(img_s[(kernel_size / 2)][(kernel_size / 2)])
        let img_i: [[Double?]] = (elementwise_sub((img_s as! [[Double?]]), Double(center)) as! [[Double?]])
        let img_ig: [[Double?]] = (vec_gaussian((img_i as! [[Double?]]), Double(intensity_variance)) as! [[Double?]])
        let weights: [[Double?]] = (elementwise_mul((gauss_ker as! [[Double?]]), (img_ig as! [[Double?]])) as! [[Double?]])
        let vals: [[Double?]] = (elementwise_mul((img_s as! [[Double?]]), (weights as! [[Double?]])) as! [[Double?]])
        let sum_weights = Double(matrix_sum((weights as! [[Double?]])))
        var val: Double = 0.0
        if (sum_weights != 0.0) {
            val = Double((Double(matrix_sum((vals as! [[Double?]]))) / sum_weights))
        }
        return val
    }
    let img: [[Double?]] = ([([0.2, 0.3, 0.4] as! [Double?]), ([0.3, 0.4, 0.5] as! [Double?]), ([0.4, 0.5, 0.6] as! [Double?])] as! [[Double?]])
    let result = Double(bilateral_filter((img as! [[Double?]]), 1.0, 1.0, 3))
    print(_p(result))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
