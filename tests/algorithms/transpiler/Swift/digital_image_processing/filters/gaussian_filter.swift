// Generated by Mochi transpiler v0.10.59 on 2025-08-07 00:29:56 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let PI = 3.141592653589793
    func expApprox(_ x: Double) -> Double {
        var sum: Double = 1.0
        var term: Double = 1.0
        var n: Int = 1
        while (n < 10) {
            term = Double(((term * x) / Double(n)))
            sum = Double((sum + term))
            n = Int((n &+ 1))
        }
        return sum
    }
    func gen_gaussian_kernel(_ k_size: Int, _ sigma: Double) -> [[Double?]] {
        let center = (k_size / 2)
        var kernel: [[Double?]] = ([] as! [[Double?]])
        var i: Int = 0
        while (i < k_size) {
            var row: [Double?] = ([] as! [Double?])
            var j: Int = 0
            while (j < k_size) {
                let x = Double((i &- center))
                let y = Double((j &- center))
                let exponent = -Double((Double(((x * x) + (y * y))) / Double(((2.0 * sigma) * sigma))))
                let value = (Double((1.0 / Double(((2.0 * PI) * sigma)))) * Double(expApprox(Double(exponent))))
                row = (_append(row, value) as! [Double?])
                j = Int((j &+ 1))
            }
            kernel = (_append(kernel, row) as! [[Double?]])
            i = Int((i &+ 1))
        }
        return kernel
    }
    func gaussian_filter(_ image: [[Int?]], _ k_size: Int, _ sigma: Double) -> [[Int?]] {
        let height = Int(((image).count))
        let width = Int((((image[0] as! [Int?])).count))
        let dst_height = ((height &- k_size) &+ 1)
        let dst_width = ((width &- k_size) &+ 1)
        let kernel: [[Double?]] = (gen_gaussian_kernel(k_size, Double(sigma)) as! [[Double?]])
        var dst: [[Int?]] = ([] as! [[Int?]])
        var i: Int = 0
        while (i < dst_height) {
            var row: [Int?] = ([] as! [Int?])
            var j: Int = 0
            while (j < dst_width) {
                var sum: Double = 0.0
                var ki: Int = 0
                while (ki < k_size) {
                    var kj: Int = 0
                    while (kj < k_size) {
                        sum = Double((sum + (Double(image[(i &+ ki)][(j &+ kj)]) * Double(kernel[ki][kj]))))
                        kj = Int((kj &+ 1))
                    }
                    ki = Int((ki &+ 1))
                }
                row = (_append(row, (sum as! Int)) as! [Int?])
                j = Int((j &+ 1))
            }
            dst = (_append(dst, row) as! [[Int?]])
            i = Int((i &+ 1))
        }
        return dst
    }
    func print_image(_ image: [[Int?]]) {
        var i: Int = 0
        while (i < Int(((image).count))) {
            print(_p("[" + (image[i] as! [Int?]).map{ if let s = $0 as? String { "\"" + s.replacingOccurrences(of: "\"", with: "\\\"") + "\"" } else { _p($0) } }.joined(separator: ", ") + "]"))
            i = Int((i &+ 1))
        }
    }
    let img: [[Int?]] = ([([52, 55, 61, 59, 79] as! [Int?]), ([62, 59, 55, 104, 94] as! [Int?]), ([63, 65, 66, 113, 144] as! [Int?]), ([68, 70, 70, 126, 154] as! [Int?]), ([70, 72, 69, 128, 155] as! [Int?])] as! [[Int?]])
    let gaussian3: [[Int?]] = (gaussian_filter((img as! [[Int?]]), 3, 1.0) as! [[Int?]])
    let gaussian5: [[Int?]] = (gaussian_filter((img as! [[Int?]]), 5, 0.8) as! [[Int?]])
    _ = print_image((gaussian3 as! [[Int?]]))
    _ = print_image((gaussian5 as! [[Int?]]))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
