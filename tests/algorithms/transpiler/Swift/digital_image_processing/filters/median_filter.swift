// Generated by Mochi transpiler v0.10.59 on 2025-08-07 00:30:01 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func insertion_sort(_ a: inout [Int?]) -> [Int?] {
        var i: Int = 1
        while (i < Int(((a).count))) {
            let key = (a[i] as? Int ?? 0)
            var j: Int = (i &- 1)
            while ((j >= 0) && ((a[j] as? Int ?? 0) > key)) {
                a = _set(a, (j &+ 1), (a[j] as? Int ?? 0))
                j = Int((j &- 1))
            }
            a = _set(a, (j &+ 1), (key as! Int))
            i = Int((i &+ 1))
        }
        return a
    }
    func median_filter(_ gray_img: [[Int?]], _ mask: Int) -> [[Int?]] {
        let rows = Int(((gray_img).count))
        let cols = Int((((gray_img[0] as! [Int?])).count))
        let bd = (mask / 2)
        var result: [[Int?]] = ([] as! [[Int?]])
        var i: Int = 0
        while (i < rows) {
            var row: [Int?] = ([] as! [Int?])
            var j: Int = 0
            while (j < cols) {
                row = (_append(row, 0) as! [Int?])
                j = Int((j &+ 1))
            }
            result = (_append(result, row) as! [[Int?]])
            i = Int((i &+ 1))
        }
        i = (bd as! Int)
        while (i < (rows &- bd)) {
            var j: Int = bd
            while (j < (cols &- bd)) {
                var kernel: [Int?] = ([] as! [Int?])
                var x: Int = (i &- bd)
                while (x <= (i &+ bd)) {
                    var y: Int = (j &- bd)
                    while (y <= (j &+ bd)) {
                        kernel = (_append(kernel, (gray_img[x][y] as? Int ?? 0)) as! [Int?])
                        y = Int((y &+ 1))
                    }
                    x = Int((x &+ 1))
                }
                kernel = (insertion_sort(&kernel) as! [Int?])
                let idx = (Int((mask &* mask)) / 2)
                result[i][j] = (kernel[idx] as? Int ?? 0)
                j = Int((j &+ 1))
            }
            i = Int((i &+ 1))
        }
        return result
    }
    func main() {
        let img: [[Int?]] = ([([10, 10, 10, 10, 10] as! [Int?]), ([10, 255, 10, 255, 10] as! [Int?]), ([10, 10, 10, 10, 10] as! [Int?]), ([10, 255, 10, 255, 10] as! [Int?]), ([10, 10, 10, 10, 10] as! [Int?])] as! [[Int?]])
        let filtered: [[Int?]] = (median_filter((img as! [[Int?]]), 3) as! [[Int?]])
        print(_p("[" + filtered.map{ if let s = $0 as? String { "\"" + s.replacingOccurrences(of: "\"", with: "\\\"") + "\"" } else { _p($0) } }.joined(separator: ", ") + "]"))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
