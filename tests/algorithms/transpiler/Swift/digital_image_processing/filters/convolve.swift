// Generated by Mochi transpiler v0.10.60 on 2025-08-07 17:00:18 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func pad_edge(_ image: [[Int]], _ pad_size: Int) -> [[Int]] {
        let height = _int(((image).count))
        let width = _int((((image[0] as! [Int])).count))
        let new_height = (height &+ (pad_size &* 2))
        let new_width = (width &+ (pad_size &* 2))
        var padded: [[Int]] = ([] as! [[Int]])
        var i: Int = 0
        while (i < new_height) {
            var row: [Int] = ([] as! [Int])
            var src_i: Int = i
            if (src_i < pad_size) {
                src_i = 0
            }
            if (src_i >= (height &+ pad_size)) {
                src_i = _int((height &- 1))
            } else {
                src_i = _int((src_i &- pad_size))
            }
            var j: Int = 0
            while (j < new_width) {
                var src_j: Int = j
                if (src_j < pad_size) {
                    src_j = 0
                }
                if (src_j >= (width &+ pad_size)) {
                    src_j = _int((width &- 1))
                } else {
                    src_j = _int((src_j &- pad_size))
                }
                row = (_append(row, (image[src_i][src_j] as? Int ?? 0)) as! [Int])
                j = _int((j &+ 1))
            }
            padded = (_append(padded, row) as! [[Int]])
            i = _int((i &+ 1))
        }
        return padded
    }
    func im2col(_ image: [[Int]], _ block_h: Int, _ block_w: Int) -> [[Int]] {
        let rows = _int(((image).count))
        let cols = _int((((image[0] as! [Int])).count))
        let dst_height = ((rows &- block_h) &+ 1)
        let dst_width = ((cols &- block_w) &+ 1)
        var image_array: [[Int]] = ([] as! [[Int]])
        var i: Int = 0
        while (i < dst_height) {
            var j: Int = 0
            while (j < dst_width) {
                var window: [Int] = ([] as! [Int])
                var bi: Int = 0
                while (bi < block_h) {
                    var bj: Int = 0
                    while (bj < block_w) {
                        window = (_append(window, (image[(i &+ bi)][(j &+ bj)] as? Int ?? 0)) as! [Int])
                        bj = _int((bj &+ 1))
                    }
                    bi = _int((bi &+ 1))
                }
                image_array = (_append(image_array, window) as! [[Int]])
                j = _int((j &+ 1))
            }
            i = _int((i &+ 1))
        }
        return image_array
    }
    func flatten(_ matrix: [[Int]]) -> [Int] {
        var out: [Int] = ([] as! [Int])
        var i: Int = 0
        while (i < _int(((matrix).count))) {
            var j: Int = 0
            while (j < _int((((matrix[i] as! [Int])).count))) {
                out = (_append(out, (matrix[i][j] as? Int ?? 0)) as! [Int])
                j = _int((j &+ 1))
            }
            i = _int((i &+ 1))
        }
        return out
    }
    func dot(_ a: [Int], _ b: [Int]) -> Int {
        var sum: Int = 0
        var i: Int = 0
        while (i < _int(((a).count))) {
            sum = _int((sum &+ ((a[i] as? Int ?? 0) &* (b[i] as? Int ?? 0))))
            i = _int((i &+ 1))
        }
        return sum
    }
    func img_convolve(_ image: [[Int]], _ kernel: [[Int]]) -> [[Int]] {
        let height = _int(((image).count))
        let width = _int((((image[0] as! [Int])).count))
        let k_size = _int(((kernel).count))
        let pad_size = (k_size / 2)
        let padded: [[Int]] = (pad_edge((image as! [[Int]]), pad_size) as! [[Int]])
        let image_array: [[Int]] = (im2col((padded as! [[Int]]), k_size, k_size) as! [[Int]])
        let kernel_flat: [Int] = (flatten((kernel as! [[Int]])) as! [Int])
        var dst: [[Int]] = ([] as! [[Int]])
        var idx: Int = 0
        var i: Int = 0
        while (i < height) {
            var row: [Int] = ([] as! [Int])
            var j: Int = 0
            while (j < width) {
                let val = _int(dot((image_array[idx] as! [Int]), (kernel_flat as! [Int])))
                row = (_append(row, val) as! [Int])
                idx = _int((idx &+ 1))
                j = _int((j &+ 1))
            }
            dst = (_append(dst, row) as! [[Int]])
            i = _int((i &+ 1))
        }
        return dst
    }
    func print_matrix(_ m: [[Int]]) {
        var i: Int = 0
        while (i < _int(((m).count))) {
            var line: String = ""
            var j: Int = 0
            while (j < _int((((m[i] as! [Int])).count))) {
                if (j > 0) {
                    line = ((line + " ") as! String)
                }
                line = ((line + _p((m[i][j] as? Int ?? 0))) as! String)
                j = _int((j &+ 1))
            }
            print(_p(line))
            i = _int((i &+ 1))
        }
    }
    let image: [[Int]] = ([([1, 2, 3, 0, 0] as! [Int]), ([4, 5, 6, 0, 0] as! [Int]), ([7, 8, 9, 0, 0] as! [Int]), ([0, 0, 0, 0, 0] as! [Int]), ([0, 0, 0, 0, 0] as! [Int])] as! [[Int]])
    let laplace_kernel: [[Int]] = ([([0, 1, 0] as! [Int]), ([1, -4, 1] as! [Int]), ([0, 1, 0] as! [Int])] as! [[Int]])
    let result: [[Int]] = (img_convolve((image as! [[Int]]), (laplace_kernel as! [[Int]])) as! [[Int]])
    _ = print_matrix((result as! [[Int]]))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
