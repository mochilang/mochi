// Generated by Mochi transpiler v0.10.59 on 2025-08-07 00:29:54 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let PI: Double = 3.141592653589793
    func to_radians(_ deg: Double) -> Double {
        return ((deg * PI) / 180.0)
    }
    func sin_taylor(_ x: Double) -> Double {
        var term: Double = x
        var sum: Double = x
        var i: Int = 1
        while (i < 10) {
            let k1 = (2.0 * Double(i))
            let k2 = (k1 + 1.0)
            term = Double((((-term * x) * x) / Double((k1 * k2))))
            sum = Double((sum + term))
            i = Int((i &+ 1))
        }
        return sum
    }
    func cos_taylor(_ x: Double) -> Double {
        var term: Double = 1.0
        var sum: Double = 1.0
        var i: Int = 1
        while (i < 10) {
            let k1 = ((2.0 * Double(i)) - 1.0)
            let k2 = (2.0 * Double(i))
            term = Double((((-term * x) * x) / Double((k1 * k2))))
            sum = Double((sum + term))
            i = Int((i &+ 1))
        }
        return sum
    }
    func exp_taylor(_ x: Double) -> Double {
        var term: Double = 1.0
        var sum: Double = 1.0
        var i: Double = 1.0
        while (i < 20.0) {
            term = Double(((term * x) / i))
            sum = Double((sum + term))
            i = Double((i + 1.0))
        }
        return sum
    }
    func gabor_filter_kernel(_ ksize: Int, _ sigma: Double, _ theta: Double, _ lambd: Double, _ gamma: Double, _ psi: Double) -> [[Double?]] {
        var size: Int = ksize
        if (((size % 2 + 2) % 2) == 0) {
            size = Int((size &+ 1))
        }
        var gabor: [[Double?]] = ([] as! [[Double?]])
        var y: Int = 0
        while (y < size) {
            var row: [Double?] = ([] as! [Double?])
            var x: Int = 0
            while (x < size) {
                let px = Double((x &- (size / 2)))
                let py = Double((y &- (size / 2)))
                let rad = Double(to_radians(Double(theta)))
                let cos_theta = Double(cos_taylor(Double(rad)))
                let sin_theta = Double(sin_taylor(Double(rad)))
                let x_rot = ((cos_theta * px) + (sin_theta * py))
                let y_rot = ((-sin_theta * px) + (cos_theta * py))
                let exponent = (-Double(((x_rot * x_rot) + (((gamma * gamma) * y_rot) * y_rot))) / Double(((2.0 * sigma) * sigma)))
                let value = (Double(exp_taylor(Double(exponent))) * Double(cos_taylor(Double(((((2.0 * PI) * x_rot) / lambd) + psi)))))
                row = (_append(row, value) as! [Double?])
                x = Int((x &+ 1))
            }
            gabor = (_append(gabor, row) as! [[Double?]])
            y = Int((y &+ 1))
        }
        return gabor
    }
    let kernel: [[Double?]] = (gabor_filter_kernel(3, 8.0, 0.0, 10.0, 0.0, 0.0) as! [[Double?]])
    print(_p("[" + kernel.map{ if let s = $0 as? String { "\"" + s.replacingOccurrences(of: "\"", with: "\\\"") + "\"" } else { _p($0) } }.joined(separator: ", ") + "]"))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
