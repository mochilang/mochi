// Generated by Mochi transpiler v0.10.59 on 2025-08-07 00:29:59 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func get_neighbors_pixel(_ image: [[Int?]], _ x: Int, _ y: Int, _ center: Int) -> Int {
        if ((x < 0) || (y < 0)) {
            return 0
        }
        if ((x >= Int(((image).count))) || (y >= Int((((image[0] as! [Int?])).count)))) {
            return 0
        }
        if ((image[x][y] as? Int ?? 0) >= center) {
            return 1
        }
        return 0
    }
    func local_binary_value(_ image: [[Int?]], _ x: Int, _ y: Int) -> Int {
        let center = (image[x][y] as? Int ?? 0)
        let powers: [Int?] = ([1, 2, 4, 8, 16, 32, 64, 128] as! [Int?])
        let neighbors: [Int?] = ([Int(get_neighbors_pixel((image as! [[Int?]]), (x &- 1), (y &+ 1), center)), Int(get_neighbors_pixel((image as! [[Int?]]), x, (y &+ 1), center)), Int(get_neighbors_pixel((image as! [[Int?]]), (x &- 1), y, center)), Int(get_neighbors_pixel((image as! [[Int?]]), (x &+ 1), (y &+ 1), center)), Int(get_neighbors_pixel((image as! [[Int?]]), (x &+ 1), y, center)), Int(get_neighbors_pixel((image as! [[Int?]]), (x &+ 1), (y &- 1), center)), Int(get_neighbors_pixel((image as! [[Int?]]), x, (y &- 1), center)), Int(get_neighbors_pixel((image as! [[Int?]]), (x &- 1), (y &- 1), center))] as! [Int?])
        var sum: Int = 0
        var i: Int = 0
        while (i < Int(((neighbors).count))) {
            sum = Int((sum &+ ((neighbors[i] as? Int ?? 0) &* (powers[i] as? Int ?? 0))))
            i = Int((i &+ 1))
        }
        return sum
    }
    let image: [[Int?]] = ([([10, 10, 10, 10, 10] as! [Int?]), ([10, 20, 30, 20, 10] as! [Int?]), ([10, 30, 40, 30, 10] as! [Int?]), ([10, 20, 30, 20, 10] as! [Int?]), ([10, 10, 10, 10, 10] as! [Int?])] as! [[Int?]])
    var i: Int = 0
    while (i < Int(((image).count))) {
        var j: Int = 0
        var line: String = ""
        while (j < Int((((image[0] as! [Int?])).count))) {
            let value = Int(local_binary_value((image as! [[Int?]]), i, j))
            line = ((line + String(describing: value)) as! String)
            if (j < (Int((((image[0] as! [Int?])).count)) &- 1)) {
                line = ((line + " ") as! String)
            }
            j = Int((j &+ 1))
        }
        print(_p(line))
        i = Int((i &+ 1))
    }
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
