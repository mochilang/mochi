// Generated by Mochi transpiler v0.10.59 on 2025-08-07 00:30:03 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let PI = 3.141592653589793
    func absf(_ x: Double) -> Double {
        if (x < 0.0) {
            return -x
        }
        return x
    }
    func sqrtApprox(_ x: Double) -> Double {
        if (x <= 0.0) {
            return 0.0
        }
        var guess: Double = (x / 2.0)
        var i: Int = 0
        while (i < 20) {
            guess = Double((Double((guess + (x / guess))) / 2.0))
            i = Int((i &+ 1))
        }
        return guess
    }
    func atanApprox(_ x: Double) -> Double {
        if (x > 1.0) {
            return ((PI / 2.0) - (x / Double(((x * x) + 0.28))))
        }
        if (x < Double(-1.0)) {
            return ((-PI / 2.0) - (x / Double(((x * x) + 0.28))))
        }
        return (x / Double((1.0 + ((0.28 * x) * x))))
    }
    func atan2Approx(_ y: Double, _ x: Double) -> Double {
        if (x == 0.0) {
            if (y > 0.0) {
                return (PI / 2.0)
            }
            if (y < 0.0) {
                return (-PI / 2.0)
            }
            return 0.0
        }
        let a = Double(atanApprox(Double((y / x))))
        if (x > 0.0) {
            return a
        }
        if (y >= 0.0) {
            return (a + PI)
        }
        return (a - PI)
    }
    func zeros(_ h: Int, _ w: Int) -> [[Double?]] {
        var m: [[Double?]] = ([] as! [[Double?]])
        var y: Int = 0
        while (y < h) {
            var row: [Double?] = ([] as! [Double?])
            var x: Int = 0
            while (x < w) {
                row = (_append(row, 0.0) as! [Double?])
                x = Int((x &+ 1))
            }
            m = (_append(m, row) as! [[Double?]])
            y = Int((y &+ 1))
        }
        return m
    }
    func pad_edge(_ img: [[Double?]], _ pad: Int) -> [[Double?]] {
        let h = Int(((img).count))
        let w = Int((((img[0] as! [Double?])).count))
        var out: [[Double?]] = (zeros((h &+ (pad &* 2)), (w &+ (pad &* 2))) as! [[Double?]])
        var y: Int = 0
        while (y < (h &+ (pad &* 2))) {
            var x: Int = 0
            while (x < (w &+ (pad &* 2))) {
                var sy: Int = (y &- pad)
                if (sy < 0) {
                    sy = 0
                }
                if (sy >= h) {
                    sy = Int((h &- 1))
                }
                var sx: Int = (x &- pad)
                if (sx < 0) {
                    sx = 0
                }
                if (sx >= w) {
                    sx = Int((w &- 1))
                }
                out[y][x] = Double(img[sy][sx])
                x = Int((x &+ 1))
            }
            y = Int((y &+ 1))
        }
        return out
    }
    func img_convolve(_ img: [[Double?]], _ kernel: [[Int?]]) -> [[Double?]] {
        let h = Int(((img).count))
        let w = Int((((img[0] as! [Double?])).count))
        let k = Int(((kernel).count))
        let pad = (k / 2)
        let padded: [[Double?]] = (pad_edge((img as! [[Double?]]), pad) as! [[Double?]])
        var out: [[Double?]] = (zeros(h, w) as! [[Double?]])
        var y: Int = 0
        while (y < h) {
            var x: Int = 0
            while (x < w) {
                var sum: Double = 0.0
                var i: Int = 0
                while (i < k) {
                    var j: Int = 0
                    while (j < k) {
                        sum = Double((sum + (Double(padded[(y &+ i)][(x &+ j)]) * Double(kernel[i][j]))))
                        j = Int((j &+ 1))
                    }
                    i = Int((i &+ 1))
                }
                out[y][x] = Double(sum)
                x = Int((x &+ 1))
            }
            y = Int((y &+ 1))
        }
        return out
    }
    func abs_matrix(_ mat: [[Double?]]) -> [[Double?]] {
        let h = Int(((mat).count))
        let w = Int((((mat[0] as! [Double?])).count))
        var out: [[Double?]] = (zeros(h, w) as! [[Double?]])
        var y: Int = 0
        while (y < h) {
            var x: Int = 0
            while (x < w) {
                let v = Double(mat[y][x])
                if (v < 0.0) {
                    out[y][x] = Double(-v)
                } else {
                    out[y][x] = Double(v)
                }
                x = Int((x &+ 1))
            }
            y = Int((y &+ 1))
        }
        return out
    }
    func max_matrix(_ mat: [[Double?]]) -> Double {
        var max_val: Double = Double(mat[0][0])
        var y: Int = 0
        while (y < Int(((mat).count))) {
            var x: Int = 0
            while (x < Int((((mat[0] as! [Double?])).count))) {
                if (Double(mat[y][x]) > max_val) {
                    max_val = Double(mat[y][x])
                }
                x = Int((x &+ 1))
            }
            y = Int((y &+ 1))
        }
        return max_val
    }
    func scale_matrix(_ mat: [[Double?]], _ factor: Double) -> [[Double?]] {
        let h = Int(((mat).count))
        let w = Int((((mat[0] as! [Double?])).count))
        var out: [[Double?]] = (zeros(h, w) as! [[Double?]])
        var y: Int = 0
        while (y < h) {
            var x: Int = 0
            while (x < w) {
                out[y][x] = Double((Double(mat[y][x]) * factor))
                x = Int((x &+ 1))
            }
            y = Int((y &+ 1))
        }
        return out
    }
    func sobel_filter(_ image: [[Int?]]) -> [[[Double?]]] {
        let h = Int(((image).count))
        let w = Int((((image[0] as! [Int?])).count))
        var img: [[Double?]] = ([] as! [[Double?]])
        var y0: Int = 0
        while (y0 < h) {
            var row: [Double?] = ([] as! [Double?])
            var x0: Int = 0
            while (x0 < w) {
                row = (_append(row, Double(image[y0][x0])) as! [Double?])
                x0 = Int((x0 &+ 1))
            }
            img = (_append(img, row) as! [[Double?]])
            y0 = Int((y0 &+ 1))
        }
        let kernel_x: [[Int?]] = ([([-1, 0, 1] as! [Int?]), ([-2, 0, 2] as! [Int?]), ([-1, 0, 1] as! [Int?])] as! [[Int?]])
        let kernel_y: [[Int?]] = ([([1, 2, 1] as! [Int?]), ([0, 0, 0] as! [Int?]), ([-1, -2, -1] as! [Int?])] as! [[Int?]])
        var dst_x: [[Double?]] = (abs_matrix((img_convolve((img as! [[Double?]]), (kernel_x as! [[Int?]])) as! [[Double?]])) as! [[Double?]])
        var dst_y: [[Double?]] = (abs_matrix((img_convolve((img as! [[Double?]]), (kernel_y as! [[Int?]])) as! [[Double?]])) as! [[Double?]])
        let max_x = Double(max_matrix((dst_x as! [[Double?]])))
        let max_y = Double(max_matrix((dst_y as! [[Double?]])))
        dst_x = (scale_matrix((dst_x as! [[Double?]]), Double((255.0 / max_x))) as! [[Double?]])
        dst_y = (scale_matrix((dst_y as! [[Double?]]), Double((255.0 / max_y))) as! [[Double?]])
        var mag: [[Double?]] = (zeros(h, w) as! [[Double?]])
        var theta: [[Double?]] = (zeros(h, w) as! [[Double?]])
        var y: Int = 0
        while (y < h) {
            var x: Int = 0
            while (x < w) {
                let gx = Double(dst_x[y][x])
                let gy = Double(dst_y[y][x])
                mag[y][x] = Double(sqrtApprox(Double(((gx * gx) + (gy * gy)))))
                theta[y][x] = Double(atan2Approx(Double(gy), Double(gx)))
                x = Int((x &+ 1))
            }
            y = Int((y &+ 1))
        }
        let max_m = Double(max_matrix((mag as! [[Double?]])))
        mag = (scale_matrix((mag as! [[Double?]]), Double((255.0 / max_m))) as! [[Double?]])
        return ([mag, theta] as! [[[Double?]]])
    }
    func print_matrix_int(_ mat: [[Double?]]) {
        var y: Int = 0
        while (y < Int(((mat).count))) {
            var line: String = ""
            var x: Int = 0
            while (x < Int((((mat[y] as! [Double?])).count))) {
                line = ((line + String(describing: (mat[y][x] as? Int ?? 0))) as! String)
                if (x < (Int((((mat[y] as! [Double?])).count)) &- 1)) {
                    line = ((line + " ") as! String)
                }
                x = Int((x &+ 1))
            }
            print(_p(line))
            y = Int((y &+ 1))
        }
    }
    func print_matrix_float(_ mat: [[Double?]]) {
        var y: Int = 0
        while (y < Int(((mat).count))) {
            var line: String = ""
            var x: Int = 0
            while (x < Int((((mat[y] as! [Double?])).count))) {
                line = ((line + String(describing: Double(mat[y][x]))) as! String)
                if (x < (Int((((mat[y] as! [Double?])).count)) &- 1)) {
                    line = ((line + " ") as! String)
                }
                x = Int((x &+ 1))
            }
            print(_p(line))
            y = Int((y &+ 1))
        }
    }
    func main() {
        let img: [[Int?]] = ([([10, 10, 10, 10, 10] as! [Int?]), ([10, 50, 50, 50, 10] as! [Int?]), ([10, 50, 80, 50, 10] as! [Int?]), ([10, 50, 50, 50, 10] as! [Int?]), ([10, 10, 10, 10, 10] as! [Int?])] as! [[Int?]])
        let res: [[[Double?]]] = (sobel_filter((img as! [[Int?]])) as! [[[Double?]]])
        let mag: [[Double?]] = (res[0] as! [[Double?]])
        let theta: [[Double?]] = (res[1] as! [[Double?]])
        _ = print_matrix_int((mag as! [[Double?]]))
        _ = print_matrix_float((theta as! [[Double?]]))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
