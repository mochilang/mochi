// Generated by Mochi transpiler v0.10.59 on 2025-08-07 00:29:57 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func make_matrix(_ rows: Int, _ cols: Int, _ value: Int) -> [[Int?]] {
        var result: [[Int?]] = ([] as! [[Int?]])
        var i: Int = 0
        while (i < rows) {
            var row: [Int?] = ([] as! [Int?])
            var j: Int = 0
            while (j < cols) {
                row = (_append(row, value) as! [Int?])
                j = Int((j &+ 1))
            }
            result = (_append(result, row) as! [[Int?]])
            i = Int((i &+ 1))
        }
        return result
    }
    func my_laplacian(_ src: [[Int?]], _ ksize: Int) -> [[Int?]] {
        var kernel: [[Int?]] = ([] as! [[Int?]])
        if (ksize == 1) {
            kernel = ([([0, -1, 0] as! [Int?]), ([-1, 4, -1] as! [Int?]), ([0, -1, 0] as! [Int?])] as! [[Int?]])
        } else if (ksize == 3) {
            kernel = ([([0, 1, 0] as! [Int?]), ([1, -4, 1] as! [Int?]), ([0, 1, 0] as! [Int?])] as! [[Int?]])
        } else if (ksize == 5) {
            kernel = ([([0, 0, -1, 0, 0] as! [Int?]), ([0, -1, -2, -1, 0] as! [Int?]), ([-1, -2, 16, -2, -1] as! [Int?]), ([0, -1, -2, -1, 0] as! [Int?]), ([0, 0, -1, 0, 0] as! [Int?])] as! [[Int?]])
        } else if (ksize == 7) {
            kernel = ([([0, 0, 0, -1, 0, 0, 0] as! [Int?]), ([0, 0, -2, -3, -2, 0, 0] as! [Int?]), ([0, -2, -7, -10, -7, -2, 0] as! [Int?]), ([-1, -3, -10, 68, -10, -3, -1] as! [Int?]), ([0, -2, -7, -10, -7, -2, 0] as! [Int?]), ([0, 0, -2, -3, -2, 0, 0] as! [Int?]), ([0, 0, 0, -1, 0, 0, 0] as! [Int?])] as! [[Int?]])
        } else {
            _ = fatalError("ksize must be in (1, 3, 5, 7)")
        }
        
        
        
        let rows = Int(((src).count))
        let cols = Int((((src[0] as! [Int?])).count))
        let k = Int(((kernel).count))
        let pad = (k / 2)
        var output: [[Int?]] = (make_matrix(rows, cols, 0) as! [[Int?]])
        var i: Int = 0
        while (i < rows) {
            var j: Int = 0
            while (j < cols) {
                var sum: Int = 0
                var ki: Int = 0
                while (ki < k) {
                    var kj: Int = 0
                    while (kj < k) {
                        let ii = ((i &+ ki) &- pad)
                        let jj = ((j &+ kj) &- pad)
                        var val: Int = 0
                        if ((((ii >= 0) && (ii < rows)) && (jj >= 0)) && (jj < cols)) {
                            val = (src[ii][jj] as? Int ?? 0)
                        }
                        sum = Int((sum &+ (val &* (kernel[ki][kj] as? Int ?? 0))))
                        kj = Int((kj &+ 1))
                    }
                    ki = Int((ki &+ 1))
                }
                output[i][j] = (sum as! Int)
                j = Int((j &+ 1))
            }
            i = Int((i &+ 1))
        }
        return output
    }
    let image: [[Int?]] = ([([0, 0, 0, 0, 0] as! [Int?]), ([0, 10, 10, 10, 0] as! [Int?]), ([0, 10, 10, 10, 0] as! [Int?]), ([0, 10, 10, 10, 0] as! [Int?]), ([0, 0, 0, 0, 0] as! [Int?])] as! [[Int?]])
    var result: [[Int?]] = (my_laplacian((image as! [[Int?]]), 3) as! [[Int?]])
    var r: Int = 0
    while (r < Int(((result).count))) {
        var row_str: String = "["
        var c: Int = 0
        while (c < Int((((result[r] as! [Int?])).count))) {
            row_str = ((row_str + String(describing: (result[r][c] as? Int ?? 0))) as! String)
            if ((c &+ 1) < Int((((result[r] as! [Int?])).count))) {
                row_str = ((row_str + ", ") as! String)
            }
            c = Int((c &+ 1))
        }
        row_str = ((row_str + "]") as! String)
        print(_p(row_str))
        r = Int((r &+ 1))
    }
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
