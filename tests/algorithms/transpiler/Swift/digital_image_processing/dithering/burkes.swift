// Generated by Mochi transpiler v0.10.59 on 2025-08-07 00:29:42 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func get_greyscale(_ blue: Int, _ green: Int, _ red: Int) -> Int {
        let b = Double(blue)
        let g = Double(green)
        let r = Double(red)
        return Int((((0.114 * b) + (0.587 * g)) + (0.299 * r)))
    }
    func zeros(_ h: Int, _ w: Int) -> [[Int?]] {
        var table: [[Int?]] = ([] as! [[Int?]])
        var i: Int = 0
        while (i < h) {
            var row: [Int?] = ([] as! [Int?])
            var j: Int = 0
            while (j < w) {
                row = (_append(row, 0) as! [Int?])
                j = Int((j &+ 1))
            }
            table = (_append(table, row) as! [[Int?]])
            i = Int((i &+ 1))
        }
        return table
    }
    func burkes_dither(_ img: [[[Int?]]], _ threshold: Int) -> [[Int?]] {
        let height = Int(((img).count))
        let width = Int((((img[0] as! [[Int?]])).count))
        var error_table: [[Int?]] = (zeros((height &+ 1), (width &+ 4)) as! [[Int?]])
        var output: [[Int?]] = ([] as! [[Int?]])
        var y: Int = 0
        while (y < height) {
            var row: [Int?] = ([] as! [Int?])
            var x: Int = 0
            while (x < width) {
                let px: [Int?] = (img[y][x] as! [Int?])
                let grey = Int(get_greyscale((px[0] as? Int ?? 0), (px[1] as? Int ?? 0), (px[2] as? Int ?? 0)))
                let total = (grey &+ (error_table[y][(x &+ 2)] as? Int ?? 0))
                var new_val: Int = 0
                var current_error: Int = 0
                if (threshold > total) {
                    new_val = 0
                    current_error = (total as! Int)
                } else {
                    new_val = 255
                    current_error = Int((total &- 255))
                }
                row = (_append(row, new_val) as! [Int?])
                error_table[y][(x &+ 3)] = Int(((error_table[y][(x &+ 3)] as? Int ?? 0) &+ (Int((8 &* current_error)) / 32)))
                error_table[y][(x &+ 4)] = Int(((error_table[y][(x &+ 4)] as? Int ?? 0) &+ (Int((4 &* current_error)) / 32)))
                error_table[(y &+ 1)][(x &+ 2)] = Int(((error_table[(y &+ 1)][(x &+ 2)] as? Int ?? 0) &+ (Int((8 &* current_error)) / 32)))
                error_table[(y &+ 1)][(x &+ 3)] = Int(((error_table[(y &+ 1)][(x &+ 3)] as? Int ?? 0) &+ (Int((4 &* current_error)) / 32)))
                error_table[(y &+ 1)][(x &+ 4)] = Int(((error_table[(y &+ 1)][(x &+ 4)] as? Int ?? 0) &+ (Int((2 &* current_error)) / 32)))
                error_table[(y &+ 1)][(x &+ 1)] = Int(((error_table[(y &+ 1)][(x &+ 1)] as? Int ?? 0) &+ (Int((4 &* current_error)) / 32)))
                error_table[(y &+ 1)][x] = Int(((error_table[(y &+ 1)][x] as? Int ?? 0) &+ (Int((2 &* current_error)) / 32)))
                x = Int((x &+ 1))
            }
            output = (_append(output, row) as! [[Int?]])
            y = Int((y &+ 1))
        }
        return output
    }
    func main() {
        let img: [[[Int?]]] = ([([([0, 0, 0] as! [Int?]), ([64, 64, 64] as! [Int?]), ([128, 128, 128] as! [Int?]), ([192, 192, 192] as! [Int?])] as! [[Int?]]), ([([255, 255, 255] as! [Int?]), ([200, 200, 200] as! [Int?]), ([150, 150, 150] as! [Int?]), ([100, 100, 100] as! [Int?])] as! [[Int?]]), ([([30, 144, 255] as! [Int?]), ([255, 0, 0] as! [Int?]), ([0, 255, 0] as! [Int?]), ([0, 0, 255] as! [Int?])] as! [[Int?]]), ([([50, 100, 150] as! [Int?]), ([80, 160, 240] as! [Int?]), ([70, 140, 210] as! [Int?]), ([60, 120, 180] as! [Int?])] as! [[Int?]])] as! [[[Int?]]])
        let result: [[Int?]] = (burkes_dither((img as! [[[Int?]]]), 128) as! [[Int?]])
        var y: Int = 0
        while (y < Int(((result).count))) {
            var line: String = ""
            var x: Int = 0
            while (x < Int((((result[y] as! [Int?])).count))) {
                line = ((line + String(describing: (result[y][x] as? Int ?? 0))) as! String)
                if (x < (Int((((result[y] as! [Int?])).count)) &- 1)) {
                    line = ((line + " ") as! String)
                }
                x = Int((x &+ 1))
            }
            print(_p(line))
            y = Int((y &+ 1))
        }
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
