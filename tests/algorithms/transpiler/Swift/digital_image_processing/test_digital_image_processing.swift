// Generated by Mochi transpiler v0.10.59 on 2025-08-07 00:30:19 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func clamp_byte(_ x: Int) -> Int {
        if (x < 0) {
            return 0
        }
        if (x > 255) {
            return 255
        }
        return x
    }
    func convert_to_negative(_ img: [[Int?]]) -> [[Int?]] {
        let h = Int(((img).count))
        let w = Int((((img[0] as! [Int?])).count))
        var out: [[Int?]] = ([] as! [[Int?]])
        var y: Int = 0
        while (y < h) {
            var row: [Int?] = ([] as! [Int?])
            var x: Int = 0
            while (x < w) {
                row = (_append(row, (255 &- (img[y][x] as? Int ?? 0))) as! [Int?])
                x = Int((x &+ 1))
            }
            out = (_append(out, row) as! [[Int?]])
            y = Int((y &+ 1))
        }
        return out
    }
    func change_contrast(_ img: [[Int?]], _ factor: Int) -> [[Int?]] {
        let h = Int(((img).count))
        let w = Int((((img[0] as! [Int?])).count))
        var out: [[Int?]] = ([] as! [[Int?]])
        var y: Int = 0
        while (y < h) {
            var row: [Int?] = ([] as! [Int?])
            var x: Int = 0
            while (x < w) {
                let p = (img[y][x] as? Int ?? 0)
                var v: Int = ((Int((Int((p &- 128)) &* factor)) / 100) &+ 128)
                v = Int(clamp_byte(v))
                row = (_append(row, v) as! [Int?])
                x = Int((x &+ 1))
            }
            out = (_append(out, row) as! [[Int?]])
            y = Int((y &+ 1))
        }
        return out
    }
    func gen_gaussian_kernel(_ n: Int, _ sigma: Double) -> [[Double?]] {
        if (n == 3) {
            return ([([(1.0 / 16.0), (2.0 / 16.0), (1.0 / 16.0)] as! [Double?]), ([(2.0 / 16.0), (4.0 / 16.0), (2.0 / 16.0)] as! [Double?]), ([(1.0 / 16.0), (2.0 / 16.0), (1.0 / 16.0)] as! [Double?])] as! [[Double?]])
        }
        var k: [[Double?]] = ([] as! [[Double?]])
        var i: Int = 0
        while (i < n) {
            var row: [Double?] = ([] as! [Double?])
            var j: Int = 0
            while (j < n) {
                row = (_append(row, 0.0) as! [Double?])
                j = Int((j &+ 1))
            }
            k = (_append(k, row) as! [[Double?]])
            i = Int((i &+ 1))
        }
        return k
    }
    func img_convolve(_ img: [[Int?]], _ kernel: [[Double?]]) -> [[Int?]] {
        let h = Int(((img).count))
        let w = Int((((img[0] as! [Int?])).count))
        var out: [[Int?]] = ([] as! [[Int?]])
        var y: Int = 0
        while (y < h) {
            var row: [Int?] = ([] as! [Int?])
            var x: Int = 0
            while (x < w) {
                var acc: Double = 0.0
                var ky: Int = 0
                while (ky < Int(((kernel).count))) {
                    var kx: Int = 0
                    while (kx < Int((((kernel[0] as! [Double?])).count))) {
                        let iy = ((y &+ ky) &- 1)
                        let ix = ((x &+ kx) &- 1)
                        var pixel: Int = 0
                        if ((((iy >= 0) && (iy < h)) && (ix >= 0)) && (ix < w)) {
                            pixel = (img[iy][ix] as? Int ?? 0)
                        }
                        acc = Double((acc + (Double(kernel[ky][kx]) * Double((1.0 * Double(pixel))))))
                        kx = Int((kx &+ 1))
                    }
                    ky = Int((ky &+ 1))
                }
                row = (_append(row, Int(_int(acc))) as! [Int?])
                x = Int((x &+ 1))
            }
            out = (_append(out, row) as! [[Int?]])
            y = Int((y &+ 1))
        }
        return out
    }
    func sort_ints(_ xs: [Int?]) -> [Int?] {
        var arr: [Int?] = xs
        var i: Int = 0
        while (i < Int(((arr).count))) {
            var j: Int = 0
            while (j < ((Int(((arr).count)) &- 1) &- i)) {
                if ((arr[j] as? Int ?? 0) > (arr[(j &+ 1)] as? Int ?? 0)) {
                    let tmp = (arr[j] as? Int ?? 0)
                    arr = _set(arr, j, (arr[(j &+ 1)] as? Int ?? 0))
                    arr = _set(arr, (j &+ 1), (tmp as! Int))
                }
                j = Int((j &+ 1))
            }
            i = Int((i &+ 1))
        }
        return arr
    }
    func median_filter(_ img: [[Int?]], _ k: Int) -> [[Int?]] {
        let h = Int(((img).count))
        let w = Int((((img[0] as! [Int?])).count))
        let offset = (k / 2)
        var out: [[Int?]] = ([] as! [[Int?]])
        var y: Int = 0
        while (y < h) {
            var row: [Int?] = ([] as! [Int?])
            var x: Int = 0
            while (x < w) {
                var vals: [Int?] = ([] as! [Int?])
                var ky: Int = 0
                while (ky < k) {
                    var kx: Int = 0
                    while (kx < k) {
                        let iy = ((y &+ ky) &- offset)
                        let ix = ((x &+ kx) &- offset)
                        var pixel: Int = 0
                        if ((((iy >= 0) && (iy < h)) && (ix >= 0)) && (ix < w)) {
                            pixel = (img[iy][ix] as? Int ?? 0)
                        }
                        vals = (_append(vals, pixel) as! [Int?])
                        kx = Int((kx &+ 1))
                    }
                    ky = Int((ky &+ 1))
                }
                let sorted: [Int?] = (sort_ints((vals as! [Int?])) as! [Int?])
                row = (_append(row, (sorted[(Int(((sorted).count)) / 2)] as? Int ?? 0)) as! [Int?])
                x = Int((x &+ 1))
            }
            out = (_append(out, row) as! [[Int?]])
            y = Int((y &+ 1))
        }
        return out
    }
    func iabs(_ x: Int) -> Int {
        if (x < 0) {
            return -x
        }
        return x
    }
    func sobel_filter(_ img: [[Int?]]) -> [[Int?]] {
        let gx: [[Int?]] = ([([1, 0, -1] as! [Int?]), ([2, 0, -2] as! [Int?]), ([1, 0, -1] as! [Int?])] as! [[Int?]])
        let gy: [[Int?]] = ([([1, 2, 1] as! [Int?]), ([0, 0, 0] as! [Int?]), ([-1, -2, -1] as! [Int?])] as! [[Int?]])
        let h = Int(((img).count))
        let w = Int((((img[0] as! [Int?])).count))
        var out: [[Int?]] = ([] as! [[Int?]])
        var y: Int = 0
        while (y < h) {
            var row: [Int?] = ([] as! [Int?])
            var x: Int = 0
            while (x < w) {
                var sx: Int = 0
                var sy: Int = 0
                var ky: Int = 0
                while (ky < 3) {
                    var kx: Int = 0
                    while (kx < 3) {
                        let iy = ((y &+ ky) &- 1)
                        let ix = ((x &+ kx) &- 1)
                        var pixel: Int = 0
                        if ((((iy >= 0) && (iy < h)) && (ix >= 0)) && (ix < w)) {
                            pixel = (img[iy][ix] as? Int ?? 0)
                        }
                        sx = Int((sx &+ ((gx[ky][kx] as? Int ?? 0) &* pixel)))
                        sy = Int((sy &+ ((gy[ky][kx] as? Int ?? 0) &* pixel)))
                        kx = Int((kx &+ 1))
                    }
                    ky = Int((ky &+ 1))
                }
                row = (_append(row, (Int(iabs(sx)) &+ Int(iabs(sy)))) as! [Int?])
                x = Int((x &+ 1))
            }
            out = (_append(out, row) as! [[Int?]])
            y = Int((y &+ 1))
        }
        return out
    }
    func get_neighbors_pixel(_ img: [[Int?]], _ x: Int, _ y: Int) -> [Int?] {
        let h = Int(((img).count))
        let w = Int((((img[0] as! [Int?])).count))
        var neighbors: [Int?] = ([] as! [Int?])
        var dy: Int = -1
        while (dy <= 1) {
            var dx: Int = -1
            while (dx <= 1) {
                if (!((dx == 0) && (dy == 0))) {
                    let ny = (y &+ dy)
                    let nx = (x &+ dx)
                    var val: Int = 0
                    if ((((ny >= 0) && (ny < h)) && (nx >= 0)) && (nx < w)) {
                        val = (img[ny][nx] as? Int ?? 0)
                    }
                    neighbors = (_append(neighbors, val) as! [Int?])
                }
                dx = Int((dx &+ 1))
            }
            dy = Int((dy &+ 1))
        }
        return neighbors
    }
    func pow2(_ e: Int) -> Int {
        var r: Int = 1
        var i: Int = 0
        while (i < e) {
            r = Int((r &* 2))
            i = Int((i &+ 1))
        }
        return r
    }
    func local_binary_value(_ img: [[Int?]], _ x: Int, _ y: Int) -> Int {
        let center = (img[y][x] as? Int ?? 0)
        let neighbors: [Int?] = (get_neighbors_pixel((img as! [[Int?]]), x, y) as! [Int?])
        var v: Int = 0
        var i: Int = 0
        while (i < Int(((neighbors).count))) {
            if ((neighbors[i] as? Int ?? 0) >= center) {
                v = Int((v &+ Int(pow2(i))))
            }
            i = Int((i &+ 1))
        }
        return v
    }
    func local_binary_pattern(_ img: [[Int?]]) -> [[Int?]] {
        let h = Int(((img).count))
        let w = Int((((img[0] as! [Int?])).count))
        var out: [[Int?]] = ([] as! [[Int?]])
        var y: Int = 0
        while (y < h) {
            var row: [Int?] = ([] as! [Int?])
            var x: Int = 0
            while (x < w) {
                row = (_append(row, Int(local_binary_value((img as! [[Int?]]), x, y))) as! [Int?])
                x = Int((x &+ 1))
            }
            out = (_append(out, row) as! [[Int?]])
            y = Int((y &+ 1))
        }
        return out
    }
    let img: [[Int?]] = ([([52, 55, 61] as! [Int?]), ([62, 59, 55] as! [Int?]), ([63, 65, 66] as! [Int?])] as! [[Int?]])
    let negative: [[Int?]] = (convert_to_negative((img as! [[Int?]])) as! [[Int?]])
    let contrast: [[Int?]] = (change_contrast((img as! [[Int?]]), 110) as! [[Int?]])
    let kernel: [[Double?]] = (gen_gaussian_kernel(3, 1.0) as! [[Double?]])
    let laplace: [[Double?]] = ([([0.25, 0.5, 0.25] as! [Double?]), ([0.5, -3.0, 0.5] as! [Double?]), ([0.25, 0.5, 0.25] as! [Double?])] as! [[Double?]])
    let convolved: [[Int?]] = (img_convolve((img as! [[Int?]]), (laplace as! [[Double?]])) as! [[Int?]])
    let medianed: [[Int?]] = (median_filter((img as! [[Int?]]), 3) as! [[Int?]])
    let sobel: [[Int?]] = (sobel_filter((img as! [[Int?]])) as! [[Int?]])
    let lbp_img: [[Int?]] = (local_binary_pattern((img as! [[Int?]])) as! [[Int?]])
    print(_p("[" + negative.map{ if let s = $0 as? String { "\"" + s.replacingOccurrences(of: "\"", with: "\\\"") + "\"" } else { _p($0) } }.joined(separator: ", ") + "]"))
    print(_p("[" + contrast.map{ if let s = $0 as? String { "\"" + s.replacingOccurrences(of: "\"", with: "\\\"") + "\"" } else { _p($0) } }.joined(separator: ", ") + "]"))
    print(_p("[" + kernel.map{ if let s = $0 as? String { "\"" + s.replacingOccurrences(of: "\"", with: "\\\"") + "\"" } else { _p($0) } }.joined(separator: ", ") + "]"))
    print(_p("[" + convolved.map{ if let s = $0 as? String { "\"" + s.replacingOccurrences(of: "\"", with: "\\\"") + "\"" } else { _p($0) } }.joined(separator: ", ") + "]"))
    print(_p("[" + medianed.map{ if let s = $0 as? String { "\"" + s.replacingOccurrences(of: "\"", with: "\\\"") + "\"" } else { _p($0) } }.joined(separator: ", ") + "]"))
    print(_p("[" + sobel.map{ if let s = $0 as? String { "\"" + s.replacingOccurrences(of: "\"", with: "\\\"") + "\"" } else { _p($0) } }.joined(separator: ", ") + "]"))
    print(_p("[" + lbp_img.map{ if let s = $0 as? String { "\"" + s.replacingOccurrences(of: "\"", with: "\\\"") + "\"" } else { _p($0) } }.joined(separator: ", ") + "]"))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
