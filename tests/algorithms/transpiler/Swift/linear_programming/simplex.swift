// Generated by Mochi transpiler v0.10.61 on 2025-08-08 16:01:22 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return nil
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func pivot(_ t: inout [[Double]], _ row: Int, _ col: Int) -> [[Double]] {
        var pivotRow: [Double] = ([] as! [Double])
        let pivotVal = Double(_idx(_idx(t, row), col))
        for j in 0..<_int((((_idx(t, row) as! [Double])).count)) {
            pivotRow = (_append(pivotRow, (Double(_idx(_idx(t, row), j)) / pivotVal)) as! [Double])
        }
        t = _set(t, row, (pivotRow as! [Double]))
        for i in 0..<_int(((t).count)) {
            if (i != row) {
                let factor = Double(_idx(_idx(t, i), col))
                var newRow: [Double] = ([] as! [Double])
                for j in 0..<_int((((_idx(t, i) as! [Double])).count)) {
                    let value = (Double(_idx(_idx(t, i), j)) - (factor * Double(_idx(pivotRow, j))))
                    newRow = (_append(newRow, value) as! [Double])
                }
                t = _set(t, i, (newRow as! [Double]))
            }
        }
        return t
    }
    func findPivot(_ t: [[Double]]) -> [Int] {
        var col: Int = 0
        var minVal: Double = 0.0
        for j in 0..<(_int((((_idx(t, 0) as! [Double])).count)) &- 1) {
            let v = Double(_idx(_idx(t, 0), j))
            if (v < minVal) {
                minVal = Double(v)
                col = Int(j)
            }
        }
        if (minVal >= 0.0) {
            return ([-1, -1] as! [Int])
        }
        var row: Int = -1
        var minRatio: Double = 0.0
        var first: Bool = true
        for i in 1..<_int(((t).count)) {
            let coeff = Double(_idx(_idx(t, i), col))
            if (coeff > 0.0) {
                let rhs = Double(_idx(_idx(t, i), (_int((((_idx(t, i) as! [Double])).count)) &- 1)))
                let ratio = (rhs / coeff)
                if (first || (ratio < minRatio)) {
                    minRatio = Double(ratio)
                    row = Int(i)
                    first = false
                }
            }
        }
        return ([row, col] as! [Int])
    }
    func interpret(_ t: [[Double]], _ nVars: Int) -> [String: Double] {
        let lastCol = (_int((((_idx(t, 0) as! [Double])).count)) &- 1)
        var p: Double = Double(_idx(_idx(t, 0), lastCol))
        if (p < 0.0) {
            p = Double(-p)
        }
        var result: [String: Double] = ([:] as! [String: Double])
        result = _set(result, "P", Double(p))
        for i in 0..<nVars {
            var nzRow: Int = -1
            var nzCount: Int = 0
            for r in 0..<_int(((t).count)) {
                let val = Double(_idx(_idx(t, r), i))
                if (val != 0.0) {
                    nzCount = _int((nzCount &+ 1))
                    nzRow = Int(r)
                }
            }
            if ((nzCount == 1) && (Double(_idx(_idx(t, nzRow), i)) == 1.0)) {
                result = _set(result, String(describing: ("x" + _p((i &+ 1)))), Double(_idx(_idx(t, nzRow), lastCol)))
            }
        }
        return result
    }
    func simplex(_ tab: [[Double]]) -> [[Double]] {
        var t: [[Double]] = tab
        while true {
            let p: [Int] = (findPivot((t as! [[Double]])) as! [Int])
            let row = (_idx(p, 0) as? Int ?? 0)
            let col = (_idx(p, 1) as? Int ?? 0)
            if (row < 0) {
                break
            }
            t = (pivot(&t, row, col) as! [[Double]])
        }
        return t
    }
    var tableau: [[Double]] = ([([-1.0, -1.0, 0.0, 0.0, 0.0] as! [Double]), ([1.0, 3.0, 1.0, 0.0, 4.0] as! [Double]), ([3.0, 1.0, 0.0, 1.0, 4.0] as! [Double])] as! [[Double]])
    var finalTab: [[Double]] = (simplex((tableau as! [[Double]])) as! [[Double]])
    let res: [String: Double] = (interpret((finalTab as! [[Double]]), 2) as! [String: Double])
    print(_p(("P: " + _p(Double(res[String("P")])))))
    for i in 0..<2 {
        let key = ("x" + _p((i &+ 1)))
        if (res[key] != nil) {
            print(_p(((key + ": ") + _p(Double(res[String(String(describing: key))])))))
        }
    }
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
