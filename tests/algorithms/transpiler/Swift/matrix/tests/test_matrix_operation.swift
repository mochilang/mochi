// Generated by Mochi transpiler v0.10.63 on 2025-08-12 08:45:47 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func check_matrix(_ mat: [[Double]]) {
        if ((_int(((mat).count)) < 2) || (_int((((_idx(mat, 0) as! [Double])).count)) < 2)) {
            _ = fatalError("Expected a matrix with at least 2x2 dimensions")
        }
    }
    func add(_ a: [[Double]], _ b: [[Double]]) -> [[Double]] {
        _ = check_matrix((a as! [[Double]]))
        _ = check_matrix((b as! [[Double]]))
        if ((_int(((a).count)) != _int(((b).count))) || (_int((((_idx(a, 0) as! [Double])).count)) != _int((((_idx(b, 0) as! [Double])).count)))) {
            _ = fatalError("Matrices must have the same dimensions")
        }
        let rows = _int(((a).count))
        let cols = _int((((_idx(a, 0) as! [Double])).count))
        var result: [[Double]] = ([] as! [[Double]])
        var i = 0
        while (i < rows) {
            var row: [Double] = ([] as! [Double])
            var j = 0
            while (j < cols) {
                row = (_append(row, (Double(_idx(_idx(a, i)!, j)) + Double(_idx(_idx(b, i)!, j)))) as! [Double])
                j = _int((j &+ 1))
            }
            result = (_append(result, row) as! [[Double]])
            i = _int((i &+ 1))
        }
        return result
    }
    func subtract(_ a: [[Double]], _ b: [[Double]]) -> [[Double]] {
        _ = check_matrix((a as! [[Double]]))
        _ = check_matrix((b as! [[Double]]))
        if ((_int(((a).count)) != _int(((b).count))) || (_int((((_idx(a, 0) as! [Double])).count)) != _int((((_idx(b, 0) as! [Double])).count)))) {
            _ = fatalError("Matrices must have the same dimensions")
        }
        let rows = _int(((a).count))
        let cols = _int((((_idx(a, 0) as! [Double])).count))
        var result: [[Double]] = ([] as! [[Double]])
        var i = 0
        while (i < rows) {
            var row: [Double] = ([] as! [Double])
            var j = 0
            while (j < cols) {
                row = (_append(row, (Double(_idx(_idx(a, i)!, j)) - Double(_idx(_idx(b, i)!, j)))) as! [Double])
                j = _int((j &+ 1))
            }
            result = (_append(result, row) as! [[Double]])
            i = _int((i &+ 1))
        }
        return result
    }
    func scalar_multiply(_ a: [[Double]], _ s: Double) -> [[Double]] {
        _ = check_matrix((a as! [[Double]]))
        let rows = _int(((a).count))
        let cols = _int((((_idx(a, 0) as! [Double])).count))
        var result: [[Double]] = ([] as! [[Double]])
        var i = 0
        while (i < rows) {
            var row: [Double] = ([] as! [Double])
            var j = 0
            while (j < cols) {
                row = (_append(row, (Double(_idx(_idx(a, i)!, j)) * s)) as! [Double])
                j = _int((j &+ 1))
            }
            result = (_append(result, row) as! [[Double]])
            i = _int((i &+ 1))
        }
        return result
    }
    func multiply(_ a: [[Double]], _ b: [[Double]]) -> [[Double]] {
        _ = check_matrix((a as! [[Double]]))
        _ = check_matrix((b as! [[Double]]))
        if (_int((((_idx(a, 0) as! [Double])).count)) != _int(((b).count))) {
            _ = fatalError("Invalid dimensions for matrix multiplication")
        }
        let rows = _int(((a).count))
        let cols = _int((((_idx(b, 0) as! [Double])).count))
        var result: [[Double]] = ([] as! [[Double]])
        var i = 0
        while (i < rows) {
            var row: [Double] = ([] as! [Double])
            var j = 0
            while (j < cols) {
                var sum = 0.0
                var k = 0
                while (k < _int(((b).count))) {
                    sum = Double((sum + (Double(_idx(_idx(a, i)!, k)) * Double(_idx(_idx(b, k)!, j)))))
                    k = _int((k &+ 1))
                }
                row = (_append(row, sum) as! [Double])
                j = _int((j &+ 1))
            }
            result = (_append(result, row) as! [[Double]])
            i = _int((i &+ 1))
        }
        return result
    }
    func identity(_ n: Int) -> [[Double]] {
        var result: [[Double]] = ([] as! [[Double]])
        var i = 0
        while (i < n) {
            var row: [Double] = ([] as! [Double])
            var j = 0
            while (j < n) {
                if (i == j) {
                    row = (_append(row, 1.0) as! [Double])
                } else {
                    row = (_append(row, 0.0) as! [Double])
                }
                j = _int((j &+ 1))
            }
            result = (_append(result, row) as! [[Double]])
            i = _int((i &+ 1))
        }
        return result
    }
    func transpose(_ a: [[Double]]) -> [[Double]] {
        _ = check_matrix((a as! [[Double]]))
        let rows = _int(((a).count))
        let cols = _int((((_idx(a, 0) as! [Double])).count))
        var result: [[Double]] = ([] as! [[Double]])
        var j = 0
        while (j < cols) {
            var row: [Double] = ([] as! [Double])
            var i = 0
            while (i < rows) {
                row = (_append(row, Double(_idx(_idx(a, i)!, j))) as! [Double])
                i = _int((i &+ 1))
            }
            result = (_append(result, row) as! [[Double]])
            j = _int((j &+ 1))
        }
        return result
    }
    func main() {
        let mat_a: [[Double]] = ({
            var _arr: [[Double]] = []
            _arr = _append(_arr, ({
                var _arr: [Double] = []
                _arr = _append(_arr, 12.0)
                _arr = _append(_arr, 10.0)
                return _arr
            }() as! [Double]))
            _arr = _append(_arr, ({
                var _arr: [Double] = []
                _arr = _append(_arr, 3.0)
                _arr = _append(_arr, 9.0)
                return _arr
            }() as! [Double]))
            return _arr
        }() as! [[Double]])
        let mat_b: [[Double]] = ({
            var _arr: [[Double]] = []
            _arr = _append(_arr, ({
                var _arr: [Double] = []
                _arr = _append(_arr, 3.0)
                _arr = _append(_arr, 4.0)
                return _arr
            }() as! [Double]))
            _arr = _append(_arr, ({
                var _arr: [Double] = []
                _arr = _append(_arr, 7.0)
                _arr = _append(_arr, 4.0)
                return _arr
            }() as! [Double]))
            return _arr
        }() as! [[Double]])
        let mat_c: [[Double]] = ({
            var _arr: [[Double]] = []
            _arr = _append(_arr, ({
                var _arr: [Double] = []
                _arr = _append(_arr, 3.0)
                _arr = _append(_arr, 0.0)
                _arr = _append(_arr, 2.0)
                return _arr
            }() as! [Double]))
            _arr = _append(_arr, ({
                var _arr: [Double] = []
                _arr = _append(_arr, 2.0)
                _arr = _append(_arr, 0.0)
                _arr = _append(_arr, -2.0)
                return _arr
            }() as! [Double]))
            _arr = _append(_arr, ({
                var _arr: [Double] = []
                _arr = _append(_arr, 0.0)
                _arr = _append(_arr, 1.0)
                _arr = _append(_arr, 1.0)
                return _arr
            }() as! [Double]))
            return _arr
        }() as! [[Double]])
        print(_p("[" + (add((mat_a as! [[Double]]), (mat_b as! [[Double]])) as! [[Double]]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
        print(_p("[" + (subtract((mat_a as! [[Double]]), (mat_b as! [[Double]])) as! [[Double]]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
        print(_p("[" + (multiply((mat_a as! [[Double]]), (mat_b as! [[Double]])) as! [[Double]]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
        print(_p("[" + (scalar_multiply((mat_a as! [[Double]]), 3.5) as! [[Double]]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
        print(_p("[" + (identity(5) as! [[Double]]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
        print(_p("[" + (transpose((mat_c as! [[Double]])) as! [[Double]]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
