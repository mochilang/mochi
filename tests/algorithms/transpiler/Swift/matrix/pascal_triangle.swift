// Generated by Mochi transpiler v0.10.63 on 2025-08-12 08:45:35 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func populate_current_row(_ triangle: [[Int]], _ current_row_idx: Int) -> [Int] {
        var row: [Int] = ([] as! [Int])
        var i = 0
        while (i <= current_row_idx) {
            if ((i == 0) || (i == current_row_idx)) {
                row = (_append(row, 1) as! [Int])
            } else {
                let left = (_idx(_idx(triangle, (current_row_idx &- 1))!, (i &- 1)) as? Int ?? 0)
                let right = (_idx(_idx(triangle, (current_row_idx &- 1))!, i) as? Int ?? 0)
                row = (_append(row, (left &+ right)) as! [Int])
            }
            i = _int((i &+ 1))
        }
        return row
    }
    func generate_pascal_triangle(_ num_rows: Int) -> [[Int]] {
        if (num_rows <= 0) {
            return ([] as! [[Int]])
        }
        var triangle: [[Int]] = ([] as! [[Int]])
        var row_idx = 0
        while (row_idx < num_rows) {
            let row: [Int] = (populate_current_row((triangle as! [[Int]]), row_idx) as! [Int])
            triangle = (_append(triangle, row) as! [[Int]])
            row_idx = _int((row_idx &+ 1))
        }
        return triangle
    }
    func row_to_string(_ row: [Int], _ total_rows: Int, _ row_idx: Int) -> String {
        var line = ""
        var spaces = ((total_rows &- row_idx) &- 1)
        var s = 0
        while (s < spaces) {
            line = ((line + " ") as! String)
            s = _int((s &+ 1))
        }
        var c = 0
        while (c <= row_idx) {
            line = ((line + _p((_idx(row, c) as? Int ?? 0))) as! String)
            if (c != row_idx) {
                line = ((line + " ") as! String)
            }
            c = _int((c &+ 1))
        }
        return line
    }
    func print_pascal_triangle(_ num_rows: Int) {
        let triangle: [[Int]] = (generate_pascal_triangle(num_rows) as! [[Int]])
        var r = 0
        while (r < num_rows) {
            let line = String(describing: row_to_string((_idx(triangle, r) as! [Int]), num_rows, r))
            print(_p(line))
            r = _int((r &+ 1))
        }
    }
    func main() {
        _ = print_pascal_triangle(5)
        print(_p("[" + (generate_pascal_triangle(5) as! [[Int]]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
