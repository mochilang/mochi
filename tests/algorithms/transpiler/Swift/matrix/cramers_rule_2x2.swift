// Generated by Mochi transpiler v0.10.63 on 2025-08-12 08:45:05 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func cramers_rule_2x2(_ eq1: [Double], _ eq2: [Double]) -> [Double] {
        if ((_int(((eq1).count)) != 3) || (_int(((eq2).count)) != 3)) {
            _ = fatalError("Please enter a valid equation.")
        }
        if ((((Double(_idx(eq1, 0)) == 0.0) && (Double(_idx(eq1, 1)) == 0.0)) && (Double(_idx(eq2, 0)) == 0.0)) && (Double(_idx(eq2, 1)) == 0.0)) {
            _ = fatalError("Both a & b of two equations can't be zero.")
        }
        let a1 = Double(_idx(eq1, 0))
        let b1 = Double(_idx(eq1, 1))
        let c1 = Double(_idx(eq1, 2))
        let a2 = Double(_idx(eq2, 0))
        let b2 = Double(_idx(eq2, 1))
        let c2 = Double(_idx(eq2, 2))
        let determinant = ((a1 * b2) - (a2 * b1))
        let determinant_x = ((c1 * b2) - (c2 * b1))
        let determinant_y = ((a1 * c2) - (a2 * c1))
        if (determinant == 0.0) {
            if ((determinant_x == 0.0) && (determinant_y == 0.0)) {
                _ = fatalError("Infinite solutions. (Consistent system)")
            }
            _ = fatalError("No solution. (Inconsistent system)")
        }
        if ((determinant_x == 0.0) && (determinant_y == 0.0)) {
            return ({
                var _arr: [Double] = []
                _arr = _append(_arr, 0.0)
                _arr = _append(_arr, 0.0)
                return _arr
            }() as! [Double])
        }
        let x = (determinant_x / determinant)
        let y = (determinant_y / determinant)
        return ({
            var _arr: [Double] = []
            _arr = _append(_arr, x)
            _arr = _append(_arr, y)
            return _arr
        }() as! [Double])
    }
    func test_cramers_rule_2x2() {
        let r1: [Double] = (cramers_rule_2x2(({
            var _arr: [Double] = []
            _arr = _append(_arr, 2.0)
            _arr = _append(_arr, 3.0)
            _arr = _append(_arr, 0.0)
            return _arr
        }() as! [Double]), ({
            var _arr: [Double] = []
            _arr = _append(_arr, 5.0)
            _arr = _append(_arr, 1.0)
            _arr = _append(_arr, 0.0)
            return _arr
        }() as! [Double])) as! [Double])
        if ((Double(_idx(r1, 0)) != 0.0) || (Double(_idx(r1, 1)) != 0.0)) {
            _ = fatalError("Test1 failed")
        }
        let r2: [Double] = (cramers_rule_2x2(({
            var _arr: [Double] = []
            _arr = _append(_arr, 0.0)
            _arr = _append(_arr, 4.0)
            _arr = _append(_arr, 50.0)
            return _arr
        }() as! [Double]), ({
            var _arr: [Double] = []
            _arr = _append(_arr, 2.0)
            _arr = _append(_arr, 0.0)
            _arr = _append(_arr, 26.0)
            return _arr
        }() as! [Double])) as! [Double])
        if ((Double(_idx(r2, 0)) != 13.0) || (Double(_idx(r2, 1)) != 12.5)) {
            _ = fatalError("Test2 failed")
        }
    }
    func main() {
        _ = test_cramers_rule_2x2()
        print(_p("[" + (cramers_rule_2x2(({
            var _arr: [Double] = []
            _arr = _append(_arr, 11.0)
            _arr = _append(_arr, 2.0)
            _arr = _append(_arr, 30.0)
            return _arr
        }() as! [Double]), ({
            var _arr: [Double] = []
            _arr = _append(_arr, 1.0)
            _arr = _append(_arr, 0.0)
            _arr = _append(_arr, 4.0)
            return _arr
        }() as! [Double])) as! [Double]).map{ if let s = $0 as? String { "\"" + s.replacingOccurrences(of: "\"", with: "\\\"") + "\"" } else { _p($0) } }.joined(separator: ", ") + "]"))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
