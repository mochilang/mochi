// Generated by Mochi transpiler v0.10.63 on 2025-08-12 08:45:16 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
struct Matrix: Codable {
    var data: [[Double]]
    var rows: Int
    var cols: Int
    init() {
        self.data = []
        self.rows = 0
        self.cols = 0
    }
    init(data: [[Double]], rows: Int, cols: Int) {
        self.data = data
        self.rows = rows
        self.cols = cols
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func make_matrix(_ values: [[Double]]) -> Matrix {
        let r = _int(((values).count))
        if (r == 0) {
            return Matrix(data: ([] as! [[Double]]), rows: 0, cols: 0)
        }
        let c = _int((((_idx(values, 0) as! [Double])).count))
        var i = 0
        while (i < r) {
            if (_int((((_idx(values, i) as! [Double])).count)) != c) {
                return Matrix(data: ([] as! [[Double]]), rows: 0, cols: 0)
            }
            i = _int((i &+ 1))
        }
        return Matrix(data: (values as! [[Double]]), rows: Int(r), cols: Int(c))
    }
    func matrix_columns(_ m: Matrix) -> [[Double]] {
        var cols: [[Double]] = ([] as! [[Double]])
        var j = 0
        while (j < m.cols) {
            var col: [Double] = ([] as! [Double])
            var i = 0
            while (i < m.rows) {
                col = (_append(col, Double(_idx(_idx(m.data, i)!, j))) as! [Double])
                i = _int((i &+ 1))
            }
            cols = (_append(cols, col) as! [[Double]])
            j = _int((j &+ 1))
        }
        return cols
    }
    func matrix_identity(_ m: Matrix) -> Matrix {
        var vals: [[Double]] = ([] as! [[Double]])
        var i = 0
        while (i < m.rows) {
            var row: [Double] = ([] as! [Double])
            var j = 0
            while (j < m.cols) {
                let v = Double(((i == j) ? 1.0 : 0.0))
                row = (_append(row, v) as! [Double])
                j = _int((j &+ 1))
            }
            vals = (_append(vals, row) as! [[Double]])
            i = _int((i &+ 1))
        }
        return Matrix(data: (vals as! [[Double]]), rows: (m.rows as? Int ?? 0), cols: (m.cols as? Int ?? 0))
    }
    func matrix_minor(_ m: Matrix, _ r: Int, _ c: Int) -> Double {
        var vals: [[Double]] = ([] as! [[Double]])
        var i = 0
        while (i < m.rows) {
            if (i != r) {
                var row: [Double] = ([] as! [Double])
                var j = 0
                while (j < m.cols) {
                    if (j != c) {
                        row = (_append(row, Double(_idx(_idx(m.data, i)!, j))) as! [Double])
                    }
                    j = _int((j &+ 1))
                }
                vals = (_append(vals, row) as! [[Double]])
            }
            i = _int((i &+ 1))
        }
        let sub = Matrix(data: (vals as! [[Double]]), rows: _int((m.rows &- 1)), cols: _int((m.cols &- 1)))
        return Double(matrix_determinant((sub as! Matrix)))
    }
    func matrix_cofactor(_ m: Matrix, _ r: Int, _ c: Int) -> Double {
        let minor = Double(matrix_minor((m as! Matrix), r, c))
        if (((_int((r &+ c)) % 2 + 2) % 2) == 0) {
            return minor
        }
        return (-1.0 * minor)
    }
    func matrix_minors(_ m: Matrix) -> Matrix {
        var vals: [[Double]] = ([] as! [[Double]])
        var i = 0
        while (i < m.rows) {
            var row: [Double] = ([] as! [Double])
            var j = 0
            while (j < m.cols) {
                row = (_append(row, Double(matrix_minor((m as! Matrix), i, j))) as! [Double])
                j = _int((j &+ 1))
            }
            vals = (_append(vals, row) as! [[Double]])
            i = _int((i &+ 1))
        }
        return Matrix(data: (vals as! [[Double]]), rows: (m.rows as? Int ?? 0), cols: (m.cols as? Int ?? 0))
    }
    func matrix_cofactors(_ m: Matrix) -> Matrix {
        var vals: [[Double]] = ([] as! [[Double]])
        var i = 0
        while (i < m.rows) {
            var row: [Double] = ([] as! [Double])
            var j = 0
            while (j < m.cols) {
                row = (_append(row, Double(matrix_cofactor((m as! Matrix), i, j))) as! [Double])
                j = _int((j &+ 1))
            }
            vals = (_append(vals, row) as! [[Double]])
            i = _int((i &+ 1))
        }
        return Matrix(data: (vals as! [[Double]]), rows: (m.rows as? Int ?? 0), cols: (m.cols as? Int ?? 0))
    }
    func matrix_determinant(_ m: Matrix) -> Double {
        if (m.rows != m.cols) {
            return 0.0
        }
        if (m.rows == 0) {
            return 0.0
        }
        if (m.rows == 1) {
            return Double(_idx(_idx(m.data, 0)!, 0))
        }
        if (m.rows == 2) {
            return ((Double(_idx(_idx(m.data, 0)!, 0)) * Double(_idx(_idx(m.data, 1)!, 1))) - (Double(_idx(_idx(m.data, 0)!, 1)) * Double(_idx(_idx(m.data, 1)!, 0))))
        }
        var sum = 0.0
        var j = 0
        while (j < m.cols) {
            sum = Double((sum + (Double(_idx(_idx(m.data, 0)!, j)) * Double(matrix_cofactor((m as! Matrix), 0, j)))))
            j = _int((j &+ 1))
        }
        return sum
    }
    func matrix_is_invertible(_ m: Matrix) -> Bool {
        return (Double(matrix_determinant((m as! Matrix))) != 0.0)
    }
    func matrix_adjugate(_ m: Matrix) -> Matrix {
        let cof = matrix_cofactors((m as! Matrix))
        var vals: [[Double]] = ([] as! [[Double]])
        var i = 0
        while (i < m.rows) {
            var row: [Double] = ([] as! [Double])
            var j = 0
            while (j < m.cols) {
                row = (_append(row, Double(_idx(_idx(cof.data, j)!, i))) as! [Double])
                j = _int((j &+ 1))
            }
            vals = (_append(vals, row) as! [[Double]])
            i = _int((i &+ 1))
        }
        return Matrix(data: (vals as! [[Double]]), rows: (m.rows as? Int ?? 0), cols: (m.cols as? Int ?? 0))
    }
    func matrix_inverse(_ m: Matrix) -> Matrix {
        let det = Double(matrix_determinant((m as! Matrix)))
        if (det == 0.0) {
            return Matrix(data: ([] as! [[Double]]), rows: 0, cols: 0)
        }
        let adj = matrix_adjugate((m as! Matrix))
        return matrix_mul_scalar((adj as! Matrix), Double((1.0 / det)))
    }
    func matrix_add_row(_ m: Matrix, _ row: [Double]) -> Matrix {
        var newData = m.data
        newData = (_append(newData, row) as! [[Double]])
        return Matrix(data: (newData as! [[Double]]), rows: _int((m.rows &+ 1)), cols: (m.cols as? Int ?? 0))
    }
    func matrix_add_column(_ m: Matrix, _ col: [Double]) -> Matrix {
        var newData: [[Double]] = ([] as! [[Double]])
        var i = 0
        while (i < m.rows) {
            newData = (_append(newData, (_append((_idx(m.data, i) as! [Double]), Double(_idx(col, i))) as! [Double])) as! [[Double]])
            i = _int((i &+ 1))
        }
        return Matrix(data: (newData as! [[Double]]), rows: (m.rows as? Int ?? 0), cols: _int((m.cols &+ 1)))
    }
    func matrix_mul_scalar(_ m: Matrix, _ s: Double) -> Matrix {
        var vals: [[Double]] = ([] as! [[Double]])
        var i = 0
        while (i < m.rows) {
            var row: [Double] = ([] as! [Double])
            var j = 0
            while (j < m.cols) {
                row = (_append(row, (Double(_idx(_idx(m.data, i)!, j)) * s)) as! [Double])
                j = _int((j &+ 1))
            }
            vals = (_append(vals, row) as! [[Double]])
            i = _int((i &+ 1))
        }
        return Matrix(data: (vals as! [[Double]]), rows: (m.rows as? Int ?? 0), cols: (m.cols as? Int ?? 0))
    }
    func matrix_neg(_ m: Matrix) -> Matrix {
        return matrix_mul_scalar((m as! Matrix), Double(-1.0))
    }
    func matrix_add(_ a: Matrix, _ b: Matrix) -> Matrix {
        if ((a.rows != b.rows) || (a.cols != b.cols)) {
            return Matrix(data: ([] as! [[Double]]), rows: 0, cols: 0)
        }
        var vals: [[Double]] = ([] as! [[Double]])
        var i = 0
        while (i < a.rows) {
            var row: [Double] = ([] as! [Double])
            var j = 0
            while (j < a.cols) {
                row = (_append(row, (Double(_idx(_idx(a.data, i)!, j)) + Double(_idx(_idx(b.data, i)!, j)))) as! [Double])
                j = _int((j &+ 1))
            }
            vals = (_append(vals, row) as! [[Double]])
            i = _int((i &+ 1))
        }
        return Matrix(data: (vals as! [[Double]]), rows: (a.rows as? Int ?? 0), cols: (a.cols as? Int ?? 0))
    }
    func matrix_sub(_ a: Matrix, _ b: Matrix) -> Matrix {
        if ((a.rows != b.rows) || (a.cols != b.cols)) {
            return Matrix(data: ([] as! [[Double]]), rows: 0, cols: 0)
        }
        var vals: [[Double]] = ([] as! [[Double]])
        var i = 0
        while (i < a.rows) {
            var row: [Double] = ([] as! [Double])
            var j = 0
            while (j < a.cols) {
                row = (_append(row, (Double(_idx(_idx(a.data, i)!, j)) - Double(_idx(_idx(b.data, i)!, j)))) as! [Double])
                j = _int((j &+ 1))
            }
            vals = (_append(vals, row) as! [[Double]])
            i = _int((i &+ 1))
        }
        return Matrix(data: (vals as! [[Double]]), rows: (a.rows as? Int ?? 0), cols: (a.cols as? Int ?? 0))
    }
    func matrix_dot(_ row: [Double], _ col: [Double]) -> Double {
        var sum = 0.0
        var i = 0
        while (i < _int(((row).count))) {
            sum = Double((sum + (Double(_idx(row, i)) * Double(_idx(col, i)))))
            i = _int((i &+ 1))
        }
        return sum
    }
    func matrix_mul(_ a: Matrix, _ b: Matrix) -> Matrix {
        if (a.cols != b.rows) {
            return Matrix(data: ([] as! [[Double]]), rows: 0, cols: 0)
        }
        let bcols: [[Double]] = (matrix_columns((b as! Matrix)) as! [[Double]])
        var vals: [[Double]] = ([] as! [[Double]])
        var i = 0
        while (i < a.rows) {
            var row: [Double] = ([] as! [Double])
            var j = 0
            while (j < b.cols) {
                row = (_append(row, Double(matrix_dot((_idx(a.data, i) as! [Double]), (_idx(bcols, j) as! [Double])))) as! [Double])
                j = _int((j &+ 1))
            }
            vals = (_append(vals, row) as! [[Double]])
            i = _int((i &+ 1))
        }
        return Matrix(data: (vals as! [[Double]]), rows: (a.rows as? Int ?? 0), cols: (b.cols as? Int ?? 0))
    }
    func matrix_pow(_ m: Matrix, _ p: Int) -> Matrix {
        if (p == 0) {
            return matrix_identity((m as! Matrix))
        }
        if (p < 0) {
            if matrix_is_invertible((m as! Matrix)) {
                return matrix_pow((matrix_inverse((m as! Matrix)) as! Matrix), -p)
            }
            return Matrix(data: ([] as! [[Double]]), rows: 0, cols: 0)
        }
        var result = m
        var i = 1
        while (i < p) {
            result = (matrix_mul((result as! Matrix), (m as! Matrix)) as! Matrix)
            i = _int((i &+ 1))
        }
        return result
    }
    func matrix_to_string(_ m: Matrix) -> String {
        if (m.rows == 0) {
            return "[]"
        }
        var s = "["
        var i = 0
        while (i < m.rows) {
            s = ((s + "[") as! String)
            var j = 0
            while (j < m.cols) {
                s = ((s + _p(Double(_idx(_idx(m.data, i)!, j)))) as! String)
                if (j < (m.cols &- 1)) {
                    s = ((s + " ") as! String)
                }
                j = _int((j &+ 1))
            }
            s = ((s + "]") as! String)
            if (i < (m.rows &- 1)) {
                s = ((s + "\n ") as! String)
            }
            i = _int((i &+ 1))
        }
        s = ((s + "]") as! String)
        return s
    }
    func main() {
        let m = make_matrix(({
            var _arr: [[Double]] = []
            _arr = _append(_arr, ({
                var _arr: [Double] = []
                _arr = _append(_arr, 1.0)
                _arr = _append(_arr, 2.0)
                _arr = _append(_arr, 3.0)
                return _arr
            }() as! [Double]))
            _arr = _append(_arr, ({
                var _arr: [Double] = []
                _arr = _append(_arr, 4.0)
                _arr = _append(_arr, 5.0)
                _arr = _append(_arr, 6.0)
                return _arr
            }() as! [Double]))
            _arr = _append(_arr, ({
                var _arr: [Double] = []
                _arr = _append(_arr, 7.0)
                _arr = _append(_arr, 8.0)
                _arr = _append(_arr, 9.0)
                return _arr
            }() as! [Double]))
            return _arr
        }() as! [[Double]]))
        print(_p(String(describing: matrix_to_string((m as! Matrix)))))
        print(_p("[" + (matrix_columns((m as! Matrix)) as! [[Double]]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
        print(_p(((_p(m.rows) + ",") + _p(m.cols))))
        print(_p(_p(matrix_is_invertible((m as! Matrix)))))
        print(_p(String(describing: matrix_to_string((matrix_identity((m as! Matrix)) as! Matrix)))))
        print(_p(_p(Double(matrix_determinant((m as! Matrix))))))
        print(_p(String(describing: matrix_to_string((matrix_minors((m as! Matrix)) as! Matrix)))))
        print(_p(String(describing: matrix_to_string((matrix_cofactors((m as! Matrix)) as! Matrix)))))
        print(_p(String(describing: matrix_to_string((matrix_adjugate((m as! Matrix)) as! Matrix)))))
        let m2 = matrix_mul_scalar((m as! Matrix), 3.0)
        print(_p(String(describing: matrix_to_string((m2 as! Matrix)))))
        print(_p(String(describing: matrix_to_string((matrix_add((m as! Matrix), (m2 as! Matrix)) as! Matrix)))))
        print(_p(String(describing: matrix_to_string((matrix_sub((m as! Matrix), (m2 as! Matrix)) as! Matrix)))))
        print(_p(String(describing: matrix_to_string((matrix_pow((m as! Matrix), 3) as! Matrix)))))
        let m3 = matrix_add_row((m as! Matrix), ({
            var _arr: [Double] = []
            _arr = _append(_arr, 10.0)
            _arr = _append(_arr, 11.0)
            _arr = _append(_arr, 12.0)
            return _arr
        }() as! [Double]))
        print(_p(String(describing: matrix_to_string((m3 as! Matrix)))))
        let m4 = matrix_add_column((m2 as! Matrix), ({
            var _arr: [Double] = []
            _arr = _append(_arr, 8.0)
            _arr = _append(_arr, 16.0)
            _arr = _append(_arr, 32.0)
            return _arr
        }() as! [Double]))
        print(_p(String(describing: matrix_to_string((matrix_mul((m3 as! Matrix), (m4 as! Matrix)) as! Matrix)))))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
