// Generated by Mochi transpiler v0.10.63 on 2025-08-12 08:45:13 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _concat<T>(_ a: [T], _ b: [T]) -> [T] {
    var out = a
    out.append(contentsOf: b)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
func _split(_ s: String, _ sep: String) -> [String] {
    let d = sep.isEmpty ? " " : sep
    return s.components(separatedBy: d)
}
func _slice<T>(_ xs: [T], _ start: Int, _ end: Int) -> [T] {
    var s = start
    var e = end
    if s < 0 { s = 0 }
    if e > xs.count { e = xs.count }
    if s > e { s = e }
    return Array(xs[s..<e])
}
struct Coord: Codable {
    var x: Int
    var y: Int
    init() {
        self.x = 0
        self.y = 0
    }
    init(x: Int, y: Int) {
        self.x = x
        self.y = y
    }
}
struct PlayResult: Codable {
    var matrix: [[String]]
    var score: Int
    init() {
        self.matrix = []
        self.score = 0
    }
    init(matrix: [[String]], score: Int) {
        self.matrix = matrix
        self.score = score
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func is_alnum(_ ch: String) -> Bool {
        return ((((ch >= "0") && (ch <= "9")) || ((ch >= "A") && (ch <= "Z"))) || ((ch >= "a") && (ch <= "z")))
    }
    func to_int(_ token: String) -> Int {
        var res = 0
        var i = 0
        while (i < _int(((token).count))) {
            res = _int(((res &* 10) &+ _int(_int(String(Array(String(describing: (token as! String)))[i..<(i &+ 1)])))))
            i = _int((i &+ 1))
        }
        return res
    }
    func split(_ s: String, _ sep: String) -> [String] {
        var res: [String] = ([] as! [String])
        var current = ""
        var i = 0
        while (i < _int(((s).count))) {
            let ch = String(describing: String(Array(String(describing: (s as! String)))[i..<(i &+ 1)]))
            if (ch == sep) {
                res = (_append(res, current) as! [String])
                current = ""
            } else {
                current = ((current + ch) as! String)
            }
            i = _int((i &+ 1))
        }
        res = (_append(res, current) as! [String])
        return res
    }
    func parse_moves(_ input_str: String) -> [Coord] {
        let pairs: [String] = (_split(input_str, ",") as! [String])
        var moves: [Coord] = ([] as! [Coord])
        var i = 0
        while (i < _int(((pairs).count))) {
            let pair = (_idx(pairs, i) as! String)
            var numbers: [String] = ([] as! [String])
            var num = ""
            var j = 0
            while (j < _int(((pair).count))) {
                let ch = String(describing: String(Array(String(describing: (pair as! String)))[j..<(j &+ 1)]))
                if (ch == " ") {
                    if (num != "") {
                        numbers = (_append(numbers, num) as! [String])
                        num = ""
                    }
                } else {
                    num = ((num + ch) as! String)
                }
                j = _int((j &+ 1))
            }
            if (num != "") {
                numbers = (_append(numbers, num) as! [String])
            }
            if (_int(((numbers).count)) != 2) {
                _ = fatalError("Each move must have exactly two numbers.")
            }
            let x = _int(to_int((_idx(numbers, 0) as! String)))
            let y = _int(to_int((_idx(numbers, 1) as! String)))
            moves = (_append(moves, Coord(x: Int(x), y: Int(y))) as! [Coord])
            i = _int((i &+ 1))
        }
        return moves
    }
    func validate_matrix_size(_ size: Int) {
        if (size <= 0) {
            _ = fatalError("Matrix size must be a positive integer.")
        }
    }
    func validate_matrix_content(_ matrix: [String], _ size: Int) {
        if (_int(((matrix).count)) != size) {
            _ = fatalError("The matrix dont match with size.")
        }
        var i = 0
        while (i < size) {
            let row = (_idx(matrix, i) as! String)
            if (_int(((row).count)) != size) {
                _ = fatalError((("Each row in the matrix must have exactly " + _p(size)) + " characters."))
            }
            var j = 0
            while (j < size) {
                let ch = String(describing: String(Array(String(describing: (row as! String)))[j..<(j &+ 1)]))
                if (!is_alnum((ch as! String))) {
                    _ = fatalError("Matrix rows can only contain letters and numbers.")
                }
                j = _int((j &+ 1))
            }
            i = _int((i &+ 1))
        }
    }
    func validate_moves(_ moves: [Coord], _ size: Int) {
        var i = 0
        while (i < _int(((moves).count))) {
            let mv = (_idx(moves, i) as! Coord)
            if ((((mv.x < 0) || (mv.x >= size)) || (mv.y < 0)) || (mv.y >= size)) {
                _ = fatalError("Move is out of bounds for a matrix.")
            }
            i = _int((i &+ 1))
        }
    }
    func contains(_ pos: [Coord], _ r: Int, _ c: Int) -> Bool {
        var i = 0
        while (i < _int(((pos).count))) {
            let p = (_idx(pos, i) as! Coord)
            if ((p.x == r) && (p.y == c)) {
                return true
            }
            i = _int((i &+ 1))
        }
        return false
    }
    func find_repeat(_ matrix_g: [[String]], _ row: Int, _ column: Int, _ size: Int) -> [Coord] {
        var column = column
        column = _int(((size &- 1) &- column))
        var visited: [Coord] = ([] as! [Coord])
        var repeated: [Coord] = ([] as! [Coord])
        let color = (_idx(_idx(matrix_g, column)!, row) as! String)
        if (color == "-") {
            return repeated
        }
        var stack: [Coord] = ({
            var _arr: [Coord] = []
            _arr = _append(_arr, Coord(x: Int(column), y: Int(row)))
            return _arr
        }() as! [Coord])
        while (_int(((stack).count)) > 0) {
            let idx = (_int(((stack).count)) &- 1)
            let pos = (_idx(stack, idx) as! Coord)
            stack = (_slice(Array(stack), 0, idx) as! [Coord])
            if ((((pos.x < 0) || (pos.x >= size)) || (pos.y < 0)) || (pos.y >= size)) {
                continue
            }
            if contains((visited as! [Coord]), pos.x, pos.y) {
                continue
            }
            visited = (_append(visited, pos) as! [Coord])
            if ((_idx(_idx(matrix_g, pos.x)!, pos.y) as! String) == color) {
                repeated = (_append(repeated, pos) as! [Coord])
                stack = (_append(stack, Coord(x: _int((pos.x &- 1)), y: (pos.y as? Int ?? 0))) as! [Coord])
                stack = (_append(stack, Coord(x: _int((pos.x &+ 1)), y: (pos.y as? Int ?? 0))) as! [Coord])
                stack = (_append(stack, Coord(x: (pos.x as? Int ?? 0), y: _int((pos.y &- 1)))) as! [Coord])
                stack = (_append(stack, Coord(x: (pos.x as? Int ?? 0), y: _int((pos.y &+ 1)))) as! [Coord])
            }
        }
        return repeated
    }
    func increment_score(_ count: Int) -> Int {
        return ((count &* _int((count &+ 1))) / 2)
    }
    func move_x(_ matrix_g: [[String]], _ column: Int, _ size: Int) -> [[String]] {
        var matrix_g = matrix_g
        var new_list: [String] = ([] as! [String])
        var row = 0
        while (row < size) {
            let val = (_idx(_idx(matrix_g, row)!, column) as! String)
            if (val != "-") {
                new_list = (_append(new_list, val) as! [String])
            } else {
                new_list = ((_concat(({
                    var _arr: [String] = []
                    _arr = _append(_arr, val)
                    return _arr
                }() as! [String]), new_list) as! [Any?]) as! [String])
            }
            row = _int((row &+ 1))
        }
        row = 0
        while (row < size) {
            var _tmp5 = (_idx(matrix_g, row) as! [String])
            _tmp5 = _set(_tmp5, column, (_idx(new_list, row) as! String))
            matrix_g = _set(matrix_g, row, (_tmp5 as! [String]))
            row = _int((row &+ 1))
        }
        return matrix_g
    }
    func move_y(_ matrix_g: [[String]], _ size: Int) -> [[String]] {
        var matrix_g = matrix_g
        var empty_cols: [Int] = ([] as! [Int])
        var column = (size &- 1)
        while (column >= 0) {
            var row = 0
            var all_empty = true
            while (row < size) {
                if ((_idx(_idx(matrix_g, row)!, column) as! String) != "-") {
                    all_empty = false
                    break
                }
                row = _int((row &+ 1))
            }
            if all_empty {
                empty_cols = (_append(empty_cols, column) as! [Int])
            }
            column = _int((column &- 1))
        }
        var i = 0
        while (i < _int(((empty_cols).count))) {
            let col = (_idx(empty_cols, i) as? Int ?? 0)
            var c = (col &+ 1)
            while (c < size) {
                var r = 0
                while (r < size) {
                    var _tmp6 = (_idx(matrix_g, r) as! [String])
                    _tmp6 = _set(_tmp6, (c &- 1), (_idx(_idx(matrix_g, r)!, c) as! String))
                    matrix_g = _set(matrix_g, r, (_tmp6 as! [String]))
                    r = _int((r &+ 1))
                }
                c = _int((c &+ 1))
            }
            var r = 0
            while (r < size) {
                var _tmp7 = (_idx(matrix_g, r) as! [String])
                _tmp7 = _set(_tmp7, (size &- 1), "-")
                matrix_g = _set(matrix_g, r, (_tmp7 as! [String]))
                r = _int((r &+ 1))
            }
            i = _int((i &+ 1))
        }
        return matrix_g
    }
    func play(_ matrix_g: [[String]], _ pos_x: Int, _ pos_y: Int, _ size: Int) -> PlayResult {
        var matrix_g = matrix_g
        var pos_y = pos_y
        let same_colors: [Coord] = (find_repeat((matrix_g as! [[String]]), pos_x, pos_y, size) as! [Coord])
        if (_int(((same_colors).count)) != 0) {
            var i = 0
            while (i < _int(((same_colors).count))) {
                let p = (_idx(same_colors, i) as! Coord)
                var _tmp8 = (_idx(matrix_g, p.x) as! [String])
                _tmp8 = _set(_tmp8, p.y, "-")
                matrix_g = _set(matrix_g, p.x, (_tmp8 as! [String]))
                i = _int((i &+ 1))
            }
            var column = 0
            while (column < size) {
                matrix_g = (move_x((matrix_g as! [[String]]), column, size) as! [[String]])
                column = _int((column &+ 1))
            }
            matrix_g = (move_y((matrix_g as! [[String]]), size) as! [[String]])
        }
        let sc = _int(increment_score(_int(((same_colors).count))))
        return PlayResult(matrix: (matrix_g as! [[String]]), score: Int(sc))
    }
    func build_matrix(_ matrix: [String]) -> [[String]] {
        var res: [[String]] = ([] as! [[String]])
        var i = 0
        while (i < _int(((matrix).count))) {
            let row = (_idx(matrix, i) as! String)
            var row_list: [String] = ([] as! [String])
            var j = 0
            while (j < _int(((row).count))) {
                row_list = (_append(row_list, String(describing: String(Array(String(describing: (row as! String)))[j..<(j &+ 1)]))) as! [String])
                j = _int((j &+ 1))
            }
            res = (_append(res, row_list) as! [[String]])
            i = _int((i &+ 1))
        }
        return res
    }
    func process_game(_ size: Int, _ matrix: [String], _ moves: [Coord]) -> Int {
        var game_matrix = (build_matrix((matrix as! [String])) as! [[String]])
        var total = 0
        var i = 0
        while (i < _int(((moves).count))) {
            var mv = (_idx(moves, i) as! Coord)
            let res = play((game_matrix as! [[String]]), mv.x, mv.y, size)
            game_matrix = (res.matrix as! [[String]])
            total = _int((total &+ res.score))
            i = _int((i &+ 1))
        }
        return total
    }
    func main() {
        let size = 4
        let matrix: [String] = ({
            var _arr: [String] = []
            _arr = _append(_arr, "RRBG")
            _arr = _append(_arr, "RBBG")
            _arr = _append(_arr, "YYGG")
            _arr = _append(_arr, "XYGG")
            return _arr
        }() as! [String])
        let moves: [Coord] = (parse_moves("0 1,1 1") as! [Coord])
        _ = validate_matrix_size(size)
        _ = validate_matrix_content((matrix as! [String]), size)
        _ = validate_moves((moves as! [Coord]), size)
        let score = _int(process_game(size, (matrix as! [String]), (moves as! [Coord])))
        print(_p(_p(score)))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
