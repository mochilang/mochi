// Generated by Mochi transpiler v0.10.73 on 2025-08-25 22:33:09 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.isNaN || d.isInfinite {
                return String(d)
            }
            if d.rounded(.towardZero) == d {
                // avoid overflow when converting to Int64
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _num(_ v: Any) -> Double {
    if let d = v as? Double { return d }
    if let i = v as? Int { return Double(i) }
    if let i = v as? Int64 { return Double(i) }
    return 0
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first!
}
func _idx<K: Hashable, V>(_ m: [K: V], _ k: K) -> V? {
    return m[k]
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    var i = idx
    if i < 0 { i += out.count }
    if i < out.count {
        out[i] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: i - out.count + 1))
        out[i] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func depth_first_search(_ grid: [[Int]], _ row: Int, _ col: Int, _ visit: inout [[Bool]]) -> Int {
        let row_length = _int(((grid).count))
        let col_length = _int((((_idx(grid, 0) as! [Int])).count))
        if (((((row < 0) || (col < 0)) || (row == row_length)) || (col == col_length))) {
            return 0
        }
        if ((_idx(_idx(visit, row), col) as! Bool)) {
            return 0
        }
        if (((_idx(_idx(grid, row), col) as? Int ?? 0) == 1)) {
            return 0
        }
        if (((row == (row_length &- 1)) && (col == (col_length &- 1)))) {
            return 1
        }
        var _tmp3 = (_idx(visit, row) as! [Bool])
        _tmp3 = _set(_tmp3, col, { let _tmp4 = true; return _tmp4 }())
        visit = _set(visit, row, { let _tmp5 = (_tmp3 as! [Bool]); return _tmp5 }())
        var count = 0
        count = _int((count &+ _int(depth_first_search((grid as! [[Int]]), (row &+ 1), col, &visit))))
        count = _int((count &+ _int(depth_first_search((grid as! [[Int]]), (row &- 1), col, &visit))))
        count = _int((count &+ _int(depth_first_search((grid as! [[Int]]), row, (col &+ 1), &visit))))
        count = _int((count &+ _int(depth_first_search((grid as! [[Int]]), row, (col &- 1), &visit))))
        var _tmp4 = (_idx(visit, row) as! [Bool])
        _tmp4 = _set(_tmp4, col, { let _tmp6 = false; return _tmp6 }())
        visit = _set(visit, row, { let _tmp7 = (_tmp4 as! [Bool]); return _tmp7 }())
        return count
    }
    func count_paths(_ grid: [[Int]]) -> Int {
        let rows = _int(((grid).count))
        let cols = _int((((_idx(grid, 0) as! [Int])).count))
        var visit: [[Bool]] = ([] as! [[Bool]])
        var i = 0
        while ((i < rows)) {
            var row_visit: [Bool] = ([] as! [Bool])
            var j = 0
            while ((j < cols)) {
                row_visit = (_append(row_visit, false) as! [Bool])
                j = _int((j &+ 1))
            }
            visit = (_append(visit, row_visit) as! [[Bool]])
            i = _int((i &+ 1))
        }
        return _int(depth_first_search((grid as! [[Int]]), 0, 0, &visit))
    }
    func main() {
        let grid1: [[Int]] = ({
            var _arr: [[Int]] = []
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 0)
                _arr = _append(_arr, 0)
                _arr = _append(_arr, 0)
                _arr = _append(_arr, 0)
                return _arr
            }() as! [Int]))
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 1)
                _arr = _append(_arr, 1)
                _arr = _append(_arr, 0)
                _arr = _append(_arr, 0)
                return _arr
            }() as! [Int]))
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 0)
                _arr = _append(_arr, 0)
                _arr = _append(_arr, 0)
                _arr = _append(_arr, 1)
                return _arr
            }() as! [Int]))
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 0)
                _arr = _append(_arr, 1)
                _arr = _append(_arr, 0)
                _arr = _append(_arr, 0)
                return _arr
            }() as! [Int]))
            return _arr
        }() as! [[Int]])
        print(_p(_p(_int(count_paths((grid1 as! [[Int]]))))))
        let grid2: [[Int]] = ({
            var _arr: [[Int]] = []
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 0)
                _arr = _append(_arr, 0)
                _arr = _append(_arr, 0)
                _arr = _append(_arr, 0)
                _arr = _append(_arr, 0)
                return _arr
            }() as! [Int]))
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 0)
                _arr = _append(_arr, 1)
                _arr = _append(_arr, 1)
                _arr = _append(_arr, 1)
                _arr = _append(_arr, 0)
                return _arr
            }() as! [Int]))
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 0)
                _arr = _append(_arr, 1)
                _arr = _append(_arr, 1)
                _arr = _append(_arr, 1)
                _arr = _append(_arr, 0)
                return _arr
            }() as! [Int]))
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 0)
                _arr = _append(_arr, 0)
                _arr = _append(_arr, 0)
                _arr = _append(_arr, 0)
                _arr = _append(_arr, 0)
                return _arr
            }() as! [Int]))
            return _arr
        }() as! [[Int]])
        print(_p(_p(_int(count_paths((grid2 as! [[Int]]))))))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
