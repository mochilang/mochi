// Generated by Mochi transpiler v0.10.63 on 2025-08-12 08:45:27 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func encode(_ row: Int, _ col: Int) -> String {
        return ((_p(row) + ",") + _p(col))
    }
    func is_safe(_ row: Int, _ col: Int, _ rows: Int, _ cols: Int) -> Bool {
        return ((((row >= 0) && (row < rows)) && (col >= 0)) && (col < cols))
    }
    func has(_ seen: [String: Bool], _ key: String) -> Bool {
        return (seen[key] != nil)
    }
    func depth_first_search(_ row: Int, _ col: Int, _ seen: [String: Bool], _ mat: [[Int]]) -> Int {
        var seen = seen
        let rows = _int(((mat).count))
        let cols = _int((((_idx(mat, 0) as! [Int])).count))
        let key = String(describing: encode(row, col))
        if ((is_safe(row, col, rows, cols) && ((!has((seen as! [String: Bool]), (key as! String))) as! Bool)) && ((_idx(_idx(mat, row)!, col) as? Int ?? 0) == 1)) {
            seen = _set(seen, String(describing: key), true)
            return ((((1 &+ _int(depth_first_search((row &+ 1), col, (seen as! [String: Bool]), (mat as! [[Int]])))) &+ _int(depth_first_search((row &- 1), col, (seen as! [String: Bool]), (mat as! [[Int]])))) &+ _int(depth_first_search(row, (col &+ 1), (seen as! [String: Bool]), (mat as! [[Int]])))) &+ _int(depth_first_search(row, (col &- 1), (seen as! [String: Bool]), (mat as! [[Int]]))))
        } else {
            return 0
        }
    }
    func find_max_area(_ mat: [[Int]]) -> Int {
        var seen: [String: Bool] = ([:] as! [String: Bool])
        let rows = _int(((mat).count))
        var max_area = 0
        var r = 0
        while (r < rows) {
            let line: [Int] = (_idx(mat, r) as! [Int])
            let cols = _int(((line).count))
            var c = 0
            while (c < cols) {
                if ((_idx(line, c) as? Int ?? 0) == 1) {
                    let key = String(describing: encode(r, c))
                    if (!(seen[key] != nil)) {
                        let area = _int(depth_first_search(r, c, (seen as! [String: Bool]), (mat as! [[Int]])))
                        if (area > max_area) {
                            max_area = Int(area)
                        }
                    }
                }
                c = _int((c &+ 1))
            }
            r = _int((r &+ 1))
        }
        return max_area
    }
    let matrix: [[Int]] = ({
        var _arr: [[Int]] = []
        _arr = _append(_arr, ({
            var _arr: [Int] = []
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 1)
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 1)
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 0)
            return _arr
        }() as! [Int]))
        _arr = _append(_arr, ({
            var _arr: [Int] = []
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 1)
            _arr = _append(_arr, 1)
            _arr = _append(_arr, 1)
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 0)
            return _arr
        }() as! [Int]))
        _arr = _append(_arr, ({
            var _arr: [Int] = []
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 1)
            _arr = _append(_arr, 1)
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 1)
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 0)
            return _arr
        }() as! [Int]))
        _arr = _append(_arr, ({
            var _arr: [Int] = []
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 1)
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 1)
            _arr = _append(_arr, 1)
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 1)
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 1)
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 0)
            return _arr
        }() as! [Int]))
        _arr = _append(_arr, ({
            var _arr: [Int] = []
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 1)
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 1)
            _arr = _append(_arr, 1)
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 1)
            _arr = _append(_arr, 1)
            _arr = _append(_arr, 1)
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 0)
            return _arr
        }() as! [Int]))
        _arr = _append(_arr, ({
            var _arr: [Int] = []
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 1)
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 0)
            return _arr
        }() as! [Int]))
        _arr = _append(_arr, ({
            var _arr: [Int] = []
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 1)
            _arr = _append(_arr, 1)
            _arr = _append(_arr, 1)
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 0)
            return _arr
        }() as! [Int]))
        _arr = _append(_arr, ({
            var _arr: [Int] = []
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 1)
            _arr = _append(_arr, 1)
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 0)
            return _arr
        }() as! [Int]))
        return _arr
    }() as! [[Int]])
    print(_p(_int(find_max_area((matrix as! [[Int]])))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
