// Generated by Mochi transpiler v0.10.63 on 2025-08-12 08:45:40 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func search_in_sorted_matrix(_ mat: [[Double]], _ m: Int, _ n: Int, _ key: Double) {
        var i = (m &- 1)
        var j = 0
        while ((i >= 0) && (j < n)) {
            if (key == Double(_idx(_idx(mat, i)!, j))) {
                print(_p(((((("Key " + _p(key)) + " found at row- ") + _p((i &+ 1))) + " column- ") + _p((j &+ 1)))))
                return
            }
            if (key < Double(_idx(_idx(mat, i)!, j))) {
                i = _int((i &- 1))
            } else {
                j = _int((j &+ 1))
            }
        }
        print(_p((("Key " + _p(key)) + " not found")))
    }
    func main() {
        let mat: [[Double]] = ({
            var _arr: [[Double]] = []
            _arr = _append(_arr, ({
                var _arr: [Double] = []
                _arr = _append(_arr, 2.0)
                _arr = _append(_arr, 5.0)
                _arr = _append(_arr, 7.0)
                return _arr
            }() as! [Double]))
            _arr = _append(_arr, ({
                var _arr: [Double] = []
                _arr = _append(_arr, 4.0)
                _arr = _append(_arr, 8.0)
                _arr = _append(_arr, 13.0)
                return _arr
            }() as! [Double]))
            _arr = _append(_arr, ({
                var _arr: [Double] = []
                _arr = _append(_arr, 9.0)
                _arr = _append(_arr, 11.0)
                _arr = _append(_arr, 15.0)
                return _arr
            }() as! [Double]))
            _arr = _append(_arr, ({
                var _arr: [Double] = []
                _arr = _append(_arr, 12.0)
                _arr = _append(_arr, 17.0)
                _arr = _append(_arr, 20.0)
                return _arr
            }() as! [Double]))
            return _arr
        }() as! [[Double]])
        _ = search_in_sorted_matrix((mat as! [[Double]]), _int(((mat).count)), _int((((_idx(mat, 0) as! [Double])).count)), 5.0)
        _ = search_in_sorted_matrix((mat as! [[Double]]), _int(((mat).count)), _int((((_idx(mat, 0) as! [Double])).count)), 21.0)
        let mat2: [[Double]] = ({
            var _arr: [[Double]] = []
            _arr = _append(_arr, ({
                var _arr: [Double] = []
                _arr = _append(_arr, 2.1)
                _arr = _append(_arr, 5.0)
                _arr = _append(_arr, 7.0)
                return _arr
            }() as! [Double]))
            _arr = _append(_arr, ({
                var _arr: [Double] = []
                _arr = _append(_arr, 4.0)
                _arr = _append(_arr, 8.0)
                _arr = _append(_arr, 13.0)
                return _arr
            }() as! [Double]))
            _arr = _append(_arr, ({
                var _arr: [Double] = []
                _arr = _append(_arr, 9.0)
                _arr = _append(_arr, 11.0)
                _arr = _append(_arr, 15.0)
                return _arr
            }() as! [Double]))
            _arr = _append(_arr, ({
                var _arr: [Double] = []
                _arr = _append(_arr, 12.0)
                _arr = _append(_arr, 17.0)
                _arr = _append(_arr, 20.0)
                return _arr
            }() as! [Double]))
            return _arr
        }() as! [[Double]])
        _ = search_in_sorted_matrix((mat2 as! [[Double]]), _int(((mat2).count)), _int((((_idx(mat2, 0) as! [Double])).count)), 2.1)
        _ = search_in_sorted_matrix((mat2 as! [[Double]]), _int(((mat2).count)), _int((((_idx(mat2, 0) as! [Double])).count)), 2.2)
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
