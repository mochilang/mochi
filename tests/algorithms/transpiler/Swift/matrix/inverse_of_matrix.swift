// Generated by Mochi transpiler v0.10.73 on 2025-08-25 22:33:13 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.isNaN || d.isInfinite {
                return String(d)
            }
            if d.rounded(.towardZero) == d {
                // avoid overflow when converting to Int64
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _num(_ v: Any) -> Double {
    if let d = v as? Double { return d }
    if let i = v as? Int { return Double(i) }
    if let i = v as? Int64 { return Double(i) }
    return 0
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first!
}
func _idx<K: Hashable, V>(_ m: [K: V], _ k: K) -> V? {
    return m[k]
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    var i = idx
    if i < 0 { i += out.count }
    if i < out.count {
        out[i] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: i - out.count + 1))
        out[i] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func inverse_of_matrix(_ matrix: [[Double]]) -> [[Double]] {
        if ((((_int(((matrix).count)) == 2) && (_int((((_idx(matrix, 0) as! [Double])).count)) == 2)) && (_int((((_idx(matrix, 1) as! [Double])).count)) == 2))) {
            let det = ((_num(_idx(_idx(matrix, 0), 0)) * _num(_idx(_idx(matrix, 1), 1))) - (_num(_idx(_idx(matrix, 1), 0)) * _num(_idx(_idx(matrix, 0), 1))))
            if ((det == 0.0)) {
                print(_p("This matrix has no inverse."))
                return ([] as! [[Double]])
            }
            return ({
                var _arr: [[Double]] = []
                _arr = _append(_arr, ({
                    var _arr: [Double] = []
                    _arr = _append(_arr, (_num(_idx(_idx(matrix, 1), 1)) / det))
                    _arr = _append(_arr, (-_num(_idx(_idx(matrix, 0), 1)) / det))
                    return _arr
                }() as! [Double]))
                _arr = _append(_arr, ({
                    var _arr: [Double] = []
                    _arr = _append(_arr, (-_num(_idx(_idx(matrix, 1), 0)) / det))
                    _arr = _append(_arr, (_num(_idx(_idx(matrix, 0), 0)) / det))
                    return _arr
                }() as! [Double]))
                return _arr
            }() as! [[Double]])
        } else if (((((_int(((matrix).count)) == 3) && (_int((((_idx(matrix, 0) as! [Double])).count)) == 3)) && (_int((((_idx(matrix, 1) as! [Double])).count)) == 3)) && (_int((((_idx(matrix, 2) as! [Double])).count)) == 3))) {
            let det = { let _tmp25 = { let _tmp21 = (((_num(_idx(_idx(matrix, 0), 0)) * _num(_idx(_idx(matrix, 1), 1))) * _num(_idx(_idx(matrix, 2), 2))) + ((_num(_idx(_idx(matrix, 0), 1)) * _num(_idx(_idx(matrix, 1), 2))) * _num(_idx(_idx(matrix, 2), 0)))); let _tmp22 = ((_num(_idx(_idx(matrix, 0), 2)) * _num(_idx(_idx(matrix, 1), 0))) * _num(_idx(_idx(matrix, 2), 1))); return _tmp21 + _tmp22}(); let _tmp26 = _num({ let _tmp23 = (((_num(_idx(_idx(matrix, 0), 2)) * _num(_idx(_idx(matrix, 1), 1))) * _num(_idx(_idx(matrix, 2), 0))) + ((_num(_idx(_idx(matrix, 0), 1)) * _num(_idx(_idx(matrix, 1), 0))) * _num(_idx(_idx(matrix, 2), 2)))); let _tmp24 = ((_num(_idx(_idx(matrix, 0), 0)) * _num(_idx(_idx(matrix, 1), 2))) * _num(_idx(_idx(matrix, 2), 1))); return _tmp23 + _tmp24}()); return _tmp25 - _tmp26}()
            if ((det == 0.0)) {
                print(_p("This matrix has no inverse."))
                return ([] as! [[Double]])
            }
            var cof: [[Double]] = ({
                var _arr: [[Double]] = []
                _arr = _append(_arr, ({
                    var _arr: [Double] = []
                    _arr = _append(_arr, 0.0)
                    _arr = _append(_arr, 0.0)
                    _arr = _append(_arr, 0.0)
                    return _arr
                }() as! [Double]))
                _arr = _append(_arr, ({
                    var _arr: [Double] = []
                    _arr = _append(_arr, 0.0)
                    _arr = _append(_arr, 0.0)
                    _arr = _append(_arr, 0.0)
                    return _arr
                }() as! [Double]))
                _arr = _append(_arr, ({
                    var _arr: [Double] = []
                    _arr = _append(_arr, 0.0)
                    _arr = _append(_arr, 0.0)
                    _arr = _append(_arr, 0.0)
                    return _arr
                }() as! [Double]))
                return _arr
            }() as! [[Double]])
            var _tmp11 = (_idx(cof, 0) as! [Double])
            _tmp11 = _set(_tmp11, 0, { let _tmp26 = _num(((_num(_idx(_idx(matrix, 1), 1)) * _num(_idx(_idx(matrix, 2), 2))) - (_num(_idx(_idx(matrix, 1), 2)) * _num(_idx(_idx(matrix, 2), 1))))); return _tmp26 }())
            cof = _set(cof, 0, { let _tmp27 = (_tmp11 as! [Double]); return _tmp27 }())
            var _tmp12 = (_idx(cof, 0) as! [Double])
            _tmp12 = _set(_tmp12, 1, { let _tmp28 = _num(-_num(((_num(_idx(_idx(matrix, 1), 0)) * _num(_idx(_idx(matrix, 2), 2))) - (_num(_idx(_idx(matrix, 1), 2)) * _num(_idx(_idx(matrix, 2), 0)))))); return _tmp28 }())
            cof = _set(cof, 0, { let _tmp29 = (_tmp12 as! [Double]); return _tmp29 }())
            var _tmp13 = (_idx(cof, 0) as! [Double])
            _tmp13 = _set(_tmp13, 2, { let _tmp30 = _num(((_num(_idx(_idx(matrix, 1), 0)) * _num(_idx(_idx(matrix, 2), 1))) - (_num(_idx(_idx(matrix, 1), 1)) * _num(_idx(_idx(matrix, 2), 0))))); return _tmp30 }())
            cof = _set(cof, 0, { let _tmp31 = (_tmp13 as! [Double]); return _tmp31 }())
            var _tmp14 = (_idx(cof, 1) as! [Double])
            _tmp14 = _set(_tmp14, 0, { let _tmp32 = _num(-_num(((_num(_idx(_idx(matrix, 0), 1)) * _num(_idx(_idx(matrix, 2), 2))) - (_num(_idx(_idx(matrix, 0), 2)) * _num(_idx(_idx(matrix, 2), 1)))))); return _tmp32 }())
            cof = _set(cof, 1, { let _tmp33 = (_tmp14 as! [Double]); return _tmp33 }())
            var _tmp15 = (_idx(cof, 1) as! [Double])
            _tmp15 = _set(_tmp15, 1, { let _tmp34 = _num(((_num(_idx(_idx(matrix, 0), 0)) * _num(_idx(_idx(matrix, 2), 2))) - (_num(_idx(_idx(matrix, 0), 2)) * _num(_idx(_idx(matrix, 2), 0))))); return _tmp34 }())
            cof = _set(cof, 1, { let _tmp35 = (_tmp15 as! [Double]); return _tmp35 }())
            var _tmp16 = (_idx(cof, 1) as! [Double])
            _tmp16 = _set(_tmp16, 2, { let _tmp36 = _num(-_num(((_num(_idx(_idx(matrix, 0), 0)) * _num(_idx(_idx(matrix, 2), 1))) - (_num(_idx(_idx(matrix, 0), 1)) * _num(_idx(_idx(matrix, 2), 0)))))); return _tmp36 }())
            cof = _set(cof, 1, { let _tmp37 = (_tmp16 as! [Double]); return _tmp37 }())
            var _tmp17 = (_idx(cof, 2) as! [Double])
            _tmp17 = _set(_tmp17, 0, { let _tmp38 = _num(((_num(_idx(_idx(matrix, 0), 1)) * _num(_idx(_idx(matrix, 1), 2))) - (_num(_idx(_idx(matrix, 0), 2)) * _num(_idx(_idx(matrix, 1), 1))))); return _tmp38 }())
            cof = _set(cof, 2, { let _tmp39 = (_tmp17 as! [Double]); return _tmp39 }())
            var _tmp18 = (_idx(cof, 2) as! [Double])
            _tmp18 = _set(_tmp18, 1, { let _tmp40 = _num(-_num(((_num(_idx(_idx(matrix, 0), 0)) * _num(_idx(_idx(matrix, 1), 2))) - (_num(_idx(_idx(matrix, 0), 2)) * _num(_idx(_idx(matrix, 1), 0)))))); return _tmp40 }())
            cof = _set(cof, 2, { let _tmp41 = (_tmp18 as! [Double]); return _tmp41 }())
            var _tmp19 = (_idx(cof, 2) as! [Double])
            _tmp19 = _set(_tmp19, 2, { let _tmp42 = _num(((_num(_idx(_idx(matrix, 0), 0)) * _num(_idx(_idx(matrix, 1), 1))) - (_num(_idx(_idx(matrix, 0), 1)) * _num(_idx(_idx(matrix, 1), 0))))); return _tmp42 }())
            cof = _set(cof, 2, { let _tmp43 = (_tmp19 as! [Double]); return _tmp43 }())
            var inv: [[Double]] = ({
                var _arr: [[Double]] = []
                _arr = _append(_arr, ({
                    var _arr: [Double] = []
                    _arr = _append(_arr, 0.0)
                    _arr = _append(_arr, 0.0)
                    _arr = _append(_arr, 0.0)
                    return _arr
                }() as! [Double]))
                _arr = _append(_arr, ({
                    var _arr: [Double] = []
                    _arr = _append(_arr, 0.0)
                    _arr = _append(_arr, 0.0)
                    _arr = _append(_arr, 0.0)
                    return _arr
                }() as! [Double]))
                _arr = _append(_arr, ({
                    var _arr: [Double] = []
                    _arr = _append(_arr, 0.0)
                    _arr = _append(_arr, 0.0)
                    _arr = _append(_arr, 0.0)
                    return _arr
                }() as! [Double]))
                return _arr
            }() as! [[Double]])
            var i = 0
            while ((i < 3)) {
                var j = 0
                while ((j < 3)) {
                    var _tmp20 = (_idx(inv, i) as! [Double])
                    _tmp20 = _set(_tmp20, j, { let _tmp44 = _num((_num(_idx(_idx(cof, j), i)) / det)); return _tmp44 }())
                    inv = _set(inv, i, { let _tmp45 = (_tmp20 as! [Double]); return _tmp45 }())
                    j = _int((j &+ 1))
                }
                i = _int((i &+ 1))
            }
            return inv
        }
        
        print(_p("Please provide a matrix of size 2x2 or 3x3."))
        return ([] as! [[Double]])
    }
    var m2: [[Double]] = ({
        var _arr: [[Double]] = []
        _arr = _append(_arr, ({
            var _arr: [Double] = []
            _arr = _append(_arr, 2.0)
            _arr = _append(_arr, 5.0)
            return _arr
        }() as! [Double]))
        _arr = _append(_arr, ({
            var _arr: [Double] = []
            _arr = _append(_arr, 2.0)
            _arr = _append(_arr, 0.0)
            return _arr
        }() as! [Double]))
        return _arr
    }() as! [[Double]])
    print(_p("[" + (inverse_of_matrix((m2 as! [[Double]])) as! [[Double]]).map{ if let s = $0 as? String { "\"" + s.replacingOccurrences(of: "\"", with: "\\\"") + "\"" } else { _p($0) } }.joined(separator: ", ") + "]"))
    var m3: [[Double]] = ({
        var _arr: [[Double]] = []
        _arr = _append(_arr, ({
            var _arr: [Double] = []
            _arr = _append(_arr, 2.0)
            _arr = _append(_arr, 5.0)
            _arr = _append(_arr, 7.0)
            return _arr
        }() as! [Double]))
        _arr = _append(_arr, ({
            var _arr: [Double] = []
            _arr = _append(_arr, 2.0)
            _arr = _append(_arr, 0.0)
            _arr = _append(_arr, 1.0)
            return _arr
        }() as! [Double]))
        _arr = _append(_arr, ({
            var _arr: [Double] = []
            _arr = _append(_arr, 1.0)
            _arr = _append(_arr, 2.0)
            _arr = _append(_arr, 3.0)
            return _arr
        }() as! [Double]))
        return _arr
    }() as! [[Double]])
    print(_p("[" + (inverse_of_matrix((m3 as! [[Double]])) as! [[Double]]).map{ if let s = $0 as? String { "\"" + s.replacingOccurrences(of: "\"", with: "\\\"") + "\"" } else { _p($0) } }.joined(separator: ", ") + "]"))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
