// Generated by Mochi transpiler v0.10.63 on 2025-08-12 08:45:10 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func update_area_of_max_square(_ row: Int, _ col: Int, _ rows: Int, _ cols: Int, _ mat: [[Int]], _ largest_square_area: [Int]) -> Int {
        var largest_square_area = largest_square_area
        if ((row >= rows) || (col >= cols)) {
            return 0
        }
        let right = _int(update_area_of_max_square(row, (col &+ 1), rows, cols, (mat as! [[Int]]), (largest_square_area as! [Int])))
        let diagonal = _int(update_area_of_max_square((row &+ 1), (col &+ 1), rows, cols, (mat as! [[Int]]), (largest_square_area as! [Int])))
        let down = _int(update_area_of_max_square((row &+ 1), col, rows, cols, (mat as! [[Int]]), (largest_square_area as! [Int])))
        if ((_idx(_idx(mat, row)!, col) as? Int ?? 0) == 1) {
            let sub = (1 &+ _int((({
                var _arr: [Int] = []
                _arr = _append(_arr, right)
                _arr = _append(_arr, diagonal)
                _arr = _append(_arr, down)
                return _arr
            }() as! [Int]).min()!)))
            if (sub > (_idx(largest_square_area, 0) as? Int ?? 0)) {
                largest_square_area = _set(largest_square_area, 0, Int(sub))
            }
            return sub
        } else {
            return 0
        }
    }
    func largest_square_area_in_matrix_top_down(_ rows: Int, _ cols: Int, _ mat: [[Int]]) -> Int {
        var largest: [Int] = ({
            var _arr: [Int] = []
            _arr = _append(_arr, 0)
            return _arr
        }() as! [Int])
        _ = _int(update_area_of_max_square(0, 0, rows, cols, (mat as! [[Int]]), (largest as! [Int])))
        return (_idx(largest, 0) as? Int ?? 0)
    }
    func update_area_of_max_square_with_dp(_ row: Int, _ col: Int, _ rows: Int, _ cols: Int, _ mat: [[Int]], _ dp_array: [[Int]], _ largest_square_area: [Int]) -> Int {
        var dp_array = dp_array
        var largest_square_area = largest_square_area
        if ((row >= rows) || (col >= cols)) {
            return 0
        }
        if ((_idx(_idx(dp_array, row)!, col) as? Int ?? 0) != _int(-1)) {
            return (_idx(_idx(dp_array, row)!, col) as? Int ?? 0)
        }
        let right = _int(update_area_of_max_square_with_dp(row, (col &+ 1), rows, cols, (mat as! [[Int]]), (dp_array as! [[Int]]), (largest_square_area as! [Int])))
        let diagonal = _int(update_area_of_max_square_with_dp((row &+ 1), (col &+ 1), rows, cols, (mat as! [[Int]]), (dp_array as! [[Int]]), (largest_square_area as! [Int])))
        let down = _int(update_area_of_max_square_with_dp((row &+ 1), col, rows, cols, (mat as! [[Int]]), (dp_array as! [[Int]]), (largest_square_area as! [Int])))
        if ((_idx(_idx(mat, row)!, col) as? Int ?? 0) == 1) {
            let sub = (1 &+ _int((({
                var _arr: [Int] = []
                _arr = _append(_arr, right)
                _arr = _append(_arr, diagonal)
                _arr = _append(_arr, down)
                return _arr
            }() as! [Int]).min()!)))
            if (sub > (_idx(largest_square_area, 0) as? Int ?? 0)) {
                largest_square_area = _set(largest_square_area, 0, Int(sub))
            }
            var _tmp5 = (_idx(dp_array, row) as! [Int])
            _tmp5 = _set(_tmp5, col, Int(sub))
            dp_array = _set(dp_array, row, (_tmp5 as! [Int]))
            return sub
        } else {
            var _tmp6 = (_idx(dp_array, row) as! [Int])
            _tmp6 = _set(_tmp6, col, 0)
            dp_array = _set(dp_array, row, (_tmp6 as! [Int]))
            return 0
        }
    }
    func largest_square_area_in_matrix_top_down_with_dp(_ rows: Int, _ cols: Int, _ mat: [[Int]]) -> Int {
        var largest: [Int] = ({
            var _arr: [Int] = []
            _arr = _append(_arr, 0)
            return _arr
        }() as! [Int])
        var dp_array: [[Int]] = ([] as! [[Int]])
        var r = 0
        while (r < rows) {
            var row_list: [Int] = ([] as! [Int])
            var c = 0
            while (c < cols) {
                row_list = (_append(row_list, -1) as! [Int])
                c = _int((c &+ 1))
            }
            dp_array = (_append(dp_array, row_list) as! [[Int]])
            r = _int((r &+ 1))
        }
        _ = _int(update_area_of_max_square_with_dp(0, 0, rows, cols, (mat as! [[Int]]), (dp_array as! [[Int]]), (largest as! [Int])))
        return (_idx(largest, 0) as? Int ?? 0)
    }
    func largest_square_area_in_matrix_bottom_up(_ rows: Int, _ cols: Int, _ mat: [[Int]]) -> Int {
        var dp_array: [[Int]] = ([] as! [[Int]])
        var r = 0
        while (r <= rows) {
            var row_list: [Int] = ([] as! [Int])
            var c = 0
            while (c <= cols) {
                row_list = (_append(row_list, 0) as! [Int])
                c = _int((c &+ 1))
            }
            dp_array = (_append(dp_array, row_list) as! [[Int]])
            r = _int((r &+ 1))
        }
        var largest = 0
        var row = (rows &- 1)
        while (row >= 0) {
            var col = (cols &- 1)
            while (col >= 0) {
                let right = (_idx(_idx(dp_array, row)!, (col &+ 1)) as? Int ?? 0)
                let diagonal = (_idx(_idx(dp_array, (row &+ 1))!, (col &+ 1)) as? Int ?? 0)
                let bottom = (_idx(_idx(dp_array, (row &+ 1))!, col) as? Int ?? 0)
                if ((_idx(_idx(mat, row)!, col) as? Int ?? 0) == 1) {
                    let value = (1 &+ _int((({
                        var _arr: [Int] = []
                        _arr = _append(_arr, right)
                        _arr = _append(_arr, diagonal)
                        _arr = _append(_arr, bottom)
                        return _arr
                    }() as! [Int]).min()!)))
                    var _tmp7 = (_idx(dp_array, row) as! [Int])
                    _tmp7 = _set(_tmp7, col, Int(value))
                    dp_array = _set(dp_array, row, (_tmp7 as! [Int]))
                    if (value > largest) {
                        largest = Int(value)
                    }
                } else {
                    var _tmp8 = (_idx(dp_array, row) as! [Int])
                    _tmp8 = _set(_tmp8, col, 0)
                    dp_array = _set(dp_array, row, (_tmp8 as! [Int]))
                }
                col = _int((col &- 1))
            }
            row = _int((row &- 1))
        }
        return largest
    }
    func largest_square_area_in_matrix_bottom_up_space_optimization(_ rows: Int, _ cols: Int, _ mat: [[Int]]) -> Int {
        var current_row: [Int] = ([] as! [Int])
        var i = 0
        while (i <= cols) {
            current_row = (_append(current_row, 0) as! [Int])
            i = _int((i &+ 1))
        }
        var next_row: [Int] = ([] as! [Int])
        var j = 0
        while (j <= cols) {
            next_row = (_append(next_row, 0) as! [Int])
            j = _int((j &+ 1))
        }
        var largest = 0
        var row = (rows &- 1)
        while (row >= 0) {
            var col = (cols &- 1)
            while (col >= 0) {
                let right = (_idx(current_row, (col &+ 1)) as? Int ?? 0)
                let diagonal = (_idx(next_row, (col &+ 1)) as? Int ?? 0)
                let bottom = (_idx(next_row, col) as? Int ?? 0)
                if ((_idx(_idx(mat, row)!, col) as? Int ?? 0) == 1) {
                    let value = (1 &+ _int((({
                        var _arr: [Int] = []
                        _arr = _append(_arr, right)
                        _arr = _append(_arr, diagonal)
                        _arr = _append(_arr, bottom)
                        return _arr
                    }() as! [Int]).min()!)))
                    current_row = _set(current_row, col, Int(value))
                    if (value > largest) {
                        largest = Int(value)
                    }
                } else {
                    current_row = _set(current_row, col, 0)
                }
                col = _int((col &- 1))
            }
            next_row = (current_row as! [Int])
            current_row = ([] as! [Int])
            var t = 0
            while (t <= cols) {
                current_row = (_append(current_row, 0) as! [Int])
                t = _int((t &+ 1))
            }
            row = _int((row &- 1))
        }
        return largest
    }
    let sample: [[Int]] = ({
        var _arr: [[Int]] = []
        _arr = _append(_arr, ({
            var _arr: [Int] = []
            _arr = _append(_arr, 1)
            _arr = _append(_arr, 1)
            return _arr
        }() as! [Int]))
        _arr = _append(_arr, ({
            var _arr: [Int] = []
            _arr = _append(_arr, 1)
            _arr = _append(_arr, 1)
            return _arr
        }() as! [Int]))
        return _arr
    }() as! [[Int]])
    print(_p(_int(largest_square_area_in_matrix_top_down(2, 2, (sample as! [[Int]])))))
    print(_p(_int(largest_square_area_in_matrix_top_down_with_dp(2, 2, (sample as! [[Int]])))))
    print(_p(_int(largest_square_area_in_matrix_bottom_up(2, 2, (sample as! [[Int]])))))
    print(_p(_int(largest_square_area_in_matrix_bottom_up_space_optimization(2, 2, (sample as! [[Int]])))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
