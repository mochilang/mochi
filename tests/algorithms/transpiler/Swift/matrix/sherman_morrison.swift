// Generated by Mochi transpiler v0.10.63 on 2025-08-12 08:45:42 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
struct Matrix: Codable {
    var data: [[Double]]
    var rows: Int
    var cols: Int
    init() {
        self.data = []
        self.rows = 0
        self.cols = 0
    }
    init(data: [[Double]], rows: Int, cols: Int) {
        self.data = data
        self.rows = rows
        self.cols = cols
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func make_matrix(_ rows: Int, _ cols: Int, _ value: Double) -> Matrix {
        var arr: [[Double]] = ([] as! [[Double]])
        var r = 0
        while (r < rows) {
            var row: [Double] = ([] as! [Double])
            var c = 0
            while (c < cols) {
                row = (_append(row, value) as! [Double])
                c = _int((c &+ 1))
            }
            arr = (_append(arr, row) as! [[Double]])
            r = _int((r &+ 1))
        }
        return Matrix(data: (arr as! [[Double]]), rows: Int(rows), cols: Int(cols))
    }
    func matrix_from_lists(_ vals: [[Double]]) -> Matrix {
        let r = _int(((vals).count))
        let c = _int(((r == 0) ? 0 : _int((((_idx(vals, 0) as! [Double])).count))))
        return Matrix(data: (vals as! [[Double]]), rows: Int(r), cols: Int(c))
    }
    func matrix_to_string(_ m: Matrix) -> String {
        var s = ""
        var i = 0
        while (i < m.rows) {
            s = ((s + "[") as! String)
            var j = 0
            while (j < m.cols) {
                s = ((s + _p(Double(_idx(_idx(m.data, i)!, j)))) as! String)
                if (j < (m.cols &- 1)) {
                    s = ((s + ", ") as! String)
                }
                j = _int((j &+ 1))
            }
            s = ((s + "]") as! String)
            if (i < (m.rows &- 1)) {
                s = ((s + "\n") as! String)
            }
            i = _int((i &+ 1))
        }
        return s
    }
    func matrix_add(_ a: Matrix, _ b: Matrix) -> Matrix {
        if ((a.rows != b.rows) || (a.cols != b.cols)) {
            return Matrix(data: ([] as! [[Double]]), rows: 0, cols: 0)
        }
        var res: [[Double]] = ([] as! [[Double]])
        var i = 0
        while (i < a.rows) {
            var row: [Double] = ([] as! [Double])
            var j = 0
            while (j < a.cols) {
                row = (_append(row, (Double(_idx(_idx(a.data, i)!, j)) + Double(_idx(_idx(b.data, i)!, j)))) as! [Double])
                j = _int((j &+ 1))
            }
            res = (_append(res, row) as! [[Double]])
            i = _int((i &+ 1))
        }
        return Matrix(data: (res as! [[Double]]), rows: (a.rows as? Int ?? 0), cols: (a.cols as? Int ?? 0))
    }
    func matrix_sub(_ a: Matrix, _ b: Matrix) -> Matrix {
        if ((a.rows != b.rows) || (a.cols != b.cols)) {
            return Matrix(data: ([] as! [[Double]]), rows: 0, cols: 0)
        }
        var res: [[Double]] = ([] as! [[Double]])
        var i = 0
        while (i < a.rows) {
            var row: [Double] = ([] as! [Double])
            var j = 0
            while (j < a.cols) {
                row = (_append(row, (Double(_idx(_idx(a.data, i)!, j)) - Double(_idx(_idx(b.data, i)!, j)))) as! [Double])
                j = _int((j &+ 1))
            }
            res = (_append(res, row) as! [[Double]])
            i = _int((i &+ 1))
        }
        return Matrix(data: (res as! [[Double]]), rows: (a.rows as? Int ?? 0), cols: (a.cols as? Int ?? 0))
    }
    func matrix_mul_scalar(_ m: Matrix, _ k: Double) -> Matrix {
        var res: [[Double]] = ([] as! [[Double]])
        var i = 0
        while (i < m.rows) {
            var row: [Double] = ([] as! [Double])
            var j = 0
            while (j < m.cols) {
                row = (_append(row, (Double(_idx(_idx(m.data, i)!, j)) * k)) as! [Double])
                j = _int((j &+ 1))
            }
            res = (_append(res, row) as! [[Double]])
            i = _int((i &+ 1))
        }
        return Matrix(data: (res as! [[Double]]), rows: (m.rows as? Int ?? 0), cols: (m.cols as? Int ?? 0))
    }
    func matrix_mul(_ a: Matrix, _ b: Matrix) -> Matrix {
        if (a.cols != b.rows) {
            return Matrix(data: ([] as! [[Double]]), rows: 0, cols: 0)
        }
        var res: [[Double]] = ([] as! [[Double]])
        var i = 0
        while (i < a.rows) {
            var row: [Double] = ([] as! [Double])
            var j = 0
            while (j < b.cols) {
                var sum = 0.0
                var k = 0
                while (k < a.cols) {
                    sum = Double((sum + (Double(_idx(_idx(a.data, i)!, k)) * Double(_idx(_idx(b.data, k)!, j)))))
                    k = _int((k &+ 1))
                }
                row = (_append(row, sum) as! [Double])
                j = _int((j &+ 1))
            }
            res = (_append(res, row) as! [[Double]])
            i = _int((i &+ 1))
        }
        return Matrix(data: (res as! [[Double]]), rows: (a.rows as? Int ?? 0), cols: (b.cols as? Int ?? 0))
    }
    func matrix_transpose(_ m: Matrix) -> Matrix {
        var res: [[Double]] = ([] as! [[Double]])
        var c = 0
        while (c < m.cols) {
            var row: [Double] = ([] as! [Double])
            var r = 0
            while (r < m.rows) {
                row = (_append(row, Double(_idx(_idx(m.data, r)!, c))) as! [Double])
                r = _int((r &+ 1))
            }
            res = (_append(res, row) as! [[Double]])
            c = _int((c &+ 1))
        }
        return Matrix(data: (res as! [[Double]]), rows: (m.cols as? Int ?? 0), cols: (m.rows as? Int ?? 0))
    }
    func sherman_morrison(_ ainv: Matrix, _ u: Matrix, _ v: Matrix) -> Matrix {
        let vt = matrix_transpose((v as! Matrix))
        let vu = matrix_mul((matrix_mul((vt as! Matrix), (ainv as! Matrix)) as! Matrix), (u as! Matrix))
        let factor = (Double(_idx(_idx(vu.data, 0)!, 0)) + 1.0)
        if (factor == 0.0) {
            return Matrix(data: ([] as! [[Double]]), rows: 0, cols: 0)
        }
        let term1 = matrix_mul((ainv as! Matrix), (u as! Matrix))
        let term2 = matrix_mul((vt as! Matrix), (ainv as! Matrix))
        let numerator = matrix_mul((term1 as! Matrix), (term2 as! Matrix))
        let scaled = matrix_mul_scalar((numerator as! Matrix), Double((1.0 / factor)))
        return matrix_sub((ainv as! Matrix), (scaled as! Matrix))
    }
    func main() {
        let ainv = matrix_from_lists(({
            var _arr: [[Double]] = []
            _arr = _append(_arr, ({
                var _arr: [Double] = []
                _arr = _append(_arr, 1.0)
                _arr = _append(_arr, 0.0)
                _arr = _append(_arr, 0.0)
                return _arr
            }() as! [Double]))
            _arr = _append(_arr, ({
                var _arr: [Double] = []
                _arr = _append(_arr, 0.0)
                _arr = _append(_arr, 1.0)
                _arr = _append(_arr, 0.0)
                return _arr
            }() as! [Double]))
            _arr = _append(_arr, ({
                var _arr: [Double] = []
                _arr = _append(_arr, 0.0)
                _arr = _append(_arr, 0.0)
                _arr = _append(_arr, 1.0)
                return _arr
            }() as! [Double]))
            return _arr
        }() as! [[Double]]))
        let u = matrix_from_lists(({
            var _arr: [[Double]] = []
            _arr = _append(_arr, ({
                var _arr: [Double] = []
                _arr = _append(_arr, 1.0)
                return _arr
            }() as! [Double]))
            _arr = _append(_arr, ({
                var _arr: [Double] = []
                _arr = _append(_arr, 2.0)
                return _arr
            }() as! [Double]))
            _arr = _append(_arr, ({
                var _arr: [Double] = []
                _arr = _append(_arr, -3.0)
                return _arr
            }() as! [Double]))
            return _arr
        }() as! [[Double]]))
        let v = matrix_from_lists(({
            var _arr: [[Double]] = []
            _arr = _append(_arr, ({
                var _arr: [Double] = []
                _arr = _append(_arr, 4.0)
                return _arr
            }() as! [Double]))
            _arr = _append(_arr, ({
                var _arr: [Double] = []
                _arr = _append(_arr, -2.0)
                return _arr
            }() as! [Double]))
            _arr = _append(_arr, ({
                var _arr: [Double] = []
                _arr = _append(_arr, 5.0)
                return _arr
            }() as! [Double]))
            return _arr
        }() as! [[Double]]))
        let result = sherman_morrison((ainv as! Matrix), (u as! Matrix), (v as! Matrix))
        print(_p(String(describing: matrix_to_string((result as! Matrix)))))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
