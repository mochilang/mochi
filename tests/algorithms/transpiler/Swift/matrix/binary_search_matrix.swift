// Generated by Mochi transpiler v0.10.63 on 2025-08-12 08:44:52 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func binary_search(_ arr: [Int], _ lower_bound: Int, _ upper_bound: Int, _ value: Int) -> Int {
        let r = (_int((lower_bound &+ upper_bound)) / 2)
        if ((_idx(arr, r) as? Int ?? 0) == value) {
            return r
        }
        if (lower_bound >= upper_bound) {
            return -1
        }
        if ((_idx(arr, r) as? Int ?? 0) < value) {
            return _int(binary_search((arr as! [Int]), (r &+ 1), upper_bound, value))
        }
        return _int(binary_search((arr as! [Int]), lower_bound, (r &- 1), value))
    }
    func mat_bin_search(_ value: Int, _ matrix: [[Int]]) -> [Int] {
        var index: Int = 0
        if ((_idx(_idx(matrix, index)!, 0) as? Int ?? 0) == value) {
            return ({
                var _arr: [Int] = []
                _arr = _append(_arr, index)
                _arr = _append(_arr, 0)
                return _arr
            }() as! [Int])
        }
        while ((index < _int(((matrix).count))) && ((_idx(_idx(matrix, index)!, 0) as? Int ?? 0) < value)) {
            let r = _int(binary_search((_idx(matrix, index) as! [Int]), 0, (_int((((_idx(matrix, index) as! [Int])).count)) &- 1), value))
            if (r != _int(-1)) {
                return ({
                    var _arr: [Int] = []
                    _arr = _append(_arr, index)
                    _arr = _append(_arr, r)
                    return _arr
                }() as! [Int])
            }
            index = _int((index &+ 1))
        }
        return ({
            var _arr: [Int] = []
            _arr = _append(_arr, -1)
            _arr = _append(_arr, -1)
            return _arr
        }() as! [Int])
    }
    func main() {
        let row: [Int] = ({
            var _arr: [Int] = []
            _arr = _append(_arr, 1)
            _arr = _append(_arr, 4)
            _arr = _append(_arr, 7)
            _arr = _append(_arr, 11)
            _arr = _append(_arr, 15)
            return _arr
        }() as! [Int])
        print(_p(_p(_int(binary_search((row as! [Int]), 0, (_int(((row).count)) &- 1), 1)))))
        print(_p(_p(_int(binary_search((row as! [Int]), 0, (_int(((row).count)) &- 1), 23)))))
        let matrix: [[Int]] = ({
            var _arr: [[Int]] = []
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 1)
                _arr = _append(_arr, 4)
                _arr = _append(_arr, 7)
                _arr = _append(_arr, 11)
                _arr = _append(_arr, 15)
                return _arr
            }() as! [Int]))
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 2)
                _arr = _append(_arr, 5)
                _arr = _append(_arr, 8)
                _arr = _append(_arr, 12)
                _arr = _append(_arr, 19)
                return _arr
            }() as! [Int]))
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 3)
                _arr = _append(_arr, 6)
                _arr = _append(_arr, 9)
                _arr = _append(_arr, 16)
                _arr = _append(_arr, 22)
                return _arr
            }() as! [Int]))
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 10)
                _arr = _append(_arr, 13)
                _arr = _append(_arr, 14)
                _arr = _append(_arr, 17)
                _arr = _append(_arr, 24)
                return _arr
            }() as! [Int]))
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 18)
                _arr = _append(_arr, 21)
                _arr = _append(_arr, 23)
                _arr = _append(_arr, 26)
                _arr = _append(_arr, 30)
                return _arr
            }() as! [Int]))
            return _arr
        }() as! [[Int]])
        print(_p("[" + (mat_bin_search(1, (matrix as! [[Int]])) as! [Int]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
        print(_p("[" + (mat_bin_search(34, (matrix as! [[Int]])) as! [Int]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
