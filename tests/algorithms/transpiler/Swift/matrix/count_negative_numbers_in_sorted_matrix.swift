// Generated by Mochi transpiler v0.10.63 on 2025-08-12 08:44:58 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _slice<T>(_ xs: [T], _ start: Int, _ end: Int) -> [T] {
    var s = start
    var e = end
    if s < 0 { s = 0 }
    if e > xs.count { e = xs.count }
    if s > e { s = e }
    return Array(xs[s..<e])
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func generate_large_matrix() -> [[Int]] {
        var result: [[Int]] = ([] as! [[Int]])
        var i = 0
        while (i < 1000) {
            var row: [Int] = ([] as! [Int])
            var j = (1000 &- i)
            while (j > _int((-1000 &- i))) {
                row = (_append(row, j) as! [Int])
                j = _int((j &- 1))
            }
            result = (_append(result, row) as! [[Int]])
            i = _int((i &+ 1))
        }
        return result
    }
    func find_negative_index(_ arr: [Int]) -> Int {
        var left = 0
        var right = (_int(((arr).count)) &- 1)
        if (_int(((arr).count)) == 0) {
            return 0
        }
        if ((_idx(arr, 0) as? Int ?? 0) < 0) {
            return 0
        }
        while (left <= right) {
            let mid = (_int((left &+ right)) / 2)
            let num = (_idx(arr, mid) as? Int ?? 0)
            if (num < 0) {
                if (mid == 0) {
                    return 0
                }
                if ((_idx(arr, (mid &- 1)) as? Int ?? 0) >= 0) {
                    return mid
                }
                right = _int((mid &- 1))
            } else {
                left = _int((mid &+ 1))
            }
        }
        return _int(((arr).count))
    }
    func count_negatives_binary_search(_ grid: [[Int]]) -> Int {
        var total = 0
        var bound = _int((((_idx(grid, 0) as! [Int])).count))
        var i = 0
        while (i < _int(((grid).count))) {
            let row: [Int] = (_idx(grid, i) as! [Int])
            let idx = _int(find_negative_index((_slice(Array(row), 0, bound) as! [Int])))
            bound = Int(idx)
            total = _int((total &+ idx))
            i = _int((i &+ 1))
        }
        return (_int((_int(((grid).count)) &* _int((((_idx(grid, 0) as! [Int])).count)))) &- total)
    }
    func count_negatives_brute_force(_ grid: [[Int]]) -> Int {
        var count = 0
        var i = 0
        while (i < _int(((grid).count))) {
            let row: [Int] = (_idx(grid, i) as! [Int])
            var j = 0
            while (j < _int(((row).count))) {
                if ((_idx(row, j) as? Int ?? 0) < 0) {
                    count = _int((count &+ 1))
                }
                j = _int((j &+ 1))
            }
            i = _int((i &+ 1))
        }
        return count
    }
    func count_negatives_brute_force_with_break(_ grid: [[Int]]) -> Int {
        var total = 0
        var i = 0
        while (i < _int(((grid).count))) {
            let row: [Int] = (_idx(grid, i) as! [Int])
            var j = 0
            while (j < _int(((row).count))) {
                let number = (_idx(row, j) as? Int ?? 0)
                if (number < 0) {
                    total = _int((total &+ _int((_int(((row).count)) &- j))))
                    break
                }
                j = _int((j &+ 1))
            }
            i = _int((i &+ 1))
        }
        return total
    }
    let grid: [[Int]] = (generate_large_matrix() as! [[Int]])
    let test_grids: [[[Int]]] = ({
        var _arr: [[[Int]]] = []
        _arr = _append(_arr, ({
            var _arr: [[Int]] = []
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 4)
                _arr = _append(_arr, 3)
                _arr = _append(_arr, 2)
                _arr = _append(_arr, -1)
                return _arr
            }() as! [Int]))
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 3)
                _arr = _append(_arr, 2)
                _arr = _append(_arr, 1)
                _arr = _append(_arr, -1)
                return _arr
            }() as! [Int]))
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 1)
                _arr = _append(_arr, 1)
                _arr = _append(_arr, -1)
                _arr = _append(_arr, -2)
                return _arr
            }() as! [Int]))
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, -1)
                _arr = _append(_arr, -1)
                _arr = _append(_arr, -2)
                _arr = _append(_arr, -3)
                return _arr
            }() as! [Int]))
            return _arr
        }() as! [[Int]]))
        _arr = _append(_arr, ({
            var _arr: [[Int]] = []
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 3)
                _arr = _append(_arr, 2)
                return _arr
            }() as! [Int]))
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 1)
                _arr = _append(_arr, 0)
                return _arr
            }() as! [Int]))
            return _arr
        }() as! [[Int]]))
        _arr = _append(_arr, ({
            var _arr: [[Int]] = []
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 7)
                _arr = _append(_arr, 7)
                _arr = _append(_arr, 6)
                return _arr
            }() as! [Int]))
            return _arr
        }() as! [[Int]]))
        _arr = _append(_arr, ({
            var _arr: [[Int]] = []
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 7)
                _arr = _append(_arr, 7)
                _arr = _append(_arr, 6)
                return _arr
            }() as! [Int]))
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, -1)
                _arr = _append(_arr, -2)
                _arr = _append(_arr, -3)
                return _arr
            }() as! [Int]))
            return _arr
        }() as! [[Int]]))
        _arr = _append(_arr, grid)
        return _arr
    }() as! [[[Int]]])
    var results_bin: [Int] = ([] as! [Int])
    var i = 0
    while (i < _int(((test_grids).count))) {
        results_bin = (_append(results_bin, _int(count_negatives_binary_search((_idx(test_grids, i) as! [[Int]])))) as! [Int])
        i = _int((i &+ 1))
    }
    print(_p("[" + results_bin.map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    var results_brute: [Int] = ([] as! [Int])
    i = 0
    while (i < _int(((test_grids).count))) {
        results_brute = (_append(results_brute, _int(count_negatives_brute_force((_idx(test_grids, i) as! [[Int]])))) as! [Int])
        i = _int((i &+ 1))
    }
    print(_p("[" + results_brute.map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    var results_break: [Int] = ([] as! [Int])
    i = 0
    while (i < _int(((test_grids).count))) {
        results_break = (_append(results_break, _int(count_negatives_brute_force_with_break((_idx(test_grids, i) as! [[Int]])))) as! [Int])
        i = _int((i &+ 1))
    }
    print(_p("[" + results_break.map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
