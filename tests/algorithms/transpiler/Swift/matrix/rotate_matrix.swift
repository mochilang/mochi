// Generated by Mochi transpiler v0.10.63 on 2025-08-12 08:45:37 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func abs_int(_ n: Int) -> Int {
        if (n < 0) {
            return -n
        }
        return n
    }
    func make_matrix(_ row_size: Int) -> [[Int]] {
        var size = _int(abs_int(row_size))
        if (size == 0) {
            size = 4
        }
        var mat: [[Int]] = ([] as! [[Int]])
        var y = 0
        while (y < size) {
            var row: [Int] = ([] as! [Int])
            var x = 0
            while (x < size) {
                row = (_append(row, ((1 &+ x) &+ (y &* size))) as! [Int])
                x = _int((x &+ 1))
            }
            mat = (_append(mat, row) as! [[Int]])
            y = _int((y &+ 1))
        }
        return mat
    }
    func transpose(_ mat: [[Int]]) -> [[Int]] {
        let n = _int(((mat).count))
        var result: [[Int]] = ([] as! [[Int]])
        var i = 0
        while (i < n) {
            var row: [Int] = ([] as! [Int])
            var j = 0
            while (j < n) {
                row = (_append(row, (_idx(_idx(mat, j)!, i) as? Int ?? 0)) as! [Int])
                j = _int((j &+ 1))
            }
            result = (_append(result, row) as! [[Int]])
            i = _int((i &+ 1))
        }
        return result
    }
    func reverse_row(_ mat: [[Int]]) -> [[Int]] {
        var result: [[Int]] = ([] as! [[Int]])
        var i = (_int(((mat).count)) &- 1)
        while (i >= 0) {
            result = (_append(result, (_idx(mat, i) as! [Int])) as! [[Int]])
            i = _int((i &- 1))
        }
        return result
    }
    func reverse_column(_ mat: [[Int]]) -> [[Int]] {
        var result: [[Int]] = ([] as! [[Int]])
        var i = 0
        while (i < _int(((mat).count))) {
            var row: [Int] = ([] as! [Int])
            var j = (_int((((_idx(mat, i) as! [Int])).count)) &- 1)
            while (j >= 0) {
                row = (_append(row, (_idx(_idx(mat, i)!, j) as? Int ?? 0)) as! [Int])
                j = _int((j &- 1))
            }
            result = (_append(result, row) as! [[Int]])
            i = _int((i &+ 1))
        }
        return result
    }
    func rotate_90(_ mat: [[Int]]) -> [[Int]] {
        let t: [[Int]] = (transpose((mat as! [[Int]])) as! [[Int]])
        let rr: [[Int]] = (reverse_row((t as! [[Int]])) as! [[Int]])
        return rr
    }
    func rotate_180(_ mat: [[Int]]) -> [[Int]] {
        let rc: [[Int]] = (reverse_column((mat as! [[Int]])) as! [[Int]])
        let rr: [[Int]] = (reverse_row((rc as! [[Int]])) as! [[Int]])
        return rr
    }
    func rotate_270(_ mat: [[Int]]) -> [[Int]] {
        let t: [[Int]] = (transpose((mat as! [[Int]])) as! [[Int]])
        let rc: [[Int]] = (reverse_column((t as! [[Int]])) as! [[Int]])
        return rc
    }
    func row_to_string(_ row: [Int]) -> String {
        var line = ""
        var i = 0
        while (i < _int(((row).count))) {
            if (i == 0) {
                line = _p((_idx(row, i) as? Int ?? 0))
            } else {
                line = (((line + " ") + _p((_idx(row, i) as? Int ?? 0))) as! String)
            }
            i = _int((i &+ 1))
        }
        return line
    }
    func print_matrix(_ mat: [[Int]]) {
        var i = 0
        while (i < _int(((mat).count))) {
            print(_p(String(describing: row_to_string((_idx(mat, i) as! [Int])))))
            i = _int((i &+ 1))
        }
    }
    var mat = (make_matrix(4) as! [[Int]])
    print(_p("\norigin:\n"))
    _ = print_matrix((mat as! [[Int]]))
    print(_p("\nrotate 90 counterclockwise:\n"))
    let r90: [[Int]] = (rotate_90((mat as! [[Int]])) as! [[Int]])
    _ = print_matrix((r90 as! [[Int]]))
    mat = (make_matrix(4) as! [[Int]])
    print(_p("\norigin:\n"))
    _ = print_matrix((mat as! [[Int]]))
    print(_p("\nrotate 180:\n"))
    let r180: [[Int]] = (rotate_180((mat as! [[Int]])) as! [[Int]])
    _ = print_matrix((r180 as! [[Int]]))
    mat = (make_matrix(4) as! [[Int]])
    print(_p("\norigin:\n"))
    _ = print_matrix((mat as! [[Int]]))
    print(_p("\nrotate 270 counterclockwise:\n"))
    let r270: [[Int]] = (rotate_270((mat as! [[Int]])) as! [[Int]])
    _ = print_matrix((r270 as! [[Int]]))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
