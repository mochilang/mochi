// Generated by Mochi transpiler v0.10.63 on 2025-08-12 08:45:50 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let NUM_SQUARES = 9
    let EMPTY_CELL = "."
    func is_valid_sudoku_board(_ board: [[String]]) -> Bool {
        if (_int(((board).count)) != NUM_SQUARES) {
            return false
        }
        var i = 0
        while (i < NUM_SQUARES) {
            if (_int((((_idx(board, i) as! [String])).count)) != NUM_SQUARES) {
                return false
            }
            i = _int((i &+ 1))
        }
        var rows: [[String]] = ([] as! [[String]])
        var cols: [[String]] = ([] as! [[String]])
        var boxes: [[String]] = ([] as! [[String]])
        i = 0
        while (i < NUM_SQUARES) {
            rows = (((_append(rows, ([] as! [String])) as! [[String]]) as! [Any?]) as! [[String]])
            cols = (((_append(cols, ([] as! [String])) as! [[String]]) as! [Any?]) as! [[String]])
            boxes = (((_append(boxes, ([] as! [String])) as! [[String]]) as! [Any?]) as! [[String]])
            i = _int((i &+ 1))
        }
        for r in 0..<NUM_SQUARES {
            for c in 0..<NUM_SQUARES {
                let value = (_idx(_idx(board, r)!, c) as! String)
                if (value == EMPTY_CELL) {
                    continue
                }
                let box: Int = ((_int(_int((r / 3))) &* 3) &+ _int(_int((c / 3))))
                if ((((_idx(rows, r) as! [String]).contains(value)) || ((_idx(cols, c) as! [String]).contains(value))) || ((_idx(boxes, box) as! [String]).contains(value))) {
                    return false
                }
                rows = _set(rows, r, (_append((_idx(rows, r) as! [String]), value) as! [String]))
                cols = _set(cols, c, (_append((_idx(cols, c) as! [String]), value) as! [String]))
                boxes = _set(boxes, box, (_append((_idx(boxes, box) as! [String]), value) as! [String]))
            }
        }
        return true
    }
    let valid_board: [[String]] = ({
        var _arr: [[String]] = []
        _arr = _append(_arr, ({
            var _arr: [String] = []
            _arr = _append(_arr, "5")
            _arr = _append(_arr, "3")
            _arr = _append(_arr, ".")
            _arr = _append(_arr, ".")
            _arr = _append(_arr, "7")
            _arr = _append(_arr, ".")
            _arr = _append(_arr, ".")
            _arr = _append(_arr, ".")
            _arr = _append(_arr, ".")
            return _arr
        }() as! [String]))
        _arr = _append(_arr, ({
            var _arr: [String] = []
            _arr = _append(_arr, "6")
            _arr = _append(_arr, ".")
            _arr = _append(_arr, ".")
            _arr = _append(_arr, "1")
            _arr = _append(_arr, "9")
            _arr = _append(_arr, "5")
            _arr = _append(_arr, ".")
            _arr = _append(_arr, ".")
            _arr = _append(_arr, ".")
            return _arr
        }() as! [String]))
        _arr = _append(_arr, ({
            var _arr: [String] = []
            _arr = _append(_arr, ".")
            _arr = _append(_arr, "9")
            _arr = _append(_arr, "8")
            _arr = _append(_arr, ".")
            _arr = _append(_arr, ".")
            _arr = _append(_arr, ".")
            _arr = _append(_arr, ".")
            _arr = _append(_arr, "6")
            _arr = _append(_arr, ".")
            return _arr
        }() as! [String]))
        _arr = _append(_arr, ({
            var _arr: [String] = []
            _arr = _append(_arr, "8")
            _arr = _append(_arr, ".")
            _arr = _append(_arr, ".")
            _arr = _append(_arr, ".")
            _arr = _append(_arr, "6")
            _arr = _append(_arr, ".")
            _arr = _append(_arr, ".")
            _arr = _append(_arr, ".")
            _arr = _append(_arr, "3")
            return _arr
        }() as! [String]))
        _arr = _append(_arr, ({
            var _arr: [String] = []
            _arr = _append(_arr, "4")
            _arr = _append(_arr, ".")
            _arr = _append(_arr, ".")
            _arr = _append(_arr, "8")
            _arr = _append(_arr, ".")
            _arr = _append(_arr, "3")
            _arr = _append(_arr, ".")
            _arr = _append(_arr, ".")
            _arr = _append(_arr, "1")
            return _arr
        }() as! [String]))
        _arr = _append(_arr, ({
            var _arr: [String] = []
            _arr = _append(_arr, "7")
            _arr = _append(_arr, ".")
            _arr = _append(_arr, ".")
            _arr = _append(_arr, ".")
            _arr = _append(_arr, "2")
            _arr = _append(_arr, ".")
            _arr = _append(_arr, ".")
            _arr = _append(_arr, ".")
            _arr = _append(_arr, "6")
            return _arr
        }() as! [String]))
        _arr = _append(_arr, ({
            var _arr: [String] = []
            _arr = _append(_arr, ".")
            _arr = _append(_arr, "6")
            _arr = _append(_arr, ".")
            _arr = _append(_arr, ".")
            _arr = _append(_arr, ".")
            _arr = _append(_arr, ".")
            _arr = _append(_arr, "2")
            _arr = _append(_arr, "8")
            _arr = _append(_arr, ".")
            return _arr
        }() as! [String]))
        _arr = _append(_arr, ({
            var _arr: [String] = []
            _arr = _append(_arr, ".")
            _arr = _append(_arr, ".")
            _arr = _append(_arr, ".")
            _arr = _append(_arr, "4")
            _arr = _append(_arr, "1")
            _arr = _append(_arr, "9")
            _arr = _append(_arr, ".")
            _arr = _append(_arr, ".")
            _arr = _append(_arr, "5")
            return _arr
        }() as! [String]))
        _arr = _append(_arr, ({
            var _arr: [String] = []
            _arr = _append(_arr, ".")
            _arr = _append(_arr, ".")
            _arr = _append(_arr, ".")
            _arr = _append(_arr, ".")
            _arr = _append(_arr, "8")
            _arr = _append(_arr, ".")
            _arr = _append(_arr, ".")
            _arr = _append(_arr, "7")
            _arr = _append(_arr, "9")
            return _arr
        }() as! [String]))
        return _arr
    }() as! [[String]])
    let invalid_board: [[String]] = ({
        var _arr: [[String]] = []
        _arr = _append(_arr, ({
            var _arr: [String] = []
            _arr = _append(_arr, "8")
            _arr = _append(_arr, "3")
            _arr = _append(_arr, ".")
            _arr = _append(_arr, ".")
            _arr = _append(_arr, "7")
            _arr = _append(_arr, ".")
            _arr = _append(_arr, ".")
            _arr = _append(_arr, ".")
            _arr = _append(_arr, ".")
            return _arr
        }() as! [String]))
        _arr = _append(_arr, ({
            var _arr: [String] = []
            _arr = _append(_arr, "6")
            _arr = _append(_arr, ".")
            _arr = _append(_arr, ".")
            _arr = _append(_arr, "1")
            _arr = _append(_arr, "9")
            _arr = _append(_arr, "5")
            _arr = _append(_arr, ".")
            _arr = _append(_arr, ".")
            _arr = _append(_arr, ".")
            return _arr
        }() as! [String]))
        _arr = _append(_arr, ({
            var _arr: [String] = []
            _arr = _append(_arr, ".")
            _arr = _append(_arr, "9")
            _arr = _append(_arr, "8")
            _arr = _append(_arr, ".")
            _arr = _append(_arr, ".")
            _arr = _append(_arr, ".")
            _arr = _append(_arr, ".")
            _arr = _append(_arr, "6")
            _arr = _append(_arr, ".")
            return _arr
        }() as! [String]))
        _arr = _append(_arr, ({
            var _arr: [String] = []
            _arr = _append(_arr, "8")
            _arr = _append(_arr, ".")
            _arr = _append(_arr, ".")
            _arr = _append(_arr, ".")
            _arr = _append(_arr, "6")
            _arr = _append(_arr, ".")
            _arr = _append(_arr, ".")
            _arr = _append(_arr, ".")
            _arr = _append(_arr, "3")
            return _arr
        }() as! [String]))
        _arr = _append(_arr, ({
            var _arr: [String] = []
            _arr = _append(_arr, "4")
            _arr = _append(_arr, ".")
            _arr = _append(_arr, ".")
            _arr = _append(_arr, "8")
            _arr = _append(_arr, ".")
            _arr = _append(_arr, "3")
            _arr = _append(_arr, ".")
            _arr = _append(_arr, ".")
            _arr = _append(_arr, "1")
            return _arr
        }() as! [String]))
        _arr = _append(_arr, ({
            var _arr: [String] = []
            _arr = _append(_arr, "7")
            _arr = _append(_arr, ".")
            _arr = _append(_arr, ".")
            _arr = _append(_arr, ".")
            _arr = _append(_arr, "2")
            _arr = _append(_arr, ".")
            _arr = _append(_arr, ".")
            _arr = _append(_arr, ".")
            _arr = _append(_arr, "6")
            return _arr
        }() as! [String]))
        _arr = _append(_arr, ({
            var _arr: [String] = []
            _arr = _append(_arr, ".")
            _arr = _append(_arr, "6")
            _arr = _append(_arr, ".")
            _arr = _append(_arr, ".")
            _arr = _append(_arr, ".")
            _arr = _append(_arr, ".")
            _arr = _append(_arr, "2")
            _arr = _append(_arr, "8")
            _arr = _append(_arr, ".")
            return _arr
        }() as! [String]))
        _arr = _append(_arr, ({
            var _arr: [String] = []
            _arr = _append(_arr, ".")
            _arr = _append(_arr, ".")
            _arr = _append(_arr, ".")
            _arr = _append(_arr, "4")
            _arr = _append(_arr, "1")
            _arr = _append(_arr, "9")
            _arr = _append(_arr, ".")
            _arr = _append(_arr, ".")
            _arr = _append(_arr, "5")
            return _arr
        }() as! [String]))
        _arr = _append(_arr, ({
            var _arr: [String] = []
            _arr = _append(_arr, ".")
            _arr = _append(_arr, ".")
            _arr = _append(_arr, ".")
            _arr = _append(_arr, ".")
            _arr = _append(_arr, "8")
            _arr = _append(_arr, ".")
            _arr = _append(_arr, ".")
            _arr = _append(_arr, "7")
            _arr = _append(_arr, "9")
            return _arr
        }() as! [String]))
        return _arr
    }() as! [[String]])
    print(_p(is_valid_sudoku_board((valid_board as! [[String]]))))
    print(_p(is_valid_sudoku_board((invalid_board as! [[String]]))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
