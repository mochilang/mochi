// Generated by Mochi transpiler v0.10.63 on 2025-08-12 08:45:21 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func is_square(_ matrix: [[Int]]) -> Bool {
        let n = _int(((matrix).count))
        var i = 0
        while (i < n) {
            if (_int((((_idx(matrix, i) as! [Int])).count)) != n) {
                return false
            }
            i = _int((i &+ 1))
        }
        return true
    }
    func matrix_multiply(_ a: [[Int]], _ b: [[Int]]) -> [[Int]] {
        let rows = _int(((a).count))
        let cols = _int((((_idx(b, 0) as! [Int])).count))
        let inner = _int(((b).count))
        var result: [[Int]] = ([] as! [[Int]])
        var i = 0
        while (i < rows) {
            var row: [Int] = ([] as! [Int])
            var j = 0
            while (j < cols) {
                var sum = 0
                var k = 0
                while (k < inner) {
                    sum = _int((sum &+ ((_idx(_idx(a, i)!, k) as? Int ?? 0) &* (_idx(_idx(b, k)!, j) as? Int ?? 0))))
                    k = _int((k &+ 1))
                }
                row = (_append(row, sum) as! [Int])
                j = _int((j &+ 1))
            }
            result = (_append(result, row) as! [[Int]])
            i = _int((i &+ 1))
        }
        return result
    }
    func multiply(_ i: Int, _ j: Int, _ k: Int, _ a: [[Int]], _ b: [[Int]], _ result: [[Int]], _ n: Int, _ m: Int) {
        var result = result
        if (i >= n) {
            return
        }
        if (j >= m) {
            _ = multiply((i &+ 1), 0, 0, (a as! [[Int]]), (b as! [[Int]]), (result as! [[Int]]), n, m)
            return
        }
        if (k >= _int(((b).count))) {
            _ = multiply(i, (j &+ 1), 0, (a as! [[Int]]), (b as! [[Int]]), (result as! [[Int]]), n, m)
            return
        }
        var _tmp2 = (_idx(result, i) as! [Int])
        _tmp2 = _set(_tmp2, j, _int(((_idx(_idx(result, i)!, j) as? Int ?? 0) &+ ((_idx(_idx(a, i)!, k) as? Int ?? 0) &* (_idx(_idx(b, k)!, j) as? Int ?? 0)))))
        result = _set(result, i, (_tmp2 as! [Int]))
        _ = multiply(i, j, (k &+ 1), (a as! [[Int]]), (b as! [[Int]]), (result as! [[Int]]), n, m)
    }
    func matrix_multiply_recursive(_ a: [[Int]], _ b: [[Int]]) -> [[Int]] {
        if ((_int(((a).count)) == 0) || (_int(((b).count)) == 0)) {
            return ([] as! [[Int]])
        }
        if (((_int(((a).count)) != _int(((b).count))) || ((!is_square((a as! [[Int]]))) as! Bool)) || ((!is_square((b as! [[Int]]))) as! Bool)) {
            _ = fatalError("Invalid matrix dimensions")
        }
        let n = _int(((a).count))
        let m = _int((((_idx(b, 0) as! [Int])).count))
        var result: [[Int]] = ([] as! [[Int]])
        var i = 0
        while (i < n) {
            var row: [Int] = ([] as! [Int])
            var j = 0
            while (j < m) {
                row = (_append(row, 0) as! [Int])
                j = _int((j &+ 1))
            }
            result = (_append(result, row) as! [[Int]])
            i = _int((i &+ 1))
        }
        _ = multiply(0, 0, 0, (a as! [[Int]]), (b as! [[Int]]), (result as! [[Int]]), n, m)
        return result
    }
    let matrix_1_to_4: [[Int]] = ({
        var _arr: [[Int]] = []
        _arr = _append(_arr, ({
            var _arr: [Int] = []
            _arr = _append(_arr, 1)
            _arr = _append(_arr, 2)
            return _arr
        }() as! [Int]))
        _arr = _append(_arr, ({
            var _arr: [Int] = []
            _arr = _append(_arr, 3)
            _arr = _append(_arr, 4)
            return _arr
        }() as! [Int]))
        return _arr
    }() as! [[Int]])
    let matrix_5_to_8: [[Int]] = ({
        var _arr: [[Int]] = []
        _arr = _append(_arr, ({
            var _arr: [Int] = []
            _arr = _append(_arr, 5)
            _arr = _append(_arr, 6)
            return _arr
        }() as! [Int]))
        _arr = _append(_arr, ({
            var _arr: [Int] = []
            _arr = _append(_arr, 7)
            _arr = _append(_arr, 8)
            return _arr
        }() as! [Int]))
        return _arr
    }() as! [[Int]])
    let matrix_count_up: [[Int]] = ({
        var _arr: [[Int]] = []
        _arr = _append(_arr, ({
            var _arr: [Int] = []
            _arr = _append(_arr, 1)
            _arr = _append(_arr, 2)
            _arr = _append(_arr, 3)
            _arr = _append(_arr, 4)
            return _arr
        }() as! [Int]))
        _arr = _append(_arr, ({
            var _arr: [Int] = []
            _arr = _append(_arr, 5)
            _arr = _append(_arr, 6)
            _arr = _append(_arr, 7)
            _arr = _append(_arr, 8)
            return _arr
        }() as! [Int]))
        _arr = _append(_arr, ({
            var _arr: [Int] = []
            _arr = _append(_arr, 9)
            _arr = _append(_arr, 10)
            _arr = _append(_arr, 11)
            _arr = _append(_arr, 12)
            return _arr
        }() as! [Int]))
        _arr = _append(_arr, ({
            var _arr: [Int] = []
            _arr = _append(_arr, 13)
            _arr = _append(_arr, 14)
            _arr = _append(_arr, 15)
            _arr = _append(_arr, 16)
            return _arr
        }() as! [Int]))
        return _arr
    }() as! [[Int]])
    let matrix_unordered: [[Int]] = ({
        var _arr: [[Int]] = []
        _arr = _append(_arr, ({
            var _arr: [Int] = []
            _arr = _append(_arr, 5)
            _arr = _append(_arr, 8)
            _arr = _append(_arr, 1)
            _arr = _append(_arr, 2)
            return _arr
        }() as! [Int]))
        _arr = _append(_arr, ({
            var _arr: [Int] = []
            _arr = _append(_arr, 6)
            _arr = _append(_arr, 7)
            _arr = _append(_arr, 3)
            _arr = _append(_arr, 0)
            return _arr
        }() as! [Int]))
        _arr = _append(_arr, ({
            var _arr: [Int] = []
            _arr = _append(_arr, 4)
            _arr = _append(_arr, 5)
            _arr = _append(_arr, 9)
            _arr = _append(_arr, 1)
            return _arr
        }() as! [Int]))
        _arr = _append(_arr, ({
            var _arr: [Int] = []
            _arr = _append(_arr, 2)
            _arr = _append(_arr, 6)
            _arr = _append(_arr, 10)
            _arr = _append(_arr, 14)
            return _arr
        }() as! [Int]))
        return _arr
    }() as! [[Int]])
    print(_p("[" + (matrix_multiply_recursive((matrix_1_to_4 as! [[Int]]), (matrix_5_to_8 as! [[Int]])) as! [[Int]]).map{ if let s = $0 as? String { "\"" + s.replacingOccurrences(of: "\"", with: "\\\"") + "\"" } else { _p($0) } }.joined(separator: ", ") + "]"))
    print(_p("[" + (matrix_multiply_recursive((matrix_count_up as! [[Int]]), (matrix_unordered as! [[Int]])) as! [[Int]]).map{ if let s = $0 as? String { "\"" + s.replacingOccurrences(of: "\"", with: "\\\"") + "\"" } else { _p($0) } }.joined(separator: ", ") + "]"))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
