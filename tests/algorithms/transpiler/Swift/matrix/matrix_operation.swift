// Generated by Mochi transpiler v0.10.73 on 2025-08-25 22:33:26 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.isNaN || d.isInfinite {
                return String(d)
            }
            if d.rounded(.towardZero) == d {
                // avoid overflow when converting to Int64
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _num(_ v: Any) -> Double {
    if let d = v as? Double { return d }
    if let i = v as? Int { return Double(i) }
    if let i = v as? Int64 { return Double(i) }
    return 0
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first!
}
func _idx<K: Hashable, V>(_ m: [K: V], _ k: K) -> V? {
    return m[k]
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func add(_ matrices: [[[Double]]]) -> [[Double]] {
        let rows = _int((((_idx(matrices, 0) as! [[Double]])).count))
        let cols = _int((((_idx(_idx(matrices, 0), 0) as! [Double])).count))
        var r = 0
        var result: [[Double]] = ([] as! [[Double]])
        while ((r < rows)) {
            var row: [Double] = ([] as! [Double])
            var c = 0
            while ((c < cols)) {
                var sum = 0.0
                var m = 0
                while ((m < _int(((matrices).count)))) {
                    sum = _num((sum + _num(_idx(_idx(_idx(matrices, m), r), c))))
                    m = _int((m &+ 1))
                }
                row = (_append(row, sum) as! [Double])
                c = _int((c &+ 1))
            }
            result = (_append(result, row) as! [[Double]])
            r = _int((r &+ 1))
        }
        return result
    }
    func subtract(_ a: [[Double]], _ b: [[Double]]) -> [[Double]] {
        let rows = _int(((a).count))
        let cols = _int((((_idx(a, 0) as! [Double])).count))
        var r = 0
        var result: [[Double]] = ([] as! [[Double]])
        while ((r < rows)) {
            var row: [Double] = ([] as! [Double])
            var c = 0
            while ((c < cols)) {
                row = (_append(row, (_num(_idx(_idx(a, r), c)) - _num(_idx(_idx(b, r), c)))) as! [Double])
                c = _int((c &+ 1))
            }
            result = (_append(result, row) as! [[Double]])
            r = _int((r &+ 1))
        }
        return result
    }
    func scalar_multiply(_ matrix: [[Double]], _ n: Double) -> [[Double]] {
        var result: [[Double]] = ([] as! [[Double]])
        var i = 0
        while ((i < _int(((matrix).count)))) {
            var row: [Double] = ([] as! [Double])
            var j = 0
            while ((j < _int((((_idx(matrix, i) as! [Double])).count)))) {
                row = (_append(row, (_num(_idx(_idx(matrix, i), j)) * n)) as! [Double])
                j = _int((j &+ 1))
            }
            result = (_append(result, row) as! [[Double]])
            i = _int((i &+ 1))
        }
        return result
    }
    func multiply(_ a: [[Double]], _ b: [[Double]]) -> [[Double]] {
        let rowsA = _int(((a).count))
        let colsA = _int((((_idx(a, 0) as! [Double])).count))
        let rowsB = _int(((b).count))
        let colsB = _int((((_idx(b, 0) as! [Double])).count))
        var result: [[Double]] = ([] as! [[Double]])
        var i = 0
        while ((i < rowsA)) {
            var row: [Double] = ([] as! [Double])
            var j = 0
            while ((j < colsB)) {
                var sum = 0.0
                var k = 0
                while ((k < colsA)) {
                    sum = _num((sum + (_num(_idx(_idx(a, i), k)) * _num(_idx(_idx(b, k), j)))))
                    k = _int((k &+ 1))
                }
                row = (_append(row, sum) as! [Double])
                j = _int((j &+ 1))
            }
            result = (_append(result, row) as! [[Double]])
            i = _int((i &+ 1))
        }
        return result
    }
    func identity(_ n: Int) -> [[Double]] {
        var result: [[Double]] = ([] as! [[Double]])
        var i = 0
        while ((i < n)) {
            var row: [Double] = ([] as! [Double])
            var j = 0
            while ((j < n)) {
                if ((i == j)) {
                    row = (_append(row, 1.0) as! [Double])
                } else {
                    row = (_append(row, 0.0) as! [Double])
                }
                j = _int((j &+ 1))
            }
            result = (_append(result, row) as! [[Double]])
            i = _int((i &+ 1))
        }
        return result
    }
    func transpose(_ matrix: [[Double]]) -> [[Double]] {
        let rows = _int(((matrix).count))
        let cols = _int((((_idx(matrix, 0) as! [Double])).count))
        var result: [[Double]] = ([] as! [[Double]])
        var c = 0
        while ((c < cols)) {
            var row: [Double] = ([] as! [Double])
            var r = 0
            while ((r < rows)) {
                row = (_append(row, _num(_idx(_idx(matrix, r), c))) as! [Double])
                r = _int((r &+ 1))
            }
            result = (_append(result, row) as! [[Double]])
            c = _int((c &+ 1))
        }
        return result
    }
    func minor(_ matrix: [[Double]], _ row: Int, _ column: Int) -> [[Double]] {
        var result: [[Double]] = ([] as! [[Double]])
        var i = 0
        while ((i < _int(((matrix).count)))) {
            if ((i != row)) {
                var new_row: [Double] = ([] as! [Double])
                var j = 0
                while ((j < _int((((_idx(matrix, i) as! [Double])).count)))) {
                    if ((j != column)) {
                        new_row = (_append(new_row, _num(_idx(_idx(matrix, i), j))) as! [Double])
                    }
                    j = _int((j &+ 1))
                }
                result = (_append(result, new_row) as! [[Double]])
            }
            i = _int((i &+ 1))
        }
        return result
    }
    func determinant(_ matrix: [[Double]]) -> Double {
        if ((_int(((matrix).count)) == 1)) {
            return _num(_idx(_idx(matrix, 0), 0))
        }
        var det = 0.0
        var c = 0
        while ((c < _int((((_idx(matrix, 0) as! [Double])).count)))) {
            let sub: [[Double]] = (minor((matrix as! [[Double]]), 0, c) as! [[Double]])
            let sign = _num(((((c % 2 + 2) % 2) == 0) ? 1.0 : -1.0))
            det = _num((det + ((_num(_idx(_idx(matrix, 0), c)) * _num(determinant((sub as! [[Double]])))) * sign)))
            c = _int((c &+ 1))
        }
        return det
    }
    func inverse(_ matrix: [[Double]]) -> [[Double]] {
        let det = _num(determinant((matrix as! [[Double]])))
        if ((det == 0.0)) {
            return ([] as! [[Double]])
        }
        let size = _int(((matrix).count))
        var matrix_minor: [[Double]] = ([] as! [[Double]])
        var i = 0
        while ((i < size)) {
            var row: [Double] = ([] as! [Double])
            var j = 0
            while ((j < size)) {
                let m: [[Double]] = (minor((matrix as! [[Double]]), i, j) as! [[Double]])
                row = (_append(row, _num(determinant((m as! [[Double]])))) as! [Double])
                j = _int((j &+ 1))
            }
            matrix_minor = (_append(matrix_minor, row) as! [[Double]])
            i = _int((i &+ 1))
        }
        var cofactors: [[Double]] = ([] as! [[Double]])
        i = 0
        while ((i < size)) {
            var row: [Double] = ([] as! [Double])
            var j = 0
            while ((j < size)) {
                let sign = _num(((((_int((i &+ j)) % 2 + 2) % 2) == 0) ? 1.0 : -1.0))
                row = (_append(row, (_num(_idx(_idx(matrix_minor, i), j)) * sign)) as! [Double])
                j = _int((j &+ 1))
            }
            cofactors = (_append(cofactors, row) as! [[Double]])
            i = _int((i &+ 1))
        }
        let adjugate: [[Double]] = (transpose((cofactors as! [[Double]])) as! [[Double]])
        return (scalar_multiply((adjugate as! [[Double]]), _num((1.0 / det))) as! [[Double]])
    }
    func main() {
        let matrix_a: [[Double]] = ({
            var _arr: [[Double]] = []
            _arr = _append(_arr, ({
                var _arr: [Double] = []
                _arr = _append(_arr, 12.0)
                _arr = _append(_arr, 10.0)
                return _arr
            }() as! [Double]))
            _arr = _append(_arr, ({
                var _arr: [Double] = []
                _arr = _append(_arr, 3.0)
                _arr = _append(_arr, 9.0)
                return _arr
            }() as! [Double]))
            return _arr
        }() as! [[Double]])
        let matrix_b: [[Double]] = ({
            var _arr: [[Double]] = []
            _arr = _append(_arr, ({
                var _arr: [Double] = []
                _arr = _append(_arr, 3.0)
                _arr = _append(_arr, 4.0)
                return _arr
            }() as! [Double]))
            _arr = _append(_arr, ({
                var _arr: [Double] = []
                _arr = _append(_arr, 7.0)
                _arr = _append(_arr, 4.0)
                return _arr
            }() as! [Double]))
            return _arr
        }() as! [[Double]])
        let matrix_c: [[Double]] = ({
            var _arr: [[Double]] = []
            _arr = _append(_arr, ({
                var _arr: [Double] = []
                _arr = _append(_arr, 11.0)
                _arr = _append(_arr, 12.0)
                _arr = _append(_arr, 13.0)
                _arr = _append(_arr, 14.0)
                return _arr
            }() as! [Double]))
            _arr = _append(_arr, ({
                var _arr: [Double] = []
                _arr = _append(_arr, 21.0)
                _arr = _append(_arr, 22.0)
                _arr = _append(_arr, 23.0)
                _arr = _append(_arr, 24.0)
                return _arr
            }() as! [Double]))
            _arr = _append(_arr, ({
                var _arr: [Double] = []
                _arr = _append(_arr, 31.0)
                _arr = _append(_arr, 32.0)
                _arr = _append(_arr, 33.0)
                _arr = _append(_arr, 34.0)
                return _arr
            }() as! [Double]))
            _arr = _append(_arr, ({
                var _arr: [Double] = []
                _arr = _append(_arr, 41.0)
                _arr = _append(_arr, 42.0)
                _arr = _append(_arr, 43.0)
                _arr = _append(_arr, 44.0)
                return _arr
            }() as! [Double]))
            return _arr
        }() as! [[Double]])
        let matrix_d: [[Double]] = ({
            var _arr: [[Double]] = []
            _arr = _append(_arr, ({
                var _arr: [Double] = []
                _arr = _append(_arr, 3.0)
                _arr = _append(_arr, 0.0)
                _arr = _append(_arr, 2.0)
                return _arr
            }() as! [Double]))
            _arr = _append(_arr, ({
                var _arr: [Double] = []
                _arr = _append(_arr, 2.0)
                _arr = _append(_arr, 0.0)
                _arr = _append(_arr, -2.0)
                return _arr
            }() as! [Double]))
            _arr = _append(_arr, ({
                var _arr: [Double] = []
                _arr = _append(_arr, 0.0)
                _arr = _append(_arr, 1.0)
                _arr = _append(_arr, 1.0)
                return _arr
            }() as! [Double]))
            return _arr
        }() as! [[Double]])
        print(_p({ let _tmp3 = { let _tmp1 = "Add Operation, add(matrix_a, matrix_b) = "; let _tmp2 = "[" + (add(({
            var _arr: [[[Double]]] = []
            _arr = _append(_arr, matrix_a)
            _arr = _append(_arr, matrix_b)
            return _arr
        }() as! [[[Double]]])) as! [[Double]]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"; return (_p(_tmp1) + _p(_tmp2))}(); let _tmp4 = " \n"; return (_p(_tmp3) + _p(_tmp4))}()))
        print(_p({ let _tmp7 = { let _tmp5 = "Multiply Operation, multiply(matrix_a, matrix_b) = "; let _tmp6 = "[" + (multiply((matrix_a as! [[Double]]), (matrix_b as! [[Double]])) as! [[Double]]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"; return (_p(_tmp5) + _p(_tmp6))}(); let _tmp8 = " \n"; return (_p(_tmp7) + _p(_tmp8))}()))
        print(_p((_p((_p("Identity: ") + _p("[" + (identity(5) as! [[Double]]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))) + _p("\n"))))
        print(_p({ let _tmp11 = { let _tmp9 = (_p((_p("Minor of ") + _p("[" + matrix_c.map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))) + _p(" = ")); let _tmp10 = "[" + (minor((matrix_c as! [[Double]]), 1, 2) as! [[Double]]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"; return (_p(_tmp9) + _p(_tmp10))}(); let _tmp12 = " \n"; return (_p(_tmp11) + _p(_tmp12))}()))
        print(_p({ let _tmp13 = (_p((_p((_p("Determinant of ") + _p("[" + matrix_b.map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))) + _p(" = "))) + _p(_p(_num(determinant((matrix_b as! [[Double]])))))); let _tmp14 = " \n"; return (_p(_tmp13) + _p(_tmp14))}()))
        print(_p({ let _tmp17 = { let _tmp15 = (_p((_p("Inverse of ") + _p("[" + matrix_d.map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))) + _p(" = ")); let _tmp16 = "[" + (inverse((matrix_d as! [[Double]])) as! [[Double]]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"; return (_p(_tmp15) + _p(_tmp16))}(); let _tmp18 = "\n"; return (_p(_tmp17) + _p(_tmp18))}()))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
