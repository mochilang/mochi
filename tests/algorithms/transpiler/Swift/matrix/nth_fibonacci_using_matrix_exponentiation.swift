// Generated by Mochi transpiler v0.10.63 on 2025-08-12 08:45:32 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func multiply(_ matrix_a: [[Int]], _ matrix_b: [[Int]]) -> [[Int]] {
        let n = _int(((matrix_a).count))
        var matrix_c: [[Int]] = ([] as! [[Int]])
        var i = 0
        while (i < n) {
            var row: [Int] = ([] as! [Int])
            var j = 0
            while (j < n) {
                var val = 0
                var k = 0
                while (k < n) {
                    val = _int((val &+ ((_idx(_idx(matrix_a, i)!, k) as? Int ?? 0) &* (_idx(_idx(matrix_b, k)!, j) as? Int ?? 0))))
                    k = _int((k &+ 1))
                }
                row = (_append(row, val) as! [Int])
                j = _int((j &+ 1))
            }
            matrix_c = (_append(matrix_c, row) as! [[Int]])
            i = _int((i &+ 1))
        }
        return matrix_c
    }
    func identity(_ n: Int) -> [[Int]] {
        var res: [[Int]] = ([] as! [[Int]])
        var i = 0
        while (i < n) {
            var row: [Int] = ([] as! [Int])
            var j = 0
            while (j < n) {
                if (i == j) {
                    row = (_append(row, 1) as! [Int])
                } else {
                    row = (_append(row, 0) as! [Int])
                }
                j = _int((j &+ 1))
            }
            res = (_append(res, row) as! [[Int]])
            i = _int((i &+ 1))
        }
        return res
    }
    func nth_fibonacci_matrix(_ n: Int) -> Int {
        if (n <= 1) {
            return n
        }
        var res_matrix = (identity(2) as! [[Int]])
        var fib_matrix = ({
            var _arr: [[Int]] = []
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 1)
                _arr = _append(_arr, 1)
                return _arr
            }() as! [Int]))
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 1)
                _arr = _append(_arr, 0)
                return _arr
            }() as! [Int]))
            return _arr
        }() as! [[Int]])
        var m = (n &- 1)
        while (m > 0) {
            if (((m % 2 + 2) % 2) == 1) {
                res_matrix = (multiply((res_matrix as! [[Int]]), (fib_matrix as! [[Int]])) as! [[Int]])
            }
            fib_matrix = (multiply((fib_matrix as! [[Int]]), (fib_matrix as! [[Int]])) as! [[Int]])
            m = _int((m / 2))
        }
        return (_idx(_idx(res_matrix, 0)!, 0) as? Int ?? 0)
    }
    func nth_fibonacci_bruteforce(_ n: Int) -> Int {
        if (n <= 1) {
            return n
        }
        var fib0 = 0
        var fib1 = 1
        var i = 2
        while (i <= n) {
            let next = (fib0 &+ fib1)
            fib0 = Int(fib1)
            fib1 = Int(next)
            i = _int((i &+ 1))
        }
        return fib1
    }
    func parse_number(_ s: String) -> Int {
        var result = 0
        var i = 0
        while (i < _int(((s).count))) {
            let ch = String(describing: String(Array(String(describing: (s as! String)))[i..<(i &+ 1)]))
            if ((ch >= "0") && (ch <= "9")) {
                result = _int(((result &* 10) &+ _int(_int(ch))))
            }
            i = _int((i &+ 1))
        }
        return result
    }
    func main() {
        let ordinals: [String] = ({
            var _arr: [String] = []
            _arr = _append(_arr, "0th")
            _arr = _append(_arr, "1st")
            _arr = _append(_arr, "2nd")
            _arr = _append(_arr, "3rd")
            _arr = _append(_arr, "10th")
            _arr = _append(_arr, "100th")
            _arr = _append(_arr, "1000th")
            return _arr
        }() as! [String])
        var i = 0
        while (i < _int(((ordinals).count))) {
            let ordinal = (_idx(ordinals, i) as! String)
            let n = _int(parse_number((ordinal as! String)))
            let msg = ((((ordinal + " fibonacci number using matrix exponentiation is ") + _p(_int(nth_fibonacci_matrix(n)))) + " and using bruteforce is ") + _p(_int(nth_fibonacci_bruteforce(n))))
            print(_p(msg))
            i = _int((i &+ 1))
        }
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
