// Generated by Mochi transpiler v0.10.64 on 2025-08-12 11:51:45 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func bfs(_ graph: [[Int]], _ s: Int, _ t: Int, _ parent: inout [Int]) -> Bool {
        var visited: [Bool] = ([] as! [Bool])
        var i = 0
        while (i < _int(((graph).count))) {
            visited = (_append(visited, false) as! [Bool])
            i = _int((i &+ 1))
        }
        var queue: [Int] = ({
            var _arr: [Int] = []
            _arr = _append(_arr, s)
            return _arr
        }() as! [Int])
        var head = 0
        visited = _set(visited, s, true)
        while (head < _int(((queue).count))) {
            let u = (_idx(queue, head) as? Int ?? 0)
            head = _int((head &+ 1))
            var ind = 0
            while (ind < _int((((_idx(graph, u) as! [Int])).count))) {
                if (((_idx(visited, ind) as! Bool) == false) && ((_idx(_idx(graph, u)!, ind) as? Int ?? 0) > 0)) {
                    queue = (_append(queue, ind) as! [Int])
                    visited = _set(visited, ind, true)
                    parent = _set(parent, ind, Int(u))
                }
                ind = _int((ind &+ 1))
            }
        }
        return (_idx(visited, t) as! Bool)
    }
    func mincut(_ graph: [[Int]], _ source: Int, _ sink: Int) -> [[Int]] {
        var g = graph
        var parent: [Int] = ([] as! [Int])
        var i = 0
        while (i < _int(((g).count))) {
            parent = (_append(parent, -1) as! [Int])
            i = _int((i &+ 1))
        }
        var temp: [[Int]] = ([] as! [[Int]])
        i = 0
        while (i < _int(((g).count))) {
            var row: [Int] = ([] as! [Int])
            var j = 0
            while (j < _int((((_idx(g, i) as! [Int])).count))) {
                row = (_append(row, (_idx(_idx(g, i)!, j) as? Int ?? 0)) as! [Int])
                j = _int((j &+ 1))
            }
            temp = (_append(temp, row) as! [[Int]])
            i = _int((i &+ 1))
        }
        while bfs((g as! [[Int]]), source, sink, &parent) {
            var path_flow = 1000000000
            var s = sink
            while (s != source) {
                let p = (_idx(parent, s) as? Int ?? 0)
                let cap = (_idx(_idx(g, p)!, s) as? Int ?? 0)
                if (cap < path_flow) {
                    path_flow = Int(cap)
                }
                s = Int(p)
            }
            var v = sink
            while (v != source) {
                let u = (_idx(parent, v) as? Int ?? 0)
                var _tmp3 = (_idx(g, u) as! [Int])
                _tmp3 = _set(_tmp3, v, _int(((_idx(_idx(g, u)!, v) as? Int ?? 0) &- path_flow)))
                g = _set(g, u, (_tmp3 as! [Int]))
                var _tmp4 = (_idx(g, v) as! [Int])
                _tmp4 = _set(_tmp4, u, _int(((_idx(_idx(g, v)!, u) as? Int ?? 0) &+ path_flow)))
                g = _set(g, v, (_tmp4 as! [Int]))
                v = Int(u)
            }
        }
        var res: [[Int]] = ([] as! [[Int]])
        i = 0
        while (i < _int(((g).count))) {
            var j = 0
            while (j < _int((((_idx(g, 0) as! [Int])).count))) {
                if (((_idx(_idx(g, i)!, j) as? Int ?? 0) == 0) && ((_idx(_idx(temp, i)!, j) as? Int ?? 0) > 0)) {
                    res = (_append(res, ({
                        var _arr: [Int] = []
                        _arr = _append(_arr, i)
                        _arr = _append(_arr, j)
                        return _arr
                    }() as! [Int])) as! [[Int]])
                }
                j = _int((j &+ 1))
            }
            i = _int((i &+ 1))
        }
        return res
    }
    let test_graph: [[Int]] = ({
        var _arr: [[Int]] = []
        _arr = _append(_arr, ({
            var _arr: [Int] = []
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 16)
            _arr = _append(_arr, 13)
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 0)
            return _arr
        }() as! [Int]))
        _arr = _append(_arr, ({
            var _arr: [Int] = []
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 10)
            _arr = _append(_arr, 12)
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 0)
            return _arr
        }() as! [Int]))
        _arr = _append(_arr, ({
            var _arr: [Int] = []
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 4)
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 14)
            _arr = _append(_arr, 0)
            return _arr
        }() as! [Int]))
        _arr = _append(_arr, ({
            var _arr: [Int] = []
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 9)
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 20)
            return _arr
        }() as! [Int]))
        _arr = _append(_arr, ({
            var _arr: [Int] = []
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 7)
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 4)
            return _arr
        }() as! [Int]))
        _arr = _append(_arr, ({
            var _arr: [Int] = []
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 0)
            return _arr
        }() as! [Int]))
        return _arr
    }() as! [[Int]])
    let result: [[Int]] = (mincut((test_graph as! [[Int]]), 0, 5) as! [[Int]])
    print(_p("[" + result.map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
