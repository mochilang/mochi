// Generated by Mochi transpiler v0.10.61 on 2025-08-08 16:01:02 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return nil
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
struct LU: Codable {
    var lower: [[Double]]
    var upper: [[Double]]
    init() {
        self.lower = []
        self.upper = []
    }
    init(lower: [[Double]], upper: [[Double]]) {
        self.lower = lower
        self.upper = upper
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func lu_decomposition(_ mat: [[Double]]) -> LU {
        let n = _int(((mat).count))
        if (n == 0) {
            return LU(lower: [], upper: [])
        }
        let m = _int((((_idx(mat, 0) as! [Double])).count))
        if (n != m) {
            _ = fatalError("Matrix must be square")
        }
        var lower: [[Double]] = ([] as! [[Double]])
        var upper: [[Double]] = ([] as! [[Double]])
        var i: Int = 0
        while (i < n) {
            var lrow: [Double] = ([] as! [Double])
            var urow: [Double] = ([] as! [Double])
            var j: Int = 0
            while (j < n) {
                lrow = (_append(lrow, 0.0) as! [Double])
                urow = (_append(urow, 0.0) as! [Double])
                j = _int((j &+ 1))
            }
            lower = (_append(lower, lrow) as! [[Double]])
            upper = (_append(upper, urow) as! [[Double]])
            i = _int((i &+ 1))
        }
        i = 0
        while (i < n) {
            var j1: Int = 0
            while (j1 < i) {
                var total: Double = 0.0
                var k: Int = 0
                while (k < i) {
                    total = Double((total + (Double(_idx(_idx(lower, i), k)) * Double(_idx(_idx(upper, k), j1)))))
                    k = _int((k &+ 1))
                }
                if (Double(_idx(_idx(upper, j1), j1)) == 0.0) {
                    _ = fatalError("No LU decomposition exists")
                }
                _idx(_idx(lower, i), j1) = Double((Double((Double(_idx(_idx(mat, i), j1)) - total)) / Double(_idx(_idx(upper, j1), j1))))
                j1 = _int((j1 &+ 1))
            }
            _idx(_idx(lower, i), i) = 1.0
            var j2: Int = i
            while (j2 < n) {
                var total2: Double = 0.0
                var k2: Int = 0
                while (k2 < i) {
                    total2 = Double((total2 + (Double(_idx(_idx(lower, i), k2)) * Double(_idx(_idx(upper, k2), j2)))))
                    k2 = _int((k2 &+ 1))
                }
                _idx(_idx(upper, i), j2) = Double((Double(_idx(_idx(mat, i), j2)) - total2))
                j2 = _int((j2 &+ 1))
            }
            i = _int((i &+ 1))
        }
        return LU(lower: lower, upper: upper)
    }
    func print_matrix(_ mat: [[Double]]) {
        var i: Int = 0
        while (i < _int(((mat).count))) {
            var line: String = ""
            var j: Int = 0
            while (j < _int((((_idx(mat, i) as! [Double])).count))) {
                line = ((line + _p(Double(_idx(_idx(mat, i), j)))) as! String)
                if ((j &+ 1) < _int((((_idx(mat, i) as! [Double])).count))) {
                    line = ((line + " ") as! String)
                }
                j = _int((j &+ 1))
            }
            print(_p(line))
            i = _int((i &+ 1))
        }
    }
    let matrix: [[Double]] = ([([2.0, -2.0, 1.0] as! [Double]), ([0.0, 1.0, 2.0] as! [Double]), ([5.0, 3.0, 1.0] as! [Double])] as! [[Double]])
    let result = lu_decomposition((matrix as! [[Double]]))
    _ = print_matrix((result.lower as! [[Double]]))
    _ = print_matrix((result.upper as! [[Double]]))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
