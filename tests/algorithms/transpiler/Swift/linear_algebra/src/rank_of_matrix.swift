// Generated by Mochi transpiler v0.10.61 on 2025-08-08 16:01:14 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return nil
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func rank_of_matrix(_ matrix: inout [[Double]]) -> Int {
        let rows = _int(((matrix).count))
        if (rows == 0) {
            return 0
        }
        let columns = _int(((_int((((_idx(matrix, 0) as! [Double])).count)) > 0) ? _int((((_idx(matrix, 0) as! [Double])).count)) : 0))
        var rank: Int = _int(((rows < columns) ? rows : columns))
        var row: Int = 0
        while (row < rank) {
            if (Double(_idx(_idx(matrix, row), row)) != 0.0) {
                var col: Int = (row &+ 1)
                while (col < rows) {
                    let mult = (Double(_idx(_idx(matrix, col), row)) / Double(_idx(_idx(matrix, row), row)))
                    var i: Int = row
                    while (i < columns) {
                        _idx(_idx(matrix, col), i) = Double((Double(_idx(_idx(matrix, col), i)) - (mult * Double(_idx(_idx(matrix, row), i)))))
                        i = _int((i &+ 1))
                    }
                    col = _int((col &+ 1))
                }
            } else {
                var reduce: Bool = true
                var i: Int = (row &+ 1)
                while (i < rows) {
                    if (Double(_idx(_idx(matrix, i), row)) != 0.0) {
                        let temp: [Double] = (_idx(matrix, row) as! [Double])
                        matrix = _set(matrix, row, (_idx(matrix, i) as! [Double]))
                        matrix = _set(matrix, i, (temp as! [Double]))
                        reduce = false
                        break
                    }
                    i = _int((i &+ 1))
                }
                if reduce {
                    rank = _int((rank &- 1))
                    var j: Int = 0
                    while (j < rows) {
                        _idx(_idx(matrix, j), row) = Double(_idx(_idx(matrix, j), rank))
                        j = _int((j &+ 1))
                    }
                }
                row = _int((row &- 1))
            }
            row = _int((row &+ 1))
        }
        return rank
    }
    do {
        let matrix1: [[Double]] = ([([1.0, 2.0, 3.0] as! [Double]), ([4.0, 5.0, 6.0] as! [Double]), ([7.0, 8.0, 9.0] as! [Double])] as! [[Double]])
        assert((_int(rank_of_matrix(&matrix1)) == 2))
    }
    do {
        let matrix2: [[Double]] = ([([1.0, 0.0, 0.0] as! [Double]), ([0.0, 1.0, 0.0] as! [Double]), ([0.0, 0.0, 0.0] as! [Double])] as! [[Double]])
        assert((_int(rank_of_matrix(&matrix2)) == 2))
    }
    do {
        let matrix3: [[Double]] = ([([1.0, 2.0, 3.0, 4.0] as! [Double]), ([5.0, 6.0, 7.0, 8.0] as! [Double]), ([9.0, 10.0, 11.0, 12.0] as! [Double])] as! [[Double]])
        assert((_int(rank_of_matrix(&matrix3)) == 2))
    }
    do {
        let matrix4: [[Double]] = ([([2.0, 3.0, -1.0, -1.0] as! [Double]), ([1.0, -1.0, -2.0, 4.0] as! [Double]), ([3.0, 1.0, 3.0, -2.0] as! [Double]), ([6.0, 3.0, 0.0, -7.0] as! [Double])] as! [[Double]])
        assert((_int(rank_of_matrix(&matrix4)) == 4))
    }
    do {
        let matrix5: [[Double]] = ([([2.0, 1.0, -3.0, -6.0] as! [Double]), ([3.0, -3.0, 1.0, 2.0] as! [Double]), ([1.0, 1.0, 1.0, 2.0] as! [Double])] as! [[Double]])
        assert((_int(rank_of_matrix(&matrix5)) == 3))
    }
    do {
        let matrix6: [[Double]] = ([([2.0, -1.0, 0.0] as! [Double]), ([1.0, 3.0, 4.0] as! [Double]), ([4.0, 1.0, -3.0] as! [Double])] as! [[Double]])
        assert((_int(rank_of_matrix(&matrix6)) == 3))
    }
    do {
        let matrix7: [[Double]] = ([([3.0, 2.0, 1.0] as! [Double]), ([-6.0, -4.0, -2.0] as! [Double])] as! [[Double]])
        assert((_int(rank_of_matrix(&matrix7)) == 1))
    }
    do {
        let matrix8: [[Double]] = (([[], []] as! [[Any?]]) as! [[Double]])
        assert((_int(rank_of_matrix(&matrix8)) == 0))
    }
    do {
        let matrix9: [[Double]] = ([([1.0] as! [Double])] as! [[Double]])
        assert((_int(rank_of_matrix(&matrix9)) == 1))
    }
    do {
        let matrix10: [[Double]] = (([[]] as! [[Any?]]) as! [[Double]])
        assert((_int(rank_of_matrix(&matrix10)) == 0))
    }
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
