exit status 1
/tmp/TestSwiftTranspiler_Algorithms_Golden488_linear_algebra_src_lib1654277965/001/main.swift:163:58: warning: forced cast of 'String' to same type has no effect
161 |         var i: Int = 0
162 |         while (i < _int(((v.components).count))) {
163 |             s = ((s + _p(Double(_idx(v.components, i)))) as! String)
    |                                                          `- warning: forced cast of 'String' to same type has no effect
164 |             if (i < (_int(((v.components).count)) &- 1)) {
165 |                 s = ((s + ",") as! String)

/tmp/TestSwiftTranspiler_Algorithms_Golden488_linear_algebra_src_lib1654277965/001/main.swift:163:33: warning: expression implicitly coerced from 'Double?' to 'Any'
161 |         var i: Int = 0
162 |         while (i < _int(((v.components).count))) {
163 |             s = ((s + _p(Double(_idx(v.components, i)))) as! String)
    |                                 |- warning: expression implicitly coerced from 'Double?' to 'Any'
    |                                 |- note: provide a default value to avoid this warning
    |                                 |- note: force-unwrap the value to avoid this warning
    |                                 `- note: explicitly cast to 'Any' with 'as Any' to silence this warning
164 |             if (i < (_int(((v.components).count)) &- 1)) {
165 |                 s = ((s + ",") as! String)

/tmp/TestSwiftTranspiler_Algorithms_Golden488_linear_algebra_src_lib1654277965/001/main.swift:165:32: warning: forced cast of 'String' to same type has no effect
163 |             s = ((s + _p(Double(_idx(v.components, i)))) as! String)
164 |             if (i < (_int(((v.components).count)) &- 1)) {
165 |                 s = ((s + ",") as! String)
    |                                `- warning: forced cast of 'String' to same type has no effect
166 |             }
167 |             i = _int((i &+ 1))

/tmp/TestSwiftTranspiler_Algorithms_Golden488_linear_algebra_src_lib1654277965/001/main.swift:169:24: warning: forced cast of 'String' to same type has no effect
167 |             i = _int((i &+ 1))
168 |         }
169 |         s = ((s + ")") as! String)
    |                        `- warning: forced cast of 'String' to same type has no effect
170 |         return s
171 |     }

/tmp/TestSwiftTranspiler_Algorithms_Golden488_linear_algebra_src_lib1654277965/001/main.swift:173:39: warning: forced cast of 'Vector' to same type has no effect
171 |     }
172 |     func vector_add(_ a: Vector, _ b: Vector) -> Vector {
173 |         let size = _int(vector_len((a as! Vector)))
    |                                       `- warning: forced cast of 'Vector' to same type has no effect
174 |         if (size != _int(vector_len((b as! Vector)))) {
175 |             return Vector(components: [])

/tmp/TestSwiftTranspiler_Algorithms_Golden488_linear_algebra_src_lib1654277965/001/main.swift:174:40: warning: forced cast of 'Vector' to same type has no effect
172 |     func vector_add(_ a: Vector, _ b: Vector) -> Vector {
173 |         let size = _int(vector_len((a as! Vector)))
174 |         if (size != _int(vector_len((b as! Vector)))) {
    |                                        `- warning: forced cast of 'Vector' to same type has no effect
175 |             return Vector(components: [])
176 |         }

/tmp/TestSwiftTranspiler_Algorithms_Golden488_linear_algebra_src_lib1654277965/001/main.swift:180:41: warning: expression implicitly coerced from 'Double?' to 'Any'
178 |         var i: Int = 0
179 |         while (i < size) {
180 |             res = (_append(res, (Double(_idx(a.components, i)) + Double(_idx(b.components, i)))) as! [Double])
    |                                         |- warning: expression implicitly coerced from 'Double?' to 'Any'
    |                                         |- note: provide a default value to avoid this warning
    |                                         |- note: force-unwrap the value to avoid this warning
    |                                         `- note: explicitly cast to 'Any' with 'as Any' to silence this warning
181 |             i = _int((i &+ 1))
182 |         }

/tmp/TestSwiftTranspiler_Algorithms_Golden488_linear_algebra_src_lib1654277965/001/main.swift:180:73: warning: expression implicitly coerced from 'Double?' to 'Any'
178 |         var i: Int = 0
179 |         while (i < size) {
180 |             res = (_append(res, (Double(_idx(a.components, i)) + Double(_idx(b.components, i)))) as! [Double])
    |                                                                         |- warning: expression implicitly coerced from 'Double?' to 'Any'
    |                                                                         |- note: provide a default value to avoid this warning
    |                                                                         |- note: force-unwrap the value to avoid this warning
    |                                                                         `- note: explicitly cast to 'Any' with 'as Any' to silence this warning
181 |             i = _int((i &+ 1))
182 |         }

/tmp/TestSwiftTranspiler_Algorithms_Golden488_linear_algebra_src_lib1654277965/001/main.swift:186:39: warning: forced cast of 'Vector' to same type has no effect
184 |     }
185 |     func vector_sub(_ a: Vector, _ b: Vector) -> Vector {
186 |         let size = _int(vector_len((a as! Vector)))
    |                                       `- warning: forced cast of 'Vector' to same type has no effect
187 |         if (size != _int(vector_len((b as! Vector)))) {
188 |             return Vector(components: [])

/tmp/TestSwiftTranspiler_Algorithms_Golden488_linear_algebra_src_lib1654277965/001/main.swift:187:40: warning: forced cast of 'Vector' to same type has no effect
185 |     func vector_sub(_ a: Vector, _ b: Vector) -> Vector {
186 |         let size = _int(vector_len((a as! Vector)))
187 |         if (size != _int(vector_len((b as! Vector)))) {
    |                                        `- warning: forced cast of 'Vector' to same type has no effect
188 |             return Vector(components: [])
189 |         }

/tmp/TestSwiftTranspiler_Algorithms_Golden488_linear_algebra_src_lib1654277965/001/main.swift:193:41: warning: expression implicitly coerced from 'Double?' to 'Any'
191 |         var i: Int = 0
192 |         while (i < size) {
193 |             res = (_append(res, (Double(_idx(a.components, i)) - Double(_idx(b.components, i)))) as! [Double])
    |                                         |- warning: expression implicitly coerced from 'Double?' to 'Any'
    |                                         |- note: provide a default value to avoid this warning
    |                                         |- note: force-unwrap the value to avoid this warning
    |                                         `- note: explicitly cast to 'Any' with 'as Any' to silence this warning
194 |             i = _int((i &+ 1))
195 |         }

/tmp/TestSwiftTranspiler_Algorithms_Golden488_linear_algebra_src_lib1654277965/001/main.swift:193:73: warning: expression implicitly coerced from 'Double?' to 'Any'
191 |         var i: Int = 0
192 |         while (i < size) {
193 |             res = (_append(res, (Double(_idx(a.components, i)) - Double(_idx(b.components, i)))) as! [Double])
    |                                                                         |- warning: expression implicitly coerced from 'Double?' to 'Any'
    |                                                                         |- note: provide a default value to avoid this warning
    |                                                                         |- note: force-unwrap the value to avoid this warning
    |                                                                         `- note: explicitly cast to 'Any' with 'as Any' to silence this warning
194 |             i = _int((i &+ 1))
195 |         }

/tmp/TestSwiftTranspiler_Algorithms_Golden488_linear_algebra_src_lib1654277965/001/main.swift:199:32: warning: forced cast of 'Vector' to same type has no effect
197 |     }
198 |     func vector_eq(_ a: Vector, _ b: Vector) -> Bool {
199 |         if (_int(vector_len((a as! Vector))) != _int(vector_len((b as! Vector)))) {
    |                                `- warning: forced cast of 'Vector' to same type has no effect
200 |             return false
201 |         }

/tmp/TestSwiftTranspiler_Algorithms_Golden488_linear_algebra_src_lib1654277965/001/main.swift:199:68: warning: forced cast of 'Vector' to same type has no effect
197 |     }
198 |     func vector_eq(_ a: Vector, _ b: Vector) -> Bool {
199 |         if (_int(vector_len((a as! Vector))) != _int(vector_len((b as! Vector)))) {
    |                                                                    `- warning: forced cast of 'Vector' to same type has no effect
200 |             return false
201 |         }

/tmp/TestSwiftTranspiler_Algorithms_Golden488_linear_algebra_src_lib1654277965/001/main.swift:203:39: warning: forced cast of 'Vector' to same type has no effect
201 |         }
202 |         var i: Int = 0
203 |         while (i < _int(vector_len((a as! Vector)))) {
    |                                       `- warning: forced cast of 'Vector' to same type has no effect
204 |             if (Double(_idx(a.components, i)) != Double(_idx(b.components, i))) {
205 |                 return false

/tmp/TestSwiftTranspiler_Algorithms_Golden488_linear_algebra_src_lib1654277965/001/main.swift:204:24: warning: expression implicitly coerced from 'Double?' to 'Any'
202 |         var i: Int = 0
203 |         while (i < _int(vector_len((a as! Vector)))) {
204 |             if (Double(_idx(a.components, i)) != Double(_idx(b.components, i))) {
    |                        |- warning: expression implicitly coerced from 'Double?' to 'Any'
    |                        |- note: provide a default value to avoid this warning
    |                        |- note: force-unwrap the value to avoid this warning
    |                        `- note: explicitly cast to 'Any' with 'as Any' to silence this warning
205 |                 return false
206 |             }

/tmp/TestSwiftTranspiler_Algorithms_Golden488_linear_algebra_src_lib1654277965/001/main.swift:204:57: warning: expression implicitly coerced from 'Double?' to 'Any'
202 |         var i: Int = 0
203 |         while (i < _int(vector_len((a as! Vector)))) {
204 |             if (Double(_idx(a.components, i)) != Double(_idx(b.components, i))) {
    |                                                         |- warning: expression implicitly coerced from 'Double?' to 'Any'
    |                                                         |- note: provide a default value to avoid this warning
    |                                                         |- note: force-unwrap the value to avoid this warning
    |                                                         `- note: explicitly cast to 'Any' with 'as Any' to silence this warning
205 |                 return false
206 |             }

/tmp/TestSwiftTranspiler_Algorithms_Golden488_linear_algebra_src_lib1654277965/001/main.swift:214:39: warning: forced cast of 'Vector' to same type has no effect
212 |         var res: [Double] = ([] as! [Double])
213 |         var i: Int = 0
214 |         while (i < _int(vector_len((v as! Vector)))) {
    |                                       `- warning: forced cast of 'Vector' to same type has no effect
215 |             res = (_append(res, (Double(_idx(v.components, i)) * s)) as! [Double])
216 |             i = _int((i &+ 1))

/tmp/TestSwiftTranspiler_Algorithms_Golden488_linear_algebra_src_lib1654277965/001/main.swift:215:41: warning: expression implicitly coerced from 'Double?' to 'Any'
213 |         var i: Int = 0
214 |         while (i < _int(vector_len((v as! Vector)))) {
215 |             res = (_append(res, (Double(_idx(v.components, i)) * s)) as! [Double])
    |                                         |- warning: expression implicitly coerced from 'Double?' to 'Any'
    |                                         |- note: provide a default value to avoid this warning
    |                                         |- note: force-unwrap the value to avoid this warning
    |                                         `- note: explicitly cast to 'Any' with 'as Any' to silence this warning
216 |             i = _int((i &+ 1))
217 |         }

/tmp/TestSwiftTranspiler_Algorithms_Golden488_linear_algebra_src_lib1654277965/001/main.swift:221:39: warning: forced cast of 'Vector' to same type has no effect
219 |     }
220 |     func vector_dot(_ a: Vector, _ b: Vector) -> Double {
221 |         let size = _int(vector_len((a as! Vector)))
    |                                       `- warning: forced cast of 'Vector' to same type has no effect
222 |         if (size != _int(vector_len((b as! Vector)))) {
223 |             return 0.0

/tmp/TestSwiftTranspiler_Algorithms_Golden488_linear_algebra_src_lib1654277965/001/main.swift:222:40: warning: forced cast of 'Vector' to same type has no effect
220 |     func vector_dot(_ a: Vector, _ b: Vector) -> Double {
221 |         let size = _int(vector_len((a as! Vector)))
222 |         if (size != _int(vector_len((b as! Vector)))) {
    |                                        `- warning: forced cast of 'Vector' to same type has no effect
223 |             return 0.0
224 |         }

/tmp/TestSwiftTranspiler_Algorithms_Golden488_linear_algebra_src_lib1654277965/001/main.swift:228:41: warning: expression implicitly coerced from 'Double?' to 'Any'
226 |         var i: Int = 0
227 |         while (i < size) {
228 |             sum = Double((sum + (Double(_idx(a.components, i)) * Double(_idx(b.components, i)))))
    |                                         |- warning: expression implicitly coerced from 'Double?' to 'Any'
    |                                         |- note: provide a default value to avoid this warning
    |                                         |- note: force-unwrap the value to avoid this warning
    |                                         `- note: explicitly cast to 'Any' with 'as Any' to silence this warning
229 |             i = _int((i &+ 1))
230 |         }

/tmp/TestSwiftTranspiler_Algorithms_Golden488_linear_algebra_src_lib1654277965/001/main.swift:228:73: warning: expression implicitly coerced from 'Double?' to 'Any'
226 |         var i: Int = 0
227 |         while (i < size) {
228 |             sum = Double((sum + (Double(_idx(a.components, i)) * Double(_idx(b.components, i)))))
    |                                                                         |- warning: expression implicitly coerced from 'Double?' to 'Any'
    |                                                                         |- note: provide a default value to avoid this warning
    |                                                                         |- note: force-unwrap the value to avoid this warning
    |                                                                         `- note: explicitly cast to 'Any' with 'as Any' to silence this warning
229 |             i = _int((i &+ 1))
230 |         }

/tmp/TestSwiftTranspiler_Algorithms_Golden488_linear_algebra_src_lib1654277965/001/main.swift:236:39: warning: forced cast of 'Vector' to same type has no effect
234 |         var res: [Double] = ([] as! [Double])
235 |         var i: Int = 0
236 |         while (i < _int(vector_len((v as! Vector)))) {
    |                                       `- warning: forced cast of 'Vector' to same type has no effect
237 |             res = (_append(res, Double(_idx(v.components, i))) as! [Double])
238 |             i = _int((i &+ 1))

/tmp/TestSwiftTranspiler_Algorithms_Golden488_linear_algebra_src_lib1654277965/001/main.swift:237:40: warning: expression implicitly coerced from 'Double?' to 'Any'
235 |         var i: Int = 0
236 |         while (i < _int(vector_len((v as! Vector)))) {
237 |             res = (_append(res, Double(_idx(v.components, i))) as! [Double])
    |                                        |- warning: expression implicitly coerced from 'Double?' to 'Any'
    |                                        |- note: provide a default value to avoid this warning
    |                                        |- note: force-unwrap the value to avoid this warning
    |                                        `- note: explicitly cast to 'Any' with 'as Any' to silence this warning
238 |             i = _int((i &+ 1))
239 |         }

/tmp/TestSwiftTranspiler_Algorithms_Golden488_linear_algebra_src_lib1654277965/001/main.swift:243:23: warning: expression implicitly coerced from 'Double?' to 'Any'
241 |     }
242 |     func vector_component(_ v: Vector, _ idx: Int) -> Double {
243 |         return Double(_idx(v.components, idx))
    |                       |- warning: expression implicitly coerced from 'Double?' to 'Any'
    |                       |- note: provide a default value to avoid this warning
    |                       |- note: force-unwrap the value to avoid this warning
    |                       `- note: explicitly cast to 'Any' with 'as Any' to silence this warning
244 |     }
245 |     func vector_change_component(_ v: Vector, _ pos: Int, _ value: Double) -> Vector {

/tmp/TestSwiftTranspiler_Algorithms_Golden488_linear_algebra_src_lib1654277965/001/main.swift:254:41: warning: expression implicitly coerced from 'Double?' to 'Any'
252 |         var i: Int = 0
253 |         while (i < _int(((v.components).count))) {
254 |             sum = Double((sum + (Double(_idx(v.components, i)) * Double(_idx(v.components, i)))))
    |                                         |- warning: expression implicitly coerced from 'Double?' to 'Any'
    |                                         |- note: provide a default value to avoid this warning
    |                                         |- note: force-unwrap the value to avoid this warning
    |                                         `- note: explicitly cast to 'Any' with 'as Any' to silence this warning
255 |             i = _int((i &+ 1))
256 |         }

/tmp/TestSwiftTranspiler_Algorithms_Golden488_linear_algebra_src_lib1654277965/001/main.swift:254:73: warning: expression implicitly coerced from 'Double?' to 'Any'
252 |         var i: Int = 0
253 |         while (i < _int(((v.components).count))) {
254 |             sum = Double((sum + (Double(_idx(v.components, i)) * Double(_idx(v.components, i)))))
    |                                                                         |- warning: expression implicitly coerced from 'Double?' to 'Any'
    |                                                                         |- note: provide a default value to avoid this warning
    |                                                                         |- note: force-unwrap the value to avoid this warning
    |                                                                         `- note: explicitly cast to 'Any' with 'as Any' to silence this warning
255 |             i = _int((i &+ 1))
256 |         }

/tmp/TestSwiftTranspiler_Algorithms_Golden488_linear_algebra_src_lib1654277965/001/main.swift:261:40: warning: forced cast of 'Vector' to same type has no effect
259 |     }
260 |     func vector_angle(_ a: Vector, _ b: Vector, _ deg: Bool) -> Double {
261 |         let num = Double(vector_dot((a as! Vector), (b as! Vector)))
    |                                        `- warning: forced cast of 'Vector' to same type has no effect
262 |         let den = (Double(vector_euclidean_length((a as! Vector))) * Double(vector_euclidean_length((b as! Vector))))
263 |         var ang: Double = Double(acos_taylor(Double((num / den))))

/tmp/TestSwiftTranspiler_Algorithms_Golden488_linear_algebra_src_lib1654277965/001/main.swift:261:56: warning: forced cast of 'Vector' to same type has no effect
259 |     }
260 |     func vector_angle(_ a: Vector, _ b: Vector, _ deg: Bool) -> Double {
261 |         let num = Double(vector_dot((a as! Vector), (b as! Vector)))
    |                                                        `- warning: forced cast of 'Vector' to same type has no effect
262 |         let den = (Double(vector_euclidean_length((a as! Vector))) * Double(vector_euclidean_length((b as! Vector))))
263 |         var ang: Double = Double(acos_taylor(Double((num / den))))

/tmp/TestSwiftTranspiler_Algorithms_Golden488_linear_algebra_src_lib1654277965/001/main.swift:262:54: warning: forced cast of 'Vector' to same type has no effect
260 |     func vector_angle(_ a: Vector, _ b: Vector, _ deg: Bool) -> Double {
261 |         let num = Double(vector_dot((a as! Vector), (b as! Vector)))
262 |         let den = (Double(vector_euclidean_length((a as! Vector))) * Double(vector_euclidean_length((b as! Vector))))
    |                                                      `- warning: forced cast of 'Vector' to same type has no effect
263 |         var ang: Double = Double(acos_taylor(Double((num / den))))
264 |         if deg {

/tmp/TestSwiftTranspiler_Algorithms_Golden488_linear_algebra_src_lib1654277965/001/main.swift:262:104: warning: forced cast of 'Vector' to same type has no effect
260 |     func vector_angle(_ a: Vector, _ b: Vector, _ deg: Bool) -> Double {
261 |         let num = Double(vector_dot((a as! Vector), (b as! Vector)))
262 |         let den = (Double(vector_euclidean_length((a as! Vector))) * Double(vector_euclidean_length((b as! Vector))))
    |                                                                                                        `- warning: forced cast of 'Vector' to same type has no effect
263 |         var ang: Double = Double(acos_taylor(Double((num / den))))
264 |         if deg {

/tmp/TestSwiftTranspiler_Algorithms_Golden488_linear_algebra_src_lib1654277965/001/main.swift:292:49: warning: forced cast of 'Vector' to same type has no effect
290 |     }
291 |     func axpy(_ s: Double, _ x: Vector, _ y: Vector) -> Vector {
292 |         return vector_add((vector_mul_scalar((x as! Vector), Double(s)) as! Vector), (y as! Vector))
    |                                                 `- warning: forced cast of 'Vector' to same type has no effect
293 |     }
294 |     func random_vector(_ n: Int, _ a: Int, _ b: Int) -> Vector {

/tmp/TestSwiftTranspiler_Algorithms_Golden488_linear_algebra_src_lib1654277965/001/main.swift:292:73: warning: forced cast of 'Vector' to same type has no effect
290 |     }
291 |     func axpy(_ s: Double, _ x: Vector, _ y: Vector) -> Vector {
292 |         return vector_add((vector_mul_scalar((x as! Vector), Double(s)) as! Vector), (y as! Vector))
    |                                                                         `- warning: forced cast of 'Vector' to same type has no effect
293 |     }
294 |     func random_vector(_ n: Int, _ a: Int, _ b: Int) -> Vector {

/tmp/TestSwiftTranspiler_Algorithms_Golden488_linear_algebra_src_lib1654277965/001/main.swift:292:89: warning: forced cast of 'Vector' to same type has no effect
290 |     }
291 |     func axpy(_ s: Double, _ x: Vector, _ y: Vector) -> Vector {
292 |         return vector_add((vector_mul_scalar((x as! Vector), Double(s)) as! Vector), (y as! Vector))
    |                                                                                         `- warning: forced cast of 'Vector' to same type has no effect
293 |     }
294 |     func random_vector(_ n: Int, _ a: Int, _ b: Int) -> Vector {

/tmp/TestSwiftTranspiler_Algorithms_Golden488_linear_algebra_src_lib1654277965/001/main.swift:307:32: warning: forced cast of 'String' to same type has no effect
305 |         var i: Int = 0
306 |         while (i < m.height) {
307 |             ans = ((ans + "|") as! String)
    |                                `- warning: forced cast of 'String' to same type has no effect
308 |             var j: Int = 0
309 |             while (j < m.width) {

/tmp/TestSwiftTranspiler_Algorithms_Golden488_linear_algebra_src_lib1654277965/001/main.swift:310:46: error: cannot convert value of type '[Double]?' to expected argument type '[[Double]?]'
308 |             var j: Int = 0
309 |             while (j < m.width) {
310 |                 ans = ((ans + _p(Double(_idx(_idx(m.data, i), j)))) as! String)
    |                                              `- error: cannot convert value of type '[Double]?' to expected argument type '[[Double]?]'
311 |                 if (j < (m.width &- 1)) {
312 |                     ans = ((ans + ",") as! String)

/tmp/TestSwiftTranspiler_Algorithms_Golden488_linear_algebra_src_lib1654277965/001/main.swift:310:69: warning: forced cast of 'String' to same type has no effect
308 |             var j: Int = 0
309 |             while (j < m.width) {
310 |                 ans = ((ans + _p(Double(_idx(_idx(m.data, i), j)))) as! String)
    |                                                                     `- warning: forced cast of 'String' to same type has no effect
311 |                 if (j < (m.width &- 1)) {
312 |                     ans = ((ans + ",") as! String)

/tmp/TestSwiftTranspiler_Algorithms_Golden488_linear_algebra_src_lib1654277965/001/main.swift:312:40: warning: forced cast of 'String' to same type has no effect
310 |                 ans = ((ans + _p(Double(_idx(_idx(m.data, i), j)))) as! String)
311 |                 if (j < (m.width &- 1)) {
312 |                     ans = ((ans + ",") as! String)
    |                                        `- warning: forced cast of 'String' to same type has no effect
313 |                 }
314 |                 j = _int((j &+ 1))

/tmp/TestSwiftTranspiler_Algorithms_Golden488_linear_algebra_src_lib1654277965/001/main.swift:316:34: warning: forced cast of 'String' to same type has no effect
314 |                 j = _int((j &+ 1))
315 |             }
316 |             ans = ((ans + "|\n") as! String)
    |                                  `- warning: forced cast of 'String' to same type has no effect
317 |             i = _int((i &+ 1))
318 |         }

/tmp/TestSwiftTranspiler_Algorithms_Golden488_linear_algebra_src_lib1654277965/001/main.swift:331:50: error: cannot convert value of type '[Double]?' to expected argument type '[[Double]?]'
329 |             var j: Int = 0
330 |             while (j < a.width) {
331 |                 row = (_append(row, (Double(_idx(_idx(a.data, i), j)) + Double(_idx(_idx(b.data, i), j)))) as! [Double])
    |                                                  `- error: cannot convert value of type '[Double]?' to expected argument type '[[Double]?]'
332 |                 j = _int((j &+ 1))
333 |             }

/tmp/TestSwiftTranspiler_Algorithms_Golden488_linear_algebra_src_lib1654277965/001/main.swift:331:85: error: cannot convert value of type '[Double]?' to expected argument type '[[Double]?]'
329 |             var j: Int = 0
330 |             while (j < a.width) {
331 |                 row = (_append(row, (Double(_idx(_idx(a.data, i), j)) + Double(_idx(_idx(b.data, i), j)))) as! [Double])
    |                                                                                     `- error: cannot convert value of type '[Double]?' to expected argument type '[[Double]?]'
332 |                 j = _int((j &+ 1))
333 |             }

/tmp/TestSwiftTranspiler_Algorithms_Golden488_linear_algebra_src_lib1654277965/001/main.swift:349:50: error: cannot convert value of type '[Double]?' to expected argument type '[[Double]?]'
347 |             var j: Int = 0
348 |             while (j < a.width) {
349 |                 row = (_append(row, (Double(_idx(_idx(a.data, i), j)) - Double(_idx(_idx(b.data, i), j)))) as! [Double])
    |                                                  `- error: cannot convert value of type '[Double]?' to expected argument type '[[Double]?]'
350 |                 j = _int((j &+ 1))
351 |             }

/tmp/TestSwiftTranspiler_Algorithms_Golden488_linear_algebra_src_lib1654277965/001/main.swift:349:85: error: cannot convert value of type '[Double]?' to expected argument type '[[Double]?]'
347 |             var j: Int = 0
348 |             while (j < a.width) {
349 |                 row = (_append(row, (Double(_idx(_idx(a.data, i), j)) - Double(_idx(_idx(b.data, i), j)))) as! [Double])
    |                                                                                     `- error: cannot convert value of type '[Double]?' to expected argument type '[[Double]?]'
350 |                 j = _int((j &+ 1))
351 |             }

/tmp/TestSwiftTranspiler_Algorithms_Golden488_linear_algebra_src_lib1654277965/001/main.swift:367:50: error: cannot convert value of type '[Double]?' to expected argument type '[[Double]?]'
365 |             var j: Int = 0
366 |             while (j < m.width) {
367 |                 sum = Double((sum + (Double(_idx(_idx(m.data, i), j)) * Double(_idx(v.components, j)))))
    |                                                  `- error: cannot convert value of type '[Double]?' to expected argument type '[[Double]?]'
368 |                 j = _int((j &+ 1))
369 |             }

/tmp/TestSwiftTranspiler_Algorithms_Golden488_linear_algebra_src_lib1654277965/001/main.swift:370:49: warning: forced cast of 'Vector' to same type has no effect
368 |                 j = _int((j &+ 1))
369 |             }
370 |             res = (vector_change_component((res as! Vector), i, Double(sum)) as! Vector)
    |                                                 `- warning: forced cast of 'Vector' to same type has no effect
371 |             i = _int((i &+ 1))
372 |         }

/tmp/TestSwiftTranspiler_Algorithms_Golden488_linear_algebra_src_lib1654277965/001/main.swift:370:78: warning: forced cast of 'Vector' to same type has no effect
368 |                 j = _int((j &+ 1))
369 |             }
370 |             res = (vector_change_component((res as! Vector), i, Double(sum)) as! Vector)
    |                                                                              `- warning: forced cast of 'Vector' to same type has no effect
371 |             i = _int((i &+ 1))
372 |         }

/tmp/TestSwiftTranspiler_Algorithms_Golden488_linear_algebra_src_lib1654277965/001/main.swift:382:50: error: cannot convert value of type '[Double]?' to expected argument type '[[Double]?]'
380 |             var j: Int = 0
381 |             while (j < m.width) {
382 |                 row = (_append(row, (Double(_idx(_idx(m.data, i), j)) * s)) as! [Double])
    |                                                  `- error: cannot convert value of type '[Double]?' to expected argument type '[[Double]?]'
383 |                 j = _int((j &+ 1))
384 |             }

/tmp/TestSwiftTranspiler_Algorithms_Golden488_linear_algebra_src_lib1654277965/001/main.swift:391:28: error: cannot convert value of type '[Double]?' to expected argument type '[[Double]?]'
389 |     }
390 |     func matrix_component(_ m: Matrix, _ x: Int, _ y: Int) -> Double {
391 |         return Double(_idx(_idx(m.data, x), y))
    |                            `- error: cannot convert value of type '[Double]?' to expected argument type '[[Double]?]'
392 |     }
393 |     func matrix_change_component(_ m: Matrix, _ x: Int, _ y: Int, _ value: Double) -> Matrix {

/tmp/TestSwiftTranspiler_Algorithms_Golden488_linear_algebra_src_lib1654277965/001/main.swift:395:14: error: cannot convert value of type '[Double]?' to expected argument type '[[Double]?]'
393 |     func matrix_change_component(_ m: Matrix, _ x: Int, _ y: Int, _ value: Double) -> Matrix {
394 |         var data: [[Double]] = m.data
395 |         _idx(_idx(data, x), y) = Double(value)
    |              `- error: cannot convert value of type '[Double]?' to expected argument type '[[Double]?]'
396 |         return Matrix(data: data, width: m.width, height: m.height)
397 |     }

/tmp/TestSwiftTranspiler_Algorithms_Golden488_linear_algebra_src_lib1654277965/001/main.swift:395:34: error: cannot assign value of type 'Double' to type '[Double]?'
393 |     func matrix_change_component(_ m: Matrix, _ x: Int, _ y: Int, _ value: Double) -> Matrix {
394 |         var data: [[Double]] = m.data
395 |         _idx(_idx(data, x), y) = Double(value)
    |                                  `- error: cannot assign value of type 'Double' to type '[Double]?'
396 |         return Matrix(data: data, width: m.width, height: m.height)
397 |     }

/tmp/TestSwiftTranspiler_Algorithms_Golden488_linear_algebra_src_lib1654277965/001/main.swift:410:57: error: cannot convert value of type '[Double]?' to expected argument type '[[Double]?]'
408 |                 while (j < m.width) {
409 |                     if (j != y) {
410 |                         row = (_append(row, Double(_idx(_idx(m.data, i), j))) as! [Double])
    |                                                         `- error: cannot convert value of type '[Double]?' to expected argument type '[[Double]?]'
411 |                     }
412 |                     j = _int((j &+ 1))

/tmp/TestSwiftTranspiler_Algorithms_Golden488_linear_algebra_src_lib1654277965/001/main.swift:419:47: warning: forced cast of 'Matrix' to same type has no effect
417 |         }
418 |         let sub = Matrix(data: minor, width: (m.width &- 1), height: (m.height &- 1))
419 |         return Double(matrix_determinant((sub as! Matrix)))
    |                                               `- warning: forced cast of 'Matrix' to same type has no effect
420 |     }
421 |     func matrix_cofactor(_ m: Matrix, _ x: Int, _ y: Int) -> Double {

/tmp/TestSwiftTranspiler_Algorithms_Golden488_linear_algebra_src_lib1654277965/001/main.swift:423:47: warning: forced cast of 'Matrix' to same type has no effect
421 |     func matrix_cofactor(_ m: Matrix, _ x: Int, _ y: Int) -> Double {
422 |         let sign = Double(((((_int((x &+ y)) % 2 + 2) % 2) == 0) ? 1.0 : -1.0))
423 |         return (sign * Double(matrix_minor((m as! Matrix), x, y)))
    |                                               `- warning: forced cast of 'Matrix' to same type has no effect
424 |     }
425 |     func matrix_determinant(_ m: Matrix) -> Double {

/tmp/TestSwiftTranspiler_Algorithms_Golden488_linear_algebra_src_lib1654277965/001/main.swift:433:32: error: cannot convert value of type '[Double]?' to expected argument type '[[Double]?]'
431 |         }
432 |         if (m.height == 1) {
433 |             return Double(_idx(_idx(m.data, 0), 0))
    |                                `- error: cannot convert value of type '[Double]?' to expected argument type '[[Double]?]'
434 |         }
435 |         if (m.height == 2) {

/tmp/TestSwiftTranspiler_Algorithms_Golden488_linear_algebra_src_lib1654277965/001/main.swift:436:34: error: cannot convert value of type '[Double]?' to expected argument type '[[Double]?]'
434 |         }
435 |         if (m.height == 2) {
436 |             return ((Double(_idx(_idx(m.data, 0), 0)) * Double(_idx(_idx(m.data, 1), 1))) - (Double(_idx(_idx(m.data, 0), 1)) * Double(_idx(_idx(m.data, 1), 0))))
    |                                  `- error: cannot convert value of type '[Double]?' to expected argument type '[[Double]?]'
437 |         }
438 |         var sum: Double = 0.0

/tmp/TestSwiftTranspiler_Algorithms_Golden488_linear_algebra_src_lib1654277965/001/main.swift:436:69: error: cannot convert value of type '[Double]?' to expected argument type '[[Double]?]'
434 |         }
435 |         if (m.height == 2) {
436 |             return ((Double(_idx(_idx(m.data, 0), 0)) * Double(_idx(_idx(m.data, 1), 1))) - (Double(_idx(_idx(m.data, 0), 1)) * Double(_idx(_idx(m.data, 1), 0))))
    |                                                                     `- error: cannot convert value of type '[Double]?' to expected argument type '[[Double]?]'
437 |         }
438 |         var sum: Double = 0.0

/tmp/TestSwiftTranspiler_Algorithms_Golden488_linear_algebra_src_lib1654277965/001/main.swift:436:106: error: cannot convert value of type '[Double]?' to expected argument type '[[Double]?]'
434 |         }
435 |         if (m.height == 2) {
436 |             return ((Double(_idx(_idx(m.data, 0), 0)) * Double(_idx(_idx(m.data, 1), 1))) - (Double(_idx(_idx(m.data, 0), 1)) * Double(_idx(_idx(m.data, 1), 0))))
    |                                                                                                          `- error: cannot convert value of type '[Double]?' to expected argument type '[[Double]?]'
437 |         }
438 |         var sum: Double = 0.0

/tmp/TestSwiftTranspiler_Algorithms_Golden488_linear_algebra_src_lib1654277965/001/main.swift:436:141: error: cannot convert value of type '[Double]?' to expected argument type '[[Double]?]'
434 |         }
435 |         if (m.height == 2) {
436 |             return ((Double(_idx(_idx(m.data, 0), 0)) * Double(_idx(_idx(m.data, 1), 1))) - (Double(_idx(_idx(m.data, 0), 1)) * Double(_idx(_idx(m.data, 1), 0))))
    |                                                                                                                                             `- error: cannot convert value of type '[Double]?' to expected argument type '[[Double]?]'
437 |         }
438 |         var sum: Double = 0.0

/tmp/TestSwiftTranspiler_Algorithms_Golden488_linear_algebra_src_lib1654277965/001/main.swift:441:46: error: cannot convert value of type '[Double]?' to expected argument type '[[Double]?]'
439 |         var y: Int = 0
440 |         while (y < m.width) {
441 |             sum = Double((sum + (Double(_idx(_idx(m.data, 0), y)) * Double(matrix_cofactor((m as! Matrix), 0, y)))))
    |                                              `- error: cannot convert value of type '[Double]?' to expected argument type '[[Double]?]'
442 |             y = _int((y &+ 1))
443 |         }

/tmp/TestSwiftTranspiler_Algorithms_Golden488_linear_algebra_src_lib1654277965/001/main.swift:441:95: warning: forced cast of 'Matrix' to same type has no effect
439 |         var y: Int = 0
440 |         while (y < m.width) {
441 |             sum = Double((sum + (Double(_idx(_idx(m.data, 0), y)) * Double(matrix_cofactor((m as! Matrix), 0, y)))))
    |                                                                                               `- warning: forced cast of 'Matrix' to same type has no effect
442 |             y = _int((y &+ 1))
443 |         }

/tmp/TestSwiftTranspiler_Algorithms_Golden488_linear_algebra_src_lib1654277965/001/main.swift:479:70: warning: forced cast of 'Vector' to same type has no effect
477 |         let v1 = Vector(components: ([1.0, 2.0, 3.0] as! [Double]))
478 |         let v2 = Vector(components: ([4.0, 5.0, 6.0] as! [Double]))
479 |         print(_p(String(describing: vector_to_string((vector_add((v1 as! Vector), (v2 as! Vector)) as! Vector)))))
    |                                                                      `- warning: forced cast of 'Vector' to same type has no effect
480 |         print(_p(_p(Double(vector_dot((v1 as! Vector), (v2 as! Vector))))))
481 |         print(_p(_p(Double(vector_euclidean_length((v1 as! Vector))))))

/tmp/TestSwiftTranspiler_Algorithms_Golden488_linear_algebra_src_lib1654277965/001/main.swift:479:87: warning: forced cast of 'Vector' to same type has no effect
477 |         let v1 = Vector(components: ([1.0, 2.0, 3.0] as! [Double]))
478 |         let v2 = Vector(components: ([4.0, 5.0, 6.0] as! [Double]))
479 |         print(_p(String(describing: vector_to_string((vector_add((v1 as! Vector), (v2 as! Vector)) as! Vector)))))
    |                                                                                       `- warning: forced cast of 'Vector' to same type has no effect
480 |         print(_p(_p(Double(vector_dot((v1 as! Vector), (v2 as! Vector))))))
481 |         print(_p(_p(Double(vector_euclidean_length((v1 as! Vector))))))

/tmp/TestSwiftTranspiler_Algorithms_Golden488_linear_algebra_src_lib1654277965/001/main.swift:479:100: warning: forced cast of 'Vector' to same type has no effect
477 |         let v1 = Vector(components: ([1.0, 2.0, 3.0] as! [Double]))
478 |         let v2 = Vector(components: ([4.0, 5.0, 6.0] as! [Double]))
479 |         print(_p(String(describing: vector_to_string((vector_add((v1 as! Vector), (v2 as! Vector)) as! Vector)))))
    |                                                                                                    `- warning: forced cast of 'Vector' to same type has no effect
480 |         print(_p(_p(Double(vector_dot((v1 as! Vector), (v2 as! Vector))))))
481 |         print(_p(_p(Double(vector_euclidean_length((v1 as! Vector))))))

/tmp/TestSwiftTranspiler_Algorithms_Golden488_linear_algebra_src_lib1654277965/001/main.swift:480:43: warning: forced cast of 'Vector' to same type has no effect
478 |         let v2 = Vector(components: ([4.0, 5.0, 6.0] as! [Double]))
479 |         print(_p(String(describing: vector_to_string((vector_add((v1 as! Vector), (v2 as! Vector)) as! Vector)))))
480 |         print(_p(_p(Double(vector_dot((v1 as! Vector), (v2 as! Vector))))))
    |                                           `- warning: forced cast of 'Vector' to same type has no effect
481 |         print(_p(_p(Double(vector_euclidean_length((v1 as! Vector))))))
482 |         let m = Matrix(data: ([([1.0, 2.0] as! [Double]), ([3.0, 4.0] as! [Double])] as! [[Double]]), width: 2, height: 2)

/tmp/TestSwiftTranspiler_Algorithms_Golden488_linear_algebra_src_lib1654277965/001/main.swift:480:60: warning: forced cast of 'Vector' to same type has no effect
478 |         let v2 = Vector(components: ([4.0, 5.0, 6.0] as! [Double]))
479 |         print(_p(String(describing: vector_to_string((vector_add((v1 as! Vector), (v2 as! Vector)) as! Vector)))))
480 |         print(_p(_p(Double(vector_dot((v1 as! Vector), (v2 as! Vector))))))
    |                                                            `- warning: forced cast of 'Vector' to same type has no effect
481 |         print(_p(_p(Double(vector_euclidean_length((v1 as! Vector))))))
482 |         let m = Matrix(data: ([([1.0, 2.0] as! [Double]), ([3.0, 4.0] as! [Double])] as! [[Double]]), width: 2, height: 2)

/tmp/TestSwiftTranspiler_Algorithms_Golden488_linear_algebra_src_lib1654277965/001/main.swift:481:56: warning: forced cast of 'Vector' to same type has no effect
479 |         print(_p(String(describing: vector_to_string((vector_add((v1 as! Vector), (v2 as! Vector)) as! Vector)))))
480 |         print(_p(_p(Double(vector_dot((v1 as! Vector), (v2 as! Vector))))))
481 |         print(_p(_p(Double(vector_euclidean_length((v1 as! Vector))))))
    |                                                        `- warning: forced cast of 'Vector' to same type has no effect
482 |         let m = Matrix(data: ([([1.0, 2.0] as! [Double]), ([3.0, 4.0] as! [Double])] as! [[Double]]), width: 2, height: 2)
483 |         print(_p(_p(Double(matrix_determinant((m as! Matrix))))))

/tmp/TestSwiftTranspiler_Algorithms_Golden488_linear_algebra_src_lib1654277965/001/main.swift:483:50: warning: forced cast of 'Matrix' to same type has no effect
481 |         print(_p(_p(Double(vector_euclidean_length((v1 as! Vector))))))
482 |         let m = Matrix(data: ([([1.0, 2.0] as! [Double]), ([3.0, 4.0] as! [Double])] as! [[Double]]), width: 2, height: 2)
483 |         print(_p(_p(Double(matrix_determinant((m as! Matrix))))))
    |                                                  `- warning: forced cast of 'Matrix' to same type has no effect
484 |     }
485 |     _ = main()

/tmp/TestSwiftTranspiler_Algorithms_Golden488_linear_algebra_src_lib1654277965/001/main.swift:485:5: warning: using '_' to ignore the result of a Void-returning function is redundant
483 |         print(_p(_p(Double(matrix_determinant((m as! Matrix))))))
484 |     }
485 |     _ = main()
    |     `- warning: using '_' to ignore the result of a Void-returning function is redundant
486 |     let _benchEnd = _now()
487 |     let _benchMemEnd = _mem()
