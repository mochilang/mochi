// Generated by Mochi transpiler v0.10.62 on 2025-08-09 10:32:43 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func zeros(_ n: Int) -> [Double] {
        var res: [Double] = ([] as! [Double])
        var i = 0
        while (i < n) {
            res = (_append(res, 0.0) as! [Double])
            i = _int((i &+ 1))
        }
        return res
    }
    func dot(_ a: [Double], _ b: [Double]) -> Double {
        var sum = 0.0
        var i = 0
        while (i < _int(((a).count))) {
            sum = Double((sum + (Double(_idx(a, i)) * Double(_idx(b, i)))))
            i = _int((i &+ 1))
        }
        return sum
    }
    func mat_vec_mul(_ m: [[Double]], _ v: [Double]) -> [Double] {
        var res: [Double] = ([] as! [Double])
        var i = 0
        while (i < _int(((m).count))) {
            var s = 0.0
            var j = 0
            while (j < _int((((_idx(m, i) as! [Double])).count))) {
                s = Double((s + (Double(_idx(_idx(m, i)!, j)) * Double(_idx(v, j)))))
                j = _int((j &+ 1))
            }
            res = (_append(res, s) as! [Double])
            i = _int((i &+ 1))
        }
        return res
    }
    func vec_add(_ a: [Double], _ b: [Double]) -> [Double] {
        var res: [Double] = ([] as! [Double])
        var i = 0
        while (i < _int(((a).count))) {
            res = (_append(res, (Double(_idx(a, i)) + Double(_idx(b, i)))) as! [Double])
            i = _int((i &+ 1))
        }
        return res
    }
    func vec_sub(_ a: [Double], _ b: [Double]) -> [Double] {
        var res: [Double] = ([] as! [Double])
        var i = 0
        while (i < _int(((a).count))) {
            res = (_append(res, (Double(_idx(a, i)) - Double(_idx(b, i)))) as! [Double])
            i = _int((i &+ 1))
        }
        return res
    }
    func scalar_mul(_ s: Double, _ v: [Double]) -> [Double] {
        var res: [Double] = ([] as! [Double])
        var i = 0
        while (i < _int(((v).count))) {
            res = (_append(res, (s * Double(_idx(v, i)))) as! [Double])
            i = _int((i &+ 1))
        }
        return res
    }
    func sqrtApprox(_ x: Double) -> Double {
        if (x <= 0.0) {
            return 0.0
        }
        var guess = x
        var i = 0
        while (i < 20) {
            guess = Double((Double((guess + (x / guess))) / 2.0))
            i = _int((i &+ 1))
        }
        return guess
    }
    func norm(_ v: [Double]) -> Double {
        return Double(sqrtApprox(Double(dot((v as! [Double]), (v as! [Double])))))
    }
    func conjugate_gradient(_ A: [[Double]], _ b: [Double], _ max_iterations: Int, _ tol: Double) -> [Double] {
        let n = _int(((b).count))
        var x = (zeros(n) as! [Double])
        var r = (vec_sub((b as! [Double]), (mat_vec_mul((A as! [[Double]]), (x as! [Double])) as! [Double])) as! [Double])
        var p = r
        var rs_old = Double(dot((r as! [Double]), (r as! [Double])))
        var i = 0
        while (i < max_iterations) {
            let Ap: [Double] = (mat_vec_mul((A as! [[Double]]), (p as! [Double])) as! [Double])
            let alpha = (rs_old / Double(dot((p as! [Double]), (Ap as! [Double]))))
            x = (vec_add((x as! [Double]), (scalar_mul(Double(alpha), (p as! [Double])) as! [Double])) as! [Double])
            r = (vec_sub((r as! [Double]), (scalar_mul(Double(alpha), (Ap as! [Double])) as! [Double])) as! [Double])
            let rs_new = Double(dot((r as! [Double]), (r as! [Double])))
            if (Double(sqrtApprox(Double(rs_new))) < tol) {
                break
            }
            let beta = (rs_new / rs_old)
            p = (vec_add((r as! [Double]), (scalar_mul(Double(beta), (p as! [Double])) as! [Double])) as! [Double])
            rs_old = Double(rs_new)
            i = _int((i &+ 1))
        }
        return x
    }
    let A: [[Double]] = ({
        var _arr: [[Double]] = []
        _arr = _append(_arr, ({
            var _arr: [Double] = []
            _arr = _append(_arr, 8.73256573)
            _arr = _append(_arr, -5.02034289)
            _arr = _append(_arr, -2.68709226)
            return _arr
        }() as! [Double]))
        _arr = _append(_arr, ({
            var _arr: [Double] = []
            _arr = _append(_arr, -5.02034289)
            _arr = _append(_arr, 3.78188322)
            _arr = _append(_arr, 0.91980451)
            return _arr
        }() as! [Double]))
        _arr = _append(_arr, ({
            var _arr: [Double] = []
            _arr = _append(_arr, -2.68709226)
            _arr = _append(_arr, 0.91980451)
            _arr = _append(_arr, 1.94746467)
            return _arr
        }() as! [Double]))
        return _arr
    }() as! [[Double]])
    let b: [Double] = ({
        var _arr: [Double] = []
        _arr = _append(_arr, -5.80872761)
        _arr = _append(_arr, 3.23807431)
        _arr = _append(_arr, 1.95381422)
        return _arr
    }() as! [Double])
    var x: [Double] = (conjugate_gradient((A as! [[Double]]), (b as! [Double]), 1000, 0.00000001) as! [Double])
    print(_p(_p(Double(_idx(x, 0)))))
    print(_p(_p(Double(_idx(x, 1)))))
    print(_p(_p(Double(_idx(x, 2)))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
