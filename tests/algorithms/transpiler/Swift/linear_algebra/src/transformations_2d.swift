// Generated by Mochi transpiler v0.10.61 on 2025-08-08 16:01:21 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return nil
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let PI: Double = 3.141592653589793
    func floor(_ x: Double) -> Double {
        var i: Int = Int(x)
        if (Double(i) > x) {
            i = _int((i &- 1))
        }
        return Double(i)
    }
    func modf(_ x: Double, _ m: Double) -> Double {
        return (x - (Double(floor(Double((x / m)))) * m))
    }
    func sin_taylor(_ angle: Double) -> Double {
        var x: Double = Double(modf(Double(angle), Double((2.0 * PI))))
        if (x > PI) {
            x = Double((x - (2.0 * PI)))
        }
        var term: Double = x
        var sum: Double = x
        var i: Int = 1
        while (i < 10) {
            let k1 = (2.0 * Double(i))
            let k2 = (k1 + 1.0)
            term = Double((((-term * x) * x) / Double((k1 * k2))))
            sum = Double((sum + term))
            i = _int((i &+ 1))
        }
        return sum
    }
    func cos_taylor(_ angle: Double) -> Double {
        var x: Double = Double(modf(Double(angle), Double((2.0 * PI))))
        if (x > PI) {
            x = Double((x - (2.0 * PI)))
        }
        var term: Double = 1.0
        var sum: Double = 1.0
        var i: Int = 1
        while (i < 10) {
            let k1 = ((2.0 * Double(i)) - 1.0)
            let k2 = (2.0 * Double(i))
            term = Double((((-term * x) * x) / Double((k1 * k2))))
            sum = Double((sum + term))
            i = _int((i &+ 1))
        }
        return sum
    }
    func matrix_to_string(_ m: [[Double]]) -> String {
        var s: String = "["
        var i: Int = 0
        while (i < _int(((m).count))) {
            var row: [Double] = (_idx(m, i) as! [Double])
            s = ((s + "[") as! String)
            var j: Int = 0
            while (j < _int(((row).count))) {
                s = ((s + _p(Double(_idx(row, j)))) as! String)
                if (j < (_int(((row).count)) &- 1)) {
                    s = ((s + ", ") as! String)
                }
                j = _int((j &+ 1))
            }
            s = ((s + "]") as! String)
            if (i < (_int(((m).count)) &- 1)) {
                s = ((s + ", ") as! String)
            }
            i = _int((i &+ 1))
        }
        s = ((s + "]") as! String)
        return s
    }
    func scaling(_ f: Double) -> [[Double]] {
        return ([([f, 0.0] as! [Double]), ([0.0, f] as! [Double])] as! [[Double]])
    }
    func rotation(_ angle: Double) -> [[Double]] {
        let c = Double(cos_taylor(Double(angle)))
        let s = Double(sin_taylor(Double(angle)))
        return ([([c, -s] as! [Double]), ([s, c] as! [Double])] as! [[Double]])
    }
    func projection(_ angle: Double) -> [[Double]] {
        let c = Double(cos_taylor(Double(angle)))
        let s = Double(sin_taylor(Double(angle)))
        let cs = (c * s)
        return ([([(c * c), cs] as! [Double]), ([cs, (s * s)] as! [Double])] as! [[Double]])
    }
    func reflection(_ angle: Double) -> [[Double]] {
        let c = Double(cos_taylor(Double(angle)))
        let s = Double(sin_taylor(Double(angle)))
        let cs = (c * s)
        return ([([((2.0 * c) - 1.0), (2.0 * cs)] as! [Double]), ([(2.0 * cs), ((2.0 * s) - 1.0)] as! [Double])] as! [[Double]])
    }
    print(_p(("    scaling(5) = " + String(describing: matrix_to_string((scaling(5.0) as! [[Double]]))))))
    print(_p(("  rotation(45) = " + String(describing: matrix_to_string((rotation(45.0) as! [[Double]]))))))
    print(_p(("projection(45) = " + String(describing: matrix_to_string((projection(45.0) as! [[Double]]))))))
    print(_p(("reflection(45) = " + String(describing: matrix_to_string((reflection(45.0) as! [[Double]]))))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
