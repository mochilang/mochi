// Generated by Mochi transpiler v0.10.62 on 2025-08-09 16:37:23 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func int_to_string(_ n: Int) -> String {
        if (n == 0) {
            return "0"
        }
        var num = n
        var neg = false
        if (num < 0) {
            neg = true
            num = _int(-num)
        }
        var res = ""
        while (num > 0) {
            let digit = ((num % 10 + 10) % 10)
            let ch = String(describing: String(Array(String(describing: "0123456789"))[digit..<(digit &+ 1)]))
            res = ((ch + res) as! String)
            num = _int((num / 10))
        }
        if neg {
            res = (("-" + res) as! String)
        }
        return res
    }
    func float_to_string(_ x: Double, _ dec: Int) -> String {
        var neg = false
        var num = x
        if (num < 0.0) {
            neg = true
            num = Double(-num)
        }
        let int_part = Int(num)
        var res = String(describing: int_to_string(int_part))
        if (dec > 0) {
            res = ((res + ".") as! String)
            var frac = (num - Double(int_part))
            var i = 0
            while (i < dec) {
                frac = Double((frac * 10.0))
                let digit = Int(frac)
                res = ((res + String(describing: String(Array(String(describing: "0123456789"))[digit..<(digit &+ 1)]))) as! String)
                frac = Double((frac - Double(digit)))
                i = _int((i &+ 1))
            }
        }
        if neg {
            res = (("-" + res) as! String)
        }
        return res
    }
    func vector_component(_ v: [Int], _ i: Int) -> Int {
        return (_idx(v, i) as? Int ?? 0)
    }
    func vector_str_int(_ v: [Int]) -> String {
        var s = "("
        var i = 0
        while (i < _int(((v).count))) {
            s = ((s + String(describing: int_to_string((_idx(v, i) as? Int ?? 0)))) as! String)
            if ((i &+ 1) < _int(((v).count))) {
                s = ((s + ",") as! String)
            }
            i = _int((i &+ 1))
        }
        s = ((s + ")") as! String)
        return s
    }
    func vector_str_float(_ v: [Double], _ dec: Int) -> String {
        var s = "("
        var i = 0
        while (i < _int(((v).count))) {
            s = ((s + String(describing: float_to_string(Double(_idx(v, i)), dec))) as! String)
            if ((i &+ 1) < _int(((v).count))) {
                s = ((s + ",") as! String)
            }
            i = _int((i &+ 1))
        }
        s = ((s + ")") as! String)
        return s
    }
    func vector_add(_ a: [Int], _ b: [Int]) -> [Int] {
        var res: [Int] = ([] as! [Int])
        var i = 0
        while (i < _int(((a).count))) {
            res = (_append(res, ((_idx(a, i) as? Int ?? 0) &+ (_idx(b, i) as? Int ?? 0))) as! [Int])
            i = _int((i &+ 1))
        }
        return res
    }
    func vector_sub(_ a: [Int], _ b: [Int]) -> [Int] {
        var res: [Int] = ([] as! [Int])
        var i = 0
        while (i < _int(((a).count))) {
            res = (_append(res, ((_idx(a, i) as? Int ?? 0) &- (_idx(b, i) as? Int ?? 0))) as! [Int])
            i = _int((i &+ 1))
        }
        return res
    }
    func vector_scalar_mul(_ v: [Int], _ s: Double) -> [Double] {
        var res: [Double] = ([] as! [Double])
        var i = 0
        while (i < _int(((v).count))) {
            res = (_append(res, (Double(_idx(v, i)) * s)) as! [Double])
            i = _int((i &+ 1))
        }
        return res
    }
    func vector_dot(_ a: [Int], _ b: [Int]) -> Int {
        var sum = 0
        var i = 0
        while (i < _int(((a).count))) {
            sum = _int((sum &+ ((_idx(a, i) as? Int ?? 0) &* (_idx(b, i) as? Int ?? 0))))
            i = _int((i &+ 1))
        }
        return sum
    }
    func sqrt_newton(_ x: Double) -> Double {
        if (x == 0.0) {
            return 0.0
        }
        var low = 0.0
        var high = x
        if (x < 1.0) {
            high = 1.0
        }
        var mid = 0.0
        var i = 0
        while (i < 40) {
            mid = Double((Double((low + high)) / 2.0))
            if ((mid * mid) > x) {
                high = Double(mid)
            } else {
                low = Double(mid)
            }
            i = _int((i &+ 1))
        }
        return mid
    }
    func euclidean_length(_ v: [Int]) -> Double {
        var sum = 0.0
        var i = 0
        while (i < _int(((v).count))) {
            let val = Double(_idx(v, i))
            sum = Double((sum + (val * val)))
            i = _int((i &+ 1))
        }
        return Double(sqrt_newton(Double(sum)))
    }
    func zero_vector(_ n: Int) -> [Int] {
        var v: [Int] = ([] as! [Int])
        var i = 0
        while (i < n) {
            v = (_append(v, 0) as! [Int])
            i = _int((i &+ 1))
        }
        return v
    }
    func unit_basis_vector(_ n: Int, _ idx: Int) -> [Int] {
        var v = (zero_vector(n) as! [Int])
        v = _set(v, idx, 1)
        return v
    }
    func axpy(_ a: Int, _ x: [Int], _ y: [Int]) -> [Int] {
        var res: [Int] = ([] as! [Int])
        var i = 0
        while (i < _int(((x).count))) {
            res = (_append(res, ((a &* (_idx(x, i) as? Int ?? 0)) &+ (_idx(y, i) as? Int ?? 0))) as! [Int])
            i = _int((i &+ 1))
        }
        return res
    }
    func copy_vector(_ x: [Int]) -> [Int] {
        var res: [Int] = ([] as! [Int])
        var i = 0
        while (i < _int(((x).count))) {
            res = (_append(res, (_idx(x, i) as? Int ?? 0)) as! [Int])
            i = _int((i &+ 1))
        }
        return res
    }
    func change_component(_ v: [Int], _ idx: Int, _ val: Int) {
        var v = v
        v = _set(v, idx, Int(val))
    }
    func matrix_str(_ m: [[Int]]) -> String {
        var s = ""
        var i = 0
        while (i < _int(((m).count))) {
            s = ((s + "|") as! String)
            var j = 0
            while (j < _int((((_idx(m, 0) as! [Int])).count))) {
                s = ((s + String(describing: int_to_string((_idx(_idx(m, i)!, j) as? Int ?? 0)))) as! String)
                if ((j &+ 1) < _int((((_idx(m, 0) as! [Int])).count))) {
                    s = ((s + ",") as! String)
                }
                j = _int((j &+ 1))
            }
            s = ((s + "|\n") as! String)
            i = _int((i &+ 1))
        }
        return s
    }
    func submatrix(_ m: [[Int]], _ row: Int, _ col: Int) -> [[Int]] {
        var res: [[Int]] = ([] as! [[Int]])
        var i = 0
        while (i < _int(((m).count))) {
            if (i != row) {
                var r: [Int] = ([] as! [Int])
                var j = 0
                while (j < _int((((_idx(m, 0) as! [Int])).count))) {
                    if (j != col) {
                        r = (_append(r, (_idx(_idx(m, i)!, j) as? Int ?? 0)) as! [Int])
                    }
                    j = _int((j &+ 1))
                }
                res = (_append(res, r) as! [[Int]])
            }
            i = _int((i &+ 1))
        }
        return res
    }
    func determinant(_ m: [[Int]]) -> Int {
        let n = _int(((m).count))
        if (n == 1) {
            return (_idx(_idx(m, 0)!, 0) as? Int ?? 0)
        }
        if (n == 2) {
            return (((_idx(_idx(m, 0)!, 0) as? Int ?? 0) &* (_idx(_idx(m, 1)!, 1) as? Int ?? 0)) &- ((_idx(_idx(m, 0)!, 1) as? Int ?? 0) &* (_idx(_idx(m, 1)!, 0) as? Int ?? 0)))
        }
        var det = 0
        var c = 0
        while (c < n) {
            let sub: [[Int]] = (submatrix((m as! [[Int]]), 0, c) as! [[Int]])
            var sign = 1
            if (((c % 2 + 2) % 2) == 1) {
                sign = _int(-1)
            }
            det = _int((det &+ ((sign &* (_idx(_idx(m, 0)!, c) as? Int ?? 0)) &* _int(determinant((sub as! [[Int]]))))))
            c = _int((c &+ 1))
        }
        return det
    }
    func matrix_minor(_ m: [[Int]], _ row: Int, _ col: Int) -> Int {
        return _int(determinant((submatrix((m as! [[Int]]), row, col) as! [[Int]])))
    }
    func matrix_cofactor(_ m: [[Int]], _ row: Int, _ col: Int) -> Int {
        var sign = 1
        if (((_int((row &+ col)) % 2 + 2) % 2) == 1) {
            sign = _int(-1)
        }
        return (sign &* _int(matrix_minor((m as! [[Int]]), row, col)))
    }
    func matrix_mul_vector(_ m: [[Int]], _ v: [Int]) -> [Int] {
        var res: [Int] = ([] as! [Int])
        var i = 0
        while (i < _int(((m).count))) {
            var sum = 0
            var j = 0
            while (j < _int((((_idx(m, 0) as! [Int])).count))) {
                sum = _int((sum &+ ((_idx(_idx(m, i)!, j) as? Int ?? 0) &* (_idx(v, j) as? Int ?? 0))))
                j = _int((j &+ 1))
            }
            res = (_append(res, sum) as! [Int])
            i = _int((i &+ 1))
        }
        return res
    }
    func matrix_mul_scalar(_ m: [[Int]], _ s: Int) -> [[Int]] {
        var res: [[Int]] = ([] as! [[Int]])
        var i = 0
        while (i < _int(((m).count))) {
            var row: [Int] = ([] as! [Int])
            var j = 0
            while (j < _int((((_idx(m, 0) as! [Int])).count))) {
                row = (_append(row, ((_idx(_idx(m, i)!, j) as? Int ?? 0) &* s)) as! [Int])
                j = _int((j &+ 1))
            }
            res = (_append(res, row) as! [[Int]])
            i = _int((i &+ 1))
        }
        return res
    }
    func matrix_change_component(_ m: [[Int]], _ i: Int, _ j: Int, _ val: Int) {
        var m = m
        var _tmp2 = (_idx(m, i) as! [Int])
        _tmp2 = _set(_tmp2, j, Int(val))
        m = _set(m, i, (_tmp2 as! [Int]))
    }
    func matrix_component(_ m: [[Int]], _ i: Int, _ j: Int) -> Int {
        return (_idx(_idx(m, i)!, j) as? Int ?? 0)
    }
    func matrix_add(_ a: [[Int]], _ b: [[Int]]) -> [[Int]] {
        var res: [[Int]] = ([] as! [[Int]])
        var i = 0
        while (i < _int(((a).count))) {
            var row: [Int] = ([] as! [Int])
            var j = 0
            while (j < _int((((_idx(a, 0) as! [Int])).count))) {
                row = (_append(row, ((_idx(_idx(a, i)!, j) as? Int ?? 0) &+ (_idx(_idx(b, i)!, j) as? Int ?? 0))) as! [Int])
                j = _int((j &+ 1))
            }
            res = (_append(res, row) as! [[Int]])
            i = _int((i &+ 1))
        }
        return res
    }
    func matrix_sub(_ a: [[Int]], _ b: [[Int]]) -> [[Int]] {
        var res: [[Int]] = ([] as! [[Int]])
        var i = 0
        while (i < _int(((a).count))) {
            var row: [Int] = ([] as! [Int])
            var j = 0
            while (j < _int((((_idx(a, 0) as! [Int])).count))) {
                row = (_append(row, ((_idx(_idx(a, i)!, j) as? Int ?? 0) &- (_idx(_idx(b, i)!, j) as? Int ?? 0))) as! [Int])
                j = _int((j &+ 1))
            }
            res = (_append(res, row) as! [[Int]])
            i = _int((i &+ 1))
        }
        return res
    }
    func square_zero_matrix(_ n: Int) -> [[Int]] {
        var m: [[Int]] = ([] as! [[Int]])
        var i = 0
        while (i < n) {
            m = (_append(m, (zero_vector(n) as! [Int])) as! [[Int]])
            i = _int((i &+ 1))
        }
        return m
    }
    func assert_int(_ name: String, _ actual: Int, _ expected: Int) {
        if (actual == expected) {
            print(_p((name + " ok")))
        } else {
            print(_p(((((name + " fail ") + String(describing: int_to_string(actual))) + " != ") + String(describing: int_to_string(expected)))))
        }
    }
    func assert_str(_ name: String, _ actual: String, _ expected: String) {
        if (actual == expected) {
            print(_p((name + " ok")))
        } else {
            print(_p((name + " fail")))
            print(_p(actual))
            print(_p(expected))
        }
    }
    func assert_float(_ name: String, _ actual: Double, _ expected: Double, _ eps: Double) {
        var diff = (actual - expected)
        if (diff < 0.0) {
            diff = Double(-diff)
        }
        if (diff <= eps) {
            print(_p((name + " ok")))
        } else {
            print(_p((name + " fail")))
        }
    }
    let vx: [Int] = ({
        var _arr: [Int] = []
        _arr = _append(_arr, 1)
        _arr = _append(_arr, 2)
        _arr = _append(_arr, 3)
        return _arr
    }() as! [Int])
    _ = assert_int("component0", _int(vector_component((vx as! [Int]), 0)), 1)
    _ = assert_int("component2", _int(vector_component((vx as! [Int]), 2)), 3)
    let vs: [Int] = ({
        var _arr: [Int] = []
        _arr = _append(_arr, 0)
        _arr = _append(_arr, 0)
        _arr = _append(_arr, 0)
        _arr = _append(_arr, 0)
        _arr = _append(_arr, 0)
        _arr = _append(_arr, 1)
        return _arr
    }() as! [Int])
    _ = assert_str("str_vector", String(describing: vector_str_int((vs as! [Int]))), "(0,0,0,0,0,1)")
    let vsize: [Int] = ({
        var _arr: [Int] = []
        _arr = _append(_arr, 1)
        _arr = _append(_arr, 2)
        _arr = _append(_arr, 3)
        _arr = _append(_arr, 4)
        return _arr
    }() as! [Int])
    _ = assert_int("size", _int(((vsize).count)), 4)
    let va: [Int] = ({
        var _arr: [Int] = []
        _arr = _append(_arr, 1)
        _arr = _append(_arr, 2)
        _arr = _append(_arr, 3)
        return _arr
    }() as! [Int])
    let vb: [Int] = ({
        var _arr: [Int] = []
        _arr = _append(_arr, 1)
        _arr = _append(_arr, 1)
        _arr = _append(_arr, 1)
        return _arr
    }() as! [Int])
    let vsum: [Int] = (vector_add((va as! [Int]), (vb as! [Int])) as! [Int])
    _ = assert_int("add0", _int(vector_component((vsum as! [Int]), 0)), 2)
    _ = assert_int("add1", _int(vector_component((vsum as! [Int]), 1)), 3)
    _ = assert_int("add2", _int(vector_component((vsum as! [Int]), 2)), 4)
    let vsub: [Int] = (vector_sub((va as! [Int]), (vb as! [Int])) as! [Int])
    _ = assert_int("sub0", _int(vector_component((vsub as! [Int]), 0)), 0)
    _ = assert_int("sub1", _int(vector_component((vsub as! [Int]), 1)), 1)
    _ = assert_int("sub2", _int(vector_component((vsub as! [Int]), 2)), 2)
    let vmul: [Double] = (vector_scalar_mul((va as! [Int]), 3.0) as! [Double])
    _ = assert_str("scalar_mul", String(describing: vector_str_float((vmul as! [Double]), 1)), "(3.0,6.0,9.0)")
    _ = assert_int("dot_product", _int(vector_dot(({
        var _arr: [Int] = []
        _arr = _append(_arr, 2)
        _arr = _append(_arr, -1)
        _arr = _append(_arr, 4)
        return _arr
    }() as! [Int]), ({
        var _arr: [Int] = []
        _arr = _append(_arr, 1)
        _arr = _append(_arr, -2)
        _arr = _append(_arr, -1)
        return _arr
    }() as! [Int]))), 0)
    let zvec: [Int] = (zero_vector(10) as! [Int])
    let zstr = String(describing: vector_str_int((zvec as! [Int])))
    var zcount = 0
    var zi = 0
    while (zi < _int(((zstr).count))) {
        if (String(describing: String(Array(String(describing: (zstr as! String)))[zi..<(zi &+ 1)])) == "0") {
            zcount = _int((zcount &+ 1))
        }
        zi = _int((zi &+ 1))
    }
    _ = assert_int("zero_vector", zcount, 10)
    _ = assert_str("unit_basis", String(describing: vector_str_int((unit_basis_vector(3, 1) as! [Int]))), "(0,1,0)")
    _ = assert_str("axpy", String(describing: vector_str_int((axpy(2, ({
        var _arr: [Int] = []
        _arr = _append(_arr, 1)
        _arr = _append(_arr, 2)
        _arr = _append(_arr, 3)
        return _arr
    }() as! [Int]), ({
        var _arr: [Int] = []
        _arr = _append(_arr, 1)
        _arr = _append(_arr, 0)
        _arr = _append(_arr, 1)
        return _arr
    }() as! [Int])) as! [Int]))), "(3,4,7)")
    let vcopy: [Int] = (copy_vector(({
        var _arr: [Int] = []
        _arr = _append(_arr, 1)
        _arr = _append(_arr, 0)
        _arr = _append(_arr, 0)
        _arr = _append(_arr, 0)
        _arr = _append(_arr, 0)
        _arr = _append(_arr, 0)
        return _arr
    }() as! [Int])) as! [Int])
    _ = assert_str("copy", String(describing: vector_str_int((vcopy as! [Int]))), "(1,0,0,0,0,0)")
    var vchange = ({
        var _arr: [Int] = []
        _arr = _append(_arr, 1)
        _arr = _append(_arr, 0)
        _arr = _append(_arr, 0)
        return _arr
    }() as! [Int])
    _ = change_component((vchange as! [Int]), 0, 0)
    _ = change_component((vchange as! [Int]), 1, 1)
    _ = assert_str("change_component", String(describing: vector_str_int((vchange as! [Int]))), "(0,1,0)")
    var ma = ({
        var _arr: [[Int]] = []
        _arr = _append(_arr, ({
            var _arr: [Int] = []
            _arr = _append(_arr, 1)
            _arr = _append(_arr, 2)
            _arr = _append(_arr, 3)
            return _arr
        }() as! [Int]))
        _arr = _append(_arr, ({
            var _arr: [Int] = []
            _arr = _append(_arr, 2)
            _arr = _append(_arr, 4)
            _arr = _append(_arr, 5)
            return _arr
        }() as! [Int]))
        _arr = _append(_arr, ({
            var _arr: [Int] = []
            _arr = _append(_arr, 6)
            _arr = _append(_arr, 7)
            _arr = _append(_arr, 8)
            return _arr
        }() as! [Int]))
        return _arr
    }() as! [[Int]])
    _ = assert_str("matrix_str", String(describing: matrix_str((ma as! [[Int]]))), "|1,2,3|\n|2,4,5|\n|6,7,8|\n")
    _ = assert_int("determinant", _int(determinant((ma as! [[Int]]))), -5)
    var mb = ({
        var _arr: [[Int]] = []
        _arr = _append(_arr, ({
            var _arr: [Int] = []
            _arr = _append(_arr, 1)
            _arr = _append(_arr, 2)
            _arr = _append(_arr, 3)
            return _arr
        }() as! [Int]))
        _arr = _append(_arr, ({
            var _arr: [Int] = []
            _arr = _append(_arr, 4)
            _arr = _append(_arr, 5)
            _arr = _append(_arr, 6)
            return _arr
        }() as! [Int]))
        _arr = _append(_arr, ({
            var _arr: [Int] = []
            _arr = _append(_arr, 7)
            _arr = _append(_arr, 8)
            _arr = _append(_arr, 9)
            return _arr
        }() as! [Int]))
        return _arr
    }() as! [[Int]])
    let mv: [Int] = (matrix_mul_vector((mb as! [[Int]]), ({
        var _arr: [Int] = []
        _arr = _append(_arr, 1)
        _arr = _append(_arr, 2)
        _arr = _append(_arr, 3)
        return _arr
    }() as! [Int])) as! [Int])
    _ = assert_str("matrix_vec_mul", String(describing: vector_str_int((mv as! [Int]))), "(14,32,50)")
    let msc: [[Int]] = (matrix_mul_scalar((mb as! [[Int]]), 2) as! [[Int]])
    _ = assert_str("matrix_scalar_mul", String(describing: matrix_str((msc as! [[Int]]))), "|2,4,6|\n|8,10,12|\n|14,16,18|\n")
    var mc = ({
        var _arr: [[Int]] = []
        _arr = _append(_arr, ({
            var _arr: [Int] = []
            _arr = _append(_arr, 1)
            _arr = _append(_arr, 2)
            _arr = _append(_arr, 3)
            return _arr
        }() as! [Int]))
        _arr = _append(_arr, ({
            var _arr: [Int] = []
            _arr = _append(_arr, 2)
            _arr = _append(_arr, 4)
            _arr = _append(_arr, 5)
            return _arr
        }() as! [Int]))
        _arr = _append(_arr, ({
            var _arr: [Int] = []
            _arr = _append(_arr, 6)
            _arr = _append(_arr, 7)
            _arr = _append(_arr, 8)
            return _arr
        }() as! [Int]))
        return _arr
    }() as! [[Int]])
    _ = matrix_change_component((mc as! [[Int]]), 0, 2, 5)
    _ = assert_str("change_component_matrix", String(describing: matrix_str((mc as! [[Int]]))), "|1,2,5|\n|2,4,5|\n|6,7,8|\n")
    _ = assert_int("matrix_component", _int(matrix_component((mc as! [[Int]]), 2, 1)), 7)
    var madd = (matrix_add(({
        var _arr: [[Int]] = []
        _arr = _append(_arr, ({
            var _arr: [Int] = []
            _arr = _append(_arr, 1)
            _arr = _append(_arr, 2)
            _arr = _append(_arr, 3)
            return _arr
        }() as! [Int]))
        _arr = _append(_arr, ({
            var _arr: [Int] = []
            _arr = _append(_arr, 2)
            _arr = _append(_arr, 4)
            _arr = _append(_arr, 5)
            return _arr
        }() as! [Int]))
        _arr = _append(_arr, ({
            var _arr: [Int] = []
            _arr = _append(_arr, 6)
            _arr = _append(_arr, 7)
            _arr = _append(_arr, 8)
            return _arr
        }() as! [Int]))
        return _arr
    }() as! [[Int]]), ({
        var _arr: [[Int]] = []
        _arr = _append(_arr, ({
            var _arr: [Int] = []
            _arr = _append(_arr, 1)
            _arr = _append(_arr, 2)
            _arr = _append(_arr, 7)
            return _arr
        }() as! [Int]))
        _arr = _append(_arr, ({
            var _arr: [Int] = []
            _arr = _append(_arr, 2)
            _arr = _append(_arr, 4)
            _arr = _append(_arr, 5)
            return _arr
        }() as! [Int]))
        _arr = _append(_arr, ({
            var _arr: [Int] = []
            _arr = _append(_arr, 6)
            _arr = _append(_arr, 7)
            _arr = _append(_arr, 10)
            return _arr
        }() as! [Int]))
        return _arr
    }() as! [[Int]])) as! [[Int]])
    _ = assert_str("matrix_add", String(describing: matrix_str((madd as! [[Int]]))), "|2,4,10|\n|4,8,10|\n|12,14,18|\n")
    var msub = (matrix_sub(({
        var _arr: [[Int]] = []
        _arr = _append(_arr, ({
            var _arr: [Int] = []
            _arr = _append(_arr, 1)
            _arr = _append(_arr, 2)
            _arr = _append(_arr, 3)
            return _arr
        }() as! [Int]))
        _arr = _append(_arr, ({
            var _arr: [Int] = []
            _arr = _append(_arr, 2)
            _arr = _append(_arr, 4)
            _arr = _append(_arr, 5)
            return _arr
        }() as! [Int]))
        _arr = _append(_arr, ({
            var _arr: [Int] = []
            _arr = _append(_arr, 6)
            _arr = _append(_arr, 7)
            _arr = _append(_arr, 8)
            return _arr
        }() as! [Int]))
        return _arr
    }() as! [[Int]]), ({
        var _arr: [[Int]] = []
        _arr = _append(_arr, ({
            var _arr: [Int] = []
            _arr = _append(_arr, 1)
            _arr = _append(_arr, 2)
            _arr = _append(_arr, 7)
            return _arr
        }() as! [Int]))
        _arr = _append(_arr, ({
            var _arr: [Int] = []
            _arr = _append(_arr, 2)
            _arr = _append(_arr, 4)
            _arr = _append(_arr, 5)
            return _arr
        }() as! [Int]))
        _arr = _append(_arr, ({
            var _arr: [Int] = []
            _arr = _append(_arr, 6)
            _arr = _append(_arr, 7)
            _arr = _append(_arr, 10)
            return _arr
        }() as! [Int]))
        return _arr
    }() as! [[Int]])) as! [[Int]])
    _ = assert_str("matrix_sub", String(describing: matrix_str((msub as! [[Int]]))), "|0,0,-4|\n|0,0,0|\n|0,0,-2|\n")
    let mzero: [[Int]] = (square_zero_matrix(5) as! [[Int]])
    _ = assert_str("square_zero_matrix", String(describing: matrix_str((mzero as! [[Int]]))), "|0,0,0,0,0|\n|0,0,0,0,0|\n|0,0,0,0,0|\n|0,0,0,0,0|\n|0,0,0,0,0|\n")
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
