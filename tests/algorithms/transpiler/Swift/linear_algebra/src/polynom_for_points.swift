// Generated by Mochi transpiler v0.10.62 on 2025-08-09 16:37:09 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
func _split(_ s: String, _ sep: String) -> [String] {
    let d = sep.isEmpty ? " " : sep
    return s.components(separatedBy: d)
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func contains_int(_ xs: [Int], _ x: Int) -> Bool {
        var i = 0
        while (i < _int(((xs).count))) {
            if ((_idx(xs, i) as? Int ?? 0) == x) {
                return true
            }
            i = _int((i &+ 1))
        }
        return false
    }
    func split(_ s: String, _ sep: String) -> [String] {
        var res: [String] = ([] as! [String])
        var current = ""
        var i = 0
        while (i < _int(((s).count))) {
            let ch = String(describing: String(Array(String(describing: (s as! String)))[i..<(i &+ 1)]))
            if (ch == sep) {
                res = (_append(res, current) as! [String])
                current = ""
            } else {
                current = ((current + ch) as! String)
            }
            i = _int((i &+ 1))
        }
        res = (_append(res, current) as! [String])
        return res
    }
    func pow_int_float(_ base: Int, _ exp: Int) -> Double {
        var result = 1.0
        var i = 0
        while (i < exp) {
            result = Double((result * Double(base)))
            i = _int((i &+ 1))
        }
        return result
    }
    func points_to_polynomial(_ coordinates: [[Int]]) -> String {
        if (_int(((coordinates).count)) == 0) {
            _ = fatalError("The program cannot work out a fitting polynomial.")
        }
        var i = 0
        while (i < _int(((coordinates).count))) {
            if (_int((((_idx(coordinates, i) as! [Int])).count)) != 2) {
                _ = fatalError("The program cannot work out a fitting polynomial.")
            }
            i = _int((i &+ 1))
        }
        var j = 0
        while (j < _int(((coordinates).count))) {
            var k = (j &+ 1)
            while (k < _int(((coordinates).count))) {
                if (((_idx(_idx(coordinates, j)!, 0) as? Int ?? 0) == (_idx(_idx(coordinates, k)!, 0) as? Int ?? 0)) && ((_idx(_idx(coordinates, j)!, 1) as? Int ?? 0) == (_idx(_idx(coordinates, k)!, 1) as? Int ?? 0))) {
                    _ = fatalError("The program cannot work out a fitting polynomial.")
                }
                k = _int((k &+ 1))
            }
            j = _int((j &+ 1))
        }
        var set_x: [Int] = ([] as! [Int])
        i = 0
        while (i < _int(((coordinates).count))) {
            let x_val = (_idx(_idx(coordinates, i)!, 0) as? Int ?? 0)
            if (!contains_int((set_x as! [Int]), x_val)) {
                set_x = (_append(set_x, x_val) as! [Int])
            }
            i = _int((i &+ 1))
        }
        if (_int(((set_x).count)) == 1) {
            return ("x=" + _p((_idx(_idx(coordinates, 0)!, 0) as? Int ?? 0)))
        }
        if (_int(((set_x).count)) != _int(((coordinates).count))) {
            _ = fatalError("The program cannot work out a fitting polynomial.")
        }
        let n = _int(((coordinates).count))
        var matrix: [[Double]] = ([] as! [[Double]])
        var row = 0
        while (row < n) {
            var line: [Double] = ([] as! [Double])
            var col = 0
            while (col < n) {
                let power = Double(pow_int_float((_idx(_idx(coordinates, row)!, 0) as? Int ?? 0), (n &- _int((col &+ 1)))))
                line = (_append(line, power) as! [Double])
                col = _int((col &+ 1))
            }
            matrix = (_append(matrix, line) as! [[Double]])
            row = _int((row &+ 1))
        }
        var vector: [Double] = ([] as! [Double])
        row = 0
        while (row < n) {
            vector = (_append(vector, Double(_idx(_idx(coordinates, row)!, 1))) as! [Double])
            row = _int((row &+ 1))
        }
        var count = 0
        while (count < n) {
            var number = 0
            while (number < n) {
                if (count != number) {
                    let fraction = (Double(_idx(_idx(matrix, number)!, count)) / Double(_idx(_idx(matrix, count)!, count)))
                    var cc = 0
                    while (cc < n) {
                        var _tmp2 = (_idx(matrix, number) as! [Double])
                        _tmp2 = _set(_tmp2, cc, Double((Double(_idx(_idx(matrix, number)!, cc)) - (Double(_idx(_idx(matrix, count)!, cc)) * fraction))))
                        matrix = _set(matrix, number, (_tmp2 as! [Double]))
                        cc = _int((cc &+ 1))
                    }
                    vector = _set(vector, number, Double((Double(_idx(vector, number)) - (Double(_idx(vector, count)) * fraction))))
                }
                number = _int((number &+ 1))
            }
            count = _int((count &+ 1))
        }
        var solution: [String] = ([] as! [String])
        count = 0
        while (count < n) {
            let value = (Double(_idx(vector, count)) / Double(_idx(_idx(matrix, count)!, count)))
            solution = (_append(solution, _p(value)) as! [String])
            count = _int((count &+ 1))
        }
        var solved = "f(x)="
        count = 0
        while (count < n) {
            var parts = (_split((_idx(solution, count) as! String), "e") as! [String])
            var coeff = (_idx(solution, count) as! String)
            if (_int(((parts).count)) > 1) {
                coeff = ((((_idx(parts, 0) as! String) + "*10^") + (_idx(parts, 1) as! String)) as! String)
            }
            solved = (((((solved + "x^") + _p((n &- _int((count &+ 1))))) + "*") + coeff) as! String)
            if ((count &+ 1) != n) {
                solved = ((solved + "+") as! String)
            }
            count = _int((count &+ 1))
        }
        return solved
    }
    func main() {
        print(_p(String(describing: points_to_polynomial(({
            var _arr: [[Int]] = []
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 1)
                _arr = _append(_arr, 0)
                return _arr
            }() as! [Int]))
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 2)
                _arr = _append(_arr, 0)
                return _arr
            }() as! [Int]))
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 3)
                _arr = _append(_arr, 0)
                return _arr
            }() as! [Int]))
            return _arr
        }() as! [[Int]])))))
        print(_p(String(describing: points_to_polynomial(({
            var _arr: [[Int]] = []
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 1)
                _arr = _append(_arr, 1)
                return _arr
            }() as! [Int]))
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 2)
                _arr = _append(_arr, 1)
                return _arr
            }() as! [Int]))
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 3)
                _arr = _append(_arr, 1)
                return _arr
            }() as! [Int]))
            return _arr
        }() as! [[Int]])))))
        print(_p(String(describing: points_to_polynomial(({
            var _arr: [[Int]] = []
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 1)
                _arr = _append(_arr, 1)
                return _arr
            }() as! [Int]))
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 2)
                _arr = _append(_arr, 4)
                return _arr
            }() as! [Int]))
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 3)
                _arr = _append(_arr, 9)
                return _arr
            }() as! [Int]))
            return _arr
        }() as! [[Int]])))))
        print(_p(String(describing: points_to_polynomial(({
            var _arr: [[Int]] = []
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 1)
                _arr = _append(_arr, 3)
                return _arr
            }() as! [Int]))
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 2)
                _arr = _append(_arr, 6)
                return _arr
            }() as! [Int]))
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 3)
                _arr = _append(_arr, 11)
                return _arr
            }() as! [Int]))
            return _arr
        }() as! [[Int]])))))
        print(_p(String(describing: points_to_polynomial(({
            var _arr: [[Int]] = []
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 1)
                _arr = _append(_arr, -3)
                return _arr
            }() as! [Int]))
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 2)
                _arr = _append(_arr, -6)
                return _arr
            }() as! [Int]))
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 3)
                _arr = _append(_arr, -11)
                return _arr
            }() as! [Int]))
            return _arr
        }() as! [[Int]])))))
        print(_p(String(describing: points_to_polynomial(({
            var _arr: [[Int]] = []
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 1)
                _arr = _append(_arr, 1)
                return _arr
            }() as! [Int]))
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 1)
                _arr = _append(_arr, 2)
                return _arr
            }() as! [Int]))
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 1)
                _arr = _append(_arr, 3)
                return _arr
            }() as! [Int]))
            return _arr
        }() as! [[Int]])))))
        print(_p(String(describing: points_to_polynomial(({
            var _arr: [[Int]] = []
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 1)
                _arr = _append(_arr, 5)
                return _arr
            }() as! [Int]))
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 2)
                _arr = _append(_arr, 2)
                return _arr
            }() as! [Int]))
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 3)
                _arr = _append(_arr, 9)
                return _arr
            }() as! [Int]))
            return _arr
        }() as! [[Int]])))))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
