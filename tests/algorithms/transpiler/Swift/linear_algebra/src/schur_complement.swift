// Generated by Mochi transpiler v0.10.62 on 2025-08-09 16:37:20 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _concat<T>(_ a: [T], _ b: [T]) -> [T] {
    var out = a
    out.append(contentsOf: b)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
struct OptionMatrix: Codable {
    var value: [[Double]]
    var ok: Bool
    init() {
        self.value = []
        self.ok = false
    }
    init(value: [[Double]], ok: Bool) {
        self.value = value
        self.ok = ok
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func identity(_ n: Int) -> [[Double]] {
        var mat: [[Double]] = ([] as! [[Double]])
        var i = 0
        while (i < n) {
            var row: [Double] = ([] as! [Double])
            var j = 0
            while (j < n) {
                if (i == j) {
                    row = (_append(row, 1.0) as! [Double])
                } else {
                    row = (_append(row, 0.0) as! [Double])
                }
                j = _int((j &+ 1))
            }
            mat = (_append(mat, row) as! [[Double]])
            i = _int((i &+ 1))
        }
        return mat
    }
    func transpose(_ mat: [[Double]]) -> [[Double]] {
        let rows = _int(((mat).count))
        let cols = _int((((_idx(mat, 0) as! [Double])).count))
        var res: [[Double]] = ([] as! [[Double]])
        var j = 0
        while (j < cols) {
            var row: [Double] = ([] as! [Double])
            var i = 0
            while (i < rows) {
                row = (_append(row, Double(_idx(_idx(mat, i)!, j))) as! [Double])
                i = _int((i &+ 1))
            }
            res = (_append(res, row) as! [[Double]])
            j = _int((j &+ 1))
        }
        return res
    }
    func matmul(_ a: [[Double]], _ b: [[Double]]) -> [[Double]] {
        let rows = _int(((a).count))
        let cols = _int((((_idx(b, 0) as! [Double])).count))
        let inner = _int((((_idx(a, 0) as! [Double])).count))
        var res: [[Double]] = ([] as! [[Double]])
        var i = 0
        while (i < rows) {
            var row: [Double] = ([] as! [Double])
            var j = 0
            while (j < cols) {
                var sum = 0.0
                var k = 0
                while (k < inner) {
                    sum = Double((sum + (Double(_idx(_idx(a, i)!, k)) * Double(_idx(_idx(b, k)!, j)))))
                    k = _int((k &+ 1))
                }
                row = (_append(row, sum) as! [Double])
                j = _int((j &+ 1))
            }
            res = (_append(res, row) as! [[Double]])
            i = _int((i &+ 1))
        }
        return res
    }
    func mat_sub(_ a: [[Double]], _ b: [[Double]]) -> [[Double]] {
        let rows = _int(((a).count))
        let cols = _int((((_idx(a, 0) as! [Double])).count))
        var res: [[Double]] = ([] as! [[Double]])
        var i = 0
        while (i < rows) {
            var row: [Double] = ([] as! [Double])
            var j = 0
            while (j < cols) {
                row = (_append(row, (Double(_idx(_idx(a, i)!, j)) - Double(_idx(_idx(b, i)!, j)))) as! [Double])
                j = _int((j &+ 1))
            }
            res = (_append(res, row) as! [[Double]])
            i = _int((i &+ 1))
        }
        return res
    }
    func inverse(_ mat: [[Double]]) -> [[Double]] {
        let n = _int(((mat).count))
        let id: [[Double]] = (identity(n) as! [[Double]])
        var aug: [[Double]] = ([] as! [[Double]])
        var i = 0
        while (i < n) {
            let row: [Any?] = (_concat((_idx(mat, i) as! [Double]), (_idx(id, i) as! [Double])) as! [Any?])
            aug = ((_append(aug, row) as! [Any?]) as! [[Double]])
            i = _int((i &+ 1))
        }
        var col = 0
        while (col < n) {
            var pivot_row = (_idx(aug, col) as! [Double])
            let pivot = Double(_idx(pivot_row, col))
            if (pivot == 0.0) {
                _ = fatalError("matrix is singular")
            }
            var j = 0
            while (j < (2 &* n)) {
                pivot_row = _set(pivot_row, j, Double((Double(_idx(pivot_row, j)) / pivot)))
                j = _int((j &+ 1))
            }
            aug = _set(aug, col, (pivot_row as! [Double]))
            var r = 0
            while (r < n) {
                if (r != col) {
                    var row_r = (_idx(aug, r) as! [Double])
                    let factor = Double(_idx(row_r, col))
                    j = 0
                    while (j < (2 &* n)) {
                        row_r = _set(row_r, j, Double((Double(_idx(row_r, j)) - (factor * Double(_idx(pivot_row, j))))))
                        j = _int((j &+ 1))
                    }
                    aug = _set(aug, r, (row_r as! [Double]))
                }
                r = _int((r &+ 1))
            }
            col = _int((col &+ 1))
        }
        var inv: [[Double]] = ([] as! [[Double]])
        var r = 0
        while (r < n) {
            var row: [Double] = ([] as! [Double])
            var c = n
            while (c < (2 &* n)) {
                row = (_append(row, Double(_idx(_idx(aug, r)!, c))) as! [Double])
                c = _int((c &+ 1))
            }
            inv = (_append(inv, row) as! [[Double]])
            r = _int((r &+ 1))
        }
        return inv
    }
    func schur_complement(_ mat_a: [[Double]], _ mat_b: [[Double]], _ mat_c: [[Double]], _ pseudo_inv: OptionMatrix) -> [[Double]] {
        let a_rows = _int(((mat_a).count))
        let a_cols = _int((((_idx(mat_a, 0) as! [Double])).count))
        if (a_rows != a_cols) {
            _ = fatalError("Matrix A must be square")
        }
        if (a_rows != _int(((mat_b).count))) {
            _ = fatalError("Expected the same number of rows for A and B")
        }
        if (_int((((_idx(mat_b, 0) as! [Double])).count)) != _int((((_idx(mat_c, 0) as! [Double])).count))) {
            _ = fatalError("Expected the same number of columns for B and C")
        }
        var a_inv: [[Double]] = []
        if pseudo_inv.ok {
            a_inv = (pseudo_inv.value as! [[Double]])
        } else {
            a_inv = (inverse((mat_a as! [[Double]])) as! [[Double]])
        }
        let bt: [[Double]] = (transpose((mat_b as! [[Double]])) as! [[Double]])
        let a_inv_b: [[Double]] = (matmul((a_inv as! [[Double]]), (mat_b as! [[Double]])) as! [[Double]])
        let bt_a_inv_b: [[Double]] = (matmul((bt as! [[Double]]), (a_inv_b as! [[Double]])) as! [[Double]])
        return (mat_sub((mat_c as! [[Double]]), (bt_a_inv_b as! [[Double]])) as! [[Double]])
    }
    func print_matrix(_ mat: [[Double]]) {
        var i = 0
        while (i < _int(((mat).count))) {
            var line = ""
            var j = 0
            let row: [Double] = (_idx(mat, i) as! [Double])
            while (j < _int(((row).count))) {
                line = ((line + _p(Double(_idx(row, j)))) as! String)
                if ((j &+ 1) < _int(((row).count))) {
                    line = ((line + " ") as! String)
                }
                j = _int((j &+ 1))
            }
            print(_p(line))
            i = _int((i &+ 1))
        }
    }
    func main() {
        let a: [[Double]] = ({
            var _arr: [[Double]] = []
            _arr = _append(_arr, ({
                var _arr: [Double] = []
                _arr = _append(_arr, 1.0)
                _arr = _append(_arr, 2.0)
                return _arr
            }() as! [Double]))
            _arr = _append(_arr, ({
                var _arr: [Double] = []
                _arr = _append(_arr, 2.0)
                _arr = _append(_arr, 1.0)
                return _arr
            }() as! [Double]))
            return _arr
        }() as! [[Double]])
        let b: [[Double]] = ({
            var _arr: [[Double]] = []
            _arr = _append(_arr, ({
                var _arr: [Double] = []
                _arr = _append(_arr, 0.0)
                _arr = _append(_arr, 3.0)
                return _arr
            }() as! [Double]))
            _arr = _append(_arr, ({
                var _arr: [Double] = []
                _arr = _append(_arr, 3.0)
                _arr = _append(_arr, 0.0)
                return _arr
            }() as! [Double]))
            return _arr
        }() as! [[Double]])
        let c: [[Double]] = ({
            var _arr: [[Double]] = []
            _arr = _append(_arr, ({
                var _arr: [Double] = []
                _arr = _append(_arr, 2.0)
                _arr = _append(_arr, 1.0)
                return _arr
            }() as! [Double]))
            _arr = _append(_arr, ({
                var _arr: [Double] = []
                _arr = _append(_arr, 6.0)
                _arr = _append(_arr, 3.0)
                return _arr
            }() as! [Double]))
            return _arr
        }() as! [[Double]])
        let none = OptionMatrix(value: ([] as! [[Double]]), ok: false)
        let s: [[Double]] = (schur_complement((a as! [[Double]]), (b as! [[Double]]), (c as! [[Double]]), (none as! OptionMatrix)) as! [[Double]])
        _ = print_matrix((s as! [[Double]]))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
