// Generated by Mochi transpiler v0.10.65 on 2025-08-14 16:24:33 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func panic(_ msg: String) {
        print(_p(msg))
    }
    func abs_float(_ x: Double) -> Double {
        if (x < 0.0) {
            return -x
        }
        return x
    }
    func copy_matrix(_ src: [[Double]]) -> [[Double]] {
        var res: [[Double]] = ([] as! [[Double]])
        var i = 0
        while (i < _int(((src).count))) {
            var row_src = (_idx(src, i) as! [Double])
            var row: [Double] = ([] as! [Double])
            var j = 0
            while (j < _int(((row_src).count))) {
                row = (_append(row, Double(_idx(row_src, j))) as! [Double])
                j = _int((j &+ 1))
            }
            res = (_append(res, row) as! [[Double]])
            i = _int((i &+ 1))
        }
        return res
    }
    func solve_linear_system(_ matrix: [[Double]]) -> [Double] {
        var ab = (copy_matrix((matrix as! [[Double]])) as! [[Double]])
        var num_rows = _int(((ab).count))
        var num_cols = (_int((((_idx(ab, 0) as! [Double])).count)) &- 1)
        if (num_rows != num_cols) {
            _ = panic("Matrix is not square")
            return ([] as! [Double])
        }
        var column_num = 0
        while (column_num < num_rows) {
            var i = column_num
            while (i < num_cols) {
                if (Double(abs_float(Double(_idx(_idx(ab, i)!, column_num)))) > Double(abs_float(Double(_idx(_idx(ab, column_num)!, column_num))))) {
                    var temp = (_idx(ab, column_num) as! [Double])
                    ab = _set(ab, column_num, (_idx(ab, i) as! [Double]))
                    ab = _set(ab, i, (temp as! [Double]))
                }
                i = _int((i &+ 1))
            }
            if (Double(abs_float(Double(_idx(_idx(ab, column_num)!, column_num)))) < 0.00000001) {
                _ = panic("Matrix is singular")
                return ([] as! [Double])
            }
            if (column_num != 0) {
                i = Int(column_num)
                while (i < num_rows) {
                    var factor = (Double(_idx(_idx(ab, i)!, (column_num &- 1))) / Double(_idx(_idx(ab, (column_num &- 1))!, (column_num &- 1))))
                    var j = 0
                    while (j < _int((((_idx(ab, i) as! [Double])).count))) {
                        var _tmp3 = (_idx(ab, i) as! [Double])
                        _tmp3 = _set(_tmp3, j, Double((Double(_idx(_idx(ab, i)!, j)) - (factor * Double(_idx(_idx(ab, (column_num &- 1))!, j))))))
                        ab = _set(ab, i, (_tmp3 as! [Double]))
                        j = _int((j &+ 1))
                    }
                    i = _int((i &+ 1))
                }
            }
            column_num = _int((column_num &+ 1))
        }
        var x_lst: [Double] = ([] as! [Double])
        var t = 0
        while (t < num_rows) {
            x_lst = (_append(x_lst, 0.0) as! [Double])
            t = _int((t &+ 1))
        }
        column_num = _int((num_rows &- 1))
        while (column_num >= 0) {
            var x = (Double(_idx(_idx(ab, column_num)!, num_cols)) / Double(_idx(_idx(ab, column_num)!, column_num)))
            x_lst = _set(x_lst, column_num, Double(x))
            var i = (column_num &- 1)
            while (i >= 0) {
                var _tmp4 = (_idx(ab, i) as! [Double])
                _tmp4 = _set(_tmp4, num_cols, Double((Double(_idx(_idx(ab, i)!, num_cols)) - (Double(_idx(_idx(ab, i)!, column_num)) * x))))
                ab = _set(ab, i, (_tmp4 as! [Double]))
                i = _int((i &- 1))
            }
            column_num = _int((column_num &- 1))
        }
        return x_lst
    }
    var example_matrix: [[Double]] = ({
        var _arr: [[Double]] = []
        _arr = _append(_arr, ({
            var _arr: [Double] = []
            _arr = _append(_arr, 5.0)
            _arr = _append(_arr, -5.0)
            _arr = _append(_arr, -3.0)
            _arr = _append(_arr, 4.0)
            _arr = _append(_arr, -11.0)
            return _arr
        }() as! [Double]))
        _arr = _append(_arr, ({
            var _arr: [Double] = []
            _arr = _append(_arr, 1.0)
            _arr = _append(_arr, -4.0)
            _arr = _append(_arr, 6.0)
            _arr = _append(_arr, -4.0)
            _arr = _append(_arr, -10.0)
            return _arr
        }() as! [Double]))
        _arr = _append(_arr, ({
            var _arr: [Double] = []
            _arr = _append(_arr, -2.0)
            _arr = _append(_arr, -5.0)
            _arr = _append(_arr, 4.0)
            _arr = _append(_arr, -5.0)
            _arr = _append(_arr, -12.0)
            return _arr
        }() as! [Double]))
        _arr = _append(_arr, ({
            var _arr: [Double] = []
            _arr = _append(_arr, -3.0)
            _arr = _append(_arr, -3.0)
            _arr = _append(_arr, 5.0)
            _arr = _append(_arr, -5.0)
            _arr = _append(_arr, 8.0)
            return _arr
        }() as! [Double]))
        return _arr
    }() as! [[Double]])
    print(_p("Matrix:"))
    print(_p("[" + example_matrix.map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    var solution = (solve_linear_system((example_matrix as! [[Double]])) as! [Double])
    print(_p("[" + solution.map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
