exit status 1
/tmp/TestSwiftTranspiler_Algorithms_Golden489_linear_algebra_src_polynom_for_points69990583/001/main.swift:101:30: warning: conditional downcast from 'Int?' to 'Int' does nothing
 99 |         var i: Int = 0
100 |         while (i < _int(((xs).count))) {
101 |             if ((_idx(xs, i) as? Int ?? 0) == x) {
    |                              `- warning: conditional downcast from 'Int?' to 'Int' does nothing
102 |                 return true
103 |             }

/tmp/TestSwiftTranspiler_Algorithms_Golden489_linear_algebra_src_polynom_for_points69990583/001/main.swift:113:76: warning: forced cast of 'String' to same type has no effect
111 |         var i: Int = 0
112 |         while (i < _int(((s).count))) {
113 |             let ch = String(describing: String(Array(String(describing: (s as! String)))[i..<(i &+ 1)]))
    |                                                                            `- warning: forced cast of 'String' to same type has no effect
114 |             if (ch == sep) {
115 |                 res = (_append(res, current) as! [String])

/tmp/TestSwiftTranspiler_Algorithms_Golden489_linear_algebra_src_polynom_for_points69990583/001/main.swift:118:43: warning: forced cast of 'String' to same type has no effect
116 |                 current = ""
117 |             } else {
118 |                 current = ((current + ch) as! String)
    |                                           `- warning: forced cast of 'String' to same type has no effect
119 |             }
120 |             i = _int((i &+ 1))

/tmp/TestSwiftTranspiler_Algorithms_Golden489_linear_algebra_src_polynom_for_points69990583/001/main.swift:140:46: warning: forced cast from '[Int]?' to '[Int]' only unwraps optionals; did you mean to use '!'?
138 |         var i: Int = 0
139 |         while (i < _int(((coordinates).count))) {
140 |             if (_int((((_idx(coordinates, i) as! [Int])).count)) != 2) {
    |                                              `- warning: forced cast from '[Int]?' to '[Int]' only unwraps optionals; did you mean to use '!'?
141 |                 _ = fatalError("The program cannot work out a fitting polynomial.")
142 |             }

/tmp/TestSwiftTranspiler_Algorithms_Golden489_linear_algebra_src_polynom_for_points69990583/001/main.swift:149:28: error: cannot convert value of type '[Int]?' to expected argument type '[[Int]?]'
147 |             var k: Int = (j &+ 1)
148 |             while (k < _int(((coordinates).count))) {
149 |                 if (((_idx(_idx(coordinates, j), 0) as? Int ?? 0) == (_idx(_idx(coordinates, k), 0) as? Int ?? 0)) && ((_idx(_idx(coordinates, j), 1) as? Int ?? 0) == (_idx(_idx(coordinates, k), 1) as? Int ?? 0))) {
    |                            `- error: cannot convert value of type '[Int]?' to expected argument type '[[Int]?]'
150 |                     _ = fatalError("The program cannot work out a fitting polynomial.")
151 |                 }

/tmp/TestSwiftTranspiler_Algorithms_Golden489_linear_algebra_src_polynom_for_points69990583/001/main.swift:149:76: error: cannot convert value of type '[Int]?' to expected argument type '[[Int]?]'
147 |             var k: Int = (j &+ 1)
148 |             while (k < _int(((coordinates).count))) {
149 |                 if (((_idx(_idx(coordinates, j), 0) as? Int ?? 0) == (_idx(_idx(coordinates, k), 0) as? Int ?? 0)) && ((_idx(_idx(coordinates, j), 1) as? Int ?? 0) == (_idx(_idx(coordinates, k), 1) as? Int ?? 0))) {
    |                                                                            `- error: cannot convert value of type '[Int]?' to expected argument type '[[Int]?]'
150 |                     _ = fatalError("The program cannot work out a fitting polynomial.")
151 |                 }

/tmp/TestSwiftTranspiler_Algorithms_Golden489_linear_algebra_src_polynom_for_points69990583/001/main.swift:149:126: error: cannot convert value of type '[Int]?' to expected argument type '[[Int]?]'
147 |             var k: Int = (j &+ 1)
148 |             while (k < _int(((coordinates).count))) {
149 |                 if (((_idx(_idx(coordinates, j), 0) as? Int ?? 0) == (_idx(_idx(coordinates, k), 0) as? Int ?? 0)) && ((_idx(_idx(coordinates, j), 1) as? Int ?? 0) == (_idx(_idx(coordinates, k), 1) as? Int ?? 0))) {
    |                                                                                                                              `- error: cannot convert value of type '[Int]?' to expected argument type '[[Int]?]'
150 |                     _ = fatalError("The program cannot work out a fitting polynomial.")
151 |                 }

/tmp/TestSwiftTranspiler_Algorithms_Golden489_linear_algebra_src_polynom_for_points69990583/001/main.swift:149:174: error: cannot convert value of type '[Int]?' to expected argument type '[[Int]?]'
147 |             var k: Int = (j &+ 1)
148 |             while (k < _int(((coordinates).count))) {
149 |                 if (((_idx(_idx(coordinates, j), 0) as? Int ?? 0) == (_idx(_idx(coordinates, k), 0) as? Int ?? 0)) && ((_idx(_idx(coordinates, j), 1) as? Int ?? 0) == (_idx(_idx(coordinates, k), 1) as? Int ?? 0))) {
    |                                                                                                                                                                              `- error: cannot convert value of type '[Int]?' to expected argument type '[[Int]?]'
150 |                     _ = fatalError("The program cannot work out a fitting polynomial.")
151 |                 }

/tmp/TestSwiftTranspiler_Algorithms_Golden489_linear_algebra_src_polynom_for_points69990583/001/main.swift:159:31: error: cannot convert value of type '[Int]?' to expected argument type '[[Int]?]'
157 |         i = 0
158 |         while (i < _int(((coordinates).count))) {
159 |             let x_val = (_idx(_idx(coordinates, i), 0) as? Int ?? 0)
    |                               `- error: cannot convert value of type '[Int]?' to expected argument type '[[Int]?]'
160 |             if (!contains_int((set_x as! [Int]), x_val)) {
161 |                 set_x = (_append(set_x, x_val) as! [Int])

/tmp/TestSwiftTranspiler_Algorithms_Golden489_linear_algebra_src_polynom_for_points69990583/001/main.swift:160:38: warning: forced cast of '[Int]' to same type has no effect
158 |         while (i < _int(((coordinates).count))) {
159 |             let x_val = (_idx(_idx(coordinates, i), 0) as? Int ?? 0)
160 |             if (!contains_int((set_x as! [Int]), x_val)) {
    |                                      `- warning: forced cast of '[Int]' to same type has no effect
161 |                 set_x = (_append(set_x, x_val) as! [Int])
162 |             }

/tmp/TestSwiftTranspiler_Algorithms_Golden489_linear_algebra_src_polynom_for_points69990583/001/main.swift:166:37: error: cannot convert value of type '[Int]?' to expected argument type '[[Int]?]'
164 |         }
165 |         if (_int(((set_x).count)) == 1) {
166 |             return ("x=" + _p((_idx(_idx(coordinates, 0), 0) as? Int ?? 0)))
    |                                     `- error: cannot convert value of type '[Int]?' to expected argument type '[[Int]?]'
167 |         }
168 |         if (_int(((set_x).count)) != _int(((coordinates).count))) {

/tmp/TestSwiftTranspiler_Algorithms_Golden489_linear_algebra_src_polynom_for_points69990583/001/main.swift:178:56: error: cannot convert value of type '[Int]?' to expected argument type '[[Int]?]'
176 |             var col: Int = 0
177 |             while (col < n) {
178 |                 let power = Double(pow_int_float((_idx(_idx(coordinates, row), 0) as? Int ?? 0), (n &- _int((col &+ 1)))))
    |                                                        `- error: cannot convert value of type '[Int]?' to expected argument type '[[Int]?]'
179 |                 line = (_append(line, power) as! [Double])
180 |                 col = _int((col &+ 1))

/tmp/TestSwiftTranspiler_Algorithms_Golden489_linear_algebra_src_polynom_for_points69990583/001/main.swift:188:51: error: cannot convert value of type '[Int]?' to expected argument type '[[Int]?]'
186 |         row = 0
187 |         while (row < n) {
188 |             vector = (_append(vector, Double(_idx(_idx(coordinates, row), 1))) as! [Double])
    |                                                   `- error: cannot convert value of type '[Int]?' to expected argument type '[[Int]?]'
189 |             row = _int((row &+ 1))
190 |         }

/tmp/TestSwiftTranspiler_Algorithms_Golden489_linear_algebra_src_polynom_for_points69990583/001/main.swift:196:49: error: cannot convert value of type '[Double]?' to expected argument type '[[Double]?]'
194 |             while (number < n) {
195 |                 if (count != number) {
196 |                     let fraction = (Double(_idx(_idx(matrix, number), count)) / Double(_idx(_idx(matrix, count), count)))
    |                                                 `- error: cannot convert value of type '[Double]?' to expected argument type '[[Double]?]'
197 |                     var cc: Int = 0
198 |                     while (cc < n) {

/tmp/TestSwiftTranspiler_Algorithms_Golden489_linear_algebra_src_polynom_for_points69990583/001/main.swift:196:93: error: cannot convert value of type '[Double]?' to expected argument type '[[Double]?]'
194 |             while (number < n) {
195 |                 if (count != number) {
196 |                     let fraction = (Double(_idx(_idx(matrix, number), count)) / Double(_idx(_idx(matrix, count), count)))
    |                                                                                             `- error: cannot convert value of type '[Double]?' to expected argument type '[[Double]?]'
197 |                     var cc: Int = 0
198 |                     while (cc < n) {

/tmp/TestSwiftTranspiler_Algorithms_Golden489_linear_algebra_src_polynom_for_points69990583/001/main.swift:199:30: error: cannot convert value of type '[Double]?' to expected argument type '[[Double]?]'
197 |                     var cc: Int = 0
198 |                     while (cc < n) {
199 |                         _idx(_idx(matrix, number), cc) = Double((Double(_idx(_idx(matrix, number), cc)) - (Double(_idx(_idx(matrix, count), cc)) * fraction)))
    |                              `- error: cannot convert value of type '[Double]?' to expected argument type '[[Double]?]'
200 |                         cc = _int((cc &+ 1))
201 |                     }

/tmp/TestSwiftTranspiler_Algorithms_Golden489_linear_algebra_src_polynom_for_points69990583/001/main.swift:199:78: error: cannot convert value of type '[Double]?' to expected argument type '[[Double]?]'
197 |                     var cc: Int = 0
198 |                     while (cc < n) {
199 |                         _idx(_idx(matrix, number), cc) = Double((Double(_idx(_idx(matrix, number), cc)) - (Double(_idx(_idx(matrix, count), cc)) * fraction)))
    |                                                                              `- error: cannot convert value of type '[Double]?' to expected argument type '[[Double]?]'
200 |                         cc = _int((cc &+ 1))
201 |                     }

/tmp/TestSwiftTranspiler_Algorithms_Golden489_linear_algebra_src_polynom_for_points69990583/001/main.swift:199:120: error: cannot convert value of type '[Double]?' to expected argument type '[[Double]?]'
197 |                     var cc: Int = 0
198 |                     while (cc < n) {
199 |                         _idx(_idx(matrix, number), cc) = Double((Double(_idx(_idx(matrix, number), cc)) - (Double(_idx(_idx(matrix, count), cc)) * fraction)))
    |                                                                                                                        `- error: cannot convert value of type '[Double]?' to expected argument type '[[Double]?]'
200 |                         cc = _int((cc &+ 1))
201 |                     }

/tmp/TestSwiftTranspiler_Algorithms_Golden489_linear_algebra_src_polynom_for_points69990583/001/main.swift:199:58: error: cannot assign value of type 'Double' to type '[Double]?'
197 |                     var cc: Int = 0
198 |                     while (cc < n) {
199 |                         _idx(_idx(matrix, number), cc) = Double((Double(_idx(_idx(matrix, number), cc)) - (Double(_idx(_idx(matrix, count), cc)) * fraction)))
    |                                                          `- error: cannot assign value of type 'Double' to type '[Double]?'
200 |                         cc = _int((cc &+ 1))
201 |                     }

/tmp/TestSwiftTranspiler_Algorithms_Golden489_linear_algebra_src_polynom_for_points69990583/001/main.swift:211:68: error: cannot convert value of type '[Double]?' to expected argument type '[[Double]?]'
209 |         count = 0
210 |         while (count < n) {
211 |             let value = (Double(_idx(vector, count)) / Double(_idx(_idx(matrix, count), count)))
    |                                                                    `- error: cannot convert value of type '[Double]?' to expected argument type '[[Double]?]'
212 |             solution = (_append(solution, _p(value)) as! [String])
213 |             count = _int((count &+ 1))

/tmp/TestSwiftTranspiler_Algorithms_Golden489_linear_algebra_src_polynom_for_points69990583/001/main.swift:218:66: warning: forced cast from 'String?' to 'String' only unwraps optionals; did you mean to use '!'?
216 |         count = 0
217 |         while (count < n) {
218 |             var parts: [String] = (_split((_idx(solution, count) as! String), "e") as! [String])
    |                                                                  `- warning: forced cast from 'String?' to 'String' only unwraps optionals; did you mean to use '!'?
219 |             var coeff: String = (_idx(solution, count) as! String)
220 |             if (_int(((parts).count)) > 1) {

/tmp/TestSwiftTranspiler_Algorithms_Golden489_linear_algebra_src_polynom_for_points69990583/001/main.swift:218:84: warning: forced cast of '[String]' to same type has no effect
216 |         count = 0
217 |         while (count < n) {
218 |             var parts: [String] = (_split((_idx(solution, count) as! String), "e") as! [String])
    |                                                                                    `- warning: forced cast of '[String]' to same type has no effect
219 |             var coeff: String = (_idx(solution, count) as! String)
220 |             if (_int(((parts).count)) > 1) {

/tmp/TestSwiftTranspiler_Algorithms_Golden489_linear_algebra_src_polynom_for_points69990583/001/main.swift:219:56: warning: forced cast from 'String?' to 'String' only unwraps optionals; did you mean to use '!'?
217 |         while (count < n) {
218 |             var parts: [String] = (_split((_idx(solution, count) as! String), "e") as! [String])
219 |             var coeff: String = (_idx(solution, count) as! String)
    |                                                        `- warning: forced cast from 'String?' to 'String' only unwraps optionals; did you mean to use '!'?
220 |             if (_int(((parts).count)) > 1) {
221 |                 coeff = ((((_idx(parts, 0) as! String) + "*10^") + (_idx(parts, 1) as! String)) as! String)

/tmp/TestSwiftTranspiler_Algorithms_Golden489_linear_algebra_src_polynom_for_points69990583/001/main.swift:221:44: warning: forced cast from 'String?' to 'String' only unwraps optionals; did you mean to use '!'?
219 |             var coeff: String = (_idx(solution, count) as! String)
220 |             if (_int(((parts).count)) > 1) {
221 |                 coeff = ((((_idx(parts, 0) as! String) + "*10^") + (_idx(parts, 1) as! String)) as! String)
    |                                            `- warning: forced cast from 'String?' to 'String' only unwraps optionals; did you mean to use '!'?
222 |             }
223 |             solved = (((((solved + "x^") + _p((n &- _int((count &+ 1))))) + "*") + coeff) as! String)

/tmp/TestSwiftTranspiler_Algorithms_Golden489_linear_algebra_src_polynom_for_points69990583/001/main.swift:221:84: warning: forced cast from 'String?' to 'String' only unwraps optionals; did you mean to use '!'?
219 |             var coeff: String = (_idx(solution, count) as! String)
220 |             if (_int(((parts).count)) > 1) {
221 |                 coeff = ((((_idx(parts, 0) as! String) + "*10^") + (_idx(parts, 1) as! String)) as! String)
    |                                                                                    `- warning: forced cast from 'String?' to 'String' only unwraps optionals; did you mean to use '!'?
222 |             }
223 |             solved = (((((solved + "x^") + _p((n &- _int((count &+ 1))))) + "*") + coeff) as! String)

/tmp/TestSwiftTranspiler_Algorithms_Golden489_linear_algebra_src_polynom_for_points69990583/001/main.swift:221:97: warning: forced cast of 'String' to same type has no effect
219 |             var coeff: String = (_idx(solution, count) as! String)
220 |             if (_int(((parts).count)) > 1) {
221 |                 coeff = ((((_idx(parts, 0) as! String) + "*10^") + (_idx(parts, 1) as! String)) as! String)
    |                                                                                                 `- warning: forced cast of 'String' to same type has no effect
222 |             }
223 |             solved = (((((solved + "x^") + _p((n &- _int((count &+ 1))))) + "*") + coeff) as! String)

/tmp/TestSwiftTranspiler_Algorithms_Golden489_linear_algebra_src_polynom_for_points69990583/001/main.swift:223:91: warning: forced cast of 'String' to same type has no effect
221 |                 coeff = ((((_idx(parts, 0) as! String) + "*10^") + (_idx(parts, 1) as! String)) as! String)
222 |             }
223 |             solved = (((((solved + "x^") + _p((n &- _int((count &+ 1))))) + "*") + coeff) as! String)
    |                                                                                           `- warning: forced cast of 'String' to same type has no effect
224 |             if ((count &+ 1) != n) {
225 |                 solved = ((solved + "+") as! String)

/tmp/TestSwiftTranspiler_Algorithms_Golden489_linear_algebra_src_polynom_for_points69990583/001/main.swift:225:42: warning: forced cast of 'String' to same type has no effect
223 |             solved = (((((solved + "x^") + _p((n &- _int((count &+ 1))))) + "*") + coeff) as! String)
224 |             if ((count &+ 1) != n) {
225 |                 solved = ((solved + "+") as! String)
    |                                          `- warning: forced cast of 'String' to same type has no effect
226 |             }
227 |             count = _int((count &+ 1))

/tmp/TestSwiftTranspiler_Algorithms_Golden489_linear_algebra_src_polynom_for_points69990583/001/main.swift:240:5: warning: using '_' to ignore the result of a Void-returning function is redundant
238 |         print(_p(String(describing: points_to_polynomial(([([1, 5] as! [Int]), ([2, 2] as! [Int]), ([3, 9] as! [Int])] as! [[Int]])))))
239 |     }
240 |     _ = main()
    |     `- warning: using '_' to ignore the result of a Void-returning function is redundant
241 |     let _benchEnd = _now()
242 |     let _benchMemEnd = _mem()
