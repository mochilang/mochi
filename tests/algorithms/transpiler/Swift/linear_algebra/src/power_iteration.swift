// Generated by Mochi transpiler v0.10.65 on 2025-08-14 16:22:26 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
struct PowerResult: Codable {
    var eigenvalue: Double
    var eigenvector: [Double]
    init() {
        self.eigenvalue = 0
        self.eigenvector = []
    }
    init(eigenvalue: Double, eigenvector: [Double]) {
        self.eigenvalue = eigenvalue
        self.eigenvector = eigenvector
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func abs(_ x: Double) -> Double {
        if (x < 0.0) {
            return -x
        }
        return x
    }
    func sqrtApprox(_ x: Double) -> Double {
        if (x == 0.0) {
            return 0.0
        }
        var guess: Double = (x / 2.0)
        var i = 0
        while (i < 20) {
            guess = Double((Double((guess + (x / guess))) / 2.0))
            i = _int((i &+ 1))
        }
        return guess
    }
    func dot(_ a: [Double], _ b: [Double]) -> Double {
        var sum: Double = 0.0
        var i = 0
        while (i < _int(((a).count))) {
            sum = Double((sum + (Double(_idx(a, i)) * Double(_idx(b, i)))))
            i = _int((i &+ 1))
        }
        return sum
    }
    func mat_vec_mult(_ mat: [[Double]], _ vec: [Double]) -> [Double] {
        var res: [Double] = ([] as! [Double])
        var i = 0
        while (i < _int(((mat).count))) {
            res = (_append(res, Double(dot((_idx(mat, i) as! [Double]), (vec as! [Double])))) as! [Double])
            i = _int((i &+ 1))
        }
        return res
    }
    func norm(_ vec: [Double]) -> Double {
        var sum: Double = 0.0
        var i = 0
        while (i < _int(((vec).count))) {
            sum = Double((sum + (Double(_idx(vec, i)) * Double(_idx(vec, i)))))
            i = _int((i &+ 1))
        }
        var root = Double(sqrtApprox(Double(sum)))
        return root
    }
    func normalize(_ vec: [Double]) -> [Double] {
        let n = Double(norm((vec as! [Double])))
        var res: [Double] = ([] as! [Double])
        var i = 0
        while (i < _int(((vec).count))) {
            res = (_append(res, (Double(_idx(vec, i)) / n)) as! [Double])
            i = _int((i &+ 1))
        }
        return res
    }
    func power_iteration(_ matrix: [[Double]], _ vector: [Double], _ error_tol: Double, _ max_iterations: Int) -> PowerResult {
        var v = (normalize((vector as! [Double])) as! [Double])
        var lambda_prev = 0.0
        var lambda = 0.0
        var err = 1000000000000.0
        var iterations = 0
        while ((err > error_tol) && (iterations < max_iterations)) {
            let w: [Double] = (mat_vec_mult((matrix as! [[Double]]), (v as! [Double])) as! [Double])
            v = (normalize((w as! [Double])) as! [Double])
            let mv: [Double] = (mat_vec_mult((matrix as! [[Double]]), (v as! [Double])) as! [Double])
            lambda = Double(dot((v as! [Double]), (mv as! [Double])))
            let denom = Double(((lambda != 0.0) ? Double(abs(Double(lambda))) : 1.0))
            err = Double((Double(abs(Double((lambda - lambda_prev)))) / denom))
            lambda_prev = Double(lambda)
            iterations = _int((iterations &+ 1))
        }
        return PowerResult(eigenvalue: Double(lambda), eigenvector: (v as! [Double]))
    }
    let input_matrix: [[Double]] = ({
        var _arr: [[Double]] = []
        _arr = _append(_arr, ({
            var _arr: [Double] = []
            _arr = _append(_arr, 41.0)
            _arr = _append(_arr, 4.0)
            _arr = _append(_arr, 20.0)
            return _arr
        }() as! [Double]))
        _arr = _append(_arr, ({
            var _arr: [Double] = []
            _arr = _append(_arr, 4.0)
            _arr = _append(_arr, 26.0)
            _arr = _append(_arr, 30.0)
            return _arr
        }() as! [Double]))
        _arr = _append(_arr, ({
            var _arr: [Double] = []
            _arr = _append(_arr, 20.0)
            _arr = _append(_arr, 30.0)
            _arr = _append(_arr, 50.0)
            return _arr
        }() as! [Double]))
        return _arr
    }() as! [[Double]])
    let vector: [Double] = ({
        var _arr: [Double] = []
        _arr = _append(_arr, 41.0)
        _arr = _append(_arr, 4.0)
        _arr = _append(_arr, 20.0)
        return _arr
    }() as! [Double])
    let result = power_iteration((input_matrix as! [[Double]]), (vector as! [Double]), 0.000000000001, 100)
    print(_p(_p(result.eigenvalue)))
    print(_p("[" + result.eigenvector.map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
