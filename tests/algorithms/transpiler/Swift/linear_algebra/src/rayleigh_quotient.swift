// Generated by Mochi transpiler v0.10.62 on 2025-08-09 16:37:18 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
struct Complex: Codable {
    var re: Double
    var im: Double
    init() {
        self.re = 0
        self.im = 0
    }
    init(re: Double, im: Double) {
        self.re = re
        self.im = im
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func complex_conj(_ z: Complex) -> Complex {
        return Complex(re: Double(z.re), im: Double(-z.im))
    }
    func complex_eq(_ a: Complex, _ b: Complex) -> Bool {
        return ((a.re == b.re) && (a.im == b.im))
    }
    func complex_add(_ a: Complex, _ b: Complex) -> Complex {
        return Complex(re: Double((a.re + b.re)), im: Double((a.im + b.im)))
    }
    func complex_mul(_ a: Complex, _ b: Complex) -> Complex {
        let real = ((a.re * b.re) - (a.im * b.im))
        let imag = ((a.re * b.im) + (a.im * b.re))
        return Complex(re: Double(real), im: Double(imag))
    }
    func conj_vector(_ v: [Complex]) -> [Complex] {
        var res: [Complex] = ([] as! [Complex])
        var i = 0
        while (i < _int(((v).count))) {
            res = (_append(res, complex_conj((_idx(v, i) as! Complex))) as! [Complex])
            i = _int((i &+ 1))
        }
        return res
    }
    func vec_mat_mul(_ v: [Complex], _ m: [[Complex]]) -> [Complex] {
        var result: [Complex] = ([] as! [Complex])
        var col = 0
        while (col < _int((((_idx(m, 0) as! [Complex])).count))) {
            var sum = Complex(re: 0.0, im: 0.0)
            var row = 0
            while (row < _int(((v).count))) {
                sum = (complex_add((sum as! Complex), (complex_mul((_idx(v, row) as! Complex), (_idx(_idx(m, row)!, col) as! Complex)) as! Complex)) as! Complex)
                row = _int((row &+ 1))
            }
            result = (_append(result, sum) as! [Complex])
            col = _int((col &+ 1))
        }
        return result
    }
    func dot(_ a: [Complex], _ b: [Complex]) -> Complex {
        var sum = Complex(re: 0.0, im: 0.0)
        var i = 0
        while (i < _int(((a).count))) {
            sum = (complex_add((sum as! Complex), (complex_mul((_idx(a, i) as! Complex), (_idx(b, i) as! Complex)) as! Complex)) as! Complex)
            i = _int((i &+ 1))
        }
        return sum
    }
    func is_hermitian(_ m: [[Complex]]) -> Bool {
        var i = 0
        while (i < _int(((m).count))) {
            var j = 0
            while (j < _int(((m).count))) {
                if (!complex_eq((_idx(_idx(m, i)!, j) as! Complex), (complex_conj((_idx(_idx(m, j)!, i) as! Complex)) as! Complex))) {
                    return false
                }
                j = _int((j &+ 1))
            }
            i = _int((i &+ 1))
        }
        return true
    }
    func rayleigh_quotient(_ a: [[Complex]], _ v: [Complex]) -> Double {
        let v_star: [Complex] = (conj_vector((v as! [Complex])) as! [Complex])
        let v_star_dot: [Complex] = (vec_mat_mul((v_star as! [Complex]), (a as! [[Complex]])) as! [Complex])
        let num = dot((v_star_dot as! [Complex]), (v as! [Complex]))
        let den = dot((v_star as! [Complex]), (v as! [Complex]))
        return (num.re / den.re)
    }
    let a: [[Complex]] = ({
        var _arr: [[Complex]] = []
        _arr = _append(_arr, ({
            var _arr: [Complex] = []
            _arr = _append(_arr, Complex(re: 2.0, im: 0.0))
            _arr = _append(_arr, Complex(re: 2.0, im: 1.0))
            _arr = _append(_arr, Complex(re: 4.0, im: 0.0))
            return _arr
        }() as! [Complex]))
        _arr = _append(_arr, ({
            var _arr: [Complex] = []
            _arr = _append(_arr, Complex(re: 2.0, im: Double(-1.0)))
            _arr = _append(_arr, Complex(re: 3.0, im: 0.0))
            _arr = _append(_arr, Complex(re: 0.0, im: 1.0))
            return _arr
        }() as! [Complex]))
        _arr = _append(_arr, ({
            var _arr: [Complex] = []
            _arr = _append(_arr, Complex(re: 4.0, im: 0.0))
            _arr = _append(_arr, Complex(re: 0.0, im: Double(-1.0)))
            _arr = _append(_arr, Complex(re: 1.0, im: 0.0))
            return _arr
        }() as! [Complex]))
        return _arr
    }() as! [[Complex]])
    let v: [Complex] = ({
        var _arr: [Complex] = []
        _arr = _append(_arr, Complex(re: 1.0, im: 0.0))
        _arr = _append(_arr, Complex(re: 2.0, im: 0.0))
        _arr = _append(_arr, Complex(re: 3.0, im: 0.0))
        return _arr
    }() as! [Complex])
    if is_hermitian((a as! [[Complex]])) {
        let r1 = Double(rayleigh_quotient((a as! [[Complex]]), (v as! [Complex])))
        print(_p(r1))
        print(_p("\n"))
    }
    let b: [[Complex]] = ({
        var _arr: [[Complex]] = []
        _arr = _append(_arr, ({
            var _arr: [Complex] = []
            _arr = _append(_arr, Complex(re: 1.0, im: 0.0))
            _arr = _append(_arr, Complex(re: 2.0, im: 0.0))
            _arr = _append(_arr, Complex(re: 4.0, im: 0.0))
            return _arr
        }() as! [Complex]))
        _arr = _append(_arr, ({
            var _arr: [Complex] = []
            _arr = _append(_arr, Complex(re: 2.0, im: 0.0))
            _arr = _append(_arr, Complex(re: 3.0, im: 0.0))
            _arr = _append(_arr, Complex(re: Double(-1.0), im: 0.0))
            return _arr
        }() as! [Complex]))
        _arr = _append(_arr, ({
            var _arr: [Complex] = []
            _arr = _append(_arr, Complex(re: 4.0, im: 0.0))
            _arr = _append(_arr, Complex(re: Double(-1.0), im: 0.0))
            _arr = _append(_arr, Complex(re: 1.0, im: 0.0))
            return _arr
        }() as! [Complex]))
        return _arr
    }() as! [[Complex]])
    if is_hermitian((b as! [[Complex]])) {
        let r2 = Double(rayleigh_quotient((b as! [[Complex]]), (v as! [Complex])))
        print(_p(r2))
    }
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
