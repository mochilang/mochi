// Generated by Mochi transpiler v0.10.61 on 2025-08-08 16:01:09 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return nil
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
struct Vector: Codable {
    var components: [Double]
    init() {
        self.components = []
    }
    init(components: [Double]) {
        self.components = components
    }
}
struct Matrix: Codable {
    var data: [[Double]]
    var width: Int
    var height: Int
    init() {
        self.data = []
        self.width = 0
        self.height = 0
    }
    init(data: [[Double]], width: Int, height: Int) {
        self.data = data
        self.width = width
        self.height = height
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let PI: Double = 3.141592653589793
    var seed: Int = 123456789
    func rand() -> Int {
        seed = _int(((_int(((seed &* 1103515245) &+ 12345)) % 2147483648 + 2147483648) % 2147483648))
        return seed
    }
    func random_int(_ a: Int, _ b: Int) -> Int {
        let r = ((_int(rand()) % _int(((b &- a) &+ 1)) + _int(((b &- a) &+ 1))) % _int(((b &- a) &+ 1)))
        return (a &+ r)
    }
    func sqrtApprox(_ x: Double) -> Double {
        if (x <= 0.0) {
            return 0.0
        }
        var guess: Double = x
        var i: Int = 0
        while (i < 20) {
            guess = Double((Double((guess + (x / guess))) / 2.0))
            i = _int((i &+ 1))
        }
        return guess
    }
    func arcsin_taylor(_ x: Double) -> Double {
        var term: Double = x
        var sum: Double = x
        var n: Int = 1
        while (n < 10) {
            let num = ((((Double(((2.0 * Double(n)) - 1.0)) * Double(((2.0 * Double(n)) - 1.0))) * x) * x) * term)
            let den = (Double((2.0 * Double(n))) * Double(((2.0 * Double(n)) + 1.0)))
            term = Double((num / den))
            sum = Double((sum + term))
            n = _int((n &+ 1))
        }
        return sum
    }
    func acos_taylor(_ x: Double) -> Double {
        return ((PI / 2.0) - Double(arcsin_taylor(Double(x))))
    }
    func vector_len(_ v: Vector) -> Int {
        return _int(((v.components).count))
    }
    func vector_to_string(_ v: Vector) -> String {
        var s: String = "("
        var i: Int = 0
        while (i < _int(((v.components).count))) {
            s = ((s + _p(Double(_idx(v.components, i)))) as! String)
            if (i < (_int(((v.components).count)) &- 1)) {
                s = ((s + ",") as! String)
            }
            i = _int((i &+ 1))
        }
        s = ((s + ")") as! String)
        return s
    }
    func vector_add(_ a: Vector, _ b: Vector) -> Vector {
        let size = _int(vector_len((a as! Vector)))
        if (size != _int(vector_len((b as! Vector)))) {
            return Vector(components: [])
        }
        var res: [Double] = ([] as! [Double])
        var i: Int = 0
        while (i < size) {
            res = (_append(res, (Double(_idx(a.components, i)) + Double(_idx(b.components, i)))) as! [Double])
            i = _int((i &+ 1))
        }
        return Vector(components: res)
    }
    func vector_sub(_ a: Vector, _ b: Vector) -> Vector {
        let size = _int(vector_len((a as! Vector)))
        if (size != _int(vector_len((b as! Vector)))) {
            return Vector(components: [])
        }
        var res: [Double] = ([] as! [Double])
        var i: Int = 0
        while (i < size) {
            res = (_append(res, (Double(_idx(a.components, i)) - Double(_idx(b.components, i)))) as! [Double])
            i = _int((i &+ 1))
        }
        return Vector(components: res)
    }
    func vector_eq(_ a: Vector, _ b: Vector) -> Bool {
        if (_int(vector_len((a as! Vector))) != _int(vector_len((b as! Vector)))) {
            return false
        }
        var i: Int = 0
        while (i < _int(vector_len((a as! Vector)))) {
            if (Double(_idx(a.components, i)) != Double(_idx(b.components, i))) {
                return false
            }
            i = _int((i &+ 1))
        }
        return true
    }
    func vector_mul_scalar(_ v: Vector, _ s: Double) -> Vector {
        var res: [Double] = ([] as! [Double])
        var i: Int = 0
        while (i < _int(vector_len((v as! Vector)))) {
            res = (_append(res, (Double(_idx(v.components, i)) * s)) as! [Double])
            i = _int((i &+ 1))
        }
        return Vector(components: res)
    }
    func vector_dot(_ a: Vector, _ b: Vector) -> Double {
        let size = _int(vector_len((a as! Vector)))
        if (size != _int(vector_len((b as! Vector)))) {
            return 0.0
        }
        var sum: Double = 0.0
        var i: Int = 0
        while (i < size) {
            sum = Double((sum + (Double(_idx(a.components, i)) * Double(_idx(b.components, i)))))
            i = _int((i &+ 1))
        }
        return sum
    }
    func vector_copy(_ v: Vector) -> Vector {
        var res: [Double] = ([] as! [Double])
        var i: Int = 0
        while (i < _int(vector_len((v as! Vector)))) {
            res = (_append(res, Double(_idx(v.components, i))) as! [Double])
            i = _int((i &+ 1))
        }
        return Vector(components: res)
    }
    func vector_component(_ v: Vector, _ idx: Int) -> Double {
        return Double(_idx(v.components, idx))
    }
    func vector_change_component(_ v: Vector, _ pos: Int, _ value: Double) -> Vector {
        var comps: [Double] = v.components
        comps = _set(comps, pos, Double(value))
        return Vector(components: comps)
    }
    func vector_euclidean_length(_ v: Vector) -> Double {
        var sum: Double = 0.0
        var i: Int = 0
        while (i < _int(((v.components).count))) {
            sum = Double((sum + (Double(_idx(v.components, i)) * Double(_idx(v.components, i)))))
            i = _int((i &+ 1))
        }
        var result: Double = Double(sqrtApprox(Double(sum)))
        return result
    }
    func vector_angle(_ a: Vector, _ b: Vector, _ deg: Bool) -> Double {
        let num = Double(vector_dot((a as! Vector), (b as! Vector)))
        let den = (Double(vector_euclidean_length((a as! Vector))) * Double(vector_euclidean_length((b as! Vector))))
        var ang: Double = Double(acos_taylor(Double((num / den))))
        if deg {
            ang = Double(((ang * 180.0) / PI))
        }
        return ang
    }
    func zero_vector(_ d: Int) -> Vector {
        var res: [Double] = ([] as! [Double])
        var i: Int = 0
        while (i < d) {
            res = (_append(res, 0.0) as! [Double])
            i = _int((i &+ 1))
        }
        return Vector(components: res)
    }
    func unit_basis_vector(_ d: Int, _ pos: Int) -> Vector {
        var res: [Double] = ([] as! [Double])
        var i: Int = 0
        while (i < d) {
            if (i == pos) {
                res = (_append(res, 1.0) as! [Double])
            } else {
                res = (_append(res, 0.0) as! [Double])
            }
            i = _int((i &+ 1))
        }
        return Vector(components: res)
    }
    func axpy(_ s: Double, _ x: Vector, _ y: Vector) -> Vector {
        return vector_add((vector_mul_scalar((x as! Vector), Double(s)) as! Vector), (y as! Vector))
    }
    func random_vector(_ n: Int, _ a: Int, _ b: Int) -> Vector {
        var res: [Double] = ([] as! [Double])
        var i: Int = 0
        while (i < n) {
            res = (_append(res, Double(random_int(a, b))) as! [Double])
            i = _int((i &+ 1))
        }
        return Vector(components: res)
    }
    func matrix_to_string(_ m: Matrix) -> String {
        var ans: String = ""
        var i: Int = 0
        while (i < m.height) {
            ans = ((ans + "|") as! String)
            var j: Int = 0
            while (j < m.width) {
                ans = ((ans + _p(Double(_idx(_idx(m.data, i), j)))) as! String)
                if (j < (m.width &- 1)) {
                    ans = ((ans + ",") as! String)
                }
                j = _int((j &+ 1))
            }
            ans = ((ans + "|\n") as! String)
            i = _int((i &+ 1))
        }
        return ans
    }
    func matrix_add(_ a: Matrix, _ b: Matrix) -> Matrix {
        if ((a.width != b.width) || (a.height != b.height)) {
            return Matrix(data: [], width: 0, height: 0)
        }
        var mat: [[Double]] = ([] as! [[Double]])
        var i: Int = 0
        while (i < a.height) {
            var row: [Double] = ([] as! [Double])
            var j: Int = 0
            while (j < a.width) {
                row = (_append(row, (Double(_idx(_idx(a.data, i), j)) + Double(_idx(_idx(b.data, i), j)))) as! [Double])
                j = _int((j &+ 1))
            }
            mat = (_append(mat, row) as! [[Double]])
            i = _int((i &+ 1))
        }
        return Matrix(data: mat, width: a.width, height: a.height)
    }
    func matrix_sub(_ a: Matrix, _ b: Matrix) -> Matrix {
        if ((a.width != b.width) || (a.height != b.height)) {
            return Matrix(data: [], width: 0, height: 0)
        }
        var mat: [[Double]] = ([] as! [[Double]])
        var i: Int = 0
        while (i < a.height) {
            var row: [Double] = ([] as! [Double])
            var j: Int = 0
            while (j < a.width) {
                row = (_append(row, (Double(_idx(_idx(a.data, i), j)) - Double(_idx(_idx(b.data, i), j)))) as! [Double])
                j = _int((j &+ 1))
            }
            mat = (_append(mat, row) as! [[Double]])
            i = _int((i &+ 1))
        }
        return Matrix(data: mat, width: a.width, height: a.height)
    }
    func matrix_mul_vector(_ m: Matrix, _ v: Vector) -> Vector {
        if (_int(((v.components).count)) != m.width) {
            return Vector(components: [])
        }
        var res: Vector = zero_vector(m.height)
        var i: Int = 0
        while (i < m.height) {
            var sum: Double = 0.0
            var j: Int = 0
            while (j < m.width) {
                sum = Double((sum + (Double(_idx(_idx(m.data, i), j)) * Double(_idx(v.components, j)))))
                j = _int((j &+ 1))
            }
            res = (vector_change_component((res as! Vector), i, Double(sum)) as! Vector)
            i = _int((i &+ 1))
        }
        return res
    }
    func matrix_mul_scalar(_ m: Matrix, _ s: Double) -> Matrix {
        var mat: [[Double]] = ([] as! [[Double]])
        var i: Int = 0
        while (i < m.height) {
            var row: [Double] = ([] as! [Double])
            var j: Int = 0
            while (j < m.width) {
                row = (_append(row, (Double(_idx(_idx(m.data, i), j)) * s)) as! [Double])
                j = _int((j &+ 1))
            }
            mat = (_append(mat, row) as! [[Double]])
            i = _int((i &+ 1))
        }
        return Matrix(data: mat, width: m.width, height: m.height)
    }
    func matrix_component(_ m: Matrix, _ x: Int, _ y: Int) -> Double {
        return Double(_idx(_idx(m.data, x), y))
    }
    func matrix_change_component(_ m: Matrix, _ x: Int, _ y: Int, _ value: Double) -> Matrix {
        var data: [[Double]] = m.data
        _idx(_idx(data, x), y) = Double(value)
        return Matrix(data: data, width: m.width, height: m.height)
    }
    func matrix_minor(_ m: Matrix, _ x: Int, _ y: Int) -> Double {
        if (m.height != m.width) {
            return 0.0
        }
        var minor: [[Double]] = ([] as! [[Double]])
        var i: Int = 0
        while (i < m.height) {
            if (i != x) {
                var row: [Double] = ([] as! [Double])
                var j: Int = 0
                while (j < m.width) {
                    if (j != y) {
                        row = (_append(row, Double(_idx(_idx(m.data, i), j))) as! [Double])
                    }
                    j = _int((j &+ 1))
                }
                minor = (_append(minor, row) as! [[Double]])
            }
            i = _int((i &+ 1))
        }
        let sub = Matrix(data: minor, width: (m.width &- 1), height: (m.height &- 1))
        return Double(matrix_determinant((sub as! Matrix)))
    }
    func matrix_cofactor(_ m: Matrix, _ x: Int, _ y: Int) -> Double {
        let sign = Double(((((_int((x &+ y)) % 2 + 2) % 2) == 0) ? 1.0 : -1.0))
        return (sign * Double(matrix_minor((m as! Matrix), x, y)))
    }
    func matrix_determinant(_ m: Matrix) -> Double {
        if (m.height != m.width) {
            return 0.0
        }
        if (m.height == 0) {
            return 0.0
        }
        if (m.height == 1) {
            return Double(_idx(_idx(m.data, 0), 0))
        }
        if (m.height == 2) {
            return ((Double(_idx(_idx(m.data, 0), 0)) * Double(_idx(_idx(m.data, 1), 1))) - (Double(_idx(_idx(m.data, 0), 1)) * Double(_idx(_idx(m.data, 1), 0))))
        }
        var sum: Double = 0.0
        var y: Int = 0
        while (y < m.width) {
            sum = Double((sum + (Double(_idx(_idx(m.data, 0), y)) * Double(matrix_cofactor((m as! Matrix), 0, y)))))
            y = _int((y &+ 1))
        }
        return sum
    }
    func square_zero_matrix(_ n: Int) -> Matrix {
        var mat: [[Double]] = ([] as! [[Double]])
        var i: Int = 0
        while (i < n) {
            var row: [Double] = ([] as! [Double])
            var j: Int = 0
            while (j < n) {
                row = (_append(row, 0.0) as! [Double])
                j = _int((j &+ 1))
            }
            mat = (_append(mat, row) as! [[Double]])
            i = _int((i &+ 1))
        }
        return Matrix(data: mat, width: n, height: n)
    }
    func random_matrix(_ w: Int, _ h: Int, _ a: Int, _ b: Int) -> Matrix {
        var mat: [[Double]] = ([] as! [[Double]])
        var i: Int = 0
        while (i < h) {
            var row: [Double] = ([] as! [Double])
            var j: Int = 0
            while (j < w) {
                row = (_append(row, Double(random_int(a, b))) as! [Double])
                j = _int((j &+ 1))
            }
            mat = (_append(mat, row) as! [[Double]])
            i = _int((i &+ 1))
        }
        return Matrix(data: mat, width: w, height: h)
    }
    func main() {
        let v1 = Vector(components: ([1.0, 2.0, 3.0] as! [Double]))
        let v2 = Vector(components: ([4.0, 5.0, 6.0] as! [Double]))
        print(_p(String(describing: vector_to_string((vector_add((v1 as! Vector), (v2 as! Vector)) as! Vector)))))
        print(_p(_p(Double(vector_dot((v1 as! Vector), (v2 as! Vector))))))
        print(_p(_p(Double(vector_euclidean_length((v1 as! Vector))))))
        let m = Matrix(data: ([([1.0, 2.0] as! [Double]), ([3.0, 4.0] as! [Double])] as! [[Double]]), width: 2, height: 2)
        print(_p(_p(Double(matrix_determinant((m as! Matrix))))))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
