// Generated by Mochi transpiler v0.10.61 on 2025-08-08 16:00:58 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return nil
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func retroactive_resolution(_ coefficients: [[Double]], _ vector: [[Double]]) -> [[Double]] {
        let rows = _int(((coefficients).count))
        var x: [[Double]] = ([] as! [[Double]])
        var i: Int = 0
        while (i < rows) {
            var inner: [Double] = ([] as! [Double])
            inner = (_append(inner, 0.0) as! [Double])
            x = (_append(x, inner) as! [[Double]])
            i = _int((i &+ 1))
        }
        var r: Int = (rows &- 1)
        while (r >= 0) {
            var total: Double = 0.0
            var c: Int = (r &+ 1)
            while (c < rows) {
                total = Double((total + (Double(_idx(_idx(coefficients, r), c)) * Double(_idx(_idx(x, c), 0)))))
                c = _int((c &+ 1))
            }
            _idx(_idx(x, r), 0) = Double((Double((Double(_idx(_idx(vector, r), 0)) - total)) / Double(_idx(_idx(coefficients, r), r))))
            r = _int((r &- 1))
        }
        return x
    }
    func gaussian_elimination(_ coefficients: [[Double]], _ vector: [[Double]]) -> [[Double]] {
        let rows = _int(((coefficients).count))
        let columns = _int((((_idx(coefficients, 0) as! [Double])).count))
        if (rows != columns) {
            return ([] as! [[Double]])
        }
        var augmented: [[Double]] = ([] as! [[Double]])
        var i: Int = 0
        while (i < rows) {
            var row: [Double] = ([] as! [Double])
            var j: Int = 0
            while (j < columns) {
                row = (_append(row, Double(_idx(_idx(coefficients, i), j))) as! [Double])
                j = _int((j &+ 1))
            }
            row = (_append(row, Double(_idx(_idx(vector, i), 0))) as! [Double])
            augmented = (_append(augmented, row) as! [[Double]])
            i = _int((i &+ 1))
        }
        var row_idx: Int = 0
        while (row_idx < (rows &- 1)) {
            let pivot = Double(_idx(_idx(augmented, row_idx), row_idx))
            var col: Int = (row_idx &+ 1)
            while (col < rows) {
                let factor = (Double(_idx(_idx(augmented, col), row_idx)) / pivot)
                var k: Int = row_idx
                while (k < (columns &+ 1)) {
                    _idx(_idx(augmented, col), k) = Double((Double(_idx(_idx(augmented, col), k)) - (factor * Double(_idx(_idx(augmented, row_idx), k)))))
                    k = _int((k &+ 1))
                }
                col = _int((col &+ 1))
            }
            row_idx = _int((row_idx &+ 1))
        }
        var coeffs: [[Double]] = ([] as! [[Double]])
        var vec: [[Double]] = ([] as! [[Double]])
        var r: Int = 0
        while (r < rows) {
            var row: [Double] = ([] as! [Double])
            var c: Int = 0
            while (c < columns) {
                row = (_append(row, Double(_idx(_idx(augmented, r), c))) as! [Double])
                c = _int((c &+ 1))
            }
            coeffs = (_append(coeffs, row) as! [[Double]])
            vec = (_append(vec, ([Double(_idx(_idx(augmented, r), columns))] as! [Double])) as! [[Double]])
            r = _int((r &+ 1))
        }
        let x: [[Double]] = (retroactive_resolution((coeffs as! [[Double]]), (vec as! [[Double]])) as! [[Double]])
        return x
    }
    print(_p("[" + (gaussian_elimination(([([1.0, -4.0, -2.0] as! [Double]), ([5.0, 2.0, -2.0] as! [Double]), ([1.0, -1.0, 0.0] as! [Double])] as! [[Double]]), ([([-2.0] as! [Double]), ([-3.0] as! [Double]), ([4.0] as! [Double])] as! [[Double]])) as! [[Double]]).map{ if let s = $0 as? String { "\"" + s.replacingOccurrences(of: "\"", with: "\\\"") + "\"" } else { _p($0) } }.joined(separator: ", ") + "]"))
    print(_p("[" + (gaussian_elimination(([([1.0, 2.0] as! [Double]), ([5.0, 2.0] as! [Double])] as! [[Double]]), ([([5.0] as! [Double]), ([5.0] as! [Double])] as! [[Double]])) as! [[Double]]).map{ if let s = $0 as? String { "\"" + s.replacingOccurrences(of: "\"", with: "\\\"") + "\"" } else { _p($0) } }.joined(separator: ", ") + "]"))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
