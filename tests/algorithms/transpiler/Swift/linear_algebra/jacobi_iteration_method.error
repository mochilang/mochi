exit status 1
/tmp/TestSwiftTranspiler_Algorithms_Golden483_linear_algebra_jacobi_iteration_method2974117338/001/main.swift:90:65: error: cannot convert value of type '[Double]?' to expected argument type '[[Double]?]'
 88 |             while (j < n) {
 89 |                 if (i != j) {
 90 |                     sum = Double((sum + Double(absf(Double(_idx(_idx(matrix, i), j))))))
    |                                                                 `- error: cannot convert value of type '[Double]?' to expected argument type '[[Double]?]'
 91 |                 }
 92 |                 j = _int((j &+ 1))

/tmp/TestSwiftTranspiler_Algorithms_Golden483_linear_algebra_jacobi_iteration_method2974117338/001/main.swift:94:41: error: cannot convert value of type '[Double]?' to expected argument type '[[Double]?]'
 92 |                 j = _int((j &+ 1))
 93 |             }
 94 |             if (Double(absf(Double(_idx(_idx(matrix, i), i)))) <= sum) {
    |                                         `- error: cannot convert value of type '[Double]?' to expected argument type '[[Double]?]'
 95 |                 _ = fatalError("Coefficient matrix is not strictly diagonally dominant")
 96 |             }

/tmp/TestSwiftTranspiler_Algorithms_Golden483_linear_algebra_jacobi_iteration_method2974117338/001/main.swift:114:46: warning: forced cast from '[Double]?' to '[Double]' only unwraps optionals; did you mean to use '!'?
112 |         var r: Int = 0
113 |         while (r < n) {
114 |             if (_int((((_idx(coefficient, r) as! [Double])).count)) != n) {
    |                                              `- warning: forced cast from '[Double]?' to '[Double]' only unwraps optionals; did you mean to use '!'?
115 |                 _ = fatalError("Coefficient matrix must be square")
116 |             }

/tmp/TestSwiftTranspiler_Algorithms_Golden483_linear_algebra_jacobi_iteration_method2974117338/001/main.swift:122:55: warning: forced cast of '[[Double]]' to same type has no effect
120 |             _ = fatalError("Iterations must be at least 1")
121 |         }
122 |         _ = strictly_diagonally_dominant((coefficient as! [[Double]]))
    |                                                       `- warning: forced cast of '[[Double]]' to same type has no effect
123 |         var x: [Double] = init_val
124 |         var k: Int = 0

/tmp/TestSwiftTranspiler_Algorithms_Golden483_linear_algebra_jacobi_iteration_method2974117338/001/main.swift:133:58: error: cannot convert value of type '[Double]?' to expected argument type '[[Double]?]'
131 |                 while (j < n) {
132 |                     if (i != j) {
133 |                         sum = Double((sum + (Double(_idx(_idx(coefficient, i), j)) * Double(_idx(x, j)))))
    |                                                          `- error: cannot convert value of type '[Double]?' to expected argument type '[[Double]?]'
134 |                     }
135 |                     j = _int((j &+ 1))

/tmp/TestSwiftTranspiler_Algorithms_Golden483_linear_algebra_jacobi_iteration_method2974117338/001/main.swift:137:94: error: cannot convert value of type '[Double]?' to expected argument type '[[Double]?]'
135 |                     j = _int((j &+ 1))
136 |                 }
137 |                 var value: Double = (Double((Double(_idx(constant, i)) - sum)) / Double(_idx(_idx(coefficient, i), i)))
    |                                                                                              `- error: cannot convert value of type '[Double]?' to expected argument type '[[Double]?]'
138 |                 new_x = (_append(new_x, value) as! [Double])
139 |                 i = _int((i &+ 1))

/tmp/TestSwiftTranspiler_Algorithms_Golden483_linear_algebra_jacobi_iteration_method2974117338/001/main.swift:141:24: warning: forced cast of '[Double]' to same type has no effect
139 |                 i = _int((i &+ 1))
140 |             }
141 |             x = (new_x as! [Double])
    |                        `- warning: forced cast of '[Double]' to same type has no effect
142 |             k = _int((k &+ 1))
143 |         }

/tmp/TestSwiftTranspiler_Algorithms_Golden483_linear_algebra_jacobi_iteration_method2974117338/001/main.swift:150:66: warning: forced cast of '[[Double]]' to same type has no effect
148 |     let init_val: [Double] = ([0.5, -0.5, -0.5] as! [Double])
149 |     let iterations = 3
150 |     let result: [Double] = (jacobi_iteration_method((coefficient as! [[Double]]), (constant as! [Double]), (init_val as! [Double]), iterations) as! [Double])
    |                                                                  `- warning: forced cast of '[[Double]]' to same type has no effect
151 |     print(_p("[" + result.map{ if let s = $0 as? String { "\"" + s.replacingOccurrences(of: "\"", with: "\\\"") + "\"" } else { _p($0) } }.joined(separator: ", ") + "]"))
152 |     let _benchEnd = _now()

/tmp/TestSwiftTranspiler_Algorithms_Golden483_linear_algebra_jacobi_iteration_method2974117338/001/main.swift:150:93: warning: forced cast of '[Double]' to same type has no effect
148 |     let init_val: [Double] = ([0.5, -0.5, -0.5] as! [Double])
149 |     let iterations = 3
150 |     let result: [Double] = (jacobi_iteration_method((coefficient as! [[Double]]), (constant as! [Double]), (init_val as! [Double]), iterations) as! [Double])
    |                                                                                             `- warning: forced cast of '[Double]' to same type has no effect
151 |     print(_p("[" + result.map{ if let s = $0 as? String { "\"" + s.replacingOccurrences(of: "\"", with: "\\\"") + "\"" } else { _p($0) } }.joined(separator: ", ") + "]"))
152 |     let _benchEnd = _now()

/tmp/TestSwiftTranspiler_Algorithms_Golden483_linear_algebra_jacobi_iteration_method2974117338/001/main.swift:150:118: warning: forced cast of '[Double]' to same type has no effect
148 |     let init_val: [Double] = ([0.5, -0.5, -0.5] as! [Double])
149 |     let iterations = 3
150 |     let result: [Double] = (jacobi_iteration_method((coefficient as! [[Double]]), (constant as! [Double]), (init_val as! [Double]), iterations) as! [Double])
    |                                                                                                                      `- warning: forced cast of '[Double]' to same type has no effect
151 |     print(_p("[" + result.map{ if let s = $0 as? String { "\"" + s.replacingOccurrences(of: "\"", with: "\\\"") + "\"" } else { _p($0) } }.joined(separator: ", ") + "]"))
152 |     let _benchEnd = _now()

/tmp/TestSwiftTranspiler_Algorithms_Golden483_linear_algebra_jacobi_iteration_method2974117338/001/main.swift:150:145: warning: forced cast of '[Double]' to same type has no effect
148 |     let init_val: [Double] = ([0.5, -0.5, -0.5] as! [Double])
149 |     let iterations = 3
150 |     let result: [Double] = (jacobi_iteration_method((coefficient as! [[Double]]), (constant as! [Double]), (init_val as! [Double]), iterations) as! [Double])
    |                                                                                                                                                 `- warning: forced cast of '[Double]' to same type has no effect
151 |     print(_p("[" + result.map{ if let s = $0 as? String { "\"" + s.replacingOccurrences(of: "\"", with: "\\\"") + "\"" } else { _p($0) } }.joined(separator: ", ") + "]"))
152 |     let _benchEnd = _now()

/tmp/TestSwiftTranspiler_Algorithms_Golden483_linear_algebra_jacobi_iteration_method2974117338/001/main.swift:151:46: warning: cast from 'Double' to unrelated type 'String' always fails
149 |     let iterations = 3
150 |     let result: [Double] = (jacobi_iteration_method((coefficient as! [[Double]]), (constant as! [Double]), (init_val as! [Double]), iterations) as! [Double])
151 |     print(_p("[" + result.map{ if let s = $0 as? String { "\"" + s.replacingOccurrences(of: "\"", with: "\\\"") + "\"" } else { _p($0) } }.joined(separator: ", ") + "]"))
    |                                              `- warning: cast from 'Double' to unrelated type 'String' always fails
152 |     let _benchEnd = _now()
153 |     let _benchMemEnd = _mem()
