// Generated by Mochi transpiler v0.10.62 on 2025-08-09 16:36:53 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func absf(_ x: Double) -> Double {
        return Double(((x < 0.0) ? -x : x))
    }
    func strictly_diagonally_dominant(_ matrix: [[Double]]) -> Bool {
        var n = _int(((matrix).count))
        var i = 0
        while (i < n) {
            var sum = 0.0
            var j = 0
            while (j < n) {
                if (i != j) {
                    sum = Double((sum + Double(absf(Double(_idx(_idx(matrix, i)!, j))))))
                }
                j = _int((j &+ 1))
            }
            if (Double(absf(Double(_idx(_idx(matrix, i)!, i)))) <= sum) {
                _ = fatalError("Coefficient matrix is not strictly diagonally dominant")
            }
            i = _int((i &+ 1))
        }
        return true
    }
    func jacobi_iteration_method(_ coefficient: [[Double]], _ constant: [Double], _ init_val: [Double], _ iterations: Int) -> [Double] {
        let n = _int(((coefficient).count))
        if (n == 0) {
            _ = fatalError("Coefficient matrix cannot be empty")
        }
        if (_int(((constant).count)) != n) {
            _ = fatalError("Constant vector length must equal number of rows in coefficient matrix")
        }
        if (_int(((init_val).count)) != n) {
            _ = fatalError("Initial values count must match matrix size")
        }
        var r = 0
        while (r < n) {
            if (_int((((_idx(coefficient, r) as! [Double])).count)) != n) {
                _ = fatalError("Coefficient matrix must be square")
            }
            r = _int((r &+ 1))
        }
        if (iterations <= 0) {
            _ = fatalError("Iterations must be at least 1")
        }
        _ = strictly_diagonally_dominant((coefficient as! [[Double]]))
        var x = init_val
        var k = 0
        while (k < iterations) {
            var new_x: [Double] = ([] as! [Double])
            var i = 0
            while (i < n) {
                var sum = 0.0
                var j = 0
                while (j < n) {
                    if (i != j) {
                        sum = Double((sum + (Double(_idx(_idx(coefficient, i)!, j)) * Double(_idx(x, j)))))
                    }
                    j = _int((j &+ 1))
                }
                var value = (Double((Double(_idx(constant, i)) - sum)) / Double(_idx(_idx(coefficient, i)!, i)))
                new_x = (_append(new_x, value) as! [Double])
                i = _int((i &+ 1))
            }
            x = (new_x as! [Double])
            k = _int((k &+ 1))
        }
        return x
    }
    let coefficient: [[Double]] = ({
        var _arr: [[Double]] = []
        _arr = _append(_arr, ({
            var _arr: [Double] = []
            _arr = _append(_arr, 4.0)
            _arr = _append(_arr, 1.0)
            _arr = _append(_arr, 1.0)
            return _arr
        }() as! [Double]))
        _arr = _append(_arr, ({
            var _arr: [Double] = []
            _arr = _append(_arr, 1.0)
            _arr = _append(_arr, 5.0)
            _arr = _append(_arr, 2.0)
            return _arr
        }() as! [Double]))
        _arr = _append(_arr, ({
            var _arr: [Double] = []
            _arr = _append(_arr, 1.0)
            _arr = _append(_arr, 2.0)
            _arr = _append(_arr, 4.0)
            return _arr
        }() as! [Double]))
        return _arr
    }() as! [[Double]])
    let constant: [Double] = ({
        var _arr: [Double] = []
        _arr = _append(_arr, 2.0)
        _arr = _append(_arr, -6.0)
        _arr = _append(_arr, -4.0)
        return _arr
    }() as! [Double])
    let init_val: [Double] = ({
        var _arr: [Double] = []
        _arr = _append(_arr, 0.5)
        _arr = _append(_arr, -0.5)
        _arr = _append(_arr, -0.5)
        return _arr
    }() as! [Double])
    let iterations = 3
    let result: [Double] = (jacobi_iteration_method((coefficient as! [[Double]]), (constant as! [Double]), (init_val as! [Double]), iterations) as! [Double])
    print(_p("[" + result.map{ if let s = $0 as? String { "\"" + s.replacingOccurrences(of: "\"", with: "\\\"") + "\"" } else { _p($0) } }.joined(separator: ", ") + "]"))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
