// Generated by Mochi transpiler v0.10.65 on 2025-08-14 16:24:26 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func invert_matrix(_ matrix: [[Double]]) -> [[Double]] {
        let n = _int(((matrix).count))
        var aug: [[Double]] = ([] as! [[Double]])
        var i = 0
        while (i < n) {
            var row: [Double] = ([] as! [Double])
            var j = 0
            while (j < n) {
                row = (_append(row, Double(_idx(_idx(matrix, i)!, j))) as! [Double])
                j = _int((j &+ 1))
            }
            var k = 0
            while (k < n) {
                if (i == k) {
                    row = (_append(row, 1.0) as! [Double])
                } else {
                    row = (_append(row, 0.0) as! [Double])
                }
                k = _int((k &+ 1))
            }
            aug = (_append(aug, row) as! [[Double]])
            i = _int((i &+ 1))
        }
        var col = 0
        while (col < n) {
            var pivot_row = col
            var r = col
            while (r < n) {
                if (Double(_idx(_idx(aug, r)!, col)) != 0.0) {
                    pivot_row = Int(r)
                    break
                }
                r = _int((r &+ 1))
            }
            if (Double(_idx(_idx(aug, pivot_row)!, col)) == 0.0) {
                _ = fatalError("Matrix is not invertible")
            }
            if (pivot_row != col) {
                let temp: [Double] = (_idx(aug, col) as! [Double])
                aug = _set(aug, col, (_idx(aug, pivot_row) as! [Double]))
                aug = _set(aug, pivot_row, (temp as! [Double]))
            }
            let pivot = Double(_idx(_idx(aug, col)!, col))
            var c = 0
            while (c < (2 &* n)) {
                var _tmp3 = (_idx(aug, col) as! [Double])
                _tmp3 = _set(_tmp3, c, Double((Double(_idx(_idx(aug, col)!, c)) / pivot)))
                aug = _set(aug, col, (_tmp3 as! [Double]))
                c = _int((c &+ 1))
            }
            var r2 = 0
            while (r2 < n) {
                if (r2 != col) {
                    let factor = Double(_idx(_idx(aug, r2)!, col))
                    var c2 = 0
                    while (c2 < (2 &* n)) {
                        var _tmp4 = (_idx(aug, r2) as! [Double])
                        _tmp4 = _set(_tmp4, c2, Double((Double(_idx(_idx(aug, r2)!, c2)) - (factor * Double(_idx(_idx(aug, col)!, c2))))))
                        aug = _set(aug, r2, (_tmp4 as! [Double]))
                        c2 = _int((c2 &+ 1))
                    }
                }
                r2 = _int((r2 &+ 1))
            }
            col = _int((col &+ 1))
        }
        var inv: [[Double]] = ([] as! [[Double]])
        var r3 = 0
        while (r3 < n) {
            var row: [Double] = ([] as! [Double])
            var c3 = 0
            while (c3 < n) {
                row = (_append(row, Double(_idx(_idx(aug, r3)!, (c3 &+ n)))) as! [Double])
                c3 = _int((c3 &+ 1))
            }
            inv = (_append(inv, row) as! [[Double]])
            r3 = _int((r3 &+ 1))
        }
        return inv
    }
    var mat: [[Double]] = ({
        var _arr: [[Double]] = []
        _arr = _append(_arr, ({
            var _arr: [Double] = []
            _arr = _append(_arr, 4.0)
            _arr = _append(_arr, 7.0)
            return _arr
        }() as! [Double]))
        _arr = _append(_arr, ({
            var _arr: [Double] = []
            _arr = _append(_arr, 2.0)
            _arr = _append(_arr, 6.0)
            return _arr
        }() as! [Double]))
        return _arr
    }() as! [[Double]])
    print(_p("Original Matrix:"))
    print(_p("[" + mat.map{ if let s = $0 as? String { "\"" + s.replacingOccurrences(of: "\"", with: "\\\"") + "\"" } else { _p($0) } }.joined(separator: ", ") + "]"))
    print(_p("Inverted Matrix:"))
    print(_p("[" + (invert_matrix((mat as! [[Double]])) as! [[Double]]).map{ if let s = $0 as? String { "\"" + s.replacingOccurrences(of: "\"", with: "\\\"") + "\"" } else { _p($0) } }.joined(separator: ", ") + "]"))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
