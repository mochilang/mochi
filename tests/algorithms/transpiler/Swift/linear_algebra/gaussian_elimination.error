exit status 1
/tmp/TestSwiftTranspiler_Algorithms_Golden482_linear_algebra_gaussian_elimination3574713989/001/main.swift:94:54: error: cannot convert value of type '[Double]?' to expected argument type '[[Double]?]'
 92 |             var c: Int = (r &+ 1)
 93 |             while (c < rows) {
 94 |                 total = Double((total + (Double(_idx(_idx(coefficients, r), c)) * Double(_idx(_idx(x, c), 0)))))
    |                                                      `- error: cannot convert value of type '[Double]?' to expected argument type '[[Double]?]'
 95 |                 c = _int((c &+ 1))
 96 |             }

/tmp/TestSwiftTranspiler_Algorithms_Golden482_linear_algebra_gaussian_elimination3574713989/001/main.swift:94:95: error: cannot convert value of type '[Double]?' to expected argument type '[[Double]?]'
 92 |             var c: Int = (r &+ 1)
 93 |             while (c < rows) {
 94 |                 total = Double((total + (Double(_idx(_idx(coefficients, r), c)) * Double(_idx(_idx(x, c), 0)))))
    |                                                                                               `- error: cannot convert value of type '[Double]?' to expected argument type '[[Double]?]'
 95 |                 c = _int((c &+ 1))
 96 |             }

/tmp/TestSwiftTranspiler_Algorithms_Golden482_linear_algebra_gaussian_elimination3574713989/001/main.swift:97:18: error: cannot convert value of type '[Double]?' to expected argument type '[[Double]?]'
 95 |                 c = _int((c &+ 1))
 96 |             }
 97 |             _idx(_idx(x, r), 0) = Double((Double((Double(_idx(_idx(vector, r), 0)) - total)) / Double(_idx(_idx(coefficients, r), r))))
    |                  `- error: cannot convert value of type '[Double]?' to expected argument type '[[Double]?]'
 98 |             r = _int((r &- 1))
 99 |         }

/tmp/TestSwiftTranspiler_Algorithms_Golden482_linear_algebra_gaussian_elimination3574713989/001/main.swift:97:35: error: cannot assign value of type 'Double' to type '[Double]?'
 95 |                 c = _int((c &+ 1))
 96 |             }
 97 |             _idx(_idx(x, r), 0) = Double((Double((Double(_idx(_idx(vector, r), 0)) - total)) / Double(_idx(_idx(coefficients, r), r))))
    |                                   `- error: cannot assign value of type 'Double' to type '[Double]?'
 98 |             r = _int((r &- 1))
 99 |         }

/tmp/TestSwiftTranspiler_Algorithms_Golden482_linear_algebra_gaussian_elimination3574713989/001/main.swift:97:63: error: cannot convert value of type '[Double]?' to expected argument type '[[Double]?]'
 95 |                 c = _int((c &+ 1))
 96 |             }
 97 |             _idx(_idx(x, r), 0) = Double((Double((Double(_idx(_idx(vector, r), 0)) - total)) / Double(_idx(_idx(coefficients, r), r))))
    |                                                               `- error: cannot convert value of type '[Double]?' to expected argument type '[[Double]?]'
 98 |             r = _int((r &- 1))
 99 |         }

/tmp/TestSwiftTranspiler_Algorithms_Golden482_linear_algebra_gaussian_elimination3574713989/001/main.swift:97:108: error: cannot convert value of type '[Double]?' to expected argument type '[[Double]?]'
 95 |                 c = _int((c &+ 1))
 96 |             }
 97 |             _idx(_idx(x, r), 0) = Double((Double((Double(_idx(_idx(vector, r), 0)) - total)) / Double(_idx(_idx(coefficients, r), r))))
    |                                                                                                            `- error: cannot convert value of type '[Double]?' to expected argument type '[[Double]?]'
 98 |             r = _int((r &- 1))
 99 |         }

/tmp/TestSwiftTranspiler_Algorithms_Golden482_linear_algebra_gaussian_elimination3574713989/001/main.swift:104:53: warning: forced cast from '[Double]?' to '[Double]' only unwraps optionals; did you mean to use '!'?
102 |     func gaussian_elimination(_ coefficients: [[Double]], _ vector: [[Double]]) -> [[Double]] {
103 |         let rows = _int(((coefficients).count))
104 |         let columns = _int((((_idx(coefficients, 0) as! [Double])).count))
    |                                                     `- warning: forced cast from '[Double]?' to '[Double]' only unwraps optionals; did you mean to use '!'?
105 |         if (rows != columns) {
106 |             return ([] as! [[Double]])

/tmp/TestSwiftTranspiler_Algorithms_Golden482_linear_algebra_gaussian_elimination3574713989/001/main.swift:114:49: error: cannot convert value of type '[Double]?' to expected argument type '[[Double]?]'
112 |             var j: Int = 0
113 |             while (j < columns) {
114 |                 row = (_append(row, Double(_idx(_idx(coefficients, i), j))) as! [Double])
    |                                                 `- error: cannot convert value of type '[Double]?' to expected argument type '[[Double]?]'
115 |                 j = _int((j &+ 1))
116 |             }

/tmp/TestSwiftTranspiler_Algorithms_Golden482_linear_algebra_gaussian_elimination3574713989/001/main.swift:117:45: error: cannot convert value of type '[Double]?' to expected argument type '[[Double]?]'
115 |                 j = _int((j &+ 1))
116 |             }
117 |             row = (_append(row, Double(_idx(_idx(vector, i), 0))) as! [Double])
    |                                             `- error: cannot convert value of type '[Double]?' to expected argument type '[[Double]?]'
118 |             augmented = (_append(augmented, row) as! [[Double]])
119 |             i = _int((i &+ 1))

/tmp/TestSwiftTranspiler_Algorithms_Golden482_linear_algebra_gaussian_elimination3574713989/001/main.swift:123:37: error: cannot convert value of type '[Double]?' to expected argument type '[[Double]?]'
121 |         var row_idx: Int = 0
122 |         while (row_idx < (rows &- 1)) {
123 |             let pivot = Double(_idx(_idx(augmented, row_idx), row_idx))
    |                                     `- error: cannot convert value of type '[Double]?' to expected argument type '[[Double]?]'
124 |             var col: Int = (row_idx &+ 1)
125 |             while (col < rows) {

/tmp/TestSwiftTranspiler_Algorithms_Golden482_linear_algebra_gaussian_elimination3574713989/001/main.swift:126:43: error: cannot convert value of type '[Double]?' to expected argument type '[[Double]?]'
124 |             var col: Int = (row_idx &+ 1)
125 |             while (col < rows) {
126 |                 let factor = (Double(_idx(_idx(augmented, col), row_idx)) / pivot)
    |                                           `- error: cannot convert value of type '[Double]?' to expected argument type '[[Double]?]'
127 |                 var k: Int = row_idx
128 |                 while (k < (columns &+ 1)) {

/tmp/TestSwiftTranspiler_Algorithms_Golden482_linear_algebra_gaussian_elimination3574713989/001/main.swift:129:26: error: cannot convert value of type '[Double]?' to expected argument type '[[Double]?]'
127 |                 var k: Int = row_idx
128 |                 while (k < (columns &+ 1)) {
129 |                     _idx(_idx(augmented, col), k) = Double((Double(_idx(_idx(augmented, col), k)) - (factor * Double(_idx(_idx(augmented, row_idx), k)))))
    |                          `- error: cannot convert value of type '[Double]?' to expected argument type '[[Double]?]'
130 |                     k = _int((k &+ 1))
131 |                 }

/tmp/TestSwiftTranspiler_Algorithms_Golden482_linear_algebra_gaussian_elimination3574713989/001/main.swift:129:73: error: cannot convert value of type '[Double]?' to expected argument type '[[Double]?]'
127 |                 var k: Int = row_idx
128 |                 while (k < (columns &+ 1)) {
129 |                     _idx(_idx(augmented, col), k) = Double((Double(_idx(_idx(augmented, col), k)) - (factor * Double(_idx(_idx(augmented, row_idx), k)))))
    |                                                                         `- error: cannot convert value of type '[Double]?' to expected argument type '[[Double]?]'
130 |                     k = _int((k &+ 1))
131 |                 }

/tmp/TestSwiftTranspiler_Algorithms_Golden482_linear_algebra_gaussian_elimination3574713989/001/main.swift:129:123: error: cannot convert value of type '[Double]?' to expected argument type '[[Double]?]'
127 |                 var k: Int = row_idx
128 |                 while (k < (columns &+ 1)) {
129 |                     _idx(_idx(augmented, col), k) = Double((Double(_idx(_idx(augmented, col), k)) - (factor * Double(_idx(_idx(augmented, row_idx), k)))))
    |                                                                                                                           `- error: cannot convert value of type '[Double]?' to expected argument type '[[Double]?]'
130 |                     k = _int((k &+ 1))
131 |                 }

/tmp/TestSwiftTranspiler_Algorithms_Golden482_linear_algebra_gaussian_elimination3574713989/001/main.swift:129:53: error: cannot assign value of type 'Double' to type '[Double]?'
127 |                 var k: Int = row_idx
128 |                 while (k < (columns &+ 1)) {
129 |                     _idx(_idx(augmented, col), k) = Double((Double(_idx(_idx(augmented, col), k)) - (factor * Double(_idx(_idx(augmented, row_idx), k)))))
    |                                                     `- error: cannot assign value of type 'Double' to type '[Double]?'
130 |                     k = _int((k &+ 1))
131 |                 }

/tmp/TestSwiftTranspiler_Algorithms_Golden482_linear_algebra_gaussian_elimination3574713989/001/main.swift:143:49: error: cannot convert value of type '[Double]?' to expected argument type '[[Double]?]'
141 |             var c: Int = 0
142 |             while (c < columns) {
143 |                 row = (_append(row, Double(_idx(_idx(augmented, r), c))) as! [Double])
    |                                                 `- error: cannot convert value of type '[Double]?' to expected argument type '[[Double]?]'
144 |                 c = _int((c &+ 1))
145 |             }

/tmp/TestSwiftTranspiler_Algorithms_Golden482_linear_algebra_gaussian_elimination3574713989/001/main.swift:147:47: error: cannot convert value of type '[Double]?' to expected argument type '[[Double]?]'
145 |             }
146 |             coeffs = (_append(coeffs, row) as! [[Double]])
147 |             vec = (_append(vec, ([Double(_idx(_idx(augmented, r), columns))] as! [Double])) as! [[Double]])
    |                                               `- error: cannot convert value of type '[Double]?' to expected argument type '[[Double]?]'
148 |             r = _int((r &+ 1))
149 |         }

/tmp/TestSwiftTranspiler_Algorithms_Golden482_linear_algebra_gaussian_elimination3574713989/001/main.swift:150:61: warning: forced cast of '[[Double]]' to same type has no effect
148 |             r = _int((r &+ 1))
149 |         }
150 |         let x: [[Double]] = (retroactive_resolution((coeffs as! [[Double]]), (vec as! [[Double]])) as! [[Double]])
    |                                                             `- warning: forced cast of '[[Double]]' to same type has no effect
151 |         return x
152 |     }

/tmp/TestSwiftTranspiler_Algorithms_Golden482_linear_algebra_gaussian_elimination3574713989/001/main.swift:150:83: warning: forced cast of '[[Double]]' to same type has no effect
148 |             r = _int((r &+ 1))
149 |         }
150 |         let x: [[Double]] = (retroactive_resolution((coeffs as! [[Double]]), (vec as! [[Double]])) as! [[Double]])
    |                                                                                   `- warning: forced cast of '[[Double]]' to same type has no effect
151 |         return x
152 |     }

/tmp/TestSwiftTranspiler_Algorithms_Golden482_linear_algebra_gaussian_elimination3574713989/001/main.swift:150:100: warning: forced cast of '[[Double]]' to same type has no effect
148 |             r = _int((r &+ 1))
149 |         }
150 |         let x: [[Double]] = (retroactive_resolution((coeffs as! [[Double]]), (vec as! [[Double]])) as! [[Double]])
    |                                                                                                    `- warning: forced cast of '[[Double]]' to same type has no effect
151 |         return x
152 |     }

/tmp/TestSwiftTranspiler_Algorithms_Golden482_linear_algebra_gaussian_elimination3574713989/001/main.swift:153:248: warning: forced cast of '[[Double]]' to same type has no effect
151 |         return x
152 |     }
153 |     print(_p("[" + (gaussian_elimination(([([1.0, -4.0, -2.0] as! [Double]), ([5.0, 2.0, -2.0] as! [Double]), ([1.0, -1.0, 0.0] as! [Double])] as! [[Double]]), ([([-2.0] as! [Double]), ([-3.0] as! [Double]), ([4.0] as! [Double])] as! [[Double]])) as! [[Double]]).map{ if let s = $0 as? String { "\"" + s.replacingOccurrences(of: "\"", with: "\\\"") + "\"" } else { _p($0) } }.joined(separator: ", ") + "]"))
    |                                                                                                                                                                                                                                                        `- warning: forced cast of '[[Double]]' to same type has no effect
154 |     print(_p("[" + (gaussian_elimination(([([1.0, 2.0] as! [Double]), ([5.0, 2.0] as! [Double])] as! [[Double]]), ([([5.0] as! [Double]), ([5.0] as! [Double])] as! [[Double]])) as! [[Double]]).map{ if let s = $0 as? String { "\"" + s.replacingOccurrences(of: "\"", with: "\\\"") + "\"" } else { _p($0) } }.joined(separator: ", ") + "]"))
155 |     let _benchEnd = _now()

/tmp/TestSwiftTranspiler_Algorithms_Golden482_linear_algebra_gaussian_elimination3574713989/001/main.swift:153:283: warning: cast from '[Double]' to unrelated type 'String' always fails
151 |         return x
152 |     }
153 |     print(_p("[" + (gaussian_elimination(([([1.0, -4.0, -2.0] as! [Double]), ([5.0, 2.0, -2.0] as! [Double]), ([1.0, -1.0, 0.0] as! [Double])] as! [[Double]]), ([([-2.0] as! [Double]), ([-3.0] as! [Double]), ([4.0] as! [Double])] as! [[Double]])) as! [[Double]]).map{ if let s = $0 as? String { "\"" + s.replacingOccurrences(of: "\"", with: "\\\"") + "\"" } else { _p($0) } }.joined(separator: ", ") + "]"))
    |                                                                                                                                                                                                                                                                                           `- warning: cast from '[Double]' to unrelated type 'String' always fails
154 |     print(_p("[" + (gaussian_elimination(([([1.0, 2.0] as! [Double]), ([5.0, 2.0] as! [Double])] as! [[Double]]), ([([5.0] as! [Double]), ([5.0] as! [Double])] as! [[Double]])) as! [[Double]]).map{ if let s = $0 as? String { "\"" + s.replacingOccurrences(of: "\"", with: "\\\"") + "\"" } else { _p($0) } }.joined(separator: ", ") + "]"))
155 |     let _benchEnd = _now()

/tmp/TestSwiftTranspiler_Algorithms_Golden482_linear_algebra_gaussian_elimination3574713989/001/main.swift:154:178: warning: forced cast of '[[Double]]' to same type has no effect
152 |     }
153 |     print(_p("[" + (gaussian_elimination(([([1.0, -4.0, -2.0] as! [Double]), ([5.0, 2.0, -2.0] as! [Double]), ([1.0, -1.0, 0.0] as! [Double])] as! [[Double]]), ([([-2.0] as! [Double]), ([-3.0] as! [Double]), ([4.0] as! [Double])] as! [[Double]])) as! [[Double]]).map{ if let s = $0 as? String { "\"" + s.replacingOccurrences(of: "\"", with: "\\\"") + "\"" } else { _p($0) } }.joined(separator: ", ") + "]"))
154 |     print(_p("[" + (gaussian_elimination(([([1.0, 2.0] as! [Double]), ([5.0, 2.0] as! [Double])] as! [[Double]]), ([([5.0] as! [Double]), ([5.0] as! [Double])] as! [[Double]])) as! [[Double]]).map{ if let s = $0 as? String { "\"" + s.replacingOccurrences(of: "\"", with: "\\\"") + "\"" } else { _p($0) } }.joined(separator: ", ") + "]"))
    |                                                                                                                                                                                  `- warning: forced cast of '[[Double]]' to same type has no effect
155 |     let _benchEnd = _now()
156 |     let _benchMemEnd = _mem()

/tmp/TestSwiftTranspiler_Algorithms_Golden482_linear_algebra_gaussian_elimination3574713989/001/main.swift:154:213: warning: cast from '[Double]' to unrelated type 'String' always fails
152 |     }
153 |     print(_p("[" + (gaussian_elimination(([([1.0, -4.0, -2.0] as! [Double]), ([5.0, 2.0, -2.0] as! [Double]), ([1.0, -1.0, 0.0] as! [Double])] as! [[Double]]), ([([-2.0] as! [Double]), ([-3.0] as! [Double]), ([4.0] as! [Double])] as! [[Double]])) as! [[Double]]).map{ if let s = $0 as? String { "\"" + s.replacingOccurrences(of: "\"", with: "\\\"") + "\"" } else { _p($0) } }.joined(separator: ", ") + "]"))
154 |     print(_p("[" + (gaussian_elimination(([([1.0, 2.0] as! [Double]), ([5.0, 2.0] as! [Double])] as! [[Double]]), ([([5.0] as! [Double]), ([5.0] as! [Double])] as! [[Double]])) as! [[Double]]).map{ if let s = $0 as? String { "\"" + s.replacingOccurrences(of: "\"", with: "\\\"") + "\"" } else { _p($0) } }.joined(separator: ", ") + "]"))
    |                                                                                                                                                                                                                     `- warning: cast from '[Double]' to unrelated type 'String' always fails
155 |     let _benchEnd = _now()
156 |     let _benchMemEnd = _mem()
