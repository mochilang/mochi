// Generated by Mochi transpiler v0.10.63 on 2025-08-11 16:25:50 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func interpolation_search(_ arr: [Int], _ item: Int) -> Int {
        var left = 0
        var right = (_int(((arr).count)) &- 1)
        while (left <= right) {
            if ((_idx(arr, left) as? Int ?? 0) == (_idx(arr, right) as? Int ?? 0)) {
                if ((_idx(arr, left) as? Int ?? 0) == item) {
                    return left
                }
                return -1
            }
            let point = (left &+ (_int((_int((item &- (_idx(arr, left) as? Int ?? 0))) &* _int((right &- left)))) / _int(((_idx(arr, right) as? Int ?? 0) &- (_idx(arr, left) as? Int ?? 0)))))
            if ((point < 0) || (point >= _int(((arr).count)))) {
                return -1
            }
            let current = (_idx(arr, point) as? Int ?? 0)
            if (current == item) {
                return point
            }
            if (point < left) {
                right = Int(left)
                left = Int(point)
            } else if (point > right) {
                left = Int(right)
                right = Int(point)
            } else if (item < current) {
                right = _int((point &- 1))
            } else {
                left = _int((point &+ 1))
            }
            
            
        }
        return -1
    }
    func interpolation_search_recursive(_ arr: [Int], _ item: Int, _ left: Int, _ right: Int) -> Int {
        if (left > right) {
            return -1
        }
        if ((_idx(arr, left) as? Int ?? 0) == (_idx(arr, right) as? Int ?? 0)) {
            if ((_idx(arr, left) as? Int ?? 0) == item) {
                return left
            }
            return -1
        }
        let point = (left &+ (_int((_int((item &- (_idx(arr, left) as? Int ?? 0))) &* _int((right &- left)))) / _int(((_idx(arr, right) as? Int ?? 0) &- (_idx(arr, left) as? Int ?? 0)))))
        if ((point < 0) || (point >= _int(((arr).count)))) {
            return -1
        }
        if ((_idx(arr, point) as? Int ?? 0) == item) {
            return point
        }
        if (point < left) {
            return _int(interpolation_search_recursive((arr as! [Int]), item, point, left))
        }
        if (point > right) {
            return _int(interpolation_search_recursive((arr as! [Int]), item, right, left))
        }
        if ((_idx(arr, point) as? Int ?? 0) > item) {
            return _int(interpolation_search_recursive((arr as! [Int]), item, left, (point &- 1)))
        }
        return _int(interpolation_search_recursive((arr as! [Int]), item, (point &+ 1), right))
    }
    func interpolation_search_by_recursion(_ arr: [Int], _ item: Int) -> Int {
        return _int(interpolation_search_recursive((arr as! [Int]), item, 0, (_int(((arr).count)) &- 1)))
    }
    print(_p(_p(_int(interpolation_search(({
        var _arr: [Int] = []
        _arr = _append(_arr, 1)
        _arr = _append(_arr, 2)
        _arr = _append(_arr, 3)
        _arr = _append(_arr, 4)
        _arr = _append(_arr, 5)
        return _arr
    }() as! [Int]), 2)))))
    print(_p(_p(_int(interpolation_search(({
        var _arr: [Int] = []
        _arr = _append(_arr, 1)
        _arr = _append(_arr, 2)
        _arr = _append(_arr, 3)
        _arr = _append(_arr, 4)
        _arr = _append(_arr, 5)
        return _arr
    }() as! [Int]), 6)))))
    print(_p(_p(_int(interpolation_search_by_recursion(({
        var _arr: [Int] = []
        _arr = _append(_arr, 0)
        _arr = _append(_arr, 5)
        _arr = _append(_arr, 7)
        _arr = _append(_arr, 10)
        _arr = _append(_arr, 15)
        return _arr
    }() as! [Int]), 5)))))
    print(_p(_p(_int(interpolation_search_by_recursion(({
        var _arr: [Int] = []
        _arr = _append(_arr, 0)
        _arr = _append(_arr, 5)
        _arr = _append(_arr, 7)
        _arr = _append(_arr, 10)
        _arr = _append(_arr, 15)
        return _arr
    }() as! [Int]), 100)))))
    print(_p(_p(_int(interpolation_search_by_recursion(({
        var _arr: [Int] = []
        _arr = _append(_arr, 5)
        _arr = _append(_arr, 5)
        _arr = _append(_arr, 5)
        _arr = _append(_arr, 5)
        _arr = _append(_arr, 5)
        return _arr
    }() as! [Int]), 3)))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
