// Generated by Mochi transpiler v0.10.63 on 2025-08-11 16:25:58 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func partition(_ data: [Int], _ pivot: Int) -> [[Int]] {
        var less: [Int] = ([] as! [Int])
        var equal: [Int] = ([] as! [Int])
        var greater: [Int] = ([] as! [Int])
        for i in 0..<_int(((data).count)) {
            let v = (_idx(data, i) as? Int ?? 0)
            if (v < pivot) {
                less = (_append(less, v) as! [Int])
            } else if (v > pivot) {
                greater = (_append(greater, v) as! [Int])
            } else {
                equal = (_append(equal, v) as! [Int])
            }
            
        }
        return ({
            var _arr: [[Int]] = []
            _arr = _append(_arr, less)
            _arr = _append(_arr, equal)
            _arr = _append(_arr, greater)
            return _arr
        }() as! [[Int]])
    }
    func quick_select(_ items: [Int], _ index: Int) -> Int {
        if ((index < 0) || (index >= _int(((items).count)))) {
            return -1
        }
        let pivot = (_idx(items, (_int(((items).count)) / 2)) as? Int ?? 0)
        let parts: [[Int]] = (partition((items as! [Int]), pivot) as! [[Int]])
        let smaller: [Int] = (_idx(parts, 0) as! [Int])
        let equal: [Int] = (_idx(parts, 1) as! [Int])
        let larger: [Int] = (_idx(parts, 2) as! [Int])
        let count = _int(((equal).count))
        let m = _int(((smaller).count))
        if ((m <= index) && (index < (m &+ count))) {
            return pivot
        } else if (index < m) {
            return _int(quick_select((smaller as! [Int]), index))
        } else {
            return _int(quick_select((larger as! [Int]), (index &- _int((m &+ count)))))
        }
        
    }
    func median(_ items: [Int]) -> Double {
        let n = _int(((items).count))
        let mid = (n / 2)
        if (((n % 2 + 2) % 2) != 0) {
            return (1.0 * Double(_int(quick_select((items as! [Int]), mid))))
        } else {
            let low = _int(quick_select((items as! [Int]), (mid &- 1)))
            let high = _int(quick_select((items as! [Int]), mid))
            return (Double((1.0 * Double(_int((low &+ high))))) / 2.0)
        }
    }
    print(_p(_p(_int(quick_select(({
        var _arr: [Int] = []
        _arr = _append(_arr, 2)
        _arr = _append(_arr, 4)
        _arr = _append(_arr, 5)
        _arr = _append(_arr, 7)
        _arr = _append(_arr, 899)
        _arr = _append(_arr, 54)
        _arr = _append(_arr, 32)
        return _arr
    }() as! [Int]), 5)))))
    print(_p(_p(_int(quick_select(({
        var _arr: [Int] = []
        _arr = _append(_arr, 2)
        _arr = _append(_arr, 4)
        _arr = _append(_arr, 5)
        _arr = _append(_arr, 7)
        _arr = _append(_arr, 899)
        _arr = _append(_arr, 54)
        _arr = _append(_arr, 32)
        return _arr
    }() as! [Int]), 1)))))
    print(_p(_p(_int(quick_select(({
        var _arr: [Int] = []
        _arr = _append(_arr, 5)
        _arr = _append(_arr, 4)
        _arr = _append(_arr, 3)
        _arr = _append(_arr, 2)
        return _arr
    }() as! [Int]), 2)))))
    print(_p(_p(_int(quick_select(({
        var _arr: [Int] = []
        _arr = _append(_arr, 3)
        _arr = _append(_arr, 5)
        _arr = _append(_arr, 7)
        _arr = _append(_arr, 10)
        _arr = _append(_arr, 2)
        _arr = _append(_arr, 12)
        return _arr
    }() as! [Int]), 3)))))
    print(_p(_p(Double(median(({
        var _arr: [Int] = []
        _arr = _append(_arr, 3)
        _arr = _append(_arr, 2)
        _arr = _append(_arr, 2)
        _arr = _append(_arr, 9)
        _arr = _append(_arr, 9)
        return _arr
    }() as! [Int]))))))
    print(_p(_p(Double(median(({
        var _arr: [Int] = []
        _arr = _append(_arr, 2)
        _arr = _append(_arr, 2)
        _arr = _append(_arr, 9)
        _arr = _append(_arr, 9)
        _arr = _append(_arr, 9)
        _arr = _append(_arr, 3)
        return _arr
    }() as! [Int]))))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
