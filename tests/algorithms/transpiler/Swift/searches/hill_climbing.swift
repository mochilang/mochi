// Generated by Mochi transpiler v0.10.63 on 2025-08-11 16:25:47 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
class SearchProblem {
    var x: Double
    var y: Double
    var step: Double
    var f: (Double, Double) -> Double
    init() {
        self.x = 0
        self.y = 0
        self.step = 0
        self.f = { (_ arg0: Double, _ arg1: Double) -> Double in 0 }
    }
    init(x: Double, y: Double, step: Double, f: @escaping (Double, Double) -> Double) {
        self.x = x
        self.y = y
        self.step = step
        self.f = f
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func score(_ sp: SearchProblem) -> Double {
        return Double(sp.f(sp.x, sp.y))
    }
    func neighbors(_ sp: SearchProblem) -> [SearchProblem] {
        let s = sp.step
        return ({
            var _arr: [SearchProblem] = []
            _arr = _append(_arr, SearchProblem(x: Double((sp.x - s)), y: Double((sp.y - s)), step: Double(s), f: (sp.f as! (Double, Double) -> Double)))
            _arr = _append(_arr, SearchProblem(x: Double((sp.x - s)), y: Double(sp.y), step: Double(s), f: (sp.f as! (Double, Double) -> Double)))
            _arr = _append(_arr, SearchProblem(x: Double((sp.x - s)), y: Double((sp.y + s)), step: Double(s), f: (sp.f as! (Double, Double) -> Double)))
            _arr = _append(_arr, SearchProblem(x: Double(sp.x), y: Double((sp.y - s)), step: Double(s), f: (sp.f as! (Double, Double) -> Double)))
            _arr = _append(_arr, SearchProblem(x: Double(sp.x), y: Double((sp.y + s)), step: Double(s), f: (sp.f as! (Double, Double) -> Double)))
            _arr = _append(_arr, SearchProblem(x: Double((sp.x + s)), y: Double((sp.y - s)), step: Double(s), f: (sp.f as! (Double, Double) -> Double)))
            _arr = _append(_arr, SearchProblem(x: Double((sp.x + s)), y: Double(sp.y), step: Double(s), f: (sp.f as! (Double, Double) -> Double)))
            _arr = _append(_arr, SearchProblem(x: Double((sp.x + s)), y: Double((sp.y + s)), step: Double(s), f: (sp.f as! (Double, Double) -> Double)))
            return _arr
        }() as! [SearchProblem])
    }
    func equal_state(_ a: SearchProblem, _ b: SearchProblem) -> Bool {
        return ((a.x == b.x) && (a.y == b.y))
    }
    func contains_state(_ lst: [SearchProblem], _ sp: SearchProblem) -> Bool {
        var i = 0
        while (i < _int(((lst).count))) {
            if equal_state((_idx(lst, i) as! SearchProblem), (sp as! SearchProblem)) {
                return true
            }
            i = _int((i &+ 1))
        }
        return false
    }
    func hill_climbing(_ sp: SearchProblem, _ find_max: Bool, _ max_x: Double, _ min_x: Double, _ max_y: Double, _ min_y: Double, _ max_iter: Int) -> SearchProblem {
        var current = sp
        var visited: [SearchProblem] = ([] as! [SearchProblem])
        var iterations = 0
        var solution_found = false
        while ((solution_found == false) && (iterations < max_iter)) {
            visited = (_append(visited, current) as! [SearchProblem])
            iterations = _int((iterations &+ 1))
            let current_score = Double(score((current as! SearchProblem)))
            let neighs: [SearchProblem] = (neighbors((current as! SearchProblem)) as! [SearchProblem])
            var max_change = -1000000000000000000.0
            var min_change = 1000000000000000000.0
            var next = current
            var improved = false
            var i = 0
            while (i < _int(((neighs).count))) {
                let n = (_idx(neighs, i) as! SearchProblem)
                i = _int((i &+ 1))
                if contains_state((visited as! [SearchProblem]), (n as! SearchProblem)) {
                    continue
                }
                if ((((n.x > max_x) || (n.x < min_x)) || (n.y > max_y)) || (n.y < min_y)) {
                    continue
                }
                let change = (Double(score((n as! SearchProblem))) - current_score)
                if find_max {
                    if ((change > max_change) && (change > 0.0)) {
                        max_change = Double(change)
                        next = (n as! SearchProblem)
                        improved = true
                    }
                } else {
                    if ((change < min_change) && (change < 0.0)) {
                        min_change = Double(change)
                        next = (n as! SearchProblem)
                        improved = true
                    }
                }
            }
            if improved {
                current = (next as! SearchProblem)
            } else {
                solution_found = true
            }
        }
        return current
    }
    func test_f1(_ x: Double, _ y: Double) -> Double {
        return ((x * x) + (y * y))
    }
    func main() {
        let prob1 = SearchProblem(x: 3.0, y: 4.0, step: 1.0, f: (test_f1 as! (Double, Double) -> Double))
        let local_min1 = hill_climbing((prob1 as! SearchProblem), false, 1000000000.0, Double(-1000000000.0), 1000000000.0, Double(-1000000000.0), 10000)
        print(_p(_p(_int(_int(Double(score((local_min1 as! SearchProblem))))))))
        let prob2 = SearchProblem(x: 12.0, y: 47.0, step: 1.0, f: (test_f1 as! (Double, Double) -> Double))
        let local_min2 = hill_climbing((prob2 as! SearchProblem), false, 100.0, 5.0, 50.0, Double(-5.0), 10000)
        print(_p(_p(_int(_int(Double(score((local_min2 as! SearchProblem))))))))
        let prob3 = SearchProblem(x: 3.0, y: 4.0, step: 1.0, f: (test_f1 as! (Double, Double) -> Double))
        let local_max = hill_climbing((prob3 as! SearchProblem), true, 1000000000.0, Double(-1000000000.0), 1000000000.0, Double(-1000000000.0), 1000)
        print(_p(_p(_int(_int(Double(score((local_max as! SearchProblem))))))))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
