// Generated by Mochi transpiler v0.10.63 on 2025-08-11 16:25:38 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func is_sorted(_ arr: [Int]) -> Bool {
        var i: Int = 1
        while (i < _int(((arr).count))) {
            if ((_idx(arr, (i &- 1)) as? Int ?? 0) > (_idx(arr, i) as? Int ?? 0)) {
                return false
            }
            i = _int((i &+ 1))
        }
        return true
    }
    func binary_search(_ sorted_collection: [Int], _ item: Int) -> Int {
        if (!is_sorted((sorted_collection as! [Int]))) {
            return -1
        }
        var left: Int = 0
        var right: Int = (_int(((sorted_collection).count)) &- 1)
        while (left <= right) {
            let midpoint: Int = (left &+ (_int((right &- left)) / 2))
            let current_item: Int = (_idx(sorted_collection, midpoint) as? Int ?? 0)
            if (current_item == item) {
                return midpoint
            }
            if (item < current_item) {
                right = _int((midpoint &- 1))
            } else {
                left = _int((midpoint &+ 1))
            }
        }
        return -1
    }
    func binary_search_by_recursion(_ sorted_collection: [Int], _ item: Int, _ left: Int, _ right: Int) -> Int {
        if (right < left) {
            return -1
        }
        let midpoint: Int = (left &+ (_int((right &- left)) / 2))
        if ((_idx(sorted_collection, midpoint) as? Int ?? 0) == item) {
            return midpoint
        }
        if ((_idx(sorted_collection, midpoint) as? Int ?? 0) > item) {
            return _int(binary_search_by_recursion((sorted_collection as! [Int]), item, left, (midpoint &- 1)))
        }
        return _int(binary_search_by_recursion((sorted_collection as! [Int]), item, (midpoint &+ 1), right))
    }
    func exponential_search(_ sorted_collection: [Int], _ item: Int) -> Int {
        if (!is_sorted((sorted_collection as! [Int]))) {
            return -1
        }
        if (_int(((sorted_collection).count)) == 0) {
            return -1
        }
        var bound: Int = 1
        while ((bound < _int(((sorted_collection).count))) && ((_idx(sorted_collection, bound) as? Int ?? 0) < item)) {
            bound = _int((bound &* 2))
        }
        let left: Int = (bound / 2)
        let right: Int = _int((({
            var _arr: [Int] = []
            _arr = _append(_arr, bound)
            _arr = _append(_arr, (_int(((sorted_collection).count)) &- 1))
            return _arr
        }() as! [Int]).min()!))
        return _int(binary_search_by_recursion((sorted_collection as! [Int]), item, left, right))
    }
    func main() {
        let data: [Int] = ({
            var _arr: [Int] = []
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 5)
            _arr = _append(_arr, 7)
            _arr = _append(_arr, 10)
            _arr = _append(_arr, 15)
            return _arr
        }() as! [Int])
        print(_p(_p(_int(binary_search((data as! [Int]), 0)))))
        print(_p(_p(_int(binary_search((data as! [Int]), 15)))))
        print(_p(_p(_int(binary_search((data as! [Int]), 5)))))
        print(_p(_p(_int(binary_search((data as! [Int]), 6)))))
        print(_p(_p(_int(binary_search_by_recursion((data as! [Int]), 0, 0, (_int(((data).count)) &- 1))))))
        print(_p(_p(_int(binary_search_by_recursion((data as! [Int]), 15, 0, (_int(((data).count)) &- 1))))))
        print(_p(_p(_int(binary_search_by_recursion((data as! [Int]), 5, 0, (_int(((data).count)) &- 1))))))
        print(_p(_p(_int(binary_search_by_recursion((data as! [Int]), 6, 0, (_int(((data).count)) &- 1))))))
        print(_p(_p(_int(exponential_search((data as! [Int]), 0)))))
        print(_p(_p(_int(exponential_search((data as! [Int]), 15)))))
        print(_p(_p(_int(exponential_search((data as! [Int]), 5)))))
        print(_p(_p(_int(exponential_search((data as! [Int]), 6)))))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
