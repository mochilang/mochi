// Generated by Mochi transpiler v0.10.63 on 2025-08-11 16:26:05 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
struct Solution: Codable {
    var path: [String]
    var cost: Int
    init() {
        self.path = []
        self.cost = 0
    }
    init(path: [String], cost: Int) {
        self.path = path
        self.cost = cost
    }
}
struct Swap: Codable {
    var a: String
    var b: String
    init() {
        self.a = ""
        self.b = ""
    }
    init(a: String, b: String) {
        self.a = a
        self.b = b
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func path_cost(_ path: [String], _ graph: [String: [String: Int]]) -> Int {
        var total = 0
        var i = 0
        while (i < (_int(((path).count)) &- 1)) {
            let u = (_idx(path, i) as! String)
            let v = (_idx(path, (i &+ 1)) as! String)
            total = _int((total &+ (graph[String(String(describing: u))]![String(String(describing: v))] as? Int ?? 0)))
            i = _int((i &+ 1))
        }
        return total
    }
    func generate_first_solution(_ graph: [String: [String: Int]], _ start: String) -> Solution {
        var path: [String] = ([] as! [String])
        var visiting = start
        var total = 0
        while (_int(((path).count)) < _int(((graph).count))) {
            path = (_append(path, visiting) as! [String])
            var best_node = ""
            var best_cost = 1000000
            for n in (graph[String(String(describing: visiting))] as! [String: Int]).keys.sorted() {
                if ((!(path.contains(n))) && ((graph[String(String(describing: visiting))]![String(String(describing: n))] as? Int ?? 0) < best_cost)) {
                    best_cost = (graph[String(String(describing: visiting))]![String(String(describing: n))] as? Int ?? 0)
                    best_node = (n as! String)
                }
            }
            if (best_node == "") {
                break
            }
            total = _int((total &+ best_cost))
            visiting = (best_node as! String)
        }
        path = (_append(path, start) as! [String])
        total = _int((total &+ (graph[String(String(describing: visiting))]![String(String(describing: start))] as? Int ?? 0)))
        return Solution(path: (path as! [String]), cost: Int(total))
    }
    func copy_path(_ path: [String]) -> [String] {
        var res: [String] = ([] as! [String])
        var i = 0
        while (i < _int(((path).count))) {
            res = (_append(res, (_idx(path, i) as! String)) as! [String])
            i = _int((i &+ 1))
        }
        return res
    }
    func find_neighborhood(_ sol: Solution, _ graph: [String: [String: Int]]) -> [Solution] {
        var neighbors: [Solution] = ([] as! [Solution])
        var i = 1
        while (i < (_int(((sol.path).count)) &- 1)) {
            var j = 1
            while (j < (_int(((sol.path).count)) &- 1)) {
                if (i != j) {
                    var new_path = (copy_path((sol.path as! [String])) as! [String])
                    let tmp = (_idx(new_path, i) as! String)
                    new_path = _set(new_path, i, (_idx(new_path, j) as! String))
                    new_path = _set(new_path, j, (tmp as! String))
                    let cost = _int(path_cost((new_path as! [String]), (graph as! [String: [String: Int]])))
                    neighbors = (_append(neighbors, Solution(path: (new_path as! [String]), cost: Int(cost))) as! [Solution])
                }
                j = _int((j &+ 1))
            }
            i = _int((i &+ 1))
        }
        return neighbors
    }
    func find_swap(_ a: [String], _ b: [String]) -> Swap {
        var i = 0
        while (i < _int(((a).count))) {
            if ((_idx(a, i) as! String) != (_idx(b, i) as! String)) {
                return Swap(a: (_idx(a, i) as! String), b: (_idx(b, i) as! String))
            }
            i = _int((i &+ 1))
        }
        return Swap(a: "", b: "")
    }
    func tabu_search(_ first: Solution, _ graph: [String: [String: Int]], _ iters: Int, _ size: Int) -> Solution {
        var solution = first
        var best = first
        var tabu: [Swap] = ([] as! [Swap])
        var count = 0
        while (count < iters) {
            let neighborhood: [Solution] = (find_neighborhood((solution as! Solution), (graph as! [String: [String: Int]])) as! [Solution])
            if (_int(((neighborhood).count)) == 0) {
                break
            }
            var best_neighbor = (_idx(neighborhood, 0) as! Solution)
            var best_move = find_swap((solution.path as! [String]), (best_neighbor.path as! [String]))
            var i = 1
            while (i < _int(((neighborhood).count))) {
                let cand = (_idx(neighborhood, i) as! Solution)
                let move = find_swap((solution.path as! [String]), (cand.path as! [String]))
                var forbidden = false
                var t = 0
                while (t < _int(((tabu).count))) {
                    if (((String(describing: (_idx(tabu, t)!.a)) == String(describing: move.a)
                    ) && (String(describing: (_idx(tabu, t)!.b)) == String(describing: move.b)
                    )) || ((String(describing: (_idx(tabu, t)!.a)) == String(describing: move.b)
                    ) && (String(describing: (_idx(tabu, t)!.b)) == String(describing: move.a)
                    ))) {
                        forbidden = true
                    }
                    t = _int((t &+ 1))
                }
                if ((forbidden == false) && (cand.cost < best_neighbor.cost)) {
                    best_neighbor = (cand as! Solution)
                    best_move = (move as! Swap)
                }
                i = _int((i &+ 1))
            }
            solution = (best_neighbor as! Solution)
            tabu = (_append(tabu, best_move) as! [Swap])
            if (_int(((tabu).count)) > size) {
                var new_tab: [Swap] = ([] as! [Swap])
                var j = 1
                while (j < _int(((tabu).count))) {
                    new_tab = (_append(new_tab, (_idx(tabu, j) as! Swap)) as! [Swap])
                    j = _int((j &+ 1))
                }
                tabu = (new_tab as! [Swap])
            }
            if (solution.cost < best.cost) {
                best = (solution as! Solution)
            }
            count = _int((count &+ 1))
        }
        return best
    }
    let graph: [String: [String: Int]] = (["a": ["b": 20, "c": 18, "d": 22, "e": 26], "b": ["a": 20, "c": 10, "d": 11, "e": 12], "c": ["a": 18, "b": 10, "d": 23, "e": 24], "d": ["a": 22, "b": 11, "c": 23, "e": 40], "e": ["a": 26, "b": 12, "c": 24, "d": 40]] as! [String: [String: Int]])
    let first = generate_first_solution((graph as! [String: [String: Int]]), "a")
    var best = tabu_search((first as! Solution), (graph as! [String: [String: Int]]), 4, 3)
    print(_p("[" + best.path.map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    print(_p(_p(best.cost)))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
