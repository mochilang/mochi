// Generated by Mochi transpiler v0.10.63 on 2025-08-11 16:26:03 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
struct SearchProblem: Codable {
    var x: Double
    var y: Double
    var step: Double
    init() {
        self.x = 0
        self.y = 0
        self.step = 0
    }
    init(x: Double, y: Double, step: Double) {
        self.x = x
        self.y = y
        self.step = step
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func score(_ p: SearchProblem, _ f: @escaping (Double, Double) -> Double) -> Double {
        return Double(f(Double(p.x), Double(p.y)))
    }
    func get_neighbors(_ p: SearchProblem) -> [SearchProblem] {
        let s = p.step
        var ns: [SearchProblem] = ([] as! [SearchProblem])
        ns = (_append(ns, SearchProblem(x: Double((p.x - s)), y: Double((p.y - s)), step: Double(s))) as! [SearchProblem])
        ns = (_append(ns, SearchProblem(x: Double((p.x - s)), y: Double(p.y), step: Double(s))) as! [SearchProblem])
        ns = (_append(ns, SearchProblem(x: Double((p.x - s)), y: Double((p.y + s)), step: Double(s))) as! [SearchProblem])
        ns = (_append(ns, SearchProblem(x: Double(p.x), y: Double((p.y - s)), step: Double(s))) as! [SearchProblem])
        ns = (_append(ns, SearchProblem(x: Double(p.x), y: Double((p.y + s)), step: Double(s))) as! [SearchProblem])
        ns = (_append(ns, SearchProblem(x: Double((p.x + s)), y: Double((p.y - s)), step: Double(s))) as! [SearchProblem])
        ns = (_append(ns, SearchProblem(x: Double((p.x + s)), y: Double(p.y), step: Double(s))) as! [SearchProblem])
        ns = (_append(ns, SearchProblem(x: Double((p.x + s)), y: Double((p.y + s)), step: Double(s))) as! [SearchProblem])
        return ns
    }
    func remove_at(_ lst: [SearchProblem], _ idx: Int) -> [SearchProblem] {
        var res: [SearchProblem] = ([] as! [SearchProblem])
        var i: Int = 0
        while (i < _int(((lst).count))) {
            if (i != idx) {
                res = (_append(res, (_idx(lst, i) as! SearchProblem)) as! [SearchProblem])
            }
            i = _int((i &+ 1))
        }
        return res
    }
    var seed: Int = 1
    func rand() -> Int {
        let _t = _int(_now())
        seed = _int(((_int(((seed &* 1103515245) &+ 12345)) % 2147483648 + 2147483648) % 2147483648))
        return seed
    }
    func random_float() -> Double {
        return (Double(rand()) / 2147483648.0)
    }
    func randint(_ low: Int, _ high: Int) -> Int {
        return (_int(((_int(rand()) % _int(((high &- low) &+ 1)) + _int(((high &- low) &+ 1))) % _int(((high &- low) &+ 1)))) &+ low)
    }
    func expApprox(_ x: Double) -> Double {
        var y: Double = x
        var is_neg: Bool = false
        if (x < 0.0) {
            is_neg = true
            y = Double(-x)
        }
        var term: Double = 1.0
        var sum: Double = 1.0
        var n: Int = 1
        while (n < 30) {
            term = Double(((term * y) / Double(n)))
            sum = Double((sum + term))
            n = _int((n &+ 1))
        }
        if is_neg {
            return (1.0 / sum)
        }
        return sum
    }
    func simulated_annealing(_ search_prob: SearchProblem, _ f: @escaping (Double, Double) -> Double, _ find_max: Bool, _ max_x: Double, _ min_x: Double, _ max_y: Double, _ min_y: Double, _ start_temp: Double, _ rate_of_decrease: Double, _ threshold_temp: Double) -> SearchProblem {
        var search_end: Bool = false
        var current_state: SearchProblem = search_prob
        var current_temp: Double = start_temp
        var best_state: SearchProblem = current_state
        while (!search_end) {
            let current_score: Double = Double(score((current_state as! SearchProblem), (f as! (Double, Double) -> Double)))
            if (Double(score((best_state as! SearchProblem), (f as! (Double, Double) -> Double))) < current_score) {
                best_state = (current_state as! SearchProblem)
            }
            var next_state: SearchProblem = current_state
            var found_next: Bool = false
            var neighbors: [SearchProblem] = (get_neighbors((current_state as! SearchProblem)) as! [SearchProblem])
            while ((!found_next) && (_int(((neighbors).count)) > 0)) {
                let idx: Int = _int(randint(0, (_int(((neighbors).count)) &- 1)))
                let picked_neighbor: SearchProblem = (_idx(neighbors, idx) as! SearchProblem)
                neighbors = (remove_at((neighbors as! [SearchProblem]), idx) as! [SearchProblem])
                if ((((picked_neighbor.x > max_x) || (picked_neighbor.x < min_x)) || (picked_neighbor.y > max_y)) || (picked_neighbor.y < min_y)) {
                    continue
                }
                var change: Double = (Double(score((picked_neighbor as! SearchProblem), (f as! (Double, Double) -> Double))) - current_score)
                if (!find_max) {
                    change = Double(-change)
                }
                if (change > 0.0) {
                    next_state = (picked_neighbor as! SearchProblem)
                    found_next = true
                } else {
                    let probability: Double = Double(expApprox(Double((change / current_temp))))
                    if (Double(random_float()) < probability) {
                        next_state = (picked_neighbor as! SearchProblem)
                        found_next = true
                    }
                }
            }
            current_temp = Double((current_temp - Double((current_temp * rate_of_decrease))))
            if ((current_temp < threshold_temp) || ((!found_next) as! Bool)) {
                search_end = true
            } else {
                current_state = (next_state as! SearchProblem)
            }
        }
        return best_state
    }
    func test_f1(_ x: Double, _ y: Double) -> Double {
        return ((x * x) + (y * y))
    }
    func test_f2(_ x: Double, _ y: Double) -> Double {
        return (Double(((3.0 * x) * x)) - Double((6.0 * y)))
    }
    func main() {
        let prob1 = SearchProblem(x: 12.0, y: 47.0, step: 1.0)
        let min_state = simulated_annealing((prob1 as! SearchProblem), (test_f1 as! (Double, Double) -> Double), false, 100.0, 5.0, 50.0, Double(-5.0), 100.0, 0.01, 1.0)
        print(_p("min1"), _p(Double(test_f1(Double(min_state.x), Double(min_state.y)))))
        let prob2 = SearchProblem(x: 12.0, y: 47.0, step: 1.0)
        let max_state = simulated_annealing((prob2 as! SearchProblem), (test_f1 as! (Double, Double) -> Double), true, 100.0, 5.0, 50.0, Double(-5.0), 100.0, 0.01, 1.0)
        print(_p("max1"), _p(Double(test_f1(Double(max_state.x), Double(max_state.y)))))
        let prob3 = SearchProblem(x: 3.0, y: 4.0, step: 1.0)
        let min_state2 = simulated_annealing((prob3 as! SearchProblem), (test_f2 as! (Double, Double) -> Double), false, 1000.0, Double(-1000.0), 1000.0, Double(-1000.0), 100.0, 0.01, 1.0)
        print(_p("min2"), _p(Double(test_f2(Double(min_state2.x), Double(min_state2.y)))))
        let prob4 = SearchProblem(x: 3.0, y: 4.0, step: 1.0)
        let max_state2 = simulated_annealing((prob4 as! SearchProblem), (test_f2 as! (Double, Double) -> Double), true, 1000.0, Double(-1000.0), 1000.0, Double(-1000.0), 100.0, 0.01, 1.0)
        print(_p("max2"), _p(Double(test_f2(Double(max_state2.x), Double(max_state2.y)))))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
