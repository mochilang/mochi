// Generated by Mochi transpiler v0.10.63 on 2025-08-11 16:25:56 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _slice<T>(_ xs: [T], _ start: Int, _ end: Int) -> [T] {
    var s = start
    var e = end
    if s < 0 { s = 0 }
    if e > xs.count { e = xs.count }
    if s > e { s = e }
    return Array(xs[s..<e])
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func set_at_int(_ xs: [Int], _ idx: Int, _ value: Int) -> [Int] {
        var i = 0
        var res: [Int] = ([] as! [Int])
        while (i < _int(((xs).count))) {
            if (i == idx) {
                res = (_append(res, value) as! [Int])
            } else {
                res = (_append(res, (_idx(xs, i) as? Int ?? 0)) as! [Int])
            }
            i = _int((i &+ 1))
        }
        return res
    }
    func sort_int(_ xs: [Int]) -> [Int] {
        var res = xs
        var i = 1
        while (i < _int(((res).count))) {
            let key = (_idx(res, i) as? Int ?? 0)
            var j = (i &- 1)
            while ((j >= 0) && ((_idx(res, j) as? Int ?? 0) > key)) {
                res = (set_at_int((res as! [Int]), (j &+ 1), (_idx(res, j) as? Int ?? 0)) as! [Int])
                j = _int((j &- 1))
            }
            res = (set_at_int((res as! [Int]), (j &+ 1), key) as! [Int])
            i = _int((i &+ 1))
        }
        return res
    }
    func median_of_five(_ arr: [Int]) -> Int {
        let sorted: [Int] = (sort_int((arr as! [Int])) as! [Int])
        return (_idx(sorted, (_int(((sorted).count)) / 2)) as? Int ?? 0)
    }
    func median_of_medians(_ arr: [Int]) -> Int {
        if (_int(((arr).count)) <= 5) {
            return _int(median_of_five((arr as! [Int])))
        }
        var medians: [Int] = ([] as! [Int])
        var i = 0
        while (i < _int(((arr).count))) {
            if ((i &+ 5) <= _int(((arr).count))) {
                medians = (_append(medians, _int(median_of_five((_slice(Array(arr), i, (i &+ 5)) as! [Int])))) as! [Int])
            } else {
                medians = (_append(medians, _int(median_of_five((_slice(Array(arr), i, _int(((arr).count))) as! [Int])))) as! [Int])
            }
            i = _int((i &+ 5))
        }
        return _int(median_of_medians((medians as! [Int])))
    }
    func quick_select(_ arr: [Int], _ target: Int) -> Int {
        if (target > _int(((arr).count))) {
            return -1
        }
        let x = _int(median_of_medians((arr as! [Int])))
        var left: [Int] = ([] as! [Int])
        var right: [Int] = ([] as! [Int])
        var check = false
        var i = 0
        while (i < _int(((arr).count))) {
            if ((_idx(arr, i) as? Int ?? 0) < x) {
                left = (_append(left, (_idx(arr, i) as? Int ?? 0)) as! [Int])
            } else if ((_idx(arr, i) as? Int ?? 0) > x) {
                right = (_append(right, (_idx(arr, i) as? Int ?? 0)) as! [Int])
            } else if ((_idx(arr, i) as? Int ?? 0) == x) {
                if (!check) {
                    check = true
                } else {
                    right = (_append(right, (_idx(arr, i) as? Int ?? 0)) as! [Int])
                }
            } else {
                right = (_append(right, (_idx(arr, i) as? Int ?? 0)) as! [Int])
            }
            
            
            i = _int((i &+ 1))
        }
        let rank_x = (_int(((left).count)) &+ 1)
        var answer = 0
        if (rank_x == target) {
            answer = Int(x)
        } else if (rank_x > target) {
            answer = _int(quick_select((left as! [Int]), target))
        } else {
            answer = _int(quick_select((right as! [Int]), (target &- rank_x)))
        }
        
        return answer
    }
    func main() {
        print(_p(_p(_int(median_of_five(({
            var _arr: [Int] = []
            _arr = _append(_arr, 5)
            _arr = _append(_arr, 4)
            _arr = _append(_arr, 3)
            _arr = _append(_arr, 2)
            return _arr
        }() as! [Int]))))))
        print(_p(_p(_int(quick_select(({
            var _arr: [Int] = []
            _arr = _append(_arr, 2)
            _arr = _append(_arr, 4)
            _arr = _append(_arr, 5)
            _arr = _append(_arr, 7)
            _arr = _append(_arr, 899)
            _arr = _append(_arr, 54)
            _arr = _append(_arr, 32)
            return _arr
        }() as! [Int]), 5)))))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
