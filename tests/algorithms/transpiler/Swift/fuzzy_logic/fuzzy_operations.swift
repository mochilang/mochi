// Generated by Mochi transpiler v0.10.59 on 2025-08-07 08:55:18 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
struct FuzzySet: Codable {
    var name: String
    var left_boundary: Double
    var peak: Double
    var right_boundary: Double
    init() {
        self.name = ""
        self.left_boundary = 0
        self.peak = 0
        self.right_boundary = 0
    }
    init(name: String, left_boundary: Double, peak: Double, right_boundary: Double) {
        self.name = name
        self.left_boundary = left_boundary
        self.peak = peak
        self.right_boundary = right_boundary
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func stringify(_ fs: FuzzySet) -> String {
        return (((((((fs.name + ": [") + _p(fs.left_boundary)) + ", ") + _p(fs.peak)) + ", ") + _p(fs.right_boundary)) + "]")
    }
    func max2(_ a: Double, _ b: Double) -> Double {
        if (a > b) {
            return a
        }
        return b
    }
    func min2(_ a: Double, _ b: Double) -> Double {
        if (a < b) {
            return a
        }
        return b
    }
    func complement(_ fs: FuzzySet) -> FuzzySet {
        return FuzzySet(name: ("¬" + fs.name), left_boundary: (1.0 - fs.right_boundary), peak: (1.0 - fs.left_boundary), right_boundary: (1.0 - fs.peak))
    }
    func intersection(_ a: FuzzySet, _ b: FuzzySet) -> FuzzySet {
        return FuzzySet(name: ((a.name + " ∩ ") + b.name), left_boundary: Double(max2(Double(a.left_boundary), Double(b.left_boundary))), peak: Double(min2(Double(a.right_boundary), Double(b.right_boundary))), right_boundary: (Double((a.peak + b.peak)) / 2.0))
    }
    func union(_ a: FuzzySet, _ b: FuzzySet) -> FuzzySet {
        return FuzzySet(name: ((a.name + " U ") + b.name), left_boundary: Double(min2(Double(a.left_boundary), Double(b.left_boundary))), peak: Double(max2(Double(a.right_boundary), Double(b.right_boundary))), right_boundary: (Double((a.peak + b.peak)) / 2.0))
    }
    func membership(_ fs: FuzzySet, _ x: Double) -> Double {
        if ((x <= fs.left_boundary) || (x >= fs.right_boundary)) {
            return 0.0
        }
        if ((fs.left_boundary < x) && (x <= fs.peak)) {
            return (Double((x - fs.left_boundary)) / Double((fs.peak - fs.left_boundary)))
        }
        if ((fs.peak < x) && (x < fs.right_boundary)) {
            return (Double((fs.right_boundary - x)) / Double((fs.right_boundary - fs.peak)))
        }
        return 0.0
    }
    let sheru = FuzzySet(name: "Sheru", left_boundary: 0.4, peak: 1.0, right_boundary: 0.6)
    let siya = FuzzySet(name: "Siya", left_boundary: 0.5, peak: 1.0, right_boundary: 0.7)
    print(_p(String(describing: stringify((sheru as! FuzzySet)))))
    print(_p(String(describing: stringify((siya as! FuzzySet)))))
    let sheru_comp = complement((sheru as! FuzzySet))
    print(_p(String(describing: stringify((sheru_comp as! FuzzySet)))))
    let inter = intersection((siya as! FuzzySet), (sheru as! FuzzySet))
    print(_p(String(describing: stringify((inter as! FuzzySet)))))
    print(_p(("Sheru membership 0.5: " + _p(Double(membership((sheru as! FuzzySet), 0.5))))))
    print(_p(("Sheru membership 0.6: " + _p(Double(membership((sheru as! FuzzySet), 0.6))))))
    let uni = union((siya as! FuzzySet), (sheru as! FuzzySet))
    print(_p(String(describing: stringify((uni as! FuzzySet)))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
