// Generated by Mochi transpiler v0.10.60 on 2025-08-08 10:44:23 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
struct Pos: Codable {
    var y: Int
    var x: Int
    init() {
        self.y = 0
        self.x = 0
    }
    init(y: Int, x: Int) {
        self.y = y
        self.x = x
    }
}
struct Node: Codable {
    var pos_x: Int
    var pos_y: Int
    var goal_x: Int
    var goal_y: Int
    var g_cost: Int
    var f_cost: Int
    var path: [Pos]
    init() {
        self.pos_x = 0
        self.pos_y = 0
        self.goal_x = 0
        self.goal_y = 0
        self.g_cost = 0
        self.f_cost = 0
        self.path = []
    }
    init(pos_x: Int, pos_y: Int, goal_x: Int, goal_y: Int, g_cost: Int, f_cost: Int, path: [Pos]) {
        self.pos_x = pos_x
        self.pos_y = pos_y
        self.goal_x = goal_x
        self.goal_y = goal_y
        self.g_cost = g_cost
        self.f_cost = f_cost
        self.path = path
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func abs(_ x: Int) -> Int {
        if (x < 0) {
            return (0 &- x)
        }
        return x
    }
    func manhattan(_ x1: Int, _ y1: Int, _ x2: Int, _ y2: Int) -> Int {
        return (_int(abs((x1 &- x2))) &+ _int(abs((y1 &- y2))))
    }
    func clone_path(_ p: [Pos]) -> [Pos] {
        var res: [Pos] = ([] as! [Pos])
        var i: Int = 0
        while (i < _int(((p).count))) {
            res = (_append(res, (p[i] as! Pos)) as! [Pos])
            i = _int((i &+ 1))
        }
        return res
    }
    func make_node(_ pos_x: Int, _ pos_y: Int, _ goal_x: Int, _ goal_y: Int, _ g_cost: Int, _ path: [Pos]) -> Node {
        let f = _int(manhattan(pos_x, pos_y, goal_x, goal_y))
        return Node(pos_x: pos_x, pos_y: pos_y, goal_x: goal_x, goal_y: goal_y, g_cost: g_cost, f_cost: f, path: path)
    }
    let delta: [Pos] = ([Pos(y: -1, x: 0), Pos(y: 0, x: -1), Pos(y: 1, x: 0), Pos(y: 0, x: 1)] as! [Pos])
    func node_equal(_ a: Node, _ b: Node) -> Bool {
        return ((a.pos_x == b.pos_x) && (a.pos_y == b.pos_y))
    }
    func contains(_ nodes: [Node], _ node: Node) -> Bool {
        var i: Int = 0
        while (i < _int(((nodes).count))) {
            if node_equal((nodes[i] as! Node), (node as! Node)) {
                return true
            }
            i = _int((i &+ 1))
        }
        return false
    }
    func sort_nodes(_ nodes: [Node]) -> [Node] {
        var arr: [Node] = nodes
        var i: Int = 1
        while (i < _int(((arr).count))) {
            let key_node = (arr[i] as! Node)
            var j: Int = (i &- 1)
            while (j >= 0) {
                let temp = (arr[j] as! Node)
                if (temp.f_cost > key_node.f_cost) {
                    arr = _set(arr, (j &+ 1), (temp as! Node))
                    j = _int((j &- 1))
                } else {
                    break
                }
            }
            arr = _set(arr, (j &+ 1), (key_node as! Node))
            i = _int((i &+ 1))
        }
        return arr
    }
    func get_successors(_ grid: [[Int]], _ parent: Node, _ target: Pos) -> [Node] {
        var res: [Node] = ([] as! [Node])
        var i: Int = 0
        while (i < _int(((delta).count))) {
            let d = (delta[i] as! Pos)
            let pos_x = (parent.pos_x &+ d.x)
            let pos_y = (parent.pos_y &+ d.y)
            if (((((pos_x >= 0) && (pos_x < _int((((grid[0] as! [Int])).count)))) && (pos_y >= 0)) && (pos_y < _int(((grid).count)))) && ((grid[pos_y][pos_x] as? Int ?? 0) == 0)) {
                var new_path: [Pos] = (clone_path((parent.path as! [Pos])) as! [Pos])
                new_path = (_append(new_path, Pos(y: pos_y, x: pos_x)) as! [Pos])
                res = (_append(res, make_node(pos_x, pos_y, target.x, target.y, (parent.g_cost &+ 1), (new_path as! [Pos]))) as! [Node])
            }
            i = _int((i &+ 1))
        }
        return res
    }
    func greedy_best_first(_ grid: [[Int]], _ `init`: Pos, _ goal: Pos) -> [Pos] {
        let start_path: [Pos] = ([`init`] as! [Pos])
        let start = make_node(`init`.x, `init`.y, goal.x, goal.y, 0, (start_path as! [Pos]))
        var open_nodes: [Node] = ([start] as! [Node])
        var closed_nodes: [Node] = ([] as! [Node])
        while (_int(((open_nodes).count)) > 0) {
            open_nodes = (sort_nodes((open_nodes as! [Node])) as! [Node])
            let current = (open_nodes[0] as! Node)
            var new_open: [Node] = ([] as! [Node])
            var idx: Int = 1
            while (idx < _int(((open_nodes).count))) {
                new_open = (_append(new_open, (open_nodes[idx] as! Node)) as! [Node])
                idx = _int((idx &+ 1))
            }
            open_nodes = (new_open as! [Node])
            if ((current.pos_x == goal.x) && (current.pos_y == goal.y)) {
                return current.path
            }
            closed_nodes = (_append(closed_nodes, current) as! [Node])
            let successors: [Node] = (get_successors((grid as! [[Int]]), (current as! Node), (goal as! Pos)) as! [Node])
            var i: Int = 0
            while (i < _int(((successors).count))) {
                let child = (successors[i] as! Node)
                if (((!((closed_nodes as! [Node]).contains((child as! Node)))) as! Bool) && ((!((open_nodes as! [Node]).contains((child as! Node)))) as! Bool)) {
                    open_nodes = (_append(open_nodes, child) as! [Node])
                }
                i = _int((i &+ 1))
            }
        }
        let r: [Pos] = ([`init`] as! [Pos])
        return r
    }
    let TEST_GRIDS: [[[Int]]] = ([([([0, 0, 0, 0, 0, 0, 0] as! [Int]), ([0, 1, 0, 0, 0, 0, 0] as! [Int]), ([0, 0, 0, 0, 0, 0, 0] as! [Int]), ([0, 0, 1, 0, 0, 0, 0] as! [Int]), ([1, 0, 1, 0, 0, 0, 0] as! [Int]), ([0, 0, 0, 0, 0, 0, 0] as! [Int]), ([0, 0, 0, 0, 1, 0, 0] as! [Int])] as! [[Int]]), ([([0, 0, 0, 1, 1, 0, 0] as! [Int]), ([0, 0, 0, 0, 1, 0, 1] as! [Int]), ([0, 0, 0, 1, 1, 0, 0] as! [Int]), ([0, 1, 0, 0, 1, 0, 0] as! [Int]), ([1, 0, 0, 1, 1, 0, 1] as! [Int]), ([0, 0, 0, 0, 0, 0, 0] as! [Int])] as! [[Int]]), ([([0, 0, 1, 0, 0] as! [Int]), ([0, 1, 0, 0, 0] as! [Int]), ([0, 0, 1, 0, 1] as! [Int]), ([1, 0, 0, 1, 1] as! [Int]), ([0, 0, 0, 0, 0] as! [Int])] as! [[Int]])] as! [[[Int]]])
    func print_grid(_ grid: [[Int]]) {
        var i: Int = 0
        while (i < _int(((grid).count))) {
            print(_p("[" + (grid[i] as! [Int]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
            i = _int((i &+ 1))
        }
    }
    func main() {
        var idx: Int = 0
        while (idx < _int(((TEST_GRIDS).count))) {
            print(_p((("==grid-" + _p((idx &+ 1))) + "==")))
            var grid: [[Int]] = (TEST_GRIDS[idx] as! [[Int]])
            let `init` = Pos(y: 0, x: 0)
            let goal = Pos(y: (_int(((grid).count)) &- 1), x: (_int((((grid[0] as! [Int])).count)) &- 1))
            _ = print_grid((grid as! [[Int]]))
            print(_p("------"))
            let path: [Pos] = (greedy_best_first((grid as! [[Int]]), (`init` as! Pos), (goal as! Pos)) as! [Pos])
            var j: Int = 0
            while (j < _int(((path).count))) {
                let p = (path[j] as! Pos)
                grid[p.y][p.x] = 2
                j = _int((j &+ 1))
            }
            _ = print_grid((grid as! [[Int]]))
            idx = _int((idx &+ 1))
        }
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
