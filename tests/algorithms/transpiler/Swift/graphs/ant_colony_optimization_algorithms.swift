// Generated by Mochi transpiler v0.10.64 on 2025-08-13 16:15:35 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func sqrtApprox(_ x: Double) -> Double {
        var guess = (x / 2.0)
        var i = 0
        while (i < 20) {
            guess = Double((Double((guess + (x / guess))) / 2.0))
            i = _int((i &+ 1))
        }
        return guess
    }
    func rand_float() -> Double {
        return (Double(((_int(_now()) % 1000000 + 1000000) % 1000000)) / 1000000.0)
    }
    func pow_float(_ base: Double, _ exp: Double) -> Double {
        var result = 1.0
        var i = 0
        let e = Int(exp)
        while (i < e) {
            result = Double((result * base))
            i = _int((i &+ 1))
        }
        return result
    }
    func distance(_ city1: [Int], _ city2: [Int]) -> Double {
        let dx = Double(((_idx(city1, 0) as? Int ?? 0) &- (_idx(city2, 0) as? Int ?? 0)))
        let dy = Double(((_idx(city1, 1) as? Int ?? 0) &- (_idx(city2, 1) as? Int ?? 0)))
        return Double(sqrtApprox(Double(((dx * dx) + (dy * dy)))))
    }
    func choose_weighted(_ options: [Int], _ weights: [Double]) -> Int {
        var total = 0.0
        var i = 0
        while (i < _int(((weights).count))) {
            total = Double((total + Double(_idx(weights, i))))
            i = _int((i &+ 1))
        }
        let r = (Double(rand_float()) * total)
        var accum = 0.0
        i = 0
        while (i < _int(((weights).count))) {
            accum = Double((accum + Double(_idx(weights, i))))
            if (r <= accum) {
                return (_idx(options, i) as? Int ?? 0)
            }
            i = _int((i &+ 1))
        }
        return (_idx(options, (_int(((options).count)) &- 1)) as? Int ?? 0)
    }
    func city_select(_ pheromone: [[Double]], _ current: Int, _ unvisited: [Int], _ alpha: Double, _ beta: Double, _ cities: [Int: [Int]]) -> Int {
        var probs: [Double] = ([] as! [Double])
        var i = 0
        while (i < _int(((unvisited).count))) {
            let city = (_idx(unvisited, i) as? Int ?? 0)
            let dist = Double(distance((cities[city] as! [Int]), (cities[current] as! [Int])))
            let trail = Double(_idx(_idx(pheromone, city)!, current))
            let prob = (Double(pow_float(Double(trail), Double(alpha))) * Double(pow_float(Double((1.0 / dist)), Double(beta))))
            probs = (_append(probs, prob) as! [Double])
            i = _int((i &+ 1))
        }
        return _int(choose_weighted((unvisited as! [Int]), (probs as! [Double])))
    }
    func pheromone_update(_ pheromone: inout [[Double]], _ cities: [Int: [Int]], _ evaporation: Double, _ ants_route: [[Int]], _ q: Double) -> [[Double]] {
        let n = _int(((pheromone).count))
        var i = 0
        while (i < n) {
            var j = 0
            while (j < n) {
                var _tmp4 = (_idx(pheromone, i) as! [Double])
                _tmp4 = _set(_tmp4, j, Double((Double(_idx(_idx(pheromone, i)!, j)) * evaporation)))
                pheromone = _set(pheromone, i, (_tmp4 as! [Double]))
                j = _int((j &+ 1))
            }
            i = _int((i &+ 1))
        }
        var a = 0
        while (a < _int(((ants_route).count))) {
            let route: [Int] = (_idx(ants_route, a) as! [Int])
            var total = 0.0
            var r = 0
            while (r < (_int(((route).count)) &- 1)) {
                total = Double((total + Double(distance((cities[(_idx(route, r) as? Int ?? 0)] as! [Int]), (cities[(_idx(route, (r &+ 1)) as? Int ?? 0)] as! [Int])))))
                r = _int((r &+ 1))
            }
            let delta = (q / total)
            r = 0
            while (r < (_int(((route).count)) &- 1)) {
                let u = (_idx(route, r) as? Int ?? 0)
                let v = (_idx(route, (r &+ 1)) as? Int ?? 0)
                var _tmp5 = (_idx(pheromone, u) as! [Double])
                _tmp5 = _set(_tmp5, v, Double((Double(_idx(_idx(pheromone, u)!, v)) + delta)))
                pheromone = _set(pheromone, u, (_tmp5 as! [Double]))
                var _tmp6 = (_idx(pheromone, v) as! [Double])
                _tmp6 = _set(_tmp6, u, Double(_idx(_idx(pheromone, u)!, v)))
                pheromone = _set(pheromone, v, (_tmp6 as! [Double]))
                r = _int((r &+ 1))
            }
            a = _int((a &+ 1))
        }
        return pheromone
    }
    func remove_value(_ lst: [Int], _ val: Int) -> [Int] {
        var res: [Int] = ([] as! [Int])
        var i = 0
        while (i < _int(((lst).count))) {
            if ((_idx(lst, i) as? Int ?? 0) != val) {
                res = (_append(res, (_idx(lst, i) as? Int ?? 0)) as! [Int])
            }
            i = _int((i &+ 1))
        }
        return res
    }
    func ant_colony(_ cities: [Int: [Int]], _ ants_num: Int, _ iterations: Int, _ evaporation: Double, _ alpha: Double, _ beta: Double, _ q: Double) {
        let n = _int(((cities).count))
        var pheromone: [[Double]] = ([] as! [[Double]])
        var i = 0
        while (i < n) {
            var row: [Double] = ([] as! [Double])
            var j = 0
            while (j < n) {
                row = (_append(row, 1.0) as! [Double])
                j = _int((j &+ 1))
            }
            pheromone = (_append(pheromone, row) as! [[Double]])
            i = _int((i &+ 1))
        }
        var best_path: [Int] = ([] as! [Int])
        var best_distance = 1000000000.0
        var iter = 0
        while (iter < iterations) {
            var ants_route: [[Int]] = ([] as! [[Int]])
            var k = 0
            while (k < ants_num) {
                var route: [Int] = ({
                    var _arr: [Int] = []
                    _arr = _append(_arr, 0)
                    return _arr
                }() as! [Int])
                var unvisited: [Int] = ([] as! [Int])
                for key in cities.keys.sorted() {
                    if (key != 0) {
                        unvisited = (_append(unvisited, key) as! [Int])
                    }
                }
                var current = 0
                while (_int(((unvisited).count)) > 0) {
                    let next_city = _int(city_select((pheromone as! [[Double]]), current, (unvisited as! [Int]), Double(alpha), Double(beta), (cities as! [Int: [Int]])))
                    route = (_append(route, next_city) as! [Int])
                    unvisited = (remove_value((unvisited as! [Int]), next_city) as! [Int])
                    current = Int(next_city)
                }
                route = (_append(route, 0) as! [Int])
                ants_route = (_append(ants_route, route) as! [[Int]])
                k = _int((k &+ 1))
            }
            pheromone = (pheromone_update(&pheromone, (cities as! [Int: [Int]]), Double(evaporation), (ants_route as! [[Int]]), Double(q)) as! [[Double]])
            var a = 0
            while (a < _int(((ants_route).count))) {
                let route: [Int] = (_idx(ants_route, a) as! [Int])
                var dist = 0.0
                var r = 0
                while (r < (_int(((route).count)) &- 1)) {
                    dist = Double((dist + Double(distance((cities[(_idx(route, r) as? Int ?? 0)] as! [Int]), (cities[(_idx(route, (r &+ 1)) as? Int ?? 0)] as! [Int])))))
                    r = _int((r &+ 1))
                }
                if (dist < best_distance) {
                    best_distance = Double(dist)
                    best_path = (route as! [Int])
                }
                a = _int((a &+ 1))
            }
            iter = _int((iter &+ 1))
        }
        print(_p(("best_path = " + "[" + best_path.map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]")))
        print(_p(("best_distance = " + _p(best_distance))))
    }
    let cities: [Int: [Int]] = ([0: ({
        var _arr: [Int] = []
        _arr = _append(_arr, 0)
        _arr = _append(_arr, 0)
        return _arr
    }() as! [Int]), 1: ({
        var _arr: [Int] = []
        _arr = _append(_arr, 0)
        _arr = _append(_arr, 5)
        return _arr
    }() as! [Int]), 2: ({
        var _arr: [Int] = []
        _arr = _append(_arr, 3)
        _arr = _append(_arr, 8)
        return _arr
    }() as! [Int]), 3: ({
        var _arr: [Int] = []
        _arr = _append(_arr, 8)
        _arr = _append(_arr, 10)
        return _arr
    }() as! [Int]), 4: ({
        var _arr: [Int] = []
        _arr = _append(_arr, 12)
        _arr = _append(_arr, 8)
        return _arr
    }() as! [Int]), 5: ({
        var _arr: [Int] = []
        _arr = _append(_arr, 12)
        _arr = _append(_arr, 4)
        return _arr
    }() as! [Int]), 6: ({
        var _arr: [Int] = []
        _arr = _append(_arr, 8)
        _arr = _append(_arr, 0)
        return _arr
    }() as! [Int]), 7: ({
        var _arr: [Int] = []
        _arr = _append(_arr, 6)
        _arr = _append(_arr, 2)
        return _arr
    }() as! [Int])] as! [Int: [Int]])
    _ = ant_colony((cities as! [Int: [Int]]), 10, 20, 0.7, 1.0, 5.0, 10.0)
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
