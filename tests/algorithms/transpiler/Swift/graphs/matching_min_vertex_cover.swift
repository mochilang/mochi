// Generated by Mochi transpiler v0.10.65 on 2025-08-14 17:14:16 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _slice<T>(_ xs: [T], _ start: Int, _ end: Int) -> [T] {
    var s = start
    var e = end
    if s < 0 { s = 0 }
    if e > xs.count { e = xs.count }
    if s > e { s = e }
    return Array(xs[s..<e])
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func contains(_ xs: [Int], _ v: Int) -> Bool {
        for x in xs {
            if (x == v) {
                return true
            }
        }
        return false
    }
    func get_edges(_ graph: [Int: [Int]]) -> [[Int]] {
        let n = _int(((graph).count))
        var edges: [[Int]] = ([] as! [[Int]])
        for i in 0..<n {
            for j in ((graph[i] ?? []) as! [Int]) {
                edges = (_append(edges, ({
                    var _arr: [Int] = []
                    _arr = _append(_arr, i)
                    _arr = _append(_arr, j)
                    return _arr
                }() as! [Int])) as! [[Int]])
            }
        }
        return edges
    }
    func matching_min_vertex_cover(_ graph: [Int: [Int]]) -> [Int] {
        var chosen: [Int] = ([] as! [Int])
        var edges = (get_edges((graph as! [Int: [Int]])) as! [[Int]])
        while (_int(((edges).count)) > 0) {
            let idx = (_int(((edges).count)) &- 1)
            let e: [Int] = (_idx(edges, idx) as! [Int])
            edges = (_slice(Array(edges), 0, idx) as! [[Int]])
            let u = (_idx(e, 0) as? Int ?? 0)
            let v = (_idx(e, 1) as? Int ?? 0)
            if (!contains((chosen as! [Int]), u)) {
                chosen = (_append(chosen, u) as! [Int])
            }
            if (!contains((chosen as! [Int]), v)) {
                chosen = (_append(chosen, v) as! [Int])
            }
            var filtered: [[Int]] = ([] as! [[Int]])
            for edge in edges {
                let a = (_idx(edge, 0) as? Int ?? 0)
                let b = (_idx(edge, 1) as? Int ?? 0)
                if ((((a != u) && (b != u)) && (a != v)) && (b != v)) {
                    filtered = (_append(filtered, edge) as! [[Int]])
                }
            }
            edges = (filtered as! [[Int]])
        }
        return chosen
    }
    let graph: [Int: [Int]] = ([0: ({
        var _arr: [Int] = []
        _arr = _append(_arr, 1)
        _arr = _append(_arr, 3)
        return _arr
    }() as! [Int]), 1: ({
        var _arr: [Int] = []
        _arr = _append(_arr, 0)
        _arr = _append(_arr, 3)
        return _arr
    }() as! [Int]), 2: ({
        var _arr: [Int] = []
        _arr = _append(_arr, 0)
        _arr = _append(_arr, 3)
        _arr = _append(_arr, 4)
        return _arr
    }() as! [Int]), 3: ({
        var _arr: [Int] = []
        _arr = _append(_arr, 0)
        _arr = _append(_arr, 1)
        _arr = _append(_arr, 2)
        return _arr
    }() as! [Int]), 4: ({
        var _arr: [Int] = []
        _arr = _append(_arr, 2)
        _arr = _append(_arr, 3)
        return _arr
    }() as! [Int])] as! [Int: [Int]])
    let cover: [Int] = (matching_min_vertex_cover((graph as! [Int: [Int]])) as! [Int])
    print(_p("[" + cover.map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
