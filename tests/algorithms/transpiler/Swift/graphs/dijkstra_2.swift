// Generated by Mochi transpiler v0.10.65 on 2025-08-14 17:13:30 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let INF = 1000000000.0
    func print_dist(_ dist: [Double]) {
        print(_p("Vertex Distance"))
        var i = 0
        while (i < _int(((dist).count))) {
            if (Double(_idx(dist, i)) >= INF) {
                print(_p(i), _p("\tINF"))
            } else {
                print(_p(i), _p("\t"), _p(_int(_idx(dist, i))))
            }
            i = _int((i &+ 1))
        }
    }
    func min_dist(_ mdist: [Double], _ vset: [Bool]) -> Int {
        var min_val = INF
        var min_ind = -1
        var i = 0
        while (i < _int(((mdist).count))) {
            if ((!(_idx(vset, i) as! Bool)) && (Double(_idx(mdist, i)) < min_val)) {
                min_val = Double(_idx(mdist, i))
                min_ind = Int(i)
            }
            i = _int((i &+ 1))
        }
        return min_ind
    }
    func dijkstra(_ graph: [[Double]], _ src: Int) -> [Double] {
        let v = _int(((graph).count))
        var mdist: [Double] = ([] as! [Double])
        var vset: [Bool] = ([] as! [Bool])
        var i = 0
        while (i < v) {
            mdist = (_append(mdist, INF) as! [Double])
            vset = (_append(vset, false) as! [Bool])
            i = _int((i &+ 1))
        }
        mdist = _set(mdist, src, 0.0)
        var count = 0
        while (count < (v &- 1)) {
            let u = _int(min_dist((mdist as! [Double]), (vset as! [Bool])))
            vset = _set(vset, u, true)
            var i = 0
            while (i < v) {
                let alt = (Double(_idx(mdist, u)) + Double(_idx(_idx(graph, u)!, i)))
                if (((!(_idx(vset, i) as! Bool)) && (Double(_idx(_idx(graph, u)!, i)) < INF)) && (alt < Double(_idx(mdist, i)))) {
                    mdist = _set(mdist, i, Double(alt))
                }
                i = _int((i &+ 1))
            }
            count = _int((count &+ 1))
        }
        return mdist
    }
    func main() {
        let graph: [[Double]] = ({
            var _arr: [[Double]] = []
            _arr = _append(_arr, ({
                var _arr: [Double] = []
                _arr = _append(_arr, 0.0)
                _arr = _append(_arr, 10.0)
                _arr = _append(_arr, INF)
                _arr = _append(_arr, INF)
                _arr = _append(_arr, 5.0)
                return _arr
            }() as! [Double]))
            _arr = _append(_arr, ({
                var _arr: [Double] = []
                _arr = _append(_arr, INF)
                _arr = _append(_arr, 0.0)
                _arr = _append(_arr, 1.0)
                _arr = _append(_arr, INF)
                _arr = _append(_arr, 2.0)
                return _arr
            }() as! [Double]))
            _arr = _append(_arr, ({
                var _arr: [Double] = []
                _arr = _append(_arr, INF)
                _arr = _append(_arr, INF)
                _arr = _append(_arr, 0.0)
                _arr = _append(_arr, 4.0)
                _arr = _append(_arr, INF)
                return _arr
            }() as! [Double]))
            _arr = _append(_arr, ({
                var _arr: [Double] = []
                _arr = _append(_arr, INF)
                _arr = _append(_arr, INF)
                _arr = _append(_arr, 6.0)
                _arr = _append(_arr, 0.0)
                _arr = _append(_arr, INF)
                return _arr
            }() as! [Double]))
            _arr = _append(_arr, ({
                var _arr: [Double] = []
                _arr = _append(_arr, INF)
                _arr = _append(_arr, 3.0)
                _arr = _append(_arr, 9.0)
                _arr = _append(_arr, 2.0)
                _arr = _append(_arr, 0.0)
                return _arr
            }() as! [Double]))
            return _arr
        }() as! [[Double]])
        let dist: [Double] = (dijkstra((graph as! [[Double]]), 0) as! [Double])
        _ = print_dist((dist as! [Double]))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
