// Generated by Mochi transpiler v0.10.60 on 2025-08-08 10:44:13 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func index_of(_ xs: [Int], _ x: Int) -> Int {
        var i: Int = 0
        while (i < _int(((xs).count))) {
            if ((xs[i] as? Int ?? 0) == x) {
                return i
            }
            i = _int((i &+ 1))
        }
        return -1
    }
    func remove_item(_ xs: [Int], _ x: Int) -> [Int] {
        var res: [Int] = ([] as! [Int])
        var removed: Bool = false
        var i: Int = 0
        while (i < _int(((xs).count))) {
            if ((!removed) && ((xs[i] as? Int ?? 0) == x)) {
                removed = true
            } else {
                res = (_append(res, (xs[i] as? Int ?? 0)) as! [Int])
            }
            i = _int((i &+ 1))
        }
        return res
    }
    func stable_matching(_ donor_pref: [[Int]], _ recipient_pref: [[Int]]) -> [Int] {
        if (_int(((donor_pref).count)) != _int(((recipient_pref).count))) {
            _ = fatalError("unequal groups")
        }
        let n = _int(((donor_pref).count))
        var unmatched: [Int] = ([] as! [Int])
        var i: Int = 0
        while (i < n) {
            unmatched = (_append(unmatched, i) as! [Int])
            i = _int((i &+ 1))
        }
        var donor_record: [Int] = ([] as! [Int])
        i = 0
        while (i < n) {
            donor_record = (_append(donor_record, -1) as! [Int])
            i = _int((i &+ 1))
        }
        var rec_record: [Int] = ([] as! [Int])
        i = 0
        while (i < n) {
            rec_record = (_append(rec_record, -1) as! [Int])
            i = _int((i &+ 1))
        }
        var num_donations: [Int] = ([] as! [Int])
        i = 0
        while (i < n) {
            num_donations = (_append(num_donations, 0) as! [Int])
            i = _int((i &+ 1))
        }
        while (_int(((unmatched).count)) > 0) {
            let donor = (unmatched[0] as? Int ?? 0)
            let donor_preference: [Int] = (donor_pref[donor] as! [Int])
            let recipient = (donor_preference[(num_donations[donor] as? Int ?? 0)] as? Int ?? 0)
            num_donations = _set(num_donations, donor, _int(((num_donations[donor] as? Int ?? 0) &+ 1)))
            let rec_preference: [Int] = (recipient_pref[recipient] as! [Int])
            let prev_donor = (rec_record[recipient] as? Int ?? 0)
            if (prev_donor != (0 &- 1)) {
                let prev_index = _int(index_of((rec_preference as! [Int]), prev_donor))
                let new_index = _int(index_of((rec_preference as! [Int]), donor))
                if (prev_index > new_index) {
                    rec_record = _set(rec_record, recipient, Int(donor))
                    donor_record = _set(donor_record, donor, Int(recipient))
                    unmatched = (_append(unmatched, prev_donor) as! [Int])
                    unmatched = (remove_item((unmatched as! [Int]), donor) as! [Int])
                }
            } else {
                rec_record = _set(rec_record, recipient, Int(donor))
                donor_record = _set(donor_record, donor, Int(recipient))
                unmatched = (remove_item((unmatched as! [Int]), donor) as! [Int])
            }
        }
        return donor_record
    }
    let donor_pref: [[Int]] = ([([0, 1, 3, 2] as! [Int]), ([0, 2, 3, 1] as! [Int]), ([1, 0, 2, 3] as! [Int]), ([0, 3, 1, 2] as! [Int])] as! [[Int]])
    let recipient_pref: [[Int]] = ([([3, 1, 2, 0] as! [Int]), ([3, 1, 0, 2] as! [Int]), ([0, 3, 1, 2] as! [Int]), ([1, 0, 3, 2] as! [Int])] as! [[Int]])
    print(_p("[" + (stable_matching((donor_pref as! [[Int]]), (recipient_pref as! [[Int]])) as! [Int]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
