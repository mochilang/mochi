// Generated by Mochi transpiler v0.10.65 on 2025-08-14 16:20:12 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
func _slice<T>(_ xs: [T], _ start: Int, _ end: Int) -> [T] {
    var s = start
    var e = end
    if s < 0 { s = 0 }
    if e > xs.count { e = xs.count }
    if s > e { s = e }
    return Array(xs[s..<e])
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func tarjan(_ g: [[Int]]) -> [[Int]] {
        let n = _int(((g).count))
        var stack: [Int] = ([] as! [Int])
        var on_stack: [Bool] = ([] as! [Bool])
        var index_of: [Int] = ([] as! [Int])
        var lowlink_of: [Int] = ([] as! [Int])
        var i = 0
        while (i < n) {
            on_stack = (_append(on_stack, false) as! [Bool])
            index_of = (_append(index_of, (0 &- 1)) as! [Int])
            lowlink_of = (_append(lowlink_of, (0 &- 1)) as! [Int])
            i = _int((i &+ 1))
        }
        var components: [[Int]] = ([] as! [[Int]])
        func strong_connect(_ v: Int, _ index: Int) -> Int {
            index_of = _set(index_of, v, Int(index))
            lowlink_of = _set(lowlink_of, v, Int(index))
            var current_index = (index &+ 1)
            stack = (_append(stack, v) as! [Int])
            on_stack = _set(on_stack, v, true)
            for w in (_idx(g, v) as! [Int]) {
                if ((_idx(index_of, w) as? Int ?? 0) == (0 &- 1)) {
                    current_index = _int(strong_connect(w, current_index))
                    if ((_idx(lowlink_of, w) as? Int ?? 0) < (_idx(lowlink_of, v) as? Int ?? 0)) {
                        lowlink_of = _set(lowlink_of, v, (_idx(lowlink_of, w) as? Int ?? 0))
                    }
                } else if (_idx(on_stack, w) as! Bool) {
                    if ((_idx(lowlink_of, w) as? Int ?? 0) < (_idx(lowlink_of, v) as? Int ?? 0)) {
                        lowlink_of = _set(lowlink_of, v, (_idx(lowlink_of, w) as? Int ?? 0))
                    }
                }
                
            }
            if ((_idx(lowlink_of, v) as? Int ?? 0) == (_idx(index_of, v) as? Int ?? 0)) {
                var component: [Int] = ([] as! [Int])
                var w = (_idx(stack, (_int(((stack).count)) &- 1)) as? Int ?? 0)
                stack = (_slice(Array(stack), 0, (_int(((stack).count)) &- 1)) as! [Int])
                on_stack = _set(on_stack, w, false)
                component = (_append(component, w) as! [Int])
                while (w != v) {
                    w = (_idx(stack, (_int(((stack).count)) &- 1)) as? Int ?? 0)
                    stack = (_slice(Array(stack), 0, (_int(((stack).count)) &- 1)) as! [Int])
                    on_stack = _set(on_stack, w, false)
                    component = (_append(component, w) as! [Int])
                }
                components = (_append(components, component) as! [[Int]])
            }
            return current_index
        }
        var v = 0
        while (v < n) {
            if ((_idx(index_of, v) as? Int ?? 0) == (0 &- 1)) {
                _ = _int(strong_connect(v, 0))
            }
            v = _int((v &+ 1))
        }
        return components
    }
    func create_graph(_ n: Int, _ edges: [[Int]]) -> [[Int]] {
        var g: [[Int]] = ([] as! [[Int]])
        var i = 0
        while (i < n) {
            g = (((_append(g, ([] as! [Int])) as! [[Int]]) as! [Any?]) as! [[Int]])
            i = _int((i &+ 1))
        }
        for e in edges {
            let u = (_idx(e, 0) as? Int ?? 0)
            let v = (_idx(e, 1) as? Int ?? 0)
            g = _set(g, u, (_append((_idx(g, u) as! [Int]), v) as! [Int]))
        }
        return g
    }
    func main() {
        let n_vertices = 7
        let source: [Int] = ({
            var _arr: [Int] = []
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 1)
            _arr = _append(_arr, 2)
            _arr = _append(_arr, 3)
            _arr = _append(_arr, 3)
            _arr = _append(_arr, 4)
            _arr = _append(_arr, 4)
            _arr = _append(_arr, 6)
            return _arr
        }() as! [Int])
        let target: [Int] = ({
            var _arr: [Int] = []
            _arr = _append(_arr, 1)
            _arr = _append(_arr, 3)
            _arr = _append(_arr, 2)
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 1)
            _arr = _append(_arr, 4)
            _arr = _append(_arr, 5)
            _arr = _append(_arr, 6)
            _arr = _append(_arr, 5)
            return _arr
        }() as! [Int])
        var edges: [[Int]] = ([] as! [[Int]])
        var i = 0
        while (i < _int(((source).count))) {
            edges = (_append(edges, ({
                var _arr: [Int] = []
                _arr = _append(_arr, (_idx(source, i) as? Int ?? 0))
                _arr = _append(_arr, (_idx(target, i) as? Int ?? 0))
                return _arr
            }() as! [Int])) as! [[Int]])
            i = _int((i &+ 1))
        }
        let g: [[Int]] = (create_graph(n_vertices, (edges as! [[Int]])) as! [[Int]])
        print(_p("[" + (tarjan((g as! [[Int]])) as! [[Int]]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
