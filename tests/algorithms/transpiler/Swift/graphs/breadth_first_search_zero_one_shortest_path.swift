// Generated by Mochi transpiler v0.10.60 on 2025-08-08 10:43:27 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
struct Edge: Codable {
    var destination_vertex: Int
    var weight: Int
    init() {
        self.destination_vertex = 0
        self.weight = 0
    }
    init(destination_vertex: Int, weight: Int) {
        self.destination_vertex = destination_vertex
        self.weight = weight
    }
}
struct AdjacencyList: Codable {
    var graph: [[Edge]]
    var size: Int
    init() {
        self.graph = []
        self.size = 0
    }
    init(graph: [[Edge]], size: Int) {
        self.graph = graph
        self.size = size
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func new_adjacency_list(_ size: Int) -> AdjacencyList {
        var g: [[Edge]] = ([] as! [[Edge]])
        var i: Int = 0
        while (i < size) {
            g = ((_append(g, []) as! [Any?]) as! [[Edge]])
            i = _int((i &+ 1))
        }
        return AdjacencyList(graph: g, size: size)
    }
    func add_edge(_ al: inout AdjacencyList, _ from_vertex: Int, _ to_vertex: Int, _ weight: Int) {
        if (!((weight == 0) || (weight == 1))) {
            _ = fatalError("Edge weight must be either 0 or 1.")
        }
        if ((to_vertex < 0) || (to_vertex >= al.size)) {
            _ = fatalError("Vertex indexes must be in [0; size).")
        }
        var g: [[Edge]] = al.graph
        let edges: [Edge] = (g[from_vertex] as! [Edge])
        g = _set(g, from_vertex, (_append(edges, Edge(destination_vertex: to_vertex, weight: weight)) as! [Edge]))
        al.graph = (g as! [[Edge]])
    }
    func push_front(_ q: [Int], _ v: Int) -> [Int] {
        var res: [Int] = ([v] as! [Int])
        var i: Int = 0
        while (i < _int(((q).count))) {
            res = (_append(res, (q[i] as? Int ?? 0)) as! [Int])
            i = _int((i &+ 1))
        }
        return res
    }
    func pop_front(_ q: [Int]) -> [Int] {
        var res: [Int] = ([] as! [Int])
        var i: Int = 1
        while (i < _int(((q).count))) {
            res = (_append(res, (q[i] as? Int ?? 0)) as! [Int])
            i = _int((i &+ 1))
        }
        return res
    }
    func front(_ q: [Int]) -> Int {
        return (q[0] as? Int ?? 0)
    }
    func get_shortest_path(_ al: AdjacencyList, _ start_vertex: Int, _ finish_vertex: Int) -> Int {
        var queue: [Int] = ([start_vertex] as! [Int])
        var distances: [Int] = ([] as! [Int])
        var i: Int = 0
        while (i < al.size) {
            distances = (_append(distances, -1) as! [Int])
            i = _int((i &+ 1))
        }
        distances = _set(distances, start_vertex, 0)
        while (_int(((queue).count)) > 0) {
            let current_vertex = _int(front((queue as! [Int])))
            queue = (pop_front((queue as! [Int])) as! [Int])
            let current_distance = (distances[current_vertex] as? Int ?? 0)
            var edges: [Edge] = (al.graph[current_vertex] as! [Edge])
            var j: Int = 0
            while (j < _int(((edges).count))) {
                let edge = (edges[j] as! Edge)
                let new_distance = (current_distance &+ edge.weight)
                let dest = edge.destination_vertex
                let dest_distance = (distances[dest] as? Int ?? 0)
                if ((dest_distance >= 0) && (new_distance >= dest_distance)) {
                    j = _int((j &+ 1))
                    continue
                }
                distances = _set(distances, dest, Int(new_distance))
                if (edge.weight == 0) {
                    queue = (push_front((queue as! [Int]), dest) as! [Int])
                } else {
                    queue = (_append(queue, dest) as! [Int])
                }
                j = _int((j &+ 1))
            }
        }
        let result = (distances[finish_vertex] as? Int ?? 0)
        if (result < 0) {
            _ = fatalError("No path from start_vertex to finish_vertex.")
        }
        return result
    }
    var g = new_adjacency_list(11)
    _ = add_edge(&g, 0, 1, 0)
    _ = add_edge(&g, 0, 3, 1)
    _ = add_edge(&g, 1, 2, 0)
    _ = add_edge(&g, 2, 3, 0)
    _ = add_edge(&g, 4, 2, 1)
    _ = add_edge(&g, 4, 5, 1)
    _ = add_edge(&g, 4, 6, 1)
    _ = add_edge(&g, 5, 9, 0)
    _ = add_edge(&g, 6, 7, 1)
    _ = add_edge(&g, 7, 8, 1)
    _ = add_edge(&g, 8, 10, 1)
    _ = add_edge(&g, 9, 7, 0)
    _ = add_edge(&g, 9, 10, 1)
    print(_p(_p(_int(get_shortest_path((g as! AdjacencyList), 0, 3)))))
    print(_p(_p(_int(get_shortest_path((g as! AdjacencyList), 4, 10)))))
    print(_p(_p(_int(get_shortest_path((g as! AdjacencyList), 4, 8)))))
    print(_p(_p(_int(get_shortest_path((g as! AdjacencyList), 0, 1)))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
