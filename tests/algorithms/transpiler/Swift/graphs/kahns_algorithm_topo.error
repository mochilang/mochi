exit status 1
/tmp/TestSwiftTranspiler_Algorithms_Golden436_graphs_kahns_algorithm_topo3570736828/001/main.swift:103:23: error: cannot find 'values' in scope
101 |             i = _int((i &+ 1))
102 |         }
103 |         for edges in (values((graph as! [AnyHashable: Any?])) as! [[Int]]) {
    |                       `- error: cannot find 'values' in scope
104 |             var j = 0
105 |             while (j < _int(((edges).count))) {

/tmp/TestSwiftTranspiler_Algorithms_Golden436_graphs_kahns_algorithm_topo3570736828/001/main.swift:103:37: warning: forced cast from '[Int : [Int]]' to '[AnyHashable : Any?]' always succeeds; did you mean to use 'as'?
101 |             i = _int((i &+ 1))
102 |         }
103 |         for edges in (values((graph as! [AnyHashable: Any?])) as! [[Int]]) {
    |                                     `- warning: forced cast from '[Int : [Int]]' to '[AnyHashable : Any?]' always succeeds; did you mean to use 'as'?
104 |             var j = 0
105 |             while (j < _int(((edges).count))) {

/tmp/TestSwiftTranspiler_Algorithms_Golden436_graphs_kahns_algorithm_topo3570736828/001/main.swift:114:36: warning: conditional downcast from 'Int?' to 'Int' does nothing
112 |         i = 0
113 |         while (i < _int(((indegree).count))) {
114 |             if ((_idx(indegree, i) as? Int ?? 0) == 0) {
    |                                    `- warning: conditional downcast from 'Int?' to 'Int' does nothing
115 |                 queue = (_append(queue, i) as! [Int])
116 |             }

/tmp/TestSwiftTranspiler_Algorithms_Golden436_graphs_kahns_algorithm_topo3570736828/001/main.swift:123:40: warning: conditional downcast from 'Int?' to 'Int' does nothing
121 |         var processed = 0
122 |         while (head < _int(((queue).count))) {
123 |             let v = (_idx(queue, head) as? Int ?? 0)
    |                                        `- warning: conditional downcast from 'Int?' to 'Int' does nothing
124 |             head = _int((head &+ 1))
125 |             processed = _int((processed &+ 1))

/tmp/TestSwiftTranspiler_Algorithms_Golden436_graphs_kahns_algorithm_topo3570736828/001/main.swift:130:46: warning: conditional downcast from 'Int?' to 'Int' does nothing
128 |             var k = 0
129 |             while (k < _int(((neighbors).count))) {
130 |                 let nb = (_idx(neighbors, k) as? Int ?? 0)
    |                                              `- warning: conditional downcast from 'Int?' to 'Int' does nothing
131 |                 indegree = _set(indegree, nb, _int(((_idx(indegree, nb) as? Int ?? 0) &- 1)))
132 |                 if ((_idx(indegree, nb) as? Int ?? 0) == 0) {

/tmp/TestSwiftTranspiler_Algorithms_Golden436_graphs_kahns_algorithm_topo3570736828/001/main.swift:131:73: warning: conditional downcast from 'Int?' to 'Int' does nothing
129 |             while (k < _int(((neighbors).count))) {
130 |                 let nb = (_idx(neighbors, k) as? Int ?? 0)
131 |                 indegree = _set(indegree, nb, _int(((_idx(indegree, nb) as? Int ?? 0) &- 1)))
    |                                                                         `- warning: conditional downcast from 'Int?' to 'Int' does nothing
132 |                 if ((_idx(indegree, nb) as? Int ?? 0) == 0) {
133 |                     queue = (_append(queue, nb) as! [Int])

/tmp/TestSwiftTranspiler_Algorithms_Golden436_graphs_kahns_algorithm_topo3570736828/001/main.swift:132:41: warning: conditional downcast from 'Int?' to 'Int' does nothing
130 |                 let nb = (_idx(neighbors, k) as? Int ?? 0)
131 |                 indegree = _set(indegree, nb, _int(((_idx(indegree, nb) as? Int ?? 0) &- 1)))
132 |                 if ((_idx(indegree, nb) as? Int ?? 0) == 0) {
    |                                         `- warning: conditional downcast from 'Int?' to 'Int' does nothing
133 |                     queue = (_append(queue, nb) as! [Int])
134 |                 }

/tmp/TestSwiftTranspiler_Algorithms_Golden436_graphs_kahns_algorithm_topo3570736828/001/main.swift:141:23: warning: forced cast from '[Int]' to '[Int]?' always succeeds; did you mean to use 'as'?
139 |             return nil
140 |         }
141 |         return (order as! [Int]?)
    |                       `- warning: forced cast from '[Int]' to '[Int]?' always succeeds; did you mean to use 'as'?
142 |     }
143 |     func main() {

/tmp/TestSwiftTranspiler_Algorithms_Golden436_graphs_kahns_algorithm_topo3570736828/001/main.swift:149:13: warning: forced cast of '[Int]' to same type has no effect
147 |             _arr = _append(_arr, 2)
148 |             return _arr
149 |         }() as! [Int]), 1: ({
    |             `- warning: forced cast of '[Int]' to same type has no effect
150 |             var _arr: [Int] = []
151 |             _arr = _append(_arr, 3)

/tmp/TestSwiftTranspiler_Algorithms_Golden436_graphs_kahns_algorithm_topo3570736828/001/main.swift:153:13: warning: forced cast of '[Int]' to same type has no effect
151 |             _arr = _append(_arr, 3)
152 |             return _arr
153 |         }() as! [Int]), 2: ({
    |             `- warning: forced cast of '[Int]' to same type has no effect
154 |             var _arr: [Int] = []
155 |             _arr = _append(_arr, 3)

/tmp/TestSwiftTranspiler_Algorithms_Golden436_graphs_kahns_algorithm_topo3570736828/001/main.swift:157:13: warning: forced cast of '[Int]' to same type has no effect
155 |             _arr = _append(_arr, 3)
156 |             return _arr
157 |         }() as! [Int]), 3: ({
    |             `- warning: forced cast of '[Int]' to same type has no effect
158 |             var _arr: [Int] = []
159 |             _arr = _append(_arr, 4)

/tmp/TestSwiftTranspiler_Algorithms_Golden436_graphs_kahns_algorithm_topo3570736828/001/main.swift:162:13: warning: forced cast of '[Int]' to same type has no effect
160 |             _arr = _append(_arr, 5)
161 |             return _arr
162 |         }() as! [Int]), 4: [] as [Any], 5: [] as [Any]] as! [Int: [Int]])
    |             `- warning: forced cast of '[Int]' to same type has no effect
163 |         print(_p((topological_sort((graph as! [Int: [Int]])) as! [Int])))
164 |         let cyclic: [Int: [Int]] = ([0: ({

/tmp/TestSwiftTranspiler_Algorithms_Golden436_graphs_kahns_algorithm_topo3570736828/001/main.swift:163:43: warning: forced cast of '[Int : [Int]]' to same type has no effect
161 |             return _arr
162 |         }() as! [Int]), 4: [] as [Any], 5: [] as [Any]] as! [Int: [Int]])
163 |         print(_p((topological_sort((graph as! [Int: [Int]])) as! [Int])))
    |                                           `- warning: forced cast of '[Int : [Int]]' to same type has no effect
164 |         let cyclic: [Int: [Int]] = ([0: ({
165 |             var _arr: [Int] = []

/tmp/TestSwiftTranspiler_Algorithms_Golden436_graphs_kahns_algorithm_topo3570736828/001/main.swift:163:62: warning: forced cast from '[Int]?' to '[Int]' only unwraps optionals; did you mean to use '!'?
161 |             return _arr
162 |         }() as! [Int]), 4: [] as [Any], 5: [] as [Any]] as! [Int: [Int]])
163 |         print(_p((topological_sort((graph as! [Int: [Int]])) as! [Int])))
    |                                                              `- warning: forced cast from '[Int]?' to '[Int]' only unwraps optionals; did you mean to use '!'?
164 |         let cyclic: [Int: [Int]] = ([0: ({
165 |             var _arr: [Int] = []

/tmp/TestSwiftTranspiler_Algorithms_Golden436_graphs_kahns_algorithm_topo3570736828/001/main.swift:168:13: warning: forced cast of '[Int]' to same type has no effect
166 |             _arr = _append(_arr, 1)
167 |             return _arr
168 |         }() as! [Int]), 1: ({
    |             `- warning: forced cast of '[Int]' to same type has no effect
169 |             var _arr: [Int] = []
170 |             _arr = _append(_arr, 2)

/tmp/TestSwiftTranspiler_Algorithms_Golden436_graphs_kahns_algorithm_topo3570736828/001/main.swift:172:13: warning: forced cast of '[Int]' to same type has no effect
170 |             _arr = _append(_arr, 2)
171 |             return _arr
172 |         }() as! [Int]), 2: ({
    |             `- warning: forced cast of '[Int]' to same type has no effect
173 |             var _arr: [Int] = []
174 |             _arr = _append(_arr, 0)

/tmp/TestSwiftTranspiler_Algorithms_Golden436_graphs_kahns_algorithm_topo3570736828/001/main.swift:176:13: warning: forced cast of '[Int]' to same type has no effect
174 |             _arr = _append(_arr, 0)
175 |             return _arr
176 |         }() as! [Int])] as! [Int: [Int]])
    |             `- warning: forced cast of '[Int]' to same type has no effect
177 |         print(_p((topological_sort((cyclic as! [Int: [Int]])) as! [Int])))
178 |     }

/tmp/TestSwiftTranspiler_Algorithms_Golden436_graphs_kahns_algorithm_topo3570736828/001/main.swift:177:44: warning: forced cast of '[Int : [Int]]' to same type has no effect
175 |             return _arr
176 |         }() as! [Int])] as! [Int: [Int]])
177 |         print(_p((topological_sort((cyclic as! [Int: [Int]])) as! [Int])))
    |                                            `- warning: forced cast of '[Int : [Int]]' to same type has no effect
178 |     }
179 |     _ = main()

/tmp/TestSwiftTranspiler_Algorithms_Golden436_graphs_kahns_algorithm_topo3570736828/001/main.swift:177:63: warning: forced cast from '[Int]?' to '[Int]' only unwraps optionals; did you mean to use '!'?
175 |             return _arr
176 |         }() as! [Int])] as! [Int: [Int]])
177 |         print(_p((topological_sort((cyclic as! [Int: [Int]])) as! [Int])))
    |                                                               `- warning: forced cast from '[Int]?' to '[Int]' only unwraps optionals; did you mean to use '!'?
178 |     }
179 |     _ = main()

/tmp/TestSwiftTranspiler_Algorithms_Golden436_graphs_kahns_algorithm_topo3570736828/001/main.swift:179:5: warning: using '_' to ignore the result of a Void-returning function is redundant
177 |         print(_p((topological_sort((cyclic as! [Int: [Int]])) as! [Int])))
178 |     }
179 |     _ = main()
    |     `- warning: using '_' to ignore the result of a Void-returning function is redundant
180 |     let _benchEnd = _now()
181 |     let _benchMemEnd = _mem()

/tmp/TestSwiftTranspiler_Algorithms_Golden436_graphs_kahns_algorithm_topo3570736828/001/main.swift:106:26: error: generic parameter 'T' could not be inferred
 65 |     return 0
 66 | }
 67 | func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    |      `- note: in call to function '_idx'
 68 |     var idx = i
 69 |     if idx < 0 { idx += xs.count }
    :
104 |             var j = 0
105 |             while (j < _int(((edges).count))) {
106 |                 let v = (_idx(edges, j) as? Int ?? 0)
    |                          `- error: generic parameter 'T' could not be inferred
107 |                 indegree = _set(indegree, v, _int(((_idx(indegree, v) as? Int ?? 0) &+ 1)))
108 |                 j = _int((j &+ 1))
