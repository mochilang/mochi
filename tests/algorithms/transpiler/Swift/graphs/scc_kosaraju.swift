// Generated by Mochi transpiler v0.10.60 on 2025-08-08 10:45:48 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func dfs(_ u: Int, _ graph: [[Int]], _ visit: inout [Bool], _ stack: inout [Int]) -> [Int] {
        if (visit[u] as! Bool) {
            return stack
        }
        visit = _set(visit, u, true)
        for v in (graph[u] as! [Int]) {
            stack = (dfs(v, (graph as! [[Int]]), &visit, &stack) as! [Int])
        }
        stack = (_append(stack, u) as! [Int])
        return stack
    }
    func dfs2(_ u: Int, _ reversed_graph: [[Int]], _ visit: inout [Bool], _ component: inout [Int]) -> [Int] {
        if (visit[u] as! Bool) {
            return component
        }
        visit = _set(visit, u, true)
        component = (_append(component, u) as! [Int])
        for v in (reversed_graph[u] as! [Int]) {
            component = (dfs2(v, (reversed_graph as! [[Int]]), &visit, &component) as! [Int])
        }
        return component
    }
    func kosaraju(_ graph: [[Int]]) -> [[Int]] {
        let n = _int(((graph).count))
        var reversed_graph: [[Int]] = ([] as! [[Int]])
        var i: Int = 0
        while (i < n) {
            reversed_graph = ((_append(reversed_graph, []) as! [Any?]) as! [[Int]])
            i = _int((i &+ 1))
        }
        i = 0
        while (i < n) {
            for v in (graph[i] as! [Int]) {
                reversed_graph = _set(reversed_graph, v, (_append((reversed_graph[v] as! [Int]), i) as! [Int]))
            }
            i = _int((i &+ 1))
        }
        var visit: [Bool] = ([] as! [Bool])
        i = 0
        while (i < n) {
            visit = (_append(visit, false) as! [Bool])
            i = _int((i &+ 1))
        }
        var stack: [Int] = ([] as! [Int])
        i = 0
        while (i < n) {
            if ((visit[i] as! Bool) == false) {
                stack = (dfs(i, (graph as! [[Int]]), &visit, &stack) as! [Int])
            }
            i = _int((i &+ 1))
        }
        i = 0
        while (i < n) {
            visit = _set(visit, i, false)
            i = _int((i &+ 1))
        }
        var scc: [[Int]] = ([] as! [[Int]])
        var idx: Int = (_int(((stack).count)) &- 1)
        while (idx >= 0) {
            let node = (stack[idx] as? Int ?? 0)
            if ((visit[node] as! Bool) == false) {
                var component: [Int] = ([] as! [Int])
                component = (dfs2(node, (reversed_graph as! [[Int]]), &visit, &component) as! [Int])
                scc = (_append(scc, component) as! [[Int]])
            }
            idx = _int((idx &- 1))
        }
        return scc
    }
    func main() {
        let graph: [[Int]] = ([([1] as! [Int]), ([2] as! [Int]), ([0, 3] as! [Int]), ([4] as! [Int]), []] as! [[Int]])
        let comps: [[Int]] = (kosaraju((graph as! [[Int]])) as! [[Int]])
        var i: Int = 0
        while (i < _int(((comps).count))) {
            print(_p("[" + (comps[i] as! [Int]).map{ if let s = $0 as? String { "\"" + s.replacingOccurrences(of: "\"", with: "\\\"") + "\"" } else { _p($0) } }.joined(separator: ", ") + "]"))
            i = _int((i &+ 1))
        }
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
