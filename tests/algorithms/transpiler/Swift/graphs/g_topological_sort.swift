// Generated by Mochi transpiler v0.10.60 on 2025-08-08 10:44:11 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func depth_first_search(_ u: Int, _ visited: inout [Bool], _ graph: [[Int]], _ stack: inout [Int]) -> [Int] {
        visited = _set(visited, u, true)
        var i: Int = 0
        while (i < _int((((graph[u] as! [Int])).count))) {
            let v = (graph[u][i] as? Int ?? 0)
            if !(visited[v] ?? false) {
                stack = (depth_first_search(v, &visited, (graph as! [[Int]]), &stack) as! [Int])
            }
            i = _int((i &+ 1))
        }
        stack = (_append(stack, u) as! [Int])
        return stack
    }
    func topological_sort(_ graph: [[Int]]) -> [Int] {
        var visited: [Bool] = ([] as! [Bool])
        var i: Int = 0
        while (i < _int(((graph).count))) {
            visited = (_append(visited, false) as! [Bool])
            i = _int((i &+ 1))
        }
        var stack: [Int] = ([] as! [Int])
        i = 0
        while (i < _int(((graph).count))) {
            if !(visited[i] ?? false) {
                stack = (depth_first_search(i, &visited, (graph as! [[Int]]), &stack) as! [Int])
            }
            i = _int((i &+ 1))
        }
        return stack
    }
    func print_stack(_ stack: [Int], _ clothes: [Int: String]) {
        var order: Int = 1
        var s: [Int] = stack
        while (_int(((s).count)) > 0) {
            let idx = (s[(_int(((s).count)) &- 1)] as? Int ?? 0)
            s = (Array(s[0..<(_int(((s).count)) &- 1)]) as! [Int])
            print(_p(((_p(order) + " ") + (clothes[idx] as! String))))
            order = _int((order &+ 1))
        }
    }
    func format_list(_ xs: [Int]) -> String {
        var res: String = "["
        var i: Int = 0
        while (i < _int(((xs).count))) {
            res = ((res + _p((xs[i] as? Int ?? 0))) as! String)
            if (i < (_int(((xs).count)) &- 1)) {
                res = ((res + ", ") as! String)
            }
            i = _int((i &+ 1))
        }
        res = ((res + "]") as! String)
        return res
    }
    func main() {
        let clothes: [Int: String] = ([0: "underwear", 1: "pants", 2: "belt", 3: "suit", 4: "shoe", 5: "socks", 6: "shirt", 7: "tie", 8: "watch"] as! [Int: String])
        let graph: [[Int]] = ([([1, 4] as! [Int]), ([2, 4] as! [Int]), ([3] as! [Int]), [], [], ([4] as! [Int]), ([2, 7] as! [Int]), ([3] as! [Int]), []] as! [[Int]])
        let stack: [Int] = (topological_sort((graph as! [[Int]])) as! [Int])
        print(_p(String(describing: format_list((stack as! [Int])))))
        _ = print_stack((stack as! [Int]), (clothes as! [Int: String]))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
