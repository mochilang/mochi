// Generated by Mochi transpiler v0.10.65 on 2025-08-14 15:59:03 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
func _slice<T>(_ xs: [T], _ start: Int, _ end: Int) -> [T] {
    var s = start
    var e = end
    if s < 0 { s = 0 }
    if e > xs.count { e = xs.count }
    if s > e { s = e }
    return Array(xs[s..<e])
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let INF = 1000000000
    func connect(_ graph: [Int: [[Int]]], _ a: Int, _ b: Int, _ w: Int) -> [Int: [[Int]]] {
        let u = (a &- 1)
        let v = (b &- 1)
        var g: [Int: [[Int]]] = graph
        g = _set(g, u, (_append((g[u] ?? [] as! [[Int]]), ({
            var _arr: [Int] = []
            _arr = _append(_arr, v)
            _arr = _append(_arr, w)
            return _arr
        }() as! [Int])) as! [[Int]]))
        g = _set(g, v, (_append((g[v] ?? [] as! [[Int]]), ({
            var _arr: [Int] = []
            _arr = _append(_arr, u)
            _arr = _append(_arr, w)
            return _arr
        }() as! [Int])) as! [[Int]]))
        return g
    }
    func in_list(_ arr: [Int], _ x: Int) -> Bool {
        var i = 0
        while (i < _int(((arr).count))) {
            if ((_idx(arr, i) as? Int ?? 0) == x) {
                return true
            }
            i = _int((i &+ 1))
        }
        return false
    }
    func prim(_ graph: [Int: [[Int]]], _ s: Int, _ n: Int) -> [[Int]] {
        var dist: [Int: Int] = ([:] as! [Int: Int])
        var parent: [Int: Int] = ([:] as! [Int: Int])
        dist = _set(dist, s, 0)
        parent = _set(parent, s, _int(-1))
        var known: [Int] = ([] as! [Int])
        var keys: [Int] = ({
            var _arr: [Int] = []
            _arr = _append(_arr, s)
            return _arr
        }() as! [Int])
        while (_int(((known).count)) < n) {
            var mini = INF
            var u = -1
            var i = 0
            while (i < _int(((keys).count))) {
                let k = (_idx(keys, i) as? Int ?? 0)
                let d = (dist[k] ?? 0 as? Int ?? 0)
                if ((!in_list((known as! [Int]), k)) && (d < mini)) {
                    mini = Int(d)
                    u = Int(k)
                }
                i = _int((i &+ 1))
            }
            known = (_append(known, u) as! [Int])
            for e in (graph[u] ?? [] as! [[Int]]) {
                let v = (_idx(e, 0) as? Int ?? 0)
                let w = (_idx(e, 1) as? Int ?? 0)
                if (!in_list((keys as! [Int]), v)) {
                    keys = (_append(keys, v) as! [Int])
                }
                let cur = _int(((dist[v] != nil) ? (dist[v] ?? 0 as? Int ?? 0) : INF))
                if ((!in_list((known as! [Int]), v)) && (w < cur)) {
                    dist = _set(dist, v, Int(w))
                    parent = _set(parent, v, Int(u))
                }
            }
        }
        var edges: [[Int]] = ([] as! [[Int]])
        var j = 0
        while (j < _int(((keys).count))) {
            let v = (_idx(keys, j) as? Int ?? 0)
            if (v != s) {
                edges = (_append(edges, ({
                    var _arr: [Int] = []
                    _arr = _append(_arr, (v &+ 1))
                    _arr = _append(_arr, ((parent[v] ?? 0 as? Int ?? 0) &+ 1))
                    return _arr
                }() as! [Int])) as! [[Int]])
            }
            j = _int((j &+ 1))
        }
        return edges
    }
    func sort_heap(_ h: [Int], _ dist: [Int: Int]) -> [Int] {
        var a = h
        var i = 0
        while (i < _int(((a).count))) {
            var j = 0
            while (j < ((_int(((a).count)) &- i) &- 1)) {
                let dj = _int(((dist[(_idx(a, j) as? Int ?? 0)] != nil) ? (dist[(_idx(a, j) as? Int ?? 0)] ?? 0 as? Int ?? 0) : INF))
                let dj1 = _int(((dist[(_idx(a, (j &+ 1)) as? Int ?? 0)] != nil) ? (dist[(_idx(a, (j &+ 1)) as? Int ?? 0)] ?? 0 as? Int ?? 0) : INF))
                if (dj > dj1) {
                    let t = (_idx(a, j) as? Int ?? 0)
                    a = _set(a, j, (_idx(a, (j &+ 1)) as? Int ?? 0))
                    a = _set(a, (j &+ 1), Int(t))
                }
                j = _int((j &+ 1))
            }
            i = _int((i &+ 1))
        }
        return a
    }
    func prim_heap(_ graph: [Int: [[Int]]], _ s: Int, _ n: Int) -> [[Int]] {
        var dist: [Int: Int] = ([:] as! [Int: Int])
        var parent: [Int: Int] = ([:] as! [Int: Int])
        dist = _set(dist, s, 0)
        parent = _set(parent, s, _int(-1))
        var h: [Int] = ([] as! [Int])
        var i = 0
        while (i < n) {
            h = (_append(h, i) as! [Int])
            i = _int((i &+ 1))
        }
        h = (sort_heap((h as! [Int]), (dist as! [Int: Int])) as! [Int])
        var known: [Int] = ([] as! [Int])
        while (_int(((h).count)) > 0) {
            let u = (_idx(h, 0) as? Int ?? 0)
            h = (_slice(Array(h), 1, _int(((h).count))) as! [Int])
            known = (_append(known, u) as! [Int])
            for e in (graph[u] ?? [] as! [[Int]]) {
                let v = (_idx(e, 0) as? Int ?? 0)
                let w = (_idx(e, 1) as? Int ?? 0)
                let cur = _int(((dist[v] != nil) ? (dist[v] ?? 0 as? Int ?? 0) : INF))
                if ((!in_list((known as! [Int]), v)) && (w < cur)) {
                    dist = _set(dist, v, Int(w))
                    parent = _set(parent, v, Int(u))
                }
            }
            h = (sort_heap((h as! [Int]), (dist as! [Int: Int])) as! [Int])
        }
        var edges: [[Int]] = ([] as! [[Int]])
        var j = 0
        while (j < n) {
            if (j != s) {
                edges = (_append(edges, ({
                    var _arr: [Int] = []
                    _arr = _append(_arr, (j &+ 1))
                    _arr = _append(_arr, ((parent[j] ?? 0 as? Int ?? 0) &+ 1))
                    return _arr
                }() as! [Int])) as! [[Int]])
            }
            j = _int((j &+ 1))
        }
        return edges
    }
    func print_edges(_ edges: [[Int]]) {
        var i = 0
        while (i < _int(((edges).count))) {
            let e: [Int] = (_idx(edges, i) as! [Int])
            print(_p((((("(" + _p((_idx(e, 0) as? Int ?? 0))) + ", ") + _p((_idx(e, 1) as? Int ?? 0))) + ")")))
            i = _int((i &+ 1))
        }
    }
    func test_vector() {
        let x = 5
        var G: [Int: [[Int]]] = ([:] as! [Int: [[Int]]])
        var i = 0
        while (i < x) {
            G = _set(G, i, ([] as! [[Int]]))
            i = _int((i &+ 1))
        }
        G = (connect((G as! [Int: [[Int]]]), 1, 2, 15) as! [Int: [[Int]]])
        G = (connect((G as! [Int: [[Int]]]), 1, 3, 12) as! [Int: [[Int]]])
        G = (connect((G as! [Int: [[Int]]]), 2, 4, 13) as! [Int: [[Int]]])
        G = (connect((G as! [Int: [[Int]]]), 2, 5, 5) as! [Int: [[Int]]])
        G = (connect((G as! [Int: [[Int]]]), 3, 2, 6) as! [Int: [[Int]]])
        G = (connect((G as! [Int: [[Int]]]), 3, 4, 6) as! [Int: [[Int]]])
        let mst: [[Int]] = (prim((G as! [Int: [[Int]]]), 0, x) as! [[Int]])
        _ = print_edges((mst as! [[Int]]))
        let mst_heap: [[Int]] = (prim_heap((G as! [Int: [[Int]]]), 0, x) as! [[Int]])
        _ = print_edges((mst_heap as! [[Int]]))
    }
    _ = test_vector()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
