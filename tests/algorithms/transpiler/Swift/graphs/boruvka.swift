// Generated by Mochi transpiler v0.10.65 on 2025-08-14 15:56:40 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
struct Edge: Codable {
    var u: Int
    var v: Int
    var w: Int
    init() {
        self.u = 0
        self.v = 0
        self.w = 0
    }
    init(u: Int, v: Int, w: Int) {
        self.u = u
        self.v = v
        self.w = w
    }
}
struct Graph: Codable {
    var num_nodes: Int
    var edges: [Edge]
    var component: [Int: Int]
    init() {
        self.num_nodes = 0
        self.edges = []
        self.component = [:]
    }
    init(num_nodes: Int, edges: [Edge], component: [Int: Int]) {
        self.num_nodes = num_nodes
        self.edges = edges
        self.component = component
    }
}
struct UnionResult: Codable {
    var graph: Graph
    var component_size: [Int]
    init() {
        self.graph = Graph()
        self.component_size = []
    }
    init(graph: Graph, component_size: [Int]) {
        self.graph = graph
        self.component_size = component_size
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func new_graph(_ num_nodes: Int) -> Graph {
        return Graph(num_nodes: Int(num_nodes), edges: ([] as! [Edge]), component: ([:] as! [Int: Int]))
    }
    func add_edge(_ g: Graph, _ u: Int, _ v: Int, _ w: Int) -> Graph {
        var es = g.edges
        es = (_append(es, Edge(u: Int(u), v: Int(v), w: Int(w))) as! [Edge])
        return Graph(num_nodes: (g.num_nodes as? Int ?? 0), edges: (es as! [Edge]), component: (g.component as! [Int: Int]))
    }
    func find_component(_ g: Graph, _ node: Int) -> Int {
        if ((g.component[node] ?? 0 as? Int ?? 0) == node) {
            return node
        }
        return _int(find_component((g as! Graph), (g.component[node] ?? 0 as? Int ?? 0)))
    }
    func set_component(_ g: inout Graph, _ node: Int) -> Graph {
        if ((g.component[node] ?? 0 as? Int ?? 0) != node) {
            var comp = g.component
            var k = 0
            while (k < g.num_nodes) {
                comp = _set(comp, k, _int(find_component((g as! Graph), k)))
                k = _int((k &+ 1))
            }
            g = (Graph(num_nodes: (g.num_nodes as? Int ?? 0), edges: (g.edges as! [Edge]), component: (comp as! [Int: Int])) as! Graph)
        }
        return g
    }
    func union(_ g: inout Graph, _ component_size: [Int], _ u: Int, _ v: Int) -> UnionResult {
        var comp_size = component_size
        var comp = g.component
        if ((_idx(comp_size, u) as? Int ?? 0) <= (_idx(comp_size, v) as? Int ?? 0)) {
            comp = _set(comp, u, Int(v))
            comp_size = _set(comp_size, v, _int(((_idx(comp_size, v) as? Int ?? 0) &+ (_idx(comp_size, u) as? Int ?? 0))))
            g = (Graph(num_nodes: (g.num_nodes as? Int ?? 0), edges: (g.edges as! [Edge]), component: (comp as! [Int: Int])) as! Graph)
            g = (set_component(&g, u) as! Graph)
        } else {
            comp = _set(comp, v, Int(u))
            comp_size = _set(comp_size, u, _int(((_idx(comp_size, u) as? Int ?? 0) &+ (_idx(comp_size, v) as? Int ?? 0))))
            g = (Graph(num_nodes: (g.num_nodes as? Int ?? 0), edges: (g.edges as! [Edge]), component: (comp as! [Int: Int])) as! Graph)
            g = (set_component(&g, v) as! Graph)
        }
        return UnionResult(graph: (g as! Graph), component_size: (comp_size as! [Int]))
    }
    func create_empty_edges(_ n: Int) -> [Edge] {
        var res: [Edge] = ([] as! [Edge])
        var i = 0
        while (i < n) {
            res = (_append(res, Edge(u: _int((0 &- 1)), v: _int((0 &- 1)), w: _int((0 &- 1)))) as! [Edge])
            i = _int((i &+ 1))
        }
        return res
    }
    func boruvka(_ g: inout Graph) -> Int {
        var component_size: [Int] = ([] as! [Int])
        var i = 0
        while (i < g.num_nodes) {
            component_size = (_append(component_size, 1) as! [Int])
            var comp = g.component
            comp = _set(comp, i, Int(i))
            g = (Graph(num_nodes: (g.num_nodes as? Int ?? 0), edges: (g.edges as! [Edge]), component: (comp as! [Int: Int])) as! Graph)
            i = _int((i &+ 1))
        }
        var mst_weight = 0
        var num_components = g.num_nodes
        var minimum_weight_edge = (create_empty_edges(g.num_nodes) as! [Edge])
        while (num_components > 1) {
            for e in g.edges {
                let u = e.u
                let v = e.v
                let w = e.w
                let u_comp = (g.component[u] ?? 0 as? Int ?? 0)
                let v_comp = (g.component[v] ?? 0 as? Int ?? 0)
                if (u_comp != v_comp) {
                    let current_u = (_idx(minimum_weight_edge, u_comp) as! Edge)
                    if ((current_u.u == (0 &- 1)) || (current_u.w > w)) {
                        minimum_weight_edge = _set(minimum_weight_edge, u_comp, (Edge(u: Int(u), v: Int(v), w: Int(w)) as! Edge))
                    }
                    let current_v = (_idx(minimum_weight_edge, v_comp) as! Edge)
                    if ((current_v.u == (0 &- 1)) || (current_v.w > w)) {
                        minimum_weight_edge = _set(minimum_weight_edge, v_comp, (Edge(u: Int(u), v: Int(v), w: Int(w)) as! Edge))
                    }
                }
            }
            for e in minimum_weight_edge {
                if (e.u != (0 &- 1)) {
                    let u = e.u
                    let v = e.v
                    let w = e.w
                    let u_comp = (g.component[u] ?? 0 as? Int ?? 0)
                    let v_comp = (g.component[v] ?? 0 as? Int ?? 0)
                    if (u_comp != v_comp) {
                        mst_weight = _int((mst_weight &+ w))
                        let res = union(&g, (component_size as! [Int]), u_comp, v_comp)
                        g = (res.graph as! Graph)
                        component_size = (res.component_size as! [Int])
                        print(_p((((("Added edge [" + _p(u)) + " - ") + _p(v)) + "]")))
                        print(_p(("Added weight: " + _p(w))))
                        print(_p(""))
                        num_components = _int((num_components &- 1))
                    }
                }
            }
            minimum_weight_edge = (create_empty_edges(g.num_nodes) as! [Edge])
        }
        print(_p(("The total weight of the minimal spanning tree is: " + _p(mst_weight))))
        return mst_weight
    }
    func main() {
        var g = new_graph(8)
        let edges: [[Int]] = ({
            var _arr: [[Int]] = []
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 0)
                _arr = _append(_arr, 1)
                _arr = _append(_arr, 10)
                return _arr
            }() as! [Int]))
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 0)
                _arr = _append(_arr, 2)
                _arr = _append(_arr, 6)
                return _arr
            }() as! [Int]))
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 0)
                _arr = _append(_arr, 3)
                _arr = _append(_arr, 5)
                return _arr
            }() as! [Int]))
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 1)
                _arr = _append(_arr, 3)
                _arr = _append(_arr, 15)
                return _arr
            }() as! [Int]))
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 2)
                _arr = _append(_arr, 3)
                _arr = _append(_arr, 4)
                return _arr
            }() as! [Int]))
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 3)
                _arr = _append(_arr, 4)
                _arr = _append(_arr, 8)
                return _arr
            }() as! [Int]))
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 4)
                _arr = _append(_arr, 5)
                _arr = _append(_arr, 10)
                return _arr
            }() as! [Int]))
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 4)
                _arr = _append(_arr, 6)
                _arr = _append(_arr, 6)
                return _arr
            }() as! [Int]))
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 4)
                _arr = _append(_arr, 7)
                _arr = _append(_arr, 5)
                return _arr
            }() as! [Int]))
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 5)
                _arr = _append(_arr, 7)
                _arr = _append(_arr, 15)
                return _arr
            }() as! [Int]))
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 6)
                _arr = _append(_arr, 7)
                _arr = _append(_arr, 4)
                return _arr
            }() as! [Int]))
            return _arr
        }() as! [[Int]])
        for e in edges {
            g = (add_edge((g as! Graph), (_idx(e, 0) as? Int ?? 0), (_idx(e, 1) as? Int ?? 0), (_idx(e, 2) as? Int ?? 0)) as! Graph)
        }
        _ = _int(boruvka(&g))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
