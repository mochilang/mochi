// Generated by Mochi transpiler v0.10.59 on 2025-08-07 08:56:37 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
struct SearchResult: Codable {
    var path: [[Int]]
    var action: [[Int]]
    init() {
        self.path = []
        self.action = []
    }
    init(path: [[Int]], action: [[Int]]) {
        self.path = path
        self.action = action
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let DIRECTIONS: [[Int]] = ([([-1, 0] as! [Int]), ([0, -1] as! [Int]), ([1, 0] as! [Int]), ([0, 1] as! [Int])] as! [[Int]])
    func iabs(_ x: Int) -> Int {
        if (x < 0) {
            return -x
        }
        return x
    }
    func search(_ grid: [[Int]], _ `init`: [Int], _ goal: [Int], _ cost: Int, _ heuristic: [[Int]]) -> SearchResult {
        var closed: [[Int]] = ([] as! [[Int]])
        var r: Int = 0
        while (r < Int(((grid).count))) {
            var row: [Int] = ([] as! [Int])
            var c: Int = 0
            while (c < Int((((grid[0] as! [Int])).count))) {
                row = (_append(row, 0) as! [Int])
                c = Int((c &+ 1))
            }
            closed = (_append(closed, row) as! [[Int]])
            r = Int((r &+ 1))
        }
        closed[(`init`[0] as? Int ?? 0)][(`init`[1] as? Int ?? 0)] = 1
        var action: [[Int]] = ([] as! [[Int]])
        r = 0
        while (r < Int(((grid).count))) {
            var row: [Int] = ([] as! [Int])
            var c: Int = 0
            while (c < Int((((grid[0] as! [Int])).count))) {
                row = (_append(row, 0) as! [Int])
                c = Int((c &+ 1))
            }
            action = (_append(action, row) as! [[Int]])
            r = Int((r &+ 1))
        }
        var x: Int = (`init`[0] as? Int ?? 0)
        var y: Int = (`init`[1] as? Int ?? 0)
        var g: Int = 0
        var f: Int = (g &+ (heuristic[x][y] as? Int ?? 0))
        var cell: [[Int]] = ([([f, g, x, y] as! [Int])] as! [[Int]])
        var found: Bool = false
        var resign: Bool = false
        while (((!found) as! Bool) && ((!resign) as! Bool)) {
            if (Int(((cell).count)) == 0) {
                _ = fatalError("Algorithm is unable to find solution")
            } else {
                var best_i: Int = 0
                var best_f: Int = (cell[0][0] as? Int ?? 0)
                var i: Int = 1
                while (i < Int(((cell).count))) {
                    if ((cell[i][0] as? Int ?? 0) < best_f) {
                        best_f = (cell[i][0] as? Int ?? 0)
                        best_i = Int(i)
                    }
                    i = Int((i &+ 1))
                }
                let next_cell: [Int] = (cell[best_i] as! [Int])
                var new_cell: [[Int]] = ([] as! [[Int]])
                i = 0
                while (i < Int(((cell).count))) {
                    if (i != best_i) {
                        new_cell = (_append(new_cell, (cell[i] as! [Int])) as! [[Int]])
                    }
                    i = Int((i &+ 1))
                }
                cell = (new_cell as! [[Int]])
                x = (next_cell[2] as? Int ?? 0)
                y = (next_cell[3] as? Int ?? 0)
                g = (next_cell[1] as? Int ?? 0)
                if ((x == (goal[0] as? Int ?? 0)) && (y == (goal[1] as? Int ?? 0))) {
                    found = true
                } else {
                    var d: Int = 0
                    while (d < Int(((DIRECTIONS).count))) {
                        let x2 = (x &+ (DIRECTIONS[d][0] as? Int ?? 0))
                        let y2 = (y &+ (DIRECTIONS[d][1] as? Int ?? 0))
                        if ((((((x2 >= 0) && (x2 < Int(((grid).count)))) && (y2 >= 0)) && (y2 < Int((((grid[0] as! [Int])).count)))) && ((closed[x2][y2] as? Int ?? 0) == 0)) && ((grid[x2][y2] as? Int ?? 0) == 0)) {
                            let g2 = (g &+ cost)
                            let f2 = (g2 &+ (heuristic[x2][y2] as? Int ?? 0))
                            cell = (_append(cell, ([f2, g2, x2, y2] as! [Int])) as! [[Int]])
                            closed[x2][y2] = 1
                            action[x2][y2] = Int(d)
                        }
                        d = Int((d &+ 1))
                    }
                }
            }
        }
        var invpath: [[Int]] = ([] as! [[Int]])
        x = (goal[0] as? Int ?? 0)
        y = (goal[1] as? Int ?? 0)
        invpath = (_append(invpath, ([x, y] as! [Int])) as! [[Int]])
        while ((x != (`init`[0] as? Int ?? 0)) || (y != (`init`[1] as? Int ?? 0))) {
            let dir = (action[x][y] as? Int ?? 0)
            let x2 = (x &- (DIRECTIONS[dir][0] as? Int ?? 0))
            let y2 = (y &- (DIRECTIONS[dir][1] as? Int ?? 0))
            x = Int(x2)
            y = Int(y2)
            invpath = (_append(invpath, ([x, y] as! [Int])) as! [[Int]])
        }
        var path: [[Int]] = ([] as! [[Int]])
        var idx: Int = (Int(((invpath).count)) &- 1)
        while (idx >= 0) {
            path = (_append(path, (invpath[idx] as! [Int])) as! [[Int]])
            idx = Int((idx &- 1))
        }
        return SearchResult(path: path, action: action)
    }
    func main() {
        let grid: [[Int]] = ([([0, 1, 0, 0, 0, 0] as! [Int]), ([0, 1, 0, 0, 0, 0] as! [Int]), ([0, 1, 0, 0, 0, 0] as! [Int]), ([0, 1, 0, 0, 1, 0] as! [Int]), ([0, 0, 0, 0, 1, 0] as! [Int])] as! [[Int]])
        let `init`: [Int] = ([0, 0] as! [Int])
        let goal: [Int] = ([(Int(((grid).count)) &- 1), (Int((((grid[0] as! [Int])).count)) &- 1)] as! [Int])
        let cost = 1
        var heuristic: [[Int]] = ([] as! [[Int]])
        var i: Int = 0
        while (i < Int(((grid).count))) {
            var row: [Int] = ([] as! [Int])
            var j: Int = 0
            while (j < Int((((grid[0] as! [Int])).count))) {
                let h = (Int(iabs((i &- (goal[0] as? Int ?? 0)))) &+ Int(iabs((j &- (goal[1] as? Int ?? 0)))))
                if ((grid[i][j] as? Int ?? 0) == 1) {
                    row = (_append(row, 99) as! [Int])
                } else {
                    row = (_append(row, h) as! [Int])
                }
                j = Int((j &+ 1))
            }
            heuristic = (_append(heuristic, row) as! [[Int]])
            i = Int((i &+ 1))
        }
        let result = search((grid as! [[Int]]), (`init` as! [Int]), (goal as! [Int]), cost, (heuristic as! [[Int]]))
        print(_p("ACTION MAP"))
        var rr: Int = 0
        while (rr < Int(((result.action).count))) {
            print(_p("[" + (result.action[rr] as! [Int]).map{ if let s = $0 as? String { "\"" + s.replacingOccurrences(of: "\"", with: "\\\"") + "\"" } else { _p($0) } }.joined(separator: ", ") + "]"))
            rr = Int((rr &+ 1))
        }
        var p: Int = 0
        while (p < Int(((result.path).count))) {
            print(_p("[" + (result.path[p] as! [Int]).map{ if let s = $0 as? String { "\"" + s.replacingOccurrences(of: "\"", with: "\\\"") + "\"" } else { _p($0) } }.joined(separator: ", ") + "]"))
            p = Int((p &+ 1))
        }
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
