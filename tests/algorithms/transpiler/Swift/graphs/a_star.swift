// Generated by Mochi transpiler v0.10.64 on 2025-08-13 16:15:32 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
struct SearchResult: Codable {
    var path: [[Int]]
    var action: [[Int]]
    init() {
        self.path = []
        self.action = []
    }
    init(path: [[Int]], action: [[Int]]) {
        self.path = path
        self.action = action
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let DIRECTIONS: [[Int]] = ({
        var _arr: [[Int]] = []
        _arr = _append(_arr, ({
            var _arr: [Int] = []
            _arr = _append(_arr, -1)
            _arr = _append(_arr, 0)
            return _arr
        }() as! [Int]))
        _arr = _append(_arr, ({
            var _arr: [Int] = []
            _arr = _append(_arr, 0)
            _arr = _append(_arr, -1)
            return _arr
        }() as! [Int]))
        _arr = _append(_arr, ({
            var _arr: [Int] = []
            _arr = _append(_arr, 1)
            _arr = _append(_arr, 0)
            return _arr
        }() as! [Int]))
        _arr = _append(_arr, ({
            var _arr: [Int] = []
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 1)
            return _arr
        }() as! [Int]))
        return _arr
    }() as! [[Int]])
    func iabs(_ x: Int) -> Int {
        if (x < 0) {
            return -x
        }
        return x
    }
    func search(_ grid: [[Int]], _ `init`: [Int], _ goal: [Int], _ cost: Int, _ heuristic: [[Int]]) -> SearchResult {
        var closed: [[Int]] = ([] as! [[Int]])
        var r = 0
        while (r < _int(((grid).count))) {
            var row: [Int] = ([] as! [Int])
            var c = 0
            while (c < _int((((_idx(grid, 0) as! [Int])).count))) {
                row = (_append(row, 0) as! [Int])
                c = _int((c &+ 1))
            }
            closed = (_append(closed, row) as! [[Int]])
            r = _int((r &+ 1))
        }
        var _tmp4 = (_idx(closed, (_idx(`init`, 0) as? Int ?? 0)) as! [Int])
        _tmp4 = _set(_tmp4, (_idx(`init`, 1) as? Int ?? 0), 1)
        closed = _set(closed, (_idx(`init`, 0) as? Int ?? 0), (_tmp4 as! [Int]))
        var action: [[Int]] = ([] as! [[Int]])
        r = 0
        while (r < _int(((grid).count))) {
            var row: [Int] = ([] as! [Int])
            var c = 0
            while (c < _int((((_idx(grid, 0) as! [Int])).count))) {
                row = (_append(row, 0) as! [Int])
                c = _int((c &+ 1))
            }
            action = (_append(action, row) as! [[Int]])
            r = _int((r &+ 1))
        }
        var x = (_idx(`init`, 0) as? Int ?? 0)
        var y = (_idx(`init`, 1) as? Int ?? 0)
        var g = 0
        var f = (g &+ (_idx(_idx(heuristic, x)!, y) as? Int ?? 0))
        var cell: [[Int]] = ({
            var _arr: [[Int]] = []
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, f)
                _arr = _append(_arr, g)
                _arr = _append(_arr, x)
                _arr = _append(_arr, y)
                return _arr
            }() as! [Int]))
            return _arr
        }() as! [[Int]])
        var found = false
        var resign = false
        while (((!found) as! Bool) && ((!resign) as! Bool)) {
            if (_int(((cell).count)) == 0) {
                _ = fatalError("Algorithm is unable to find solution")
            } else {
                var best_i = 0
                var best_f = (_idx(_idx(cell, 0)!, 0) as? Int ?? 0)
                var i = 1
                while (i < _int(((cell).count))) {
                    if ((_idx(_idx(cell, i)!, 0) as? Int ?? 0) < best_f) {
                        best_f = (_idx(_idx(cell, i)!, 0) as? Int ?? 0)
                        best_i = Int(i)
                    }
                    i = _int((i &+ 1))
                }
                let next_cell: [Int] = (_idx(cell, best_i) as! [Int])
                var new_cell: [[Int]] = ([] as! [[Int]])
                i = 0
                while (i < _int(((cell).count))) {
                    if (i != best_i) {
                        new_cell = (_append(new_cell, (_idx(cell, i) as! [Int])) as! [[Int]])
                    }
                    i = _int((i &+ 1))
                }
                cell = (new_cell as! [[Int]])
                x = (_idx(next_cell, 2) as? Int ?? 0)
                y = (_idx(next_cell, 3) as? Int ?? 0)
                g = (_idx(next_cell, 1) as? Int ?? 0)
                if ((x == (_idx(goal, 0) as? Int ?? 0)) && (y == (_idx(goal, 1) as? Int ?? 0))) {
                    found = true
                } else {
                    var d = 0
                    while (d < _int(((DIRECTIONS).count))) {
                        let x2 = (x &+ (_idx(_idx(DIRECTIONS, d)!, 0) as? Int ?? 0))
                        let y2 = (y &+ (_idx(_idx(DIRECTIONS, d)!, 1) as? Int ?? 0))
                        if ((((((x2 >= 0) && (x2 < _int(((grid).count)))) && (y2 >= 0)) && (y2 < _int((((_idx(grid, 0) as! [Int])).count)))) && ((_idx(_idx(closed, x2)!, y2) as? Int ?? 0) == 0)) && ((_idx(_idx(grid, x2)!, y2) as? Int ?? 0) == 0)) {
                            let g2 = (g &+ cost)
                            let f2 = (g2 &+ (_idx(_idx(heuristic, x2)!, y2) as? Int ?? 0))
                            cell = (_append(cell, ({
                                var _arr: [Int] = []
                                _arr = _append(_arr, f2)
                                _arr = _append(_arr, g2)
                                _arr = _append(_arr, x2)
                                _arr = _append(_arr, y2)
                                return _arr
                            }() as! [Int])) as! [[Int]])
                            var _tmp5 = (_idx(closed, x2) as! [Int])
                            _tmp5 = _set(_tmp5, y2, 1)
                            closed = _set(closed, x2, (_tmp5 as! [Int]))
                            var _tmp6 = (_idx(action, x2) as! [Int])
                            _tmp6 = _set(_tmp6, y2, Int(d))
                            action = _set(action, x2, (_tmp6 as! [Int]))
                        }
                        d = _int((d &+ 1))
                    }
                }
            }
        }
        var invpath: [[Int]] = ([] as! [[Int]])
        x = (_idx(goal, 0) as? Int ?? 0)
        y = (_idx(goal, 1) as? Int ?? 0)
        invpath = (_append(invpath, ({
            var _arr: [Int] = []
            _arr = _append(_arr, x)
            _arr = _append(_arr, y)
            return _arr
        }() as! [Int])) as! [[Int]])
        while ((x != (_idx(`init`, 0) as? Int ?? 0)) || (y != (_idx(`init`, 1) as? Int ?? 0))) {
            let dir = (_idx(_idx(action, x)!, y) as? Int ?? 0)
            let x2 = (x &- (_idx(_idx(DIRECTIONS, dir)!, 0) as? Int ?? 0))
            let y2 = (y &- (_idx(_idx(DIRECTIONS, dir)!, 1) as? Int ?? 0))
            x = Int(x2)
            y = Int(y2)
            invpath = (_append(invpath, ({
                var _arr: [Int] = []
                _arr = _append(_arr, x)
                _arr = _append(_arr, y)
                return _arr
            }() as! [Int])) as! [[Int]])
        }
        var path: [[Int]] = ([] as! [[Int]])
        var idx = (_int(((invpath).count)) &- 1)
        while (idx >= 0) {
            path = (_append(path, (_idx(invpath, idx) as! [Int])) as! [[Int]])
            idx = _int((idx &- 1))
        }
        return SearchResult(path: (path as! [[Int]]), action: (action as! [[Int]]))
    }
    func main() {
        let grid: [[Int]] = ({
            var _arr: [[Int]] = []
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 0)
                _arr = _append(_arr, 1)
                _arr = _append(_arr, 0)
                _arr = _append(_arr, 0)
                _arr = _append(_arr, 0)
                _arr = _append(_arr, 0)
                return _arr
            }() as! [Int]))
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 0)
                _arr = _append(_arr, 1)
                _arr = _append(_arr, 0)
                _arr = _append(_arr, 0)
                _arr = _append(_arr, 0)
                _arr = _append(_arr, 0)
                return _arr
            }() as! [Int]))
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 0)
                _arr = _append(_arr, 1)
                _arr = _append(_arr, 0)
                _arr = _append(_arr, 0)
                _arr = _append(_arr, 0)
                _arr = _append(_arr, 0)
                return _arr
            }() as! [Int]))
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 0)
                _arr = _append(_arr, 1)
                _arr = _append(_arr, 0)
                _arr = _append(_arr, 0)
                _arr = _append(_arr, 1)
                _arr = _append(_arr, 0)
                return _arr
            }() as! [Int]))
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 0)
                _arr = _append(_arr, 0)
                _arr = _append(_arr, 0)
                _arr = _append(_arr, 0)
                _arr = _append(_arr, 1)
                _arr = _append(_arr, 0)
                return _arr
            }() as! [Int]))
            return _arr
        }() as! [[Int]])
        let `init`: [Int] = ({
            var _arr: [Int] = []
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 0)
            return _arr
        }() as! [Int])
        let goal: [Int] = ({
            var _arr: [Int] = []
            _arr = _append(_arr, (_int(((grid).count)) &- 1))
            _arr = _append(_arr, (_int((((_idx(grid, 0) as! [Int])).count)) &- 1))
            return _arr
        }() as! [Int])
        let cost = 1
        var heuristic: [[Int]] = ([] as! [[Int]])
        var i = 0
        while (i < _int(((grid).count))) {
            var row: [Int] = ([] as! [Int])
            var j = 0
            while (j < _int((((_idx(grid, 0) as! [Int])).count))) {
                let h = (_int(iabs((i &- (_idx(goal, 0) as? Int ?? 0)))) &+ _int(iabs((j &- (_idx(goal, 1) as? Int ?? 0)))))
                if ((_idx(_idx(grid, i)!, j) as? Int ?? 0) == 1) {
                    row = (_append(row, 99) as! [Int])
                } else {
                    row = (_append(row, h) as! [Int])
                }
                j = _int((j &+ 1))
            }
            heuristic = (_append(heuristic, row) as! [[Int]])
            i = _int((i &+ 1))
        }
        let result = search((grid as! [[Int]]), (`init` as! [Int]), (goal as! [Int]), cost, (heuristic as! [[Int]]))
        print(_p("ACTION MAP"))
        var rr = 0
        while (rr < _int(((result.action).count))) {
            print(_p("[" + (_idx(result.action, rr) as! [Int]).map{ if let s = $0 as? String { "\"" + s.replacingOccurrences(of: "\"", with: "\\\"") + "\"" } else { _p($0) } }.joined(separator: ", ") + "]"))
            rr = _int((rr &+ 1))
        }
        var p = 0
        while (p < _int(((result.path).count))) {
            print(_p("[" + (_idx(result.path, p) as! [Int]).map{ if let s = $0 as? String { "\"" + s.replacingOccurrences(of: "\"", with: "\\\"") + "\"" } else { _p($0) } }.joined(separator: ", ") + "]"))
            p = _int((p &+ 1))
        }
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
