// Generated by Mochi transpiler v0.10.65 on 2025-08-14 17:14:01 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let INF: Double = 1000000000.0
    func floyd_warshall(_ graph: [[Double]]) -> [[Double]] {
        let v = _int(((graph).count))
        var dist: [[Double]] = ([] as! [[Double]])
        var i = 0
        while (i < v) {
            var row: [Double] = ([] as! [Double])
            var j = 0
            while (j < v) {
                row = (_append(row, Double(_idx(_idx(graph, i)!, j))) as! [Double])
                j = _int((j &+ 1))
            }
            dist = (_append(dist, row) as! [[Double]])
            i = _int((i &+ 1))
        }
        var k = 0
        while (k < v) {
            var i = 0
            while (i < v) {
                var j = 0
                while (j < v) {
                    if (((Double(_idx(_idx(dist, i)!, k)) < INF) && (Double(_idx(_idx(dist, k)!, j)) < INF)) && ((Double(_idx(_idx(dist, i)!, k)) + Double(_idx(_idx(dist, k)!, j))) < Double(_idx(_idx(dist, i)!, j)))) {
                        var _tmp2 = (_idx(dist, i) as! [Double])
                        _tmp2 = _set(_tmp2, j, Double((Double(_idx(_idx(dist, i)!, k)) + Double(_idx(_idx(dist, k)!, j)))))
                        dist = _set(dist, i, (_tmp2 as! [Double]))
                    }
                    j = _int((j &+ 1))
                }
                i = _int((i &+ 1))
            }
            k = _int((k &+ 1))
        }
        return dist
    }
    func print_dist(_ dist: [[Double]]) -> Void {
        print(_p("\nThe shortest path matrix using Floyd Warshall algorithm\n"))
        var i = 0
        while (i < _int(((dist).count))) {
            var j = 0
            var line = ""
            while (j < _int((((_idx(dist, i) as! [Double])).count))) {
                if (Double(_idx(_idx(dist, i)!, j)) >= (INF / 2.0)) {
                    line = ((line + "INF\t") as! String)
                } else {
                    line = (((line + _p(_int(_int(Double(_idx(_idx(dist, i)!, j)))))) + "\t") as! String)
                }
                j = _int((j &+ 1))
            }
            print(_p(line))
            i = _int((i &+ 1))
        }
    }
    let graph: [[Double]] = ({
        var _arr: [[Double]] = []
        _arr = _append(_arr, ({
            var _arr: [Double] = []
            _arr = _append(_arr, 0.0)
            _arr = _append(_arr, 5.0)
            _arr = _append(_arr, INF)
            _arr = _append(_arr, 10.0)
            return _arr
        }() as! [Double]))
        _arr = _append(_arr, ({
            var _arr: [Double] = []
            _arr = _append(_arr, INF)
            _arr = _append(_arr, 0.0)
            _arr = _append(_arr, 3.0)
            _arr = _append(_arr, INF)
            return _arr
        }() as! [Double]))
        _arr = _append(_arr, ({
            var _arr: [Double] = []
            _arr = _append(_arr, INF)
            _arr = _append(_arr, INF)
            _arr = _append(_arr, 0.0)
            _arr = _append(_arr, 1.0)
            return _arr
        }() as! [Double]))
        _arr = _append(_arr, ({
            var _arr: [Double] = []
            _arr = _append(_arr, INF)
            _arr = _append(_arr, INF)
            _arr = _append(_arr, INF)
            _arr = _append(_arr, 0.0)
            return _arr
        }() as! [Double]))
        return _arr
    }() as! [[Double]])
    let result: [[Double]] = (floyd_warshall((graph as! [[Double]])) as! [[Double]])
    _ = print_dist((result as! [[Double]]))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
