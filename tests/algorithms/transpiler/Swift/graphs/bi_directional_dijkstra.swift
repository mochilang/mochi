// Generated by Mochi transpiler v0.10.59 on 2025-08-07 09:00:04 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
struct Edge: Codable {
    var to: String
    var cost: Int
    init() {
        self.to = ""
        self.cost = 0
    }
    init(to: String, cost: Int) {
        self.to = to
        self.cost = cost
    }
}
struct QItem: Codable {
    var node: String
    var cost: Int
    init() {
        self.node = ""
        self.cost = 0
    }
    init(node: String, cost: Int) {
        self.node = node
        self.cost = cost
    }
}
struct PassResult: Codable {
    var queue: [QItem]
    var dist: Int
    init() {
        self.queue = []
        self.dist = 0
    }
    init(queue: [QItem], dist: Int) {
        self.queue = queue
        self.dist = dist
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func get_min_index(_ q: [QItem]) -> Int {
        var idx: Int = 0
        var i: Int = 1
        while (i < Int(((q).count))) {
            if (String(describing: q[i].cost) < String(describing: q[idx].cost)
            ) {
                idx = Int(i)
            }
            i = Int((i &+ 1))
        }
        return idx
    }
    func remove_at(_ q: [QItem], _ idx: Int) -> [QItem] {
        var res: [QItem] = ([] as! [QItem])
        var i: Int = 0
        while (i < Int(((q).count))) {
            if (i != idx) {
                res = (_append(res, (q[i] as! QItem)) as! [QItem])
            }
            i = Int((i &+ 1))
        }
        return res
    }
    func pass_and_relaxation(_ graph: [String: [Edge]], _ v: String, _ visited_forward: [String: Bool], _ visited_backward: [String: Bool], _ cst_fwd: inout [String: Int], _ cst_bwd: [String: Int], _ queue: [QItem], _ parent: inout [String: String], _ shortest_distance: Int) -> PassResult {
        var q: [QItem] = queue
        var sd: Int = shortest_distance
        for e in (graph[String(String(describing: v))] as! [Edge]) {
            let nxt = e.to
            let d = e.cost
            if (visited_forward[nxt] != nil) {
                continue
            }
            let old_cost = Int(((cst_fwd[nxt] != nil) ? (cst_fwd[String(String(describing: nxt))] as? Int ?? 0) : 2147483647))
            let new_cost = ((cst_fwd[String(String(describing: v))] as? Int ?? 0) &+ d)
            if (new_cost < old_cost) {
                q = (_append(q, QItem(node: nxt, cost: new_cost)) as! [QItem])
                cst_fwd = _set(cst_fwd, String(describing: nxt), Int(new_cost))
                parent = _set(parent, String(describing: nxt), (v as! String))
            }
            if (visited_backward[nxt] != nil) {
                let alt = (((cst_fwd[String(String(describing: v))] as? Int ?? 0) &+ d) &+ (cst_bwd[String(String(describing: nxt))] as? Int ?? 0))
                if (alt < sd) {
                    sd = Int(alt)
                }
            }
        }
        return PassResult(queue: q, dist: sd)
    }
    func bidirectional_dij(_ source: String, _ destination: String, _ graph_forward: [String: [Edge]], _ graph_backward: [String: [Edge]]) -> Int {
        var shortest_path_distance: Int = -1
        var visited_forward: [String: Bool] = ([:] as! [String: Bool])
        var visited_backward: [String: Bool] = ([:] as! [String: Bool])
        var cst_fwd: [String: Int] = ([:] as! [String: Int])
        cst_fwd = _set(cst_fwd, String(describing: source), 0)
        var cst_bwd: [String: Int] = ([:] as! [String: Int])
        cst_bwd = _set(cst_bwd, String(describing: destination), 0)
        var parent_forward: [String: String] = ([:] as! [String: String])
        parent_forward = _set(parent_forward, String(describing: source), "")
        var parent_backward: [String: String] = ([:] as! [String: String])
        parent_backward = _set(parent_backward, String(describing: destination), "")
        var queue_forward: [QItem] = ([] as! [QItem])
        queue_forward = (_append(queue_forward, QItem(node: source, cost: 0)) as! [QItem])
        var queue_backward: [QItem] = ([] as! [QItem])
        queue_backward = (_append(queue_backward, QItem(node: destination, cost: 0)) as! [QItem])
        var shortest_distance: Int = 2147483647
        if (source == destination) {
            return 0
        }
        while ((Int(((queue_forward).count)) > 0) && (Int(((queue_backward).count)) > 0)) {
            let idx_f = Int(get_min_index((queue_forward as! [QItem])))
            let item_f = (queue_forward[idx_f] as! QItem)
            queue_forward = (remove_at((queue_forward as! [QItem]), idx_f) as! [QItem])
            let v_fwd = item_f.node
            visited_forward = _set(visited_forward, String(describing: v_fwd), true)
            let idx_b = Int(get_min_index((queue_backward as! [QItem])))
            let item_b = (queue_backward[idx_b] as! QItem)
            queue_backward = (remove_at((queue_backward as! [QItem]), idx_b) as! [QItem])
            let v_bwd = item_b.node
            visited_backward = _set(visited_backward, String(describing: v_bwd), true)
            let res_f = pass_and_relaxation((graph_forward as! [String: [Edge]]), (v_fwd as! String), (visited_forward as! [String: Bool]), (visited_backward as! [String: Bool]), &cst_fwd, (cst_bwd as! [String: Int]), (queue_forward as! [QItem]), &parent_forward, shortest_distance)
            queue_forward = (res_f.queue as! [QItem])
            shortest_distance = Int(res_f.dist)
            let res_b = pass_and_relaxation((graph_backward as! [String: [Edge]]), (v_bwd as! String), (visited_backward as! [String: Bool]), (visited_forward as! [String: Bool]), &cst_bwd, (cst_fwd as! [String: Int]), (queue_backward as! [QItem]), &parent_backward, shortest_distance)
            queue_backward = (res_b.queue as! [QItem])
            shortest_distance = Int(res_b.dist)
            if (((cst_fwd[String(String(describing: v_fwd))] as? Int ?? 0) &+ (cst_bwd[String(String(describing: v_bwd))] as? Int ?? 0)) >= shortest_distance) {
                break
            }
        }
        if (shortest_distance != 2147483647) {
            shortest_path_distance = Int(shortest_distance)
        }
        return shortest_path_distance
    }
    var graph_fwd: [String: [Edge]] = (["B": ([Edge(to: "C", cost: 1)] as! [Edge]), "C": ([Edge(to: "D", cost: 1)] as! [Edge]), "D": ([Edge(to: "F", cost: 1)] as! [Edge]), "E": ([Edge(to: "B", cost: 1), Edge(to: "G", cost: 2)] as! [Edge]), "F": [] as [Any], "G": ([Edge(to: "F", cost: 1)] as! [Edge])] as! [String: [Edge]])
    var graph_bwd: [String: [Edge]] = (["B": ([Edge(to: "E", cost: 1)] as! [Edge]), "C": ([Edge(to: "B", cost: 1)] as! [Edge]), "D": ([Edge(to: "C", cost: 1)] as! [Edge]), "F": ([Edge(to: "D", cost: 1), Edge(to: "G", cost: 1)] as! [Edge]), "E": [] as [Any], "G": ([Edge(to: "E", cost: 2)] as! [Edge])] as! [String: [Edge]])
    print(_p(_p(Int(bidirectional_dij("E", "F", (graph_fwd as! [String: [Edge]]), (graph_bwd as! [String: [Edge]]))))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
