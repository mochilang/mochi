// Generated by Mochi transpiler v0.10.59 on 2025-08-07 09:59:03 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
struct Node: Codable {
    var pos: String
    var path: [String]
    init() {
        self.pos = ""
        self.path = []
    }
    init(pos: String, path: [String]) {
        self.pos = pos
        self.path = path
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let grid: [[Int]] = ([([0, 0, 0, 0, 0, 0, 0] as! [Int]), ([0, 1, 0, 0, 0, 0, 0] as! [Int]), ([0, 0, 0, 0, 0, 0, 0] as! [Int]), ([0, 0, 1, 0, 0, 0, 0] as! [Int]), ([1, 0, 1, 0, 0, 0, 0] as! [Int]), ([0, 0, 0, 0, 0, 0, 0] as! [Int]), ([0, 0, 0, 0, 1, 0, 0] as! [Int])] as! [[Int]])
    let delta: [[Int]] = ([([-1, 0] as! [Int]), ([0, -1] as! [Int]), ([1, 0] as! [Int]), ([0, 1] as! [Int])] as! [[Int]])
    func key(_ y: Int, _ x: Int) -> String {
        return ((_p(y) + ",") + _p(x))
    }
    func parse_int(_ s: String) -> Int {
        var value: Int = 0
        var i: Int = 0
        while (i < Int(((s).count))) {
            let c = (String(Array(s)[i]) as! String)
            value = Int(((value &* 10) &+ Int(c)))
            i = Int((i &+ 1))
        }
        return value
    }
    func parse_key(_ k: String) -> [Int] {
        var idx: Int = 0
        while ((idx < Int(((k).count))) && (String(describing: String(Array(String(describing: (k as! String)))[idx..<(idx &+ 1)])) != ",")) {
            idx = Int((idx &+ 1))
        }
        let y = Int(parse_int(String(describing: String(Array(String(describing: (k as! String)))[0..<idx]))))
        let x = Int(parse_int(String(describing: String(Array(String(describing: (k as! String)))[(idx &+ 1)..<Int(((k).count))]))))
        return ([y, x] as! [Int])
    }
    func neighbors(_ pos: String) -> [String] {
        let coords: [Int] = (parse_key((pos as! String)) as! [Int])
        let y = (coords[0] as? Int ?? 0)
        let x = (coords[1] as? Int ?? 0)
        var res: [String] = ([] as! [String])
        var i: Int = 0
        while (i < Int(((delta).count))) {
            let ny = (y &+ (delta[i][0] as? Int ?? 0))
            let nx = (x &+ (delta[i][1] as? Int ?? 0))
            if ((((ny >= 0) && (ny < Int(((grid).count)))) && (nx >= 0)) && (nx < Int((((grid[0] as! [Int])).count)))) {
                if ((grid[ny][nx] as? Int ?? 0) == 0) {
                    res = (_append(res, String(describing: key(ny, nx))) as! [String])
                }
            }
            i = Int((i &+ 1))
        }
        return res
    }
    func reverse_list(_ lst: [String]) -> [String] {
        var res: [String] = ([] as! [String])
        var i: Int = (Int(((lst).count)) &- 1)
        while (i >= 0) {
            res = (_append(res, (lst[i] as! String)) as! [String])
            i = Int((i &- 1))
        }
        return res
    }
    func bfs(_ start: String, _ goal: String) -> [String] {
        var queue: [Node] = ([] as! [Node])
        queue = (_append(queue, Node(pos: start, path: ([start] as! [String]))) as! [Node])
        var head: Int = 0
        var visited: [String: Bool] = (["start": true] as! [String: Bool])
        while (head < Int(((queue).count))) {
            let node = (queue[head] as! Node)
            head = Int((head &+ 1))
            if (node.pos == goal) {
                return node.path
            }
            let neigh: [String] = (neighbors((node.pos as! String)) as! [String])
            var i: Int = 0
            while (i < Int(((neigh).count))) {
                let npos = (neigh[i] as! String)
                if (!(visited[npos] != nil)) {
                    visited = _set(visited, String(describing: npos), true)
                    let new_path: [String] = (_append(node.path, npos) as! [String])
                    queue = (_append(queue, Node(pos: npos, path: new_path)) as! [Node])
                }
                i = Int((i &+ 1))
            }
        }
        return ([] as! [String])
    }
    func bidirectional_bfs(_ start: String, _ goal: String) -> [String] {
        var queue_f: [Node] = ([] as! [Node])
        var queue_b: [Node] = ([] as! [Node])
        queue_f = (_append(queue_f, Node(pos: start, path: ([start] as! [String]))) as! [Node])
        queue_b = (_append(queue_b, Node(pos: goal, path: ([goal] as! [String]))) as! [Node])
        var head_f: Int = 0
        var head_b: Int = 0
        var visited_f: [String: [String]] = (["start": ([start] as! [String])] as! [String: [String]])
        var visited_b: [String: [String]] = (["goal": ([goal] as! [String])] as! [String: [String]])
        while ((head_f < Int(((queue_f).count))) && (head_b < Int(((queue_b).count)))) {
            let node_f = (queue_f[head_f] as! Node)
            head_f = Int((head_f &+ 1))
            let neigh_f: [String] = (neighbors((node_f.pos as! String)) as! [String])
            var i: Int = 0
            while (i < Int(((neigh_f).count))) {
                let npos = (neigh_f[i] as! String)
                if (!(visited_f[npos] != nil)) {
                    var new_path: [String] = (_append(node_f.path, npos) as! [String])
                    visited_f = _set(visited_f, String(describing: npos), (new_path as! [String]))
                    if (visited_b[npos] != nil) {
                        var rev: [String] = (reverse_list((visited_b[String(String(describing: npos))] as! [String])) as! [String])
                        var j: Int = 1
                        while (j < Int(((rev).count))) {
                            new_path = (_append(new_path, (rev[j] as! String)) as! [String])
                            j = Int((j &+ 1))
                        }
                        return new_path
                    }
                    queue_f = (_append(queue_f, Node(pos: npos, path: new_path)) as! [Node])
                }
                i = Int((i &+ 1))
            }
            let node_b = (queue_b[head_b] as! Node)
            head_b = Int((head_b &+ 1))
            let neigh_b: [String] = (neighbors((node_b.pos as! String)) as! [String])
            var j: Int = 0
            while (j < Int(((neigh_b).count))) {
                let nposb = (neigh_b[j] as! String)
                if (!(visited_b[nposb] != nil)) {
                    var new_path_b: [String] = (_append(node_b.path, nposb) as! [String])
                    visited_b = _set(visited_b, String(describing: nposb), (new_path_b as! [String]))
                    if (visited_f[nposb] != nil) {
                        var path_f: [String] = (visited_f[String(String(describing: nposb))] as! [String])
                        new_path_b = (reverse_list((new_path_b as! [String])) as! [String])
                        var t: Int = 1
                        while (t < Int(((new_path_b).count))) {
                            path_f = (_append(path_f, (new_path_b[t] as! String)) as! [String])
                            t = Int((t &+ 1))
                        }
                        return path_f
                    }
                    queue_b = (_append(queue_b, Node(pos: nposb, path: new_path_b)) as! [Node])
                }
                j = Int((j &+ 1))
            }
        }
        return ([start] as! [String])
    }
    func path_to_string(_ path: [String]) -> String {
        if (Int(((path).count)) == 0) {
            return "[]"
        }
        var first: [Int] = (parse_key((path[0] as! String)) as! [Int])
        var s: String = (((("[(" + _p((first[0] as? Int ?? 0))) + ", ") + _p((first[1] as? Int ?? 0))) + ")")
        var i: Int = 1
        while (i < Int(((path).count))) {
            let c: [Int] = (parse_key((path[i] as! String)) as! [Int])
            s = ((((((s + ", (") + _p((c[0] as? Int ?? 0))) + ", ") + _p((c[1] as? Int ?? 0))) + ")") as! String)
            i = Int((i &+ 1))
        }
        s = ((s + "]") as! String)
        return s
    }
    let start = String(describing: key(0, 0))
    let goal = String(describing: key((Int(((grid).count)) &- 1), (Int((((grid[0] as! [Int])).count)) &- 1)))
    let path1: [String] = (bfs((start as! String), (goal as! String)) as! [String])
    print(_p(String(describing: path_to_string((path1 as! [String])))))
    let path2: [String] = (bidirectional_bfs((start as! String), (goal as! String)) as! [String])
    print(_p(String(describing: path_to_string((path2 as! [String])))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
