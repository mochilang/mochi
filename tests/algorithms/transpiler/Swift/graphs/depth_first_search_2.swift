// Generated by Mochi transpiler v0.10.65 on 2025-08-14 15:57:01 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
struct Graph: Codable {
    var vertex: [Int: [Int]]
    var size: Int
    init() {
        self.vertex = [:]
        self.size = 0
    }
    init(vertex: [Int: [Int]], size: Int) {
        self.vertex = vertex
        self.size = size
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func add_edge(_ g: inout Graph, _ from_vertex: Int, _ to_vertex: Int) -> Graph {
        var v = g.vertex
        if (v[from_vertex] != nil) {
            var lst: [Int] = (v[from_vertex] ?? [] as! [Int])
            lst = (_append(lst, to_vertex) as! [Int])
            v = _set(v, from_vertex, (lst as! [Int]))
        } else {
            v = _set(v, from_vertex, ({
                var _arr: [Int] = []
                _arr = _append(_arr, to_vertex)
                return _arr
            }() as! [Int]))
        }
        g.vertex = (v as! [Int: [Int]])
        if ((from_vertex &+ 1) > g.size) {
            g.size = _int((from_vertex &+ 1))
        }
        if ((to_vertex &+ 1) > g.size) {
            g.size = _int((to_vertex &+ 1))
        }
        return g
    }
    func list_to_string(_ lst: [Int]) -> String {
        var res = ""
        var i = 0
        while (i < _int(((lst).count))) {
            res = ((res + _p((_idx(lst, i) as? Int ?? 0))) as! String)
            if (i < (_int(((lst).count)) &- 1)) {
                res = ((res + " ") as! String)
            }
            i = _int((i &+ 1))
        }
        return res
    }
    func list_to_arrow(_ lst: [Int]) -> String {
        var res = ""
        var i = 0
        while (i < _int(((lst).count))) {
            res = ((res + _p((_idx(lst, i) as? Int ?? 0))) as! String)
            if (i < (_int(((lst).count)) &- 1)) {
                res = ((res + " -> ") as! String)
            }
            i = _int((i &+ 1))
        }
        return res
    }
    func print_graph(_ g: Graph) -> Void {
        print(_p(String(describing: g.vertex)))
        var i = 0
        while (i < g.size) {
            var edges: [Int] = ([] as! [Int])
            if (g.vertex[i] != nil) {
                edges = (g.vertex[i] ?? [] as! [Int])
            }
            let line = ((_p(i) + "  ->  ") + String(describing: list_to_arrow((edges as! [Int]))))
            print(_p(line))
            i = _int((i &+ 1))
        }
    }
    func dfs_recursive(_ g: Graph, _ start_vertex: Int, _ visited: inout [Bool], _ order: inout [Int]) -> [Int] {
        visited = _set(visited, start_vertex, true)
        order = (_append(order, start_vertex) as! [Int])
        if (g.vertex[start_vertex] != nil) {
            var neighbors: [Int] = (g.vertex[start_vertex] ?? [] as! [Int])
            var i = 0
            while (i < _int(((neighbors).count))) {
                let nb = (_idx(neighbors, i) as? Int ?? 0)
                if !(_idx(visited, nb) ?? false) {
                    order = (dfs_recursive((g as! Graph), nb, &visited, &order) as! [Int])
                }
                i = _int((i &+ 1))
            }
        }
        return order
    }
    func dfs(_ g: Graph) -> [Int] {
        let n = g.size
        var visited: [Bool] = ([] as! [Bool])
        var i = 0
        while (i < n) {
            visited = (_append(visited, false) as! [Bool])
            i = _int((i &+ 1))
        }
        var order: [Int] = ([] as! [Int])
        i = 0
        while (i < n) {
            if !(_idx(visited, i) ?? false) {
                order = (dfs_recursive((g as! Graph), i, &visited, &order) as! [Int])
            }
            i = _int((i &+ 1))
        }
        return order
    }
    var g = Graph(vertex: ([:] as! [Int: [Int]]), size: 0)
    g = (add_edge(&g, 0, 1) as! Graph)
    g = (add_edge(&g, 0, 2) as! Graph)
    g = (add_edge(&g, 1, 2) as! Graph)
    g = (add_edge(&g, 2, 0) as! Graph)
    g = (add_edge(&g, 2, 3) as! Graph)
    g = (add_edge(&g, 3, 3) as! Graph)
    _ = print_graph((g as! Graph))
    print(_p("DFS:"))
    print(_p(String(describing: list_to_string((dfs((g as! Graph)) as! [Int])))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
