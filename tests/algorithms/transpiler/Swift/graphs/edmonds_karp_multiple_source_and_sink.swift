// Generated by Mochi transpiler v0.10.65 on 2025-08-14 17:13:41 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func push_relabel_max_flow(_ graph: [[Int]], _ sources: [Int], _ sinks: [Int]) -> Int {
        if ((_int(((sources).count)) == 0) || (_int(((sinks).count)) == 0)) {
            return 0
        }
        var g: [[Int]] = graph
        var source_index: Int = (_idx(sources, 0) as? Int ?? 0)
        var sink_index: Int = (_idx(sinks, 0) as? Int ?? 0)
        if ((_int(((sources).count)) > 1) || (_int(((sinks).count)) > 1)) {
            var max_input_flow = 0
            var i = 0
            while (i < _int(((sources).count))) {
                var j = 0
                while (j < _int((((_idx(g, (_idx(sources, i) as? Int ?? 0)) as! [Int])).count))) {
                    max_input_flow = _int((max_input_flow &+ (_idx(_idx(g, (_idx(sources, i) as? Int ?? 0))!, j) as? Int ?? 0)))
                    j = _int((j &+ 1))
                }
                i = _int((i &+ 1))
            }
            var size = (_int(((g).count)) &+ 1)
            var new_graph: [[Int]] = ([] as! [[Int]])
            var zero_row: [Int] = ([] as! [Int])
            var j = 0
            while (j < size) {
                zero_row = (_append(zero_row, 0) as! [Int])
                j = _int((j &+ 1))
            }
            new_graph = (_append(new_graph, zero_row) as! [[Int]])
            var r = 0
            while (r < _int(((g).count))) {
                var row: [Int] = ({
                    var _arr: [Int] = []
                    _arr = _append(_arr, 0)
                    return _arr
                }() as! [Int])
                var c = 0
                while (c < _int((((_idx(g, r) as! [Int])).count))) {
                    row = (_append(row, (_idx(_idx(g, r)!, c) as? Int ?? 0)) as! [Int])
                    c = _int((c &+ 1))
                }
                new_graph = (_append(new_graph, row) as! [[Int]])
                r = _int((r &+ 1))
            }
            g = (new_graph as! [[Int]])
            i = 0
            while (i < _int(((sources).count))) {
                var _tmp7 = (_idx(g, 0) as! [Int])
                _tmp7 = _set(_tmp7, ((_idx(sources, i) as? Int ?? 0) &+ 1), Int(max_input_flow))
                g = _set(g, 0, (_tmp7 as! [Int]))
                i = _int((i &+ 1))
            }
            source_index = 0
            size = _int((_int(((g).count)) &+ 1))
            new_graph = ([] as! [[Int]])
            r = 0
            while (r < _int(((g).count))) {
                var row2 = (_idx(g, r) as! [Int])
                row2 = (_append(row2, 0) as! [Int])
                new_graph = (_append(new_graph, row2) as! [[Int]])
                r = _int((r &+ 1))
            }
            var last_row: [Int] = ([] as! [Int])
            j = 0
            while (j < size) {
                last_row = (_append(last_row, 0) as! [Int])
                j = _int((j &+ 1))
            }
            new_graph = (_append(new_graph, last_row) as! [[Int]])
            g = (new_graph as! [[Int]])
            i = 0
            while (i < _int(((sinks).count))) {
                var _tmp8 = (_idx(g, ((_idx(sinks, i) as? Int ?? 0) &+ 1)) as! [Int])
                _tmp8 = _set(_tmp8, (size &- 1), Int(max_input_flow))
                g = _set(g, ((_idx(sinks, i) as? Int ?? 0) &+ 1), (_tmp8 as! [Int]))
                i = _int((i &+ 1))
            }
            sink_index = _int((size &- 1))
        }
        let n = _int(((g).count))
        var preflow: [[Int]] = ([] as! [[Int]])
        var i = 0
        while (i < n) {
            var row: [Int] = ([] as! [Int])
            var j = 0
            while (j < n) {
                row = (_append(row, 0) as! [Int])
                j = _int((j &+ 1))
            }
            preflow = (_append(preflow, row) as! [[Int]])
            i = _int((i &+ 1))
        }
        var heights: [Int] = ([] as! [Int])
        i = 0
        while (i < n) {
            heights = (_append(heights, 0) as! [Int])
            i = _int((i &+ 1))
        }
        var excesses: [Int] = ([] as! [Int])
        i = 0
        while (i < n) {
            excesses = (_append(excesses, 0) as! [Int])
            i = _int((i &+ 1))
        }
        heights = _set(heights, source_index, Int(n))
        i = 0
        while (i < n) {
            var bandwidth = (_idx(_idx(g, source_index)!, i) as? Int ?? 0)
            var _tmp9 = (_idx(preflow, source_index) as! [Int])
            _tmp9 = _set(_tmp9, i, _int(((_idx(_idx(preflow, source_index)!, i) as? Int ?? 0) &+ bandwidth)))
            preflow = _set(preflow, source_index, (_tmp9 as! [Int]))
            var _tmp10 = (_idx(preflow, i) as! [Int])
            _tmp10 = _set(_tmp10, source_index, _int(((_idx(_idx(preflow, i)!, source_index) as? Int ?? 0) &- bandwidth)))
            preflow = _set(preflow, i, (_tmp10 as! [Int]))
            excesses = _set(excesses, i, _int(((_idx(excesses, i) as? Int ?? 0) &+ bandwidth)))
            i = _int((i &+ 1))
        }
        var vertices_list: [Int] = ([] as! [Int])
        i = 0
        while (i < n) {
            if ((i != source_index) && (i != sink_index)) {
                vertices_list = (_append(vertices_list, i) as! [Int])
            }
            i = _int((i &+ 1))
        }
        var idx = 0
        while (idx < _int(((vertices_list).count))) {
            var v = (_idx(vertices_list, idx) as? Int ?? 0)
            var prev_height = (_idx(heights, v) as? Int ?? 0)
            while ((_idx(excesses, v) as? Int ?? 0) > 0) {
                var nb = 0
                while (nb < n) {
                    if ((((_idx(_idx(g, v)!, nb) as? Int ?? 0) &- (_idx(_idx(preflow, v)!, nb) as? Int ?? 0)) > 0) && ((_idx(heights, v) as? Int ?? 0) > (_idx(heights, nb) as? Int ?? 0))) {
                        var delta = (_idx(excesses, v) as? Int ?? 0)
                        var capacity = ((_idx(_idx(g, v)!, nb) as? Int ?? 0) &- (_idx(_idx(preflow, v)!, nb) as? Int ?? 0))
                        if (delta > capacity) {
                            delta = Int(capacity)
                        }
                        var _tmp11 = (_idx(preflow, v) as! [Int])
                        _tmp11 = _set(_tmp11, nb, _int(((_idx(_idx(preflow, v)!, nb) as? Int ?? 0) &+ delta)))
                        preflow = _set(preflow, v, (_tmp11 as! [Int]))
                        var _tmp12 = (_idx(preflow, nb) as! [Int])
                        _tmp12 = _set(_tmp12, v, _int(((_idx(_idx(preflow, nb)!, v) as? Int ?? 0) &- delta)))
                        preflow = _set(preflow, nb, (_tmp12 as! [Int]))
                        excesses = _set(excesses, v, _int(((_idx(excesses, v) as? Int ?? 0) &- delta)))
                        excesses = _set(excesses, nb, _int(((_idx(excesses, nb) as? Int ?? 0) &+ delta)))
                    }
                    nb = _int((nb &+ 1))
                }
                var min_height = -1
                nb = 0
                while (nb < n) {
                    if (((_idx(_idx(g, v)!, nb) as? Int ?? 0) &- (_idx(_idx(preflow, v)!, nb) as? Int ?? 0)) > 0) {
                        if ((min_height == _int(-1)) || ((_idx(heights, nb) as? Int ?? 0) < min_height)) {
                            min_height = (_idx(heights, nb) as? Int ?? 0)
                        }
                    }
                    nb = _int((nb &+ 1))
                }
                if (min_height != _int(-1)) {
                    heights = _set(heights, v, _int((min_height &+ 1)))
                } else {
                    break
                }
            }
            if ((_idx(heights, v) as? Int ?? 0) > prev_height) {
                var vertex = (_idx(vertices_list, idx) as? Int ?? 0)
                var j = idx
                while (j > 0) {
                    vertices_list = _set(vertices_list, j, (_idx(vertices_list, (j &- 1)) as? Int ?? 0))
                    j = _int((j &- 1))
                }
                vertices_list = _set(vertices_list, 0, Int(vertex))
                idx = 0
            } else {
                idx = _int((idx &+ 1))
            }
        }
        var flow = 0
        i = 0
        while (i < n) {
            flow = _int((flow &+ (_idx(_idx(preflow, source_index)!, i) as? Int ?? 0)))
            i = _int((i &+ 1))
        }
        if (flow < 0) {
            flow = _int(-flow)
        }
        return flow
    }
    let graph: [[Int]] = ({
        var _arr: [[Int]] = []
        _arr = _append(_arr, ({
            var _arr: [Int] = []
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 7)
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 0)
            return _arr
        }() as! [Int]))
        _arr = _append(_arr, ({
            var _arr: [Int] = []
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 6)
            _arr = _append(_arr, 0)
            return _arr
        }() as! [Int]))
        _arr = _append(_arr, ({
            var _arr: [Int] = []
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 8)
            return _arr
        }() as! [Int]))
        _arr = _append(_arr, ({
            var _arr: [Int] = []
            _arr = _append(_arr, 9)
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 0)
            return _arr
        }() as! [Int]))
        return _arr
    }() as! [[Int]])
    let sources: [Int] = ({
        var _arr: [Int] = []
        _arr = _append(_arr, 0)
        return _arr
    }() as! [Int])
    let sinks: [Int] = ({
        var _arr: [Int] = []
        _arr = _append(_arr, 3)
        return _arr
    }() as! [Int])
    let result = _int(push_relabel_max_flow((graph as! [[Int]]), (sources as! [Int]), (sinks as! [Int])))
    print(_p(("maximum flow is " + _p(result))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
