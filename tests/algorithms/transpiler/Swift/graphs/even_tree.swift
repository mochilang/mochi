// Generated by Mochi transpiler v0.10.65 on 2025-08-14 17:13:45 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    var tree: [Int: [Int]] = ([:] as! [Int: [Int]])
    func dfs(_ start: Int, _ visited: inout [Int: Bool]) -> [Int] {
        var size = 1
        var cuts = 0
        visited = _set(visited, start, true)
        for v in ((tree[start] ?? []) as! [Int]) {
            if (!(visited[v] != nil)) {
                let res: [Int] = (dfs(v, &visited) as! [Int])
                size = _int((size &+ (_idx(res, 0) as? Int ?? 0)))
                cuts = _int((cuts &+ (_idx(res, 1) as? Int ?? 0)))
            }
        }
        if (((size % 2 + 2) % 2) == 0) {
            cuts = _int((cuts &+ 1))
        }
        return ({
            var _arr: [Int] = []
            _arr = _append(_arr, size)
            _arr = _append(_arr, cuts)
            return _arr
        }() as! [Int])
    }
    func even_tree() -> Int {
        var visited: [Int: Bool] = ([:] as! [Int: Bool])
        let res: [Int] = (dfs(1, &visited) as! [Int])
        return ((_idx(res, 1) as? Int ?? 0) &- 1)
    }
    func main() {
        let edges: [[Int]] = ({
            var _arr: [[Int]] = []
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 2)
                _arr = _append(_arr, 1)
                return _arr
            }() as! [Int]))
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 3)
                _arr = _append(_arr, 1)
                return _arr
            }() as! [Int]))
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 4)
                _arr = _append(_arr, 3)
                return _arr
            }() as! [Int]))
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 5)
                _arr = _append(_arr, 2)
                return _arr
            }() as! [Int]))
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 6)
                _arr = _append(_arr, 1)
                return _arr
            }() as! [Int]))
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 7)
                _arr = _append(_arr, 2)
                return _arr
            }() as! [Int]))
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 8)
                _arr = _append(_arr, 6)
                return _arr
            }() as! [Int]))
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 9)
                _arr = _append(_arr, 8)
                return _arr
            }() as! [Int]))
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 10)
                _arr = _append(_arr, 8)
                return _arr
            }() as! [Int]))
            return _arr
        }() as! [[Int]])
        var i = 0
        while (i < _int(((edges).count))) {
            let u = (_idx(_idx(edges, i)!, 0) as? Int ?? 0)
            let v = (_idx(_idx(edges, i)!, 1) as? Int ?? 0)
            if (!(tree[u] != nil)) {
                tree = _set(tree, u, ([] as! [Int]))
            }
            if (!(tree[v] != nil)) {
                tree = _set(tree, v, ([] as! [Int]))
            }
            tree = _set(tree, u, (_append(((tree[u] ?? []) as! [Int]), v) as! [Int]))
            tree = _set(tree, v, (_append(((tree[v] ?? []) as! [Int]), u) as! [Int]))
            i = _int((i &+ 1))
        }
        print(_p(_p(_int(even_tree()))))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
