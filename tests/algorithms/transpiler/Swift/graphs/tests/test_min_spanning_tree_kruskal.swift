// Generated by Mochi transpiler v0.10.66 on 2025-08-15 15:25:42 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _idx<K: Hashable, V>(_ m: [K: V], _ k: K) -> V? {
    return m[k]
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func sort_edges(_ edges: [[Int]]) -> [[Int]] {
        var es = edges
        var i = 0
        while (i < _int(((es).count))) {
            var j = 0
            while (j < ((_int(((es).count)) &- i) &- 1)) {
                if ((_idx(_idx(es, j)!, 2) as? Int ?? 0) > (_idx(_idx(es, (j &+ 1))!, 2) as? Int ?? 0)) {
                    let tmp: [Int] = (_idx(es, j) as! [Int])
                    es = _set(es, j, (_idx(es, (j &+ 1)) as! [Int]))
                    es = _set(es, (j &+ 1), (tmp as! [Int]))
                }
                j = _int((j &+ 1))
            }
            i = _int((i &+ 1))
        }
        return es
    }
    func find(_ parent: [Int], _ x: Int) -> Int {
        var r = x
        while ((_idx(parent, r) as? Int ?? 0) != r) {
            r = (_idx(parent, r) as? Int ?? 0)
        }
        return r
    }
    func kruskal(_ n: Int, _ edges: [[Int]]) -> [[Int]] {
        var parent: [Int] = ([] as! [Int])
        var i = 0
        while (i < n) {
            parent = (_append(parent, i) as! [Int])
            i = _int((i &+ 1))
        }
        var sorted = (sort_edges((edges as! [[Int]])) as! [[Int]])
        var mst: [[Int]] = ([] as! [[Int]])
        var e = 0
        while (e < _int(((sorted).count))) {
            if (_int(((mst).count)) == (n &- 1)) {
                break
            }
            let edge: [Int] = (_idx(sorted, e) as! [Int])
            e = _int((e &+ 1))
            let u = (_idx(edge, 0) as? Int ?? 0)
            let v = (_idx(edge, 1) as? Int ?? 0)
            let w = (_idx(edge, 2) as? Int ?? 0)
            let ru = _int(find((parent as! [Int]), u))
            let rv = _int(find((parent as! [Int]), v))
            if (ru != rv) {
                parent = _set(parent, ru, Int(rv))
                mst = (_append(mst, ({
                    var _arr: [Int] = []
                    _arr = _append(_arr, u)
                    _arr = _append(_arr, v)
                    _arr = _append(_arr, w)
                    return _arr
                }() as! [Int])) as! [[Int]])
            }
        }
        return mst
    }
    func edges_equal(_ a: [[Int]], _ b: [[Int]]) -> Bool {
        if (_int(((a).count)) != _int(((b).count))) {
            return false
        }
        var i = 0
        while (i < _int(((a).count))) {
            let e1: [Int] = (_idx(a, i) as! [Int])
            let e2: [Int] = (_idx(b, i) as! [Int])
            if ((((_idx(e1, 0) as? Int ?? 0) != (_idx(e2, 0) as? Int ?? 0)) || ((_idx(e1, 1) as? Int ?? 0) != (_idx(e2, 1) as? Int ?? 0))) || ((_idx(e1, 2) as? Int ?? 0) != (_idx(e2, 2) as? Int ?? 0))) {
                return false
            }
            i = _int((i &+ 1))
        }
        return true
    }
    func main() {
        let num_nodes = 9
        let edges: [[Int]] = ({
            var _arr: [[Int]] = []
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 0)
                _arr = _append(_arr, 1)
                _arr = _append(_arr, 4)
                return _arr
            }() as! [Int]))
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 0)
                _arr = _append(_arr, 7)
                _arr = _append(_arr, 8)
                return _arr
            }() as! [Int]))
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 1)
                _arr = _append(_arr, 2)
                _arr = _append(_arr, 8)
                return _arr
            }() as! [Int]))
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 7)
                _arr = _append(_arr, 8)
                _arr = _append(_arr, 7)
                return _arr
            }() as! [Int]))
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 7)
                _arr = _append(_arr, 6)
                _arr = _append(_arr, 1)
                return _arr
            }() as! [Int]))
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 2)
                _arr = _append(_arr, 8)
                _arr = _append(_arr, 2)
                return _arr
            }() as! [Int]))
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 8)
                _arr = _append(_arr, 6)
                _arr = _append(_arr, 6)
                return _arr
            }() as! [Int]))
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 2)
                _arr = _append(_arr, 3)
                _arr = _append(_arr, 7)
                return _arr
            }() as! [Int]))
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 2)
                _arr = _append(_arr, 5)
                _arr = _append(_arr, 4)
                return _arr
            }() as! [Int]))
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 6)
                _arr = _append(_arr, 5)
                _arr = _append(_arr, 2)
                return _arr
            }() as! [Int]))
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 3)
                _arr = _append(_arr, 5)
                _arr = _append(_arr, 14)
                return _arr
            }() as! [Int]))
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 3)
                _arr = _append(_arr, 4)
                _arr = _append(_arr, 9)
                return _arr
            }() as! [Int]))
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 5)
                _arr = _append(_arr, 4)
                _arr = _append(_arr, 10)
                return _arr
            }() as! [Int]))
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 1)
                _arr = _append(_arr, 7)
                _arr = _append(_arr, 11)
                return _arr
            }() as! [Int]))
            return _arr
        }() as! [[Int]])
        let expected: [[Int]] = ({
            var _arr: [[Int]] = []
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 7)
                _arr = _append(_arr, 6)
                _arr = _append(_arr, 1)
                return _arr
            }() as! [Int]))
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 2)
                _arr = _append(_arr, 8)
                _arr = _append(_arr, 2)
                return _arr
            }() as! [Int]))
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 6)
                _arr = _append(_arr, 5)
                _arr = _append(_arr, 2)
                return _arr
            }() as! [Int]))
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 0)
                _arr = _append(_arr, 1)
                _arr = _append(_arr, 4)
                return _arr
            }() as! [Int]))
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 2)
                _arr = _append(_arr, 5)
                _arr = _append(_arr, 4)
                return _arr
            }() as! [Int]))
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 2)
                _arr = _append(_arr, 3)
                _arr = _append(_arr, 7)
                return _arr
            }() as! [Int]))
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 0)
                _arr = _append(_arr, 7)
                _arr = _append(_arr, 8)
                return _arr
            }() as! [Int]))
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 3)
                _arr = _append(_arr, 4)
                _arr = _append(_arr, 9)
                return _arr
            }() as! [Int]))
            return _arr
        }() as! [[Int]])
        let result: [[Int]] = (kruskal(num_nodes, (edges as! [[Int]])) as! [[Int]])
        let sorted_result: [[Int]] = (sort_edges((result as! [[Int]])) as! [[Int]])
        let sorted_expected: [[Int]] = (sort_edges((expected as! [[Int]])) as! [[Int]])
        print(_p("[" + sorted_result.map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
        if edges_equal((sorted_expected as! [[Int]]), (sorted_result as! [[Int]])) {
            print(_p(true))
        } else {
            print(_p(false))
        }
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
