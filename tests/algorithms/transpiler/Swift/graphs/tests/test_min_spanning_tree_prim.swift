// Generated by Mochi transpiler v0.10.66 on 2025-08-15 15:25:45 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _idx<K: Hashable, V>(_ m: [K: V], _ k: K) -> V? {
    return m[k]
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
struct Neighbor: Codable {
    var node: Int
    var cost: Int
    init() {
        self.node = 0
        self.cost = 0
    }
    init(node: Int, cost: Int) {
        self.node = node
        self.cost = cost
    }
}
struct EdgePair: Codable {
    var u: Int
    var v: Int
    init() {
        self.u = 0
        self.v = 0
    }
    init(u: Int, v: Int) {
        self.u = u
        self.v = v
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func prims_algorithm(_ adjacency: [Int: [Neighbor]]) -> [EdgePair] {
        var visited: [Int: Bool] = ([:] as! [Int: Bool])
        visited = _set(visited, 0, true)
        var mst: [EdgePair] = ([] as! [EdgePair])
        var count = 1
        var total = 0
        for k in adjacency.keys.sorted() {
            total = _int((total &+ 1))
        }
        while (count < total) {
            var best_u = 0
            var best_v = 0
            var best_cost = 2147483647
            for u_str in adjacency.keys.sorted() {
                let u = _int(_int(u_str))
                if ((visited[u] ?? false) as! Bool) {
                    for n in ((adjacency[u] ?? []) as! [Neighbor]) {
                        if (!((visited[n.node] ?? false) ?? false) && (n.cost < best_cost)) {
                            best_cost = _int(n.cost)
                            best_u = Int(u)
                            best_v = _int(n.node)
                        }
                    }
                }
            }
            visited = _set(visited, best_v, true)
            mst = (_append(mst, EdgePair(u: Int(best_u), v: Int(best_v))) as! [EdgePair])
            count = _int((count &+ 1))
        }
        return mst
    }
    func test_prim_successful_result() -> Bool {
        let edges: [[Int]] = ({
            var _arr: [[Int]] = []
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 0)
                _arr = _append(_arr, 1)
                _arr = _append(_arr, 4)
                return _arr
            }() as! [Int]))
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 0)
                _arr = _append(_arr, 7)
                _arr = _append(_arr, 8)
                return _arr
            }() as! [Int]))
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 1)
                _arr = _append(_arr, 2)
                _arr = _append(_arr, 8)
                return _arr
            }() as! [Int]))
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 7)
                _arr = _append(_arr, 8)
                _arr = _append(_arr, 7)
                return _arr
            }() as! [Int]))
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 7)
                _arr = _append(_arr, 6)
                _arr = _append(_arr, 1)
                return _arr
            }() as! [Int]))
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 2)
                _arr = _append(_arr, 8)
                _arr = _append(_arr, 2)
                return _arr
            }() as! [Int]))
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 8)
                _arr = _append(_arr, 6)
                _arr = _append(_arr, 6)
                return _arr
            }() as! [Int]))
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 2)
                _arr = _append(_arr, 3)
                _arr = _append(_arr, 7)
                return _arr
            }() as! [Int]))
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 2)
                _arr = _append(_arr, 5)
                _arr = _append(_arr, 4)
                return _arr
            }() as! [Int]))
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 6)
                _arr = _append(_arr, 5)
                _arr = _append(_arr, 2)
                return _arr
            }() as! [Int]))
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 3)
                _arr = _append(_arr, 5)
                _arr = _append(_arr, 14)
                return _arr
            }() as! [Int]))
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 3)
                _arr = _append(_arr, 4)
                _arr = _append(_arr, 9)
                return _arr
            }() as! [Int]))
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 5)
                _arr = _append(_arr, 4)
                _arr = _append(_arr, 10)
                return _arr
            }() as! [Int]))
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 1)
                _arr = _append(_arr, 7)
                _arr = _append(_arr, 11)
                return _arr
            }() as! [Int]))
            return _arr
        }() as! [[Int]])
        var adjacency: [Int: [Neighbor]] = ([:] as! [Int: [Neighbor]])
        for e in edges {
            let u = (_idx(e, 0) as? Int ?? 0)
            let v = (_idx(e, 1) as? Int ?? 0)
            let w = (_idx(e, 2) as? Int ?? 0)
            if (!(adjacency[u] != nil)) {
                adjacency = _set(adjacency, u, ([] as! [Neighbor]))
            }
            if (!(adjacency[v] != nil)) {
                adjacency = _set(adjacency, v, ([] as! [Neighbor]))
            }
            adjacency = _set(adjacency, u, (_append(((adjacency[u] ?? []) as! [Neighbor]), Neighbor(node: Int(v), cost: Int(w))) as! [Neighbor]))
            adjacency = _set(adjacency, v, (_append(((adjacency[v] ?? []) as! [Neighbor]), Neighbor(node: Int(u), cost: Int(w))) as! [Neighbor]))
        }
        let result: [EdgePair] = (prims_algorithm((adjacency as! [Int: [Neighbor]])) as! [EdgePair])
        var seen: [String: Bool] = ([:] as! [String: Bool])
        for e in result {
            let key1 = (_p((_p(_p(e.u)) + _p(","))) + _p(_p(e.v)))
            let key2 = (_p((_p(_p(e.v)) + _p(","))) + _p(_p(e.u)))
            seen = _set(seen, String(describing: key1), true)
            seen = _set(seen, String(describing: key2), true)
        }
        let expected: [[Int]] = ({
            var _arr: [[Int]] = []
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 7)
                _arr = _append(_arr, 6)
                _arr = _append(_arr, 1)
                return _arr
            }() as! [Int]))
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 2)
                _arr = _append(_arr, 8)
                _arr = _append(_arr, 2)
                return _arr
            }() as! [Int]))
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 6)
                _arr = _append(_arr, 5)
                _arr = _append(_arr, 2)
                return _arr
            }() as! [Int]))
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 0)
                _arr = _append(_arr, 1)
                _arr = _append(_arr, 4)
                return _arr
            }() as! [Int]))
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 2)
                _arr = _append(_arr, 5)
                _arr = _append(_arr, 4)
                return _arr
            }() as! [Int]))
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 2)
                _arr = _append(_arr, 3)
                _arr = _append(_arr, 7)
                return _arr
            }() as! [Int]))
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 0)
                _arr = _append(_arr, 7)
                _arr = _append(_arr, 8)
                return _arr
            }() as! [Int]))
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 3)
                _arr = _append(_arr, 4)
                _arr = _append(_arr, 9)
                return _arr
            }() as! [Int]))
            return _arr
        }() as! [[Int]])
        for ans in expected {
            let key = (_p((_p(_p((_idx(ans, 0) as? Int ?? 0))) + _p(","))) + _p(_p((_idx(ans, 1) as? Int ?? 0))))
            if !((seen[String(String(describing: key))] ?? false) ?? false) {
                return false
            }
        }
        return true
    }
    print(_p(test_prim_successful_result()))
    print(_p(true))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
