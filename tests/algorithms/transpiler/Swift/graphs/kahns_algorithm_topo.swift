// Generated by Mochi transpiler v0.10.60 on 2025-08-08 10:44:28 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func topological_sort(_ graph: [Int: [Int]]) -> [Int]? {
        var indegree: [Int] = ([] as! [Int])
        var i: Int = 0
        while (i < _int(((graph).count))) {
            indegree = (_append(indegree, 0) as! [Int])
            i = _int((i &+ 1))
        }
        for edges in (values((graph as! [AnyHashable: Any?])) as! [[Int]]) {
            var j: Int = 0
            while (j < _int(((edges).count))) {
                let v = (edges[j] as? Int ?? 0)
                indegree = _set(indegree, v, _int(((indegree[v] as? Int ?? 0) &+ 1)))
                j = _int((j &+ 1))
            }
        }
        var queue: [Int] = ([] as! [Int])
        i = 0
        while (i < _int(((indegree).count))) {
            if ((indegree[i] as? Int ?? 0) == 0) {
                queue = (_append(queue, i) as! [Int])
            }
            i = _int((i &+ 1))
        }
        var order: [Int] = ([] as! [Int])
        var head: Int = 0
        var processed: Int = 0
        while (head < _int(((queue).count))) {
            let v = (queue[head] as? Int ?? 0)
            head = _int((head &+ 1))
            processed = _int((processed &+ 1))
            order = (_append(order, v) as! [Int])
            let neighbors: [Int] = (graph[v] as! [Int])
            var k: Int = 0
            while (k < _int(((neighbors).count))) {
                let nb = (neighbors[k] as? Int ?? 0)
                indegree = _set(indegree, nb, _int(((indegree[nb] as? Int ?? 0) &- 1)))
                if ((indegree[nb] as? Int ?? 0) == 0) {
                    queue = (_append(queue, nb) as! [Int])
                }
                k = _int((k &+ 1))
            }
        }
        if (processed != _int(((graph).count))) {
            return nil
        }
        return (order as! [Int]?)
    }
    func main() {
        let graph: [Int: [Int]] = ([0: ([1, 2] as! [Int]), 1: ([3] as! [Int]), 2: ([3] as! [Int]), 3: ([4, 5] as! [Int]), 4: [] as [Any], 5: [] as [Any]] as! [Int: [Int]])
        print(_p((topological_sort((graph as! [Int: [Int]])) as! [Int])))
        let cyclic: [Int: [Int]] = ([0: ([1] as! [Int]), 1: ([2] as! [Int]), 2: ([0] as! [Int])] as! [Int: [Int]])
        print(_p((topological_sort((cyclic as! [Int: [Int]])) as! [Int])))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
