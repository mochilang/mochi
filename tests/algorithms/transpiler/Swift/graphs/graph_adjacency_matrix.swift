// Generated by Mochi transpiler v0.10.60 on 2025-08-08 10:44:17 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
struct Graph: Codable {
    var directed: Bool
    var vertex_to_index: [Int: Int]
    var adj_matrix: [[Int]]
    init() {
        self.directed = false
        self.vertex_to_index = [:]
        self.adj_matrix = []
    }
    init(directed: Bool, vertex_to_index: [Int: Int], adj_matrix: [[Int]]) {
        self.directed = directed
        self.vertex_to_index = vertex_to_index
        self.adj_matrix = adj_matrix
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func make_graph(_ vertices: [Int], _ edges: [[Int]], _ directed: Bool) -> Graph {
        var g: Graph = Graph(directed: directed, vertex_to_index: [:], adj_matrix: [])
        var i: Int = 0
        while (i < _int(((vertices).count))) {
            _ = add_vertex(&g, (vertices[i] as? Int ?? 0))
            i = _int((i &+ 1))
        }
        var j: Int = 0
        while (j < _int(((edges).count))) {
            let e: [Int] = (edges[j] as! [Int])
            _ = add_edge(&g, (e[0] as? Int ?? 0), (e[1] as? Int ?? 0))
            j = _int((j &+ 1))
        }
        return g
    }
    func contains_vertex(_ g: Graph, _ v: Int) -> Bool {
        return (g.vertex_to_index[v] != nil)
    }
    func add_vertex(_ g: inout Graph, _ v: Int) {
        if contains_vertex((g as! Graph), v) {
            _ = fatalError("vertex already exists")
        }
        var matrix: [[Int]] = g.adj_matrix
        var i: Int = 0
        while (i < _int(((matrix).count))) {
            matrix = _set(matrix, i, (_append((matrix[i] as! [Int]), 0) as! [Int]))
            i = _int((i &+ 1))
        }
        var row: [Int] = ([] as! [Int])
        var j: Int = 0
        while (j < (_int(((matrix).count)) &+ 1)) {
            row = (_append(row, 0) as! [Int])
            j = _int((j &+ 1))
        }
        matrix = (_append(matrix, row) as! [[Int]])
        g.adj_matrix = (matrix as! [[Int]])
        var idx_map: [Int: Int] = g.vertex_to_index
        idx_map = _set(idx_map, v, _int((_int(((matrix).count)) &- 1)))
        g.vertex_to_index = (idx_map as! [Int: Int])
    }
    func remove_key(_ m: [Int: Int], _ k: Int) -> [Int: Int] {
        var out: [Int: Int] = ([:] as! [Int: Int])
        for key in m.keys.sorted() {
            if (key != k) {
                out = _set(out, key, (m[key] as? Int ?? 0))
            }
        }
        return out
    }
    func decrement_indices(_ m: [Int: Int], _ start: Int) -> [Int: Int] {
        var out: [Int: Int] = ([:] as! [Int: Int])
        for key in m.keys.sorted() {
            let idx = (m[key] as? Int ?? 0)
            if (idx > start) {
                out = _set(out, key, _int((idx &- 1)))
            } else {
                out = _set(out, key, Int(idx))
            }
        }
        return out
    }
    func remove_vertex(_ g: inout Graph, _ v: Int) {
        if (!contains_vertex((g as! Graph), v)) {
            _ = fatalError("vertex does not exist")
        }
        let idx = (g.vertex_to_index[v] as? Int ?? 0)
        var new_matrix: [[Int]] = ([] as! [[Int]])
        var i: Int = 0
        while (i < _int(((g.adj_matrix).count))) {
            if (i != idx) {
                let row: [Int] = (g.adj_matrix[i] as! [Int])
                var new_row: [Int] = ([] as! [Int])
                var j: Int = 0
                while (j < _int(((row).count))) {
                    if (j != idx) {
                        new_row = (_append(new_row, (row[j] as? Int ?? 0)) as! [Int])
                    }
                    j = _int((j &+ 1))
                }
                new_matrix = (_append(new_matrix, new_row) as! [[Int]])
            }
            i = _int((i &+ 1))
        }
        g.adj_matrix = (new_matrix as! [[Int]])
        var m: [Int: Int] = (remove_key((g.vertex_to_index as! [Int: Int]), v) as! [Int: Int])
        g.vertex_to_index = (decrement_indices((m as! [Int: Int]), idx) as! [Int: Int])
    }
    func add_edge(_ g: inout Graph, _ u: Int, _ v: Int) {
        if (!(contains_vertex((g as! Graph), u) && contains_vertex((g as! Graph), v))) {
            _ = fatalError("missing vertex")
        }
        let i = (g.vertex_to_index[u] as? Int ?? 0)
        let j = (g.vertex_to_index[v] as? Int ?? 0)
        var matrix: [[Int]] = g.adj_matrix
        matrix[i][j] = 1
        if (!g.directed) {
            matrix[j][i] = 1
        }
        g.adj_matrix = (matrix as! [[Int]])
    }
    func remove_edge(_ g: inout Graph, _ u: Int, _ v: Int) {
        if (!(contains_vertex((g as! Graph), u) && contains_vertex((g as! Graph), v))) {
            _ = fatalError("missing vertex")
        }
        let i = (g.vertex_to_index[u] as? Int ?? 0)
        let j = (g.vertex_to_index[v] as? Int ?? 0)
        var matrix: [[Int]] = g.adj_matrix
        matrix[i][j] = 0
        if (!g.directed) {
            matrix[j][i] = 0
        }
        g.adj_matrix = (matrix as! [[Int]])
    }
    func contains_edge(_ g: Graph, _ u: Int, _ v: Int) -> Bool {
        if (!(contains_vertex((g as! Graph), u) && contains_vertex((g as! Graph), v))) {
            _ = fatalError("missing vertex")
        }
        let i = (g.vertex_to_index[u] as? Int ?? 0)
        let j = (g.vertex_to_index[v] as? Int ?? 0)
        let matrix: [[Int]] = g.adj_matrix
        return ((matrix[i][j] as? Int ?? 0) == 1)
    }
    func clear_graph(_ g: inout Graph) {
        g.vertex_to_index = ([:] as! [Int: Int])
        g.adj_matrix = ([] as! [[Int]])
    }
    var g: Graph = make_graph(([1, 2, 3] as! [Int]), ([([1, 2] as! [Int]), ([2, 3] as! [Int])] as! [[Int]]), false)
    print(_p("[" + g.adj_matrix.map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    print(_p(_p(contains_edge((g as! Graph), 1, 2))))
    print(_p(_p(contains_edge((g as! Graph), 2, 1))))
    _ = remove_edge(&g, 1, 2)
    print(_p(_p(contains_edge((g as! Graph), 1, 2))))
    _ = remove_vertex(&g, 2)
    print(_p("[" + g.adj_matrix.map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
