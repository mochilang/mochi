// Generated by Mochi transpiler v0.10.60 on 2025-08-08 10:43:55 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _concat<T>(_ a: [T], _ b: [T]) -> [T] {
    var out = a
    out.append(contentsOf: b)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
struct Point: Codable {
    var x: Int
    var y: Int
    init() {
        self.x = 0
        self.y = 0
    }
    init(x: Int, y: Int) {
        self.x = x
        self.y = y
    }
}
struct Result: Codable {
    var distance: Double
    var path: [Point]
    init() {
        self.distance = 0
        self.path = []
    }
    init(distance: Double, path: [Point]) {
        self.distance = distance
        self.path = path
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func key(_ p: Point) -> String {
        return ((_p(p.x) + ",") + _p(p.y))
    }
    func path_to_string(_ path: [Point]) -> String {
        var s: String = "["
        var i: Int = 0
        while (i < _int(((path).count))) {
            let pt = (path[i] as! Point)
            s = ((((((s + "(") + _p(pt.x)) + ", ") + _p(pt.y)) + ")") as! String)
            if (i < (_int(((path).count)) &- 1)) {
                s = ((s + ", ") as! String)
            }
            i = _int((i &+ 1))
        }
        s = ((s + "]") as! String)
        return s
    }
    func dijkstra(_ grid: [[Int]], _ source: Point, _ destination: Point, _ allow_diagonal: Bool) -> Result {
        let rows = _int(((grid).count))
        let cols = _int((((grid[0] as! [Int])).count))
        var dx: [Int] = ([-1, 1, 0, 0] as! [Int])
        var dy: [Int] = ([0, 0, -1, 1] as! [Int])
        if allow_diagonal {
            dx = ((_concat(dx, ([-1, -1, 1, 1] as! [Int])) as! [Any?]) as! [Int])
            dy = ((_concat(dy, ([-1, 1, -1, 1] as! [Int])) as! [Any?]) as! [Int])
        }
        let INF = 1000000000000.0
        var queue: [Point] = ([source] as! [Point])
        var front: Int = 0
        var dist_map: [String: Double] = ([String(describing: key((source as! Point))): 0.0] as! [String: Double])
        var prev: [String: Point] = ([:] as! [String: Point])
        while (front < _int(((queue).count))) {
            let current = (queue[front] as! Point)
            front = _int((front &+ 1))
            let cur_key = String(describing: key((current as! Point)))
            if ((current.x == destination.x) && (current.y == destination.y)) {
                break
            }
            var i: Int = 0
            while (i < _int(((dx).count))) {
                let nx = (current.x &+ (dx[i] as? Int ?? 0))
                let ny = (current.y &+ (dy[i] as? Int ?? 0))
                if ((((nx >= 0) && (nx < rows)) && (ny >= 0)) && (ny < cols)) {
                    if ((grid[nx][ny] as? Int ?? 0) == 1) {
                        let n_key = ((_p(nx) + ",") + _p(ny))
                        if (!(dist_map[n_key] != nil)) {
                            dist_map = _set(dist_map, String(describing: n_key), Double((Double(dist_map[String(String(describing: cur_key))]) + 1.0)))
                            prev = _set(prev, String(describing: n_key), (current as! Point))
                            queue = (_append(queue, Point(x: nx, y: ny)) as! [Point])
                        }
                    }
                }
                i = _int((i &+ 1))
            }
        }
        let dest_key = String(describing: key((destination as! Point)))
        if (dist_map[dest_key] != nil) {
            var path_rev: [Point] = ([destination] as! [Point])
            var step_key: String = dest_key
            var step_pt: Point = destination
            while (step_key != String(describing: key((source as! Point)))) {
                step_pt = (prev[String(String(describing: step_key))] as! Point)
                step_key = String(describing: key((step_pt as! Point)))
                path_rev = (_append(path_rev, step_pt) as! [Point])
            }
            var path: [Point] = ([] as! [Point])
            var k: Int = (_int(((path_rev).count)) &- 1)
            while (k >= 0) {
                path = (_append(path, (path_rev[k] as! Point)) as! [Point])
                k = _int((k &- 1))
            }
            return Result(distance: Double(dist_map[String(String(describing: dest_key))]), path: path)
        }
        return Result(distance: INF, path: [])
    }
    func print_result(_ res: Result) {
        print(_p(((_p(res.distance) + ", ") + String(describing: path_to_string((res.path as! [Point]))))))
    }
    var grid1: [[Int]] = ([([1, 1, 1] as! [Int]), ([0, 1, 0] as! [Int]), ([0, 1, 1] as! [Int])] as! [[Int]])
    _ = print_result((dijkstra((grid1 as! [[Int]]), (Point(x: 0, y: 0) as! Point), (Point(x: 2, y: 2) as! Point), false) as! Result))
    _ = print_result((dijkstra((grid1 as! [[Int]]), (Point(x: 0, y: 0) as! Point), (Point(x: 2, y: 2) as! Point), true) as! Result))
    var grid2: [[Int]] = ([([1, 1, 1] as! [Int]), ([0, 0, 1] as! [Int]), ([0, 1, 1] as! [Int])] as! [[Int]])
    _ = print_result((dijkstra((grid2 as! [[Int]]), (Point(x: 0, y: 0) as! Point), (Point(x: 2, y: 2) as! Point), false) as! Result))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
