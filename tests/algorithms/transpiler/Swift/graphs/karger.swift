// Generated by Mochi transpiler v0.10.60 on 2025-08-08 10:44:29 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _keys<K,V>(_ m: [K: V]) -> [K] {
    return Array(m.keys)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
struct Pair: Codable {
    var a: String
    var b: String
    init() {
        self.a = ""
        self.b = ""
    }
    init(a: String, b: String) {
        self.a = a
        self.b = b
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    var seed: Int = 1
    func rand_int(_ n: Int) -> Int {
        seed = _int(((_int(((seed &* 1103515245) &+ 12345)) % 2147483648 + 2147483648) % 2147483648))
        return ((seed % n + n) % n)
    }
    func contains(_ list: [String], _ value: String) -> Bool {
        var i: Int = 0
        while (i < _int(((list).count))) {
            if ((list[i] as! String) == value) {
                return true
            }
            i = _int((i &+ 1))
        }
        return false
    }
    func remove_all(_ list: [String], _ value: String) -> [String] {
        var res: [String] = ([] as! [String])
        var i: Int = 0
        while (i < _int(((list).count))) {
            if ((list[i] as! String) != value) {
                res = (_append(res, (list[i] as! String)) as! [String])
            }
            i = _int((i &+ 1))
        }
        return res
    }
    func partition_graph(_ graph: [String: [String]]) -> [Pair] {
        var contracted: [String: [String]] = ([:] as! [String: [String]])
        for node in (_keys(graph) as! [String]) {
            contracted = _set(contracted, String(describing: node), ([node] as! [String]))
        }
        var graph_copy: [String: [String]] = ([:] as! [String: [String]])
        for node in (_keys(graph) as! [String]) {
            var lst: [String] = ([] as! [String])
            var neigh: [String] = (graph[String(String(describing: node))] as! [String])
            var i: Int = 0
            while (i < _int(((neigh).count))) {
                lst = (_append(lst, (neigh[i] as! String)) as! [String])
                i = _int((i &+ 1))
            }
            graph_copy = _set(graph_copy, String(describing: node), (lst as! [String]))
        }
        var nodes: [String] = (_keys(graph_copy) as! [String])
        while (_int(((nodes).count)) > 2) {
            let u = (nodes[_int(rand_int(_int(((nodes).count))))] as! String)
            let u_neighbors: [String] = (graph_copy[String(String(describing: u))] as! [String])
            let v = (u_neighbors[_int(rand_int(_int(((u_neighbors).count))))] as! String)
            let uv = (u + v)
            var uv_neighbors: [String] = ([] as! [String])
            var i: Int = 0
            while (i < _int((((graph_copy[String(String(describing: u))] as! [String])).count))) {
                let n = (graph_copy[String(String(describing: u))][i] as! String)
                if (((n != u) && (n != v)) && (((uv_neighbors as! [String]).contains((n as! String))) == false)) {
                    uv_neighbors = (_append(uv_neighbors, n) as! [String])
                }
                i = _int((i &+ 1))
            }
            i = 0
            while (i < _int((((graph_copy[String(String(describing: v))] as! [String])).count))) {
                let n = (graph_copy[String(String(describing: v))][i] as! String)
                if (((n != u) && (n != v)) && (((uv_neighbors as! [String]).contains((n as! String))) == false)) {
                    uv_neighbors = (_append(uv_neighbors, n) as! [String])
                }
                i = _int((i &+ 1))
            }
            graph_copy = _set(graph_copy, String(describing: uv), (uv_neighbors as! [String]))
            var k: Int = 0
            while (k < _int(((uv_neighbors).count))) {
                let nb = (uv_neighbors[k] as! String)
                graph_copy = _set(graph_copy, String(describing: nb), (_append((graph_copy[String(String(describing: nb))] as! [String]), uv) as! [String]))
                graph_copy = _set(graph_copy, String(describing: nb), (remove_all((graph_copy[String(String(describing: nb))] as! [String]), (u as! String)) as! [String]))
                graph_copy = _set(graph_copy, String(describing: nb), (remove_all((graph_copy[String(String(describing: nb))] as! [String]), (v as! String)) as! [String]))
                k = _int((k &+ 1))
            }
            var group: [String] = ([] as! [String])
            i = 0
            while (i < _int((((contracted[String(String(describing: u))] as! [String])).count))) {
                group = (_append(group, (contracted[String(String(describing: u))][i] as! String)) as! [String])
                i = _int((i &+ 1))
            }
            i = 0
            while (i < _int((((contracted[String(String(describing: v))] as! [String])).count))) {
                let val = (contracted[String(String(describing: v))][i] as! String)
                if (((group as! [String]).contains((val as! String))) == false) {
                    group = (_append(group, val) as! [String])
                }
                i = _int((i &+ 1))
            }
            contracted = _set(contracted, String(describing: uv), (group as! [String]))
            nodes = (remove_all((nodes as! [String]), (u as! String)) as! [String])
            nodes = (remove_all((nodes as! [String]), (v as! String)) as! [String])
            nodes = (_append(nodes, uv) as! [String])
        }
        var groups: [[String]] = ([] as! [[String]])
        var j: Int = 0
        while (j < _int(((nodes).count))) {
            let n = (nodes[j] as! String)
            groups = (_append(groups, (contracted[String(String(describing: n))] as! [String])) as! [[String]])
            j = _int((j &+ 1))
        }
        let groupA: [String] = (groups[0] as! [String])
        let groupB: [String] = (groups[1] as! [String])
        var cut: [Pair] = ([] as! [Pair])
        j = 0
        while (j < _int(((groupA).count))) {
            let node = (groupA[j] as! String)
            var neigh: [String] = (graph[String(String(describing: node))] as! [String])
            var l: Int = 0
            while (l < _int(((neigh).count))) {
                let nb = (neigh[l] as! String)
                if ((groupB as! [String]).contains((nb as! String))) {
                    cut = (_append(cut, Pair(a: node, b: nb)) as! [Pair])
                }
                l = _int((l &+ 1))
            }
            j = _int((j &+ 1))
        }
        return cut
    }
    func cut_to_string(_ cut: [Pair]) -> String {
        var s: String = "{"
        var i: Int = 0
        while (i < _int(((cut).count))) {
            let p = (cut[i] as! Pair)
            s = ((((((s + "(") + p.a) + ", ") + p.b) + ")") as! String)
            if (i < (_int(((cut).count)) &- 1)) {
                s = ((s + ", ") as! String)
            }
            i = _int((i &+ 1))
        }
        s = ((s + "}") as! String)
        return s
    }
    let TEST_GRAPH: [String: [String]] = (["1": (["2", "3", "4", "5"] as! [String]), "2": (["1", "3", "4", "5"] as! [String]), "3": (["1", "2", "4", "5", "10"] as! [String]), "4": (["1", "2", "3", "5", "6"] as! [String]), "5": (["1", "2", "3", "4", "7"] as! [String]), "6": (["7", "8", "9", "10", "4"] as! [String]), "7": (["6", "8", "9", "10", "5"] as! [String]), "8": (["6", "7", "9", "10"] as! [String]), "9": (["6", "7", "8", "10"] as! [String]), "10": (["6", "7", "8", "9", "3"] as! [String])] as! [String: [String]])
    let result: [Pair] = (partition_graph((TEST_GRAPH as! [String: [String]])) as! [Pair])
    print(_p(String(describing: cut_to_string((result as! [Pair])))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
