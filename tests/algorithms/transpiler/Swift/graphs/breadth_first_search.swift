// Generated by Mochi transpiler v0.10.65 on 2025-08-14 15:56:43 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _keys<K,V>(_ m: [K: V]) -> [K] {
    return Array(m.keys)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func add_edge(_ graph: inout [Int: [Int]], _ from: Int, _ to: Int) {
        if (graph[from] != nil) {
            graph = _set(graph, from, (_append((graph[from] ?? [] as! [Int]), to) as! [Int]))
        } else {
            graph = _set(graph, from, ({
                var _arr: [Int] = []
                _arr = _append(_arr, to)
                return _arr
            }() as! [Int]))
        }
    }
    func print_graph(_ graph: [Int: [Int]]) {
        for v in (_keys(graph) as! [Int]) {
            let adj: [Int] = (graph[v] ?? [] as! [Int])
            var line = (_p(v) + "  :  ")
            var i = 0
            while (i < _int(((adj).count))) {
                line = ((line + _p((_idx(adj, i) as? Int ?? 0))) as! String)
                if (i < (_int(((adj).count)) &- 1)) {
                    line = ((line + " -> ") as! String)
                }
                i = _int((i &+ 1))
            }
            print(_p(line))
        }
    }
    func bfs(_ graph: [Int: [Int]], _ start: Int) -> [Int] {
        var visited: [Int: Bool] = ([:] as! [Int: Bool])
        var queue: [Int] = ([] as! [Int])
        var order: [Int] = ([] as! [Int])
        queue = (_append(queue, start) as! [Int])
        visited = _set(visited, start, true)
        var head = 0
        while (head < _int(((queue).count))) {
            let vertex = (_idx(queue, head) as? Int ?? 0)
            head = _int((head &+ 1))
            order = (_append(order, vertex) as! [Int])
            let neighbors: [Int] = (graph[vertex] ?? [] as! [Int])
            var i = 0
            while (i < _int(((neighbors).count))) {
                let neighbor = (_idx(neighbors, i) as? Int ?? 0)
                if (!(visited[neighbor] != nil)) {
                    visited = _set(visited, neighbor, true)
                    queue = (_append(queue, neighbor) as! [Int])
                }
                i = _int((i &+ 1))
            }
        }
        return order
    }
    var g: [Int: [Int]] = ([:] as! [Int: [Int]])
    _ = add_edge(&g, 0, 1)
    _ = add_edge(&g, 0, 2)
    _ = add_edge(&g, 1, 2)
    _ = add_edge(&g, 2, 0)
    _ = add_edge(&g, 2, 3)
    _ = add_edge(&g, 3, 3)
    _ = print_graph((g as! [Int: [Int]]))
    print(_p("[" + (bfs((g as! [Int: [Int]]), 2) as! [Int]).map{ if let s = $0 as? String { "\"" + s.replacingOccurrences(of: "\"", with: "\\\"") + "\"" } else { _p($0) } }.joined(separator: ", ") + "]"))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
