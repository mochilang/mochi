// Generated by Mochi transpiler v0.10.59 on 2025-08-07 09:59:08 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
struct ExpandResult: Codable {
    var queue: [Int]
    var head: Int
    var parents: [Int: Int]
    var visited: [Int: Bool]
    var intersection: Int
    var found: Bool
    init() {
        self.queue = []
        self.head = 0
        self.parents = [:]
        self.visited = [:]
        self.intersection = 0
        self.found = false
    }
    init(queue: [Int], head: Int, parents: [Int: Int], visited: [Int: Bool], intersection: Int, found: Bool) {
        self.queue = queue
        self.head = head
        self.parents = parents
        self.visited = visited
        self.intersection = intersection
        self.found = found
    }
}
struct SearchResult: Codable {
    var path: [Int]
    var ok: Bool
    init() {
        self.path = []
        self.ok = false
    }
    init(path: [Int], ok: Bool) {
        self.path = path
        self.ok = ok
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func expand_search(_ graph: [Int: [Int]], _ queue: [Int], _ head: Int, _ parents: [Int: Int], _ visited: [Int: Bool], _ opposite_visited: [Int: Bool]) -> ExpandResult {
        var head = head
        if (head >= Int(((queue).count))) {
            return ExpandResult(queue: queue, head: head, parents: parents, visited: visited, intersection: (0 &- 1), found: false)
        }
        let current = (queue[head] as? Int ?? 0)
        head = Int((head &+ 1))
        let neighbors: [Int] = (graph[current] as! [Int])
        var q: [Int] = queue
        var p: [Int: Int] = parents
        var v: [Int: Bool] = visited
        var i: Int = 0
        while (i < Int(((neighbors).count))) {
            let neighbor = (neighbors[i] as? Int ?? 0)
            if (v[neighbor] as! Bool) {
                i = Int((i &+ 1))
                continue
            }
            v = _set(v, neighbor, true)
            p = _set(p, neighbor, Int(current))
            q = (_append(q, neighbor) as! [Int])
            if (opposite_visited[neighbor] as! Bool) {
                return ExpandResult(queue: q, head: head, parents: p, visited: v, intersection: neighbor, found: true)
            }
            i = Int((i &+ 1))
        }
        return ExpandResult(queue: q, head: head, parents: p, visited: v, intersection: (0 &- 1), found: false)
    }
    func construct_path(_ current: Int, _ parents: [Int: Int]) -> [Int] {
        var path: [Int] = ([] as! [Int])
        var node: Int = current
        while (node != (0 &- 1)) {
            path = (_append(path, node) as! [Int])
            node = (parents[node] as? Int ?? 0)
        }
        return path
    }
    func reverse_list(_ xs: [Int]) -> [Int] {
        var res: [Int] = ([] as! [Int])
        var i: Int = Int(((xs).count))
        while (i > 0) {
            i = Int((i &- 1))
            res = (_append(res, (xs[i] as? Int ?? 0)) as! [Int])
        }
        return res
    }
    func bidirectional_search(_ g: [Int: [Int]], _ start: Int, _ goal: Int) -> SearchResult {
        if (start == goal) {
            return SearchResult(path: ([start] as! [Int]), ok: true)
        }
        var forward_parents: [Int: Int] = ([:] as! [Int: Int])
        forward_parents = _set(forward_parents, start, Int((0 &- 1)))
        var backward_parents: [Int: Int] = ([:] as! [Int: Int])
        backward_parents = _set(backward_parents, goal, Int((0 &- 1)))
        var forward_visited: [Int: Bool] = ([:] as! [Int: Bool])
        forward_visited = _set(forward_visited, start, true)
        var backward_visited: [Int: Bool] = ([:] as! [Int: Bool])
        backward_visited = _set(backward_visited, goal, true)
        var forward_queue: [Int] = ([start] as! [Int])
        var backward_queue: [Int] = ([goal] as! [Int])
        var forward_head: Int = 0
        var backward_head: Int = 0
        var intersection: Int = (0 &- 1)
        while (((forward_head < Int(((forward_queue).count))) && (backward_head < Int(((backward_queue).count)))) && (intersection == (0 &- 1))) {
            var res: ExpandResult = expand_search((g as! [Int: [Int]]), (forward_queue as! [Int]), forward_head, (forward_parents as! [Int: Int]), (forward_visited as! [Int: Bool]), (backward_visited as! [Int: Bool]))
            forward_queue = (res.queue as! [Int])
            forward_head = Int(res.head)
            forward_parents = (res.parents as! [Int: Int])
            forward_visited = (res.visited as! [Int: Bool])
            if res.found {
                intersection = Int(res.intersection)
                break
            }
            res = (expand_search((g as! [Int: [Int]]), (backward_queue as! [Int]), backward_head, (backward_parents as! [Int: Int]), (backward_visited as! [Int: Bool]), (forward_visited as! [Int: Bool])) as! ExpandResult)
            backward_queue = (res.queue as! [Int])
            backward_head = Int(res.head)
            backward_parents = (res.parents as! [Int: Int])
            backward_visited = (res.visited as! [Int: Bool])
            if res.found {
                intersection = Int(res.intersection)
                break
            }
        }
        if (intersection == (0 &- 1)) {
            return SearchResult(path: [], ok: false)
        }
        var forward_path: [Int] = (construct_path(intersection, (forward_parents as! [Int: Int])) as! [Int])
        forward_path = (reverse_list((forward_path as! [Int])) as! [Int])
        var back_start: Int = (backward_parents[intersection] as? Int ?? 0)
        var backward_path: [Int] = (construct_path(back_start, (backward_parents as! [Int: Int])) as! [Int])
        var result: [Int] = forward_path
        var j: Int = 0
        while (j < Int(((backward_path).count))) {
            result = (_append(result, (backward_path[j] as? Int ?? 0)) as! [Int])
            j = Int((j &+ 1))
        }
        return SearchResult(path: result, ok: true)
    }
    func is_edge(_ g: [Int: [Int]], _ u: Int, _ v: Int) -> Bool {
        let neighbors: [Int] = (g[u] as! [Int])
        var i: Int = 0
        while (i < Int(((neighbors).count))) {
            if ((neighbors[i] as? Int ?? 0) == v) {
                return true
            }
            i = Int((i &+ 1))
        }
        return false
    }
    func path_exists(_ g: [Int: [Int]], _ path: [Int]) -> Bool {
        if (Int(((path).count)) == 0) {
            return false
        }
        var i: Int = 0
        while ((i &+ 1) < Int(((path).count))) {
            if (!is_edge((g as! [Int: [Int]]), (path[i] as? Int ?? 0), (path[(i &+ 1)] as? Int ?? 0))) {
                return false
            }
            i = Int((i &+ 1))
        }
        return true
    }
    func print_path(_ g: [Int: [Int]], _ s: Int, _ t: Int) {
        let res = bidirectional_search((g as! [Int: [Int]]), s, t)
        if (res.ok && path_exists((g as! [Int: [Int]]), (res.path as! [Int]))) {
            print(_p(((((("Path from " + _p(s)) + " to ") + _p(t)) + ": ") + "[" + res.path.map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]")))
        } else {
            print(_p((((("Path from " + _p(s)) + " to ") + _p(t)) + ": None")))
        }
    }
    func main() {
        let graph: [Int: [Int]] = ([0: ([1, 2] as! [Int]), 1: ([0, 3, 4] as! [Int]), 2: ([0, 5, 6] as! [Int]), 3: ([1, 7] as! [Int]), 4: ([1, 8] as! [Int]), 5: ([2, 9] as! [Int]), 6: ([2, 10] as! [Int]), 7: ([3, 11] as! [Int]), 8: ([4, 11] as! [Int]), 9: ([5, 11] as! [Int]), 10: ([6, 11] as! [Int]), 11: ([7, 8, 9, 10] as! [Int])] as! [Int: [Int]])
        _ = print_path((graph as! [Int: [Int]]), 0, 11)
        _ = print_path((graph as! [Int: [Int]]), 5, 5)
        let disconnected: [Int: [Int]] = ([0: ([1, 2] as! [Int]), 1: ([0] as! [Int]), 2: ([0] as! [Int]), 3: ([4] as! [Int]), 4: ([3] as! [Int])] as! [Int: [Int]])
        _ = print_path((disconnected as! [Int: [Int]]), 0, 3)
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
