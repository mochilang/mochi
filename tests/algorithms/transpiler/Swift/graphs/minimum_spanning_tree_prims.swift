// Generated by Mochi transpiler v0.10.60 on 2025-08-08 10:44:45 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
struct Edge: Codable {
    var to: Int
    var weight: Int
    init() {
        self.to = 0
        self.weight = 0
    }
    init(to: Int, weight: Int) {
        self.to = to
        self.weight = weight
    }
}
struct Pair: Codable {
    var u: Int
    var v: Int
    init() {
        self.u = 0
        self.v = 0
    }
    init(u: Int, v: Int) {
        self.u = u
        self.v = v
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let INF = 1000000000
    func pairs_to_string(_ edges: [Pair]) -> String {
        var s: String = "["
        var i: Int = 0
        while (i < _int(((edges).count))) {
            let e = (edges[i] as! Pair)
            s = ((((((s + "(") + _p(e.u)) + ", ") + _p(e.v)) + ")") as! String)
            if (i < (_int(((edges).count)) &- 1)) {
                s = ((s + ", ") as! String)
            }
            i = _int((i &+ 1))
        }
        return (s + "]")
    }
    func prim_mst(_ graph: [[Edge]]) -> [Pair] {
        let n = _int(((graph).count))
        var visited: [Bool] = ([] as! [Bool])
        var dist: [Int] = ([] as! [Int])
        var parent: [Int] = ([] as! [Int])
        var i: Int = 0
        while (i < n) {
            visited = (_append(visited, false) as! [Bool])
            dist = (_append(dist, INF) as! [Int])
            parent = (_append(parent, -1) as! [Int])
            i = _int((i &+ 1))
        }
        dist = _set(dist, 0, 0)
        var result: [Pair] = ([] as! [Pair])
        var count: Int = 0
        while (count < n) {
            var min_val: Int = INF
            var u: Int = 0
            var v: Int = 0
            while (v < n) {
                if (((visited[v] as! Bool) == false) && ((dist[v] as? Int ?? 0) < min_val)) {
                    min_val = (dist[v] as? Int ?? 0)
                    u = Int(v)
                }
                v = _int((v &+ 1))
            }
            if (min_val == INF) {
                break
            }
            visited = _set(visited, u, true)
            if (u != 0) {
                result = (_append(result, Pair(u: (parent[u] as? Int ?? 0), v: u)) as! [Pair])
            }
            for e in (graph[u] as! [Edge]) {
                if (((visited[e.to] as! Bool) == false) && (e.weight < (dist[e.to] as? Int ?? 0))) {
                    dist = _set(dist, e.to, _int(e.weight))
                    parent = _set(parent, e.to, Int(u))
                }
            }
            count = _int((count &+ 1))
        }
        return result
    }
    let adjacency_list: [[Edge]] = ([([Edge(to: 1, weight: 1), Edge(to: 3, weight: 3)] as! [Edge]), ([Edge(to: 0, weight: 1), Edge(to: 2, weight: 6), Edge(to: 3, weight: 5), Edge(to: 4, weight: 1)] as! [Edge]), ([Edge(to: 1, weight: 6), Edge(to: 4, weight: 5), Edge(to: 5, weight: 2)] as! [Edge]), ([Edge(to: 0, weight: 3), Edge(to: 1, weight: 5), Edge(to: 4, weight: 1)] as! [Edge]), ([Edge(to: 1, weight: 1), Edge(to: 2, weight: 5), Edge(to: 3, weight: 1), Edge(to: 5, weight: 4)] as! [Edge]), ([Edge(to: 2, weight: 2), Edge(to: 4, weight: 4)] as! [Edge])] as! [[Edge]])
    let mst_edges: [Pair] = (prim_mst((adjacency_list as! [[Edge]])) as! [Pair])
    print(_p(String(describing: pairs_to_string((mst_edges as! [Pair])))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
