// Generated by Mochi transpiler v0.10.60 on 2025-08-08 10:43:51 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
struct Edge: Codable {
    var node: Int
    var weight: Int
    init() {
        self.node = 0
        self.weight = 0
    }
    init(node: Int, weight: Int) {
        self.node = node
        self.weight = weight
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func make_int_list(_ n: Int, _ value: Int) -> [Int] {
        var lst: [Int] = ([] as! [Int])
        var i: Int = 0
        while (i < n) {
            lst = (_append(lst, value) as! [Int])
            i = _int((i &+ 1))
        }
        return lst
    }
    func make_bool_list(_ n: Int) -> [Bool] {
        var lst: [Bool] = ([] as! [Bool])
        var i: Int = 0
        while (i < n) {
            lst = (_append(lst, false) as! [Bool])
            i = _int((i &+ 1))
        }
        return lst
    }
    func dijkstra(_ graph: [[Edge]], _ src: Int) -> [Int] {
        let n = _int(((graph).count))
        var dist: [Int] = (make_int_list(n, 1000000000) as! [Int])
        var visited: [Bool] = (make_bool_list(n) as! [Bool])
        dist = _set(dist, src, 0)
        var count: Int = 0
        while (count < n) {
            var u: Int = -1
            var min_dist: Int = 1000000000
            var i: Int = 0
            while (i < n) {
                if (!(visited[i] ?? false) && ((dist[i] as? Int ?? 0) < min_dist)) {
                    min_dist = (dist[i] as? Int ?? 0)
                    u = Int(i)
                }
                i = _int((i &+ 1))
            }
            if (u < 0) {
                break
            }
            visited = _set(visited, u, true)
            var j: Int = 0
            while (j < _int((((graph[u] as! [Edge])).count))) {
                let e = (graph[u][j] as! Edge)
                let v = e.node
                let w = e.weight
                if !(visited[v] ?? false) {
                    let new_dist = ((dist[u] as? Int ?? 0) &+ w)
                    if (new_dist < (dist[v] as? Int ?? 0)) {
                        dist = _set(dist, v, Int(new_dist))
                    }
                }
                j = _int((j &+ 1))
            }
            count = _int((count &+ 1))
        }
        return dist
    }
    let graph: [[Edge]] = ([([Edge(node: 1, weight: 10), Edge(node: 3, weight: 5)] as! [Edge]), ([Edge(node: 2, weight: 1), Edge(node: 3, weight: 2)] as! [Edge]), ([Edge(node: 4, weight: 4)] as! [Edge]), ([Edge(node: 1, weight: 3), Edge(node: 2, weight: 9), Edge(node: 4, weight: 2)] as! [Edge]), ([Edge(node: 0, weight: 7), Edge(node: 2, weight: 6)] as! [Edge])] as! [[Edge]])
    var dist: [Int] = (dijkstra((graph as! [[Edge]]), 0) as! [Int])
    print(_p(_p((dist[0] as? Int ?? 0))))
    print(_p(_p((dist[1] as? Int ?? 0))))
    print(_p(_p((dist[2] as? Int ?? 0))))
    print(_p(_p((dist[3] as? Int ?? 0))))
    print(_p(_p((dist[4] as? Int ?? 0))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
