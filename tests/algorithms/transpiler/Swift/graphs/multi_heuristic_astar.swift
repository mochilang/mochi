// Generated by Mochi transpiler v0.10.60 on 2025-08-08 10:44:48 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
struct Pos: Codable {
    var x: Int
    var y: Int
    init() {
        self.x = 0
        self.y = 0
    }
    init(x: Int, y: Int) {
        self.x = x
        self.y = y
    }
}
struct PQNode: Codable {
    var pos: Pos
    var pri: Double
    init() {
        self.pos = Pos()
        self.pri = 0
    }
    init(pos: Pos, pri: Double) {
        self.pos = pos
        self.pri = pri
    }
}
struct PQPopResult: Codable {
    var pq: [PQNode]
    var node: PQNode
    init() {
        self.pq = []
        self.node = PQNode()
    }
    init(pq: [PQNode], node: PQNode) {
        self.pq = pq
        self.node = node
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let W1 = 1.0
    let W2 = 1.0
    let n = 20
    let n_heuristic = 3
    let INF = 1000000000.0
    var t: Int = 1
    func pos_equal(_ a: Pos, _ b: Pos) -> Bool {
        return ((a.x == b.x) && (a.y == b.y))
    }
    func pos_key(_ p: Pos) -> String {
        return ((_p(p.x) + ",") + _p(p.y))
    }
    func sqrtApprox(_ x: Double) -> Double {
        if (x <= 0.0) {
            return 0.0
        }
        var guess: Double = x
        var i: Int = 0
        while (i < 10) {
            guess = Double((Double((guess + (x / guess))) / 2.0))
            i = _int((i &+ 1))
        }
        return guess
    }
    func consistent_heuristic(_ p: Pos, _ goal: Pos) -> Double {
        let dx = Double((p.x &- goal.x))
        let dy = Double((p.y &- goal.y))
        return Double(sqrtApprox(Double(((dx * dx) + (dy * dy)))))
    }
    func iabs(_ x: Int) -> Int {
        if (x < 0) {
            return -x
        }
        return x
    }
    func heuristic_1(_ p: Pos, _ goal: Pos) -> Double {
        return Double((_int(iabs((p.x &- goal.x))) &+ _int(iabs((p.y &- goal.y)))))
    }
    func heuristic_2(_ p: Pos, _ goal: Pos) -> Double {
        let h = Double(consistent_heuristic((p as! Pos), (goal as! Pos)))
        return (h / Double(t))
    }
    func heuristic(_ i: Int, _ p: Pos, _ goal: Pos) -> Double {
        if (i == 0) {
            return Double(consistent_heuristic((p as! Pos), (goal as! Pos)))
        }
        if (i == 1) {
            return Double(heuristic_1((p as! Pos), (goal as! Pos)))
        }
        return Double(heuristic_2((p as! Pos), (goal as! Pos)))
    }
    func key_fn(_ start: Pos, _ i: Int, _ goal: Pos, _ g_func: [String: Double]) -> Double {
        let g = Double(g_func[String(String(describing: pos_key((start as! Pos))))])
        return (g + (W1 * Double(heuristic(i, (start as! Pos), (goal as! Pos)))))
    }
    func valid(_ p: Pos) -> Bool {
        if ((p.x < 0) || (p.x > (n &- 1))) {
            return false
        }
        if ((p.y < 0) || (p.y > (n &- 1))) {
            return false
        }
        return true
    }
    let blocks: [Pos] = ([Pos(x: 0, y: 1), Pos(x: 1, y: 1), Pos(x: 2, y: 1), Pos(x: 3, y: 1), Pos(x: 4, y: 1), Pos(x: 5, y: 1), Pos(x: 6, y: 1), Pos(x: 7, y: 1), Pos(x: 8, y: 1), Pos(x: 9, y: 1), Pos(x: 10, y: 1), Pos(x: 11, y: 1), Pos(x: 12, y: 1), Pos(x: 13, y: 1), Pos(x: 14, y: 1), Pos(x: 15, y: 1), Pos(x: 16, y: 1), Pos(x: 17, y: 1), Pos(x: 18, y: 1), Pos(x: 19, y: 1)] as! [Pos])
    func in_blocks(_ p: Pos) -> Bool {
        var i: Int = 0
        while (i < _int(((blocks).count))) {
            if pos_equal((blocks[i] as! Pos), (p as! Pos)) {
                return true
            }
            i = _int((i &+ 1))
        }
        return false
    }
    func pq_put(_ pq: inout [PQNode], _ node: Pos, _ pri: Double) -> [PQNode] {
        var updated: Bool = false
        var i: Int = 0
        while (i < _int(((pq).count))) {
            if pos_equal((pq[i].pos as! Pos), (node as! Pos)) {
                if (String(describing: pri) < String(describing: pq[i].pri)
                ) {
                    pq = _set(pq, i, (PQNode(pos: node, pri: pri) as! PQNode))
                }
                updated = true
            }
            i = _int((i &+ 1))
        }
        if (!updated) {
            pq = (_append(pq, PQNode(pos: node, pri: pri)) as! [PQNode])
        }
        return pq
    }
    func pq_minkey(_ pq: [PQNode]) -> Double {
        if (_int(((pq).count)) == 0) {
            return INF
        }
        var first: PQNode = (pq[0] as! PQNode)
        var m: Double = first.pri
        var i: Int = 1
        while (i < _int(((pq).count))) {
            var item: PQNode = (pq[i] as! PQNode)
            if (item.pri < m) {
                m = Double(item.pri)
            }
            i = _int((i &+ 1))
        }
        return m
    }
    func pq_pop_min(_ pq: [PQNode]) -> PQPopResult {
        var best: PQNode = (pq[0] as! PQNode)
        var idx: Int = 0
        var i: Int = 1
        while (i < _int(((pq).count))) {
            if (String(describing: pq[i].pri) < String(describing: best.pri)
            ) {
                best = (pq[i] as! PQNode)
                idx = Int(i)
            }
            i = _int((i &+ 1))
        }
        var new_pq: [PQNode] = ([] as! [PQNode])
        i = 0
        while (i < _int(((pq).count))) {
            if (i != idx) {
                new_pq = (_append(new_pq, (pq[i] as! PQNode)) as! [PQNode])
            }
            i = _int((i &+ 1))
        }
        return PQPopResult(pq: new_pq, node: best)
    }
    func pq_remove(_ pq: [PQNode], _ node: Pos) -> [PQNode] {
        var new_pq: [PQNode] = ([] as! [PQNode])
        var i: Int = 0
        while (i < _int(((pq).count))) {
            if (!pos_equal((pq[i].pos as! Pos), (node as! Pos))) {
                new_pq = (_append(new_pq, (pq[i] as! PQNode)) as! [PQNode])
            }
            i = _int((i &+ 1))
        }
        return new_pq
    }
    func reconstruct(_ back_pointer: [String: Pos], _ goal: Pos, _ start: Pos) -> [Pos] {
        var path: [Pos] = ([] as! [Pos])
        var current: Pos = goal
        var key: String = String(describing: pos_key((current as! Pos)))
        path = (_append(path, current) as! [Pos])
        while (!pos_equal((current as! Pos), (start as! Pos))) {
            current = (back_pointer[String(String(describing: key))] as! Pos)
            key = String(describing: pos_key((current as! Pos)))
            path = (_append(path, current) as! [Pos])
        }
        var rev: [Pos] = ([] as! [Pos])
        var i: Int = (_int(((path).count)) &- 1)
        while (i >= 0) {
            rev = (_append(rev, (path[i] as! Pos)) as! [Pos])
            i = _int((i &- 1))
        }
        return rev
    }
    func neighbours(_ p: Pos) -> [Pos] {
        let left = Pos(x: (p.x &- 1), y: p.y)
        let right = Pos(x: (p.x &+ 1), y: p.y)
        let up = Pos(x: p.x, y: (p.y &+ 1))
        let down = Pos(x: p.x, y: (p.y &- 1))
        return ([left, right, up, down] as! [Pos])
    }
    func multi_a_star(_ start: Pos, _ goal: Pos, _ n_heuristic: Int) {
        var g_function: [String: Double] = ([:] as! [String: Double])
        var back_pointer: [String: Pos] = ([:] as! [String: Pos])
        var visited: [String: Bool] = ([:] as! [String: Bool])
        var open_list: [[PQNode]] = ([] as! [[PQNode]])
        g_function = _set(g_function, String(describing: pos_key((start as! Pos))), 0.0)
        g_function = _set(g_function, String(describing: pos_key((goal as! Pos))), Double(INF))
        back_pointer = _set(back_pointer, String(describing: pos_key((start as! Pos))), (Pos(x: -1, y: -1) as! Pos))
        back_pointer = _set(back_pointer, String(describing: pos_key((goal as! Pos))), (Pos(x: -1, y: -1) as! Pos))
        visited = _set(visited, String(describing: pos_key((start as! Pos))), true)
        var i: Int = 0
        while (i < n_heuristic) {
            open_list = ((_append(open_list, []) as! [Any?]) as! [[PQNode]])
            let pri = Double(key_fn((start as! Pos), i, (goal as! Pos), (g_function as! [String: Double])))
            open_list = _set(open_list, i, (pq_put(&open_list[i], (start as! Pos), Double(pri)) as! [PQNode]))
            i = _int((i &+ 1))
        }
        while (Double(pq_minkey((open_list[0] as! [PQNode]))) < INF) {
            var chosen: Int = 0
            i = 1
            while (i < n_heuristic) {
                if (Double(pq_minkey((open_list[i] as! [PQNode]))) <= (W2 * Double(pq_minkey((open_list[0] as! [PQNode]))))) {
                    chosen = Int(i)
                    break
                }
                i = _int((i &+ 1))
            }
            if (chosen != 0) {
                t = _int((t &+ 1))
            }
            var pair: PQPopResult = pq_pop_min((open_list[chosen] as! [PQNode]))
            open_list = _set(open_list, chosen, (pair.pq as! [PQNode]))
            let current = pair.node
            i = 0
            while (i < n_heuristic) {
                if (i != chosen) {
                    open_list = _set(open_list, i, (pq_remove((open_list[i] as! [PQNode]), (current.pos as! Pos)) as! [PQNode]))
                }
                i = _int((i &+ 1))
            }
            let ckey = String(describing: pos_key((current.pos as! Pos)))
            if (visited[ckey] != nil) {
                continue
            }
            visited = _set(visited, String(describing: ckey), true)
            if pos_equal((current.pos as! Pos), (goal as! Pos)) {
                let path: [Pos] = (reconstruct((back_pointer as! [String: Pos]), (goal as! Pos), (start as! Pos)) as! [Pos])
                var j: Int = 0
                while (j < _int(((path).count))) {
                    let p = (path[j] as! Pos)
                    print(_p((((("(" + _p(p.x)) + ",") + _p(p.y)) + ")")))
                    j = _int((j &+ 1))
                }
                return
            }
            let neighs: [Pos] = (neighbours((current.pos as! Pos)) as! [Pos])
            var k: Int = 0
            while (k < _int(((neighs).count))) {
                let nb = (neighs[k] as! Pos)
                if (valid((nb as! Pos)) && (in_blocks((nb as! Pos)) == false)) {
                    let nkey = String(describing: pos_key((nb as! Pos)))
                    let tentative = (Double(g_function[String(String(describing: ckey))]) + 1.0)
                    if ((!(g_function[nkey] != nil)) || (tentative < Double(g_function[String(String(describing: nkey))]))) {
                        g_function = _set(g_function, String(describing: nkey), Double(tentative))
                        back_pointer = _set(back_pointer, String(describing: nkey), (current.pos as! Pos))
                        i = 0
                        while (i < n_heuristic) {
                            let pri2 = (tentative + (W1 * Double(heuristic(i, (nb as! Pos), (goal as! Pos)))))
                            open_list = _set(open_list, i, (pq_put(&open_list[i], (nb as! Pos), Double(pri2)) as! [PQNode]))
                            i = _int((i &+ 1))
                        }
                    }
                }
                k = _int((k &+ 1))
            }
        }
        print(_p("No path found to goal"))
    }
    let start = Pos(x: 0, y: 0)
    let goal = Pos(x: (n &- 1), y: (n &- 1))
    _ = multi_a_star((start as! Pos), (goal as! Pos), n_heuristic)
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
