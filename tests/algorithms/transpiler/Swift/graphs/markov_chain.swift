// Generated by Mochi transpiler v0.10.65 on 2025-08-14 17:14:14 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _keys<K,V>(_ m: [K: V]) -> [K] {
    return Array(m.keys)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
struct Transition: Codable {
    var src: String
    var dst: String
    var prob: Double
    init() {
        self.src = ""
        self.dst = ""
        self.prob = 0
    }
    init(src: String, dst: String, prob: Double) {
        self.src = src
        self.dst = dst
        self.prob = prob
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    var seed = 1
    func rand() -> Int {
        seed = _int(((_int(((seed &* 1103515245) &+ 12345)) % 2147483648 + 2147483648) % 2147483648))
        return seed
    }
    func random() -> Double {
        return (Double((1.0 * Double(_int(rand())))) / 2147483648.0)
    }
    func get_nodes(_ trans: [Transition]) -> [String] {
        var seen: [String: Bool] = ([:] as! [String: Bool])
        for t in trans {
            seen = _set(seen, String(describing: t.src), true)
            seen = _set(seen, String(describing: t.dst), true)
        }
        var nodes: [String] = ([] as! [String])
        for k in (_keys(seen) as! [String]) {
            nodes = (_append(nodes, k) as! [String])
        }
        return nodes
    }
    func transition(_ current: String, _ trans: [Transition]) -> String {
        var current_probability = 0.0
        let random_value = Double(random())
        for t in trans {
            if (t.src == current) {
                current_probability = Double((current_probability + t.prob))
                if (current_probability > random_value) {
                    return t.dst
                }
            }
        }
        return ""
    }
    func get_transitions(_ start: String, _ trans: [Transition], _ steps: Int) -> [String: Int] {
        var visited: [String: Int] = ([:] as! [String: Int])
        for node in (get_nodes((trans as! [Transition])) as! [String]) {
            var one = 1
            visited = _set(visited, String(describing: node), Int(one))
        }
        var node = start
        var i = 0
        while (i < steps) {
            node = String(describing: transition((node as! String), (trans as! [Transition])))
            var count = ((visited[String(String(describing: node))] ?? 0) as? Int ?? 0)
            count = _int((count &+ 1))
            visited = _set(visited, String(describing: node), Int(count))
            i = _int((i &+ 1))
        }
        return visited
    }
    func main() -> Void {
        let transitions: [Transition] = ({
            var _arr: [Transition] = []
            _arr = _append(_arr, Transition(src: "a", dst: "a", prob: 0.9))
            _arr = _append(_arr, Transition(src: "a", dst: "b", prob: 0.075))
            _arr = _append(_arr, Transition(src: "a", dst: "c", prob: 0.025))
            _arr = _append(_arr, Transition(src: "b", dst: "a", prob: 0.15))
            _arr = _append(_arr, Transition(src: "b", dst: "b", prob: 0.8))
            _arr = _append(_arr, Transition(src: "b", dst: "c", prob: 0.05))
            _arr = _append(_arr, Transition(src: "c", dst: "a", prob: 0.25))
            _arr = _append(_arr, Transition(src: "c", dst: "b", prob: 0.25))
            _arr = _append(_arr, Transition(src: "c", dst: "c", prob: 0.5))
            return _arr
        }() as! [Transition])
        let result: [String: Int] = (get_transitions("a", (transitions as! [Transition]), 5000) as! [String: Int])
        print(_p(((((_p(((result[String("a")] ?? 0) as? Int ?? 0)) + " ") + _p(((result[String("b")] ?? 0) as? Int ?? 0))) + " ") + _p(((result[String("c")] ?? 0) as? Int ?? 0)))))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
