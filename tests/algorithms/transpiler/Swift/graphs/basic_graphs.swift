// Generated by Mochi transpiler v0.10.59 on 2025-08-07 08:56:44 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func dfs(_ g: [Int: [Int]], _ s: Int) -> Void {
        var visited: [Int: Bool] = ([:] as! [Int: Bool])
        var stack: [Int] = ([] as! [Int])
        visited = _set(visited, s, true)
        stack = (_append(stack, s) as! [Int])
        print(_p(s))
        while (Int(((stack).count)) > 0) {
            let u = (stack[(Int(((stack).count)) &- 1)] as? Int ?? 0)
            var found: Bool = false
            for v in (g[u] as! [Int]) {
                if (!(visited[v] != nil)) {
                    visited = _set(visited, v, true)
                    stack = (_append(stack, v) as! [Int])
                    print(_p(v))
                    found = true
                    break
                }
            }
            if (!found) {
                stack = (Array(stack[0..<(Int(((stack).count)) &- 1)]) as! [Int])
            }
        }
    }
    func bfs(_ g: [Int: [Int]], _ s: Int) -> Void {
        var visited: [Int: Bool] = ([:] as! [Int: Bool])
        var q: [Int] = ([] as! [Int])
        visited = _set(visited, s, true)
        q = (_append(q, s) as! [Int])
        print(_p(s))
        while (Int(((q).count)) > 0) {
            let u = (q[0] as? Int ?? 0)
            q = (Array(q[1..<Int(((q).count))]) as! [Int])
            for v in (g[u] as! [Int]) {
                if (!(visited[v] != nil)) {
                    visited = _set(visited, v, true)
                    q = (_append(q, v) as! [Int])
                    print(_p(v))
                }
            }
        }
    }
    func sort_ints(_ a: [Int]) -> [Int] {
        var arr: [Int] = a
        var i: Int = 0
        while (i < Int(((arr).count))) {
            var j: Int = 0
            while (j < ((Int(((arr).count)) &- i) &- 1)) {
                if ((arr[j] as? Int ?? 0) > (arr[(j &+ 1)] as? Int ?? 0)) {
                    let tmp = (arr[j] as? Int ?? 0)
                    arr = _set(arr, j, (arr[(j &+ 1)] as? Int ?? 0))
                    arr = _set(arr, (j &+ 1), Int(tmp))
                }
                j = Int((j &+ 1))
            }
            i = Int((i &+ 1))
        }
        return arr
    }
    func dijkstra(_ g: [Int: [[Int]]], _ s: Int) -> Void {
        var dist: [Int: Int] = ([:] as! [Int: Int])
        dist = _set(dist, s, 0)
        var path: [Int: Int] = ([:] as! [Int: Int])
        path = _set(path, s, 0)
        var known: [Int] = ([] as! [Int])
        var keys: [Int] = ([s] as! [Int])
        while (Int(((known).count)) < Int(((keys).count))) {
            var mini: Int = 100000
            var u: Int = -1
            var i: Int = 0
            while (i < Int(((keys).count))) {
                let k = (keys[i] as? Int ?? 0)
                let d = (dist[k] as? Int ?? 0)
                if ((!(known.contains(k))) && (d < mini)) {
                    mini = Int(d)
                    u = Int(k)
                }
                i = Int((i &+ 1))
            }
            known = (_append(known, u) as! [Int])
            for e in (g[u] as! [[Int]]) {
                let v = (e[0] as? Int ?? 0)
                let w = (e[1] as? Int ?? 0)
                if (!(keys.contains(v))) {
                    keys = (_append(keys, v) as! [Int])
                }
                let alt = ((dist[u] as? Int ?? 0) &+ w)
                let cur = Int(((dist[v] != nil) ? (dist[v] as? Int ?? 0) : 100000))
                if ((!(known.contains(v))) && (alt < cur)) {
                    dist = _set(dist, v, Int(alt))
                    path = _set(path, v, Int(u))
                }
            }
        }
        let ordered: [Int] = (sort_ints((keys as! [Int])) as! [Int])
        var idx: Int = 0
        while (idx < Int(((ordered).count))) {
            let k = (ordered[idx] as? Int ?? 0)
            if (k != s) {
                print(_p((dist[k] as? Int ?? 0)))
            }
            idx = Int((idx &+ 1))
        }
    }
    func topo(_ g: [Int: [Int]], _ n: Int) -> Void {
        var ind: [Int] = ([] as! [Int])
        var i: Int = 0
        while (i <= n) {
            ind = (_append(ind, 0) as! [Int])
            i = Int((i &+ 1))
        }
        var node: Int = 1
        while (node <= n) {
            for v in (g[node] as! [Int]) {
                ind = _set(ind, v, Int(((ind[v] as? Int ?? 0) &+ 1)))
            }
            node = Int((node &+ 1))
        }
        var q: [Int] = ([] as! [Int])
        var j: Int = 1
        while (j <= n) {
            if ((ind[j] as? Int ?? 0) == 0) {
                q = (_append(q, j) as! [Int])
            }
            j = Int((j &+ 1))
        }
        while (Int(((q).count)) > 0) {
            let v = (q[0] as? Int ?? 0)
            q = (Array(q[1..<Int(((q).count))]) as! [Int])
            print(_p(v))
            for w in (g[v] as! [Int]) {
                ind = _set(ind, w, Int(((ind[w] as? Int ?? 0) &- 1)))
                if ((ind[w] as? Int ?? 0) == 0) {
                    q = (_append(q, w) as! [Int])
                }
            }
        }
    }
    func floyd(_ a: [[Int]]) -> Void {
        let n = Int(((a).count))
        var dist: [[Int]] = ([] as! [[Int]])
        var i: Int = 0
        while (i < n) {
            var row: [Int] = ([] as! [Int])
            var j: Int = 0
            while (j < n) {
                row = (_append(row, (a[i][j] as? Int ?? 0)) as! [Int])
                j = Int((j &+ 1))
            }
            dist = (_append(dist, row) as! [[Int]])
            i = Int((i &+ 1))
        }
        var k: Int = 0
        while (k < n) {
            var ii: Int = 0
            while (ii < n) {
                var jj: Int = 0
                while (jj < n) {
                    if ((dist[ii][jj] as? Int ?? 0) > ((dist[ii][k] as? Int ?? 0) &+ (dist[k][jj] as? Int ?? 0))) {
                        dist[ii][jj] = Int(((dist[ii][k] as? Int ?? 0) &+ (dist[k][jj] as? Int ?? 0)))
                    }
                    jj = Int((jj &+ 1))
                }
                ii = Int((ii &+ 1))
            }
            k = Int((k &+ 1))
        }
        print(_p("[" + dist.map{ if let s = $0 as? String { "\"" + s.replacingOccurrences(of: "\"", with: "\\\"") + "\"" } else { _p($0) } }.joined(separator: ", ") + "]"))
    }
    func prim(_ g: [Int: [[Int]]], _ s: Int, _ n: Int) -> Int {
        var dist: [Int: Int] = ([:] as! [Int: Int])
        dist = _set(dist, s, 0)
        var known: [Int] = ([] as! [Int])
        var keys: [Int] = ([s] as! [Int])
        var total: Int = 0
        while (Int(((known).count)) < n) {
            var mini: Int = 100000
            var u: Int = -1
            var i: Int = 0
            while (i < Int(((keys).count))) {
                let k = (keys[i] as? Int ?? 0)
                let d = (dist[k] as? Int ?? 0)
                if ((!(known.contains(k))) && (d < mini)) {
                    mini = Int(d)
                    u = Int(k)
                }
                i = Int((i &+ 1))
            }
            known = (_append(known, u) as! [Int])
            total = Int((total &+ mini))
            for e in (g[u] as! [[Int]]) {
                let v = (e[0] as? Int ?? 0)
                let w = (e[1] as? Int ?? 0)
                if (!(keys.contains(v))) {
                    keys = (_append(keys, v) as! [Int])
                }
                let cur = Int(((dist[v] != nil) ? (dist[v] as? Int ?? 0) : 100000))
                if ((!(known.contains(v))) && (w < cur)) {
                    dist = _set(dist, v, Int(w))
                }
            }
        }
        return total
    }
    func sort_edges(_ edges: [[Int]]) -> [[Int]] {
        var es: [[Int]] = edges
        var i: Int = 0
        while (i < Int(((es).count))) {
            var j: Int = 0
            while (j < ((Int(((es).count)) &- i) &- 1)) {
                if ((es[j][2] as? Int ?? 0) > (es[(j &+ 1)][2] as? Int ?? 0)) {
                    let tmp: [Int] = (es[j] as! [Int])
                    es = _set(es, j, (es[(j &+ 1)] as! [Int]))
                    es = _set(es, (j &+ 1), (tmp as! [Int]))
                }
                j = Int((j &+ 1))
            }
            i = Int((i &+ 1))
        }
        return es
    }
    func find_parent(_ parent: [Int], _ x: Int) -> Int {
        var r: Int = x
        while ((parent[r] as? Int ?? 0) != r) {
            r = (parent[r] as? Int ?? 0)
        }
        return r
    }
    func union_parent(_ parent: inout [Int], _ a: Int, _ b: Int) {
        parent = _set(parent, a, Int(b))
    }
    func kruskal(_ edges: [[Int]], _ n: Int) -> Int {
        var es: [[Int]] = (sort_edges((edges as! [[Int]])) as! [[Int]])
        var parent: [Int] = ([] as! [Int])
        var i: Int = 0
        while (i <= n) {
            parent = (_append(parent, i) as! [Int])
            i = Int((i &+ 1))
        }
        var total: Int = 0
        var count: Int = 0
        var idx: Int = 0
        while ((count < (n &- 1)) && (idx < Int(((es).count)))) {
            let e: [Int] = (es[idx] as! [Int])
            idx = Int((idx &+ 1))
            let u = (e[0] as? Int ?? 0)
            let v = (e[1] as? Int ?? 0)
            let w = (e[2] as? Int ?? 0)
            let ru = Int(find_parent((parent as! [Int]), u))
            let rv = Int(find_parent((parent as! [Int]), v))
            if (ru != rv) {
                _ = union_parent(&parent, ru, rv)
                total = Int((total &+ w))
                count = Int((count &+ 1))
            }
        }
        return total
    }
    func find_isolated_nodes(_ g: [Int: [Int]], _ nodes: [Int]) -> [Int] {
        var isolated: [Int] = ([] as! [Int])
        for node in nodes {
            if (Int((((g[node] as! [Int])).count)) == 0) {
                isolated = (_append(isolated, node) as! [Int])
            }
        }
        return isolated
    }
    let g_dfs: [Int: [Int]] = ([1: ([2, 3] as! [Int]), 2: ([4, 5] as! [Int]), 3: [] as [Any], 4: [] as [Any], 5: [] as [Any]] as! [Int: [Int]])
    let g_bfs: [Int: [Int]] = ([1: ([2, 3] as! [Int]), 2: ([4, 5] as! [Int]), 3: ([6, 7] as! [Int]), 4: [] as [Any], 5: ([8] as! [Int]), 6: [] as [Any], 7: [] as [Any], 8: [] as [Any]] as! [Int: [Int]])
    let g_weighted: [Int: [[Int]]] = ([1: ([([2, 7] as! [Int]), ([3, 9] as! [Int]), ([6, 14] as! [Int])] as! [[Int]]), 2: ([([1, 7] as! [Int]), ([3, 10] as! [Int]), ([4, 15] as! [Int])] as! [[Int]]), 3: ([([1, 9] as! [Int]), ([2, 10] as! [Int]), ([4, 11] as! [Int]), ([6, 2] as! [Int])] as! [[Int]]), 4: ([([2, 15] as! [Int]), ([3, 11] as! [Int]), ([5, 6] as! [Int])] as! [[Int]]), 5: ([([4, 6] as! [Int]), ([6, 9] as! [Int])] as! [[Int]]), 6: ([([1, 14] as! [Int]), ([3, 2] as! [Int]), ([5, 9] as! [Int])] as! [[Int]])] as! [Int: [[Int]]])
    let g_topo: [Int: [Int]] = ([1: ([2, 3] as! [Int]), 2: ([4] as! [Int]), 3: ([4] as! [Int]), 4: [] as [Any]] as! [Int: [Int]])
    let matrix: [[Int]] = ([([0, 5, 9, 100000] as! [Int]), ([100000, 0, 2, 8] as! [Int]), ([100000, 100000, 0, 7] as! [Int]), ([4, 100000, 100000, 0] as! [Int])] as! [[Int]])
    let g_prim: [Int: [[Int]]] = ([1: ([([2, 1] as! [Int]), ([3, 3] as! [Int])] as! [[Int]]), 2: ([([1, 1] as! [Int]), ([3, 1] as! [Int]), ([4, 6] as! [Int])] as! [[Int]]), 3: ([([1, 3] as! [Int]), ([2, 1] as! [Int]), ([4, 2] as! [Int])] as! [[Int]]), 4: ([([2, 6] as! [Int]), ([3, 2] as! [Int])] as! [[Int]])] as! [Int: [[Int]]])
    let edges_kruskal: [[Int]] = ([([1, 2, 1] as! [Int]), ([2, 3, 2] as! [Int]), ([1, 3, 2] as! [Int]), ([3, 4, 1] as! [Int])] as! [[Int]])
    let g_iso: [Int: [Int]] = ([1: ([2, 3] as! [Int]), 2: ([1, 3] as! [Int]), 3: ([1, 2] as! [Int]), 4: [] as [Any]] as! [Int: [Int]])
    _ = dfs((g_dfs as! [Int: [Int]]), 1)
    _ = bfs((g_bfs as! [Int: [Int]]), 1)
    _ = dijkstra((g_weighted as! [Int: [[Int]]]), 1)
    _ = topo((g_topo as! [Int: [Int]]), 4)
    _ = floyd((matrix as! [[Int]]))
    print(_p(Int(prim((g_prim as! [Int: [[Int]]]), 1, 4))))
    print(_p(Int(kruskal((edges_kruskal as! [[Int]]), 4))))
    let iso: [Int] = (find_isolated_nodes((g_iso as! [Int: [Int]]), ([1, 2, 3, 4] as! [Int])) as! [Int])
    print(_p("[" + iso.map{ if let s = $0 as? String { "\"" + s.replacingOccurrences(of: "\"", with: "\\\"") + "\"" } else { _p($0) } }.joined(separator: ", ") + "]"))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
