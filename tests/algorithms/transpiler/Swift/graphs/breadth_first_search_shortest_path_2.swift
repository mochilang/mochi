// Generated by Mochi transpiler v0.10.65 on 2025-08-14 15:56:48 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
func _slice<T>(_ xs: [T], _ start: Int, _ end: Int) -> [T] {
    var s = start
    var e = end
    if s < 0 { s = 0 }
    if e > xs.count { e = xs.count }
    if s > e { s = e }
    return Array(xs[s..<e])
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func contains(_ xs: [String], _ x: String) -> Bool {
        var i = 0
        while (i < _int(((xs).count))) {
            if ((_idx(xs, i) as! String) == x) {
                return true
            }
            i = _int((i &+ 1))
        }
        return false
    }
    func contains_key(_ m: [String: [String]], _ key: String) -> Bool {
        for k in m.keys.sorted() {
            if (k == key) {
                return true
            }
        }
        return false
    }
    func bfs_shortest_path(_ graph: [String: [String]], _ start: String, _ goal: String) -> [String] {
        var explored: [String] = ([] as! [String])
        var queue: [[String]] = ({
            var _arr: [[String]] = []
            _arr = _append(_arr, ({
                var _arr: [String] = []
                _arr = _append(_arr, start)
                return _arr
            }() as! [String]))
            return _arr
        }() as! [[String]])
        if (start == goal) {
            return ({
                var _arr: [String] = []
                _arr = _append(_arr, start)
                return _arr
            }() as! [String])
        }
        while (_int(((queue).count)) > 0) {
            let path: [String] = (_idx(queue, 0) as! [String])
            queue = (_slice(Array(queue), 1, _int(((queue).count))) as! [[String]])
            let node = (_idx(path, (_int(((path).count)) &- 1)) as! String)
            if (!contains((explored as! [String]), (node as! String))) {
                let neighbours: [String] = (graph[String(String(describing: node))] ?? [] as! [String])
                var i = 0
                while (i < _int(((neighbours).count))) {
                    let neighbour = (_idx(neighbours, i) as! String)
                    var new_path = path
                    new_path = (_append(new_path, neighbour) as! [String])
                    queue = (_append(queue, new_path) as! [[String]])
                    if (neighbour == goal) {
                        return new_path
                    }
                    i = _int((i &+ 1))
                }
                explored = (_append(explored, node) as! [String])
            }
        }
        return ([] as! [String])
    }
    func bfs_shortest_path_distance(_ graph: [String: [String]], _ start: String, _ target: String) -> Int {
        if ((contains_key((graph as! [String: [String]]), (start as! String)) == false) || (contains_key((graph as! [String: [String]]), (target as! String)) == false)) {
            return -1
        }
        if (start == target) {
            return 0
        }
        var queue: [String] = ({
            var _arr: [String] = []
            _arr = _append(_arr, start)
            return _arr
        }() as! [String])
        var visited: [String] = ({
            var _arr: [String] = []
            _arr = _append(_arr, start)
            return _arr
        }() as! [String])
        var dist: [String: Int] = ([:] as! [String: Int])
        dist = _set(dist, String(describing: start), 0)
        dist = _set(dist, String(describing: target), _int(-1))
        while (_int(((queue).count)) > 0) {
            let node = (_idx(queue, 0) as! String)
            queue = (_slice(Array(queue), 1, _int(((queue).count))) as! [String])
            if (node == target) {
                if (((dist[String(String(describing: target))] ?? 0 as? Int ?? 0) == _int(-1)) || ((dist[String(String(describing: node))] ?? 0 as? Int ?? 0) < (dist[String(String(describing: target))] ?? 0 as? Int ?? 0))) {
                    dist = _set(dist, String(describing: target), (dist[String(String(describing: node))] ?? 0 as? Int ?? 0))
                }
            }
            let adj: [String] = (graph[String(String(describing: node))] ?? [] as! [String])
            var i = 0
            while (i < _int(((adj).count))) {
                let next = (_idx(adj, i) as! String)
                if (!contains((visited as! [String]), (next as! String))) {
                    visited = (_append(visited, next) as! [String])
                    queue = (_append(queue, next) as! [String])
                    dist = _set(dist, String(describing: next), _int(((dist[String(String(describing: node))] ?? 0 as? Int ?? 0) &+ 1)))
                }
                i = _int((i &+ 1))
            }
        }
        return (dist[String(String(describing: target))] ?? 0 as? Int ?? 0)
    }
    let demo_graph: [String: [String]] = (["A": ({
        var _arr: [String] = []
        _arr = _append(_arr, "B")
        _arr = _append(_arr, "C")
        _arr = _append(_arr, "E")
        return _arr
    }() as! [String]), "B": ({
        var _arr: [String] = []
        _arr = _append(_arr, "A")
        _arr = _append(_arr, "D")
        _arr = _append(_arr, "E")
        return _arr
    }() as! [String]), "C": ({
        var _arr: [String] = []
        _arr = _append(_arr, "A")
        _arr = _append(_arr, "F")
        _arr = _append(_arr, "G")
        return _arr
    }() as! [String]), "D": ({
        var _arr: [String] = []
        _arr = _append(_arr, "B")
        return _arr
    }() as! [String]), "E": ({
        var _arr: [String] = []
        _arr = _append(_arr, "A")
        _arr = _append(_arr, "B")
        _arr = _append(_arr, "D")
        return _arr
    }() as! [String]), "F": ({
        var _arr: [String] = []
        _arr = _append(_arr, "C")
        return _arr
    }() as! [String]), "G": ({
        var _arr: [String] = []
        _arr = _append(_arr, "C")
        return _arr
    }() as! [String])] as! [String: [String]])
    do {
        assert(((bfs_shortest_path((demo_graph as! [String: [String]]), "G", "D") as! [String]) == ({
            var _arr: [String] = []
            _arr = _append(_arr, "G")
            _arr = _append(_arr, "C")
            _arr = _append(_arr, "A")
            _arr = _append(_arr, "B")
            _arr = _append(_arr, "D")
            return _arr
        }() as! [String])))
    }
    do {
        assert(((bfs_shortest_path((demo_graph as! [String: [String]]), "G", "G") as! [String]) == ({
            var _arr: [String] = []
            _arr = _append(_arr, "G")
            return _arr
        }() as! [String])))
    }
    do {
        assert((_int((((bfs_shortest_path((demo_graph as! [String: [String]]), "G", "Unknown") as! [String])).count)) == 0))
    }
    do {
        assert((_int(bfs_shortest_path_distance((demo_graph as! [String: [String]]), "G", "D")) == 4))
    }
    do {
        assert((_int(bfs_shortest_path_distance((demo_graph as! [String: [String]]), "A", "A")) == 0))
    }
    do {
        assert((_int(bfs_shortest_path_distance((demo_graph as! [String: [String]]), "A", "Unknown")) == _int(-1)))
    }
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
