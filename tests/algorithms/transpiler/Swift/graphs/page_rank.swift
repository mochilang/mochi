// Generated by Mochi transpiler v0.10.65 on 2025-08-14 16:18:14 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
struct Node: Codable {
    var name: String
    var inbound: [String]
    var outbound: [String]
    init() {
        self.name = ""
        self.inbound = []
        self.outbound = []
    }
    init(name: String, inbound: [String], outbound: [String]) {
        self.name = name
        self.inbound = inbound
        self.outbound = outbound
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func node_to_string(_ n: Node) -> String {
        return ((((((("<node=" + n.name) + " inbound=") + n.inbound) + " outbound=") + n.outbound) + ">") as! String)
    }
    func page_rank(_ nodes: [Node], _ limit: Int, _ d: Double) -> [String: Double] {
        var ranks: [String: Double] = ([:] as! [String: Double])
        for n in nodes {
            ranks = _set(ranks, String(describing: n.name), 1.0)
        }
        var outbounds: [String: Double] = ([:] as! [String: Double])
        for n in nodes {
            outbounds = _set(outbounds, String(describing: n.name), Double((1.0 * Double(_int(((n.outbound).count))))))
        }
        var i = 0
        while (i < limit) {
            print(_p((("======= Iteration " + _p((i &+ 1))) + " =======")))
            for n in nodes {
                var sum_val = 0.0
                for ib in n.inbound {
                    sum_val = Double((sum_val + (Double((ranks[String(String(describing: ib))] ?? 0.0)) / Double((outbounds[String(String(describing: ib))] ?? 0.0)))))
                }
                ranks = _set(ranks, String(describing: n.name), Double((Double((1.0 - d)) + (d * sum_val))))
            }
            print(_p(String(describing: ranks)))
            i = _int((i &+ 1))
        }
        return ranks
    }
    let names: [String] = ({
        var _arr: [String] = []
        _arr = _append(_arr, "A")
        _arr = _append(_arr, "B")
        _arr = _append(_arr, "C")
        return _arr
    }() as! [String])
    let graph: [[Int]] = ({
        var _arr: [[Int]] = []
        _arr = _append(_arr, ({
            var _arr: [Int] = []
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 1)
            _arr = _append(_arr, 1)
            return _arr
        }() as! [Int]))
        _arr = _append(_arr, ({
            var _arr: [Int] = []
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 1)
            return _arr
        }() as! [Int]))
        _arr = _append(_arr, ({
            var _arr: [Int] = []
            _arr = _append(_arr, 1)
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 0)
            return _arr
        }() as! [Int]))
        return _arr
    }() as! [[Int]])
    var nodes: [Node] = ([] as! [Node])
    for name in names {
        nodes = (_append(nodes, Node(name: String(describing: name), inbound: ([] as! [String]), outbound: ([] as! [String]))) as! [Node])
    }
    var ri = 0
    while (ri < _int(((graph).count))) {
        var row = (_idx(graph, ri) as! [Int])
        var ci = 0
        while (ci < _int(((row).count))) {
            if ((_idx(row, ci) as? Int ?? 0) == 1) {
                var n_in = (_idx(nodes, ci) as! Node)
                n_in.inbound = (_append(n_in.inbound, (_idx(names, ri) as! String)) as! [String])
                nodes = _set(nodes, ci, (n_in as! Node))
                var n_out = (_idx(nodes, ri) as! Node)
                n_out.outbound = (_append(n_out.outbound, (_idx(names, ci) as! String)) as! [String])
                nodes = _set(nodes, ri, (n_out as! Node))
            }
            ci = _int((ci &+ 1))
        }
        ri = _int((ri &+ 1))
    }
    print(_p("======= Nodes ======="))
    for n in nodes {
        print(_p(String(describing: n)))
    }
    _ = (page_rank((nodes as! [Node]), 3, 0.85) as! [String: Double])
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
