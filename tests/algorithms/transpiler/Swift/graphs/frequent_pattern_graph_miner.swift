// Generated by Mochi transpiler v0.10.65 on 2025-08-14 17:13:49 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
struct NodesData: Codable {
    var map: [String: [String]]
    var keys: [String]
    init() {
        self.map = [:]
        self.keys = []
    }
    init(map: [String: [String]], keys: [String]) {
        self.map = map
        self.keys = keys
    }
}
struct ClusterData: Codable {
    var clusters: [Int: [String]]
    var weights: [Int]
    init() {
        self.clusters = [:]
        self.weights = []
    }
    init(clusters: [Int: [String]], weights: [Int]) {
        self.clusters = clusters
        self.weights = weights
    }
}
struct GraphData: Codable {
    var edges: [String: [String]]
    var keys: [String]
    init() {
        self.edges = [:]
        self.keys = []
    }
    init(edges: [String: [String]], keys: [String]) {
        self.edges = edges
        self.keys = keys
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let EDGE_ARRAY: [[[String]]] = ({
        var _arr: [[[String]]] = []
        _arr = _append(_arr, ({
            var _arr: [[String]] = []
            _arr = _append(_arr, ({
                var _arr: [String] = []
                _arr = _append(_arr, "ab")
                _arr = _append(_arr, "e1")
                return _arr
            }() as! [String]))
            _arr = _append(_arr, ({
                var _arr: [String] = []
                _arr = _append(_arr, "ac")
                _arr = _append(_arr, "e3")
                return _arr
            }() as! [String]))
            _arr = _append(_arr, ({
                var _arr: [String] = []
                _arr = _append(_arr, "ad")
                _arr = _append(_arr, "e5")
                return _arr
            }() as! [String]))
            _arr = _append(_arr, ({
                var _arr: [String] = []
                _arr = _append(_arr, "bc")
                _arr = _append(_arr, "e4")
                return _arr
            }() as! [String]))
            _arr = _append(_arr, ({
                var _arr: [String] = []
                _arr = _append(_arr, "bd")
                _arr = _append(_arr, "e2")
                return _arr
            }() as! [String]))
            _arr = _append(_arr, ({
                var _arr: [String] = []
                _arr = _append(_arr, "be")
                _arr = _append(_arr, "e6")
                return _arr
            }() as! [String]))
            _arr = _append(_arr, ({
                var _arr: [String] = []
                _arr = _append(_arr, "bh")
                _arr = _append(_arr, "e12")
                return _arr
            }() as! [String]))
            _arr = _append(_arr, ({
                var _arr: [String] = []
                _arr = _append(_arr, "cd")
                _arr = _append(_arr, "e2")
                return _arr
            }() as! [String]))
            _arr = _append(_arr, ({
                var _arr: [String] = []
                _arr = _append(_arr, "ce")
                _arr = _append(_arr, "e4")
                return _arr
            }() as! [String]))
            _arr = _append(_arr, ({
                var _arr: [String] = []
                _arr = _append(_arr, "de")
                _arr = _append(_arr, "e1")
                return _arr
            }() as! [String]))
            _arr = _append(_arr, ({
                var _arr: [String] = []
                _arr = _append(_arr, "df")
                _arr = _append(_arr, "e8")
                return _arr
            }() as! [String]))
            _arr = _append(_arr, ({
                var _arr: [String] = []
                _arr = _append(_arr, "dg")
                _arr = _append(_arr, "e5")
                return _arr
            }() as! [String]))
            _arr = _append(_arr, ({
                var _arr: [String] = []
                _arr = _append(_arr, "dh")
                _arr = _append(_arr, "e10")
                return _arr
            }() as! [String]))
            _arr = _append(_arr, ({
                var _arr: [String] = []
                _arr = _append(_arr, "ef")
                _arr = _append(_arr, "e3")
                return _arr
            }() as! [String]))
            _arr = _append(_arr, ({
                var _arr: [String] = []
                _arr = _append(_arr, "eg")
                _arr = _append(_arr, "e2")
                return _arr
            }() as! [String]))
            _arr = _append(_arr, ({
                var _arr: [String] = []
                _arr = _append(_arr, "fg")
                _arr = _append(_arr, "e6")
                return _arr
            }() as! [String]))
            _arr = _append(_arr, ({
                var _arr: [String] = []
                _arr = _append(_arr, "gh")
                _arr = _append(_arr, "e6")
                return _arr
            }() as! [String]))
            _arr = _append(_arr, ({
                var _arr: [String] = []
                _arr = _append(_arr, "hi")
                _arr = _append(_arr, "e3")
                return _arr
            }() as! [String]))
            return _arr
        }() as! [[String]]))
        _arr = _append(_arr, ({
            var _arr: [[String]] = []
            _arr = _append(_arr, ({
                var _arr: [String] = []
                _arr = _append(_arr, "ab")
                _arr = _append(_arr, "e1")
                return _arr
            }() as! [String]))
            _arr = _append(_arr, ({
                var _arr: [String] = []
                _arr = _append(_arr, "ac")
                _arr = _append(_arr, "e3")
                return _arr
            }() as! [String]))
            _arr = _append(_arr, ({
                var _arr: [String] = []
                _arr = _append(_arr, "ad")
                _arr = _append(_arr, "e5")
                return _arr
            }() as! [String]))
            _arr = _append(_arr, ({
                var _arr: [String] = []
                _arr = _append(_arr, "bc")
                _arr = _append(_arr, "e4")
                return _arr
            }() as! [String]))
            _arr = _append(_arr, ({
                var _arr: [String] = []
                _arr = _append(_arr, "bd")
                _arr = _append(_arr, "e2")
                return _arr
            }() as! [String]))
            _arr = _append(_arr, ({
                var _arr: [String] = []
                _arr = _append(_arr, "be")
                _arr = _append(_arr, "e6")
                return _arr
            }() as! [String]))
            _arr = _append(_arr, ({
                var _arr: [String] = []
                _arr = _append(_arr, "cd")
                _arr = _append(_arr, "e2")
                return _arr
            }() as! [String]))
            _arr = _append(_arr, ({
                var _arr: [String] = []
                _arr = _append(_arr, "de")
                _arr = _append(_arr, "e1")
                return _arr
            }() as! [String]))
            _arr = _append(_arr, ({
                var _arr: [String] = []
                _arr = _append(_arr, "df")
                _arr = _append(_arr, "e8")
                return _arr
            }() as! [String]))
            _arr = _append(_arr, ({
                var _arr: [String] = []
                _arr = _append(_arr, "ef")
                _arr = _append(_arr, "e3")
                return _arr
            }() as! [String]))
            _arr = _append(_arr, ({
                var _arr: [String] = []
                _arr = _append(_arr, "eg")
                _arr = _append(_arr, "e2")
                return _arr
            }() as! [String]))
            _arr = _append(_arr, ({
                var _arr: [String] = []
                _arr = _append(_arr, "fg")
                _arr = _append(_arr, "e6")
                return _arr
            }() as! [String]))
            return _arr
        }() as! [[String]]))
        _arr = _append(_arr, ({
            var _arr: [[String]] = []
            _arr = _append(_arr, ({
                var _arr: [String] = []
                _arr = _append(_arr, "ab")
                _arr = _append(_arr, "e1")
                return _arr
            }() as! [String]))
            _arr = _append(_arr, ({
                var _arr: [String] = []
                _arr = _append(_arr, "ac")
                _arr = _append(_arr, "e3")
                return _arr
            }() as! [String]))
            _arr = _append(_arr, ({
                var _arr: [String] = []
                _arr = _append(_arr, "bc")
                _arr = _append(_arr, "e4")
                return _arr
            }() as! [String]))
            _arr = _append(_arr, ({
                var _arr: [String] = []
                _arr = _append(_arr, "bd")
                _arr = _append(_arr, "e2")
                return _arr
            }() as! [String]))
            _arr = _append(_arr, ({
                var _arr: [String] = []
                _arr = _append(_arr, "de")
                _arr = _append(_arr, "e1")
                return _arr
            }() as! [String]))
            _arr = _append(_arr, ({
                var _arr: [String] = []
                _arr = _append(_arr, "df")
                _arr = _append(_arr, "e8")
                return _arr
            }() as! [String]))
            _arr = _append(_arr, ({
                var _arr: [String] = []
                _arr = _append(_arr, "dg")
                _arr = _append(_arr, "e5")
                return _arr
            }() as! [String]))
            _arr = _append(_arr, ({
                var _arr: [String] = []
                _arr = _append(_arr, "ef")
                _arr = _append(_arr, "e3")
                return _arr
            }() as! [String]))
            _arr = _append(_arr, ({
                var _arr: [String] = []
                _arr = _append(_arr, "eg")
                _arr = _append(_arr, "e2")
                return _arr
            }() as! [String]))
            _arr = _append(_arr, ({
                var _arr: [String] = []
                _arr = _append(_arr, "eh")
                _arr = _append(_arr, "e12")
                return _arr
            }() as! [String]))
            _arr = _append(_arr, ({
                var _arr: [String] = []
                _arr = _append(_arr, "fg")
                _arr = _append(_arr, "e6")
                return _arr
            }() as! [String]))
            _arr = _append(_arr, ({
                var _arr: [String] = []
                _arr = _append(_arr, "fh")
                _arr = _append(_arr, "e10")
                return _arr
            }() as! [String]))
            _arr = _append(_arr, ({
                var _arr: [String] = []
                _arr = _append(_arr, "gh")
                _arr = _append(_arr, "e6")
                return _arr
            }() as! [String]))
            return _arr
        }() as! [[String]]))
        _arr = _append(_arr, ({
            var _arr: [[String]] = []
            _arr = _append(_arr, ({
                var _arr: [String] = []
                _arr = _append(_arr, "ab")
                _arr = _append(_arr, "e1")
                return _arr
            }() as! [String]))
            _arr = _append(_arr, ({
                var _arr: [String] = []
                _arr = _append(_arr, "ac")
                _arr = _append(_arr, "e3")
                return _arr
            }() as! [String]))
            _arr = _append(_arr, ({
                var _arr: [String] = []
                _arr = _append(_arr, "bc")
                _arr = _append(_arr, "e4")
                return _arr
            }() as! [String]))
            _arr = _append(_arr, ({
                var _arr: [String] = []
                _arr = _append(_arr, "bd")
                _arr = _append(_arr, "e2")
                return _arr
            }() as! [String]))
            _arr = _append(_arr, ({
                var _arr: [String] = []
                _arr = _append(_arr, "bh")
                _arr = _append(_arr, "e12")
                return _arr
            }() as! [String]))
            _arr = _append(_arr, ({
                var _arr: [String] = []
                _arr = _append(_arr, "cd")
                _arr = _append(_arr, "e2")
                return _arr
            }() as! [String]))
            _arr = _append(_arr, ({
                var _arr: [String] = []
                _arr = _append(_arr, "df")
                _arr = _append(_arr, "e8")
                return _arr
            }() as! [String]))
            _arr = _append(_arr, ({
                var _arr: [String] = []
                _arr = _append(_arr, "dh")
                _arr = _append(_arr, "e10")
                return _arr
            }() as! [String]))
            return _arr
        }() as! [[String]]))
        _arr = _append(_arr, ({
            var _arr: [[String]] = []
            _arr = _append(_arr, ({
                var _arr: [String] = []
                _arr = _append(_arr, "ab")
                _arr = _append(_arr, "e1")
                return _arr
            }() as! [String]))
            _arr = _append(_arr, ({
                var _arr: [String] = []
                _arr = _append(_arr, "ac")
                _arr = _append(_arr, "e3")
                return _arr
            }() as! [String]))
            _arr = _append(_arr, ({
                var _arr: [String] = []
                _arr = _append(_arr, "ad")
                _arr = _append(_arr, "e5")
                return _arr
            }() as! [String]))
            _arr = _append(_arr, ({
                var _arr: [String] = []
                _arr = _append(_arr, "bc")
                _arr = _append(_arr, "e4")
                return _arr
            }() as! [String]))
            _arr = _append(_arr, ({
                var _arr: [String] = []
                _arr = _append(_arr, "bd")
                _arr = _append(_arr, "e2")
                return _arr
            }() as! [String]))
            _arr = _append(_arr, ({
                var _arr: [String] = []
                _arr = _append(_arr, "cd")
                _arr = _append(_arr, "e2")
                return _arr
            }() as! [String]))
            _arr = _append(_arr, ({
                var _arr: [String] = []
                _arr = _append(_arr, "ce")
                _arr = _append(_arr, "e4")
                return _arr
            }() as! [String]))
            _arr = _append(_arr, ({
                var _arr: [String] = []
                _arr = _append(_arr, "de")
                _arr = _append(_arr, "e1")
                return _arr
            }() as! [String]))
            _arr = _append(_arr, ({
                var _arr: [String] = []
                _arr = _append(_arr, "df")
                _arr = _append(_arr, "e8")
                return _arr
            }() as! [String]))
            _arr = _append(_arr, ({
                var _arr: [String] = []
                _arr = _append(_arr, "dg")
                _arr = _append(_arr, "e5")
                return _arr
            }() as! [String]))
            _arr = _append(_arr, ({
                var _arr: [String] = []
                _arr = _append(_arr, "ef")
                _arr = _append(_arr, "e3")
                return _arr
            }() as! [String]))
            _arr = _append(_arr, ({
                var _arr: [String] = []
                _arr = _append(_arr, "eg")
                _arr = _append(_arr, "e2")
                return _arr
            }() as! [String]))
            _arr = _append(_arr, ({
                var _arr: [String] = []
                _arr = _append(_arr, "fg")
                _arr = _append(_arr, "e6")
                return _arr
            }() as! [String]))
            return _arr
        }() as! [[String]]))
        return _arr
    }() as! [[[String]]])
    func contains(_ lst: [String], _ item: String) -> Bool {
        for v in lst {
            if (v == item) {
                return true
            }
        }
        return false
    }
    func get_distinct_edge(_ edge_array: [[[String]]]) -> [String] {
        var distinct: [String] = ([] as! [String])
        for row in edge_array {
            for item in row {
                let e = (_idx(item, 0) as! String)
                if (!contains((distinct as! [String]), (e as! String))) {
                    distinct = (_append(distinct, e) as! [String])
                }
            }
        }
        return distinct
    }
    func get_bitcode(_ edge_array: [[[String]]], _ de: String) -> String {
        var bitcode = ""
        var i = 0
        while (i < _int(((edge_array).count))) {
            var found = false
            for item in (_idx(edge_array, i) as! [[String]]) {
                if ((_idx(item, 0) as! String) == de) {
                    found = true
                    break
                }
            }
            if found {
                bitcode = ((bitcode + "1") as! String)
            } else {
                bitcode = ((bitcode + "0") as! String)
            }
            i = _int((i &+ 1))
        }
        return bitcode
    }
    func count_ones(_ s: String) -> Int {
        var c = 0
        var i = 0
        while (i < _int(((s).count))) {
            if (String(describing: String(Array(String(describing: (s as! String)))[i..<(i &+ 1)])) == "1") {
                c = _int((c &+ 1))
            }
            i = _int((i &+ 1))
        }
        return c
    }
    func get_frequency_table(_ edge_array: [[[String]]]) -> [[String: String]] {
        let distinct: [String] = (get_distinct_edge((edge_array as! [[[String]]])) as! [String])
        var table: [[String: String]] = ([] as! [[String: String]])
        for e in distinct {
            let bit = String(describing: get_bitcode((edge_array as! [[[String]]]), (e as! String)))
            let cnt = _int(count_ones((bit as! String)))
            var entry: [String: String] = (["edge": e, "count": _p(cnt), "bit": bit] as! [String: String])
            table = (_append(table, entry) as! [[String: String]])
        }
        var i = 0
        while (i < _int(((table).count))) {
            var max_i = i
            var j = (i &+ 1)
            while (j < _int(((table).count))) {
                if (String(describing: _int(((_idx(table, j)![String("count")] ?? "") as! String))) > String(describing: _int(((_idx(table, max_i)![String("count")] ?? "") as! String)))
                ) {
                    max_i = Int(j)
                }
                j = _int((j &+ 1))
            }
            let tmp: [String: String] = (_idx(table, i) as! [String: String])
            table = _set(table, i, (_idx(table, max_i) as! [String: String]))
            table = _set(table, max_i, (tmp as! [String: String]))
            i = _int((i &+ 1))
        }
        return table
    }
    func get_nodes(_ freq_table: [[String: String]]) -> NodesData {
        var nodes: [String: [String]] = ([:] as! [String: [String]])
        var keys: [String] = ([] as! [String])
        for _item in freq_table as! [[String: Any]] {
            let f = _item as! [String: Any]
            let code = ((f[String("bit")] ?? "") as! String)
            let edge = ((f[String("edge")] ?? "") as! String)
            if (nodes[code] != nil) {
                nodes = _set(nodes, String(describing: code), (_append(((nodes[String(String(describing: code))] ?? []) as! [String]), edge) as! [String]))
            } else {
                nodes = _set(nodes, String(describing: code), ({
                    var _arr: [String] = []
                    _arr = _append(_arr, edge)
                    return _arr
                }() as! [String]))
                keys = (_append(keys, code) as! [String])
            }
        }
        return NodesData(map: (nodes as! [String: [String]]), keys: (keys as! [String]))
    }
    func get_cluster(_ nodes: NodesData) -> ClusterData {
        var clusters: [Int: [String]] = ([:] as! [Int: [String]])
        var weights: [Int] = ([] as! [Int])
        var i = 0
        while (i < _int(((nodes.keys).count))) {
            let code = (_idx(nodes.keys, i) as! String)
            let wt = _int(count_ones((code as! String)))
            if (clusters[wt] != nil) {
                clusters = _set(clusters, wt, (_append(((clusters[wt] ?? []) as! [String]), code) as! [String]))
            } else {
                clusters = _set(clusters, wt, ({
                    var _arr: [String] = []
                    _arr = _append(_arr, code)
                    return _arr
                }() as! [String]))
                weights = (_append(weights, wt) as! [Int])
            }
            i = _int((i &+ 1))
        }
        return ClusterData(clusters: (clusters as! [Int: [String]]), weights: (weights as! [Int]))
    }
    func get_support(_ clusters: ClusterData) -> [Int] {
        var sup: [Int] = ([] as! [Int])
        var i = 0
        while (i < _int(((clusters.weights).count))) {
            let w = (_idx(clusters.weights, i) as? Int ?? 0)
            sup = (_append(sup, ((w &* 100) / _int(((clusters.weights).count)))) as! [Int])
            i = _int((i &+ 1))
        }
        return sup
    }
    func contains_bits(_ a: String, _ b: String) -> Bool {
        var i = 0
        while (i < _int(((a).count))) {
            let c1 = String(describing: String(Array(String(describing: (a as! String)))[i..<(i &+ 1)]))
            let c2 = String(describing: String(Array(String(describing: (b as! String)))[i..<(i &+ 1)]))
            if ((c1 == "1") && (c2 != "1")) {
                return false
            }
            i = _int((i &+ 1))
        }
        return true
    }
    func max_cluster_key(_ clusters: ClusterData) -> Int {
        var m = 0
        var i = 0
        while (i < _int(((clusters.weights).count))) {
            let w = (_idx(clusters.weights, i) as? Int ?? 0)
            if (w > m) {
                m = Int(w)
            }
            i = _int((i &+ 1))
        }
        return m
    }
    func get_cluster_codes(_ clusters: ClusterData, _ wt: Int) -> [String] {
        if (clusters.clusters[wt] != nil) {
            return ((clusters.clusters[wt] ?? []) as! [String])
        }
        return ([] as! [String])
    }
    func create_edge(_ nodes: NodesData, _ graph: inout [String: [String]], _ gkeys: [String], _ clusters: ClusterData, _ c1: Int, _ maxk: Int) -> [String] {
        var keys = gkeys
        let codes1: [String] = (get_cluster_codes((clusters as! ClusterData), c1) as! [String])
        var idx1 = 0
        while (idx1 < _int(((codes1).count))) {
            let i_code = (_idx(codes1, idx1) as! String)
            var count = 0
            var c2 = (c1 &+ 1)
            while (c2 <= maxk) {
                let codes2: [String] = (get_cluster_codes((clusters as! ClusterData), c2) as! [String])
                var j = 0
                while (j < _int(((codes2).count))) {
                    let j_code = (_idx(codes2, j) as! String)
                    if contains_bits((i_code as! String), (j_code as! String)) {
                        if (graph[i_code] != nil) {
                            graph = _set(graph, String(describing: i_code), (_append(((graph[String(String(describing: i_code))] ?? []) as! [String]), j_code) as! [String]))
                        } else {
                            graph = _set(graph, String(describing: i_code), ({
                                var _arr: [String] = []
                                _arr = _append(_arr, j_code)
                                return _arr
                            }() as! [String]))
                            if (!contains((keys as! [String]), (i_code as! String))) {
                                keys = (_append(keys, i_code) as! [String])
                            }
                        }
                        if (!contains((keys as! [String]), (j_code as! String))) {
                            keys = (_append(keys, j_code) as! [String])
                        }
                        count = _int((count &+ 1))
                    }
                    j = _int((j &+ 1))
                }
                if (count == 0) {
                    c2 = _int((c2 &+ 1))
                } else {
                    break
                }
            }
            idx1 = _int((idx1 &+ 1))
        }
        return keys
    }
    func construct_graph(_ clusters: ClusterData, _ nodes: NodesData) -> GraphData {
        let maxk = _int(max_cluster_key((clusters as! ClusterData)))
        let top_codes: [String] = (get_cluster_codes((clusters as! ClusterData), maxk) as! [String])
        var graph: [String: [String]] = ([:] as! [String: [String]])
        var keys: [String] = ({
            var _arr: [String] = []
            _arr = _append(_arr, "Header")
            return _arr
        }() as! [String])
        graph = _set(graph, "Header", ([] as! [String]))
        var i = 0
        while (i < _int(((top_codes).count))) {
            let code = (_idx(top_codes, i) as! String)
            graph = _set(graph, "Header", (_append(((graph[String("Header")] ?? []) as! [String]), code) as! [String]))
            graph = _set(graph, String(describing: code), ({
                var _arr: [String] = []
                _arr = _append(_arr, "Header")
                return _arr
            }() as! [String]))
            keys = (_append(keys, code) as! [String])
            i = _int((i &+ 1))
        }
        var c = 1
        while (c < maxk) {
            keys = (create_edge((nodes as! NodesData), &graph, (keys as! [String]), (clusters as! ClusterData), c, maxk) as! [String])
            c = _int((c &+ 1))
        }
        return GraphData(edges: (graph as! [String: [String]]), keys: (keys as! [String]))
    }
    var paths: [[String]] = ([] as! [[String]])
    func copy_list(_ lst: [String]) -> [String] {
        var n: [String] = ([] as! [String])
        for v in lst {
            n = (_append(n, v) as! [String])
        }
        return n
    }
    func my_dfs(_ graph: [String: [String]], _ start: String, _ end: String, _ path: [String]) -> Void {
        var new_path = (copy_list((path as! [String])) as! [String])
        new_path = (_append(new_path, start) as! [String])
        if (start == end) {
            paths = (_append(paths, new_path) as! [[String]])
            return
        }
        for node in ((graph[String(String(describing: start))] ?? []) as! [String]) {
            var seen = false
            for p in new_path {
                if (p == node) {
                    seen = true
                }
            }
            if (!seen) {
                _ = my_dfs((graph as! [String: [String]]), (node as! String), (end as! String), (new_path as! [String]))
            }
        }
    }
    func find_freq_subgraph_given_support(_ s: Int, _ clusters: ClusterData, _ graph: GraphData) -> Void {
        let k = ((s &* _int(((clusters.weights).count))) / 100)
        let codes: [String] = (get_cluster_codes((clusters as! ClusterData), k) as! [String])
        var i = 0
        while (i < _int(((codes).count))) {
            _ = my_dfs((graph.edges as! [String: [String]]), (_idx(codes, i) as! String), "Header", ([] as! [String]))
            i = _int((i &+ 1))
        }
    }
    func node_edges(_ nodes: NodesData, _ code: String) -> [String] {
        return ((nodes.map[String(String(describing: code))] ?? []) as! [String])
    }
    func freq_subgraphs_edge_list(_ paths: [[String]], _ nodes: NodesData) -> [[[String]]] {
        var freq_sub_el: [[[String]]] = ([] as! [[[String]]])
        for path in paths {
            var el: [[String]] = ([] as! [[String]])
            var j = 0
            while (j < (_int(((path).count)) &- 1)) {
                let code = (_idx(path, j) as! String)
                let edge_list: [String] = (node_edges((nodes as! NodesData), (code as! String)) as! [String])
                var e = 0
                while (e < _int(((edge_list).count))) {
                    let edge = (_idx(edge_list, e) as! String)
                    let a = String(describing: String(Array(String(describing: (edge as! String)))[0..<1]))
                    let b = String(describing: String(Array(String(describing: (edge as! String)))[1..<2]))
                    el = (_append(el, ({
                        var _arr: [String] = []
                        _arr = _append(_arr, a)
                        _arr = _append(_arr, b)
                        return _arr
                    }() as! [String])) as! [[String]])
                    e = _int((e &+ 1))
                }
                j = _int((j &+ 1))
            }
            freq_sub_el = (_append(freq_sub_el, el) as! [[[String]]])
        }
        return freq_sub_el
    }
    func print_all(_ nodes: NodesData, _ support: [Int], _ clusters: ClusterData, _ graph: GraphData, _ freq_subgraph_edge_list: [[[String]]]) -> Void {
        print(_p("\nNodes\n"))
        var i = 0
        while (i < _int(((nodes.keys).count))) {
            let code = (_idx(nodes.keys, i) as! String)
            print(_p(code))
            print(_p("[" + ((nodes.map[String(String(describing: code))] ?? []) as! [String]).map{ if let s = $0 as? String { "\"" + s.replacingOccurrences(of: "\"", with: "\\\"") + "\"" } else { _p($0) } }.joined(separator: ", ") + "]"))
            i = _int((i &+ 1))
        }
        print(_p("\nSupport\n"))
        print(_p("[" + support.map{ if let s = $0 as? String { "\"" + s.replacingOccurrences(of: "\"", with: "\\\"") + "\"" } else { _p($0) } }.joined(separator: ", ") + "]"))
        print(_p("\nCluster\n"))
        var j = 0
        while (j < _int(((clusters.weights).count))) {
            let w = (_idx(clusters.weights, j) as? Int ?? 0)
            print(_p(((_p(w) + ":") + "[" + ((clusters.clusters[w] ?? []) as! [String]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]")))
            j = _int((j &+ 1))
        }
        print(_p("\nGraph\n"))
        var k = 0
        while (k < _int(((graph.keys).count))) {
            let key = (_idx(graph.keys, k) as! String)
            print(_p(key))
            print(_p("[" + ((graph.edges[String(String(describing: key))] ?? []) as! [String]).map{ if let s = $0 as? String { "\"" + s.replacingOccurrences(of: "\"", with: "\\\"") + "\"" } else { _p($0) } }.joined(separator: ", ") + "]"))
            k = _int((k &+ 1))
        }
        print(_p("\nEdge List of Frequent subgraphs\n"))
        for el in freq_subgraph_edge_list {
            print(_p("[" + el.map{ if let s = $0 as? String { "\"" + s.replacingOccurrences(of: "\"", with: "\\\"") + "\"" } else { _p($0) } }.joined(separator: ", ") + "]"))
        }
    }
    func main() {
        let frequency_table: [[String: String]] = (get_frequency_table((EDGE_ARRAY as! [[[String]]])) as! [[String: String]])
        let nodes = get_nodes((frequency_table as! [[String: String]]))
        let clusters = get_cluster((nodes as! NodesData))
        let support: [Int] = (get_support((clusters as! ClusterData)) as! [Int])
        let graph = construct_graph((clusters as! ClusterData), (nodes as! NodesData))
        _ = find_freq_subgraph_given_support(60, (clusters as! ClusterData), (graph as! GraphData))
        let freq_subgraph_edge_list: [[[String]]] = (freq_subgraphs_edge_list((paths as! [[String]]), (nodes as! NodesData)) as! [[[String]]])
        _ = print_all((nodes as! NodesData), (support as! [Int]), (clusters as! ClusterData), (graph as! GraphData), (freq_subgraph_edge_list as! [[[String]]]))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
