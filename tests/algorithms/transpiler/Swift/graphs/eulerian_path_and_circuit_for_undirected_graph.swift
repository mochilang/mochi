// Generated by Mochi transpiler v0.10.65 on 2025-08-14 15:57:20 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
struct CheckResult: Codable {
    var status: Int
    var odd_node: Int
    init() {
        self.status = 0
        self.odd_node = 0
    }
    init(status: Int, odd_node: Int) {
        self.status = status
        self.odd_node = odd_node
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func make_matrix(_ n: Int) -> [[Bool]] {
        var matrix: [[Bool]] = ([] as! [[Bool]])
        var i = 0
        while (i <= n) {
            var row: [Bool] = ([] as! [Bool])
            var j = 0
            while (j <= n) {
                row = (_append(row, false) as! [Bool])
                j = _int((j &+ 1))
            }
            matrix = (_append(matrix, row) as! [[Bool]])
            i = _int((i &+ 1))
        }
        return matrix
    }
    func dfs(_ u: Int, _ graph: [Int: [Int]], _ visited_edge: inout [[Bool]], _ path: inout [Int]) -> [Int] {
        path = (_append(path, u) as! [Int])
        if (graph[u] != nil) {
            let neighbors: [Int] = (graph[u] ?? [] as! [Int])
            var i = 0
            while (i < _int(((neighbors).count))) {
                let v = (_idx(neighbors, i) as? Int ?? 0)
                if ((_idx(_idx(visited_edge, u)!, v) as! Bool) == false) {
                    var _tmp3 = (_idx(visited_edge, u) as! [Bool])
                    _tmp3 = _set(_tmp3, v, true)
                    visited_edge = _set(visited_edge, u, (_tmp3 as! [Bool]))
                    var _tmp4 = (_idx(visited_edge, v) as! [Bool])
                    _tmp4 = _set(_tmp4, u, true)
                    visited_edge = _set(visited_edge, v, (_tmp4 as! [Bool]))
                    path = (dfs(v, (graph as! [Int: [Int]]), &visited_edge, &path) as! [Int])
                }
                i = _int((i &+ 1))
            }
        }
        return path
    }
    func check_circuit_or_path(_ graph: [Int: [Int]], _ max_node: Int) -> CheckResult {
        var odd_degree_nodes = 0
        var odd_node = -1
        var i = 0
        while (i < max_node) {
            if (graph[i] != nil) {
                if (((_int((((graph[i] ?? [] as! [Int])).count)) % 2 + 2) % 2) == 1) {
                    odd_degree_nodes = _int((odd_degree_nodes &+ 1))
                    odd_node = Int(i)
                }
            }
            i = _int((i &+ 1))
        }
        if (odd_degree_nodes == 0) {
            return CheckResult(status: 1, odd_node: Int(odd_node))
        }
        if (odd_degree_nodes == 2) {
            return CheckResult(status: 2, odd_node: Int(odd_node))
        }
        return CheckResult(status: 3, odd_node: Int(odd_node))
    }
    func check_euler(_ graph: [Int: [Int]], _ max_node: Int) {
        var visited_edge = (make_matrix(max_node) as! [[Bool]])
        let res = check_circuit_or_path((graph as! [Int: [Int]]), max_node)
        if (res.status == 3) {
            print(_p("graph is not Eulerian"))
            print(_p("no path"))
            return
        }
        var start_node = 1
        if (res.status == 2) {
            start_node = _int(res.odd_node)
            print(_p("graph has a Euler path"))
        }
        if (res.status == 1) {
            print(_p("graph has a Euler cycle"))
        }
        let path: [Int] = ({ () -> Any in
        var _tmp3: [Int] = []
        return dfs(start_node, (graph as! [Int: [Int]]), &visited_edge, &_tmp3)
    }() as! [Int])
    print(_p("[" + path.map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
}
let g1: [Int: [Int]] = ([1: ({
    var _arr: [Int] = []
    _arr = _append(_arr, 2)
    _arr = _append(_arr, 3)
    _arr = _append(_arr, 4)
    return _arr
}() as! [Int]), 2: ({
    var _arr: [Int] = []
    _arr = _append(_arr, 1)
    _arr = _append(_arr, 3)
    return _arr
}() as! [Int]), 3: ({
    var _arr: [Int] = []
    _arr = _append(_arr, 1)
    _arr = _append(_arr, 2)
    return _arr
}() as! [Int]), 4: ({
    var _arr: [Int] = []
    _arr = _append(_arr, 1)
    _arr = _append(_arr, 5)
    return _arr
}() as! [Int]), 5: ({
    var _arr: [Int] = []
    _arr = _append(_arr, 4)
    return _arr
}() as! [Int])] as! [Int: [Int]])
let g2: [Int: [Int]] = ([1: ({
    var _arr: [Int] = []
    _arr = _append(_arr, 2)
    _arr = _append(_arr, 3)
    _arr = _append(_arr, 4)
    _arr = _append(_arr, 5)
    return _arr
}() as! [Int]), 2: ({
    var _arr: [Int] = []
    _arr = _append(_arr, 1)
    _arr = _append(_arr, 3)
    return _arr
}() as! [Int]), 3: ({
    var _arr: [Int] = []
    _arr = _append(_arr, 1)
    _arr = _append(_arr, 2)
    return _arr
}() as! [Int]), 4: ({
    var _arr: [Int] = []
    _arr = _append(_arr, 1)
    _arr = _append(_arr, 5)
    return _arr
}() as! [Int]), 5: ({
    var _arr: [Int] = []
    _arr = _append(_arr, 1)
    _arr = _append(_arr, 4)
    return _arr
}() as! [Int])] as! [Int: [Int]])
let g3: [Int: [Int]] = ([1: ({
    var _arr: [Int] = []
    _arr = _append(_arr, 2)
    _arr = _append(_arr, 3)
    _arr = _append(_arr, 4)
    return _arr
}() as! [Int]), 2: ({
    var _arr: [Int] = []
    _arr = _append(_arr, 1)
    _arr = _append(_arr, 3)
    _arr = _append(_arr, 4)
    return _arr
}() as! [Int]), 3: ({
    var _arr: [Int] = []
    _arr = _append(_arr, 1)
    _arr = _append(_arr, 2)
    return _arr
}() as! [Int]), 4: ({
    var _arr: [Int] = []
    _arr = _append(_arr, 1)
    _arr = _append(_arr, 2)
    _arr = _append(_arr, 5)
    return _arr
}() as! [Int]), 5: ({
    var _arr: [Int] = []
    _arr = _append(_arr, 4)
    return _arr
}() as! [Int])] as! [Int: [Int]])
let g4: [Int: [Int]] = ([1: ({
    var _arr: [Int] = []
    _arr = _append(_arr, 2)
    _arr = _append(_arr, 3)
    return _arr
}() as! [Int]), 2: ({
    var _arr: [Int] = []
    _arr = _append(_arr, 1)
    _arr = _append(_arr, 3)
    return _arr
}() as! [Int]), 3: ({
    var _arr: [Int] = []
    _arr = _append(_arr, 1)
    _arr = _append(_arr, 2)
    return _arr
}() as! [Int])] as! [Int: [Int]])
let g5: [Int: [Int]] = (([1: [] as [Any], 2: [] as [Any]] as! [Int: [Any?]]) as! [Int: [Int]])
let max_node = 10
_ = check_euler((g1 as! [Int: [Int]]), max_node)
_ = check_euler((g2 as! [Int: [Int]]), max_node)
_ = check_euler((g3 as! [Int: [Int]]), max_node)
_ = check_euler((g4 as! [Int: [Int]]), max_node)
_ = check_euler((g5 as! [Int: [Int]]), max_node)
let _benchEnd = _now()
let _benchMemEnd = _mem()
print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
