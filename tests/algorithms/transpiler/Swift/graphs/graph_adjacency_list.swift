// Generated by Mochi transpiler v0.10.60 on 2025-08-08 10:44:15 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
struct Graph: Codable {
    var adj: [String: [String]]
    var directed: Bool
    init() {
        self.adj = [:]
        self.directed = false
    }
    init(adj: [String: [String]], directed: Bool) {
        self.adj = adj
        self.directed = directed
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func create_graph(_ vertices: [String], _ edges: [[String]], _ directed: Bool) -> Graph {
        var adj: [String: [String]] = ([:] as! [String: [String]])
        for v in vertices {
            adj = _set(adj, String(describing: v), ([] as! [String]))
        }
        for e in edges {
            let s = (e[0] as! String)
            let d = (e[1] as! String)
            if (!(adj[s] != nil)) {
                adj = _set(adj, String(describing: s), ([] as! [String]))
            }
            if (!(adj[d] != nil)) {
                adj = _set(adj, String(describing: d), ([] as! [String]))
            }
            adj = _set(adj, String(describing: s), (_append((adj[String(String(describing: s))] as! [String]), d) as! [String]))
            if (!directed) {
                adj = _set(adj, String(describing: d), (_append((adj[String(String(describing: d))] as! [String]), s) as! [String]))
            }
        }
        return Graph(adj: adj, directed: directed)
    }
    func add_vertex(_ graph: Graph, _ v: String) -> Graph {
        if (graph.adj[v] != nil) {
            _ = fatalError("vertex exists")
        }
        var adj: [String: [String]] = ([:] as! [String: [String]])
        for k in graph.adj.keys.sorted() {
            adj = _set(adj, String(describing: k), (graph.adj[String(String(describing: k))] as! [String]))
        }
        adj = _set(adj, String(describing: v), ([] as! [String]))
        return Graph(adj: adj, directed: graph.directed)
    }
    func remove_from_list(_ lst: [String], _ value: String) -> [String] {
        var res: [String] = ([] as! [String])
        var i: Int = 0
        while (i < _int(((lst).count))) {
            if ((lst[i] as! String) != value) {
                res = (_append(res, (lst[i] as! String)) as! [String])
            }
            i = _int((i &+ 1))
        }
        return res
    }
    func remove_key(_ m: [String: [String]], _ key: String) -> [String: [String]] {
        var res: [String: [String]] = ([:] as! [String: [String]])
        for k in m.keys.sorted() {
            if (k != key) {
                res = _set(res, String(describing: k), (m[String(String(describing: k))] as! [String]))
            }
        }
        return res
    }
    func add_edge(_ graph: Graph, _ s: String, _ d: String) -> Graph {
        if (((!(graph.adj[s] != nil)) as! Bool) || ((!(graph.adj[d] != nil)) as! Bool)) {
            _ = fatalError("vertex missing")
        }
        if contains_edge((graph as! Graph), (s as! String), (d as! String)) {
            _ = fatalError("edge exists")
        }
        var adj: [String: [String]] = ([:] as! [String: [String]])
        for k in graph.adj.keys.sorted() {
            adj = _set(adj, String(describing: k), (graph.adj[String(String(describing: k))] as! [String]))
        }
        var list_s: [String] = (adj[String(String(describing: s))] as! [String])
        list_s = (_append(list_s, d) as! [String])
        adj = _set(adj, String(describing: s), (list_s as! [String]))
        if (!graph.directed) {
            var list_d: [String] = (adj[String(String(describing: d))] as! [String])
            list_d = (_append(list_d, s) as! [String])
            adj = _set(adj, String(describing: d), (list_d as! [String]))
        }
        return Graph(adj: adj, directed: graph.directed)
    }
    func remove_edge(_ graph: Graph, _ s: String, _ d: String) -> Graph {
        if (((!(graph.adj[s] != nil)) as! Bool) || ((!(graph.adj[d] != nil)) as! Bool)) {
            _ = fatalError("vertex missing")
        }
        if (!contains_edge((graph as! Graph), (s as! String), (d as! String))) {
            _ = fatalError("edge missing")
        }
        var adj: [String: [String]] = ([:] as! [String: [String]])
        for k in graph.adj.keys.sorted() {
            adj = _set(adj, String(describing: k), (graph.adj[String(String(describing: k))] as! [String]))
        }
        adj = _set(adj, String(describing: s), (remove_from_list((adj[String(String(describing: s))] as! [String]), (d as! String)) as! [String]))
        if (!graph.directed) {
            adj = _set(adj, String(describing: d), (remove_from_list((adj[String(String(describing: d))] as! [String]), (s as! String)) as! [String]))
        }
        return Graph(adj: adj, directed: graph.directed)
    }
    func remove_vertex(_ graph: Graph, _ v: String) -> Graph {
        if (!(graph.adj[v] != nil)) {
            _ = fatalError("vertex missing")
        }
        var adj: [String: [String]] = ([:] as! [String: [String]])
        for k in graph.adj.keys.sorted() {
            if (k != v) {
                adj = _set(adj, String(describing: k), (remove_from_list((graph.adj[String(String(describing: k))] as! [String]), (v as! String)) as! [String]))
            }
        }
        return Graph(adj: adj, directed: graph.directed)
    }
    func contains_vertex(_ graph: Graph, _ v: String) -> Bool {
        return (graph.adj[v] != nil)
    }
    func contains_edge(_ graph: Graph, _ s: String, _ d: String) -> Bool {
        if (((!(graph.adj[s] != nil)) as! Bool) || ((!(graph.adj[d] != nil)) as! Bool)) {
            _ = fatalError("vertex missing")
        }
        for x in (graph.adj[String(String(describing: s))] as! [String]) {
            if (x == d) {
                return true
            }
        }
        return false
    }
    func clear_graph(_ graph: Graph) -> Graph {
        return Graph(adj: [:], directed: graph.directed)
    }
    func to_string(_ graph: Graph) -> String {
        return String(describing: graph.adj)
    }
    func main() {
        let vertices: [String] = (["1", "2", "3", "4"] as! [String])
        let edges: [[String]] = ([(["1", "2"] as! [String]), (["2", "3"] as! [String]), (["3", "4"] as! [String])] as! [[String]])
        var g: Graph = create_graph((vertices as! [String]), (edges as! [[String]]), false)
        print(_p(to_string((g as! Graph))))
        g = (add_vertex((g as! Graph), "5") as! Graph)
        g = (add_edge((g as! Graph), "4", "5") as! Graph)
        print(_p(_p(contains_edge((g as! Graph), "4", "5"))))
        g = (remove_edge((g as! Graph), "1", "2") as! Graph)
        g = (remove_vertex((g as! Graph), "3") as! Graph)
        print(_p(to_string((g as! Graph))))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
