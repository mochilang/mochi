// Generated by Mochi transpiler v0.10.59 on 2025-08-07 08:56:42 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func dfs_skip(_ graph: [[Int]], _ visited: inout [Bool], _ skip: Int, _ at: Int) -> Int {
        visited = _set(visited, at, true)
        var count: Int = 1
        for to in (graph[at] as! [Int]) {
            if (to == skip) {
                continue
            }
            if ((visited[to] as! Bool) == false) {
                count = Int((count &+ Int(dfs_skip((graph as! [[Int]]), &visited, skip, to))))
            }
        }
        return count
    }
    func articulation_points(_ graph: [[Int]]) -> [Int] {
        let n = Int(((graph).count))
        var result: [Int] = ([] as! [Int])
        var v: Int = 0
        while (v < n) {
            var visited: [Bool] = ([] as! [Bool])
            var i: Int = 0
            while (i < n) {
                visited = (_append(visited, false) as! [Bool])
                i = Int((i &+ 1))
            }
            var start: Int = 0
            while ((start == v) && (start < n)) {
                start = Int((start &+ 1))
            }
            let reach = Int(dfs_skip((graph as! [[Int]]), &visited, v, start))
            if (reach < (n &- 1)) {
                result = (_append(result, v) as! [Int])
                print(_p(v))
            }
            v = Int((v &+ 1))
        }
        return result
    }
    func main() {
        let graph: [[Int]] = ([([1, 2] as! [Int]), ([0, 2] as! [Int]), ([0, 1, 3, 5] as! [Int]), ([2, 4] as! [Int]), ([3] as! [Int]), ([2, 6, 8] as! [Int]), ([5, 7] as! [Int]), ([6, 8] as! [Int]), ([5, 7] as! [Int])] as! [[Int]])
        _ = (articulation_points((graph as! [[Int]])) as! [Int])
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
