// Generated by Mochi transpiler v0.10.65 on 2025-08-14 17:14:21 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func sort_edges(_ edges: [[Int]]) -> [[Int]] {
        var es = edges
        var i = 0
        while (i < _int(((es).count))) {
            var j = 0
            while (j < ((_int(((es).count)) &- i) &- 1)) {
                if ((_idx(_idx(es, j)!, 2) as? Int ?? 0) > (_idx(_idx(es, (j &+ 1))!, 2) as? Int ?? 0)) {
                    let temp: [Int] = (_idx(es, j) as! [Int])
                    es = _set(es, j, (_idx(es, (j &+ 1)) as! [Int]))
                    es = _set(es, (j &+ 1), (temp as! [Int]))
                }
                j = _int((j &+ 1))
            }
            i = _int((i &+ 1))
        }
        return es
    }
    func find_parent(_ parent: inout [Int], _ i: Int) -> Int {
        if ((_idx(parent, i) as? Int ?? 0) != i) {
            parent = _set(parent, i, _int(find_parent(&parent, (_idx(parent, i) as? Int ?? 0))))
        }
        return (_idx(parent, i) as? Int ?? 0)
    }
    func kruskal(_ num_nodes: Int, _ edges: [[Int]]) -> [[Int]] {
        var es = (sort_edges((edges as! [[Int]])) as! [[Int]])
        var parent: [Int] = ([] as! [Int])
        var i = 0
        while (i < num_nodes) {
            parent = (_append(parent, i) as! [Int])
            i = _int((i &+ 1))
        }
        var mst: [[Int]] = ([] as! [[Int]])
        var idx = 0
        while (idx < _int(((es).count))) {
            let e: [Int] = (_idx(es, idx) as! [Int])
            let pa = _int(find_parent(&parent, (_idx(e, 0) as? Int ?? 0)))
            let pb = _int(find_parent(&parent, (_idx(e, 1) as? Int ?? 0)))
            if (pa != pb) {
                mst = (_append(mst, e) as! [[Int]])
                parent = _set(parent, pa, Int(pb))
            }
            idx = _int((idx &+ 1))
        }
        return mst
    }
    func edges_to_string(_ es: [[Int]]) -> String {
        var s = "["
        var i = 0
        while (i < _int(((es).count))) {
            let e: [Int] = (_idx(es, i) as! [Int])
            s = ((((((((s + "(") + _p((_idx(e, 0) as? Int ?? 0))) + ", ") + _p((_idx(e, 1) as? Int ?? 0))) + ", ") + _p((_idx(e, 2) as? Int ?? 0))) + ")") as! String)
            if (i < (_int(((es).count)) &- 1)) {
                s = ((s + ", ") as! String)
            }
            i = _int((i &+ 1))
        }
        s = ((s + "]") as! String)
        return s
    }
    let edges1: [[Int]] = ({
        var _arr: [[Int]] = []
        _arr = _append(_arr, ({
            var _arr: [Int] = []
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 1)
            _arr = _append(_arr, 3)
            return _arr
        }() as! [Int]))
        _arr = _append(_arr, ({
            var _arr: [Int] = []
            _arr = _append(_arr, 1)
            _arr = _append(_arr, 2)
            _arr = _append(_arr, 5)
            return _arr
        }() as! [Int]))
        _arr = _append(_arr, ({
            var _arr: [Int] = []
            _arr = _append(_arr, 2)
            _arr = _append(_arr, 3)
            _arr = _append(_arr, 1)
            return _arr
        }() as! [Int]))
        return _arr
    }() as! [[Int]])
    print(_p(String(describing: edges_to_string((kruskal(4, (edges1 as! [[Int]])) as! [[Int]])))))
    let edges2: [[Int]] = ({
        var _arr: [[Int]] = []
        _arr = _append(_arr, ({
            var _arr: [Int] = []
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 1)
            _arr = _append(_arr, 3)
            return _arr
        }() as! [Int]))
        _arr = _append(_arr, ({
            var _arr: [Int] = []
            _arr = _append(_arr, 1)
            _arr = _append(_arr, 2)
            _arr = _append(_arr, 5)
            return _arr
        }() as! [Int]))
        _arr = _append(_arr, ({
            var _arr: [Int] = []
            _arr = _append(_arr, 2)
            _arr = _append(_arr, 3)
            _arr = _append(_arr, 1)
            return _arr
        }() as! [Int]))
        _arr = _append(_arr, ({
            var _arr: [Int] = []
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 2)
            _arr = _append(_arr, 1)
            return _arr
        }() as! [Int]))
        _arr = _append(_arr, ({
            var _arr: [Int] = []
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 3)
            _arr = _append(_arr, 2)
            return _arr
        }() as! [Int]))
        return _arr
    }() as! [[Int]])
    print(_p(String(describing: edges_to_string((kruskal(4, (edges2 as! [[Int]])) as! [[Int]])))))
    let edges3: [[Int]] = ({
        var _arr: [[Int]] = []
        _arr = _append(_arr, ({
            var _arr: [Int] = []
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 1)
            _arr = _append(_arr, 3)
            return _arr
        }() as! [Int]))
        _arr = _append(_arr, ({
            var _arr: [Int] = []
            _arr = _append(_arr, 1)
            _arr = _append(_arr, 2)
            _arr = _append(_arr, 5)
            return _arr
        }() as! [Int]))
        _arr = _append(_arr, ({
            var _arr: [Int] = []
            _arr = _append(_arr, 2)
            _arr = _append(_arr, 3)
            _arr = _append(_arr, 1)
            return _arr
        }() as! [Int]))
        _arr = _append(_arr, ({
            var _arr: [Int] = []
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 2)
            _arr = _append(_arr, 1)
            return _arr
        }() as! [Int]))
        _arr = _append(_arr, ({
            var _arr: [Int] = []
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 3)
            _arr = _append(_arr, 2)
            return _arr
        }() as! [Int]))
        _arr = _append(_arr, ({
            var _arr: [Int] = []
            _arr = _append(_arr, 2)
            _arr = _append(_arr, 1)
            _arr = _append(_arr, 1)
            return _arr
        }() as! [Int]))
        return _arr
    }() as! [[Int]])
    print(_p(String(describing: edges_to_string((kruskal(4, (edges3 as! [[Int]])) as! [[Int]])))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
