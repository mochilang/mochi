// Generated by Mochi transpiler v0.10.59 on 2025-08-07 09:58:59 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
struct Pos: Codable {
    var y: Int
    var x: Int
    init() {
        self.y = 0
        self.x = 0
    }
    init(y: Int, x: Int) {
        self.y = y
        self.x = x
    }
}
struct Node: Codable {
    var pos: Pos
    var g_cost: Int
    var h_cost: Double
    var f_cost: Double
    var path: [Pos]
    init() {
        self.pos = Pos()
        self.g_cost = 0
        self.h_cost = 0
        self.f_cost = 0
        self.path = []
    }
    init(pos: Pos, g_cost: Int, h_cost: Double, f_cost: Double, path: [Pos]) {
        self.pos = pos
        self.g_cost = g_cost
        self.h_cost = h_cost
        self.f_cost = f_cost
        self.path = path
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let HEURISTIC = 0
    let grid: [[Int]] = ([([0, 0, 0, 0, 0, 0, 0] as! [Int]), ([0, 1, 0, 0, 0, 0, 0] as! [Int]), ([0, 0, 0, 0, 0, 0, 0] as! [Int]), ([0, 0, 1, 0, 0, 0, 0] as! [Int]), ([1, 0, 1, 0, 0, 0, 0] as! [Int]), ([0, 0, 0, 0, 0, 0, 0] as! [Int]), ([0, 0, 0, 0, 1, 0, 0] as! [Int])] as! [[Int]])
    let delta: [[Int]] = ([([-1, 0] as! [Int]), ([0, -1] as! [Int]), ([1, 0] as! [Int]), ([0, 1] as! [Int])] as! [[Int]])
    func abs(_ x: Int) -> Int {
        if (x < 0) {
            return -x
        }
        return x
    }
    func sqrtApprox(_ x: Double) -> Double {
        if (x <= 0.0) {
            return 0.0
        }
        var guess: Double = x
        var i: Int = 0
        while (i < 10) {
            guess = Double((Double((guess + (x / guess))) / 2.0))
            i = Int((i &+ 1))
        }
        return guess
    }
    func heuristic(_ a: Pos, _ b: Pos) -> Double {
        let dy = (a.y &- b.y)
        let dx = (a.x &- b.x)
        if (HEURISTIC == 1) {
            return Double((Int(abs(dy)) &+ Int(abs(dx))))
        }
        let dyf = Double(dy)
        let dxf = Double(dx)
        return Double(sqrtApprox(Double(((dyf * dyf) + (dxf * dxf)))))
    }
    func pos_equal(_ a: Pos, _ b: Pos) -> Bool {
        return ((a.y == b.y) && (a.x == b.x))
    }
    func contains_pos(_ lst: [Pos], _ p: Pos) -> Bool {
        var i: Int = 0
        while (i < Int(((lst).count))) {
            if pos_equal((lst[i] as! Pos), (p as! Pos)) {
                return true
            }
            i = Int((i &+ 1))
        }
        return false
    }
    func open_index_of_pos(_ open: [Node], _ p: Pos) -> Int {
        var i: Int = 0
        while (i < Int(((open).count))) {
            if pos_equal((open[i].pos as! Pos), (p as! Pos)) {
                return i
            }
            i = Int((i &+ 1))
        }
        return (0 &- 1)
    }
    func remove_node_at(_ nodes: [Node], _ idx: Int) -> [Node] {
        var res: [Node] = ([] as! [Node])
        var i: Int = 0
        while (i < Int(((nodes).count))) {
            if (i != idx) {
                res = (_append(res, (nodes[i] as! Node)) as! [Node])
            }
            i = Int((i &+ 1))
        }
        return res
    }
    func append_pos_list(_ path: [Pos], _ p: Pos) -> [Pos] {
        var res: [Pos] = ([] as! [Pos])
        var i: Int = 0
        while (i < Int(((path).count))) {
            res = (_append(res, (path[i] as! Pos)) as! [Pos])
            i = Int((i &+ 1))
        }
        res = (_append(res, p) as! [Pos])
        return res
    }
    func reverse_pos_list(_ lst: [Pos]) -> [Pos] {
        var res: [Pos] = ([] as! [Pos])
        var i: Int = (Int(((lst).count)) &- 1)
        while (i >= 0) {
            res = (_append(res, (lst[i] as! Pos)) as! [Pos])
            i = Int((i &- 1))
        }
        return res
    }
    func concat_pos_lists(_ a: [Pos], _ b: [Pos]) -> [Pos] {
        var res: [Pos] = ([] as! [Pos])
        var i: Int = 0
        while (i < Int(((a).count))) {
            res = (_append(res, (a[i] as! Pos)) as! [Pos])
            i = Int((i &+ 1))
        }
        var j: Int = 0
        while (j < Int(((b).count))) {
            res = (_append(res, (b[j] as! Pos)) as! [Pos])
            j = Int((j &+ 1))
        }
        return res
    }
    func get_successors(_ p: Pos) -> [Pos] {
        var res: [Pos] = ([] as! [Pos])
        var i: Int = 0
        while (i < Int(((delta).count))) {
            let nx = (p.x &+ (delta[i][1] as? Int ?? 0))
            let ny = (p.y &+ (delta[i][0] as? Int ?? 0))
            if ((((nx >= 0) && (ny >= 0)) && (nx < Int((((grid[0] as! [Int])).count)))) && (ny < Int(((grid).count)))) {
                if ((grid[ny][nx] as? Int ?? 0) == 0) {
                    res = (_append(res, Pos(y: ny, x: nx)) as! [Pos])
                }
            }
            i = Int((i &+ 1))
        }
        return res
    }
    func find_lowest_f(_ open: [Node]) -> Int {
        var best: Int = 0
        var i: Int = 1
        while (i < Int(((open).count))) {
            if (String(describing: open[i].f_cost) < String(describing: open[best].f_cost)
            ) {
                best = Int(i)
            }
            i = Int((i &+ 1))
        }
        return best
    }
    func astar(_ start: Pos, _ goal: Pos) -> [Pos] {
        let h0 = Double(heuristic((start as! Pos), (goal as! Pos)))
        var open: [Node] = ([Node(pos: start, g_cost: 0, h_cost: h0, f_cost: h0, path: ([start] as! [Pos]))] as! [Node])
        var closed: [Pos] = ([] as! [Pos])
        while (Int(((open).count)) > 0) {
            let idx = Int(find_lowest_f((open as! [Node])))
            let current = (open[idx] as! Node)
            open = (remove_node_at((open as! [Node]), idx) as! [Node])
            if pos_equal((current.pos as! Pos), (goal as! Pos)) {
                return current.path
            }
            closed = (_append(closed, current.pos) as! [Pos])
            let succ: [Pos] = (get_successors((current.pos as! Pos)) as! [Pos])
            var i: Int = 0
            while (i < Int(((succ).count))) {
                let pos = (succ[i] as! Pos)
                if contains_pos((closed as! [Pos]), (pos as! Pos)) {
                    i = Int((i &+ 1))
                    continue
                }
                let tentative_g = (current.g_cost &+ 1)
                let idx_open = Int(open_index_of_pos((open as! [Node]), (pos as! Pos)))
                if ((idx_open == (0 &- 1)) || (String(describing: tentative_g) < String(describing: open[idx_open].g_cost)
                )) {
                    let new_path: [Pos] = (append_pos_list((current.path as! [Pos]), (pos as! Pos)) as! [Pos])
                    let h = Double(heuristic((pos as! Pos), (goal as! Pos)))
                    let f = (Double(tentative_g) + h)
                    if (idx_open != (0 &- 1)) {
                        open = (remove_node_at((open as! [Node]), idx_open) as! [Node])
                    }
                    open = (_append(open, Node(pos: pos, g_cost: tentative_g, h_cost: h, f_cost: f, path: new_path)) as! [Node])
                }
                i = Int((i &+ 1))
            }
        }
        return ([start] as! [Pos])
    }
    func combine_paths(_ fwd: Node, _ bwd: Node) -> [Pos] {
        var bwd_copy: [Pos] = ([] as! [Pos])
        var i: Int = 0
        while (i < (Int(((bwd.path).count)) &- 1)) {
            bwd_copy = (_append(bwd_copy, (bwd.path[i] as! Pos)) as! [Pos])
            i = Int((i &+ 1))
        }
        bwd_copy = (reverse_pos_list((bwd_copy as! [Pos])) as! [Pos])
        return (concat_pos_lists((fwd.path as! [Pos]), (bwd_copy as! [Pos])) as! [Pos])
    }
    func bidirectional_astar(_ start: Pos, _ goal: Pos) -> [Pos] {
        let hf = Double(heuristic((start as! Pos), (goal as! Pos)))
        let hb = Double(heuristic((goal as! Pos), (start as! Pos)))
        var open_f: [Node] = ([Node(pos: start, g_cost: 0, h_cost: hf, f_cost: hf, path: ([start] as! [Pos]))] as! [Node])
        var open_b: [Node] = ([Node(pos: goal, g_cost: 0, h_cost: hb, f_cost: hb, path: ([goal] as! [Pos]))] as! [Node])
        var closed_f: [Pos] = ([] as! [Pos])
        var closed_b: [Pos] = ([] as! [Pos])
        while ((Int(((open_f).count)) > 0) && (Int(((open_b).count)) > 0)) {
            let idx_f = Int(find_lowest_f((open_f as! [Node])))
            let current_f = (open_f[idx_f] as! Node)
            open_f = (remove_node_at((open_f as! [Node]), idx_f) as! [Node])
            let idx_b = Int(find_lowest_f((open_b as! [Node])))
            let current_b = (open_b[idx_b] as! Node)
            open_b = (remove_node_at((open_b as! [Node]), idx_b) as! [Node])
            if pos_equal((current_f.pos as! Pos), (current_b.pos as! Pos)) {
                return (combine_paths((current_f as! Node), (current_b as! Node)) as! [Pos])
            }
            closed_f = (_append(closed_f, current_f.pos) as! [Pos])
            closed_b = (_append(closed_b, current_b.pos) as! [Pos])
            let succ_f: [Pos] = (get_successors((current_f.pos as! Pos)) as! [Pos])
            var i: Int = 0
            while (i < Int(((succ_f).count))) {
                let pos = (succ_f[i] as! Pos)
                if contains_pos((closed_f as! [Pos]), (pos as! Pos)) {
                    i = Int((i &+ 1))
                    continue
                }
                let tentative_g = (current_f.g_cost &+ 1)
                let h = Double(heuristic((pos as! Pos), (current_b.pos as! Pos)))
                let f = (Double(tentative_g) + h)
                let idx_open = Int(open_index_of_pos((open_f as! [Node]), (pos as! Pos)))
                if ((idx_open == (0 &- 1)) || (String(describing: tentative_g) < String(describing: open_f[idx_open].g_cost)
                )) {
                    let new_path: [Pos] = (append_pos_list((current_f.path as! [Pos]), (pos as! Pos)) as! [Pos])
                    if (idx_open != (0 &- 1)) {
                        open_f = (remove_node_at((open_f as! [Node]), idx_open) as! [Node])
                    }
                    open_f = (_append(open_f, Node(pos: pos, g_cost: tentative_g, h_cost: h, f_cost: f, path: new_path)) as! [Node])
                }
                i = Int((i &+ 1))
            }
            let succ_b: [Pos] = (get_successors((current_b.pos as! Pos)) as! [Pos])
            i = 0
            while (i < Int(((succ_b).count))) {
                let pos = (succ_b[i] as! Pos)
                if contains_pos((closed_b as! [Pos]), (pos as! Pos)) {
                    i = Int((i &+ 1))
                    continue
                }
                let tentative_g = (current_b.g_cost &+ 1)
                let h = Double(heuristic((pos as! Pos), (current_f.pos as! Pos)))
                let f = (Double(tentative_g) + h)
                let idx_open = Int(open_index_of_pos((open_b as! [Node]), (pos as! Pos)))
                if ((idx_open == (0 &- 1)) || (String(describing: tentative_g) < String(describing: open_b[idx_open].g_cost)
                )) {
                    let new_path: [Pos] = (append_pos_list((current_b.path as! [Pos]), (pos as! Pos)) as! [Pos])
                    if (idx_open != (0 &- 1)) {
                        open_b = (remove_node_at((open_b as! [Node]), idx_open) as! [Node])
                    }
                    open_b = (_append(open_b, Node(pos: pos, g_cost: tentative_g, h_cost: h, f_cost: f, path: new_path)) as! [Node])
                }
                i = Int((i &+ 1))
            }
        }
        return ([start] as! [Pos])
    }
    func path_to_string(_ path: [Pos]) -> String {
        if (Int(((path).count)) == 0) {
            return "[]"
        }
        var s: String = (((("[(" + String(describing: path[0].y)) + ", ") + String(describing: path[0].x)) + ")")
        var i: Int = 1
        while (i < Int(((path).count))) {
            s = ((((((s + ", (") + String(describing: path[i].y)) + ", ") + String(describing: path[i].x)) + ")") as! String)
            i = Int((i &+ 1))
        }
        s = ((s + "]") as! String)
        return s
    }
    let start = Pos(y: 0, x: 0)
    let goal = Pos(y: (Int(((grid).count)) &- 1), x: (Int((((grid[0] as! [Int])).count)) &- 1))
    let path1: [Pos] = (astar((start as! Pos), (goal as! Pos)) as! [Pos])
    print(_p(String(describing: path_to_string((path1 as! [Pos])))))
    let path2: [Pos] = (bidirectional_astar((start as! Pos), (goal as! Pos)) as! [Pos])
    print(_p(String(describing: path_to_string((path2 as! [Pos])))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
