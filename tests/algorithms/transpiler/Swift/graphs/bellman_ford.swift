// Generated by Mochi transpiler v0.10.59 on 2025-08-07 08:56:47 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
struct Edge: Codable {
    var src: Int
    var dst: Int
    var weight: Int
    init() {
        self.src = 0
        self.dst = 0
        self.weight = 0
    }
    init(src: Int, dst: Int, weight: Int) {
        self.src = src
        self.dst = dst
        self.weight = weight
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let INF = 1000000000.0
    func list_to_string(_ arr: [Double]) -> String {
        var s: String = "["
        var i: Int = 0
        while (i < Int(((arr).count))) {
            s = ((s + _p(Double(arr[i]))) as! String)
            if (i < (Int(((arr).count)) &- 1)) {
                s = ((s + ", ") as! String)
            }
            i = Int((i &+ 1))
        }
        return (s + "]")
    }
    func check_negative_cycle(_ graph: [Edge], _ distance: [Double], _ edge_count: Int) -> Bool {
        var j: Int = 0
        while (j < edge_count) {
            let e = (graph[j] as! Edge)
            let u = e.src
            let v = e.dst
            let w = Double(e.weight)
            if ((Double(distance[u]) < INF) && ((Double(distance[u]) + w) < Double(distance[v]))) {
                return true
            }
            j = Int((j &+ 1))
        }
        return false
    }
    func bellman_ford(_ graph: [Edge], _ vertex_count: Int, _ edge_count: Int, _ src: Int) -> [Double] {
        var distance: [Double] = ([] as! [Double])
        var i: Int = 0
        while (i < vertex_count) {
            distance = (_append(distance, INF) as! [Double])
            i = Int((i &+ 1))
        }
        distance = _set(distance, src, 0.0)
        var k: Int = 0
        while (k < (vertex_count &- 1)) {
            var j: Int = 0
            while (j < edge_count) {
                let e = (graph[j] as! Edge)
                let u = e.src
                let v = e.dst
                let w = Double(e.weight)
                if ((Double(distance[u]) < INF) && ((Double(distance[u]) + w) < Double(distance[v]))) {
                    distance = _set(distance, v, Double((Double(distance[u]) + w)))
                }
                j = Int((j &+ 1))
            }
            k = Int((k &+ 1))
        }
        if check_negative_cycle((graph as! [Edge]), (distance as! [Double]), edge_count) {
            _ = fatalError("Negative cycle found")
        }
        return distance
    }
    let edges: [Edge] = ([Edge(src: 2, dst: 1, weight: -10), Edge(src: 3, dst: 2, weight: 3), Edge(src: 0, dst: 3, weight: 5), Edge(src: 0, dst: 1, weight: 4)] as! [Edge])
    let distances: [Double] = (bellman_ford((edges as! [Edge]), 4, Int(((edges).count)), 0) as! [Double])
    print(_p(String(describing: list_to_string((distances as! [Double])))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
