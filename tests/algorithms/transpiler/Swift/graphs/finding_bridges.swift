// Generated by Mochi transpiler v0.10.65 on 2025-08-14 15:57:24 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
struct DfsResult: Codable {
    var id: Int
    var bridges: [[Int]]
    init() {
        self.id = 0
        self.bridges = []
    }
    init(id: Int, bridges: [[Int]]) {
        self.id = id
        self.bridges = bridges
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func dfs(_ graph: [Int: [Int]], _ at: Int, _ parent: Int, _ visited: inout [Bool], _ ids: inout [Int], _ low: inout [Int], _ id: Int, _ bridges: [[Int]]) -> DfsResult {
        visited = _set(visited, at, true)
        ids = _set(ids, at, Int(id))
        low = _set(low, at, Int(id))
        var current_id = (id &+ 1)
        var res_bridges = bridges
        for to in (graph[at] ?? [] as! [Int]) {
            if (to == parent) {
                continue
            } else if !(_idx(visited, to) ?? false) {
                let result = dfs((graph as! [Int: [Int]]), to, at, &visited, &ids, &low, current_id, (res_bridges as! [[Int]]))
                current_id = _int(result.id)
                res_bridges = (result.bridges as! [[Int]])
                if ((_idx(low, at) as? Int ?? 0) > (_idx(low, to) as? Int ?? 0)) {
                    low = _set(low, at, (_idx(low, to) as? Int ?? 0))
                }
                if ((_idx(ids, at) as? Int ?? 0) < (_idx(low, to) as? Int ?? 0)) {
                    let edge: [Int] = (((at < to) ? ({
                        var _arr: [Int] = []
                        _arr = _append(_arr, at)
                        _arr = _append(_arr, to)
                        return _arr
                    }() as! [Int]) : ({
                        var _arr: [Int] = []
                        _arr = _append(_arr, to)
                        _arr = _append(_arr, at)
                        return _arr
                    }() as! [Int])) as! [Int])
                    res_bridges = (_append(res_bridges, edge) as! [[Int]])
                }
            } else {
                if ((_idx(low, at) as? Int ?? 0) > (_idx(ids, to) as? Int ?? 0)) {
                    low = _set(low, at, (_idx(ids, to) as? Int ?? 0))
                }
            }
            
        }
        return DfsResult(id: Int(current_id), bridges: (res_bridges as! [[Int]]))
    }
    func compute_bridges(_ graph: [Int: [Int]]) -> [[Int]] {
        let n = _int(((graph).count))
        var visited: [Bool] = ([] as! [Bool])
        var ids: [Int] = ([] as! [Int])
        var low: [Int] = ([] as! [Int])
        var i = 0
        while (i < n) {
            visited = (_append(visited, false) as! [Bool])
            ids = (_append(ids, 0) as! [Int])
            low = (_append(low, 0) as! [Int])
            i = _int((i &+ 1))
        }
        var bridges: [[Int]] = ([] as! [[Int]])
        var id = 0
        i = 0
        while (i < n) {
            if !(_idx(visited, i) ?? false) {
                let result = dfs((graph as! [Int: [Int]]), i, -1, &visited, &ids, &low, id, (bridges as! [[Int]]))
                id = _int(result.id)
                bridges = (result.bridges as! [[Int]])
            }
            i = _int((i &+ 1))
        }
        return bridges
    }
    func get_demo_graph(_ index: Int) -> [Int: [Int]] {
        if (index == 0) {
            return ([0: ({
                var _arr: [Int] = []
                _arr = _append(_arr, 1)
                _arr = _append(_arr, 2)
                return _arr
            }() as! [Int]), 1: ({
                var _arr: [Int] = []
                _arr = _append(_arr, 0)
                _arr = _append(_arr, 2)
                return _arr
            }() as! [Int]), 2: ({
                var _arr: [Int] = []
                _arr = _append(_arr, 0)
                _arr = _append(_arr, 1)
                _arr = _append(_arr, 3)
                _arr = _append(_arr, 5)
                return _arr
            }() as! [Int]), 3: ({
                var _arr: [Int] = []
                _arr = _append(_arr, 2)
                _arr = _append(_arr, 4)
                return _arr
            }() as! [Int]), 4: ({
                var _arr: [Int] = []
                _arr = _append(_arr, 3)
                return _arr
            }() as! [Int]), 5: ({
                var _arr: [Int] = []
                _arr = _append(_arr, 2)
                _arr = _append(_arr, 6)
                _arr = _append(_arr, 8)
                return _arr
            }() as! [Int]), 6: ({
                var _arr: [Int] = []
                _arr = _append(_arr, 5)
                _arr = _append(_arr, 7)
                return _arr
            }() as! [Int]), 7: ({
                var _arr: [Int] = []
                _arr = _append(_arr, 6)
                _arr = _append(_arr, 8)
                return _arr
            }() as! [Int]), 8: ({
                var _arr: [Int] = []
                _arr = _append(_arr, 5)
                _arr = _append(_arr, 7)
                return _arr
            }() as! [Int])] as! [Int: [Int]])
        }
        if (index == 1) {
            return ([0: ({
                var _arr: [Int] = []
                _arr = _append(_arr, 6)
                return _arr
            }() as! [Int]), 1: ({
                var _arr: [Int] = []
                _arr = _append(_arr, 9)
                return _arr
            }() as! [Int]), 2: ({
                var _arr: [Int] = []
                _arr = _append(_arr, 4)
                _arr = _append(_arr, 5)
                return _arr
            }() as! [Int]), 3: ({
                var _arr: [Int] = []
                _arr = _append(_arr, 4)
                return _arr
            }() as! [Int]), 4: ({
                var _arr: [Int] = []
                _arr = _append(_arr, 2)
                _arr = _append(_arr, 3)
                return _arr
            }() as! [Int]), 5: ({
                var _arr: [Int] = []
                _arr = _append(_arr, 2)
                return _arr
            }() as! [Int]), 6: ({
                var _arr: [Int] = []
                _arr = _append(_arr, 0)
                _arr = _append(_arr, 7)
                return _arr
            }() as! [Int]), 7: ({
                var _arr: [Int] = []
                _arr = _append(_arr, 6)
                return _arr
            }() as! [Int]), 8: [] as [Any], 9: ({
                var _arr: [Int] = []
                _arr = _append(_arr, 1)
                return _arr
            }() as! [Int])] as! [Int: [Int]])
        }
        if (index == 2) {
            return ([0: ({
                var _arr: [Int] = []
                _arr = _append(_arr, 4)
                return _arr
            }() as! [Int]), 1: ({
                var _arr: [Int] = []
                _arr = _append(_arr, 6)
                return _arr
            }() as! [Int]), 2: [] as [Any], 3: ({
                var _arr: [Int] = []
                _arr = _append(_arr, 5)
                _arr = _append(_arr, 6)
                _arr = _append(_arr, 7)
                return _arr
            }() as! [Int]), 4: ({
                var _arr: [Int] = []
                _arr = _append(_arr, 0)
                _arr = _append(_arr, 6)
                return _arr
            }() as! [Int]), 5: ({
                var _arr: [Int] = []
                _arr = _append(_arr, 3)
                _arr = _append(_arr, 8)
                _arr = _append(_arr, 9)
                return _arr
            }() as! [Int]), 6: ({
                var _arr: [Int] = []
                _arr = _append(_arr, 1)
                _arr = _append(_arr, 3)
                _arr = _append(_arr, 4)
                _arr = _append(_arr, 7)
                return _arr
            }() as! [Int]), 7: ({
                var _arr: [Int] = []
                _arr = _append(_arr, 3)
                _arr = _append(_arr, 6)
                _arr = _append(_arr, 8)
                _arr = _append(_arr, 9)
                return _arr
            }() as! [Int]), 8: ({
                var _arr: [Int] = []
                _arr = _append(_arr, 5)
                _arr = _append(_arr, 7)
                return _arr
            }() as! [Int]), 9: ({
                var _arr: [Int] = []
                _arr = _append(_arr, 5)
                _arr = _append(_arr, 7)
                return _arr
            }() as! [Int])] as! [Int: [Int]])
        }
        return ([0: ({
            var _arr: [Int] = []
            _arr = _append(_arr, 1)
            _arr = _append(_arr, 3)
            return _arr
        }() as! [Int]), 1: ({
            var _arr: [Int] = []
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 2)
            _arr = _append(_arr, 4)
            return _arr
        }() as! [Int]), 2: ({
            var _arr: [Int] = []
            _arr = _append(_arr, 1)
            _arr = _append(_arr, 3)
            _arr = _append(_arr, 4)
            return _arr
        }() as! [Int]), 3: ({
            var _arr: [Int] = []
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 2)
            _arr = _append(_arr, 4)
            return _arr
        }() as! [Int]), 4: ({
            var _arr: [Int] = []
            _arr = _append(_arr, 1)
            _arr = _append(_arr, 2)
            _arr = _append(_arr, 3)
            return _arr
        }() as! [Int])] as! [Int: [Int]])
    }
    print(_p("[" + (compute_bridges((get_demo_graph(0) as! [Int: [Int]])) as! [[Int]]).map{ if let s = $0 as? String { "\"" + s.replacingOccurrences(of: "\"", with: "\\\"") + "\"" } else { _p($0) } }.joined(separator: ", ") + "]"))
    print(_p("[" + (compute_bridges((get_demo_graph(1) as! [Int: [Int]])) as! [[Int]]).map{ if let s = $0 as? String { "\"" + s.replacingOccurrences(of: "\"", with: "\\\"") + "\"" } else { _p($0) } }.joined(separator: ", ") + "]"))
    print(_p("[" + (compute_bridges((get_demo_graph(2) as! [Int: [Int]])) as! [[Int]]).map{ if let s = $0 as? String { "\"" + s.replacingOccurrences(of: "\"", with: "\\\"") + "\"" } else { _p($0) } }.joined(separator: ", ") + "]"))
    print(_p("[" + (compute_bridges((get_demo_graph(3) as! [Int: [Int]])) as! [[Int]]).map{ if let s = $0 as? String { "\"" + s.replacingOccurrences(of: "\"", with: "\\\"") + "\"" } else { _p($0) } }.joined(separator: ", ") + "]"))
    print(_p("[" + (compute_bridges(([:] as! [Int: [Int]])) as! [[Int]]).map{ if let s = $0 as? String { "\"" + s.replacingOccurrences(of: "\"", with: "\\\"") + "\"" } else { _p($0) } }.joined(separator: ", ") + "]"))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
