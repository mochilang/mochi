// Generated by Mochi transpiler v0.10.59 on 2025-08-07 09:59:19 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
struct Graph: Codable {
    var graph: [String: [String]]
    var parent: [String: String]
    var source: String
    init() {
        self.graph = [:]
        self.parent = [:]
        self.source = ""
    }
    init(graph: [String: [String]], parent: [String: String], source: String) {
        self.graph = graph
        self.parent = parent
        self.source = source
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func newGraph(_ g: [String: [String]], _ s: String) -> Graph {
        return Graph(graph: g, parent: [:], source: s)
    }
    func breath_first_search(_ g: inout Graph) -> Graph {
        var parent: [String: String] = g.parent
        parent = _set(parent, String(describing: g.source), (g.source as! String))
        var queue: [String] = ([g.source] as! [String])
        var idx: Int = 0
        while (idx < Int(((queue).count))) {
            let vertex = (queue[idx] as! String)
            for adj in (g.graph[String(String(describing: vertex))] as! [String]) {
                if (!(parent[adj] != nil)) {
                    parent = _set(parent, String(describing: adj), (vertex as! String))
                    queue = (_append(queue, adj) as! [String])
                }
            }
            idx = Int((idx &+ 1))
        }
        g.parent = (parent as! [String: String])
        return g
    }
    func shortest_path(_ g: Graph, _ target: String) -> String {
        if (target == g.source) {
            return g.source
        }
        if (!(g.parent[target] != nil)) {
            return ((("No path from vertex: " + g.source) + " to vertex: ") + target)
        }
        let p = (g.parent[String(String(describing: target))] as! String)
        return ((String(describing: shortest_path((g as! Graph), (p as! String))) + "->") + target)
    }
    let graph: [String: [String]] = (["A": (["B", "C", "E"] as! [String]), "B": (["A", "D", "E"] as! [String]), "C": (["A", "F", "G"] as! [String]), "D": (["B"] as! [String]), "E": (["A", "B", "D"] as! [String]), "F": (["C"] as! [String]), "G": (["C"] as! [String])] as! [String: [String]])
    var g: Graph = newGraph((graph as! [String: [String]]), "G")
    g = (breath_first_search(&g) as! Graph)
    print(_p(String(describing: shortest_path((g as! Graph), "D"))))
    print(_p(String(describing: shortest_path((g as! Graph), "G"))))
    print(_p(String(describing: shortest_path((g as! Graph), "Foo"))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
