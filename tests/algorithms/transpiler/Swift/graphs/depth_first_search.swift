// Generated by Mochi transpiler v0.10.65 on 2025-08-14 15:57:00 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _slice<T>(_ xs: [T], _ start: Int, _ end: Int) -> [T] {
    var s = start
    var e = end
    if s < 0 { s = 0 }
    if e > xs.count { e = xs.count }
    if s > e { s = e }
    return Array(xs[s..<e])
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func contains(_ lst: [String], _ v: String) -> Bool {
        var i = 0
        while (i < _int(((lst).count))) {
            if ((_idx(lst, i) as! String) == v) {
                return true
            }
            i = _int((i &+ 1))
        }
        return false
    }
    func depth_first_search(_ graph: [String: [String]], _ start: String) -> [String] {
        var explored: [String] = ([] as! [String])
        var stack: [String] = ([] as! [String])
        stack = (_append(stack, start) as! [String])
        explored = (_append(explored, start) as! [String])
        while (_int(((stack).count)) > 0) {
            let idx = (_int(((stack).count)) &- 1)
            let v = (_idx(stack, idx) as! String)
            stack = (_slice(Array(stack), 0, idx) as! [String])
            let neighbors: [String] = (graph[String(String(describing: v))] ?? [] as! [String])
            var i = (_int(((neighbors).count)) &- 1)
            while (i >= 0) {
                let adj = (_idx(neighbors, i) as! String)
                if (!contains((explored as! [String]), (adj as! String))) {
                    explored = (_append(explored, adj) as! [String])
                    stack = (_append(stack, adj) as! [String])
                }
                i = _int((i &- 1))
            }
        }
        return explored
    }
    let G: [String: [String]] = (["A": ({
        var _arr: [String] = []
        _arr = _append(_arr, "B")
        _arr = _append(_arr, "C")
        _arr = _append(_arr, "D")
        return _arr
    }() as! [String]), "B": ({
        var _arr: [String] = []
        _arr = _append(_arr, "A")
        _arr = _append(_arr, "D")
        _arr = _append(_arr, "E")
        return _arr
    }() as! [String]), "C": ({
        var _arr: [String] = []
        _arr = _append(_arr, "A")
        _arr = _append(_arr, "F")
        return _arr
    }() as! [String]), "D": ({
        var _arr: [String] = []
        _arr = _append(_arr, "B")
        _arr = _append(_arr, "D")
        return _arr
    }() as! [String]), "E": ({
        var _arr: [String] = []
        _arr = _append(_arr, "B")
        _arr = _append(_arr, "F")
        return _arr
    }() as! [String]), "F": ({
        var _arr: [String] = []
        _arr = _append(_arr, "C")
        _arr = _append(_arr, "E")
        _arr = _append(_arr, "G")
        return _arr
    }() as! [String]), "G": ({
        var _arr: [String] = []
        _arr = _append(_arr, "F")
        return _arr
    }() as! [String])] as! [String: [String]])
    let result: [String] = (depth_first_search((G as! [String: [String]]), "A") as! [String])
    print(_p("[" + result.map{ if let s = $0 as? String { "\"" + s.replacingOccurrences(of: "\"", with: "\\\"") + "\"" } else { _p($0) } }.joined(separator: ", ") + "]"))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
