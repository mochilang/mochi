// Generated by Mochi transpiler v0.10.65 on 2025-08-14 17:13:39 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
func _slice<T>(_ xs: [T], _ start: Int, _ end: Int) -> [T] {
    var s = start
    var e = end
    if s < 0 { s = 0 }
    if e > xs.count { e = xs.count }
    if s > e { s = e }
    return Array(xs[s..<e])
}
struct DirectedGraph: Codable {
    var graph: [Int: [[Int]]]
    init() {
        self.graph = [:]
    }
    init(graph: [Int: [[Int]]]) {
        self.graph = graph
    }
}
struct Graph: Codable {
    var graph: [Int: [[Int]]]
    init() {
        self.graph = [:]
    }
    init(graph: [Int: [[Int]]]) {
        self.graph = graph
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func list_contains_int(_ xs: [Int], _ x: Int) -> Bool {
        var i = 0
        while (i < _int(((xs).count))) {
            if ((_idx(xs, i) as? Int ?? 0) == x) {
                return true
            }
            i = _int((i &+ 1))
        }
        return false
    }
    func edge_exists(_ edges: [[Int]], _ w: Int, _ v: Int) -> Bool {
        var i = 0
        while (i < _int(((edges).count))) {
            if (((_idx(_idx(edges, i)!, 0) as? Int ?? 0) == w) && ((_idx(_idx(edges, i)!, 1) as? Int ?? 0) == v)) {
                return true
            }
            i = _int((i &+ 1))
        }
        return false
    }
    func first_key(_ m: [Int: [[Int]]]) -> Int {
        for k in m.keys.sorted() {
            return k
        }
        return 0
    }
    func rand_range(_ low: Int, _ high: Int) -> Int {
        return (_int(((_int(_now()) % _int((high &- low)) + _int((high &- low))) % _int((high &- low)))) &+ low)
    }
    func dg_make_graph() -> DirectedGraph {
        return DirectedGraph(graph: ([:] as! [Int: [[Int]]]))
    }
    func dg_add_pair(_ g: inout DirectedGraph, _ u: Int, _ v: Int, _ w: Int) {
        if (g.graph[u] != nil) {
            var edges: [[Int]] = ((g.graph[u] ?? []) as! [[Int]])
            if (!edge_exists((edges as! [[Int]]), w, v)) {
                edges = (_append(edges, ({
                    var _arr: [Int] = []
                    _arr = _append(_arr, w)
                    _arr = _append(_arr, v)
                    return _arr
                }() as! [Int])) as! [[Int]])
                var m = g.graph
                m = _set(m, u, (edges as! [[Int]]))
                g.graph = (m as! [Int: [[Int]]])
            }
        } else {
            var m0 = g.graph
            m0 = _set(m0, u, ({
                var _arr: [[Int]] = []
                _arr = _append(_arr, ({
                    var _arr: [Int] = []
                    _arr = _append(_arr, w)
                    _arr = _append(_arr, v)
                    return _arr
                }() as! [Int]))
                return _arr
            }() as! [[Int]]))
            g.graph = (m0 as! [Int: [[Int]]])
        }
        if (!(g.graph[v] != nil)) {
            var m1 = g.graph
            m1 = _set(m1, v, ([] as! [[Int]]))
            g.graph = (m1 as! [Int: [[Int]]])
        }
    }
    func dg_remove_pair(_ g: inout DirectedGraph, _ u: Int, _ v: Int) {
        if (g.graph[u] != nil) {
            var edges: [[Int]] = ((g.graph[u] ?? []) as! [[Int]])
            var new_edges: [[Int]] = ([] as! [[Int]])
            var i = 0
            while (i < _int(((edges).count))) {
                if ((_idx(_idx(edges, i)!, 1) as? Int ?? 0) != v) {
                    new_edges = (_append(new_edges, (_idx(edges, i) as! [Int])) as! [[Int]])
                }
                i = _int((i &+ 1))
            }
            var m = g.graph
            m = _set(m, u, (new_edges as! [[Int]]))
            g.graph = (m as! [Int: [[Int]]])
        }
    }
    func dg_all_nodes(_ g: DirectedGraph) -> [Int] {
        var res: [Int] = ([] as! [Int])
        for k in g.graph.keys.sorted() {
            res = (_append(res, k) as! [Int])
        }
        return res
    }
    func dg_dfs_util(_ g: DirectedGraph, _ node: Int, _ visited: inout [Int: Bool], _ order: inout [Int], _ d: Int) -> [Int] {
        visited = _set(visited, node, true)
        order = (_append(order, node) as! [Int])
        if ((d != _int(-1)) && (node == d)) {
            return order
        }
        var edges = ((g.graph[node] ?? []) as! [[Int]])
        var i = 0
        while (i < _int(((edges).count))) {
            let neigh = (_idx(_idx(edges, i)!, 1) as? Int ?? 0)
            if (!(visited[neigh] != nil)) {
                order = (dg_dfs_util((g as! DirectedGraph), neigh, &visited, &order, d) as! [Int])
                if ((d != _int(-1)) && ((_idx(order, (_int(((order).count)) &- 1)) as? Int ?? 0) == d)) {
                    return order
                }
            }
            i = _int((i &+ 1))
        }
        return order
    }
    func dg_dfs(_ g: DirectedGraph, _ s: Int, _ d: Int) -> [Int] {
        if (s == d) {
            return ([] as! [Int])
        }
        let start = _int(((s == _int(-2)) ? _int(first_key((g.graph as! [Int: [[Int]]]))) : s))
        var visited: [Int: Bool] = ([:] as! [Int: Bool])
        var order: [Int] = ([] as! [Int])
        order = (dg_dfs_util((g as! DirectedGraph), start, &visited, &order, d) as! [Int])
        return order
    }
    func dg_bfs(_ g: DirectedGraph, _ s: Int) -> [Int] {
        var queue: [Int] = ([] as! [Int])
        var visited: [Int: Bool] = ([:] as! [Int: Bool])
        var order: [Int] = ([] as! [Int])
        let start = _int(((s == _int(-2)) ? _int(first_key((g.graph as! [Int: [[Int]]]))) : s))
        queue = (_append(queue, start) as! [Int])
        visited = _set(visited, start, true)
        while (_int(((queue).count)) > 0) {
            let node = (_idx(queue, 0) as? Int ?? 0)
            queue = (_slice(Array(queue), 1, _int(((queue).count))) as! [Int])
            order = (_append(order, node) as! [Int])
            var edges = ((g.graph[node] ?? []) as! [[Int]])
            var i = 0
            while (i < _int(((edges).count))) {
                let neigh = (_idx(_idx(edges, i)!, 1) as? Int ?? 0)
                if (!(visited[neigh] != nil)) {
                    queue = (_append(queue, neigh) as! [Int])
                    visited = _set(visited, neigh, true)
                }
                i = _int((i &+ 1))
            }
        }
        return order
    }
    func dg_in_degree(_ g: DirectedGraph, _ u: Int) -> Int {
        var count = 0
        for k in g.graph.keys.sorted() {
            var edges = ((g.graph[k] ?? []) as! [[Int]])
            var i = 0
            while (i < _int(((edges).count))) {
                if ((_idx(_idx(edges, i)!, 1) as? Int ?? 0) == u) {
                    count = _int((count &+ 1))
                }
                i = _int((i &+ 1))
            }
        }
        return count
    }
    func dg_out_degree(_ g: DirectedGraph, _ u: Int) -> Int {
        if (g.graph[u] != nil) {
            return _int(((((g.graph[u] ?? []) as! [[Int]])).count))
        }
        return 0
    }
    func dg_topo_util(_ g: DirectedGraph, _ node: Int, _ visited: inout [Int: Bool], _ stack: inout [Int]) -> [Int] {
        visited = _set(visited, node, true)
        var edges = ((g.graph[node] ?? []) as! [[Int]])
        var i = 0
        while (i < _int(((edges).count))) {
            let neigh = (_idx(_idx(edges, i)!, 1) as? Int ?? 0)
            if (!(visited[neigh] != nil)) {
                stack = (dg_topo_util((g as! DirectedGraph), neigh, &visited, &stack) as! [Int])
            }
            i = _int((i &+ 1))
        }
        stack = (_append(stack, node) as! [Int])
        return stack
    }
    func dg_topological_sort(_ g: DirectedGraph) -> [Int] {
        var visited: [Int: Bool] = ([:] as! [Int: Bool])
        var stack: [Int] = ([] as! [Int])
        for k in g.graph.keys.sorted() {
            if (!(visited[k] != nil)) {
                stack = (dg_topo_util((g as! DirectedGraph), k, &visited, &stack) as! [Int])
            }
        }
        var res: [Int] = ([] as! [Int])
        var i = (_int(((stack).count)) &- 1)
        while (i >= 0) {
            res = (_append(res, (_idx(stack, i) as? Int ?? 0)) as! [Int])
            i = _int((i &- 1))
        }
        return res
    }
    func dg_cycle_util(_ g: DirectedGraph, _ node: Int, _ visited: inout [Int: Bool], _ rec: inout [Int: Bool], _ res: inout [Int]) -> [Int] {
        visited = _set(visited, node, true)
        rec = _set(rec, node, true)
        var edges = ((g.graph[node] ?? []) as! [[Int]])
        var i = 0
        while (i < _int(((edges).count))) {
            let neigh = (_idx(_idx(edges, i)!, 1) as? Int ?? 0)
            if (!(visited[neigh] != nil)) {
                res = (dg_cycle_util((g as! DirectedGraph), neigh, &visited, &rec, &res) as! [Int])
            } else if ((rec[neigh] ?? false) as! Bool) {
                if (!list_contains_int((res as! [Int]), neigh)) {
                    res = (_append(res, neigh) as! [Int])
                }
                if (!list_contains_int((res as! [Int]), node)) {
                    res = (_append(res, node) as! [Int])
                }
            }
            
            i = _int((i &+ 1))
        }
        rec = _set(rec, node, false)
        return res
    }
    func dg_cycle_nodes(_ g: DirectedGraph) -> [Int] {
        var visited: [Int: Bool] = ([:] as! [Int: Bool])
        var rec: [Int: Bool] = ([:] as! [Int: Bool])
        var res: [Int] = ([] as! [Int])
        for k in g.graph.keys.sorted() {
            if (!(visited[k] != nil)) {
                res = (dg_cycle_util((g as! DirectedGraph), k, &visited, &rec, &res) as! [Int])
            }
        }
        return res
    }
    func dg_has_cycle_util(_ g: DirectedGraph, _ node: Int, _ visited: inout [Int: Bool], _ rec: inout [Int: Bool]) -> Bool {
        visited = _set(visited, node, true)
        rec = _set(rec, node, true)
        var edges = ((g.graph[node] ?? []) as! [[Int]])
        var i = 0
        while (i < _int(((edges).count))) {
            let neigh = (_idx(_idx(edges, i)!, 1) as? Int ?? 0)
            if (!(visited[neigh] != nil)) {
                if dg_has_cycle_util((g as! DirectedGraph), neigh, &visited, &rec) {
                    return true
                }
            } else if ((rec[neigh] ?? false) as! Bool) {
                return true
            }
            
            i = _int((i &+ 1))
        }
        rec = _set(rec, node, false)
        return false
    }
    func dg_has_cycle(_ g: DirectedGraph) -> Bool {
        var visited: [Int: Bool] = ([:] as! [Int: Bool])
        var rec: [Int: Bool] = ([:] as! [Int: Bool])
        for k in g.graph.keys.sorted() {
            if (!(visited[k] != nil)) {
                if dg_has_cycle_util((g as! DirectedGraph), k, &visited, &rec) {
                    return true
                }
            }
        }
        return false
    }
    func dg_fill_graph_randomly(_ g: inout DirectedGraph, _ c: Int) {
        var count = c
        if (count == _int(-1)) {
            count = _int(rand_range(10, 10010))
        }
        var i = 0
        while (i < count) {
            var edge_count = _int(rand_range(1, 103))
            var j = 0
            while (j < edge_count) {
                let n = _int(rand_range(0, count))
                if (n != i) {
                    _ = dg_add_pair(&g, i, n, 1)
                }
                j = _int((j &+ 1))
            }
            i = _int((i &+ 1))
        }
    }
    func dg_dfs_time(_ g: DirectedGraph, _ s: Int, _ e: Int) -> Int {
        let begin = _int(_now())
        _ = (dg_dfs((g as! DirectedGraph), s, e) as! [Int])
        let end = _int(_now())
        return (end &- begin)
    }
    func dg_bfs_time(_ g: DirectedGraph, _ s: Int) -> Int {
        let begin = _int(_now())
        _ = (dg_bfs((g as! DirectedGraph), s) as! [Int])
        let end = _int(_now())
        return (end &- begin)
    }
    func g_make_graph() -> Graph {
        return Graph(graph: ([:] as! [Int: [[Int]]]))
    }
    func g_add_pair(_ g: inout Graph, _ u: Int, _ v: Int, _ w: Int) {
        if (g.graph[u] != nil) {
            var edges: [[Int]] = ((g.graph[u] ?? []) as! [[Int]])
            if (!edge_exists((edges as! [[Int]]), w, v)) {
                edges = (_append(edges, ({
                    var _arr: [Int] = []
                    _arr = _append(_arr, w)
                    _arr = _append(_arr, v)
                    return _arr
                }() as! [Int])) as! [[Int]])
                var m = g.graph
                m = _set(m, u, (edges as! [[Int]]))
                g.graph = (m as! [Int: [[Int]]])
            }
        } else {
            var m0 = g.graph
            m0 = _set(m0, u, ({
                var _arr: [[Int]] = []
                _arr = _append(_arr, ({
                    var _arr: [Int] = []
                    _arr = _append(_arr, w)
                    _arr = _append(_arr, v)
                    return _arr
                }() as! [Int]))
                return _arr
            }() as! [[Int]]))
            g.graph = (m0 as! [Int: [[Int]]])
        }
        if (g.graph[v] != nil) {
            var edges2: [[Int]] = ((g.graph[v] ?? []) as! [[Int]])
            if (!edge_exists((edges2 as! [[Int]]), w, u)) {
                edges2 = (_append(edges2, ({
                    var _arr: [Int] = []
                    _arr = _append(_arr, w)
                    _arr = _append(_arr, u)
                    return _arr
                }() as! [Int])) as! [[Int]])
                var m2 = g.graph
                m2 = _set(m2, v, (edges2 as! [[Int]]))
                g.graph = (m2 as! [Int: [[Int]]])
            }
        } else {
            var m3 = g.graph
            m3 = _set(m3, v, ({
                var _arr: [[Int]] = []
                _arr = _append(_arr, ({
                    var _arr: [Int] = []
                    _arr = _append(_arr, w)
                    _arr = _append(_arr, u)
                    return _arr
                }() as! [Int]))
                return _arr
            }() as! [[Int]]))
            g.graph = (m3 as! [Int: [[Int]]])
        }
    }
    func g_remove_pair(_ g: inout Graph, _ u: Int, _ v: Int) {
        if (g.graph[u] != nil) {
            var edges: [[Int]] = ((g.graph[u] ?? []) as! [[Int]])
            var new_edges: [[Int]] = ([] as! [[Int]])
            var i = 0
            while (i < _int(((edges).count))) {
                if ((_idx(_idx(edges, i)!, 1) as? Int ?? 0) != v) {
                    new_edges = (_append(new_edges, (_idx(edges, i) as! [Int])) as! [[Int]])
                }
                i = _int((i &+ 1))
            }
            var m = g.graph
            m = _set(m, u, (new_edges as! [[Int]]))
            g.graph = (m as! [Int: [[Int]]])
        }
        if (g.graph[v] != nil) {
            var edges2: [[Int]] = ((g.graph[v] ?? []) as! [[Int]])
            var new_edges2: [[Int]] = ([] as! [[Int]])
            var j = 0
            while (j < _int(((edges2).count))) {
                if ((_idx(_idx(edges2, j)!, 1) as? Int ?? 0) != u) {
                    new_edges2 = (_append(new_edges2, (_idx(edges2, j) as! [Int])) as! [[Int]])
                }
                j = _int((j &+ 1))
            }
            var m2 = g.graph
            m2 = _set(m2, v, (new_edges2 as! [[Int]]))
            g.graph = (m2 as! [Int: [[Int]]])
        }
    }
    func g_all_nodes(_ g: Graph) -> [Int] {
        var res: [Int] = ([] as! [Int])
        for k in g.graph.keys.sorted() {
            res = (_append(res, k) as! [Int])
        }
        return res
    }
    func g_dfs_util(_ g: Graph, _ node: Int, _ visited: inout [Int: Bool], _ order: inout [Int], _ d: Int) -> [Int] {
        visited = _set(visited, node, true)
        order = (_append(order, node) as! [Int])
        if ((d != _int(-1)) && (node == d)) {
            return order
        }
        var edges = ((g.graph[node] ?? []) as! [[Int]])
        var i = 0
        while (i < _int(((edges).count))) {
            let neigh = (_idx(_idx(edges, i)!, 1) as? Int ?? 0)
            if (!(visited[neigh] != nil)) {
                order = (g_dfs_util((g as! Graph), neigh, &visited, &order, d) as! [Int])
                if ((d != _int(-1)) && ((_idx(order, (_int(((order).count)) &- 1)) as? Int ?? 0) == d)) {
                    return order
                }
            }
            i = _int((i &+ 1))
        }
        return order
    }
    func g_dfs(_ g: Graph, _ s: Int, _ d: Int) -> [Int] {
        if (s == d) {
            return ([] as! [Int])
        }
        let start = _int(((s == _int(-2)) ? _int(first_key((g.graph as! [Int: [[Int]]]))) : s))
        var visited: [Int: Bool] = ([:] as! [Int: Bool])
        var order: [Int] = ([] as! [Int])
        order = (g_dfs_util((g as! Graph), start, &visited, &order, d) as! [Int])
        return order
    }
    func g_bfs(_ g: Graph, _ s: Int) -> [Int] {
        var queue: [Int] = ([] as! [Int])
        var visited: [Int: Bool] = ([:] as! [Int: Bool])
        var order: [Int] = ([] as! [Int])
        let start = _int(((s == _int(-2)) ? _int(first_key((g.graph as! [Int: [[Int]]]))) : s))
        queue = (_append(queue, start) as! [Int])
        visited = _set(visited, start, true)
        while (_int(((queue).count)) > 0) {
            let node = (_idx(queue, 0) as? Int ?? 0)
            queue = (_slice(Array(queue), 1, _int(((queue).count))) as! [Int])
            order = (_append(order, node) as! [Int])
            var edges = ((g.graph[node] ?? []) as! [[Int]])
            var i = 0
            while (i < _int(((edges).count))) {
                let neigh = (_idx(_idx(edges, i)!, 1) as? Int ?? 0)
                if (!(visited[neigh] != nil)) {
                    queue = (_append(queue, neigh) as! [Int])
                    visited = _set(visited, neigh, true)
                }
                i = _int((i &+ 1))
            }
        }
        return order
    }
    func g_degree(_ g: Graph, _ u: Int) -> Int {
        if (g.graph[u] != nil) {
            return _int(((((g.graph[u] ?? []) as! [[Int]])).count))
        }
        return 0
    }
    func g_cycle_util(_ g: Graph, _ node: Int, _ visited: inout [Int: Bool], _ parent: Int, _ res: inout [Int]) -> [Int] {
        visited = _set(visited, node, true)
        var edges = ((g.graph[node] ?? []) as! [[Int]])
        var i = 0
        while (i < _int(((edges).count))) {
            let neigh = (_idx(_idx(edges, i)!, 1) as? Int ?? 0)
            if (!(visited[neigh] != nil)) {
                res = (g_cycle_util((g as! Graph), neigh, &visited, node, &res) as! [Int])
            } else if (neigh != parent) {
                if (!list_contains_int((res as! [Int]), neigh)) {
                    res = (_append(res, neigh) as! [Int])
                }
                if (!list_contains_int((res as! [Int]), node)) {
                    res = (_append(res, node) as! [Int])
                }
            }
            
            i = _int((i &+ 1))
        }
        return res
    }
    func g_cycle_nodes(_ g: Graph) -> [Int] {
        var visited: [Int: Bool] = ([:] as! [Int: Bool])
        var res: [Int] = ([] as! [Int])
        for k in g.graph.keys.sorted() {
            if (!(visited[k] != nil)) {
                res = (g_cycle_util((g as! Graph), k, &visited, -1, &res) as! [Int])
            }
        }
        return res
    }
    func g_has_cycle_util(_ g: Graph, _ node: Int, _ visited: inout [Int: Bool], _ parent: Int) -> Bool {
        visited = _set(visited, node, true)
        var edges = ((g.graph[node] ?? []) as! [[Int]])
        var i = 0
        while (i < _int(((edges).count))) {
            let neigh = (_idx(_idx(edges, i)!, 1) as? Int ?? 0)
            if (!(visited[neigh] != nil)) {
                if g_has_cycle_util((g as! Graph), neigh, &visited, node) {
                    return true
                }
            } else if (neigh != parent) {
                return true
            }
            
            i = _int((i &+ 1))
        }
        return false
    }
    func g_has_cycle(_ g: Graph) -> Bool {
        var visited: [Int: Bool] = ([:] as! [Int: Bool])
        for k in g.graph.keys.sorted() {
            if (!(visited[k] != nil)) {
                if g_has_cycle_util((g as! Graph), k, &visited, -1) {
                    return true
                }
            }
        }
        return false
    }
    func g_fill_graph_randomly(_ g: inout Graph, _ c: Int) {
        var count = c
        if (count == _int(-1)) {
            count = _int(rand_range(10, 10010))
        }
        var i = 0
        while (i < count) {
            var edge_count = _int(rand_range(1, 103))
            var j = 0
            while (j < edge_count) {
                let n = _int(rand_range(0, count))
                if (n != i) {
                    _ = g_add_pair(&g, i, n, 1)
                }
                j = _int((j &+ 1))
            }
            i = _int((i &+ 1))
        }
    }
    func g_dfs_time(_ g: Graph, _ s: Int, _ e: Int) -> Int {
        let begin = _int(_now())
        _ = (g_dfs((g as! Graph), s, e) as! [Int])
        let end = _int(_now())
        return (end &- begin)
    }
    func g_bfs_time(_ g: Graph, _ s: Int) -> Int {
        let begin = _int(_now())
        _ = (g_bfs((g as! Graph), s) as! [Int])
        let end = _int(_now())
        return (end &- begin)
    }
    func main() {
        var dg = dg_make_graph()
        _ = dg_add_pair(&dg, 0, 1, 5)
        _ = dg_add_pair(&dg, 0, 2, 3)
        _ = dg_add_pair(&dg, 1, 3, 2)
        _ = dg_add_pair(&dg, 2, 3, 4)
        print(_p("[" + (dg_dfs((dg as! DirectedGraph), -2, -1) as! [Int]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
        print(_p("[" + (dg_bfs((dg as! DirectedGraph), -2) as! [Int]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
        print(_p(_p(_int(dg_in_degree((dg as! DirectedGraph), 3)))))
        print(_p(_p(_int(dg_out_degree((dg as! DirectedGraph), 0)))))
        print(_p("[" + (dg_topological_sort((dg as! DirectedGraph)) as! [Int]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
        print(_p(_p(dg_has_cycle((dg as! DirectedGraph)))))
        var ug = g_make_graph()
        _ = g_add_pair(&ug, 0, 1, 1)
        _ = g_add_pair(&ug, 1, 2, 1)
        _ = g_add_pair(&ug, 2, 0, 1)
        print(_p("[" + (g_dfs((ug as! Graph), -2, -1) as! [Int]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
        print(_p("[" + (g_bfs((ug as! Graph), -2) as! [Int]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
        print(_p(_p(_int(g_degree((ug as! Graph), 1)))))
        print(_p(_p(g_has_cycle((ug as! Graph)))))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
