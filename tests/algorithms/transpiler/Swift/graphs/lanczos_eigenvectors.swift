// Generated by Mochi transpiler v0.10.60 on 2025-08-08 10:44:31 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
struct LanczosResult: Codable {
    var t: [[Double]]
    var q: [[Double]]
    init() {
        self.t = []
        self.q = []
    }
    init(t: [[Double]], q: [[Double]]) {
        self.t = t
        self.q = q
    }
}
struct EigenResult: Codable {
    var values: [Double]
    var vectors: [[Double]]
    init() {
        self.values = []
        self.vectors = []
    }
    init(values: [Double], vectors: [[Double]]) {
        self.values = values
        self.vectors = vectors
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    var seed: Int = 123456789
    func rand() -> Int {
        seed = _int(((_int(((seed &* 1103515245) &+ 12345)) % 2147483648 + 2147483648) % 2147483648))
        return seed
    }
    func random() -> Double {
        return (Double((1.0 * Double(_int(rand())))) / 2147483648.0)
    }
    func sqrtApprox(_ x: Double) -> Double {
        if (x <= 0.0) {
            return 0.0
        }
        var guess: Double = x
        var i: Int = 0
        while (i < 20) {
            guess = Double((Double((guess + (x / guess))) / 2.0))
            i = _int((i &+ 1))
        }
        return guess
    }
    func absf(_ x: Double) -> Double {
        return Double(((x < 0.0) ? -x : x))
    }
    func dot(_ a: [Double], _ b: [Double]) -> Double {
        var s: Double = 0.0
        var i: Int = 0
        while (i < _int(((a).count))) {
            s = Double((s + (Double(a[i]) * Double(b[i]))))
            i = _int((i &+ 1))
        }
        return s
    }
    func vector_scale(_ v: [Double], _ s: Double) -> [Double] {
        var res: [Double] = ([] as! [Double])
        var i: Int = 0
        while (i < _int(((v).count))) {
            res = (_append(res, (Double(v[i]) * s)) as! [Double])
            i = _int((i &+ 1))
        }
        return res
    }
    func vector_sub(_ a: [Double], _ b: [Double]) -> [Double] {
        var res: [Double] = ([] as! [Double])
        var i: Int = 0
        while (i < _int(((a).count))) {
            res = (_append(res, (Double(a[i]) - Double(b[i]))) as! [Double])
            i = _int((i &+ 1))
        }
        return res
    }
    func vector_add(_ a: [Double], _ b: [Double]) -> [Double] {
        var res: [Double] = ([] as! [Double])
        var i: Int = 0
        while (i < _int(((a).count))) {
            res = (_append(res, (Double(a[i]) + Double(b[i]))) as! [Double])
            i = _int((i &+ 1))
        }
        return res
    }
    func zeros_matrix(_ r: Int, _ c: Int) -> [[Double]] {
        var m: [[Double]] = ([] as! [[Double]])
        var i: Int = 0
        while (i < r) {
            var row: [Double] = ([] as! [Double])
            var j: Int = 0
            while (j < c) {
                row = (_append(row, 0.0) as! [Double])
                j = _int((j &+ 1))
            }
            m = (_append(m, row) as! [[Double]])
            i = _int((i &+ 1))
        }
        return m
    }
    func column(_ m: [[Double]], _ idx: Int) -> [Double] {
        var col: [Double] = ([] as! [Double])
        var i: Int = 0
        while (i < _int(((m).count))) {
            col = (_append(col, Double(m[i][idx])) as! [Double])
            i = _int((i &+ 1))
        }
        return col
    }
    func validate_adjacency_list(_ graph: [[Int]]) -> Void {
        var i: Int = 0
        while (i < _int(((graph).count))) {
            var j: Int = 0
            while (j < _int((((graph[i] as! [Int])).count))) {
                let v = (graph[i][j] as? Int ?? 0)
                if ((v < 0) || (v >= _int(((graph).count)))) {
                    _ = fatalError("Invalid neighbor")
                }
                j = _int((j &+ 1))
            }
            i = _int((i &+ 1))
        }
    }
    func multiply_matrix_vector(_ graph: [[Int]], _ vector: [Double]) -> [Double] {
        let n = _int(((graph).count))
        if (_int(((vector).count)) != n) {
            _ = fatalError("Vector length must match number of nodes")
        }
        var result: [Double] = ([] as! [Double])
        var i: Int = 0
        while (i < n) {
            var sum: Double = 0.0
            var j: Int = 0
            while (j < _int((((graph[i] as! [Int])).count))) {
                let nb = (graph[i][j] as? Int ?? 0)
                sum = Double((sum + Double(vector[nb])))
                j = _int((j &+ 1))
            }
            result = (_append(result, sum) as! [Double])
            i = _int((i &+ 1))
        }
        return result
    }
    func lanczos_iteration(_ graph: [[Int]], _ k: Int) -> LanczosResult {
        let n = _int(((graph).count))
        if ((k < 1) || (k > n)) {
            _ = fatalError("invalid number of eigenvectors")
        }
        var q: [[Double]] = (zeros_matrix(n, k) as! [[Double]])
        var t: [[Double]] = (zeros_matrix(k, k) as! [[Double]])
        var v: [Double] = ([] as! [Double])
        var i: Int = 0
        while (i < n) {
            v = (_append(v, Double(random())) as! [Double])
            i = _int((i &+ 1))
        }
        var ss: Double = 0.0
        i = 0
        while (i < n) {
            ss = Double((ss + (Double(v[i]) * Double(v[i]))))
            i = _int((i &+ 1))
        }
        let vnorm = Double(sqrtApprox(Double(ss)))
        i = 0
        while (i < n) {
            q[i][0] = Double((Double(v[i]) / vnorm))
            i = _int((i &+ 1))
        }
        var beta: Double = 0.0
        var j: Int = 0
        while (j < k) {
            var w: [Double] = (multiply_matrix_vector((graph as! [[Int]]), (column((q as! [[Double]]), j) as! [Double])) as! [Double])
            if (j > 0) {
                w = (vector_sub((w as! [Double]), (vector_scale((column((q as! [[Double]]), (j &- 1)) as! [Double]), Double(beta)) as! [Double])) as! [Double])
            }
            let alpha = Double(dot((column((q as! [[Double]]), j) as! [Double]), (w as! [Double])))
            w = (vector_sub((w as! [Double]), (vector_scale((column((q as! [[Double]]), j) as! [Double]), Double(alpha)) as! [Double])) as! [Double])
            var ss2: Double = 0.0
            var p: Int = 0
            while (p < n) {
                ss2 = Double((ss2 + (Double(w[p]) * Double(w[p]))))
                p = _int((p &+ 1))
            }
            beta = Double(sqrtApprox(Double(ss2)))
            t[j][j] = Double(alpha)
            if (j < (k &- 1)) {
                t[j][(j &+ 1)] = Double(beta)
                t[(j &+ 1)][j] = Double(beta)
                if (beta > 0.0000000001) {
                    var wnorm: [Double] = (vector_scale((w as! [Double]), Double((1.0 / beta))) as! [Double])
                    var r: Int = 0
                    while (r < n) {
                        q[r][(j &+ 1)] = Double(wnorm[r])
                        r = _int((r &+ 1))
                    }
                }
            }
            j = _int((j &+ 1))
        }
        return LanczosResult(t: t, q: q)
    }
    func jacobi_eigen(_ a_in: [[Double]], _ max_iter: Int) -> EigenResult {
        let n = _int(((a_in).count))
        var a: [[Double]] = a_in
        var v: [[Double]] = (zeros_matrix(n, n) as! [[Double]])
        var i: Int = 0
        while (i < n) {
            v[i][i] = 1.0
            i = _int((i &+ 1))
        }
        var iter: Int = 0
        while (iter < max_iter) {
            var p: Int = 0
            var q: Int = 1
            var max: Double = Double(absf(Double(a[p][q])))
            i = 0
            while (i < n) {
                var j: Int = (i &+ 1)
                while (j < n) {
                    let val = Double(absf(Double(a[i][j])))
                    if (val > max) {
                        max = Double(val)
                        p = Int(i)
                        q = Int(j)
                    }
                    j = _int((j &+ 1))
                }
                i = _int((i &+ 1))
            }
            if (max < 0.00000001) {
                break
            }
            let app = Double(a[p][p])
            let aqq = Double(a[q][q])
            let apq = Double(a[p][q])
            let theta = (Double((aqq - app)) / Double((2.0 * apq)))
            var t: Double = (1.0 / Double((Double(absf(Double(theta))) + Double(sqrtApprox(Double(((theta * theta) + 1.0)))))))
            if (theta < 0.0) {
                t = Double(-t)
            }
            let c = (1.0 / Double(sqrtApprox(Double((1.0 + (t * t))))))
            let s = (t * c)
            let tau = (s / Double((1.0 + c)))
            a[p][p] = Double((app - (t * apq)))
            a[q][q] = Double((aqq + (t * apq)))
            a[p][q] = 0.0
            a[q][p] = 0.0
            var k: Int = 0
            while (k < n) {
                if ((k != p) && (k != q)) {
                    let akp = Double(a[k][p])
                    let akq = Double(a[k][q])
                    a[k][p] = Double((akp - (s * Double((akq + (tau * akp))))))
                    a[p][k] = Double(a[k][p])
                    a[k][q] = Double((akq + (s * Double((akp - (tau * akq))))))
                    a[q][k] = Double(a[k][q])
                }
                k = _int((k &+ 1))
            }
            k = 0
            while (k < n) {
                let vkp = Double(v[k][p])
                let vkq = Double(v[k][q])
                v[k][p] = Double((vkp - (s * Double((vkq + (tau * vkp))))))
                v[k][q] = Double((vkq + (s * Double((vkp - (tau * vkq))))))
                k = _int((k &+ 1))
            }
            iter = _int((iter &+ 1))
        }
        var eigenvalues: [Double] = ([] as! [Double])
        i = 0
        while (i < n) {
            eigenvalues = (_append(eigenvalues, Double(a[i][i])) as! [Double])
            i = _int((i &+ 1))
        }
        return EigenResult(values: eigenvalues, vectors: v)
    }
    func matmul(_ a: [[Double]], _ b: [[Double]]) -> [[Double]] {
        let rows = _int(((a).count))
        let cols = _int((((b[0] as! [Double])).count))
        let inner = _int(((b).count))
        var m: [[Double]] = (zeros_matrix(rows, cols) as! [[Double]])
        var i: Int = 0
        while (i < rows) {
            var j: Int = 0
            while (j < cols) {
                var s: Double = 0.0
                var k: Int = 0
                while (k < inner) {
                    s = Double((s + (Double(a[i][k]) * Double(b[k][j]))))
                    k = _int((k &+ 1))
                }
                m[i][j] = Double(s)
                j = _int((j &+ 1))
            }
            i = _int((i &+ 1))
        }
        return m
    }
    func sort_eigenpairs(_ vals: [Double], _ vecs: [[Double]]) -> EigenResult {
        let n = _int(((vals).count))
        var values: [Double] = vals
        var vectors: [[Double]] = vecs
        var i: Int = 0
        while (i < n) {
            var j: Int = 0
            while (j < (n &- 1)) {
                if (Double(values[j]) < Double(values[(j &+ 1)])) {
                    let tmp = Double(values[j])
                    values = _set(values, j, Double(values[(j &+ 1)]))
                    values = _set(values, (j &+ 1), Double(tmp))
                    var r: Int = 0
                    while (r < _int(((vectors).count))) {
                        let tv = Double(vectors[r][j])
                        vectors[r][j] = Double(vectors[r][(j &+ 1)])
                        vectors[r][(j &+ 1)] = Double(tv)
                        r = _int((r &+ 1))
                    }
                }
                j = _int((j &+ 1))
            }
            i = _int((i &+ 1))
        }
        return EigenResult(values: values, vectors: vectors)
    }
    func find_lanczos_eigenvectors(_ graph: [[Int]], _ k: Int) -> EigenResult {
        _ = validate_adjacency_list((graph as! [[Int]]))
        let res = lanczos_iteration((graph as! [[Int]]), k)
        let eig = jacobi_eigen((res.t as! [[Double]]), 50)
        let sorted = sort_eigenpairs((eig.values as! [Double]), (eig.vectors as! [[Double]]))
        let final_vectors: [[Double]] = (matmul((res.q as! [[Double]]), (sorted.vectors as! [[Double]])) as! [[Double]])
        return EigenResult(values: sorted.values, vectors: final_vectors)
    }
    func list_to_string(_ arr: [Double]) -> String {
        var s: String = "["
        var i: Int = 0
        while (i < _int(((arr).count))) {
            s = ((s + _p(Double(arr[i]))) as! String)
            if (i < (_int(((arr).count)) &- 1)) {
                s = ((s + ", ") as! String)
            }
            i = _int((i &+ 1))
        }
        return (s + "]")
    }
    func matrix_to_string(_ m: [[Double]]) -> String {
        var s: String = "["
        var i: Int = 0
        while (i < _int(((m).count))) {
            s = ((s + String(describing: list_to_string((m[i] as! [Double])))) as! String)
            if (i < (_int(((m).count)) &- 1)) {
                s = ((s + "; ") as! String)
            }
            i = _int((i &+ 1))
        }
        return (s + "]")
    }
    let graph: [[Int]] = ([([1, 2] as! [Int]), ([0, 2] as! [Int]), ([0, 1] as! [Int])] as! [[Int]])
    var result = find_lanczos_eigenvectors((graph as! [[Int]]), 2)
    print(_p(String(describing: list_to_string((result.values as! [Double])))))
    print(_p(String(describing: matrix_to_string((result.vectors as! [[Double]])))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
