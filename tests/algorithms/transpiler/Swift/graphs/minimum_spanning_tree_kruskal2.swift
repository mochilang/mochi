// Generated by Mochi transpiler v0.10.60 on 2025-08-08 10:44:43 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
struct Edge: Codable {
    var u: Int
    var v: Int
    var w: Int
    init() {
        self.u = 0
        self.v = 0
        self.w = 0
    }
    init(u: Int, v: Int, w: Int) {
        self.u = u
        self.v = v
        self.w = w
    }
}
struct Graph: Codable {
    var edges: [Edge]
    var num_nodes: Int
    init() {
        self.edges = []
        self.num_nodes = 0
    }
    init(edges: [Edge], num_nodes: Int) {
        self.edges = edges
        self.num_nodes = num_nodes
    }
}
struct DS: Codable {
    var parent: [Int]
    var rank: [Int]
    init() {
        self.parent = []
        self.rank = []
    }
    init(parent: [Int], rank: [Int]) {
        self.parent = parent
        self.rank = rank
    }
}
struct FindResult: Codable {
    var ds: DS
    var root: Int
    init() {
        self.ds = DS()
        self.root = 0
    }
    init(ds: DS, root: Int) {
        self.ds = ds
        self.root = root
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func new_graph() -> Graph {
        return Graph(edges: [], num_nodes: 0)
    }
    func add_edge(_ g: Graph, _ u: Int, _ v: Int, _ w: Int) -> Graph {
        var es: [Edge] = g.edges
        es = (_append(es, Edge(u: u, v: v, w: w)) as! [Edge])
        var n: Int = g.num_nodes
        if (u > n) {
            n = Int(u)
        }
        if (v > n) {
            n = Int(v)
        }
        return Graph(edges: es, num_nodes: n)
    }
    func make_ds(_ n: Int) -> DS {
        var parent: [Int] = ([] as! [Int])
        var rank: [Int] = ([] as! [Int])
        var i: Int = 0
        while (i <= n) {
            parent = (_append(parent, i) as! [Int])
            rank = (_append(rank, 0) as! [Int])
            i = _int((i &+ 1))
        }
        return DS(parent: parent, rank: rank)
    }
    func find_set(_ ds: DS, _ x: Int) -> FindResult {
        if ((ds.parent[x] as? Int ?? 0) == x) {
            return FindResult(ds: ds, root: x)
        }
        let res = find_set((ds as! DS), (ds.parent[x] as? Int ?? 0))
        var p: [Int] = res.ds.parent
        p = _set(p, x, _int(res.root))
        return FindResult(ds: DS(parent: p, rank: res.ds.rank), root: res.root)
    }
    func union_set(_ ds: DS, _ x: Int, _ y: Int) -> DS {
        let fx = find_set((ds as! DS), x)
        let ds1 = fx.ds
        let x_root = fx.root
        let fy = find_set((ds1 as! DS), y)
        var ds2: DS = fy.ds
        let y_root = fy.root
        if (x_root == y_root) {
            return ds2
        }
        var p: [Int] = ds2.parent
        var r: [Int] = ds2.rank
        if ((r[x_root] as? Int ?? 0) > (r[y_root] as? Int ?? 0)) {
            p = _set(p, y_root, Int(x_root))
        } else {
            p = _set(p, x_root, Int(y_root))
            if ((r[x_root] as? Int ?? 0) == (r[y_root] as? Int ?? 0)) {
                r = _set(r, y_root, _int(((r[y_root] as? Int ?? 0) &+ 1)))
            }
        }
        return DS(parent: p, rank: r)
    }
    func sort_edges(_ edges: [Edge]) -> [Edge] {
        var arr: [Edge] = edges
        var i: Int = 1
        while (i < _int(((arr).count))) {
            let key = (arr[i] as! Edge)
            var j: Int = (i &- 1)
            while (j >= 0) {
                let temp = (arr[j] as! Edge)
                if ((temp.w > key.w) || ((temp.w == key.w) && ((temp.u > key.u) || ((temp.u == key.u) && (temp.v > key.v))))) {
                    arr = _set(arr, (j &+ 1), (temp as! Edge))
                    j = _int((j &- 1))
                } else {
                    break
                }
            }
            arr = _set(arr, (j &+ 1), (key as! Edge))
            i = _int((i &+ 1))
        }
        return arr
    }
    func kruskal(_ g: Graph) -> Graph {
        var edges: [Edge] = (sort_edges((g.edges as! [Edge])) as! [Edge])
        var ds: DS = make_ds(g.num_nodes)
        var mst_edges: [Edge] = ([] as! [Edge])
        var i: Int = 0
        var added: Int = 0
        while ((added < (g.num_nodes &- 1)) && (i < _int(((edges).count)))) {
            let e = (edges[i] as! Edge)
            i = _int((i &+ 1))
            let fu = find_set((ds as! DS), e.u)
            ds = (fu.ds as! DS)
            let ru = fu.root
            let fv = find_set((ds as! DS), e.v)
            ds = (fv.ds as! DS)
            let rv = fv.root
            if (ru != rv) {
                mst_edges = (_append(mst_edges, e) as! [Edge])
                added = _int((added &+ 1))
                ds = (union_set((ds as! DS), ru, rv) as! DS)
            }
        }
        return Graph(edges: mst_edges, num_nodes: g.num_nodes)
    }
    func print_mst(_ g: Graph) {
        var es: [Edge] = (sort_edges((g.edges as! [Edge])) as! [Edge])
        for e in es {
            print(_p(((((_p(e.u) + "-") + _p(e.v)) + ":") + _p(e.w))))
        }
    }
    func main() {
        var g: Graph = new_graph()
        g = (add_edge((g as! Graph), 1, 2, 1) as! Graph)
        g = (add_edge((g as! Graph), 2, 3, 2) as! Graph)
        g = (add_edge((g as! Graph), 3, 4, 1) as! Graph)
        g = (add_edge((g as! Graph), 3, 5, 100) as! Graph)
        g = (add_edge((g as! Graph), 4, 5, 5) as! Graph)
        let mst = kruskal((g as! Graph))
        _ = print_mst((mst as! Graph))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
