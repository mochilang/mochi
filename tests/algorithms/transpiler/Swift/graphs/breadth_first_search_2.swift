// Generated by Mochi transpiler v0.10.59 on 2025-08-07 09:59:16 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func join(_ xs: [String]) -> String {
        var s: String = ""
        var i: Int = 0
        while (i < Int(((xs).count))) {
            s = ((s + (xs[i] as! String)) as! String)
            i = Int((i &+ 1))
        }
        return s
    }
    func breadth_first_search(_ graph: [String: [String]], _ start: String) -> [String] {
        var explored: [String: Bool] = ([:] as! [String: Bool])
        explored = _set(explored, String(describing: start), true)
        var result: [String] = ([start] as! [String])
        var queue: [String] = ([start] as! [String])
        while (Int(((queue).count)) > 0) {
            let v = (queue[0] as! String)
            queue = (Array(queue[1..<Int(((queue).count))]) as! [String])
            let children: [String] = (graph[String(String(describing: v))] as! [String])
            var i: Int = 0
            while (i < Int(((children).count))) {
                let w = (children[i] as! String)
                if (!(explored[w] != nil)) {
                    explored = _set(explored, String(describing: w), true)
                    result = (_append(result, w) as! [String])
                    queue = (_append(queue, w) as! [String])
                }
                i = Int((i &+ 1))
            }
        }
        return result
    }
    func breadth_first_search_with_deque(_ graph: [String: [String]], _ start: String) -> [String] {
        var visited: [String: Bool] = ([:] as! [String: Bool])
        visited = _set(visited, String(describing: start), true)
        var result: [String] = ([start] as! [String])
        var queue: [String] = ([start] as! [String])
        var head: Int = 0
        while (head < Int(((queue).count))) {
            let v = (queue[head] as! String)
            head = Int((head &+ 1))
            let children: [String] = (graph[String(String(describing: v))] as! [String])
            var i: Int = 0
            while (i < Int(((children).count))) {
                let child = (children[i] as! String)
                if (!(visited[child] != nil)) {
                    visited = _set(visited, String(describing: child), true)
                    result = (_append(result, child) as! [String])
                    queue = (_append(queue, child) as! [String])
                }
                i = Int((i &+ 1))
            }
        }
        return result
    }
    let G: [String: [String]] = (["A": (["B", "C"] as! [String]), "B": (["A", "D", "E"] as! [String]), "C": (["A", "F"] as! [String]), "D": (["B"] as! [String]), "E": (["B", "F"] as! [String]), "F": (["C", "E"] as! [String])] as! [String: [String]])
    print(_p(String(describing: join((breadth_first_search((G as! [String: [String]]), "A") as! [String])))))
    print(_p(String(describing: join((breadth_first_search_with_deque((G as! [String: [String]]), "A") as! [String])))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
