// Generated by Mochi transpiler v0.10.65 on 2025-08-14 15:57:03 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
struct NodeCost: Codable {
    var node: String
    var cost: Int
    init() {
        self.node = ""
        self.cost = 0
    }
    init(node: String, cost: Int) {
        self.node = node
        self.cost = cost
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let G: [String: [String: Int]] = (["A": ["B": 2, "C": 5], "B": ["A": 2, "D": 3, "E": 1, "F": 1], "C": ["A": 5, "F": 3], "D": ["B": 3], "E": ["B": 4, "F": 3], "F": ["C": 3, "E": 3]] as! [String: [String: Int]])
    var heap: [NodeCost] = ({
        var _arr: [NodeCost] = []
        _arr = _append(_arr, NodeCost(node: "E", cost: 0))
        return _arr
    }() as! [NodeCost])
    var visited: [String: Bool] = ([:] as! [String: Bool])
    var result = -1
    while (_int(((heap).count)) > 0) {
        var best_idx = 0
        var i = 1
        while (i < _int(((heap).count))) {
            if (String(describing: (_idx(heap, i)!.cost)) < String(describing: (_idx(heap, best_idx)!.cost))
            ) {
                best_idx = Int(i)
            }
            i = _int((i &+ 1))
        }
        let best = (_idx(heap, best_idx) as! NodeCost)
        var new_heap: [NodeCost] = ([] as! [NodeCost])
        var j = 0
        while (j < _int(((heap).count))) {
            if (j != best_idx) {
                new_heap = (_append(new_heap, (_idx(heap, j) as! NodeCost)) as! [NodeCost])
            }
            j = _int((j &+ 1))
        }
        heap = (new_heap as! [NodeCost])
        let u = best.node
        let cost = best.cost
        if (visited[u] != nil) {
            continue
        }
        visited = _set(visited, String(describing: u), true)
        if (u == "C") {
            result = Int(cost)
            break
        }
        for v in (G[String(String(describing: u))] ?? [:] as! [String: Int]).keys.sorted() {
            if (visited[v] != nil) {
                continue
            }
            let next_cost = (cost &+ (G[String(String(describing: u))]![String(String(describing: v))] ?? 0 as? Int ?? 0))
            heap = (_append(heap, NodeCost(node: String(describing: v), cost: Int(next_cost))) as! [NodeCost])
        }
    }
    print(_p(result))
    let G2: [String: [String: Int]] = (["B": ["C": 1], "C": ["D": 1], "D": ["F": 1], "E": ["B": 1, "F": 3], "F": [:]] as! [String: [String: Int]])
    var heap2: [NodeCost] = ({
        var _arr: [NodeCost] = []
        _arr = _append(_arr, NodeCost(node: "E", cost: 0))
        return _arr
    }() as! [NodeCost])
    var visited2: [String: Bool] = ([:] as! [String: Bool])
    var result2 = -1
    while (_int(((heap2).count)) > 0) {
        var best2_idx = 0
        var i2 = 1
        while (i2 < _int(((heap2).count))) {
            if (String(describing: (_idx(heap2, i2)!.cost)) < String(describing: (_idx(heap2, best2_idx)!.cost))
            ) {
                best2_idx = Int(i2)
            }
            i2 = _int((i2 &+ 1))
        }
        let best2 = (_idx(heap2, best2_idx) as! NodeCost)
        var new_heap2: [NodeCost] = ([] as! [NodeCost])
        var j2 = 0
        while (j2 < _int(((heap2).count))) {
            if (j2 != best2_idx) {
                new_heap2 = (_append(new_heap2, (_idx(heap2, j2) as! NodeCost)) as! [NodeCost])
            }
            j2 = _int((j2 &+ 1))
        }
        heap2 = (new_heap2 as! [NodeCost])
        let u2 = best2.node
        let cost2 = best2.cost
        if (visited2[u2] != nil) {
            continue
        }
        visited2 = _set(visited2, String(describing: u2), true)
        if (u2 == "F") {
            result2 = Int(cost2)
            break
        }
        for v2 in (G2[String(String(describing: u2))] ?? [:] as! [String: Int]).keys.sorted() {
            if (visited2[v2] != nil) {
                continue
            }
            let next_cost2 = (cost2 &+ (G2[String(String(describing: u2))]![String(String(describing: v2))] ?? 0 as? Int ?? 0))
            heap2 = (_append(heap2, NodeCost(node: String(describing: v2), cost: Int(next_cost2))) as! [NodeCost])
        }
    }
    print(_p(result2))
    let G3: [String: [String: Int]] = (["B": ["C": 1], "C": ["D": 1], "D": ["F": 1], "E": ["B": 1, "G": 2], "F": [:], "G": ["F": 1]] as! [String: [String: Int]])
    var heap3: [NodeCost] = ({
        var _arr: [NodeCost] = []
        _arr = _append(_arr, NodeCost(node: "E", cost: 0))
        return _arr
    }() as! [NodeCost])
    var visited3: [String: Bool] = ([:] as! [String: Bool])
    var result3 = -1
    while (_int(((heap3).count)) > 0) {
        var best3_idx = 0
        var i3 = 1
        while (i3 < _int(((heap3).count))) {
            if (String(describing: (_idx(heap3, i3)!.cost)) < String(describing: (_idx(heap3, best3_idx)!.cost))
            ) {
                best3_idx = Int(i3)
            }
            i3 = _int((i3 &+ 1))
        }
        let best3 = (_idx(heap3, best3_idx) as! NodeCost)
        var new_heap3: [NodeCost] = ([] as! [NodeCost])
        var j3 = 0
        while (j3 < _int(((heap3).count))) {
            if (j3 != best3_idx) {
                new_heap3 = (_append(new_heap3, (_idx(heap3, j3) as! NodeCost)) as! [NodeCost])
            }
            j3 = _int((j3 &+ 1))
        }
        heap3 = (new_heap3 as! [NodeCost])
        let u3 = best3.node
        let cost3 = best3.cost
        if (visited3[u3] != nil) {
            continue
        }
        visited3 = _set(visited3, String(describing: u3), true)
        if (u3 == "F") {
            result3 = Int(cost3)
            break
        }
        for v3 in (G3[String(String(describing: u3))] ?? [:] as! [String: Int]).keys.sorted() {
            if (visited3[v3] != nil) {
                continue
            }
            let next_cost3 = (cost3 &+ (G3[String(String(describing: u3))]![String(String(describing: v3))] ?? 0 as? Int ?? 0))
            heap3 = (_append(heap3, NodeCost(node: String(describing: v3), cost: Int(next_cost3))) as! [NodeCost])
        }
    }
    print(_p(result3))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
