// Generated by Mochi transpiler v0.10.65 on 2025-08-14 17:13:37 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
struct Dinic: Codable {
    var n: Int
    var lvl: [Int]
    var ptr: [Int]
    var q: [Int]
    var adj: [[[Int]]]
    init() {
        self.n = 0
        self.lvl = []
        self.ptr = []
        self.q = []
        self.adj = []
    }
    init(n: Int, lvl: [Int], ptr: [Int], q: [Int], adj: [[[Int]]]) {
        self.n = n
        self.lvl = lvl
        self.ptr = ptr
        self.q = q
        self.adj = adj
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let INF: Int = 1000000000
    func pow2(_ k: Int) -> Int {
        var res = 1
        var i = 0
        while (i < k) {
            res = _int((res &* 2))
            i = _int((i &+ 1))
        }
        return res
    }
    func min2(_ a: Int, _ b: Int) -> Int {
        if (a < b) {
            return a
        }
        return b
    }
    func new_dinic(_ n: Int) -> Dinic {
        var lvl: [Int] = ([] as! [Int])
        var ptr: [Int] = ([] as! [Int])
        var q: [Int] = ([] as! [Int])
        var adj: [[[Int]]] = ([] as! [[[Int]]])
        var i = 0
        while (i < n) {
            lvl = (_append(lvl, 0) as! [Int])
            ptr = (_append(ptr, 0) as! [Int])
            q = (_append(q, 0) as! [Int])
            var edges: [[Int]] = ([] as! [[Int]])
            adj = (_append(adj, edges) as! [[[Int]]])
            i = _int((i &+ 1))
        }
        return Dinic(n: Int(n), lvl: (lvl as! [Int]), ptr: (ptr as! [Int]), q: (q as! [Int]), adj: (adj as! [[[Int]]]))
    }
    func add_edge(_ g: inout Dinic, _ a: Int, _ b: Int, _ c: Int, _ rcap: Int) -> Void {
        var adj: [[[Int]]] = g.adj
        var list_a: [[Int]] = (_idx(adj, a) as! [[Int]])
        var list_b: [[Int]] = (_idx(adj, b) as! [[Int]])
        let e1: [Int] = ({
            var _arr: [Int] = []
            _arr = _append(_arr, b)
            _arr = _append(_arr, _int(((list_b).count)))
            _arr = _append(_arr, c)
            _arr = _append(_arr, 0)
            return _arr
        }() as! [Int])
        let e2: [Int] = ({
            var _arr: [Int] = []
            _arr = _append(_arr, a)
            _arr = _append(_arr, _int(((list_a).count)))
            _arr = _append(_arr, rcap)
            _arr = _append(_arr, 0)
            return _arr
        }() as! [Int])
        list_a = (_append(list_a, e1) as! [[Int]])
        list_b = (_append(list_b, e2) as! [[Int]])
        adj = _set(adj, a, (list_a as! [[Int]]))
        adj = _set(adj, b, (list_b as! [[Int]]))
        g.adj = (adj as! [[[Int]]])
    }
    func dfs(_ g: inout Dinic, _ v: Int, _ sink: Int, _ flow: Int) -> Int {
        if ((v == sink) || (flow == 0)) {
            return flow
        }
        var ptr: [Int] = g.ptr
        var i = (_idx(ptr, v) as? Int ?? 0)
        var adj_all: [[[Int]]] = g.adj
        var adj_v: [[Int]] = (_idx(adj_all, v) as! [[Int]])
        while (i < _int(((adj_v).count))) {
            var e: [Int] = (_idx(adj_v, i) as! [Int])
            let to = (_idx(e, 0) as? Int ?? 0)
            if ((_idx(g.lvl, to) as? Int ?? 0) == ((_idx(g.lvl, v) as? Int ?? 0) &+ 1)) {
                let avail = ((_idx(e, 2) as? Int ?? 0) &- (_idx(e, 3) as? Int ?? 0))
                let pushed = _int(dfs(&g, to, sink, _int(min2(flow, avail))))
                if (pushed > 0) {
                    e = _set(e, 3, _int(((_idx(e, 3) as? Int ?? 0) &+ pushed)))
                    adj_v = _set(adj_v, i, (e as! [Int]))
                    var adj_to: [[Int]] = (_idx(adj_all, to) as! [[Int]])
                    var back: [Int] = (_idx(adj_to, (_idx(e, 1) as? Int ?? 0)) as! [Int])
                    back = _set(back, 3, _int(((_idx(back, 3) as? Int ?? 0) &- pushed)))
                    adj_to = _set(adj_to, (_idx(e, 1) as? Int ?? 0), (back as! [Int]))
                    adj_all = _set(adj_all, to, (adj_to as! [[Int]]))
                    adj_all = _set(adj_all, v, (adj_v as! [[Int]]))
                    g.adj = (adj_all as! [[[Int]]])
                    return pushed
                }
            }
            i = _int((i &+ 1))
            ptr = _set(ptr, v, Int(i))
        }
        g.ptr = (ptr as! [Int])
        adj_all = _set(adj_all, v, (adj_v as! [[Int]]))
        g.adj = (adj_all as! [[[Int]]])
        return 0
    }
    func max_flow(_ g: inout Dinic, _ source: Int, _ sink: Int) -> Int {
        var flow = 0
        var l = 0
        while (l < 31) {
            let threshold = _int(pow2((30 &- l)))
            while true {
                var lvl: [Int] = ([] as! [Int])
                var ptr: [Int] = ([] as! [Int])
                var i = 0
                while (i < g.n) {
                    lvl = (_append(lvl, 0) as! [Int])
                    ptr = (_append(ptr, 0) as! [Int])
                    i = _int((i &+ 1))
                }
                g.lvl = (lvl as! [Int])
                g.ptr = (ptr as! [Int])
                var qi = 0
                var qe = 1
                lvl = _set(lvl, source, 1)
                g.lvl = (lvl as! [Int])
                var q: [Int] = g.q
                q = _set(q, 0, Int(source))
                while ((qi < qe) && ((_idx(g.lvl, sink) as? Int ?? 0) == 0)) {
                    let v = (_idx(q, qi) as? Int ?? 0)
                    qi = _int((qi &+ 1))
                    var edges: [[Int]] = (_idx(g.adj, v) as! [[Int]])
                    var j = 0
                    while (j < _int(((edges).count))) {
                        let e: [Int] = (_idx(edges, j) as! [Int])
                        let to = (_idx(e, 0) as? Int ?? 0)
                        let residual = ((_idx(e, 2) as? Int ?? 0) &- (_idx(e, 3) as? Int ?? 0))
                        var lvl_inner: [Int] = g.lvl
                        if (((_idx(lvl_inner, to) as? Int ?? 0) == 0) && (residual >= threshold)) {
                            q = _set(q, qe, Int(to))
                            qe = _int((qe &+ 1))
                            lvl_inner = _set(lvl_inner, to, _int(((_idx(lvl_inner, v) as? Int ?? 0) &+ 1)))
                            g.lvl = (lvl_inner as! [Int])
                        }
                        j = _int((j &+ 1))
                    }
                }
                var p = _int(dfs(&g, source, sink, INF))
                while (p > 0) {
                    flow = _int((flow &+ p))
                    p = _int(dfs(&g, source, sink, INF))
                }
                if ((_idx(g.lvl, sink) as? Int ?? 0) == 0) {
                    break
                }
            }
            l = _int((l &+ 1))
        }
        return flow
    }
    var graph = new_dinic(10)
    let source = 0
    let sink = 9
    var v = 1
    while (v < 5) {
        _ = add_edge(&graph, source, v, 1, 0)
        v = _int((v &+ 1))
    }
    v = 5
    while (v < 9) {
        _ = add_edge(&graph, v, sink, 1, 0)
        v = _int((v &+ 1))
    }
    v = 1
    while (v < 5) {
        _ = add_edge(&graph, v, (v &+ 4), 1, 0)
        v = _int((v &+ 1))
    }
    print(_p(_p(_int(max_flow(&graph, source, sink)))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
