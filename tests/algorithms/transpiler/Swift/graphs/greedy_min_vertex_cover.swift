// Generated by Mochi transpiler v0.10.66 on 2025-08-15 15:21:48 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _idx<K: Hashable, V>(_ m: [K: V], _ k: K) -> V? {
    return m[k]
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func remove_value(_ lst: [Int], _ val: Int) -> [Int] {
        var res: [Int] = ([] as! [Int])
        var i = 0
        while (i < _int(((lst).count))) {
            if ((_idx(lst, i) as? Int ?? 0) != val) {
                res = (_append(res, (_idx(lst, i) as? Int ?? 0)) as! [Int])
            }
            i = _int((i &+ 1))
        }
        return res
    }
    func greedy_min_vertex_cover(_ graph: [Int: [Int]]) -> [Int] {
        var g = graph
        var cover: [Int] = ([] as! [Int])
        while true {
            var max_v = 0
            var max_deg = 0
            for v in g.keys.sorted() {
                let key = Int(v)
                let deg = _int(((((g[key] ?? []) as! [Int])).count))
                if (deg > max_deg) {
                    max_deg = Int(deg)
                    max_v = Int(key)
                }
            }
            if (max_deg == 0) {
                break
            }
            cover = (_append(cover, max_v) as! [Int])
            let neighbors: [Int] = ((g[max_v] ?? []) as! [Int])
            var i = 0
            while (i < _int(((neighbors).count))) {
                let n = (_idx(neighbors, i) as? Int ?? 0)
                g = _set(g, n, (remove_value(((g[n] ?? []) as! [Int]), max_v) as! [Int]))
                i = _int((i &+ 1))
            }
            g = _set(g, max_v, ([] as! [Int]))
        }
        return cover
    }
    var graph: [Int: [Int]] = ([0: ({
        var _arr: [Int] = []
        _arr = _append(_arr, 1)
        _arr = _append(_arr, 3)
        return _arr
    }() as! [Int]), 1: ({
        var _arr: [Int] = []
        _arr = _append(_arr, 0)
        _arr = _append(_arr, 3)
        return _arr
    }() as! [Int]), 2: ({
        var _arr: [Int] = []
        _arr = _append(_arr, 0)
        _arr = _append(_arr, 3)
        _arr = _append(_arr, 4)
        return _arr
    }() as! [Int]), 3: ({
        var _arr: [Int] = []
        _arr = _append(_arr, 0)
        _arr = _append(_arr, 1)
        _arr = _append(_arr, 2)
        return _arr
    }() as! [Int]), 4: ({
        var _arr: [Int] = []
        _arr = _append(_arr, 2)
        _arr = _append(_arr, 3)
        return _arr
    }() as! [Int])] as! [Int: [Int]])
    print(_p("[" + (greedy_min_vertex_cover((graph as! [Int: [Int]])) as! [Int]).map{ if let s = $0 as? String { "\"" + s.replacingOccurrences(of: "\"", with: "\\\"") + "\"" } else { _p($0) } }.joined(separator: ", ") + "]"))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
