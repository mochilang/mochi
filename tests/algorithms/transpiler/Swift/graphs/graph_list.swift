// Generated by Mochi transpiler v0.10.60 on 2025-08-08 10:44:19 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
struct GraphAdjacencyList: Codable {
    var adj_list: [String: [String]]
    var directed: Bool
    init() {
        self.adj_list = [:]
        self.directed = false
    }
    init(adj_list: [String: [String]], directed: Bool) {
        self.adj_list = adj_list
        self.directed = directed
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func make_graph(_ directed: Bool) -> GraphAdjacencyList {
        var m: [String: [String]] = ([:] as! [String: [String]])
        return GraphAdjacencyList(adj_list: m, directed: directed)
    }
    func contains_vertex(_ m: [String: [String]], _ v: String) -> Bool {
        return (m[v] != nil)
    }
    func add_edge(_ g: inout GraphAdjacencyList, _ s: String, _ d: String) -> GraphAdjacencyList {
        var adj: [String: [String]] = g.adj_list
        if (!g.directed) {
            if (contains_vertex((adj as! [String: [String]]), (s as! String)) && contains_vertex((adj as! [String: [String]]), (d as! String))) {
                adj = _set(adj, String(describing: s), (_append((adj[String(String(describing: s))] as! [String]), d) as! [String]))
                adj = _set(adj, String(describing: d), (_append((adj[String(String(describing: d))] as! [String]), s) as! [String]))
            } else if contains_vertex((adj as! [String: [String]]), (s as! String)) {
                adj = _set(adj, String(describing: s), (_append((adj[String(String(describing: s))] as! [String]), d) as! [String]))
                adj = _set(adj, String(describing: d), ([s] as! [String]))
            } else if contains_vertex((adj as! [String: [String]]), (d as! String)) {
                adj = _set(adj, String(describing: d), (_append((adj[String(String(describing: d))] as! [String]), s) as! [String]))
                adj = _set(adj, String(describing: s), ([d] as! [String]))
            } else {
                adj = _set(adj, String(describing: s), ([d] as! [String]))
                adj = _set(adj, String(describing: d), ([s] as! [String]))
            }
            
            
        } else {
            if (contains_vertex((adj as! [String: [String]]), (s as! String)) && contains_vertex((adj as! [String: [String]]), (d as! String))) {
                adj = _set(adj, String(describing: s), (_append((adj[String(String(describing: s))] as! [String]), d) as! [String]))
            } else if contains_vertex((adj as! [String: [String]]), (s as! String)) {
                adj = _set(adj, String(describing: s), (_append((adj[String(String(describing: s))] as! [String]), d) as! [String]))
                adj = _set(adj, String(describing: d), ([] as! [String]))
            } else if contains_vertex((adj as! [String: [String]]), (d as! String)) {
                adj = _set(adj, String(describing: s), ([d] as! [String]))
            } else {
                adj = _set(adj, String(describing: s), ([d] as! [String]))
                adj = _set(adj, String(describing: d), ([] as! [String]))
            }
            
            
        }
        g.adj_list = (adj as! [String: [String]])
        return g
    }
    func graph_to_string(_ g: GraphAdjacencyList) -> String {
        return String(describing: g.adj_list)
    }
    var d_graph: GraphAdjacencyList = make_graph(true)
    d_graph = (add_edge(&d_graph, _p(0), _p(1)) as! GraphAdjacencyList)
    print(_p(String(describing: graph_to_string((d_graph as! GraphAdjacencyList)))))
    d_graph = (add_edge(&d_graph, _p(1), _p(2)) as! GraphAdjacencyList)
    d_graph = (add_edge(&d_graph, _p(1), _p(4)) as! GraphAdjacencyList)
    d_graph = (add_edge(&d_graph, _p(1), _p(5)) as! GraphAdjacencyList)
    print(_p(String(describing: graph_to_string((d_graph as! GraphAdjacencyList)))))
    d_graph = (add_edge(&d_graph, _p(2), _p(0)) as! GraphAdjacencyList)
    d_graph = (add_edge(&d_graph, _p(2), _p(6)) as! GraphAdjacencyList)
    d_graph = (add_edge(&d_graph, _p(2), _p(7)) as! GraphAdjacencyList)
    print(_p(String(describing: graph_to_string((d_graph as! GraphAdjacencyList)))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
