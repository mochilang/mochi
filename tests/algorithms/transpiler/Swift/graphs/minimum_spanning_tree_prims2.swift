// Generated by Mochi transpiler v0.10.66 on 2025-08-15 15:22:20 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _idx<K: Hashable, V>(_ m: [K: V], _ k: K) -> V? {
    return m[k]
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
struct QueueNode: Codable {
    var node: String
    var weight: Int
    init() {
        self.node = ""
        self.weight = 0
    }
    init(node: String, weight: Int) {
        self.node = node
        self.weight = weight
    }
}
struct MSTResult: Codable {
    var dist: [String: Int]
    var parent: [String: String]
    init() {
        self.dist = [:]
        self.parent = [:]
    }
    init(dist: [String: Int], parent: [String: String]) {
        self.dist = dist
        self.parent = parent
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func prims_algo(_ graph: [String: [String: Int]]) -> MSTResult {
        let INF = 2147483647
        var dist: [String: Int] = ([:] as! [String: Int])
        var parent: [String: String] = ([:] as! [String: String])
        var queue: [QueueNode] = ([] as! [QueueNode])
        for node in graph.keys.sorted() {
            dist = _set(dist, String(describing: node), Int(INF))
            parent = _set(parent, String(describing: node), "")
            queue = (_append(queue, QueueNode(node: String(describing: node), weight: Int(INF))) as! [QueueNode])
        }
        if (_int(((queue).count)) == 0) {
            return MSTResult(dist: (dist as! [String: Int]), parent: (parent as! [String: String]))
        }
        var min_idx = 0
        var i = 1
        while (i < _int(((queue).count))) {
            if (String(describing: (_idx(queue, i)!.weight)) < String(describing: (_idx(queue, min_idx)!.weight))
            ) {
                min_idx = Int(i)
            }
            i = _int((i &+ 1))
        }
        let start_node = (_idx(queue, min_idx) as! QueueNode)
        let start = start_node.node
        var new_q: [QueueNode] = ([] as! [QueueNode])
        var j = 0
        while (j < _int(((queue).count))) {
            if (j != min_idx) {
                new_q = (_append(new_q, (_idx(queue, j) as! QueueNode)) as! [QueueNode])
            }
            j = _int((j &+ 1))
        }
        queue = (new_q as! [QueueNode])
        dist = _set(dist, String(describing: start), 0)
        for neighbour in ((graph[String(String(describing: start))] ?? [:]) as! [String: Int]).keys.sorted() {
            let w = ((graph[String(String(describing: start))]![String(String(describing: neighbour))] ?? 0) as? Int ?? 0)
            if (((dist[String(String(describing: neighbour))] ?? 0) as? Int ?? 0) > (((dist[String(String(describing: start))] ?? 0) as? Int ?? 0) &+ w)) {
                dist = _set(dist, String(describing: neighbour), _int((((dist[String(String(describing: start))] ?? 0) as? Int ?? 0) &+ w)))
                parent = _set(parent, String(describing: neighbour), (start as! String))
                var k = 0
                while (k < _int(((queue).count))) {
                    if (String(describing: (_idx(queue, k)!.node)) == String(describing: neighbour)
                    ) {
                        var _tmp3 = (_idx(queue, k) as! QueueNode)
                        _tmp3.weight = ((dist[String(String(describing: neighbour))] ?? 0) as? Int ?? 0)
                        queue = _set(queue, k, (_tmp3 as! QueueNode))
                        break
                    }
                    k = _int((k &+ 1))
                }
            }
        }
        while (_int(((queue).count)) > 0) {
            var best_idx = 0
            var p = 1
            while (p < _int(((queue).count))) {
                if (String(describing: (_idx(queue, p)!.weight)) < String(describing: (_idx(queue, best_idx)!.weight))
                ) {
                    best_idx = Int(p)
                }
                p = _int((p &+ 1))
            }
            let node_entry = (_idx(queue, best_idx) as! QueueNode)
            let node = node_entry.node
            var tmp: [QueueNode] = ([] as! [QueueNode])
            var q = 0
            while (q < _int(((queue).count))) {
                if (q != best_idx) {
                    tmp = (_append(tmp, (_idx(queue, q) as! QueueNode)) as! [QueueNode])
                }
                q = _int((q &+ 1))
            }
            queue = (tmp as! [QueueNode])
            for neighbour in ((graph[String(String(describing: node))] ?? [:]) as! [String: Int]).keys.sorted() {
                let w = ((graph[String(String(describing: node))]![String(String(describing: neighbour))] ?? 0) as? Int ?? 0)
                if (((dist[String(String(describing: neighbour))] ?? 0) as? Int ?? 0) > (((dist[String(String(describing: node))] ?? 0) as? Int ?? 0) &+ w)) {
                    dist = _set(dist, String(describing: neighbour), _int((((dist[String(String(describing: node))] ?? 0) as? Int ?? 0) &+ w)))
                    parent = _set(parent, String(describing: neighbour), (node as! String))
                    var r = 0
                    while (r < _int(((queue).count))) {
                        if (String(describing: (_idx(queue, r)!.node)) == String(describing: neighbour)
                        ) {
                            var _tmp4 = (_idx(queue, r) as! QueueNode)
                            _tmp4.weight = ((dist[String(String(describing: neighbour))] ?? 0) as? Int ?? 0)
                            queue = _set(queue, r, (_tmp4 as! QueueNode))
                            break
                        }
                        r = _int((r &+ 1))
                    }
                }
            }
        }
        return MSTResult(dist: (dist as! [String: Int]), parent: (parent as! [String: String]))
    }
    func iabs(_ x: Int) -> Int {
        if (x < 0) {
            return -x
        }
        return x
    }
    var graph: [String: [String: Int]] = ([:] as! [String: [String: Int]])
    graph = _set(graph, "a", (["b": 3, "c": 15] as! [String: Int]))
    graph = _set(graph, "b", (["a": 3, "c": 10, "d": 100] as! [String: Int]))
    graph = _set(graph, "c", (["a": 15, "b": 10, "d": 5] as! [String: Int]))
    graph = _set(graph, "d", (["b": 100, "c": 5] as! [String: Int]))
    let res = prims_algo((graph as! [String: [String: Int]]))
    var dist: [String: Int] = res.dist
    print(_p(_p(_int(iabs((((dist[String("a")] ?? 0) as? Int ?? 0) &- ((dist[String("b")] ?? 0) as? Int ?? 0)))))))
    print(_p(_p(_int(iabs((((dist[String("d")] ?? 0) as? Int ?? 0) &- ((dist[String("b")] ?? 0) as? Int ?? 0)))))))
    print(_p(_p(_int(iabs((((dist[String("a")] ?? 0) as? Int ?? 0) &- ((dist[String("c")] ?? 0) as? Int ?? 0)))))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
