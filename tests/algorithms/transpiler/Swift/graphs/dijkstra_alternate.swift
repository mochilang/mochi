// Generated by Mochi transpiler v0.10.60 on 2025-08-08 10:43:53 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func minimum_distance(_ distances: [Int], _ visited: [Bool]) -> Int {
        var minimum: Int = 10000000
        var min_index: Int = 0
        var vertex: Int = 0
        while (vertex < _int(((distances).count))) {
            if (((distances[vertex] as? Int ?? 0) < minimum) && ((visited[vertex] as! Bool) == false)) {
                minimum = (distances[vertex] as? Int ?? 0)
                min_index = Int(vertex)
            }
            vertex = _int((vertex &+ 1))
        }
        return min_index
    }
    func dijkstra(_ graph: [[Int]], _ source: Int) -> [Int] {
        let vertices = _int(((graph).count))
        var distances: [Int] = []
        var i: Int = 0
        while (i < vertices) {
            distances = (_append(distances, 10000000) as! [Int])
            i = _int((i &+ 1))
        }
        distances = _set(distances, source, 0)
        var visited: [Bool] = []
        i = 0
        while (i < vertices) {
            visited = (_append(visited, false) as! [Bool])
            i = _int((i &+ 1))
        }
        var count: Int = 0
        while (count < vertices) {
            let u = _int(minimum_distance((distances as! [Int]), (visited as! [Bool])))
            visited = _set(visited, u, true)
            var v: Int = 0
            while (v < vertices) {
                if ((((graph[u][v] as? Int ?? 0) > 0) && ((visited[v] as! Bool) == false)) && ((distances[v] as? Int ?? 0) > ((distances[u] as? Int ?? 0) &+ (graph[u][v] as? Int ?? 0)))) {
                    distances = _set(distances, v, _int(((distances[u] as? Int ?? 0) &+ (graph[u][v] as? Int ?? 0))))
                }
                v = _int((v &+ 1))
            }
            count = _int((count &+ 1))
        }
        return distances
    }
    func print_solution(_ distances: [Int]) {
        print(_p("Vertex \t Distance from Source"))
        var v: Int = 0
        while (v < _int(((distances).count))) {
            print(_p(((_p(v) + "\t\t") + _p((distances[v] as? Int ?? 0)))))
            v = _int((v &+ 1))
        }
    }
    let graph: [[Int]] = ([([0, 4, 0, 0, 0, 0, 0, 8, 0] as! [Int]), ([4, 0, 8, 0, 0, 0, 0, 11, 0] as! [Int]), ([0, 8, 0, 7, 0, 4, 0, 0, 2] as! [Int]), ([0, 0, 7, 0, 9, 14, 0, 0, 0] as! [Int]), ([0, 0, 0, 9, 0, 10, 0, 0, 0] as! [Int]), ([0, 0, 4, 14, 10, 0, 2, 0, 0] as! [Int]), ([0, 0, 0, 0, 0, 2, 0, 1, 6] as! [Int]), ([8, 11, 0, 0, 0, 0, 1, 0, 7] as! [Int]), ([0, 0, 2, 0, 0, 0, 6, 7, 0] as! [Int])] as! [[Int]])
    var distances: [Int] = (dijkstra((graph as! [[Int]]), 0) as! [Int])
    _ = print_solution((distances as! [Int]))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
