// Generated by Mochi transpiler v0.10.60 on 2025-08-08 10:44:37 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func fill_row(_ current_row: inout [Int], _ row_above: [Int]) -> [Int] {
        current_row = _set(current_row, 0, _int(((current_row[0] as? Int ?? 0) &+ (row_above[0] as? Int ?? 0))))
        var cell_n: Int = 1
        while (cell_n < _int(((current_row).count))) {
            let left = (current_row[(cell_n &- 1)] as? Int ?? 0)
            let up = (row_above[cell_n] as? Int ?? 0)
            if (left < up) {
                current_row = _set(current_row, cell_n, _int(((current_row[cell_n] as? Int ?? 0) &+ left)))
            } else {
                current_row = _set(current_row, cell_n, _int(((current_row[cell_n] as? Int ?? 0) &+ up)))
            }
            cell_n = _int((cell_n &+ 1))
        }
        return current_row
    }
    func min_path_sum(_ grid: inout [[Int]]) -> Int {
        if ((_int(((grid).count)) == 0) || (_int((((grid[0] as! [Int])).count)) == 0)) {
            _ = fatalError("The grid does not contain the appropriate information")
        }
        var cell_n: Int = 1
        while (cell_n < _int((((grid[0] as! [Int])).count))) {
            grid[0][cell_n] = _int(((grid[0][cell_n] as? Int ?? 0) &+ (grid[0][(cell_n &- 1)] as? Int ?? 0)))
            cell_n = _int((cell_n &+ 1))
        }
        var row_above: [Int] = (grid[0] as! [Int])
        var row_n: Int = 1
        while (row_n < _int(((grid).count))) {
            let current_row: [Int] = (grid[row_n] as! [Int])
            grid = _set(grid, row_n, (fill_row(&current_row, (row_above as! [Int])) as! [Int]))
            row_above = (grid[row_n] as! [Int])
            row_n = _int((row_n &+ 1))
        }
        return (grid[(_int(((grid).count)) &- 1)][(_int((((grid[0] as! [Int])).count)) &- 1)] as? Int ?? 0)
    }
    var grid1: [[Int]] = ([([1, 3, 1] as! [Int]), ([1, 5, 1] as! [Int]), ([4, 2, 1] as! [Int])] as! [[Int]])
    print(_p(_p(_int(min_path_sum(&grid1)))))
    var grid2: [[Int]] = ([([1, 0, 5, 6, 7] as! [Int]), ([8, 9, 0, 4, 2] as! [Int]), ([4, 4, 4, 5, 1] as! [Int]), ([9, 6, 3, 1, 0] as! [Int]), ([8, 4, 3, 2, 7] as! [Int])] as! [[Int]])
    print(_p(_p(_int(min_path_sum(&grid2)))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
