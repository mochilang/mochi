// Generated by Mochi transpiler v0.10.60 on 2025-08-08 10:44:39 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
struct Edge: Codable {
    var u: Int
    var v: Int
    var w: Int
    init() {
        self.u = 0
        self.v = 0
        self.w = 0
    }
    init(u: Int, v: Int, w: Int) {
        self.u = u
        self.v = v
        self.w = w
    }
}
struct UF: Codable {
    var parent: [Int]
    var rank: [Int]
    init() {
        self.parent = []
        self.rank = []
    }
    init(parent: [Int], rank: [Int]) {
        self.parent = parent
        self.rank = rank
    }
}
struct FindRes: Codable {
    var root: Int
    var uf: UF
    init() {
        self.root = 0
        self.uf = UF()
    }
    init(root: Int, uf: UF) {
        self.root = root
        self.uf = uf
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func uf_make(_ n: Int) -> UF {
        var p: [Int] = ([] as! [Int])
        var r: [Int] = ([] as! [Int])
        var i: Int = 0
        while (i < n) {
            p = (_append(p, i) as! [Int])
            r = (_append(r, 0) as! [Int])
            i = _int((i &+ 1))
        }
        return UF(parent: p, rank: r)
    }
    func uf_find(_ uf: UF, _ x: Int) -> FindRes {
        var p: [Int] = uf.parent
        if ((p[x] as? Int ?? 0) != x) {
            let res = uf_find((UF(parent: p, rank: uf.rank) as! UF), (p[x] as? Int ?? 0))
            p = (res.uf.parent as! [Int])
            p = _set(p, x, _int(res.root))
            return FindRes(root: res.root, uf: UF(parent: p, rank: res.uf.rank))
        }
        return FindRes(root: x, uf: uf)
    }
    func uf_union(_ uf: UF, _ x: Int, _ y: Int) -> UF {
        let fr1 = uf_find((uf as! UF), x)
        var uf1: UF = fr1.uf
        let root1 = fr1.root
        let fr2 = uf_find((uf1 as! UF), y)
        uf1 = (fr2.uf as! UF)
        let root2 = fr2.root
        if (root1 == root2) {
            return uf1
        }
        var p: [Int] = uf1.parent
        var r: [Int] = uf1.rank
        if ((r[root1] as? Int ?? 0) > (r[root2] as? Int ?? 0)) {
            p = _set(p, root2, Int(root1))
        } else if ((r[root1] as? Int ?? 0) < (r[root2] as? Int ?? 0)) {
            p = _set(p, root1, Int(root2))
        } else {
            p = _set(p, root2, Int(root1))
            r = _set(r, root1, _int(((r[root1] as? Int ?? 0) &+ 1)))
        }
        
        return UF(parent: p, rank: r)
    }
    func boruvka(_ n: Int, _ edges: [Edge]) -> [Edge] {
        var uf: UF = uf_make(n)
        var num_components: Int = n
        var mst: [Edge] = ([] as! [Edge])
        while (num_components > 1) {
            var cheap: [Int] = ([] as! [Int])
            var i: Int = 0
            while (i < n) {
                cheap = (_append(cheap, (0 &- 1)) as! [Int])
                i = _int((i &+ 1))
            }
            var idx: Int = 0
            while (idx < _int(((edges).count))) {
                let e = (edges[idx] as! Edge)
                let fr1 = uf_find((uf as! UF), e.u)
                uf = (fr1.uf as! UF)
                let set1 = fr1.root
                let fr2 = uf_find((uf as! UF), e.v)
                uf = (fr2.uf as! UF)
                let set2 = fr2.root
                if (set1 != set2) {
                    if (((cheap[set1] as? Int ?? 0) == (0 &- 1)) || (String(describing: edges[(cheap[set1] as? Int ?? 0)].w) > String(describing: e.w)
                    )) {
                        cheap = _set(cheap, set1, Int(idx))
                    }
                    if (((cheap[set2] as? Int ?? 0) == (0 &- 1)) || (String(describing: edges[(cheap[set2] as? Int ?? 0)].w) > String(describing: e.w)
                    )) {
                        cheap = _set(cheap, set2, Int(idx))
                    }
                }
                idx = _int((idx &+ 1))
            }
            var v: Int = 0
            while (v < n) {
                let idxe = (cheap[v] as? Int ?? 0)
                if (idxe != (0 &- 1)) {
                    let e = (edges[idxe] as! Edge)
                    let fr1 = uf_find((uf as! UF), e.u)
                    uf = (fr1.uf as! UF)
                    let set1 = fr1.root
                    let fr2 = uf_find((uf as! UF), e.v)
                    uf = (fr2.uf as! UF)
                    let set2 = fr2.root
                    if (set1 != set2) {
                        mst = (_append(mst, e) as! [Edge])
                        uf = (uf_union((uf as! UF), set1, set2) as! UF)
                        num_components = _int((num_components &- 1))
                    }
                }
                v = _int((v &+ 1))
            }
        }
        return mst
    }
    func main() {
        let edges: [Edge] = ([Edge(u: 0, v: 1, w: 1), Edge(u: 0, v: 2, w: 2), Edge(u: 2, v: 3, w: 3)] as! [Edge])
        let mst: [Edge] = (boruvka(4, (edges as! [Edge])) as! [Edge])
        for e in mst {
            print(_p(((((_p(e.u) + " - ") + _p(e.v)) + " : ") + _p(e.w))))
        }
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
