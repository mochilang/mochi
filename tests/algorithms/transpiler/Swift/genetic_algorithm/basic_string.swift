// Generated by Mochi transpiler v0.10.59 on 2025-08-07 08:55:20 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
struct PairString: Codable {
    var first: String
    var second: String
    init() {
        self.first = ""
        self.second = ""
    }
    init(first: String, second: String) {
        self.first = first
        self.second = second
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func evaluate(_ item: String, _ target: String) -> Int {
        var score: Int = 0
        var i: Int = 0
        while ((i < Int(((item).count))) && (i < Int(((target).count)))) {
            if (String(describing: String(Array(String(describing: (item as! String)))[i..<(i &+ 1)])) == String(describing: String(Array(String(describing: (target as! String)))[i..<(i &+ 1)]))) {
                score = Int((score &+ 1))
            }
            i = Int((i &+ 1))
        }
        return score
    }
    func crossover(_ parent1: String, _ parent2: String) -> PairString {
        let cut = (Int(((parent1).count)) / 2)
        let child1 = (String(describing: String(Array(String(describing: (parent1 as! String)))[0..<cut])) + String(describing: String(Array(String(describing: (parent2 as! String)))[cut..<Int(((parent2).count))])))
        let child2 = (String(describing: String(Array(String(describing: (parent2 as! String)))[0..<cut])) + String(describing: String(Array(String(describing: (parent1 as! String)))[cut..<Int(((parent1).count))])))
        return PairString(first: child1, second: child2)
    }
    func mutate(_ child: String, _ genes: [String]) -> String {
        if (Int(((child).count)) == 0) {
            return child
        }
        let gene = (genes[0] as! String)
        return (String(describing: String(Array(String(describing: (child as! String)))[0..<(Int(((child).count)) &- 1)])) + gene)
    }
    func main() {
        print(_p(_p(Int(evaluate("Helxo Worlx", "Hello World")))))
        let pair = crossover("123456", "abcdef")
        print(_p(pair.first))
        print(_p(pair.second))
        let mut = String(describing: mutate("123456", (["A", "B", "C", "D", "E", "F"] as! [String])))
        print(_p(mut))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
