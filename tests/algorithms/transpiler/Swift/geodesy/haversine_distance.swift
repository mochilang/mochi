// Generated by Mochi transpiler v0.10.61 on 2025-08-08 19:14:13 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let PI: Double = 3.141592653589793
    let AXIS_A: Double = 6378137.0
    let AXIS_B: Double = 6356752.314245
    let RADIUS: Double = 6378137.0
    func to_radians(_ deg: Double) -> Double {
        return ((deg * PI) / 180.0)
    }
    func sin_taylor(_ x: Double) -> Double {
        var term = x
        var sum = x
        var i = 1
        while (i < 10) {
            let k1 = (2.0 * Double(i))
            let k2 = (k1 + 1.0)
            term = Double((((-term * x) * x) / Double((k1 * k2))))
            sum = Double((sum + term))
            i = _int((i &+ 1))
        }
        return sum
    }
    func cos_taylor(_ x: Double) -> Double {
        var term = 1.0
        var sum = 1.0
        var i = 1
        while (i < 10) {
            let k1 = ((2.0 * Double(i)) - 1.0)
            let k2 = (2.0 * Double(i))
            term = Double((((-term * x) * x) / Double((k1 * k2))))
            sum = Double((sum + term))
            i = _int((i &+ 1))
        }
        return sum
    }
    func tan_approx(_ x: Double) -> Double {
        return (Double(sin_taylor(Double(x))) / Double(cos_taylor(Double(x))))
    }
    func sqrtApprox(_ x: Double) -> Double {
        var guess = (x / 2.0)
        var i = 0
        while (i < 20) {
            guess = Double((Double((guess + (x / guess))) / 2.0))
            i = _int((i &+ 1))
        }
        return guess
    }
    func atanApprox(_ x: Double) -> Double {
        if (x > 1.0) {
            return ((PI / 2.0) - (x / Double(((x * x) + 0.28))))
        }
        if (x < Double(-1.0)) {
            return ((-PI / 2.0) - (x / Double(((x * x) + 0.28))))
        }
        return (x / Double((1.0 + ((0.28 * x) * x))))
    }
    func atan2Approx(_ y: Double, _ x: Double) -> Double {
        if (x > 0.0) {
            let val = Double(atanApprox(Double((y / x))))
            return val
        }
        if (x < 0.0) {
            if (y >= 0.0) {
                return (Double(atanApprox(Double((y / x)))) + PI)
            }
            return (Double(atanApprox(Double((y / x)))) - PI)
        }
        if (y > 0.0) {
            return (PI / 2.0)
        }
        if (y < 0.0) {
            return (-PI / 2.0)
        }
        return 0.0
    }
    func asinApprox(_ x: Double) -> Double {
        let denom = Double(sqrtApprox(Double((1.0 - (x * x)))))
        let res = Double(atan2Approx(Double(x), Double(denom)))
        return res
    }
    func haversine_distance(_ lat1: Double, _ lon1: Double, _ lat2: Double, _ lon2: Double) -> Double {
        let flattening = (Double((AXIS_A - AXIS_B)) / AXIS_A)
        let phi_1 = Double(atanApprox(Double((Double((1.0 - flattening)) * Double(tan_approx(Double(to_radians(Double(lat1)))))))))
        let phi_2 = Double(atanApprox(Double((Double((1.0 - flattening)) * Double(tan_approx(Double(to_radians(Double(lat2)))))))))
        let lambda_1 = Double(to_radians(Double(lon1)))
        let lambda_2 = Double(to_radians(Double(lon2)))
        var sin_sq_phi = Double(sin_taylor(Double((Double((phi_2 - phi_1)) / 2.0))))
        var sin_sq_lambda = Double(sin_taylor(Double((Double((lambda_2 - lambda_1)) / 2.0))))
        sin_sq_phi = Double((sin_sq_phi * sin_sq_phi))
        sin_sq_lambda = Double((sin_sq_lambda * sin_sq_lambda))
        let h_value = Double(sqrtApprox(Double((sin_sq_phi + ((Double(cos_taylor(Double(phi_1))) * Double(cos_taylor(Double(phi_2)))) * sin_sq_lambda)))))
        return ((2.0 * RADIUS) * Double(asinApprox(Double(h_value))))
    }
    let SAN_FRANCISCO: [Double] = ({
        var _arr: [Double] = []
        _arr = _append(_arr, 37.774856)
        _arr = _append(_arr, -122.424227)
        return _arr
    }() as! [Double])
    let YOSEMITE: [Double] = ({
        var _arr: [Double] = []
        _arr = _append(_arr, 37.864742)
        _arr = _append(_arr, -119.537521)
        return _arr
    }() as! [Double])
    print(_p(_p(Double(haversine_distance(Double(_idx(SAN_FRANCISCO, 0)), Double(_idx(SAN_FRANCISCO, 1)), Double(_idx(YOSEMITE, 0)), Double(_idx(YOSEMITE, 1)))))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
