// Generated by Mochi transpiler v0.10.61 on 2025-08-08 16:00:50 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return nil
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func knapsack(_ capacity: Int, _ weights: [Int], _ values: [Int], _ counter: Int) -> Int {
        if ((counter == 0) || (capacity == 0)) {
            return 0
        }
        if ((_idx(weights, (counter &- 1)) as? Int ?? 0) > capacity) {
            return _int(knapsack(capacity, (weights as! [Int]), (values as! [Int]), (counter &- 1)))
        } else {
            var left_capacity: Int = (capacity &- (_idx(weights, (counter &- 1)) as? Int ?? 0))
            var new_value_included: Int = ((_idx(values, (counter &- 1)) as? Int ?? 0) &+ _int(knapsack(left_capacity, (weights as! [Int]), (values as! [Int]), (counter &- 1))))
            var without_new_value: Int = _int(knapsack(capacity, (weights as! [Int]), (values as! [Int]), (counter &- 1)))
            if (new_value_included > without_new_value) {
                return new_value_included
            } else {
                return without_new_value
            }
        }
    }
    func main() {
        var weights: [Int] = ([10, 20, 30] as! [Int])
        var values: [Int] = ([60, 100, 120] as! [Int])
        var cap: Int = 50
        var count: Int = _int(((values).count))
        var result: Int = _int(knapsack(cap, (weights as! [Int]), (values as! [Int]), count))
        print(_p(_p(result)))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
