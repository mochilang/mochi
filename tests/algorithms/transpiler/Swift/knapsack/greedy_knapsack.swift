// Generated by Mochi transpiler v0.10.61 on 2025-08-08 16:00:48 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return nil
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func calc_profit(_ profit: [Int], _ weight: [Int], _ max_weight: Int) -> Double {
        if (_int(((profit).count)) != _int(((weight).count))) {
            _ = fatalError("The length of profit and weight must be same.")
        }
        if (max_weight <= 0) {
            _ = fatalError("max_weight must greater than zero.")
        }
        var i: Int = 0
        while (i < _int(((profit).count))) {
            if ((_idx(profit, i) as? Int ?? 0) < 0) {
                _ = fatalError("Profit can not be negative.")
            }
            if ((_idx(weight, i) as? Int ?? 0) < 0) {
                _ = fatalError("Weight can not be negative.")
            }
            i = _int((i &+ 1))
        }
        let n = _int(((profit).count))
        var used: [Bool] = ([] as! [Bool])
        var j: Int = 0
        while (j < n) {
            used = (_append(used, false) as! [Bool])
            j = _int((j &+ 1))
        }
        var limit: Int = 0
        var gain: Double = 0.0
        var count: Int = 0
        while ((limit < max_weight) && (count < n)) {
            var maxRatio: Double = -1.0
            var maxIndex: Int = -1
            var k: Int = 0
            while (k < n) {
                if !(_idx(used, k) ?? false) {
                    let ratio = (Double(_idx(profit, k)) / Double(_idx(weight, k)))
                    if (ratio > maxRatio) {
                        maxRatio = Double(ratio)
                        maxIndex = Int(k)
                    }
                }
                k = _int((k &+ 1))
            }
            if (maxIndex < 0) {
                break
            }
            used = _set(used, maxIndex, true)
            if ((max_weight &- limit) >= (_idx(weight, maxIndex) as? Int ?? 0)) {
                limit = _int((limit &+ (_idx(weight, maxIndex) as? Int ?? 0)))
                gain = Double((gain + Double(_idx(profit, maxIndex))))
            } else {
                gain = Double((gain + (Double((Double((max_weight &- limit)) / Double(_idx(weight, maxIndex)))) * Double(_idx(profit, maxIndex)))))
                break
            }
            count = _int((count &+ 1))
        }
        return gain
    }
    func main() -> Void {
        print(_p(Double(calc_profit(([1, 2, 3] as! [Int]), ([3, 4, 5] as! [Int]), 15))))
        print(_p(Double(calc_profit(([10, 9, 8] as! [Int]), ([3, 4, 5] as! [Int]), 25))))
        print(_p(Double(calc_profit(([10, 9, 8] as! [Int]), ([3, 4, 5] as! [Int]), 5))))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
