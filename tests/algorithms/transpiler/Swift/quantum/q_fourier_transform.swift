// Generated by Mochi transpiler v0.10.63 on 2025-08-11 16:25:18 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func to_bits(_ n: Int, _ width: Int) -> String {
        var res = ""
        var num = n
        var w = width
        while (w > 0) {
            res = ((_p(((num % 2 + 2) % 2)) + res) as! String)
            num = _int((num / 2))
            w = _int((w &- 1))
        }
        return res
    }
    func quantum_fourier_transform(_ number_of_qubits: Int) -> [String: Int] {
        if (number_of_qubits <= 0) {
            _ = fatalError("number of qubits must be > 0.")
        }
        if (number_of_qubits > 10) {
            _ = fatalError("number of qubits too large to simulate(>10).")
        }
        let shots = 10000
        var states = 1
        var p = 0
        while (p < number_of_qubits) {
            states = _int((states &* 2))
            p = _int((p &+ 1))
        }
        let per_state = (shots / states)
        var counts: [String: Int] = ([:] as! [String: Int])
        var i = 0
        while (i < states) {
            counts = _set(counts, String(describing: to_bits(i, number_of_qubits)), Int(per_state))
            i = _int((i &+ 1))
        }
        return counts
    }
    print(_p(("Total count for quantum fourier transform state is: " + String(describing: (quantum_fourier_transform(3) as! [String: Int])))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
