// Generated by Mochi transpiler v0.10.63 on 2025-08-11 14:51:20 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func ln(_ x: Double) -> Double {
        let t = (Double((x - 1.0)) / Double((x + 1.0)))
        var term = t
        var sum = 0.0
        var k = 1
        while (k <= 99) {
            sum = Double((sum + (term / Double(k))))
            term = Double(((term * t) * t))
            k = _int((k &+ 2))
        }
        return (2.0 * sum)
    }
    func log10(_ x: Double) -> Double {
        return (Double(ln(Double(x))) / Double(ln(10.0)))
    }
    func absf(_ x: Double) -> Double {
        if (x < 0.0) {
            return -x
        }
        return x
    }
    func res(_ x: Int, _ y: Int) -> Double {
        if (x == 0) {
            return 0.0
        }
        if (y == 0) {
            return 1.0
        }
        if (x < 0) {
            _ = fatalError("math domain error")
        }
        return (Double(y) * Double(log10(Double(x))))
    }
    func test_res() {
        if (Double(absf(Double((Double(res(5, 7)) - 4.892790030352132)))) > 0.0000001) {
            _ = fatalError("res(5,7) failed")
        }
        if (Double(res(0, 5)) != 0.0) {
            _ = fatalError("res(0,5) failed")
        }
        if (Double(res(3, 0)) != 1.0) {
            _ = fatalError("res(3,0) failed")
        }
    }
    func compare(_ x1: Int, _ y1: Int, _ x2: Int, _ y2: Int) -> String {
        let r1 = Double(res(x1, y1))
        let r2 = Double(res(x2, y2))
        if (r1 > r2) {
            return ((("Largest number is " + _p(x1)) + " ^ ") + _p(y1))
        }
        if (r2 > r1) {
            return ((("Largest number is " + _p(x2)) + " ^ ") + _p(y2))
        }
        return "Both are equal"
    }
    _ = test_res()
    print(_p(String(describing: compare(5, 7, 4, 8))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
