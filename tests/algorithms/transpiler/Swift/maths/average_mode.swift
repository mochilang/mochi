// Generated by Mochi transpiler v0.10.66 on 2025-08-14 18:17:37 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _idx<K: Hashable, V>(_ m: [K: V], _ k: K) -> V? {
    return m[k]
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func contains_int(_ xs: [Int], _ x: Int) -> Bool {
        var i = 0
        while (i < _int(((xs).count))) {
            if ((_idx(xs, i) as? Int ?? 0) == x) {
                return true
            }
            i = _int((i &+ 1))
        }
        return false
    }
    func contains_string(_ xs: [String], _ x: String) -> Bool {
        var i = 0
        while (i < _int(((xs).count))) {
            if ((_idx(xs, i) as! String) == x) {
                return true
            }
            i = _int((i &+ 1))
        }
        return false
    }
    func count_int(_ xs: [Int], _ x: Int) -> Int {
        var cnt = 0
        var i = 0
        while (i < _int(((xs).count))) {
            if ((_idx(xs, i) as? Int ?? 0) == x) {
                cnt = _int((cnt &+ 1))
            }
            i = _int((i &+ 1))
        }
        return cnt
    }
    func count_string(_ xs: [String], _ x: String) -> Int {
        var cnt = 0
        var i = 0
        while (i < _int(((xs).count))) {
            if ((_idx(xs, i) as! String) == x) {
                cnt = _int((cnt &+ 1))
            }
            i = _int((i &+ 1))
        }
        return cnt
    }
    func sort_int(_ xs: [Int]) -> [Int] {
        var arr = xs
        var i = 0
        while (i < _int(((arr).count))) {
            var j = (i &+ 1)
            while (j < _int(((arr).count))) {
                if ((_idx(arr, j) as? Int ?? 0) < (_idx(arr, i) as? Int ?? 0)) {
                    let tmp = (_idx(arr, i) as? Int ?? 0)
                    arr = _set(arr, i, (_idx(arr, j) as? Int ?? 0))
                    arr = _set(arr, j, Int(tmp))
                }
                j = _int((j &+ 1))
            }
            i = _int((i &+ 1))
        }
        return arr
    }
    func sort_string(_ xs: [String]) -> [String] {
        var arr = xs
        var i = 0
        while (i < _int(((arr).count))) {
            var j = (i &+ 1)
            while (j < _int(((arr).count))) {
                if ((_idx(arr, j) as! String) < (_idx(arr, i) as! String)) {
                    let tmp = (_idx(arr, i) as! String)
                    arr = _set(arr, i, (_idx(arr, j) as! String))
                    arr = _set(arr, j, (tmp as! String))
                }
                j = _int((j &+ 1))
            }
            i = _int((i &+ 1))
        }
        return arr
    }
    func mode_int(_ lst: [Int]) -> [Int] {
        if (_int(((lst).count)) == 0) {
            return ([] as! [Int])
        }
        var counts: [Int] = ([] as! [Int])
        var i = 0
        while (i < _int(((lst).count))) {
            counts = (_append(counts, _int(count_int((lst as! [Int]), (_idx(lst, i) as? Int ?? 0)))) as! [Int])
            i = _int((i &+ 1))
        }
        var max_count = 0
        i = 0
        while (i < _int(((counts).count))) {
            if ((_idx(counts, i) as? Int ?? 0) > max_count) {
                max_count = (_idx(counts, i) as? Int ?? 0)
            }
            i = _int((i &+ 1))
        }
        var modes: [Int] = ([] as! [Int])
        i = 0
        while (i < _int(((lst).count))) {
            if ((_idx(counts, i) as? Int ?? 0) == max_count) {
                let v = (_idx(lst, i) as? Int ?? 0)
                if (!contains_int((modes as! [Int]), v)) {
                    modes = (_append(modes, v) as! [Int])
                }
            }
            i = _int((i &+ 1))
        }
        return (sort_int((modes as! [Int])) as! [Int])
    }
    func mode_string(_ lst: [String]) -> [String] {
        if (_int(((lst).count)) == 0) {
            return ([] as! [String])
        }
        var counts: [Int] = ([] as! [Int])
        var i = 0
        while (i < _int(((lst).count))) {
            counts = (_append(counts, _int(count_string((lst as! [String]), (_idx(lst, i) as! String)))) as! [Int])
            i = _int((i &+ 1))
        }
        var max_count = 0
        i = 0
        while (i < _int(((counts).count))) {
            if ((_idx(counts, i) as? Int ?? 0) > max_count) {
                max_count = (_idx(counts, i) as? Int ?? 0)
            }
            i = _int((i &+ 1))
        }
        var modes: [String] = ([] as! [String])
        i = 0
        while (i < _int(((lst).count))) {
            if ((_idx(counts, i) as? Int ?? 0) == max_count) {
                let v = (_idx(lst, i) as! String)
                if (!contains_string((modes as! [String]), (v as! String))) {
                    modes = (_append(modes, v) as! [String])
                }
            }
            i = _int((i &+ 1))
        }
        return (sort_string((modes as! [String])) as! [String])
    }
    print(_p("[" + (mode_int(({
        var _arr: [Int] = []
        _arr = _append(_arr, 2)
        _arr = _append(_arr, 3)
        _arr = _append(_arr, 4)
        _arr = _append(_arr, 5)
        _arr = _append(_arr, 3)
        _arr = _append(_arr, 4)
        _arr = _append(_arr, 2)
        _arr = _append(_arr, 5)
        _arr = _append(_arr, 2)
        _arr = _append(_arr, 2)
        _arr = _append(_arr, 4)
        _arr = _append(_arr, 2)
        _arr = _append(_arr, 2)
        _arr = _append(_arr, 2)
        return _arr
    }() as! [Int])) as! [Int]).map{ if let s = $0 as? String { "\"" + s.replacingOccurrences(of: "\"", with: "\\\"") + "\"" } else { _p($0) } }.joined(separator: ", ") + "]"))
    print(_p("[" + (mode_int(({
        var _arr: [Int] = []
        _arr = _append(_arr, 3)
        _arr = _append(_arr, 4)
        _arr = _append(_arr, 5)
        _arr = _append(_arr, 3)
        _arr = _append(_arr, 4)
        _arr = _append(_arr, 2)
        _arr = _append(_arr, 5)
        _arr = _append(_arr, 2)
        _arr = _append(_arr, 2)
        _arr = _append(_arr, 4)
        _arr = _append(_arr, 4)
        _arr = _append(_arr, 2)
        _arr = _append(_arr, 2)
        _arr = _append(_arr, 2)
        return _arr
    }() as! [Int])) as! [Int]).map{ if let s = $0 as? String { "\"" + s.replacingOccurrences(of: "\"", with: "\\\"") + "\"" } else { _p($0) } }.joined(separator: ", ") + "]"))
    print(_p("[" + (mode_int(({
        var _arr: [Int] = []
        _arr = _append(_arr, 3)
        _arr = _append(_arr, 4)
        _arr = _append(_arr, 5)
        _arr = _append(_arr, 3)
        _arr = _append(_arr, 4)
        _arr = _append(_arr, 2)
        _arr = _append(_arr, 5)
        _arr = _append(_arr, 2)
        _arr = _append(_arr, 2)
        _arr = _append(_arr, 4)
        _arr = _append(_arr, 4)
        _arr = _append(_arr, 4)
        _arr = _append(_arr, 2)
        _arr = _append(_arr, 2)
        _arr = _append(_arr, 4)
        _arr = _append(_arr, 2)
        return _arr
    }() as! [Int])) as! [Int]).map{ if let s = $0 as? String { "\"" + s.replacingOccurrences(of: "\"", with: "\\\"") + "\"" } else { _p($0) } }.joined(separator: ", ") + "]"))
    print(_p("[" + (mode_string(({
        var _arr: [String] = []
        _arr = _append(_arr, "x")
        _arr = _append(_arr, "y")
        _arr = _append(_arr, "y")
        _arr = _append(_arr, "z")
        return _arr
    }() as! [String])) as! [String]).map{ if let s = $0 as? String { "\"" + s.replacingOccurrences(of: "\"", with: "\\\"") + "\"" } else { _p($0) } }.joined(separator: ", ") + "]"))
    print(_p("[" + (mode_string(({
        var _arr: [String] = []
        _arr = _append(_arr, "x")
        _arr = _append(_arr, "x")
        _arr = _append(_arr, "y")
        _arr = _append(_arr, "y")
        _arr = _append(_arr, "z")
        return _arr
    }() as! [String])) as! [String]).map{ if let s = $0 as? String { "\"" + s.replacingOccurrences(of: "\"", with: "\\\"") + "\"" } else { _p($0) } }.joined(separator: ", ") + "]"))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
