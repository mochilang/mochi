// Generated by Mochi transpiler v0.10.62 on 2025-08-09 12:16:40 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func gcd(_ a: Int, _ b: Int) -> Int {
        var x = a
        var y = b
        while (y != 0) {
            let r = ((x % y + y) % y)
            x = Int(y)
            y = Int(r)
        }
        if (x < 0) {
            return -x
        }
        return x
    }
    func get_greatest_common_divisor(_ nums: [Int]) -> Int {
        if (_int(((nums).count)) == 0) {
            _ = fatalError("at least one number is required")
        }
        var g = (_idx(nums, 0) as? Int ?? 0)
        if (g <= 0) {
            _ = fatalError("numbers must be integer and greater than zero")
        }
        var i = 1
        while (i < _int(((nums).count))) {
            let n = (_idx(nums, i) as? Int ?? 0)
            if (n <= 0) {
                _ = fatalError("numbers must be integer and greater than zero")
            }
            g = _int(gcd(g, n))
            i = _int((i &+ 1))
        }
        return g
    }
    print(_p(_p(_int(get_greatest_common_divisor(({
        var _arr: [Int] = []
        _arr = _append(_arr, 18)
        _arr = _append(_arr, 45)
        return _arr
    }() as! [Int]))))))
    print(_p(_p(_int(get_greatest_common_divisor(({
        var _arr: [Int] = []
        _arr = _append(_arr, 23)
        _arr = _append(_arr, 37)
        return _arr
    }() as! [Int]))))))
    print(_p(_p(_int(get_greatest_common_divisor(({
        var _arr: [Int] = []
        _arr = _append(_arr, 2520)
        _arr = _append(_arr, 8350)
        return _arr
    }() as! [Int]))))))
    print(_p(_p(_int(get_greatest_common_divisor(({
        var _arr: [Int] = []
        _arr = _append(_arr, 1)
        _arr = _append(_arr, 2)
        _arr = _append(_arr, 3)
        _arr = _append(_arr, 4)
        _arr = _append(_arr, 5)
        _arr = _append(_arr, 6)
        _arr = _append(_arr, 7)
        _arr = _append(_arr, 8)
        _arr = _append(_arr, 9)
        _arr = _append(_arr, 10)
        return _arr
    }() as! [Int]))))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
