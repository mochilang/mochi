// Generated by Mochi transpiler v0.10.67 on 2025-08-16 21:33:51 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func abs(_ x: Double) -> Double {
        if (x < 0.0) {
            return -x
        }
        return x
    }
    func factorial(_ n: Int) -> Int {
        if (n < 0) {
            _ = fatalError("factorial is undefined for negative numbers")
        }
        var result = 1
        var i = 2
        while (i <= n) {
            result = _int((result &* i))
            i = _int((i &+ 1))
        }
        return result
    }
    func pow_float(_ base: Double, _ exp: Int) -> Double {
        var result = 1.0
        var i = 0
        while (i < exp) {
            result = Double((result * base))
            i = _int((i &+ 1))
        }
        return result
    }
    func binomial_distribution(_ successes: Int, _ trials: Int, _ prob: Double) -> Double {
        if (successes > trials) {
            _ = fatalError("successes must be lower or equal to trials")
        }
        if ((trials < 0) || (successes < 0)) {
            _ = fatalError("the function is defined for non-negative integers")
        }
        if (!((0.0 < prob) && (prob < 1.0))) {
            _ = fatalError("prob has to be in range of 1 - 0")
        }
        let probability = (Double(pow_float(Double(prob), successes)) * Double(pow_float(Double((1.0 - prob)), (trials &- successes))))
        let numerator = Double(factorial(trials))
        let denominator = Double((_int(factorial(successes)) &* _int(factorial((trials &- successes)))))
        let coefficient = (numerator / denominator)
        return (probability * coefficient)
    }
    do {
        let result = Double(binomial_distribution(3, 5, 0.7))
        assert((Double(abs(Double((result - 0.3087)))) < 0.0000001))
    }
    do {
        let result = Double(binomial_distribution(2, 4, 0.5))
        assert((Double(abs(Double((result - 0.375)))) < 0.0000001))
    }
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
