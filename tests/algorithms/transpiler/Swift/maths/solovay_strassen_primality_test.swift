// Generated by Mochi transpiler v0.10.66 on 2025-08-16 13:58:45 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    var seed: Int = 1
    func set_seed(_ s: Int) {
        seed = Int(s)
    }
    func randint(_ a: Int, _ b: Int) -> Int {
        seed = _int(((_int(((seed &* 1103515245) &+ 12345)) % 2147483648 + 2147483648) % 2147483648))
        return (_int(((seed % _int(((b &- a) &+ 1)) + _int(((b &- a) &+ 1))) % _int(((b &- a) &+ 1)))) &+ a)
    }
    func jacobi_symbol(_ random_a: Int, _ number: Int) -> Int {
        var random_a = random_a
        var number = number
        if ((random_a == 0) || (random_a == 1)) {
            return random_a
        }
        random_a = _int(((random_a % number + number) % number))
        var t: Int = 1
        while (random_a != 0) {
            while (((random_a % 2 + 2) % 2) == 0) {
                random_a = _int((random_a / 2))
                let r = ((number % 8 + 8) % 8)
                if ((r == 3) || (r == 5)) {
                    t = _int(-t)
                }
            }
            let temp = random_a
            random_a = Int(number)
            number = Int(temp)
            if ((((random_a % 4 + 4) % 4) == 3) && (((number % 4 + 4) % 4) == 3)) {
                t = _int(-t)
            }
            random_a = _int(((random_a % number + number) % number))
        }
        if (number == 1) {
            return t
        }
        return 0
    }
    func pow_mod(_ base: Int, _ exp: Int, _ mod: Int) -> Int {
        var result: Int = 1
        var b = ((base % mod + mod) % mod)
        var e = exp
        while (e > 0) {
            if (((e % 2 + 2) % 2) == 1) {
                result = _int(((_int((result &* b)) % mod + mod) % mod))
            }
            b = _int(((_int((b &* b)) % mod + mod) % mod))
            e = _int((e / 2))
        }
        return result
    }
    func solovay_strassen(_ number: Int, _ iterations: Int) -> Bool {
        var number = number
        if (number <= 1) {
            return false
        }
        if (number <= 3) {
            return true
        }
        var i: Int = 0
        while (i < iterations) {
            var a = _int(randint(2, (number &- 2)))
            let x = _int(jacobi_symbol(a, number))
            let y = _int(pow_mod(a, (_int((number &- 1)) / 2), number))
            var mod_x = ((x % number + number) % number)
            if (mod_x < 0) {
                mod_x = _int((mod_x &+ number))
            }
            if ((x == 0) || (y != mod_x)) {
                return false
            }
            i = _int((i &+ 1))
        }
        return true
    }
    func main() {
        _ = set_seed(10)
        print(_p(_p(solovay_strassen(13, 5))))
        print(_p(_p(solovay_strassen(9, 10))))
        print(_p(_p(solovay_strassen(17, 15))))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
