// Generated by Mochi transpiler v0.10.66 on 2025-08-16 12:41:28 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func sqrtApprox(_ x: Double) -> Double {
        if (x <= 0.0) {
            return 0.0
        }
        var guess = x
        var i = 0
        while (i < 20) {
            guess = Double((Double((guess + (x / guess))) / 2.0))
            i = _int((i &+ 1))
        }
        return guess
    }
    func factorial_float(_ n: Int) -> Double {
        var result = 1.0
        var i = 2
        while (i <= n) {
            result = Double((result * Double(i)))
            i = _int((i &+ 1))
        }
        return result
    }
    func pi(_ n: Int) -> Double {
        if (n < 1) {
            _ = fatalError("Undefined for non-natural numbers")
        }
        let iterations = (_int((n &+ 13)) / 14)
        let constant_term = (426880.0 * Double(sqrtApprox(10005.0)))
        var exponential_term = 1.0
        var linear_term = 13591409.0
        var partial_sum = linear_term
        var k = 1
        while (k < iterations) {
            let k6 = (6 &* k)
            let k3 = (3 &* k)
            let fact6k = Double(factorial_float(k6))
            let fact3k = Double(factorial_float(k3))
            let factk = Double(factorial_float(k))
            let multinomial = (fact6k / Double((((fact3k * factk) * factk) * factk)))
            linear_term = Double((linear_term + 545140134.0))
            exponential_term = Double((exponential_term * Double(-262537412640768000.0)))
            partial_sum = Double((partial_sum + ((multinomial * linear_term) / exponential_term)))
            k = _int((k &+ 1))
        }
        return (constant_term / partial_sum)
    }
    let n = 50
    print(_p((_p((_p((_p("The first ") + _p(_p(n)))) + _p(" digits of pi is: "))) + _p(_p(Double(pi(n)))))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
