// Generated by Mochi transpiler v0.10.63 on 2025-08-11 14:51:38 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func abs_val(_ x: Double) -> Double {
        if (x < 0.0) {
            return -x
        }
        return x
    }
    func pow_float(_ base: Double, _ exp: Int) -> Double {
        var result = 1.0
        var i = 0
        while (i < exp) {
            result = Double((result * base))
            i = _int((i &+ 1))
        }
        return result
    }
    func nth_root(_ value: Double, _ n: Int) -> Double {
        if (value == 0.0) {
            return 0.0
        }
        var x = (value / Double(n))
        var i = 0
        while (i < 20) {
            let num = ((Double((n &- 1)) * x) + (value / Double(pow_float(Double(x), (n &- 1)))))
            x = Double((num / Double(n)))
            i = _int((i &+ 1))
        }
        return x
    }
    func minkowski_distance(_ point_a: [Double], _ point_b: [Double], _ order: Int) -> Double {
        if (order < 1) {
            _ = fatalError("The order must be greater than or equal to 1.")
        }
        if (_int(((point_a).count)) != _int(((point_b).count))) {
            _ = fatalError("Both points must have the same dimension.")
        }
        var total = 0.0
        var idx = 0
        while (idx < _int(((point_a).count))) {
            let diff = Double(abs_val(Double((Double(_idx(point_a, idx)) - Double(_idx(point_b, idx))))))
            total = Double((total + Double(pow_float(Double(diff), order))))
            idx = _int((idx &+ 1))
        }
        return Double(nth_root(Double(total), order))
    }
    func test_minkowski() {
        if (Double(abs_val(Double((Double(minkowski_distance(({
            var _arr: [Double] = []
            _arr = _append(_arr, 1.0)
            _arr = _append(_arr, 1.0)
            return _arr
        }() as! [Double]), ({
            var _arr: [Double] = []
            _arr = _append(_arr, 2.0)
            _arr = _append(_arr, 2.0)
            return _arr
        }() as! [Double]), 1)) - 2.0)))) > 0.0001) {
            _ = fatalError("minkowski_distance test1 failed")
        }
        if (Double(abs_val(Double((Double(minkowski_distance(({
            var _arr: [Double] = []
            _arr = _append(_arr, 1.0)
            _arr = _append(_arr, 2.0)
            _arr = _append(_arr, 3.0)
            _arr = _append(_arr, 4.0)
            return _arr
        }() as! [Double]), ({
            var _arr: [Double] = []
            _arr = _append(_arr, 5.0)
            _arr = _append(_arr, 6.0)
            _arr = _append(_arr, 7.0)
            _arr = _append(_arr, 8.0)
            return _arr
        }() as! [Double]), 2)) - 8.0)))) > 0.0001) {
            _ = fatalError("minkowski_distance test2 failed")
        }
    }
    func main() {
        _ = test_minkowski()
        print(_p(Double(minkowski_distance(({
            var _arr: [Double] = []
            _arr = _append(_arr, 5.0)
            return _arr
        }() as! [Double]), ({
            var _arr: [Double] = []
            _arr = _append(_arr, 0.0)
            return _arr
        }() as! [Double]), 3))))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
