// Generated by Mochi transpiler v0.10.66 on 2025-08-16 12:49:58 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first!
}
func _idx<K: Hashable, V>(_ m: [K: V], _ k: K) -> V? {
    return m[k]
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func bubble_sort(_ nums: [Double]) -> [Double] {
        var arr: [Double] = ([] as! [Double])
        var i = 0
        while (i < _int(((nums).count))) {
            arr = (_append(arr, Double(_idx(nums, i))) as! [Double])
            i = _int((i &+ 1))
        }
        var n = _int(((arr).count))
        var a = 0
        while (a < n) {
            var b = 0
            while (b < ((n &- a) &- 1)) {
                if (Double(_idx(arr, b)) > Double(_idx(arr, (b &+ 1)))) {
                    let temp = Double(_idx(arr, b))
                    arr = _set(arr, b, Double(_idx(arr, (b &+ 1))))
                    arr = _set(arr, (b &+ 1), Double(temp))
                }
                b = _int((b &+ 1))
            }
            a = _int((a &+ 1))
        }
        return arr
    }
    func find_median(_ nums: [Double]) -> Double {
        let length = _int(((nums).count))
        let div = (length / 2)
        let mod = ((length % 2 + 2) % 2)
        if (mod != 0) {
            return Double(_idx(nums, div))
        }
        return (Double((Double(_idx(nums, div)) + Double(_idx(nums, (div &- 1))))) / 2.0)
    }
    func interquartile_range(_ nums: [Double]) -> Double {
        if (_int(((nums).count)) == 0) {
            _ = fatalError("The list is empty. Provide a non-empty list.")
        }
        let sorted: [Double] = (bubble_sort((nums as! [Double])) as! [Double])
        let length = _int(((sorted).count))
        let div = (length / 2)
        let mod = ((length % 2 + 2) % 2)
        var lower: [Double] = ([] as! [Double])
        var i = 0
        while (i < div) {
            lower = (_append(lower, Double(_idx(sorted, i))) as! [Double])
            i = _int((i &+ 1))
        }
        var upper: [Double] = ([] as! [Double])
        var j = (div &+ mod)
        while (j < length) {
            upper = (_append(upper, Double(_idx(sorted, j))) as! [Double])
            j = _int((j &+ 1))
        }
        let q1 = Double(find_median((lower as! [Double])))
        let q3 = Double(find_median((upper as! [Double])))
        return (q3 - q1)
    }
    func absf(_ x: Double) -> Double {
        if (x < 0.0) {
            return -x
        }
        return x
    }
    func float_equal(_ a: Double, _ b: Double) -> Bool {
        let diff = Double(absf(Double((a - b))))
        return (diff < 0.0000001)
    }
    func test_interquartile_range() {
        if (!float_equal(Double(interquartile_range(({
            var _arr: [Double] = []
            _arr = _append(_arr, 4.0)
            _arr = _append(_arr, 1.0)
            _arr = _append(_arr, 2.0)
            _arr = _append(_arr, 3.0)
            _arr = _append(_arr, 2.0)
            return _arr
        }() as! [Double]))), 2.0)) {
            _ = fatalError("interquartile_range case1 failed")
        }
        if (!float_equal(Double(interquartile_range(({
            var _arr: [Double] = []
            _arr = _append(_arr, -2.0)
            _arr = _append(_arr, -7.0)
            _arr = _append(_arr, -10.0)
            _arr = _append(_arr, 9.0)
            _arr = _append(_arr, 8.0)
            _arr = _append(_arr, 4.0)
            _arr = _append(_arr, -67.0)
            _arr = _append(_arr, 45.0)
            return _arr
        }() as! [Double]))), 17.0)) {
            _ = fatalError("interquartile_range case2 failed")
        }
        if (!float_equal(Double(interquartile_range(({
            var _arr: [Double] = []
            _arr = _append(_arr, -2.1)
            _arr = _append(_arr, -7.1)
            _arr = _append(_arr, -10.1)
            _arr = _append(_arr, 9.1)
            _arr = _append(_arr, 8.1)
            _arr = _append(_arr, 4.1)
            _arr = _append(_arr, -67.1)
            _arr = _append(_arr, 45.1)
            return _arr
        }() as! [Double]))), 17.2)) {
            _ = fatalError("interquartile_range case3 failed")
        }
        if (!float_equal(Double(interquartile_range(({
            var _arr: [Double] = []
            _arr = _append(_arr, 0.0)
            _arr = _append(_arr, 0.0)
            _arr = _append(_arr, 0.0)
            _arr = _append(_arr, 0.0)
            _arr = _append(_arr, 0.0)
            return _arr
        }() as! [Double]))), 0.0)) {
            _ = fatalError("interquartile_range case4 failed")
        }
    }
    func main() {
        _ = test_interquartile_range()
        print(_p(_p(Double(interquartile_range(({
            var _arr: [Double] = []
            _arr = _append(_arr, 4.0)
            _arr = _append(_arr, 1.0)
            _arr = _append(_arr, 2.0)
            _arr = _append(_arr, 3.0)
            _arr = _append(_arr, 2.0)
            return _arr
        }() as! [Double]))))))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
