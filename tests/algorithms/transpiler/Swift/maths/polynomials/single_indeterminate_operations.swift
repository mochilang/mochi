// Generated by Mochi transpiler v0.10.67 on 2025-08-17 12:18:48 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.isNaN || d.isInfinite {
                return String(d)
            }
            if d.rounded(.towardZero) == d {
                // avoid overflow when converting to Int64
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _num(_ v: Any) -> Double {
    if let d = v as? Double { return d }
    if let i = v as? Int { return Double(i) }
    if let i = v as? Int64 { return Double(i) }
    return 0
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first!
}
func _idx<K: Hashable, V>(_ m: [K: V], _ k: K) -> V? {
    return m[k]
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
struct Polynomial: Codable {
    var degree: Int
    var coefficients: [Double]
    init() {
        self.degree = 0
        self.coefficients = []
    }
    init(degree: Int, coefficients: [Double]) {
        self.degree = degree
        self.coefficients = coefficients
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func copy_list(_ xs: [Double]) -> [Double] {
        var res: [Double] = ([] as! [Double])
        var i = 0
        while (i < _int(((xs).count))) {
            res = (_append(res, _num(_idx(xs, i))) as! [Double])
            i = _int((i &+ 1))
        }
        return res
    }
    func polynomial_new(_ degree: Int, _ coeffs: [Double]) -> Polynomial {
        if ((_int(((coeffs).count)) != (degree &+ 1))) {
            _ = fatalError("The number of coefficients should be equal to the degree + 1.")
        }
        return Polynomial(degree: Int(degree), coefficients: (copy_list((coeffs as! [Double])) as! [Double]))
    }
    func add(_ p: Polynomial, _ q: Polynomial) -> Polynomial {
        if ((p.degree > q.degree)) {
            var coeffs = (copy_list((p.coefficients as! [Double])) as! [Double])
            var i = 0
            while (i <= q.degree) {
                coeffs = _set(coeffs, i, { let _tmp0 = _num((_num(_idx(coeffs, i)) + _num(_idx(q.coefficients, i)))); return _tmp0 }())
                i = _int((i &+ 1))
            }
            return Polynomial(degree: (p.degree as? Int ?? 0), coefficients: (coeffs as! [Double]))
        } else {
            var coeffs = (copy_list((q.coefficients as! [Double])) as! [Double])
            var i = 0
            while (i <= p.degree) {
                coeffs = _set(coeffs, i, { let _tmp1 = _num((_num(_idx(coeffs, i)) + _num(_idx(p.coefficients, i)))); return _tmp1 }())
                i = _int((i &+ 1))
            }
            return Polynomial(degree: (q.degree as? Int ?? 0), coefficients: (coeffs as! [Double]))
        }
    }
    func neg(_ p: Polynomial) -> Polynomial {
        var coeffs: [Double] = ([] as! [Double])
        var i = 0
        while (i <= p.degree) {
            coeffs = (_append(coeffs, -_num(_idx(p.coefficients, i))) as! [Double])
            i = _int((i &+ 1))
        }
        return Polynomial(degree: (p.degree as? Int ?? 0), coefficients: (coeffs as! [Double]))
    }
    func sub(_ p: Polynomial, _ q: Polynomial) -> Polynomial {
        return add((p as! Polynomial), (neg((q as! Polynomial)) as! Polynomial))
    }
    func mul(_ p: Polynomial, _ q: Polynomial) -> Polynomial {
        var size = ((p.degree &+ q.degree) &+ 1)
        var coeffs: [Double] = ([] as! [Double])
        var i = 0
        while (i < size) {
            coeffs = (_append(coeffs, 0.0) as! [Double])
            i = _int((i &+ 1))
        }
        i = 0
        while (i <= p.degree) {
            var j = 0
            while (j <= q.degree) {
                coeffs = _set(coeffs, (i &+ j), { let _tmp2 = _num((_num(_idx(coeffs, (i &+ j))) + (_num(_idx(p.coefficients, i)) * _num(_idx(q.coefficients, j))))); return _tmp2 }())
                j = _int((j &+ 1))
            }
            i = _int((i &+ 1))
        }
        return Polynomial(degree: _int((p.degree &+ q.degree)), coefficients: (coeffs as! [Double]))
    }
    func power(_ base: Double, _ exp: Int) -> Double {
        var result = 1.0
        var i = 0
        while (i < exp) {
            result = _num((result * base))
            i = _int((i &+ 1))
        }
        return result
    }
    func evaluate(_ p: Polynomial, _ x: Double) -> Double {
        var result = 0.0
        var i = 0
        while (i <= p.degree) {
            result = _num((result + (_num(_idx(p.coefficients, i)) * _num(power(_num(x), i)))))
            i = _int((i &+ 1))
        }
        return result
    }
    func poly_to_string(_ p: Polynomial) -> String {
        var s = ""
        var i = p.degree
        while (i >= 0) {
            let coeff = _num(_idx(p.coefficients, i))
            if ((coeff != 0.0)) {
                if ((_int(((s).count)) > 0)) {
                    if ((coeff > 0.0)) {
                        s = ((_p(s) + _p(" + ")) as! String)
                    } else {
                        s = ((_p(s) + _p(" - ")) as! String)
                    }
                } else {
                    if ((coeff < 0.0)) {
                        s = ((_p(s) + _p("-")) as! String)
                    }
                }
                let abs_coeff = _num(((coeff < 0.0) ? -coeff : coeff))
                if ((i == 0)) {
                    s = ((_p(s) + _p(_p(abs_coeff))) as! String)
                } else if ((i == 1)) {
                    s = ((_p((_p(s) + _p(_p(abs_coeff)))) + _p("x")) as! String)
                } else {
                    s = ((_p((_p((_p(s) + _p(_p(abs_coeff)))) + _p("x^"))) + _p(_p(i))) as! String)
                }
                
            }
            i = _int((i &- 1))
        }
        if ((s == "")) {
            s = "0"
        }
        return s
    }
    func derivative(_ p: Polynomial) -> Polynomial {
        if ((p.degree == 0)) {
            return Polynomial(degree: 0, coefficients: ({
                var _arr: [Double] = []
                _arr = _append(_arr, 0.0)
                return _arr
            }() as! [Double]))
        }
        var coeffs: [Double] = ([] as! [Double])
        var i = 0
        while (i < p.degree) {
            coeffs = (((_append(coeffs, (_num(_idx(p.coefficients, (i &+ 1))) * _num(Double((i &+ 1))))) as! [Double]) as! [Any?]) as! [Double])
            i = _int((i &+ 1))
        }
        return Polynomial(degree: _int((p.degree &- 1)), coefficients: (coeffs as! [Double]))
    }
    func integral(_ p: Polynomial, _ constant: Double) -> Polynomial {
        var coeffs: [Double] = ({
            var _arr: [Double] = []
            _arr = _append(_arr, constant)
            return _arr
        }() as! [Double])
        var i = 0
        while (i <= p.degree) {
            coeffs = (((_append(coeffs, (_num(_idx(p.coefficients, i)) / _num(Double((i &+ 1))))) as! [Double]) as! [Any?]) as! [Double])
            i = _int((i &+ 1))
        }
        return Polynomial(degree: _int((p.degree &+ 1)), coefficients: (coeffs as! [Double]))
    }
    func equals(_ p: Polynomial, _ q: Polynomial) -> Bool {
        if ((p.degree != q.degree)) {
            return false
        }
        var i = 0
        while (i <= p.degree) {
            if ((_num(_idx(p.coefficients, i)) != _num(_idx(q.coefficients, i)))) {
                return false
            }
            i = _int((i &+ 1))
        }
        return true
    }
    func not_equals(_ p: Polynomial, _ q: Polynomial) -> Bool {
        return (!equals((p as! Polynomial), (q as! Polynomial)))
    }
    func test_polynomial() {
        let p = polynomial_new(2, ({
            var _arr: [Double] = []
            _arr = _append(_arr, 1.0)
            _arr = _append(_arr, 2.0)
            _arr = _append(_arr, 3.0)
            return _arr
        }() as! [Double]))
        let q = polynomial_new(2, ({
            var _arr: [Double] = []
            _arr = _append(_arr, 1.0)
            _arr = _append(_arr, 2.0)
            _arr = _append(_arr, 3.0)
            return _arr
        }() as! [Double]))
        if ((String(describing: poly_to_string((add((p as! Polynomial), (q as! Polynomial)) as! Polynomial))) != "6x^2 + 4x + 2")) {
            _ = fatalError("add failed")
        }
        if ((String(describing: poly_to_string((sub((p as! Polynomial), (q as! Polynomial)) as! Polynomial))) != "0")) {
            _ = fatalError("sub failed")
        }
        if ((_num(evaluate((p as! Polynomial), 2.0)) != 17.0)) {
            _ = fatalError("evaluate failed")
        }
        if ((String(describing: poly_to_string((derivative((p as! Polynomial)) as! Polynomial))) != "6x + 2")) {
            _ = fatalError("derivative failed")
        }
        let integ = String(describing: poly_to_string((integral((p as! Polynomial), 0.0) as! Polynomial)))
        if ((integ != "1x^3 + 1x^2 + 1x")) {
            _ = fatalError("integral failed")
        }
        if ((!equals((p as! Polynomial), (q as! Polynomial)))) {
            _ = fatalError("equals failed")
        }
        if (not_equals((p as! Polynomial), (q as! Polynomial))) {
            _ = fatalError("not_equals failed")
        }
    }
    func main() {
        _ = test_polynomial()
        let p = polynomial_new(2, ({
            var _arr: [Double] = []
            _arr = _append(_arr, 1.0)
            _arr = _append(_arr, 2.0)
            _arr = _append(_arr, 3.0)
            return _arr
        }() as! [Double]))
        let d = derivative((p as! Polynomial))
        print(_p(String(describing: poly_to_string((d as! Polynomial)))))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
