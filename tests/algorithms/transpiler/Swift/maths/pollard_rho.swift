// Generated by Mochi transpiler v0.10.67 on 2025-08-17 12:18:42 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.isNaN || d.isInfinite {
                return String(d)
            }
            if d.rounded(.towardZero) == d {
                // avoid overflow when converting to Int64
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _num(_ v: Any) -> Double {
    if let d = v as? Double { return d }
    if let i = v as? Int { return Double(i) }
    if let i = v as? Int64 { return Double(i) }
    return 0
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
struct PollardResult: Codable {
    var factor: Int
    var ok: Bool
    init() {
        self.factor = 0
        self.ok = false
    }
    init(factor: Int, ok: Bool) {
        self.factor = factor
        self.ok = ok
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func gcd(_ a: Int, _ b: Int) -> Int {
        var x = _int(((a < 0) ? -a : a))
        var y = _int(((b < 0) ? -b : b))
        while (y != 0) {
            let t = ((x % y + y) % y)
            x = Int(y)
            y = Int(t)
        }
        return x
    }
    func rand_fn(_ value: Int, _ step: Int, _ modulus: Int) -> Int {
        return ((_int(((value &* value) &+ step)) % modulus + modulus) % modulus)
    }
    func pollard_rho(_ num: Int, _ seed: Int, _ step: Int, _ attempts: Int) -> PollardResult {
        if ((num < 2)) {
            _ = fatalError("The input value cannot be less than 2")
        }
        if (((num > 2) && (((num % 2 + 2) % 2) == 0))) {
            return PollardResult(factor: 2, ok: true)
        }
        var s = seed
        var st = step
        var i = 0
        while (i < attempts) {
            var tortoise = s
            var hare = s
            while true {
                tortoise = _int(rand_fn(tortoise, st, num))
                hare = _int(rand_fn(hare, st, num))
                hare = _int(rand_fn(hare, st, num))
                let divisor = _int(gcd((hare &- tortoise), num))
                if ((divisor == 1)) {
                    continue
                } else if ((divisor == num)) {
                    break
                } else {
                    return PollardResult(factor: Int(divisor), ok: true)
                }
                
            }
            s = Int(hare)
            st = _int((st &+ 1))
            i = _int((i &+ 1))
        }
        return PollardResult(factor: 0, ok: false)
    }
    func test_pollard_rho() {
        let r1 = pollard_rho(8051, 2, 1, 5)
        if (((!r1.ok) || ((r1.factor != 83) && (r1.factor != 97)))) {
            _ = fatalError("test1 failed")
        }
        let r2 = pollard_rho(10403, 2, 1, 5)
        if (((!r2.ok) || ((r2.factor != 101) && (r2.factor != 103)))) {
            _ = fatalError("test2 failed")
        }
        let r3 = pollard_rho(100, 2, 1, 3)
        if (((!r3.ok) || (r3.factor != 2))) {
            _ = fatalError("test3 failed")
        }
        let r4 = pollard_rho(17, 2, 1, 3)
        if (r4.ok) {
            _ = fatalError("test4 failed")
        }
        let r5 = pollard_rho(((17 &* 17) &* 17), 2, 1, 3)
        if (((!r5.ok) || (r5.factor != 17))) {
            _ = fatalError("test5 failed")
        }
        let r6 = pollard_rho(((17 &* 17) &* 17), 2, 1, 1)
        if (r6.ok) {
            _ = fatalError("test6 failed")
        }
        let r7 = pollard_rho(((3 &* 5) &* 7), 2, 1, 3)
        if (((!r7.ok) || (r7.factor != 21))) {
            _ = fatalError("test7 failed")
        }
    }
    func main() {
        _ = test_pollard_rho()
        let a = pollard_rho(100, 2, 1, 3)
        if (a.ok) {
            print(_p(_p(a.factor)))
        } else {
            print(_p("None"))
        }
        let b = pollard_rho(17, 2, 1, 3)
        if (b.ok) {
            print(_p(_p(b.factor)))
        } else {
            print(_p("None"))
        }
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
