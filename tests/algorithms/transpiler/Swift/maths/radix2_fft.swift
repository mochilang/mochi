// Generated by Mochi transpiler v0.10.67 on 2025-08-17 12:19:21 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.isNaN || d.isInfinite {
                return String(d)
            }
            if d.rounded(.towardZero) == d {
                // avoid overflow when converting to Int64
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _num(_ v: Any) -> Double {
    if let d = v as? Double { return d }
    if let i = v as? Int { return Double(i) }
    if let i = v as? Int64 { return Double(i) }
    return 0
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first!
}
func _idx<K: Hashable, V>(_ m: [K: V], _ k: K) -> V? {
    return m[k]
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
func _slice<T>(_ xs: [T], _ start: Int, _ end: Int) -> [T] {
    var s = start
    var e = end
    if s < 0 { s = 0 }
    if e > xs.count { e = xs.count }
    if s > e { s = e }
    return Array(xs[s..<e])
}
struct Complex: Codable {
    var re: Double
    var im: Double
    init() {
        self.re = 0
        self.im = 0
    }
    init(re: Double, im: Double) {
        self.re = re
        self.im = im
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func c_add(_ a: Complex, _ b: Complex) -> Complex {
        return Complex(re: _num((a.re + b.re)), im: _num((a.im + b.im)))
    }
    func c_sub(_ a: Complex, _ b: Complex) -> Complex {
        return Complex(re: _num((a.re - b.re)), im: _num((a.im - b.im)))
    }
    func c_mul(_ a: Complex, _ b: Complex) -> Complex {
        return Complex(re: _num(((a.re * b.re) - (a.im * b.im))), im: _num(((a.re * b.im) + (a.im * b.re))))
    }
    func c_mul_scalar(_ a: Complex, _ s: Double) -> Complex {
        return Complex(re: _num((a.re * s)), im: _num((a.im * s)))
    }
    func c_div_scalar(_ a: Complex, _ s: Double) -> Complex {
        return Complex(re: _num((a.re / s)), im: _num((a.im / s)))
    }
    let PI: Double = 3.141592653589793
    func sin_taylor(_ x: Double) -> Double {
        var term = x
        var sum = x
        var i = 1
        while (i < 10) {
            let k1 = (2.0 * _num(i))
            let k2 = (k1 + 1.0)
            term = _num((((-term * x) * x) / _num((k1 * k2))))
            sum = _num((sum + term))
            i = _int((i &+ 1))
        }
        return sum
    }
    func cos_taylor(_ x: Double) -> Double {
        var term = 1.0
        var sum = 1.0
        var i = 1
        while (i < 10) {
            let k1 = ((2.0 * _num(i)) - 1.0)
            let k2 = (2.0 * _num(i))
            term = _num((((-term * x) * x) / _num((k1 * k2))))
            sum = _num((sum + term))
            i = _int((i &+ 1))
        }
        return sum
    }
    func exp_i(_ theta: Double) -> Complex {
        return Complex(re: _num(cos_taylor(_num(theta))), im: _num(sin_taylor(_num(theta))))
    }
    func make_complex_list(_ n: Int, _ value: Complex) -> [Complex] {
        var arr: [Complex] = ([] as! [Complex])
        var i = 0
        while (i < n) {
            arr = (_append(arr, value) as! [Complex])
            i = _int((i &+ 1))
        }
        return arr
    }
    func fft(_ a: [Complex], _ invert: Bool) -> [Complex] {
        let n = _int(((a).count))
        if ((n == 1)) {
            return ({
                var _arr: [Complex] = []
                _arr = _append(_arr, (_idx(a, 0) as! Complex))
                return _arr
            }() as! [Complex])
        }
        var a0: [Complex] = ([] as! [Complex])
        var a1: [Complex] = ([] as! [Complex])
        var i = 0
        while (i < (n / 2)) {
            a0 = (_append(a0, (_idx(a, (2 &* i)) as! Complex)) as! [Complex])
            a1 = (_append(a1, (_idx(a, ((2 &* i) &+ 1)) as! Complex)) as! [Complex])
            i = _int((i &+ 1))
        }
        let y0: [Complex] = (fft((a0 as! [Complex]), (invert as! Bool)) as! [Complex])
        let y1: [Complex] = (fft((a1 as! [Complex]), (invert as! Bool)) as! [Complex])
        let angle = (((2.0 * PI) / _num(n)) * _num((invert ? -1.0 : 1.0)))
        var w = Complex(re: 1.0, im: 0.0)
        let wn = exp_i(_num(angle))
        var y: [Complex] = (make_complex_list(n, (Complex(re: 0.0, im: 0.0) as! Complex)) as! [Complex])
        i = 0
        while (i < (n / 2)) {
            let t = c_mul((w as! Complex), (_idx(y1, i) as! Complex))
            let u = (_idx(y0, i) as! Complex)
            var even = c_add((u as! Complex), (t as! Complex))
            var odd = c_sub((u as! Complex), (t as! Complex))
            if (invert) {
                even = (c_div_scalar((even as! Complex), 2.0) as! Complex)
                odd = (c_div_scalar((odd as! Complex), 2.0) as! Complex)
            }
            y = _set(y, i, { let _tmp0 = (even as! Complex); return _tmp0 }())
            y = _set(y, (i &+ (n / 2)), { let _tmp1 = (odd as! Complex); return _tmp1 }())
            w = (c_mul((w as! Complex), (wn as! Complex)) as! Complex)
            i = _int((i &+ 1))
        }
        return y
    }
    func floor(_ x: Double) -> Double {
        var i = Int(x)
        if ((_num(i) > x)) {
            i = _int((i &- 1))
        }
        return _num(i)
    }
    func pow10(_ n: Int) -> Double {
        var p = 1.0
        var i = 0
        while (i < n) {
            p = _num((p * 10.0))
            i = _int((i &+ 1))
        }
        return p
    }
    func round_to(_ x: Double, _ ndigits: Int) -> Double {
        let m = _num(pow10(ndigits))
        return (_num(floor(_num(((x * m) + 0.5)))) / m)
    }
    func list_to_string(_ l: [Double]) -> String {
        var s = "["
        var i = 0
        while (i < _int(((l).count))) {
            s = ((_p(s) + _p(_p(_num(_idx(l, i))))) as! String)
            if (((i &+ 1) < _int(((l).count)))) {
                s = ((_p(s) + _p(", ")) as! String)
            }
            i = _int((i &+ 1))
        }
        s = ((_p(s) + _p("]")) as! String)
        return s
    }
    func multiply_poly(_ a: [Double], _ b: [Double]) -> [Double] {
        var n = 1
        while (n < ((_int(((a).count)) &+ _int(((b).count))) &- 1)) {
            n = _int((n &* 2))
        }
        var fa = (make_complex_list(n, (Complex(re: 0.0, im: 0.0) as! Complex)) as! [Complex])
        var fb = (make_complex_list(n, (Complex(re: 0.0, im: 0.0) as! Complex)) as! [Complex])
        var i = 0
        while (i < _int(((a).count))) {
            fa = _set(fa, i, { let _tmp2 = (Complex(re: _num(_idx(a, i)), im: 0.0) as! Complex); return _tmp2 }())
            i = _int((i &+ 1))
        }
        i = 0
        while (i < _int(((b).count))) {
            fb = _set(fb, i, { let _tmp3 = (Complex(re: _num(_idx(b, i)), im: 0.0) as! Complex); return _tmp3 }())
            i = _int((i &+ 1))
        }
        fa = (fft((fa as! [Complex]), false) as! [Complex])
        fb = (fft((fb as! [Complex]), false) as! [Complex])
        i = 0
        while (i < n) {
            fa = _set(fa, i, { let _tmp4 = (c_mul((_idx(fa, i) as! Complex), (_idx(fb, i) as! Complex)) as! Complex); return _tmp4 }())
            i = _int((i &+ 1))
        }
        fa = (fft((fa as! [Complex]), true) as! [Complex])
        var res: [Double] = ([] as! [Double])
        i = 0
        while (i < ((_int(((a).count)) &+ _int(((b).count))) &- 1)) {
            let val = (_idx(fa, i) as! Complex)
            res = (_append(res, _num(round_to(_num(val.re), 8))) as! [Double])
            i = _int((i &+ 1))
        }
        while ((_int(((res).count)) > 0) && (_num(_idx(res, (_int(((res).count)) &- 1))) == 0.0)) {
            res = (_slice(Array(res), 0, (_int(((res).count)) &- 1)) as! [Double])
        }
        return res
    }
    let A: [Double] = ({
        var _arr: [Double] = []
        _arr = _append(_arr, 0.0)
        _arr = _append(_arr, 1.0)
        _arr = _append(_arr, 0.0)
        _arr = _append(_arr, 2.0)
        return _arr
    }() as! [Double])
    let B: [Double] = ({
        var _arr: [Double] = []
        _arr = _append(_arr, 2.0)
        _arr = _append(_arr, 3.0)
        _arr = _append(_arr, 4.0)
        _arr = _append(_arr, 0.0)
        return _arr
    }() as! [Double])
    let product: [Double] = (multiply_poly((A as! [Double]), (B as! [Double])) as! [Double])
    print(_p(String(describing: list_to_string((product as! [Double])))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
