// Generated by Mochi transpiler v0.10.66 on 2025-08-16 13:06:35 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first!
}
func _idx<K: Hashable, V>(_ m: [K: V], _ k: K) -> V? {
    return m[k]
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func abs_int(_ x: Int) -> Int {
        if (x < 0) {
            return -x
        }
        return x
    }
    func gcd_iter(_ a: Int, _ b: Int) -> Int {
        var x = _int(abs_int(a))
        var y = _int(abs_int(b))
        while (y != 0) {
            let t = y
            y = _int(((x % y + y) % y))
            x = Int(t)
        }
        return x
    }
    func is_prime(_ n: Int) -> Bool {
        if (n <= 1) {
            return false
        }
        var d = 2
        while ((d &* d) <= n) {
            if (((n % d + d) % d) == 0) {
                return false
            }
            d = _int((d &+ 1))
        }
        return true
    }
    func sieve_er(_ n: Int) -> [Int] {
        var nums: [Int] = ([] as! [Int])
        var i = 2
        while (i <= n) {
            nums = (_append(nums, i) as! [Int])
            i = _int((i &+ 1))
        }
        var idx = 0
        while (idx < _int(((nums).count))) {
            var j = (idx &+ 1)
            while (j < _int(((nums).count))) {
                if ((_idx(nums, idx) as? Int ?? 0) != 0) {
                    if ((((_idx(nums, j) as? Int ?? 0) % (_idx(nums, idx) as? Int ?? 0) + (_idx(nums, idx) as? Int ?? 0)) % (_idx(nums, idx) as? Int ?? 0)) == 0) {
                        nums = _set(nums, j, { let _tmp0 = 0; return _tmp0 }())
                    }
                }
                j = _int((j &+ 1))
            }
            idx = _int((idx &+ 1))
        }
        var res: [Int] = ([] as! [Int])
        var k = 0
        while (k < _int(((nums).count))) {
            let v = (_idx(nums, k) as? Int ?? 0)
            if (v != 0) {
                res = (_append(res, v) as! [Int])
            }
            k = _int((k &+ 1))
        }
        return res
    }
    func get_prime_numbers(_ n: Int) -> [Int] {
        var ans: [Int] = ([] as! [Int])
        var num = 2
        while (num <= n) {
            if is_prime(num) {
                ans = (_append(ans, num) as! [Int])
            }
            num = _int((num &+ 1))
        }
        return ans
    }
    func prime_factorization(_ number: Int) -> [Int] {
        if (number == 0) {
            return ({
                var _arr: [Int] = []
                _arr = _append(_arr, 0)
                return _arr
            }() as! [Int])
        }
        if (number == 1) {
            return ({
                var _arr: [Int] = []
                _arr = _append(_arr, 1)
                return _arr
            }() as! [Int])
        }
        var ans: [Int] = ([] as! [Int])
        if is_prime(number) {
            ans = (_append(ans, number) as! [Int])
            return ans
        }
        var quotient = number
        var factor = 2
        while (quotient != 1) {
            if (is_prime(factor) && (((quotient % factor + factor) % factor) == 0)) {
                ans = (_append(ans, factor) as! [Int])
                quotient = _int((quotient / factor))
            } else {
                factor = _int((factor &+ 1))
            }
        }
        return ans
    }
    func greatest_prime_factor(_ number: Int) -> Int {
        let factors: [Int] = (prime_factorization(number) as! [Int])
        var m = (_idx(factors, 0) as? Int ?? 0)
        var i = 1
        while (i < _int(((factors).count))) {
            if ((_idx(factors, i) as? Int ?? 0) > m) {
                m = (_idx(factors, i) as? Int ?? 0)
            }
            i = _int((i &+ 1))
        }
        return m
    }
    func smallest_prime_factor(_ number: Int) -> Int {
        let factors: [Int] = (prime_factorization(number) as! [Int])
        var m = (_idx(factors, 0) as? Int ?? 0)
        var i = 1
        while (i < _int(((factors).count))) {
            if ((_idx(factors, i) as? Int ?? 0) < m) {
                m = (_idx(factors, i) as? Int ?? 0)
            }
            i = _int((i &+ 1))
        }
        return m
    }
    func kg_v(_ number1: Int, _ number2: Int) -> Int {
        if ((number1 < 1) || (number2 < 1)) {
            _ = fatalError("numbers must be positive")
        }
        let g = _int(gcd_iter(number1, number2))
        return (_int((number1 / g)) &* number2)
    }
    func is_even(_ number: Int) -> Bool {
        return (((number % 2 + 2) % 2) == 0)
    }
    func is_odd(_ number: Int) -> Bool {
        return (((number % 2 + 2) % 2) != 0)
    }
    func goldbach(_ number: Int) -> [Int] {
        if ((!is_even(number)) || (number <= 2)) {
            _ = fatalError("number must be even and > 2")
        }
        let primes: [Int] = (get_prime_numbers(number) as! [Int])
        var i = 0
        while (i < _int(((primes).count))) {
            var j = (i &+ 1)
            while (j < _int(((primes).count))) {
                if (((_idx(primes, i) as? Int ?? 0) &+ (_idx(primes, j) as? Int ?? 0)) == number) {
                    return ({
                        var _arr: [Int] = []
                        _arr = _append(_arr, (_idx(primes, i) as? Int ?? 0))
                        _arr = _append(_arr, (_idx(primes, j) as? Int ?? 0))
                        return _arr
                    }() as! [Int])
                }
                j = _int((j &+ 1))
            }
            i = _int((i &+ 1))
        }
        return ([] as! [Int])
    }
    func get_prime(_ n: Int) -> Int {
        if (n < 0) {
            _ = fatalError("n must be non-negative")
        }
        var index = 0
        var ans = 2
        while (index < n) {
            index = _int((index &+ 1))
            ans = _int((ans &+ 1))
            while (!is_prime(ans)) {
                ans = _int((ans &+ 1))
            }
        }
        return ans
    }
    func get_primes_between(_ p1: Int, _ p2: Int) -> [Int] {
        let bad1 = (!is_prime(p1))
        let bad2 = (!is_prime(p2))
        if ((bad1 || bad2) || (p1 >= p2)) {
            _ = fatalError("arguments must be prime and p1 < p2")
        }
        var num = (p1 &+ 1)
        while (num < p2) {
            if is_prime(num) {
                break
            }
            num = _int((num &+ 1))
        }
        var ans: [Int] = ([] as! [Int])
        while (num < p2) {
            ans = (_append(ans, num) as! [Int])
            num = _int((num &+ 1))
            while (num < p2) {
                if is_prime(num) {
                    break
                }
                num = _int((num &+ 1))
            }
        }
        return ans
    }
    func get_divisors(_ n: Int) -> [Int] {
        if (n < 1) {
            _ = fatalError("n must be >= 1")
        }
        var ans: [Int] = ([] as! [Int])
        var d = 1
        while (d <= n) {
            if (((n % d + d) % d) == 0) {
                ans = (_append(ans, d) as! [Int])
            }
            d = _int((d &+ 1))
        }
        return ans
    }
    func is_perfect_number(_ number: Int) -> Bool {
        if (number <= 1) {
            _ = fatalError("number must be > 1")
        }
        let divisors: [Int] = (get_divisors(number) as! [Int])
        var sum = 0
        var i = 0
        while (i < (_int(((divisors).count)) &- 1)) {
            sum = _int((sum &+ (_idx(divisors, i) as? Int ?? 0)))
            i = _int((i &+ 1))
        }
        return (sum == number)
    }
    func simplify_fraction(_ numerator: Int, _ denominator: Int) -> [Int] {
        if (denominator == 0) {
            _ = fatalError("denominator cannot be zero")
        }
        let g = _int(gcd_iter(_int(abs_int(numerator)), _int(abs_int(denominator))))
        return ({
            var _arr: [Int] = []
            _arr = _append(_arr, (numerator / g))
            _arr = _append(_arr, (denominator / g))
            return _arr
        }() as! [Int])
    }
    func factorial(_ n: Int) -> Int {
        if (n < 0) {
            _ = fatalError("n must be >= 0")
        }
        var ans = 1
        var i = 1
        while (i <= n) {
            ans = _int((ans &* i))
            i = _int((i &+ 1))
        }
        return ans
    }
    func fib(_ n: Int) -> Int {
        if (n < 0) {
            _ = fatalError("n must be >= 0")
        }
        if (n <= 1) {
            return 1
        }
        var tmp = 0
        var fib1 = 1
        var ans = 1
        var i = 0
        while (i < (n &- 1)) {
            tmp = Int(ans)
            ans = _int((ans &+ fib1))
            fib1 = Int(tmp)
            i = _int((i &+ 1))
        }
        return ans
    }
    print(_p(_p(is_prime(97))))
    print(_p("[" + (sieve_er(20) as! [Int]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    print(_p("[" + (get_prime_numbers(20) as! [Int]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    print(_p("[" + (prime_factorization(287) as! [Int]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    print(_p(_p(_int(greatest_prime_factor(287)))))
    print(_p(_p(_int(smallest_prime_factor(287)))))
    print(_p(_p(_int(kg_v(8, 10)))))
    print(_p("[" + (goldbach(28) as! [Int]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    print(_p(_p(_int(get_prime(8)))))
    print(_p("[" + (get_primes_between(3, 20) as! [Int]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    print(_p("[" + (get_divisors(28) as! [Int]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    print(_p(_p(is_perfect_number(28))))
    print(_p("[" + (simplify_fraction(10, 20) as! [Int]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    print(_p(_p(_int(factorial(5)))))
    print(_p(_p(_int(fib(10)))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
