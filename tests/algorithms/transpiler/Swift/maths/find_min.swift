// Generated by Mochi transpiler v0.10.62 on 2025-08-09 12:16:25 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func find_min_iterative(_ nums: [Double]) -> Double {
        if (_int(((nums).count)) == 0) {
            _ = fatalError("find_min_iterative() arg is an empty sequence")
        }
        var min_num = Double(_idx(nums, 0))
        var i = 0
        while (i < _int(((nums).count))) {
            let num = Double(_idx(nums, i))
            if (num < min_num) {
                min_num = Double(num)
            }
            i = _int((i &+ 1))
        }
        return min_num
    }
    func find_min_recursive(_ nums: [Double], _ left: Int, _ right: Int) -> Double {
        let n = _int(((nums).count))
        if (n == 0) {
            _ = fatalError("find_min_recursive() arg is an empty sequence")
        }
        if ((((left >= n) || (left < _int((0 &- n)))) || (right >= n)) || (right < _int((0 &- n)))) {
            _ = fatalError("list index out of range")
        }
        var l = left
        var r = right
        if (l < 0) {
            l = _int((n &+ l))
        }
        if (r < 0) {
            r = _int((n &+ r))
        }
        if (l == r) {
            return Double(_idx(nums, l))
        }
        let mid = (_int((l &+ r)) / 2)
        let left_min = Double(find_min_recursive((nums as! [Double]), l, mid))
        let right_min = Double(find_min_recursive((nums as! [Double]), (mid &+ 1), r))
        if (left_min <= right_min) {
            return left_min
        }
        return right_min
    }
    func test_find_min() {
        let a: [Double] = ({
            var _arr: [Double] = []
            _arr = _append(_arr, 3.0)
            _arr = _append(_arr, 2.0)
            _arr = _append(_arr, 1.0)
            return _arr
        }() as! [Double])
        if (Double(find_min_iterative((a as! [Double]))) != 1.0) {
            _ = fatalError("iterative test1 failed")
        }
        if (Double(find_min_recursive((a as! [Double]), 0, (_int(((a).count)) &- 1))) != 1.0) {
            _ = fatalError("recursive test1 failed")
        }
        let b: [Double] = ({
            var _arr: [Double] = []
            _arr = _append(_arr, -3.0)
            _arr = _append(_arr, -2.0)
            _arr = _append(_arr, -1.0)
            return _arr
        }() as! [Double])
        if (Double(find_min_iterative((b as! [Double]))) != Double(-3.0)) {
            _ = fatalError("iterative test2 failed")
        }
        if (Double(find_min_recursive((b as! [Double]), 0, (_int(((b).count)) &- 1))) != Double(-3.0)) {
            _ = fatalError("recursive test2 failed")
        }
        let c: [Double] = ({
            var _arr: [Double] = []
            _arr = _append(_arr, 3.0)
            _arr = _append(_arr, -3.0)
            _arr = _append(_arr, 0.0)
            return _arr
        }() as! [Double])
        if (Double(find_min_iterative((c as! [Double]))) != Double(-3.0)) {
            _ = fatalError("iterative test3 failed")
        }
        if (Double(find_min_recursive((c as! [Double]), 0, (_int(((c).count)) &- 1))) != Double(-3.0)) {
            _ = fatalError("recursive test3 failed")
        }
        let d: [Double] = ({
            var _arr: [Double] = []
            _arr = _append(_arr, 1.0)
            _arr = _append(_arr, 3.0)
            _arr = _append(_arr, 5.0)
            _arr = _append(_arr, 7.0)
            _arr = _append(_arr, 9.0)
            _arr = _append(_arr, 2.0)
            _arr = _append(_arr, 4.0)
            _arr = _append(_arr, 6.0)
            _arr = _append(_arr, 8.0)
            _arr = _append(_arr, 10.0)
            return _arr
        }() as! [Double])
        if (Double(find_min_recursive((d as! [Double]), _int((0 &- _int(((d).count)))), _int((0 &- 1)))) != 1.0) {
            _ = fatalError("negative index test failed")
        }
    }
    func main() {
        _ = test_find_min()
        let sample: [Double] = ({
            var _arr: [Double] = []
            _arr = _append(_arr, 0.0)
            _arr = _append(_arr, 1.0)
            _arr = _append(_arr, 2.0)
            _arr = _append(_arr, 3.0)
            _arr = _append(_arr, 4.0)
            _arr = _append(_arr, 5.0)
            _arr = _append(_arr, -3.0)
            _arr = _append(_arr, 24.0)
            _arr = _append(_arr, -56.0)
            return _arr
        }() as! [Double])
        print(_p(_p(Double(find_min_iterative((sample as! [Double]))))))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
