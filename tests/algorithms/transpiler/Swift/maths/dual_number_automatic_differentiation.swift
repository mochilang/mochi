// Generated by Mochi transpiler v0.10.62 on 2025-08-09 12:13:53 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
struct Dual: Codable {
    var real: Double
    var duals: [Double]
    init() {
        self.real = 0
        self.duals = []
    }
    init(real: Double, duals: [Double]) {
        self.real = real
        self.duals = duals
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func make_dual(_ real: Double, _ rank: Int) -> Dual {
        var ds: [Double] = ([] as! [Double])
        var i = 0
        while (i < rank) {
            ds = (_append(ds, 1.0) as! [Double])
            i = _int((i &+ 1))
        }
        return Dual(real: Double(real), duals: (ds as! [Double]))
    }
    func dual_from_list(_ real: Double, _ ds: [Double]) -> Dual {
        return Dual(real: Double(real), duals: (ds as! [Double]))
    }
    func dual_add(_ a: Dual, _ b: Dual) -> Dual {
        var s_dual: [Double] = ([] as! [Double])
        var i = 0
        while (i < _int(((a.duals).count))) {
            s_dual = (_append(s_dual, Double(_idx(a.duals, i))) as! [Double])
            i = _int((i &+ 1))
        }
        var o_dual: [Double] = ([] as! [Double])
        var j = 0
        while (j < _int(((b.duals).count))) {
            o_dual = (_append(o_dual, Double(_idx(b.duals, j))) as! [Double])
            j = _int((j &+ 1))
        }
        if (_int(((s_dual).count)) > _int(((o_dual).count))) {
            var diff = (_int(((s_dual).count)) &- _int(((o_dual).count)))
            var k = 0
            while (k < diff) {
                o_dual = (_append(o_dual, 1.0) as! [Double])
                k = _int((k &+ 1))
            }
        } else if (_int(((s_dual).count)) < _int(((o_dual).count))) {
            var diff2 = (_int(((o_dual).count)) &- _int(((s_dual).count)))
            var k2 = 0
            while (k2 < diff2) {
                s_dual = (_append(s_dual, 1.0) as! [Double])
                k2 = _int((k2 &+ 1))
            }
        }
        
        var new_duals: [Double] = ([] as! [Double])
        var idx = 0
        while (idx < _int(((s_dual).count))) {
            new_duals = (_append(new_duals, (Double(_idx(s_dual, idx)) + Double(_idx(o_dual, idx)))) as! [Double])
            idx = _int((idx &+ 1))
        }
        return Dual(real: Double((a.real + b.real)), duals: (new_duals as! [Double]))
    }
    func dual_add_real(_ a: Dual, _ b: Double) -> Dual {
        var ds: [Double] = ([] as! [Double])
        var i = 0
        while (i < _int(((a.duals).count))) {
            ds = (_append(ds, Double(_idx(a.duals, i))) as! [Double])
            i = _int((i &+ 1))
        }
        return Dual(real: Double((a.real + b)), duals: (ds as! [Double]))
    }
    func dual_mul(_ a: Dual, _ b: Dual) -> Dual {
        let new_len = ((_int(((a.duals).count)) &+ _int(((b.duals).count))) &+ 1)
        var new_duals: [Double] = ([] as! [Double])
        var idx = 0
        while (idx < new_len) {
            new_duals = (_append(new_duals, 0.0) as! [Double])
            idx = _int((idx &+ 1))
        }
        var i = 0
        while (i < _int(((a.duals).count))) {
            var j = 0
            while (j < _int(((b.duals).count))) {
                let pos = ((i &+ j) &+ 1)
                let val = (Double(_idx(new_duals, pos)) + (Double(_idx(a.duals, i)) * Double(_idx(b.duals, j))))
                new_duals = _set(new_duals, pos, Double(val))
                j = _int((j &+ 1))
            }
            i = _int((i &+ 1))
        }
        var k = 0
        while (k < _int(((a.duals).count))) {
            let val = (Double(_idx(new_duals, k)) + (Double(_idx(a.duals, k)) * b.real))
            new_duals = _set(new_duals, k, Double(val))
            k = _int((k &+ 1))
        }
        var l = 0
        while (l < _int(((b.duals).count))) {
            let val = (Double(_idx(new_duals, l)) + (Double(_idx(b.duals, l)) * a.real))
            new_duals = _set(new_duals, l, Double(val))
            l = _int((l &+ 1))
        }
        return Dual(real: Double((a.real * b.real)), duals: (new_duals as! [Double]))
    }
    func dual_mul_real(_ a: Dual, _ b: Double) -> Dual {
        var ds: [Double] = ([] as! [Double])
        var i = 0
        while (i < _int(((a.duals).count))) {
            ds = (_append(ds, (Double(_idx(a.duals, i)) * b)) as! [Double])
            i = _int((i &+ 1))
        }
        return Dual(real: Double((a.real * b)), duals: (ds as! [Double]))
    }
    func dual_pow(_ x: Dual, _ n: Int) -> Dual {
        if (n < 0) {
            _ = fatalError("power must be a positive integer")
        }
        if (n == 0) {
            return Dual(real: 1.0, duals: ([] as! [Double]))
        }
        var res = x
        var i = 1
        while (i < n) {
            res = (dual_mul((res as! Dual), (x as! Dual)) as! Dual)
            i = _int((i &+ 1))
        }
        return res
    }
    func factorial(_ n: Int) -> Double {
        var res: Double = 1.0
        var i = 2
        while (i <= n) {
            res = Double((res * Double(i)))
            i = _int((i &+ 1))
        }
        return res
    }
    func differentiate(_ `func`: @escaping (Dual) -> Dual, _ position: Double, _ order: Int) -> Double {
        let d = make_dual(Double(position), 1)
        let result = `func`((d as! Dual))
        if (order == 0) {
            return result.real
        }
        return (Double(_idx(result.duals, (order &- 1))) * Double(factorial(order)))
    }
    func test_differentiate() {
        func f1(_ x: Dual) -> Dual {
            return dual_pow((x as! Dual), 2)
        }
        if (Double(differentiate((f1 as! (Dual) -> Dual), 2.0, 2)) != 2.0) {
            _ = fatalError("f1 failed")
        }
        func f2(_ x: Dual) -> Dual {
            return dual_mul((dual_pow((x as! Dual), 2) as! Dual), (dual_pow((x as! Dual), 4) as! Dual))
        }
        if (Double(differentiate((f2 as! (Dual) -> Dual), 9.0, 2)) != 196830.0) {
            _ = fatalError("f2 failed")
        }
        func f3(_ y: Dual) -> Dual {
            return dual_mul_real((dual_pow((dual_add_real((y as! Dual), 3.0) as! Dual), 6) as! Dual), 0.5)
        }
        if (Double(differentiate((f3 as! (Dual) -> Dual), 3.5, 4)) != 7605.0) {
            _ = fatalError("f3 failed")
        }
        func f4(_ y: Dual) -> Dual {
            return dual_pow((y as! Dual), 2)
        }
        if (Double(differentiate((f4 as! (Dual) -> Dual), 4.0, 3)) != 0.0) {
            _ = fatalError("f4 failed")
        }
    }
    func main() {
        _ = test_differentiate()
        func f(_ y: Dual) -> Dual {
            return dual_mul((dual_pow((y as! Dual), 2) as! Dual), (dual_pow((y as! Dual), 4) as! Dual))
        }
        let res = Double(differentiate((f as! (Dual) -> Dual), 9.0, 2))
        print(_p(res))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
