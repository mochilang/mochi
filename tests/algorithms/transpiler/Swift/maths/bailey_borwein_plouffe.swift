// Generated by Mochi transpiler v0.10.62 on 2025-08-09 12:12:10 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func mod_pow(_ base: Int, _ exponent: Int, _ modulus: Int) -> Int {
        var result = 1
        var b = ((base % modulus + modulus) % modulus)
        var e = exponent
        while (e > 0) {
            if (((e % 2 + 2) % 2) == 1) {
                result = _int(((_int((result &* b)) % modulus + modulus) % modulus))
            }
            b = _int(((_int((b &* b)) % modulus + modulus) % modulus))
            e = _int((e / 2))
        }
        return result
    }
    func pow_float(_ base: Double, _ exponent: Int) -> Double {
        var exp = exponent
        var result = 1.0
        if (exp < 0) {
            exp = _int(-exp)
        }
        var i = 0
        while (i < exp) {
            result = Double((result * base))
            i = _int((i &+ 1))
        }
        if (exponent < 0) {
            result = Double((1.0 / result))
        }
        return result
    }
    func hex_digit(_ n: Int) -> String {
        if (n < 10) {
            return _p(n)
        }
        let letters: [String] = ({
            var _arr: [String] = []
            _arr = _append(_arr, "a")
            _arr = _append(_arr, "b")
            _arr = _append(_arr, "c")
            _arr = _append(_arr, "d")
            _arr = _append(_arr, "e")
            _arr = _append(_arr, "f")
            return _arr
        }() as! [String])
        return (_idx(letters, (n &- 10)) as! String)
    }
    func floor_float(_ x: Double) -> Double {
        var i = Int(x)
        if (Double(i) > x) {
            i = _int((i &- 1))
        }
        return Double(i)
    }
    func subsum(_ digit_pos_to_extract: Int, _ denominator_addend: Int, _ precision: Int) -> Double {
        var total = 0.0
        var sum_index = 0
        while (sum_index < (digit_pos_to_extract &+ precision)) {
            let denominator = ((8 &* sum_index) &+ denominator_addend)
            if (sum_index < digit_pos_to_extract) {
                let exponent = ((digit_pos_to_extract &- 1) &- sum_index)
                let exponential_term = _int(mod_pow(16, exponent, denominator))
                total = Double((total + (Double(exponential_term) / Double(denominator))))
            } else {
                let exponent = ((digit_pos_to_extract &- 1) &- sum_index)
                let exponential_term = Double(pow_float(16.0, exponent))
                total = Double((total + (exponential_term / Double(denominator))))
            }
            sum_index = _int((sum_index &+ 1))
        }
        return total
    }
    func bailey_borwein_plouffe(_ digit_position: Int, _ precision: Int) -> String {
        if (digit_position <= 0) {
            _ = fatalError("Digit position must be a positive integer")
        }
        if (precision < 0) {
            _ = fatalError("Precision must be a nonnegative integer")
        }
        let sum_result = ((((4.0 * Double(subsum(digit_position, 1, precision))) - (2.0 * Double(subsum(digit_position, 4, precision)))) - (1.0 * Double(subsum(digit_position, 5, precision)))) - (1.0 * Double(subsum(digit_position, 6, precision))))
        let fraction = (sum_result - Double(floor_float(Double(sum_result))))
        let digit = _int((fraction * 16.0))
        let hd = String(describing: hex_digit(digit))
        return hd
    }
    var digits = ""
    var i = 1
    while (i <= 10) {
        digits = ((digits + String(describing: bailey_borwein_plouffe(i, 1000))) as! String)
        i = _int((i &+ 1))
    }
    print(_p(digits))
    print(_p(String(describing: bailey_borwein_plouffe(5, 10000))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
