// Generated by Mochi transpiler v0.10.63 on 2025-08-12 08:03:42 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func sqrt_newton(_ n: Double) -> Double {
        if (n == 0.0) {
            return 0.0
        }
        var x = n
        var i = 0
        while (i < 20) {
            x = Double((Double((x + (n / x))) / 2.0))
            i = _int((i &+ 1))
        }
        return x
    }
    func hypot(_ a: Double, _ b: Double) -> Double {
        return Double(sqrt_newton(Double(((a * a) + (b * b)))))
    }
    func line_length(_ fnc: @escaping (Double) -> Double, _ x_start: Double, _ x_end: Double, _ steps: Int) -> Double {
        var x1 = x_start
        var fx1 = Double(fnc(Double(x_start)))
        var length = 0.0
        var i = 0
        let step = (Double((x_end - x_start)) / Double((1.0 * Double(steps))))
        while (i < steps) {
            let x2 = (step + x1)
            let fx2 = Double(fnc(Double(x2)))
            length = Double((length + Double(hypot(Double((x2 - x1)), Double((fx2 - fx1))))))
            x1 = Double(x2)
            fx1 = Double(fx2)
            i = _int((i &+ 1))
        }
        return length
    }
    func f1(_ x: Double) -> Double {
        return x
    }
    func f2(_ x: Double) -> Double {
        return 1.0
    }
    func f3(_ x: Double) -> Double {
        return (Double((x * x)) / 10.0)
    }
    print(_p(Double(line_length((f1 as! (Double) -> Double), 0.0, 1.0, 10))))
    print(_p(Double(line_length((f2 as! (Double) -> Double), Double(-5.5), 4.5, 100))))
    print(_p(Double(line_length((f3 as! (Double) -> Double), 0.0, 10.0, 1000))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
