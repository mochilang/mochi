// Generated by Mochi transpiler v0.10.66 on 2025-08-16 13:06:50 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first!
}
func _idx<K: Hashable, V>(_ m: [K: V], _ k: K) -> V? {
    return m[k]
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
struct QR: Codable {
    var q: [[Double]]
    var r: [[Double]]
    init() {
        self.q = []
        self.r = []
    }
    init(q: [[Double]], r: [[Double]]) {
        self.q = q
        self.r = r
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func sqrt_approx(_ x: Double) -> Double {
        if (x <= 0.0) {
            return 0.0
        }
        var guess: Double = x
        var i: Int = 0
        while (i < 20) {
            guess = Double((Double((guess + (x / guess))) / 2.0))
            i = _int((i &+ 1))
        }
        return guess
    }
    func sign(_ x: Double) -> Double {
        if (x >= 0.0) {
            return 1.0
        } else {
            return -1.0
        }
    }
    func vector_norm(_ v: [Double]) -> Double {
        var sum: Double = 0.0
        var i: Int = 0
        while (i < _int(((v).count))) {
            sum = Double((sum + (Double(_idx(v, i)) * Double(_idx(v, i)))))
            i = _int((i &+ 1))
        }
        let n = Double(sqrt_approx(Double(sum)))
        return n
    }
    func identity_matrix(_ n: Int) -> [[Double]] {
        var mat: [[Double]] = ([] as! [[Double]])
        var i: Int = 0
        while (i < n) {
            var row: [Double] = ([] as! [Double])
            var j: Int = 0
            while (j < n) {
                if (i == j) {
                    row = (_append(row, 1.0) as! [Double])
                } else {
                    row = (_append(row, 0.0) as! [Double])
                }
                j = _int((j &+ 1))
            }
            mat = (_append(mat, row) as! [[Double]])
            i = _int((i &+ 1))
        }
        return mat
    }
    func copy_matrix(_ a: [[Double]]) -> [[Double]] {
        var mat: [[Double]] = ([] as! [[Double]])
        var i: Int = 0
        while (i < _int(((a).count))) {
            var row: [Double] = ([] as! [Double])
            var j: Int = 0
            while (j < _int((((_idx(a, i) as! [Double])).count))) {
                row = (_append(row, Double(_idx(_idx(a, i), j))) as! [Double])
                j = _int((j &+ 1))
            }
            mat = (_append(mat, row) as! [[Double]])
            i = _int((i &+ 1))
        }
        return mat
    }
    func matmul(_ a: [[Double]], _ b: [[Double]]) -> [[Double]] {
        let m = _int(((a).count))
        let n = _int((((_idx(a, 0) as! [Double])).count))
        let p = _int((((_idx(b, 0) as! [Double])).count))
        var res: [[Double]] = ([] as! [[Double]])
        var i: Int = 0
        while (i < m) {
            var row: [Double] = ([] as! [Double])
            var j: Int = 0
            while (j < p) {
                var sum: Double = 0.0
                var k: Int = 0
                while (k < n) {
                    sum = Double((sum + (Double(_idx(_idx(a, i), k)) * Double(_idx(_idx(b, k), j)))))
                    k = _int((k &+ 1))
                }
                row = (_append(row, sum) as! [Double])
                j = _int((j &+ 1))
            }
            res = (_append(res, row) as! [[Double]])
            i = _int((i &+ 1))
        }
        return res
    }
    func qr_decomposition(_ a: [[Double]]) -> QR {
        let m = _int(((a).count))
        let n = _int((((_idx(a, 0) as! [Double])).count))
        let t = _int(((m < n) ? m : n))
        var q = (identity_matrix(m) as! [[Double]])
        var r = (copy_matrix((a as! [[Double]])) as! [[Double]])
        var k: Int = 0
        while (k < (t &- 1)) {
            var x: [Double] = ([] as! [Double])
            var i: Int = k
            while (i < m) {
                x = (_append(x, Double(_idx(_idx(r, i), k))) as! [Double])
                i = _int((i &+ 1))
            }
            var e1: [Double] = ([] as! [Double])
            i = 0
            while (i < _int(((x).count))) {
                if (i == 0) {
                    e1 = (_append(e1, 1.0) as! [Double])
                } else {
                    e1 = (_append(e1, 0.0) as! [Double])
                }
                i = _int((i &+ 1))
            }
            let alpha = Double(vector_norm((x as! [Double])))
            let s = (Double(sign(Double(_idx(x, 0)))) * alpha)
            var v: [Double] = ([] as! [Double])
            i = 0
            while (i < _int(((x).count))) {
                v = (_append(v, (Double(_idx(x, i)) + (s * Double(_idx(e1, i))))) as! [Double])
                i = _int((i &+ 1))
            }
            let vnorm = Double(vector_norm((v as! [Double])))
            i = 0
            while (i < _int(((v).count))) {
                v = _set(v, i, { let _tmp2 = Double((Double(_idx(v, i)) / vnorm)); return _tmp2 }())
                i = _int((i &+ 1))
            }
            let size = _int(((v).count))
            var qk_small: [[Double]] = ([] as! [[Double]])
            i = 0
            while (i < size) {
                var row: [Double] = ([] as! [Double])
                var j: Int = 0
                while (j < size) {
                    let delta = Double(((i == j) ? 1.0 : 0.0))
                    row = (_append(row, (delta - ((2.0 * Double(_idx(v, i))) * Double(_idx(v, j))))) as! [Double])
                    j = _int((j &+ 1))
                }
                qk_small = (_append(qk_small, row) as! [[Double]])
                i = _int((i &+ 1))
            }
            var qk = (identity_matrix(m) as! [[Double]])
            i = 0
            while (i < size) {
                var j: Int = 0
                while (j < size) {
                    var _tmp2 = (_idx(qk, (k &+ i)) as! [Double])
                    _tmp2 = _set(_tmp2, (k &+ j), { let _tmp3 = Double(_idx(_idx(qk_small, i), j)); return _tmp3 }())
                    qk = _set(qk, (k &+ i), { let _tmp4 = (_tmp2 as! [Double]); return _tmp4 }())
                    j = _int((j &+ 1))
                }
                i = _int((i &+ 1))
            }
            q = (matmul((q as! [[Double]]), (qk as! [[Double]])) as! [[Double]])
            r = (matmul((qk as! [[Double]]), (r as! [[Double]])) as! [[Double]])
            k = _int((k &+ 1))
        }
        return QR(q: (q as! [[Double]]), r: (r as! [[Double]]))
    }
    func print_matrix(_ mat: [[Double]]) {
        var i: Int = 0
        while (i < _int(((mat).count))) {
            var line: String = ""
            var j: Int = 0
            while (j < _int((((_idx(mat, i) as! [Double])).count))) {
                line = ((_p(line) + _p(_p(Double(_idx(_idx(mat, i), j))))) as! String)
                if ((j &+ 1) < _int((((_idx(mat, i) as! [Double])).count))) {
                    line = ((_p(line) + _p(" ")) as! String)
                }
                j = _int((j &+ 1))
            }
            print(_p(line))
            i = _int((i &+ 1))
        }
    }
    let A: [[Double]] = ({
        var _arr: [[Double]] = []
        _arr = _append(_arr, ({
            var _arr: [Double] = []
            _arr = _append(_arr, 12.0)
            _arr = _append(_arr, -51.0)
            _arr = _append(_arr, 4.0)
            return _arr
        }() as! [Double]))
        _arr = _append(_arr, ({
            var _arr: [Double] = []
            _arr = _append(_arr, 6.0)
            _arr = _append(_arr, 167.0)
            _arr = _append(_arr, -68.0)
            return _arr
        }() as! [Double]))
        _arr = _append(_arr, ({
            var _arr: [Double] = []
            _arr = _append(_arr, -4.0)
            _arr = _append(_arr, 24.0)
            _arr = _append(_arr, -41.0)
            return _arr
        }() as! [Double]))
        return _arr
    }() as! [[Double]])
    let result = qr_decomposition((A as! [[Double]]))
    _ = print_matrix((result.q as! [[Double]]))
    _ = print_matrix((result.r as! [[Double]]))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
