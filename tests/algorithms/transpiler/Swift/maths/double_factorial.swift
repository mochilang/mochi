// Generated by Mochi transpiler v0.10.67 on 2025-08-16 21:34:23 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func double_factorial_recursive(_ n: Int) -> Int {
        if (n < 0) {
            _ = fatalError("double_factorial_recursive() not defined for negative values")
        }
        if (n <= 1) {
            return 1
        }
        return (n &* _int(double_factorial_recursive((n &- 2))))
    }
    func double_factorial_iterative(_ n: Int) -> Int {
        if (n < 0) {
            _ = fatalError("double_factorial_iterative() not defined for negative values")
        }
        var result = 1
        var i = n
        while (i > 0) {
            result = _int((result &* i))
            i = _int((i &- 2))
        }
        return result
    }
    func test_double_factorial() {
        if (_int(double_factorial_recursive(0)) != 1) {
            _ = fatalError("0!! recursive failed")
        }
        if (_int(double_factorial_iterative(0)) != 1) {
            _ = fatalError("0!! iterative failed")
        }
        if (_int(double_factorial_recursive(1)) != 1) {
            _ = fatalError("1!! recursive failed")
        }
        if (_int(double_factorial_iterative(1)) != 1) {
            _ = fatalError("1!! iterative failed")
        }
        if (_int(double_factorial_recursive(5)) != 15) {
            _ = fatalError("5!! recursive failed")
        }
        if (_int(double_factorial_iterative(5)) != 15) {
            _ = fatalError("5!! iterative failed")
        }
        if (_int(double_factorial_recursive(6)) != 48) {
            _ = fatalError("6!! recursive failed")
        }
        if (_int(double_factorial_iterative(6)) != 48) {
            _ = fatalError("6!! iterative failed")
        }
        var n = 0
        while (n <= 10) {
            if (_int(double_factorial_recursive(n)) != _int(double_factorial_iterative(n))) {
                _ = fatalError("double factorial mismatch")
            }
            n = _int((n &+ 1))
        }
    }
    func main() {
        _ = test_double_factorial()
        print(_p(_int(double_factorial_iterative(10))))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
