// Generated by Mochi transpiler v0.10.67 on 2025-08-16 21:28:35 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first!
}
func _idx<K: Hashable, V>(_ m: [K: V], _ k: K) -> V? {
    return m[k]
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func abs_val(_ num: Double) -> Double {
        if (num < 0.0) {
            return -num
        }
        return num
    }
    func abs_min(_ x: [Int]) -> Int {
        if (_int(((x).count)) == 0) {
            _ = fatalError("abs_min() arg is an empty sequence")
        }
        var j = (_idx(x, 0) as? Int ?? 0)
        var idx = 0
        while (idx < _int(((x).count))) {
            let i = (_idx(x, idx) as? Int ?? 0)
            if (Double(abs_val(Double(Double(i)))) < Double(abs_val(Double(Double(j))))) {
                j = Int(i)
            }
            idx = _int((idx &+ 1))
        }
        return j
    }
    func abs_max(_ x: [Int]) -> Int {
        if (_int(((x).count)) == 0) {
            _ = fatalError("abs_max() arg is an empty sequence")
        }
        var j = (_idx(x, 0) as? Int ?? 0)
        var idx = 0
        while (idx < _int(((x).count))) {
            let i = (_idx(x, idx) as? Int ?? 0)
            if (Double(abs_val(Double(Double(i)))) > Double(abs_val(Double(Double(j))))) {
                j = Int(i)
            }
            idx = _int((idx &+ 1))
        }
        return j
    }
    func abs_max_sort(_ x: [Int]) -> Int {
        if (_int(((x).count)) == 0) {
            _ = fatalError("abs_max_sort() arg is an empty sequence")
        }
        var arr: [Int] = ([] as! [Int])
        var i = 0
        while (i < _int(((x).count))) {
            arr = (_append(arr, (_idx(x, i) as? Int ?? 0)) as! [Int])
            i = _int((i &+ 1))
        }
        var n = _int(((arr).count))
        var a = 0
        while (a < n) {
            var b = 0
            while (b < ((n &- a) &- 1)) {
                if (Double(abs_val(Double(Double((_idx(arr, b) as? Int ?? 0))))) > Double(abs_val(Double(Double((_idx(arr, (b &+ 1)) as? Int ?? 0)))))) {
                    let temp = (_idx(arr, b) as? Int ?? 0)
                    arr = _set(arr, b, { let _tmp0 = (_idx(arr, (b &+ 1)) as? Int ?? 0); return _tmp0 }())
                    arr = _set(arr, (b &+ 1), { let _tmp1 = Int(temp); return _tmp1 }())
                }
                b = _int((b &+ 1))
            }
            a = _int((a &+ 1))
        }
        return (_idx(arr, (n &- 1)) as? Int ?? 0)
    }
    func test_abs_val() {
        if (Double(abs_val(0.0)) != 0.0) {
            _ = fatalError("abs_val(0) failed")
        }
        if (Double(abs_val(34.0)) != 34.0) {
            _ = fatalError("abs_val(34) failed")
        }
        if (Double(abs_val(Double(-100000000000.0))) != 100000000000.0) {
            _ = fatalError("abs_val large failed")
        }
        let a: [Int] = ({
            var _arr: [Int] = []
            _arr = _append(_arr, -3)
            _arr = _append(_arr, -1)
            _arr = _append(_arr, 2)
            _arr = _append(_arr, -11)
            return _arr
        }() as! [Int])
        if (_int(abs_max((a as! [Int]))) != _int(-11)) {
            _ = fatalError("abs_max failed")
        }
        if (_int(abs_max_sort((a as! [Int]))) != _int(-11)) {
            _ = fatalError("abs_max_sort failed")
        }
        if (_int(abs_min((a as! [Int]))) != _int(-1)) {
            _ = fatalError("abs_min failed")
        }
    }
    func main() {
        _ = test_abs_val()
        print(_p(Double(abs_val(Double(-34.0)))))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
