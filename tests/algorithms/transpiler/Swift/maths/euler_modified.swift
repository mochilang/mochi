// Generated by Mochi transpiler v0.10.62 on 2025-08-09 12:14:08 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func ceil_float(_ x: Double) -> Int {
        let i = Int(x)
        if (x > Double(i)) {
            return (i &+ 1)
        }
        return i
    }
    func exp_approx(_ x: Double) -> Double {
        var term = 1.0
        var sum = 1.0
        var n = 1
        while (n < 20) {
            term = Double(((term * x) / Double(n)))
            sum = Double((sum + term))
            n = _int((n &+ 1))
        }
        return sum
    }
    func euler_modified(_ ode_func: @escaping (Double, Double) -> Double, _ y0: Double, _ x0: Double, _ step: Double, _ x_end: Double) -> [Double] {
        let n = _int(ceil_float(Double((Double((x_end - x0)) / step))))
        var y: [Double] = ({
            var _arr: [Double] = []
            _arr = _append(_arr, y0)
            return _arr
        }() as! [Double])
        var x = x0
        var k = 0
        while (k < n) {
            let y_predict = (Double(_idx(y, k)) + (step * Double(ode_func(Double(x), Double(_idx(y, k))))))
            let slope1 = Double(ode_func(Double(x), Double(_idx(y, k))))
            let slope2 = Double(ode_func(Double((x + step)), Double(y_predict)))
            let y_next = (Double(_idx(y, k)) + (Double((step / 2.0)) * Double((slope1 + slope2))))
            y = (_append(y, y_next) as! [Double])
            x = Double((x + step))
            k = _int((k &+ 1))
        }
        return y
    }
    func f1(_ x: Double, _ y: Double) -> Double {
        return (((-2.0 * x) * y) * y)
    }
    func f2(_ x: Double, _ y: Double) -> Double {
        return ((-2.0 * y) + (Double(((x * x) * x)) * Double(exp_approx(Double((-2.0 * x))))))
    }
    func main() {
        let y1: [Double] = (euler_modified((f1 as! (Double, Double) -> Double), 1.0, 0.0, 0.2, 1.0) as! [Double])
        print(_p(Double(_idx(y1, (_int(((y1).count)) &- 1)))))
        let y2: [Double] = (euler_modified((f2 as! (Double, Double) -> Double), 1.0, 0.0, 0.1, 0.3) as! [Double])
        print(_p(Double(_idx(y2, (_int(((y2).count)) &- 1)))))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
