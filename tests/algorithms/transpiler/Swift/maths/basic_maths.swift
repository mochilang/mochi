// Generated by Mochi transpiler v0.10.62 on 2025-08-09 12:12:52 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func pow_int(_ base: Int, _ exp: Int) -> Int {
        var result = 1
        var i = 0
        while (i < exp) {
            result = _int((result &* base))
            i = _int((i &+ 1))
        }
        return result
    }
    func prime_factors(_ n: Int) -> [Int] {
        if (n <= 0) {
            _ = fatalError("Only positive integers have prime factors")
        }
        var num = n
        var pf: [Int] = ([] as! [Int])
        while (((num % 2 + 2) % 2) == 0) {
            pf = (_append(pf, 2) as! [Int])
            num = _int((num / 2))
        }
        var i = 3
        while ((i &* i) <= num) {
            while (((num % i + i) % i) == 0) {
                pf = (_append(pf, i) as! [Int])
                num = _int((num / i))
            }
            i = _int((i &+ 2))
        }
        if (num > 2) {
            pf = (_append(pf, num) as! [Int])
        }
        return pf
    }
    func number_of_divisors(_ n: Int) -> Int {
        if (n <= 0) {
            _ = fatalError("Only positive numbers are accepted")
        }
        var num = n
        var div = 1
        var temp = 1
        while (((num % 2 + 2) % 2) == 0) {
            temp = _int((temp &+ 1))
            num = _int((num / 2))
        }
        div = _int((div &* temp))
        var i = 3
        while ((i &* i) <= num) {
            temp = 1
            while (((num % i + i) % i) == 0) {
                temp = _int((temp &+ 1))
                num = _int((num / i))
            }
            div = _int((div &* temp))
            i = _int((i &+ 2))
        }
        if (num > 1) {
            div = _int((div &* 2))
        }
        return div
    }
    func sum_of_divisors(_ n: Int) -> Int {
        if (n <= 0) {
            _ = fatalError("Only positive numbers are accepted")
        }
        var num = n
        var s = 1
        var temp = 1
        while (((num % 2 + 2) % 2) == 0) {
            temp = _int((temp &+ 1))
            num = _int((num / 2))
        }
        if (temp > 1) {
            s = _int((s &* _int((_int((_int(pow_int(2, temp)) &- 1)) / _int((2 &- 1))))))
        }
        var i = 3
        while ((i &* i) <= num) {
            temp = 1
            while (((num % i + i) % i) == 0) {
                temp = _int((temp &+ 1))
                num = _int((num / i))
            }
            if (temp > 1) {
                s = _int((s &* _int((_int((_int(pow_int(i, temp)) &- 1)) / _int((i &- 1))))))
            }
            i = _int((i &+ 2))
        }
        return s
    }
    func contains(_ arr: [Int], _ x: Int) -> Bool {
        var idx = 0
        while (idx < _int(((arr).count))) {
            if ((_idx(arr, idx) as? Int ?? 0) == x) {
                return true
            }
            idx = _int((idx &+ 1))
        }
        return false
    }
    func unique(_ arr: [Int]) -> [Int] {
        var result: [Int] = ([] as! [Int])
        var idx = 0
        while (idx < _int(((arr).count))) {
            let v = (_idx(arr, idx) as? Int ?? 0)
            if (!contains((result as! [Int]), v)) {
                result = (_append(result, v) as! [Int])
            }
            idx = _int((idx &+ 1))
        }
        return result
    }
    func euler_phi(_ n: Int) -> Int {
        if (n <= 0) {
            _ = fatalError("Only positive numbers are accepted")
        }
        var s = n
        let factors: [Int] = (unique((prime_factors(n) as! [Int])) as! [Int])
        var idx = 0
        while (idx < _int(((factors).count))) {
            let x = (_idx(factors, idx) as? Int ?? 0)
            s = _int((_int((s / x)) &* _int((x &- 1))))
            idx = _int((idx &+ 1))
        }
        return s
    }
    print(_p("[" + (prime_factors(100) as! [Int]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    print(_p(_p(_int(number_of_divisors(100)))))
    print(_p(_p(_int(sum_of_divisors(100)))))
    print(_p(_p(_int(euler_phi(100)))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
