// Generated by Mochi transpiler v0.10.66 on 2025-08-16 12:50:08 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first!
}
func _idx<K: Hashable, V>(_ m: [K: V], _ k: K) -> V? {
    return m[k]
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func contains(_ xs: [String], _ value: String) -> Bool {
        var i = 0
        while (i < _int(((xs).count))) {
            if ((_idx(xs, i) as! String) == value) {
                return true
            }
            i = _int((i &+ 1))
        }
        return false
    }
    func jaccard_similarity(_ set_a: [String], _ set_b: [String], _ alternative_union: Bool) -> Double {
        var intersection_len = 0
        var i = 0
        while (i < _int(((set_a).count))) {
            if contains((set_b as! [String]), (_idx(set_a, i) as! String)) {
                intersection_len = _int((intersection_len &+ 1))
            }
            i = _int((i &+ 1))
        }
        var union_len = 0
        if alternative_union {
            union_len = _int((_int(((set_a).count)) &+ _int(((set_b).count))))
        } else {
            var union_list: [String] = ([] as! [String])
            i = 0
            while (i < _int(((set_a).count))) {
                let val_a = (_idx(set_a, i) as! String)
                if (!contains((union_list as! [String]), (val_a as! String))) {
                    union_list = (_append(union_list, val_a) as! [String])
                }
                i = _int((i &+ 1))
            }
            i = 0
            while (i < _int(((set_b).count))) {
                let val_b = (_idx(set_b, i) as! String)
                if (!contains((union_list as! [String]), (val_b as! String))) {
                    union_list = (_append(union_list, val_b) as! [String])
                }
                i = _int((i &+ 1))
            }
            union_len = _int(((union_list).count))
        }
        return ((1.0 * Double(intersection_len)) / Double(union_len))
    }
    func main() {
        let set_a: [String] = ({
            var _arr: [String] = []
            _arr = _append(_arr, "a")
            _arr = _append(_arr, "b")
            _arr = _append(_arr, "c")
            _arr = _append(_arr, "d")
            _arr = _append(_arr, "e")
            return _arr
        }() as! [String])
        let set_b: [String] = ({
            var _arr: [String] = []
            _arr = _append(_arr, "c")
            _arr = _append(_arr, "d")
            _arr = _append(_arr, "e")
            _arr = _append(_arr, "f")
            _arr = _append(_arr, "h")
            _arr = _append(_arr, "i")
            return _arr
        }() as! [String])
        print(_p(Double(jaccard_similarity((set_a as! [String]), (set_b as! [String]), false))))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
