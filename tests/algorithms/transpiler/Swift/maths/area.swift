// Generated by Mochi transpiler v0.10.67 on 2025-08-16 21:28:44 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let PI: Double = 3.141592653589793
    let TWO_PI: Double = 6.283185307179586
    func _mod(_ x: Double, _ m: Double) -> Double {
        return (x - (Double(_int((x / m))) * m))
    }
    func sin_approx(_ x: Double) -> Double {
        let y = (Double(_mod(Double((x + PI)), Double(TWO_PI))) - PI)
        let y2 = (y * y)
        let y3 = (y2 * y)
        let y5 = (y3 * y2)
        let y7 = (y5 * y2)
        return (((y - (y3 / 6.0)) + (y5 / 120.0)) - (y7 / 5040.0))
    }
    func cos_approx(_ x: Double) -> Double {
        let y = (Double(_mod(Double((x + PI)), Double(TWO_PI))) - PI)
        let y2 = (y * y)
        let y4 = (y2 * y2)
        let y6 = (y4 * y2)
        return (((1.0 - (y2 / 2.0)) + (y4 / 24.0)) - (y6 / 720.0))
    }
    func tan_approx(_ x: Double) -> Double {
        return (Double(sin_approx(Double(x))) / Double(cos_approx(Double(x))))
    }
    func sqrt_approx(_ x: Double) -> Double {
        if (x <= 0.0) {
            return 0.0
        }
        var guess = (x / 2.0)
        var i = 0
        while (i < 20) {
            guess = Double((Double((guess + (x / guess))) / 2.0))
            i = _int((i &+ 1))
        }
        return guess
    }
    func surface_area_cube(_ side_length: Double) -> Double {
        if (side_length < 0.0) {
            print(_p("ValueError: surface_area_cube() only accepts non-negative values"))
            return 0.0
        }
        return ((6.0 * side_length) * side_length)
    }
    func surface_area_cuboid(_ length: Double, _ breadth: Double, _ height: Double) -> Double {
        if (((length < 0.0) || (breadth < 0.0)) || (height < 0.0)) {
            print(_p("ValueError: surface_area_cuboid() only accepts non-negative values"))
            return 0.0
        }
        return (2.0 * Double(((Double((length * breadth)) + Double((breadth * height))) + Double((length * height)))))
    }
    func surface_area_sphere(_ radius: Double) -> Double {
        if (radius < 0.0) {
            print(_p("ValueError: surface_area_sphere() only accepts non-negative values"))
            return 0.0
        }
        return (((4.0 * PI) * radius) * radius)
    }
    func surface_area_hemisphere(_ radius: Double) -> Double {
        if (radius < 0.0) {
            print(_p("ValueError: surface_area_hemisphere() only accepts non-negative values"))
            return 0.0
        }
        return (((3.0 * PI) * radius) * radius)
    }
    func surface_area_cone(_ radius: Double, _ height: Double) -> Double {
        if ((radius < 0.0) || (height < 0.0)) {
            print(_p("ValueError: surface_area_cone() only accepts non-negative values"))
            return 0.0
        }
        let slant = Double(sqrt_approx(Double(((height * height) + (radius * radius)))))
        return ((PI * radius) * Double((radius + slant)))
    }
    func surface_area_conical_frustum(_ radius1: Double, _ radius2: Double, _ height: Double) -> Double {
        if (((radius1 < 0.0) || (radius2 < 0.0)) || (height < 0.0)) {
            print(_p("ValueError: surface_area_conical_frustum() only accepts non-negative values"))
            return 0.0
        }
        let slant = Double(sqrt_approx(Double(((height * height) + (Double((radius1 - radius2)) * Double((radius1 - radius2)))))))
        return (PI * Double((((slant * Double((radius1 + radius2))) + (radius1 * radius1)) + (radius2 * radius2))))
    }
    func surface_area_cylinder(_ radius: Double, _ height: Double) -> Double {
        if ((radius < 0.0) || (height < 0.0)) {
            print(_p("ValueError: surface_area_cylinder() only accepts non-negative values"))
            return 0.0
        }
        return (((2.0 * PI) * radius) * Double((height + radius)))
    }
    func surface_area_torus(_ torus_radius: Double, _ tube_radius: Double) -> Double {
        if ((torus_radius < 0.0) || (tube_radius < 0.0)) {
            print(_p("ValueError: surface_area_torus() only accepts non-negative values"))
            return 0.0
        }
        if (torus_radius < tube_radius) {
            print(_p("ValueError: surface_area_torus() does not support spindle or self intersecting tori"))
            return 0.0
        }
        return ((((4.0 * PI) * PI) * torus_radius) * tube_radius)
    }
    func area_rectangle(_ length: Double, _ width: Double) -> Double {
        if ((length < 0.0) || (width < 0.0)) {
            print(_p("ValueError: area_rectangle() only accepts non-negative values"))
            return 0.0
        }
        return (length * width)
    }
    func area_square(_ side_length: Double) -> Double {
        if (side_length < 0.0) {
            print(_p("ValueError: area_square() only accepts non-negative values"))
            return 0.0
        }
        return (side_length * side_length)
    }
    func area_triangle(_ base: Double, _ height: Double) -> Double {
        if ((base < 0.0) || (height < 0.0)) {
            print(_p("ValueError: area_triangle() only accepts non-negative values"))
            return 0.0
        }
        return (Double((base * height)) / 2.0)
    }
    func area_triangle_three_sides(_ side1: Double, _ side2: Double, _ side3: Double) -> Double {
        if (((side1 < 0.0) || (side2 < 0.0)) || (side3 < 0.0)) {
            print(_p("ValueError: area_triangle_three_sides() only accepts non-negative values"))
            return 0.0
        }
        if ((((side1 + side2) < side3) || ((side1 + side3) < side2)) || ((side2 + side3) < side1)) {
            print(_p("ValueError: Given three sides do not form a triangle"))
            return 0.0
        }
        let s = (Double(((side1 + side2) + side3)) / 2.0)
        let prod = (((s * Double((s - side1))) * Double((s - side2))) * Double((s - side3)))
        let res = Double(sqrt_approx(Double(prod)))
        return res
    }
    func area_parallelogram(_ base: Double, _ height: Double) -> Double {
        if ((base < 0.0) || (height < 0.0)) {
            print(_p("ValueError: area_parallelogram() only accepts non-negative values"))
            return 0.0
        }
        return (base * height)
    }
    func area_trapezium(_ base1: Double, _ base2: Double, _ height: Double) -> Double {
        if (((base1 < 0.0) || (base2 < 0.0)) || (height < 0.0)) {
            print(_p("ValueError: area_trapezium() only accepts non-negative values"))
            return 0.0
        }
        return ((0.5 * Double((base1 + base2))) * height)
    }
    func area_circle(_ radius: Double) -> Double {
        if (radius < 0.0) {
            print(_p("ValueError: area_circle() only accepts non-negative values"))
            return 0.0
        }
        return ((PI * radius) * radius)
    }
    func area_ellipse(_ radius_x: Double, _ radius_y: Double) -> Double {
        if ((radius_x < 0.0) || (radius_y < 0.0)) {
            print(_p("ValueError: area_ellipse() only accepts non-negative values"))
            return 0.0
        }
        return ((PI * radius_x) * radius_y)
    }
    func area_rhombus(_ diagonal1: Double, _ diagonal2: Double) -> Double {
        if ((diagonal1 < 0.0) || (diagonal2 < 0.0)) {
            print(_p("ValueError: area_rhombus() only accepts non-negative values"))
            return 0.0
        }
        return ((0.5 * diagonal1) * diagonal2)
    }
    func area_reg_polygon(_ sides: Int, _ length: Double) -> Double {
        if (sides < 3) {
            print(_p("ValueError: area_reg_polygon() only accepts integers greater than or equal to three as number of sides"))
            return 0.0
        }
        if (length < 0.0) {
            print(_p("ValueError: area_reg_polygon() only accepts non-negative values as length of a side"))
            return 0.0
        }
        let n = Double(sides)
        return (Double(((n * length) * length)) / Double((4.0 * Double(tan_approx(Double((PI / n)))))))
    }
    print(_p("[DEMO] Areas of various geometric shapes:"))
    print(_p((_p("Rectangle: ") + _p(_p(Double(area_rectangle(10.0, 20.0)))))))
    print(_p((_p("Square: ") + _p(_p(Double(area_square(10.0)))))))
    print(_p((_p("Triangle: ") + _p(_p(Double(area_triangle(10.0, 10.0)))))))
    let TRI_THREE_SIDES = Double(area_triangle_three_sides(5.0, 12.0, 13.0))
    print(_p((_p("Triangle Three Sides: ") + _p(_p(TRI_THREE_SIDES)))))
    print(_p((_p("Parallelogram: ") + _p(_p(Double(area_parallelogram(10.0, 20.0)))))))
    print(_p((_p("Rhombus: ") + _p(_p(Double(area_rhombus(10.0, 20.0)))))))
    print(_p((_p("Trapezium: ") + _p(_p(Double(area_trapezium(10.0, 20.0, 30.0)))))))
    print(_p((_p("Circle: ") + _p(_p(Double(area_circle(20.0)))))))
    print(_p((_p("Ellipse: ") + _p(_p(Double(area_ellipse(10.0, 20.0)))))))
    print(_p(""))
    print(_p("Surface Areas of various geometric shapes:"))
    print(_p((_p("Cube: ") + _p(_p(Double(surface_area_cube(20.0)))))))
    print(_p((_p("Cuboid: ") + _p(_p(Double(surface_area_cuboid(10.0, 20.0, 30.0)))))))
    print(_p((_p("Sphere: ") + _p(_p(Double(surface_area_sphere(20.0)))))))
    print(_p((_p("Hemisphere: ") + _p(_p(Double(surface_area_hemisphere(20.0)))))))
    print(_p((_p("Cone: ") + _p(_p(Double(surface_area_cone(10.0, 20.0)))))))
    print(_p((_p("Conical Frustum: ") + _p(_p(Double(surface_area_conical_frustum(10.0, 20.0, 30.0)))))))
    print(_p((_p("Cylinder: ") + _p(_p(Double(surface_area_cylinder(10.0, 20.0)))))))
    print(_p((_p("Torus: ") + _p(_p(Double(surface_area_torus(20.0, 10.0)))))))
    print(_p((_p("Equilateral Triangle: ") + _p(_p(Double(area_reg_polygon(3, 10.0)))))))
    print(_p((_p("Square: ") + _p(_p(Double(area_reg_polygon(4, 10.0)))))))
    print(_p((_p("Regular Pentagon: ") + _p(_p(Double(area_reg_polygon(5, 10.0)))))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
