// Generated by Mochi transpiler v0.10.66 on 2025-08-16 13:02:32 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first!
}
func _idx<K: Hashable, V>(_ m: [K: V], _ k: K) -> V? {
    return m[k]
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    var lcg_seed: Int = 1
    func lcg_rand() -> Int {
        lcg_seed = _int(((_int(((lcg_seed &* 1103515245) &+ 12345)) % 2147483648 + 2147483648) % 2147483648))
        return lcg_seed
    }
    func roll() -> Int {
        let rv = Double(lcg_rand())
        let r = ((rv * 6.0) / 2147483648.0)
        return (1 &+ Int(r))
    }
    func round2(_ x: Double) -> Double {
        let y = ((x * 100.0) + 0.5)
        let z = Int(y)
        return (Double(z) / 100.0)
    }
    func throw_dice(_ num_throws: Int, _ num_dice: Int) -> [Double] {
        var count_of_sum: [Int] = ([] as! [Int])
        let max_sum = ((num_dice &* 6) &+ 1)
        var i = 0
        while (i < max_sum) {
            count_of_sum = (_append(count_of_sum, 0) as! [Int])
            i = _int((i &+ 1))
        }
        var t = 0
        while (t < num_throws) {
            var s: Int = 0
            var d: Int = 0
            while (d < num_dice) {
                s = _int((s &+ _int(roll())))
                d = _int((d &+ 1))
            }
            count_of_sum = _set(count_of_sum, s, _int(((_idx(count_of_sum, s) as? Int ?? 0) &+ 1)))
            t = _int((t &+ 1))
        }
        var probability: [Double] = ([] as! [Double])
        i = Int(num_dice)
        while (i < max_sum) {
            let p = ((Double(_idx(count_of_sum, i)) * 100.0) / Double(num_throws))
            probability = (_append(probability, Double(round2(Double(p)))) as! [Double])
            i = _int((i &+ 1))
        }
        return probability
    }
    func main() {
        lcg_seed = 1
        let result: [Double] = (throw_dice(10000, 2) as! [Double])
        print(_p("[" + result.map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
