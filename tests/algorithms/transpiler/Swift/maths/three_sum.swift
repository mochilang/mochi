// Generated by Mochi transpiler v0.10.66 on 2025-08-16 14:05:52 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first!
}
func _idx<K: Hashable, V>(_ m: [K: V], _ k: K) -> V? {
    return m[k]
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func bubble_sort(_ nums: [Int]) -> [Int] {
        var arr = nums
        var n = _int(((arr).count))
        var i = 0
        while (i < n) {
            var j = 0
            while (j < (n &- 1)) {
                if ((_idx(arr, j) as? Int ?? 0) > (_idx(arr, (j &+ 1)) as? Int ?? 0)) {
                    let temp = (_idx(arr, j) as? Int ?? 0)
                    arr = _set(arr, j, { let _tmp0 = (_idx(arr, (j &+ 1)) as? Int ?? 0); return _tmp0 }())
                    arr = _set(arr, (j &+ 1), { let _tmp1 = Int(temp); return _tmp1 }())
                }
                j = _int((j &+ 1))
            }
            i = _int((i &+ 1))
        }
        return arr
    }
    func three_sum(_ nums: [Int]) -> [[Int]] {
        let sorted: [Int] = (bubble_sort((nums as! [Int])) as! [Int])
        var res: [[Int]] = ([] as! [[Int]])
        let n = _int(((sorted).count))
        var i = 0
        while (i < (n &- 2)) {
            if ((i == 0) || ((_idx(sorted, i) as? Int ?? 0) != (_idx(sorted, (i &- 1)) as? Int ?? 0))) {
                var low = (i &+ 1)
                var high = (n &- 1)
                let c = (0 &- (_idx(sorted, i) as? Int ?? 0))
                while (low < high) {
                    let s = ((_idx(sorted, low) as? Int ?? 0) &+ (_idx(sorted, high) as? Int ?? 0))
                    if (s == c) {
                        let triple: [Int] = ({
                            var _arr: [Int] = []
                            _arr = _append(_arr, (_idx(sorted, i) as? Int ?? 0))
                            _arr = _append(_arr, (_idx(sorted, low) as? Int ?? 0))
                            _arr = _append(_arr, (_idx(sorted, high) as? Int ?? 0))
                            return _arr
                        }() as! [Int])
                        res = (_append(res, triple) as! [[Int]])
                        while ((low < high) && ((_idx(sorted, low) as? Int ?? 0) == (_idx(sorted, (low &+ 1)) as? Int ?? 0))) {
                            low = _int((low &+ 1))
                        }
                        while ((low < high) && ((_idx(sorted, high) as? Int ?? 0) == (_idx(sorted, (high &- 1)) as? Int ?? 0))) {
                            high = _int((high &- 1))
                        }
                        low = _int((low &+ 1))
                        high = _int((high &- 1))
                    } else if (s < c) {
                        low = _int((low &+ 1))
                    } else {
                        high = _int((high &- 1))
                    }
                    
                }
            }
            i = _int((i &+ 1))
        }
        return res
    }
    print(_p("[" + (three_sum(({
        var _arr: [Int] = []
        _arr = _append(_arr, -1)
        _arr = _append(_arr, 0)
        _arr = _append(_arr, 1)
        _arr = _append(_arr, 2)
        _arr = _append(_arr, -1)
        _arr = _append(_arr, -4)
        return _arr
    }() as! [Int])) as! [[Int]]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    print(_p("[" + (three_sum(({
        var _arr: [Int] = []
        _arr = _append(_arr, 1)
        _arr = _append(_arr, 2)
        _arr = _append(_arr, 3)
        _arr = _append(_arr, 4)
        return _arr
    }() as! [Int])) as! [[Int]]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
