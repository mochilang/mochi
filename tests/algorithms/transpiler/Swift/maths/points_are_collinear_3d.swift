// Generated by Mochi transpiler v0.10.63 on 2025-08-11 14:52:35 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
struct Point3d: Codable {
    var x: Double
    var y: Double
    var z: Double
    init() {
        self.x = 0
        self.y = 0
        self.z = 0
    }
    init(x: Double, y: Double, z: Double) {
        self.x = x
        self.y = y
        self.z = z
    }
}
struct Vector3d: Codable {
    var x: Double
    var y: Double
    var z: Double
    init() {
        self.x = 0
        self.y = 0
        self.z = 0
    }
    init(x: Double, y: Double, z: Double) {
        self.x = x
        self.y = y
        self.z = z
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func create_vector(_ p1: Point3d, _ p2: Point3d) -> Vector3d {
        let vx = (p2.x - p1.x)
        let vy = (p2.y - p1.y)
        let vz = (p2.z - p1.z)
        return Vector3d(x: Double(vx), y: Double(vy), z: Double(vz))
    }
    func get_3d_vectors_cross(_ ab: Vector3d, _ ac: Vector3d) -> Vector3d {
        let cx = ((ab.y * ac.z) - (ab.z * ac.y))
        let cy = ((ab.z * ac.x) - (ab.x * ac.z))
        let cz = ((ab.x * ac.y) - (ab.y * ac.x))
        return Vector3d(x: Double(cx), y: Double(cy), z: Double(cz))
    }
    func pow10(_ exp: Int) -> Double {
        var result = 1.0
        var i = 0
        while (i < exp) {
            result = Double((result * 10.0))
            i = _int((i &+ 1))
        }
        return result
    }
    func round_float(_ x: Double, _ digits: Int) -> Double {
        let factor = Double(pow10(digits))
        var v = (x * factor)
        if (v >= 0.0) {
            v = Double((v + 0.5))
        } else {
            v = Double((v - 0.5))
        }
        let t = Int(v)
        return (Double(t) / factor)
    }
    func is_zero_vector(_ v: Vector3d, _ accuracy: Int) -> Bool {
        return (((Double(round_float(Double(v.x), accuracy)) == 0.0) && (Double(round_float(Double(v.y), accuracy)) == 0.0)) && (Double(round_float(Double(v.z), accuracy)) == 0.0))
    }
    func are_collinear(_ a: Point3d, _ b: Point3d, _ c: Point3d, _ accuracy: Int) -> Bool {
        let ab = create_vector((a as! Point3d), (b as! Point3d))
        let ac = create_vector((a as! Point3d), (c as! Point3d))
        let cross = get_3d_vectors_cross((ab as! Vector3d), (ac as! Vector3d))
        return is_zero_vector((cross as! Vector3d), accuracy)
    }
    func test_are_collinear() {
        let p1 = Point3d(x: 0.0, y: 0.0, z: 0.0)
        let p2 = Point3d(x: 1.0, y: 1.0, z: 1.0)
        let p3 = Point3d(x: 2.0, y: 2.0, z: 2.0)
        if (!are_collinear((p1 as! Point3d), (p2 as! Point3d), (p3 as! Point3d), 10)) {
            _ = fatalError("collinear test failed")
        }
        let q3 = Point3d(x: 1.0, y: 2.0, z: 3.0)
        if are_collinear((p1 as! Point3d), (p2 as! Point3d), (q3 as! Point3d), 10) {
            _ = fatalError("non-collinear test failed")
        }
    }
    func main() {
        _ = test_are_collinear()
        let a = Point3d(x: 4.802293498137402, y: 3.536233125455244, z: 0.0)
        let b = Point3d(x: Double(-2.186788107953106), y: Double(-9.24561398001649), z: 7.141509524846482)
        let c = Point3d(x: 1.530169574640268, y: Double(-2.447927606600034), z: 3.343487096469054)
        print(_p(_p(are_collinear((a as! Point3d), (b as! Point3d), (c as! Point3d), 10))))
        let d = Point3d(x: 2.399001826862445, y: Double(-2.452009976680793), z: 4.464656666157666)
        let e = Point3d(x: Double(-3.682816335934376), y: 5.753788986533145, z: 9.490993909044244)
        let f = Point3d(x: 1.962903518985307, y: 3.741415730125627, z: 7.0)
        print(_p(_p(are_collinear((d as! Point3d), (e as! Point3d), (f as! Point3d), 10))))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
