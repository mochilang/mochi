// Generated by Mochi transpiler v0.10.62 on 2025-08-09 12:13:41 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
struct Fraction: Codable {
    var numerator: Int
    var denominator: Int
    init() {
        self.numerator = 0
        self.denominator = 0
    }
    init(numerator: Int, denominator: Int) {
        self.numerator = numerator
        self.denominator = denominator
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func pow10(_ n: Int) -> Int {
        var result = 1
        var i = 0
        while (i < n) {
            result = _int((result &* 10))
            i = _int((i &+ 1))
        }
        return result
    }
    func gcd(_ a: Int, _ b: Int) -> Int {
        var x = a
        var y = b
        if (x < 0) {
            x = _int(-x)
        }
        if (y < 0) {
            y = _int(-y)
        }
        while (y != 0) {
            let r = ((x % y + y) % y)
            x = Int(y)
            y = Int(r)
        }
        return x
    }
    func parse_decimal(_ s: String) -> Fraction {
        if (_int(((s).count)) == 0) {
            _ = fatalError("invalid number")
        }
        var idx = 0
        var sign = 1
        let first = String(describing: String(Array(String(describing: (s as! String)))[0..<1]))
        if (first == "-") {
            sign = _int(-1)
            idx = 1
        } else if (first == "+") {
            idx = 1
        }
        
        var int_part = ""
        while (idx < _int(((s).count))) {
            let c = String(describing: String(Array(String(describing: (s as! String)))[idx..<(idx &+ 1)]))
            if ((c >= "0") && (c <= "9")) {
                int_part = ((int_part + c) as! String)
                idx = _int((idx &+ 1))
            } else {
                break
            }
        }
        var frac_part = ""
        if ((idx < _int(((s).count))) && (String(describing: String(Array(String(describing: (s as! String)))[idx..<(idx &+ 1)])) == ".")) {
            idx = _int((idx &+ 1))
            while (idx < _int(((s).count))) {
                let c = String(describing: String(Array(String(describing: (s as! String)))[idx..<(idx &+ 1)]))
                if ((c >= "0") && (c <= "9")) {
                    frac_part = ((frac_part + c) as! String)
                    idx = _int((idx &+ 1))
                } else {
                    break
                }
            }
        }
        var exp = 0
        if ((idx < _int(((s).count))) && ((String(describing: String(Array(String(describing: (s as! String)))[idx..<(idx &+ 1)])) == "e") || (String(describing: String(Array(String(describing: (s as! String)))[idx..<(idx &+ 1)])) == "E"))) {
            idx = _int((idx &+ 1))
            var exp_sign = 1
            if ((idx < _int(((s).count))) && (String(describing: String(Array(String(describing: (s as! String)))[idx..<(idx &+ 1)])) == "-")) {
                exp_sign = _int(-1)
                idx = _int((idx &+ 1))
            } else if ((idx < _int(((s).count))) && (String(describing: String(Array(String(describing: (s as! String)))[idx..<(idx &+ 1)])) == "+")) {
                idx = _int((idx &+ 1))
            }
            
            var exp_str = ""
            while (idx < _int(((s).count))) {
                let c = String(describing: String(Array(String(describing: (s as! String)))[idx..<(idx &+ 1)]))
                if ((c >= "0") && (c <= "9")) {
                    exp_str = ((exp_str + c) as! String)
                    idx = _int((idx &+ 1))
                } else {
                    _ = fatalError("invalid number")
                }
            }
            if (_int(((exp_str).count)) == 0) {
                _ = fatalError("invalid number")
            }
            exp = _int((exp_sign &* _int(_int(exp_str))))
        }
        if (idx != _int(((s).count))) {
            _ = fatalError("invalid number")
        }
        if (_int(((int_part).count)) == 0) {
            int_part = "0"
        }
        var num_str = (int_part + frac_part)
        var numerator = _int(_int(num_str))
        if (sign == _int((0 &- 1))) {
            numerator = _int((0 &- numerator))
        }
        var denominator = _int(pow10(_int(((frac_part).count))))
        if (exp > 0) {
            numerator = _int((numerator &* _int(pow10(exp))))
        } else if (exp < 0) {
            denominator = _int((denominator &* _int(pow10(-exp))))
        }
        
        return Fraction(numerator: Int(numerator), denominator: Int(denominator))
    }
    func reduce(_ fr: Fraction) -> Fraction {
        let g = _int(gcd(fr.numerator, fr.denominator))
        return Fraction(numerator: _int((fr.numerator / g)), denominator: _int((fr.denominator / g)))
    }
    func decimal_to_fraction_str(_ s: String) -> Fraction {
        return (reduce((parse_decimal((s as! String)) as! Fraction)) as! Fraction)
    }
    func decimal_to_fraction(_ x: Double) -> Fraction {
        return decimal_to_fraction_str(_p(x))
    }
    func assert_fraction(_ name: String, _ fr: Fraction, _ num: Int, _ den: Int) {
        if ((fr.numerator != num) || (fr.denominator != den)) {
            _ = fatalError(name)
        }
    }
    func test_decimal_to_fraction() {
        _ = assert_fraction("case1", (decimal_to_fraction(2.0) as! Fraction), 2, 1)
        _ = assert_fraction("case2", (decimal_to_fraction(89.0) as! Fraction), 89, 1)
        _ = assert_fraction("case3", (decimal_to_fraction_str("67") as! Fraction), 67, 1)
        _ = assert_fraction("case4", (decimal_to_fraction_str("45.0") as! Fraction), 45, 1)
        _ = assert_fraction("case5", (decimal_to_fraction(1.5) as! Fraction), 3, 2)
        _ = assert_fraction("case6", (decimal_to_fraction_str("6.25") as! Fraction), 25, 4)
        _ = assert_fraction("case7", (decimal_to_fraction(0.0) as! Fraction), 0, 1)
        _ = assert_fraction("case8", (decimal_to_fraction(Double(-2.5)) as! Fraction), -5, 2)
        _ = assert_fraction("case9", (decimal_to_fraction(0.125) as! Fraction), 1, 8)
        _ = assert_fraction("case10", (decimal_to_fraction(1000000.25) as! Fraction), 4000001, 4)
        _ = assert_fraction("case11", (decimal_to_fraction(1.3333) as! Fraction), 13333, 10000)
        _ = assert_fraction("case12", (decimal_to_fraction_str("1.23e2") as! Fraction), 123, 1)
        _ = assert_fraction("case13", (decimal_to_fraction_str("0.500") as! Fraction), 1, 2)
    }
    func main() {
        _ = test_decimal_to_fraction()
        let fr = decimal_to_fraction(1.5)
        print(_p(((_p(fr.numerator) + "/") + _p(fr.denominator))))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
