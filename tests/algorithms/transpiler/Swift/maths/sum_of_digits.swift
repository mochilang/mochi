// Generated by Mochi transpiler v0.10.66 on 2025-08-16 14:05:32 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func abs_int(_ n: Int) -> Int {
        if (n < 0) {
            return -n
        }
        return n
    }
    func sum_of_digits(_ n: Int) -> Int {
        var m = _int(abs_int(n))
        var res = 0
        while (m > 0) {
            res = _int((res &+ _int(((m % 10 + 10) % 10))))
            m = _int((m / 10))
        }
        return res
    }
    func sum_of_digits_recursion(_ n: Int) -> Int {
        let m = _int(abs_int(n))
        if (m < 10) {
            return m
        }
        return (_int(((m % 10 + 10) % 10)) &+ _int(sum_of_digits_recursion((m / 10))))
    }
    func sum_of_digits_compact(_ n: Int) -> Int {
        let s = _p(_int(abs_int(n)))
        var res = 0
        var i = 0
        while (i < _int(((s).count))) {
            res = _int((res &+ _int(_int(String(Array(s)[i])))))
            i = _int((i &+ 1))
        }
        return res
    }
    func test_sum_of_digits() {
        if (_int(sum_of_digits(12345)) != 15) {
            _ = fatalError("sum_of_digits 12345 failed")
        }
        if (_int(sum_of_digits(123)) != 6) {
            _ = fatalError("sum_of_digits 123 failed")
        }
        if (_int(sum_of_digits(-123)) != 6) {
            _ = fatalError("sum_of_digits -123 failed")
        }
        if (_int(sum_of_digits(0)) != 0) {
            _ = fatalError("sum_of_digits 0 failed")
        }
        if (_int(sum_of_digits_recursion(12345)) != 15) {
            _ = fatalError("recursion 12345 failed")
        }
        if (_int(sum_of_digits_recursion(123)) != 6) {
            _ = fatalError("recursion 123 failed")
        }
        if (_int(sum_of_digits_recursion(-123)) != 6) {
            _ = fatalError("recursion -123 failed")
        }
        if (_int(sum_of_digits_recursion(0)) != 0) {
            _ = fatalError("recursion 0 failed")
        }
        if (_int(sum_of_digits_compact(12345)) != 15) {
            _ = fatalError("compact 12345 failed")
        }
        if (_int(sum_of_digits_compact(123)) != 6) {
            _ = fatalError("compact 123 failed")
        }
        if (_int(sum_of_digits_compact(-123)) != 6) {
            _ = fatalError("compact -123 failed")
        }
        if (_int(sum_of_digits_compact(0)) != 0) {
            _ = fatalError("compact 0 failed")
        }
    }
    func main() {
        _ = test_sum_of_digits()
        print(_p(_p(_int(sum_of_digits(12345)))))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
