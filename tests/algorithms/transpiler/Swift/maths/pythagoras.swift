// Generated by Mochi transpiler v0.10.67 on 2025-08-17 12:19:10 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.isNaN || d.isInfinite {
                return String(d)
            }
            if d.rounded(.towardZero) == d {
                // avoid overflow when converting to Int64
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _num(_ v: Any) -> Double {
    if let d = v as? Double { return d }
    if let i = v as? Int { return Double(i) }
    if let i = v as? Int64 { return Double(i) }
    return 0
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
struct Point: Codable {
    var x: Double
    var y: Double
    var z: Double
    init() {
        self.x = 0
        self.y = 0
        self.z = 0
    }
    init(x: Double, y: Double, z: Double) {
        self.x = x
        self.y = y
        self.z = z
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func absf(_ x: Double) -> Double {
        if ((x < 0.0)) {
            return -x
        }
        return x
    }
    func sqrt_approx(_ x: Double) -> Double {
        if ((x <= 0.0)) {
            return 0.0
        }
        var guess = (x / 2.0)
        var i = 0
        while (i < 20) {
            guess = _num((_num((guess + (x / guess))) / 2.0))
            i = _int((i &+ 1))
        }
        return guess
    }
    func distance(_ a: Point, _ b: Point) -> Double {
        let dx = (b.x - a.x)
        let dy = (b.y - a.y)
        let dz = (b.z - a.z)
        return _num(sqrt_approx(_num(absf(_num((((dx * dx) + (dy * dy)) + (dz * dz)))))))
    }
    func point_to_string(_ p: Point) -> String {
        return (_p((_p((_p((_p((_p((_p("Point(") + _p(_p(p.x)))) + _p(", "))) + _p(_p(p.y)))) + _p(", "))) + _p(_p(p.z)))) + _p(")"))
    }
    func test_distance() {
        let p1: Point = Point(x: 2.0, y: _num(-1.0), z: 7.0)
        let p2: Point = Point(x: 1.0, y: _num(-3.0), z: 5.0)
        let d = _num(distance((p1 as! Point), (p2 as! Point)))
        if ((_num(absf(_num((d - 3.0)))) > 0.0001)) {
            _ = fatalError("distance test failed")
        }
        print(_p((_p((_p((_p((_p((_p("Distance from ") + _p(String(describing: point_to_string((p1 as! Point)))))) + _p(" to "))) + _p(String(describing: point_to_string((p2 as! Point)))))) + _p(" is "))) + _p(_p(d)))))
    }
    func main() {
        _ = test_distance()
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
