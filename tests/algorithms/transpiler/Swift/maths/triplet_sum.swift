// Generated by Mochi transpiler v0.10.63 on 2025-08-12 08:44:36 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func bubble_sort(_ nums: [Int]) -> [Int] {
        var arr: [Int] = ([] as! [Int])
        var i = 0
        while (i < _int(((nums).count))) {
            arr = (_append(arr, (_idx(nums, i) as? Int ?? 0)) as! [Int])
            i = _int((i &+ 1))
        }
        var n = _int(((arr).count))
        var a = 0
        while (a < n) {
            var b = 0
            while (b < ((n &- a) &- 1)) {
                if ((_idx(arr, b) as? Int ?? 0) > (_idx(arr, (b &+ 1)) as? Int ?? 0)) {
                    let tmp = (_idx(arr, b) as? Int ?? 0)
                    arr = _set(arr, b, (_idx(arr, (b &+ 1)) as? Int ?? 0))
                    arr = _set(arr, (b &+ 1), Int(tmp))
                }
                b = _int((b &+ 1))
            }
            a = _int((a &+ 1))
        }
        return arr
    }
    func sort3(_ xs: [Int]) -> [Int] {
        var arr: [Int] = ([] as! [Int])
        var i = 0
        while (i < _int(((xs).count))) {
            arr = (_append(arr, (_idx(xs, i) as? Int ?? 0)) as! [Int])
            i = _int((i &+ 1))
        }
        var n = _int(((arr).count))
        var a = 0
        while (a < n) {
            var b = 0
            while (b < ((n &- a) &- 1)) {
                if ((_idx(arr, b) as? Int ?? 0) > (_idx(arr, (b &+ 1)) as? Int ?? 0)) {
                    let tmp = (_idx(arr, b) as? Int ?? 0)
                    arr = _set(arr, b, (_idx(arr, (b &+ 1)) as? Int ?? 0))
                    arr = _set(arr, (b &+ 1), Int(tmp))
                }
                b = _int((b &+ 1))
            }
            a = _int((a &+ 1))
        }
        return arr
    }
    func triplet_sum1(_ arr: [Int], _ target: Int) -> [Int] {
        var i = 0
        while (i < (_int(((arr).count)) &- 2)) {
            var j = (i &+ 1)
            while (j < (_int(((arr).count)) &- 1)) {
                var k = (j &+ 1)
                while (k < _int(((arr).count))) {
                    if ((((_idx(arr, i) as? Int ?? 0) &+ (_idx(arr, j) as? Int ?? 0)) &+ (_idx(arr, k) as? Int ?? 0)) == target) {
                        return (sort3(({
                            var _arr: [Int] = []
                            _arr = _append(_arr, (_idx(arr, i) as? Int ?? 0))
                            _arr = _append(_arr, (_idx(arr, j) as? Int ?? 0))
                            _arr = _append(_arr, (_idx(arr, k) as? Int ?? 0))
                            return _arr
                        }() as! [Int])) as! [Int])
                    }
                    k = _int((k &+ 1))
                }
                j = _int((j &+ 1))
            }
            i = _int((i &+ 1))
        }
        return ({
            var _arr: [Int] = []
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 0)
            return _arr
        }() as! [Int])
    }
    func triplet_sum2(_ arr: [Int], _ target: Int) -> [Int] {
        let sorted: [Int] = (bubble_sort((arr as! [Int])) as! [Int])
        let n = _int(((sorted).count))
        var i = 0
        while (i < (n &- 2)) {
            var left = (i &+ 1)
            var right = (n &- 1)
            while (left < right) {
                let s = (((_idx(sorted, i) as? Int ?? 0) &+ (_idx(sorted, left) as? Int ?? 0)) &+ (_idx(sorted, right) as? Int ?? 0))
                if (s == target) {
                    return ({
                        var _arr: [Int] = []
                        _arr = _append(_arr, (_idx(sorted, i) as? Int ?? 0))
                        _arr = _append(_arr, (_idx(sorted, left) as? Int ?? 0))
                        _arr = _append(_arr, (_idx(sorted, right) as? Int ?? 0))
                        return _arr
                    }() as! [Int])
                }
                if (s < target) {
                    left = _int((left &+ 1))
                } else {
                    right = _int((right &- 1))
                }
            }
            i = _int((i &+ 1))
        }
        return ({
            var _arr: [Int] = []
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 0)
            return _arr
        }() as! [Int])
    }
    func list_equal(_ a: [Int], _ b: [Int]) -> Bool {
        if (_int(((a).count)) != _int(((b).count))) {
            return false
        }
        var i = 0
        while (i < _int(((a).count))) {
            if ((_idx(a, i) as? Int ?? 0) != (_idx(b, i) as? Int ?? 0)) {
                return false
            }
            i = _int((i &+ 1))
        }
        return true
    }
    func test_triplet_sum() {
        let arr1: [Int] = ({
            var _arr: [Int] = []
            _arr = _append(_arr, 13)
            _arr = _append(_arr, 29)
            _arr = _append(_arr, 7)
            _arr = _append(_arr, 23)
            _arr = _append(_arr, 5)
            return _arr
        }() as! [Int])
        if (!list_equal((triplet_sum1((arr1 as! [Int]), 35) as! [Int]), ({
            var _arr: [Int] = []
            _arr = _append(_arr, 5)
            _arr = _append(_arr, 7)
            _arr = _append(_arr, 23)
            return _arr
        }() as! [Int]))) {
            _ = fatalError("ts1 case1 failed")
        }
        if (!list_equal((triplet_sum2((arr1 as! [Int]), 35) as! [Int]), ({
            var _arr: [Int] = []
            _arr = _append(_arr, 5)
            _arr = _append(_arr, 7)
            _arr = _append(_arr, 23)
            return _arr
        }() as! [Int]))) {
            _ = fatalError("ts2 case1 failed")
        }
        let arr2: [Int] = ({
            var _arr: [Int] = []
            _arr = _append(_arr, 37)
            _arr = _append(_arr, 9)
            _arr = _append(_arr, 19)
            _arr = _append(_arr, 50)
            _arr = _append(_arr, 44)
            return _arr
        }() as! [Int])
        if (!list_equal((triplet_sum1((arr2 as! [Int]), 65) as! [Int]), ({
            var _arr: [Int] = []
            _arr = _append(_arr, 9)
            _arr = _append(_arr, 19)
            _arr = _append(_arr, 37)
            return _arr
        }() as! [Int]))) {
            _ = fatalError("ts1 case2 failed")
        }
        if (!list_equal((triplet_sum2((arr2 as! [Int]), 65) as! [Int]), ({
            var _arr: [Int] = []
            _arr = _append(_arr, 9)
            _arr = _append(_arr, 19)
            _arr = _append(_arr, 37)
            return _arr
        }() as! [Int]))) {
            _ = fatalError("ts2 case2 failed")
        }
        let arr3: [Int] = ({
            var _arr: [Int] = []
            _arr = _append(_arr, 6)
            _arr = _append(_arr, 47)
            _arr = _append(_arr, 27)
            _arr = _append(_arr, 1)
            _arr = _append(_arr, 15)
            return _arr
        }() as! [Int])
        if (!list_equal((triplet_sum1((arr3 as! [Int]), 11) as! [Int]), ({
            var _arr: [Int] = []
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 0)
            return _arr
        }() as! [Int]))) {
            _ = fatalError("ts1 case3 failed")
        }
        if (!list_equal((triplet_sum2((arr3 as! [Int]), 11) as! [Int]), ({
            var _arr: [Int] = []
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 0)
            return _arr
        }() as! [Int]))) {
            _ = fatalError("ts2 case3 failed")
        }
    }
    func main() {
        _ = test_triplet_sum()
        let sample: [Int] = ({
            var _arr: [Int] = []
            _arr = _append(_arr, 13)
            _arr = _append(_arr, 29)
            _arr = _append(_arr, 7)
            _arr = _append(_arr, 23)
            _arr = _append(_arr, 5)
            return _arr
        }() as! [Int])
        let res: [Int] = (triplet_sum2((sample as! [Int]), 35) as! [Int])
        print(_p(((((_p((_idx(res, 0) as? Int ?? 0)) + " ") + _p((_idx(res, 1) as? Int ?? 0))) + " ") + _p((_idx(res, 2) as? Int ?? 0)))))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
