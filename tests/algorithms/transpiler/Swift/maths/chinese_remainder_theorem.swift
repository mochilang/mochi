// Generated by Mochi transpiler v0.10.62 on 2025-08-09 12:13:20 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
struct EuclidResult: Codable {
    var x: Int
    var y: Int
    init() {
        self.x = 0
        self.y = 0
    }
    init(x: Int, y: Int) {
        self.x = x
        self.y = y
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func extended_euclid(_ a: Int, _ b: Int) -> EuclidResult {
        if (b == 0) {
            return EuclidResult(x: 1, y: 0)
        }
        let res = extended_euclid(b, ((a % b + b) % b))
        let k = (a / b)
        return EuclidResult(x: (res.y as? Int ?? 0), y: _int((res.x &- (k &* res.y))))
    }
    func chinese_remainder_theorem(_ n1: Int, _ r1: Int, _ n2: Int, _ r2: Int) -> Int {
        let res = extended_euclid(n1, n2)
        let x = res.x
        let y = res.y
        let m = (n1 &* n2)
        let n = (((r2 &* x) &* n1) &+ ((r1 &* y) &* n2))
        return ((_int((_int(((n % m + m) % m)) &+ m)) % m + m) % m)
    }
    func invert_modulo(_ a: Int, _ n: Int) -> Int {
        let res = extended_euclid(a, n)
        var b = res.x
        if (b < 0) {
            b = _int(((_int((((b % n + n) % n) &+ n)) % n + n) % n))
        }
        return b
    }
    func chinese_remainder_theorem2(_ n1: Int, _ r1: Int, _ n2: Int, _ r2: Int) -> Int {
        let x = _int(invert_modulo(n1, n2))
        let y = _int(invert_modulo(n2, n1))
        let m = (n1 &* n2)
        let n = (((r2 &* x) &* n1) &+ ((r1 &* y) &* n2))
        return ((_int((_int(((n % m + m) % m)) &+ m)) % m + m) % m)
    }
    let e1 = extended_euclid(10, 6)
    print(_p(((_p(e1.x) + ",") + _p(e1.y))))
    let e2 = extended_euclid(7, 5)
    print(_p(((_p(e2.x) + ",") + _p(e2.y))))
    print(_p(_p(_int(chinese_remainder_theorem(5, 1, 7, 3)))))
    print(_p(_p(_int(chinese_remainder_theorem(6, 1, 4, 3)))))
    print(_p(_p(_int(invert_modulo(2, 5)))))
    print(_p(_p(_int(invert_modulo(8, 7)))))
    print(_p(_p(_int(chinese_remainder_theorem2(5, 1, 7, 3)))))
    print(_p(_p(_int(chinese_remainder_theorem2(6, 1, 4, 3)))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
