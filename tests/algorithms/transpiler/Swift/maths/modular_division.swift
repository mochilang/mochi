// Generated by Mochi transpiler v0.10.63 on 2025-08-11 14:51:42 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func mod(_ a: Int, _ n: Int) -> Int {
        let r = ((a % n + n) % n)
        if (r < 0) {
            return (r &+ n)
        }
        return r
    }
    func greatest_common_divisor(_ a: Int, _ b: Int) -> Int {
        var x = _int(((a < 0) ? -a : a))
        var y = _int(((b < 0) ? -b : b))
        while (y != 0) {
            let t = ((x % y + y) % y)
            x = Int(y)
            y = Int(t)
        }
        return x
    }
    func extended_gcd(_ a: Int, _ b: Int) -> [Int] {
        if (b == 0) {
            return ({
                var _arr: [Int] = []
                _arr = _append(_arr, a)
                _arr = _append(_arr, 1)
                _arr = _append(_arr, 0)
                return _arr
            }() as! [Int])
        }
        let res: [Int] = (extended_gcd(b, ((a % b + b) % b)) as! [Int])
        let d = (_idx(res, 0) as? Int ?? 0)
        let p = (_idx(res, 1) as? Int ?? 0)
        let q = (_idx(res, 2) as? Int ?? 0)
        let x = q
        let y = (p &- (q &* _int((a / b))))
        return ({
            var _arr: [Int] = []
            _arr = _append(_arr, d)
            _arr = _append(_arr, x)
            _arr = _append(_arr, y)
            return _arr
        }() as! [Int])
    }
    func extended_euclid(_ a: Int, _ b: Int) -> [Int] {
        if (b == 0) {
            return ({
                var _arr: [Int] = []
                _arr = _append(_arr, 1)
                _arr = _append(_arr, 0)
                return _arr
            }() as! [Int])
        }
        let res: [Int] = (extended_euclid(b, ((a % b + b) % b)) as! [Int])
        let x = (_idx(res, 1) as? Int ?? 0)
        let y = ((_idx(res, 0) as? Int ?? 0) &- (_int((a / b)) &* (_idx(res, 1) as? Int ?? 0)))
        return ({
            var _arr: [Int] = []
            _arr = _append(_arr, x)
            _arr = _append(_arr, y)
            return _arr
        }() as! [Int])
    }
    func invert_modulo(_ a: Int, _ n: Int) -> Int {
        let res: [Int] = (extended_euclid(a, n) as! [Int])
        let inv = (_idx(res, 0) as? Int ?? 0)
        return _int(mod(inv, n))
    }
    func modular_division(_ a: Int, _ b: Int, _ n: Int) -> Int {
        if (n <= 1) {
            _ = fatalError("n must be > 1")
        }
        if (a <= 0) {
            _ = fatalError("a must be > 0")
        }
        if (_int(greatest_common_divisor(a, n)) != 1) {
            _ = fatalError("gcd(a,n) != 1")
        }
        let eg: [Int] = (extended_gcd(n, a) as! [Int])
        let s = (_idx(eg, 2) as? Int ?? 0)
        return _int(mod((b &* s), n))
    }
    func modular_division2(_ a: Int, _ b: Int, _ n: Int) -> Int {
        let s = _int(invert_modulo(a, n))
        return _int(mod((b &* s), n))
    }
    func tests() {
        if (_int(modular_division(4, 8, 5)) != 2) {
            _ = fatalError("md1")
        }
        if (_int(modular_division(3, 8, 5)) != 1) {
            _ = fatalError("md2")
        }
        if (_int(modular_division(4, 11, 5)) != 4) {
            _ = fatalError("md3")
        }
        if (_int(modular_division2(4, 8, 5)) != 2) {
            _ = fatalError("md21")
        }
        if (_int(modular_division2(3, 8, 5)) != 1) {
            _ = fatalError("md22")
        }
        if (_int(modular_division2(4, 11, 5)) != 4) {
            _ = fatalError("md23")
        }
        if (_int(invert_modulo(2, 5)) != 3) {
            _ = fatalError("inv")
        }
        let eg: [Int] = (extended_gcd(10, 6) as! [Int])
        if ((((_idx(eg, 0) as? Int ?? 0) != 2) || ((_idx(eg, 1) as? Int ?? 0) != _int(-1))) || ((_idx(eg, 2) as? Int ?? 0) != 2)) {
            _ = fatalError("eg")
        }
        let eu: [Int] = (extended_euclid(10, 6) as! [Int])
        if (((_idx(eu, 0) as? Int ?? 0) != _int(-1)) || ((_idx(eu, 1) as? Int ?? 0) != 2)) {
            _ = fatalError("eu")
        }
        if (_int(greatest_common_divisor(121, 11)) != 11) {
            _ = fatalError("gcd")
        }
    }
    func main() {
        _ = tests()
        print(_p(_p(_int(modular_division(4, 8, 5)))))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
