// Generated by Mochi transpiler v0.10.66 on 2025-08-16 14:06:07 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let PI = 3.141592653589793
    let SQRT5 = 2.23606797749979
    func minf(_ a: Double, _ b: Double) -> Double {
        if (a < b) {
            return a
        }
        return b
    }
    func maxf(_ a: Double, _ b: Double) -> Double {
        if (a > b) {
            return a
        }
        return b
    }
    func vol_cube(_ side_length: Double) -> Double {
        if (side_length < 0.0) {
            _ = fatalError("vol_cube() only accepts non-negative values")
        }
        return ((side_length * side_length) * side_length)
    }
    func vol_spherical_cap(_ height: Double, _ radius: Double) -> Double {
        if ((height < 0.0) || (radius < 0.0)) {
            _ = fatalError("vol_spherical_cap() only accepts non-negative values")
        }
        return ((((Double((1.0 / 3.0)) * PI) * height) * height) * Double(((3.0 * radius) - height)))
    }
    func vol_sphere(_ radius: Double) -> Double {
        if (radius < 0.0) {
            _ = fatalError("vol_sphere() only accepts non-negative values")
        }
        return ((((Double((4.0 / 3.0)) * PI) * radius) * radius) * radius)
    }
    func vol_spheres_intersect(_ radius_1: Double, _ radius_2: Double, _ centers_distance: Double) -> Double {
        if (((radius_1 < 0.0) || (radius_2 < 0.0)) || (centers_distance < 0.0)) {
            _ = fatalError("vol_spheres_intersect() only accepts non-negative values")
        }
        if (centers_distance == 0.0) {
            return Double(vol_sphere(Double(minf(Double(radius_1), Double(radius_2)))))
        }
        let h1 = ((Double(((radius_1 - radius_2) + centers_distance)) * Double(((radius_1 + radius_2) - centers_distance))) / Double((2.0 * centers_distance)))
        let h2 = ((Double(((radius_2 - radius_1) + centers_distance)) * Double(((radius_2 + radius_1) - centers_distance))) / Double((2.0 * centers_distance)))
        return (Double(vol_spherical_cap(Double(h1), Double(radius_2))) + Double(vol_spherical_cap(Double(h2), Double(radius_1))))
    }
    func vol_spheres_union(_ radius_1: Double, _ radius_2: Double, _ centers_distance: Double) -> Double {
        if (((radius_1 <= 0.0) || (radius_2 <= 0.0)) || (centers_distance < 0.0)) {
            _ = fatalError("vol_spheres_union() only accepts non-negative values, non-zero radius")
        }
        if (centers_distance == 0.0) {
            return Double(vol_sphere(Double(maxf(Double(radius_1), Double(radius_2)))))
        }
        return ((Double(vol_sphere(Double(radius_1))) + Double(vol_sphere(Double(radius_2)))) - Double(vol_spheres_intersect(Double(radius_1), Double(radius_2), Double(centers_distance))))
    }
    func vol_cuboid(_ width: Double, _ height: Double, _ length: Double) -> Double {
        if (((width < 0.0) || (height < 0.0)) || (length < 0.0)) {
            _ = fatalError("vol_cuboid() only accepts non-negative values")
        }
        return ((width * height) * length)
    }
    func vol_cone(_ area_of_base: Double, _ height: Double) -> Double {
        if ((height < 0.0) || (area_of_base < 0.0)) {
            _ = fatalError("vol_cone() only accepts non-negative values")
        }
        return ((area_of_base * height) / 3.0)
    }
    func vol_right_circ_cone(_ radius: Double, _ height: Double) -> Double {
        if ((height < 0.0) || (radius < 0.0)) {
            _ = fatalError("vol_right_circ_cone() only accepts non-negative values")
        }
        return ((((PI * radius) * radius) * height) / 3.0)
    }
    func vol_prism(_ area_of_base: Double, _ height: Double) -> Double {
        if ((height < 0.0) || (area_of_base < 0.0)) {
            _ = fatalError("vol_prism() only accepts non-negative values")
        }
        return (area_of_base * height)
    }
    func vol_pyramid(_ area_of_base: Double, _ height: Double) -> Double {
        if ((height < 0.0) || (area_of_base < 0.0)) {
            _ = fatalError("vol_pyramid() only accepts non-negative values")
        }
        return ((area_of_base * height) / 3.0)
    }
    func vol_hemisphere(_ radius: Double) -> Double {
        if (radius < 0.0) {
            _ = fatalError("vol_hemisphere() only accepts non-negative values")
        }
        return (((((radius * radius) * radius) * PI) * 2.0) / 3.0)
    }
    func vol_circular_cylinder(_ radius: Double, _ height: Double) -> Double {
        if ((height < 0.0) || (radius < 0.0)) {
            _ = fatalError("vol_circular_cylinder() only accepts non-negative values")
        }
        return (((radius * radius) * height) * PI)
    }
    func vol_hollow_circular_cylinder(_ inner_radius: Double, _ outer_radius: Double, _ height: Double) -> Double {
        if (((inner_radius < 0.0) || (outer_radius < 0.0)) || (height < 0.0)) {
            _ = fatalError("vol_hollow_circular_cylinder() only accepts non-negative values")
        }
        if (outer_radius <= inner_radius) {
            _ = fatalError("outer_radius must be greater than inner_radius")
        }
        return ((PI * Double(((outer_radius * outer_radius) - (inner_radius * inner_radius)))) * height)
    }
    func vol_conical_frustum(_ height: Double, _ radius_1: Double, _ radius_2: Double) -> Double {
        if (((radius_1 < 0.0) || (radius_2 < 0.0)) || (height < 0.0)) {
            _ = fatalError("vol_conical_frustum() only accepts non-negative values")
        }
        return (((Double((1.0 / 3.0)) * PI) * height) * Double((((radius_1 * radius_1) + (radius_2 * radius_2)) + (radius_1 * radius_2))))
    }
    func vol_torus(_ torus_radius: Double, _ tube_radius: Double) -> Double {
        if ((torus_radius < 0.0) || (tube_radius < 0.0)) {
            _ = fatalError("vol_torus() only accepts non-negative values")
        }
        return (((((2.0 * PI) * PI) * torus_radius) * tube_radius) * tube_radius)
    }
    func vol_icosahedron(_ tri_side: Double) -> Double {
        if (tri_side < 0.0) {
            _ = fatalError("vol_icosahedron() only accepts non-negative values")
        }
        return (((((tri_side * tri_side) * tri_side) * Double((3.0 + SQRT5))) * 5.0) / 12.0)
    }
    func main() {
        print(_p("Volumes:"))
        print(_p((_p("Cube: ") + _p(_p(Double(vol_cube(2.0)))))))
        print(_p((_p("Cuboid: ") + _p(_p(Double(vol_cuboid(2.0, 2.0, 2.0)))))))
        print(_p((_p("Cone: ") + _p(_p(Double(vol_cone(2.0, 2.0)))))))
        print(_p((_p("Right Circular Cone: ") + _p(_p(Double(vol_right_circ_cone(2.0, 2.0)))))))
        print(_p((_p("Prism: ") + _p(_p(Double(vol_prism(2.0, 2.0)))))))
        print(_p((_p("Pyramid: ") + _p(_p(Double(vol_pyramid(2.0, 2.0)))))))
        print(_p((_p("Sphere: ") + _p(_p(Double(vol_sphere(2.0)))))))
        print(_p((_p("Hemisphere: ") + _p(_p(Double(vol_hemisphere(2.0)))))))
        print(_p((_p("Circular Cylinder: ") + _p(_p(Double(vol_circular_cylinder(2.0, 2.0)))))))
        print(_p((_p("Torus: ") + _p(_p(Double(vol_torus(2.0, 2.0)))))))
        print(_p((_p("Conical Frustum: ") + _p(_p(Double(vol_conical_frustum(2.0, 2.0, 4.0)))))))
        print(_p((_p("Spherical cap: ") + _p(_p(Double(vol_spherical_cap(1.0, 2.0)))))))
        print(_p((_p("Spheres intersection: ") + _p(_p(Double(vol_spheres_intersect(2.0, 2.0, 1.0)))))))
        print(_p((_p("Spheres union: ") + _p(_p(Double(vol_spheres_union(2.0, 2.0, 1.0)))))))
        print(_p((_p("Hollow Circular Cylinder: ") + _p(_p(Double(vol_hollow_circular_cylinder(1.0, 2.0, 3.0)))))))
        print(_p((_p("Icosahedron: ") + _p(_p(Double(vol_icosahedron(2.5)))))))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
