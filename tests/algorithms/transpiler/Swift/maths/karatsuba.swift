// Generated by Mochi transpiler v0.10.63 on 2025-08-12 08:03:32 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func int_pow(_ base: Int, _ exp: Int) -> Int {
        var result = 1
        var i = 0
        while (i < exp) {
            result = _int((result &* base))
            i = _int((i &+ 1))
        }
        return result
    }
    func karatsuba(_ a: Int, _ b: Int) -> Int {
        if ((_int(((_p(a)).count)) == 1) || (_int(((_p(b)).count)) == 1)) {
            return (a &* b)
        }
        var m1 = _int(((_p(a)).count))
        let lb = _int(((_p(b)).count))
        if (lb > m1) {
            m1 = Int(lb)
        }
        let m2 = (m1 / 2)
        let power = _int(int_pow(10, m2))
        let a1 = (a / power)
        let a2 = ((a % power + power) % power)
        let b1 = (b / power)
        let b2 = ((b % power + power) % power)
        let x = _int(karatsuba(a2, b2))
        let y = _int(karatsuba((a1 &+ a2), (b1 &+ b2)))
        let z = _int(karatsuba(a1, b1))
        let result = (((z &* _int(int_pow(10, (2 &* m2)))) &+ (_int(((y &- z) &- x)) &* power)) &+ x)
        return result
    }
    func main() {
        print(_p(_p(_int(karatsuba(15463, 23489)))))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
