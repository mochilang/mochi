// Generated by Mochi transpiler v0.10.62 on 2025-08-09 12:14:15 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
struct Coeffs: Codable {
    var x: Int
    var y: Int
    init() {
        self.x = 0
        self.y = 0
    }
    init(x: Int, y: Int) {
        self.x = x
        self.y = y
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func abs_val(_ n: Int) -> Int {
        if (n < 0) {
            return -n
        }
        return n
    }
    func extended_euclidean_algorithm(_ a: Int, _ b: Int) -> Coeffs {
        if (_int(abs_val(a)) == 1) {
            return Coeffs(x: Int(a), y: 0)
        }
        if (_int(abs_val(b)) == 1) {
            return Coeffs(x: 0, y: Int(b))
        }
        var old_remainder: Int = a
        var remainder: Int = b
        var old_coeff_a: Int = 1
        var coeff_a: Int = 0
        var old_coeff_b: Int = 0
        var coeff_b: Int = 1
        while (remainder != 0) {
            let quotient: Int = (old_remainder / remainder)
            let temp_remainder = (old_remainder &- (quotient &* remainder))
            old_remainder = Int(remainder)
            remainder = Int(temp_remainder)
            let temp_a = (old_coeff_a &- (quotient &* coeff_a))
            old_coeff_a = Int(coeff_a)
            coeff_a = Int(temp_a)
            let temp_b = (old_coeff_b &- (quotient &* coeff_b))
            old_coeff_b = Int(coeff_b)
            coeff_b = Int(temp_b)
        }
        if (a < 0) {
            old_coeff_a = _int(-old_coeff_a)
        }
        if (b < 0) {
            old_coeff_b = _int(-old_coeff_b)
        }
        return Coeffs(x: Int(old_coeff_a), y: Int(old_coeff_b))
    }
    func test_extended_euclidean_algorithm() {
        let r1 = extended_euclidean_algorithm(1, 24)
        if ((r1.x != 1) || (r1.y != 0)) {
            _ = fatalError("test1 failed")
        }
        let r2 = extended_euclidean_algorithm(8, 14)
        if ((r2.x != 2) || (r2.y != _int(-1))) {
            _ = fatalError("test2 failed")
        }
        let r3 = extended_euclidean_algorithm(240, 46)
        if ((r3.x != _int(-9)) || (r3.y != 47)) {
            _ = fatalError("test3 failed")
        }
        let r4 = extended_euclidean_algorithm(1, -4)
        if ((r4.x != 1) || (r4.y != 0)) {
            _ = fatalError("test4 failed")
        }
        let r5 = extended_euclidean_algorithm(-2, -4)
        if ((r5.x != _int(-1)) || (r5.y != 0)) {
            _ = fatalError("test5 failed")
        }
        let r6 = extended_euclidean_algorithm(0, -4)
        if ((r6.x != 0) || (r6.y != _int(-1))) {
            _ = fatalError("test6 failed")
        }
        let r7 = extended_euclidean_algorithm(2, 0)
        if ((r7.x != 1) || (r7.y != 0)) {
            _ = fatalError("test7 failed")
        }
    }
    func main() {
        _ = test_extended_euclidean_algorithm()
        let res = extended_euclidean_algorithm(240, 46)
        print(_p((((("(" + _p(res.x)) + ", ") + _p(res.y)) + ")")))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
