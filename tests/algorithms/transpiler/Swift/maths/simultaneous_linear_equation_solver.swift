// Generated by Mochi transpiler v0.10.66 on 2025-08-16 13:58:35 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first!
}
func _idx<K: Hashable, V>(_ m: [K: V], _ k: K) -> V? {
    return m[k]
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func floor(_ x: Double) -> Double {
        var i = Int(x)
        if (Double(i) > x) {
            i = _int((i &- 1))
        }
        return Double(i)
    }
    func pow10(_ n: Int) -> Double {
        var p = 1.0
        var i = 0
        while (i < n) {
            p = Double((p * 10.0))
            i = _int((i &+ 1))
        }
        return p
    }
    func round(_ x: Double, _ n: Int) -> Double {
        let m = Double(pow10(n))
        return (Double(floor(Double(((x * m) + 0.5)))) / m)
    }
    func clone_matrix(_ mat: [[Double]]) -> [[Double]] {
        var new_mat: [[Double]] = ([] as! [[Double]])
        var i = 0
        while (i < _int(((mat).count))) {
            var row: [Double] = ([] as! [Double])
            var j = 0
            while (j < _int((((_idx(mat, i) as! [Double])).count))) {
                row = (_append(row, Double(_idx(_idx(mat, i), j))) as! [Double])
                j = _int((j &+ 1))
            }
            new_mat = (_append(new_mat, row) as! [[Double]])
            i = _int((i &+ 1))
        }
        return new_mat
    }
    func solve_simultaneous(_ equations: [[Double]]) -> [Double] {
        let n = _int(((equations).count))
        if (n == 0) {
            _ = fatalError("solve_simultaneous() requires n lists of length n+1")
        }
        let m = (n &+ 1)
        var i = 0
        while (i < n) {
            if (_int((((_idx(equations, i) as! [Double])).count)) != m) {
                _ = fatalError("solve_simultaneous() requires n lists of length n+1")
            }
            i = _int((i &+ 1))
        }
        var a = (clone_matrix((equations as! [[Double]])) as! [[Double]])
        var row = 0
        while (row < n) {
            var pivot = row
            while ((pivot < n) && (Double(_idx(_idx(a, pivot), row)) == 0.0)) {
                pivot = _int((pivot &+ 1))
            }
            if (pivot == n) {
                _ = fatalError("solve_simultaneous() requires at least 1 full equation")
            }
            if (pivot != row) {
                let temp: [Double] = (_idx(a, row) as! [Double])
                a = _set(a, row, { let _tmp4 = (_idx(a, pivot) as! [Double]); return _tmp4 }())
                a = _set(a, pivot, { let _tmp5 = (temp as! [Double]); return _tmp5 }())
            }
            let pivot_val = Double(_idx(_idx(a, row), row))
            var col = 0
            while (col < m) {
                var _tmp3 = (_idx(a, row) as! [Double])
                _tmp3 = _set(_tmp3, col, { let _tmp6 = Double((Double(_idx(_idx(a, row), col)) / pivot_val)); return _tmp6 }())
                a = _set(a, row, { let _tmp7 = (_tmp3 as! [Double]); return _tmp7 }())
                col = _int((col &+ 1))
            }
            var r = 0
            while (r < n) {
                if (r != row) {
                    let factor = Double(_idx(_idx(a, r), row))
                    var c = 0
                    while (c < m) {
                        var _tmp4 = (_idx(a, r) as! [Double])
                        _tmp4 = _set(_tmp4, c, { let _tmp8 = Double((Double(_idx(_idx(a, r), c)) - (factor * Double(_idx(_idx(a, row), c))))); return _tmp8 }())
                        a = _set(a, r, { let _tmp9 = (_tmp4 as! [Double]); return _tmp9 }())
                        c = _int((c &+ 1))
                    }
                }
                r = _int((r &+ 1))
            }
            row = _int((row &+ 1))
        }
        var res: [Double] = ([] as! [Double])
        var k = 0
        while (k < n) {
            res = (_append(res, Double(round(Double(_idx(_idx(a, k), (m &- 1))), 5))) as! [Double])
            k = _int((k &+ 1))
        }
        return res
    }
    func test_solver() {
        let a: [[Double]] = ({
            var _arr: [[Double]] = []
            _arr = _append(_arr, ({
                var _arr: [Double] = []
                _arr = _append(_arr, 1.0)
                _arr = _append(_arr, 2.0)
                _arr = _append(_arr, 3.0)
                return _arr
            }() as! [Double]))
            _arr = _append(_arr, ({
                var _arr: [Double] = []
                _arr = _append(_arr, 4.0)
                _arr = _append(_arr, 5.0)
                _arr = _append(_arr, 6.0)
                return _arr
            }() as! [Double]))
            return _arr
        }() as! [[Double]])
        let r1: [Double] = (solve_simultaneous((a as! [[Double]])) as! [Double])
        if (!(((_int(((r1).count)) == 2) && (Double(_idx(r1, 0)) == Double((0.0 - 1.0)))) && (Double(_idx(r1, 1)) == 2.0))) {
            _ = fatalError("test1 failed")
        }
        let b: [[Double]] = ({
            var _arr: [[Double]] = []
            _arr = _append(_arr, ({
                var _arr: [Double] = []
                _arr = _append(_arr, 0.0)
                _arr = _append(_arr, Double((0.0 - 3.0)))
                _arr = _append(_arr, 1.0)
                _arr = _append(_arr, 7.0)
                return _arr
            }() as! [Double]))
            _arr = _append(_arr, ({
                var _arr: [Double] = []
                _arr = _append(_arr, 3.0)
                _arr = _append(_arr, 2.0)
                _arr = _append(_arr, Double((0.0 - 1.0)))
                _arr = _append(_arr, 11.0)
                return _arr
            }() as! [Double]))
            _arr = _append(_arr, ({
                var _arr: [Double] = []
                _arr = _append(_arr, 5.0)
                _arr = _append(_arr, 1.0)
                _arr = _append(_arr, Double((0.0 - 2.0)))
                _arr = _append(_arr, 12.0)
                return _arr
            }() as! [Double]))
            return _arr
        }() as! [[Double]])
        let r2: [Double] = (solve_simultaneous((b as! [[Double]])) as! [Double])
        if (!((((_int(((r2).count)) == 3) && (Double(_idx(r2, 0)) == 6.4)) && (Double(_idx(r2, 1)) == 1.2)) && (Double(_idx(r2, 2)) == 10.6))) {
            _ = fatalError("test2 failed")
        }
    }
    func main() {
        _ = test_solver()
        let eq: [[Double]] = ({
            var _arr: [[Double]] = []
            _arr = _append(_arr, ({
                var _arr: [Double] = []
                _arr = _append(_arr, 2.0)
                _arr = _append(_arr, 1.0)
                _arr = _append(_arr, 1.0)
                _arr = _append(_arr, 1.0)
                _arr = _append(_arr, 1.0)
                _arr = _append(_arr, 4.0)
                return _arr
            }() as! [Double]))
            _arr = _append(_arr, ({
                var _arr: [Double] = []
                _arr = _append(_arr, 1.0)
                _arr = _append(_arr, 2.0)
                _arr = _append(_arr, 1.0)
                _arr = _append(_arr, 1.0)
                _arr = _append(_arr, 1.0)
                _arr = _append(_arr, 5.0)
                return _arr
            }() as! [Double]))
            _arr = _append(_arr, ({
                var _arr: [Double] = []
                _arr = _append(_arr, 1.0)
                _arr = _append(_arr, 1.0)
                _arr = _append(_arr, 2.0)
                _arr = _append(_arr, 1.0)
                _arr = _append(_arr, 1.0)
                _arr = _append(_arr, 6.0)
                return _arr
            }() as! [Double]))
            _arr = _append(_arr, ({
                var _arr: [Double] = []
                _arr = _append(_arr, 1.0)
                _arr = _append(_arr, 1.0)
                _arr = _append(_arr, 1.0)
                _arr = _append(_arr, 2.0)
                _arr = _append(_arr, 1.0)
                _arr = _append(_arr, 7.0)
                return _arr
            }() as! [Double]))
            _arr = _append(_arr, ({
                var _arr: [Double] = []
                _arr = _append(_arr, 1.0)
                _arr = _append(_arr, 1.0)
                _arr = _append(_arr, 1.0)
                _arr = _append(_arr, 1.0)
                _arr = _append(_arr, 2.0)
                _arr = _append(_arr, 8.0)
                return _arr
            }() as! [Double]))
            return _arr
        }() as! [[Double]])
        print(_p("[" + (solve_simultaneous((eq as! [[Double]])) as! [Double]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
        print(_p("[" + (solve_simultaneous(({
            var _arr: [[Double]] = []
            _arr = _append(_arr, ({
                var _arr: [Double] = []
                _arr = _append(_arr, 4.0)
                _arr = _append(_arr, 2.0)
                return _arr
            }() as! [Double]))
            return _arr
        }() as! [[Double]])) as! [Double]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
