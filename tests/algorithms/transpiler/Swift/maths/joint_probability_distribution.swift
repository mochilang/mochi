// Generated by Mochi transpiler v0.10.66 on 2025-08-16 12:50:11 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first!
}
func _idx<K: Hashable, V>(_ m: [K: V], _ k: K) -> V? {
    return m[k]
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func key(_ x: Int, _ y: Int) -> String {
        return (_p((_p(_p(x)) + _p(","))) + _p(_p(y)))
    }
    func joint_probability_distribution(_ x_values: [Int], _ y_values: [Int], _ x_probabilities: [Double], _ y_probabilities: [Double]) -> [String: Double] {
        var result: [String: Double] = ([:] as! [String: Double])
        var i = 0
        while (i < _int(((x_values).count))) {
            var j = 0
            while (j < _int(((y_values).count))) {
                let k = String(describing: key((_idx(x_values, i) as? Int ?? 0), (_idx(y_values, j) as? Int ?? 0)))
                result = _set(result, String(describing: k), Double((Double(_idx(x_probabilities, i)) * Double(_idx(y_probabilities, j)))))
                j = _int((j &+ 1))
            }
            i = _int((i &+ 1))
        }
        return result
    }
    func expectation(_ values: [Int], _ probabilities: [Double]) -> Double {
        var total = 0.0
        var i = 0
        while (i < _int(((values).count))) {
            total = Double((total + (Double(_idx(values, i)) * Double(_idx(probabilities, i)))))
            i = _int((i &+ 1))
        }
        return total
    }
    func variance(_ values: [Int], _ probabilities: [Double]) -> Double {
        let mean = Double(expectation((values as! [Int]), (probabilities as! [Double])))
        var total = 0.0
        var i = 0
        while (i < _int(((values).count))) {
            let diff = (Double(_idx(values, i)) - mean)
            total = Double((total + ((diff * diff) * Double(_idx(probabilities, i)))))
            i = _int((i &+ 1))
        }
        return total
    }
    func covariance(_ x_values: [Int], _ y_values: [Int], _ x_probabilities: [Double], _ y_probabilities: [Double]) -> Double {
        let mean_x = Double(expectation((x_values as! [Int]), (x_probabilities as! [Double])))
        let mean_y = Double(expectation((y_values as! [Int]), (y_probabilities as! [Double])))
        var total = 0.0
        var i = 0
        while (i < _int(((x_values).count))) {
            var j = 0
            while (j < _int(((y_values).count))) {
                let diff_x = (Double(_idx(x_values, i)) - mean_x)
                let diff_y = (Double(_idx(y_values, j)) - mean_y)
                total = Double((total + (((diff_x * diff_y) * Double(_idx(x_probabilities, i))) * Double(_idx(y_probabilities, j)))))
                j = _int((j &+ 1))
            }
            i = _int((i &+ 1))
        }
        return total
    }
    func sqrtApprox(_ x: Double) -> Double {
        if (x <= 0.0) {
            return 0.0
        }
        var guess = (x / 2.0)
        var i = 0
        while (i < 20) {
            guess = Double((Double((guess + (x / guess))) / 2.0))
            i = _int((i &+ 1))
        }
        return guess
    }
    func standard_deviation(_ v: Double) -> Double {
        return Double(sqrtApprox(Double(v)))
    }
    func main() {
        let x_values: [Int] = ({
            var _arr: [Int] = []
            _arr = _append(_arr, 1)
            _arr = _append(_arr, 2)
            return _arr
        }() as! [Int])
        let y_values: [Int] = ({
            var _arr: [Int] = []
            _arr = _append(_arr, -2)
            _arr = _append(_arr, 5)
            _arr = _append(_arr, 8)
            return _arr
        }() as! [Int])
        let x_probabilities: [Double] = ({
            var _arr: [Double] = []
            _arr = _append(_arr, 0.7)
            _arr = _append(_arr, 0.3)
            return _arr
        }() as! [Double])
        let y_probabilities: [Double] = ({
            var _arr: [Double] = []
            _arr = _append(_arr, 0.3)
            _arr = _append(_arr, 0.5)
            _arr = _append(_arr, 0.2)
            return _arr
        }() as! [Double])
        let jpd: [String: Double] = (joint_probability_distribution((x_values as! [Int]), (y_values as! [Int]), (x_probabilities as! [Double]), (y_probabilities as! [Double])) as! [String: Double])
        var i = 0
        while (i < _int(((x_values).count))) {
            var j = 0
            while (j < _int(((y_values).count))) {
                let k = String(describing: key((_idx(x_values, i) as? Int ?? 0), (_idx(y_values, j) as? Int ?? 0)))
                let prob = Double((jpd[String(String(describing: k))] ?? 0.0))
                print(_p((_p((_p(k) + _p("="))) + _p(_p(prob)))))
                j = _int((j &+ 1))
            }
            i = _int((i &+ 1))
        }
        let ex = Double(expectation((x_values as! [Int]), (x_probabilities as! [Double])))
        let ey = Double(expectation((y_values as! [Int]), (y_probabilities as! [Double])))
        let vx = Double(variance((x_values as! [Int]), (x_probabilities as! [Double])))
        let vy = Double(variance((y_values as! [Int]), (y_probabilities as! [Double])))
        let cov = Double(covariance((x_values as! [Int]), (y_values as! [Int]), (x_probabilities as! [Double]), (y_probabilities as! [Double])))
        print(_p((_p("Ex=") + _p(_p(ex)))))
        print(_p((_p("Ey=") + _p(_p(ey)))))
        print(_p((_p("Vx=") + _p(_p(vx)))))
        print(_p((_p("Vy=") + _p(_p(vy)))))
        print(_p((_p("Cov=") + _p(_p(cov)))))
        print(_p((_p("Sx=") + _p(_p(Double(standard_deviation(Double(vx))))))))
        print(_p((_p("Sy=") + _p(_p(Double(standard_deviation(Double(vy))))))))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
