// Generated by Mochi transpiler v0.10.63 on 2025-08-12 08:44:50 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _slice<T>(_ xs: [T], _ start: Int, _ end: Int) -> [T] {
    var s = start
    var e = end
    if s < 0 { s = 0 }
    if e > xs.count { e = xs.count }
    if s > e { s = e }
    return Array(xs[s..<e])
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func parse_decimal(_ s: String) -> Int {
        var value = 0
        var i = 0
        while (i < _int(((s).count))) {
            let c = (String(Array(s)[i]) as! String)
            if ((c < "0") || (c > "9")) {
                _ = fatalError("invalid literal")
            }
            value = _int(((value &* 10) &+ _int(_int(c))))
            i = _int((i &+ 1))
        }
        return value
    }
    func zeller_day(_ date_input: String) -> String {
        let days: [Int: String] = ([0: "Sunday", 1: "Monday", 2: "Tuesday", 3: "Wednesday", 4: "Thursday", 5: "Friday", 6: "Saturday"] as! [Int: String])
        if (_int(((date_input).count)) != 10) {
            _ = fatalError("Must be 10 characters long")
        }
        let m = _int(parse_decimal((String(_slice(Array(date_input), 0, 2)) as! String)))
        if ((m <= 0) || (m >= 13)) {
            _ = fatalError("Month must be between 1 - 12")
        }
        let sep1 = (String(Array(date_input)[2]) as! String)
        if ((sep1 != "-") && (sep1 != "/")) {
            _ = fatalError("Date separator must be '-' or '/'")
        }
        let d = _int(parse_decimal((String(_slice(Array(date_input), 3, 5)) as! String)))
        if ((d <= 0) || (d >= 32)) {
            _ = fatalError("Date must be between 1 - 31")
        }
        let sep2 = (String(Array(date_input)[5]) as! String)
        if ((sep2 != "-") && (sep2 != "/")) {
            _ = fatalError("Date separator must be '-' or '/'")
        }
        let y = _int(parse_decimal((String(_slice(Array(date_input), 6, 10)) as! String)))
        if ((y <= 45) || (y >= 8500)) {
            _ = fatalError("Year out of range. There has to be some sort of limit...right?")
        }
        var year = y
        var month = m
        if (month <= 2) {
            year = _int((year &- 1))
            month = _int((month &+ 12))
        }
        let c = (year / 100)
        let k = ((year % 100 + 100) % 100)
        let t = _int(_int(((2.6 * Double(month)) - 5.39)))
        let u = (c / 4)
        let v = (k / 4)
        let x = (d &+ k)
        let z = (((t &+ u) &+ v) &+ x)
        let w = (z &- _int((2 &* c)))
        var f = ((w % 7 + 7) % 7)
        if (f < 0) {
            f = _int((f &+ 7))
        }
        return (days[f] as! String)
    }
    func zeller(_ date_input: String) -> String {
        let day = String(describing: zeller_day((date_input as! String)))
        return (((("Your date " + date_input) + ", is a ") + day) + "!")
    }
    func test_zeller() {
        let inputs: [String] = ({
            var _arr: [String] = []
            _arr = _append(_arr, "01-31-2010")
            _arr = _append(_arr, "02-01-2010")
            _arr = _append(_arr, "11-26-2024")
            _arr = _append(_arr, "07-04-1776")
            return _arr
        }() as! [String])
        let expected: [String] = ({
            var _arr: [String] = []
            _arr = _append(_arr, "Sunday")
            _arr = _append(_arr, "Monday")
            _arr = _append(_arr, "Tuesday")
            _arr = _append(_arr, "Thursday")
            return _arr
        }() as! [String])
        var i = 0
        while (i < _int(((inputs).count))) {
            let res = String(describing: zeller_day((_idx(inputs, i) as! String)))
            if (res != (_idx(expected, i) as! String)) {
                _ = fatalError("zeller test failed")
            }
            i = _int((i &+ 1))
        }
    }
    func main() {
        _ = test_zeller()
        print(_p(String(describing: zeller("01-31-2010"))))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
