exit status 1
/tmp/TestSwiftTranspiler_Algorithms_Golden568_maths_fibonacci46891094/001/main.swift:130:17: warning: forced cast of '[Int]' to same type has no effect
128 |                 _arr = _append(_arr, 0)
129 |                 return _arr
130 |             }() as! [Int])
    |                 `- warning: forced cast of '[Int]' to same type has no effect
131 |         }
132 |         var fib: [Int] = ({

/tmp/TestSwiftTranspiler_Algorithms_Golden568_maths_fibonacci46891094/001/main.swift:137:13: warning: forced cast of '[Int]' to same type has no effect
135 |             _arr = _append(_arr, 1)
136 |             return _arr
137 |         }() as! [Int])
    |             `- warning: forced cast of '[Int]' to same type has no effect
138 |         var i = 2
139 |         while (i <= n) {

/tmp/TestSwiftTranspiler_Algorithms_Golden568_maths_fibonacci46891094/001/main.swift:140:55: warning: conditional downcast from 'Int?' to 'Int' does nothing
138 |         var i = 2
139 |         while (i <= n) {
140 |             fib = (_append(fib, ((_idx(fib, (i &- 1)) as? Int ?? 0) &+ (_idx(fib, (i &- 2)) as? Int ?? 0))) as! [Int])
    |                                                       `- warning: conditional downcast from 'Int?' to 'Int' does nothing
141 |             i = _int((i &+ 1))
142 |         }

/tmp/TestSwiftTranspiler_Algorithms_Golden568_maths_fibonacci46891094/001/main.swift:140:93: warning: conditional downcast from 'Int?' to 'Int' does nothing
138 |         var i = 2
139 |         while (i <= n) {
140 |             fib = (_append(fib, ((_idx(fib, (i &- 1)) as? Int ?? 0) &+ (_idx(fib, (i &- 2)) as? Int ?? 0))) as! [Int])
    |                                                                                             `- warning: conditional downcast from 'Int?' to 'Int' does nothing
141 |             i = _int((i &+ 1))
142 |         }

/tmp/TestSwiftTranspiler_Algorithms_Golden568_maths_fibonacci46891094/001/main.swift:175:26: error: cannot convert value of type '[Int : Int]' to expected argument type '[[Int : Int]]'
173 |         }
174 |         if (fib_cache_global[i] != nil) {
175 |             return (_idx(fib_cache_global, i) as? Int ?? 0)
    |                          `- error: cannot convert value of type '[Int : Int]' to expected argument type '[[Int : Int]]'
176 |         }
177 |         let val = (_int(fib_recursive_cached_term((i &- 1))) &+ _int(fib_recursive_cached_term((i &- 2))))

/tmp/TestSwiftTranspiler_Algorithms_Golden568_maths_fibonacci46891094/001/main.swift:175:47: warning: cast from '[Int : Int]?' to unrelated type 'Int' always fails
173 |         }
174 |         if (fib_cache_global[i] != nil) {
175 |             return (_idx(fib_cache_global, i) as? Int ?? 0)
    |                                               `- warning: cast from '[Int : Int]?' to unrelated type 'Int' always fails
176 |         }
177 |         let val = (_int(fib_recursive_cached_term((i &- 1))) &+ _int(fib_recursive_cached_term((i &- 2))))

/tmp/TestSwiftTranspiler_Algorithms_Golden568_maths_fibonacci46891094/001/main.swift:196:26: error: cannot convert value of type '[Int : Int]' to expected argument type '[[Int : Int]]'
194 |     func fib_memoization_term(_ num: Int) -> Int {
195 |         if (fib_memo_cache[num] != nil) {
196 |             return (_idx(fib_memo_cache, num) as? Int ?? 0)
    |                          `- error: cannot convert value of type '[Int : Int]' to expected argument type '[[Int : Int]]'
197 |         }
198 |         let value = (_int(fib_memoization_term((num &- 1))) &+ _int(fib_memoization_term((num &- 2))))

/tmp/TestSwiftTranspiler_Algorithms_Golden568_maths_fibonacci46891094/001/main.swift:196:47: warning: cast from '[Int : Int]?' to unrelated type 'Int' always fails
194 |     func fib_memoization_term(_ num: Int) -> Int {
195 |         if (fib_memo_cache[num] != nil) {
196 |             return (_idx(fib_memo_cache, num) as? Int ?? 0)
    |                                               `- warning: cast from '[Int : Int]?' to unrelated type 'Int' always fails
197 |         }
198 |         let value = (_int(fib_memoization_term((num &- 1))) &+ _int(fib_memoization_term((num &- 2))))

/tmp/TestSwiftTranspiler_Algorithms_Golden568_maths_fibonacci46891094/001/main.swift:233:43: warning: conditional downcast from 'Int?' to 'Int' does nothing
231 |     }
232 |     func matrix_mul(_ a: [[Int]], _ b: [[Int]]) -> [[Int]] {
233 |         let a00 = (((_idx(_idx(a, 0)!, 0) as? Int ?? 0) &* (_idx(_idx(b, 0)!, 0) as? Int ?? 0)) &+ ((_idx(_idx(a, 0)!, 1) as? Int ?? 0) &* (_idx(_idx(b, 1)!, 0) as? Int ?? 0)))
    |                                           `- warning: conditional downcast from 'Int?' to 'Int' does nothing
234 |         let a01 = (((_idx(_idx(a, 0)!, 0) as? Int ?? 0) &* (_idx(_idx(b, 0)!, 1) as? Int ?? 0)) &+ ((_idx(_idx(a, 0)!, 1) as? Int ?? 0) &* (_idx(_idx(b, 1)!, 1) as? Int ?? 0)))
235 |         let a10 = (((_idx(_idx(a, 1)!, 0) as? Int ?? 0) &* (_idx(_idx(b, 0)!, 0) as? Int ?? 0)) &+ ((_idx(_idx(a, 1)!, 1) as? Int ?? 0) &* (_idx(_idx(b, 1)!, 0) as? Int ?? 0)))

/tmp/TestSwiftTranspiler_Algorithms_Golden568_maths_fibonacci46891094/001/main.swift:233:82: warning: conditional downcast from 'Int?' to 'Int' does nothing
231 |     }
232 |     func matrix_mul(_ a: [[Int]], _ b: [[Int]]) -> [[Int]] {
233 |         let a00 = (((_idx(_idx(a, 0)!, 0) as? Int ?? 0) &* (_idx(_idx(b, 0)!, 0) as? Int ?? 0)) &+ ((_idx(_idx(a, 0)!, 1) as? Int ?? 0) &* (_idx(_idx(b, 1)!, 0) as? Int ?? 0)))
    |                                                                                  `- warning: conditional downcast from 'Int?' to 'Int' does nothing
234 |         let a01 = (((_idx(_idx(a, 0)!, 0) as? Int ?? 0) &* (_idx(_idx(b, 0)!, 1) as? Int ?? 0)) &+ ((_idx(_idx(a, 0)!, 1) as? Int ?? 0) &* (_idx(_idx(b, 1)!, 1) as? Int ?? 0)))
235 |         let a10 = (((_idx(_idx(a, 1)!, 0) as? Int ?? 0) &* (_idx(_idx(b, 0)!, 0) as? Int ?? 0)) &+ ((_idx(_idx(a, 1)!, 1) as? Int ?? 0) &* (_idx(_idx(b, 1)!, 0) as? Int ?? 0)))

/tmp/TestSwiftTranspiler_Algorithms_Golden568_maths_fibonacci46891094/001/main.swift:233:123: warning: conditional downcast from 'Int?' to 'Int' does nothing
231 |     }
232 |     func matrix_mul(_ a: [[Int]], _ b: [[Int]]) -> [[Int]] {
233 |         let a00 = (((_idx(_idx(a, 0)!, 0) as? Int ?? 0) &* (_idx(_idx(b, 0)!, 0) as? Int ?? 0)) &+ ((_idx(_idx(a, 0)!, 1) as? Int ?? 0) &* (_idx(_idx(b, 1)!, 0) as? Int ?? 0)))
    |                                                                                                                           `- warning: conditional downcast from 'Int?' to 'Int' does nothing
234 |         let a01 = (((_idx(_idx(a, 0)!, 0) as? Int ?? 0) &* (_idx(_idx(b, 0)!, 1) as? Int ?? 0)) &+ ((_idx(_idx(a, 0)!, 1) as? Int ?? 0) &* (_idx(_idx(b, 1)!, 1) as? Int ?? 0)))
235 |         let a10 = (((_idx(_idx(a, 1)!, 0) as? Int ?? 0) &* (_idx(_idx(b, 0)!, 0) as? Int ?? 0)) &+ ((_idx(_idx(a, 1)!, 1) as? Int ?? 0) &* (_idx(_idx(b, 1)!, 0) as? Int ?? 0)))

/tmp/TestSwiftTranspiler_Algorithms_Golden568_maths_fibonacci46891094/001/main.swift:233:162: warning: conditional downcast from 'Int?' to 'Int' does nothing
231 |     }
232 |     func matrix_mul(_ a: [[Int]], _ b: [[Int]]) -> [[Int]] {
233 |         let a00 = (((_idx(_idx(a, 0)!, 0) as? Int ?? 0) &* (_idx(_idx(b, 0)!, 0) as? Int ?? 0)) &+ ((_idx(_idx(a, 0)!, 1) as? Int ?? 0) &* (_idx(_idx(b, 1)!, 0) as? Int ?? 0)))
    |                                                                                                                                                                  `- warning: conditional downcast from 'Int?' to 'Int' does nothing
234 |         let a01 = (((_idx(_idx(a, 0)!, 0) as? Int ?? 0) &* (_idx(_idx(b, 0)!, 1) as? Int ?? 0)) &+ ((_idx(_idx(a, 0)!, 1) as? Int ?? 0) &* (_idx(_idx(b, 1)!, 1) as? Int ?? 0)))
235 |         let a10 = (((_idx(_idx(a, 1)!, 0) as? Int ?? 0) &* (_idx(_idx(b, 0)!, 0) as? Int ?? 0)) &+ ((_idx(_idx(a, 1)!, 1) as? Int ?? 0) &* (_idx(_idx(b, 1)!, 0) as? Int ?? 0)))

/tmp/TestSwiftTranspiler_Algorithms_Golden568_maths_fibonacci46891094/001/main.swift:234:43: warning: conditional downcast from 'Int?' to 'Int' does nothing
232 |     func matrix_mul(_ a: [[Int]], _ b: [[Int]]) -> [[Int]] {
233 |         let a00 = (((_idx(_idx(a, 0)!, 0) as? Int ?? 0) &* (_idx(_idx(b, 0)!, 0) as? Int ?? 0)) &+ ((_idx(_idx(a, 0)!, 1) as? Int ?? 0) &* (_idx(_idx(b, 1)!, 0) as? Int ?? 0)))
234 |         let a01 = (((_idx(_idx(a, 0)!, 0) as? Int ?? 0) &* (_idx(_idx(b, 0)!, 1) as? Int ?? 0)) &+ ((_idx(_idx(a, 0)!, 1) as? Int ?? 0) &* (_idx(_idx(b, 1)!, 1) as? Int ?? 0)))
    |                                           `- warning: conditional downcast from 'Int?' to 'Int' does nothing
235 |         let a10 = (((_idx(_idx(a, 1)!, 0) as? Int ?? 0) &* (_idx(_idx(b, 0)!, 0) as? Int ?? 0)) &+ ((_idx(_idx(a, 1)!, 1) as? Int ?? 0) &* (_idx(_idx(b, 1)!, 0) as? Int ?? 0)))
236 |         let a11 = (((_idx(_idx(a, 1)!, 0) as? Int ?? 0) &* (_idx(_idx(b, 0)!, 1) as? Int ?? 0)) &+ ((_idx(_idx(a, 1)!, 1) as? Int ?? 0) &* (_idx(_idx(b, 1)!, 1) as? Int ?? 0)))

/tmp/TestSwiftTranspiler_Algorithms_Golden568_maths_fibonacci46891094/001/main.swift:234:82: warning: conditional downcast from 'Int?' to 'Int' does nothing
232 |     func matrix_mul(_ a: [[Int]], _ b: [[Int]]) -> [[Int]] {
233 |         let a00 = (((_idx(_idx(a, 0)!, 0) as? Int ?? 0) &* (_idx(_idx(b, 0)!, 0) as? Int ?? 0)) &+ ((_idx(_idx(a, 0)!, 1) as? Int ?? 0) &* (_idx(_idx(b, 1)!, 0) as? Int ?? 0)))
234 |         let a01 = (((_idx(_idx(a, 0)!, 0) as? Int ?? 0) &* (_idx(_idx(b, 0)!, 1) as? Int ?? 0)) &+ ((_idx(_idx(a, 0)!, 1) as? Int ?? 0) &* (_idx(_idx(b, 1)!, 1) as? Int ?? 0)))
    |                                                                                  `- warning: conditional downcast from 'Int?' to 'Int' does nothing
235 |         let a10 = (((_idx(_idx(a, 1)!, 0) as? Int ?? 0) &* (_idx(_idx(b, 0)!, 0) as? Int ?? 0)) &+ ((_idx(_idx(a, 1)!, 1) as? Int ?? 0) &* (_idx(_idx(b, 1)!, 0) as? Int ?? 0)))
236 |         let a11 = (((_idx(_idx(a, 1)!, 0) as? Int ?? 0) &* (_idx(_idx(b, 0)!, 1) as? Int ?? 0)) &+ ((_idx(_idx(a, 1)!, 1) as? Int ?? 0) &* (_idx(_idx(b, 1)!, 1) as? Int ?? 0)))

/tmp/TestSwiftTranspiler_Algorithms_Golden568_maths_fibonacci46891094/001/main.swift:234:123: warning: conditional downcast from 'Int?' to 'Int' does nothing
232 |     func matrix_mul(_ a: [[Int]], _ b: [[Int]]) -> [[Int]] {
233 |         let a00 = (((_idx(_idx(a, 0)!, 0) as? Int ?? 0) &* (_idx(_idx(b, 0)!, 0) as? Int ?? 0)) &+ ((_idx(_idx(a, 0)!, 1) as? Int ?? 0) &* (_idx(_idx(b, 1)!, 0) as? Int ?? 0)))
234 |         let a01 = (((_idx(_idx(a, 0)!, 0) as? Int ?? 0) &* (_idx(_idx(b, 0)!, 1) as? Int ?? 0)) &+ ((_idx(_idx(a, 0)!, 1) as? Int ?? 0) &* (_idx(_idx(b, 1)!, 1) as? Int ?? 0)))
    |                                                                                                                           `- warning: conditional downcast from 'Int?' to 'Int' does nothing
235 |         let a10 = (((_idx(_idx(a, 1)!, 0) as? Int ?? 0) &* (_idx(_idx(b, 0)!, 0) as? Int ?? 0)) &+ ((_idx(_idx(a, 1)!, 1) as? Int ?? 0) &* (_idx(_idx(b, 1)!, 0) as? Int ?? 0)))
236 |         let a11 = (((_idx(_idx(a, 1)!, 0) as? Int ?? 0) &* (_idx(_idx(b, 0)!, 1) as? Int ?? 0)) &+ ((_idx(_idx(a, 1)!, 1) as? Int ?? 0) &* (_idx(_idx(b, 1)!, 1) as? Int ?? 0)))

/tmp/TestSwiftTranspiler_Algorithms_Golden568_maths_fibonacci46891094/001/main.swift:234:162: warning: conditional downcast from 'Int?' to 'Int' does nothing
232 |     func matrix_mul(_ a: [[Int]], _ b: [[Int]]) -> [[Int]] {
233 |         let a00 = (((_idx(_idx(a, 0)!, 0) as? Int ?? 0) &* (_idx(_idx(b, 0)!, 0) as? Int ?? 0)) &+ ((_idx(_idx(a, 0)!, 1) as? Int ?? 0) &* (_idx(_idx(b, 1)!, 0) as? Int ?? 0)))
234 |         let a01 = (((_idx(_idx(a, 0)!, 0) as? Int ?? 0) &* (_idx(_idx(b, 0)!, 1) as? Int ?? 0)) &+ ((_idx(_idx(a, 0)!, 1) as? Int ?? 0) &* (_idx(_idx(b, 1)!, 1) as? Int ?? 0)))
    |                                                                                                                                                                  `- warning: conditional downcast from 'Int?' to 'Int' does nothing
235 |         let a10 = (((_idx(_idx(a, 1)!, 0) as? Int ?? 0) &* (_idx(_idx(b, 0)!, 0) as? Int ?? 0)) &+ ((_idx(_idx(a, 1)!, 1) as? Int ?? 0) &* (_idx(_idx(b, 1)!, 0) as? Int ?? 0)))
236 |         let a11 = (((_idx(_idx(a, 1)!, 0) as? Int ?? 0) &* (_idx(_idx(b, 0)!, 1) as? Int ?? 0)) &+ ((_idx(_idx(a, 1)!, 1) as? Int ?? 0) &* (_idx(_idx(b, 1)!, 1) as? Int ?? 0)))

/tmp/TestSwiftTranspiler_Algorithms_Golden568_maths_fibonacci46891094/001/main.swift:235:43: warning: conditional downcast from 'Int?' to 'Int' does nothing
233 |         let a00 = (((_idx(_idx(a, 0)!, 0) as? Int ?? 0) &* (_idx(_idx(b, 0)!, 0) as? Int ?? 0)) &+ ((_idx(_idx(a, 0)!, 1) as? Int ?? 0) &* (_idx(_idx(b, 1)!, 0) as? Int ?? 0)))
234 |         let a01 = (((_idx(_idx(a, 0)!, 0) as? Int ?? 0) &* (_idx(_idx(b, 0)!, 1) as? Int ?? 0)) &+ ((_idx(_idx(a, 0)!, 1) as? Int ?? 0) &* (_idx(_idx(b, 1)!, 1) as? Int ?? 0)))
235 |         let a10 = (((_idx(_idx(a, 1)!, 0) as? Int ?? 0) &* (_idx(_idx(b, 0)!, 0) as? Int ?? 0)) &+ ((_idx(_idx(a, 1)!, 1) as? Int ?? 0) &* (_idx(_idx(b, 1)!, 0) as? Int ?? 0)))
    |                                           `- warning: conditional downcast from 'Int?' to 'Int' does nothing
236 |         let a11 = (((_idx(_idx(a, 1)!, 0) as? Int ?? 0) &* (_idx(_idx(b, 0)!, 1) as? Int ?? 0)) &+ ((_idx(_idx(a, 1)!, 1) as? Int ?? 0) &* (_idx(_idx(b, 1)!, 1) as? Int ?? 0)))
237 |         return ({

/tmp/TestSwiftTranspiler_Algorithms_Golden568_maths_fibonacci46891094/001/main.swift:235:82: warning: conditional downcast from 'Int?' to 'Int' does nothing
233 |         let a00 = (((_idx(_idx(a, 0)!, 0) as? Int ?? 0) &* (_idx(_idx(b, 0)!, 0) as? Int ?? 0)) &+ ((_idx(_idx(a, 0)!, 1) as? Int ?? 0) &* (_idx(_idx(b, 1)!, 0) as? Int ?? 0)))
234 |         let a01 = (((_idx(_idx(a, 0)!, 0) as? Int ?? 0) &* (_idx(_idx(b, 0)!, 1) as? Int ?? 0)) &+ ((_idx(_idx(a, 0)!, 1) as? Int ?? 0) &* (_idx(_idx(b, 1)!, 1) as? Int ?? 0)))
235 |         let a10 = (((_idx(_idx(a, 1)!, 0) as? Int ?? 0) &* (_idx(_idx(b, 0)!, 0) as? Int ?? 0)) &+ ((_idx(_idx(a, 1)!, 1) as? Int ?? 0) &* (_idx(_idx(b, 1)!, 0) as? Int ?? 0)))
    |                                                                                  `- warning: conditional downcast from 'Int?' to 'Int' does nothing
236 |         let a11 = (((_idx(_idx(a, 1)!, 0) as? Int ?? 0) &* (_idx(_idx(b, 0)!, 1) as? Int ?? 0)) &+ ((_idx(_idx(a, 1)!, 1) as? Int ?? 0) &* (_idx(_idx(b, 1)!, 1) as? Int ?? 0)))
237 |         return ({

/tmp/TestSwiftTranspiler_Algorithms_Golden568_maths_fibonacci46891094/001/main.swift:235:123: warning: conditional downcast from 'Int?' to 'Int' does nothing
233 |         let a00 = (((_idx(_idx(a, 0)!, 0) as? Int ?? 0) &* (_idx(_idx(b, 0)!, 0) as? Int ?? 0)) &+ ((_idx(_idx(a, 0)!, 1) as? Int ?? 0) &* (_idx(_idx(b, 1)!, 0) as? Int ?? 0)))
234 |         let a01 = (((_idx(_idx(a, 0)!, 0) as? Int ?? 0) &* (_idx(_idx(b, 0)!, 1) as? Int ?? 0)) &+ ((_idx(_idx(a, 0)!, 1) as? Int ?? 0) &* (_idx(_idx(b, 1)!, 1) as? Int ?? 0)))
235 |         let a10 = (((_idx(_idx(a, 1)!, 0) as? Int ?? 0) &* (_idx(_idx(b, 0)!, 0) as? Int ?? 0)) &+ ((_idx(_idx(a, 1)!, 1) as? Int ?? 0) &* (_idx(_idx(b, 1)!, 0) as? Int ?? 0)))
    |                                                                                                                           `- warning: conditional downcast from 'Int?' to 'Int' does nothing
236 |         let a11 = (((_idx(_idx(a, 1)!, 0) as? Int ?? 0) &* (_idx(_idx(b, 0)!, 1) as? Int ?? 0)) &+ ((_idx(_idx(a, 1)!, 1) as? Int ?? 0) &* (_idx(_idx(b, 1)!, 1) as? Int ?? 0)))
237 |         return ({

/tmp/TestSwiftTranspiler_Algorithms_Golden568_maths_fibonacci46891094/001/main.swift:235:162: warning: conditional downcast from 'Int?' to 'Int' does nothing
233 |         let a00 = (((_idx(_idx(a, 0)!, 0) as? Int ?? 0) &* (_idx(_idx(b, 0)!, 0) as? Int ?? 0)) &+ ((_idx(_idx(a, 0)!, 1) as? Int ?? 0) &* (_idx(_idx(b, 1)!, 0) as? Int ?? 0)))
234 |         let a01 = (((_idx(_idx(a, 0)!, 0) as? Int ?? 0) &* (_idx(_idx(b, 0)!, 1) as? Int ?? 0)) &+ ((_idx(_idx(a, 0)!, 1) as? Int ?? 0) &* (_idx(_idx(b, 1)!, 1) as? Int ?? 0)))
235 |         let a10 = (((_idx(_idx(a, 1)!, 0) as? Int ?? 0) &* (_idx(_idx(b, 0)!, 0) as? Int ?? 0)) &+ ((_idx(_idx(a, 1)!, 1) as? Int ?? 0) &* (_idx(_idx(b, 1)!, 0) as? Int ?? 0)))
    |                                                                                                                                                                  `- warning: conditional downcast from 'Int?' to 'Int' does nothing
236 |         let a11 = (((_idx(_idx(a, 1)!, 0) as? Int ?? 0) &* (_idx(_idx(b, 0)!, 1) as? Int ?? 0)) &+ ((_idx(_idx(a, 1)!, 1) as? Int ?? 0) &* (_idx(_idx(b, 1)!, 1) as? Int ?? 0)))
237 |         return ({

/tmp/TestSwiftTranspiler_Algorithms_Golden568_maths_fibonacci46891094/001/main.swift:236:43: warning: conditional downcast from 'Int?' to 'Int' does nothing
234 |         let a01 = (((_idx(_idx(a, 0)!, 0) as? Int ?? 0) &* (_idx(_idx(b, 0)!, 1) as? Int ?? 0)) &+ ((_idx(_idx(a, 0)!, 1) as? Int ?? 0) &* (_idx(_idx(b, 1)!, 1) as? Int ?? 0)))
235 |         let a10 = (((_idx(_idx(a, 1)!, 0) as? Int ?? 0) &* (_idx(_idx(b, 0)!, 0) as? Int ?? 0)) &+ ((_idx(_idx(a, 1)!, 1) as? Int ?? 0) &* (_idx(_idx(b, 1)!, 0) as? Int ?? 0)))
236 |         let a11 = (((_idx(_idx(a, 1)!, 0) as? Int ?? 0) &* (_idx(_idx(b, 0)!, 1) as? Int ?? 0)) &+ ((_idx(_idx(a, 1)!, 1) as? Int ?? 0) &* (_idx(_idx(b, 1)!, 1) as? Int ?? 0)))
    |                                           `- warning: conditional downcast from 'Int?' to 'Int' does nothing
237 |         return ({
238 |             var _arr: [[Int]] = []

/tmp/TestSwiftTranspiler_Algorithms_Golden568_maths_fibonacci46891094/001/main.swift:236:82: warning: conditional downcast from 'Int?' to 'Int' does nothing
234 |         let a01 = (((_idx(_idx(a, 0)!, 0) as? Int ?? 0) &* (_idx(_idx(b, 0)!, 1) as? Int ?? 0)) &+ ((_idx(_idx(a, 0)!, 1) as? Int ?? 0) &* (_idx(_idx(b, 1)!, 1) as? Int ?? 0)))
235 |         let a10 = (((_idx(_idx(a, 1)!, 0) as? Int ?? 0) &* (_idx(_idx(b, 0)!, 0) as? Int ?? 0)) &+ ((_idx(_idx(a, 1)!, 1) as? Int ?? 0) &* (_idx(_idx(b, 1)!, 0) as? Int ?? 0)))
236 |         let a11 = (((_idx(_idx(a, 1)!, 0) as? Int ?? 0) &* (_idx(_idx(b, 0)!, 1) as? Int ?? 0)) &+ ((_idx(_idx(a, 1)!, 1) as? Int ?? 0) &* (_idx(_idx(b, 1)!, 1) as? Int ?? 0)))
    |                                                                                  `- warning: conditional downcast from 'Int?' to 'Int' does nothing
237 |         return ({
238 |             var _arr: [[Int]] = []

/tmp/TestSwiftTranspiler_Algorithms_Golden568_maths_fibonacci46891094/001/main.swift:236:123: warning: conditional downcast from 'Int?' to 'Int' does nothing
234 |         let a01 = (((_idx(_idx(a, 0)!, 0) as? Int ?? 0) &* (_idx(_idx(b, 0)!, 1) as? Int ?? 0)) &+ ((_idx(_idx(a, 0)!, 1) as? Int ?? 0) &* (_idx(_idx(b, 1)!, 1) as? Int ?? 0)))
235 |         let a10 = (((_idx(_idx(a, 1)!, 0) as? Int ?? 0) &* (_idx(_idx(b, 0)!, 0) as? Int ?? 0)) &+ ((_idx(_idx(a, 1)!, 1) as? Int ?? 0) &* (_idx(_idx(b, 1)!, 0) as? Int ?? 0)))
236 |         let a11 = (((_idx(_idx(a, 1)!, 0) as? Int ?? 0) &* (_idx(_idx(b, 0)!, 1) as? Int ?? 0)) &+ ((_idx(_idx(a, 1)!, 1) as? Int ?? 0) &* (_idx(_idx(b, 1)!, 1) as? Int ?? 0)))
    |                                                                                                                           `- warning: conditional downcast from 'Int?' to 'Int' does nothing
237 |         return ({
238 |             var _arr: [[Int]] = []

/tmp/TestSwiftTranspiler_Algorithms_Golden568_maths_fibonacci46891094/001/main.swift:236:162: warning: conditional downcast from 'Int?' to 'Int' does nothing
234 |         let a01 = (((_idx(_idx(a, 0)!, 0) as? Int ?? 0) &* (_idx(_idx(b, 0)!, 1) as? Int ?? 0)) &+ ((_idx(_idx(a, 0)!, 1) as? Int ?? 0) &* (_idx(_idx(b, 1)!, 1) as? Int ?? 0)))
235 |         let a10 = (((_idx(_idx(a, 1)!, 0) as? Int ?? 0) &* (_idx(_idx(b, 0)!, 0) as? Int ?? 0)) &+ ((_idx(_idx(a, 1)!, 1) as? Int ?? 0) &* (_idx(_idx(b, 1)!, 0) as? Int ?? 0)))
236 |         let a11 = (((_idx(_idx(a, 1)!, 0) as? Int ?? 0) &* (_idx(_idx(b, 0)!, 1) as? Int ?? 0)) &+ ((_idx(_idx(a, 1)!, 1) as? Int ?? 0) &* (_idx(_idx(b, 1)!, 1) as? Int ?? 0)))
    |                                                                                                                                                                  `- warning: conditional downcast from 'Int?' to 'Int' does nothing
237 |         return ({
238 |             var _arr: [[Int]] = []

/tmp/TestSwiftTranspiler_Algorithms_Golden568_maths_fibonacci46891094/001/main.swift:244:17: warning: forced cast of '[Int]' to same type has no effect
242 |                 _arr = _append(_arr, a01)
243 |                 return _arr
244 |             }() as! [Int]))
    |                 `- warning: forced cast of '[Int]' to same type has no effect
245 |             _arr = _append(_arr, ({
246 |                 var _arr: [Int] = []

/tmp/TestSwiftTranspiler_Algorithms_Golden568_maths_fibonacci46891094/001/main.swift:250:17: warning: forced cast of '[Int]' to same type has no effect
248 |                 _arr = _append(_arr, a11)
249 |                 return _arr
250 |             }() as! [Int]))
    |                 `- warning: forced cast of '[Int]' to same type has no effect
251 |             return _arr
252 |         }() as! [[Int]])

/tmp/TestSwiftTranspiler_Algorithms_Golden568_maths_fibonacci46891094/001/main.swift:252:13: warning: forced cast of '[[Int]]' to same type has no effect
250 |             }() as! [Int]))
251 |             return _arr
252 |         }() as! [[Int]])
    |             `- warning: forced cast of '[[Int]]' to same type has no effect
253 |     }
254 |     func matrix_pow(_ m: [[Int]], _ power: Int) -> [[Int]] {

/tmp/TestSwiftTranspiler_Algorithms_Golden568_maths_fibonacci46891094/001/main.swift:265:17: warning: forced cast of '[Int]' to same type has no effect
263 |                 _arr = _append(_arr, 0)
264 |                 return _arr
265 |             }() as! [Int]))
    |                 `- warning: forced cast of '[Int]' to same type has no effect
266 |             _arr = _append(_arr, ({
267 |                 var _arr: [Int] = []

/tmp/TestSwiftTranspiler_Algorithms_Golden568_maths_fibonacci46891094/001/main.swift:271:17: warning: forced cast of '[Int]' to same type has no effect
269 |                 _arr = _append(_arr, 1)
270 |                 return _arr
271 |             }() as! [Int]))
    |                 `- warning: forced cast of '[Int]' to same type has no effect
272 |             return _arr
273 |         }() as! [[Int]])

/tmp/TestSwiftTranspiler_Algorithms_Golden568_maths_fibonacci46891094/001/main.swift:273:13: warning: forced cast of '[[Int]]' to same type has no effect
271 |             }() as! [Int]))
272 |             return _arr
273 |         }() as! [[Int]])
    |             `- warning: forced cast of '[[Int]]' to same type has no effect
274 |         var base = m
275 |         var p = power

/tmp/TestSwiftTranspiler_Algorithms_Golden568_maths_fibonacci46891094/001/main.swift:278:46: warning: forced cast of '[[Int]]' to same type has no effect
276 |         while (p > 0) {
277 |             if (((p % 2 + 2) % 2) == 1) {
278 |                 result = (matrix_mul((result as! [[Int]]), (base as! [[Int]])) as! [[Int]])
    |                                              `- warning: forced cast of '[[Int]]' to same type has no effect
279 |             }
280 |             base = (matrix_mul((base as! [[Int]]), (base as! [[Int]])) as! [[Int]])

/tmp/TestSwiftTranspiler_Algorithms_Golden568_maths_fibonacci46891094/001/main.swift:278:66: warning: forced cast of '[[Int]]' to same type has no effect
276 |         while (p > 0) {
277 |             if (((p % 2 + 2) % 2) == 1) {
278 |                 result = (matrix_mul((result as! [[Int]]), (base as! [[Int]])) as! [[Int]])
    |                                                                  `- warning: forced cast of '[[Int]]' to same type has no effect
279 |             }
280 |             base = (matrix_mul((base as! [[Int]]), (base as! [[Int]])) as! [[Int]])

/tmp/TestSwiftTranspiler_Algorithms_Golden568_maths_fibonacci46891094/001/main.swift:278:80: warning: forced cast of '[[Int]]' to same type has no effect
276 |         while (p > 0) {
277 |             if (((p % 2 + 2) % 2) == 1) {
278 |                 result = (matrix_mul((result as! [[Int]]), (base as! [[Int]])) as! [[Int]])
    |                                                                                `- warning: forced cast of '[[Int]]' to same type has no effect
279 |             }
280 |             base = (matrix_mul((base as! [[Int]]), (base as! [[Int]])) as! [[Int]])

/tmp/TestSwiftTranspiler_Algorithms_Golden568_maths_fibonacci46891094/001/main.swift:280:38: warning: forced cast of '[[Int]]' to same type has no effect
278 |                 result = (matrix_mul((result as! [[Int]]), (base as! [[Int]])) as! [[Int]])
279 |             }
280 |             base = (matrix_mul((base as! [[Int]]), (base as! [[Int]])) as! [[Int]])
    |                                      `- warning: forced cast of '[[Int]]' to same type has no effect
281 |             p = _int(_int((p / 2)))
282 |         }

/tmp/TestSwiftTranspiler_Algorithms_Golden568_maths_fibonacci46891094/001/main.swift:280:58: warning: forced cast of '[[Int]]' to same type has no effect
278 |                 result = (matrix_mul((result as! [[Int]]), (base as! [[Int]])) as! [[Int]])
279 |             }
280 |             base = (matrix_mul((base as! [[Int]]), (base as! [[Int]])) as! [[Int]])
    |                                                          `- warning: forced cast of '[[Int]]' to same type has no effect
281 |             p = _int(_int((p / 2)))
282 |         }

/tmp/TestSwiftTranspiler_Algorithms_Golden568_maths_fibonacci46891094/001/main.swift:280:72: warning: forced cast of '[[Int]]' to same type has no effect
278 |                 result = (matrix_mul((result as! [[Int]]), (base as! [[Int]])) as! [[Int]])
279 |             }
280 |             base = (matrix_mul((base as! [[Int]]), (base as! [[Int]])) as! [[Int]])
    |                                                                        `- warning: forced cast of '[[Int]]' to same type has no effect
281 |             p = _int(_int((p / 2)))
282 |         }

/tmp/TestSwiftTranspiler_Algorithms_Golden568_maths_fibonacci46891094/001/main.swift:299:17: warning: forced cast of '[Int]' to same type has no effect
297 |                 _arr = _append(_arr, 1)
298 |                 return _arr
299 |             }() as! [Int]))
    |                 `- warning: forced cast of '[Int]' to same type has no effect
300 |             _arr = _append(_arr, ({
301 |                 var _arr: [Int] = []

/tmp/TestSwiftTranspiler_Algorithms_Golden568_maths_fibonacci46891094/001/main.swift:305:17: warning: forced cast of '[Int]' to same type has no effect
303 |                 _arr = _append(_arr, 0)
304 |                 return _arr
305 |             }() as! [Int]))
    |                 `- warning: forced cast of '[Int]' to same type has no effect
306 |             return _arr
307 |         }() as! [[Int]])

/tmp/TestSwiftTranspiler_Algorithms_Golden568_maths_fibonacci46891094/001/main.swift:307:13: warning: forced cast of '[[Int]]' to same type has no effect
305 |             }() as! [Int]))
306 |             return _arr
307 |         }() as! [[Int]])
    |             `- warning: forced cast of '[[Int]]' to same type has no effect
308 |         let res: [[Int]] = (matrix_pow((m as! [[Int]]), (n &- 1)) as! [[Int]])
309 |         return (_idx(_idx(res, 0)!, 0) as? Int ?? 0)

/tmp/TestSwiftTranspiler_Algorithms_Golden568_maths_fibonacci46891094/001/main.swift:308:43: warning: forced cast of '[[Int]]' to same type has no effect
306 |             return _arr
307 |         }() as! [[Int]])
308 |         let res: [[Int]] = (matrix_pow((m as! [[Int]]), (n &- 1)) as! [[Int]])
    |                                           `- warning: forced cast of '[[Int]]' to same type has no effect
309 |         return (_idx(_idx(res, 0)!, 0) as? Int ?? 0)
310 |     }

/tmp/TestSwiftTranspiler_Algorithms_Golden568_maths_fibonacci46891094/001/main.swift:308:67: warning: forced cast of '[[Int]]' to same type has no effect
306 |             return _arr
307 |         }() as! [[Int]])
308 |         let res: [[Int]] = (matrix_pow((m as! [[Int]]), (n &- 1)) as! [[Int]])
    |                                                                   `- warning: forced cast of '[[Int]]' to same type has no effect
309 |         return (_idx(_idx(res, 0)!, 0) as? Int ?? 0)
310 |     }

/tmp/TestSwiftTranspiler_Algorithms_Golden568_maths_fibonacci46891094/001/main.swift:309:40: warning: conditional downcast from 'Int?' to 'Int' does nothing
307 |         }() as! [[Int]])
308 |         let res: [[Int]] = (matrix_pow((m as! [[Int]]), (n &- 1)) as! [[Int]])
309 |         return (_idx(_idx(res, 0)!, 0) as? Int ?? 0)
    |                                        `- warning: conditional downcast from 'Int?' to 'Int' does nothing
310 |     }
311 |     func run_tests() -> Int {

/tmp/TestSwiftTranspiler_Algorithms_Golden568_maths_fibonacci46891094/001/main.swift:326:13: warning: forced cast of '[Int]' to same type has no effect
324 |             _arr = _append(_arr, 55)
325 |             return _arr
326 |         }() as! [Int])
    |             `- warning: forced cast of '[Int]' to same type has no effect
327 |         let it: [Int] = (fib_iterative(10) as! [Int])
328 |         let rec: [Int] = (fib_recursive(10) as! [Int])

/tmp/TestSwiftTranspiler_Algorithms_Golden568_maths_fibonacci46891094/001/main.swift:327:44: warning: forced cast of '[Int]' to same type has no effect
325 |             return _arr
326 |         }() as! [Int])
327 |         let it: [Int] = (fib_iterative(10) as! [Int])
    |                                            `- warning: forced cast of '[Int]' to same type has no effect
328 |         let rec: [Int] = (fib_recursive(10) as! [Int])
329 |         let cache: [Int] = (fib_recursive_cached(10) as! [Int])

/tmp/TestSwiftTranspiler_Algorithms_Golden568_maths_fibonacci46891094/001/main.swift:328:45: warning: forced cast of '[Int]' to same type has no effect
326 |         }() as! [Int])
327 |         let it: [Int] = (fib_iterative(10) as! [Int])
328 |         let rec: [Int] = (fib_recursive(10) as! [Int])
    |                                             `- warning: forced cast of '[Int]' to same type has no effect
329 |         let cache: [Int] = (fib_recursive_cached(10) as! [Int])
330 |         let memo: [Int] = (fib_memoization(10) as! [Int])

/tmp/TestSwiftTranspiler_Algorithms_Golden568_maths_fibonacci46891094/001/main.swift:329:54: warning: forced cast of '[Int]' to same type has no effect
327 |         let it: [Int] = (fib_iterative(10) as! [Int])
328 |         let rec: [Int] = (fib_recursive(10) as! [Int])
329 |         let cache: [Int] = (fib_recursive_cached(10) as! [Int])
    |                                                      `- warning: forced cast of '[Int]' to same type has no effect
330 |         let memo: [Int] = (fib_memoization(10) as! [Int])
331 |         let bin: [Int] = (fib_binet(10) as! [Int])

/tmp/TestSwiftTranspiler_Algorithms_Golden568_maths_fibonacci46891094/001/main.swift:330:48: warning: forced cast of '[Int]' to same type has no effect
328 |         let rec: [Int] = (fib_recursive(10) as! [Int])
329 |         let cache: [Int] = (fib_recursive_cached(10) as! [Int])
330 |         let memo: [Int] = (fib_memoization(10) as! [Int])
    |                                                `- warning: forced cast of '[Int]' to same type has no effect
331 |         let bin: [Int] = (fib_binet(10) as! [Int])
332 |         let m = _int(fib_matrix(10))

/tmp/TestSwiftTranspiler_Algorithms_Golden568_maths_fibonacci46891094/001/main.swift:331:41: warning: forced cast of '[Int]' to same type has no effect
329 |         let cache: [Int] = (fib_recursive_cached(10) as! [Int])
330 |         let memo: [Int] = (fib_memoization(10) as! [Int])
331 |         let bin: [Int] = (fib_binet(10) as! [Int])
    |                                         `- warning: forced cast of '[Int]' to same type has no effect
332 |         let m = _int(fib_matrix(10))
333 |         if (it != expected) {
