// Generated by Mochi transpiler v0.10.66 on 2025-08-16 13:05:27 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
struct Point: Codable {
    var x: Double
    var y: Double
    init() {
        self.x = 0
        self.y = 0
    }
    init(x: Double, y: Double) {
        self.x = x
        self.y = y
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let PI = 3.141592653589793
    var seed: Int = 1
    func next_seed(_ x: Int) -> Int {
        return ((_int(((x &* 1103515245) &+ 12345)) % 2147483648 + 2147483648) % 2147483648)
    }
    func rand_unit() -> Double {
        seed = _int(next_seed(seed))
        return (Double(seed) / 2147483648.0)
    }
    func is_in_unit_circle(_ p: Point) -> Bool {
        return (((p.x * p.x) + (p.y * p.y)) <= 1.0)
    }
    func random_unit_square() -> Point {
        return Point(x: Double(rand_unit()), y: Double(rand_unit()))
    }
    func estimate_pi(_ simulations: Int) -> Double {
        if (simulations < 1) {
            _ = fatalError("At least one simulation is necessary to estimate PI.")
        }
        var inside: Int = 0
        var i: Int = 0
        while (i < simulations) {
            let p = random_unit_square()
            if is_in_unit_circle((p as! Point)) {
                inside = _int((inside &+ 1))
            }
            i = _int((i &+ 1))
        }
        return ((4.0 * Double(inside)) / Double(simulations))
    }
    func abs_float(_ x: Double) -> Double {
        if (x < 0.0) {
            return -x
        }
        return x
    }
    func main() {
        let n = 10000
        let my_pi = Double(estimate_pi(n))
        let error = Double(abs_float(Double((my_pi - PI))))
        print(_p((_p((_p((_p("An estimate of PI is ") + _p(_p(my_pi)))) + _p(" with an error of "))) + _p(_p(error)))))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
