// Generated by Mochi transpiler v0.10.62 on 2025-08-09 12:16:32 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let PI = 3.141592653589793
    func absf(_ x: Double) -> Double {
        if (x < 0.0) {
            return -x
        }
        return x
    }
    func sqrt(_ x: Double) -> Double {
        if (x < 0.0) {
            _ = fatalError("sqrt domain error")
        }
        var guess = (x / 2.0)
        var i = 0
        while (i < 20) {
            guess = Double((Double((guess + (x / guess))) / 2.0))
            i = _int((i &+ 1))
        }
        return guess
    }
    func ln(_ x: Double) -> Double {
        if (x <= 0.0) {
            _ = fatalError("ln domain error")
        }
        let y = (Double((x - 1.0)) / Double((x + 1.0)))
        let y2 = (y * y)
        var term = y
        var sum = 0.0
        var k = 0
        while (k < 10) {
            let denom = Double(((2 &* k) &+ 1))
            sum = Double((sum + (term / denom)))
            term = Double((term * y2))
            k = _int((k &+ 1))
        }
        return (2.0 * sum)
    }
    func exp_series(_ x: Double) -> Double {
        var term = 1.0
        var sum = 1.0
        var n = 1
        while (n < 20) {
            term = Double(((term * x) / Double(n)))
            sum = Double((sum + term))
            n = _int((n &+ 1))
        }
        return sum
    }
    func powf(_ base: Double, _ exponent: Double) -> Double {
        if (base <= 0.0) {
            return 0.0
        }
        return Double(exp_series(Double((exponent * Double(ln(Double(base)))))))
    }
    func integrand(_ x: Double, _ z: Double) -> Double {
        return (Double(powf(Double(x), Double((z - 1.0)))) * Double(exp_series(Double(-x))))
    }
    func gamma_iterative(_ num: Double) -> Double {
        if (num <= 0.0) {
            _ = fatalError("math domain error")
        }
        let step = 0.001
        let limit = 100.0
        var x = step
        var total = 0.0
        while (x < limit) {
            total = Double((total + (Double(integrand(Double(x), Double(num))) * step)))
            x = Double((x + step))
        }
        return total
    }
    func gamma_recursive(_ num: Double) -> Double {
        if (num <= 0.0) {
            _ = fatalError("math domain error")
        }
        if (num > 171.5) {
            _ = fatalError("math range error")
        }
        let int_part = _int(_int(num))
        let frac = (num - Double(int_part))
        if (!((Double(absf(Double(frac))) < 0.000001) || (Double(absf(Double((frac - 0.5)))) < 0.000001))) {
            _ = fatalError("num must be an integer or a half-integer")
        }
        if (Double(absf(Double((num - 0.5)))) < 0.000001) {
            return Double(sqrt(Double(PI)))
        }
        if (Double(absf(Double((num - 1.0)))) < 0.000001) {
            return 1.0
        }
        return (Double((num - 1.0)) * Double(gamma_recursive(Double((num - 1.0)))))
    }
    func main() {
        print(_p(Double(gamma_iterative(5.0))))
        print(_p(Double(gamma_recursive(5.0))))
        print(_p(Double(gamma_recursive(0.5))))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
