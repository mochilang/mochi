// Generated by Mochi transpiler v0.10.62 on 2025-08-09 12:14:26 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func pow2_int(_ n: Int) -> Int {
        var result = 1
        var i = 0
        while (i < n) {
            result = _int((result &* 2))
            i = _int((i &+ 1))
        }
        return result
    }
    func pow2_float(_ n: Int) -> Double {
        var result = 1.0
        if (n >= 0) {
            var i = 0
            while (i < n) {
                result = Double((result * 2.0))
                i = _int((i &+ 1))
            }
        } else {
            var i = 0
            let m = (0 &- n)
            while (i < m) {
                result = Double((result / 2.0))
                i = _int((i &+ 1))
            }
        }
        return result
    }
    func lshift(_ num: Int, _ k: Int) -> Int {
        var result = num
        var i = 0
        while (i < k) {
            result = _int((result &* 2))
            i = _int((i &+ 1))
        }
        return result
    }
    func rshift(_ num: Int, _ k: Int) -> Int {
        var result = num
        var i = 0
        while (i < k) {
            result = _int((_int((result &- _int(((result % 2 + 2) % 2)))) / 2))
            i = _int((i &+ 1))
        }
        return result
    }
    func log2_floor(_ x: Double) -> Int {
        var n = x
        var e = 0
        while (n >= 2.0) {
            n = Double((n / 2.0))
            e = _int((e &+ 1))
        }
        while (n < 1.0) {
            n = Double((n * 2.0))
            e = _int((e &- 1))
        }
        return e
    }
    func float_to_bits(_ x: Double) -> Int {
        var num = x
        var sign = 0
        if (num < 0.0) {
            sign = 1
            num = Double(-num)
        }
        let exp = _int(log2_floor(Double(num)))
        let pow = Double(pow2_float(exp))
        let normalized = (num / pow)
        let frac = (normalized - 1.0)
        let mantissa = _int((frac * Double(pow2_float(23))))
        let exp_bits = (exp &+ 127)
        return ((_int(lshift(sign, 31)) &+ _int(lshift(exp_bits, 23))) &+ mantissa)
    }
    func bits_to_float(_ bits: Int) -> Double {
        let sign_bit = ((_int(rshift(bits, 31)) % 2 + 2) % 2)
        var sign = 1.0
        if (sign_bit == 1) {
            sign = Double(-1.0)
        }
        let exp_bits = ((_int(rshift(bits, 23)) % 256 + 256) % 256)
        let exp = (exp_bits &- 127)
        let mantissa_bits = ((bits % _int(pow2_int(23)) + _int(pow2_int(23))) % _int(pow2_int(23)))
        let mantissa = (1.0 + (Double(mantissa_bits) / Double(pow2_float(23))))
        return ((sign * mantissa) * Double(pow2_float(exp)))
    }
    func absf(_ x: Double) -> Double {
        if (x < 0.0) {
            return -x
        }
        return x
    }
    func sqrtApprox(_ x: Double) -> Double {
        if (x <= 0.0) {
            return 0.0
        }
        var guess = (x / 2.0)
        var i = 0
        while (i < 20) {
            guess = Double((Double((guess + (x / guess))) / 2.0))
            i = _int((i &+ 1))
        }
        return guess
    }
    func is_close(_ a: Double, _ b: Double, _ rel_tol: Double) -> Bool {
        return (Double(absf(Double((a - b)))) <= (rel_tol * Double(absf(Double(b)))))
    }
    func fast_inverse_sqrt(_ number: Double) -> Double {
        if (number <= 0.0) {
            _ = fatalError("Input must be a positive number.")
        }
        let i = _int(float_to_bits(Double(number)))
        let magic = 1597463007
        let y_bits = (magic &- _int(rshift(i, 1)))
        var y = Double(bits_to_float(y_bits))
        y = Double((y * Double((1.5 - (((0.5 * number) * y) * y)))))
        return y
    }
    func test_fast_inverse_sqrt() {
        if (Double(absf(Double((Double(fast_inverse_sqrt(10.0)) - 0.3156857923527257)))) > 0.0001) {
            _ = fatalError("fast_inverse_sqrt(10) failed")
        }
        if (Double(absf(Double((Double(fast_inverse_sqrt(4.0)) - 0.49915357479239103)))) > 0.0001) {
            _ = fatalError("fast_inverse_sqrt(4) failed")
        }
        if (Double(absf(Double((Double(fast_inverse_sqrt(4.1)) - 0.4932849504615651)))) > 0.0001) {
            _ = fatalError("fast_inverse_sqrt(4.1) failed")
        }
        var i = 50
        while (i < 60) {
            let y = Double(fast_inverse_sqrt(Double(i)))
            let actual = (1.0 / Double(sqrtApprox(Double(i))))
            if (!is_close(Double(y), Double(actual), 0.00132)) {
                _ = fatalError("relative error too high")
            }
            i = _int((i &+ 1))
        }
    }
    func main() {
        _ = test_fast_inverse_sqrt()
        var i = 5
        while (i <= 100) {
            let diff = (Double((1.0 / Double(sqrtApprox(Double(i))))) - Double(fast_inverse_sqrt(Double(i))))
            print(_p(((_p(i) + ": ") + _p(diff))))
            i = _int((i &+ 5))
        }
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
