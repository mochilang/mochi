// Generated by Mochi transpiler v0.10.66 on 2025-08-16 12:41:43 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func sqrtApprox(_ x: Double) -> Double {
        var guess = (x / 2.0)
        var i = 0
        while (i < 20) {
            guess = Double((Double((guess + (x / guess))) / 2.0))
            i = _int((i &+ 1))
        }
        return guess
    }
    func abs_val(_ num: Double) -> Double {
        if (num < 0.0) {
            return -num
        }
        return num
    }
    func approx_equal(_ a: Double, _ b: Double, _ eps: Double) -> Bool {
        return (Double(abs_val(Double((a - b)))) < eps)
    }
    func dodecahedron_surface_area(_ edge: Int) -> Double {
        if (edge <= 0) {
            _ = fatalError("Length must be a positive.")
        }
        let term = Double(sqrtApprox(Double((25.0 + (10.0 * Double(sqrtApprox(5.0)))))))
        let e = Double(edge)
        return (((3.0 * term) * e) * e)
    }
    func dodecahedron_volume(_ edge: Int) -> Double {
        if (edge <= 0) {
            _ = fatalError("Length must be a positive.")
        }
        let term = (Double((15.0 + (7.0 * Double(sqrtApprox(5.0))))) / 4.0)
        let e = Double(edge)
        return (((term * e) * e) * e)
    }
    func test_dodecahedron() {
        if (!approx_equal(Double(dodecahedron_surface_area(5)), 516.1432201766901, 0.0001)) {
            _ = fatalError("surface area 5 failed")
        }
        if (!approx_equal(Double(dodecahedron_surface_area(10)), 2064.5728807067603, 0.0001)) {
            _ = fatalError("surface area 10 failed")
        }
        if (!approx_equal(Double(dodecahedron_volume(5)), 957.8898700780791, 0.0001)) {
            _ = fatalError("volume 5 failed")
        }
        if (!approx_equal(Double(dodecahedron_volume(10)), 7663.118960624633, 0.0001)) {
            _ = fatalError("volume 10 failed")
        }
    }
    func main() {
        _ = test_dodecahedron()
        print(_p(Double(dodecahedron_surface_area(5))))
        print(_p(Double(dodecahedron_volume(5))))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
