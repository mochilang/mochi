// Generated by Mochi transpiler v0.10.63 on 2025-08-12 08:02:05 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
struct TextCounts: Codable {
    var single: [String: Int]
    var double: [String: Int]
    init() {
        self.single = [:]
        self.double = [:]
    }
    init(single: [String: Int], double: [String: Int]) {
        self.single = single
        self.double = double
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func log2(_ x: Double) -> Double {
        var k = 0.0
        var v = x
        while (v >= 2.0) {
            v = Double((v / 2.0))
            k = Double((k + 1.0))
        }
        while (v < 1.0) {
            v = Double((v * 2.0))
            k = Double((k - 1.0))
        }
        let z = (Double((v - 1.0)) / Double((v + 1.0)))
        var zpow = z
        var sum = z
        var i = 3
        while (i <= 9) {
            zpow = Double(((zpow * z) * z))
            sum = Double((sum + (zpow / Double(i))))
            i = _int((i &+ 2))
        }
        let ln2 = 0.6931471805599453
        return (k + ((2.0 * sum) / ln2))
    }
    func analyze_text(_ text: String) -> TextCounts {
        var single: [String: Int] = ([:] as! [String: Int])
        var double: [String: Int] = ([:] as! [String: Int])
        let n = _int(((text).count))
        if (n == 0) {
            return TextCounts(single: (single as! [String: Int]), double: (double as! [String: Int]))
        }
        let last = String(describing: String(Array(String(describing: (text as! String)))[(n &- 1)..<n]))
        if (single[last] != nil) {
            single = _set(single, String(describing: last), _int(((single[String(String(describing: last))] as? Int ?? 0) &+ 1)))
        } else {
            single = _set(single, String(describing: last), 1)
        }
        let first = String(describing: String(Array(String(describing: (text as! String)))[0..<1]))
        let pair0 = (" " + first)
        double = _set(double, String(describing: pair0), 1)
        var i = 0
        while (i < (n &- 1)) {
            let ch = String(describing: String(Array(String(describing: (text as! String)))[i..<(i &+ 1)]))
            if (single[ch] != nil) {
                single = _set(single, String(describing: ch), _int(((single[String(String(describing: ch))] as? Int ?? 0) &+ 1)))
            } else {
                single = _set(single, String(describing: ch), 1)
            }
            let seq = String(describing: String(Array(String(describing: (text as! String)))[i..<(i &+ 2)]))
            if (double[seq] != nil) {
                double = _set(double, String(describing: seq), _int(((double[String(String(describing: seq))] as? Int ?? 0) &+ 1)))
            } else {
                double = _set(double, String(describing: seq), 1)
            }
            i = _int((i &+ 1))
        }
        return TextCounts(single: (single as! [String: Int]), double: (double as! [String: Int]))
    }
    func round_to_int(_ x: Double) -> Int {
        if (x < 0.0) {
            return _int((x - 0.5))
        }
        return _int((x + 0.5))
    }
    func calculate_entropy(_ text: String) {
        let counts = analyze_text((text as! String))
        let alphas = " abcdefghijklmnopqrstuvwxyz"
        var total1 = 0
        for ch in counts.single.keys.sorted() {
            total1 = _int((total1 &+ (counts.single[String(String(describing: ch))] as? Int ?? 0)))
        }
        var h1 = 0.0
        var i = 0
        while (i < _int(((alphas).count))) {
            let ch = String(describing: String(Array(String(describing: (alphas as! String)))[i..<(i &+ 1)]))
            if (counts.single[ch] != nil) {
                let prob = (Double(counts.single[String(String(describing: ch))]) / Double(total1))
                h1 = Double((h1 + (prob * Double(log2(Double(prob))))))
            }
            i = _int((i &+ 1))
        }
        let first_entropy = -h1
        print(_p((_p(_int(round_to_int(Double(first_entropy)))) + ".0")))
        var total2 = 0
        for seq in counts.double.keys.sorted() {
            total2 = _int((total2 &+ (counts.double[String(String(describing: seq))] as? Int ?? 0)))
        }
        var h2 = 0.0
        var a0 = 0
        while (a0 < _int(((alphas).count))) {
            let ch0 = String(describing: String(Array(String(describing: (alphas as! String)))[a0..<(a0 &+ 1)]))
            var a1 = 0
            while (a1 < _int(((alphas).count))) {
                let ch1 = String(describing: String(Array(String(describing: (alphas as! String)))[a1..<(a1 &+ 1)]))
                let seq = (ch0 + ch1)
                if (counts.double[seq] != nil) {
                    let prob = (Double(counts.double[String(String(describing: seq))]) / Double(total2))
                    h2 = Double((h2 + (prob * Double(log2(Double(prob))))))
                }
                a1 = _int((a1 &+ 1))
            }
            a0 = _int((a0 &+ 1))
        }
        let second_entropy = -h2
        print(_p((_p(_int(round_to_int(Double(second_entropy)))) + ".0")))
        let diff = (second_entropy - first_entropy)
        print(_p((_p(_int(round_to_int(Double(diff)))) + ".0")))
    }
    let text1 = (("Behind Winston's back the voice " + "from the telescreen was still ") + "babbling and the overfulfilment")
    _ = calculate_entropy((text1 as! String))
    let text3 = (((((((((("Had repulsive dashwoods suspicion sincerity but advantage now him. " + "Remark easily garret nor nay.  Civil those mrs enjoy shy fat merry. ") + "You greatest jointure saw horrible. He private he on be imagine ") + "suppose. Fertile beloved evident through no service elderly is. Blind ") + "there if every no so at. Own neglected you preferred way sincerity ") + "delivered his attempted. To of message cottage windows do besides ") + "against uncivil.  Delightful unreserved impossible few estimating ") + "men favourable see entreaties. She propriety immediate was improving. ") + "He or entrance humoured likewise moderate. Much nor game son say ") + "feel. Fat make met can must form into gate. Me we offending prevailed ") + "discovery.")
    _ = calculate_entropy((text3 as! String))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
