// Generated by Mochi transpiler v0.10.63 on 2025-08-12 08:03:35 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func remove_at(_ xs: [Int], _ idx: Int) -> [Int] {
        var res: [Int] = ([] as! [Int])
        var i = 0
        while (i < _int(((xs).count))) {
            if (i != idx) {
                res = (_append(res, (_idx(xs, i) as? Int ?? 0)) as! [Int])
            }
            i = _int((i &+ 1))
        }
        return res
    }
    func kth_permutation(_ k: Int, _ n: Int) -> [Int] {
        var k = k
        if (n <= 0) {
            _ = fatalError("n must be positive")
        }
        var factorials: [Int] = ({
            var _arr: [Int] = []
            _arr = _append(_arr, 1)
            return _arr
        }() as! [Int])
        var i = 2
        while (i < n) {
            factorials = (_append(factorials, ((_idx(factorials, (_int(((factorials).count)) &- 1)) as? Int ?? 0) &* i)) as! [Int])
            i = _int((i &+ 1))
        }
        let total = ((_idx(factorials, (_int(((factorials).count)) &- 1)) as? Int ?? 0) &* n)
        if ((k < 0) || (k >= total)) {
            _ = fatalError("k out of bounds")
        }
        var elements: [Int] = ([] as! [Int])
        var e = 0
        while (e < n) {
            elements = (_append(elements, e) as! [Int])
            e = _int((e &+ 1))
        }
        var permutation: [Int] = ([] as! [Int])
        var idx = (_int(((factorials).count)) &- 1)
        while (idx >= 0) {
            let factorial = (_idx(factorials, idx) as? Int ?? 0)
            let number = (k / factorial)
            k = _int(((k % factorial + factorial) % factorial))
            permutation = (_append(permutation, (_idx(elements, number) as? Int ?? 0)) as! [Int])
            elements = (remove_at((elements as! [Int]), number) as! [Int])
            idx = _int((idx &- 1))
        }
        permutation = (_append(permutation, (_idx(elements, 0) as? Int ?? 0)) as! [Int])
        return permutation
    }
    func list_equal(_ a: [Int], _ b: [Int]) -> Bool {
        if (_int(((a).count)) != _int(((b).count))) {
            return false
        }
        var i = 0
        while (i < _int(((a).count))) {
            if ((_idx(a, i) as? Int ?? 0) != (_idx(b, i) as? Int ?? 0)) {
                return false
            }
            i = _int((i &+ 1))
        }
        return true
    }
    func list_to_string(_ xs: [Int]) -> String {
        if (_int(((xs).count)) == 0) {
            return "[]"
        }
        var s = ("[" + _p((_idx(xs, 0) as? Int ?? 0)))
        var i = 1
        while (i < _int(((xs).count))) {
            s = (((s + ", ") + _p((_idx(xs, i) as? Int ?? 0))) as! String)
            i = _int((i &+ 1))
        }
        s = ((s + "]") as! String)
        return s
    }
    func test_kth_permutation() {
        let expected1: [Int] = ({
            var _arr: [Int] = []
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 1)
            _arr = _append(_arr, 2)
            _arr = _append(_arr, 3)
            _arr = _append(_arr, 4)
            return _arr
        }() as! [Int])
        let res1: [Int] = (kth_permutation(0, 5) as! [Int])
        if (!list_equal((res1 as! [Int]), (expected1 as! [Int]))) {
            _ = fatalError("test case 1 failed")
        }
        let expected2: [Int] = ({
            var _arr: [Int] = []
            _arr = _append(_arr, 1)
            _arr = _append(_arr, 3)
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 2)
            return _arr
        }() as! [Int])
        let res2: [Int] = (kth_permutation(10, 4) as! [Int])
        if (!list_equal((res2 as! [Int]), (expected2 as! [Int]))) {
            _ = fatalError("test case 2 failed")
        }
    }
    func main() {
        _ = test_kth_permutation()
        let res: [Int] = (kth_permutation(10, 4) as! [Int])
        print(_p(String(describing: list_to_string((res as! [Int])))))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
