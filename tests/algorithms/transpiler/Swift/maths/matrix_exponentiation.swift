// Generated by Mochi transpiler v0.10.63 on 2025-08-12 08:03:57 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func identity(_ n: Int) -> [[Int]] {
        var i = 0
        var mat: [[Int]] = ([] as! [[Int]])
        while (i < n) {
            var row: [Int] = ([] as! [Int])
            var j = 0
            while (j < n) {
                if (i == j) {
                    row = (_append(row, 1) as! [Int])
                } else {
                    row = (_append(row, 0) as! [Int])
                }
                j = _int((j &+ 1))
            }
            mat = (_append(mat, row) as! [[Int]])
            i = _int((i &+ 1))
        }
        return mat
    }
    func matrix_mul(_ a: [[Int]], _ b: [[Int]]) -> [[Int]] {
        let n = _int(((a).count))
        var result: [[Int]] = ([] as! [[Int]])
        var i = 0
        while (i < n) {
            var row: [Int] = ([] as! [Int])
            var j = 0
            while (j < n) {
                var cell = 0
                var k = 0
                while (k < n) {
                    cell = _int((cell &+ ((_idx(_idx(a, i)!, k) as? Int ?? 0) &* (_idx(_idx(b, k)!, j) as? Int ?? 0))))
                    k = _int((k &+ 1))
                }
                row = (_append(row, cell) as! [Int])
                j = _int((j &+ 1))
            }
            result = (_append(result, row) as! [[Int]])
            i = _int((i &+ 1))
        }
        return result
    }
    func matrix_pow(_ base: [[Int]], _ exp: Int) -> [[Int]] {
        var result = (identity(_int(((base).count))) as! [[Int]])
        var b = base
        var e = exp
        while (e > 0) {
            if (((e % 2 + 2) % 2) == 1) {
                result = (matrix_mul((result as! [[Int]]), (b as! [[Int]])) as! [[Int]])
            }
            b = (matrix_mul((b as! [[Int]]), (b as! [[Int]])) as! [[Int]])
            e = _int((e / 2))
        }
        return result
    }
    func fibonacci_with_matrix_exponentiation(_ n: Int, _ f1: Int, _ f2: Int) -> Int {
        if (n == 1) {
            return f1
        }
        if (n == 2) {
            return f2
        }
        let base: [[Int]] = ({
            var _arr: [[Int]] = []
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 1)
                _arr = _append(_arr, 1)
                return _arr
            }() as! [Int]))
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 1)
                _arr = _append(_arr, 0)
                return _arr
            }() as! [Int]))
            return _arr
        }() as! [[Int]])
        let m: [[Int]] = (matrix_pow((base as! [[Int]]), (n &- 2)) as! [[Int]])
        return ((f2 &* (_idx(_idx(m, 0)!, 0) as? Int ?? 0)) &+ (f1 &* (_idx(_idx(m, 0)!, 1) as? Int ?? 0)))
    }
    func simple_fibonacci(_ n: Int, _ f1: Int, _ f2: Int) -> Int {
        if (n == 1) {
            return f1
        }
        if (n == 2) {
            return f2
        }
        var a = f1
        var b = f2
        var count = (n &- 2)
        while (count > 0) {
            let tmp = (a &+ b)
            a = Int(b)
            b = Int(tmp)
            count = _int((count &- 1))
        }
        return b
    }
    print(_p(_p(_int(fibonacci_with_matrix_exponentiation(1, 5, 6)))))
    print(_p(_p(_int(fibonacci_with_matrix_exponentiation(2, 10, 11)))))
    print(_p(_p(_int(fibonacci_with_matrix_exponentiation(13, 0, 1)))))
    print(_p(_p(_int(fibonacci_with_matrix_exponentiation(10, 5, 9)))))
    print(_p(_p(_int(fibonacci_with_matrix_exponentiation(9, 2, 3)))))
    print(_p(_p(_int(simple_fibonacci(1, 5, 6)))))
    print(_p(_p(_int(simple_fibonacci(2, 10, 11)))))
    print(_p(_p(_int(simple_fibonacci(13, 0, 1)))))
    print(_p(_p(_int(simple_fibonacci(10, 5, 9)))))
    print(_p(_p(_int(simple_fibonacci(9, 2, 3)))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
