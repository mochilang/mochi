// Generated by Mochi transpiler v0.10.66 on 2025-08-16 13:05:04 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first!
}
func _idx<K: Hashable, V>(_ m: [K: V], _ k: K) -> V? {
    return m[k]
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func runge_kutta_fehlberg_45(_ `func`: @escaping (Double, Double) -> Double, _ x_initial: Double, _ y_initial: Double, _ step_size: Double, _ x_final: Double) -> [Double] {
        if (x_initial >= x_final) {
            _ = fatalError("The final value of x must be greater than initial value of x.")
        }
        if (step_size <= 0.0) {
            _ = fatalError("Step size must be positive.")
        }
        let n: Int = _int((Double((x_final - x_initial)) / step_size))
        var ys: [Double] = ([] as! [Double])
        var x: Double = x_initial
        var y: Double = y_initial
        ys = (_append(ys, y) as! [Double])
        var i: Int = 0
        while (i < n) {
            let k1: Double = (step_size * Double(`func`(Double(x), Double(y))))
            let k2: Double = (step_size * Double(`func`(Double((x + (step_size / 4.0))), Double((y + (k1 / 4.0))))))
            let k3: Double = (step_size * Double(`func`(Double((x + (Double((3.0 / 8.0)) * step_size))), Double(((y + (Double((3.0 / 32.0)) * k1)) + (Double((9.0 / 32.0)) * k2))))))
            let k4: Double = (step_size * Double(`func`(Double((x + (Double((12.0 / 13.0)) * step_size))), Double((((y + (Double((1932.0 / 2197.0)) * k1)) - (Double((7200.0 / 2197.0)) * k2)) + (Double((7296.0 / 2197.0)) * k3))))))
            let k5: Double = (step_size * Double(`func`(Double((x + step_size)), Double(((((y + (Double((439.0 / 216.0)) * k1)) - (8.0 * k2)) + (Double((3680.0 / 513.0)) * k3)) - (Double((845.0 / 4104.0)) * k4))))))
            let k6: Double = (step_size * Double(`func`(Double((x + (step_size / 2.0))), Double((((((y - (Double((8.0 / 27.0)) * k1)) + (2.0 * k2)) - (Double((3544.0 / 2565.0)) * k3)) + (Double((1859.0 / 4104.0)) * k4)) - (Double((11.0 / 40.0)) * k5))))))
            y = Double((((((y + (Double((16.0 / 135.0)) * k1)) + (Double((6656.0 / 12825.0)) * k3)) + (Double((28561.0 / 56430.0)) * k4)) - (Double((9.0 / 50.0)) * k5)) + (Double((2.0 / 55.0)) * k6)))
            x = Double((x + step_size))
            ys = (_append(ys, y) as! [Double])
            i = _int((i &+ 1))
        }
        return ys
    }
    func main() {
        func f1(_ x: Double, _ y: Double) -> Double {
            return (1.0 + (y * y))
        }
        let y1: [Double] = (runge_kutta_fehlberg_45((f1 as! (Double, Double) -> Double), 0.0, 0.0, 0.2, 1.0) as! [Double])
        print(_p(Double(_idx(y1, 1))))
        func f2(_ x: Double, _ y: Double) -> Double {
            return x
        }
        let y2: [Double] = (runge_kutta_fehlberg_45((f2 as! (Double, Double) -> Double), Double(-1.0), 0.0, 0.2, 0.0) as! [Double])
        print(_p(Double(_idx(y2, 1))))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
