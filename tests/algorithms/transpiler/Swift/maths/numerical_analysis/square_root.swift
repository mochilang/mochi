// Generated by Mochi transpiler v0.10.63 on 2025-08-11 14:52:18 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func fx(_ x: Double, _ a: Double) -> Double {
        return ((x * x) - a)
    }
    func fx_derivative(_ x: Double) -> Double {
        return (2.0 * x)
    }
    func get_initial_point(_ a: Double) -> Double {
        var start = 2.0
        while (start <= a) {
            start = Double((start * start))
        }
        return start
    }
    func abs_float(_ x: Double) -> Double {
        if (x < 0.0) {
            return -x
        }
        return x
    }
    func square_root_iterative(_ a: Double, _ max_iter: Int, _ tolerance: Double) -> Double {
        if (a < 0.0) {
            _ = fatalError("math domain error")
        }
        var value = Double(get_initial_point(Double(a)))
        var i = 0
        while (i < max_iter) {
            let prev_value = value
            value = Double((value - (Double(fx(Double(value), Double(a))) / Double(fx_derivative(Double(value))))))
            if (Double(abs_float(Double((prev_value - value)))) < tolerance) {
                return value
            }
            i = _int((i &+ 1))
        }
        return value
    }
    let r1 = Double(square_root_iterative(4.0, 9999, 0.00000000000001))
    print(_p(_p(r1)))
    let r2 = Double(square_root_iterative(3.2, 9999, 0.00000000000001))
    print(_p(_p(r2)))
    let r3 = Double(square_root_iterative(140.0, 9999, 0.00000000000001))
    print(_p(_p(r3)))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
