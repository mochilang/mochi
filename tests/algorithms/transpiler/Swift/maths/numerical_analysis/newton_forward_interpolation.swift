// Generated by Mochi transpiler v0.10.63 on 2025-08-11 14:52:01 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func ucal(_ u: Double, _ p: Int) -> Double {
        var temp: Double = u
        var i: Int = 1
        while (i < p) {
            temp = Double((temp * Double((u - Double(i)))))
            i = _int((i &+ 1))
        }
        return temp
    }
    func factorial(_ n: Int) -> Double {
        var result: Double = 1.0
        var i: Int = 2
        while (i <= n) {
            result = Double((result * Double(i)))
            i = _int((i &+ 1))
        }
        return result
    }
    func newton_forward_interpolation(_ x: [Double], _ y0: [Double], _ value: Double) -> Double {
        let n = _int(((x).count))
        var y: [[Double]] = ([] as! [[Double]])
        var i: Int = 0
        while (i < n) {
            var row: [Double] = ([] as! [Double])
            var j: Int = 0
            while (j < n) {
                row = (_append(row, 0.0) as! [Double])
                j = _int((j &+ 1))
            }
            y = (_append(y, row) as! [[Double]])
            i = _int((i &+ 1))
        }
        i = 0
        while (i < n) {
            var _tmp3 = (_idx(y, i) as! [Double])
            _tmp3 = _set(_tmp3, 0, Double(_idx(y0, i)))
            y = _set(y, i, (_tmp3 as! [Double]))
            i = _int((i &+ 1))
        }
        var i1: Int = 1
        while (i1 < n) {
            var j1: Int = 0
            while (j1 < (n &- i1)) {
                var _tmp4 = (_idx(y, j1) as! [Double])
                _tmp4 = _set(_tmp4, i1, Double((Double(_idx(_idx(y, (j1 &+ 1))!, (i1 &- 1))) - Double(_idx(_idx(y, j1)!, (i1 &- 1))))))
                y = _set(y, j1, (_tmp4 as! [Double]))
                j1 = _int((j1 &+ 1))
            }
            i1 = _int((i1 &+ 1))
        }
        let u = (Double((value - Double(_idx(x, 0)))) / Double((Double(_idx(x, 1)) - Double(_idx(x, 0)))))
        var sum: Double = Double(_idx(_idx(y, 0)!, 0))
        var k: Int = 1
        while (k < n) {
            sum = Double((sum + (Double((Double(ucal(Double(u), k)) * Double(_idx(_idx(y, 0)!, k)))) / Double(factorial(k)))))
            k = _int((k &+ 1))
        }
        return sum
    }
    let x_points: [Double] = ({
        var _arr: [Double] = []
        _arr = _append(_arr, 0.0)
        _arr = _append(_arr, 1.0)
        _arr = _append(_arr, 2.0)
        _arr = _append(_arr, 3.0)
        return _arr
    }() as! [Double])
    let y_points: [Double] = ({
        var _arr: [Double] = []
        _arr = _append(_arr, 0.0)
        _arr = _append(_arr, 1.0)
        _arr = _append(_arr, 8.0)
        _arr = _append(_arr, 27.0)
        return _arr
    }() as! [Double])
    print(_p(_p(Double(newton_forward_interpolation((x_points as! [Double]), (y_points as! [Double]), 1.5)))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
