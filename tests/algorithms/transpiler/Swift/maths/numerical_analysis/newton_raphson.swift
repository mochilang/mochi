// Generated by Mochi transpiler v0.10.63 on 2025-08-11 14:52:03 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
struct NRResult: Codable {
    var root: Double
    var error: Double
    var steps: [Double]
    init() {
        self.root = 0
        self.error = 0
        self.steps = []
    }
    init(root: Double, error: Double, steps: [Double]) {
        self.root = root
        self.error = error
        self.steps = steps
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func abs_float(_ x: Double) -> Double {
        if (x < 0.0) {
            return -x
        } else {
            return x
        }
    }
    func fail(_ msg: String) {
        print(_p(("error: " + msg)))
    }
    func calc_derivative(_ f: @escaping (Double) -> Double, _ x: Double, _ delta_x: Double) -> Double {
        return (Double((Double(f(Double((x + (delta_x / 2.0))))) - Double(f(Double((x - (delta_x / 2.0))))))) / delta_x)
    }
    func newton_raphson(_ f: @escaping (Double) -> Double, _ x0: Double, _ max_iter: Int, _ step: Double, _ max_error: Double, _ log_steps: Bool) -> NRResult {
        var a: Double = x0
        var steps: [Double] = ([] as! [Double])
        var i: Int = 0
        while (i < max_iter) {
            if log_steps {
                steps = (_append(steps, a) as! [Double])
            }
            let err: Double = Double(abs_float(Double(f(Double(a)))))
            if (err < max_error) {
                return NRResult(root: Double(a), error: Double(err), steps: (steps as! [Double]))
            }
            let der: Double = Double(calc_derivative((f as! (Double) -> Double), Double(a), Double(step)))
            if (der == 0.0) {
                _ = fail("No converging solution found, zero derivative")
                return NRResult(root: Double(a), error: Double(err), steps: (steps as! [Double]))
            }
            a = Double((a - (Double(f(Double(a))) / der)))
            i = _int((i &+ 1))
        }
        _ = fail("No converging solution found, iteration limit reached")
        return NRResult(root: Double(a), error: Double(abs_float(Double(f(Double(a))))), steps: (steps as! [Double]))
    }
    func poly(_ x: Double) -> Double {
        return (((x * x) - (5.0 * x)) + 2.0)
    }
    let result = newton_raphson((poly as! (Double) -> Double), 0.4, 20, 0.000001, 0.000001, false)
    print(_p(((("root = " + _p(result.root)) + ", error = ") + _p(result.error))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
