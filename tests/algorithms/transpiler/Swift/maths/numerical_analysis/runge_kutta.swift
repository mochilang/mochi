// Generated by Mochi transpiler v0.10.63 on 2025-08-11 14:52:09 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func runge_kutta(_ f: @escaping (Double, Double) -> Double, _ y0: Double, _ x0: Double, _ h: Double, _ x_end: Double) -> [Double] {
        let span = (Double((x_end - x0)) / h)
        var n = _int(_int(span))
        if (Double(Double(n)) < span) {
            n = _int((n &+ 1))
        }
        var y: [Double] = ([] as! [Double])
        var i = 0
        while (i < (n &+ 1)) {
            y = (_append(y, 0.0) as! [Double])
            i = _int((i &+ 1))
        }
        y = _set(y, 0, Double(y0))
        var x = x0
        var k = 0
        while (k < n) {
            let k1 = Double(f(Double(x), Double(_idx(y, k))))
            let k2 = Double(f(Double((x + (0.5 * h))), Double((Double(_idx(y, k)) + ((0.5 * h) * k1)))))
            let k3 = Double(f(Double((x + (0.5 * h))), Double((Double(_idx(y, k)) + ((0.5 * h) * k2)))))
            let k4 = Double(f(Double((x + h)), Double((Double(_idx(y, k)) + (h * k3)))))
            y = _set(y, (k &+ 1), Double((Double(_idx(y, k)) + ((Double((1.0 / 6.0)) * h) * Double((((k1 + (2.0 * k2)) + (2.0 * k3)) + k4))))))
            x = Double((x + h))
            k = _int((k &+ 1))
        }
        return y
    }
    func test_runge_kutta() {
        func f(_ x: Double, _ y: Double) -> Double {
            return y
        }
        let result: [Double] = (runge_kutta((f as! (Double, Double) -> Double), 1.0, 0.0, 0.01, 5.0) as! [Double])
        let last = Double(_idx(result, (_int(((result).count)) &- 1)))
        let expected = 148.41315904125113
        var diff = (last - expected)
        if (diff < 0.0) {
            diff = Double(-diff)
        }
        if (diff > 0.000001) {
            _ = fatalError("runge_kutta failed")
        }
    }
    func main() {
        _ = test_runge_kutta()
        func f(_ x: Double, _ y: Double) -> Double {
            return y
        }
        let r: [Double] = (runge_kutta((f as! (Double, Double) -> Double), 1.0, 0.0, 0.1, 1.0) as! [Double])
        print(_p(_p(Double(_idx(r, (_int(((r).count)) &- 1))))))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
