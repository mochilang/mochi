// Generated by Mochi transpiler v0.10.63 on 2025-08-11 14:51:59 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
struct NevilleResult: Codable {
    var value: Double
    var table: [[Double]]
    init() {
        self.value = 0
        self.table = []
    }
    init(value: Double, table: [[Double]]) {
        self.value = value
        self.table = table
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func neville_interpolate(_ x_points: [Double], _ y_points: [Double], _ x0: Double) -> NevilleResult {
        let n = _int(((x_points).count))
        var q: [[Double]] = ([] as! [[Double]])
        var i = 0
        while (i < n) {
            var row: [Double] = ([] as! [Double])
            var j = 0
            while (j < n) {
                row = (_append(row, 0.0) as! [Double])
                j = _int((j &+ 1))
            }
            q = (_append(q, row) as! [[Double]])
            i = _int((i &+ 1))
        }
        i = 0
        while (i < n) {
            var _tmp3 = (_idx(q, i) as! [Double])
            _tmp3 = _set(_tmp3, 1, Double(_idx(y_points, i)))
            q = _set(q, i, (_tmp3 as! [Double]))
            i = _int((i &+ 1))
        }
        var col = 2
        while (col < n) {
            var row_idx = col
            while (row_idx < n) {
                var _tmp4 = (_idx(q, row_idx) as! [Double])
                _tmp4 = _set(_tmp4, col, Double((Double(((Double((x0 - Double(_idx(x_points, ((row_idx &- col) &+ 1))))) * Double(_idx(_idx(q, row_idx)!, (col &- 1)))) - (Double((x0 - Double(_idx(x_points, row_idx)))) * Double(_idx(_idx(q, (row_idx &- 1))!, (col &- 1)))))) / Double((Double(_idx(x_points, row_idx)) - Double(_idx(x_points, ((row_idx &- col) &+ 1))))))))
                q = _set(q, row_idx, (_tmp4 as! [Double]))
                row_idx = _int((row_idx &+ 1))
            }
            col = _int((col &+ 1))
        }
        return NevilleResult(value: Double(_idx(_idx(q, (n &- 1))!, (n &- 1))), table: (q as! [[Double]]))
    }
    func test_neville() {
        let xs: [Double] = ({
            var _arr: [Double] = []
            _arr = _append(_arr, 1.0)
            _arr = _append(_arr, 2.0)
            _arr = _append(_arr, 3.0)
            _arr = _append(_arr, 4.0)
            _arr = _append(_arr, 6.0)
            return _arr
        }() as! [Double])
        let ys: [Double] = ({
            var _arr: [Double] = []
            _arr = _append(_arr, 6.0)
            _arr = _append(_arr, 7.0)
            _arr = _append(_arr, 8.0)
            _arr = _append(_arr, 9.0)
            _arr = _append(_arr, 11.0)
            return _arr
        }() as! [Double])
        let r1 = neville_interpolate((xs as! [Double]), (ys as! [Double]), 5.0)
        if (r1.value != 10.0) {
            _ = fatalError("neville_interpolate at 5 failed")
        }
        let r2 = neville_interpolate((xs as! [Double]), (ys as! [Double]), 99.0)
        if (r2.value != 104.0) {
            _ = fatalError("neville_interpolate at 99 failed")
        }
    }
    func main() {
        _ = test_neville()
        let xs: [Double] = ({
            var _arr: [Double] = []
            _arr = _append(_arr, 1.0)
            _arr = _append(_arr, 2.0)
            _arr = _append(_arr, 3.0)
            _arr = _append(_arr, 4.0)
            _arr = _append(_arr, 6.0)
            return _arr
        }() as! [Double])
        let ys: [Double] = ({
            var _arr: [Double] = []
            _arr = _append(_arr, 6.0)
            _arr = _append(_arr, 7.0)
            _arr = _append(_arr, 8.0)
            _arr = _append(_arr, 9.0)
            _arr = _append(_arr, 11.0)
            return _arr
        }() as! [Double])
        let r = neville_interpolate((xs as! [Double]), (ys as! [Double]), 5.0)
        print(_p(r.value))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
