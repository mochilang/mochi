// Generated by Mochi transpiler v0.10.63 on 2025-08-11 14:51:50 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func abs_float(_ x: Double) -> Double {
        if (x < 0.0) {
            return -x
        } else {
            return x
        }
    }
    func validate_inputs(_ x_initials: [Double], _ step_size: Double, _ x_final: Double) {
        if (Double(_idx(x_initials, (_int(((x_initials).count)) &- 1))) >= x_final) {
            _ = fatalError("The final value of x must be greater than the initial values of x.")
        }
        if (step_size <= 0.0) {
            _ = fatalError("Step size must be positive.")
        }
        var i: Int = 0
        while (i < (_int(((x_initials).count)) &- 1)) {
            let diff: Double = (Double(_idx(x_initials, (i &+ 1))) - Double(_idx(x_initials, i)))
            if (Double(abs_float(Double((diff - step_size)))) > 0.0000000001) {
                _ = fatalError("x-values must be equally spaced according to step size.")
            }
            i = _int((i &+ 1))
        }
    }
    func list_to_string(_ xs: [Double]) -> String {
        var s: String = "["
        var i: Int = 0
        while (i < _int(((xs).count))) {
            s = ((s + _p(Double(_idx(xs, i)))) as! String)
            if ((i &+ 1) < _int(((xs).count))) {
                s = ((s + ", ") as! String)
            }
            i = _int((i &+ 1))
        }
        s = ((s + "]") as! String)
        return s
    }
    func adams_bashforth_step2(_ f: @escaping (Double, Double) -> Double, _ x_initials: [Double], _ y_initials: [Double], _ step_size: Double, _ x_final: Double) -> [Double] {
        _ = validate_inputs((x_initials as! [Double]), Double(step_size), Double(x_final))
        if ((_int(((x_initials).count)) != 2) || (_int(((y_initials).count)) != 2)) {
            _ = fatalError("Insufficient initial points information.")
        }
        var x0: Double = Double(_idx(x_initials, 0))
        var x1: Double = Double(_idx(x_initials, 1))
        var y: [Double] = ([] as! [Double])
        y = (_append(y, Double(_idx(y_initials, 0))) as! [Double])
        y = (_append(y, Double(_idx(y_initials, 1))) as! [Double])
        let n: Int = _int((Double((x_final - x1)) / step_size))
        var i: Int = 0
        while (i < n) {
            let term: Double = ((3.0 * Double(f(Double(x1), Double(_idx(y, (i &+ 1)))))) - Double(f(Double(x0), Double(_idx(y, i)))))
            let y_next: Double = (Double(_idx(y, (i &+ 1))) + (Double((step_size / 2.0)) * term))
            y = (_append(y, y_next) as! [Double])
            x0 = Double(x1)
            x1 = Double((x1 + step_size))
            i = _int((i &+ 1))
        }
        return y
    }
    func adams_bashforth_step3(_ f: @escaping (Double, Double) -> Double, _ x_initials: [Double], _ y_initials: [Double], _ step_size: Double, _ x_final: Double) -> [Double] {
        _ = validate_inputs((x_initials as! [Double]), Double(step_size), Double(x_final))
        if ((_int(((x_initials).count)) != 3) || (_int(((y_initials).count)) != 3)) {
            _ = fatalError("Insufficient initial points information.")
        }
        var x0: Double = Double(_idx(x_initials, 0))
        var x1: Double = Double(_idx(x_initials, 1))
        var x2: Double = Double(_idx(x_initials, 2))
        var y: [Double] = ([] as! [Double])
        y = (_append(y, Double(_idx(y_initials, 0))) as! [Double])
        y = (_append(y, Double(_idx(y_initials, 1))) as! [Double])
        y = (_append(y, Double(_idx(y_initials, 2))) as! [Double])
        let n: Int = _int((Double((x_final - x2)) / step_size))
        var i: Int = 0
        while (i <= n) {
            let term: Double = (((23.0 * Double(f(Double(x2), Double(_idx(y, (i &+ 2)))))) - (16.0 * Double(f(Double(x1), Double(_idx(y, (i &+ 1))))))) + (5.0 * Double(f(Double(x0), Double(_idx(y, i))))))
            let y_next: Double = (Double(_idx(y, (i &+ 2))) + (Double((step_size / 12.0)) * term))
            y = (_append(y, y_next) as! [Double])
            x0 = Double(x1)
            x1 = Double(x2)
            x2 = Double((x2 + step_size))
            i = _int((i &+ 1))
        }
        return y
    }
    func adams_bashforth_step4(_ f: @escaping (Double, Double) -> Double, _ x_initials: [Double], _ y_initials: [Double], _ step_size: Double, _ x_final: Double) -> [Double] {
        _ = validate_inputs((x_initials as! [Double]), Double(step_size), Double(x_final))
        if ((_int(((x_initials).count)) != 4) || (_int(((y_initials).count)) != 4)) {
            _ = fatalError("Insufficient initial points information.")
        }
        var x0: Double = Double(_idx(x_initials, 0))
        var x1: Double = Double(_idx(x_initials, 1))
        var x2: Double = Double(_idx(x_initials, 2))
        var x3: Double = Double(_idx(x_initials, 3))
        var y: [Double] = ([] as! [Double])
        y = (_append(y, Double(_idx(y_initials, 0))) as! [Double])
        y = (_append(y, Double(_idx(y_initials, 1))) as! [Double])
        y = (_append(y, Double(_idx(y_initials, 2))) as! [Double])
        y = (_append(y, Double(_idx(y_initials, 3))) as! [Double])
        let n: Int = _int((Double((x_final - x3)) / step_size))
        var i: Int = 0
        while (i < n) {
            let term: Double = ((((55.0 * Double(f(Double(x3), Double(_idx(y, (i &+ 3)))))) - (59.0 * Double(f(Double(x2), Double(_idx(y, (i &+ 2))))))) + (37.0 * Double(f(Double(x1), Double(_idx(y, (i &+ 1))))))) - (9.0 * Double(f(Double(x0), Double(_idx(y, i))))))
            let y_next: Double = (Double(_idx(y, (i &+ 3))) + (Double((step_size / 24.0)) * term))
            y = (_append(y, y_next) as! [Double])
            x0 = Double(x1)
            x1 = Double(x2)
            x2 = Double(x3)
            x3 = Double((x3 + step_size))
            i = _int((i &+ 1))
        }
        return y
    }
    func adams_bashforth_step5(_ f: @escaping (Double, Double) -> Double, _ x_initials: [Double], _ y_initials: [Double], _ step_size: Double, _ x_final: Double) -> [Double] {
        _ = validate_inputs((x_initials as! [Double]), Double(step_size), Double(x_final))
        if ((_int(((x_initials).count)) != 5) || (_int(((y_initials).count)) != 5)) {
            _ = fatalError("Insufficient initial points information.")
        }
        var x0: Double = Double(_idx(x_initials, 0))
        var x1: Double = Double(_idx(x_initials, 1))
        var x2: Double = Double(_idx(x_initials, 2))
        var x3: Double = Double(_idx(x_initials, 3))
        var x4: Double = Double(_idx(x_initials, 4))
        var y: [Double] = ([] as! [Double])
        y = (_append(y, Double(_idx(y_initials, 0))) as! [Double])
        y = (_append(y, Double(_idx(y_initials, 1))) as! [Double])
        y = (_append(y, Double(_idx(y_initials, 2))) as! [Double])
        y = (_append(y, Double(_idx(y_initials, 3))) as! [Double])
        y = (_append(y, Double(_idx(y_initials, 4))) as! [Double])
        let n: Int = _int((Double((x_final - x4)) / step_size))
        var i: Int = 0
        while (i <= n) {
            let term: Double = (((((1901.0 * Double(f(Double(x4), Double(_idx(y, (i &+ 4)))))) - (2774.0 * Double(f(Double(x3), Double(_idx(y, (i &+ 3))))))) - (2616.0 * Double(f(Double(x2), Double(_idx(y, (i &+ 2))))))) - (1274.0 * Double(f(Double(x1), Double(_idx(y, (i &+ 1))))))) + (251.0 * Double(f(Double(x0), Double(_idx(y, i))))))
            let y_next: Double = (Double(_idx(y, (i &+ 4))) + (Double((step_size / 720.0)) * term))
            y = (_append(y, y_next) as! [Double])
            x0 = Double(x1)
            x1 = Double(x2)
            x2 = Double(x3)
            x3 = Double(x4)
            x4 = Double((x4 + step_size))
            i = _int((i &+ 1))
        }
        return y
    }
    func f_x(_ x: Double, _ y: Double) -> Double {
        return x
    }
    func f_xy(_ x: Double, _ y: Double) -> Double {
        return (x + y)
    }
    let y2: [Double] = (adams_bashforth_step2((f_x as! (Double, Double) -> Double), ({
        var _arr: [Double] = []
        _arr = _append(_arr, 0.0)
        _arr = _append(_arr, 0.2)
        return _arr
    }() as! [Double]), ({
        var _arr: [Double] = []
        _arr = _append(_arr, 0.0)
        _arr = _append(_arr, 0.0)
        return _arr
    }() as! [Double]), 0.2, 1.0) as! [Double])
    print(_p(String(describing: list_to_string((y2 as! [Double])))))
    let y3: [Double] = (adams_bashforth_step3((f_xy as! (Double, Double) -> Double), ({
        var _arr: [Double] = []
        _arr = _append(_arr, 0.0)
        _arr = _append(_arr, 0.2)
        _arr = _append(_arr, 0.4)
        return _arr
    }() as! [Double]), ({
        var _arr: [Double] = []
        _arr = _append(_arr, 0.0)
        _arr = _append(_arr, 0.0)
        _arr = _append(_arr, 0.04)
        return _arr
    }() as! [Double]), 0.2, 1.0) as! [Double])
    print(_p(_p(Double(_idx(y3, 3)))))
    let y4: [Double] = (adams_bashforth_step4((f_xy as! (Double, Double) -> Double), ({
        var _arr: [Double] = []
        _arr = _append(_arr, 0.0)
        _arr = _append(_arr, 0.2)
        _arr = _append(_arr, 0.4)
        _arr = _append(_arr, 0.6)
        return _arr
    }() as! [Double]), ({
        var _arr: [Double] = []
        _arr = _append(_arr, 0.0)
        _arr = _append(_arr, 0.0)
        _arr = _append(_arr, 0.04)
        _arr = _append(_arr, 0.128)
        return _arr
    }() as! [Double]), 0.2, 1.0) as! [Double])
    print(_p(_p(Double(_idx(y4, 4)))))
    print(_p(_p(Double(_idx(y4, 5)))))
    let y5: [Double] = (adams_bashforth_step5((f_xy as! (Double, Double) -> Double), ({
        var _arr: [Double] = []
        _arr = _append(_arr, 0.0)
        _arr = _append(_arr, 0.2)
        _arr = _append(_arr, 0.4)
        _arr = _append(_arr, 0.6)
        _arr = _append(_arr, 0.8)
        return _arr
    }() as! [Double]), ({
        var _arr: [Double] = []
        _arr = _append(_arr, 0.0)
        _arr = _append(_arr, 0.0214)
        _arr = _append(_arr, 0.0214)
        _arr = _append(_arr, 0.22211)
        _arr = _append(_arr, 0.42536)
        return _arr
    }() as! [Double]), 0.2, 1.0) as! [Double])
    print(_p(_p(Double(_idx(y5, (_int(((y5).count)) &- 1))))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
