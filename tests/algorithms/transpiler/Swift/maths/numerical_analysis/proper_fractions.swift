// Generated by Mochi transpiler v0.10.63 on 2025-08-11 14:52:07 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func gcd(_ a: Int, _ b: Int) -> Int {
        var x = a
        var y = b
        while (y != 0) {
            let t = ((x % y + y) % y)
            x = Int(y)
            y = Int(t)
        }
        if (x < 0) {
            return -x
        }
        return x
    }
    func proper_fractions(_ den: Int) -> [String] {
        if (den < 0) {
            _ = fatalError("The Denominator Cannot be less than 0")
        }
        var res: [String] = ([] as! [String])
        var n = 1
        while (n < den) {
            if (_int(gcd(n, den)) == 1) {
                res = (_append(res, ((_p(n) + "/") + _p(den))) as! [String])
            }
            n = _int((n &+ 1))
        }
        return res
    }
    func test_proper_fractions() {
        let a: [String] = (proper_fractions(10) as! [String])
        if (a != ({
            var _arr: [String] = []
            _arr = _append(_arr, "1/10")
            _arr = _append(_arr, "3/10")
            _arr = _append(_arr, "7/10")
            _arr = _append(_arr, "9/10")
            return _arr
        }() as! [String])) {
            _ = fatalError("test 10 failed")
        }
        let b: [String] = (proper_fractions(5) as! [String])
        if (b != ({
            var _arr: [String] = []
            _arr = _append(_arr, "1/5")
            _arr = _append(_arr, "2/5")
            _arr = _append(_arr, "3/5")
            _arr = _append(_arr, "4/5")
            return _arr
        }() as! [String])) {
            _ = fatalError("test 5 failed")
        }
        let c: [String] = (proper_fractions(0) as! [String])
        if (c != []) {
            _ = fatalError("test 0 failed")
        }
    }
    func main() {
        _ = test_proper_fractions()
        print(_p("[" + (proper_fractions(10) as! [String]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
        print(_p("[" + (proper_fractions(5) as! [String]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
        print(_p("[" + (proper_fractions(0) as! [String]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
