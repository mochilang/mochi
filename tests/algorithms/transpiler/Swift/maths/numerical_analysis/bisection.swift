// Generated by Mochi transpiler v0.10.63 on 2025-08-11 14:51:52 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func abs_float(_ x: Double) -> Double {
        if (x < 0.0) {
            return -x
        } else {
            return x
        }
    }
    func bisection(_ f: @escaping (Double) -> Double, _ a: Double, _ b: Double) -> Double {
        var start: Double = a
        var end: Double = b
        if (Double(f(Double(a))) == 0.0) {
            return a
        }
        if (Double(f(Double(b))) == 0.0) {
            return b
        }
        if ((Double(f(Double(a))) * Double(f(Double(b)))) > 0.0) {
            _ = fatalError("could not find root in given interval.")
        }
        var mid: Double = (start + (Double((end - start)) / 2.0))
        while (Double(abs_float(Double((start - mid)))) > 0.0000001) {
            let fmid: Double = Double(f(Double(mid)))
            if (fmid == 0.0) {
                return mid
            }
            if ((fmid * Double(f(Double(start)))) < 0.0) {
                end = Double(mid)
            } else {
                start = Double(mid)
            }
            mid = Double((start + (Double((end - start)) / 2.0)))
        }
        return mid
    }
    func f(_ x: Double) -> Double {
        return ((((x * x) * x) - (2.0 * x)) - 5.0)
    }
    func main() {
        print(_p(_p(Double(bisection((f as! (Double) -> Double), 1.0, 1000.0)))))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
