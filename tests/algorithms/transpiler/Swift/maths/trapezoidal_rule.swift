// Generated by Mochi transpiler v0.10.63 on 2025-08-12 08:44:33 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func f(_ x: Double) -> Double {
        return (x * x)
    }
    func make_points(_ a: Double, _ b: Double, _ h: Double) -> [Double] {
        var xs: [Double] = ([] as! [Double])
        var x: Double = (a + h)
        while (x <= Double((b - h))) {
            xs = (_append(xs, x) as! [Double])
            x = Double((x + h))
        }
        return xs
    }
    func trapezoidal_rule(_ boundary: [Double], _ steps: Double) -> Double {
        let h: Double = (Double((Double(_idx(boundary, 1)) - Double(_idx(boundary, 0)))) / steps)
        let a: Double = Double(_idx(boundary, 0))
        let b: Double = Double(_idx(boundary, 1))
        let xs: [Double] = (make_points(Double(a), Double(b), Double(h)) as! [Double])
        var y: Double = (Double((h / 2.0)) * Double(f(Double(a))))
        var i: Int = 0
        while (i < _int(((xs).count))) {
            y = Double((y + (h * Double(f(Double(_idx(xs, i)))))))
            i = _int((i &+ 1))
        }
        y = Double((y + (Double((h / 2.0)) * Double(f(Double(b))))))
        return y
    }
    let a: Double = 0.0
    let b: Double = 1.0
    let steps: Double = 10.0
    let boundary: [Double] = ({
        var _arr: [Double] = []
        _arr = _append(_arr, a)
        _arr = _append(_arr, b)
        return _arr
    }() as! [Double])
    var y: Double = Double(trapezoidal_rule((boundary as! [Double]), Double(steps)))
    print(_p(("y = " + _p(y))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
