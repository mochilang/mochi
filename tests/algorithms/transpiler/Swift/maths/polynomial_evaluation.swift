// Generated by Mochi transpiler v0.10.63 on 2025-08-11 14:52:38 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func pow_float(_ base: Double, _ exponent: Int) -> Double {
        var exp = exponent
        var result = 1.0
        var i = 0
        while (i < exp) {
            result = Double((result * base))
            i = _int((i &+ 1))
        }
        return result
    }
    func evaluate_poly(_ poly: [Double], _ x: Double) -> Double {
        var total = 0.0
        var i = 0
        while (i < _int(((poly).count))) {
            total = Double((total + (Double(_idx(poly, i)) * Double(pow_float(Double(x), i)))))
            i = _int((i &+ 1))
        }
        return total
    }
    func horner(_ poly: [Double], _ x: Double) -> Double {
        var result = 0.0
        var i = (_int(((poly).count)) &- 1)
        while (i >= 0) {
            result = Double(((result * x) + Double(_idx(poly, i))))
            i = _int((i &- 1))
        }
        return result
    }
    func test_polynomial_evaluation() {
        let poly: [Double] = ({
            var _arr: [Double] = []
            _arr = _append(_arr, 0.0)
            _arr = _append(_arr, 0.0)
            _arr = _append(_arr, 5.0)
            _arr = _append(_arr, 9.3)
            _arr = _append(_arr, 7.0)
            return _arr
        }() as! [Double])
        let x = 10.0
        if (Double(evaluate_poly((poly as! [Double]), Double(x))) != 79800.0) {
            _ = fatalError("evaluate_poly failed")
        }
        if (Double(horner((poly as! [Double]), Double(x))) != 79800.0) {
            _ = fatalError("horner failed")
        }
    }
    func main() {
        _ = test_polynomial_evaluation()
        let poly: [Double] = ({
            var _arr: [Double] = []
            _arr = _append(_arr, 0.0)
            _arr = _append(_arr, 0.0)
            _arr = _append(_arr, 5.0)
            _arr = _append(_arr, 9.3)
            _arr = _append(_arr, 7.0)
            return _arr
        }() as! [Double])
        let x = 10.0
        print(_p(Double(evaluate_poly((poly as! [Double]), Double(x)))))
        print(_p(Double(horner((poly as! [Double]), Double(x)))))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
