// Generated by Mochi transpiler v0.10.67 on 2025-08-17 12:20:09 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.isNaN || d.isInfinite {
                return String(d)
            }
            if d.rounded(.towardZero) == d {
                // avoid overflow when converting to Int64
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _num(_ v: Any) -> Double {
    if let d = v as? Double { return d }
    if let i = v as? Int { return Double(i) }
    if let i = v as? Int64 { return Double(i) }
    return 0
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first!
}
func _idx<K: Hashable, V>(_ m: [K: V], _ k: K) -> V? {
    return m[k]
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func assign_ranks(_ data: [Double]) -> [Int] {
        var ranks: [Int] = ([] as! [Int])
        let n = _int(((data).count))
        var i = 0
        while (i < n) {
            var rank = 1
            var j = 0
            while (j < n) {
                if (((_num(_idx(data, j)) < _num(_idx(data, i))) || ((_num(_idx(data, j)) == _num(_idx(data, i))) && (j < i)))) {
                    rank = _int((rank &+ 1))
                }
                j = _int((j &+ 1))
            }
            ranks = (_append(ranks, rank) as! [Int])
            i = _int((i &+ 1))
        }
        return ranks
    }
    func calculate_spearman_rank_correlation(_ var1: [Double], _ var2: [Double]) -> Double {
        if ((_int(((var1).count)) != _int(((var2).count)))) {
            _ = fatalError("Lists must have equal length")
        }
        let n = _int(((var1).count))
        let rank1: [Int] = (assign_ranks((var1 as! [Double])) as! [Int])
        let rank2: [Int] = (assign_ranks((var2 as! [Double])) as! [Int])
        var i = 0
        var d_sq: Double = 0.0
        while (i < n) {
            let diff = _num(((_idx(rank1, i) as? Int ?? 0) &- (_idx(rank2, i) as? Int ?? 0)))
            d_sq = _num((d_sq + (diff * diff)))
            i = _int((i &+ 1))
        }
        let n_f = _num(n)
        return (1.0 - (_num((6.0 * d_sq)) / _num((n_f * _num(((n_f * n_f) - 1.0))))))
    }
    func test_spearman() {
        let x: [Double] = ({
            var _arr: [Double] = []
            _arr = _append(_arr, 1.0)
            _arr = _append(_arr, 2.0)
            _arr = _append(_arr, 3.0)
            _arr = _append(_arr, 4.0)
            _arr = _append(_arr, 5.0)
            return _arr
        }() as! [Double])
        let y_inc: [Double] = ({
            var _arr: [Double] = []
            _arr = _append(_arr, 2.0)
            _arr = _append(_arr, 4.0)
            _arr = _append(_arr, 6.0)
            _arr = _append(_arr, 8.0)
            _arr = _append(_arr, 10.0)
            return _arr
        }() as! [Double])
        if ((_num(calculate_spearman_rank_correlation((x as! [Double]), (y_inc as! [Double]))) != 1.0)) {
            _ = fatalError("case1")
        }
        let y_dec: [Double] = ({
            var _arr: [Double] = []
            _arr = _append(_arr, 5.0)
            _arr = _append(_arr, 4.0)
            _arr = _append(_arr, 3.0)
            _arr = _append(_arr, 2.0)
            _arr = _append(_arr, 1.0)
            return _arr
        }() as! [Double])
        if ((_num(calculate_spearman_rank_correlation((x as! [Double]), (y_dec as! [Double]))) != _num(-1.0))) {
            _ = fatalError("case2")
        }
        let y_mix: [Double] = ({
            var _arr: [Double] = []
            _arr = _append(_arr, 5.0)
            _arr = _append(_arr, 1.0)
            _arr = _append(_arr, 2.0)
            _arr = _append(_arr, 9.0)
            _arr = _append(_arr, 5.0)
            return _arr
        }() as! [Double])
        if ((_num(calculate_spearman_rank_correlation((x as! [Double]), (y_mix as! [Double]))) != 0.6)) {
            _ = fatalError("case3")
        }
    }
    func main() {
        _ = test_spearman()
        print(_p(_p(_num(calculate_spearman_rank_correlation(({
            var _arr: [Double] = []
            _arr = _append(_arr, 1.0)
            _arr = _append(_arr, 2.0)
            _arr = _append(_arr, 3.0)
            _arr = _append(_arr, 4.0)
            _arr = _append(_arr, 5.0)
            return _arr
        }() as! [Double]), ({
            var _arr: [Double] = []
            _arr = _append(_arr, 2.0)
            _arr = _append(_arr, 4.0)
            _arr = _append(_arr, 6.0)
            _arr = _append(_arr, 8.0)
            _arr = _append(_arr, 10.0)
            return _arr
        }() as! [Double]))))))
        print(_p(_p(_num(calculate_spearman_rank_correlation(({
            var _arr: [Double] = []
            _arr = _append(_arr, 1.0)
            _arr = _append(_arr, 2.0)
            _arr = _append(_arr, 3.0)
            _arr = _append(_arr, 4.0)
            _arr = _append(_arr, 5.0)
            return _arr
        }() as! [Double]), ({
            var _arr: [Double] = []
            _arr = _append(_arr, 5.0)
            _arr = _append(_arr, 4.0)
            _arr = _append(_arr, 3.0)
            _arr = _append(_arr, 2.0)
            _arr = _append(_arr, 1.0)
            return _arr
        }() as! [Double]))))))
        print(_p(_p(_num(calculate_spearman_rank_correlation(({
            var _arr: [Double] = []
            _arr = _append(_arr, 1.0)
            _arr = _append(_arr, 2.0)
            _arr = _append(_arr, 3.0)
            _arr = _append(_arr, 4.0)
            _arr = _append(_arr, 5.0)
            return _arr
        }() as! [Double]), ({
            var _arr: [Double] = []
            _arr = _append(_arr, 5.0)
            _arr = _append(_arr, 1.0)
            _arr = _append(_arr, 2.0)
            _arr = _append(_arr, 9.0)
            _arr = _append(_arr, 5.0)
            return _arr
        }() as! [Double]))))))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
