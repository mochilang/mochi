// Generated by Mochi transpiler v0.10.66 on 2025-08-16 13:06:54 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first!
}
func _idx<K: Hashable, V>(_ m: [K: V], _ k: K) -> V? {
    return m[k]
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
struct Complex: Codable {
    var re: Double
    var im: Double
    init() {
        self.re = 0
        self.im = 0
    }
    init(re: Double, im: Double) {
        self.re = re
        self.im = im
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func add(_ a: Complex, _ b: Complex) -> Complex {
        return Complex(re: Double((a.re + b.re)), im: Double((a.im + b.im)))
    }
    func sub(_ a: Complex, _ b: Complex) -> Complex {
        return Complex(re: Double((a.re - b.re)), im: Double((a.im - b.im)))
    }
    func div_real(_ a: Complex, _ r: Double) -> Complex {
        return Complex(re: Double((a.re / r)), im: Double((a.im / r)))
    }
    func sqrt_newton(_ x: Double) -> Double {
        if (x <= 0.0) {
            return 0.0
        }
        var guess = (x / 2.0)
        var i = 0
        while (i < 20) {
            guess = Double((Double((guess + (x / guess))) / 2.0))
            i = _int((i &+ 1))
        }
        return guess
    }
    func sqrt_to_complex(_ d: Double) -> Complex {
        if (d >= 0.0) {
            return Complex(re: Double(sqrt_newton(Double(d))), im: 0.0)
        }
        return Complex(re: 0.0, im: Double(sqrt_newton(Double(-d))))
    }
    func quadratic_roots(_ a: Double, _ b: Double, _ c: Double) -> [Complex] {
        if (a == 0.0) {
            print(_p("ValueError: coefficient 'a' must not be zero"))
            return ([] as! [Complex])
        }
        let delta = ((b * b) - ((4.0 * a) * c))
        let sqrt_d = sqrt_to_complex(Double(delta))
        let minus_b = Complex(re: Double(-b), im: 0.0)
        let two_a = (2.0 * a)
        let root1 = div_real((add((minus_b as! Complex), (sqrt_d as! Complex)) as! Complex), Double(two_a))
        let root2 = div_real((sub((minus_b as! Complex), (sqrt_d as! Complex)) as! Complex), Double(two_a))
        return ({
            var _arr: [Complex] = []
            _arr = _append(_arr, root1)
            _arr = _append(_arr, root2)
            return _arr
        }() as! [Complex])
    }
    func root_str(_ r: Complex) -> String {
        if (r.im == 0.0) {
            return _p(r.re)
        }
        var s = _p(r.re)
        if (r.im >= 0.0) {
            s = ((_p((_p((_p(s) + _p("+"))) + _p(_p(r.im)))) + _p("i")) as! String)
        } else {
            s = ((_p((_p(s) + _p(_p(r.im)))) + _p("i")) as! String)
        }
        return s
    }
    func main() {
        let roots: [Complex] = (quadratic_roots(5.0, 6.0, 1.0) as! [Complex])
        if (_int(((roots).count)) == 2) {
            print(_p((_p((_p((_p("The solutions are: ") + _p(String(describing: root_str((_idx(roots, 0) as! Complex)))))) + _p(" and "))) + _p(String(describing: root_str((_idx(roots, 1) as! Complex)))))))
        }
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
