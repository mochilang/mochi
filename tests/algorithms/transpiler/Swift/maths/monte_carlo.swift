// Generated by Mochi transpiler v0.10.66 on 2025-08-16 13:02:31 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let PI = 3.141592653589793
    var rand_seed: Int = 123456789
    func rand_float() -> Double {
        rand_seed = _int(((_int(((1103515245 &* rand_seed) &+ 12345)) % 2147483648 + 2147483648) % 2147483648))
        return (Double(rand_seed) / 2147483648.0)
    }
    func rand_range(_ min_val: Double, _ max_val: Double) -> Double {
        return ((Double(rand_float()) * Double((max_val - min_val))) + min_val)
    }
    func abs_float(_ x: Double) -> Double {
        if (x < 0.0) {
            return -x
        }
        return x
    }
    func sqrtApprox(_ x: Double) -> Double {
        if (x == 0.0) {
            return 0.0
        }
        var guess = (x / 2.0)
        var i = 0
        while (i < 20) {
            guess = Double((Double((guess + (x / guess))) / 2.0))
            i = _int((i &+ 1))
        }
        return guess
    }
    func pi_estimator(_ iterations: Int) {
        var inside = 0.0
        var i = 0
        while (i < iterations) {
            let x = Double(rand_range(Double(-1.0), 1.0))
            let y = Double(rand_range(Double(-1.0), 1.0))
            if (((x * x) + (y * y)) <= 1.0) {
                inside = Double((inside + 1.0))
            }
            i = _int((i &+ 1))
        }
        let proportion = (inside / Double(iterations))
        let pi_estimate = (proportion * 4.0)
        print(_p("The estimated value of pi is"), _p(pi_estimate))
        print(_p("The numpy value of pi is"), _p(PI))
        print(_p("The total error is"), _p(Double(abs_float(Double((PI - pi_estimate))))))
    }
    func area_under_curve_estimator(_ iterations: Int, _ f: @escaping (Double) -> Double, _ min_value: Double, _ max_value: Double) -> Double {
        var sum = 0.0
        var i = 0
        while (i < iterations) {
            let x = Double(rand_range(Double(min_value), Double(max_value)))
            sum = Double((sum + Double(f(Double(x)))))
            i = _int((i &+ 1))
        }
        let expected = (sum / Double(iterations))
        return (expected * Double((max_value - min_value)))
    }
    func area_under_line_estimator_check(_ iterations: Int, _ min_value: Double, _ max_value: Double) {
        func identity_function(_ x: Double) -> Double {
            return x
        }
        let estimated_value = Double(area_under_curve_estimator(iterations, (identity_function as! (Double) -> Double), Double(min_value), Double(max_value)))
        let expected_value = (Double(((max_value * max_value) - (min_value * min_value))) / 2.0)
        print(_p("******************"))
        print(_p("Estimating area under y=x where x varies from"), _p(min_value))
        print(_p("Estimated value is"), _p(estimated_value))
        print(_p("Expected value is"), _p(expected_value))
        print(_p("Total error is"), _p(Double(abs_float(Double((estimated_value - expected_value))))))
        print(_p("******************"))
    }
    func pi_estimator_using_area_under_curve(_ iterations: Int) {
        func semi_circle(_ x: Double) -> Double {
            let y = (4.0 - (x * x))
            let s = Double(sqrtApprox(Double(y)))
            return s
        }
        let estimated_value = Double(area_under_curve_estimator(iterations, (semi_circle as! (Double) -> Double), 0.0, 2.0))
        print(_p("******************"))
        print(_p("Estimating pi using area_under_curve_estimator"))
        print(_p("Estimated value is"), _p(estimated_value))
        print(_p("Expected value is"), _p(PI))
        print(_p("Total error is"), _p(Double(abs_float(Double((estimated_value - PI))))))
        print(_p("******************"))
    }
    func main() {
        _ = pi_estimator(1000)
        _ = area_under_line_estimator_check(1000, 0.0, 1.0)
        _ = pi_estimator_using_area_under_curve(1000)
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
