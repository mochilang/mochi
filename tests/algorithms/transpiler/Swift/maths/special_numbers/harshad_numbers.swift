// Generated by Mochi transpiler v0.10.66 on 2025-08-16 14:00:24 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func panic(_ msg: String) -> Never {
        fatalError(msg)
    }
    func char_to_value(_ c: String) -> Int {
        let digits = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
        var i = 0
        while (i < _int(((digits).count))) {
            if ((String(Array(digits)[i]) as! String) == c) {
                return i
            }
            i = _int((i &+ 1))
        }
        _ = panic("invalid digit")
    }
    func int_to_base(_ number: Int, _ base: Int) -> String {
        if ((base < 2) || (base > 36)) {
            _ = panic("'base' must be between 2 and 36 inclusive")
        }
        if (number < 0) {
            _ = panic("number must be a positive integer")
        }
        let digits = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
        var n = number
        var result = ""
        while (n > 0) {
            let remainder = ((n % base + base) % base)
            result = ((_p((String(Array(digits)[remainder]) as! String)) + _p(result)) as! String)
            n = _int((n / base))
        }
        if (result == "") {
            result = "0"
        }
        return result
    }
    func base_to_int(_ num_str: String, _ base: Int) -> Int {
        var value = 0
        var i = 0
        while (i < _int(((num_str).count))) {
            let c = (String(Array(num_str)[i]) as! String)
            value = _int(((value &* base) &+ _int(char_to_value((c as! String)))))
            i = _int((i &+ 1))
        }
        return value
    }
    func sum_of_digits(_ num: Int, _ base: Int) -> String {
        if ((base < 2) || (base > 36)) {
            _ = panic("'base' must be between 2 and 36 inclusive")
        }
        let num_str = String(describing: int_to_base(num, base))
        var total = 0
        var i = 0
        while (i < _int(((num_str).count))) {
            let c = (String(Array(num_str)[i]) as! String)
            total = _int((total &+ _int(char_to_value((c as! String)))))
            i = _int((i &+ 1))
        }
        return String(describing: int_to_base(total, base))
    }
    func harshad_numbers_in_base(_ limit: Int, _ base: Int) -> [String] {
        if ((base < 2) || (base > 36)) {
            _ = panic("'base' must be between 2 and 36 inclusive")
        }
        if (limit < 0) {
            return ([] as! [String])
        }
        var numbers: [String] = ([] as! [String])
        var i = 1
        while (i < limit) {
            let s = String(describing: sum_of_digits(i, base))
            let divisor = _int(base_to_int((s as! String), base))
            if (((i % divisor + divisor) % divisor) == 0) {
                numbers = (_append(numbers, String(describing: int_to_base(i, base))) as! [String])
            }
            i = _int((i &+ 1))
        }
        return numbers
    }
    func is_harshad_number_in_base(_ num: Int, _ base: Int) -> Bool {
        if ((base < 2) || (base > 36)) {
            _ = panic("'base' must be between 2 and 36 inclusive")
        }
        if (num < 0) {
            return false
        }
        let n = String(describing: int_to_base(num, base))
        let d = String(describing: sum_of_digits(num, base))
        let n_val = _int(base_to_int((n as! String), base))
        let d_val = _int(base_to_int((d as! String), base))
        return (((n_val % d_val + d_val) % d_val) == 0)
    }
    func main() {
        print(_p(String(describing: int_to_base(0, 21))))
        print(_p(String(describing: int_to_base(23, 2))))
        print(_p(String(describing: int_to_base(58, 5))))
        print(_p(String(describing: int_to_base(167, 16))))
        print(_p(String(describing: sum_of_digits(103, 12))))
        print(_p(String(describing: sum_of_digits(1275, 4))))
        print(_p(String(describing: sum_of_digits(6645, 2))))
        print(_p("[" + (harshad_numbers_in_base(15, 2) as! [String]).map{ if let s = $0 as? String { "\"" + s.replacingOccurrences(of: "\"", with: "\\\"") + "\"" } else { _p($0) } }.joined(separator: ", ") + "]"))
        print(_p("[" + (harshad_numbers_in_base(12, 34) as! [String]).map{ if let s = $0 as? String { "\"" + s.replacingOccurrences(of: "\"", with: "\\\"") + "\"" } else { _p($0) } }.joined(separator: ", ") + "]"))
        print(_p("[" + (harshad_numbers_in_base(12, 4) as! [String]).map{ if let s = $0 as? String { "\"" + s.replacingOccurrences(of: "\"", with: "\\\"") + "\"" } else { _p($0) } }.joined(separator: ", ") + "]"))
        print(_p(is_harshad_number_in_base(18, 10)))
        print(_p(is_harshad_number_in_base(21, 10)))
        print(_p(is_harshad_number_in_base(-21, 5)))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
