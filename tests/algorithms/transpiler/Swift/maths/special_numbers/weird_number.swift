// Generated by Mochi transpiler v0.10.63 on 2025-08-12 08:44:05 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func bubble_sort(_ xs: [Int]) -> [Int] {
        var arr = xs
        var n = _int(((arr).count))
        var i = 0
        while (i < n) {
            var j = 0
            while (j < ((n &- i) &- 1)) {
                if ((_idx(arr, j) as? Int ?? 0) > (_idx(arr, (j &+ 1)) as? Int ?? 0)) {
                    let tmp = (_idx(arr, j) as? Int ?? 0)
                    arr = _set(arr, j, (_idx(arr, (j &+ 1)) as? Int ?? 0))
                    arr = _set(arr, (j &+ 1), Int(tmp))
                }
                j = _int((j &+ 1))
            }
            i = _int((i &+ 1))
        }
        return arr
    }
    func factors(_ num: Int) -> [Int] {
        var values: [Int] = ({
            var _arr: [Int] = []
            _arr = _append(_arr, 1)
            return _arr
        }() as! [Int])
        var i = 2
        while ((i &* i) <= num) {
            if (((num % i + i) % i) == 0) {
                values = (_append(values, i) as! [Int])
                let d = (num / i)
                if (d != i) {
                    values = (_append(values, d) as! [Int])
                }
            }
            i = _int((i &+ 1))
        }
        return (bubble_sort((values as! [Int])) as! [Int])
    }
    func sum_list(_ xs: [Int]) -> Int {
        var total = 0
        var i = 0
        while (i < _int(((xs).count))) {
            total = _int((total &+ (_idx(xs, i) as? Int ?? 0)))
            i = _int((i &+ 1))
        }
        return total
    }
    func abundant(_ n: Int) -> Bool {
        return (_int(sum_list((factors(n) as! [Int]))) > n)
    }
    func semi_perfect(_ number: Int) -> Bool {
        if (number <= 0) {
            return true
        }
        let values: [Int] = (factors(number) as! [Int])
        var possible: [Bool] = ([] as! [Bool])
        var j = 0
        while (j <= number) {
            possible = (_append(possible, (j == 0)) as! [Bool])
            j = _int((j &+ 1))
        }
        var idx = 0
        while (idx < _int(((values).count))) {
            let v = (_idx(values, idx) as? Int ?? 0)
            var s = number
            while (s >= v) {
                if (_idx(possible, (s &- v)) as! Bool) {
                    possible = _set(possible, s, true)
                }
                s = _int((s &- 1))
            }
            idx = _int((idx &+ 1))
        }
        return (_idx(possible, number) as! Bool)
    }
    func weird(_ number: Int) -> Bool {
        return (abundant(number) && (semi_perfect(number) == false))
    }
    func run_tests() {
        if ((factors(12) as! [Int]) != ({
            var _arr: [Int] = []
            _arr = _append(_arr, 1)
            _arr = _append(_arr, 2)
            _arr = _append(_arr, 3)
            _arr = _append(_arr, 4)
            _arr = _append(_arr, 6)
            return _arr
        }() as! [Int])) {
            _ = fatalError("factors 12 failed")
        }
        if ((factors(1) as! [Int]) != ({
            var _arr: [Int] = []
            _arr = _append(_arr, 1)
            return _arr
        }() as! [Int])) {
            _ = fatalError("factors 1 failed")
        }
        if ((factors(100) as! [Int]) != ({
            var _arr: [Int] = []
            _arr = _append(_arr, 1)
            _arr = _append(_arr, 2)
            _arr = _append(_arr, 4)
            _arr = _append(_arr, 5)
            _arr = _append(_arr, 10)
            _arr = _append(_arr, 20)
            _arr = _append(_arr, 25)
            _arr = _append(_arr, 50)
            return _arr
        }() as! [Int])) {
            _ = fatalError("factors 100 failed")
        }
        if (abundant(0) != true) {
            _ = fatalError("abundant 0 failed")
        }
        if (abundant(1) != false) {
            _ = fatalError("abundant 1 failed")
        }
        if (abundant(12) != true) {
            _ = fatalError("abundant 12 failed")
        }
        if (abundant(13) != false) {
            _ = fatalError("abundant 13 failed")
        }
        if (abundant(20) != true) {
            _ = fatalError("abundant 20 failed")
        }
        if (semi_perfect(0) != true) {
            _ = fatalError("semi_perfect 0 failed")
        }
        if (semi_perfect(1) != true) {
            _ = fatalError("semi_perfect 1 failed")
        }
        if (semi_perfect(12) != true) {
            _ = fatalError("semi_perfect 12 failed")
        }
        if (semi_perfect(13) != false) {
            _ = fatalError("semi_perfect 13 failed")
        }
        if (weird(0) != false) {
            _ = fatalError("weird 0 failed")
        }
        if (weird(70) != true) {
            _ = fatalError("weird 70 failed")
        }
        if (weird(77) != false) {
            _ = fatalError("weird 77 failed")
        }
    }
    func main() {
        _ = run_tests()
        let nums: [Int] = ({
            var _arr: [Int] = []
            _arr = _append(_arr, 69)
            _arr = _append(_arr, 70)
            _arr = _append(_arr, 71)
            return _arr
        }() as! [Int])
        var i = 0
        while (i < _int(((nums).count))) {
            let n = (_idx(nums, i) as? Int ?? 0)
            if weird(n) {
                print(_p((_p(n) + " is weird.")))
            } else {
                print(_p((_p(n) + " is not weird.")))
            }
            i = _int((i &+ 1))
        }
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
