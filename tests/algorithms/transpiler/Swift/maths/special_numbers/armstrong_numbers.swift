// Generated by Mochi transpiler v0.10.67 on 2025-08-17 12:20:11 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.isNaN || d.isInfinite {
                return String(d)
            }
            if d.rounded(.towardZero) == d {
                // avoid overflow when converting to Int64
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _num(_ v: Any) -> Double {
    if let d = v as? Double { return d }
    if let i = v as? Int { return Double(i) }
    if let i = v as? Int64 { return Double(i) }
    return 0
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first!
}
func _idx<K: Hashable, V>(_ m: [K: V], _ k: K) -> V? {
    return m[k]
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func pow_int(_ base: Int, _ exp: Int) -> Int {
        var result = 1
        var i = 0
        while (i < exp) {
            result = _int((result &* base))
            i = _int((i &+ 1))
        }
        return result
    }
    func armstrong_number(_ n: Int) -> Bool {
        if ((n < 1)) {
            return false
        }
        var digits = 0
        var temp = n
        while (temp > 0) {
            temp = _int((temp / 10))
            digits = _int((digits &+ 1))
        }
        var total = 0
        temp = Int(n)
        while (temp > 0) {
            let rem = ((temp % 10 + 10) % 10)
            total = _int((total &+ _int(pow_int(rem, digits))))
            temp = _int((temp / 10))
        }
        return (total == n)
    }
    func pluperfect_number(_ n: Int) -> Bool {
        if ((n < 1)) {
            return false
        }
        var digit_histogram: [Int] = ([] as! [Int])
        var i = 0
        while (i < 10) {
            digit_histogram = (_append(digit_histogram, 0) as! [Int])
            i = _int((i &+ 1))
        }
        var digit_total = 0
        var temp = n
        while (temp > 0) {
            let rem = ((temp % 10 + 10) % 10)
            digit_histogram = _set(digit_histogram, rem, { let _tmp0 = _int(((_idx(digit_histogram, rem) as? Int ?? 0) &+ 1)); return _tmp0 }())
            digit_total = _int((digit_total &+ 1))
            temp = _int((temp / 10))
        }
        var total = 0
        i = 0
        while (i < 10) {
            if (((_idx(digit_histogram, i) as? Int ?? 0) > 0)) {
                total = _int((total &+ ((_idx(digit_histogram, i) as? Int ?? 0) &* _int(pow_int(i, digit_total)))))
            }
            i = _int((i &+ 1))
        }
        return (total == n)
    }
    func narcissistic_number(_ n: Int) -> Bool {
        if ((n < 1)) {
            return false
        }
        var digits = 0
        var temp = n
        while (temp > 0) {
            temp = _int((temp / 10))
            digits = _int((digits &+ 1))
        }
        temp = Int(n)
        var total = 0
        while (temp > 0) {
            let rem = ((temp % 10 + 10) % 10)
            total = _int((total &+ _int(pow_int(rem, digits))))
            temp = _int((temp / 10))
        }
        return (total == n)
    }
    print(_p(armstrong_number(371)))
    print(_p(armstrong_number(200)))
    print(_p(pluperfect_number(371)))
    print(_p(pluperfect_number(200)))
    print(_p(narcissistic_number(371)))
    print(_p(narcissistic_number(200)))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
