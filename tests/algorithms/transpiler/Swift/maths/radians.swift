// Generated by Mochi transpiler v0.10.67 on 2025-08-17 12:19:18 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.isNaN || d.isInfinite {
                return String(d)
            }
            if d.rounded(.towardZero) == d {
                // avoid overflow when converting to Int64
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _num(_ v: Any) -> Double {
    if let d = v as? Double { return d }
    if let i = v as? Int { return Double(i) }
    if let i = v as? Int64 { return Double(i) }
    return 0
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let PI = 3.141592653589793
    func radians(_ degree: Double) -> Double {
        return (degree / _num((180.0 / PI)))
    }
    func abs_float(_ x: Double) -> Double {
        if ((x < 0.0)) {
            return -x
        }
        return x
    }
    func almost_equal(_ a: Double, _ b: Double) -> Bool {
        return (_num(abs_float(_num((a - b)))) <= 0.00000001)
    }
    func test_radians() {
        if ((!almost_equal(_num(radians(180.0)), _num(PI)))) {
            _ = fatalError("radians 180 failed")
        }
        if ((!almost_equal(_num(radians(92.0)), 1.6057029118347832))) {
            _ = fatalError("radians 92 failed")
        }
        if ((!almost_equal(_num(radians(274.0)), 4.782202150464463))) {
            _ = fatalError("radians 274 failed")
        }
        if ((!almost_equal(_num(radians(109.82)), 1.9167205845401725))) {
            _ = fatalError("radians 109.82 failed")
        }
    }
    func main() {
        _ = test_radians()
        print(_p(_p(_num(radians(180.0)))))
        print(_p(_p(_num(radians(92.0)))))
        print(_p(_p(_num(radians(274.0)))))
        print(_p(_p(_num(radians(109.82)))))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
