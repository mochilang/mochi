// Generated by Mochi transpiler v0.10.66 on 2025-08-16 12:42:16 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _idx<K: Hashable, V>(_ m: [K: V], _ k: K) -> V? {
    return m[k]
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func sqrt(_ x: Double) -> Double {
        if (x <= 0.0) {
            return 0.0
        }
        var guess = x
        var i = 0
        while (i < 10) {
            guess = Double((Double((guess + (x / guess))) / 2.0))
            i = _int((i &+ 1))
        }
        return guess
    }
    func powf(_ x: Double, _ n: Int) -> Double {
        var res = 1.0
        var i = 0
        while (i < n) {
            res = Double((res * x))
            i = _int((i &+ 1))
        }
        return res
    }
    func roundf(_ x: Double) -> Int {
        if (x >= 0.0) {
            return _int((x + 0.5))
        }
        return _int((x - 0.5))
    }
    func fib_iterative(_ n: Int) -> [Int] {
        if (n < 0) {
            _ = fatalError("n is negative")
        }
        if (n == 0) {
            return ({
                var _arr: [Int] = []
                _arr = _append(_arr, 0)
                return _arr
            }() as! [Int])
        }
        var fib: [Int] = ({
            var _arr: [Int] = []
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 1)
            return _arr
        }() as! [Int])
        var i = 2
        while (i <= n) {
            fib = (_append(fib, ((_idx(fib, (i &- 1)) as? Int ?? 0) &+ (_idx(fib, (i &- 2)) as? Int ?? 0))) as! [Int])
            i = _int((i &+ 1))
        }
        return fib
    }
    func fib_recursive_term(_ i: Int) -> Int {
        if (i < 0) {
            _ = fatalError("n is negative")
        }
        if (i < 2) {
            return i
        }
        return (_int(fib_recursive_term((i &- 1))) &+ _int(fib_recursive_term((i &- 2))))
    }
    func fib_recursive(_ n: Int) -> [Int] {
        if (n < 0) {
            _ = fatalError("n is negative")
        }
        var res: [Int] = ([] as! [Int])
        var i = 0
        while (i <= n) {
            res = (_append(res, _int(fib_recursive_term(i))) as! [Int])
            i = _int((i &+ 1))
        }
        return res
    }
    var fib_cache_global: [Int: Int] = ([:] as! [Int: Int])
    func fib_recursive_cached_term(_ i: Int) -> Int {
        if (i < 0) {
            _ = fatalError("n is negative")
        }
        if (i < 2) {
            return i
        }
        if (fib_cache_global[i] != nil) {
            return ((fib_cache_global[i] ?? 0) as? Int ?? 0)
        }
        let val = (_int(fib_recursive_cached_term((i &- 1))) &+ _int(fib_recursive_cached_term((i &- 2))))
        fib_cache_global = _set(fib_cache_global, i, Int(val))
        return val
    }
    func fib_recursive_cached(_ n: Int) -> [Int] {
        if (n < 0) {
            _ = fatalError("n is negative")
        }
        var res: [Int] = ([] as! [Int])
        var j = 0
        while (j <= n) {
            res = (_append(res, _int(fib_recursive_cached_term(j))) as! [Int])
            j = _int((j &+ 1))
        }
        return res
    }
    var fib_memo_cache: [Int: Int] = ([0: 0, 1: 1, 2: 1] as! [Int: Int])
    func fib_memoization_term(_ num: Int) -> Int {
        if (fib_memo_cache[num] != nil) {
            return ((fib_memo_cache[num] ?? 0) as? Int ?? 0)
        }
        let value = (_int(fib_memoization_term((num &- 1))) &+ _int(fib_memoization_term((num &- 2))))
        fib_memo_cache = _set(fib_memo_cache, num, Int(value))
        return value
    }
    func fib_memoization(_ n: Int) -> [Int] {
        if (n < 0) {
            _ = fatalError("n is negative")
        }
        var out: [Int] = ([] as! [Int])
        var i = 0
        while (i <= n) {
            out = (_append(out, _int(fib_memoization_term(i))) as! [Int])
            i = _int((i &+ 1))
        }
        return out
    }
    func fib_binet(_ n: Int) -> [Int] {
        if (n < 0) {
            _ = fatalError("n is negative")
        }
        if (n >= 1475) {
            _ = fatalError("n is too large")
        }
        let sqrt5 = Double(sqrt(5.0))
        let phi = (Double((1.0 + sqrt5)) / 2.0)
        var res: [Int] = ([] as! [Int])
        var i = 0
        while (i <= n) {
            let val = _int(roundf(Double((Double(powf(Double(phi), i)) / sqrt5))))
            res = (_append(res, val) as! [Int])
            i = _int((i &+ 1))
        }
        return res
    }
    func matrix_mul(_ a: [[Int]], _ b: [[Int]]) -> [[Int]] {
        let a00 = (((_idx(_idx(a, 0)!, 0) as? Int ?? 0) &* (_idx(_idx(b, 0)!, 0) as? Int ?? 0)) &+ ((_idx(_idx(a, 0)!, 1) as? Int ?? 0) &* (_idx(_idx(b, 1)!, 0) as? Int ?? 0)))
        let a01 = (((_idx(_idx(a, 0)!, 0) as? Int ?? 0) &* (_idx(_idx(b, 0)!, 1) as? Int ?? 0)) &+ ((_idx(_idx(a, 0)!, 1) as? Int ?? 0) &* (_idx(_idx(b, 1)!, 1) as? Int ?? 0)))
        let a10 = (((_idx(_idx(a, 1)!, 0) as? Int ?? 0) &* (_idx(_idx(b, 0)!, 0) as? Int ?? 0)) &+ ((_idx(_idx(a, 1)!, 1) as? Int ?? 0) &* (_idx(_idx(b, 1)!, 0) as? Int ?? 0)))
        let a11 = (((_idx(_idx(a, 1)!, 0) as? Int ?? 0) &* (_idx(_idx(b, 0)!, 1) as? Int ?? 0)) &+ ((_idx(_idx(a, 1)!, 1) as? Int ?? 0) &* (_idx(_idx(b, 1)!, 1) as? Int ?? 0)))
        return ({
            var _arr: [[Int]] = []
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, a00)
                _arr = _append(_arr, a01)
                return _arr
            }() as! [Int]))
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, a10)
                _arr = _append(_arr, a11)
                return _arr
            }() as! [Int]))
            return _arr
        }() as! [[Int]])
    }
    func matrix_pow(_ m: [[Int]], _ power: Int) -> [[Int]] {
        if (power < 0) {
            _ = fatalError("power is negative")
        }
        var result: [[Int]] = ({
            var _arr: [[Int]] = []
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 1)
                _arr = _append(_arr, 0)
                return _arr
            }() as! [Int]))
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 0)
                _arr = _append(_arr, 1)
                return _arr
            }() as! [Int]))
            return _arr
        }() as! [[Int]])
        var base = m
        var p = power
        while (p > 0) {
            if (((p % 2 + 2) % 2) == 1) {
                result = (matrix_mul((result as! [[Int]]), (base as! [[Int]])) as! [[Int]])
            }
            base = (matrix_mul((base as! [[Int]]), (base as! [[Int]])) as! [[Int]])
            p = _int(_int((p / 2)))
        }
        return result
    }
    func fib_matrix(_ n: Int) -> Int {
        if (n < 0) {
            _ = fatalError("n is negative")
        }
        if (n == 0) {
            return 0
        }
        let m: [[Int]] = ({
            var _arr: [[Int]] = []
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 1)
                _arr = _append(_arr, 1)
                return _arr
            }() as! [Int]))
            _arr = _append(_arr, ({
                var _arr: [Int] = []
                _arr = _append(_arr, 1)
                _arr = _append(_arr, 0)
                return _arr
            }() as! [Int]))
            return _arr
        }() as! [[Int]])
        let res: [[Int]] = (matrix_pow((m as! [[Int]]), (n &- 1)) as! [[Int]])
        return (_idx(_idx(res, 0)!, 0) as? Int ?? 0)
    }
    func run_tests() -> Int {
        let expected: [Int] = ({
            var _arr: [Int] = []
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 1)
            _arr = _append(_arr, 1)
            _arr = _append(_arr, 2)
            _arr = _append(_arr, 3)
            _arr = _append(_arr, 5)
            _arr = _append(_arr, 8)
            _arr = _append(_arr, 13)
            _arr = _append(_arr, 21)
            _arr = _append(_arr, 34)
            _arr = _append(_arr, 55)
            return _arr
        }() as! [Int])
        let it: [Int] = (fib_iterative(10) as! [Int])
        let rec: [Int] = (fib_recursive(10) as! [Int])
        let cache: [Int] = (fib_recursive_cached(10) as! [Int])
        let memo: [Int] = (fib_memoization(10) as! [Int])
        let bin: [Int] = (fib_binet(10) as! [Int])
        let m = _int(fib_matrix(10))
        if (it != expected) {
            _ = fatalError("iterative failed")
        }
        if (rec != expected) {
            _ = fatalError("recursive failed")
        }
        if (cache != expected) {
            _ = fatalError("cached failed")
        }
        if (memo != expected) {
            _ = fatalError("memoization failed")
        }
        if (bin != expected) {
            _ = fatalError("binet failed")
        }
        if (m != 55) {
            _ = fatalError("matrix failed")
        }
        return m
    }
    print(_p(_p(_int(run_tests()))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
