// Generated by Mochi transpiler v0.10.67 on 2025-08-17 12:18:56 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.isNaN || d.isInfinite {
                return String(d)
            }
            if d.rounded(.towardZero) == d {
                // avoid overflow when converting to Int64
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _num(_ v: Any) -> Double {
    if let d = v as? Double { return d }
    if let i = v as? Int { return Double(i) }
    if let i = v as? Int64 { return Double(i) }
    return 0
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first!
}
func _idx<K: Hashable, V>(_ m: [K: V], _ k: K) -> V? {
    return m[k]
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func prime_factors(_ n: Int) -> [Int] {
        if ((n < 2)) {
            return ([] as! [Int])
        }
        var num = n
        var i = 2
        var factors: [Int] = ([] as! [Int])
        while ((i &* i) <= num) {
            if ((((num % i + i) % i) == 0)) {
                factors = (_append(factors, i) as! [Int])
                num = _int((num / i))
            } else {
                i = _int((i &+ 1))
            }
        }
        if ((num > 1)) {
            factors = (_append(factors, num) as! [Int])
        }
        return factors
    }
    func list_eq(_ a: [Int], _ b: [Int]) -> Bool {
        if ((_int(((a).count)) != _int(((b).count)))) {
            return false
        }
        var i = 0
        while (i < _int(((a).count))) {
            if (((_idx(a, i) as? Int ?? 0) != (_idx(b, i) as? Int ?? 0))) {
                return false
            }
            i = _int((i &+ 1))
        }
        return true
    }
    func test_prime_factors() {
        if ((!list_eq((prime_factors(0) as! [Int]), ([] as! [Int])))) {
            _ = fatalError("prime_factors(0) failed")
        }
        if ((!list_eq((prime_factors(100) as! [Int]), ({
            var _arr: [Int] = []
            _arr = _append(_arr, 2)
            _arr = _append(_arr, 2)
            _arr = _append(_arr, 5)
            _arr = _append(_arr, 5)
            return _arr
        }() as! [Int])))) {
            _ = fatalError("prime_factors(100) failed")
        }
        if ((!list_eq((prime_factors(2560) as! [Int]), ({
            var _arr: [Int] = []
            _arr = _append(_arr, 2)
            _arr = _append(_arr, 2)
            _arr = _append(_arr, 2)
            _arr = _append(_arr, 2)
            _arr = _append(_arr, 2)
            _arr = _append(_arr, 2)
            _arr = _append(_arr, 2)
            _arr = _append(_arr, 2)
            _arr = _append(_arr, 2)
            _arr = _append(_arr, 5)
            return _arr
        }() as! [Int])))) {
            _ = fatalError("prime_factors(2560) failed")
        }
        if ((!list_eq((prime_factors(97) as! [Int]), ({
            var _arr: [Int] = []
            _arr = _append(_arr, 97)
            return _arr
        }() as! [Int])))) {
            _ = fatalError("prime_factors(97) failed")
        }
    }
    func main() {
        _ = test_prime_factors()
        print(_p("[" + (prime_factors(100) as! [Int]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
        print(_p("[" + (prime_factors(2560) as! [Int]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
        print(_p("[" + (prime_factors(97) as! [Int]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
