// Generated by Mochi transpiler v0.10.63 on 2025-08-12 08:03:03 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func is_prime(_ n: Int) -> Bool {
        if (n <= 1) {
            return false
        }
        if (n <= 3) {
            return true
        }
        if (((n % 2 + 2) % 2) == 0) {
            return false
        }
        var i = 3
        while ((i &* i) <= n) {
            if (((n % i + i) % i) == 0) {
                return false
            }
            i = _int((i &+ 2))
        }
        return true
    }
    func is_germain_prime(_ number: Int) -> Bool {
        if (number < 1) {
            _ = fatalError("Input value must be a positive integer")
        }
        return (is_prime(number) && is_prime(((2 &* number) &+ 1)))
    }
    func is_safe_prime(_ number: Int) -> Bool {
        if (number < 1) {
            _ = fatalError("Input value must be a positive integer")
        }
        if (((_int((number &- 1)) % 2 + 2) % 2) != 0) {
            return false
        }
        return (is_prime(number) && is_prime((_int((number &- 1)) / 2)))
    }
    func test_is_germain_prime() {
        if (!is_germain_prime(3)) {
            _ = fatalError("is_germain_prime(3) failed")
        }
        if (!is_germain_prime(11)) {
            _ = fatalError("is_germain_prime(11) failed")
        }
        if is_germain_prime(4) {
            _ = fatalError("is_germain_prime(4) failed")
        }
        if (!is_germain_prime(23)) {
            _ = fatalError("is_germain_prime(23) failed")
        }
        if is_germain_prime(13) {
            _ = fatalError("is_germain_prime(13) failed")
        }
        if is_germain_prime(20) {
            _ = fatalError("is_germain_prime(20) failed")
        }
    }
    func test_is_safe_prime() {
        if (!is_safe_prime(5)) {
            _ = fatalError("is_safe_prime(5) failed")
        }
        if (!is_safe_prime(11)) {
            _ = fatalError("is_safe_prime(11) failed")
        }
        if is_safe_prime(1) {
            _ = fatalError("is_safe_prime(1) failed")
        }
        if is_safe_prime(2) {
            _ = fatalError("is_safe_prime(2) failed")
        }
        if is_safe_prime(3) {
            _ = fatalError("is_safe_prime(3) failed")
        }
        if (!is_safe_prime(47)) {
            _ = fatalError("is_safe_prime(47) failed")
        }
    }
    func main() {
        _ = test_is_germain_prime()
        _ = test_is_safe_prime()
        print(_p(is_germain_prime(23)))
        print(_p(is_safe_prime(47)))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
