// Generated by Mochi transpiler v0.10.63 on 2025-08-11 16:25:23 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _concat<T>(_ a: [T], _ b: [T]) -> [T] {
    var out = a
    out.append(contentsOf: b)
    return out
}
func _slice<T>(_ xs: [T], _ start: Int, _ end: Int) -> [T] {
    var s = start
    var e = end
    if s < 0 { s = 0 }
    if e > xs.count { e = xs.count }
    if s > e { s = e }
    return Array(xs[s..<e])
}
struct Process: Codable {
    var process_name: String
    var arrival_time: Int
    var stop_time: Int
    var burst_time: Int
    var waiting_time: Int
    var turnaround_time: Int
    init() {
        self.process_name = ""
        self.arrival_time = 0
        self.stop_time = 0
        self.burst_time = 0
        self.waiting_time = 0
        self.turnaround_time = 0
    }
    init(process_name: String, arrival_time: Int, stop_time: Int, burst_time: Int, waiting_time: Int, turnaround_time: Int) {
        self.process_name = process_name
        self.arrival_time = arrival_time
        self.stop_time = stop_time
        self.burst_time = burst_time
        self.waiting_time = waiting_time
        self.turnaround_time = turnaround_time
    }
}
struct MLFQ: Codable {
    var number_of_queues: Int
    var time_slices: [Int]
    var ready_queue: [Process]
    var current_time: Int
    var finish_queue: [Process]
    init() {
        self.number_of_queues = 0
        self.time_slices = []
        self.ready_queue = []
        self.current_time = 0
        self.finish_queue = []
    }
    init(number_of_queues: Int, time_slices: [Int], ready_queue: [Process], current_time: Int, finish_queue: [Process]) {
        self.number_of_queues = number_of_queues
        self.time_slices = time_slices
        self.ready_queue = ready_queue
        self.current_time = current_time
        self.finish_queue = finish_queue
    }
}
struct RRResult: Codable {
    var finished: [Process]
    var ready: [Process]
    init() {
        self.finished = []
        self.ready = []
    }
    init(finished: [Process], ready: [Process]) {
        self.finished = finished
        self.ready = ready
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func make_process(_ name: String, _ arrival: Int, _ burst: Int) -> Process {
        return Process(process_name: String(describing: name), arrival_time: Int(arrival), stop_time: Int(arrival), burst_time: Int(burst), waiting_time: 0, turnaround_time: 0)
    }
    func make_mlfq(_ nqueues: Int, _ time_slices: [Int], _ queue: [Process], _ current_time: Int) -> MLFQ {
        return MLFQ(number_of_queues: Int(nqueues), time_slices: (time_slices as! [Int]), ready_queue: (queue as! [Process]), current_time: Int(current_time), finish_queue: ([] as! [Process]))
    }
    func calculate_sequence_of_finish_queue(_ mlfq: MLFQ) -> [String] {
        var seq: [String] = ([] as! [String])
        var i = 0
        while (i < _int(((mlfq.finish_queue).count))) {
            let p = (_idx(mlfq.finish_queue, i) as! Process)
            seq = (_append(seq, p.process_name) as! [String])
            i = _int((i &+ 1))
        }
        return seq
    }
    func calculate_waiting_time(_ queue: [Process]) -> [Int] {
        var times: [Int] = ([] as! [Int])
        var i = 0
        while (i < _int(((queue).count))) {
            let p = (_idx(queue, i) as! Process)
            times = (_append(times, p.waiting_time) as! [Int])
            i = _int((i &+ 1))
        }
        return times
    }
    func calculate_turnaround_time(_ queue: [Process]) -> [Int] {
        var times: [Int] = ([] as! [Int])
        var i = 0
        while (i < _int(((queue).count))) {
            let p = (_idx(queue, i) as! Process)
            times = (_append(times, p.turnaround_time) as! [Int])
            i = _int((i &+ 1))
        }
        return times
    }
    func calculate_completion_time(_ queue: [Process]) -> [Int] {
        var times: [Int] = ([] as! [Int])
        var i = 0
        while (i < _int(((queue).count))) {
            let p = (_idx(queue, i) as! Process)
            times = (_append(times, p.stop_time) as! [Int])
            i = _int((i &+ 1))
        }
        return times
    }
    func calculate_remaining_burst_time_of_processes(_ queue: [Process]) -> [Int] {
        var times: [Int] = ([] as! [Int])
        var i = 0
        while (i < _int(((queue).count))) {
            let p = (_idx(queue, i) as! Process)
            times = (_append(times, p.burst_time) as! [Int])
            i = _int((i &+ 1))
        }
        return times
    }
    func update_waiting_time(_ mlfq: MLFQ, _ process: inout Process) -> Int {
        process.waiting_time = _int((process.waiting_time &+ _int((mlfq.current_time &- process.stop_time))))
        return process.waiting_time
    }
    func first_come_first_served(_ mlfq: inout MLFQ, _ ready_queue: [Process]) -> [Process] {
        var finished: [Process] = ([] as! [Process])
        var rq = ready_queue
        while (_int(((rq).count)) != 0) {
            var cp = (_idx(rq, 0) as! Process)
            rq = (_slice(Array(rq), 1, _int(((rq).count))) as! [Process])
            if (mlfq.current_time < cp.arrival_time) {
                mlfq.current_time = _int(cp.arrival_time)
            }
            _ = _int(update_waiting_time((mlfq as! MLFQ), &cp))
            mlfq.current_time = _int((mlfq.current_time &+ cp.burst_time))
            cp.burst_time = 0
            cp.turnaround_time = _int((mlfq.current_time &- cp.arrival_time))
            cp.stop_time = _int(mlfq.current_time)
            finished = (_append(finished, cp) as! [Process])
        }
        mlfq.finish_queue = ((_concat(mlfq.finish_queue, finished) as! [Any?]) as! [Process])
        return finished
    }
    func round_robin(_ mlfq: inout MLFQ, _ ready_queue: [Process], _ time_slice: Int) -> RRResult {
        var finished: [Process] = ([] as! [Process])
        var rq = ready_queue
        var count = _int(((rq).count))
        var i = 0
        while (i < count) {
            var cp = (_idx(rq, 0) as! Process)
            rq = (_slice(Array(rq), 1, _int(((rq).count))) as! [Process])
            if (mlfq.current_time < cp.arrival_time) {
                mlfq.current_time = _int(cp.arrival_time)
            }
            _ = _int(update_waiting_time((mlfq as! MLFQ), &cp))
            if (cp.burst_time > time_slice) {
                mlfq.current_time = _int((mlfq.current_time &+ time_slice))
                cp.burst_time = _int((cp.burst_time &- time_slice))
                cp.stop_time = _int(mlfq.current_time)
                rq = (_append(rq, cp) as! [Process])
            } else {
                mlfq.current_time = _int((mlfq.current_time &+ cp.burst_time))
                cp.burst_time = 0
                cp.stop_time = _int(mlfq.current_time)
                cp.turnaround_time = _int((mlfq.current_time &- cp.arrival_time))
                finished = (_append(finished, cp) as! [Process])
            }
            i = _int((i &+ 1))
        }
        mlfq.finish_queue = ((_concat(mlfq.finish_queue, finished) as! [Any?]) as! [Process])
        return RRResult(finished: (finished as! [Process]), ready: (rq as! [Process]))
    }
    func multi_level_feedback_queue(_ mlfq: inout MLFQ) -> [Process] {
        var i = 0
        while (i < (mlfq.number_of_queues &- 1)) {
            let rr = round_robin(&mlfq, (mlfq.ready_queue as! [Process]), (_idx(mlfq.time_slices, i) as? Int ?? 0))
            mlfq.ready_queue = (rr.ready as! [Process])
            i = _int((i &+ 1))
        }
        _ = (first_come_first_served(&mlfq, (mlfq.ready_queue as! [Process])) as! [Process])
        return mlfq.finish_queue
    }
    let P1 = make_process("P1", 0, 53)
    let P2 = make_process("P2", 0, 17)
    let P3 = make_process("P3", 0, 68)
    let P4 = make_process("P4", 0, 24)
    let number_of_queues = 3
    let time_slices: [Int] = ({
        var _arr: [Int] = []
        _arr = _append(_arr, 17)
        _arr = _append(_arr, 25)
        return _arr
    }() as! [Int])
    let queue: [Process] = ({
        var _arr: [Process] = []
        _arr = _append(_arr, P1)
        _arr = _append(_arr, P2)
        _arr = _append(_arr, P3)
        _arr = _append(_arr, P4)
        return _arr
    }() as! [Process])
    var mlfq = make_mlfq(number_of_queues, (time_slices as! [Int]), (queue as! [Process]), 0)
    let finish_queue: [Process] = (multi_level_feedback_queue(&mlfq) as! [Process])
    print(_p(("waiting time:\t\t\t" + "[" + (calculate_waiting_time(({
        var _arr: [Process] = []
        _arr = _append(_arr, P1)
        _arr = _append(_arr, P2)
        _arr = _append(_arr, P3)
        _arr = _append(_arr, P4)
        return _arr
    }() as! [Process])) as! [Int]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]")))
    print(_p(("completion time:\t\t" + "[" + (calculate_completion_time(({
        var _arr: [Process] = []
        _arr = _append(_arr, P1)
        _arr = _append(_arr, P2)
        _arr = _append(_arr, P3)
        _arr = _append(_arr, P4)
        return _arr
    }() as! [Process])) as! [Int]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]")))
    print(_p(("turnaround time:\t\t" + "[" + (calculate_turnaround_time(({
        var _arr: [Process] = []
        _arr = _append(_arr, P1)
        _arr = _append(_arr, P2)
        _arr = _append(_arr, P3)
        _arr = _append(_arr, P4)
        return _arr
    }() as! [Process])) as! [Int]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]")))
    print(_p(("sequence of finished processes:\t" + "[" + (calculate_sequence_of_finish_queue((mlfq as! MLFQ)) as! [String]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]")))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
