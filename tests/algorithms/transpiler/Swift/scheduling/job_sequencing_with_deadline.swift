// Generated by Mochi transpiler v0.10.63 on 2025-08-11 16:25:21 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
struct Job: Codable {
    var id: Int
    var deadline: Int
    var profit: Int
    init() {
        self.id = 0
        self.deadline = 0
        self.profit = 0
    }
    init(id: Int, deadline: Int, profit: Int) {
        self.id = id
        self.deadline = deadline
        self.profit = profit
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func sort_jobs_by_profit(_ jobs: [Job]) -> [Job] {
        var js = jobs
        var i = 0
        while (i < _int(((js).count))) {
            var j = 0
            while (j < ((_int(((js).count)) &- i) &- 1)) {
                let a = (_idx(js, j) as! Job)
                let b = (_idx(js, (j &+ 1)) as! Job)
                if (a.profit < b.profit) {
                    js = _set(js, j, (b as! Job))
                    js = _set(js, (j &+ 1), (a as! Job))
                }
                j = _int((j &+ 1))
            }
            i = _int((i &+ 1))
        }
        return js
    }
    func max_deadline(_ jobs: [Job]) -> Int {
        var max_d = 0
        var i = 0
        while (i < _int(((jobs).count))) {
            let job = (_idx(jobs, i) as! Job)
            let d = job.deadline
            if (d > max_d) {
                max_d = Int(d)
            }
            i = _int((i &+ 1))
        }
        return max_d
    }
    func job_sequencing_with_deadlines(_ jobs: [Job]) -> [Int] {
        var js = (sort_jobs_by_profit((jobs as! [Job])) as! [Job])
        let max_d = _int(max_deadline((js as! [Job])))
        var time_slots: [Int] = ([] as! [Int])
        var t = 0
        while (t < max_d) {
            time_slots = (_append(time_slots, (0 &- 1)) as! [Int])
            t = _int((t &+ 1))
        }
        var count = 0
        var max_profit = 0
        var i = 0
        while (i < _int(((js).count))) {
            let job = (_idx(js, i) as! Job)
            var j = (job.deadline &- 1)
            while (j >= 0) {
                if ((_idx(time_slots, j) as? Int ?? 0) == (0 &- 1)) {
                    time_slots = _set(time_slots, j, _int(job.id))
                    count = _int((count &+ 1))
                    max_profit = _int((max_profit &+ job.profit))
                    break
                }
                j = _int((j &- 1))
            }
            i = _int((i &+ 1))
        }
        var result: [Int] = ([] as! [Int])
        result = (_append(result, count) as! [Int])
        result = (_append(result, max_profit) as! [Int])
        return result
    }
    var jobs1: [Job] = ([] as! [Job])
    jobs1 = (_append(jobs1, Job(id: 1, deadline: 4, profit: 20)) as! [Job])
    jobs1 = (_append(jobs1, Job(id: 2, deadline: 1, profit: 10)) as! [Job])
    jobs1 = (_append(jobs1, Job(id: 3, deadline: 1, profit: 40)) as! [Job])
    jobs1 = (_append(jobs1, Job(id: 4, deadline: 1, profit: 30)) as! [Job])
    print(_p("[" + (job_sequencing_with_deadlines((jobs1 as! [Job])) as! [Int]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    var jobs2: [Job] = ([] as! [Job])
    jobs2 = (_append(jobs2, Job(id: 1, deadline: 2, profit: 100)) as! [Job])
    jobs2 = (_append(jobs2, Job(id: 2, deadline: 1, profit: 19)) as! [Job])
    jobs2 = (_append(jobs2, Job(id: 3, deadline: 2, profit: 27)) as! [Job])
    jobs2 = (_append(jobs2, Job(id: 4, deadline: 1, profit: 25)) as! [Job])
    jobs2 = (_append(jobs2, Job(id: 5, deadline: 1, profit: 15)) as! [Job])
    print(_p("[" + (job_sequencing_with_deadlines((jobs2 as! [Job])) as! [Int]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
