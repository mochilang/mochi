// Generated by Mochi transpiler v0.10.63 on 2025-08-11 16:25:30 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func calculate_waitingtime(_ arrival_time: [Int], _ burst_time: [Int], _ no_of_processes: Int) -> [Int] {
        var remaining_time: [Int] = ([] as! [Int])
        var i = 0
        while (i < no_of_processes) {
            remaining_time = (_append(remaining_time, (_idx(burst_time, i) as? Int ?? 0)) as! [Int])
            i = _int((i &+ 1))
        }
        var waiting_time: [Int] = ([] as! [Int])
        i = 0
        while (i < no_of_processes) {
            waiting_time = (_append(waiting_time, 0) as! [Int])
            i = _int((i &+ 1))
        }
        var complete = 0
        var increment_time = 0
        var minm = 1000000000
        var short = 0
        var check = false
        while (complete != no_of_processes) {
            var j = 0
            while (j < no_of_processes) {
                if ((((_idx(arrival_time, j) as? Int ?? 0) <= increment_time) && ((_idx(remaining_time, j) as? Int ?? 0) > 0)) && ((_idx(remaining_time, j) as? Int ?? 0) < minm)) {
                    minm = (_idx(remaining_time, j) as? Int ?? 0)
                    short = Int(j)
                    check = true
                }
                j = _int((j &+ 1))
            }
            if (!check) {
                increment_time = _int((increment_time &+ 1))
                continue
            }
            remaining_time = _set(remaining_time, short, _int(((_idx(remaining_time, short) as? Int ?? 0) &- 1)))
            minm = (_idx(remaining_time, short) as? Int ?? 0)
            if (minm == 0) {
                minm = 1000000000
            }
            if ((_idx(remaining_time, short) as? Int ?? 0) == 0) {
                complete = _int((complete &+ 1))
                check = false
                let finish_time = (increment_time &+ 1)
                let finar = (finish_time &- (_idx(arrival_time, short) as? Int ?? 0))
                waiting_time = _set(waiting_time, short, _int((finar &- (_idx(burst_time, short) as? Int ?? 0))))
                if ((_idx(waiting_time, short) as? Int ?? 0) < 0) {
                    waiting_time = _set(waiting_time, short, 0)
                }
            }
            increment_time = _int((increment_time &+ 1))
        }
        return waiting_time
    }
    func calculate_turnaroundtime(_ burst_time: [Int], _ no_of_processes: Int, _ waiting_time: [Int]) -> [Int] {
        var turn_around_time: [Int] = ([] as! [Int])
        var i = 0
        while (i < no_of_processes) {
            turn_around_time = (_append(turn_around_time, ((_idx(burst_time, i) as? Int ?? 0) &+ (_idx(waiting_time, i) as? Int ?? 0))) as! [Int])
            i = _int((i &+ 1))
        }
        return turn_around_time
    }
    func to_float(_ x: Int) -> Double {
        return (Double(x) * 1.0)
    }
    func calculate_average_times(_ waiting_time: [Int], _ turn_around_time: [Int], _ no_of_processes: Int) -> Void {
        var total_waiting_time = 0
        var total_turn_around_time = 0
        var i = 0
        while (i < no_of_processes) {
            total_waiting_time = _int((total_waiting_time &+ (_idx(waiting_time, i) as? Int ?? 0)))
            total_turn_around_time = _int((total_turn_around_time &+ (_idx(turn_around_time, i) as? Int ?? 0)))
            i = _int((i &+ 1))
        }
        let avg_wait = (Double(to_float(total_waiting_time)) / Double(to_float(no_of_processes)))
        let avg_turn = (Double(to_float(total_turn_around_time)) / Double(to_float(no_of_processes)))
        print(_p(("Average waiting time = " + _p(avg_wait))))
        print(_p(("Average turn around time = " + _p(avg_turn))))
    }
    print(_p("[" + (calculate_waitingtime(({
        var _arr: [Int] = []
        _arr = _append(_arr, 1)
        _arr = _append(_arr, 2)
        _arr = _append(_arr, 3)
        _arr = _append(_arr, 4)
        return _arr
    }() as! [Int]), ({
        var _arr: [Int] = []
        _arr = _append(_arr, 3)
        _arr = _append(_arr, 3)
        _arr = _append(_arr, 5)
        _arr = _append(_arr, 1)
        return _arr
    }() as! [Int]), 4) as! [Int]).map{ if let s = $0 as? String { "\"" + s.replacingOccurrences(of: "\"", with: "\\\"") + "\"" } else { _p($0) } }.joined(separator: ", ") + "]"))
    print(_p("[" + (calculate_waitingtime(({
        var _arr: [Int] = []
        _arr = _append(_arr, 1)
        _arr = _append(_arr, 2)
        _arr = _append(_arr, 3)
        return _arr
    }() as! [Int]), ({
        var _arr: [Int] = []
        _arr = _append(_arr, 2)
        _arr = _append(_arr, 5)
        _arr = _append(_arr, 1)
        return _arr
    }() as! [Int]), 3) as! [Int]).map{ if let s = $0 as? String { "\"" + s.replacingOccurrences(of: "\"", with: "\\\"") + "\"" } else { _p($0) } }.joined(separator: ", ") + "]"))
    print(_p("[" + (calculate_waitingtime(({
        var _arr: [Int] = []
        _arr = _append(_arr, 2)
        _arr = _append(_arr, 3)
        return _arr
    }() as! [Int]), ({
        var _arr: [Int] = []
        _arr = _append(_arr, 5)
        _arr = _append(_arr, 1)
        return _arr
    }() as! [Int]), 2) as! [Int]).map{ if let s = $0 as? String { "\"" + s.replacingOccurrences(of: "\"", with: "\\\"") + "\"" } else { _p($0) } }.joined(separator: ", ") + "]"))
    print(_p("[" + (calculate_turnaroundtime(({
        var _arr: [Int] = []
        _arr = _append(_arr, 3)
        _arr = _append(_arr, 3)
        _arr = _append(_arr, 5)
        _arr = _append(_arr, 1)
        return _arr
    }() as! [Int]), 4, ({
        var _arr: [Int] = []
        _arr = _append(_arr, 0)
        _arr = _append(_arr, 3)
        _arr = _append(_arr, 5)
        _arr = _append(_arr, 0)
        return _arr
    }() as! [Int])) as! [Int]).map{ if let s = $0 as? String { "\"" + s.replacingOccurrences(of: "\"", with: "\\\"") + "\"" } else { _p($0) } }.joined(separator: ", ") + "]"))
    print(_p("[" + (calculate_turnaroundtime(({
        var _arr: [Int] = []
        _arr = _append(_arr, 3)
        _arr = _append(_arr, 3)
        return _arr
    }() as! [Int]), 2, ({
        var _arr: [Int] = []
        _arr = _append(_arr, 0)
        _arr = _append(_arr, 3)
        return _arr
    }() as! [Int])) as! [Int]).map{ if let s = $0 as? String { "\"" + s.replacingOccurrences(of: "\"", with: "\\\"") + "\"" } else { _p($0) } }.joined(separator: ", ") + "]"))
    print(_p("[" + (calculate_turnaroundtime(({
        var _arr: [Int] = []
        _arr = _append(_arr, 8)
        _arr = _append(_arr, 10)
        _arr = _append(_arr, 1)
        return _arr
    }() as! [Int]), 3, ({
        var _arr: [Int] = []
        _arr = _append(_arr, 1)
        _arr = _append(_arr, 0)
        _arr = _append(_arr, 3)
        return _arr
    }() as! [Int])) as! [Int]).map{ if let s = $0 as? String { "\"" + s.replacingOccurrences(of: "\"", with: "\\\"") + "\"" } else { _p($0) } }.joined(separator: ", ") + "]"))
    _ = calculate_average_times(({
        var _arr: [Int] = []
        _arr = _append(_arr, 0)
        _arr = _append(_arr, 3)
        _arr = _append(_arr, 5)
        _arr = _append(_arr, 0)
        return _arr
    }() as! [Int]), ({
        var _arr: [Int] = []
        _arr = _append(_arr, 3)
        _arr = _append(_arr, 6)
        _arr = _append(_arr, 10)
        _arr = _append(_arr, 1)
        return _arr
    }() as! [Int]), 4)
    _ = calculate_average_times(({
        var _arr: [Int] = []
        _arr = _append(_arr, 2)
        _arr = _append(_arr, 3)
        return _arr
    }() as! [Int]), ({
        var _arr: [Int] = []
        _arr = _append(_arr, 3)
        _arr = _append(_arr, 6)
        return _arr
    }() as! [Int]), 2)
    _ = calculate_average_times(({
        var _arr: [Int] = []
        _arr = _append(_arr, 10)
        _arr = _append(_arr, 4)
        _arr = _append(_arr, 3)
        return _arr
    }() as! [Int]), ({
        var _arr: [Int] = []
        _arr = _append(_arr, 2)
        _arr = _append(_arr, 7)
        _arr = _append(_arr, 6)
        return _arr
    }() as! [Int]), 3)
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
