// Generated by Mochi transpiler v0.10.63 on 2025-08-11 16:25:28 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func calculate_waiting_times(_ burst_times: [Int]) -> [Int] {
        let quantum = 2
        var rem: [Int] = ([] as! [Int])
        var i = 0
        while (i < _int(((burst_times).count))) {
            rem = (_append(rem, (_idx(burst_times, i) as? Int ?? 0)) as! [Int])
            i = _int((i &+ 1))
        }
        var waiting: [Int] = ([] as! [Int])
        i = 0
        while (i < _int(((burst_times).count))) {
            waiting = (_append(waiting, 0) as! [Int])
            i = _int((i &+ 1))
        }
        var t = 0
        while true {
            var done = true
            var j = 0
            while (j < _int(((burst_times).count))) {
                if ((_idx(rem, j) as? Int ?? 0) > 0) {
                    done = false
                    if ((_idx(rem, j) as? Int ?? 0) > quantum) {
                        t = _int((t &+ quantum))
                        rem = _set(rem, j, _int(((_idx(rem, j) as? Int ?? 0) &- quantum)))
                    } else {
                        t = _int((t &+ (_idx(rem, j) as? Int ?? 0)))
                        waiting = _set(waiting, j, _int((t &- (_idx(burst_times, j) as? Int ?? 0))))
                        rem = _set(rem, j, 0)
                    }
                }
                j = _int((j &+ 1))
            }
            if done {
                return waiting
            }
        }
        return waiting
    }
    func calculate_turn_around_times(_ burst_times: [Int], _ waiting_times: [Int]) -> [Int] {
        var result: [Int] = ([] as! [Int])
        var i = 0
        while (i < _int(((burst_times).count))) {
            result = (_append(result, ((_idx(burst_times, i) as? Int ?? 0) &+ (_idx(waiting_times, i) as? Int ?? 0))) as! [Int])
            i = _int((i &+ 1))
        }
        return result
    }
    func mean(_ values: [Int]) -> Double {
        var total = 0
        var i = 0
        while (i < _int(((values).count))) {
            total = _int((total &+ (_idx(values, i) as? Int ?? 0)))
            i = _int((i &+ 1))
        }
        return (Double(total) / Double(((values).count)))
    }
    func format_float_5(_ x: Double) -> String {
        let scaled = _int(_int(((x * 100000.0) + 0.5)))
        let int_part = (scaled / 100000)
        let frac_part = ((scaled % 100000 + 100000) % 100000)
        var frac_str = _p(frac_part)
        while (_int(((frac_str).count)) < 5) {
            frac_str = (("0" + frac_str) as! String)
        }
        return ((_p(int_part) + ".") + frac_str)
    }
    func main() {
        let burst_times: [Int] = ({
            var _arr: [Int] = []
            _arr = _append(_arr, 3)
            _arr = _append(_arr, 5)
            _arr = _append(_arr, 7)
            return _arr
        }() as! [Int])
        let waiting_times: [Int] = (calculate_waiting_times((burst_times as! [Int])) as! [Int])
        let turn_around_times: [Int] = (calculate_turn_around_times((burst_times as! [Int]), (waiting_times as! [Int])) as! [Int])
        print(_p("Process ID \tBurst Time \tWaiting Time \tTurnaround Time"))
        var i = 0
        while (i < _int(((burst_times).count))) {
            let line = ((((((("  " + _p((i &+ 1))) + "\t\t  ") + _p((_idx(burst_times, i) as? Int ?? 0))) + "\t\t  ") + _p((_idx(waiting_times, i) as? Int ?? 0))) + "\t\t  ") + _p((_idx(turn_around_times, i) as? Int ?? 0)))
            print(_p(line))
            i = _int((i &+ 1))
        }
        print(_p(""))
        print(_p(("Average waiting time = " + String(describing: format_float_5(Double(mean((waiting_times as! [Int]))))))))
        print(_p(("Average turn around time = " + String(describing: format_float_5(Double(mean((turn_around_times as! [Int]))))))))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
