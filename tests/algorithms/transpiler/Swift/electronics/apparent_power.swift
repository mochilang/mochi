// Generated by Mochi transpiler v0.10.61 on 2025-08-08 19:13:04 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let PI: Double = 3.141592653589793
    func abs(_ x: Double) -> Double {
        if (x < 0.0) {
            return -x
        }
        return x
    }
    func to_radians(_ deg: Double) -> Double {
        return ((deg * PI) / 180.0)
    }
    func sin_taylor(_ x: Double) -> Double {
        var term = x
        var sum = x
        var i = 1
        while (i < 10) {
            let k1 = (2.0 * Double(i))
            let k2 = (k1 + 1.0)
            term = Double((((-term * x) * x) / Double((k1 * k2))))
            sum = Double((sum + term))
            i = _int((i &+ 1))
        }
        return sum
    }
    func cos_taylor(_ x: Double) -> Double {
        var term = 1.0
        var sum = 1.0
        var i = 1
        while (i < 10) {
            let k1 = ((2.0 * Double(i)) - 1.0)
            let k2 = (2.0 * Double(i))
            term = Double((((-term * x) * x) / Double((k1 * k2))))
            sum = Double((sum + term))
            i = _int((i &+ 1))
        }
        return sum
    }
    func rect(_ mag: Double, _ angle: Double) -> [Double] {
        let c = Double(cos_taylor(Double(angle)))
        let s = Double(sin_taylor(Double(angle)))
        return ({
            var _arr: [Double] = []
            _arr = _append(_arr, (mag * c))
            _arr = _append(_arr, (mag * s))
            return _arr
        }() as! [Double])
    }
    func multiply(_ a: [Double], _ b: [Double]) -> [Double] {
        return ({
            var _arr: [Double] = []
            _arr = _append(_arr, ((Double(_idx(a, 0)) * Double(_idx(b, 0))) - (Double(_idx(a, 1)) * Double(_idx(b, 1)))))
            _arr = _append(_arr, ((Double(_idx(a, 0)) * Double(_idx(b, 1))) + (Double(_idx(a, 1)) * Double(_idx(b, 0)))))
            return _arr
        }() as! [Double])
    }
    func apparent_power(_ voltage: Double, _ current: Double, _ voltage_angle: Double, _ current_angle: Double) -> [Double] {
        let vrad = Double(to_radians(Double(voltage_angle)))
        let irad = Double(to_radians(Double(current_angle)))
        let vrect: [Double] = (rect(Double(voltage), Double(vrad)) as! [Double])
        let irect: [Double] = (rect(Double(current), Double(irad)) as! [Double])
        let result: [Double] = (multiply((vrect as! [Double]), (irect as! [Double])) as! [Double])
        return result
    }
    func approx_equal(_ a: [Double], _ b: [Double], _ eps: Double) -> Bool {
        return ((Double(abs(Double((Double(_idx(a, 0)) - Double(_idx(b, 0)))))) < eps) && (Double(abs(Double((Double(_idx(a, 1)) - Double(_idx(b, 1)))))) < eps))
    }
    do {
        let s: [Double] = (apparent_power(100.0, 5.0, 0.0, 0.0) as! [Double])
        let expected: [Double] = ({
            var _arr: [Double] = []
            _arr = _append(_arr, 500.0)
            _arr = _append(_arr, 0.0)
            return _arr
        }() as! [Double])
        assert(approx_equal((s as! [Double]), (expected as! [Double]), 0.001))
    }
    do {
        let s: [Double] = (apparent_power(100.0, 5.0, 90.0, 0.0) as! [Double])
        let expected: [Double] = ({
            var _arr: [Double] = []
            _arr = _append(_arr, 0.0)
            _arr = _append(_arr, 500.0)
            return _arr
        }() as! [Double])
        assert(approx_equal((s as! [Double]), (expected as! [Double]), 0.5))
    }
    do {
        let s: [Double] = (apparent_power(100.0, 5.0, Double(-45.0), Double(-60.0)) as! [Double])
        let expected: [Double] = ({
            var _arr: [Double] = []
            _arr = _append(_arr, -129.40952255126027)
            _arr = _append(_arr, -482.9629131445341)
            return _arr
        }() as! [Double])
        assert(approx_equal((s as! [Double]), (expected as! [Double]), 0.001))
    }
    do {
        let s: [Double] = (apparent_power(200.0, 10.0, Double(-30.0), Double(-90.0)) as! [Double])
        let expected: [Double] = ({
            var _arr: [Double] = []
            _arr = _append(_arr, -1000.0)
            _arr = _append(_arr, -1732.0508075688776)
            return _arr
        }() as! [Double])
        assert(approx_equal((s as! [Double]), (expected as! [Double]), 0.001))
    }
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
