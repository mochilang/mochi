// Generated by Mochi transpiler v0.10.64 on 2025-08-13 16:14:15 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _json(_ v: Any) {
    if JSONSerialization.isValidJSONObject(v),
    let data = try? JSONSerialization.data(withJSONObject: v, options: [.sortedKeys, .prettyPrinted]),
    let str = String(data: data, encoding: .utf8) {
        print(str)
    } else {
        print(_p(v))
    }
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func ohms_law(_ voltage: Double, _ current: Double, _ resistance: Double) -> [String: Double] {
        var zeros = 0
        if (voltage == 0.0) {
            zeros = _int((zeros &+ 1))
        }
        if (current == 0.0) {
            zeros = _int((zeros &+ 1))
        }
        if (resistance == 0.0) {
            zeros = _int((zeros &+ 1))
        }
        if (zeros != 1) {
            print(_p("One and only one argument must be 0"))
            return ([:] as! [String: Double])
        }
        if (resistance < 0.0) {
            print(_p("Resistance cannot be negative"))
            return ([:] as! [String: Double])
        }
        if (voltage == 0.0) {
            return (["voltage": (current * resistance)] as! [String: Double])
        }
        if (current == 0.0) {
            return (["current": (voltage / resistance)] as! [String: Double])
        }
        return (["resistance": (voltage / current)] as! [String: Double])
    }
    _ = _json((ohms_law(10.0, 0.0, 5.0) as! [String: Double]))
    _ = _json((ohms_law(Double(-10.0), 1.0, 0.0) as! [String: Double]))
    _ = _json((ohms_law(0.0, Double(-1.5), 2.0) as! [String: Double]))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
