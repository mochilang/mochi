// Generated by Mochi transpiler v0.10.72 on 2025-08-25 08:41:30 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.isNaN || d.isInfinite {
                return String(d)
            }
            if d.rounded(.towardZero) == d {
                // avoid overflow when converting to Int64
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _num(_ v: Any) -> Double {
    if let d = v as? Double { return d }
    if let i = v as? Int { return Double(i) }
    if let i = v as? Int64 { return Double(i) }
    return 0
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
struct Result: Codable {
    var name: String
    var value: Double
    init() {
        self.name = ""
        self.value = 0
    }
    init(name: String, value: Double) {
        self.name = name
        self.value = value
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func absf(_ x: Double) -> Double {
        if ((x < 0.0)) {
            return -x
        }
        return x
    }
    func pow10(_ n: Int) -> Double {
        var p = 1.0
        var i = 0
        while ((i < n)) {
            p = _num((p * 10.0))
            i = _int((i &+ 1))
        }
        return p
    }
    func round_to(_ x: Double, _ n: Int) -> Double {
        let m = _num(pow10(n))
        return (_num(floor(((x * m) + 0.5))) / m)
    }
    func electric_power(_ voltage: Double, _ current: Double, _ power: Double) -> Result {
        var zeros = 0
        if ((voltage == 0.0)) {
            zeros = _int((zeros &+ 1))
        }
        if ((current == 0.0)) {
            zeros = _int((zeros &+ 1))
        }
        if ((power == 0.0)) {
            zeros = _int((zeros &+ 1))
        }
        if ((zeros != 1)) {
            _ = fatalError("Exactly one argument must be 0")
        } else if ((power < 0.0)) {
            _ = fatalError("Power cannot be negative in any electrical/electronics system")
        } else if ((voltage == 0.0)) {
            return Result(name: "voltage", value: _num((power / current)))
        } else if ((current == 0.0)) {
            return Result(name: "current", value: _num((power / voltage)))
        } else if ((power == 0.0)) {
            let p = _num(absf(_num((voltage * current))))
            return Result(name: "power", value: _num(round_to(_num(p), 2)))
        } else {
            _ = fatalError("Unhandled case")
        }
        
        
        
        
    }
    func str_result(_ r: Result) -> String {
        return (_p((_p((_p((_p("Result(name='") + _p(r.name))) + _p("', value="))) + _p(_p(r.value)))) + _p(")"))
    }
    let r1 = electric_power(0.0, 2.0, 5.0)
    print(_p(String(describing: str_result((r1 as! Result)))))
    let r2 = electric_power(2.0, 2.0, 0.0)
    print(_p(String(describing: str_result((r2 as! Result)))))
    let r3 = electric_power(_num(-2.0), 3.0, 0.0)
    print(_p(String(describing: str_result((r3 as! Result)))))
    let r4 = electric_power(2.2000000000000002, 2.2000000000000002, 0.0)
    print(_p(String(describing: str_result((r4 as! Result)))))
    let r5 = electric_power(2.0, 0.0, 6.0)
    print(_p(String(describing: str_result((r5 as! Result)))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
