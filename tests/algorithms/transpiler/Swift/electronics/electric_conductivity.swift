// Generated by Mochi transpiler v0.10.59 on 2025-08-07 08:32:40 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
struct Result: Codable {
    var kind: String
    var value: Double
    init() {
        self.kind = ""
        self.value = 0
    }
    init(kind: String, value: Double) {
        self.kind = kind
        self.value = value
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let ELECTRON_CHARGE: Double = 0.00000000000000000016021
    func electric_conductivity(_ conductivity: Double, _ electron_conc: Double, _ mobility: Double) -> Result {
        var zero_count: Int = 0
        if (conductivity == 0.0) {
            zero_count = Int((zero_count &+ 1))
        }
        if (electron_conc == 0.0) {
            zero_count = Int((zero_count &+ 1))
        }
        if (mobility == 0.0) {
            zero_count = Int((zero_count &+ 1))
        }
        if (zero_count != 1) {
            _ = fatalError("You cannot supply more or less than 2 values")
        }
        if (conductivity < 0.0) {
            _ = fatalError("Conductivity cannot be negative")
        }
        if (electron_conc < 0.0) {
            _ = fatalError("Electron concentration cannot be negative")
        }
        if (mobility < 0.0) {
            _ = fatalError("mobility cannot be negative")
        }
        if (conductivity == 0.0) {
            return Result(kind: "conductivity", value: ((mobility * electron_conc) * ELECTRON_CHARGE))
        }
        if (electron_conc == 0.0) {
            return Result(kind: "electron_conc", value: (conductivity / Double((mobility * ELECTRON_CHARGE))))
        }
        return Result(kind: "mobility", value: (conductivity / Double((electron_conc * ELECTRON_CHARGE))))
    }
    let r1 = electric_conductivity(25.0, 100.0, 0.0)
    let r2 = electric_conductivity(0.0, 1600.0, 200.0)
    let r3 = electric_conductivity(1000.0, 0.0, 1200.0)
    print(_p(((r1.kind + " ") + String(describing: r1.value))))
    print(_p(((r2.kind + " ") + String(describing: r2.value))))
    print(_p(((r3.kind + " ") + String(describing: r3.value))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
