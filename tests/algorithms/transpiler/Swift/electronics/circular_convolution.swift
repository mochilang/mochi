// Generated by Mochi transpiler v0.10.61 on 2025-08-08 19:13:15 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func floor(_ x: Double) -> Double {
        var i = Int(x)
        if (Double(i) > x) {
            i = _int((i &- 1))
        }
        return Double(i)
    }
    func pow10(_ n: Int) -> Double {
        var p = 1.0
        var i = 0
        while (i < n) {
            p = Double((p * 10.0))
            i = _int((i &+ 1))
        }
        return p
    }
    func roundn(_ x: Double, _ n: Int) -> Double {
        let m = Double(pow10(n))
        return (Double(floor(Double(((x * m) + 0.5)))) / m)
    }
    func pad(_ signal: [Double], _ target: Int) -> [Double] {
        var s = signal
        while (_int(((s).count)) < target) {
            s = (_append(s, 0.0) as! [Double])
        }
        return s
    }
    func circular_convolution(_ a: [Double], _ b: [Double]) -> [Double] {
        let n1 = _int(((a).count))
        let n2 = _int(((b).count))
        let n = _int(((n1 > n2) ? n1 : n2))
        var x = (pad((a as! [Double]), n) as! [Double])
        var y = (pad((b as! [Double]), n) as! [Double])
        var res: [Double] = ([] as! [Double])
        var i = 0
        while (i < n) {
            var sum = 0.0
            var k = 0
            while (k < n) {
                let j = ((_int((i &- k)) % n + n) % n)
                let idx = _int(((j < 0) ? (j &+ n) : j))
                sum = Double((sum + (Double(_idx(x, k)) * Double(_idx(y, idx)))))
                k = _int((k &+ 1))
            }
            res = (_append(res, Double(roundn(Double(sum), 2))) as! [Double])
            i = _int((i &+ 1))
        }
        return res
    }
    let example1: [Double] = (circular_convolution(({
        var _arr: [Double] = []
        _arr = _append(_arr, 2.0)
        _arr = _append(_arr, 1.0)
        _arr = _append(_arr, 2.0)
        _arr = _append(_arr, -1.0)
        return _arr
    }() as! [Double]), ({
        var _arr: [Double] = []
        _arr = _append(_arr, 1.0)
        _arr = _append(_arr, 2.0)
        _arr = _append(_arr, 3.0)
        _arr = _append(_arr, 4.0)
        return _arr
    }() as! [Double])) as! [Double])
    print(_p("[" + example1.map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    let example2: [Double] = (circular_convolution(({
        var _arr: [Double] = []
        _arr = _append(_arr, 0.2)
        _arr = _append(_arr, 0.4)
        _arr = _append(_arr, 0.6)
        _arr = _append(_arr, 0.8)
        _arr = _append(_arr, 1.0)
        _arr = _append(_arr, 1.2)
        _arr = _append(_arr, 1.4)
        _arr = _append(_arr, 1.6)
        return _arr
    }() as! [Double]), ({
        var _arr: [Double] = []
        _arr = _append(_arr, 0.1)
        _arr = _append(_arr, 0.3)
        _arr = _append(_arr, 0.5)
        _arr = _append(_arr, 0.7)
        _arr = _append(_arr, 0.9)
        _arr = _append(_arr, 1.1)
        _arr = _append(_arr, 1.3)
        _arr = _append(_arr, 1.5)
        return _arr
    }() as! [Double])) as! [Double])
    print(_p("[" + example2.map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    let example3: [Double] = (circular_convolution(({
        var _arr: [Double] = []
        _arr = _append(_arr, -1.0)
        _arr = _append(_arr, 1.0)
        _arr = _append(_arr, 2.0)
        _arr = _append(_arr, -2.0)
        return _arr
    }() as! [Double]), ({
        var _arr: [Double] = []
        _arr = _append(_arr, 0.5)
        _arr = _append(_arr, 1.0)
        _arr = _append(_arr, -1.0)
        _arr = _append(_arr, 2.0)
        _arr = _append(_arr, 0.75)
        return _arr
    }() as! [Double])) as! [Double])
    print(_p("[" + example3.map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    let example4: [Double] = (circular_convolution(({
        var _arr: [Double] = []
        _arr = _append(_arr, 1.0)
        _arr = _append(_arr, -1.0)
        _arr = _append(_arr, 2.0)
        _arr = _append(_arr, 3.0)
        _arr = _append(_arr, -1.0)
        return _arr
    }() as! [Double]), ({
        var _arr: [Double] = []
        _arr = _append(_arr, 1.0)
        _arr = _append(_arr, 2.0)
        _arr = _append(_arr, 3.0)
        return _arr
    }() as! [Double])) as! [Double])
    print(_p("[" + example4.map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
