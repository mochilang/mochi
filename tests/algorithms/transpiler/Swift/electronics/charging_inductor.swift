// Generated by Mochi transpiler v0.10.72 on 2025-08-25 08:41:22 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.isNaN || d.isInfinite {
                return String(d)
            }
            if d.rounded(.towardZero) == d {
                // avoid overflow when converting to Int64
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _num(_ v: Any) -> Double {
    if let d = v as? Double { return d }
    if let i = v as? Int { return Double(i) }
    if let i = v as? Int64 { return Double(i) }
    return 0
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func expApprox(_ x: Double) -> Double {
        if ((x < 0.0)) {
            return (1.0 / _num(expApprox(_num(-x))))
        }
        if ((x > 1.0)) {
            let half = _num(expApprox(_num((x / 2.0))))
            return (half * half)
        }
        var sum = 1.0
        var term = 1.0
        var n = 1
        while ((n < 20)) {
            term = _num(((term * x) / _num(n)))
            sum = _num((sum + term))
            n = _int((n &+ 1))
        }
        return sum
    }
    func floor(_ x: Double) -> Double {
        var i = Int(x)
        if ((_num(i) > x)) {
            i = _int((i &- 1))
        }
        return _num(i)
    }
    func pow10(_ n: Int) -> Double {
        var result = 1.0
        var i = 0
        while ((i < n)) {
            result = _num((result * 10.0))
            i = _int((i &+ 1))
        }
        return result
    }
    func round(_ x: Double, _ n: Int) -> Double {
        let m = _num(pow10(n))
        return (_num(floor(_num(((x * m) + 0.5)))) / m)
    }
    func charging_inductor(_ source_voltage: Double, _ resistance: Double, _ inductance: Double, _ time: Double) -> Double {
        if ((source_voltage <= 0.0)) {
            _ = fatalError("Source voltage must be positive.")
        }
        if ((resistance <= 0.0)) {
            _ = fatalError("Resistance must be positive.")
        }
        if ((inductance <= 0.0)) {
            _ = fatalError("Inductance must be positive.")
        }
        let exponent = (_num((-time * resistance)) / inductance)
        let current = ((source_voltage / resistance) * _num((1.0 - _num(expApprox(_num(exponent))))))
        return _num(round(_num(current), 3))
    }
    print(_p(_num(charging_inductor(5.7999999999999998, 1.5, 2.2999999999999998, 2.0))))
    print(_p(_num(charging_inductor(8.0, 5.0, 3.0, 2.0))))
    print(_p(_num(charging_inductor(8.0, _num((5.0 * _num(pow10(2)))), 3.0, 2.0))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
