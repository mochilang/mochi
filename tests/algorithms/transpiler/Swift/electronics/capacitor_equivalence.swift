// Generated by Mochi transpiler v0.10.59 on 2025-08-07 08:30:59 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func capacitor_parallel(_ capacitors: [Double?]) -> Double {
        var sum_c: Double = 0.0
        var i: Int = 0
        while (i < Int(((capacitors).count))) {
            let c = Double(capacitors[i])
            if (c < 0.0) {
                _ = fatalError((("Capacitor at index " + String(describing: i)) + " has a negative value!"))
                return 0.0
            }
            sum_c = Double((sum_c + c))
            i = Int((i &+ 1))
        }
        return sum_c
    }
    func capacitor_series(_ capacitors: [Double?]) -> Double {
        var first_sum: Double = 0.0
        var i: Int = 0
        while (i < Int(((capacitors).count))) {
            let c = Double(capacitors[i])
            if (c <= 0.0) {
                _ = fatalError((("Capacitor at index " + String(describing: i)) + " has a negative or zero value!"))
                return 0.0
            }
            first_sum = Double((first_sum + (1.0 / c)))
            i = Int((i &+ 1))
        }
        return (1.0 / first_sum)
    }
    func main() {
        let parallel = Double(capacitor_parallel(([5.71389, 12.0, 3.0] as! [Double?])))
        let series = Double(capacitor_series(([5.71389, 12.0, 3.0] as! [Double?])))
        print(_p(String(describing: parallel)))
        print(_p(String(describing: series)))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
