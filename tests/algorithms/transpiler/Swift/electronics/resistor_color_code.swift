// Generated by Mochi transpiler v0.10.64 on 2025-08-13 16:14:20 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _slice<T>(_ xs: [T], _ start: Int, _ end: Int) -> [T] {
    var s = start
    var e = end
    if s < 0 { s = 0 }
    if e > xs.count { e = xs.count }
    if s > e { s = e }
    return Array(xs[s..<e])
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let valid_colors: [String] = ({
        var _arr: [String] = []
        _arr = _append(_arr, "Black")
        _arr = _append(_arr, "Brown")
        _arr = _append(_arr, "Red")
        _arr = _append(_arr, "Orange")
        _arr = _append(_arr, "Yellow")
        _arr = _append(_arr, "Green")
        _arr = _append(_arr, "Blue")
        _arr = _append(_arr, "Violet")
        _arr = _append(_arr, "Grey")
        _arr = _append(_arr, "White")
        _arr = _append(_arr, "Gold")
        _arr = _append(_arr, "Silver")
        return _arr
    }() as! [String])
    let significant_figures_color_values = ["Black": 0, "Brown": 1, "Red": 2, "Orange": 3, "Yellow": 4, "Green": 5, "Blue": 6, "Violet": 7, "Grey": 8, "White": 9]
    let multiplier_color_values = ["Black": 1.0, "Brown": 10.0, "Red": 100.0, "Orange": 1000.0, "Yellow": 10000.0, "Green": 100000.0, "Blue": 1000000.0, "Violet": 10000000.0, "Grey": 100000000.0, "White": 1000000000.0, "Gold": 0.1, "Silver": 0.01]
    let tolerance_color_values = ["Brown": 1.0, "Red": 2.0, "Orange": 0.05, "Yellow": 0.02, "Green": 0.5, "Blue": 0.25, "Violet": 0.1, "Grey": 0.01, "Gold": 5.0, "Silver": 10.0]
    let temperature_coeffecient_color_values = ["Black": 250, "Brown": 100, "Red": 50, "Orange": 15, "Yellow": 25, "Green": 20, "Blue": 10, "Violet": 5, "Grey": 1]
    func contains(_ list: [String], _ value: String) -> Bool {
        for c in list {
            if (c == value) {
                return true
            }
        }
        return false
    }
    func get_significant_digits(_ colors: [String]) -> Int {
        var digit = 0
        for color in colors {
            if (!(significant_figures_color_values[color] != nil)) {
                _ = fatalError((color + " is not a valid color for significant figure bands"))
            }
            digit = _int(((digit &* 10) &+ (significant_figures_color_values[color]! as? Int ?? 0)))
        }
        return digit
    }
    func get_multiplier(_ color: String) -> Double {
        if (!(multiplier_color_values[color] != nil)) {
            _ = fatalError((color + " is not a valid color for multiplier band"))
        }
        return Double(multiplier_color_values[color]!)
    }
    func get_tolerance(_ color: String) -> Double {
        if (!(tolerance_color_values[color] != nil)) {
            _ = fatalError((color + " is not a valid color for tolerance band"))
        }
        return Double(tolerance_color_values[color]!)
    }
    func get_temperature_coeffecient(_ color: String) -> Int {
        if (!(temperature_coeffecient_color_values[color] != nil)) {
            _ = fatalError((color + " is not a valid color for temperature coeffecient band"))
        }
        return (temperature_coeffecient_color_values[color]! as? Int ?? 0)
    }
    func get_band_type_count(_ total: Int, _ typ: String) -> Int {
        if (total == 3) {
            if (typ == "significant") {
                return 2
            }
            if (typ == "multiplier") {
                return 1
            }
            _ = fatalError((typ + " is not valid for a 3 band resistor"))
        } else if (total == 4) {
            if (typ == "significant") {
                return 2
            }
            if (typ == "multiplier") {
                return 1
            }
            if (typ == "tolerance") {
                return 1
            }
            _ = fatalError((typ + " is not valid for a 4 band resistor"))
        } else if (total == 5) {
            if (typ == "significant") {
                return 3
            }
            if (typ == "multiplier") {
                return 1
            }
            if (typ == "tolerance") {
                return 1
            }
            _ = fatalError((typ + " is not valid for a 5 band resistor"))
        } else if (total == 6) {
            if (typ == "significant") {
                return 3
            }
            if (typ == "multiplier") {
                return 1
            }
            if (typ == "tolerance") {
                return 1
            }
            if (typ == "temp_coeffecient") {
                return 1
            }
            _ = fatalError((typ + " is not valid for a 6 band resistor"))
        } else {
            _ = fatalError((_p(total) + " is not a valid number of bands"))
        }
        
        
        
    }
    func check_validity(_ number_of_bands: Int, _ colors: [String]) -> Bool {
        if ((number_of_bands < 3) || (number_of_bands > 6)) {
            _ = fatalError("Invalid number of bands. Resistor bands must be 3 to 6")
        }
        if (number_of_bands != _int(((colors).count))) {
            _ = fatalError((((("Expecting " + _p(number_of_bands)) + " colors, provided ") + _p(_int(((colors).count)))) + " colors"))
        }
        for color in colors {
            if (!contains((valid_colors as! [String]), (color as! String))) {
                _ = fatalError((color + " is not a valid color"))
            }
        }
        return true
    }
    func calculate_resistance(_ number_of_bands: Int, _ color_code_list: [String]) -> String {
        _ = check_validity(number_of_bands, (color_code_list as! [String]))
        let sig_count = _int(get_band_type_count(number_of_bands, "significant"))
        let significant_colors: [String] = (_slice(Array(color_code_list), 0, sig_count) as! [String])
        let significant_digits = _int(get_significant_digits((significant_colors as! [String])))
        let multiplier_color = (_idx(color_code_list, sig_count) as! String)
        let multiplier = Double(get_multiplier((multiplier_color as! String)))
        var tolerance = 20.0
        if (number_of_bands >= 4) {
            let tolerance_color = (_idx(color_code_list, (sig_count &+ 1)) as! String)
            tolerance = Double(get_tolerance((tolerance_color as! String)))
        }
        var temp_coeff = 0
        if (number_of_bands == 6) {
            let temp_color = (_idx(color_code_list, (sig_count &+ 2)) as! String)
            temp_coeff = _int(get_temperature_coeffecient((temp_color as! String)))
        }
        let resistance_value = (multiplier * Double(significant_digits))
        var resistance_str = _p(resistance_value)
        if (resistance_value == Double(_int(_int(resistance_value)))) {
            resistance_str = _p(_int(_int(resistance_value)))
        }
        var answer = (((resistance_str + "Ω ±") + _p(tolerance)) + "% ")
        if (temp_coeff != 0) {
            answer = (((answer + _p(temp_coeff)) + " ppm/K") as! String)
        }
        return answer
    }
    do {
        assert((String(describing: calculate_resistance(3, ({
            var _arr: [String] = []
            _arr = _append(_arr, "Black")
            _arr = _append(_arr, "Blue")
            _arr = _append(_arr, "Orange")
            return _arr
        }() as! [String]))) == "6000Ω ±20% "))
    }
    do {
        assert((String(describing: calculate_resistance(4, ({
            var _arr: [String] = []
            _arr = _append(_arr, "Orange")
            _arr = _append(_arr, "Green")
            _arr = _append(_arr, "Blue")
            _arr = _append(_arr, "Gold")
            return _arr
        }() as! [String]))) == "35000000Ω ±5% "))
    }
    do {
        assert((String(describing: calculate_resistance(5, ({
            var _arr: [String] = []
            _arr = _append(_arr, "Violet")
            _arr = _append(_arr, "Brown")
            _arr = _append(_arr, "Grey")
            _arr = _append(_arr, "Silver")
            _arr = _append(_arr, "Green")
            return _arr
        }() as! [String]))) == "7.18Ω ±0.5% "))
    }
    do {
        assert((String(describing: calculate_resistance(6, ({
            var _arr: [String] = []
            _arr = _append(_arr, "Red")
            _arr = _append(_arr, "Green")
            _arr = _append(_arr, "Blue")
            _arr = _append(_arr, "Yellow")
            _arr = _append(_arr, "Orange")
            _arr = _append(_arr, "Grey")
            return _arr
        }() as! [String]))) == "2560000Ω ±0.05% 1 ppm/K"))
    }
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
