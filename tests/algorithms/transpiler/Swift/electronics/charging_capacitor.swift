// Generated by Mochi transpiler v0.10.72 on 2025-08-25 08:41:20 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.isNaN || d.isInfinite {
                return String(d)
            }
            if d.rounded(.towardZero) == d {
                // avoid overflow when converting to Int64
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _num(_ v: Any) -> Double {
    if let d = v as? Double { return d }
    if let i = v as? Int { return Double(i) }
    if let i = v as? Int64 { return Double(i) }
    return 0
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func expApprox(_ x: Double) -> Double {
        var y: Double = x
        var is_neg: Bool = false
        if ((x < 0.0)) {
            is_neg = true
            y = _num(-x)
        }
        var term: Double = 1.0
        var sum: Double = 1.0
        var n: Int = 1
        while ((n < 30)) {
            term = _num(((term * y) / _num(n)))
            sum = _num((sum + term))
            n = _int((n &+ 1))
        }
        if (is_neg) {
            return (1.0 / sum)
        }
        return sum
    }
    func round3(_ x: Double) -> Double {
        var scaled: Double = (x * 1000.0)
        if ((scaled >= 0.0)) {
            scaled = _num((scaled + 0.5))
        } else {
            scaled = _num((scaled - 0.5))
        }
        let scaled_int: Int = Int(scaled)
        return (_num(scaled_int) / 1000.0)
    }
    func charging_capacitor(_ source_voltage: Double, _ resistance: Double, _ capacitance: Double, _ time_sec: Double) -> Double {
        if ((source_voltage <= 0.0)) {
            _ = fatalError("Source voltage must be positive.")
        }
        if ((resistance <= 0.0)) {
            _ = fatalError("Resistance must be positive.")
        }
        if ((capacitance <= 0.0)) {
            _ = fatalError("Capacitance must be positive.")
        }
        let exponent: Double = (-time_sec / _num((resistance * capacitance)))
        let voltage: Double = (source_voltage * _num((1.0 - _num(expApprox(_num(exponent))))))
        return _num(round3(_num(voltage)))
    }
    print(_p(_num(charging_capacitor(0.20000000000000001, 0.90000000000000002, 8.4000000000000004, 0.5))))
    print(_p(_num(charging_capacitor(2.2000000000000002, 3.5, 2.3999999999999999, 9.0))))
    print(_p(_num(charging_capacitor(15.0, 200.0, 20.0, 2.0))))
    print(_p(_num(charging_capacitor(20.0, 2000.0, 0.00029999999999999997, 4.0))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
