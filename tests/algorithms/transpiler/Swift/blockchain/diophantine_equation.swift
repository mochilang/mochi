// Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:57:32 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func gcd(_ a: Int, _ b: Int) -> Int {
        var x: Int = Int(((a < 0) ? -a : a))
        var y: Int = Int(((b < 0) ? -b : b))
        while (y != 0) {
            let t = (x % y)
            x = Int(y)
            y = Int(t)
        }
        return x
    }
    func extended_gcd(_ a: Int, _ b: Int) -> [Int] {
        if (b == 0) {
            return ([a, 1, 0] as! [Int])
        }
        let res: [Int] = (extended_gcd(b, (a % b)) as! [Int])
        let d = (res[0] as? Int ?? 0)
        let p = (res[1] as? Int ?? 0)
        let q = (res[2] as? Int ?? 0)
        let x = q
        let y = (p &- (q &* Int((a / b))))
        return ([d, x, y] as! [Int])
    }
    func diophantine(_ a: Int, _ b: Int, _ c: Int) -> [Int] {
        let d = Int(gcd(a, b))
        if ((c % d) != 0) {
            _ = fatalError("No solution")
        }
        let eg: [Int] = (extended_gcd(a, b) as! [Int])
        let r = (c / d)
        let x = ((eg[1] as? Int ?? 0) &* r)
        let y = ((eg[2] as? Int ?? 0) &* r)
        return ([x, y] as! [Int])
    }
    func diophantine_all_soln(_ a: Int, _ b: Int, _ c: Int, _ n: Int) -> [[Int]] {
        let base: [Int] = (diophantine(a, b, c) as! [Int])
        let x0 = (base[0] as? Int ?? 0)
        let y0 = (base[1] as? Int ?? 0)
        let d = Int(gcd(a, b))
        let p = (a / d)
        let q = (b / d)
        var sols: [[Int]] = ([] as! [[Int]])
        var i: Int = 0
        while (i < n) {
            let x = (x0 &+ (i &* q))
            let y = (y0 &- (i &* p))
            sols = (_append(sols, ([x, y] as! [Int])) as! [[Int]])
            i = Int((i &+ 1))
        }
        return sols
    }
    let s1: [Int] = (diophantine(10, 6, 14) as! [Int])
    print(_p("[" + s1.map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    var sols: [[Int]] = (diophantine_all_soln(10, 6, 14, 4) as! [[Int]])
    var j: Int = 0
    while (j < Int(((sols).count))) {
        print(_p("[" + (sols[j] as! [Int]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
        j = Int((j &+ 1))
    }
    print(_p("[" + (diophantine(391, 299, -69) as! [Int]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    print(_p("[" + (extended_gcd(10, 6) as! [Int]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    print(_p("[" + (extended_gcd(7, 5) as! [Int]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
