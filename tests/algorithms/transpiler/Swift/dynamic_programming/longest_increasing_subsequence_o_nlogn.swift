// Generated by Mochi transpiler v0.10.64 on 2025-08-13 07:23:11 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func ceil_index(_ v: [Int], _ left: Int, _ right: Int, _ key: Int) -> Int {
        var l = left
        var r = right
        while ((r &- l) > 1) {
            let middle = (_int((l &+ r)) / 2)
            if ((_idx(v, middle) as? Int ?? 0) >= key) {
                r = Int(middle)
            } else {
                l = Int(middle)
            }
        }
        return r
    }
    func longest_increasing_subsequence_length(_ v: [Int]) -> Int {
        if (_int(((v).count)) == 0) {
            return 0
        }
        var tail: [Int] = ([] as! [Int])
        var i = 0
        while (i < _int(((v).count))) {
            tail = (_append(tail, 0) as! [Int])
            i = _int((i &+ 1))
        }
        var length = 1
        tail = _set(tail, 0, (_idx(v, 0) as? Int ?? 0))
        var j = 1
        while (j < _int(((v).count))) {
            if ((_idx(v, j) as? Int ?? 0) < (_idx(tail, 0) as? Int ?? 0)) {
                tail = _set(tail, 0, (_idx(v, j) as? Int ?? 0))
            } else if ((_idx(v, j) as? Int ?? 0) > (_idx(tail, (length &- 1)) as? Int ?? 0)) {
                tail = _set(tail, length, (_idx(v, j) as? Int ?? 0))
                length = _int((length &+ 1))
            } else {
                let idx = _int(ceil_index((tail as! [Int]), -1, (length &- 1), (_idx(v, j) as? Int ?? 0)))
                tail = _set(tail, idx, (_idx(v, j) as? Int ?? 0))
            }
            
            j = _int((j &+ 1))
        }
        return length
    }
    func main() {
        let example1: [Int] = ({
            var _arr: [Int] = []
            _arr = _append(_arr, 2)
            _arr = _append(_arr, 5)
            _arr = _append(_arr, 3)
            _arr = _append(_arr, 7)
            _arr = _append(_arr, 11)
            _arr = _append(_arr, 8)
            _arr = _append(_arr, 10)
            _arr = _append(_arr, 13)
            _arr = _append(_arr, 6)
            return _arr
        }() as! [Int])
        let example2: [Int] = ([] as! [Int])
        let example3: [Int] = ({
            var _arr: [Int] = []
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 8)
            _arr = _append(_arr, 4)
            _arr = _append(_arr, 12)
            _arr = _append(_arr, 2)
            _arr = _append(_arr, 10)
            _arr = _append(_arr, 6)
            _arr = _append(_arr, 14)
            _arr = _append(_arr, 1)
            _arr = _append(_arr, 9)
            _arr = _append(_arr, 5)
            _arr = _append(_arr, 13)
            _arr = _append(_arr, 3)
            _arr = _append(_arr, 11)
            _arr = _append(_arr, 7)
            _arr = _append(_arr, 15)
            return _arr
        }() as! [Int])
        let example4: [Int] = ({
            var _arr: [Int] = []
            _arr = _append(_arr, 5)
            _arr = _append(_arr, 4)
            _arr = _append(_arr, 3)
            _arr = _append(_arr, 2)
            _arr = _append(_arr, 1)
            return _arr
        }() as! [Int])
        print(_p(_int(longest_increasing_subsequence_length((example1 as! [Int])))))
        print(_p(_int(longest_increasing_subsequence_length((example2 as! [Int])))))
        print(_p(_int(longest_increasing_subsequence_length((example3 as! [Int])))))
        print(_p(_int(longest_increasing_subsequence_length((example4 as! [Int])))))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
