// Generated by Mochi transpiler v0.10.59 on 2025-08-07 00:31:41 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func ceil_index(_ v: [Int?], _ left: Int, _ right: Int, _ key: Int) -> Int {
        var l: Int = left
        var r: Int = right
        while ((r &- l) > 1) {
            let middle = (Int((l &+ r)) / 2)
            if ((v[middle] as? Int ?? 0) >= key) {
                r = (middle as! Int)
            } else {
                l = (middle as! Int)
            }
        }
        return r
    }
    func longest_increasing_subsequence_length(_ v: [Int?]) -> Int {
        if (Int(((v).count)) == 0) {
            return 0
        }
        var tail: [Int?] = ([] as! [Int?])
        var i: Int = 0
        while (i < Int(((v).count))) {
            tail = (_append(tail, 0) as! [Int?])
            i = Int((i &+ 1))
        }
        var length: Int = 1
        tail = _set(tail, 0, (v[0] as? Int ?? 0))
        var j: Int = 1
        while (j < Int(((v).count))) {
            if ((v[j] as? Int ?? 0) < (tail[0] as? Int ?? 0)) {
                tail = _set(tail, 0, (v[j] as? Int ?? 0))
            } else if ((v[j] as? Int ?? 0) > (tail[(length &- 1)] as? Int ?? 0)) {
                tail = _set(tail, length, (v[j] as? Int ?? 0))
                length = Int((length &+ 1))
            } else {
                let idx = Int(ceil_index((tail as! [Int?]), -1, (length &- 1), (v[j] as? Int ?? 0)))
                tail = _set(tail, idx, (v[j] as? Int ?? 0))
            }
            
            j = Int((j &+ 1))
        }
        return length
    }
    func main() {
        let example1: [Int?] = ([2, 5, 3, 7, 11, 8, 10, 13, 6] as! [Int?])
        let example2: [Int?] = ([] as! [Int?])
        let example3: [Int?] = ([0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15] as! [Int?])
        let example4: [Int?] = ([5, 4, 3, 2, 1] as! [Int?])
        print(_p(Int(longest_increasing_subsequence_length((example1 as! [Int?])))))
        print(_p(Int(longest_increasing_subsequence_length((example2 as! [Int?])))))
        print(_p(Int(longest_increasing_subsequence_length((example3 as! [Int?])))))
        print(_p(Int(longest_increasing_subsequence_length((example4 as! [Int?])))))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
