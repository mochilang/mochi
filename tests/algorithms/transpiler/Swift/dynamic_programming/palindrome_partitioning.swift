// Generated by Mochi transpiler v0.10.59 on 2025-08-07 00:32:23 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func min_partitions(_ s: String) -> Int {
        let n = Int(((s).count))
        var cut: [Int?] = ([] as! [Int?])
        var i: Int = 0
        while (i < n) {
            cut = (_append(cut, 0) as! [Int?])
            i = Int((i &+ 1))
        }
        var pal: [[Bool?]] = ([] as! [[Bool?]])
        i = 0
        while (i < n) {
            var row: [Bool?] = ([] as! [Bool?])
            var j: Int = 0
            while (j < n) {
                row = (_append(row, false) as! [Bool?])
                j = Int((j &+ 1))
            }
            pal = (_append(pal, row) as! [[Bool?]])
            i = Int((i &+ 1))
        }
        i = 0
        while (i < n) {
            var mincut: Int = i
            var j: Int = 0
            while (j <= i) {
                if (((String(Array(s)[i]) as! String) == (String(Array(s)[j]) as! String)) && (((i &- j) < 2) || (pal[(j &+ 1)][(i &- 1)] as! Bool))) {
                    pal[j][i] = true
                    if (j == 0) {
                        mincut = 0
                    } else {
                        let candidate = ((cut[(j &- 1)] as? Int ?? 0) &+ 1)
                        if (candidate < mincut) {
                            mincut = (candidate as! Int)
                        }
                    }
                }
                j = Int((j &+ 1))
            }
            cut = _set(cut, i, (mincut as! Int))
            i = Int((i &+ 1))
        }
        return (cut[(n &- 1)] as? Int ?? 0)
    }
    print(_p(Int(min_partitions("aab"))))
    print(_p(Int(min_partitions("aaa"))))
    print(_p(Int(min_partitions("ababbbabbababa"))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
