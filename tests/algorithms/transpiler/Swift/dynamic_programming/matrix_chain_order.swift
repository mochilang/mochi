// Generated by Mochi transpiler v0.10.59 on 2025-08-07 00:31:52 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
struct MatrixChainResult: Codable {
    var matrix: [[Int?]]
    var solution: [[Int?]]
    init() {
        self.matrix = []
        self.solution = []
    }
    init(matrix: [[Int?]], solution: [[Int?]]) {
        self.matrix = matrix
        self.solution = solution
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func make_2d(_ n: Int) -> [[Int?]] {
        var res: [[Int?]] = ([] as! [[Int?]])
        var i: Int = 0
        while (i < n) {
            var row: [Int?] = ([] as! [Int?])
            var j: Int = 0
            while (j < n) {
                row = (_append(row, 0) as! [Int?])
                j = Int((j &+ 1))
            }
            res = (_append(res, row) as! [[Int?]])
            i = Int((i &+ 1))
        }
        return res
    }
    func matrix_chain_order(_ arr: [Int?]) -> MatrixChainResult {
        let n = Int(((arr).count))
        var m: [[Int?]] = (make_2d(n) as! [[Int?]])
        var s: [[Int?]] = (make_2d(n) as! [[Int?]])
        var chain_length: Int = 2
        while (chain_length < n) {
            var a: Int = 1
            while (a < ((n &- chain_length) &+ 1)) {
                let b = ((a &+ chain_length) &- 1)
                m[a][b] = 1000000000
                var c: Int = a
                while (c < b) {
                    let cost = (((m[a][c] as? Int ?? 0) &+ (m[(c &+ 1)][b] as? Int ?? 0)) &+ (((arr[(a &- 1)] as? Int ?? 0) &* (arr[c] as? Int ?? 0)) &* (arr[b] as? Int ?? 0)))
                    if (cost < (m[a][b] as? Int ?? 0)) {
                        m[a][b] = (cost as! Int)
                        s[a][b] = (c as! Int)
                    }
                    c = Int((c &+ 1))
                }
                a = Int((a &+ 1))
            }
            chain_length = Int((chain_length &+ 1))
        }
        return MatrixChainResult(matrix: m, solution: s)
    }
    func optimal_parenthesization(_ s: [[Int?]], _ i: Int, _ j: Int) -> String {
        if (i == j) {
            return ("A" + String(describing: i))
        } else {
            let left = String(describing: optimal_parenthesization((s as! [[Int?]]), i, (s[i][j] as? Int ?? 0)))
            let right = String(describing: optimal_parenthesization((s as! [[Int?]]), ((s[i][j] as? Int ?? 0) &+ 1), j))
            return (((("( " + left) + " ") + right) + " )")
        }
    }
    func main() {
        let arr: [Int?] = ([30, 35, 15, 5, 10, 20, 25] as! [Int?])
        let n = Int(((arr).count))
        let res = matrix_chain_order((arr as! [Int?]))
        let m: [[Int?]] = res.matrix
        let s: [[Int?]] = res.solution
        print(_p(("No. of Operation required: " + String(describing: (m[1][(n &- 1)] as? Int ?? 0)))))
        let seq = String(describing: optimal_parenthesization((s as! [[Int?]]), 1, (n &- 1)))
        print(_p(seq))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
