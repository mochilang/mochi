// Generated by Mochi transpiler v0.10.61 on 2025-08-08 19:02:51 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
struct MatrixChainResult: Codable {
    var matrix: [[Int]]
    var solution: [[Int]]
    init() {
        self.matrix = []
        self.solution = []
    }
    init(matrix: [[Int]], solution: [[Int]]) {
        self.matrix = matrix
        self.solution = solution
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func make_2d(_ n: Int) -> [[Int]] {
        var res: [[Int]] = ([] as! [[Int]])
        var i = 0
        while (i < n) {
            var row: [Int] = ([] as! [Int])
            var j = 0
            while (j < n) {
                row = (_append(row, 0) as! [Int])
                j = _int((j &+ 1))
            }
            res = (_append(res, row) as! [[Int]])
            i = _int((i &+ 1))
        }
        return res
    }
    func matrix_chain_order(_ arr: [Int]) -> MatrixChainResult {
        let n = _int(((arr).count))
        var m: [[Int]] = (make_2d(n) as! [[Int]])
        var s: [[Int]] = (make_2d(n) as! [[Int]])
        var chain_length = 2
        while (chain_length < n) {
            var a = 1
            while (a < ((n &- chain_length) &+ 1)) {
                let b = ((a &+ chain_length) &- 1)
                var _tmp4 = (_idx(m, a) as! [Int])
                _tmp4 = _set(_tmp4, b, 1000000000)
                m = _set(m, a, (_tmp4 as! [Int]))
                var c = a
                while (c < b) {
                    let cost = (((_idx(_idx(m, a)!, c) as? Int ?? 0) &+ (_idx(_idx(m, (c &+ 1))!, b) as? Int ?? 0)) &+ (((_idx(arr, (a &- 1)) as? Int ?? 0) &* (_idx(arr, c) as? Int ?? 0)) &* (_idx(arr, b) as? Int ?? 0)))
                    if (cost < (_idx(_idx(m, a)!, b) as? Int ?? 0)) {
                        var _tmp5 = (_idx(m, a) as! [Int])
                        _tmp5 = _set(_tmp5, b, Int(cost))
                        m = _set(m, a, (_tmp5 as! [Int]))
                        var _tmp6 = (_idx(s, a) as! [Int])
                        _tmp6 = _set(_tmp6, b, Int(c))
                        s = _set(s, a, (_tmp6 as! [Int]))
                    }
                    c = _int((c &+ 1))
                }
                a = _int((a &+ 1))
            }
            chain_length = _int((chain_length &+ 1))
        }
        return MatrixChainResult(matrix: (m as! [[Int]]), solution: (s as! [[Int]]))
    }
    func optimal_parenthesization(_ s: [[Int]], _ i: Int, _ j: Int) -> String {
        if (i == j) {
            return ("A" + _p(i))
        } else {
            let left = String(describing: optimal_parenthesization((s as! [[Int]]), i, (_idx(_idx(s, i)!, j) as? Int ?? 0)))
            let right = String(describing: optimal_parenthesization((s as! [[Int]]), ((_idx(_idx(s, i)!, j) as? Int ?? 0) &+ 1), j))
            return (((("( " + left) + " ") + right) + " )")
        }
    }
    func main() {
        let arr: [Int] = ({
            var _arr: [Int] = []
            _arr = _append(_arr, 30)
            _arr = _append(_arr, 35)
            _arr = _append(_arr, 15)
            _arr = _append(_arr, 5)
            _arr = _append(_arr, 10)
            _arr = _append(_arr, 20)
            _arr = _append(_arr, 25)
            return _arr
        }() as! [Int])
        let n = _int(((arr).count))
        let res = matrix_chain_order((arr as! [Int]))
        let m: [[Int]] = res.matrix
        let s: [[Int]] = res.solution
        print(_p(("No. of Operation required: " + _p((_idx(_idx(m, 1)!, (n &- 1)) as? Int ?? 0)))))
        let seq = String(describing: optimal_parenthesization((s as! [[Int]]), 1, (n &- 1)))
        print(_p(seq))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
