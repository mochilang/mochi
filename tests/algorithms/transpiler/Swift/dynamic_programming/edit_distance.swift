// Generated by Mochi transpiler v0.10.59 on 2025-08-07 00:31:12 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func min3(_ a: Int, _ b: Int, _ c: Int) -> Int {
        var m: Int = a
        if (b < m) {
            m = (b as! Int)
        }
        if (c < m) {
            m = (c as! Int)
        }
        return m
    }
    func helper_top_down(_ word1: String, _ word2: String, _ dp: inout [[Int?]], _ i: Int, _ j: Int) -> Int {
        if (i < 0) {
            return (j &+ 1)
        }
        if (j < 0) {
            return (i &+ 1)
        }
        if ((dp[i][j] as? Int ?? 0) != Int((0 &- 1))) {
            return (dp[i][j] as? Int ?? 0)
        }
        if (String(describing: String(Array(String(describing: (word1 as! String)))[i..<(i &+ 1)])) == String(describing: String(Array(String(describing: (word2 as! String)))[j..<(j &+ 1)]))) {
            dp[i][j] = Int(helper_top_down((word1 as! String), (word2 as! String), &dp, (i &- 1), (j &- 1)))
        } else {
            let insert = Int(helper_top_down((word1 as! String), (word2 as! String), &dp, i, (j &- 1)))
            let delete = Int(helper_top_down((word1 as! String), (word2 as! String), &dp, (i &- 1), j))
            let replace = Int(helper_top_down((word1 as! String), (word2 as! String), &dp, (i &- 1), (j &- 1)))
            dp[i][j] = Int((1 &+ Int(min3(insert, delete, replace))))
        }
        return (dp[i][j] as? Int ?? 0)
    }
    func min_dist_top_down(_ word1: String, _ word2: String) -> Int {
        let m = Int(((word1).count))
        let n = Int(((word2).count))
        var dp: [[Int?]] = ([] as! [[Int?]])
        for _ in 0..<m {
            var row: [Int?] = ([] as! [Int?])
            for _2 in 0..<n {
                row = (_append(row, (0 &- 1)) as! [Int?])
            }
            dp = (_append(dp, row) as! [[Int?]])
        }
        return Int(helper_top_down((word1 as! String), (word2 as! String), &dp, (m &- 1), (n &- 1)))
    }
    func min_dist_bottom_up(_ word1: String, _ word2: String) -> Int {
        let m = Int(((word1).count))
        let n = Int(((word2).count))
        var dp: [[Int?]] = ([] as! [[Int?]])
        for _ in 0..<Int((m &+ 1)) {
            var row: [Int?] = ([] as! [Int?])
            for _2 in 0..<Int((n &+ 1)) {
                row = (_append(row, 0) as! [Int?])
            }
            dp = (_append(dp, row) as! [[Int?]])
        }
        for i in 0..<Int((m &+ 1)) {
            for j in 0..<Int((n &+ 1)) {
                if (i == 0) {
                    dp[i][j] = (j as! Int)
                } else if (j == 0) {
                    dp[i][j] = (i as! Int)
                } else if (String(describing: String(Array(String(describing: (word1 as! String)))[(i &- 1)..<i])) == String(describing: String(Array(String(describing: (word2 as! String)))[(j &- 1)..<j]))) {
                    dp[i][j] = (dp[(i &- 1)][(j &- 1)] as? Int ?? 0)
                } else {
                    let insert = (dp[i][(j &- 1)] as? Int ?? 0)
                    let delete = (dp[(i &- 1)][j] as? Int ?? 0)
                    let replace = (dp[(i &- 1)][(j &- 1)] as? Int ?? 0)
                    dp[i][j] = Int((1 &+ Int(min3(insert, delete, replace))))
                }
                
                
            }
        }
        return (dp[m][n] as? Int ?? 0)
    }
    print(_p(String(describing: Int(min_dist_top_down("intention", "execution")))))
    print(_p(String(describing: Int(min_dist_top_down("intention", "")))))
    print(_p(String(describing: Int(min_dist_top_down("", "")))))
    print(_p(String(describing: Int(min_dist_bottom_up("intention", "execution")))))
    print(_p(String(describing: Int(min_dist_bottom_up("intention", "")))))
    print(_p(String(describing: Int(min_dist_bottom_up("", "")))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
