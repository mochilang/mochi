// Generated by Mochi transpiler v0.10.61 on 2025-08-08 19:04:07 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func create_bool_matrix(_ rows: Int, _ cols: Int) -> [[Bool]] {
        var matrix: [[Bool]] = ([] as! [[Bool]])
        var i = 0
        while (i <= rows) {
            var row: [Bool] = ([] as! [Bool])
            var j = 0
            while (j <= cols) {
                row = (_append(row, false) as! [Bool])
                j = _int((j &+ 1))
            }
            matrix = (_append(matrix, row) as! [[Bool]])
            i = _int((i &+ 1))
        }
        return matrix
    }
    func is_sum_subset(_ arr: [Int], _ required_sum: Int) -> Bool {
        let arr_len = _int(((arr).count))
        var subset: [[Bool]] = (create_bool_matrix(arr_len, required_sum) as! [[Bool]])
        var i = 0
        while (i <= arr_len) {
            var _tmp5 = (_idx(subset, i) as! [Bool])
            _tmp5 = _set(_tmp5, 0, true)
            subset = _set(subset, i, (_tmp5 as! [Bool]))
            i = _int((i &+ 1))
        }
        var j = 1
        while (j <= required_sum) {
            var _tmp6 = (_idx(subset, 0) as! [Bool])
            _tmp6 = _set(_tmp6, j, false)
            subset = _set(subset, 0, (_tmp6 as! [Bool]))
            j = _int((j &+ 1))
        }
        i = 1
        while (i <= arr_len) {
            j = 1
            while (j <= required_sum) {
                if ((_idx(arr, (i &- 1)) as? Int ?? 0) > j) {
                    var _tmp7 = (_idx(subset, i) as! [Bool])
                    _tmp7 = _set(_tmp7, j, (_idx(_idx(subset, (i &- 1))!, j) as! Bool))
                    subset = _set(subset, i, (_tmp7 as! [Bool]))
                }
                if ((_idx(arr, (i &- 1)) as? Int ?? 0) <= j) {
                    var _tmp8 = (_idx(subset, i) as! [Bool])
                    _tmp8 = _set(_tmp8, j, ((_idx(_idx(subset, (i &- 1))!, j) as! Bool) || (_idx(_idx(subset, (i &- 1))!, (j &- (_idx(arr, (i &- 1)) as? Int ?? 0))) as! Bool)))
                    subset = _set(subset, i, (_tmp8 as! [Bool]))
                }
                j = _int((j &+ 1))
            }
            i = _int((i &+ 1))
        }
        return (_idx(_idx(subset, arr_len)!, required_sum) as! Bool)
    }
    print(_p(is_sum_subset(({
        var _arr: [Int] = []
        _arr = _append(_arr, 2)
        _arr = _append(_arr, 4)
        _arr = _append(_arr, 6)
        _arr = _append(_arr, 8)
        return _arr
    }() as! [Int]), 5)))
    print(_p(is_sum_subset(({
        var _arr: [Int] = []
        _arr = _append(_arr, 2)
        _arr = _append(_arr, 4)
        _arr = _append(_arr, 6)
        _arr = _append(_arr, 8)
        return _arr
    }() as! [Int]), 14)))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
