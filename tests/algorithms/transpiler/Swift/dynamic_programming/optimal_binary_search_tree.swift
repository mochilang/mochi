// Generated by Mochi transpiler v0.10.61 on 2025-08-08 19:03:31 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
struct Node: Codable {
    var key: Int
    var freq: Int
    init() {
        self.key = 0
        self.freq = 0
    }
    init(key: Int, freq: Int) {
        self.key = key
        self.freq = freq
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func sort_nodes(_ nodes: [Node]) -> [Node] {
        var arr: [Node] = nodes
        var i = 1
        while (i < _int(((arr).count))) {
            let key_node = (_idx(arr, i) as! Node)
            var j = (i &- 1)
            while (j >= 0) {
                let temp = (_idx(arr, j) as! Node)
                if (temp.key > key_node.key) {
                    arr = _set(arr, (j &+ 1), (temp as! Node))
                    j = _int((j &- 1))
                } else {
                    break
                }
            }
            arr = _set(arr, (j &+ 1), (key_node as! Node))
            i = _int((i &+ 1))
        }
        return arr
    }
    func print_node(_ n: Node) {
        print(_p((((("Node(key=" + _p(n.key)) + ", freq=") + _p(n.freq)) + ")")))
    }
    func print_binary_search_tree(_ root: [[Int]], _ keys: [Int], _ i: Int, _ j: Int, _ parent: Int, _ is_left: Bool) {
        if (((i > j) || (i < 0)) || (j > (_int(((root).count)) &- 1))) {
            return
        }
        let node = (_idx(_idx(root, i)!, j) as? Int ?? 0)
        if (parent == _int(-1)) {
            print(_p((_p((_idx(keys, node) as? Int ?? 0)) + " is the root of the binary search tree.")))
        } else {
            if is_left {
                print(_p((((_p((_idx(keys, node) as? Int ?? 0)) + " is the left child of key ") + _p(parent)) + ".")))
            } else {
                print(_p((((_p((_idx(keys, node) as? Int ?? 0)) + " is the right child of key ") + _p(parent)) + ".")))
            }
        }
        _ = print_binary_search_tree((root as! [[Int]]), (keys as! [Int]), i, (node &- 1), (_idx(keys, node) as? Int ?? 0), true)
        _ = print_binary_search_tree((root as! [[Int]]), (keys as! [Int]), (node &+ 1), j, (_idx(keys, node) as? Int ?? 0), false)
    }
    func find_optimal_binary_search_tree(_ original_nodes: [Node]) {
        var nodes: [Node] = (sort_nodes((original_nodes as! [Node])) as! [Node])
        let n = _int(((nodes).count))
        var keys: [Int] = ([] as! [Int])
        var freqs: [Int] = ([] as! [Int])
        var i = 0
        while (i < n) {
            let node = (_idx(nodes, i) as! Node)
            keys = (_append(keys, node.key) as! [Int])
            freqs = (_append(freqs, node.freq) as! [Int])
            i = _int((i &+ 1))
        }
        var dp: [[Int]] = ([] as! [[Int]])
        var total: [[Int]] = ([] as! [[Int]])
        var root: [[Int]] = ([] as! [[Int]])
        i = 0
        while (i < n) {
            var dp_row: [Int] = ([] as! [Int])
            var total_row: [Int] = ([] as! [Int])
            var root_row: [Int] = ([] as! [Int])
            var j = 0
            while (j < n) {
                if (i == j) {
                    dp_row = (_append(dp_row, (_idx(freqs, i) as? Int ?? 0)) as! [Int])
                    total_row = (_append(total_row, (_idx(freqs, i) as? Int ?? 0)) as! [Int])
                    root_row = (_append(root_row, i) as! [Int])
                } else {
                    dp_row = (_append(dp_row, 0) as! [Int])
                    total_row = (_append(total_row, 0) as! [Int])
                    root_row = (_append(root_row, 0) as! [Int])
                }
                j = _int((j &+ 1))
            }
            dp = (_append(dp, dp_row) as! [[Int]])
            total = (_append(total, total_row) as! [[Int]])
            root = (_append(root, root_row) as! [[Int]])
            i = _int((i &+ 1))
        }
        var interval_length = 2
        let INF = 2147483647
        while (interval_length <= n) {
            i = 0
            while (i < ((n &- interval_length) &+ 1)) {
                let j = ((i &+ interval_length) &- 1)
                var _tmp5 = (_idx(dp, i) as! [Int])
                _tmp5 = _set(_tmp5, j, Int(INF))
                dp = _set(dp, i, (_tmp5 as! [Int]))
                var _tmp6 = (_idx(total, i) as! [Int])
                _tmp6 = _set(_tmp6, j, _int(((_idx(_idx(total, i)!, (j &- 1)) as? Int ?? 0) &+ (_idx(freqs, j) as? Int ?? 0))))
                total = _set(total, i, (_tmp6 as! [Int]))
                var r = (_idx(_idx(root, i)!, (j &- 1)) as? Int ?? 0)
                while (r <= (_idx(_idx(root, (i &+ 1))!, j) as? Int ?? 0)) {
                    let left = _int(((r != i) ? (_idx(_idx(dp, i)!, (r &- 1)) as? Int ?? 0) : 0))
                    let right = _int(((r != j) ? (_idx(_idx(dp, (r &+ 1))!, j) as? Int ?? 0) : 0))
                    let cost = ((left &+ (_idx(_idx(total, i)!, j) as? Int ?? 0)) &+ right)
                    if ((_idx(_idx(dp, i)!, j) as? Int ?? 0) > cost) {
                        var _tmp7 = (_idx(dp, i) as! [Int])
                        _tmp7 = _set(_tmp7, j, Int(cost))
                        dp = _set(dp, i, (_tmp7 as! [Int]))
                        var _tmp8 = (_idx(root, i) as! [Int])
                        _tmp8 = _set(_tmp8, j, Int(r))
                        root = _set(root, i, (_tmp8 as! [Int]))
                    }
                    r = _int((r &+ 1))
                }
                i = _int((i &+ 1))
            }
            interval_length = _int((interval_length &+ 1))
        }
        print(_p("Binary search tree nodes:"))
        i = 0
        while (i < n) {
            _ = print_node((_idx(nodes, i) as! Node))
            i = _int((i &+ 1))
        }
        print(_p((("\nThe cost of optimal BST for given tree nodes is " + _p((_idx(_idx(dp, 0)!, (n &- 1)) as? Int ?? 0))) + ".")))
        _ = print_binary_search_tree((root as! [[Int]]), (keys as! [Int]), 0, (n &- 1), _int(-1), false)
    }
    func main() {
        let nodes: [Node] = ({
            var _arr: [Node] = []
            _arr = _append(_arr, Node(key: 12, freq: 8))
            _arr = _append(_arr, Node(key: 10, freq: 34))
            _arr = _append(_arr, Node(key: 20, freq: 50))
            _arr = _append(_arr, Node(key: 42, freq: 3))
            _arr = _append(_arr, Node(key: 25, freq: 40))
            _arr = _append(_arr, Node(key: 37, freq: 30))
            return _arr
        }() as! [Node])
        _ = find_optimal_binary_search_tree((nodes as! [Node]))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
