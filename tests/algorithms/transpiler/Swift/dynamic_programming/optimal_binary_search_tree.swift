// Generated by Mochi transpiler v0.10.59 on 2025-08-07 00:32:20 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
struct Node: Codable {
    var key: Int
    var freq: Int
    init() {
        self.key = 0
        self.freq = 0
    }
    init(key: Int, freq: Int) {
        self.key = key
        self.freq = freq
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func sort_nodes(_ nodes: [Node?]) -> [Node?] {
        var arr: [Node?] = nodes
        var i: Int = 1
        while (i < Int(((arr).count))) {
            let key_node = (arr[i] as! Node)
            var j: Int = (i &- 1)
            while (j >= 0) {
                let temp = (arr[j] as! Node)
                if (temp.key > key_node.key) {
                    arr = _set(arr, (j &+ 1), (temp as! Node))
                    j = Int((j &- 1))
                } else {
                    break
                }
            }
            arr = _set(arr, (j &+ 1), (key_node as! Node))
            i = Int((i &+ 1))
        }
        return arr
    }
    func print_node(_ n: Node) {
        print(_p((((("Node(key=" + String(describing: n.key)) + ", freq=") + String(describing: n.freq)) + ")")))
    }
    func print_binary_search_tree(_ root: [[Int?]], _ keys: [Int?], _ i: Int, _ j: Int, _ parent: Int, _ is_left: Bool) {
        if (((i > j) || (i < 0)) || (j > (Int(((root).count)) &- 1))) {
            return
        }
        let node = (root[i][j] as? Int ?? 0)
        if (parent == Int(-1)) {
            print(_p((String(describing: (keys[node] as? Int ?? 0)) + " is the root of the binary search tree.")))
        } else {
            if is_left {
                print(_p((((String(describing: (keys[node] as? Int ?? 0)) + " is the left child of key ") + String(describing: parent)) + ".")))
            } else {
                print(_p((((String(describing: (keys[node] as? Int ?? 0)) + " is the right child of key ") + String(describing: parent)) + ".")))
            }
        }
        _ = print_binary_search_tree((root as! [[Int?]]), (keys as! [Int?]), i, (node &- 1), (keys[node] as? Int ?? 0), true)
        _ = print_binary_search_tree((root as! [[Int?]]), (keys as! [Int?]), (node &+ 1), j, (keys[node] as? Int ?? 0), false)
    }
    func find_optimal_binary_search_tree(_ original_nodes: [Node?]) {
        var nodes: [Node?] = (sort_nodes((original_nodes as! [Node?])) as! [Node?])
        let n = Int(((nodes).count))
        var keys: [Int?] = ([] as! [Int?])
        var freqs: [Int?] = ([] as! [Int?])
        var i: Int = 0
        while (i < n) {
            let node = (nodes[i] as! Node)
            keys = (_append(keys, node.key) as! [Int?])
            freqs = (_append(freqs, node.freq) as! [Int?])
            i = Int((i &+ 1))
        }
        var dp: [[Int?]] = ([] as! [[Int?]])
        var total: [[Int?]] = ([] as! [[Int?]])
        var root: [[Int?]] = ([] as! [[Int?]])
        i = 0
        while (i < n) {
            var dp_row: [Int?] = ([] as! [Int?])
            var total_row: [Int?] = ([] as! [Int?])
            var root_row: [Int?] = ([] as! [Int?])
            var j: Int = 0
            while (j < n) {
                if (i == j) {
                    dp_row = (_append(dp_row, (freqs[i] as? Int ?? 0)) as! [Int?])
                    total_row = (_append(total_row, (freqs[i] as? Int ?? 0)) as! [Int?])
                    root_row = (_append(root_row, i) as! [Int?])
                } else {
                    dp_row = (_append(dp_row, 0) as! [Int?])
                    total_row = (_append(total_row, 0) as! [Int?])
                    root_row = (_append(root_row, 0) as! [Int?])
                }
                j = Int((j &+ 1))
            }
            dp = (_append(dp, dp_row) as! [[Int?]])
            total = (_append(total, total_row) as! [[Int?]])
            root = (_append(root, root_row) as! [[Int?]])
            i = Int((i &+ 1))
        }
        var interval_length: Int = 2
        let INF = 2147483647
        while (interval_length <= n) {
            i = 0
            while (i < ((n &- interval_length) &+ 1)) {
                let j = ((i &+ interval_length) &- 1)
                dp[i][j] = (INF as! Int)
                total[i][j] = Int(((total[i][(j &- 1)] as? Int ?? 0) &+ (freqs[j] as? Int ?? 0)))
                var r: Int = (root[i][(j &- 1)] as? Int ?? 0)
                while (r <= (root[(i &+ 1)][j] as? Int ?? 0)) {
                    let left = Int(((r != i) ? (dp[i][(r &- 1)] as? Int ?? 0) : 0))
                    let right = Int(((r != j) ? (dp[(r &+ 1)][j] as? Int ?? 0) : 0))
                    let cost = ((left &+ (total[i][j] as? Int ?? 0)) &+ right)
                    if ((dp[i][j] as? Int ?? 0) > cost) {
                        dp[i][j] = (cost as! Int)
                        root[i][j] = (r as! Int)
                    }
                    r = Int((r &+ 1))
                }
                i = Int((i &+ 1))
            }
            interval_length = Int((interval_length &+ 1))
        }
        print(_p("Binary search tree nodes:"))
        i = 0
        while (i < n) {
            _ = print_node((nodes[i] as! Node))
            i = Int((i &+ 1))
        }
        print(_p((("\nThe cost of optimal BST for given tree nodes is " + String(describing: (dp[0][(n &- 1)] as? Int ?? 0))) + ".")))
        _ = print_binary_search_tree((root as! [[Int?]]), (keys as! [Int?]), 0, (n &- 1), Int(-1), false)
    }
    func main() {
        let nodes: [Node?] = ([Node(key: 12, freq: 8), Node(key: 10, freq: 34), Node(key: 20, freq: 50), Node(key: 42, freq: 3), Node(key: 25, freq: 40), Node(key: 37, freq: 30)] as! [Node?])
        _ = find_optimal_binary_search_tree((nodes as! [Node?]))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
