// Generated by Mochi transpiler v0.10.59 on 2025-08-07 00:31:45 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let INF = 1000000000
    func matrix_chain_multiply(_ arr: [Int?]) -> Int {
        if (Int(((arr).count)) < 2) {
            return 0
        }
        let n = Int(((arr).count))
        var dp: [[Int?]] = ([] as! [[Int?]])
        var i: Int = 0
        while (i < n) {
            var row: [Int?] = ([] as! [Int?])
            var j: Int = 0
            while (j < n) {
                row = (_append(row, INF) as! [Int?])
                j = Int((j &+ 1))
            }
            dp = (_append(dp, row) as! [[Int?]])
            i = Int((i &+ 1))
        }
        i = Int((n &- 1))
        while (i > 0) {
            var j: Int = i
            while (j < n) {
                if (i == j) {
                    dp[i][j] = 0
                } else {
                    var k: Int = i
                    while (k < j) {
                        let cost = (((dp[i][k] as? Int ?? 0) &+ (dp[(k &+ 1)][j] as? Int ?? 0)) &+ (((arr[(i &- 1)] as? Int ?? 0) &* (arr[k] as? Int ?? 0)) &* (arr[j] as? Int ?? 0)))
                        if (cost < (dp[i][j] as? Int ?? 0)) {
                            dp[i][j] = (cost as! Int)
                        }
                        k = Int((k &+ 1))
                    }
                }
                j = Int((j &+ 1))
            }
            i = Int((i &- 1))
        }
        return (dp[1][(n &- 1)] as? Int ?? 0)
    }
    do {
        assert((Int(matrix_chain_multiply(([1, 2, 3, 4, 3] as! [Int?]))) == 30))
    }
    do {
        assert((Int(matrix_chain_multiply(([10] as! [Int?]))) == 0))
    }
    do {
        assert((Int(matrix_chain_multiply(([10, 20] as! [Int?]))) == 0))
    }
    do {
        assert((Int(matrix_chain_multiply(([19, 2, 19] as! [Int?]))) == 722))
    }
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
