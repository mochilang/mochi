// Generated by Mochi transpiler v0.10.59 on 2025-08-07 00:32:12 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func minimum_subarray_sum(_ target: Int, _ numbers: [Int?]) -> Int {
        let n = Int(((numbers).count))
        if (n == 0) {
            return 0
        }
        if (target == 0) {
            var i: Int = 0
            while (i < n) {
                if ((numbers[i] as? Int ?? 0) == 0) {
                    return 0
                }
                i = Int((i &+ 1))
            }
        }
        var left: Int = 0
        var right: Int = 0
        var curr_sum: Int = 0
        var min_len: Int = (n &+ 1)
        while (right < n) {
            curr_sum = Int((curr_sum &+ (numbers[right] as? Int ?? 0)))
            while ((curr_sum >= target) && (left <= right)) {
                let current_len = ((right &- left) &+ 1)
                if (current_len < min_len) {
                    min_len = (current_len as! Int)
                }
                curr_sum = Int((curr_sum &- (numbers[left] as? Int ?? 0)))
                left = Int((left &+ 1))
            }
            right = Int((right &+ 1))
        }
        if (min_len == (n &+ 1)) {
            return 0
        }
        return min_len
    }
    print(_p(String(describing: Int(minimum_subarray_sum(7, ([2, 3, 1, 2, 4, 3] as! [Int?]))))))
    print(_p(String(describing: Int(minimum_subarray_sum(7, ([2, 3, -1, 2, 4, -3] as! [Int?]))))))
    print(_p(String(describing: Int(minimum_subarray_sum(11, ([1, 1, 1, 1, 1, 1, 1, 1] as! [Int?]))))))
    print(_p(String(describing: Int(minimum_subarray_sum(0, ([1, 2, 3] as! [Int?]))))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
