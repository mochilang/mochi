// Generated by Mochi transpiler v0.10.59 on 2025-08-07 00:32:02 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func max_subarray_sum(_ nums: [Double?], _ allow_empty: Bool) -> Double {
        if (Int(((nums).count)) == 0) {
            return 0.0
        }
        var max_sum: Double = 0.0
        var curr_sum: Double = 0.0
        if allow_empty {
            max_sum = 0.0
            curr_sum = 0.0
            var i: Int = 0
            while (i < Int(((nums).count))) {
                let num = Double(nums[i])
                let temp = (curr_sum + num)
                curr_sum = Double(((temp > 0.0) ? temp : 0.0))
                if (curr_sum > max_sum) {
                    max_sum = Double(curr_sum)
                }
                i = Int((i &+ 1))
            }
        } else {
            max_sum = Double(nums[0])
            curr_sum = Double(nums[0])
            var i: Int = 1
            while (i < Int(((nums).count))) {
                let num = Double(nums[i])
                let temp = (curr_sum + num)
                curr_sum = Double(((temp > num) ? temp : num))
                if (curr_sum > max_sum) {
                    max_sum = Double(curr_sum)
                }
                i = Int((i &+ 1))
            }
        }
        return max_sum
    }
    print(_p(String(describing: Double(max_subarray_sum(([2.0, 8.0, 9.0] as! [Double?]), false)))))
    print(_p(String(describing: Double(max_subarray_sum(([0.0, 0.0] as! [Double?]), false)))))
    print(_p(String(describing: Double(max_subarray_sum(([-1.0, 0.0, 1.0] as! [Double?]), false)))))
    print(_p(String(describing: Double(max_subarray_sum(([1.0, 2.0, 3.0, 4.0, -2.0] as! [Double?]), false)))))
    print(_p(String(describing: Double(max_subarray_sum(([-2.0, 1.0, -3.0, 4.0, -1.0, 2.0, 1.0, -5.0, 4.0] as! [Double?]), false)))))
    print(_p(String(describing: Double(max_subarray_sum(([2.0, 3.0, -9.0, 8.0, -2.0] as! [Double?]), false)))))
    print(_p(String(describing: Double(max_subarray_sum(([-2.0, -3.0, -1.0, -4.0, -6.0] as! [Double?]), false)))))
    print(_p(String(describing: Double(max_subarray_sum(([-2.0, -3.0, -1.0, -4.0, -6.0] as! [Double?]), true)))))
    var empty: [Double?] = ([] as! [Double?])
    print(_p(String(describing: Double(max_subarray_sum((empty as! [Double?]), false)))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
