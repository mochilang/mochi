// Generated by Mochi transpiler v0.10.64 on 2025-08-13 07:22:48 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
struct Fibonacci: Codable {
    var sequence: [Int]
    init() {
        self.sequence = []
    }
    init(sequence: [Int]) {
        self.sequence = sequence
    }
}
struct FibGetResult: Codable {
    var fib: Fibonacci
    var values: [Int]
    init() {
        self.fib = Fibonacci()
        self.values = []
    }
    init(fib: Fibonacci, values: [Int]) {
        self.fib = fib
        self.values = values
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func create_fibonacci() -> Fibonacci {
        return Fibonacci(sequence: ({
            var _arr: [Int] = []
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 1)
            return _arr
        }() as! [Int]))
    }
    func fib_get(_ f: inout Fibonacci, _ index: Int) -> FibGetResult {
        var seq = f.sequence
        while (_int(((seq).count)) < index) {
            let next = ((_idx(seq, (_int(((seq).count)) &- 1)) as? Int ?? 0) &+ (_idx(seq, (_int(((seq).count)) &- 2)) as? Int ?? 0))
            seq = (_append(seq, next) as! [Int])
        }
        f.sequence = (seq as! [Int])
        var result: [Int] = ([] as! [Int])
        var i = 0
        while (i < index) {
            result = (_append(result, (_idx(seq, i) as? Int ?? 0)) as! [Int])
            i = _int((i &+ 1))
        }
        return FibGetResult(fib: (f as! Fibonacci), values: (result as! [Int]))
    }
    func main() {
        var fib = create_fibonacci()
        var res = fib_get(&fib, 10)
        fib = (res.fib as! Fibonacci)
        print(_p("[" + res.values.map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
        res = (fib_get(&fib, 5) as! FibGetResult)
        fib = (res.fib as! Fibonacci)
        print(_p("[" + res.values.map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
