// Generated by Mochi transpiler v0.10.59 on 2025-08-07 00:32:08 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func min_int(_ a: Int, _ b: Int) -> Int {
        if (a < b) {
            return a
        }
        return b
    }
    func minimum_cost_path(_ matrix: inout [[Int?]]) -> Int {
        let rows = Int(((matrix).count))
        let cols = Int((((matrix[0] as! [Int?])).count))
        var j: Int = 1
        while (j < cols) {
            var row0: [Int?] = (matrix[0] as! [Int?])
            row0 = _set(row0, j, Int(((row0[j] as? Int ?? 0) &+ (row0[(j &- 1)] as? Int ?? 0))))
            matrix = _set(matrix, 0, (row0 as! [Int?]))
            j = Int((j &+ 1))
        }
        var i: Int = 1
        while (i < rows) {
            var row: [Int?] = (matrix[i] as! [Int?])
            row = _set(row, 0, Int(((row[0] as? Int ?? 0) &+ (matrix[(i &- 1)][0] as? Int ?? 0))))
            matrix = _set(matrix, i, (row as! [Int?]))
            i = Int((i &+ 1))
        }
        i = 1
        while (i < rows) {
            var row: [Int?] = (matrix[i] as! [Int?])
            j = 1
            while (j < cols) {
                let up = (matrix[(i &- 1)][j] as? Int ?? 0)
                let left = (row[(j &- 1)] as? Int ?? 0)
                let best = Int(min_int(up, left))
                row = _set(row, j, Int(((row[j] as? Int ?? 0) &+ best)))
                j = Int((j &+ 1))
            }
            matrix = _set(matrix, i, (row as! [Int?]))
            i = Int((i &+ 1))
        }
        return (matrix[(rows &- 1)][(cols &- 1)] as? Int ?? 0)
    }
    var m1: [[Int?]] = ([([2, 1] as! [Int?]), ([3, 1] as! [Int?]), ([4, 2] as! [Int?])] as! [[Int?]])
    var m2: [[Int?]] = ([([2, 1, 4] as! [Int?]), ([2, 1, 3] as! [Int?]), ([3, 2, 1] as! [Int?])] as! [[Int?]])
    print(_p(String(describing: Int(minimum_cost_path(&m1)))))
    print(_p(String(describing: Int(minimum_cost_path(&m2)))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
