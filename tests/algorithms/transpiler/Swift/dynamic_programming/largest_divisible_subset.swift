// Generated by Mochi transpiler v0.10.59 on 2025-08-07 00:31:31 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func sort_list(_ nums: [Int?]) -> [Int?] {
        var arr: [Int?] = nums
        var i: Int = 1
        while (i < Int(((arr).count))) {
            let key = (arr[i] as? Int ?? 0)
            var j: Int = (i &- 1)
            while ((j >= 0) && ((arr[j] as? Int ?? 0) > key)) {
                arr = _set(arr, (j &+ 1), (arr[j] as? Int ?? 0))
                j = Int((j &- 1))
            }
            arr = _set(arr, (j &+ 1), (key as! Int))
            i = Int((i &+ 1))
        }
        return arr
    }
    func largest_divisible_subset(_ items: [Int?]) -> [Int?] {
        if (Int(((items).count)) == 0) {
            return ([] as! [Int?])
        }
        var nums: [Int?] = (sort_list((items as! [Int?])) as! [Int?])
        let n = Int(((nums).count))
        var memo: [Int?] = ([] as! [Int?])
        var prev: [Int?] = ([] as! [Int?])
        var i: Int = 0
        while (i < n) {
            memo = (_append(memo, 1) as! [Int?])
            prev = (_append(prev, i) as! [Int?])
            i = Int((i &+ 1))
        }
        i = 0
        while (i < n) {
            var j: Int = 0
            while (j < i) {
                if ((((nums[j] as? Int ?? 0) == 0) || ((((nums[i] as? Int ?? 0) % (nums[j] as? Int ?? 0) + (nums[j] as? Int ?? 0)) % (nums[j] as? Int ?? 0)) == 0)) && (((memo[j] as? Int ?? 0) &+ 1) > (memo[i] as? Int ?? 0))) {
                    memo = _set(memo, i, Int(((memo[j] as? Int ?? 0) &+ 1)))
                    prev = _set(prev, i, (j as! Int))
                }
                j = Int((j &+ 1))
            }
            i = Int((i &+ 1))
        }
        var ans: Int = (0 &- 1)
        var last_index: Int = (0 &- 1)
        i = 0
        while (i < n) {
            if ((memo[i] as? Int ?? 0) > ans) {
                ans = (memo[i] as? Int ?? 0)
                last_index = (i as! Int)
            }
            i = Int((i &+ 1))
        }
        if (last_index == (0 &- 1)) {
            return ([] as! [Int?])
        }
        var result: [Int?] = ([(nums[last_index] as? Int ?? 0)] as! [Int?])
        while ((prev[last_index] as? Int ?? 0) != last_index) {
            last_index = (prev[last_index] as? Int ?? 0)
            result = (_append(result, (nums[last_index] as? Int ?? 0)) as! [Int?])
        }
        return result
    }
    func main() {
        let items: [Int?] = ([1, 16, 7, 8, 4] as! [Int?])
        let subset: [Int?] = (largest_divisible_subset((items as! [Int?])) as! [Int?])
        print(_p((((("The longest divisible subset of " + "[" + items.map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]") + " is ") + "[" + subset.map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]") + ".")))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
