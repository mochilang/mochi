// Generated by Mochi transpiler v0.10.72 on 2025-08-25 08:40:54 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.isNaN || d.isInfinite {
                return String(d)
            }
            if d.rounded(.towardZero) == d {
                // avoid overflow when converting to Int64
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _num(_ v: Any) -> Double {
    if let d = v as? Double { return d }
    if let i = v as? Int { return Double(i) }
    if let i = v as? Int64 { return Double(i) }
    return 0
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first!
}
func _idx<K: Hashable, V>(_ m: [K: V], _ k: K) -> V? {
    return m[k]
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    var i = idx
    if i < 0 { i += out.count }
    if i < out.count {
        out[i] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: i - out.count + 1))
        out[i] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
func _slice<T>(_ xs: [T], _ start: Int, _ end: Int) -> [T] {
    var s = start
    var e = end
    if s < 0 { s = 0 }
    if e > xs.count { e = xs.count }
    if s > e { s = e }
    return Array(xs[s..<e])
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func recursive_match(_ text: String, _ pattern: String) -> Bool {
        if ((_int(((pattern).count)) == 0)) {
            return (_int(((text).count)) == 0)
        }
        if ((_int(((text).count)) == 0)) {
            if (((_int(((pattern).count)) >= 2) && (String(describing: String(_slice(Array(pattern), (_int(((pattern).count)) &- 1), _int(((pattern).count))))) == "*"))) {
                return recursive_match((text as! String), String(describing: String(_slice(Array(pattern), 0, (_int(((pattern).count)) &- 2)))))
            }
            return false
        }
        let last_text = String(describing: String(_slice(Array(text), (_int(((text).count)) &- 1), _int(((text).count)))))
        let last_pattern = String(describing: String(_slice(Array(pattern), (_int(((pattern).count)) &- 1), _int(((pattern).count)))))
        if (((last_text == last_pattern) || (last_pattern == "."))) {
            return recursive_match(String(describing: String(_slice(Array(text), 0, (_int(((text).count)) &- 1)))), String(describing: String(_slice(Array(pattern), 0, (_int(((pattern).count)) &- 1)))))
        }
        if ((last_pattern == "*")) {
            if (recursive_match(String(describing: String(_slice(Array(text), 0, (_int(((text).count)) &- 1)))), (pattern as! String))) {
                return true
            }
            return recursive_match((text as! String), String(describing: String(_slice(Array(pattern), 0, (_int(((pattern).count)) &- 2)))))
        }
        return false
    }
    func dp_match(_ text: String, _ pattern: String) -> Bool {
        let m = _int(((text).count))
        let n = _int(((pattern).count))
        var dp: [[Bool]] = ([] as! [[Bool]])
        var i = 0
        while ((i <= m)) {
            var row: [Bool] = ([] as! [Bool])
            var j = 0
            while ((j <= n)) {
                row = (_append(row, false) as! [Bool])
                j = _int((j &+ 1))
            }
            dp = (_append(dp, row) as! [[Bool]])
            i = _int((i &+ 1))
        }
        var _tmp7 = (_idx(dp, 0) as! [Bool])
        _tmp7 = _set(_tmp7, 0, { let _tmp12 = true; return _tmp12 }())
        dp = _set(dp, 0, { let _tmp13 = (_tmp7 as! [Bool]); return _tmp13 }())
        var j = 1
        while ((j <= n)) {
            if (((String(describing: String(_slice(Array(pattern), (j &- 1), j))) == "*") && (j >= 2))) {
                if ((_idx(_idx(dp, 0), (j &- 2)) as! Bool)) {
                    var _tmp8 = (_idx(dp, 0) as! [Bool])
                    _tmp8 = _set(_tmp8, j, { let _tmp14 = true; return _tmp14 }())
                    dp = _set(dp, 0, { let _tmp15 = (_tmp8 as! [Bool]); return _tmp15 }())
                }
            }
            j = _int((j &+ 1))
        }
        i = 1
        while ((i <= m)) {
            j = 1
            while ((j <= n)) {
                let p_char = String(describing: String(_slice(Array(pattern), (j &- 1), j)))
                let t_char = String(describing: String(_slice(Array(text), (i &- 1), i)))
                if (((p_char == ".") || (p_char == t_char))) {
                    if ((_idx(_idx(dp, (i &- 1)), (j &- 1)) as! Bool)) {
                        var _tmp9 = (_idx(dp, i) as! [Bool])
                        _tmp9 = _set(_tmp9, j, { let _tmp16 = true; return _tmp16 }())
                        dp = _set(dp, i, { let _tmp17 = (_tmp9 as! [Bool]); return _tmp17 }())
                    }
                } else if ((p_char == "*")) {
                    if ((j >= 2)) {
                        if ((_idx(_idx(dp, i), (j &- 2)) as! Bool)) {
                            var _tmp10 = (_idx(dp, i) as! [Bool])
                            _tmp10 = _set(_tmp10, j, { let _tmp18 = true; return _tmp18 }())
                            dp = _set(dp, i, { let _tmp19 = (_tmp10 as! [Bool]); return _tmp19 }())
                        }
                        let prev_p = String(describing: String(_slice(Array(pattern), (j &- 2), (j &- 1))))
                        if (((prev_p == ".") || (prev_p == t_char))) {
                            if ((_idx(_idx(dp, (i &- 1)), j) as! Bool)) {
                                var _tmp11 = (_idx(dp, i) as! [Bool])
                                _tmp11 = _set(_tmp11, j, { let _tmp20 = true; return _tmp20 }())
                                dp = _set(dp, i, { let _tmp21 = (_tmp11 as! [Bool]); return _tmp21 }())
                            }
                        }
                    }
                } else {
                    var _tmp12 = (_idx(dp, i) as! [Bool])
                    _tmp12 = _set(_tmp12, j, { let _tmp22 = false; return _tmp22 }())
                    dp = _set(dp, i, { let _tmp23 = (_tmp12 as! [Bool]); return _tmp23 }())
                }
                
                j = _int((j &+ 1))
            }
            i = _int((i &+ 1))
        }
        return (_idx(_idx(dp, m), n) as! Bool)
    }
    func print_bool(_ b: Bool) {
        if (b) {
            print(_p(true))
        } else {
            print(_p(false))
        }
    }
    _ = print_bool(recursive_match("abc", "a.c"))
    _ = print_bool(recursive_match("abc", "af*.c"))
    _ = print_bool(recursive_match("abc", "a.c*"))
    _ = print_bool(recursive_match("abc", "a.c*d"))
    _ = print_bool(recursive_match("aa", ".*"))
    _ = print_bool(dp_match("abc", "a.c"))
    _ = print_bool(dp_match("abc", "af*.c"))
    _ = print_bool(dp_match("abc", "a.c*"))
    _ = print_bool(dp_match("abc", "a.c*d"))
    _ = print_bool(dp_match("aa", ".*"))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
