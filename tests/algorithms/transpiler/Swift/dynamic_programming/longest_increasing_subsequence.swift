// Generated by Mochi transpiler v0.10.59 on 2025-08-07 00:31:38 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _concat<T>(_ a: [T], _ b: [T]) -> [T] {
    var out = a
    out.append(contentsOf: b)
    return out
}
func _len(_ v: Any) -> Int {
    if let s = v as? String { return Array(s).count }
    if let a = v as? [Any] { return a.count }
    if let a = v as? [Double] { return a.count }
    if let a = v as? [Int] { return a.count }
    if let m = v as? [AnyHashable: Any] { return m.count }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func longest_subsequence(_ xs: [Int?]) -> [Int?] {
        let n = Int(((xs).count))
        if (n <= 1) {
            return xs
        }
        let pivot = (xs[0] as? Int ?? 0)
        var is_found: Bool = false
        var i: Int = 1
        var longest_subseq: [Int?] = ([] as! [Int?])
        while ((!is_found) && (i < n)) {
            if ((xs[i] as? Int ?? 0) < pivot) {
                is_found = true
                var temp_array: Any? = Array(xs[i..<n])
                temp_array = (longest_subsequence((temp_array as! [Int?])) as! [Int?])
                if (Int(_len(temp_array)) > Int(((longest_subseq).count))) {
                    longest_subseq = (temp_array as! [Int?])
                }
            } else {
                i = Int((i &+ 1))
            }
        }
        var filtered: [Int?] = ([] as! [Int?])
        var j: Int = 1
        while (j < n) {
            if ((xs[j] as? Int ?? 0) >= pivot) {
                filtered = (_append(filtered, (xs[j] as? Int ?? 0)) as! [Int?])
            }
            j = Int((j &+ 1))
        }
        var candidate: [Int?] = ([] as! [Int?])
        candidate = (_append(candidate, pivot) as! [Int?])
        candidate = ((_concat(candidate, (longest_subsequence((filtered as! [Int?])) as! [Int?])) as! [Any??]) as! [Int?])
        if (Int(((candidate).count)) > Int(((longest_subseq).count))) {
            return candidate
        } else {
            return longest_subseq
        }
    }
    do {
        assert(((longest_subsequence(([10, 22, 9, 33, 21, 50, 41, 60, 80] as! [Int?])) as! [Int?]) == ([10, 22, 33, 41, 60, 80] as! [Int?])))
        assert(((longest_subsequence(([4, 8, 7, 5, 1, 12, 2, 3, 9] as! [Int?])) as! [Int?]) == ([1, 2, 3, 9] as! [Int?])))
        assert(((longest_subsequence(([28, 26, 12, 23, 35, 39] as! [Int?])) as! [Int?]) == ([12, 23, 35, 39] as! [Int?])))
        assert(((longest_subsequence(([9, 8, 7, 6, 5, 7] as! [Int?])) as! [Int?]) == ([5, 7] as! [Int?])))
        assert(((longest_subsequence(([1, 1, 1] as! [Int?])) as! [Int?]) == ([1, 1, 1] as! [Int?])))
        assert(((longest_subsequence(([] as! [Int?])) as! [Int?]) == []))
    }
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
