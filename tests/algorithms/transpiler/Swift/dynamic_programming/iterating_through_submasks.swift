// Generated by Mochi transpiler v0.10.59 on 2025-08-07 00:31:27 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func bitwise_and(_ a: Int, _ b: Int) -> Int {
        var result: Int = 0
        var bit: Int = 1
        var x: Int = a
        var y: Int = b
        while ((x > 0) || (y > 0)) {
            let abit = ((x % 2 + 2) % 2)
            let bbit = ((y % 2 + 2) % 2)
            if ((abit == 1) && (bbit == 1)) {
                result = Int((result &+ bit))
            }
            x = Int((x / 2))
            y = Int((y / 2))
            bit = Int((bit &* 2))
        }
        return result
    }
    func list_of_submasks(_ mask: Int) -> [Int?] {
        if (mask <= 0) {
            _ = fatalError(("mask needs to be positive integer, your input " + String(describing: mask)))
        }
        var all_submasks: [Int?] = ([] as! [Int?])
        var submask: Int = mask
        while (submask != 0) {
            all_submasks = (_append(all_submasks, submask) as! [Int?])
            submask = Int(bitwise_and((submask &- 1), mask))
        }
        return all_submasks
    }
    print(_p("[" + (list_of_submasks(15) as! [Int?]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    print(_p("[" + (list_of_submasks(13) as! [Int?]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
