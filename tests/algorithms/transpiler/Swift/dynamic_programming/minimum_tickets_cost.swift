// Generated by Mochi transpiler v0.10.61 on 2025-08-08 19:03:28 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func make_list(_ len: Int, _ value: Int) -> [Int] {
        var arr: [Int] = ([] as! [Int])
        var i = 0
        while (i < len) {
            arr = (_append(arr, value) as! [Int])
            i = _int((i &+ 1))
        }
        return arr
    }
    func max_int(_ a: Int, _ b: Int) -> Int {
        if (a > b) {
            return a
        } else {
            return b
        }
    }
    func min_int(_ a: Int, _ b: Int) -> Int {
        if (a < b) {
            return a
        } else {
            return b
        }
    }
    func min3(_ a: Int, _ b: Int, _ c: Int) -> Int {
        return _int(min_int(_int(min_int(a, b)), c))
    }
    func minimum_tickets_cost(_ days: [Int], _ costs: [Int]) -> Int {
        if (_int(((days).count)) == 0) {
            return 0
        }
        var last_day = (_idx(days, (_int(((days).count)) &- 1)) as? Int ?? 0)
        var dp = (make_list((last_day &+ 1), 0) as! [Int])
        var day_index = 0
        var d = 1
        while (d <= last_day) {
            if ((day_index < _int(((days).count))) && (d == (_idx(days, day_index) as? Int ?? 0))) {
                let cost1 = ((_idx(dp, (d &- 1)) as? Int ?? 0) &+ (_idx(costs, 0) as? Int ?? 0))
                let cost7 = ((_idx(dp, _int(max_int(0, (d &- 7)))) as? Int ?? 0) &+ (_idx(costs, 1) as? Int ?? 0))
                let cost30 = ((_idx(dp, _int(max_int(0, (d &- 30)))) as? Int ?? 0) &+ (_idx(costs, 2) as? Int ?? 0))
                dp = _set(dp, d, _int(min3(cost1, cost7, cost30)))
                day_index = _int((day_index &+ 1))
            } else {
                dp = _set(dp, d, (_idx(dp, (d &- 1)) as? Int ?? 0))
            }
            d = _int((d &+ 1))
        }
        return (_idx(dp, last_day) as? Int ?? 0)
    }
    print(_p(_p(_int(minimum_tickets_cost(({
        var _arr: [Int] = []
        _arr = _append(_arr, 1)
        _arr = _append(_arr, 4)
        _arr = _append(_arr, 6)
        _arr = _append(_arr, 7)
        _arr = _append(_arr, 8)
        _arr = _append(_arr, 20)
        return _arr
    }() as! [Int]), ({
        var _arr: [Int] = []
        _arr = _append(_arr, 2)
        _arr = _append(_arr, 7)
        _arr = _append(_arr, 15)
        return _arr
    }() as! [Int]))))))
    print(_p(_p(_int(minimum_tickets_cost(({
        var _arr: [Int] = []
        _arr = _append(_arr, 1)
        _arr = _append(_arr, 2)
        _arr = _append(_arr, 3)
        _arr = _append(_arr, 4)
        _arr = _append(_arr, 5)
        _arr = _append(_arr, 6)
        _arr = _append(_arr, 7)
        _arr = _append(_arr, 8)
        _arr = _append(_arr, 9)
        _arr = _append(_arr, 10)
        _arr = _append(_arr, 30)
        _arr = _append(_arr, 31)
        return _arr
    }() as! [Int]), ({
        var _arr: [Int] = []
        _arr = _append(_arr, 2)
        _arr = _append(_arr, 7)
        _arr = _append(_arr, 15)
        return _arr
    }() as! [Int]))))))
    print(_p(_p(_int(minimum_tickets_cost(({
        var _arr: [Int] = []
        _arr = _append(_arr, 1)
        _arr = _append(_arr, 2)
        _arr = _append(_arr, 3)
        _arr = _append(_arr, 4)
        _arr = _append(_arr, 5)
        _arr = _append(_arr, 6)
        _arr = _append(_arr, 7)
        _arr = _append(_arr, 8)
        _arr = _append(_arr, 9)
        _arr = _append(_arr, 10)
        _arr = _append(_arr, 30)
        _arr = _append(_arr, 31)
        return _arr
    }() as! [Int]), ({
        var _arr: [Int] = []
        _arr = _append(_arr, 2)
        _arr = _append(_arr, 90)
        _arr = _append(_arr, 150)
        return _arr
    }() as! [Int]))))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
