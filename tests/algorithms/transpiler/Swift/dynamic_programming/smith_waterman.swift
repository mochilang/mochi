// Generated by Mochi transpiler v0.10.59 on 2025-08-07 00:32:31 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func score_function(_ source_char: String, _ target_char: String, _ match_score: Int, _ mismatch_score: Int, _ gap_score: Int) -> Int {
        if ((source_char == "-") || (target_char == "-")) {
            return gap_score
        }
        if (source_char == target_char) {
            return match_score
        }
        return mismatch_score
    }
    func smith_waterman(_ query: String, _ subject: String, _ match_score: Int, _ mismatch_score: Int, _ gap_score: Int) -> [[Int?]] {
        let q = String(describing: ((query as! String).uppercased()))
        let s = String(describing: ((subject as! String).uppercased()))
        let m = Int(((q).count))
        let n = Int(((s).count))
        var score: [[Int?]] = ([] as! [[Int?]])
        for _ in 0..<Int((m &+ 1)) {
            var row: [Int?] = ([] as! [Int?])
            for _2 in 0..<Int((n &+ 1)) {
                row = (_append(row, 0) as! [Int?])
            }
            score = (_append(score, row) as! [[Int?]])
        }
        for i in 1..<Int((m &+ 1)) {
            for j in 1..<Int((n &+ 1)) {
                let qc = String(describing: String(Array(String(describing: (q as! String)))[(i &- 1)..<i]))
                let sc = String(describing: String(Array(String(describing: (s as! String)))[(j &- 1)..<j]))
                let diag = ((score[(i &- 1)][(j &- 1)] as? Int ?? 0) &+ Int(score_function((qc as! String), (sc as! String), match_score, mismatch_score, gap_score)))
                let delete = ((score[(i &- 1)][j] as? Int ?? 0) &+ gap_score)
                let insert = ((score[i][(j &- 1)] as? Int ?? 0) &+ gap_score)
                var max_val: Int = 0
                if (diag > max_val) {
                    max_val = (diag as! Int)
                }
                if (delete > max_val) {
                    max_val = (delete as! Int)
                }
                if (insert > max_val) {
                    max_val = (insert as! Int)
                }
                score[i][j] = (max_val as! Int)
            }
        }
        return score
    }
    func traceback(_ score: [[Int?]], _ query: String, _ subject: String, _ match_score: Int, _ mismatch_score: Int, _ gap_score: Int) -> String {
        let q = String(describing: ((query as! String).uppercased()))
        let s = String(describing: ((subject as! String).uppercased()))
        var max_value: Int = 0
        var i_max: Int = 0
        var j_max: Int = 0
        for i in 0..<Int(((score).count)) {
            for j in 0..<Int((((score[i] as! [Int?])).count)) {
                if ((score[i][j] as? Int ?? 0) > max_value) {
                    max_value = (score[i][j] as? Int ?? 0)
                    i_max = (i as! Int)
                    j_max = (j as! Int)
                }
            }
        }
        var i: Int = i_max
        var j: Int = j_max
        var align1: String = ""
        var align2: String = ""
        let gap_penalty = Int(score_function("-", "-", match_score, mismatch_score, gap_score))
        if ((i == 0) || (j == 0)) {
            return ""
        }
        while ((i > 0) && (j > 0)) {
            let qc = String(describing: String(Array(String(describing: (q as! String)))[(i &- 1)..<i]))
            let sc = String(describing: String(Array(String(describing: (s as! String)))[(j &- 1)..<j]))
            if ((score[i][j] as? Int ?? 0) == ((score[(i &- 1)][(j &- 1)] as? Int ?? 0) &+ Int(score_function((qc as! String), (sc as! String), match_score, mismatch_score, gap_score)))) {
                align1 = ((qc + align1) as! String)
                align2 = ((sc + align2) as! String)
                i = Int((i &- 1))
                j = Int((j &- 1))
            } else if ((score[i][j] as? Int ?? 0) == ((score[(i &- 1)][j] as? Int ?? 0) &+ gap_penalty)) {
                align1 = ((qc + align1) as! String)
                align2 = (("-" + align2) as! String)
                i = Int((i &- 1))
            } else {
                align1 = (("-" + align1) as! String)
                align2 = ((sc + align2) as! String)
                j = Int((j &- 1))
            }
            
        }
        return ((align1 + "\n") + align2)
    }
    let query = "HEAGAWGHEE"
    let subject = "PAWHEAE"
    var score: [[Int?]] = (smith_waterman((query as! String), (subject as! String), 1, -1, -2) as! [[Int?]])
    print(_p(String(describing: traceback((score as! [[Int?]]), (query as! String), (subject as! String), 1, -1, -2))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
