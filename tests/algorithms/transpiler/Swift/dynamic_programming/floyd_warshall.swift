// Generated by Mochi transpiler v0.10.59 on 2025-08-07 00:31:21 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
struct Graph: Codable {
    var n: Int
    var dp: [[Int?]]
    init() {
        self.n = 0
        self.dp = []
    }
    init(n: Int, dp: [[Int?]]) {
        self.n = n
        self.dp = dp
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let INF: Int = 1000000000
    func new_graph(_ n: Int) -> Graph {
        var dp: [[Int?]] = ([] as! [[Int?]])
        var i: Int = 0
        while (i < n) {
            var row: [Int?] = ([] as! [Int?])
            var j: Int = 0
            while (j < n) {
                if (i == j) {
                    row = (_append(row, 0) as! [Int?])
                } else {
                    row = (_append(row, INF) as! [Int?])
                }
                j = Int((j &+ 1))
            }
            dp = (_append(dp, row) as! [[Int?]])
            i = Int((i &+ 1))
        }
        return Graph(n: n, dp: dp)
    }
    func add_edge(_ g: inout Graph, _ u: Int, _ v: Int, _ w: Int) -> Void {
        var dp: [[Int?]] = g.dp
        var row: [Int?] = (dp[u] as! [Int?])
        row = _set(row, v, (w as! Int))
        dp = _set(dp, u, (row as! [Int?]))
        g.dp = (dp as! [[Int?]])
    }
    func floyd_warshall(_ g: inout Graph) -> Void {
        var dp: [[Int?]] = g.dp
        var k: Int = 0
        while (k < g.n) {
            var i: Int = 0
            while (i < g.n) {
                var j: Int = 0
                while (j < g.n) {
                    let alt = ((dp[i][k] as? Int ?? 0) &+ (dp[k][j] as? Int ?? 0))
                    var row: [Int?] = (dp[i] as! [Int?])
                    if (alt < (row[j] as? Int ?? 0)) {
                        row = _set(row, j, (alt as! Int))
                        dp = _set(dp, i, (row as! [Int?]))
                    }
                    j = Int((j &+ 1))
                }
                i = Int((i &+ 1))
            }
            k = Int((k &+ 1))
        }
        g.dp = (dp as! [[Int?]])
    }
    func show_min(_ g: Graph, _ u: Int, _ v: Int) -> Int {
        return (g.dp[u][v] as? Int ?? 0)
    }
    var graph: Graph = new_graph(5)
    _ = add_edge(&graph, 0, 2, 9)
    _ = add_edge(&graph, 0, 4, 10)
    _ = add_edge(&graph, 1, 3, 5)
    _ = add_edge(&graph, 2, 3, 7)
    _ = add_edge(&graph, 3, 0, 10)
    _ = add_edge(&graph, 3, 1, 2)
    _ = add_edge(&graph, 3, 2, 1)
    _ = add_edge(&graph, 3, 4, 6)
    _ = add_edge(&graph, 4, 1, 3)
    _ = add_edge(&graph, 4, 2, 4)
    _ = add_edge(&graph, 4, 3, 9)
    _ = floyd_warshall(&graph)
    print(_p(String(describing: Int(show_min((graph as! Graph), 1, 4)))))
    print(_p(String(describing: Int(show_min((graph as! Graph), 0, 3)))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
