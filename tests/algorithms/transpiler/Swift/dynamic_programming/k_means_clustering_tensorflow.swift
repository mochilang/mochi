// Generated by Mochi transpiler v0.10.61 on 2025-08-08 19:02:08 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
struct KMeansResult: Codable {
    var centroids: [[Double]]
    var assignments: [Int]
    init() {
        self.centroids = []
        self.assignments = []
    }
    init(centroids: [[Double]], assignments: [Int]) {
        self.centroids = centroids
        self.assignments = assignments
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func distance_sq(_ a: [Double], _ b: [Double]) -> Double {
        var sum: Double = 0.0
        var i: Int = 0
        while (i < _int(((a).count))) {
            var diff: Double = (Double(_idx(a, i)) - Double(_idx(b, i)))
            sum = Double((sum + (diff * diff)))
            i = _int((i &+ 1))
        }
        return sum
    }
    func mean(_ vectors: [[Double]]) -> [Double] {
        var dim: Int = _int((((_idx(vectors, 0) as! [Double])).count))
        var res: [Double] = ([] as! [Double])
        var i: Int = 0
        while (i < dim) {
            var total: Double = 0.0
            var j: Int = 0
            while (j < _int(((vectors).count))) {
                total = Double((total + Double(_idx(_idx(vectors, j)!, i))))
                j = _int((j &+ 1))
            }
            res = (_append(res, (total / Double(_int(((vectors).count))))) as! [Double])
            i = _int((i &+ 1))
        }
        return res
    }
    func k_means(_ vectors: [[Double]], _ k: Int, _ iterations: Int) -> KMeansResult {
        var centroids: [[Double]] = ([] as! [[Double]])
        var i: Int = 0
        while (i < k) {
            centroids = (_append(centroids, (_idx(vectors, i) as! [Double])) as! [[Double]])
            i = _int((i &+ 1))
        }
        var assignments: [Int] = ([] as! [Int])
        var n: Int = _int(((vectors).count))
        i = 0
        while (i < n) {
            assignments = (_append(assignments, 0) as! [Int])
            i = _int((i &+ 1))
        }
        var it: Int = 0
        while (it < iterations) {
            var v: Int = 0
            while (v < n) {
                var best: Int = 0
                var bestDist: Double = Double(distance_sq((_idx(vectors, v) as! [Double]), (_idx(centroids, 0) as! [Double])))
                var c: Int = 1
                while (c < k) {
                    var d: Double = Double(distance_sq((_idx(vectors, v) as! [Double]), (_idx(centroids, c) as! [Double])))
                    if (d < bestDist) {
                        bestDist = Double(d)
                        best = Int(c)
                    }
                    c = _int((c &+ 1))
                }
                assignments = _set(assignments, v, Int(best))
                v = _int((v &+ 1))
            }
            var cIdx: Int = 0
            while (cIdx < k) {
                var cluster: [[Double]] = ([] as! [[Double]])
                var v2: Int = 0
                while (v2 < n) {
                    if ((_idx(assignments, v2) as? Int ?? 0) == cIdx) {
                        cluster = (_append(cluster, (_idx(vectors, v2) as! [Double])) as! [[Double]])
                    }
                    v2 = _int((v2 &+ 1))
                }
                if (_int(((cluster).count)) > 0) {
                    centroids = _set(centroids, cIdx, (mean((cluster as! [[Double]])) as! [Double]))
                }
                cIdx = _int((cIdx &+ 1))
            }
            it = _int((it &+ 1))
        }
        return KMeansResult(centroids: (centroids as! [[Double]]), assignments: (assignments as! [Int]))
    }
    func main() {
        let vectors: [[Double]] = ({
            var _arr: [[Double]] = []
            _arr = _append(_arr, ({
                var _arr: [Double] = []
                _arr = _append(_arr, 1.0)
                _arr = _append(_arr, 2.0)
                return _arr
            }() as! [Double]))
            _arr = _append(_arr, ({
                var _arr: [Double] = []
                _arr = _append(_arr, 1.5)
                _arr = _append(_arr, 1.8)
                return _arr
            }() as! [Double]))
            _arr = _append(_arr, ({
                var _arr: [Double] = []
                _arr = _append(_arr, 5.0)
                _arr = _append(_arr, 8.0)
                return _arr
            }() as! [Double]))
            _arr = _append(_arr, ({
                var _arr: [Double] = []
                _arr = _append(_arr, 8.0)
                _arr = _append(_arr, 8.0)
                return _arr
            }() as! [Double]))
            _arr = _append(_arr, ({
                var _arr: [Double] = []
                _arr = _append(_arr, 1.0)
                _arr = _append(_arr, 0.6)
                return _arr
            }() as! [Double]))
            _arr = _append(_arr, ({
                var _arr: [Double] = []
                _arr = _append(_arr, 9.0)
                _arr = _append(_arr, 11.0)
                return _arr
            }() as! [Double]))
            return _arr
        }() as! [[Double]])
        let result = k_means((vectors as! [[Double]]), 2, 5)
        print(_p("[" + result.centroids.map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
        print(_p("[" + result.assignments.map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
