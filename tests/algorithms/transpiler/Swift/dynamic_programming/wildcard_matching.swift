// Generated by Mochi transpiler v0.10.59 on 2025-08-07 00:32:56 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func make_bool_list(_ n: Int) -> [Bool?] {
        var row: [Bool?] = ([] as! [Bool?])
        var i: Int = 0
        while (i < n) {
            row = (_append(row, false) as! [Bool?])
            i = Int((i &+ 1))
        }
        return row
    }
    func make_bool_matrix(_ rows: Int, _ cols: Int) -> [[Bool?]] {
        var matrix: [[Bool?]] = ([] as! [[Bool?]])
        var i: Int = 0
        while (i < rows) {
            matrix = (_append(matrix, (make_bool_list(cols) as! [Bool?])) as! [[Bool?]])
            i = Int((i &+ 1))
        }
        return matrix
    }
    func is_match(_ s: String, _ p: String) -> Bool {
        let n = Int(((s).count))
        let m = Int(((p).count))
        var dp: [[Bool?]] = (make_bool_matrix((n &+ 1), (m &+ 1)) as! [[Bool?]])
        dp[0][0] = true
        var j: Int = 1
        while (j <= m) {
            if (String(Array(p)[(j &- 1)..<j]) == "*") {
                dp[0][j] = (dp[0][(j &- 1)] as! Bool)
            }
            j = Int((j &+ 1))
        }
        var i: Int = 1
        while (i <= n) {
            var j2: Int = 1
            while (j2 <= m) {
                let pc = String(Array(p)[(j2 &- 1)..<j2])
                let sc = String(Array(s)[(i &- 1)..<i])
                if ((pc == sc) || (pc == "?")) {
                    dp[i][j2] = (dp[(i &- 1)][(j2 &- 1)] as! Bool)
                } else if (pc == "*") {
                    if ((dp[(i &- 1)][j2] as! Bool) || (dp[i][(j2 &- 1)] as! Bool)) {
                        dp[i][j2] = true
                    }
                }
                
                j2 = Int((j2 &+ 1))
            }
            i = Int((i &+ 1))
        }
        return (dp[n][m] as! Bool)
    }
    func print_bool(_ b: Bool) {
        if b {
            print(_p(true))
        } else {
            print(_p(false))
        }
    }
    _ = print_bool(is_match("abc", "a*c"))
    _ = print_bool(is_match("abc", "a*d"))
    _ = print_bool(is_match("baaabab", "*****ba*****ab"))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
