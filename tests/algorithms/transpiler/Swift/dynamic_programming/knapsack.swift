// Generated by Mochi transpiler v0.10.64 on 2025-08-13 07:22:59 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
struct KnapsackResult: Codable {
    var value: Int
    var subset: [Int]
    init() {
        self.value = 0
        self.subset = []
    }
    init(value: Int, subset: [Int]) {
        self.value = value
        self.subset = subset
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    var f: [[Int]] = []
    func max_int(_ a: Int, _ b: Int) -> Int {
        if (a > b) {
            return a
        } else {
            return b
        }
    }
    func init_f(_ n: Int, _ w: Int) -> [[Int]] {
        var table: [[Int]] = []
        var i = 0
        while (i <= n) {
            var row: [Int] = []
            var j = 0
            while (j <= w) {
                if ((i == 0) || (j == 0)) {
                    row = (_append(row, 0) as! [Int])
                } else {
                    row = (_append(row, -1) as! [Int])
                }
                j = _int((j &+ 1))
            }
            table = (_append(table, row) as! [[Int]])
            i = _int((i &+ 1))
        }
        return table
    }
    func mf_knapsack(_ i: Int, _ wt: [Int], _ val: [Int], _ j: Int) -> Int {
        if ((_idx(_idx(f, i)!, j) as? Int ?? 0) < 0) {
            if (j < (_idx(wt, (i &- 1)) as? Int ?? 0)) {
                var _tmp5 = (_idx(f, i) as! [Int])
                _tmp5 = _set(_tmp5, j, _int(mf_knapsack((i &- 1), (wt as! [Int]), (val as! [Int]), j)))
                f = _set(f, i, (_tmp5 as! [Int]))
            } else {
                let without_item = _int(mf_knapsack((i &- 1), (wt as! [Int]), (val as! [Int]), j))
                let with_item = (_int(mf_knapsack((i &- 1), (wt as! [Int]), (val as! [Int]), (j &- (_idx(wt, (i &- 1)) as? Int ?? 0)))) &+ (_idx(val, (i &- 1)) as? Int ?? 0))
                var _tmp6 = (_idx(f, i) as! [Int])
                _tmp6 = _set(_tmp6, j, _int(max_int(without_item, with_item)))
                f = _set(f, i, (_tmp6 as! [Int]))
            }
        }
        return (_idx(_idx(f, i)!, j) as? Int ?? 0)
    }
    func create_matrix(_ rows: Int, _ cols: Int) -> [[Int]] {
        var matrix: [[Int]] = []
        var i = 0
        while (i <= rows) {
            var row: [Int] = []
            var j = 0
            while (j <= cols) {
                row = (_append(row, 0) as! [Int])
                j = _int((j &+ 1))
            }
            matrix = (_append(matrix, row) as! [[Int]])
            i = _int((i &+ 1))
        }
        return matrix
    }
    func knapsack(_ w: Int, _ wt: [Int], _ val: [Int], _ n: Int) -> [[Int]] {
        var dp: [[Int]] = (create_matrix(n, w) as! [[Int]])
        var i = 1
        while (i <= n) {
            var w_ = 1
            while (w_ <= w) {
                if ((_idx(wt, (i &- 1)) as? Int ?? 0) <= w_) {
                    let include = ((_idx(val, (i &- 1)) as? Int ?? 0) &+ (_idx(_idx(dp, (i &- 1))!, (w_ &- (_idx(wt, (i &- 1)) as? Int ?? 0))) as? Int ?? 0))
                    let exclude = (_idx(_idx(dp, (i &- 1))!, w_) as? Int ?? 0)
                    var _tmp7 = (_idx(dp, i) as! [Int])
                    _tmp7 = _set(_tmp7, w_, _int(max_int(include, exclude)))
                    dp = _set(dp, i, (_tmp7 as! [Int]))
                } else {
                    var _tmp8 = (_idx(dp, i) as! [Int])
                    _tmp8 = _set(_tmp8, w_, (_idx(_idx(dp, (i &- 1))!, w_) as? Int ?? 0))
                    dp = _set(dp, i, (_tmp8 as! [Int]))
                }
                w_ = _int((w_ &+ 1))
            }
            i = _int((i &+ 1))
        }
        return dp
    }
    func construct_solution(_ dp: [[Int]], _ wt: [Int], _ i: Int, _ j: Int, _ optimal_set: [Int]) -> [Int] {
        if ((i > 0) && (j > 0)) {
            if ((_idx(_idx(dp, (i &- 1))!, j) as? Int ?? 0) == (_idx(_idx(dp, i)!, j) as? Int ?? 0)) {
                return (construct_solution((dp as! [[Int]]), (wt as! [Int]), (i &- 1), j, (optimal_set as! [Int])) as! [Int])
            } else {
                let with_prev: [Int] = (construct_solution((dp as! [[Int]]), (wt as! [Int]), (i &- 1), (j &- (_idx(wt, (i &- 1)) as? Int ?? 0)), (optimal_set as! [Int])) as! [Int])
                return (_append(with_prev, i) as! [Int])
            }
        }
        return optimal_set
    }
    func knapsack_with_example_solution(_ w: Int, _ wt: [Int], _ val: [Int]) -> KnapsackResult {
        let num_items = _int(((wt).count))
        let dp_table: [[Int]] = (knapsack(w, (wt as! [Int]), (val as! [Int]), num_items) as! [[Int]])
        let optimal_val = (_idx(_idx(dp_table, num_items)!, w) as? Int ?? 0)
        let subset: [Int] = (construct_solution((dp_table as! [[Int]]), (wt as! [Int]), num_items, w, ([] as! [Int])) as! [Int])
        return KnapsackResult(value: Int(optimal_val), subset: (subset as! [Int]))
    }
    func format_set(_ xs: [Int]) -> String {
        var res = "{"
        var i = 0
        while (i < _int(((xs).count))) {
            res = ((res + _p((_idx(xs, i) as? Int ?? 0))) as! String)
            if ((i &+ 1) < _int(((xs).count))) {
                res = ((res + ", ") as! String)
            }
            i = _int((i &+ 1))
        }
        res = ((res + "}") as! String)
        return res
    }
    let val_list: [Int] = ({
        var _arr: [Int] = []
        _arr = _append(_arr, 3)
        _arr = _append(_arr, 2)
        _arr = _append(_arr, 4)
        _arr = _append(_arr, 4)
        return _arr
    }() as! [Int])
    let wt_list: [Int] = ({
        var _arr: [Int] = []
        _arr = _append(_arr, 4)
        _arr = _append(_arr, 3)
        _arr = _append(_arr, 2)
        _arr = _append(_arr, 3)
        return _arr
    }() as! [Int])
    let n: Int = 4
    let w_cap: Int = 6
    f = (init_f(n, w_cap) as! [[Int]])
    let dp_table: [[Int]] = (knapsack(w_cap, (wt_list as! [Int]), (val_list as! [Int]), n) as! [[Int]])
    let optimal_solution = (_idx(_idx(dp_table, n)!, w_cap) as? Int ?? 0)
    print(_p(optimal_solution))
    print(_p(_int(mf_knapsack(n, (wt_list as! [Int]), (val_list as! [Int]), w_cap))))
    let example = knapsack_with_example_solution(w_cap, (wt_list as! [Int]), (val_list as! [Int]))
    print(_p(("optimal_value = " + _p(example.value))))
    print(_p(("An optimal subset corresponding to the optimal value " + String(describing: format_set((example.subset as! [Int]))))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
