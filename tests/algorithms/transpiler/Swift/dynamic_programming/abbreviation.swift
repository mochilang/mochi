// Generated by Mochi transpiler v0.10.59 on 2025-08-07 00:31:00 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func index_of(_ s: String, _ ch: String) -> Int {
        var i: Int = 0
        while (i < Int(((s).count))) {
            if ((String(Array(s)[i]) as! String) == ch) {
                return i
            }
            i = Int((i &+ 1))
        }
        return -1
    }
    func ord(_ ch: String) -> Int {
        let upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
        let lower = "abcdefghijklmnopqrstuvwxyz"
        var idx: Int = Int(index_of((upper as! String), (ch as! String)))
        if (idx >= 0) {
            return (65 &+ idx)
        }
        idx = Int(index_of((lower as! String), (ch as! String)))
        if (idx >= 0) {
            return (97 &+ idx)
        }
        return 0
    }
    func chr(_ n: Int) -> String {
        let upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
        let lower = "abcdefghijklmnopqrstuvwxyz"
        if ((n >= 65) && (n < 91)) {
            return String(Array(upper)[(n &- 65)..<(n &- 64)])
        }
        if ((n >= 97) && (n < 123)) {
            return String(Array(lower)[(n &- 97)..<(n &- 96)])
        }
        return "?"
    }
    func to_upper_char(_ c: String) -> String {
        let code = Int(ord((c as! String)))
        if ((code >= 97) && (code <= 122)) {
            return String(describing: chr((code &- 32)))
        }
        return c
    }
    func is_lower(_ c: String) -> Bool {
        let code = Int(ord((c as! String)))
        return ((code >= 97) && (code <= 122))
    }
    func abbr(_ a: String, _ b: String) -> Bool {
        let n = Int(((a).count))
        let m = Int(((b).count))
        var dp: [[Bool?]] = ([] as! [[Bool?]])
        var i: Int = 0
        while (i <= n) {
            var row: [Bool?] = ([] as! [Bool?])
            var j: Int = 0
            while (j <= m) {
                row = (_append(row, false) as! [Bool?])
                j = Int((j &+ 1))
            }
            dp = (_append(dp, row) as! [[Bool?]])
            i = Int((i &+ 1))
        }
        dp[0][0] = true
        i = 0
        while (i < n) {
            var j: Int = 0
            while (j <= m) {
                if (dp[i][j] as! Bool) {
                    if ((j < m) && (String(describing: to_upper_char((String(Array(a)[i]) as! String))) == (String(Array(b)[j]) as! String))) {
                        dp[(i &+ 1)][(j &+ 1)] = true
                    }
                    if is_lower((String(Array(a)[i]) as! String)) {
                        dp[(i &+ 1)][j] = true
                    }
                }
                j = Int((j &+ 1))
            }
            i = Int((i &+ 1))
        }
        return (dp[n][m] as! Bool)
    }
    func print_bool(_ b: Bool) {
        if b {
            print(_p(true))
        } else {
            print(_p(false))
        }
    }
    _ = print_bool(abbr("daBcd", "ABC"))
    _ = print_bool(abbr("dBcd", "ABC"))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
