// Generated by Mochi transpiler v0.10.59 on 2025-08-07 00:31:33 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
struct LcsResult: Codable {
    var length: Int
    var sequence: String
    init() {
        self.length = 0
        self.sequence = ""
    }
    init(length: Int, sequence: String) {
        self.length = length
        self.sequence = sequence
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func zeros_matrix(_ rows: Int, _ cols: Int) -> [[Int?]] {
        var matrix: [[Int?]] = ([] as! [[Int?]])
        var i: Int = 0
        while (i <= rows) {
            var row: [Int?] = ([] as! [Int?])
            var j: Int = 0
            while (j <= cols) {
                row = (_append(row, 0) as! [Int?])
                j = Int((j &+ 1))
            }
            matrix = (_append(matrix, row) as! [[Int?]])
            i = Int((i &+ 1))
        }
        return matrix
    }
    func longest_common_subsequence(_ x: String, _ y: String) -> LcsResult {
        let m = Int(((x).count))
        let n = Int(((y).count))
        var dp: [[Int?]] = (zeros_matrix(m, n) as! [[Int?]])
        var i: Int = 1
        while (i <= m) {
            var j: Int = 1
            while (j <= n) {
                if ((String(Array(x)[(i &- 1)]) as! String) == (String(Array(y)[(j &- 1)]) as! String)) {
                    dp[i][j] = Int(((dp[(i &- 1)][(j &- 1)] as? Int ?? 0) &+ 1))
                } else {
                    if ((dp[(i &- 1)][j] as? Int ?? 0) > (dp[i][(j &- 1)] as? Int ?? 0)) {
                        dp[i][j] = (dp[(i &- 1)][j] as? Int ?? 0)
                    } else {
                        dp[i][j] = (dp[i][(j &- 1)] as? Int ?? 0)
                    }
                }
                j = Int((j &+ 1))
            }
            i = Int((i &+ 1))
        }
        var seq: String = ""
        var i2: Int = m
        var j2: Int = n
        while ((i2 > 0) && (j2 > 0)) {
            if ((String(Array(x)[(i2 &- 1)]) as! String) == (String(Array(y)[(j2 &- 1)]) as! String)) {
                seq = (((String(Array(x)[(i2 &- 1)]) as! String) + seq) as! String)
                i2 = Int((i2 &- 1))
                j2 = Int((j2 &- 1))
            } else if ((dp[(i2 &- 1)][j2] as? Int ?? 0) >= (dp[i2][(j2 &- 1)] as? Int ?? 0)) {
                i2 = Int((i2 &- 1))
            } else {
                j2 = Int((j2 &- 1))
            }
            
        }
        return LcsResult(length: (dp[m][n] as? Int ?? 0), sequence: seq)
    }
    let a = "AGGTAB"
    let b = "GXTXAYB"
    let res = longest_common_subsequence((a as! String), (b as! String))
    print(_p(((("len = " + String(describing: res.length)) + ", sub-sequence = ") + res.sequence)))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
