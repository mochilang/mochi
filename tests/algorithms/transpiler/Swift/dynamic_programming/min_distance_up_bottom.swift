// Generated by Mochi transpiler v0.10.64 on 2025-08-13 07:23:33 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func min3(_ a: Int, _ b: Int, _ c: Int) -> Int {
        var m = a
        if (b < m) {
            m = Int(b)
        }
        if (c < m) {
            m = Int(c)
        }
        return m
    }
    func helper(_ word1: String, _ word2: String, _ cache: inout [[Int]], _ i: Int, _ j: Int, _ len1: Int, _ len2: Int) -> Int {
        if (i >= len1) {
            return (len2 &- j)
        }
        if (j >= len2) {
            return (len1 &- i)
        }
        if ((_idx(_idx(cache, i)!, j) as? Int ?? 0) != _int((0 &- 1))) {
            return (_idx(_idx(cache, i)!, j) as? Int ?? 0)
        }
        var diff = 0
        if (String(describing: String(Array(String(describing: (word1 as! String)))[i..<(i &+ 1)])) != String(describing: String(Array(String(describing: (word2 as! String)))[j..<(j &+ 1)]))) {
            diff = 1
        }
        let delete_cost = (1 &+ _int(helper((word1 as! String), (word2 as! String), &cache, (i &+ 1), j, len1, len2)))
        let insert_cost = (1 &+ _int(helper((word1 as! String), (word2 as! String), &cache, i, (j &+ 1), len1, len2)))
        let replace_cost = (diff &+ _int(helper((word1 as! String), (word2 as! String), &cache, (i &+ 1), (j &+ 1), len1, len2)))
        var _tmp2 = (_idx(cache, i) as! [Int])
        _tmp2 = _set(_tmp2, j, _int(min3(delete_cost, insert_cost, replace_cost)))
        cache = _set(cache, i, (_tmp2 as! [Int]))
        return (_idx(_idx(cache, i)!, j) as? Int ?? 0)
    }
    func min_distance_up_bottom(_ word1: String, _ word2: String) -> Int {
        let len1 = _int(((word1).count))
        let len2 = _int(((word2).count))
        var cache: [[Int]] = ([] as! [[Int]])
        for _ in 0..<len1 {
            var row: [Int] = ([] as! [Int])
            for _2 in 0..<len2 {
                row = (_append(row, (0 &- 1)) as! [Int])
            }
            cache = (_append(cache, row) as! [[Int]])
        }
        return _int(helper((word1 as! String), (word2 as! String), &cache, 0, 0, len1, len2))
    }
    print(_p(_p(_int(min_distance_up_bottom("intention", "execution")))))
    print(_p(_p(_int(min_distance_up_bottom("intention", "")))))
    print(_p(_p(_int(min_distance_up_bottom("", "")))))
    print(_p(_p(_int(min_distance_up_bottom("zooicoarchaeologist", "zoologist")))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
