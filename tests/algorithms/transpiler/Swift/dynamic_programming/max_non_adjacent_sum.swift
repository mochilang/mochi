// Generated by Mochi transpiler v0.10.61 on 2025-08-08 19:03:01 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func maximum_non_adjacent_sum(_ nums: [Int]) -> Int {
        if (_int(((nums).count)) == 0) {
            return 0
        }
        var max_including = (_idx(nums, 0) as? Int ?? 0)
        var max_excluding = 0
        var i = 1
        while (i < _int(((nums).count))) {
            let num = (_idx(nums, i) as? Int ?? 0)
            let new_including = (max_excluding &+ num)
            let new_excluding = _int(((max_including > max_excluding) ? max_including : max_excluding))
            max_including = Int(new_including)
            max_excluding = Int(new_excluding)
            i = _int((i &+ 1))
        }
        if (max_including > max_excluding) {
            return max_including
        }
        return max_excluding
    }
    print(_p(_p(_int(maximum_non_adjacent_sum(({
        var _arr: [Int] = []
        _arr = _append(_arr, 1)
        _arr = _append(_arr, 2)
        _arr = _append(_arr, 3)
        return _arr
    }() as! [Int]))))))
    print(_p(_p(_int(maximum_non_adjacent_sum(({
        var _arr: [Int] = []
        _arr = _append(_arr, 1)
        _arr = _append(_arr, 5)
        _arr = _append(_arr, 3)
        _arr = _append(_arr, 7)
        _arr = _append(_arr, 2)
        _arr = _append(_arr, 2)
        _arr = _append(_arr, 6)
        return _arr
    }() as! [Int]))))))
    print(_p(_p(_int(maximum_non_adjacent_sum(({
        var _arr: [Int] = []
        _arr = _append(_arr, -1)
        _arr = _append(_arr, -5)
        _arr = _append(_arr, -3)
        _arr = _append(_arr, -7)
        _arr = _append(_arr, -2)
        _arr = _append(_arr, -2)
        _arr = _append(_arr, -6)
        return _arr
    }() as! [Int]))))))
    print(_p(_p(_int(maximum_non_adjacent_sum(({
        var _arr: [Int] = []
        _arr = _append(_arr, 499)
        _arr = _append(_arr, 500)
        _arr = _append(_arr, -3)
        _arr = _append(_arr, -7)
        _arr = _append(_arr, -2)
        _arr = _append(_arr, -2)
        _arr = _append(_arr, -6)
        return _arr
    }() as! [Int]))))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
