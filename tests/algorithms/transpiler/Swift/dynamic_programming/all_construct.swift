// Generated by Mochi transpiler v0.10.61 on 2025-08-08 19:01:28 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
func _slice<T>(_ xs: [T], _ start: Int, _ end: Int) -> [T] {
    var s = start
    var e = end
    if s < 0 { s = 0 }
    if e > xs.count { e = xs.count }
    if s > e { s = e }
    return Array(xs[s..<e])
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func allConstruct(_ target: String, _ wordBank: [String]) -> [[String]] {
        let tableSize = (_int(((target).count)) &+ 1)
        var table: [[[String]]] = ([] as! [[[String]]])
        var idx = 0
        while (idx < tableSize) {
            var empty: [[String]] = ([] as! [[String]])
            table = (_append(table, empty) as! [[[String]]])
            idx = _int((idx &+ 1))
        }
        var base: [String] = ([] as! [String])
        table = _set(table, 0, ({
            var _arr: [[String]] = []
            _arr = _append(_arr, base)
            return _arr
        }() as! [[String]]))
        var i = 0
        while (i < tableSize) {
            if (_int((((_idx(table, i) as! [[String]])).count)) != 0) {
                var w = 0
                while (w < _int(((wordBank).count))) {
                    let word = (_idx(wordBank, w) as! String)
                    let wordLen = _int(((word).count))
                    if (String(_slice(Array(target), i, (i &+ wordLen))) == word) {
                        var k = 0
                        while (k < _int((((_idx(table, i) as! [[String]])).count))) {
                            let way: [String] = (_idx(_idx(table, i)!, k) as! [String])
                            var combination: [String] = ([] as! [String])
                            var m = 0
                            while (m < _int(((way).count))) {
                                combination = (_append(combination, (_idx(way, m) as! String)) as! [String])
                                m = _int((m &+ 1))
                            }
                            combination = (_append(combination, word) as! [String])
                            let nextIndex = (i &+ wordLen)
                            table = _set(table, nextIndex, (_append((_idx(table, nextIndex) as! [[String]]), combination) as! [[String]]))
                            k = _int((k &+ 1))
                        }
                    }
                    w = _int((w &+ 1))
                }
            }
            i = _int((i &+ 1))
        }
        return (_idx(table, _int(((target).count))) as! [[String]])
    }
    print(_p("[" + (allConstruct("jwajalapa", ({
        var _arr: [String] = []
        _arr = _append(_arr, "jwa")
        _arr = _append(_arr, "j")
        _arr = _append(_arr, "w")
        _arr = _append(_arr, "a")
        _arr = _append(_arr, "la")
        _arr = _append(_arr, "lapa")
        return _arr
    }() as! [String])) as! [[String]]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    print(_p("[" + (allConstruct("rajamati", ({
        var _arr: [String] = []
        _arr = _append(_arr, "s")
        _arr = _append(_arr, "raj")
        _arr = _append(_arr, "amat")
        _arr = _append(_arr, "raja")
        _arr = _append(_arr, "ma")
        _arr = _append(_arr, "i")
        _arr = _append(_arr, "t")
        return _arr
    }() as! [String])) as! [[String]]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    print(_p("[" + (allConstruct("hexagonosaurus", ({
        var _arr: [String] = []
        _arr = _append(_arr, "h")
        _arr = _append(_arr, "ex")
        _arr = _append(_arr, "hex")
        _arr = _append(_arr, "ag")
        _arr = _append(_arr, "ago")
        _arr = _append(_arr, "ru")
        _arr = _append(_arr, "auru")
        _arr = _append(_arr, "rus")
        _arr = _append(_arr, "go")
        _arr = _append(_arr, "no")
        _arr = _append(_arr, "o")
        _arr = _append(_arr, "s")
        return _arr
    }() as! [String])) as! [[String]]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
