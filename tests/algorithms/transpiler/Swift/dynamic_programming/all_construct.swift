// Generated by Mochi transpiler v0.10.59 on 2025-08-07 00:31:02 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func allConstruct(_ target: String, _ wordBank: [String?]) -> [[String?]] {
        let tableSize = (Int(((target).count)) &+ 1)
        var table: [[[String?]]] = ([] as! [[[String?]]])
        var idx: Int = 0
        while (idx < tableSize) {
            var empty: [[String?]] = ([] as! [[String?]])
            table = (_append(table, empty) as! [[[String?]]])
            idx = Int((idx &+ 1))
        }
        var base: [String?] = ([] as! [String?])
        table = _set(table, 0, ([base] as! [[String?]]))
        var i: Int = 0
        while (i < tableSize) {
            if (Int((((table[i] as! [[String?]])).count)) != 0) {
                var w: Int = 0
                while (w < Int(((wordBank).count))) {
                    let word = (wordBank[w] as! String)
                    let wordLen = Int(((word).count))
                    if (String(Array(target)[i..<(i &+ wordLen)]) == word) {
                        var k: Int = 0
                        while (k < Int((((table[i] as! [[String?]])).count))) {
                            let way: [String?] = (table[i][k] as! [String?])
                            var combination: [String?] = ([] as! [String?])
                            var m: Int = 0
                            while (m < Int(((way).count))) {
                                combination = (_append(combination, (way[m] as! String)) as! [String?])
                                m = Int((m &+ 1))
                            }
                            combination = (_append(combination, word) as! [String?])
                            let nextIndex = (i &+ wordLen)
                            table = _set(table, nextIndex, (_append((table[nextIndex] as! [[String?]]), combination) as! [[String?]]))
                            k = Int((k &+ 1))
                        }
                    }
                    w = Int((w &+ 1))
                }
            }
            i = Int((i &+ 1))
        }
        return (table[Int(((target).count))] as! [[String?]])
    }
    print(_p("[" + (allConstruct("jwajalapa", (["jwa", "j", "w", "a", "la", "lapa"] as! [String?])) as! [[String?]]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    print(_p("[" + (allConstruct("rajamati", (["s", "raj", "amat", "raja", "ma", "i", "t"] as! [String?])) as! [[String?]]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    print(_p("[" + (allConstruct("hexagonosaurus", (["h", "ex", "hex", "ag", "ago", "ru", "auru", "rus", "go", "no", "o", "s"] as! [String?])) as! [[String?]]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
