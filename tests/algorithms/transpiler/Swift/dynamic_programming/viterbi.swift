// Generated by Mochi transpiler v0.10.64 on 2025-08-13 07:24:07 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func key(_ state: String, _ obs: String) -> String {
        return ((state + "|") + obs)
    }
    func viterbi(_ observations: [String], _ states: [String], _ start_p: [String: Double], _ trans_p: [String: [String: Double]], _ emit_p: [String: [String: Double]]) -> [String] {
        if ((_int(((observations).count)) == 0) || (_int(((states).count)) == 0)) {
            _ = fatalError("empty parameters")
        }
        var probs: [String: Double] = ([:] as! [String: Double])
        var ptrs: [String: String] = ([:] as! [String: String])
        let first_obs = (_idx(observations, 0) as! String)
        var i = 0
        while (i < _int(((states).count))) {
            let state = (_idx(states, i) as! String)
            probs = _set(probs, String(describing: key((state as! String), (first_obs as! String))), Double((Double(start_p[String(String(describing: state))]) * Double(emit_p[String(String(describing: state))]![String(String(describing: first_obs))]))))
            ptrs = _set(ptrs, String(describing: key((state as! String), (first_obs as! String))), "")
            i = _int((i &+ 1))
        }
        var t = 1
        while (t < _int(((observations).count))) {
            let obs = (_idx(observations, t) as! String)
            var j = 0
            while (j < _int(((states).count))) {
                let state = (_idx(states, j) as! String)
                var max_prob: Double = -1.0
                var prev_state = ""
                var k = 0
                while (k < _int(((states).count))) {
                    let state0 = (_idx(states, k) as! String)
                    let obs0 = (_idx(observations, (t &- 1)) as! String)
                    let prob_prev = Double(probs[String(String(describing: key((state0 as! String), (obs0 as! String))))])
                    let prob = ((prob_prev * Double(trans_p[String(String(describing: state0))]![String(String(describing: state))])) * Double(emit_p[String(String(describing: state))]![String(String(describing: obs))]))
                    if (prob > max_prob) {
                        max_prob = Double(prob)
                        prev_state = (state0 as! String)
                    }
                    k = _int((k &+ 1))
                }
                probs = _set(probs, String(describing: key((state as! String), (obs as! String))), Double(max_prob))
                ptrs = _set(ptrs, String(describing: key((state as! String), (obs as! String))), (prev_state as! String))
                j = _int((j &+ 1))
            }
            t = _int((t &+ 1))
        }
        var path: [String] = ([] as! [String])
        var n = 0
        while (n < _int(((observations).count))) {
            path = (_append(path, "") as! [String])
            n = _int((n &+ 1))
        }
        let last_obs = (_idx(observations, (_int(((observations).count)) &- 1)) as! String)
        var max_final: Double = -1.0
        var last_state = ""
        var m = 0
        while (m < _int(((states).count))) {
            let state = (_idx(states, m) as! String)
            let prob = Double(probs[String(String(describing: key((state as! String), (last_obs as! String))))])
            if (prob > max_final) {
                max_final = Double(prob)
                last_state = (state as! String)
            }
            m = _int((m &+ 1))
        }
        let last_index: Int = (_int(((observations).count)) &- 1)
        path = _set(path, last_index, (last_state as! String))
        var idx: Int = last_index
        while (idx > 0) {
            let obs = (_idx(observations, idx) as! String)
            let prev = (ptrs[String(String(describing: key((_idx(path, idx) as! String), (obs as! String))))] as! String)
            path = _set(path, (idx &- 1), (prev as! String))
            idx = _int((idx &- 1))
        }
        return path
    }
    func join_words(_ words: [String]) -> String {
        var res = ""
        var i = 0
        while (i < _int(((words).count))) {
            if (i > 0) {
                res = ((res + " ") as! String)
            }
            res = ((res + (_idx(words, i) as! String)) as! String)
            i = _int((i &+ 1))
        }
        return res
    }
    var observations: [String] = ({
        var _arr: [String] = []
        _arr = _append(_arr, "normal")
        _arr = _append(_arr, "cold")
        _arr = _append(_arr, "dizzy")
        return _arr
    }() as! [String])
    var states: [String] = ({
        var _arr: [String] = []
        _arr = _append(_arr, "Healthy")
        _arr = _append(_arr, "Fever")
        return _arr
    }() as! [String])
    var start_p: [String: Double] = (["Healthy": 0.6, "Fever": 0.4] as! [String: Double])
    var trans_p: [String: [String: Double]] = (["Healthy": ["Healthy": 0.7, "Fever": 0.3], "Fever": ["Healthy": 0.4, "Fever": 0.6]] as! [String: [String: Double]])
    var emit_p: [String: [String: Double]] = (["Healthy": ["normal": 0.5, "cold": 0.4, "dizzy": 0.1], "Fever": ["normal": 0.1, "cold": 0.3, "dizzy": 0.6]] as! [String: [String: Double]])
    let result: [String] = (viterbi((observations as! [String]), (states as! [String]), (start_p as! [String: Double]), (trans_p as! [String: [String: Double]]), (emit_p as! [String: [String: Double]])) as! [String])
    print(_p(String(describing: join_words((result as! [String])))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
