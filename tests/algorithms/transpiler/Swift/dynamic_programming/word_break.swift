// Generated by Mochi transpiler v0.10.59 on 2025-08-07 08:29:55 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func build_set(_ words: [String?]) -> [String: Bool] {
        var m: [String: Bool] = ([:] as! [String: Bool])
        for w in words {
            m = _set(m, String(describing: w), true)
        }
        return m
    }
    func word_break(_ s: String, _ words: [String?]) -> Bool {
        let n = Int(((s).count))
        let dict: [String: Bool] = (build_set((words as! [String?])) as! [String: Bool])
        var dp: [Bool?] = ([] as! [Bool?])
        var i: Int = 0
        while (i <= n) {
            dp = (_append(dp, false) as! [Bool?])
            i = Int((i &+ 1))
        }
        dp = _set(dp, 0, true)
        i = 1
        while (i <= n) {
            var j: Int = 0
            while (j < i) {
                if (dp[j] as! Bool) {
                    let sub = String(Array(s)[j..<i])
                    if (dict[sub] != nil) {
                        dp = _set(dp, i, true)
                        j = (i as! Int)
                    }
                }
                j = Int((j &+ 1))
            }
            i = Int((i &+ 1))
        }
        return (dp[n] as! Bool)
    }
    func print_bool(_ b: Bool) {
        if b {
            print(_p(true))
        } else {
            print(_p(false))
        }
    }
    _ = print_bool(word_break("applepenapple", (["apple", "pen"] as! [String?])))
    _ = print_bool(word_break("catsandog", (["cats", "dog", "sand", "and", "cat"] as! [String?])))
    _ = print_bool(word_break("cars", (["car", "ca", "rs"] as! [String?])))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
