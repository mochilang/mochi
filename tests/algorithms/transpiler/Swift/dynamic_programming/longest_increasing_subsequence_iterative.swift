// Generated by Mochi transpiler v0.10.59 on 2025-08-07 00:31:39 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func copy_list(_ xs: [Int?]) -> [Int?] {
        var res: [Int?] = ([] as! [Int?])
        var i: Int = 0
        while (i < Int(((xs).count))) {
            res = (_append(res, (xs[i] as? Int ?? 0)) as! [Int?])
            i = Int((i &+ 1))
        }
        return res
    }
    func longest_subsequence(_ arr: [Int?]) -> [Int?] {
        let n = Int(((arr).count))
        var lis: [[Int?]] = ([] as! [[Int?]])
        var i: Int = 0
        while (i < n) {
            var single: [Int?] = ([] as! [Int?])
            single = (_append(single, (arr[i] as? Int ?? 0)) as! [Int?])
            lis = (_append(lis, single) as! [[Int?]])
            i = Int((i &+ 1))
        }
        i = 1
        while (i < n) {
            var prev: Int = 0
            while (prev < i) {
                if (((arr[prev] as? Int ?? 0) <= (arr[i] as? Int ?? 0)) && ((Int((((lis[prev] as! [Int?])).count)) &+ 1) > Int((((lis[i] as! [Int?])).count)))) {
                    let temp: [Int?] = (copy_list((lis[prev] as! [Int?])) as! [Int?])
                    let temp2: [Int?] = (_append(temp, (arr[i] as? Int ?? 0)) as! [Int?])
                    lis = _set(lis, i, (temp2 as! [Int?]))
                }
                prev = Int((prev &+ 1))
            }
            i = Int((i &+ 1))
        }
        var result: [Int?] = ([] as! [Int?])
        i = 0
        while (i < n) {
            if (Int((((lis[i] as! [Int?])).count)) > Int(((result).count))) {
                result = (lis[i] as! [Int?])
            }
            i = Int((i &+ 1))
        }
        return result
    }
    func main() {
        print(_p("[" + (longest_subsequence(([10, 22, 9, 33, 21, 50, 41, 60, 80] as! [Int?])) as! [Int?]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
        print(_p("[" + (longest_subsequence(([4, 8, 7, 5, 1, 12, 2, 3, 9] as! [Int?])) as! [Int?]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
        print(_p("[" + (longest_subsequence(([9, 8, 7, 6, 5, 7] as! [Int?])) as! [Int?]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
        print(_p("[" + (longest_subsequence(([28, 26, 12, 23, 35, 39] as! [Int?])) as! [Int?]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
        print(_p("[" + (longest_subsequence(([1, 1, 1] as! [Int?])) as! [Int?]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
        print(_p("[" + (longest_subsequence(([] as! [Int?])) as! [Int?]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
