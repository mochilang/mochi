// Generated by Mochi transpiler v0.10.59 on 2025-08-06 18:40:05 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _json(_ v: Any) {
    if let data = try? JSONSerialization.data(withJSONObject: v, options: [.sortedKeys, .prettyPrinted]),
    let str = String(data: data, encoding: .utf8) {
        print(str)
    }
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func sum_list(_ nums: [Int]) -> Int {
        var s: Int = 0
        for n in nums {
            s = Int((s &+ n))
        }
        return s
    }
    func create_state_space_tree(_ nums: [Int], _ max_sum: Int, _ num_index: Int, _ path: [Int], _ curr_sum: Int, _ remaining_sum: Int) -> [[Int]] {
        var result: [[Int]] = ([] as! [[Int]])
        if ((curr_sum > max_sum) || ((curr_sum &+ remaining_sum) < max_sum)) {
            return result
        }
        if (curr_sum == max_sum) {
            result = (_append(result, path) as! [[Int]])
            return result
        }
        var index: Int = num_index
        while (index < Int(((nums).count))) {
            let value = (nums[index] as? Int ?? 0)
            let subres: [[Int]] = (create_state_space_tree((nums as! [Int]), max_sum, (index &+ 1), (_append(path, value) as! [Int]), (curr_sum &+ value), (remaining_sum &- value)) as! [[Int]])
            var j: Int = 0
            while (j < Int(((subres).count))) {
                result = (_append(result, (subres[j] as! [Int])) as! [[Int]])
                j = Int((j &+ 1))
            }
            index = Int((index &+ 1))
        }
        return result
    }
    func generate_sum_of_subsets_solutions(_ nums: [Int], _ max_sum: Int) -> [[Int]] {
        let total = Int(sum_list((nums as! [Int])))
        return (create_state_space_tree((nums as! [Int]), max_sum, 0, ([] as! [Int]), 0, total) as! [[Int]])
    }
    func main() {
        _ = _json((generate_sum_of_subsets_solutions(([3, 34, 4, 12, 5, 2] as! [Int]), 9) as! [[Int]]))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
