// Generated by Mochi transpiler v0.10.59 on 2025-08-06 18:40:59 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func contains(_ xs: [Int], _ x: Int) -> Bool {
        var i: Int = 0
        while (i < Int(((xs).count))) {
            if ((xs[i] as? Int ?? 0) == x) {
                return true
            }
            i = Int((i &+ 1))
        }
        return false
    }
    func get_point_key(_ len_board: Int, _ len_board_column: Int, _ row: Int, _ column: Int) -> Int {
        return (((len_board &* len_board_column) &* row) &+ column)
    }
    func search_from(_ board: [[String]], _ word: String, _ row: Int, _ column: Int, _ word_index: Int, _ visited: [Int]) -> Bool {
        if ((board[row][column] as! String) != String(describing: String(Array(String(describing: (word as! String)))[word_index..<(word_index &+ 1)]))) {
            return false
        }
        if (word_index == (Int(((word).count)) &- 1)) {
            return true
        }
        let len_board = Int(((board).count))
        let len_board_column = Int((((board[0] as! [String])).count))
        let dir_i: [Int] = ([0, 0, -1, 1] as! [Int])
        let dir_j: [Int] = ([1, -1, 0, 0] as! [Int])
        var k: Int = 0
        while (k < 4) {
            let next_i = (row &+ (dir_i[k] as? Int ?? 0))
            let next_j = (column &+ (dir_j[k] as? Int ?? 0))
            if (!((((0 <= next_i) && (next_i < len_board)) && (0 <= next_j)) && (next_j < len_board_column))) {
                k = Int((k &+ 1))
                continue
            }
            let key = Int(get_point_key(len_board, len_board_column, next_i, next_j))
            if ((visited as! [Int]).contains(key)) {
                k = Int((k &+ 1))
                continue
            }
            let new_visited: [Int] = (_append(visited, key) as! [Int])
            if search_from((board as! [[String]]), (word as! String), next_i, next_j, (word_index &+ 1), (new_visited as! [Int])) {
                return true
            }
            k = Int((k &+ 1))
        }
        return false
    }
    func word_exists(_ board: [[String]], _ word: String) -> Bool {
        let len_board = Int(((board).count))
        let len_board_column = Int((((board[0] as! [String])).count))
        var i: Int = 0
        while (i < len_board) {
            var j: Int = 0
            while (j < len_board_column) {
                let key = Int(get_point_key(len_board, len_board_column, i, j))
                let visited: [Int] = (_append(([] as! [Int]), key) as! [Int])
                if search_from((board as! [[String]]), (word as! String), i, j, 0, (visited as! [Int])) {
                    return true
                }
                j = Int((j &+ 1))
            }
            i = Int((i &+ 1))
        }
        return false
    }
    func main() {
        let board: [[String]] = ([(["A", "B", "C", "E"] as! [String]), (["S", "F", "C", "S"] as! [String]), (["A", "D", "E", "E"] as! [String])] as! [[String]])
        print(_p(word_exists((board as! [[String]]), "ABCCED")))
        print(_p(word_exists((board as! [[String]]), "SEE")))
        print(_p(word_exists((board as! [[String]]), "ABCB")))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
