// Generated by Mochi transpiler v0.10.59 on 2025-08-06 18:34:13 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func is_safe(_ grid: [[Int]], _ row: Int, _ column: Int, _ n: Int) -> Bool {
        for i in 0..<9 {
            if (((grid[row][i] as? Int ?? 0) == n) || ((grid[i][column] as? Int ?? 0) == n)) {
                return false
            }
        }
        for i in 0..<3 {
            for j in 0..<3 {
                if ((grid[(Int((row &- (row % 3))) &+ i)][(Int((column &- (column % 3))) &+ j)] as? Int ?? 0) == n) {
                    return false
                }
            }
        }
        return true
    }
    func find_empty_location(_ grid: [[Int]]) -> [Int] {
        for i in 0..<9 {
            for j in 0..<9 {
                if ((grid[i][j] as? Int ?? 0) == 0) {
                    return ([i, j] as! [Int])
                }
            }
        }
        return ([] as! [Int])
    }
    func sudoku(_ grid: inout [[Int]]) -> Bool {
        let loc: [Int] = (find_empty_location((grid as! [[Int]])) as! [Int])
        if (Int(((loc).count)) == 0) {
            return true
        }
        let row = (loc[0] as? Int ?? 0)
        let column = (loc[1] as? Int ?? 0)
        for digit in 1..<10 {
            if is_safe((grid as! [[Int]]), row, column, digit) {
                grid[row][column] = Int(digit)
                if sudoku(&grid) {
                    return true
                }
                grid[row][column] = 0
            }
        }
        return false
    }
    func print_solution(_ grid: [[Int]]) -> Void {
        for r in 0..<Int(((grid).count)) {
            var line: String = ""
            for c in 0..<Int((((grid[r] as! [Int])).count)) {
                line = ((line + String(describing: (grid[r][c] as? Int ?? 0))) as! String)
                if (c < (Int((((grid[r] as! [Int])).count)) &- 1)) {
                    line = ((line + " ") as! String)
                }
            }
            print(_p(line))
        }
    }
    let initial_grid: [[Int]] = ([([3, 0, 6, 5, 0, 8, 4, 0, 0] as! [Int]), ([5, 2, 0, 0, 0, 0, 0, 0, 0] as! [Int]), ([0, 8, 7, 0, 0, 0, 0, 3, 1] as! [Int]), ([0, 0, 3, 0, 1, 0, 0, 8, 0] as! [Int]), ([9, 0, 0, 8, 6, 3, 0, 0, 5] as! [Int]), ([0, 5, 0, 0, 9, 0, 6, 0, 0] as! [Int]), ([1, 3, 0, 0, 0, 0, 2, 5, 0] as! [Int]), ([0, 0, 0, 0, 0, 0, 0, 7, 4] as! [Int]), ([0, 0, 5, 2, 0, 6, 3, 0, 0] as! [Int])] as! [[Int]])
    let no_solution: [[Int]] = ([([5, 0, 6, 5, 0, 8, 4, 0, 3] as! [Int]), ([5, 2, 0, 0, 0, 0, 0, 0, 2] as! [Int]), ([1, 8, 7, 0, 0, 0, 0, 3, 1] as! [Int]), ([0, 0, 3, 0, 1, 0, 0, 8, 0] as! [Int]), ([9, 0, 0, 8, 6, 3, 0, 0, 5] as! [Int]), ([0, 5, 0, 0, 9, 0, 6, 0, 0] as! [Int]), ([1, 3, 0, 0, 0, 0, 2, 5, 0] as! [Int]), ([0, 0, 0, 0, 0, 0, 0, 7, 4] as! [Int]), ([0, 0, 5, 2, 0, 6, 3, 0, 0] as! [Int])] as! [[Int]])
    var examples: [[[Int]]] = ([initial_grid, no_solution] as! [[[Int]]])
    var idx: Int = 0
    while (idx < Int(((examples).count))) {
        print(_p("\nExample grid:\n===================="))
        _ = print_solution((examples[idx] as! [[Int]]))
        print(_p("\nExample grid solution:"))
        if sudoku(&examples[idx]) {
            _ = print_solution((examples[idx] as! [[Int]]))
        } else {
            print(_p("Cannot find a solution."))
        }
        idx = Int((idx &+ 1))
    }
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
