// Generated by Mochi transpiler v0.10.59 on 2025-08-06 16:41:32 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _len(_ v: Any) -> Int {
    if let s = v as? String { return Array(s).count }
    if let a = v as? [Any] { return a.count }
    if let a = v as? [Double] { return a.count }
    if let a = v as? [Int] { return a.count }
    if let m = v as? [AnyHashable: Any] { return m.count }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func get_value(_ keys: [String], _ values: [String], _ key: String) -> String? {
        var i: Int = 0
        while (i < Int(((keys).count))) {
            if ((keys[i] as! String) == key) {
                return ((values[i] as! String) as! String?)
            }
            i = Int((i &+ 1))
        }
        return nil
    }
    func contains_value(_ values: [String], _ value: String) -> Bool {
        var i: Int = 0
        while (i < Int(((values).count))) {
            if ((values[i] as! String) == value) {
                return true
            }
            i = Int((i &+ 1))
        }
        return false
    }
    func backtrack(_ pattern: String, _ input_string: String, _ pi: Int, _ si: Int, _ keys: [String], _ values: [String]) -> Bool {
        if ((pi == Int(((pattern).count))) && (si == Int(((input_string).count)))) {
            return true
        }
        if ((pi == Int(((pattern).count))) || (si == Int(((input_string).count)))) {
            return false
        }
        let ch = String(describing: String(Array(String(describing: (pattern as! String)))[pi..<(pi &+ 1)]))
        let mapped: String? = String(describing: get_value((keys as! [String]), (values as! [String]), (ch as! String)))
        if (String(describing: mapped) != nil) {
            if (String(describing: String(Array(String(describing: (input_string as! String)))[si..<(si &+ Int(_len(String(describing: mapped))))])) == String(describing: mapped)) {
                return backtrack((pattern as! String), (input_string as! String), (pi &+ 1), (si &+ Int(_len(String(describing: mapped)))), (keys as! [String]), (values as! [String]))
            }
            return false
        }
        var end: Int = (si &+ 1)
        while (end <= Int(((input_string).count))) {
            let substr = String(describing: String(Array(String(describing: (input_string as! String)))[si..<end]))
            if contains_value((values as! [String]), (substr as! String)) {
                end = Int((end &+ 1))
                continue
            }
            let new_keys: [String] = (_append(keys, ch) as! [String])
            let new_values: [String] = (_append(values, substr) as! [String])
            if backtrack((pattern as! String), (input_string as! String), (pi &+ 1), end, (new_keys as! [String]), (new_values as! [String])) {
                return true
            }
            end = Int((end &+ 1))
        }
        return false
    }
    func match_word_pattern(_ pattern: String, _ input_string: String) -> Bool {
        let keys: [String] = ([] as! [String])
        let values: [String] = ([] as! [String])
        return backtrack((pattern as! String), (input_string as! String), 0, 0, (keys as! [String]), (values as! [String]))
    }
    func main() {
        print(_p(match_word_pattern("aba", "GraphTreesGraph")))
        print(_p(match_word_pattern("xyx", "PythonRubyPython")))
        print(_p(match_word_pattern("GG", "PythonJavaPython")))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
