// Generated by Mochi transpiler v0.10.59 on 2025-08-06 18:30:35 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func run_maze(_ maze: [[Int]], _ i: Int, _ j: Int, _ dr: Int, _ dc: Int, _ sol: inout [[Int]]) -> Bool {
        let size = Int(((maze).count))
        if (((i == dr) && (j == dc)) && ((maze[i][j] as? Int ?? 0) == 0)) {
            sol[i][j] = 0
            return true
        }
        let lower_flag = ((i >= 0) && (j >= 0))
        let upper_flag = ((i < size) && (j < size))
        if (lower_flag && upper_flag) {
            let block_flag = (((sol[i][j] as? Int ?? 0) == 1) && ((maze[i][j] as? Int ?? 0) == 0))
            if block_flag {
                sol[i][j] = 0
                if (((run_maze((maze as! [[Int]]), (i &+ 1), j, dr, dc, &sol) || run_maze((maze as! [[Int]]), i, (j &+ 1), dr, dc, &sol)) || run_maze((maze as! [[Int]]), (i &- 1), j, dr, dc, &sol)) || run_maze((maze as! [[Int]]), i, (j &- 1), dr, dc, &sol)) {
                    return true
                }
                sol[i][j] = 1
                return false
            }
        }
        return false
    }
    func solve_maze(_ maze: [[Int]], _ sr: Int, _ sc: Int, _ dr: Int, _ dc: Int) -> [[Int]] {
        let size = Int(((maze).count))
        if (!((((((((0 <= sr) && (sr < size)) && (0 <= sc)) && (sc < size)) && (0 <= dr)) && (dr < size)) && (0 <= dc)) && (dc < size))) {
            _ = fatalError("Invalid source or destination coordinates")
        }
        var sol: [[Int]] = ([] as! [[Int]])
        var i: Int = 0
        while (i < size) {
            var row: [Int] = ([] as! [Int])
            var j: Int = 0
            while (j < size) {
                row = (_append(row, 1) as! [Int])
                j = Int((j &+ 1))
            }
            sol = (_append(sol, row) as! [[Int]])
            i = Int((i &+ 1))
        }
        let solved = run_maze((maze as! [[Int]]), sr, sc, dr, dc, &sol)
        if solved {
            return sol
        } else {
            _ = fatalError("No solution exists!")
        }
    }
    let maze: [[Int]] = ([([0, 1, 0, 1, 1] as! [Int]), ([0, 0, 0, 0, 0] as! [Int]), ([1, 0, 1, 0, 1] as! [Int]), ([0, 0, 1, 0, 0] as! [Int]), ([1, 0, 0, 1, 0] as! [Int])] as! [[Int]])
    let n = (Int(((maze).count)) &- 1)
    print(_p("[" + (solve_maze((maze as! [[Int]]), 0, 0, n, n) as! [[Int]]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
