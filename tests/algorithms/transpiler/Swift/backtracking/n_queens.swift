// Generated by Mochi transpiler v0.10.59 on 2025-08-06 16:42:20 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func create_board(_ n: Int) -> [[Int]] {
        var board: [[Int]] = ([] as! [[Int]])
        var i: Int = 0
        while (i < n) {
            var row: [Int] = ([] as! [Int])
            var j: Int = 0
            while (j < n) {
                row = (_append(row, 0) as! [Int])
                j = Int((j &+ 1))
            }
            board = (_append(board, row) as! [[Int]])
            i = Int((i &+ 1))
        }
        return board
    }
    func is_safe(_ board: [[Int]], _ row: Int, _ column: Int) -> Bool {
        let n = Int(((board).count))
        var i: Int = 0
        while (i < row) {
            if ((board[i][column] as? Int ?? 0) == 1) {
                return false
            }
            i = Int((i &+ 1))
        }
        i = Int((row &- 1))
        var j: Int = (column &- 1)
        while ((i >= 0) && (j >= 0)) {
            if ((board[i][j] as? Int ?? 0) == 1) {
                return false
            }
            i = Int((i &- 1))
            j = Int((j &- 1))
        }
        i = Int((row &- 1))
        j = Int((column &+ 1))
        while ((i >= 0) && (j < n)) {
            if ((board[i][j] as? Int ?? 0) == 1) {
                return false
            }
            i = Int((i &- 1))
            j = Int((j &+ 1))
        }
        return true
    }
    func row_string(_ row: [Int]) -> String {
        var s: String = ""
        var j: Int = 0
        while (j < Int(((row).count))) {
            if ((row[j] as? Int ?? 0) == 1) {
                s = ((s + "Q ") as! String)
            } else {
                s = ((s + ". ") as! String)
            }
            j = Int((j &+ 1))
        }
        return s
    }
    func printboard(_ board: [[Int]]) {
        var i: Int = 0
        while (i < Int(((board).count))) {
            print(_p(String(describing: row_string((board[i] as! [Int])))))
            i = Int((i &+ 1))
        }
    }
    func solve(_ board: inout [[Int]], _ row: Int) -> Int {
        if (row >= Int(((board).count))) {
            _ = printboard((board as! [[Int]]))
            print(_p(""))
            return 1
        }
        var count: Int = 0
        var i: Int = 0
        while (i < Int(((board).count))) {
            if is_safe((board as! [[Int]]), row, i) {
                board[row][i] = 1
                count = Int((count &+ Int(solve(&board, (row &+ 1)))))
                board[row][i] = 0
            }
            i = Int((i &+ 1))
        }
        return count
    }
    func n_queens(_ n: Int) -> Int {
        var board: [[Int]] = (create_board(n) as! [[Int]])
        let total = Int(solve(&board, 0))
        print(_p(("The total number of solutions are: " + String(describing: total))))
        return total
    }
    _ = Int(n_queens(4))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
