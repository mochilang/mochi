// Generated by Mochi transpiler v0.10.59 on 2025-08-06 16:31:58 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func is_valid(_ puzzle: [[String]], _ word: String, _ row: Int, _ col: Int, _ vertical: Bool) -> Bool {
        for i in 0..<Int(((word).count)) {
            if vertical {
                if (((row &+ i) >= Int(((puzzle).count))) || ((puzzle[(row &+ i)][col] as! String) != "")) {
                    return false
                }
            } else {
                if (((col &+ i) >= Int((((puzzle[0] as! [String])).count))) || ((puzzle[row][(col &+ i)] as! String) != "")) {
                    return false
                }
            }
        }
        return true
    }
    func place_word(_ puzzle: inout [[String]], _ word: String, _ row: Int, _ col: Int, _ vertical: Bool) -> Void {
        for i in 0..<Int(((word).count)) {
            let ch: String = (String(Array(word)[i]) as! String)
            if vertical {
                puzzle[(row &+ i)][col] = (ch as! String)
            } else {
                puzzle[row][(col &+ i)] = (ch as! String)
            }
        }
    }
    func remove_word(_ puzzle: inout [[String]], _ word: String, _ row: Int, _ col: Int, _ vertical: Bool) -> Void {
        for i in 0..<Int(((word).count)) {
            if vertical {
                puzzle[(row &+ i)][col] = ""
            } else {
                puzzle[row][(col &+ i)] = ""
            }
        }
    }
    func solve_crossword(_ puzzle: inout [[String]], _ words: [String], _ used: inout [Bool]) -> Bool {
        for row in 0..<Int(((puzzle).count)) {
            for col in 0..<Int((((puzzle[0] as! [String])).count)) {
                if ((puzzle[row][col] as! String) == "") {
                    for i in 0..<Int(((words).count)) {
                        if !(used[i] ?? false) {
                            let word: String = (words[i] as! String)
                            for vertical in ([true, false] as! [Bool]) {
                                if is_valid((puzzle as! [[String]]), (word as! String), row, col, (vertical as! Bool)) {
                                    _ = place_word(&puzzle, (word as! String), row, col, (vertical as! Bool))
                                    used[i] = true
                                    if solve_crossword(&puzzle, (words as! [String]), &used) {
                                        return true
                                    }
                                    used[i] = false
                                    _ = remove_word(&puzzle, (word as! String), row, col, (vertical as! Bool))
                                }
                            }
                        }
                    }
                    return false
                }
            }
        }
        return true
    }
    var puzzle: [[String]] = ([(["", "", ""] as! [String]), (["", "", ""] as! [String]), (["", "", ""] as! [String])] as! [[String]])
    var words: [String] = (["cat", "dog", "car"] as! [String])
    var used: [Bool] = ([false, false, false] as! [Bool])
    if solve_crossword(&puzzle, (words as! [String]), &used) {
        print(_p("Solution found:"))
        for row in puzzle {
            print(_p("[" + row.map{ if let s = $0 as? String { "\"" + s.replacingOccurrences(of: "\"", with: "\\\"") + "\"" } else { _p($0) } }.joined(separator: ", ") + "]"))
        }
    } else {
        print(_p("No solution found:"))
    }
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
