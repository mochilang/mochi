// Generated by Mochi transpiler v0.10.59 on 2025-08-06 16:42:12 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func minimax(_ depth: Int, _ node_index: Int, _ is_max: Bool, _ scores: [Int], _ height: Int) -> Int {
        if (depth < 0) {
            _ = fatalError("Depth cannot be less than 0")
        }
        if (Int(((scores).count)) == 0) {
            _ = fatalError("Scores cannot be empty")
        }
        if (depth == height) {
            return (scores[node_index] as? Int ?? 0)
        }
        if is_max {
            let left = Int(minimax((depth &+ 1), (node_index &* 2), false, (scores as! [Int]), height))
            let right = Int(minimax((depth &+ 1), ((node_index &* 2) &+ 1), false, (scores as! [Int]), height))
            if (left > right) {
                return left
            } else {
                return right
            }
        }
        let left = Int(minimax((depth &+ 1), (node_index &* 2), true, (scores as! [Int]), height))
        let right = Int(minimax((depth &+ 1), ((node_index &* 2) &+ 1), true, (scores as! [Int]), height))
        if (left < right) {
            return left
        } else {
            return right
        }
    }
    func tree_height(_ n: Int) -> Int {
        var h: Int = 0
        var v: Int = n
        while (v > 1) {
            v = Int((v / 2))
            h = Int((h &+ 1))
        }
        return h
    }
    func main() {
        let scores: [Int] = ([90, 23, 6, 33, 21, 65, 123, 34423] as! [Int])
        let height = Int(tree_height(Int(((scores).count))))
        print(_p(("Optimal value : " + String(describing: Int(minimax(0, 0, true, (scores as! [Int]), height))))))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
