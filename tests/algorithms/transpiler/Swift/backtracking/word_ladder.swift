// Generated by Mochi transpiler v0.10.59 on 2025-08-06 18:40:39 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let alphabet = "abcdefghijklmnopqrstuvwxyz"
    func contains(_ xs: [String], _ x: String) -> Bool {
        var i: Int = 0
        while (i < Int(((xs).count))) {
            if ((xs[i] as! String) == x) {
                return true
            }
            i = Int((i &+ 1))
        }
        return false
    }
    func remove_item(_ xs: [String], _ x: String) -> [String] {
        var res: [String] = ([] as! [String])
        var removed: Bool = false
        var i: Int = 0
        while (i < Int(((xs).count))) {
            if ((!removed) && ((xs[i] as! String) == x)) {
                removed = true
            } else {
                res = (_append(res, (xs[i] as! String)) as! [String])
            }
            i = Int((i &+ 1))
        }
        return res
    }
    func word_ladder(_ current: String, _ path: [String], _ target: String, _ words: [String]) -> [String] {
        if (current == target) {
            return path
        }
        var i: Int = 0
        while (i < Int(((current).count))) {
            var j: Int = 0
            while (j < Int(((alphabet).count))) {
                let c = String(describing: String(Array(String(describing: (alphabet as! String)))[j..<(j &+ 1)]))
                let transformed = ((String(describing: String(Array(String(describing: (current as! String)))[0..<i])) + c) + String(describing: String(Array(String(describing: (current as! String)))[(i &+ 1)..<Int(((current).count))])))
                if ((words as! [String]).contains((transformed as! String))) {
                    let new_words: [String] = (remove_item((words as! [String]), (transformed as! String)) as! [String])
                    let new_path: [String] = (_append(path, transformed) as! [String])
                    let result: [String] = (word_ladder((transformed as! String), (new_path as! [String]), (target as! String), (new_words as! [String])) as! [String])
                    if (Int(((result).count)) > 0) {
                        return result
                    }
                }
                j = Int((j &+ 1))
            }
            i = Int((i &+ 1))
        }
        return ([] as! [String])
    }
    func main() {
        let w1: [String] = (["hot", "dot", "dog", "lot", "log", "cog"] as! [String])
        print(_p("[" + (word_ladder("hit", (["hit"] as! [String]), "cog", (w1 as! [String])) as! [String]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
        let w2: [String] = (["hot", "dot", "dog", "lot", "log"] as! [String])
        print(_p("[" + (word_ladder("hit", (["hit"] as! [String]), "cog", (w2 as! [String])) as! [String]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
        let w3: [String] = (["load", "goad", "gold", "lead", "lord"] as! [String])
        print(_p("[" + (word_ladder("lead", (["lead"] as! [String]), "gold", (w3 as! [String])) as! [String]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
        let w4: [String] = (["came", "cage", "code", "cade", "gave"] as! [String])
        print(_p("[" + (word_ladder("game", (["game"] as! [String]), "code", (w4 as! [String])) as! [String]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
