// Generated by Mochi transpiler v0.10.59 on 2025-08-06 16:42:25 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _repeat(_ s: String, _ n: Int) -> String {
    if n <= 0 { return "" }
    return String(repeating: s, count: n)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func contains(_ xs: [Int], _ x: Int) -> Bool {
        var i: Int = 0
        while (i < Int(((xs).count))) {
            if ((xs[i] as? Int ?? 0) == x) {
                return true
            }
            i = Int((i &+ 1))
        }
        return false
    }
    func `repeat`(_ s: String, _ times: Int) -> String {
        var result: String = ""
        var i: Int = 0
        while (i < times) {
            result = ((result + s) as! String)
            i = Int((i &+ 1))
        }
        return result
    }
    func build_board(_ pos: [Int], _ n: Int) -> [String] {
        var board: [String] = ([] as! [String])
        var i: Int = 0
        while (i < Int(((pos).count))) {
            let col = (pos[i] as? Int ?? 0)
            let line = ((String(describing: _repeat(". ", col)) + "Q ") + String(describing: _repeat(". ", ((n &- 1) &- col))))
            board = (_append(board, line) as! [String])
            i = Int((i &+ 1))
        }
        return board
    }
    func depth_first_search(_ pos: [Int], _ dr: [Int], _ dl: [Int], _ n: Int) -> [[String]] {
        let row = Int(((pos).count))
        if (row == n) {
            var single: [[String]] = ([] as! [[String]])
            single = (_append(single, (build_board((pos as! [Int]), n) as! [String])) as! [[String]])
            return single
        }
        var boards: [[String]] = ([] as! [[String]])
        var col: Int = 0
        while (col < n) {
            if ((((pos as! [Int]).contains(col)) || ((dr as! [Int]).contains((row &- col)))) || ((dl as! [Int]).contains((row &+ col)))) {
                col = Int((col &+ 1))
                continue
            }
            let result: [[String]] = (depth_first_search((_append(pos, col) as! [Int]), (_append(dr, (row &- col)) as! [Int]), (_append(dl, (row &+ col)) as! [Int]), n) as! [[String]])
            boards = ((concat((boards as! [Any?]), result) as! [Any?]) as! [[String]])
            col = Int((col &+ 1))
        }
        return boards
    }
    func n_queens_solution(_ n: Int) -> Int {
        let boards: [[String]] = (depth_first_search(([] as! [Int]), ([] as! [Int]), ([] as! [Int]), n) as! [[String]])
        var i: Int = 0
        while (i < Int(((boards).count))) {
            var j: Int = 0
            while (j < Int((((boards[i] as! [String])).count))) {
                print(_p((boards[i][j] as! String)))
                j = Int((j &+ 1))
            }
            print(_p(""))
            i = Int((i &+ 1))
        }
        print(_p(Int(((boards).count))), _p("solutions were found."))
        return Int(((boards).count))
    }
    _ = Int(n_queens_solution(4))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
