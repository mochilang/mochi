// Generated by Mochi transpiler v0.10.59 on 2025-08-06 16:37:37 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func get_valid_pos(_ position: [Int], _ n: Int) -> [[Int]] {
        let y = (position[0] as? Int ?? 0)
        let x = (position[1] as? Int ?? 0)
        let positions: [[Int]] = ([([(y &+ 1), (x &+ 2)] as! [Int]), ([(y &- 1), (x &+ 2)] as! [Int]), ([(y &+ 1), (x &- 2)] as! [Int]), ([(y &- 1), (x &- 2)] as! [Int]), ([(y &+ 2), (x &+ 1)] as! [Int]), ([(y &+ 2), (x &- 1)] as! [Int]), ([(y &- 2), (x &+ 1)] as! [Int]), ([(y &- 2), (x &- 1)] as! [Int])] as! [[Int]])
        var permissible: [[Int]] = ([] as! [[Int]])
        for idx in 0..<Int(((positions).count)) {
            let inner: [Int] = (positions[idx] as! [Int])
            let y_test = (inner[0] as? Int ?? 0)
            let x_test = (inner[1] as? Int ?? 0)
            if ((((y_test >= 0) && (y_test < n)) && (x_test >= 0)) && (x_test < n)) {
                permissible = (_append(permissible, inner) as! [[Int]])
            }
        }
        return permissible
    }
    func is_complete(_ board: [[Int]]) -> Bool {
        for i in 0..<Int(((board).count)) {
            let row: [Int] = (board[i] as! [Int])
            for j in 0..<Int(((row).count)) {
                if ((row[j] as? Int ?? 0) == 0) {
                    return false
                }
            }
        }
        return true
    }
    func open_knight_tour_helper(_ board: inout [[Int]], _ pos: [Int], _ curr: Int) -> Bool {
        if is_complete((board as! [[Int]])) {
            return true
        }
        let moves: [[Int]] = (get_valid_pos((pos as! [Int]), Int(((board).count))) as! [[Int]])
        for i in 0..<Int(((moves).count)) {
            let position: [Int] = (moves[i] as! [Int])
            let y = (position[0] as? Int ?? 0)
            let x = (position[1] as? Int ?? 0)
            if ((board[y][x] as? Int ?? 0) == 0) {
                board[y][x] = Int((curr &+ 1))
                if open_knight_tour_helper(&board, (position as! [Int]), (curr &+ 1)) {
                    return true
                }
                board[y][x] = 0
            }
        }
        return false
    }
    func open_knight_tour(_ n: Int) -> [[Int]] {
        var board: [[Int]] = ([] as! [[Int]])
        for i in 0..<n {
            var row: [Int] = ([] as! [Int])
            for j in 0..<n {
                row = (_append(row, 0) as! [Int])
            }
            board = (_append(board, row) as! [[Int]])
        }
        for i in 0..<n {
            for j in 0..<n {
                board[i][j] = 1
                if open_knight_tour_helper(&board, ([i, j] as! [Int]), 1) {
                    return board
                }
                board[i][j] = 0
            }
        }
        print(_p(("Open Knight Tour cannot be performed on a board of size " + String(describing: n))))
        return board
    }
    var board: [[Int]] = (open_knight_tour(1) as! [[Int]])
    print(_p((board[0][0] as? Int ?? 0)))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
