// Generated by Mochi transpiler v0.10.59 on 2025-08-06 16:31:53 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func backtrack(_ candidates: [Int], _ start: Int, _ target: Int, _ path: [Int], _ result: inout [[Int]]) -> [[Int]] {
        if (target == 0) {
            return (_append(result, path) as! [[Int]])
        }
        var i: Int = start
        while (i < Int(((candidates).count))) {
            let value = (candidates[i] as? Int ?? 0)
            if (value <= target) {
                let new_path: [Int] = (_append(path, value) as! [Int])
                result = (backtrack((candidates as! [Int]), i, (target &- value), (new_path as! [Int]), &result) as! [[Int]])
            }
            i = Int((i &+ 1))
        }
        return result
    }
    func combination_sum(_ candidates: [Int], _ target: Int) -> [[Int]] {
        let path: [Int] = ([] as! [Int])
        var result: [[Int]] = ([] as! [[Int]])
        return (backtrack((candidates as! [Int]), 0, target, (path as! [Int]), &result) as! [[Int]])
    }
    print(_p("[" + (combination_sum(([2, 3, 5] as! [Int]), 8) as! [[Int]]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    print(_p("[" + (combination_sum(([2, 3, 6, 7] as! [Int]), 7) as! [[Int]]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
