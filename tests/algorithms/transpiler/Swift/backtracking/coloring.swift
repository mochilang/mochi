// Generated by Mochi transpiler v0.10.59 on 2025-08-06 16:31:49 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func valid_coloring(_ neighbours: [Int], _ colored_vertices: [Int], _ color: Int) -> Bool {
        var i: Int = 0
        while (i < Int(((neighbours).count))) {
            if (((neighbours[i] as? Int ?? 0) == 1) && ((colored_vertices[i] as? Int ?? 0) == color)) {
                return false
            }
            i = Int((i &+ 1))
        }
        return true
    }
    func util_color(_ graph: [[Int]], _ max_colors: Int, _ colored_vertices: inout [Int], _ index: Int) -> Bool {
        if (index == Int(((graph).count))) {
            return true
        }
        var c: Int = 0
        while (c < max_colors) {
            if valid_coloring((graph[index] as! [Int]), (colored_vertices as! [Int]), c) {
                colored_vertices[index] = Int(c)
                if util_color((graph as! [[Int]]), max_colors, &colored_vertices, (index &+ 1)) {
                    return true
                }
                colored_vertices[index] = Int(-1)
            }
            c = Int((c &+ 1))
        }
        return false
    }
    func color(_ graph: [[Int]], _ max_colors: Int) -> [Int] {
        var colored_vertices: [Int] = ([] as! [Int])
        var i: Int = 0
        while (i < Int(((graph).count))) {
            colored_vertices = (_append(colored_vertices, -1) as! [Int])
            i = Int((i &+ 1))
        }
        if util_color((graph as! [[Int]]), max_colors, &colored_vertices, 0) {
            return colored_vertices
        }
        return ([] as! [Int])
    }
    let graph: [[Int]] = ([([0, 1, 0, 0, 0] as! [Int]), ([1, 0, 1, 0, 1] as! [Int]), ([0, 1, 0, 1, 0] as! [Int]), ([0, 1, 1, 0, 0] as! [Int]), ([0, 1, 0, 0, 0] as! [Int])] as! [[Int]])
    print(_p("[" + (color((graph as! [[Int]]), 3) as! [Int]).map{ if let s = $0 as? String { "\"" + s.replacingOccurrences(of: "\"", with: "\\\"") + "\"" } else { _p($0) } }.joined(separator: ", ") + "]"))
    print(_p("\n"))
    print(_p(Int((((color((graph as! [[Int]]), 2) as! [Int])).count))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
