// Generated by Mochi transpiler v0.10.59 on 2025-08-06 16:37:07 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func valid_connection(_ graph: [[Int]], _ next_ver: Int, _ curr_ind: Int, _ path: [Int]) -> Bool {
        if ((graph[(path[(curr_ind &- 1)] as? Int ?? 0)][next_ver] as? Int ?? 0) == 0) {
            return false
        }
        for v in path {
            if (v == next_ver) {
                return false
            }
        }
        return true
    }
    func util_hamilton_cycle(_ graph: [[Int]], _ path: inout [Int], _ curr_ind: Int) -> Bool {
        if (curr_ind == Int(((graph).count))) {
            return ((graph[(path[(curr_ind &- 1)] as? Int ?? 0)][(path[0] as? Int ?? 0)] as? Int ?? 0) == 1)
        }
        var next_ver: Int = 0
        while (next_ver < Int(((graph).count))) {
            if valid_connection((graph as! [[Int]]), next_ver, curr_ind, (path as! [Int])) {
                path = _set(path, curr_ind, Int(next_ver))
                if util_hamilton_cycle((graph as! [[Int]]), &path, (curr_ind &+ 1)) {
                    return true
                }
                path = _set(path, curr_ind, Int(-1))
            }
            next_ver = Int((next_ver &+ 1))
        }
        return false
    }
    func hamilton_cycle(_ graph: [[Int]], _ start_index: Int) -> [Int] {
        var path: [Int] = []
        var i: Int = 0
        while (i < (Int(((graph).count)) &+ 1)) {
            path = _set(path, i, Int(-1))
            i = Int((i &+ 1))
        }
        path = _set(path, 0, Int(start_index))
        var last: Int = (Int(((path).count)) &- 1)
        path = _set(path, last, Int(start_index))
        if util_hamilton_cycle((graph as! [[Int]]), &path, 1) {
            return path
        }
        return ([] as! [Int])
    }
    do {
        let graph: [[Int]] = ([([0, 1, 0, 1, 0] as! [Int]), ([1, 0, 1, 1, 1] as! [Int]), ([0, 1, 0, 0, 1] as! [Int]), ([1, 1, 0, 0, 1] as! [Int]), ([0, 1, 1, 1, 0] as! [Int])] as! [[Int]])
        assert(((hamilton_cycle((graph as! [[Int]]), 0) as! [Int]) == ([0, 1, 2, 4, 3, 0] as! [Int])))
    }
    do {
        let graph: [[Int]] = ([([0, 1, 0, 1, 0] as! [Int]), ([1, 0, 1, 1, 1] as! [Int]), ([0, 1, 0, 0, 1] as! [Int]), ([1, 1, 0, 0, 1] as! [Int]), ([0, 1, 1, 1, 0] as! [Int])] as! [[Int]])
        assert(((hamilton_cycle((graph as! [[Int]]), 3) as! [Int]) == ([3, 0, 1, 2, 4, 3] as! [Int])))
    }
    do {
        let graph: [[Int]] = ([([0, 1, 0, 1, 0] as! [Int]), ([1, 0, 1, 1, 1] as! [Int]), ([0, 1, 0, 0, 1] as! [Int]), ([1, 1, 0, 0, 0] as! [Int]), ([0, 1, 1, 0, 0] as! [Int])] as! [[Int]])
        assert(((hamilton_cycle((graph as! [[Int]]), 4) as! [Int]) == []))
    }
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
