// Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:37:34 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func sort_triplet(_ a: Int, _ b: Int, _ c: Int) -> [Int] {
        var x: Int = a
        var y: Int = b
        var z: Int = c
        if (x > y) {
            let t = x
            x = Int(y)
            y = Int(t)
        }
        if (y > z) {
            let t = y
            y = Int(z)
            z = Int(t)
        }
        if (x > y) {
            let t = x
            x = Int(y)
            y = Int(t)
        }
        return ([x, y, z] as! [Int])
    }
    func contains_triplet(_ arr: [[Int]], _ target: [Int]) -> Bool {
        for i in 0..<Int(((arr).count)) {
            let item: [Int] = (arr[i] as! [Int])
            var same: Bool = true
            for j in 0..<Int(((target).count)) {
                if ((item[j] as? Int ?? 0) != (target[j] as? Int ?? 0)) {
                    same = false
                    break
                }
            }
            if same {
                return true
            }
        }
        return false
    }
    func contains_int(_ arr: [Int], _ value: Int) -> Bool {
        for i in 0..<Int(((arr).count)) {
            if ((arr[i] as? Int ?? 0) == value) {
                return true
            }
        }
        return false
    }
    func find_triplets_with_0_sum(_ nums: [Int]) -> [[Int]] {
        let n = Int(((nums).count))
        var result: [[Int]] = ([] as! [[Int]])
        for i in 0..<n {
            for j in Int((i &+ 1))..<n {
                for k in Int((j &+ 1))..<n {
                    let a = (nums[i] as? Int ?? 0)
                    let b = (nums[j] as? Int ?? 0)
                    let c = (nums[k] as? Int ?? 0)
                    if (((a &+ b) &+ c) == 0) {
                        let trip: [Int] = (sort_triplet(a, b, c) as! [Int])
                        if (!contains_triplet((result as! [[Int]]), (trip as! [Int]))) {
                            result = (_append(result, trip) as! [[Int]])
                        }
                    }
                }
            }
        }
        return result
    }
    func find_triplets_with_0_sum_hashing(_ arr: [Int]) -> [[Int]] {
        let target_sum = 0
        var output: [[Int]] = ([] as! [[Int]])
        for i in 0..<Int(((arr).count)) {
            var seen: [Int] = ([] as! [Int])
            let current_sum = (target_sum &- (arr[i] as? Int ?? 0))
            for j in Int((i &+ 1))..<Int(((arr).count)) {
                let other = (arr[j] as? Int ?? 0)
                let required = (current_sum &- other)
                if contains_int((seen as! [Int]), required) {
                    let trip: [Int] = (sort_triplet((arr[i] as? Int ?? 0), other, required) as! [Int])
                    if (!contains_triplet((output as! [[Int]]), (trip as! [Int]))) {
                        output = (_append(output, trip) as! [[Int]])
                    }
                }
                seen = (_append(seen, other) as! [Int])
            }
        }
        return output
    }
    print(_p("[" + (find_triplets_with_0_sum(([-1, 0, 1, 2, -1, -4] as! [Int])) as! [[Int]]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    print(_p("[" + (find_triplets_with_0_sum(([] as! [Int])) as! [[Int]]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    print(_p("[" + (find_triplets_with_0_sum(([0, 0, 0] as! [Int])) as! [[Int]]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    print(_p("[" + (find_triplets_with_0_sum(([1, 2, 3, 0, -1, -2, -3] as! [Int])) as! [[Int]]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    print(_p("[" + (find_triplets_with_0_sum_hashing(([-1, 0, 1, 2, -1, -4] as! [Int])) as! [[Int]]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    print(_p("[" + (find_triplets_with_0_sum_hashing(([] as! [Int])) as! [[Int]]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    print(_p("[" + (find_triplets_with_0_sum_hashing(([0, 0, 0] as! [Int])) as! [[Int]]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    print(_p("[" + (find_triplets_with_0_sum_hashing(([1, 2, 3, 0, -1, -2, -3] as! [Int])) as! [[Int]]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
