// Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:37:42 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func sortFloats(_ xs: [Double]) -> [Double] {
        var arr: [Double] = xs
        var i: Int = 0
        while (i < Int(((arr).count))) {
            var j: Int = 0
            while (j < (Int(((arr).count)) &- 1)) {
                if (Double(arr[j]) > Double(arr[(j &+ 1)])) {
                    let t = Double(arr[j])
                    arr = _set(arr, j, Double(arr[(j &+ 1)]))
                    arr = _set(arr, (j &+ 1), Double(t))
                }
                j = Int((j &+ 1))
            }
            i = Int((i &+ 1))
        }
        return arr
    }
    func find_median_sorted_arrays(_ nums1: [Double], _ nums2: [Double]) -> Double {
        if ((Int(((nums1).count)) == 0) && (Int(((nums2).count)) == 0)) {
            _ = fatalError("Both input arrays are empty.")
        }
        var merged: [Double] = ([] as! [Double])
        var i: Int = 0
        while (i < Int(((nums1).count))) {
            merged = (_append(merged, Double(nums1[i])) as! [Double])
            i = Int((i &+ 1))
        }
        var j: Int = 0
        while (j < Int(((nums2).count))) {
            merged = (_append(merged, Double(nums2[j])) as! [Double])
            j = Int((j &+ 1))
        }
        let sorted: [Double] = (sortFloats((merged as! [Double])) as! [Double])
        let total = Int(((sorted).count))
        if (((total % 2 + 2) % 2) == 1) {
            return Double(sorted[(total / 2)])
        }
        let middle1 = Double(sorted[((total / 2) &- 1)])
        let middle2 = Double(sorted[(total / 2)])
        return (Double((middle1 + middle2)) / 2.0)
    }
    print(_p(Double(find_median_sorted_arrays(([1.0, 3.0] as! [Double]), ([2.0] as! [Double])))))
    print(_p(Double(find_median_sorted_arrays(([1.0, 2.0] as! [Double]), ([3.0, 4.0] as! [Double])))))
    print(_p(Double(find_median_sorted_arrays(([0.0, 0.0] as! [Double]), ([0.0, 0.0] as! [Double])))))
    print(_p(Double(find_median_sorted_arrays(([] as! [Double]), ([1.0] as! [Double])))))
    print(_p(Double(find_median_sorted_arrays(([-1000.0] as! [Double]), ([1000.0] as! [Double])))))
    print(_p(Double(find_median_sorted_arrays(([-1.1, -2.2] as! [Double]), ([-3.3, -4.4] as! [Double])))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
