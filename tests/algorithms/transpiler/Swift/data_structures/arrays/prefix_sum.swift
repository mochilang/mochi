// Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:37:53 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
struct PrefixSum: Codable {
    var prefix_sum: [Int]
    init() {
        self.prefix_sum = []
    }
    init(prefix_sum: [Int]) {
        self.prefix_sum = prefix_sum
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func make_prefix_sum(_ arr: [Int]) -> PrefixSum {
        var prefix: [Int] = ([] as! [Int])
        var running: Int = 0
        var i: Int = 0
        while (i < Int(((arr).count))) {
            running = Int((running &+ (arr[i] as? Int ?? 0)))
            prefix = (_append(prefix, running) as! [Int])
            i = Int((i &+ 1))
        }
        return PrefixSum(prefix_sum: prefix)
    }
    func get_sum(_ ps: PrefixSum, _ start: Int, _ end: Int) -> Int {
        let prefix: [Int] = ps.prefix_sum
        if (Int(((prefix).count)) == 0) {
            _ = fatalError("The array is empty.")
        }
        if (((start < 0) || (end >= Int(((prefix).count)))) || (start > end)) {
            _ = fatalError("Invalid range specified.")
        }
        if (start == 0) {
            return (prefix[end] as? Int ?? 0)
        }
        return ((prefix[end] as? Int ?? 0) &- (prefix[(start &- 1)] as? Int ?? 0))
    }
    func contains_sum(_ ps: PrefixSum, _ target_sum: Int) -> Bool {
        let prefix: [Int] = ps.prefix_sum
        var sums: [Int] = ([0] as! [Int])
        var i: Int = 0
        while (i < Int(((prefix).count))) {
            let sum_item = (prefix[i] as? Int ?? 0)
            var j: Int = 0
            while (j < Int(((sums).count))) {
                if ((sums[j] as? Int ?? 0) == (sum_item &- target_sum)) {
                    return true
                }
                j = Int((j &+ 1))
            }
            sums = (_append(sums, sum_item) as! [Int])
            i = Int((i &+ 1))
        }
        return false
    }
    let ps = make_prefix_sum(([1, 2, 3] as! [Int]))
    print(_p(String(describing: Int(get_sum((ps as! PrefixSum), 0, 2)))))
    print(_p(String(describing: Int(get_sum((ps as! PrefixSum), 1, 2)))))
    print(_p(String(describing: Int(get_sum((ps as! PrefixSum), 2, 2)))))
    print(_p(String(describing: contains_sum((ps as! PrefixSum), 6))))
    print(_p(String(describing: contains_sum((ps as! PrefixSum), 5))))
    print(_p(String(describing: contains_sum((ps as! PrefixSum), 3))))
    print(_p(String(describing: contains_sum((ps as! PrefixSum), 4))))
    print(_p(String(describing: contains_sum((ps as! PrefixSum), 7))))
    let ps2 = make_prefix_sum(([1, -2, 3] as! [Int]))
    print(_p(String(describing: contains_sum((ps2 as! PrefixSum), 2))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
