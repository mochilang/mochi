// Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:37:40 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func partition(_ arr: inout [Int], _ low: Int, _ high: Int) -> Int {
        let pivot = (arr[high] as? Int ?? 0)
        var i: Int = (low &- 1)
        var j: Int = low
        while (j < high) {
            if ((arr[j] as? Int ?? 0) >= pivot) {
                i = Int((i &+ 1))
                var tmp: Int = (arr[i] as? Int ?? 0)
                arr = _set(arr, i, (arr[j] as? Int ?? 0))
                arr = _set(arr, j, Int(tmp))
            }
            j = Int((j &+ 1))
        }
        var k: Int = (i &+ 1)
        var tmp: Int = (arr[k] as? Int ?? 0)
        arr = _set(arr, k, (arr[high] as? Int ?? 0))
        arr = _set(arr, high, Int(tmp))
        return k
    }
    func kth_largest_element(_ arr: inout [Int], _ position: Int) -> Int {
        if (Int(((arr).count)) == 0) {
            return -1
        }
        if ((position < 1) || (position > Int(((arr).count)))) {
            return -1
        }
        var low: Int = 0
        var high: Int = (Int(((arr).count)) &- 1)
        while (low <= high) {
            if ((low > (Int(((arr).count)) &- 1)) || (high < 0)) {
                return -1
            }
            var pivot_index: Int = Int(partition(&arr, low, high))
            if (pivot_index == (position &- 1)) {
                return (arr[pivot_index] as? Int ?? 0)
            } else if (pivot_index > (position &- 1)) {
                high = Int((pivot_index &- 1))
            } else {
                low = Int((pivot_index &+ 1))
            }
            
        }
        return -1
    }
    var arr1: [Int] = ([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5] as! [Int])
    print(_p(Int(kth_largest_element(&arr1, 3))))
    print(_p("\n"))
    var arr2: [Int] = ([2, 5, 6, 1, 9, 3, 8, 4, 7, 3, 5] as! [Int])
    print(_p(Int(kth_largest_element(&arr2, 1))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
