// Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:38:01 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func string_to_grid(_ s: String) -> [[Int]] {
        var grid: [[Int]] = ([] as! [[Int]])
        var i: Int = 0
        while (i < 9) {
            var row: [Int] = ([] as! [Int])
            var j: Int = 0
            while (j < 9) {
                let ch = String(describing: String(Array(String(describing: (s as! String)))[((i &* 9) &+ j)..<(((i &* 9) &+ j) &+ 1)]))
                var val: Int = 0
                if ((ch != "0") && (ch != ".")) {
                    val = Int(_int(ch))
                }
                row = (_append(row, val) as! [Int])
                j = Int((j &+ 1))
            }
            grid = (_append(grid, row) as! [[Int]])
            i = Int((i &+ 1))
        }
        return grid
    }
    func print_grid(_ grid: [[Int]]) -> Void {
        for r in 0..<9 {
            var line: String = ""
            for c in 0..<9 {
                line = ((line + String(describing: (grid[r][c] as? Int ?? 0))) as! String)
                if (c < 8) {
                    line = ((line + " ") as! String)
                }
            }
            print(_p(line))
        }
    }
    func is_safe(_ grid: [[Int]], _ row: Int, _ column: Int, _ n: Int) -> Bool {
        for i in 0..<9 {
            if (((grid[row][i] as? Int ?? 0) == n) || ((grid[i][column] as? Int ?? 0) == n)) {
                return false
            }
        }
        for i in 0..<3 {
            for j in 0..<3 {
                if ((grid[(Int((row &- ((row % 3 + 3) % 3))) &+ i)][(Int((column &- ((column % 3 + 3) % 3))) &+ j)] as? Int ?? 0) == n) {
                    return false
                }
            }
        }
        return true
    }
    func find_empty(_ grid: [[Int]]) -> [Int] {
        for i in 0..<9 {
            for j in 0..<9 {
                if ((grid[i][j] as? Int ?? 0) == 0) {
                    return ([i, j] as! [Int])
                }
            }
        }
        return ([] as! [Int])
    }
    func solve(_ grid: inout [[Int]]) -> Bool {
        let loc: [Int] = (find_empty((grid as! [[Int]])) as! [Int])
        if (Int(((loc).count)) == 0) {
            return true
        }
        let row = (loc[0] as? Int ?? 0)
        let column = (loc[1] as? Int ?? 0)
        for digit in 1..<10 {
            if is_safe((grid as! [[Int]]), row, column, digit) {
                grid[row][column] = Int(digit)
                if solve(&grid) {
                    return true
                }
                grid[row][column] = 0
            }
        }
        return false
    }
    let puzzle = "003020600900305001001806400008102900700000008006708200002609500800203009005010300"
    var grid: [[Int]] = (string_to_grid((puzzle as! String)) as! [[Int]])
    print(_p("Original grid:"))
    _ = print_grid((grid as! [[Int]]))
    if solve(&grid) {
        print(_p("\nSolved grid:"))
        _ = print_grid((grid as! [[Int]]))
    } else {
        print(_p("\nNo solution found"))
    }
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
