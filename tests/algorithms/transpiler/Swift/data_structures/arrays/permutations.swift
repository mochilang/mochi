// Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:37:50 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func tail(_ xs: [Int]) -> [Int] {
        var res: [Int] = ([] as! [Int])
        var i: Int = 1
        while (i < Int(((xs).count))) {
            res = (_append(res, (xs[i] as? Int ?? 0)) as! [Int])
            i = Int((i &+ 1))
        }
        return res
    }
    func rotate_left(_ xs: [Int]) -> [Int] {
        if (Int(((xs).count)) == 0) {
            return xs
        }
        var res: [Int] = ([] as! [Int])
        var i: Int = 1
        while (i < Int(((xs).count))) {
            res = (_append(res, (xs[i] as? Int ?? 0)) as! [Int])
            i = Int((i &+ 1))
        }
        res = (_append(res, (xs[0] as? Int ?? 0)) as! [Int])
        return res
    }
    func permute_recursive(_ nums: [Int]) -> [[Int]] {
        if (Int(((nums).count)) == 0) {
            let base: [[Int]] = ([] as! [[Int]])
            return (_append(base, ([] as! [Int])) as! [[Int]])
        }
        var result: [[Int]] = ([] as! [[Int]])
        var current: [Int] = nums
        var count: Int = 0
        while (count < Int(((nums).count))) {
            let n = (current[0] as? Int ?? 0)
            let rest: [Int] = (tail((current as! [Int])) as! [Int])
            let perms: [[Int]] = (permute_recursive((rest as! [Int])) as! [[Int]])
            var j: Int = 0
            while (j < Int(((perms).count))) {
                let perm: [Int] = (_append((perms[j] as! [Int]), n) as! [Int])
                result = (_append(result, perm) as! [[Int]])
                j = Int((j &+ 1))
            }
            current = (rotate_left((current as! [Int])) as! [Int])
            count = Int((count &+ 1))
        }
        return result
    }
    func swap(_ xs: [Int], _ i: Int, _ j: Int) -> [Int] {
        var res: [Int] = ([] as! [Int])
        var k: Int = 0
        while (k < Int(((xs).count))) {
            if (k == i) {
                res = (_append(res, (xs[j] as? Int ?? 0)) as! [Int])
            } else if (k == j) {
                res = (_append(res, (xs[i] as? Int ?? 0)) as! [Int])
            } else {
                res = (_append(res, (xs[k] as? Int ?? 0)) as! [Int])
            }
            
            k = Int((k &+ 1))
        }
        return res
    }
    func permute_backtrack_helper(_ nums: [Int], _ start: Int, _ output: [[Int]]) -> [[Int]] {
        if (start == (Int(((nums).count)) &- 1)) {
            return (_append(output, nums) as! [[Int]])
        }
        var i: Int = start
        var res: [[Int]] = output
        while (i < Int(((nums).count))) {
            let swapped: [Int] = (swap((nums as! [Int]), start, i) as! [Int])
            res = (permute_backtrack_helper((swapped as! [Int]), (start &+ 1), (res as! [[Int]])) as! [[Int]])
            i = Int((i &+ 1))
        }
        return res
    }
    func permute_backtrack(_ nums: [Int]) -> [[Int]] {
        let output: [[Int]] = ([] as! [[Int]])
        return (permute_backtrack_helper((nums as! [Int]), 0, (output as! [[Int]])) as! [[Int]])
    }
    print(_p("[" + (permute_recursive(([1, 2, 3] as! [Int])) as! [[Int]]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    print(_p("[" + (permute_backtrack(([1, 2, 3] as! [Int])) as! [[Int]]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
