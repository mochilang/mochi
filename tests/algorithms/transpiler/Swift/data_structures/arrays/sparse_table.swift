// Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:37:58 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func pow2(_ n: Int) -> Int {
        var result: Int = 1
        var i: Int = 0
        while (i < n) {
            result = Int((result &* 2))
            i = Int((i &+ 1))
        }
        return result
    }
    func int_log2(_ n: Int) -> Int {
        var v: Int = n
        var res: Int = 0
        while (v > 1) {
            v = Int((v / 2))
            res = Int((res &+ 1))
        }
        return res
    }
    func build_sparse_table(_ number_list: [Int]) -> [[Int]] {
        if (Int(((number_list).count)) == 0) {
            _ = fatalError("empty number list not allowed")
        }
        let length = Int(((number_list).count))
        let row = (Int(int_log2(length)) &+ 1)
        var sparse_table: [[Int]] = ([] as! [[Int]])
        var j: Int = 0
        while (j < row) {
            var inner: [Int] = ([] as! [Int])
            var i: Int = 0
            while (i < length) {
                inner = (_append(inner, 0) as! [Int])
                i = Int((i &+ 1))
            }
            sparse_table = (_append(sparse_table, inner) as! [[Int]])
            j = Int((j &+ 1))
        }
        var i: Int = 0
        while (i < length) {
            sparse_table[0][i] = (number_list[i] as? Int ?? 0)
            i = Int((i &+ 1))
        }
        j = 1
        while (Int(pow2(j)) <= length) {
            i = 0
            while (((i &+ Int(pow2(j))) &- 1) < length) {
                let left = (sparse_table[(j &- 1)][(i &+ Int(pow2((j &- 1))))] as? Int ?? 0)
                let right = (sparse_table[(j &- 1)][i] as? Int ?? 0)
                if (left < right) {
                    sparse_table[j][i] = Int(left)
                } else {
                    sparse_table[j][i] = Int(right)
                }
                i = Int((i &+ 1))
            }
            j = Int((j &+ 1))
        }
        return sparse_table
    }
    func query(_ sparse_table: [[Int]], _ left_bound: Int, _ right_bound: Int) -> Int {
        if ((left_bound < 0) || (right_bound >= Int((((sparse_table[0] as! [Int])).count)))) {
            _ = fatalError("list index out of range")
        }
        let interval = ((right_bound &- left_bound) &+ 1)
        let j = Int(int_log2(interval))
        let val1 = (sparse_table[j][((right_bound &- Int(pow2(j))) &+ 1)] as? Int ?? 0)
        let val2 = (sparse_table[j][left_bound] as? Int ?? 0)
        if (val1 < val2) {
            return val1
        }
        return val2
    }
    let st1: [[Int]] = (build_sparse_table(([8, 1, 0, 3, 4, 9, 3] as! [Int])) as! [[Int]])
    print(_p("[" + st1.map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    let st2: [[Int]] = (build_sparse_table(([3, 1, 9] as! [Int])) as! [[Int]])
    print(_p("[" + st2.map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    print(_p(String(describing: Int(query((st1 as! [[Int]]), 0, 4)))))
    print(_p(String(describing: Int(query((st1 as! [[Int]]), 4, 6)))))
    print(_p(String(describing: Int(query((st2 as! [[Int]]), 2, 2)))))
    print(_p(String(describing: Int(query((st2 as! [[Int]]), 0, 1)))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
