// Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:37:37 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func iterator_values(_ matrix: [[Int]]) -> [Int] {
        var result: [Int] = ([] as! [Int])
        for row in matrix {
            for value in row {
                result = (_append(result, value) as! [Int])
            }
        }
        return result
    }
    func index_2d_array_in_1d(_ array: [[Int]], _ index: Int) -> Int {
        let rows = Int(((array).count))
        let cols = Int((((array[0] as! [Int])).count))
        if ((rows == 0) || (cols == 0)) {
            _ = fatalError("no items in array")
        }
        if ((index < 0) || (index >= (rows &* cols))) {
            _ = fatalError("index out of range")
        }
        return (array[Int(_int((index / cols)))][((index % cols + cols) % cols)] as? Int ?? 0)
    }
    print(_p("[" + (iterator_values(([([5] as! [Int]), ([-523] as! [Int]), ([-1] as! [Int]), ([34] as! [Int]), ([0] as! [Int])] as! [[Int]])) as! [Int]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    print(_p("[" + (iterator_values(([([5, -523, -1] as! [Int]), ([34, 0] as! [Int])] as! [[Int]])) as! [Int]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    print(_p(String(describing: Int(index_2d_array_in_1d(([([0, 1, 2, 3] as! [Int]), ([4, 5, 6, 7] as! [Int]), ([8, 9, 10, 11] as! [Int])] as! [[Int]]), 5)))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
