// Generated by Mochi transpiler v0.10.59 on 2025-08-07 00:29:20 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
struct Node: Codable {
    var data: Int
    var next: Int
    var prev: Int
    init() {
        self.data = 0
        self.next = 0
        self.prev = 0
    }
    init(data: Int, next: Int, prev: Int) {
        self.data = data
        self.next = next
        self.prev = prev
    }
}
struct Stack: Codable {
    var nodes: [Node?]
    var head: Int
    init() {
        self.nodes = []
        self.head = 0
    }
    init(nodes: [Node?], head: Int) {
        self.nodes = nodes
        self.head = head
    }
}
struct PopResult: Codable {
    var stack: Stack
    var value: Int
    var ok: Bool
    init() {
        self.stack = Stack()
        self.value = 0
        self.ok = false
    }
    init(stack: Stack, value: Int, ok: Bool) {
        self.stack = stack
        self.value = value
        self.ok = ok
    }
}
struct TopResult: Codable {
    var value: Int
    var ok: Bool
    init() {
        self.value = 0
        self.ok = false
    }
    init(value: Int, ok: Bool) {
        self.value = value
        self.ok = ok
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func empty_stack() -> Stack {
        return Stack(nodes: [], head: (0 &- 1))
    }
    func push(_ stack: Stack, _ value: Int) -> Stack {
        var nodes: [Node?] = stack.nodes
        let idx = Int(((nodes).count))
        var new_node: Node = Node(data: value, next: stack.head, prev: (0 &- 1))
        nodes = (_append(nodes, new_node) as! [Node?])
        if (stack.head != (0 &- 1)) {
            var head_node: Node = (nodes[stack.head] as! Node)
            head_node.prev = (idx as! Int)
            nodes = _set(nodes, stack.head, (head_node as! Node))
        }
        return Stack(nodes: nodes, head: idx)
    }
    func pop(_ stack: Stack) -> PopResult {
        if (stack.head == (0 &- 1)) {
            return PopResult(stack: stack, value: 0, ok: false)
        }
        var nodes: [Node?] = stack.nodes
        var head_node: Node = (nodes[stack.head] as! Node)
        let value = head_node.data
        let next_idx = head_node.next
        if (next_idx != (0 &- 1)) {
            var next_node: Node = (nodes[next_idx] as! Node)
            next_node.prev = Int((0 &- 1))
            nodes = _set(nodes, next_idx, (next_node as! Node))
        }
        let new_stack = Stack(nodes: nodes, head: next_idx)
        return PopResult(stack: new_stack, value: value, ok: true)
    }
    func top(_ stack: Stack) -> TopResult {
        if (stack.head == (0 &- 1)) {
            return TopResult(value: 0, ok: false)
        }
        let node = (stack.nodes[stack.head] as! Node)
        return TopResult(value: node.data, ok: true)
    }
    func size(_ stack: Stack) -> Int {
        var count: Int = 0
        var idx: Int = stack.head
        while (idx != (0 &- 1)) {
            count = Int((count &+ 1))
            let node = (stack.nodes[idx] as! Node)
            idx = Int(node.next)
        }
        return count
    }
    func is_empty(_ stack: Stack) -> Bool {
        return (stack.head == (0 &- 1))
    }
    func print_stack(_ stack: Stack) {
        print(_p("stack elements are:"))
        var idx: Int = stack.head
        var s: String = ""
        while (idx != (0 &- 1)) {
            let node = (stack.nodes[idx] as! Node)
            s = (((s + String(describing: node.data)) + "->") as! String)
            idx = Int(node.next)
        }
        if (Int(((s).count)) > 0) {
            print(_p(s))
        }
    }
    func main() {
        var stack: Stack = empty_stack()
        print(_p("Stack operations using Doubly LinkedList"))
        stack = (push((stack as! Stack), 4) as! Stack)
        stack = (push((stack as! Stack), 5) as! Stack)
        stack = (push((stack as! Stack), 6) as! Stack)
        stack = (push((stack as! Stack), 7) as! Stack)
        _ = print_stack((stack as! Stack))
        let t = top((stack as! Stack))
        if t.ok {
            print(_p(("Top element is " + String(describing: t.value))))
        } else {
            print(_p("Top element is None"))
        }
        print(_p(("Size of the stack is " + String(describing: Int(size((stack as! Stack)))))))
        var p: PopResult = pop((stack as! Stack))
        stack = (p.stack as! Stack)
        p = (pop((stack as! Stack)) as! PopResult)
        stack = (p.stack as! Stack)
        _ = print_stack((stack as! Stack))
        print(_p(("stack is empty: " + String(describing: is_empty((stack as! Stack))))))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
