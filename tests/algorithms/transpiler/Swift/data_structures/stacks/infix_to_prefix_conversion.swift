// Generated by Mochi transpiler v0.10.60 on 2025-08-07 16:57:25 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let PRIORITY: [String: Int] = (["^": 3, "*": 2, "/": 2, "%": 2, "+": 1, "-": 1] as! [String: Int])
    let LETTERS = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
    let DIGITS = "0123456789"
    func is_alpha(_ ch: String) -> Bool {
        var i: Int = 0
        while (i < _int(((LETTERS).count))) {
            if ((String(Array(LETTERS)[i]) as! String) == ch) {
                return true
            }
            i = _int((i &+ 1))
        }
        return false
    }
    func is_digit(_ ch: String) -> Bool {
        var i: Int = 0
        while (i < _int(((DIGITS).count))) {
            if ((String(Array(DIGITS)[i]) as! String) == ch) {
                return true
            }
            i = _int((i &+ 1))
        }
        return false
    }
    func reverse_string(_ s: String) -> String {
        var out: String = ""
        var i: Int = (_int(((s).count)) &- 1)
        while (i >= 0) {
            out = ((out + (String(Array(s)[i]) as! String)) as! String)
            i = _int((i &- 1))
        }
        return out
    }
    func infix_to_postfix(_ infix: String) -> String {
        var stack: [String] = ([] as! [String])
        var post: [String] = ([] as! [String])
        var i: Int = 0
        while (i < _int(((infix).count))) {
            let x = (String(Array(infix)[i]) as! String)
            if (is_alpha((x as! String)) || is_digit((x as! String))) {
                post = (_append(post, x) as! [String])
            } else if (x == "(") {
                stack = (_append(stack, x) as! [String])
            } else if (x == ")") {
                if (_int(((stack).count)) == 0) {
                    _ = fatalError("list index out of range")
                }
                while ((stack[(_int(((stack).count)) &- 1)] as! String) != "(") {
                    post = (_append(post, (stack[(_int(((stack).count)) &- 1)] as! String)) as! [String])
                    stack = (Array(stack[0..<(_int(((stack).count)) &- 1)]) as! [String])
                }
                stack = (Array(stack[0..<(_int(((stack).count)) &- 1)]) as! [String])
            } else if (_int(((stack).count)) == 0) {
                stack = (_append(stack, x) as! [String])
            } else {
                while (((_int(((stack).count)) > 0) && ((stack[(_int(((stack).count)) &- 1)] as! String) != "(")) && ((PRIORITY[String(String(describing: x))] as? Int ?? 0) <= (PRIORITY[String((stack[(_int(((stack).count)) &- 1)] as! String))] as? Int ?? 0))) {
                    post = (_append(post, (stack[(_int(((stack).count)) &- 1)] as! String)) as! [String])
                    stack = (Array(stack[0..<(_int(((stack).count)) &- 1)]) as! [String])
                }
                stack = (_append(stack, x) as! [String])
            }
            
            
            
            i = _int((i &+ 1))
        }
        while (_int(((stack).count)) > 0) {
            if ((stack[(_int(((stack).count)) &- 1)] as! String) == "(") {
                _ = fatalError("invalid expression")
            }
            post = (_append(post, (stack[(_int(((stack).count)) &- 1)] as! String)) as! [String])
            stack = (Array(stack[0..<(_int(((stack).count)) &- 1)]) as! [String])
        }
        var res: String = ""
        var j: Int = 0
        while (j < _int(((post).count))) {
            res = ((res + (post[j] as! String)) as! String)
            j = _int((j &+ 1))
        }
        return res
    }
    func infix_to_prefix(_ infix: String) -> String {
        var reversed: String = ""
        var i: Int = (_int(((infix).count)) &- 1)
        while (i >= 0) {
            let ch = (String(Array(infix)[i]) as! String)
            if (ch == "(") {
                reversed = ((reversed + ")") as! String)
            } else if (ch == ")") {
                reversed = ((reversed + "(") as! String)
            } else {
                reversed = ((reversed + ch) as! String)
            }
            
            i = _int((i &- 1))
        }
        let postfix = String(describing: infix_to_postfix((reversed as! String)))
        let prefix = String(describing: reverse_string((postfix as! String)))
        return prefix
    }
    do {
        assert((String(describing: infix_to_prefix("a+b^c")) == "+a^bc"))
    }
    do {
        assert((String(describing: infix_to_prefix("1*((-a)*2+b)")) == "*1+*-a2b"))
    }
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
