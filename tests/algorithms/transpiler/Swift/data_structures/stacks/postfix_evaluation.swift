// Generated by Mochi transpiler v0.10.59 on 2025-08-07 00:29:08 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func slice_without_last(_ xs: [Double?]) -> [Double?] {
        var res: [Double?] = ([] as! [Double?])
        var i: Int = 0
        while (i < (Int(((xs).count)) &- 1)) {
            res = (_append(res, Double(xs[i])) as! [Double?])
            i = Int((i &+ 1))
        }
        return res
    }
    func parse_float(_ token: String) -> Double {
        var sign: Double = 1.0
        var idx: Int = 0
        if (Int(((token).count)) > 0) {
            let first = String(describing: String(Array(String(describing: (token as! String)))[0..<1]))
            if (first == "-") {
                sign = Double(-1.0)
                idx = 1
            } else if (first == "+") {
                idx = 1
            }
            
        }
        var int_part: Int = 0
        while ((idx < Int(((token).count))) && (String(describing: String(Array(String(describing: (token as! String)))[idx..<(idx &+ 1)])) != ".")) {
            int_part = Int(((int_part &* 10) &+ Int(_int(String(describing: String(Array(String(describing: (token as! String)))[idx..<(idx &+ 1)]))))))
            idx = Int((idx &+ 1))
        }
        var result: Double = (1.0 * Double(int_part))
        if ((idx < Int(((token).count))) && (String(describing: String(Array(String(describing: (token as! String)))[idx..<(idx &+ 1)])) == ".")) {
            idx = Int((idx &+ 1))
            var place: Double = 0.1
            while (idx < Int(((token).count))) {
                let digit = Int(_int(String(describing: String(Array(String(describing: (token as! String)))[idx..<(idx &+ 1)]))))
                result = Double((result + (place * Double((1.0 * Double(digit))))))
                place = Double((place / 10.0))
                idx = Int((idx &+ 1))
            }
        }
        return (sign * result)
    }
    func pow_float(_ base: Double, _ exp: Double) -> Double {
        var result: Double = 1.0
        var i: Int = 0
        let e = Int(_int(exp))
        while (i < e) {
            result = Double((result * base))
            i = Int((i &+ 1))
        }
        return result
    }
    func apply_op(_ a: Double, _ b: Double, _ op: String) -> Double {
        if (op == "+") {
            return (a + b)
        }
        if (op == "-") {
            return (a - b)
        }
        if (op == "*") {
            return (a * b)
        }
        if (op == "/") {
            return (a / b)
        }
        if (op == "^") {
            return Double(pow_float(Double(a), Double(b)))
        }
        return 0.0
    }
    func evaluate(_ tokens: [String?]) -> Double {
        if (Int(((tokens).count)) == 0) {
            return 0.0
        }
        var stack: [Double?] = ([] as! [Double?])
        for token in tokens {
            if (((((token == "+") || (token == "-")) || (token == "*")) || (token == "/")) || (token == "^")) {
                if (((token == "+") || (token == "-")) && (Int(((stack).count)) < 2)) {
                    let b = Double(stack[(Int(((stack).count)) &- 1)])
                    stack = (slice_without_last((stack as! [Double?])) as! [Double?])
                    if (token == "-") {
                        stack = (_append(stack, (0.0 - b)) as! [Double?])
                    } else {
                        stack = (_append(stack, b) as! [Double?])
                    }
                } else {
                    let b = Double(stack[(Int(((stack).count)) &- 1)])
                    stack = (slice_without_last((stack as! [Double?])) as! [Double?])
                    let a = Double(stack[(Int(((stack).count)) &- 1)])
                    stack = (slice_without_last((stack as! [Double?])) as! [Double?])
                    let result = Double(apply_op(Double(a), Double(b), (token as! String)))
                    stack = (_append(stack, result) as! [Double?])
                }
            } else {
                stack = (_append(stack, Double(parse_float((token as! String)))) as! [Double?])
            }
        }
        if (Int(((stack).count)) != 1) {
            _ = fatalError("Invalid postfix expression")
        }
        return Double(stack[0])
    }
    print(_p(String(describing: Double(evaluate((["2", "1", "+", "3", "*"] as! [String?]))))))
    print(_p(String(describing: Double(evaluate((["4", "13", "5", "/", "+"] as! [String?]))))))
    print(_p(String(describing: Double(evaluate((["5", "6", "9", "*", "+"] as! [String?]))))))
    print(_p(String(describing: Double(evaluate((["2", "-", "3", "+"] as! [String?]))))))
    print(_p(String(describing: Double(evaluate(([] as! [String?]))))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
