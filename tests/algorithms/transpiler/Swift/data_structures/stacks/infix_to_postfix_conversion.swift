// Generated by Mochi transpiler v0.10.59 on 2025-08-07 00:37:09 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let PRECEDENCES: [String: Int] = (["+": 1, "-": 1, "*": 2, "/": 2, "^": 3] as! [String: Int])
    let ASSOCIATIVITIES: [String: String] = (["+": "LR", "-": "LR", "*": "LR", "/": "LR", "^": "RL"] as! [String: String])
    func precedence(_ ch: String) -> Int {
        if (PRECEDENCES[ch] != nil) {
            return (PRECEDENCES[String(String(describing: ch))] as? Int ?? 0)
        }
        return -1
    }
    func associativity(_ ch: String) -> String {
        if (ASSOCIATIVITIES[ch] != nil) {
            return (ASSOCIATIVITIES[String(String(describing: ch))] as! String)
        }
        return ""
    }
    func balanced_parentheses(_ expr: String) -> Bool {
        var count: Int = 0
        var i: Int = 0
        while (i < Int(((expr).count))) {
            let ch = String(describing: String(Array(String(describing: (expr as! String)))[i..<(i &+ 1)]))
            if (ch == "(") {
                count = Int((count &+ 1))
            }
            if (ch == ")") {
                count = Int((count &- 1))
                if (count < 0) {
                    return false
                }
            }
            i = Int((i &+ 1))
        }
        return (count == 0)
    }
    func is_letter(_ ch: String) -> Bool {
        return ((("a" <= ch) && (ch <= "z")) || (("A" <= ch) && (ch <= "Z")))
    }
    func is_digit(_ ch: String) -> Bool {
        return (("0" <= ch) && (ch <= "9"))
    }
    func is_alnum(_ ch: String) -> Bool {
        return (is_letter((ch as! String)) || is_digit((ch as! String)))
    }
    func infix_to_postfix(_ expression: String) -> String {
        if (balanced_parentheses((expression as! String)) == false) {
            _ = fatalError("Mismatched parentheses")
        }
        var stack: [String?] = ([] as! [String?])
        var postfix: [String?] = ([] as! [String?])
        var i: Int = 0
        while (i < Int(((expression).count))) {
            let ch = String(describing: String(Array(String(describing: (expression as! String)))[i..<(i &+ 1)]))
            if is_alnum((ch as! String)) {
                postfix = (_append(postfix, ch) as! [String?])
            } else if (ch == "(") {
                stack = (_append(stack, ch) as! [String?])
            } else if (ch == ")") {
                while ((Int(((stack).count)) > 0) && ((stack[(Int(((stack).count)) &- 1)] as! String) != "(")) {
                    postfix = (_append(postfix, (stack[(Int(((stack).count)) &- 1)] as! String)) as! [String?])
                    stack = (Array(stack[0..<(Int(((stack).count)) &- 1)]) as! [String?])
                }
                if (Int(((stack).count)) > 0) {
                    stack = (Array(stack[0..<(Int(((stack).count)) &- 1)]) as! [String?])
                }
            } else if (ch == " ") {
            } else {
                while true {
                    if (Int(((stack).count)) == 0) {
                        stack = (_append(stack, ch) as! [String?])
                        break
                    }
                    let cp = Int(precedence((ch as! String)))
                    let tp = Int(precedence((stack[(Int(((stack).count)) &- 1)] as! String)))
                    if (cp > tp) {
                        stack = (_append(stack, ch) as! [String?])
                        break
                    }
                    if (cp < tp) {
                        postfix = (_append(postfix, (stack[(Int(((stack).count)) &- 1)] as! String)) as! [String?])
                        stack = (Array(stack[0..<(Int(((stack).count)) &- 1)]) as! [String?])
                        continue
                    }
                    if (String(describing: associativity((ch as! String))) == "RL") {
                        stack = (_append(stack, ch) as! [String?])
                        break
                    }
                    postfix = (_append(postfix, (stack[(Int(((stack).count)) &- 1)] as! String)) as! [String?])
                    stack = (Array(stack[0..<(Int(((stack).count)) &- 1)]) as! [String?])
                }
            }
            
            
            
            i = Int((i &+ 1))
        }
        while (Int(((stack).count)) > 0) {
            postfix = (_append(postfix, (stack[(Int(((stack).count)) &- 1)] as! String)) as! [String?])
            stack = (Array(stack[0..<(Int(((stack).count)) &- 1)]) as! [String?])
        }
        var res: String = ""
        var j: Int = 0
        while (j < Int(((postfix).count))) {
            if (j > 0) {
                res = ((res + " ") as! String)
            }
            res = ((res + (postfix[j] as! String)) as! String)
            j = Int((j &+ 1))
        }
        return res
    }
    func main() {
        let expression = "a+b*(c^d-e)^(f+g*h)-i"
        print(_p(expression))
        print(_p(String(describing: infix_to_postfix((expression as! String)))))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
