// Generated by Mochi transpiler v0.10.59 on 2025-08-07 00:29:17 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
struct Stack: Codable {
    var items: [Int?]
    var limit: Int
    init() {
        self.items = []
        self.limit = 0
    }
    init(items: [Int?], limit: Int) {
        self.items = items
        self.limit = limit
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func make_stack(_ limit: Int) -> Stack {
        return Stack(items: [], limit: limit)
    }
    func is_empty(_ s: Stack) -> Bool {
        return (Int(((s.items).count)) == 0)
    }
    func size(_ s: Stack) -> Int {
        return Int(((s.items).count))
    }
    func is_full(_ s: Stack) -> Bool {
        return (Int(((s.items).count)) >= s.limit)
    }
    func push(_ s: inout Stack, _ item: Int) {
        if is_full((s as! Stack)) {
            _ = fatalError("stack overflow")
        }
        s.items = (_append(s.items, item) as! [Int?])
    }
    func pop(_ s: inout Stack) -> Int {
        if is_empty((s as! Stack)) {
            _ = fatalError("stack underflow")
        }
        let n = Int(((s.items).count))
        let val = (s.items[(n &- 1)] as? Int ?? 0)
        s.items = (Array(s.items[0..<(n &- 1)]) as! [Int?])
        return val
    }
    func peek(_ s: Stack) -> Int {
        if is_empty((s as! Stack)) {
            _ = fatalError("peek from empty stack")
        }
        return (s.items[(Int(((s.items).count)) &- 1)] as? Int ?? 0)
    }
    func contains(_ s: Stack, _ item: Int) -> Bool {
        var i: Int = 0
        while (i < Int(((s.items).count))) {
            if ((s.items[i] as? Int ?? 0) == item) {
                return true
            }
            i = Int((i &+ 1))
        }
        return false
    }
    func stack_repr(_ s: Stack) -> String {
        return "[" + s.items.map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"
    }
    func main() {
        var s: Stack = make_stack(5)
        print(_p(String(describing: is_empty((s as! Stack)))))
        _ = push(&s, 0)
        _ = push(&s, 1)
        _ = push(&s, 2)
        print(_p(String(describing: Int(peek((s as! Stack))))))
        print(_p(String(describing: Int(size((s as! Stack))))))
        print(_p(String(describing: is_full((s as! Stack)))))
        _ = push(&s, 3)
        _ = push(&s, 4)
        print(_p(String(describing: is_full((s as! Stack)))))
        print(_p(String(describing: stack_repr((s as! Stack)))))
        print(_p(String(describing: Int(pop(&s)))))
        print(_p(String(describing: Int(peek((s as! Stack))))))
        print(_p(String(describing: ((s as! Stack).contains(1)))))
        print(_p(String(describing: ((s as! Stack).contains(9)))))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
