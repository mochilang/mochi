// Generated by Mochi transpiler v0.10.59 on 2025-08-07 00:29:22 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
struct Node: Codable {
    var value: String
    var next: Int
    init() {
        self.value = ""
        self.next = 0
    }
    init(value: String, next: Int) {
        self.value = value
        self.next = next
    }
}
struct Stack: Codable {
    var nodes: [Node?]
    var top: Int
    init() {
        self.nodes = []
        self.top = 0
    }
    init(nodes: [Node?], top: Int) {
        self.nodes = nodes
        self.top = top
    }
}
struct PopResult: Codable {
    var stack: Stack
    var value: String
    init() {
        self.stack = Stack()
        self.value = ""
    }
    init(stack: Stack, value: String) {
        self.stack = stack
        self.value = value
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func empty_stack() -> Stack {
        return Stack(nodes: [], top: Int(-1))
    }
    func is_empty(_ stack: Stack) -> Bool {
        return (stack.top == Int(-1))
    }
    func push(_ stack: Stack, _ item: String) -> Stack {
        let new_node = Node(value: item, next: stack.top)
        var new_nodes: [Node?] = stack.nodes
        new_nodes = (_append(new_nodes, new_node) as! [Node?])
        let new_top = (Int(((new_nodes).count)) &- 1)
        return Stack(nodes: new_nodes, top: new_top)
    }
    func pop(_ stack: Stack) -> PopResult {
        if (stack.top == Int(-1)) {
            _ = fatalError("pop from empty stack")
        }
        let node = (stack.nodes[stack.top] as! Node)
        let new_top = node.next
        let new_stack = Stack(nodes: stack.nodes, top: new_top)
        return PopResult(stack: new_stack, value: node.value)
    }
    func peek(_ stack: Stack) -> String {
        if (stack.top == Int(-1)) {
            _ = fatalError("peek from empty stack")
        }
        let node = (stack.nodes[stack.top] as! Node)
        return node.value
    }
    func clear(_ stack: Stack) -> Stack {
        return Stack(nodes: [], top: Int(-1))
    }
    func main() {
        var stack: Stack = empty_stack()
        print(_p(is_empty((stack as! Stack))))
        stack = (push((stack as! Stack), "5") as! Stack)
        stack = (push((stack as! Stack), "9") as! Stack)
        stack = (push((stack as! Stack), "python") as! Stack)
        print(_p(is_empty((stack as! Stack))))
        var res: PopResult = pop((stack as! Stack))
        stack = (res.stack as! Stack)
        print(_p(res.value))
        stack = (push((stack as! Stack), "algorithms") as! Stack)
        res = (pop((stack as! Stack)) as! PopResult)
        stack = (res.stack as! Stack)
        print(_p(res.value))
        res = (pop((stack as! Stack)) as! PopResult)
        stack = (res.stack as! Stack)
        print(_p(res.value))
        res = (pop((stack as! Stack)) as! PopResult)
        stack = (res.stack as! Stack)
        print(_p(res.value))
        print(_p(is_empty((stack as! Stack))))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
