// Generated by Mochi transpiler v0.10.60 on 2025-08-07 16:57:29 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func largest_rectangle_area(_ heights: [Int]) -> Int {
        var stack: [Int] = ([] as! [Int])
        var max_area: Int = 0
        var hs: [Int] = heights
        hs = (_append(hs, 0) as! [Int])
        var i: Int = 0
        while (i < _int(((hs).count))) {
            while ((_int(((stack).count)) > 0) && ((hs[i] as? Int ?? 0) < (hs[(stack[(_int(((stack).count)) &- 1)] as? Int ?? 0)] as? Int ?? 0))) {
                let top = (stack[(_int(((stack).count)) &- 1)] as? Int ?? 0)
                stack = (Array(stack[0..<(_int(((stack).count)) &- 1)]) as! [Int])
                let height = (hs[top] as? Int ?? 0)
                var width: Int = i
                if (_int(((stack).count)) > 0) {
                    width = _int(((i &- (stack[(_int(((stack).count)) &- 1)] as? Int ?? 0)) &- 1))
                }
                let area = (height &* width)
                if (area > max_area) {
                    max_area = Int(area)
                }
            }
            stack = (_append(stack, i) as! [Int])
            i = _int((i &+ 1))
        }
        return max_area
    }
    print(_p(_p(_int(largest_rectangle_area(([2, 1, 5, 6, 2, 3] as! [Int]))))))
    print(_p(_p(_int(largest_rectangle_area(([2, 4] as! [Int]))))))
    print(_p(_p(_int(largest_rectangle_area(([6, 2, 5, 4, 5, 1, 6] as! [Int]))))))
    print(_p(_p(_int(largest_rectangle_area(([1] as! [Int]))))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
