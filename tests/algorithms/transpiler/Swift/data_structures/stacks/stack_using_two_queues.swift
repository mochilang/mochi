// Generated by Mochi transpiler v0.10.59 on 2025-08-07 00:29:18 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
struct StackWithQueues: Codable {
    var main_queue: [Int?]
    var temp_queue: [Int?]
    init() {
        self.main_queue = []
        self.temp_queue = []
    }
    init(main_queue: [Int?], temp_queue: [Int?]) {
        self.main_queue = main_queue
        self.temp_queue = temp_queue
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func make_stack() -> StackWithQueues {
        return StackWithQueues(main_queue: [], temp_queue: [])
    }
    func push(_ s: inout StackWithQueues, _ item: Int) {
        s.temp_queue = (_append(s.temp_queue, item) as! [Int?])
        while (Int(((s.main_queue).count)) > 0) {
            s.temp_queue = (_append(s.temp_queue, (s.main_queue[0] as? Int ?? 0)) as! [Int?])
            s.main_queue = (Array(s.main_queue[1..<Int(((s.main_queue).count))]) as! [Int?])
        }
        let new_main: [Int?] = s.temp_queue
        s.temp_queue = (s.main_queue as! [Int?])
        s.main_queue = (new_main as! [Int?])
    }
    func pop(_ s: inout StackWithQueues) -> Int {
        if (Int(((s.main_queue).count)) == 0) {
            _ = fatalError("pop from empty stack")
        }
        let item = (s.main_queue[0] as? Int ?? 0)
        s.main_queue = (Array(s.main_queue[1..<Int(((s.main_queue).count))]) as! [Int?])
        return item
    }
    func peek(_ s: StackWithQueues) -> Int {
        if (Int(((s.main_queue).count)) == 0) {
            _ = fatalError("peek from empty stack")
        }
        return (s.main_queue[0] as? Int ?? 0)
    }
    func is_empty(_ s: StackWithQueues) -> Bool {
        return (Int(((s.main_queue).count)) == 0)
    }
    var stack: StackWithQueues = make_stack()
    _ = push(&stack, 1)
    _ = push(&stack, 2)
    _ = push(&stack, 3)
    print(_p(String(describing: Int(peek((stack as! StackWithQueues))))))
    print(_p(String(describing: Int(pop(&stack)))))
    print(_p(String(describing: Int(peek((stack as! StackWithQueues))))))
    print(_p(String(describing: Int(pop(&stack)))))
    print(_p(String(describing: Int(pop(&stack)))))
    print(_p(String(describing: is_empty((stack as! StackWithQueues)))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
