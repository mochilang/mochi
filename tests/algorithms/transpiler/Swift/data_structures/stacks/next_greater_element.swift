// Generated by Mochi transpiler v0.10.61 on 2025-08-08 18:04:47 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let arr: [Double] = ([-10.0, -5.0, 0.0, 5.0, 5.1, 11.0, 13.0, 21.0, 3.0, 4.0, -21.0, -10.0, -5.0, -1.0, 0.0] as! [Double])
    let expected: [Double] = ([-5.0, 0.0, 5.0, 5.1, 11.0, 13.0, 21.0, -1.0, 4.0, -1.0, -10.0, -5.0, -1.0, 0.0, -1.0] as! [Double])
    func next_greatest_element_slow(_ xs: [Double]) -> [Double] {
        var res: [Double] = ([] as! [Double])
        var i = 0
        while (i < _int(((xs).count))) {
            var next: Double = -1.0
            var j = (i &+ 1)
            while (j < _int(((xs).count))) {
                if (Double(_idx(xs, i)) < Double(_idx(xs, j))) {
                    next = Double(_idx(xs, j))
                    break
                }
                j = _int((j &+ 1))
            }
            res = (_append(res, next) as! [Double])
            i = _int((i &+ 1))
        }
        return res
    }
    func next_greatest_element_fast(_ xs: [Double]) -> [Double] {
        var res: [Double] = ([] as! [Double])
        var i = 0
        while (i < _int(((xs).count))) {
            var next: Double = -1.0
            var j = (i &+ 1)
            while (j < _int(((xs).count))) {
                let inner = Double(_idx(xs, j))
                if (Double(_idx(xs, i)) < inner) {
                    next = Double(inner)
                    break
                }
                j = _int((j &+ 1))
            }
            res = (_append(res, next) as! [Double])
            i = _int((i &+ 1))
        }
        return res
    }
    func set_at_float(_ xs: [Double], _ idx: Int, _ value: Double) -> [Double] {
        var i = 0
        var res: [Double] = ([] as! [Double])
        while (i < _int(((xs).count))) {
            if (i == idx) {
                res = (_append(res, value) as! [Double])
            } else {
                res = (_append(res, Double(_idx(xs, i))) as! [Double])
            }
            i = _int((i &+ 1))
        }
        return res
    }
    func next_greatest_element(_ xs: [Double]) -> [Double] {
        var res: [Double] = ([] as! [Double])
        var k = 0
        while (k < _int(((xs).count))) {
            res = (_append(res, -1.0) as! [Double])
            k = _int((k &+ 1))
        }
        var stack: [Int] = ([] as! [Int])
        var i = 0
        while (i < _int(((xs).count))) {
            while ((_int(((stack).count)) > 0) && (Double(_idx(xs, i)) > Double(_idx(xs, (_idx(stack, (_int(((stack).count)) &- 1)) as? Int ?? 0))))) {
                let idx = (_idx(stack, (_int(((stack).count)) &- 1)) as? Int ?? 0)
                stack = (Array(stack[0..<(_int(((stack).count)) &- 1)]) as! [Int])
                res = (set_at_float((res as! [Double]), idx, Double(_idx(xs, i))) as! [Double])
            }
            stack = (_append(stack, i) as! [Int])
            i = _int((i &+ 1))
        }
        return res
    }
    print(_p("[" + (next_greatest_element_slow((arr as! [Double])) as! [Double]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    print(_p("[" + (next_greatest_element_fast((arr as! [Double])) as! [Double]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    print(_p("[" + (next_greatest_element((arr as! [Double])) as! [Double]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
