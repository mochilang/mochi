// Generated by Mochi transpiler v0.10.59 on 2025-08-07 00:37:21 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _split(_ s: String, _ sep: String) -> [String] {
    let d = sep.isEmpty ? " " : sep
    return s.components(separatedBy: d)
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func split(_ s: String, _ sep: String) -> [String?] {
        var res: [String?] = ([] as! [String?])
        var current: String = ""
        var i: Int = 0
        while (i < Int(((s).count))) {
            let ch = String(describing: String(Array(String(describing: (s as! String)))[i..<(i &+ 1)]))
            if (ch == sep) {
                res = (_append(res, current) as! [String?])
                current = ""
            } else {
                current = ((current + ch) as! String)
            }
            i = Int((i &+ 1))
        }
        res = (_append(res, current) as! [String?])
        return res
    }
    func tokenize(_ s: String) -> [String?] {
        let parts: [String?] = (_split(s, " ") as! [String?])
        var res: [String?] = ([] as! [String?])
        var i: Int = 0
        while (i < Int(((parts).count))) {
            let p = (parts[i] as! String)
            if (p != "") {
                res = (_append(res, p) as! [String?])
            }
            i = Int((i &+ 1))
        }
        return res
    }
    func is_digit(_ ch: String) -> Bool {
        return ((ch >= "0") && (ch <= "9"))
    }
    func is_operand(_ token: String) -> Bool {
        if (token == "") {
            return false
        }
        var i: Int = 0
        while (i < Int(((token).count))) {
            let ch = String(describing: String(Array(String(describing: (token as! String)))[i..<(i &+ 1)]))
            if (!is_digit((ch as! String))) {
                return false
            }
            i = Int((i &+ 1))
        }
        return true
    }
    func to_int(_ token: String) -> Int {
        var res: Int = 0
        var i: Int = 0
        while (i < Int(((token).count))) {
            res = Int(((res &* 10) &+ Int(String(Array(String(describing: (token as! String)))[i..<(i &+ 1)]))))
            i = Int((i &+ 1))
        }
        return res
    }
    func apply_op(_ op: String, _ a: Double, _ b: Double) -> Double {
        if (op == "+") {
            return (a + b)
        }
        if (op == "-") {
            return (a - b)
        }
        if (op == "*") {
            return (a * b)
        }
        if (op == "/") {
            return (a / b)
        }
        return 0.0
    }
    func evaluate(_ expression: String) -> Double {
        let tokens: [String?] = (tokenize((expression as! String)) as! [String?])
        var stack: [Double?] = ([] as! [Double?])
        var i: Int = (Int(((tokens).count)) &- 1)
        while (i >= 0) {
            let token = (tokens[i] as! String)
            if (token != "") {
                if is_operand((token as! String)) {
                    stack = (_append(stack, Double(to_int((token as! String)))) as! [Double?])
                } else {
                    let o1 = Double(stack[(Int(((stack).count)) &- 1)])
                    let o2 = Double(stack[(Int(((stack).count)) &- 2)])
                    stack = (Array(stack[0..<(Int(((stack).count)) &- 2)]) as! [Double?])
                    let res = Double(apply_op((token as! String), Double(o1), Double(o2)))
                    stack = (_append(stack, res) as! [Double?])
                }
            }
            i = Int((i &- 1))
        }
        return Double(stack[0])
    }
    func eval_rec(_ tokens: [String?], _ pos: Int) -> [Double?] {
        let token = (tokens[pos] as! String)
        let next = (pos &+ 1)
        if is_operand((token as! String)) {
            return ([Double(to_int((token as! String))), Double(next)] as! [Double?])
        }
        let left: [Double?] = (eval_rec((tokens as! [String?]), next) as! [Double?])
        let a = Double(left[0])
        let p1 = (left[1] as? Int ?? 0)
        let right: [Double?] = (eval_rec((tokens as! [String?]), p1) as! [Double?])
        let b = Double(right[0])
        let p2 = Double(right[1])
        return ([Double(apply_op((token as! String), Double(a), Double(b))), p2] as! [Double?])
    }
    func evaluate_recursive(_ expression: String) -> Double {
        let tokens: [String?] = (tokenize((expression as! String)) as! [String?])
        let res: [Double?] = (eval_rec((tokens as! [String?]), 0) as! [Double?])
        return Double(res[0])
    }
    let test_expression = "+ 9 * 2 6"
    print(_p(String(describing: Double(evaluate((test_expression as! String))))))
    let test_expression2 = "/ * 10 2 + 4 1 "
    print(_p(String(describing: Double(evaluate((test_expression2 as! String))))))
    let test_expression3 = "+ * 2 3 / 8 4"
    print(_p(String(describing: Double(evaluate_recursive((test_expression3 as! String))))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
