// Generated by Mochi transpiler v0.10.72 on 2025-08-24 23:33:34 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.isNaN || d.isInfinite {
                return String(d)
            }
            if d.rounded(.towardZero) == d {
                // avoid overflow when converting to Int64
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _num(_ v: Any) -> Double {
    if let d = v as? Double { return d }
    if let i = v as? Int { return Double(i) }
    if let i = v as? Int64 { return Double(i) }
    return 0
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first!
}
func _idx<K: Hashable, V>(_ m: [K: V], _ k: K) -> V? {
    return m[k]
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _slice<T>(_ xs: [T], _ start: Int, _ end: Int) -> [T] {
    var s = start
    var e = end
    if s < 0 { s = 0 }
    if e > xs.count { e = xs.count }
    if s > e { s = e }
    return Array(xs[s..<e])
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func split_custom(_ s: String, _ sep: String) -> [String] {
        var res: [String] = ([] as! [String])
        var current = ""
        var i = 0
        while ((i < _int(((s).count)))) {
            let ch = String(describing: String(_slice(Array(s), i, (i &+ 1))))
            if ((ch == sep)) {
                res = (_append(res, current) as! [String])
                current = ""
            } else {
                current = ((_p(current) + _p(ch)) as! String)
            }
            i = _int((i &+ 1))
        }
        res = (_append(res, current) as! [String])
        return res
    }
    func tokenize(_ s: String) -> [String] {
        let parts: [String] = (split_custom((s as! String), " ") as! [String])
        var res: [String] = ([] as! [String])
        var i = 0
        while ((i < _int(((parts).count)))) {
            let p = (_idx(parts, i) as! String)
            if ((p != "")) {
                res = (_append(res, p) as! [String])
            }
            i = _int((i &+ 1))
        }
        return res
    }
    func is_digit(_ ch: String) -> Bool {
        return ((ch >= "0") && (ch <= "9"))
    }
    func is_operand(_ token: String) -> Bool {
        if ((token == "")) {
            return false
        }
        var i = 0
        while ((i < _int(((token).count)))) {
            let ch = String(describing: String(_slice(Array(token), i, (i &+ 1))))
            if ((!is_digit((ch as! String)))) {
                return false
            }
            i = _int((i &+ 1))
        }
        return true
    }
    func to_int(_ token: String) -> Int {
        var res = 0
        var i = 0
        while ((i < _int(((token).count)))) {
            res = _int(((res &* 10) &+ _int(_int(String(_slice(Array(token), i, (i &+ 1)))))))
            i = _int((i &+ 1))
        }
        return res
    }
    func apply_op(_ op: String, _ a: Double, _ b: Double) -> Double {
        if ((op == "+")) {
            return (a + b)
        }
        if ((op == "-")) {
            return (a - b)
        }
        if ((op == "*")) {
            return (a * b)
        }
        if ((op == "/")) {
            return (a / b)
        }
        return 0.0
    }
    func evaluate(_ expression: String) -> Double {
        let tokens: [String] = (tokenize((expression as! String)) as! [String])
        var stack: [Double] = ([] as! [Double])
        var i = (_int(((tokens).count)) &- 1)
        while ((i >= 0)) {
            let token = (_idx(tokens, i) as! String)
            if ((token != "")) {
                if (is_operand((token as! String))) {
                    stack = (_append(stack, _num(to_int((token as! String)))) as! [Double])
                } else {
                    let o1 = _num(_idx(stack, (_int(((stack).count)) &- 1)))
                    let o2 = _num(_idx(stack, (_int(((stack).count)) &- 2)))
                    stack = (_slice(Array(stack), 0, (_int(((stack).count)) &- 2)) as! [Double])
                    let res = _num(apply_op((token as! String), _num(o1), _num(o2)))
                    stack = (_append(stack, res) as! [Double])
                }
            }
            i = _int((i &- 1))
        }
        return _num(_idx(stack, 0))
    }
    func eval_rec(_ tokens: [String], _ pos: Int) -> [Double] {
        let token = (_idx(tokens, pos) as! String)
        let next = (pos &+ 1)
        if (is_operand((token as! String))) {
            return ({
                var _arr: [Double] = []
                _arr = _append(_arr, _num(to_int((token as! String))))
                _arr = _append(_arr, _num(next))
                return _arr
            }() as! [Double])
        }
        let left: [Double] = (eval_rec((tokens as! [String]), next) as! [Double])
        let a = _num(_idx(left, 0))
        let p1 = _int(_idx(left, 1))
        let right: [Double] = (eval_rec((tokens as! [String]), p1) as! [Double])
        let b = _num(_idx(right, 0))
        let p2 = _num(_idx(right, 1))
        return ({
            var _arr: [Double] = []
            _arr = _append(_arr, _num(apply_op((token as! String), _num(a), _num(b))))
            _arr = _append(_arr, p2)
            return _arr
        }() as! [Double])
    }
    func evaluate_recursive(_ expression: String) -> Double {
        let tokens: [String] = (tokenize((expression as! String)) as! [String])
        let res: [Double] = (eval_rec((tokens as! [String]), 0) as! [Double])
        return _num(_idx(res, 0))
    }
    let test_expression = "+ 9 * 2 6"
    print(_p(_p(_num(evaluate((test_expression as! String))))))
    let test_expression2 = "/ * 10 2 + 4 1 "
    print(_p(_p(_num(evaluate((test_expression2 as! String))))))
    let test_expression3 = "+ * 2 3 / 8 4"
    print(_p(_p(_num(evaluate_recursive((test_expression3 as! String))))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
