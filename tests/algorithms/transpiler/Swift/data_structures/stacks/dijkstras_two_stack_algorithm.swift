// Generated by Mochi transpiler v0.10.61 on 2025-08-08 18:04:38 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func is_digit(_ ch: String) -> Bool {
        return ((((((((((ch == "0") || (ch == "1")) || (ch == "2")) || (ch == "3")) || (ch == "4")) || (ch == "5")) || (ch == "6")) || (ch == "7")) || (ch == "8")) || (ch == "9"))
    }
    func slice_without_last_int(_ xs: [Int]) -> [Int] {
        var res: [Int] = ([] as! [Int])
        var i = 0
        while (i < (_int(((xs).count)) &- 1)) {
            res = (_append(res, (_idx(xs, i) as? Int ?? 0)) as! [Int])
            i = _int((i &+ 1))
        }
        return res
    }
    func slice_without_last_string(_ xs: [String]) -> [String] {
        var res: [String] = ([] as! [String])
        var i = 0
        while (i < (_int(((xs).count)) &- 1)) {
            res = (_append(res, (_idx(xs, i) as! String)) as! [String])
            i = _int((i &+ 1))
        }
        return res
    }
    func dijkstras_two_stack_algorithm(_ equation: String) -> Int {
        var operand_stack: [Int] = ([] as! [Int])
        var operator_stack: [String] = ([] as! [String])
        var idx = 0
        while (idx < _int(((equation).count))) {
            let ch = String(describing: String(Array(String(describing: (equation as! String)))[idx..<(idx &+ 1)]))
            if is_digit((ch as! String)) {
                operand_stack = (_append(operand_stack, _int(_int(ch))) as! [Int])
            } else if ((((ch == "+") || (ch == "-")) || (ch == "*")) || (ch == "/")) {
                operator_stack = (_append(operator_stack, ch) as! [String])
            } else if (ch == ")") {
                let opr = (_idx(operator_stack, (_int(((operator_stack).count)) &- 1)) as! String)
                operator_stack = (slice_without_last_string((operator_stack as! [String])) as! [String])
                let num1 = (_idx(operand_stack, (_int(((operand_stack).count)) &- 1)) as? Int ?? 0)
                operand_stack = (slice_without_last_int((operand_stack as! [Int])) as! [Int])
                let num2 = (_idx(operand_stack, (_int(((operand_stack).count)) &- 1)) as? Int ?? 0)
                operand_stack = (slice_without_last_int((operand_stack as! [Int])) as! [Int])
                let total = _int(((opr == "+") ? (num2 &+ num1) : ((opr == "-") ? (num2 &- num1) : ((opr == "*") ? (num2 &* num1) : (num2 / num1)))))
                operand_stack = (_append(operand_stack, total) as! [Int])
            }
            
            
            idx = _int((idx &+ 1))
        }
        return (_idx(operand_stack, (_int(((operand_stack).count)) &- 1)) as? Int ?? 0)
    }
    let equation = "(5 + ((4 * 2) * (2 + 3)))"
    print(_p(((equation + " = ") + _p(_int(dijkstras_two_stack_algorithm((equation as! String)))))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
