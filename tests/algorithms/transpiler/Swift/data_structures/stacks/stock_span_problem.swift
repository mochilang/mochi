// Generated by Mochi transpiler v0.10.59 on 2025-08-07 00:29:24 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func calculation_span(_ price: [Int?]) -> [Int?] {
        let n = Int(((price).count))
        var st: [Int?] = ([] as! [Int?])
        var span: [Int?] = ([] as! [Int?])
        st = (_append(st, 0) as! [Int?])
        span = (_append(span, 1) as! [Int?])
        for i in 1..<n {
            while ((Int(((st).count)) > 0) && ((price[(st[(Int(((st).count)) &- 1)] as? Int ?? 0)] as? Int ?? 0) <= (price[i] as? Int ?? 0))) {
                st = (Array(st[0..<(Int(((st).count)) &- 1)]) as! [Int?])
            }
            let s = Int(((Int(((st).count)) <= 0) ? (i &+ 1) : (i &- (st[(Int(((st).count)) &- 1)] as? Int ?? 0))))
            span = (_append(span, s) as! [Int?])
            st = (_append(st, i) as! [Int?])
        }
        return span
    }
    func print_array(_ arr: [Int?]) -> Void {
        for i in 0..<Int(((arr).count)) {
            print(_p((arr[i] as? Int ?? 0)))
        }
    }
    let price: [Int?] = ([10, 4, 5, 90, 120, 80] as! [Int?])
    let spans: [Int?] = (calculation_span((price as! [Int?])) as! [Int?])
    _ = print_array((spans as! [Int?]))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
