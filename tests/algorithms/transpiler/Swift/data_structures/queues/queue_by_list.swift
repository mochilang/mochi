// Generated by Mochi transpiler v0.10.61 on 2025-08-08 18:04:30 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
struct Queue: Codable {
    var entries: [Int]
    init() {
        self.entries = []
    }
    init(entries: [Int]) {
        self.entries = entries
    }
}
struct GetResult: Codable {
    var queue: Queue
    var value: Int
    init() {
        self.queue = Queue()
        self.value = 0
    }
    init(queue: Queue, value: Int) {
        self.queue = queue
        self.value = value
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func new_queue(_ items: [Int]) -> Queue {
        return Queue(entries: (items as! [Int]))
    }
    func len_queue(_ q: Queue) -> Int {
        return _int(((q.entries).count))
    }
    func str_queue(_ q: Queue) -> String {
        var s = "Queue(("
        var i = 0
        while (i < _int(((q.entries).count))) {
            s = ((s + _p((_idx(q.entries, i) as? Int ?? 0))) as! String)
            if (i < (_int(((q.entries).count)) &- 1)) {
                s = ((s + ", ") as! String)
            }
            i = _int((i &+ 1))
        }
        s = ((s + "))") as! String)
        return s
    }
    func put(_ q: Queue, _ item: Int) -> Queue {
        var e = q.entries
        e = (_append(e, item) as! [Int])
        return Queue(entries: (e as! [Int]))
    }
    func get(_ q: Queue) -> GetResult {
        if (_int(((q.entries).count)) == 0) {
            _ = fatalError("Queue is empty")
        }
        let value = (_idx(q.entries, 0) as? Int ?? 0)
        var new_entries: [Int] = ([] as! [Int])
        var i = 1
        while (i < _int(((q.entries).count))) {
            new_entries = (_append(new_entries, (_idx(q.entries, i) as? Int ?? 0)) as! [Int])
            i = _int((i &+ 1))
        }
        return GetResult(queue: (Queue(entries: (new_entries as! [Int])) as! Queue), value: Int(value))
    }
    func rotate(_ q: Queue, _ rotation: Int) -> Queue {
        var e = q.entries
        var r = 0
        while (r < rotation) {
            if (_int(((e).count)) > 0) {
                let first = (_idx(e, 0) as? Int ?? 0)
                var rest: [Int] = ([] as! [Int])
                var i = 1
                while (i < _int(((e).count))) {
                    rest = (_append(rest, (_idx(e, i) as? Int ?? 0)) as! [Int])
                    i = _int((i &+ 1))
                }
                rest = (_append(rest, first) as! [Int])
                e = (rest as! [Int])
            }
            r = _int((r &+ 1))
        }
        return Queue(entries: (e as! [Int]))
    }
    func get_front(_ q: Queue) -> Int {
        return (_idx(q.entries, 0) as? Int ?? 0)
    }
    var q = new_queue(([] as! [Int]))
    print(_p(_int(len_queue((q as! Queue)))))
    q = (put((q as! Queue), 10) as! Queue)
    q = (put((q as! Queue), 20) as! Queue)
    q = (put((q as! Queue), 30) as! Queue)
    q = (put((q as! Queue), 40) as! Queue)
    print(_p(String(describing: str_queue((q as! Queue)))))
    let res = get((q as! Queue))
    q = (res.queue as! Queue)
    print(_p(res.value))
    print(_p(String(describing: str_queue((q as! Queue)))))
    q = (rotate((q as! Queue), 2) as! Queue)
    print(_p(String(describing: str_queue((q as! Queue)))))
    let front = _int(get_front((q as! Queue)))
    print(_p(front))
    print(_p(String(describing: str_queue((q as! Queue)))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
