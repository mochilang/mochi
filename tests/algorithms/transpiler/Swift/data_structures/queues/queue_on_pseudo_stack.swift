// Generated by Mochi transpiler v0.10.61 on 2025-08-08 18:04:34 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
struct Queue: Codable {
    var stack: [Int]
    var length: Int
    init() {
        self.stack = []
        self.length = 0
    }
    init(stack: [Int], length: Int) {
        self.stack = stack
        self.length = length
    }
}
struct GetResult: Codable {
    var queue: Queue
    var value: Int
    init() {
        self.queue = Queue()
        self.value = 0
    }
    init(queue: Queue, value: Int) {
        self.queue = queue
        self.value = value
    }
}
struct FrontResult: Codable {
    var queue: Queue
    var value: Int
    init() {
        self.queue = Queue()
        self.value = 0
    }
    init(queue: Queue, value: Int) {
        self.queue = queue
        self.value = value
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func empty_queue() -> Queue {
        return Queue(stack: ([] as! [Int]), length: 0)
    }
    func put(_ q: Queue, _ item: Int) -> Queue {
        var s = (_append(q.stack, item) as! [Int])
        return Queue(stack: (s as! [Int]), length: _int((q.length &+ 1)))
    }
    func drop_first(_ xs: [Int]) -> [Int] {
        var res: [Int] = ([] as! [Int])
        var i = 1
        while (i < _int(((xs).count))) {
            res = (_append(res, (_idx(xs, i) as? Int ?? 0)) as! [Int])
            i = _int((i &+ 1))
        }
        return res
    }
    func drop_last(_ xs: [Int]) -> [Int] {
        var res: [Int] = ([] as! [Int])
        var i = 0
        while (i < (_int(((xs).count)) &- 1)) {
            res = (_append(res, (_idx(xs, i) as? Int ?? 0)) as! [Int])
            i = _int((i &+ 1))
        }
        return res
    }
    func rotate(_ q: Queue, _ rotation: Int) -> Queue {
        var s = q.stack
        var i = 0
        while ((i < rotation) && (_int(((s).count)) > 0)) {
            let temp = (_idx(s, 0) as? Int ?? 0)
            s = (drop_first((s as! [Int])) as! [Int])
            s = (_append(s, temp) as! [Int])
            i = _int((i &+ 1))
        }
        return Queue(stack: (s as! [Int]), length: (q.length as? Int ?? 0))
    }
    func get(_ q: Queue) -> GetResult {
        if (q.length == 0) {
            _ = fatalError("queue empty")
        }
        var q1 = rotate((q as! Queue), 1)
        let v = (_idx(q1.stack, (q1.length &- 1)) as? Int ?? 0)
        var s = (drop_last((q1.stack as! [Int])) as! [Int])
        var q2 = Queue(stack: (s as! [Int]), length: (q1.length as? Int ?? 0))
        q2 = (rotate((q2 as! Queue), (q2.length &- 1)) as! Queue)
        q2 = (Queue(stack: (q2.stack as! [Int]), length: _int((q2.length &- 1))) as! Queue)
        return GetResult(queue: (q2 as! Queue), value: Int(v))
    }
    func front(_ q: Queue) -> FrontResult {
        let r = get((q as! Queue))
        var q2 = put((r.queue as! Queue), r.value)
        q2 = (rotate((q2 as! Queue), (q2.length &- 1)) as! Queue)
        return FrontResult(queue: (q2 as! Queue), value: (r.value as? Int ?? 0))
    }
    func size(_ q: Queue) -> Int {
        return q.length
    }
    func to_string(_ q: Queue) -> String {
        var s = "<"
        if (q.length > 0) {
            s = ((s + _p((_idx(q.stack, 0) as? Int ?? 0))) as! String)
            var i = 1
            while (i < q.length) {
                s = (((s + ", ") + _p((_idx(q.stack, i) as? Int ?? 0))) as! String)
                i = _int((i &+ 1))
            }
        }
        s = ((s + ">") as! String)
        return s
    }
    func main() {
        var q = empty_queue()
        q = (put((q as! Queue), 1) as! Queue)
        q = (put((q as! Queue), 2) as! Queue)
        q = (put((q as! Queue), 3) as! Queue)
        print(_p(to_string((q as! Queue))))
        let g = get((q as! Queue))
        q = (g.queue as! Queue)
        print(_p(g.value))
        print(_p(to_string((q as! Queue))))
        let f = front((q as! Queue))
        q = (f.queue as! Queue)
        print(_p(f.value))
        print(_p(to_string((q as! Queue))))
        print(_p(_int(size((q as! Queue)))))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
