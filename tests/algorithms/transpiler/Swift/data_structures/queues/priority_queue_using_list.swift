// Generated by Mochi transpiler v0.10.61 on 2025-08-08 17:11:55 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return nil
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
struct FixedPriorityQueue: Codable {
    var queues: [[Int]]
    init() {
        self.queues = []
    }
    init(queues: [[Int]]) {
        self.queues = queues
    }
}
struct FPQDequeueResult: Codable {
    var queue: FixedPriorityQueue
    var value: Int
    init() {
        self.queue = FixedPriorityQueue()
        self.value = 0
    }
    init(queue: FixedPriorityQueue, value: Int) {
        self.queue = queue
        self.value = value
    }
}
struct ElementPriorityQueue: Codable {
    var queue: [Int]
    init() {
        self.queue = []
    }
    init(queue: [Int]) {
        self.queue = queue
    }
}
struct EPQDequeueResult: Codable {
    var queue: ElementPriorityQueue
    var value: Int
    init() {
        self.queue = ElementPriorityQueue()
        self.value = 0
    }
    init(queue: ElementPriorityQueue, value: Int) {
        self.queue = queue
        self.value = value
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func panic(_ msg: String) {
        print(_p(msg))
    }
    func fpq_new() -> FixedPriorityQueue {
        return FixedPriorityQueue(queues: ([[], [], []] as! [[Any?]]))
    }
    func fpq_enqueue(_ fpq: inout FixedPriorityQueue, _ priority: Int, _ data: Int) -> FixedPriorityQueue {
        if ((priority < 0) || (priority >= _int(((fpq.queues).count)))) {
            _ = fatalError("Valid priorities are 0, 1, and 2")
            return fpq
        }
        if (_int((((_idx(fpq.queues, priority) as! [Int])).count)) >= 100) {
            _ = fatalError("Maximum queue size is 100")
            return fpq
        }
        var qs: [[Int]] = fpq.queues
        qs = _set(qs, priority, (_append((_idx(qs, priority) as! [Int]), data) as! [Int]))
        fpq.queues = (qs as! [[Int]])
        return fpq
    }
    func fpq_dequeue(_ fpq: inout FixedPriorityQueue) -> FPQDequeueResult {
        var qs: [[Int]] = fpq.queues
        var i: Int = 0
        while (i < _int(((qs).count))) {
            let q: [Int] = (_idx(qs, i) as! [Int])
            if (_int(((q).count)) > 0) {
                let val = (_idx(q, 0) as? Int ?? 0)
                var new_q: [Int] = ([] as! [Int])
                var j: Int = 1
                while (j < _int(((q).count))) {
                    new_q = (_append(new_q, (_idx(q, j) as? Int ?? 0)) as! [Int])
                    j = _int((j &+ 1))
                }
                qs = _set(qs, i, (new_q as! [Int]))
                fpq.queues = (qs as! [[Int]])
                return FPQDequeueResult(queue: fpq, value: val)
            }
            i = _int((i &+ 1))
        }
        _ = fatalError("All queues are empty")
        return FPQDequeueResult(queue: fpq, value: 0)
    }
    func fpq_to_string(_ fpq: FixedPriorityQueue) -> String {
        var lines: [String] = ([] as! [String])
        var i: Int = 0
        while (i < _int(((fpq.queues).count))) {
            var q_str: String = "["
            var q: [Int] = (_idx(fpq.queues, i) as! [Int])
            var j: Int = 0
            while (j < _int(((q).count))) {
                if (j > 0) {
                    q_str = ((q_str + ", ") as! String)
                }
                q_str = ((q_str + _p((_idx(q, j) as? Int ?? 0))) as! String)
                j = _int((j &+ 1))
            }
            q_str = ((q_str + "]") as! String)
            lines = (_append(lines, ((("Priority " + _p(i)) + ": ") + q_str)) as! [String])
            i = _int((i &+ 1))
        }
        var res: String = ""
        i = 0
        while (i < _int(((lines).count))) {
            if (i > 0) {
                res = ((res + "\n") as! String)
            }
            res = ((res + (_idx(lines, i) as! String)) as! String)
            i = _int((i &+ 1))
        }
        return res
    }
    func epq_new() -> ElementPriorityQueue {
        return ElementPriorityQueue(queue: [])
    }
    func epq_enqueue(_ epq: inout ElementPriorityQueue, _ data: Int) -> ElementPriorityQueue {
        if (_int(((epq.queue).count)) >= 100) {
            _ = fatalError("Maximum queue size is 100")
            return epq
        }
        epq.queue = (_append(epq.queue, data) as! [Int])
        return epq
    }
    func epq_dequeue(_ epq: inout ElementPriorityQueue) -> EPQDequeueResult {
        if (_int(((epq.queue).count)) == 0) {
            _ = fatalError("The queue is empty")
            return EPQDequeueResult(queue: epq, value: 0)
        }
        var min_val: Int = (_idx(epq.queue, 0) as? Int ?? 0)
        var idx: Int = 0
        var i: Int = 1
        while (i < _int(((epq.queue).count))) {
            let v = (_idx(epq.queue, i) as? Int ?? 0)
            if (v < min_val) {
                min_val = Int(v)
                idx = Int(i)
            }
            i = _int((i &+ 1))
        }
        var new_q: [Int] = ([] as! [Int])
        i = 0
        while (i < _int(((epq.queue).count))) {
            if (i != idx) {
                new_q = (_append(new_q, (_idx(epq.queue, i) as? Int ?? 0)) as! [Int])
            }
            i = _int((i &+ 1))
        }
        epq.queue = (new_q as! [Int])
        return EPQDequeueResult(queue: epq, value: min_val)
    }
    func epq_to_string(_ epq: ElementPriorityQueue) -> String {
        return "[" + epq.queue.map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"
    }
    func fixed_priority_queue() {
        var fpq: FixedPriorityQueue = fpq_new()
        fpq = (fpq_enqueue(&fpq, 0, 10) as! FixedPriorityQueue)
        fpq = (fpq_enqueue(&fpq, 1, 70) as! FixedPriorityQueue)
        fpq = (fpq_enqueue(&fpq, 0, 100) as! FixedPriorityQueue)
        fpq = (fpq_enqueue(&fpq, 2, 1) as! FixedPriorityQueue)
        fpq = (fpq_enqueue(&fpq, 2, 5) as! FixedPriorityQueue)
        fpq = (fpq_enqueue(&fpq, 1, 7) as! FixedPriorityQueue)
        fpq = (fpq_enqueue(&fpq, 2, 4) as! FixedPriorityQueue)
        fpq = (fpq_enqueue(&fpq, 1, 64) as! FixedPriorityQueue)
        fpq = (fpq_enqueue(&fpq, 0, 128) as! FixedPriorityQueue)
        print(_p(String(describing: fpq_to_string((fpq as! FixedPriorityQueue)))))
        var res: FPQDequeueResult = fpq_dequeue(&fpq)
        fpq = (res.queue as! FixedPriorityQueue)
        print(_p(res.value))
        res = (fpq_dequeue(&fpq) as! FPQDequeueResult)
        fpq = (res.queue as! FixedPriorityQueue)
        print(_p(res.value))
        res = (fpq_dequeue(&fpq) as! FPQDequeueResult)
        fpq = (res.queue as! FixedPriorityQueue)
        print(_p(res.value))
        res = (fpq_dequeue(&fpq) as! FPQDequeueResult)
        fpq = (res.queue as! FixedPriorityQueue)
        print(_p(res.value))
        res = (fpq_dequeue(&fpq) as! FPQDequeueResult)
        fpq = (res.queue as! FixedPriorityQueue)
        print(_p(res.value))
        print(_p(String(describing: fpq_to_string((fpq as! FixedPriorityQueue)))))
        res = (fpq_dequeue(&fpq) as! FPQDequeueResult)
        fpq = (res.queue as! FixedPriorityQueue)
        print(_p(res.value))
        res = (fpq_dequeue(&fpq) as! FPQDequeueResult)
        fpq = (res.queue as! FixedPriorityQueue)
        print(_p(res.value))
        res = (fpq_dequeue(&fpq) as! FPQDequeueResult)
        fpq = (res.queue as! FixedPriorityQueue)
        print(_p(res.value))
        res = (fpq_dequeue(&fpq) as! FPQDequeueResult)
        fpq = (res.queue as! FixedPriorityQueue)
        print(_p(res.value))
        res = (fpq_dequeue(&fpq) as! FPQDequeueResult)
        fpq = (res.queue as! FixedPriorityQueue)
        print(_p(res.value))
    }
    func element_priority_queue() {
        var epq: ElementPriorityQueue = epq_new()
        epq = (epq_enqueue(&epq, 10) as! ElementPriorityQueue)
        epq = (epq_enqueue(&epq, 70) as! ElementPriorityQueue)
        epq = (epq_enqueue(&epq, 100) as! ElementPriorityQueue)
        epq = (epq_enqueue(&epq, 1) as! ElementPriorityQueue)
        epq = (epq_enqueue(&epq, 5) as! ElementPriorityQueue)
        epq = (epq_enqueue(&epq, 7) as! ElementPriorityQueue)
        epq = (epq_enqueue(&epq, 4) as! ElementPriorityQueue)
        epq = (epq_enqueue(&epq, 64) as! ElementPriorityQueue)
        epq = (epq_enqueue(&epq, 128) as! ElementPriorityQueue)
        print(_p(String(describing: epq_to_string((epq as! ElementPriorityQueue)))))
        var res: EPQDequeueResult = epq_dequeue(&epq)
        epq = (res.queue as! ElementPriorityQueue)
        print(_p(res.value))
        res = (epq_dequeue(&epq) as! EPQDequeueResult)
        epq = (res.queue as! ElementPriorityQueue)
        print(_p(res.value))
        res = (epq_dequeue(&epq) as! EPQDequeueResult)
        epq = (res.queue as! ElementPriorityQueue)
        print(_p(res.value))
        res = (epq_dequeue(&epq) as! EPQDequeueResult)
        epq = (res.queue as! ElementPriorityQueue)
        print(_p(res.value))
        res = (epq_dequeue(&epq) as! EPQDequeueResult)
        epq = (res.queue as! ElementPriorityQueue)
        print(_p(res.value))
        print(_p(String(describing: epq_to_string((epq as! ElementPriorityQueue)))))
        res = (epq_dequeue(&epq) as! EPQDequeueResult)
        epq = (res.queue as! ElementPriorityQueue)
        print(_p(res.value))
        res = (epq_dequeue(&epq) as! EPQDequeueResult)
        epq = (res.queue as! ElementPriorityQueue)
        print(_p(res.value))
        res = (epq_dequeue(&epq) as! EPQDequeueResult)
        epq = (res.queue as! ElementPriorityQueue)
        print(_p(res.value))
        res = (epq_dequeue(&epq) as! EPQDequeueResult)
        epq = (res.queue as! ElementPriorityQueue)
        print(_p(res.value))
        res = (epq_dequeue(&epq) as! EPQDequeueResult)
        epq = (res.queue as! ElementPriorityQueue)
        print(_p(res.value))
    }
    func main() {
        _ = fixed_priority_queue()
        _ = element_priority_queue()
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
