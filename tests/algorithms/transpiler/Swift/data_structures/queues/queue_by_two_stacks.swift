// Generated by Mochi transpiler v0.10.61 on 2025-08-08 18:04:32 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
struct Queue: Codable {
    var stack1: [Int]
    var stack2: [Int]
    init() {
        self.stack1 = []
        self.stack2 = []
    }
    init(stack1: [Int], stack2: [Int]) {
        self.stack1 = stack1
        self.stack2 = stack2
    }
}
struct GetResult: Codable {
    var queue: Queue
    var value: Int
    init() {
        self.queue = Queue()
        self.value = 0
    }
    init(queue: Queue, value: Int) {
        self.queue = queue
        self.value = value
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func new_queue(_ items: [Int]) -> Queue {
        return Queue(stack1: (items as! [Int]), stack2: ([] as! [Int]))
    }
    func len_queue(_ q: Queue) -> Int {
        return (_int(((q.stack1).count)) &+ _int(((q.stack2).count)))
    }
    func str_queue(_ q: Queue) -> String {
        var items: [Int] = ([] as! [Int])
        var i = (_int(((q.stack2).count)) &- 1)
        while (i >= 0) {
            items = (_append(items, (_idx(q.stack2, i) as? Int ?? 0)) as! [Int])
            i = _int((i &- 1))
        }
        var j = 0
        while (j < _int(((q.stack1).count))) {
            items = (_append(items, (_idx(q.stack1, j) as? Int ?? 0)) as! [Int])
            j = _int((j &+ 1))
        }
        var s = "Queue(("
        var k = 0
        while (k < _int(((items).count))) {
            s = ((s + _p((_idx(items, k) as? Int ?? 0))) as! String)
            if (k < (_int(((items).count)) &- 1)) {
                s = ((s + ", ") as! String)
            }
            k = _int((k &+ 1))
        }
        s = ((s + "))") as! String)
        return s
    }
    func put(_ q: Queue, _ item: Int) -> Queue {
        var s1 = q.stack1
        s1 = (_append(s1, item) as! [Int])
        return Queue(stack1: (s1 as! [Int]), stack2: (q.stack2 as! [Int]))
    }
    func get(_ q: Queue) -> GetResult {
        var s1 = q.stack1
        var s2 = q.stack2
        if (_int(((s2).count)) == 0) {
            while (_int(((s1).count)) > 0) {
                let idx = (_int(((s1).count)) &- 1)
                let v = (_idx(s1, idx) as? Int ?? 0)
                var new_s1: [Int] = ([] as! [Int])
                var i = 0
                while (i < idx) {
                    new_s1 = (_append(new_s1, (_idx(s1, i) as? Int ?? 0)) as! [Int])
                    i = _int((i &+ 1))
                }
                s1 = (new_s1 as! [Int])
                s2 = (_append(s2, v) as! [Int])
            }
        }
        if (_int(((s2).count)) == 0) {
            _ = fatalError("Queue is empty")
        }
        let idx2 = (_int(((s2).count)) &- 1)
        let value = (_idx(s2, idx2) as? Int ?? 0)
        var new_s2: [Int] = ([] as! [Int])
        var j = 0
        while (j < idx2) {
            new_s2 = (_append(new_s2, (_idx(s2, j) as? Int ?? 0)) as! [Int])
            j = _int((j &+ 1))
        }
        s2 = (new_s2 as! [Int])
        return GetResult(queue: (Queue(stack1: (s1 as! [Int]), stack2: (s2 as! [Int])) as! Queue), value: Int(value))
    }
    var q = new_queue(([10, 20, 30] as! [Int]))
    let r1 = get((q as! Queue))
    q = (r1.queue as! Queue)
    print(_p(r1.value))
    q = (put((q as! Queue), 40) as! Queue)
    let r2 = get((q as! Queue))
    q = (r2.queue as! Queue)
    print(_p(r2.value))
    let r3 = get((q as! Queue))
    q = (r3.queue as! Queue)
    print(_p(r3.value))
    print(_p(_int(len_queue((q as! Queue)))))
    let r4 = get((q as! Queue))
    q = (r4.queue as! Queue)
    print(_p(r4.value))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
