// Generated by Mochi transpiler v0.10.61 on 2025-08-08 17:11:47 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return nil
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
struct Node: Codable {
    var data: String
    var next: Int
    init() {
        self.data = ""
        self.next = 0
    }
    init(data: String, next: Int) {
        self.data = data
        self.next = next
    }
}
struct LinkedQueue: Codable {
    var nodes: [Node]
    var front: Int
    var rear: Int
    init() {
        self.nodes = []
        self.front = 0
        self.rear = 0
    }
    init(nodes: [Node], front: Int, rear: Int) {
        self.nodes = nodes
        self.front = front
        self.rear = rear
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func new_queue() -> LinkedQueue {
        return LinkedQueue(nodes: [], front: (0 &- 1), rear: (0 &- 1))
    }
    func is_empty(_ q: LinkedQueue) -> Bool {
        return (q.front == (0 &- 1))
    }
    func put(_ q: inout LinkedQueue, _ item: String) -> Void {
        let node = Node(data: item, next: (0 &- 1))
        q.nodes = (_append(q.nodes, node) as! [Node])
        let idx = (_int(((q.nodes).count)) &- 1)
        if (q.front == (0 &- 1)) {
            q.front = Int(idx)
            q.rear = Int(idx)
        } else {
            var nodes: [Node] = q.nodes
            var _tmp2 = (_idx(nodes, q.rear) as! Node)
            _tmp2.next = Int(idx)
            nodes = _set(nodes, q.rear, (_tmp2 as! Node))
            q.nodes = (nodes as! [Node])
            q.rear = Int(idx)
        }
    }
    func get(_ q: inout LinkedQueue) -> String {
        if is_empty((q as! LinkedQueue)) {
            _ = fatalError("dequeue from empty queue")
        }
        let idx = q.front
        let node = (_idx(q.nodes, idx) as! Node)
        q.front = _int(node.next)
        if (q.front == (0 &- 1)) {
            q.rear = _int((0 &- 1))
        }
        return node.data
    }
    func length(_ q: LinkedQueue) -> Int {
        var count: Int = 0
        var idx: Int = q.front
        while (idx != (0 &- 1)) {
            count = _int((count &+ 1))
            idx = _int((_idx(q.nodes, idx)!.next))
        }
        return count
    }
    func to_string(_ q: LinkedQueue) -> String {
        var res: String = ""
        var idx: Int = q.front
        var first: Bool = true
        while (idx != (0 &- 1)) {
            let node = (_idx(q.nodes, idx) as! Node)
            if first {
                res = (node.data as! String)
                first = false
            } else {
                res = (((res + " <- ") + node.data) as! String)
            }
            idx = _int(node.next)
        }
        return res
    }
    func clear(_ q: inout LinkedQueue) -> Void {
        q.nodes = ([] as! [Node])
        q.front = _int((0 &- 1))
        q.rear = _int((0 &- 1))
    }
    var queue = new_queue()
    print(_p(_p(is_empty((queue as! LinkedQueue)))))
    _ = put(&queue, "5")
    _ = put(&queue, "9")
    _ = put(&queue, "python")
    print(_p(_p(is_empty((queue as! LinkedQueue)))))
    print(_p(String(describing: get(&queue))))
    _ = put(&queue, "algorithms")
    print(_p(String(describing: get(&queue))))
    print(_p(String(describing: get(&queue))))
    print(_p(String(describing: get(&queue))))
    print(_p(_p(is_empty((queue as! LinkedQueue)))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
