// Generated by Mochi transpiler v0.10.61 on 2025-08-08 17:10:07 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return nil
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
struct CircularQueue: Codable {
    var data: [Int]
    var front: Int
    var rear: Int
    var size: Int
    var capacity: Int
    init() {
        self.data = []
        self.front = 0
        self.rear = 0
        self.size = 0
        self.capacity = 0
    }
    init(data: [Int], front: Int, rear: Int, size: Int, capacity: Int) {
        self.data = data
        self.front = front
        self.rear = rear
        self.size = size
        self.capacity = capacity
    }
}
struct DequeueResult: Codable {
    var queue: CircularQueue
    var value: Int
    init() {
        self.queue = CircularQueue()
        self.value = 0
    }
    init(queue: CircularQueue, value: Int) {
        self.queue = queue
        self.value = value
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func create_queue(_ capacity: Int) -> CircularQueue {
        var arr: [Int] = ([] as! [Int])
        var i: Int = 0
        while (i < capacity) {
            arr = (_append(arr, 0) as! [Int])
            i = _int((i &+ 1))
        }
        return CircularQueue(data: arr, front: 0, rear: 0, size: 0, capacity: capacity)
    }
    func length(_ q: CircularQueue) -> Int {
        return q.size
    }
    func is_empty(_ q: CircularQueue) -> Bool {
        return (q.size == 0)
    }
    func front(_ q: CircularQueue) -> Int {
        if is_empty((q as! CircularQueue)) {
            return 0
        }
        return (_idx(q.data, q.front) as? Int ?? 0)
    }
    func enqueue(_ q: inout CircularQueue, _ value: Int) -> CircularQueue {
        if (q.size >= q.capacity) {
            _ = fatalError("QUEUE IS FULL")
        }
        var arr: [Int] = q.data
        arr = _set(arr, q.rear, Int(value))
        q.data = (arr as! [Int])
        q.rear = _int(((_int((q.rear &+ 1)) % q.capacity + q.capacity) % q.capacity))
        q.size = _int((q.size &+ 1))
        return q
    }
    func dequeue(_ q: inout CircularQueue) -> DequeueResult {
        if (q.size == 0) {
            _ = fatalError("UNDERFLOW")
        }
        let value = (_idx(q.data, q.front) as? Int ?? 0)
        var arr2: [Int] = q.data
        arr2 = _set(arr2, q.front, 0)
        q.data = (arr2 as! [Int])
        q.front = _int(((_int((q.front &+ 1)) % q.capacity + q.capacity) % q.capacity))
        q.size = _int((q.size &- 1))
        return DequeueResult(queue: q, value: value)
    }
    func main() {
        var q: CircularQueue = create_queue(5)
        print(_p(is_empty((q as! CircularQueue))))
        q = (enqueue(&q, 10) as! CircularQueue)
        print(_p(is_empty((q as! CircularQueue))))
        q = (enqueue(&q, 20) as! CircularQueue)
        q = (enqueue(&q, 30) as! CircularQueue)
        print(_p(_int(front((q as! CircularQueue)))))
        var r: DequeueResult = dequeue(&q)
        q = (r.queue as! CircularQueue)
        print(_p(r.value))
        print(_p(_int(front((q as! CircularQueue)))))
        print(_p(_int(length((q as! CircularQueue)))))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
