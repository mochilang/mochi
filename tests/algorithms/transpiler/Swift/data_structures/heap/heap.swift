// Generated by Mochi transpiler v0.10.59 on 2025-08-06 23:26:36 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func parent_index(_ child_idx: Int) -> Int {
        if (child_idx > 0) {
            return (Int((child_idx &- 1)) / 2)
        }
        return -1
    }
    func left_child_idx(_ parent_idx: Int) -> Int {
        return ((2 &* parent_idx) &+ 1)
    }
    func right_child_idx(_ parent_idx: Int) -> Int {
        return ((2 &* parent_idx) &+ 2)
    }
    func max_heapify(_ h: inout [Double?], _ heap_size: Int, _ index: Int) {
        var largest: Int = index
        let left = Int(left_child_idx(index))
        let right = Int(right_child_idx(index))
        if ((left < heap_size) && (Double(h[left]) > Double(h[largest]))) {
            largest = (left as! Int)
        }
        if ((right < heap_size) && (Double(h[right]) > Double(h[largest]))) {
            largest = (right as! Int)
        }
        if (largest != index) {
            let temp = Double(h[index])
            h = _set(h, index, Double(h[largest]))
            h = _set(h, largest, Double(temp))
            _ = max_heapify(&h, heap_size, largest)
        }
    }
    func build_max_heap(_ h: inout [Double?]) -> Int {
        var heap_size: Int = Int(((h).count))
        var i: Int = ((heap_size / 2) &- 1)
        while (i >= 0) {
            _ = max_heapify(&h, heap_size, i)
            i = Int((i &- 1))
        }
        return heap_size
    }
    func extract_max(_ h: inout [Double?], _ heap_size: Int) -> Double {
        let max_value = Double(h[0])
        h = _set(h, 0, Double(h[(heap_size &- 1)]))
        _ = max_heapify(&h, (heap_size &- 1), 0)
        return max_value
    }
    func insert(_ h: inout [Double?], _ heap_size: Int, _ value: Double) -> Int {
        var heap_size = heap_size
        if (heap_size < Int(((h).count))) {
            h = _set(h, heap_size, Double(value))
        } else {
            h = (_append(h, value) as! [Double?])
        }
        heap_size = Int((heap_size &+ 1))
        var idx: Int = (Int((heap_size &- 1)) / 2)
        while (idx >= 0) {
            _ = max_heapify(&h, heap_size, idx)
            idx = Int((Int((idx &- 1)) / 2))
        }
        return heap_size
    }
    func heap_sort(_ h: inout [Double?], _ heap_size: Int) {
        var size: Int = heap_size
        var j: Int = (size &- 1)
        while (j > 0) {
            let temp = Double(h[0])
            h = _set(h, 0, Double(h[j]))
            h = _set(h, j, Double(temp))
            size = Int((size &- 1))
            _ = max_heapify(&h, size, 0)
            j = Int((j &- 1))
        }
    }
    func heap_to_string(_ h: [Double?], _ heap_size: Int) -> String {
        var s: String = "["
        var i: Int = 0
        while (i < heap_size) {
            s = ((s + String(describing: Double(h[i]))) as! String)
            if (i < (heap_size &- 1)) {
                s = ((s + ", ") as! String)
            }
            i = Int((i &+ 1))
        }
        s = ((s + "]") as! String)
        return s
    }
    var heap: [Double?] = ([103.0, 9.0, 1.0, 7.0, 11.0, 15.0, 25.0, 201.0, 209.0, 107.0, 5.0] as! [Double?])
    var size: Int = Int(build_max_heap(&heap))
    print(_p(String(describing: heap_to_string((heap as! [Double?]), size))))
    let m = Double(extract_max(&heap, size))
    size = Int((size &- 1))
    print(_p(String(describing: m)))
    print(_p(String(describing: heap_to_string((heap as! [Double?]), size))))
    size = Int(insert(&heap, size, 100.0))
    print(_p(String(describing: heap_to_string((heap as! [Double?]), size))))
    _ = heap_sort(&heap, size)
    print(_p(String(describing: heap_to_string((heap as! [Double?]), size))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
