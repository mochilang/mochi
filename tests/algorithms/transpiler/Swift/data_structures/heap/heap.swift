// Generated by Mochi transpiler v0.10.72 on 2025-08-25 00:12:43 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.isNaN || d.isInfinite {
                return String(d)
            }
            if d.rounded(.towardZero) == d {
                // avoid overflow when converting to Int64
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _num(_ v: Any) -> Double {
    if let d = v as? Double { return d }
    if let i = v as? Int { return Double(i) }
    if let i = v as? Int64 { return Double(i) }
    return 0
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first!
}
func _idx<K: Hashable, V>(_ m: [K: V], _ k: K) -> V? {
    return m[k]
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    var i = idx
    if i < 0 { i += out.count }
    if i < out.count {
        out[i] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: i - out.count + 1))
        out[i] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func parent_index(_ child_idx: Int) -> Int {
        if ((child_idx > 0)) {
            return Int((Double(_int((child_idx &- 1))) / Double(2)).rounded(.down))
        }
        return -1
    }
    func left_child_idx(_ parent_idx: Int) -> Int {
        return ((2 &* parent_idx) &+ 1)
    }
    func right_child_idx(_ parent_idx: Int) -> Int {
        return ((2 &* parent_idx) &+ 2)
    }
    func max_heapify(_ h: inout [Double], _ heap_size: Int, _ index: Int) {
        var largest = index
        let left = _int(left_child_idx(index))
        let right = _int(right_child_idx(index))
        if (((left < heap_size) && (_num(_idx(h, left)) > _num(_idx(h, largest))))) {
            largest = Int(left)
        }
        if (((right < heap_size) && (_num(_idx(h, right)) > _num(_idx(h, largest))))) {
            largest = Int(right)
        }
        if ((largest != index)) {
            let temp = _num(_idx(h, index))
            h = _set(h, index, { let _tmp0 = _num(_idx(h, largest)); return _tmp0 }())
            h = _set(h, largest, { let _tmp1 = _num(temp); return _tmp1 }())
            _ = max_heapify(&h, heap_size, largest)
        }
    }
    func build_max_heap(_ h: inout [Double]) -> Int {
        var heap_size = _int(((h).count))
        var i = (Int((Double(heap_size) / Double(2)).rounded(.down)) &- 1)
        while ((i >= 0)) {
            _ = max_heapify(&h, heap_size, i)
            i = _int((i &- 1))
        }
        return heap_size
    }
    func extract_max(_ h: inout [Double], _ heap_size: Int) -> Double {
        let max_value = _num(_idx(h, 0))
        h = _set(h, 0, { let _tmp2 = _num(_idx(h, (heap_size &- 1))); return _tmp2 }())
        _ = max_heapify(&h, (heap_size &- 1), 0)
        return max_value
    }
    func insert(_ h: inout [Double], _ heap_size: Int, _ value: Double) -> Int {
        var heap_size = heap_size
        if ((heap_size < _int(((h).count)))) {
            h = _set(h, heap_size, { let _tmp3 = _num(value); return _tmp3 }())
        } else {
            h = (_append(h, value) as! [Double])
        }
        heap_size = _int((heap_size &+ 1))
        var idx = Int((Double(_int((heap_size &- 1))) / Double(2)).rounded(.down))
        while ((idx >= 0)) {
            _ = max_heapify(&h, heap_size, idx)
            idx = _int(Int((Double(_int((idx &- 1))) / Double(2)).rounded(.down)))
        }
        return heap_size
    }
    func heap_sort(_ h: inout [Double], _ heap_size: Int) {
        var size = heap_size
        var j = (size &- 1)
        while ((j > 0)) {
            let temp = _num(_idx(h, 0))
            h = _set(h, 0, { let _tmp4 = _num(_idx(h, j)); return _tmp4 }())
            h = _set(h, j, { let _tmp5 = _num(temp); return _tmp5 }())
            size = _int((size &- 1))
            _ = max_heapify(&h, size, 0)
            j = _int((j &- 1))
        }
    }
    func heap_to_string(_ h: [Double], _ heap_size: Int) -> String {
        var s = "["
        var i = 0
        while ((i < heap_size)) {
            s = ((_p(s) + _p(_p(_num(_idx(h, i))))) as! String)
            if ((i < (heap_size &- 1))) {
                s = ((_p(s) + _p(", ")) as! String)
            }
            i = _int((i &+ 1))
        }
        s = ((_p(s) + _p("]")) as! String)
        return s
    }
    var heap: [Double] = ({
        var _arr: [Double] = []
        _arr = _append(_arr, 103.0)
        _arr = _append(_arr, 9.0)
        _arr = _append(_arr, 1.0)
        _arr = _append(_arr, 7.0)
        _arr = _append(_arr, 11.0)
        _arr = _append(_arr, 15.0)
        _arr = _append(_arr, 25.0)
        _arr = _append(_arr, 201.0)
        _arr = _append(_arr, 209.0)
        _arr = _append(_arr, 107.0)
        _arr = _append(_arr, 5.0)
        return _arr
    }() as! [Double])
    var size = _int(build_max_heap(&heap))
    print(_p(String(describing: heap_to_string((heap as! [Double]), size))))
    let m = _num(extract_max(&heap, size))
    size = _int((size &- 1))
    print(_p(_p(m)))
    print(_p(String(describing: heap_to_string((heap as! [Double]), size))))
    size = _int(insert(&heap, size, 100.0))
    print(_p(String(describing: heap_to_string((heap as! [Double]), size))))
    _ = heap_sort(&heap, size)
    print(_p(String(describing: heap_to_string((heap as! [Double]), size))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
