// Generated by Mochi transpiler v0.10.59 on 2025-08-06 23:30:33 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
struct Node: Codable {
    var name: String
    var val: Int
    init() {
        self.name = ""
        self.val = 0
    }
    init(name: String, val: Int) {
        self.name = name
        self.val = val
    }
}
struct MinHeap: Codable {
    var heap: [Node?]
    var idx_of_element: [String: Int]
    var heap_dict: [String: Int]
    init() {
        self.heap = []
        self.idx_of_element = [:]
        self.heap_dict = [:]
    }
    init(heap: [Node?], idx_of_element: [String: Int], heap_dict: [String: Int]) {
        self.heap = heap
        self.idx_of_element = idx_of_element
        self.heap_dict = heap_dict
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func get_parent_idx(_ idx: Int) -> Int {
        return (Int((idx &- 1)) / 2)
    }
    func get_left_child_idx(_ idx: Int) -> Int {
        return ((idx &* 2) &+ 1)
    }
    func get_right_child_idx(_ idx: Int) -> Int {
        return ((idx &* 2) &+ 2)
    }
    func remove_key(_ m: [String: Int], _ k: String) -> [String: Int] {
        var out: [String: Int] = ([:] as! [String: Int])
        for key in m.keys.sorted() {
            if (key != k) {
                out = _set(out, String(describing: key), (m[String(String(describing: key))] as? Int ?? 0))
            }
        }
        return out
    }
    func slice_without_last(_ xs: [Node?]) -> [Node?] {
        var res: [Node?] = ([] as! [Node?])
        var i: Int = 0
        while (i < (Int(((xs).count)) &- 1)) {
            res = (_append(res, (xs[i] as! Node)) as! [Node?])
            i = Int((i &+ 1))
        }
        return res
    }
    func sift_down(_ mh: inout MinHeap, _ idx: Int) {
        var heap: [Node?] = mh.heap
        var idx_map: [String: Int] = mh.idx_of_element
        var i: Int = idx
        while true {
            let left = Int(get_left_child_idx(i))
            let right = Int(get_right_child_idx(i))
            var smallest: Int = i
            if ((left < Int(((heap).count))) && (String(describing: (heap[left] as! Node).val) < String(describing: (heap[smallest] as! Node).val)
            )) {
                smallest = (left as! Int)
            }
            if ((right < Int(((heap).count))) && (String(describing: (heap[right] as! Node).val) < String(describing: (heap[smallest] as! Node).val)
            )) {
                smallest = (right as! Int)
            }
            if (smallest != i) {
                let tmp = (heap[i] as! Node)
                heap = _set(heap, i, (heap[smallest] as! Node))
                heap = _set(heap, smallest, (tmp as! Node))
                idx_map = _set(idx_map, String(describing: (heap[i] as! Node).name), (i as! Int))
                idx_map = _set(idx_map, String(describing: (heap[smallest] as! Node).name), (smallest as! Int))
                i = (smallest as! Int)
            } else {
                break
            }
        }
        mh.heap = (heap as! [Node?])
        mh.idx_of_element = (idx_map as! [String: Int])
    }
    func sift_up(_ mh: inout MinHeap, _ idx: Int) {
        var heap: [Node?] = mh.heap
        var idx_map: [String: Int] = mh.idx_of_element
        var i: Int = idx
        var p: Int = Int(get_parent_idx(i))
        while ((p >= 0) && (String(describing: (heap[p] as! Node).val) > String(describing: (heap[i] as! Node).val)
        )) {
            let tmp = (heap[p] as! Node)
            heap = _set(heap, p, (heap[i] as! Node))
            heap = _set(heap, i, (tmp as! Node))
            idx_map = _set(idx_map, String(describing: (heap[p] as! Node).name), (p as! Int))
            idx_map = _set(idx_map, String(describing: (heap[i] as! Node).name), (i as! Int))
            i = (p as! Int)
            p = Int(get_parent_idx(i))
        }
        mh.heap = (heap as! [Node?])
        mh.idx_of_element = (idx_map as! [String: Int])
    }
    func new_min_heap(_ array: [Node?]) -> MinHeap {
        var idx_map: [String: Int] = ([:] as! [String: Int])
        var val_map: [String: Int] = ([:] as! [String: Int])
        var heap: [Node?] = array
        var i: Int = 0
        while (i < Int(((array).count))) {
            let n = (array[i] as! Node)
            idx_map = _set(idx_map, String(describing: n.name), (i as! Int))
            val_map = _set(val_map, String(describing: n.name), Int(n.val))
            i = Int((i &+ 1))
        }
        var mh: MinHeap = MinHeap(heap: heap, idx_of_element: idx_map, heap_dict: val_map)
        var start: Int = Int(get_parent_idx((Int(((array).count)) &- 1)))
        while (start >= 0) {
            _ = sift_down(&mh, start)
            start = Int((start &- 1))
        }
        return mh
    }
    func peek(_ mh: MinHeap) -> Node {
        return (mh.heap[0] as! Node)
    }
    func remove_min(_ mh: inout MinHeap) -> Node {
        var heap: [Node?] = mh.heap
        var idx_map: [String: Int] = mh.idx_of_element
        var val_map: [String: Int] = mh.heap_dict
        let last_idx = (Int(((heap).count)) &- 1)
        let top = (heap[0] as! Node)
        let last = (heap[last_idx] as! Node)
        heap = _set(heap, 0, (last as! Node))
        idx_map = _set(idx_map, String(describing: last.name), 0)
        heap = (slice_without_last((heap as! [Node?])) as! [Node?])
        idx_map = (remove_key((idx_map as! [String: Int]), (top.name as! String)) as! [String: Int])
        val_map = (remove_key((val_map as! [String: Int]), (top.name as! String)) as! [String: Int])
        mh.heap = (heap as! [Node?])
        mh.idx_of_element = (idx_map as! [String: Int])
        mh.heap_dict = (val_map as! [String: Int])
        if (Int(((heap).count)) > 0) {
            _ = sift_down(&mh, 0)
        }
        return top
    }
    func insert(_ mh: inout MinHeap, _ node: Node) {
        var heap: [Node?] = mh.heap
        var idx_map: [String: Int] = mh.idx_of_element
        var val_map: [String: Int] = mh.heap_dict
        heap = (_append(heap, node) as! [Node?])
        let idx = (Int(((heap).count)) &- 1)
        idx_map = _set(idx_map, String(describing: node.name), (idx as! Int))
        val_map = _set(val_map, String(describing: node.name), Int(node.val))
        mh.heap = (heap as! [Node?])
        mh.idx_of_element = (idx_map as! [String: Int])
        mh.heap_dict = (val_map as! [String: Int])
        _ = sift_up(&mh, idx)
    }
    func is_empty(_ mh: MinHeap) -> Bool {
        return (Int(((mh.heap).count)) == 0)
    }
    func get_value(_ mh: MinHeap, _ key: String) -> Int {
        return (mh.heap_dict[String(String(describing: key))] as? Int ?? 0)
    }
    func decrease_key(_ mh: inout MinHeap, _ node: inout Node, _ new_value: Int) {
        var heap: [Node?] = mh.heap
        var val_map: [String: Int] = mh.heap_dict
        var idx_map: [String: Int] = mh.idx_of_element
        let idx = (idx_map[String(String(describing: node.name))] as? Int ?? 0)
        if (!(String(describing: (heap[idx] as! Node).val) > String(describing: new_value)
        )) {
            _ = fatalError("newValue must be less than current value")
        }
        node.val = (new_value as! Int)
        heap[idx]!.val = (new_value as! Int)
        val_map = _set(val_map, String(describing: node.name), (new_value as! Int))
        mh.heap = (heap as! [Node?])
        mh.heap_dict = (val_map as! [String: Int])
        _ = sift_up(&mh, idx)
    }
    func node_to_string(_ n: Node) -> String {
        return (((("Node(" + n.name) + ", ") + String(describing: n.val)) + ")")
    }
    var r: Node = Node(name: "R", val: -1)
    var b: Node = Node(name: "B", val: 6)
    var a: Node = Node(name: "A", val: 3)
    var x: Node = Node(name: "X", val: 1)
    var e: Node = Node(name: "E", val: 4)
    var my_min_heap: MinHeap = new_min_heap(([r, b, a, x, e] as! [Node?]))
    print(_p("Min Heap - before decrease key"))
    for n in my_min_heap.heap {
        print(_p(String(describing: node_to_string((n as! Node)))))
    }
    print(_p("Min Heap - After decrease key of node [B -> -17]"))
    _ = decrease_key(&my_min_heap, &b, -17)
    for n in my_min_heap.heap {
        print(_p(String(describing: node_to_string((n as! Node)))))
    }
    print(_p(String(describing: Int(get_value((my_min_heap as! MinHeap), "B")))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
