// Generated by Mochi transpiler v0.10.59 on 2025-08-06 23:27:57 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
class Heap {
    var arr: [[Int?]]
    var pos_map: [Int: Int]
    var size: Int
    var key: (Int) -> Int
    init() {
        self.arr = []
        self.pos_map = [:]
        self.size = 0
        self.key = { (_ arg0: Int) -> Int in 0 }
    }
    init(arr: [[Int?]], pos_map: [Int: Int], size: Int, key: @escaping (Int) -> Int) {
        self.arr = arr
        self.pos_map = pos_map
        self.size = size
        self.key = key
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func new_heap(_ key: @escaping (Int) -> Int) -> Heap {
        return Heap(arr: [], pos_map: [:], size: 0, key: key)
    }
    func parent(_ i: Int) -> Int {
        if (i > 0) {
            return (Int((i &- 1)) / 2)
        }
        return -1
    }
    func left(_ i: Int, _ size: Int) -> Int {
        let l = ((2 &* i) &+ 1)
        if (l < size) {
            return l
        }
        return -1
    }
    func right(_ i: Int, _ size: Int) -> Int {
        let r = ((2 &* i) &+ 2)
        if (r < size) {
            return r
        }
        return -1
    }
    func swap(_ h: Heap, _ i: Int, _ j: Int) -> Void {
        var h = h
        var arr: [[Int?]] = h.arr
        let item_i = (arr[i][0] as? Int ?? 0)
        let item_j = (arr[j][0] as? Int ?? 0)
        var pm: [Int: Int] = h.pos_map
        pm = _set(pm, item_i, Int((j &+ 1)))
        pm = _set(pm, item_j, Int((i &+ 1)))
        h.pos_map = (pm as! [Int: Int])
        let tmp: [Int?] = (arr[i] as! [Int?])
        arr = _set(arr, i, (arr[j] as! [Int?]))
        arr = _set(arr, j, (tmp as! [Int?]))
        h.arr = (arr as! [[Int?]])
    }
    func cmp(_ h: Heap, _ i: Int, _ j: Int) -> Bool {
        let arr: [[Int?]] = h.arr
        return ((arr[i][1] as? Int ?? 0) < (arr[j][1] as? Int ?? 0))
    }
    func get_valid_parent(_ h: Heap, _ i: Int) -> Int {
        var vp: Int = i
        let l = Int(left(i, h.size))
        if ((l != (0 &- 1)) && (cmp((h as! Heap), l, vp) == false)) {
            vp = (l as! Int)
        }
        let r = Int(right(i, h.size))
        if ((r != (0 &- 1)) && (cmp((h as! Heap), r, vp) == false)) {
            vp = (r as! Int)
        }
        return vp
    }
    func heapify_up(_ h: Heap, _ index: Int) -> Void {
        var h = h
        var idx: Int = index
        var p: Int = Int(parent(idx))
        while ((p != (0 &- 1)) && (cmp((h as! Heap), idx, p) == false)) {
            _ = swap((h as! Heap), idx, p)
            idx = (p as! Int)
            p = Int(parent(p))
        }
    }
    func heapify_down(_ h: Heap, _ index: Int) -> Void {
        var h = h
        var idx: Int = index
        var vp: Int = Int(get_valid_parent((h as! Heap), idx))
        while (vp != idx) {
            _ = swap((h as! Heap), idx, vp)
            idx = (vp as! Int)
            vp = Int(get_valid_parent((h as! Heap), idx))
        }
    }
    func update_item(_ h: Heap, _ item: Int, _ item_value: Int) -> Void {
        var h = h
        var pm: [Int: Int] = h.pos_map
        if ((pm[item] as? Int ?? 0) == 0) {
            return
        }
        let index: Int = ((pm[item] as? Int ?? 0) &- 1)
        var arr: [[Int?]] = h.arr
        arr = _set(arr, index, ([item, Int(h.key(item_value))] as! [Int?]))
        h.arr = (arr as! [[Int?]])
        h.pos_map = (pm as! [Int: Int])
        _ = heapify_up((h as! Heap), index)
        _ = heapify_down((h as! Heap), index)
    }
    func delete_item(_ h: Heap, _ item: Int) -> Void {
        var h = h
        var pm: [Int: Int] = h.pos_map
        if ((pm[item] as? Int ?? 0) == 0) {
            return
        }
        let index: Int = ((pm[item] as? Int ?? 0) &- 1)
        pm = _set(pm, item, 0)
        var arr: [[Int?]] = h.arr
        let last_index: Int = (h.size &- 1)
        if (index != last_index) {
            arr = _set(arr, index, (arr[last_index] as! [Int?]))
            let moved = (arr[index][0] as? Int ?? 0)
            pm = _set(pm, moved, Int((index &+ 1)))
        }
        h.size = Int((h.size &- 1))
        h.arr = (arr as! [[Int?]])
        h.pos_map = (pm as! [Int: Int])
        if (h.size > index) {
            _ = heapify_up((h as! Heap), index)
            _ = heapify_down((h as! Heap), index)
        }
    }
    func insert_item(_ h: Heap, _ item: Int, _ item_value: Int) -> Void {
        var h = h
        var arr: [[Int?]] = h.arr
        let arr_len: Int = Int(((arr).count))
        if (arr_len == h.size) {
            arr = (_append(arr, ([item, Int(h.key(item_value))] as! [Int?])) as! [[Int?]])
        } else {
            arr = _set(arr, h.size, ([item, Int(h.key(item_value))] as! [Int?]))
        }
        var pm: [Int: Int] = h.pos_map
        pm = _set(pm, item, Int((h.size &+ 1)))
        h.size = Int((h.size &+ 1))
        h.arr = (arr as! [[Int?]])
        h.pos_map = (pm as! [Int: Int])
        _ = heapify_up((h as! Heap), (h.size &- 1))
    }
    func get_top(_ h: Heap) -> [Int?] {
        let arr: [[Int?]] = h.arr
        if (h.size > 0) {
            return (arr[0] as! [Int?])
        }
        return ([] as! [Int?])
    }
    func extract_top(_ h: Heap) -> [Int?] {
        var h = h
        let top: [Int?] = (get_top((h as! Heap)) as! [Int?])
        if (Int(((top).count)) > 0) {
            _ = delete_item((h as! Heap), (top[0] as? Int ?? 0))
        }
        return top
    }
    func identity(_ x: Int) -> Int {
        return x
    }
    func negate(_ x: Int) -> Int {
        return (0 &- x)
    }
    var h: Heap = new_heap((identity as! (Int) -> Int))
    _ = insert_item((h as! Heap), 5, 34)
    _ = insert_item((h as! Heap), 6, 31)
    _ = insert_item((h as! Heap), 7, 37)
    print(_p("[" + (get_top((h as! Heap)) as! [Int?]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    print(_p("[" + (extract_top((h as! Heap)) as! [Int?]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    print(_p("[" + (extract_top((h as! Heap)) as! [Int?]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    print(_p("[" + (extract_top((h as! Heap)) as! [Int?]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    h = (new_heap((negate as! (Int) -> Int)) as! Heap)
    _ = insert_item((h as! Heap), 5, 34)
    _ = insert_item((h as! Heap), 6, 31)
    _ = insert_item((h as! Heap), 7, 37)
    print(_p("[" + (get_top((h as! Heap)) as! [Int?]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    print(_p("[" + (extract_top((h as! Heap)) as! [Int?]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    print(_p("[" + (extract_top((h as! Heap)) as! [Int?]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    print(_p("[" + (extract_top((h as! Heap)) as! [Int?]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    _ = insert_item((h as! Heap), 8, 45)
    _ = insert_item((h as! Heap), 9, 40)
    _ = insert_item((h as! Heap), 10, 50)
    print(_p("[" + (get_top((h as! Heap)) as! [Int?]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    _ = update_item((h as! Heap), 10, 30)
    print(_p("[" + (get_top((h as! Heap)) as! [Int?]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    _ = delete_item((h as! Heap), 10)
    print(_p("[" + (get_top((h as! Heap)) as! [Int?]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
