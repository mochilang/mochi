// Generated by Mochi transpiler v0.10.59 on 2025-08-06 23:17:28 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
struct BinomialHeap: Codable {
    var data: [Int?]
    init() {
        self.data = []
    }
    init(data: [Int?]) {
        self.data = data
    }
}
struct DeleteResult: Codable {
    var heap: BinomialHeap
    var value: Int
    init() {
        self.heap = BinomialHeap()
        self.value = 0
    }
    init(heap: BinomialHeap, value: Int) {
        self.heap = heap
        self.value = value
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func new_heap() -> BinomialHeap {
        return BinomialHeap(data: [])
    }
    func swap(_ data: inout [Int?], _ i: Int, _ j: Int) {
        let tmp = (data[i] as? Int ?? 0)
        data = _set(data, i, (data[j] as? Int ?? 0))
        data = _set(data, j, (tmp as! Int))
    }
    func sift_up(_ data: inout [Int?], _ idx: Int) {
        var i: Int = idx
        while (i > 0) {
            let parent = (Int((i &- 1)) / 2)
            if ((data[parent] as? Int ?? 0) <= (data[i] as? Int ?? 0)) {
                break
            }
            _ = swap(&data, parent, i)
            i = (parent as! Int)
        }
    }
    func sift_down(_ data: inout [Int?], _ idx: Int) {
        var i: Int = idx
        let n = Int(((data).count))
        while true {
            let left = ((2 &* i) &+ 1)
            let right = (left &+ 1)
            var smallest: Int = i
            if ((left < n) && ((data[left] as? Int ?? 0) < (data[smallest] as? Int ?? 0))) {
                smallest = (left as! Int)
            }
            if ((right < n) && ((data[right] as? Int ?? 0) < (data[smallest] as? Int ?? 0))) {
                smallest = (right as! Int)
            }
            if (smallest == i) {
                break
            }
            _ = swap(&data, i, smallest)
            i = (smallest as! Int)
        }
    }
    func insert(_ heap: BinomialHeap, _ v: Int) -> BinomialHeap {
        var d: [Int?] = heap.data
        d = (_append(d, v) as! [Int?])
        _ = sift_up(&d, (Int(((d).count)) &- 1))
        return BinomialHeap(data: d)
    }
    func peek(_ heap: BinomialHeap) -> Int {
        return (heap.data[0] as? Int ?? 0)
    }
    func is_empty(_ heap: BinomialHeap) -> Bool {
        return (Int(((heap.data).count)) == 0)
    }
    func delete_min(_ heap: BinomialHeap) -> DeleteResult {
        var d: [Int?] = heap.data
        let min = (d[0] as? Int ?? 0)
        d = _set(d, 0, (d[(Int(((d).count)) &- 1)] as? Int ?? 0))
        d = (Array(d[0..<(Int(((d).count)) &- 1)]) as! [Int?])
        if (Int(((d).count)) > 0) {
            _ = sift_down(&d, 0)
        }
        return DeleteResult(heap: BinomialHeap(data: d), value: min)
    }
    func main() {
        var h: BinomialHeap = new_heap()
        h = (insert((h as! BinomialHeap), 10) as! BinomialHeap)
        h = (insert((h as! BinomialHeap), 3) as! BinomialHeap)
        h = (insert((h as! BinomialHeap), 7) as! BinomialHeap)
        print(_p(String(describing: Int(peek((h as! BinomialHeap))))))
        let d1 = delete_min((h as! BinomialHeap))
        h = (d1.heap as! BinomialHeap)
        print(_p(String(describing: d1.value)))
        let d2 = delete_min((h as! BinomialHeap))
        h = (d2.heap as! BinomialHeap)
        print(_p(String(describing: d2.value)))
        let d3 = delete_min((h as! BinomialHeap))
        h = (d3.heap as! BinomialHeap)
        print(_p(String(describing: d3.value)))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
