// Generated by Mochi transpiler v0.10.59 on 2025-08-06 23:30:39 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let NIL = (0 &- 1)
    var seed: Int = 1
    func set_seed(_ s: Int) {
        seed = (s as! Int)
    }
    func randint(_ a: Int, _ b: Int) -> Int {
        seed = Int(((Int(((seed &* 1103515245) &+ 12345)) % 2147483648 + 2147483648) % 2147483648))
        return (Int(((seed % Int(((b &- a) &+ 1)) + Int(((b &- a) &+ 1))) % Int(((b &- a) &+ 1)))) &+ a)
    }
    func rand_bool() -> Bool {
        return (Int(randint(0, 1)) == 1)
    }
    var nodes: [[String: Int]] = ([] as! [[String: Int]])
    var root: Int = NIL
    func new_heap() {
        nodes = ([] as! [[String: Int]])
        root = (NIL as! Int)
    }
    func merge(_ r1: Int, _ r2: Int) -> Int {
        var r1 = r1
        var r2 = r2
        if (r1 == NIL) {
            return r2
        }
        if (r2 == NIL) {
            return r1
        }
        if ((nodes[r1]["value"] as? Int ?? 0) > (nodes[r2]["value"] as? Int ?? 0)) {
            let tmp = r1
            r1 = (r2 as! Int)
            r2 = (tmp as! Int)
        }
        if rand_bool() {
            let tmp = (nodes[r1]["left"] as? Int ?? 0)
            nodes[r1][String("left")] = (nodes[r1]["right"] as? Int ?? 0)
            nodes[r1][String("right")] = (tmp as! Int)
        }
        nodes[r1][String("left")] = Int(merge((nodes[r1]["left"] as? Int ?? 0), r2))
        return r1
    }
    func insert(_ value: Int) {
        let node: [String: Int] = (["value": value, "left": NIL, "right": NIL] as! [String: Int])
        nodes = (_append(nodes, node) as! [[String: Int]])
        let idx = (Int(((nodes).count)) &- 1)
        root = Int(merge(root, idx))
    }
    func top() -> Int {
        if (root == NIL) {
            return 0
        }
        return (nodes[root]["value"] as? Int ?? 0)
    }
    func pop() -> Int {
        let result = Int(top())
        let l = (nodes[root]["left"] as? Int ?? 0)
        let r = (nodes[root]["right"] as? Int ?? 0)
        root = Int(merge(l, r))
        return result
    }
    func is_empty() -> Bool {
        return (root == NIL)
    }
    func to_sorted_list() -> [Int?] {
        var res: [Int?] = ([] as! [Int?])
        while (!is_empty()) {
            res = (_append(res, Int(pop())) as! [Int?])
        }
        return res
    }
    _ = set_seed(1)
    _ = new_heap()
    _ = insert(2)
    _ = insert(3)
    _ = insert(1)
    _ = insert(5)
    _ = insert(1)
    _ = insert(7)
    print(_p("[" + (to_sorted_list() as! [Int?]).map{ if let s = $0 as? String { "\"" + s.replacingOccurrences(of: "\"", with: "\\\"") + "\"" } else { _p($0) } }.joined(separator: ", ") + "]"))
    _ = new_heap()
    _ = insert(1)
    _ = insert(-1)
    _ = insert(0)
    print(_p("[" + (to_sorted_list() as! [Int?]).map{ if let s = $0 as? String { "\"" + s.replacingOccurrences(of: "\"", with: "\\\"") + "\"" } else { _p($0) } }.joined(separator: ", ") + "]"))
    _ = new_heap()
    _ = insert(3)
    _ = insert(1)
    _ = insert(3)
    _ = insert(7)
    print(_p(Int(pop())))
    print(_p(Int(pop())))
    print(_p(Int(pop())))
    print(_p(Int(pop())))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
