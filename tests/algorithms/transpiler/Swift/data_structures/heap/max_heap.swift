// Generated by Mochi transpiler v0.10.59 on 2025-08-06 23:28:09 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    var heap: [Int?] = ([0] as! [Int?])
    var size: Int = 0
    func swap_up(_ i: Int) {
        let temp = (heap[i] as? Int ?? 0)
        var idx: Int = i
        while ((idx / 2) > 0) {
            if ((heap[idx] as? Int ?? 0) > (heap[(idx / 2)] as? Int ?? 0)) {
                heap = _set(heap, idx, (heap[(idx / 2)] as? Int ?? 0))
                heap = _set(heap, (idx / 2), (temp as! Int))
            }
            idx = Int((idx / 2))
        }
    }
    func insert(_ value: Int) {
        heap = (_append(heap, value) as! [Int?])
        size = Int((size &+ 1))
        _ = swap_up(size)
    }
    func swap_down(_ i: Int) {
        var idx: Int = i
        while (size >= (2 &* idx)) {
            let bigger_child = Int(((((2 &* idx) &+ 1) > size) ? (2 &* idx) : (((heap[(2 &* idx)] as? Int ?? 0) > (heap[((2 &* idx) &+ 1)] as? Int ?? 0)) ? (2 &* idx) : ((2 &* idx) &+ 1))))
            let temp = (heap[idx] as? Int ?? 0)
            if ((heap[idx] as? Int ?? 0) < (heap[bigger_child] as? Int ?? 0)) {
                heap = _set(heap, idx, (heap[bigger_child] as? Int ?? 0))
                heap = _set(heap, bigger_child, (temp as! Int))
            }
            idx = (bigger_child as! Int)
        }
    }
    func shrink() {
        var new_heap: [Int?] = ([] as! [Int?])
        var i: Int = 0
        while (i <= size) {
            new_heap = (_append(new_heap, (heap[i] as? Int ?? 0)) as! [Int?])
            i = Int((i &+ 1))
        }
        heap = (new_heap as! [Int?])
    }
    func pop() -> Int {
        let max_value = (heap[1] as? Int ?? 0)
        heap = _set(heap, 1, (heap[size] as? Int ?? 0))
        size = Int((size &- 1))
        _ = shrink()
        _ = swap_down(1)
        return max_value
    }
    func get_list() -> [Int?] {
        var out: [Int?] = ([] as! [Int?])
        var i: Int = 1
        while (i <= size) {
            out = (_append(out, (heap[i] as? Int ?? 0)) as! [Int?])
            i = Int((i &+ 1))
        }
        return out
    }
    func len() -> Int {
        return size
    }
    _ = insert(6)
    _ = insert(10)
    _ = insert(15)
    _ = insert(12)
    print(_p(Int(pop())))
    print(_p(Int(pop())))
    print(_p("[" + (get_list() as! [Int?]).map{ if let s = $0 as? String { "\"" + s.replacingOccurrences(of: "\"", with: "\\\"") + "\"" } else { _p($0) } }.joined(separator: ", ") + "]"))
    print(_p(Int(len())))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
