// Generated by Mochi transpiler v0.10.61 on 2025-08-08 17:04:09 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return nil
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
struct LinkedList: Codable {
    var next: [Int]
    var head: Int
    init() {
        self.next = []
        self.head = 0
    }
    init(next: [Int], head: Int) {
        self.next = next
        self.head = head
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let NULL = (0 &- 1)
    func empty_list() -> LinkedList {
        return LinkedList(next: ([] as! [Int]), head: NULL)
    }
    func add_node(_ list: LinkedList, _ value: Int) -> LinkedList {
        var nexts: [Int] = list.next
        let new_index = _int(((nexts).count))
        nexts = (_append(nexts, NULL) as! [Int])
        if (list.head == NULL) {
            return LinkedList(next: nexts, head: new_index)
        }
        var last: Int = list.head
        while ((_idx(nexts, last) as? Int ?? 0) != NULL) {
            last = (_idx(nexts, last) as? Int ?? 0)
        }
        var new_nexts: [Int] = ([] as! [Int])
        var i: Int = 0
        while (i < _int(((nexts).count))) {
            if (i == last) {
                new_nexts = (_append(new_nexts, new_index) as! [Int])
            } else {
                new_nexts = (_append(new_nexts, (_idx(nexts, i) as? Int ?? 0)) as! [Int])
            }
            i = _int((i &+ 1))
        }
        return LinkedList(next: new_nexts, head: list.head)
    }
    func set_next(_ list: LinkedList, _ index: Int, _ next_index: Int) -> LinkedList {
        var nexts: [Int] = list.next
        var new_nexts: [Int] = ([] as! [Int])
        var i: Int = 0
        while (i < _int(((nexts).count))) {
            if (i == index) {
                new_nexts = (_append(new_nexts, next_index) as! [Int])
            } else {
                new_nexts = (_append(new_nexts, (_idx(nexts, i) as? Int ?? 0)) as! [Int])
            }
            i = _int((i &+ 1))
        }
        return LinkedList(next: new_nexts, head: list.head)
    }
    func detect_cycle(_ list: LinkedList) -> Bool {
        if (list.head == NULL) {
            return false
        }
        let nexts: [Int] = list.next
        var slow: Int = list.head
        var fast: Int = list.head
        while ((fast != NULL) && ((_idx(nexts, fast) as? Int ?? 0) != NULL)) {
            slow = (_idx(nexts, slow) as? Int ?? 0)
            fast = (_idx(nexts, (_idx(nexts, fast) as? Int ?? 0)) as? Int ?? 0)
            if (slow == fast) {
                return true
            }
        }
        return false
    }
    func main() {
        var ll: LinkedList = empty_list()
        ll = (add_node((ll as! LinkedList), 1) as! LinkedList)
        ll = (add_node((ll as! LinkedList), 2) as! LinkedList)
        ll = (add_node((ll as! LinkedList), 3) as! LinkedList)
        ll = (add_node((ll as! LinkedList), 4) as! LinkedList)
        ll = (set_next((ll as! LinkedList), 3, 1) as! LinkedList)
        print(_p(detect_cycle((ll as! LinkedList))))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
