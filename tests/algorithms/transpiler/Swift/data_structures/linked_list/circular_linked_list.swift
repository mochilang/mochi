// Generated by Mochi transpiler v0.10.61 on 2025-08-08 16:32:13 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return nil
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
struct CircularLinkedList: Codable {
    var data: [Int]
    init() {
        self.data = []
    }
    init(data: [Int]) {
        self.data = data
    }
}
struct DeleteResult: Codable {
    var list: CircularLinkedList
    var value: Int
    init() {
        self.list = CircularLinkedList()
        self.value = 0
    }
    init(list: CircularLinkedList, value: Int) {
        self.list = list
        self.value = value
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func empty_list() -> CircularLinkedList {
        return CircularLinkedList(data: [])
    }
    func length(_ list: CircularLinkedList) -> Int {
        return _int(((list.data).count))
    }
    func is_empty(_ list: CircularLinkedList) -> Bool {
        return (_int(((list.data).count)) == 0)
    }
    func to_string(_ list: CircularLinkedList) -> String {
        if (_int(((list.data).count)) == 0) {
            return ""
        }
        var s: String = _p((_idx(list.data, 0) as? Int ?? 0))
        var i: Int = 1
        while (i < _int(((list.data).count))) {
            s = (((s + "->") + _p((_idx(list.data, i) as? Int ?? 0))) as! String)
            i = _int((i &+ 1))
        }
        return s
    }
    func insert_nth(_ list: CircularLinkedList, _ index: Int, _ value: Int) -> CircularLinkedList {
        if ((index < 0) || (index > _int(((list.data).count)))) {
            _ = fatalError("index out of range")
        }
        var res: [Int] = ([] as! [Int])
        var i: Int = 0
        while (i < index) {
            res = (_append(res, (_idx(list.data, i) as? Int ?? 0)) as! [Int])
            i = _int((i &+ 1))
        }
        res = (_append(res, value) as! [Int])
        while (i < _int(((list.data).count))) {
            res = (_append(res, (_idx(list.data, i) as? Int ?? 0)) as! [Int])
            i = _int((i &+ 1))
        }
        return CircularLinkedList(data: res)
    }
    func insert_head(_ list: CircularLinkedList, _ value: Int) -> CircularLinkedList {
        return insert_nth((list as! CircularLinkedList), 0, value)
    }
    func insert_tail(_ list: CircularLinkedList, _ value: Int) -> CircularLinkedList {
        return insert_nth((list as! CircularLinkedList), _int(((list.data).count)), value)
    }
    func delete_nth(_ list: CircularLinkedList, _ index: Int) -> DeleteResult {
        if ((index < 0) || (index >= _int(((list.data).count)))) {
            _ = fatalError("index out of range")
        }
        var res: [Int] = ([] as! [Int])
        var i: Int = 0
        var val: Int = 0
        while (i < _int(((list.data).count))) {
            if (i == index) {
                val = (_idx(list.data, i) as? Int ?? 0)
            } else {
                res = (_append(res, (_idx(list.data, i) as? Int ?? 0)) as! [Int])
            }
            i = _int((i &+ 1))
        }
        return DeleteResult(list: CircularLinkedList(data: res), value: val)
    }
    func delete_front(_ list: CircularLinkedList) -> DeleteResult {
        return delete_nth((list as! CircularLinkedList), 0)
    }
    func delete_tail(_ list: CircularLinkedList) -> DeleteResult {
        return delete_nth((list as! CircularLinkedList), (_int(((list.data).count)) &- 1))
    }
    func main() {
        var cll: CircularLinkedList = empty_list()
        var i: Int = 0
        while (i < 5) {
            cll = (insert_tail((cll as! CircularLinkedList), (i &+ 1)) as! CircularLinkedList)
            i = _int((i &+ 1))
        }
        print(_p(to_string((cll as! CircularLinkedList))))
        cll = (insert_tail((cll as! CircularLinkedList), 6) as! CircularLinkedList)
        print(_p(to_string((cll as! CircularLinkedList))))
        cll = (insert_head((cll as! CircularLinkedList), 0) as! CircularLinkedList)
        print(_p(to_string((cll as! CircularLinkedList))))
        var res: DeleteResult = delete_front((cll as! CircularLinkedList))
        cll = (res.list as! CircularLinkedList)
        print(_p(res.value))
        res = (delete_tail((cll as! CircularLinkedList)) as! DeleteResult)
        cll = (res.list as! CircularLinkedList)
        print(_p(res.value))
        res = (delete_nth((cll as! CircularLinkedList), 2) as! DeleteResult)
        cll = (res.list as! CircularLinkedList)
        print(_p(res.value))
        print(_p(to_string((cll as! CircularLinkedList))))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
