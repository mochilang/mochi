// Generated by Mochi transpiler v0.10.61 on 2025-08-08 17:04:07 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return nil
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
struct Node: Codable {
    var data: Int
    var prev_index: Int
    var next_index: Int
    init() {
        self.data = 0
        self.prev_index = 0
        self.next_index = 0
    }
    init(data: Int, prev_index: Int, next_index: Int) {
        self.data = data
        self.prev_index = prev_index
        self.next_index = next_index
    }
}
struct LinkedList: Codable {
    var nodes: [Node]
    var head_idx: Int
    var tail_idx: Int
    init() {
        self.nodes = []
        self.head_idx = 0
        self.tail_idx = 0
    }
    init(nodes: [Node], head_idx: Int, tail_idx: Int) {
        self.nodes = nodes
        self.head_idx = head_idx
        self.tail_idx = tail_idx
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func empty_list() -> LinkedList {
        return LinkedList(nodes: [], head_idx: -1, tail_idx: -1)
    }
    func get_head_data(_ ll: LinkedList) -> Int {
        if (ll.head_idx == _int(-1)) {
            return -1
        }
        let node = (_idx(ll.nodes, ll.head_idx) as! Node)
        return node.data
    }
    func get_tail_data(_ ll: LinkedList) -> Int {
        if (ll.tail_idx == _int(-1)) {
            return -1
        }
        let node = (_idx(ll.nodes, ll.tail_idx) as! Node)
        return node.data
    }
    func insert_before_node(_ ll: inout LinkedList, _ idx: Int, _ new_idx: Int) {
        var nodes: [Node] = ll.nodes
        var new_node: Node = (_idx(nodes, new_idx) as! Node)
        new_node.next_index = Int(idx)
        var node: Node = (_idx(nodes, idx) as! Node)
        let p = node.prev_index
        new_node.prev_index = Int(p)
        nodes = _set(nodes, new_idx, (new_node as! Node))
        if (p == _int(-1)) {
            ll.head_idx = Int(new_idx)
        } else {
            var prev_node: Node = (_idx(nodes, p) as! Node)
            prev_node.next_index = Int(new_idx)
            nodes = _set(nodes, p, (prev_node as! Node))
        }
        node.prev_index = Int(new_idx)
        nodes = _set(nodes, idx, (node as! Node))
        ll.nodes = (nodes as! [Node])
    }
    func insert_after_node(_ ll: inout LinkedList, _ idx: Int, _ new_idx: Int) {
        var nodes: [Node] = ll.nodes
        var new_node: Node = (_idx(nodes, new_idx) as! Node)
        new_node.prev_index = Int(idx)
        var node: Node = (_idx(nodes, idx) as! Node)
        let nxt = node.next_index
        new_node.next_index = Int(nxt)
        nodes = _set(nodes, new_idx, (new_node as! Node))
        if (nxt == _int(-1)) {
            ll.tail_idx = Int(new_idx)
        } else {
            var next_node: Node = (_idx(nodes, nxt) as! Node)
            next_node.prev_index = Int(new_idx)
            nodes = _set(nodes, nxt, (next_node as! Node))
        }
        node.next_index = Int(new_idx)
        nodes = _set(nodes, idx, (node as! Node))
        ll.nodes = (nodes as! [Node])
    }
    func set_head(_ ll: inout LinkedList, _ idx: Int) {
        if (ll.head_idx == _int(-1)) {
            ll.head_idx = Int(idx)
            ll.tail_idx = Int(idx)
        } else {
            _ = insert_before_node(&ll, ll.head_idx, idx)
        }
    }
    func set_tail(_ ll: inout LinkedList, _ idx: Int) {
        if (ll.tail_idx == _int(-1)) {
            ll.head_idx = Int(idx)
            ll.tail_idx = Int(idx)
        } else {
            _ = insert_after_node(&ll, ll.tail_idx, idx)
        }
    }
    func insert(_ ll: inout LinkedList, _ value: Int) {
        var nodes: [Node] = ll.nodes
        nodes = (_append(nodes, Node(data: value, prev_index: -1, next_index: -1)) as! [Node])
        let idx = (_int(((nodes).count)) &- 1)
        ll.nodes = (nodes as! [Node])
        if (ll.head_idx == _int(-1)) {
            ll.head_idx = Int(idx)
            ll.tail_idx = Int(idx)
        } else {
            _ = insert_after_node(&ll, ll.tail_idx, idx)
        }
    }
    func insert_at_position(_ ll: inout LinkedList, _ position: Int, _ value: Int) {
        var current: Int = ll.head_idx
        var current_pos: Int = 1
        while (current != _int(-1)) {
            if (current_pos == position) {
                var nodes: [Node] = ll.nodes
                nodes = (_append(nodes, Node(data: value, prev_index: -1, next_index: -1)) as! [Node])
                let new_idx = (_int(((nodes).count)) &- 1)
                ll.nodes = (nodes as! [Node])
                _ = insert_before_node(&ll, current, new_idx)
                return
            }
            let node = (_idx(ll.nodes, current) as! Node)
            current = _int(node.next_index)
            current_pos = _int((current_pos &+ 1))
        }
        _ = insert(&ll, value)
    }
    func get_node(_ ll: LinkedList, _ item: Int) -> Int {
        var current: Int = ll.head_idx
        while (current != _int(-1)) {
            let node = (_idx(ll.nodes, current) as! Node)
            if (node.data == item) {
                return current
            }
            current = _int(node.next_index)
        }
        return -1
    }
    func remove_node_pointers(_ ll: inout LinkedList, _ idx: Int) {
        var nodes: [Node] = ll.nodes
        var node: Node = (_idx(nodes, idx) as! Node)
        let nxt = node.next_index
        let p = node.prev_index
        if (nxt != _int(-1)) {
            var nxt_node: Node = (_idx(nodes, nxt) as! Node)
            nxt_node.prev_index = Int(p)
            nodes = _set(nodes, nxt, (nxt_node as! Node))
        }
        if (p != _int(-1)) {
            var prev_node: Node = (_idx(nodes, p) as! Node)
            prev_node.next_index = Int(nxt)
            nodes = _set(nodes, p, (prev_node as! Node))
        }
        node.next_index = _int(-1)
        node.prev_index = _int(-1)
        nodes = _set(nodes, idx, (node as! Node))
        ll.nodes = (nodes as! [Node])
    }
    func delete_value(_ ll: inout LinkedList, _ value: Int) {
        let idx = _int(get_node((ll as! LinkedList), value))
        if (idx == _int(-1)) {
            return
        }
        if (idx == ll.head_idx) {
            let node = (_idx(ll.nodes, idx) as! Node)
            ll.head_idx = _int(node.next_index)
        }
        if (idx == ll.tail_idx) {
            let node = (_idx(ll.nodes, idx) as! Node)
            ll.tail_idx = _int(node.prev_index)
        }
        _ = remove_node_pointers(&ll, idx)
    }
    func contains(_ ll: LinkedList, _ value: Int) -> Bool {
        return (_int(get_node((ll as! LinkedList), value)) != _int(-1))
    }
    func is_empty(_ ll: LinkedList) -> Bool {
        return (ll.head_idx == _int(-1))
    }
    func to_string(_ ll: LinkedList) -> String {
        var res: String = ""
        var first: Bool = true
        var current: Int = ll.head_idx
        while (current != _int(-1)) {
            let node = (_idx(ll.nodes, current) as! Node)
            let val = _p(node.data)
            if first {
                res = (val as! String)
                first = false
            } else {
                res = (((res + " ") + val) as! String)
            }
            current = _int(node.next_index)
        }
        return res
    }
    func print_list(_ ll: LinkedList) {
        var current: Int = ll.head_idx
        while (current != _int(-1)) {
            let node = (_idx(ll.nodes, current) as! Node)
            print(_p(_p(node.data)))
            current = _int(node.next_index)
        }
    }
    func main() {
        var ll: LinkedList = empty_list()
        print(_p(_p(_int(get_head_data((ll as! LinkedList))))))
        print(_p(_p(_int(get_tail_data((ll as! LinkedList))))))
        print(_p(_p(is_empty((ll as! LinkedList)))))
        _ = insert(&ll, 10)
        print(_p(_p(_int(get_head_data((ll as! LinkedList))))))
        print(_p(_p(_int(get_tail_data((ll as! LinkedList))))))
        _ = insert_at_position(&ll, 3, 20)
        print(_p(_p(_int(get_head_data((ll as! LinkedList))))))
        print(_p(_p(_int(get_tail_data((ll as! LinkedList))))))
        var nodes: [Node] = ll.nodes
        nodes = (_append(nodes, Node(data: 1000, prev_index: -1, next_index: -1)) as! [Node])
        let idx_head = (_int(((nodes).count)) &- 1)
        ll.nodes = (nodes as! [Node])
        _ = set_head(&ll, idx_head)
        nodes = (ll.nodes as! [Node])
        nodes = (_append(nodes, Node(data: 2000, prev_index: -1, next_index: -1)) as! [Node])
        let idx_tail = (_int(((nodes).count)) &- 1)
        ll.nodes = (nodes as! [Node])
        _ = set_tail(&ll, idx_tail)
        _ = print_list((ll as! LinkedList))
        print(_p(_p(is_empty((ll as! LinkedList)))))
        _ = print_list((ll as! LinkedList))
        print(_p(_p(contains((ll as! LinkedList), 10))))
        _ = delete_value(&ll, 10)
        print(_p(_p(contains((ll as! LinkedList), 10))))
        _ = delete_value(&ll, 2000)
        print(_p(_p(_int(get_tail_data((ll as! LinkedList))))))
        _ = delete_value(&ll, 1000)
        print(_p(_p(_int(get_tail_data((ll as! LinkedList))))))
        print(_p(_p(_int(get_head_data((ll as! LinkedList))))))
        _ = print_list((ll as! LinkedList))
        _ = delete_value(&ll, 20)
        _ = print_list((ll as! LinkedList))
        var i: Int = 1
        while (i < 10) {
            _ = insert(&ll, i)
            i = _int((i &+ 1))
        }
        _ = print_list((ll as! LinkedList))
        var ll2: LinkedList = empty_list()
        _ = insert_at_position(&ll2, 1, 10)
        print(_p(to_string((ll2 as! LinkedList))))
        _ = insert_at_position(&ll2, 2, 20)
        print(_p(to_string((ll2 as! LinkedList))))
        _ = insert_at_position(&ll2, 1, 30)
        print(_p(to_string((ll2 as! LinkedList))))
        _ = insert_at_position(&ll2, 3, 40)
        print(_p(to_string((ll2 as! LinkedList))))
        _ = insert_at_position(&ll2, 5, 50)
        print(_p(to_string((ll2 as! LinkedList))))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
