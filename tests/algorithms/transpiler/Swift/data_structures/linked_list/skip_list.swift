// Generated by Mochi transpiler v0.10.61 on 2025-08-08 17:09:55 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return nil
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let NIL = (0 &- 1)
    let MAX_LEVEL = 6
    let P: Double = 0.5
    var seed: Int = 1
    func random() -> Double {
        seed = _int(((_int(((seed &* 13) &+ 7)) % 100 + 100) % 100))
        return (Double(seed) / 100.0)
    }
    func random_level() -> Int {
        var lvl: Int = 1
        while ((Double(random()) < P) && (lvl < MAX_LEVEL)) {
            lvl = _int((lvl &+ 1))
        }
        return lvl
    }
    func empty_forward() -> [Int] {
        var f: [Int] = ([] as! [Int])
        var i: Int = 0
        while (i < MAX_LEVEL) {
            f = (_append(f, NIL) as! [Int])
            i = _int((i &+ 1))
        }
        return f
    }
    var node_keys: [Int] = ([] as! [Int])
    var node_vals: [Int] = ([] as! [Int])
    var node_forwards: [[Int]] = ([] as! [[Int]])
    var level: Int = 1
    func `init`() {
        node_keys = ([-1] as! [Int])
        node_vals = ([0] as! [Int])
        node_forwards = ([(empty_forward() as! [Int])] as! [[Int]])
        level = 1
    }
    func insert(_ key: Int, _ value: Int) {
        var update: [Int] = ([] as! [Int])
        var i: Int = 0
        while (i < MAX_LEVEL) {
            update = (_append(update, 0) as! [Int])
            i = _int((i &+ 1))
        }
        var x: Int = 0
        i = _int((level &- 1))
        while (i >= 0) {
            while (((_idx(_idx(node_forwards, x)!, i) as? Int ?? 0) != NIL) && ((_idx(node_keys, (_idx(_idx(node_forwards, x)!, i) as? Int ?? 0)) as? Int ?? 0) < key)) {
                x = (_idx(_idx(node_forwards, x)!, i) as? Int ?? 0)
            }
            update = _set(update, i, Int(x))
            i = _int((i &- 1))
        }
        x = (_idx(_idx(node_forwards, x)!, 0) as? Int ?? 0)
        if ((x != NIL) && ((_idx(node_keys, x) as? Int ?? 0) == key)) {
            node_vals = _set(node_vals, x, Int(value))
            return
        }
        let lvl = _int(random_level())
        if (lvl > level) {
            var j: Int = level
            while (j < lvl) {
                update = _set(update, j, 0)
                j = _int((j &+ 1))
            }
            level = Int(lvl)
        }
        node_keys = (_append(node_keys, key) as! [Int])
        node_vals = (_append(node_vals, value) as! [Int])
        var forwards: [Int] = (empty_forward() as! [Int])
        let idx = (_int(((node_keys).count)) &- 1)
        i = 0
        while (i < lvl) {
            forwards = _set(forwards, i, (_idx(_idx(node_forwards, (_idx(update, i) as? Int ?? 0))!, i) as? Int ?? 0))
            var _tmp3 = (_idx(node_forwards, (_idx(update, i) as? Int ?? 0)) as! [Int])
            _tmp3 = _set(_tmp3, i, Int(idx))
            node_forwards = _set(node_forwards, (_idx(update, i) as? Int ?? 0), (_tmp3 as! [Int]))
            i = _int((i &+ 1))
        }
        node_forwards = (_append(node_forwards, forwards) as! [[Int]])
    }
    func find(_ key: Int) -> Int {
        var x: Int = 0
        var i: Int = (level &- 1)
        while (i >= 0) {
            while (((_idx(_idx(node_forwards, x)!, i) as? Int ?? 0) != NIL) && ((_idx(node_keys, (_idx(_idx(node_forwards, x)!, i) as? Int ?? 0)) as? Int ?? 0) < key)) {
                x = (_idx(_idx(node_forwards, x)!, i) as? Int ?? 0)
            }
            i = _int((i &- 1))
        }
        x = (_idx(_idx(node_forwards, x)!, 0) as? Int ?? 0)
        if ((x != NIL) && ((_idx(node_keys, x) as? Int ?? 0) == key)) {
            return (_idx(node_vals, x) as? Int ?? 0)
        }
        return -1
    }
    func delete(_ key: Int) {
        var update: [Int] = ([] as! [Int])
        var i: Int = 0
        while (i < MAX_LEVEL) {
            update = (_append(update, 0) as! [Int])
            i = _int((i &+ 1))
        }
        var x: Int = 0
        i = _int((level &- 1))
        while (i >= 0) {
            while (((_idx(_idx(node_forwards, x)!, i) as? Int ?? 0) != NIL) && ((_idx(node_keys, (_idx(_idx(node_forwards, x)!, i) as? Int ?? 0)) as? Int ?? 0) < key)) {
                x = (_idx(_idx(node_forwards, x)!, i) as? Int ?? 0)
            }
            update = _set(update, i, Int(x))
            i = _int((i &- 1))
        }
        x = (_idx(_idx(node_forwards, x)!, 0) as? Int ?? 0)
        if ((x == NIL) || ((_idx(node_keys, x) as? Int ?? 0) != key)) {
            return
        }
        i = 0
        while (i < level) {
            if ((_idx(_idx(node_forwards, (_idx(update, i) as? Int ?? 0))!, i) as? Int ?? 0) == x) {
                var _tmp4 = (_idx(node_forwards, (_idx(update, i) as? Int ?? 0)) as! [Int])
                _tmp4 = _set(_tmp4, i, (_idx(_idx(node_forwards, x)!, i) as? Int ?? 0))
                node_forwards = _set(node_forwards, (_idx(update, i) as? Int ?? 0), (_tmp4 as! [Int]))
            }
            i = _int((i &+ 1))
        }
        while ((level > 1) && ((_idx(_idx(node_forwards, 0)!, (level &- 1)) as? Int ?? 0) == NIL)) {
            level = _int((level &- 1))
        }
    }
    func to_string() -> String {
        var s: String = ""
        var x: Int = (_idx(_idx(node_forwards, 0)!, 0) as? Int ?? 0)
        while (x != NIL) {
            if (s != "") {
                s = ((s + " -> ") as! String)
            }
            s = ((((s + _p((_idx(node_keys, x) as? Int ?? 0))) + ":") + _p((_idx(node_vals, x) as? Int ?? 0))) as! String)
            x = (_idx(_idx(node_forwards, x)!, 0) as? Int ?? 0)
        }
        return s
    }
    func main() {
        _ = `init`()
        _ = insert(2, 2)
        _ = insert(4, 4)
        _ = insert(6, 4)
        _ = insert(4, 5)
        _ = insert(8, 4)
        _ = insert(9, 4)
        _ = delete(4)
        print(_p(to_string()))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
