// Generated by Mochi transpiler v0.10.61 on 2025-08-08 17:07:00 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return nil
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
struct Node: Codable {
    var data: Int
    var next: Int
    init() {
        self.data = 0
        self.next = 0
    }
    init(data: Int, next: Int) {
        self.data = data
        self.next = next
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func has_loop(_ nodes: [Node], _ head: Int) -> Bool {
        var slow: Int = head
        var fast: Int = head
        while (fast != (0 &- 1)) {
            let fast_node1 = (_idx(nodes, fast) as! Node)
            if (fast_node1.next == (0 &- 1)) {
                return false
            }
            let fast_node2 = (_idx(nodes, fast_node1.next) as! Node)
            if (fast_node2.next == (0 &- 1)) {
                return false
            }
            let slow_node = (_idx(nodes, slow) as! Node)
            slow = _int(slow_node.next)
            fast = _int(fast_node2.next)
            if (slow == fast) {
                return true
            }
        }
        return false
    }
    func make_nodes(_ values: [Int]) -> [Node] {
        var nodes: [Node] = ([] as! [Node])
        var i: Int = 0
        while (i < _int(((values).count))) {
            let next_idx = _int(((i == (_int(((values).count)) &- 1)) ? (0 &- 1) : (i &+ 1)))
            nodes = (_append(nodes, Node(data: (_idx(values, i) as? Int ?? 0), next: next_idx)) as! [Node])
            i = _int((i &+ 1))
        }
        return nodes
    }
    func main() {
        var list1: [Node] = (make_nodes(([1, 2, 3, 4] as! [Int])) as! [Node])
        print(_p(_p(has_loop((list1 as! [Node]), 0))))
        var _tmp2 = (_idx(list1, 3) as! Node)
        _tmp2.next = 1
        list1 = _set(list1, 3, (_tmp2 as! Node))
        print(_p(_p(has_loop((list1 as! [Node]), 0))))
        let list2: [Node] = (make_nodes(([5, 6, 5, 6] as! [Int])) as! [Node])
        print(_p(_p(has_loop((list2 as! [Node]), 0))))
        let list3: [Node] = (make_nodes(([1] as! [Int])) as! [Node])
        print(_p(_p(has_loop((list3 as! [Node]), 0))))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
