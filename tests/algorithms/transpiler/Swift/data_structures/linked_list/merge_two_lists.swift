// Generated by Mochi transpiler v0.10.61 on 2025-08-08 17:07:10 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return nil
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
struct SortedLinkedList: Codable {
    var values: [Int]
    init() {
        self.values = []
    }
    init(values: [Int]) {
        self.values = values
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func sort_list(_ nums: [Int]) -> [Int] {
        var arr: [Int] = ([] as! [Int])
        var i: Int = 0
        while (i < _int(((nums).count))) {
            arr = (_append(arr, (_idx(nums, i) as? Int ?? 0)) as! [Int])
            i = _int((i &+ 1))
        }
        var j: Int = 0
        while (j < _int(((arr).count))) {
            var k: Int = (j &+ 1)
            while (k < _int(((arr).count))) {
                if ((_idx(arr, k) as? Int ?? 0) < (_idx(arr, j) as? Int ?? 0)) {
                    let tmp = (_idx(arr, j) as? Int ?? 0)
                    arr = _set(arr, j, (_idx(arr, k) as? Int ?? 0))
                    arr = _set(arr, k, Int(tmp))
                }
                k = _int((k &+ 1))
            }
            j = _int((j &+ 1))
        }
        return arr
    }
    func make_sorted_linked_list(_ ints: [Int]) -> SortedLinkedList {
        return SortedLinkedList(values: (sort_list((ints as! [Int])) as! [Int]))
    }
    func len_sll(_ sll: SortedLinkedList) -> Int {
        return _int(((sll.values).count))
    }
    func str_sll(_ sll: SortedLinkedList) -> String {
        var res: String = ""
        var i: Int = 0
        while (i < _int(((sll.values).count))) {
            res = ((res + _p((_idx(sll.values, i) as? Int ?? 0))) as! String)
            if ((i &+ 1) < _int(((sll.values).count))) {
                res = ((res + " -> ") as! String)
            }
            i = _int((i &+ 1))
        }
        return res
    }
    func merge_lists(_ a: SortedLinkedList, _ b: SortedLinkedList) -> SortedLinkedList {
        var combined: [Int] = ([] as! [Int])
        var i: Int = 0
        while (i < _int(((a.values).count))) {
            combined = (_append(combined, (_idx(a.values, i) as? Int ?? 0)) as! [Int])
            i = _int((i &+ 1))
        }
        i = 0
        while (i < _int(((b.values).count))) {
            combined = (_append(combined, (_idx(b.values, i) as? Int ?? 0)) as! [Int])
            i = _int((i &+ 1))
        }
        return make_sorted_linked_list((combined as! [Int]))
    }
    func main() {
        let test_data_odd: [Int] = ([3, 9, -11, 0, 7, 5, 1, -1] as! [Int])
        let test_data_even: [Int] = ([4, 6, 2, 0, 8, 10, 3, -2] as! [Int])
        let sll_one = make_sorted_linked_list((test_data_odd as! [Int]))
        let sll_two = make_sorted_linked_list((test_data_even as! [Int]))
        let merged = merge_lists((sll_one as! SortedLinkedList), (sll_two as! SortedLinkedList))
        print(_p(_p(_int(len_sll((merged as! SortedLinkedList))))))
        print(_p(String(describing: str_sll((merged as! SortedLinkedList)))))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
