// Generated by Mochi transpiler v0.10.61 on 2025-08-08 17:07:21 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return nil
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func list_to_string(_ xs: [Int]) -> String {
        if (_int(((xs).count)) == 0) {
            return ""
        }
        var s: String = _p((_idx(xs, 0) as? Int ?? 0))
        var i: Int = 1
        while (i < _int(((xs).count))) {
            s = (((s + "->") + _p((_idx(xs, i) as? Int ?? 0))) as! String)
            i = _int((i &+ 1))
        }
        return s
    }
    func insert_node(_ xs: [Int], _ data: Int) -> [Int] {
        return (_append(xs, data) as! [Int])
    }
    func rotate_to_the_right(_ xs: [Int], _ places: Int) -> [Int] {
        if (_int(((xs).count)) == 0) {
            _ = fatalError("The linked list is empty.")
        }
        let n = _int(((xs).count))
        var k: Int = ((places % n + n) % n)
        if (k == 0) {
            return xs
        }
        let split = (n &- k)
        var res: [Int] = ([] as! [Int])
        var i: Int = split
        while (i < n) {
            res = (_append(res, (_idx(xs, i) as? Int ?? 0)) as! [Int])
            i = _int((i &+ 1))
        }
        var j: Int = 0
        while (j < split) {
            res = (_append(res, (_idx(xs, j) as? Int ?? 0)) as! [Int])
            j = _int((j &+ 1))
        }
        return res
    }
    func main() {
        var head: [Int] = ([] as! [Int])
        head = (insert_node((head as! [Int]), 5) as! [Int])
        head = (insert_node((head as! [Int]), 1) as! [Int])
        head = (insert_node((head as! [Int]), 2) as! [Int])
        head = (insert_node((head as! [Int]), 4) as! [Int])
        head = (insert_node((head as! [Int]), 3) as! [Int])
        print(_p(("Original list: " + String(describing: list_to_string((head as! [Int]))))))
        let places = 3
        let new_head: [Int] = (rotate_to_the_right((head as! [Int]), places) as! [Int])
        print(_p(((("After " + _p(places)) + " iterations: ") + String(describing: list_to_string((new_head as! [Int]))))))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
