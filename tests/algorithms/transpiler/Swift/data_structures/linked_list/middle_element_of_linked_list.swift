// Generated by Mochi transpiler v0.10.61 on 2025-08-08 17:07:13 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return nil
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
struct List: Codable {
    var data: [Int]
    init() {
        self.data = []
    }
    init(data: [Int]) {
        self.data = data
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func empty_list() -> List {
        return List(data: [])
    }
    func push(_ lst: List, _ value: Int) -> List {
        var res: [Int] = ([value] as! [Int])
        var i: Int = 0
        while (i < _int(((lst.data).count))) {
            res = (_append(res, (_idx(lst.data, i) as? Int ?? 0)) as! [Int])
            i = _int((i &+ 1))
        }
        return List(data: res)
    }
    func middle_element(_ lst: List) -> Int {
        let n = _int(((lst.data).count))
        if (n == 0) {
            print(_p("No element found."))
            return 0
        }
        var slow: Int = 0
        var fast: Int = 0
        while ((fast &+ 1) < n) {
            fast = _int((fast &+ 2))
            slow = _int((slow &+ 1))
        }
        return (_idx(lst.data, slow) as? Int ?? 0)
    }
    func main() {
        var lst: List = empty_list()
        _ = _int(middle_element((lst as! List)))
        lst = (push((lst as! List), 5) as! List)
        print(_p(5))
        lst = (push((lst as! List), 6) as! List)
        print(_p(6))
        lst = (push((lst as! List), 8) as! List)
        print(_p(8))
        lst = (push((lst as! List), 8) as! List)
        print(_p(8))
        lst = (push((lst as! List), 10) as! List)
        print(_p(10))
        lst = (push((lst as! List), 12) as! List)
        print(_p(12))
        lst = (push((lst as! List), 17) as! List)
        print(_p(17))
        lst = (push((lst as! List), 7) as! List)
        print(_p(7))
        lst = (push((lst as! List), 3) as! List)
        print(_p(3))
        lst = (push((lst as! List), 20) as! List)
        print(_p(20))
        lst = (push((lst as! List), -20) as! List)
        print(_p(-20))
        print(_p(_int(middle_element((lst as! List)))))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
