// Generated by Mochi transpiler v0.10.61 on 2025-08-08 17:10:04 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return nil
}
func _concat<T>(_ a: [T], _ b: [T]) -> [T] {
    var out = a
    out.append(contentsOf: b)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
struct LinkedList: Codable {
    var data: [Int]
    init() {
        self.data = []
    }
    init(data: [Int]) {
        self.data = data
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func empty_list() -> LinkedList {
        return LinkedList(data: [])
    }
    func push(_ list: LinkedList, _ value: Int) -> LinkedList {
        var res: [Int] = ([value] as! [Int])
        res = ((_concat(res, list.data) as! [Any?]) as! [Int])
        return LinkedList(data: res)
    }
    func swap_nodes(_ list: LinkedList, _ v1: Int, _ v2: Int) -> LinkedList {
        if (v1 == v2) {
            return list
        }
        var idx1: Int = (0 &- 1)
        var idx2: Int = (0 &- 1)
        var i: Int = 0
        while (i < _int(((list.data).count))) {
            if (((_idx(list.data, i) as? Int ?? 0) == v1) && (idx1 == (0 &- 1))) {
                idx1 = Int(i)
            }
            if (((_idx(list.data, i) as? Int ?? 0) == v2) && (idx2 == (0 &- 1))) {
                idx2 = Int(i)
            }
            i = _int((i &+ 1))
        }
        if ((idx1 == (0 &- 1)) || (idx2 == (0 &- 1))) {
            return list
        }
        var res: [Int] = list.data
        let temp = (_idx(res, idx1) as? Int ?? 0)
        res = _set(res, idx1, (_idx(res, idx2) as? Int ?? 0))
        res = _set(res, idx2, Int(temp))
        return LinkedList(data: res)
    }
    func to_string(_ list: LinkedList) -> String {
        return "[" + list.data.map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"
    }
    func main() {
        var ll: LinkedList = empty_list()
        var i: Int = 5
        while (i > 0) {
            ll = (push((ll as! LinkedList), i) as! LinkedList)
            i = _int((i &- 1))
        }
        print(_p(("Original Linked List: " + to_string((ll as! LinkedList)))))
        ll = (swap_nodes((ll as! LinkedList), 1, 4) as! LinkedList)
        print(_p(("Modified Linked List: " + to_string((ll as! LinkedList)))))
        print(_p("After swapping the nodes whose data is 1 and 4."))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
