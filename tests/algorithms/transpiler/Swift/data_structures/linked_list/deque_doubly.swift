// Generated by Mochi transpiler v0.10.61 on 2025-08-08 16:32:20 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return nil
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
struct Node: Codable {
    var data: String
    var prev: Int
    var next: Int
    init() {
        self.data = ""
        self.prev = 0
        self.next = 0
    }
    init(data: String, prev: Int, next: Int) {
        self.data = data
        self.prev = prev
        self.next = next
    }
}
struct LinkedDeque: Codable {
    var nodes: [Node]
    var header: Int
    var trailer: Int
    var size: Int
    init() {
        self.nodes = []
        self.header = 0
        self.trailer = 0
        self.size = 0
    }
    init(nodes: [Node], header: Int, trailer: Int, size: Int) {
        self.nodes = nodes
        self.header = header
        self.trailer = trailer
        self.size = size
    }
}
struct DeleteResult: Codable {
    var deque: LinkedDeque
    var value: String
    init() {
        self.deque = LinkedDeque()
        self.value = ""
    }
    init(deque: LinkedDeque, value: String) {
        self.deque = deque
        self.value = value
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func new_deque() -> LinkedDeque {
        var nodes: [Node] = ([] as! [Node])
        nodes = (_append(nodes, Node(data: "", prev: -1, next: 1)) as! [Node])
        nodes = (_append(nodes, Node(data: "", prev: 0, next: -1)) as! [Node])
        return LinkedDeque(nodes: nodes, header: 0, trailer: 1, size: 0)
    }
    func is_empty(_ d: LinkedDeque) -> Bool {
        return (d.size == 0)
    }
    func front(_ d: LinkedDeque) -> String {
        if is_empty((d as! LinkedDeque)) {
            _ = fatalError("List is empty")
        }
        let head = (_idx(d.nodes, d.header) as! Node)
        let idx = head.next
        let node = (_idx(d.nodes, idx) as! Node)
        return node.data
    }
    func back(_ d: LinkedDeque) -> String {
        if is_empty((d as! LinkedDeque)) {
            _ = fatalError("List is empty")
        }
        let tail = (_idx(d.nodes, d.trailer) as! Node)
        let idx = tail.prev
        let node = (_idx(d.nodes, idx) as! Node)
        return node.data
    }
    func insert(_ d: inout LinkedDeque, _ pred: Int, _ value: String, _ succ: Int) -> LinkedDeque {
        var nodes: [Node] = d.nodes
        let new_idx = _int(((nodes).count))
        nodes = (_append(nodes, Node(data: value, prev: pred, next: succ)) as! [Node])
        var pred_node: Node = (_idx(nodes, pred) as! Node)
        pred_node.next = Int(new_idx)
        nodes = _set(nodes, pred, (pred_node as! Node))
        var succ_node: Node = (_idx(nodes, succ) as! Node)
        succ_node.prev = Int(new_idx)
        nodes = _set(nodes, succ, (succ_node as! Node))
        d.nodes = (nodes as! [Node])
        d.size = _int((d.size &+ 1))
        return d
    }
    func delete(_ d: inout LinkedDeque, _ idx: Int) -> DeleteResult {
        var nodes: [Node] = d.nodes
        let node = (_idx(nodes, idx) as! Node)
        let pred = node.prev
        let succ = node.next
        var pred_node: Node = (_idx(nodes, pred) as! Node)
        pred_node.next = Int(succ)
        nodes = _set(nodes, pred, (pred_node as! Node))
        var succ_node: Node = (_idx(nodes, succ) as! Node)
        succ_node.prev = Int(pred)
        nodes = _set(nodes, succ, (succ_node as! Node))
        let val = node.data
        d.nodes = (nodes as! [Node])
        d.size = _int((d.size &- 1))
        return DeleteResult(deque: d, value: val)
    }
    func add_first(_ d: inout LinkedDeque, _ value: String) -> LinkedDeque {
        let head = (_idx(d.nodes, d.header) as! Node)
        let succ = head.next
        return insert(&d, d.header, (value as! String), succ)
    }
    func add_last(_ d: inout LinkedDeque, _ value: String) -> LinkedDeque {
        let tail = (_idx(d.nodes, d.trailer) as! Node)
        let pred = tail.prev
        return insert(&d, pred, (value as! String), d.trailer)
    }
    func remove_first(_ d: inout LinkedDeque) -> DeleteResult {
        if is_empty((d as! LinkedDeque)) {
            _ = fatalError("remove_first from empty list")
        }
        let head = (_idx(d.nodes, d.header) as! Node)
        let idx = head.next
        return delete(&d, idx)
    }
    func remove_last(_ d: inout LinkedDeque) -> DeleteResult {
        if is_empty((d as! LinkedDeque)) {
            _ = fatalError("remove_first from empty list")
        }
        let tail = (_idx(d.nodes, d.trailer) as! Node)
        let idx = tail.prev
        return delete(&d, idx)
    }
    func main() {
        var d: LinkedDeque = new_deque()
        d = (add_first(&d, "A") as! LinkedDeque)
        print(_p(String(describing: front((d as! LinkedDeque)))))
        d = (add_last(&d, "B") as! LinkedDeque)
        print(_p(String(describing: back((d as! LinkedDeque)))))
        var r: DeleteResult = remove_first(&d)
        d = (r.deque as! LinkedDeque)
        print(_p(r.value))
        r = (remove_last(&d) as! DeleteResult)
        d = (r.deque as! LinkedDeque)
        print(_p(r.value))
        print(_p(_p(is_empty((d as! LinkedDeque)))))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
