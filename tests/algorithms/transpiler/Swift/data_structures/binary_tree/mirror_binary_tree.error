exit status 1
/tmp/TestSwiftTranspiler_Algorithms_Golden191_data_structures_binary_tree_mirror_binary_tree2359155369/001/main.swift:98:31: warning: conditional cast from 'Int' to 'Int' always succeeds
 96 |             return
 97 |         }
 98 |         let temp = (left[idx] as? Int ?? 0)
    |                               `- warning: conditional cast from 'Int' to 'Int' always succeeds
 99 |         left = _set(left, idx, (right[idx] as? Int ?? 0))
100 |         right = _set(right, idx, Int(temp))

/tmp/TestSwiftTranspiler_Algorithms_Golden191_data_structures_binary_tree_mirror_binary_tree2359155369/001/main.swift:99:44: warning: conditional cast from 'Int' to 'Int' always succeeds
 97 |         }
 98 |         let temp = (left[idx] as? Int ?? 0)
 99 |         left = _set(left, idx, (right[idx] as? Int ?? 0))
    |                                            `- warning: conditional cast from 'Int' to 'Int' always succeeds
100 |         right = _set(right, idx, Int(temp))
101 |         _ = mirror_node(&left, &right, (left[idx] as? Int ?? 0))

/tmp/TestSwiftTranspiler_Algorithms_Golden191_data_structures_binary_tree_mirror_binary_tree2359155369/001/main.swift:101:51: warning: conditional cast from 'Int' to 'Int' always succeeds
 99 |         left = _set(left, idx, (right[idx] as? Int ?? 0))
100 |         right = _set(right, idx, Int(temp))
101 |         _ = mirror_node(&left, &right, (left[idx] as? Int ?? 0))
    |                                                   `- warning: conditional cast from 'Int' to 'Int' always succeeds
102 |         _ = mirror_node(&left, &right, (right[idx] as? Int ?? 0))
103 |     }

/tmp/TestSwiftTranspiler_Algorithms_Golden191_data_structures_binary_tree_mirror_binary_tree2359155369/001/main.swift:101:9: warning: using '_' to ignore the result of a Void-returning function is redundant
 99 |         left = _set(left, idx, (right[idx] as? Int ?? 0))
100 |         right = _set(right, idx, Int(temp))
101 |         _ = mirror_node(&left, &right, (left[idx] as? Int ?? 0))
    |         `- warning: using '_' to ignore the result of a Void-returning function is redundant
102 |         _ = mirror_node(&left, &right, (right[idx] as? Int ?? 0))
103 |     }

/tmp/TestSwiftTranspiler_Algorithms_Golden191_data_structures_binary_tree_mirror_binary_tree2359155369/001/main.swift:102:52: warning: conditional cast from 'Int' to 'Int' always succeeds
100 |         right = _set(right, idx, Int(temp))
101 |         _ = mirror_node(&left, &right, (left[idx] as? Int ?? 0))
102 |         _ = mirror_node(&left, &right, (right[idx] as? Int ?? 0))
    |                                                    `- warning: conditional cast from 'Int' to 'Int' always succeeds
103 |     }
104 |     func mirror(_ tree: inout Tree) -> Tree {

/tmp/TestSwiftTranspiler_Algorithms_Golden191_data_structures_binary_tree_mirror_binary_tree2359155369/001/main.swift:102:9: warning: using '_' to ignore the result of a Void-returning function is redundant
100 |         right = _set(right, idx, Int(temp))
101 |         _ = mirror_node(&left, &right, (left[idx] as? Int ?? 0))
102 |         _ = mirror_node(&left, &right, (right[idx] as? Int ?? 0))
    |         `- warning: using '_' to ignore the result of a Void-returning function is redundant
103 |     }
104 |     func mirror(_ tree: inout Tree) -> Tree {

/tmp/TestSwiftTranspiler_Algorithms_Golden191_data_structures_binary_tree_mirror_binary_tree2359155369/001/main.swift:105:9: warning: using '_' to ignore the result of a Void-returning function is redundant
103 |     }
104 |     func mirror(_ tree: inout Tree) -> Tree {
105 |         _ = mirror_node(&tree.left, &tree.right, tree.root)
    |         `- warning: using '_' to ignore the result of a Void-returning function is redundant
106 |         return tree
107 |     }

/tmp/TestSwiftTranspiler_Algorithms_Golden191_data_structures_binary_tree_mirror_binary_tree2359155369/001/main.swift:112:47: warning: forced cast of 'Tree' to same type has no effect
110 |             return ([] as! [Int])
111 |         }
112 |         let left_vals: [Int] = (inorder((tree as! Tree), (tree.left[idx] as? Int ?? 0)) as! [Int])
    |                                               `- warning: forced cast of 'Tree' to same type has no effect
113 |         let right_vals: [Int] = (inorder((tree as! Tree), (tree.right[idx] as? Int ?? 0)) as! [Int])
114 |         return ((concat((concat((left_vals as! [Any?]), ([(tree.values[idx] as? Int ?? 0)] as! [Int])) as! [Any?]), right_vals) as! [Any?]) as! [Int])

/tmp/TestSwiftTranspiler_Algorithms_Golden191_data_structures_binary_tree_mirror_binary_tree2359155369/001/main.swift:112:74: warning: conditional cast from 'Int' to 'Int' always succeeds
110 |             return ([] as! [Int])
111 |         }
112 |         let left_vals: [Int] = (inorder((tree as! Tree), (tree.left[idx] as? Int ?? 0)) as! [Int])
    |                                                                          `- warning: conditional cast from 'Int' to 'Int' always succeeds
113 |         let right_vals: [Int] = (inorder((tree as! Tree), (tree.right[idx] as? Int ?? 0)) as! [Int])
114 |         return ((concat((concat((left_vals as! [Any?]), ([(tree.values[idx] as? Int ?? 0)] as! [Int])) as! [Any?]), right_vals) as! [Any?]) as! [Int])

/tmp/TestSwiftTranspiler_Algorithms_Golden191_data_structures_binary_tree_mirror_binary_tree2359155369/001/main.swift:112:89: warning: forced cast of '[Int]' to same type has no effect
110 |             return ([] as! [Int])
111 |         }
112 |         let left_vals: [Int] = (inorder((tree as! Tree), (tree.left[idx] as? Int ?? 0)) as! [Int])
    |                                                                                         `- warning: forced cast of '[Int]' to same type has no effect
113 |         let right_vals: [Int] = (inorder((tree as! Tree), (tree.right[idx] as? Int ?? 0)) as! [Int])
114 |         return ((concat((concat((left_vals as! [Any?]), ([(tree.values[idx] as? Int ?? 0)] as! [Int])) as! [Any?]), right_vals) as! [Any?]) as! [Int])

/tmp/TestSwiftTranspiler_Algorithms_Golden191_data_structures_binary_tree_mirror_binary_tree2359155369/001/main.swift:113:48: warning: forced cast of 'Tree' to same type has no effect
111 |         }
112 |         let left_vals: [Int] = (inorder((tree as! Tree), (tree.left[idx] as? Int ?? 0)) as! [Int])
113 |         let right_vals: [Int] = (inorder((tree as! Tree), (tree.right[idx] as? Int ?? 0)) as! [Int])
    |                                                `- warning: forced cast of 'Tree' to same type has no effect
114 |         return ((concat((concat((left_vals as! [Any?]), ([(tree.values[idx] as? Int ?? 0)] as! [Int])) as! [Any?]), right_vals) as! [Any?]) as! [Int])
115 |     }

/tmp/TestSwiftTranspiler_Algorithms_Golden191_data_structures_binary_tree_mirror_binary_tree2359155369/001/main.swift:113:76: warning: conditional cast from 'Int' to 'Int' always succeeds
111 |         }
112 |         let left_vals: [Int] = (inorder((tree as! Tree), (tree.left[idx] as? Int ?? 0)) as! [Int])
113 |         let right_vals: [Int] = (inorder((tree as! Tree), (tree.right[idx] as? Int ?? 0)) as! [Int])
    |                                                                            `- warning: conditional cast from 'Int' to 'Int' always succeeds
114 |         return ((concat((concat((left_vals as! [Any?]), ([(tree.values[idx] as? Int ?? 0)] as! [Int])) as! [Any?]), right_vals) as! [Any?]) as! [Int])
115 |     }

/tmp/TestSwiftTranspiler_Algorithms_Golden191_data_structures_binary_tree_mirror_binary_tree2359155369/001/main.swift:113:91: warning: forced cast of '[Int]' to same type has no effect
111 |         }
112 |         let left_vals: [Int] = (inorder((tree as! Tree), (tree.left[idx] as? Int ?? 0)) as! [Int])
113 |         let right_vals: [Int] = (inorder((tree as! Tree), (tree.right[idx] as? Int ?? 0)) as! [Int])
    |                                                                                           `- warning: forced cast of '[Int]' to same type has no effect
114 |         return ((concat((concat((left_vals as! [Any?]), ([(tree.values[idx] as? Int ?? 0)] as! [Int])) as! [Any?]), right_vals) as! [Any?]) as! [Int])
115 |     }

/tmp/TestSwiftTranspiler_Algorithms_Golden191_data_structures_binary_tree_mirror_binary_tree2359155369/001/main.swift:114:18: error: cannot find 'concat' in scope
112 |         let left_vals: [Int] = (inorder((tree as! Tree), (tree.left[idx] as? Int ?? 0)) as! [Int])
113 |         let right_vals: [Int] = (inorder((tree as! Tree), (tree.right[idx] as? Int ?? 0)) as! [Int])
114 |         return ((concat((concat((left_vals as! [Any?]), ([(tree.values[idx] as? Int ?? 0)] as! [Int])) as! [Any?]), right_vals) as! [Any?]) as! [Int])
    |                  `- error: cannot find 'concat' in scope
115 |     }
116 |     func make_tree_zero() -> Tree {

/tmp/TestSwiftTranspiler_Algorithms_Golden191_data_structures_binary_tree_mirror_binary_tree2359155369/001/main.swift:114:26: error: cannot find 'concat' in scope
112 |         let left_vals: [Int] = (inorder((tree as! Tree), (tree.left[idx] as? Int ?? 0)) as! [Int])
113 |         let right_vals: [Int] = (inorder((tree as! Tree), (tree.right[idx] as? Int ?? 0)) as! [Int])
114 |         return ((concat((concat((left_vals as! [Any?]), ([(tree.values[idx] as? Int ?? 0)] as! [Int])) as! [Any?]), right_vals) as! [Any?]) as! [Int])
    |                          `- error: cannot find 'concat' in scope
115 |     }
116 |     func make_tree_zero() -> Tree {

/tmp/TestSwiftTranspiler_Algorithms_Golden191_data_structures_binary_tree_mirror_binary_tree2359155369/001/main.swift:114:44: warning: forced cast from '[Int]' to '[Any?]' always succeeds; did you mean to use 'as'?
112 |         let left_vals: [Int] = (inorder((tree as! Tree), (tree.left[idx] as? Int ?? 0)) as! [Int])
113 |         let right_vals: [Int] = (inorder((tree as! Tree), (tree.right[idx] as? Int ?? 0)) as! [Int])
114 |         return ((concat((concat((left_vals as! [Any?]), ([(tree.values[idx] as? Int ?? 0)] as! [Int])) as! [Any?]), right_vals) as! [Any?]) as! [Int])
    |                                            `- warning: forced cast from '[Int]' to '[Any?]' always succeeds; did you mean to use 'as'?
115 |     }
116 |     func make_tree_zero() -> Tree {

/tmp/TestSwiftTranspiler_Algorithms_Golden191_data_structures_binary_tree_mirror_binary_tree2359155369/001/main.swift:114:77: warning: conditional cast from 'Int' to 'Int' always succeeds
112 |         let left_vals: [Int] = (inorder((tree as! Tree), (tree.left[idx] as? Int ?? 0)) as! [Int])
113 |         let right_vals: [Int] = (inorder((tree as! Tree), (tree.right[idx] as? Int ?? 0)) as! [Int])
114 |         return ((concat((concat((left_vals as! [Any?]), ([(tree.values[idx] as? Int ?? 0)] as! [Int])) as! [Any?]), right_vals) as! [Any?]) as! [Int])
    |                                                                             `- warning: conditional cast from 'Int' to 'Int' always succeeds
115 |     }
116 |     func make_tree_zero() -> Tree {

/tmp/TestSwiftTranspiler_Algorithms_Golden191_data_structures_binary_tree_mirror_binary_tree2359155369/001/main.swift:130:34: warning: forced cast of 'Tree' to same type has no effect
128 |         var i: Int = 0
129 |         while (i < Int(((trees).count))) {
130 |             var tree = (trees[i] as! Tree)
    |                                  `- warning: forced cast of 'Tree' to same type has no effect
131 |             print(_p(((("      The " + (names[i] as! String)) + " tree: ") + "[" + (inorder((tree as! Tree), tree.root) as! [Int]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]")))
132 |             let mirrored = mirror(&tree)

/tmp/TestSwiftTranspiler_Algorithms_Golden191_data_structures_binary_tree_mirror_binary_tree2359155369/001/main.swift:131:50: warning: forced cast of 'String' to same type has no effect
129 |         while (i < Int(((trees).count))) {
130 |             var tree = (trees[i] as! Tree)
131 |             print(_p(((("      The " + (names[i] as! String)) + " tree: ") + "[" + (inorder((tree as! Tree), tree.root) as! [Int]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]")))
    |                                                  `- warning: forced cast of 'String' to same type has no effect
132 |             let mirrored = mirror(&tree)
133 |             print(_p(((("Mirror of " + (names[i] as! String)) + " tree: ") + "[" + (inorder((mirrored as! Tree), mirrored.root) as! [Int]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]")))

/tmp/TestSwiftTranspiler_Algorithms_Golden191_data_structures_binary_tree_mirror_binary_tree2359155369/001/main.swift:131:99: warning: forced cast of 'Tree' to same type has no effect
129 |         while (i < Int(((trees).count))) {
130 |             var tree = (trees[i] as! Tree)
131 |             print(_p(((("      The " + (names[i] as! String)) + " tree: ") + "[" + (inorder((tree as! Tree), tree.root) as! [Int]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]")))
    |                                                                                                   `- warning: forced cast of 'Tree' to same type has no effect
132 |             let mirrored = mirror(&tree)
133 |             print(_p(((("Mirror of " + (names[i] as! String)) + " tree: ") + "[" + (inorder((mirrored as! Tree), mirrored.root) as! [Int]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]")))

/tmp/TestSwiftTranspiler_Algorithms_Golden191_data_structures_binary_tree_mirror_binary_tree2359155369/001/main.swift:131:121: warning: forced cast of '[Int]' to same type has no effect
129 |         while (i < Int(((trees).count))) {
130 |             var tree = (trees[i] as! Tree)
131 |             print(_p(((("      The " + (names[i] as! String)) + " tree: ") + "[" + (inorder((tree as! Tree), tree.root) as! [Int]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]")))
    |                                                                                                                         `- warning: forced cast of '[Int]' to same type has no effect
132 |             let mirrored = mirror(&tree)
133 |             print(_p(((("Mirror of " + (names[i] as! String)) + " tree: ") + "[" + (inorder((mirrored as! Tree), mirrored.root) as! [Int]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]")))

/tmp/TestSwiftTranspiler_Algorithms_Golden191_data_structures_binary_tree_mirror_binary_tree2359155369/001/main.swift:133:50: warning: forced cast of 'String' to same type has no effect
131 |             print(_p(((("      The " + (names[i] as! String)) + " tree: ") + "[" + (inorder((tree as! Tree), tree.root) as! [Int]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]")))
132 |             let mirrored = mirror(&tree)
133 |             print(_p(((("Mirror of " + (names[i] as! String)) + " tree: ") + "[" + (inorder((mirrored as! Tree), mirrored.root) as! [Int]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]")))
    |                                                  `- warning: forced cast of 'String' to same type has no effect
134 |             i = Int((i &+ 1))
135 |         }

/tmp/TestSwiftTranspiler_Algorithms_Golden191_data_structures_binary_tree_mirror_binary_tree2359155369/001/main.swift:133:103: warning: forced cast of 'Tree' to same type has no effect
131 |             print(_p(((("      The " + (names[i] as! String)) + " tree: ") + "[" + (inorder((tree as! Tree), tree.root) as! [Int]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]")))
132 |             let mirrored = mirror(&tree)
133 |             print(_p(((("Mirror of " + (names[i] as! String)) + " tree: ") + "[" + (inorder((mirrored as! Tree), mirrored.root) as! [Int]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]")))
    |                                                                                                       `- warning: forced cast of 'Tree' to same type has no effect
134 |             i = Int((i &+ 1))
135 |         }

/tmp/TestSwiftTranspiler_Algorithms_Golden191_data_structures_binary_tree_mirror_binary_tree2359155369/001/main.swift:133:129: warning: forced cast of '[Int]' to same type has no effect
131 |             print(_p(((("      The " + (names[i] as! String)) + " tree: ") + "[" + (inorder((tree as! Tree), tree.root) as! [Int]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]")))
132 |             let mirrored = mirror(&tree)
133 |             print(_p(((("Mirror of " + (names[i] as! String)) + " tree: ") + "[" + (inorder((mirrored as! Tree), mirrored.root) as! [Int]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]")))
    |                                                                                                                                 `- warning: forced cast of '[Int]' to same type has no effect
134 |             i = Int((i &+ 1))
135 |         }

/tmp/TestSwiftTranspiler_Algorithms_Golden191_data_structures_binary_tree_mirror_binary_tree2359155369/001/main.swift:137:5: warning: using '_' to ignore the result of a Void-returning function is redundant
135 |         }
136 |     }
137 |     _ = main()
    |     `- warning: using '_' to ignore the result of a Void-returning function is redundant
138 |     let _benchEnd = _now()
139 |     let _benchMemEnd = _mem()
