// Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:38:08 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
struct Node: Codable {
    var data: Int
    var left: Int
    var right: Int
    init() {
        self.data = 0
        self.left = 0
        self.right = 0
    }
    init(data: Int, left: Int, right: Int) {
        self.data = data
        self.left = left
        self.right = right
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func inorder(_ nodes: [Node], _ index: Int, _ acc: [Int]) -> [Int] {
        if (index == (0 &- 1)) {
            return acc
        }
        let node = (nodes[index] as! Node)
        var res: [Int] = (inorder((nodes as! [Node]), node.left, (acc as! [Int])) as! [Int])
        res = (_append(res, node.data) as! [Int])
        res = (inorder((nodes as! [Node]), node.right, (res as! [Int])) as! [Int])
        return res
    }
    func size(_ nodes: [Node], _ index: Int) -> Int {
        if (index == (0 &- 1)) {
            return 0
        }
        let node = (nodes[index] as! Node)
        return ((1 &+ Int(size((nodes as! [Node]), node.left))) &+ Int(size((nodes as! [Node]), node.right)))
    }
    func depth(_ nodes: [Node], _ index: Int) -> Int {
        if (index == (0 &- 1)) {
            return 0
        }
        let node = (nodes[index] as! Node)
        let left_depth = Int(depth((nodes as! [Node]), node.left))
        let right_depth = Int(depth((nodes as! [Node]), node.right))
        if (left_depth > right_depth) {
            return (left_depth &+ 1)
        }
        return (right_depth &+ 1)
    }
    func is_full(_ nodes: [Node], _ index: Int) -> Bool {
        if (index == (0 &- 1)) {
            return true
        }
        let node = (nodes[index] as! Node)
        if ((node.left == (0 &- 1)) && (node.right == (0 &- 1))) {
            return true
        }
        if ((node.left != (0 &- 1)) && (node.right != (0 &- 1))) {
            return (is_full((nodes as! [Node]), node.left) && is_full((nodes as! [Node]), node.right))
        }
        return false
    }
    func small_tree() -> [Node] {
        var arr: [Node] = ([] as! [Node])
        arr = (_append(arr, Node(data: 2, left: 1, right: 2)) as! [Node])
        arr = (_append(arr, Node(data: 1, left: (0 &- 1), right: (0 &- 1))) as! [Node])
        arr = (_append(arr, Node(data: 3, left: (0 &- 1), right: (0 &- 1))) as! [Node])
        return arr
    }
    func medium_tree() -> [Node] {
        var arr: [Node] = ([] as! [Node])
        arr = (_append(arr, Node(data: 4, left: 1, right: 4)) as! [Node])
        arr = (_append(arr, Node(data: 2, left: 2, right: 3)) as! [Node])
        arr = (_append(arr, Node(data: 1, left: (0 &- 1), right: (0 &- 1))) as! [Node])
        arr = (_append(arr, Node(data: 3, left: (0 &- 1), right: (0 &- 1))) as! [Node])
        arr = (_append(arr, Node(data: 5, left: (0 &- 1), right: 5)) as! [Node])
        arr = (_append(arr, Node(data: 6, left: (0 &- 1), right: 6)) as! [Node])
        arr = (_append(arr, Node(data: 7, left: (0 &- 1), right: (0 &- 1))) as! [Node])
        return arr
    }
    let small: [Node] = (small_tree() as! [Node])
    print(_p(Int(size((small as! [Node]), 0))))
    print(_p("[" + (inorder((small as! [Node]), 0, ([] as! [Int])) as! [Int]).map{ if let s = $0 as? String { "\"" + s.replacingOccurrences(of: "\"", with: "\\\"") + "\"" } else { _p($0) } }.joined(separator: ", ") + "]"))
    print(_p(Int(depth((small as! [Node]), 0))))
    print(_p(is_full((small as! [Node]), 0)))
    let medium: [Node] = (medium_tree() as! [Node])
    print(_p(Int(size((medium as! [Node]), 0))))
    print(_p("[" + (inorder((medium as! [Node]), 0, ([] as! [Int])) as! [Int]).map{ if let s = $0 as? String { "\"" + s.replacingOccurrences(of: "\"", with: "\\\"") + "\"" } else { _p($0) } }.joined(separator: ", ") + "]"))
    print(_p(Int(depth((medium as! [Node]), 0))))
    print(_p(is_full((medium as! [Node]), 0)))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
