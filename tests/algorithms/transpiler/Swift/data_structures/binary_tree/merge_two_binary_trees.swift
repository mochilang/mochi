// Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:38:56 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
indirect enum Tree {
    case Leaf()
    case Node(left: Tree, value: Int, right: Tree)
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func merge_two_binary_trees(_ t1: Tree, _ t2: Tree) -> Tree {
        return { () -> Tree in
        switch t1 {
            case let .Leaf():
            return t2
            case let .Node(l1, v1, r1):
            return { () -> Tree in
            switch t2 {
                case let .Leaf():
                return t1
                case let .Node(l2, v2, r2):
                return Tree.Node(left: merge_two_binary_trees((l1 as! Tree), (l2 as! Tree)), value: (v1 &+ v2), right: merge_two_binary_trees((r1 as! Tree), (r2 as! Tree)))
                default:
                var z: Tree
                return z
            }
        }()
        default:
        var z: Tree
        return z
    }
}()
}
func is_leaf(_ t: Tree) -> Bool {
    return ({ () -> Bool in
    switch t {
        case let .Leaf():
        return true
        case let ._():
        return false
        default:
        var z: Bool
        return z
    }
}() as! Bool)
}
func get_left(_ t: Tree) -> Tree {
    return { () -> Tree in
    switch t {
        case let .Node(l, _, _):
        return l
        case let ._():
        return Tree.Leaf()
        default:
        var z: Tree
        return z
    }
}()
}
func get_right(_ t: Tree) -> Tree {
    return { () -> Tree in
    switch t {
        case let .Node(_, _, r):
        return r
        case let ._():
        return Tree.Leaf()
        default:
        var z: Tree
        return z
    }
}()
}
func get_value(_ t: Tree) -> Int {
    return Int({ () -> Int in
    switch t {
        case let .Node(_, v, _):
        return v
        case let ._():
        return 0
        default:
        var z: Int
        return z
    }
}())
}
func print_preorder(_ t: Tree) -> unit {
    if (!is_leaf((t as! Tree))) {
        let v = Int(get_value((t as! Tree)))
        let l = get_left((t as! Tree))
        let r = get_right((t as! Tree))
        print(_p(v))
        _ = print_preorder((l as! Tree))
        _ = print_preorder((r as! Tree))
    }
}
let tree1 = Tree.Node(left: Tree.Node(left: Tree.Node(left: Tree.Leaf(), value: 4, right: Tree.Leaf()), value: 2, right: Tree.Leaf()), value: 1, right: Tree.Node(left: Tree.Leaf(), value: 3, right: Tree.Leaf()))
let tree2 = Tree.Node(left: Tree.Node(left: Tree.Leaf(), value: 4, right: Tree.Node(left: Tree.Leaf(), value: 9, right: Tree.Leaf())), value: 2, right: Tree.Node(left: Tree.Leaf(), value: 6, right: Tree.Node(left: Tree.Leaf(), value: 5, right: Tree.Leaf())))
print(_p("Tree1 is:"))
_ = print_preorder((tree1 as! Tree))
print(_p("Tree2 is:"))
_ = print_preorder((tree2 as! Tree))
let merged_tree = merge_two_binary_trees((tree1 as! Tree), (tree2 as! Tree))
print(_p("Merged Tree is:"))
_ = print_preorder((merged_tree as! Tree))
let _benchEnd = _now()
let _benchMemEnd = _mem()
print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
