// Generated by Mochi transpiler v0.10.72 on 2025-08-24 17:02:52 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.isNaN || d.isInfinite {
                return String(d)
            }
            if d.rounded(.towardZero) == d {
                // avoid overflow when converting to Int64
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _num(_ v: Any) -> Double {
    if let d = v as? Double { return d }
    if let i = v as? Int { return Double(i) }
    if let i = v as? Int64 { return Double(i) }
    return 0
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first!
}
func _idx<K: Hashable, V>(_ m: [K: V], _ k: K) -> V? {
    return m[k]
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    var i = idx
    if i < 0 { i += out.count }
    if i < out.count {
        out[i] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: i - out.count + 1))
        out[i] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func binary_tree_mirror_dict(_ tree: inout [Int: [Int]], _ root: Int) {
        if (((root == 0) || ((!(tree[root] != nil)) as! Bool))) {
            return
        }
        let children: [Int] = ((tree[root] ?? []) as! [Int])
        let left = (_idx(children, 0) as? Int ?? 0)
        let right = (_idx(children, 1) as? Int ?? 0)
        tree = _set(tree, root, { let _tmp0 = ({
            var _arr: [Int] = []
            _arr = _append(_arr, right)
            _arr = _append(_arr, left)
            return _arr
        }() as! [Int]); return _tmp0 }())
        _ = binary_tree_mirror_dict(&tree, left)
        _ = binary_tree_mirror_dict(&tree, right)
    }
    func binary_tree_mirror(_ binary_tree: [Int: [Int]], _ root: Int) -> [Int: [Int]] {
        if ((_int(((binary_tree).count)) == 0)) {
            _ = fatalError("binary tree cannot be empty")
        }
        if ((!(binary_tree[root] != nil))) {
            _ = fatalError((_p((_p("root ") + _p(_p(root)))) + _p(" is not present in the binary_tree")))
        }
        var tree_copy: [Int: [Int]] = ([:] as! [Int: [Int]])
        for k in binary_tree.keys.sorted() {
            tree_copy = _set(tree_copy, k, { let _tmp1 = ((binary_tree[k] ?? []) as! [Int]); return _tmp1 }())
        }
        _ = binary_tree_mirror_dict(&tree_copy, root)
        return tree_copy
    }
    func main() {
        let binary_tree: [Int: [Int]] = ([1: ({
            var _arr: [Int] = []
            _arr = _append(_arr, 2)
            _arr = _append(_arr, 3)
            return _arr
        }() as! [Int]), 2: ({
            var _arr: [Int] = []
            _arr = _append(_arr, 4)
            _arr = _append(_arr, 5)
            return _arr
        }() as! [Int]), 3: ({
            var _arr: [Int] = []
            _arr = _append(_arr, 6)
            _arr = _append(_arr, 7)
            return _arr
        }() as! [Int]), 7: ({
            var _arr: [Int] = []
            _arr = _append(_arr, 8)
            _arr = _append(_arr, 9)
            return _arr
        }() as! [Int])] as! [Int: [Int]])
        print(_p((_p("Binary tree: ") + _p(String(describing: binary_tree)))))
        let mirrored: [Int: [Int]] = (binary_tree_mirror((binary_tree as! [Int: [Int]]), 1) as! [Int: [Int]])
        print(_p((_p("Binary tree mirror: ") + _p(String(describing: mirrored)))))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
