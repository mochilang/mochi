// Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:38:14 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func binary_tree_mirror_dict(_ tree: inout [Int: [Int]], _ root: Int) {
        if ((root == 0) || ((!(tree[root] != nil)) as! Bool)) {
            return
        }
        let children: [Int] = (tree[root] as! [Int])
        let left = (children[0] as? Int ?? 0)
        let right = (children[1] as? Int ?? 0)
        tree = _set(tree, root, ([right, left] as! [Int]))
        _ = binary_tree_mirror_dict(&tree, left)
        _ = binary_tree_mirror_dict(&tree, right)
    }
    func binary_tree_mirror(_ binary_tree: [Int: [Int]], _ root: Int) -> [Int: [Int]] {
        if (Int(((binary_tree).count)) == 0) {
            _ = fatalError("binary tree cannot be empty")
        }
        if (!(binary_tree[root] != nil)) {
            _ = fatalError((("root " + String(describing: root)) + " is not present in the binary_tree"))
        }
        var tree_copy: [Int: [Int]] = ([:] as! [Int: [Int]])
        for k in binary_tree.keys.sorted() {
            tree_copy = _set(tree_copy, k, (binary_tree[k] as! [Int]))
        }
        _ = binary_tree_mirror_dict(&tree_copy, root)
        return tree_copy
    }
    func main() {
        let binary_tree: [Int: [Int]] = ([1: ([2, 3] as! [Int]), 2: ([4, 5] as! [Int]), 3: ([6, 7] as! [Int]), 7: ([8, 9] as! [Int])] as! [Int: [Int]])
        print(_p(("Binary tree: " + String(describing: binary_tree))))
        let mirrored: [Int: [Int]] = (binary_tree_mirror((binary_tree as! [Int: [Int]]), 1) as! [Int: [Int]])
        print(_p(("Binary tree mirror: " + String(describing: mirrored))))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
