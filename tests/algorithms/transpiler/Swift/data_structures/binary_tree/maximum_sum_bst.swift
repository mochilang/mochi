// Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:38:53 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
struct Node: Codable {
    var val: Int
    var left: Int
    var right: Int
    init() {
        self.val = 0
        self.left = 0
        self.right = 0
    }
    init(val: Int, left: Int, right: Int) {
        self.val = val
        self.left = left
        self.right = right
    }
}
struct Info: Codable {
    var is_bst: Bool
    var min_val: Int
    var max_val: Int
    var total: Int
    var best: Int
    init() {
        self.is_bst = false
        self.min_val = 0
        self.max_val = 0
        self.total = 0
        self.best = 0
    }
    init(is_bst: Bool, min_val: Int, max_val: Int, total: Int, best: Int) {
        self.is_bst = is_bst
        self.min_val = min_val
        self.max_val = max_val
        self.total = total
        self.best = best
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func min_int(_ a: Int, _ b: Int) -> Int {
        if (a < b) {
            return a
        }
        return b
    }
    func max_int(_ a: Int, _ b: Int) -> Int {
        if (a > b) {
            return a
        }
        return b
    }
    func solver(_ nodes: [Node], _ idx: Int) -> Info {
        if (idx == (0 &- 1)) {
            return Info(is_bst: true, min_val: 2147483647, max_val: -2147483648, total: 0, best: 0)
        }
        let node = (nodes[idx] as! Node)
        let left_info = solver((nodes as! [Node]), node.left)
        let right_info = solver((nodes as! [Node]), node.right)
        var current_best: Int = Int(max_int(left_info.best, right_info.best))
        if (((left_info.is_bst && right_info.is_bst) && (left_info.max_val < node.val)) && (node.val < right_info.min_val)) {
            let sum_val = ((left_info.total &+ right_info.total) &+ node.val)
            current_best = Int(max_int(current_best, sum_val))
            return Info(is_bst: true, min_val: Int(min_int(left_info.min_val, node.val)), max_val: Int(max_int(right_info.max_val, node.val)), total: sum_val, best: current_best)
        }
        return Info(is_bst: false, min_val: 0, max_val: 0, total: 0, best: current_best)
    }
    func max_sum_bst(_ nodes: [Node], _ root: Int) -> Int {
        let info = solver((nodes as! [Node]), root)
        return info.best
    }
    func main() {
        let t1_nodes: [Node] = ([Node(val: 4, left: 1, right: (0 &- 1)), Node(val: 3, left: 2, right: 3), Node(val: 1, left: (0 &- 1), right: (0 &- 1)), Node(val: 2, left: (0 &- 1), right: (0 &- 1))] as! [Node])
        print(_p(Int(max_sum_bst((t1_nodes as! [Node]), 0))))
        let t2_nodes: [Node] = ([Node(val: -4, left: 1, right: 2), Node(val: -2, left: (0 &- 1), right: (0 &- 1)), Node(val: -5, left: (0 &- 1), right: (0 &- 1))] as! [Node])
        print(_p(Int(max_sum_bst((t2_nodes as! [Node]), 0))))
        let t3_nodes: [Node] = ([Node(val: 1, left: 1, right: 2), Node(val: 4, left: 3, right: 4), Node(val: 3, left: 5, right: 6), Node(val: 2, left: (0 &- 1), right: (0 &- 1)), Node(val: 4, left: (0 &- 1), right: (0 &- 1)), Node(val: 2, left: (0 &- 1), right: (0 &- 1)), Node(val: 5, left: 7, right: 8), Node(val: 4, left: (0 &- 1), right: (0 &- 1)), Node(val: 6, left: (0 &- 1), right: (0 &- 1))] as! [Node])
        print(_p(Int(max_sum_bst((t3_nodes as! [Node]), 0))))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
