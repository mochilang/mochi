// Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:39:11 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
struct Node: Codable {
    var start: Int
    var end: Int
    var val: Int
    var mid: Int
    var left: Int
    var right: Int
    init() {
        self.start = 0
        self.end = 0
        self.val = 0
        self.mid = 0
        self.left = 0
        self.right = 0
    }
    init(start: Int, end: Int, val: Int, mid: Int, left: Int, right: Int) {
        self.start = start
        self.end = end
        self.val = val
        self.mid = mid
        self.left = left
        self.right = right
    }
}
struct BuildResult: Codable {
    var nodes: [Node]
    var idx: Int
    init() {
        self.nodes = []
        self.idx = 0
    }
    init(nodes: [Node], idx: Int) {
        self.nodes = nodes
        self.idx = idx
    }
}
struct SegmentTree: Codable {
    var arr: [Int]
    var op: Int
    init() {
        self.arr = []
        self.op = 0
    }
    init(arr: [Int], op: Int) {
        self.arr = arr
        self.op = op
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func combine(_ a: Int, _ b: Int, _ op: Int) -> Int {
        if (op == 0) {
            return (a &+ b)
        }
        if (op == 1) {
            if (a > b) {
                return a
            }
            return b
        }
        if (a < b) {
            return a
        }
        return b
    }
    func build_tree(_ nodes: [Node], _ arr: [Int], _ start: Int, _ end: Int, _ op: Int) -> BuildResult {
        if (start == end) {
            let node = Node(start: start, end: end, val: (arr[start] as? Int ?? 0), mid: start, left: -1, right: -1)
            let new_nodes: [Node] = (_append(nodes, node) as! [Node])
            return BuildResult(nodes: new_nodes, idx: (Int(((new_nodes).count)) &- 1))
        }
        let mid: Int = (Int((start &+ end)) / 2)
        let left_res = build_tree((nodes as! [Node]), (arr as! [Int]), start, mid, op)
        let right_res = build_tree((left_res.nodes as! [Node]), (arr as! [Int]), (mid &+ 1), end, op)
        let left_node = (right_res.nodes[left_res.idx] as! Node)
        let right_node = (right_res.nodes[right_res.idx] as! Node)
        let val = Int(combine(left_node.val, right_node.val, op))
        let parent = Node(start: start, end: end, val: val, mid: mid, left: left_res.idx, right: right_res.idx)
        let new_nodes: [Node] = (_append(right_res.nodes, parent) as! [Node])
        return BuildResult(nodes: new_nodes, idx: (Int(((new_nodes).count)) &- 1))
    }
    func new_segment_tree(_ collection: [Int], _ op: Int) -> SegmentTree {
        return SegmentTree(arr: collection, op: op)
    }
    func update(_ tree: SegmentTree, _ i: Int, _ val: Int) -> SegmentTree {
        var new_arr: [Int] = ([] as! [Int])
        var idx: Int = 0
        while (idx < Int(((tree.arr).count))) {
            if (idx == i) {
                new_arr = (_append(new_arr, val) as! [Int])
            } else {
                new_arr = (_append(new_arr, (tree.arr[idx] as? Int ?? 0)) as! [Int])
            }
            idx = Int((idx &+ 1))
        }
        return SegmentTree(arr: new_arr, op: tree.op)
    }
    func query_range(_ tree: SegmentTree, _ i: Int, _ j: Int) -> Int {
        var result: Int = (tree.arr[i] as? Int ?? 0)
        var idx: Int = (i &+ 1)
        while (idx <= j) {
            result = Int(combine(result, (tree.arr[idx] as? Int ?? 0), tree.op))
            idx = Int((idx &+ 1))
        }
        return result
    }
    func traverse(_ tree: SegmentTree) -> [Node] {
        if (Int(((tree.arr).count)) == 0) {
            return ([] as! [Node])
        }
        let res = build_tree(([] as! [Node]), (tree.arr as! [Int]), 0, (Int(((tree.arr).count)) &- 1), tree.op)
        return res.nodes
    }
    func node_to_string(_ node: Node) -> String {
        return (((((("SegmentTreeNode(start=" + String(describing: node.start)) + ", end=") + String(describing: node.end)) + ", val=") + String(describing: node.val)) + ")")
    }
    func print_traverse(_ tree: SegmentTree) {
        let nodes: [Node] = (traverse((tree as! SegmentTree)) as! [Node])
        var i: Int = 0
        while (i < Int(((nodes).count))) {
            print(_p(String(describing: node_to_string((nodes[i] as! Node)))))
            i = Int((i &+ 1))
        }
        print(_p(""))
    }
    let arr: [Int] = ([2, 1, 5, 3, 4] as! [Int])
    for op in ([0, 1, 2] as! [Int]) {
        print(_p("**************************************************"))
        var tree: SegmentTree = new_segment_tree((arr as! [Int]), op)
        _ = print_traverse((tree as! SegmentTree))
        tree = (update((tree as! SegmentTree), 1, 5) as! SegmentTree)
        _ = print_traverse((tree as! SegmentTree))
        print(_p(Int(query_range((tree as! SegmentTree), 3, 4))))
        print(_p(Int(query_range((tree as! SegmentTree), 2, 2))))
        print(_p(Int(query_range((tree as! SegmentTree), 1, 3))))
        print(_p(""))
    }
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
