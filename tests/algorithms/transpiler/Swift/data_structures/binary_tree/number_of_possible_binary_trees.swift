// Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:39:03 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func binomial_coefficient(_ n: Int, _ k: Int) -> Int {
        var result: Int = 1
        var kk: Int = k
        if (k > (n &- k)) {
            kk = Int((n &- k))
        }
        for i in 0..<kk {
            result = Int((result &* Int((n &- i))))
            result = Int((result / Int((i &+ 1))))
        }
        return result
    }
    func catalan_number(_ node_count: Int) -> Int {
        return (Int(binomial_coefficient((2 &* node_count), node_count)) / Int((node_count &+ 1)))
    }
    func factorial(_ n: Int) -> Int {
        if (n < 0) {
            print(_p("factorial() not defined for negative values"))
            return 0
        }
        var result: Int = 1
        for i in 1..<Int((n &+ 1)) {
            result = Int((result &* i))
        }
        return result
    }
    func binary_tree_count(_ node_count: Int) -> Int {
        return (Int(catalan_number(node_count)) &* Int(factorial(node_count)))
    }
    print(_p("Enter the number of nodes:"))
    let input_str: String = (readLine() ?? "")
    let node_count: Int = Int(_int(input_str))
    if (node_count <= 0) {
        print(_p("We need some nodes to work with."))
    } else {
        let bst: Int = Int(catalan_number(node_count))
        let bt: Int = Int(binary_tree_count(node_count))
        print(_p("Given"), _p(node_count), _p("nodes, there are"), _p(bt), _p("binary trees and"), _p(bst), _p("binary search trees."))
    }
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
