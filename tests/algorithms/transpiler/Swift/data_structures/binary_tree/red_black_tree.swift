// Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:39:05 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
struct RBTree: Codable {
    var nodes: [[Int]]
    var root: Int
    init() {
        self.nodes = []
        self.root = 0
    }
    init(nodes: [[Int]], root: Int) {
        self.nodes = nodes
        self.root = root
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let LABEL: Int = 0
    let COLOR: Int = 1
    let PARENT: Int = 2
    let LEFT: Int = 3
    let RIGHT: Int = 4
    let NEG_ONE: Int = -1
    func make_tree() -> RBTree {
        return RBTree(nodes: [], root: -1)
    }
    func rotate_left(_ t: inout RBTree, _ x: Int) -> RBTree {
        var nodes: [[Int]] = t.nodes
        let y = (nodes[x][RIGHT] as? Int ?? 0)
        let yLeft = (nodes[y][LEFT] as? Int ?? 0)
        nodes[x][RIGHT] = Int(yLeft)
        if (yLeft != NEG_ONE) {
            nodes[yLeft][PARENT] = Int(x)
        }
        let xParent = (nodes[x][PARENT] as? Int ?? 0)
        nodes[y][PARENT] = Int(xParent)
        if (xParent == NEG_ONE) {
            t.root = Int(y)
        } else if (x == (nodes[xParent][LEFT] as? Int ?? 0)) {
            nodes[xParent][LEFT] = Int(y)
        } else {
            nodes[xParent][RIGHT] = Int(y)
        }
        
        nodes[y][LEFT] = Int(x)
        nodes[x][PARENT] = Int(y)
        t.nodes = (nodes as! [[Int]])
        return t
    }
    func rotate_right(_ t: inout RBTree, _ x: Int) -> RBTree {
        var nodes: [[Int]] = t.nodes
        let y = (nodes[x][LEFT] as? Int ?? 0)
        let yRight = (nodes[y][RIGHT] as? Int ?? 0)
        nodes[x][LEFT] = Int(yRight)
        if (yRight != NEG_ONE) {
            nodes[yRight][PARENT] = Int(x)
        }
        let xParent = (nodes[x][PARENT] as? Int ?? 0)
        nodes[y][PARENT] = Int(xParent)
        if (xParent == NEG_ONE) {
            t.root = Int(y)
        } else if (x == (nodes[xParent][RIGHT] as? Int ?? 0)) {
            nodes[xParent][RIGHT] = Int(y)
        } else {
            nodes[xParent][LEFT] = Int(y)
        }
        
        nodes[y][RIGHT] = Int(x)
        nodes[x][PARENT] = Int(y)
        t.nodes = (nodes as! [[Int]])
        return t
    }
    func insert_fix(_ t: inout RBTree, _ z: Int) -> RBTree {
        var z = z
        var nodes: [[Int]] = t.nodes
        while ((z != t.root) && ((nodes[(nodes[z][PARENT] as? Int ?? 0)][COLOR] as? Int ?? 0) == 1)) {
            if ((nodes[z][PARENT] as? Int ?? 0) == (nodes[(nodes[(nodes[z][PARENT] as? Int ?? 0)][PARENT] as? Int ?? 0)][LEFT] as? Int ?? 0)) {
                let y = (nodes[(nodes[(nodes[z][PARENT] as? Int ?? 0)][PARENT] as? Int ?? 0)][RIGHT] as? Int ?? 0)
                if ((y != NEG_ONE) && ((nodes[y][COLOR] as? Int ?? 0) == 1)) {
                    nodes[(nodes[z][PARENT] as? Int ?? 0)][COLOR] = 0
                    nodes[y][COLOR] = 0
                    let gp = (nodes[(nodes[z][PARENT] as? Int ?? 0)][PARENT] as? Int ?? 0)
                    nodes[gp][COLOR] = 1
                    z = Int(gp)
                } else {
                    if (z == (nodes[(nodes[z][PARENT] as? Int ?? 0)][RIGHT] as? Int ?? 0)) {
                        z = (nodes[z][PARENT] as? Int ?? 0)
                        t.nodes = (nodes as! [[Int]])
                        t = (rotate_left(&t, z) as! RBTree)
                        nodes = (t.nodes as! [[Int]])
                    }
                    nodes[(nodes[z][PARENT] as? Int ?? 0)][COLOR] = 0
                    let gp = (nodes[(nodes[z][PARENT] as? Int ?? 0)][PARENT] as? Int ?? 0)
                    nodes[gp][COLOR] = 1
                    t.nodes = (nodes as! [[Int]])
                    t = (rotate_right(&t, gp) as! RBTree)
                    nodes = (t.nodes as! [[Int]])
                }
            } else {
                let y = (nodes[(nodes[(nodes[z][PARENT] as? Int ?? 0)][PARENT] as? Int ?? 0)][LEFT] as? Int ?? 0)
                if ((y != NEG_ONE) && ((nodes[y][COLOR] as? Int ?? 0) == 1)) {
                    nodes[(nodes[z][PARENT] as? Int ?? 0)][COLOR] = 0
                    nodes[y][COLOR] = 0
                    let gp = (nodes[(nodes[z][PARENT] as? Int ?? 0)][PARENT] as? Int ?? 0)
                    nodes[gp][COLOR] = 1
                    z = Int(gp)
                } else {
                    if (z == (nodes[(nodes[z][PARENT] as? Int ?? 0)][LEFT] as? Int ?? 0)) {
                        z = (nodes[z][PARENT] as? Int ?? 0)
                        t.nodes = (nodes as! [[Int]])
                        t = (rotate_right(&t, z) as! RBTree)
                        nodes = (t.nodes as! [[Int]])
                    }
                    nodes[(nodes[z][PARENT] as? Int ?? 0)][COLOR] = 0
                    let gp = (nodes[(nodes[z][PARENT] as? Int ?? 0)][PARENT] as? Int ?? 0)
                    nodes[gp][COLOR] = 1
                    t.nodes = (nodes as! [[Int]])
                    t = (rotate_left(&t, gp) as! RBTree)
                    nodes = (t.nodes as! [[Int]])
                }
            }
        }
        nodes = (t.nodes as! [[Int]])
        nodes[t.root][COLOR] = 0
        t.nodes = (nodes as! [[Int]])
        return t
    }
    func tree_insert(_ t: inout RBTree, _ v: Int) -> RBTree {
        var nodes: [[Int]] = t.nodes
        let node: [Int] = ([v, 1, -1, -1, -1] as! [Int])
        nodes = (_append(nodes, node) as! [[Int]])
        let idx: Int = (Int(((nodes).count)) &- 1)
        var y: Int = NEG_ONE
        var x: Int = t.root
        while (x != NEG_ONE) {
            y = Int(x)
            if (v < (nodes[x][LABEL] as? Int ?? 0)) {
                x = (nodes[x][LEFT] as? Int ?? 0)
            } else {
                x = (nodes[x][RIGHT] as? Int ?? 0)
            }
        }
        nodes[idx][PARENT] = Int(y)
        if (y == NEG_ONE) {
            t.root = Int(idx)
        } else if (v < (nodes[y][LABEL] as? Int ?? 0)) {
            nodes[y][LEFT] = Int(idx)
        } else {
            nodes[y][RIGHT] = Int(idx)
        }
        
        t.nodes = (nodes as! [[Int]])
        t = (insert_fix(&t, idx) as! RBTree)
        return t
    }
    func inorder(_ t: RBTree, _ x: Int, _ acc: inout [Int]) -> [Int] {
        if (x == NEG_ONE) {
            return acc
        }
        acc = (inorder((t as! RBTree), (t.nodes[x][LEFT] as? Int ?? 0), &acc) as! [Int])
        acc = (_append(acc, (t.nodes[x][LABEL] as? Int ?? 0)) as! [Int])
        acc = (inorder((t as! RBTree), (t.nodes[x][RIGHT] as? Int ?? 0), &acc) as! [Int])
        return acc
    }
    func main() {
        var t: RBTree = make_tree()
        let values: [Int] = ([10, 20, 30, 15, 25, 5, 1] as! [Int])
        var i: Int = 0
        while (i < Int(((values).count))) {
            t = (tree_insert(&t, (values[i] as? Int ?? 0)) as! RBTree)
            i = Int((i &+ 1))
        }
        var res: [Int] = ([] as! [Int])
        res = (inorder((t as! RBTree), t.root, &res) as! [Int])
        print(_p("[" + res.map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
