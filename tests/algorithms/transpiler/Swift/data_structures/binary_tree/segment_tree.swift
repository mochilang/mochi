// Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:39:08 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    var A: [Int] = ([] as! [Int])
    var N: Int = 0
    var st: [Int] = ([] as! [Int])
    func left_child(_ idx: Int) -> Int {
        return (idx &* 2)
    }
    func right_child(_ idx: Int) -> Int {
        return ((idx &* 2) &+ 1)
    }
    func build(_ idx: Int, _ left: Int, _ right: Int) -> Void {
        if (left == right) {
            st = _set(st, idx, (A[left] as? Int ?? 0))
        } else {
            let mid = (Int((left &+ right)) / 2)
            _ = build(Int(left_child(idx)), left, mid)
            _ = build(Int(right_child(idx)), (mid &+ 1), right)
            let left_val = (st[Int(left_child(idx))] as? Int ?? 0)
            let right_val = (st[Int(right_child(idx))] as? Int ?? 0)
            st = _set(st, idx, Int(((left_val > right_val) ? left_val : right_val)))
        }
    }
    func update_recursive(_ idx: Int, _ left: Int, _ right: Int, _ a: Int, _ b: Int, _ val: Int) -> Bool {
        if ((right < a) || (left > b)) {
            return true
        }
        if (left == right) {
            st = _set(st, idx, Int(val))
            return true
        }
        let mid = (Int((left &+ right)) / 2)
        _ = update_recursive(Int(left_child(idx)), left, mid, a, b, val)
        _ = update_recursive(Int(right_child(idx)), (mid &+ 1), right, a, b, val)
        let left_val = (st[Int(left_child(idx))] as? Int ?? 0)
        let right_val = (st[Int(right_child(idx))] as? Int ?? 0)
        st = _set(st, idx, Int(((left_val > right_val) ? left_val : right_val)))
        return true
    }
    func update(_ a: Int, _ b: Int, _ val: Int) -> Bool {
        return update_recursive(1, 0, (N &- 1), (a &- 1), (b &- 1), val)
    }
    let NEG_INF: Int = -1000000000
    func query_recursive(_ idx: Int, _ left: Int, _ right: Int, _ a: Int, _ b: Int) -> Int {
        if ((right < a) || (left > b)) {
            return NEG_INF
        }
        if ((left >= a) && (right <= b)) {
            return (st[idx] as? Int ?? 0)
        }
        let mid = (Int((left &+ right)) / 2)
        let q1 = Int(query_recursive(Int(left_child(idx)), left, mid, a, b))
        let q2 = Int(query_recursive(Int(right_child(idx)), (mid &+ 1), right, a, b))
        return Int(((q1 > q2) ? q1 : q2))
    }
    func query(_ a: Int, _ b: Int) -> Int {
        return Int(query_recursive(1, 0, (N &- 1), (a &- 1), (b &- 1)))
    }
    func show_data() -> Void {
        var i: Int = 0
        var show_list: [Int] = ([] as! [Int])
        while (i < N) {
            show_list = (_append(show_list, Int(query((i &+ 1), (i &+ 1)))) as! [Int])
            i = Int((i &+ 1))
        }
        print(_p("[" + show_list.map{ if let s = $0 as? String { "\"" + s.replacingOccurrences(of: "\"", with: "\\\"") + "\"" } else { _p($0) } }.joined(separator: ", ") + "]"))
    }
    func main() {
        A = ([1, 2, -4, 7, 3, -5, 6, 11, -20, 9, 14, 15, 5, 2, -8] as! [Int])
        N = Int(((A).count))
        var i: Int = 0
        while (i < (4 &* N)) {
            st = (_append(st, 0) as! [Int])
            i = Int((i &+ 1))
        }
        if (N > 0) {
            _ = build(1, 0, (N &- 1))
        }
        print(_p(Int(query(4, 6))))
        print(_p(Int(query(7, 11))))
        print(_p(Int(query(7, 12))))
        _ = update(1, 3, 111)
        print(_p(Int(query(1, 15))))
        _ = update(7, 8, 235)
        _ = show_data()
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
