// Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:38:27 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
struct FenwickTree: Codable {
    var size: Int
    var tree: [Int]
    init() {
        self.size = 0
        self.tree = []
    }
    init(size: Int, tree: [Int]) {
        self.size = size
        self.tree = tree
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func fenwick_from_list(_ arr: [Int]) -> FenwickTree {
        let size = Int(((arr).count))
        var tree: [Int] = ([] as! [Int])
        var i: Int = 0
        while (i < size) {
            tree = (_append(tree, (arr[i] as? Int ?? 0)) as! [Int])
            i = Int((i &+ 1))
        }
        i = 1
        while (i < size) {
            let j = Int(fenwick_next(i))
            if (j < size) {
                tree = _set(tree, j, Int(((tree[j] as? Int ?? 0) &+ (tree[i] as? Int ?? 0))))
            }
            i = Int((i &+ 1))
        }
        return FenwickTree(size: size, tree: tree)
    }
    func fenwick_empty(_ size: Int) -> FenwickTree {
        var tree: [Int] = ([] as! [Int])
        var i: Int = 0
        while (i < size) {
            tree = (_append(tree, 0) as! [Int])
            i = Int((i &+ 1))
        }
        return FenwickTree(size: size, tree: tree)
    }
    func fenwick_get_array(_ f: FenwickTree) -> [Int] {
        var arr: [Int] = ([] as! [Int])
        var i: Int = 0
        while (i < f.size) {
            arr = (_append(arr, (f.tree[i] as? Int ?? 0)) as! [Int])
            i = Int((i &+ 1))
        }
        i = Int((f.size &- 1))
        while (i > 0) {
            let j = Int(fenwick_next(i))
            if (j < f.size) {
                arr = _set(arr, j, Int(((arr[j] as? Int ?? 0) &- (arr[i] as? Int ?? 0))))
            }
            i = Int((i &- 1))
        }
        return arr
    }
    func bit_and(_ a: Int, _ b: Int) -> Int {
        var ua: Int = a
        var ub: Int = b
        var res: Int = 0
        var bit: Int = 1
        while ((ua != 0) || (ub != 0)) {
            if ((((ua % 2 + 2) % 2) == 1) && (((ub % 2 + 2) % 2) == 1)) {
                res = Int((res &+ bit))
            }
            ua = Int((ua / 2))
            ub = Int((ub / 2))
            bit = Int((bit &* 2))
        }
        return res
    }
    func low_bit(_ x: Int) -> Int {
        if (x == 0) {
            return 0
        }
        return (x &- Int(bit_and(x, (x &- 1))))
    }
    func fenwick_next(_ index: Int) -> Int {
        return (index &+ Int(low_bit(index)))
    }
    func fenwick_prev(_ index: Int) -> Int {
        return (index &- Int(low_bit(index)))
    }
    func fenwick_add(_ f: FenwickTree, _ index: Int, _ value: Int) -> FenwickTree {
        var tree: [Int] = f.tree
        if (index == 0) {
            tree = _set(tree, 0, Int(((tree[0] as? Int ?? 0) &+ value)))
            return FenwickTree(size: f.size, tree: tree)
        }
        var i: Int = index
        while (i < f.size) {
            tree = _set(tree, i, Int(((tree[i] as? Int ?? 0) &+ value)))
            i = Int(fenwick_next(i))
        }
        return FenwickTree(size: f.size, tree: tree)
    }
    func fenwick_update(_ f: FenwickTree, _ index: Int, _ value: Int) -> FenwickTree {
        let current = Int(fenwick_get((f as! FenwickTree), index))
        return fenwick_add((f as! FenwickTree), index, (value &- current))
    }
    func fenwick_prefix(_ f: FenwickTree, _ right: Int) -> Int {
        if (right == 0) {
            return 0
        }
        var result: Int = (f.tree[0] as? Int ?? 0)
        var r: Int = (right &- 1)
        while (r > 0) {
            result = Int((result &+ (f.tree[r] as? Int ?? 0)))
            r = Int(fenwick_prev(r))
        }
        return result
    }
    func fenwick_query(_ f: FenwickTree, _ left: Int, _ right: Int) -> Int {
        return (Int(fenwick_prefix((f as! FenwickTree), right)) &- Int(fenwick_prefix((f as! FenwickTree), left)))
    }
    func fenwick_get(_ f: FenwickTree, _ index: Int) -> Int {
        return Int(fenwick_query((f as! FenwickTree), index, (index &+ 1)))
    }
    func fenwick_rank_query(_ f: FenwickTree, _ value: Int) -> Int {
        var v: Int = (value &- (f.tree[0] as? Int ?? 0))
        if (v < 0) {
            return -1
        }
        var j: Int = 1
        while ((j &* 2) < f.size) {
            j = Int((j &* 2))
        }
        var i: Int = 0
        var jj: Int = j
        while (jj > 0) {
            if (((i &+ jj) < f.size) && ((f.tree[(i &+ jj)] as? Int ?? 0) <= v)) {
                v = Int((v &- (f.tree[(i &+ jj)] as? Int ?? 0)))
                i = Int((i &+ jj))
            }
            jj = Int((jj / 2))
        }
        return i
    }
    let f_base = fenwick_from_list(([1, 2, 3, 4, 5] as! [Int]))
    print(_p("[" + (fenwick_get_array((f_base as! FenwickTree)) as! [Int]).map{ if let s = $0 as? String { "\"" + s.replacingOccurrences(of: "\"", with: "\\\"") + "\"" } else { _p($0) } }.joined(separator: ", ") + "]"))
    var f: FenwickTree = fenwick_from_list(([1, 2, 3, 4, 5] as! [Int]))
    f = (fenwick_add((f as! FenwickTree), 0, 1) as! FenwickTree)
    f = (fenwick_add((f as! FenwickTree), 1, 2) as! FenwickTree)
    f = (fenwick_add((f as! FenwickTree), 2, 3) as! FenwickTree)
    f = (fenwick_add((f as! FenwickTree), 3, 4) as! FenwickTree)
    f = (fenwick_add((f as! FenwickTree), 4, 5) as! FenwickTree)
    print(_p("[" + (fenwick_get_array((f as! FenwickTree)) as! [Int]).map{ if let s = $0 as? String { "\"" + s.replacingOccurrences(of: "\"", with: "\\\"") + "\"" } else { _p($0) } }.joined(separator: ", ") + "]"))
    let f2 = fenwick_from_list(([1, 2, 3, 4, 5] as! [Int]))
    print(_p(Int(fenwick_prefix((f2 as! FenwickTree), 3))))
    print(_p(Int(fenwick_query((f2 as! FenwickTree), 1, 4))))
    let f3 = fenwick_from_list(([1, 2, 0, 3, 0, 5] as! [Int]))
    print(_p(Int(fenwick_rank_query((f3 as! FenwickTree), 0))))
    print(_p(Int(fenwick_rank_query((f3 as! FenwickTree), 2))))
    print(_p(Int(fenwick_rank_query((f3 as! FenwickTree), 1))))
    print(_p(Int(fenwick_rank_query((f3 as! FenwickTree), 3))))
    print(_p(Int(fenwick_rank_query((f3 as! FenwickTree), 5))))
    print(_p(Int(fenwick_rank_query((f3 as! FenwickTree), 6))))
    print(_p(Int(fenwick_rank_query((f3 as! FenwickTree), 11))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
