// Generated by Mochi transpiler v0.10.72 on 2025-08-24 17:05:23 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.isNaN || d.isInfinite {
                return String(d)
            }
            if d.rounded(.towardZero) == d {
                // avoid overflow when converting to Int64
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _num(_ v: Any) -> Double {
    if let d = v as? Double { return d }
    if let i = v as? Int { return Double(i) }
    if let i = v as? Int64 { return Double(i) }
    return 0
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first!
}
func _idx<K: Hashable, V>(_ m: [K: V], _ k: K) -> V? {
    return m[k]
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    var i = idx
    if i < 0 { i += out.count }
    if i < out.count {
        out[i] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: i - out.count + 1))
        out[i] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
struct FenwickTree: Codable {
    var size: Int
    var tree: [Int]
    init() {
        self.size = 0
        self.tree = []
    }
    init(size: Int, tree: [Int]) {
        self.size = size
        self.tree = tree
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func fenwick_from_list(_ arr: [Int]) -> FenwickTree {
        let size = _int(((arr).count))
        var tree: [Int] = ([] as! [Int])
        var i = 0
        while ((i < size)) {
            tree = (_append(tree, (_idx(arr, i) as? Int ?? 0)) as! [Int])
            i = _int((i &+ 1))
        }
        i = 1
        while ((i < size)) {
            let j = _int(fenwick_next(i))
            if ((j < size)) {
                tree = _set(tree, j, { let _tmp0 = _int(((_idx(tree, j) as? Int ?? 0) &+ (_idx(tree, i) as? Int ?? 0))); return _tmp0 }())
            }
            i = _int((i &+ 1))
        }
        return FenwickTree(size: Int(size), tree: (tree as! [Int]))
    }
    func fenwick_empty(_ size: Int) -> FenwickTree {
        var tree: [Int] = ([] as! [Int])
        var i = 0
        while ((i < size)) {
            tree = (_append(tree, 0) as! [Int])
            i = _int((i &+ 1))
        }
        return FenwickTree(size: Int(size), tree: (tree as! [Int]))
    }
    func fenwick_get_array(_ f: FenwickTree) -> [Int] {
        var arr: [Int] = ([] as! [Int])
        var i = 0
        while ((i < f.size)) {
            arr = (_append(arr, (_idx(f.tree, i) as? Int ?? 0)) as! [Int])
            i = _int((i &+ 1))
        }
        i = _int((f.size &- 1))
        while ((i > 0)) {
            let j = _int(fenwick_next(i))
            if ((j < f.size)) {
                arr = _set(arr, j, { let _tmp1 = _int(((_idx(arr, j) as? Int ?? 0) &- (_idx(arr, i) as? Int ?? 0))); return _tmp1 }())
            }
            i = _int((i &- 1))
        }
        return arr
    }
    func bit_and(_ a: Int, _ b: Int) -> Int {
        var ua = a
        var ub = b
        var res = 0
        var bit = 1
        while (((ua != 0) || (ub != 0))) {
            if (((((ua % 2 + 2) % 2) == 1) && (((ub % 2 + 2) % 2) == 1))) {
                res = _int((res &+ bit))
            }
            ua = _int(_int((ua / 2)))
            ub = _int(_int((ub / 2)))
            bit = _int((bit &* 2))
        }
        return res
    }
    func low_bit(_ x: Int) -> Int {
        if ((x == 0)) {
            return 0
        }
        return (x &- _int(bit_and(x, (x &- 1))))
    }
    func fenwick_next(_ index: Int) -> Int {
        return (index &+ _int(low_bit(index)))
    }
    func fenwick_prev(_ index: Int) -> Int {
        return (index &- _int(low_bit(index)))
    }
    func fenwick_add(_ f: FenwickTree, _ index: Int, _ value: Int) -> FenwickTree {
        var tree = f.tree
        if ((index == 0)) {
            tree = _set(tree, 0, { let _tmp2 = _int(((_idx(tree, 0) as? Int ?? 0) &+ value)); return _tmp2 }())
            return FenwickTree(size: (f.size as? Int ?? 0), tree: (tree as! [Int]))
        }
        var i = index
        while ((i < f.size)) {
            tree = _set(tree, i, { let _tmp3 = _int(((_idx(tree, i) as? Int ?? 0) &+ value)); return _tmp3 }())
            i = _int(fenwick_next(i))
        }
        return FenwickTree(size: (f.size as? Int ?? 0), tree: (tree as! [Int]))
    }
    func fenwick_update(_ f: FenwickTree, _ index: Int, _ value: Int) -> FenwickTree {
        let current = _int(fenwick_get((f as! FenwickTree), index))
        return fenwick_add((f as! FenwickTree), index, (value &- current))
    }
    func fenwick_prefix(_ f: FenwickTree, _ right: Int) -> Int {
        if ((right == 0)) {
            return 0
        }
        var result = (_idx(f.tree, 0) as? Int ?? 0)
        var r = (right &- 1)
        while ((r > 0)) {
            result = _int((result &+ (_idx(f.tree, r) as? Int ?? 0)))
            r = _int(fenwick_prev(r))
        }
        return result
    }
    func fenwick_query(_ f: FenwickTree, _ left: Int, _ right: Int) -> Int {
        return (_int(fenwick_prefix((f as! FenwickTree), right)) &- _int(fenwick_prefix((f as! FenwickTree), left)))
    }
    func fenwick_get(_ f: FenwickTree, _ index: Int) -> Int {
        return _int(fenwick_query((f as! FenwickTree), index, (index &+ 1)))
    }
    func fenwick_rank_query(_ f: FenwickTree, _ value: Int) -> Int {
        var v = (value &- (_idx(f.tree, 0) as? Int ?? 0))
        if ((v < 0)) {
            return -1
        }
        var j = 1
        while (((j &* 2) < f.size)) {
            j = _int((j &* 2))
        }
        var i = 0
        var jj = j
        while ((jj > 0)) {
            if ((((i &+ jj) < f.size) && ((_idx(f.tree, (i &+ jj)) as? Int ?? 0) <= v))) {
                v = _int((v &- (_idx(f.tree, (i &+ jj)) as? Int ?? 0)))
                i = _int((i &+ jj))
            }
            jj = _int((jj / 2))
        }
        return i
    }
    let f_base = fenwick_from_list(({
        var _arr: [Int] = []
        _arr = _append(_arr, 1)
        _arr = _append(_arr, 2)
        _arr = _append(_arr, 3)
        _arr = _append(_arr, 4)
        _arr = _append(_arr, 5)
        return _arr
    }() as! [Int]))
    print(_p("[" + (fenwick_get_array((f_base as! FenwickTree)) as! [Int]).map{ if let s = $0 as? String { "\"" + s.replacingOccurrences(of: "\"", with: "\\\"") + "\"" } else { _p($0) } }.joined(separator: ", ") + "]"))
    var f = fenwick_from_list(({
        var _arr: [Int] = []
        _arr = _append(_arr, 1)
        _arr = _append(_arr, 2)
        _arr = _append(_arr, 3)
        _arr = _append(_arr, 4)
        _arr = _append(_arr, 5)
        return _arr
    }() as! [Int]))
    f = (fenwick_add((f as! FenwickTree), 0, 1) as! FenwickTree)
    f = (fenwick_add((f as! FenwickTree), 1, 2) as! FenwickTree)
    f = (fenwick_add((f as! FenwickTree), 2, 3) as! FenwickTree)
    f = (fenwick_add((f as! FenwickTree), 3, 4) as! FenwickTree)
    f = (fenwick_add((f as! FenwickTree), 4, 5) as! FenwickTree)
    print(_p("[" + (fenwick_get_array((f as! FenwickTree)) as! [Int]).map{ if let s = $0 as? String { "\"" + s.replacingOccurrences(of: "\"", with: "\\\"") + "\"" } else { _p($0) } }.joined(separator: ", ") + "]"))
    let f2 = fenwick_from_list(({
        var _arr: [Int] = []
        _arr = _append(_arr, 1)
        _arr = _append(_arr, 2)
        _arr = _append(_arr, 3)
        _arr = _append(_arr, 4)
        _arr = _append(_arr, 5)
        return _arr
    }() as! [Int]))
    print(_p(_int(fenwick_prefix((f2 as! FenwickTree), 3))))
    print(_p(_int(fenwick_query((f2 as! FenwickTree), 1, 4))))
    let f3 = fenwick_from_list(({
        var _arr: [Int] = []
        _arr = _append(_arr, 1)
        _arr = _append(_arr, 2)
        _arr = _append(_arr, 0)
        _arr = _append(_arr, 3)
        _arr = _append(_arr, 0)
        _arr = _append(_arr, 5)
        return _arr
    }() as! [Int]))
    print(_p(_int(fenwick_rank_query((f3 as! FenwickTree), 0))))
    print(_p(_int(fenwick_rank_query((f3 as! FenwickTree), 2))))
    print(_p(_int(fenwick_rank_query((f3 as! FenwickTree), 1))))
    print(_p(_int(fenwick_rank_query((f3 as! FenwickTree), 3))))
    print(_p(_int(fenwick_rank_query((f3 as! FenwickTree), 5))))
    print(_p(_int(fenwick_rank_query((f3 as! FenwickTree), 6))))
    print(_p(_int(fenwick_rank_query((f3 as! FenwickTree), 11))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
