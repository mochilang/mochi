// Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:38:16 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
struct Node: Codable {
    var value: Int
    var left: Int
    var right: Int
    init() {
        self.value = 0
        self.left = 0
        self.right = 0
    }
    init(value: Int, left: Int, right: Int) {
        self.value = value
        self.left = left
        self.right = right
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func node_sum(_ tree: [Node], _ index: Int) -> Int {
        if (index == Int(-1)) {
            return 0
        }
        let node = (tree[index] as! Node)
        return ((node.value &+ Int(node_sum((tree as! [Node]), node.left))) &+ Int(node_sum((tree as! [Node]), node.right)))
    }
    let example: [Node] = ([Node(value: 10, left: 1, right: 2), Node(value: 5, left: 3, right: -1), Node(value: -3, left: 4, right: 5), Node(value: 12, left: -1, right: -1), Node(value: 8, left: -1, right: -1), Node(value: 0, left: -1, right: -1)] as! [Node])
    print(_p(Int(node_sum((example as! [Node]), 0))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
