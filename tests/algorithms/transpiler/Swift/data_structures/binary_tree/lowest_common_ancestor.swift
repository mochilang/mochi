// Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:38:46 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func pow2(_ exp: Int) -> Int {
        var res: Int = 1
        var i: Int = 0
        while (i < exp) {
            res = Int((res &* 2))
            i = Int((i &+ 1))
        }
        return res
    }
    func create_sparse(_ max_node: Int, _ parent: inout [[Int]]) -> [[Int]] {
        var j: Int = 1
        while (Int(pow2(j)) < max_node) {
            var i: Int = 1
            while (i <= max_node) {
                parent[j][i] = (parent[(j &- 1)][(parent[(j &- 1)][i] as? Int ?? 0)] as? Int ?? 0)
                i = Int((i &+ 1))
            }
            j = Int((j &+ 1))
        }
        return parent
    }
    func lowest_common_ancestor(_ u: Int, _ v: Int, _ level: [Int], _ parent: [[Int]]) -> Int {
        var u = u
        var v = v
        if ((level[u] as? Int ?? 0) < (level[v] as? Int ?? 0)) {
            let temp = u
            u = Int(v)
            v = Int(temp)
        }
        var i: Int = 18
        while (i >= 0) {
            if (((level[u] as? Int ?? 0) &- Int(pow2(i))) >= (level[v] as? Int ?? 0)) {
                u = (parent[i][u] as? Int ?? 0)
            }
            i = Int((i &- 1))
        }
        if (u == v) {
            return u
        }
        i = 18
        while (i >= 0) {
            let pu = (parent[i][u] as? Int ?? 0)
            let pv = (parent[i][v] as? Int ?? 0)
            if ((pu != 0) && (pu != pv)) {
                u = Int(pu)
                v = Int(pv)
            }
            i = Int((i &- 1))
        }
        return (parent[0][u] as? Int ?? 0)
    }
    func breadth_first_search(_ level: inout [Int], _ parent: inout [[Int]], _ max_node: Int, _ graph: [Int: [Int]], _ root: Int) {
        level = _set(level, root, 0)
        var q: [Int] = ([] as! [Int])
        q = (_append(q, root) as! [Int])
        var head: Int = 0
        while (head < Int(((q).count))) {
            let u = (q[head] as? Int ?? 0)
            head = Int((head &+ 1))
            let adj: [Int] = (graph[u] as! [Int])
            var j: Int = 0
            while (j < Int(((adj).count))) {
                let v = (adj[j] as? Int ?? 0)
                if ((level[v] as? Int ?? 0) == (0 &- 1)) {
                    level = _set(level, v, Int(((level[u] as? Int ?? 0) &+ 1)))
                    parent[0][v] = Int(u)
                    q = (_append(q, v) as! [Int])
                }
                j = Int((j &+ 1))
            }
        }
    }
    func main() {
        let max_node = 13
        var parent: [[Int]] = ([] as! [[Int]])
        var i: Int = 0
        while (i < 20) {
            var row: [Int] = ([] as! [Int])
            var j: Int = 0
            while (j < (max_node &+ 10)) {
                row = (_append(row, 0) as! [Int])
                j = Int((j &+ 1))
            }
            parent = (_append(parent, row) as! [[Int]])
            i = Int((i &+ 1))
        }
        var level: [Int] = ([] as! [Int])
        i = 0
        while (i < (max_node &+ 10)) {
            level = (_append(level, (0 &- 1)) as! [Int])
            i = Int((i &+ 1))
        }
        var graph: [Int: [Int]] = ([:] as! [Int: [Int]])
        graph = _set(graph, 1, ([2, 3, 4] as! [Int]))
        graph = _set(graph, 2, ([5] as! [Int]))
        graph = _set(graph, 3, ([6, 7] as! [Int]))
        graph = _set(graph, 4, ([8] as! [Int]))
        graph = _set(graph, 5, ([9, 10] as! [Int]))
        graph = _set(graph, 6, ([11] as! [Int]))
        graph = _set(graph, 7, ([] as! [Int]))
        graph = _set(graph, 8, ([12, 13] as! [Int]))
        graph = _set(graph, 9, ([] as! [Int]))
        graph = _set(graph, 10, ([] as! [Int]))
        graph = _set(graph, 11, ([] as! [Int]))
        graph = _set(graph, 12, ([] as! [Int]))
        graph = _set(graph, 13, ([] as! [Int]))
        _ = breadth_first_search(&level, &parent, max_node, (graph as! [Int: [Int]]), 1)
        parent = (create_sparse(max_node, &parent) as! [[Int]])
        print(_p(("LCA of node 1 and 3 is: " + String(describing: Int(lowest_common_ancestor(1, 3, (level as! [Int]), (parent as! [[Int]])))))))
        print(_p(("LCA of node 5 and 6 is: " + String(describing: Int(lowest_common_ancestor(5, 6, (level as! [Int]), (parent as! [[Int]])))))))
        print(_p(("LCA of node 7 and 11 is: " + String(describing: Int(lowest_common_ancestor(7, 11, (level as! [Int]), (parent as! [[Int]])))))))
        print(_p(("LCA of node 6 and 7 is: " + String(describing: Int(lowest_common_ancestor(6, 7, (level as! [Int]), (parent as! [[Int]])))))))
        print(_p(("LCA of node 4 and 12 is: " + String(describing: Int(lowest_common_ancestor(4, 12, (level as! [Int]), (parent as! [[Int]])))))))
        print(_p(("LCA of node 8 and 8 is: " + String(describing: Int(lowest_common_ancestor(8, 8, (level as! [Int]), (parent as! [[Int]])))))))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
