// Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:38:19 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
indirect enum Tree {
    case Empty()
    case Node(left: Tree, value: Int, right: Tree)
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func dfs(_ node: Tree, _ target: Int, _ current: Int) -> Int {
        return Int({ () -> Int in
        switch node {
            case let .Empty():
            return 0
            case let .Node(l, v, r):
            return ((Int((((current &+ v) == target) ? 1 : 0)) &+ Int(dfs((l as! Tree), target, (current &+ v)))) &+ Int(dfs((r as! Tree), target, (current &+ v))))
            default:
            var z: Int
            return z
        }
    }())
}
func path_sum(_ node: Tree, _ target: Int) -> Int {
    return Int({ () -> Int in
    switch node {
        case let .Empty():
        return 0
        case let .Node(l, v, r):
        return ((Int(dfs((node as! Tree), target, 0)) &+ Int(path_sum((l as! Tree), target))) &+ Int(path_sum((r as! Tree), target)))
        default:
        var z: Int
        return z
    }
}())
}
func sample_tree_one() -> Tree {
    return (Tree.Node(value: 10, left: Tree.Node(value: 5, left: Tree.Node(value: 3, left: Tree.Node(value: 3, left: Empty, right: Empty), right: Tree.Node(value: -2, left: Empty, right: Empty)), right: Tree.Node(value: 2, left: Empty, right: Tree.Node(value: 1, left: Empty, right: Empty))), right: Tree.Node(value: -3, left: Empty, right: Tree.Node(value: 11, left: Empty, right: Empty))) as! Tree)
}
func sample_tree_two() -> Tree {
    return (Tree.Node(value: 10, left: Tree.Node(value: 5, left: Tree.Node(value: 3, left: Tree.Node(value: 3, left: Empty, right: Empty), right: Tree.Node(value: -2, left: Empty, right: Empty)), right: Tree.Node(value: 2, left: Empty, right: Tree.Node(value: 1, left: Empty, right: Empty))), right: Tree.Node(value: -3, left: Empty, right: Tree.Node(value: 10, left: Empty, right: Empty))) as! Tree)
}
func main() {
    let tree1 = sample_tree_one()
    print(_p(Int(path_sum((tree1 as! Tree), 8))))
    print(_p(Int(path_sum((tree1 as! Tree), 7))))
    let tree2 = sample_tree_two()
    print(_p(Int(path_sum((tree2 as! Tree), 8))))
}
_ = main()
let _benchEnd = _now()
let _benchMemEnd = _mem()
print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
