// Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:38:39 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
struct Tree: Codable {
    var data: [Double]
    var left: [Int]
    var right: [Int]
    init() {
        self.data = []
        self.left = []
        self.right = []
    }
    init(data: [Double], left: [Int], right: [Int]) {
        self.data = data
        self.left = left
        self.right = right
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let NONE = (0 &- 1)
    func inorder(_ tree: Tree, _ index: Int) -> [Double] {
        var res: [Double] = ([] as! [Double])
        if (index == NONE) {
            return res
        }
        let left_idx = (tree.left[index] as? Int ?? 0)
        if (left_idx != NONE) {
            res = ((concat((res as! [Any?]), (inorder((tree as! Tree), left_idx) as! [Double])) as! [Any?]) as! [Double])
        }
        res = (_append(res, Double(tree.data[index])) as! [Double])
        let right_idx = (tree.right[index] as? Int ?? 0)
        if (right_idx != NONE) {
            res = ((concat((res as! [Any?]), (inorder((tree as! Tree), right_idx) as! [Double])) as! [Any?]) as! [Double])
        }
        return res
    }
    func is_sorted(_ tree: Tree, _ index: Int) -> Bool {
        if (index == NONE) {
            return true
        }
        let left_idx = (tree.left[index] as? Int ?? 0)
        if (left_idx != NONE) {
            if (Double(tree.data[index]) < Double(tree.data[left_idx])) {
                return false
            }
            if (!is_sorted((tree as! Tree), left_idx)) {
                return false
            }
        }
        let right_idx = (tree.right[index] as? Int ?? 0)
        if (right_idx != NONE) {
            if (Double(tree.data[index]) > Double(tree.data[right_idx])) {
                return false
            }
            if (!is_sorted((tree as! Tree), right_idx)) {
                return false
            }
        }
        return true
    }
    let tree1 = Tree(data: ([2.1, 2.0, 2.2] as! [Double]), left: ([1, NONE, NONE] as! [Int]), right: ([2, NONE, NONE] as! [Int]))
    print(_p(((("Tree " + "[" + (inorder((tree1 as! Tree), 0) as! [Double]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]") + " is sorted: ") + String(describing: is_sorted((tree1 as! Tree), 0)))))
    let tree2 = Tree(data: ([2.1, 2.0, 2.0] as! [Double]), left: ([1, NONE, NONE] as! [Int]), right: ([2, NONE, NONE] as! [Int]))
    print(_p(((("Tree " + "[" + (inorder((tree2 as! Tree), 0) as! [Double]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]") + " is sorted: ") + String(describing: is_sorted((tree2 as! Tree), 0)))))
    let tree3 = Tree(data: ([2.1, 2.0, 2.1] as! [Double]), left: ([1, NONE, NONE] as! [Int]), right: ([2, NONE, NONE] as! [Int]))
    print(_p(((("Tree " + "[" + (inorder((tree3 as! Tree), 0) as! [Double]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]") + " is sorted: ") + String(describing: is_sorted((tree3 as! Tree), 0)))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
