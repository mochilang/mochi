// Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:38:59 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func build(_ arr: [Int], _ combine: @escaping (Int, Int) -> Int) -> [Int] {
        let n = Int(((arr).count))
        var st: [Int] = ([] as! [Int])
        var i: Int = 0
        while (i < (2 &* n)) {
            st = (_append(st, 0) as! [Int])
            i = Int((i &+ 1))
        }
        i = 0
        while (i < n) {
            st = _set(st, (n &+ i), (arr[i] as? Int ?? 0))
            i = Int((i &+ 1))
        }
        i = Int((n &- 1))
        while (i > 0) {
            st = _set(st, i, Int(combine((st[(i &* 2)] as? Int ?? 0), (st[((i &* 2) &+ 1)] as? Int ?? 0))))
            i = Int((i &- 1))
        }
        return st
    }
    func update(_ st: inout [Int], _ n: Int, _ combine: @escaping (Int, Int) -> Int, _ p: Int, _ v: Int) {
        var idx: Int = (p &+ n)
        st = _set(st, idx, Int(v))
        while (idx > 1) {
            idx = Int((idx / 2))
            st = _set(st, idx, Int(combine((st[(idx &* 2)] as? Int ?? 0), (st[((idx &* 2) &+ 1)] as? Int ?? 0))))
        }
    }
    func query(_ st: [Int], _ n: Int, _ combine: @escaping (Int, Int) -> Int, _ left: Int, _ right: Int) -> Int {
        var l: Int = (left &+ n)
        var r: Int = (right &+ n)
        var res: Int = 0
        var has: Bool = false
        while (l <= r) {
            if (((l % 2 + 2) % 2) == 1) {
                if (!has) {
                    res = (st[l] as? Int ?? 0)
                    has = true
                } else {
                    res = Int(combine(res, (st[l] as? Int ?? 0)))
                }
                l = Int((l &+ 1))
            }
            if (((r % 2 + 2) % 2) == 0) {
                if (!has) {
                    res = (st[r] as? Int ?? 0)
                    has = true
                } else {
                    res = Int(combine(res, (st[r] as? Int ?? 0)))
                }
                r = Int((r &- 1))
            }
            l = Int((l / 2))
            r = Int((r / 2))
        }
        return res
    }
    func add(_ a: Int, _ b: Int) -> Int {
        return (a &+ b)
    }
    func min_int(_ a: Int, _ b: Int) -> Int {
        if (a < b) {
            return a
        } else {
            return b
        }
    }
    func max_int(_ a: Int, _ b: Int) -> Int {
        if (a > b) {
            return a
        } else {
            return b
        }
    }
    let arr1: [Int] = ([1, 2, 3] as! [Int])
    let st1: [Int] = (build((arr1 as! [Int]), (add as! (Int, Int) -> Int)) as! [Int])
    print(_p(String(describing: Int(query((st1 as! [Int]), Int(((arr1).count)), (add as! (Int, Int) -> Int), 0, 2)))))
    let arr2: [Int] = ([3, 1, 2] as! [Int])
    let st2: [Int] = (build((arr2 as! [Int]), (min_int as! (Int, Int) -> Int)) as! [Int])
    print(_p(String(describing: Int(query((st2 as! [Int]), Int(((arr2).count)), (min_int as! (Int, Int) -> Int), 0, 2)))))
    let arr3: [Int] = ([2, 3, 1] as! [Int])
    let st3: [Int] = (build((arr3 as! [Int]), (max_int as! (Int, Int) -> Int)) as! [Int])
    print(_p(String(describing: Int(query((st3 as! [Int]), Int(((arr3).count)), (max_int as! (Int, Int) -> Int), 0, 2)))))
    let arr4: [Int] = ([1, 5, 7, -1, 6] as! [Int])
    let n4 = Int(((arr4).count))
    var st4: [Int] = (build((arr4 as! [Int]), (add as! (Int, Int) -> Int)) as! [Int])
    _ = update(&st4, n4, (add as! (Int, Int) -> Int), 1, -1)
    _ = update(&st4, n4, (add as! (Int, Int) -> Int), 2, 3)
    print(_p(String(describing: Int(query((st4 as! [Int]), n4, (add as! (Int, Int) -> Int), 1, 2)))))
    print(_p(String(describing: Int(query((st4 as! [Int]), n4, (add as! (Int, Int) -> Int), 1, 1)))))
    _ = update(&st4, n4, (add as! (Int, Int) -> Int), 4, 1)
    print(_p(String(describing: Int(query((st4 as! [Int]), n4, (add as! (Int, Int) -> Int), 3, 4)))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
