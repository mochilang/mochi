// Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:38:43 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func init_int_array(_ n: Int) -> [Int] {
        var arr: [Int] = ([] as! [Int])
        var i: Int = 0
        while (i < ((4 &* n) &+ 5)) {
            arr = (_append(arr, 0) as! [Int])
            i = Int((i &+ 1))
        }
        return arr
    }
    func init_bool_array(_ n: Int) -> [Bool] {
        var arr: [Bool] = ([] as! [Bool])
        var i: Int = 0
        while (i < ((4 &* n) &+ 5)) {
            arr = (_append(arr, false) as! [Bool])
            i = Int((i &+ 1))
        }
        return arr
    }
    func left(_ idx: Int) -> Int {
        return (idx &* 2)
    }
    func right(_ idx: Int) -> Int {
        return ((idx &* 2) &+ 1)
    }
    func build(_ segment_tree: inout [Int], _ idx: Int, _ l: Int, _ r: Int, _ a: [Int]) {
        if (l == r) {
            segment_tree = _set(segment_tree, idx, (a[(l &- 1)] as? Int ?? 0))
        } else {
            let mid = (Int((l &+ r)) / 2)
            _ = build(&segment_tree, Int(left(idx)), l, mid, (a as! [Int]))
            _ = build(&segment_tree, Int(right(idx)), (mid &+ 1), r, (a as! [Int]))
            let lv = (segment_tree[Int(left(idx))] as? Int ?? 0)
            let rv = (segment_tree[Int(right(idx))] as? Int ?? 0)
            if (lv > rv) {
                segment_tree = _set(segment_tree, idx, Int(lv))
            } else {
                segment_tree = _set(segment_tree, idx, Int(rv))
            }
        }
    }
    func update(_ segment_tree: inout [Int], _ lazy: inout [Int], _ flag: inout [Bool], _ idx: Int, _ l: Int, _ r: Int, _ a: Int, _ b: Int, _ val: Int) {
        if (flag[idx] as! Bool) {
            segment_tree = _set(segment_tree, idx, (lazy[idx] as? Int ?? 0))
            flag = _set(flag, idx, false)
            if (l != r) {
                lazy = _set(lazy, Int(left(idx)), (lazy[idx] as? Int ?? 0))
                lazy = _set(lazy, Int(right(idx)), (lazy[idx] as? Int ?? 0))
                flag = _set(flag, Int(left(idx)), true)
                flag = _set(flag, Int(right(idx)), true)
            }
        }
        if ((r < a) || (l > b)) {
            return
        }
        if ((l >= a) && (r <= b)) {
            segment_tree = _set(segment_tree, idx, Int(val))
            if (l != r) {
                lazy = _set(lazy, Int(left(idx)), Int(val))
                lazy = _set(lazy, Int(right(idx)), Int(val))
                flag = _set(flag, Int(left(idx)), true)
                flag = _set(flag, Int(right(idx)), true)
            }
            return
        }
        let mid = (Int((l &+ r)) / 2)
        _ = update(&segment_tree, &lazy, &flag, Int(left(idx)), l, mid, a, b, val)
        _ = update(&segment_tree, &lazy, &flag, Int(right(idx)), (mid &+ 1), r, a, b, val)
        let lv = (segment_tree[Int(left(idx))] as? Int ?? 0)
        let rv = (segment_tree[Int(right(idx))] as? Int ?? 0)
        if (lv > rv) {
            segment_tree = _set(segment_tree, idx, Int(lv))
        } else {
            segment_tree = _set(segment_tree, idx, Int(rv))
        }
    }
    let NEG_INF: Int = -1000000000
    func query(_ segment_tree: inout [Int], _ lazy: inout [Int], _ flag: inout [Bool], _ idx: Int, _ l: Int, _ r: Int, _ a: Int, _ b: Int) -> Int {
        if (flag[idx] as! Bool) {
            segment_tree = _set(segment_tree, idx, (lazy[idx] as? Int ?? 0))
            flag = _set(flag, idx, false)
            if (l != r) {
                lazy = _set(lazy, Int(left(idx)), (lazy[idx] as? Int ?? 0))
                lazy = _set(lazy, Int(right(idx)), (lazy[idx] as? Int ?? 0))
                flag = _set(flag, Int(left(idx)), true)
                flag = _set(flag, Int(right(idx)), true)
            }
        }
        if ((r < a) || (l > b)) {
            return NEG_INF
        }
        if ((l >= a) && (r <= b)) {
            return (segment_tree[idx] as? Int ?? 0)
        }
        let mid = (Int((l &+ r)) / 2)
        let q1 = Int(query(&segment_tree, &lazy, &flag, Int(left(idx)), l, mid, a, b))
        let q2 = Int(query(&segment_tree, &lazy, &flag, Int(right(idx)), (mid &+ 1), r, a, b))
        if (q1 > q2) {
            return q1
        } else {
            return q2
        }
    }
    func segtree_to_string(_ segment_tree: inout [Int], _ lazy: inout [Int], _ flag: inout [Bool], _ n: Int) -> String {
        var res: String = "["
        var i: Int = 1
        while (i <= n) {
            let v = Int(query(&segment_tree, &lazy, &flag, 1, 1, n, i, i))
            res = ((res + String(describing: v)) as! String)
            if (i < n) {
                res = ((res + ", ") as! String)
            }
            i = Int((i &+ 1))
        }
        res = ((res + "]") as! String)
        return res
    }
    let A: [Int] = ([1, 2, -4, 7, 3, -5, 6, 11, -20, 9, 14, 15, 5, 2, -8] as! [Int])
    let n = 15
    var segment_tree: [Int] = (init_int_array(n) as! [Int])
    var lazy: [Int] = (init_int_array(n) as! [Int])
    var flag: [Bool] = (init_bool_array(n) as! [Bool])
    _ = build(&segment_tree, 1, 1, n, (A as! [Int]))
    print(_p(Int(query(&segment_tree, &lazy, &flag, 1, 1, n, 4, 6))))
    print(_p(Int(query(&segment_tree, &lazy, &flag, 1, 1, n, 7, 11))))
    print(_p(Int(query(&segment_tree, &lazy, &flag, 1, 1, n, 7, 12))))
    _ = update(&segment_tree, &lazy, &flag, 1, 1, n, 1, 3, 111)
    print(_p(Int(query(&segment_tree, &lazy, &flag, 1, 1, n, 1, 15))))
    _ = update(&segment_tree, &lazy, &flag, 1, 1, n, 7, 8, 235)
    print(_p(String(describing: segtree_to_string(&segment_tree, &lazy, &flag, n))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
