// Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:39:22 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
struct Node: Codable {
    var minn: Int
    var maxx: Int
    var map_left: [Int]
    var left: Int
    var right: Int
    init() {
        self.minn = 0
        self.maxx = 0
        self.map_left = []
        self.left = 0
        self.right = 0
    }
    init(minn: Int, maxx: Int, map_left: [Int], left: Int, right: Int) {
        self.minn = minn
        self.maxx = maxx
        self.map_left = map_left
        self.left = left
        self.right = right
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    var nodes: [Node] = ([] as! [Node])
    func make_list(_ length: Int, _ value: Int) -> [Int] {
        var lst: [Int] = ([] as! [Int])
        var i: Int = 0
        while (i < length) {
            lst = (_append(lst, value) as! [Int])
            i = Int((i &+ 1))
        }
        return lst
    }
    func min_list(_ arr: [Int]) -> Int {
        var m: Int = (arr[0] as? Int ?? 0)
        var i: Int = 1
        while (i < Int(((arr).count))) {
            if ((arr[i] as? Int ?? 0) < m) {
                m = (arr[i] as? Int ?? 0)
            }
            i = Int((i &+ 1))
        }
        return m
    }
    func max_list(_ arr: [Int]) -> Int {
        var m: Int = (arr[0] as? Int ?? 0)
        var i: Int = 1
        while (i < Int(((arr).count))) {
            if ((arr[i] as? Int ?? 0) > m) {
                m = (arr[i] as? Int ?? 0)
            }
            i = Int((i &+ 1))
        }
        return m
    }
    func build_tree(_ arr: [Int]) -> Int {
        var n: Node = Node(minn: Int(min_list((arr as! [Int]))), maxx: Int(max_list((arr as! [Int]))), map_left: (make_list(Int(((arr).count)), 0) as! [Int]), left: -1, right: -1)
        if (n.minn == n.maxx) {
            nodes = (_append(nodes, n) as! [Node])
            return (Int(((nodes).count)) &- 1)
        }
        let pivot = (Int((n.minn &+ n.maxx)) / 2)
        var left_arr: [Int] = ([] as! [Int])
        var right_arr: [Int] = ([] as! [Int])
        var i: Int = 0
        while (i < Int(((arr).count))) {
            let num = (arr[i] as? Int ?? 0)
            if (num <= pivot) {
                left_arr = (_append(left_arr, num) as! [Int])
            } else {
                right_arr = (_append(right_arr, num) as! [Int])
            }
            var ml: [Int] = n.map_left
            ml = _set(ml, i, Int(((left_arr).count)))
            n.map_left = (ml as! [Int])
            i = Int((i &+ 1))
        }
        if (Int(((left_arr).count)) > 0) {
            n.left = Int(build_tree((left_arr as! [Int])))
        }
        if (Int(((right_arr).count)) > 0) {
            n.right = Int(build_tree((right_arr as! [Int])))
        }
        nodes = (_append(nodes, n) as! [Node])
        return (Int(((nodes).count)) &- 1)
    }
    func rank_till_index(_ node_idx: Int, _ num: Int, _ index: Int) -> Int {
        if ((index < 0) || (node_idx < 0)) {
            return 0
        }
        let node = (nodes[node_idx] as! Node)
        if (node.minn == node.maxx) {
            if (node.minn == num) {
                return (index &+ 1)
            } else {
                return 0
            }
        }
        let pivot = (Int((node.minn &+ node.maxx)) / 2)
        if (num <= pivot) {
            return Int(rank_till_index(node.left, num, ((node.map_left[index] as? Int ?? 0) &- 1)))
        } else {
            return Int(rank_till_index(node.right, num, (index &- (node.map_left[index] as? Int ?? 0))))
        }
    }
    func rank(_ node_idx: Int, _ num: Int, _ start: Int, _ end: Int) -> Int {
        if (start > end) {
            return 0
        }
        let rank_till_end = Int(rank_till_index(node_idx, num, end))
        let rank_before_start = Int(rank_till_index(node_idx, num, (start &- 1)))
        return (rank_till_end &- rank_before_start)
    }
    func quantile(_ node_idx: Int, _ index: Int, _ start: Int, _ end: Int) -> Int {
        if (((index > Int((end &- start))) || (start > end)) || (node_idx < 0)) {
            return -1
        }
        let node = (nodes[node_idx] as! Node)
        if (node.minn == node.maxx) {
            return node.minn
        }
        let left_start = Int(((start == 0) ? 0 : (node.map_left[(start &- 1)] as? Int ?? 0)))
        let num_left = ((node.map_left[end] as? Int ?? 0) &- left_start)
        if (num_left > index) {
            return Int(quantile(node.left, index, left_start, ((node.map_left[end] as? Int ?? 0) &- 1)))
        } else {
            return Int(quantile(node.right, (index &- num_left), (start &- left_start), (end &- (node.map_left[end] as? Int ?? 0))))
        }
    }
    func range_counting(_ node_idx: Int, _ start: Int, _ end: Int, _ start_num: Int, _ end_num: Int) -> Int {
        if (((start > end) || (node_idx < 0)) || (start_num > end_num)) {
            return 0
        }
        let node = (nodes[node_idx] as! Node)
        if ((node.minn > end_num) || (node.maxx < start_num)) {
            return 0
        }
        if ((start_num <= node.minn) && (node.maxx <= end_num)) {
            return ((end &- start) &+ 1)
        }
        let left = Int(range_counting(node.left, Int(((start == 0) ? 0 : (node.map_left[(start &- 1)] as? Int ?? 0))), ((node.map_left[end] as? Int ?? 0) &- 1), start_num, end_num))
        let right = Int(range_counting(node.right, (start &- Int(((start == 0) ? 0 : (node.map_left[(start &- 1)] as? Int ?? 0)))), (end &- (node.map_left[end] as? Int ?? 0)), start_num, end_num))
        return (left &+ right)
    }
    let test_array: [Int] = ([2, 1, 4, 5, 6, 0, 8, 9, 1, 2, 0, 6, 4, 2, 0, 6, 5, 3, 2, 7] as! [Int])
    let root = Int(build_tree((test_array as! [Int])))
    print(_p(("rank_till_index 6 at 6 -> " + String(describing: Int(rank_till_index(root, 6, 6))))))
    print(_p(("rank 6 in [3,13] -> " + String(describing: Int(rank(root, 6, 3, 13))))))
    print(_p(("quantile index 2 in [2,5] -> " + String(describing: Int(quantile(root, 2, 2, 5))))))
    print(_p(("range_counting [3,7] in [1,10] -> " + String(describing: Int(range_counting(root, 1, 10, 3, 7))))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
