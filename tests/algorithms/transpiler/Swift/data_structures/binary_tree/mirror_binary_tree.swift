// Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:38:57 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
struct Tree: Codable {
    var values: [Int]
    var left: [Int]
    var right: [Int]
    var root: Int
    init() {
        self.values = []
        self.left = []
        self.right = []
        self.root = 0
    }
    init(values: [Int], left: [Int], right: [Int], root: Int) {
        self.values = values
        self.left = left
        self.right = right
        self.root = root
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func mirror_node(_ left: inout [Int], _ right: inout [Int], _ idx: Int) {
        if (idx == Int(-1)) {
            return
        }
        let temp = (left[idx] as? Int ?? 0)
        left = _set(left, idx, (right[idx] as? Int ?? 0))
        right = _set(right, idx, Int(temp))
        _ = mirror_node(&left, &right, (left[idx] as? Int ?? 0))
        _ = mirror_node(&left, &right, (right[idx] as? Int ?? 0))
    }
    func mirror(_ tree: inout Tree) -> Tree {
        _ = mirror_node(&tree.left, &tree.right, tree.root)
        return tree
    }
    func inorder(_ tree: Tree, _ idx: Int) -> [Int] {
        if (idx == Int(-1)) {
            return ([] as! [Int])
        }
        let left_vals: [Int] = (inorder((tree as! Tree), (tree.left[idx] as? Int ?? 0)) as! [Int])
        let right_vals: [Int] = (inorder((tree as! Tree), (tree.right[idx] as? Int ?? 0)) as! [Int])
        return ((concat((concat((left_vals as! [Any?]), ([(tree.values[idx] as? Int ?? 0)] as! [Int])) as! [Any?]), right_vals) as! [Any?]) as! [Int])
    }
    func make_tree_zero() -> Tree {
        return Tree(values: ([0] as! [Int]), left: ([-1] as! [Int]), right: ([-1] as! [Int]), root: 0)
    }
    func make_tree_seven() -> Tree {
        return Tree(values: ([1, 2, 3, 4, 5, 6, 7] as! [Int]), left: ([1, 3, 5, -1, -1, -1, -1] as! [Int]), right: ([2, 4, 6, -1, -1, -1, -1] as! [Int]), root: 0)
    }
    func make_tree_nine() -> Tree {
        return Tree(values: ([1, 2, 3, 4, 5, 6, 7, 8, 9] as! [Int]), left: ([1, 3, -1, 6, -1, -1, -1, -1, -1] as! [Int]), right: ([2, 4, 5, 7, 8, -1, -1, -1, -1] as! [Int]), root: 0)
    }
    func main() {
        let names: [String] = (["zero", "seven", "nine"] as! [String])
        let trees: [Tree] = ([make_tree_zero(), make_tree_seven(), make_tree_nine()] as! [Tree])
        var i: Int = 0
        while (i < Int(((trees).count))) {
            var tree = (trees[i] as! Tree)
            print(_p(((("      The " + (names[i] as! String)) + " tree: ") + "[" + (inorder((tree as! Tree), tree.root) as! [Int]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]")))
            let mirrored = mirror(&tree)
            print(_p(((("Mirror of " + (names[i] as! String)) + " tree: ") + "[" + (inorder((mirrored as! Tree), mirrored.root) as! [Int]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]")))
            i = Int((i &+ 1))
        }
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
