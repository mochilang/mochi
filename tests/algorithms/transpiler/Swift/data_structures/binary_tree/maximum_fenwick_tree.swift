// Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:38:50 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func zeros(_ n: Int) -> [Int] {
        var res: [Int] = ([] as! [Int])
        var i: Int = 0
        while (i < n) {
            res = (_append(res, 0) as! [Int])
            i = Int((i &+ 1))
        }
        return res
    }
    func update(_ arr: inout [Int], _ idx: Int, _ value: Int) -> Void {
        arr = _set(arr, idx, Int(value))
    }
    func query(_ arr: [Int], _ left: Int, _ right: Int) -> Int {
        var result: Int = 0
        var i: Int = left
        while (i < right) {
            if ((arr[i] as? Int ?? 0) > result) {
                result = (arr[i] as? Int ?? 0)
            }
            i = Int((i &+ 1))
        }
        return result
    }
    var arr: [Int] = ([0, 0, 0, 0, 0] as! [Int])
    print(_p(Int(query((arr as! [Int]), 0, 5))))
    _ = update(&arr, 4, 100)
    print(_p(Int(query((arr as! [Int]), 0, 5))))
    _ = update(&arr, 4, 0)
    _ = update(&arr, 2, 20)
    print(_p(Int(query((arr as! [Int]), 0, 5))))
    _ = update(&arr, 4, 10)
    print(_p(Int(query((arr as! [Int]), 2, 5))))
    print(_p(Int(query((arr as! [Int]), 1, 5))))
    _ = update(&arr, 2, 0)
    print(_p(Int(query((arr as! [Int]), 0, 5))))
    arr = (zeros(10000) as! [Int])
    _ = update(&arr, 255, 30)
    print(_p(Int(query((arr as! [Int]), 0, 10000))))
    arr = (zeros(6) as! [Int])
    _ = update(&arr, 5, 1)
    print(_p(Int(query((arr as! [Int]), 5, 6))))
    arr = (zeros(6) as! [Int])
    _ = update(&arr, 0, 1000)
    print(_p(Int(query((arr as! [Int]), 0, 1))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
