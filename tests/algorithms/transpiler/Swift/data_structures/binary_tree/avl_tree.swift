// Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:38:04 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    if let b = v as? BigInt { return b.toInt() }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
struct BigInt: Comparable, CustomStringConvertible {
    private var digits: [UInt32] = []
    init() {}
    init(_ v: Int) {
        var n = v
        while n > 0 { digits.append(UInt32(n % 1000000000)); n /= 1000000000 }
    }
    init(_ other: BigInt) { digits = other.digits }
    func toInt() -> Int {
        var res: Int64 = 0
        for d in digits.reversed() {
            if res > (Int64.max - Int64(d)) / 1000000000 {
                return Int.max
            }
            res = res * 1000000000 + Int64(d)
        }
        return Int(res)
    }
    static func +(lhs: BigInt, rhs: BigInt) -> BigInt {
        var carry: UInt64 = 0
        var result: [UInt32] = []
        let maxLen = max(lhs.digits.count, rhs.digits.count)
        for i in 0..<maxLen {
            let a = i < lhs.digits.count ? UInt64(lhs.digits[i]) : 0
            let b = i < rhs.digits.count ? UInt64(rhs.digits[i]) : 0
            let sum = a + b + carry
            result.append(UInt32(sum % 1000000000))
            carry = sum / 1000000000
        }
        if carry > 0 { result.append(UInt32(carry)) }
        var r = BigInt(); r.digits = result; return r
    }
    static func -(lhs: BigInt, rhs: BigInt) -> BigInt {
        var borrow: Int64 = 0
        var result: [UInt32] = []
        for i in 0..<lhs.digits.count {
            var a = Int64(lhs.digits[i]) - borrow
            let b = i < rhs.digits.count ? Int64(rhs.digits[i]) : 0
            var diff = a - b
            if diff < 0 { diff += 1000000000; borrow = 1 } else { borrow = 0 }
            result.append(UInt32(diff))
        }
        while result.last == 0 { result.removeLast(); if result.isEmpty { break } }
        var r = BigInt(); r.digits = result; return r
    }
    static func *(lhs: BigInt, rhs: BigInt) -> BigInt {
        if lhs.digits.isEmpty || rhs.digits.isEmpty { return BigInt() }
        var result = Array(repeating: UInt64(0), count: lhs.digits.count + rhs.digits.count)
        for i in 0..<lhs.digits.count {
            var carry: UInt64 = 0
            for j in 0..<rhs.digits.count {
                let idx = i + j
                let prod = UInt64(lhs.digits[i]) * UInt64(rhs.digits[j]) + result[idx] + carry
                result[idx] = prod % 1000000000
                carry = prod / 1000000000
            }
            if carry > 0 { result[i + rhs.digits.count] += carry }
        }
        var resDigits: [UInt32] = result.map { UInt32($0) }
        while resDigits.last == 0 { resDigits.removeLast(); if resDigits.isEmpty { break } }
        var r = BigInt(); r.digits = resDigits; return r
    }
    func bitLength() -> Int {
        if digits.isEmpty { return 0 }
        var v = digits.last!
        var bits = 0
        while v > 0 { v >>= 1; bits += 1 }
        return bits + (digits.count - 1) * 30
    }
    static func <(lhs: BigInt, rhs: BigInt) -> Bool {
        if lhs.digits.count != rhs.digits.count { return lhs.digits.count < rhs.digits.count }
        for i in stride(from: lhs.digits.count-1, through: 0, by: -1) {
            if lhs.digits[i] != rhs.digits[i] { return lhs.digits[i] < rhs.digits[i] }
        }
        return false
    }
    static func >(lhs: BigInt, rhs: BigInt) -> Bool { return rhs < lhs }
    static func <=(lhs: BigInt, rhs: BigInt) -> Bool { return !(rhs < lhs) }
    static func >=(lhs: BigInt, rhs: BigInt) -> Bool { return !(lhs < rhs) }
    static func /(lhs: BigInt, rhs: BigInt) -> BigInt {
        let divisor = rhs.toInt()
        if divisor == 0 { return BigInt() }
        var result: [UInt32] = Array(repeating: 0, count: lhs.digits.count)
        var rem: Int64 = 0
        for i in stride(from: lhs.digits.count - 1, through: 0, by: -1) {
            let cur = rem * 1000000000 + Int64(lhs.digits[i])
            result[i] = UInt32(cur / Int64(divisor))
            rem = cur % Int64(divisor)
        }
        var r = BigInt(); r.digits = result
        while r.digits.last == 0 { r.digits.removeLast(); if r.digits.isEmpty { break } }
        return r
    }
    static func %(lhs: BigInt, rhs: BigInt) -> BigInt {
        let divisor = rhs.toInt()
        if divisor == 0 { return BigInt() }
        var rem: Int64 = 0
        for d in lhs.digits.reversed() {
            rem = (rem * 1000000000 + Int64(d)) % Int64(divisor)
        }
        return BigInt(Int(rem))
    }
    static func +(lhs: BigInt, rhs: Int) -> BigInt { return lhs + BigInt(rhs) }
    static func +(lhs: Int, rhs: BigInt) -> BigInt { return BigInt(lhs) + rhs }
    static func ==(lhs: BigInt, rhs: BigInt) -> Bool { lhs.digits == rhs.digits }
    var description: String {
        if digits.isEmpty { return "0" }
        var s = String(digits.last!)
        for d in digits.dropLast().reversed() { s += String(format: "%09d", d) }
        return s
    }
}
extension Int { init(_ b: BigInt) { self = b.toInt() } }
extension Double { init(_ b: BigInt) { self = Double(b.toInt()) } }
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let NIL = (0 &- 1)
    var nodes: [[String: Int]] = ([] as! [[String: Int]])
    func new_node(_ value: Int) -> Int {
        let node: [String: Int] = (["data": value, "left": NIL, "right": NIL, "height": 1] as! [String: Int])
        nodes = (_append(nodes, node) as! [[String: Int]])
        return (Int(((nodes).count)) &- 1)
    }
    func get_height(_ i: Int) -> Int {
        if (i == NIL) {
            return 0
        }
        return (nodes[i]["height"] as? Int ?? 0)
    }
    func my_max(_ a: Int, _ b: Int) -> Int {
        if (a > b) {
            return a
        }
        return b
    }
    func update_height(_ i: Int) {
        nodes[i][String("height")] = Int((Int(my_max(Int(get_height((nodes[i]["left"] as? Int ?? 0))), Int(get_height((nodes[i]["right"] as? Int ?? 0))))) &+ 1))
    }
    func right_rotation(_ i: Int) -> Int {
        let left = (nodes[i]["left"] as? Int ?? 0)
        nodes[i][String("left")] = (nodes[left]["right"] as? Int ?? 0)
        nodes[left][String("right")] = Int(i)
        _ = update_height(i)
        _ = update_height(left)
        return left
    }
    func left_rotation(_ i: Int) -> Int {
        let right = (nodes[i]["right"] as? Int ?? 0)
        nodes[i][String("right")] = (nodes[right]["left"] as? Int ?? 0)
        nodes[right][String("left")] = Int(i)
        _ = update_height(i)
        _ = update_height(right)
        return right
    }
    func lr_rotation(_ i: Int) -> Int {
        nodes[i][String("left")] = Int(left_rotation((nodes[i]["left"] as? Int ?? 0)))
        return Int(right_rotation(i))
    }
    func rl_rotation(_ i: Int) -> Int {
        nodes[i][String("right")] = Int(right_rotation((nodes[i]["right"] as? Int ?? 0)))
        return Int(left_rotation(i))
    }
    func insert_node(_ i: Int, _ value: Int) -> Int {
        var i = i
        if (i == NIL) {
            return Int(new_node(value))
        }
        if (value < (nodes[i]["data"] as? Int ?? 0)) {
            nodes[i][String("left")] = Int(insert_node((nodes[i]["left"] as? Int ?? 0), value))
            if ((Int(get_height((nodes[i]["left"] as? Int ?? 0))) &- Int(get_height((nodes[i]["right"] as? Int ?? 0)))) == 2) {
                if (value < (nodes[(nodes[i]["left"] as? Int ?? 0)]["data"] as? Int ?? 0)) {
                    i = Int(right_rotation(i))
                } else {
                    i = Int(lr_rotation(i))
                }
            }
        } else {
            nodes[i][String("right")] = Int(insert_node((nodes[i]["right"] as? Int ?? 0), value))
            if ((Int(get_height((nodes[i]["right"] as? Int ?? 0))) &- Int(get_height((nodes[i]["left"] as? Int ?? 0)))) == 2) {
                if (value < (nodes[(nodes[i]["right"] as? Int ?? 0)]["data"] as? Int ?? 0)) {
                    i = Int(rl_rotation(i))
                } else {
                    i = Int(left_rotation(i))
                }
            }
        }
        _ = update_height(i)
        return i
    }
    func get_left_most(_ i: Int) -> Int {
        var cur: Int = i
        while ((nodes[cur]["left"] as? Int ?? 0) != NIL) {
            cur = (nodes[cur]["left"] as? Int ?? 0)
        }
        return (nodes[cur]["data"] as? Int ?? 0)
    }
    func del_node(_ i: Int, _ value: Int) -> Int {
        var i = i
        if (i == NIL) {
            return NIL
        }
        if (value < (nodes[i]["data"] as? Int ?? 0)) {
            nodes[i][String("left")] = Int(del_node((nodes[i]["left"] as? Int ?? 0), value))
        } else if (value > (nodes[i]["data"] as? Int ?? 0)) {
            nodes[i][String("right")] = Int(del_node((nodes[i]["right"] as? Int ?? 0), value))
        } else {
            if (((nodes[i]["left"] as? Int ?? 0) != NIL) && ((nodes[i]["right"] as? Int ?? 0) != NIL)) {
                let temp = Int(get_left_most((nodes[i]["right"] as? Int ?? 0)))
                nodes[i][String("data")] = Int(temp)
                nodes[i][String("right")] = Int(del_node((nodes[i]["right"] as? Int ?? 0), temp))
            } else if ((nodes[i]["left"] as? Int ?? 0) != NIL) {
                i = (nodes[i]["left"] as? Int ?? 0)
            } else {
                i = (nodes[i]["right"] as? Int ?? 0)
            }
            
        }
        
        if (i == NIL) {
            return NIL
        }
        let lh = Int(get_height((nodes[i]["left"] as? Int ?? 0)))
        let rh = Int(get_height((nodes[i]["right"] as? Int ?? 0)))
        if ((rh &- lh) == 2) {
            if (Int(get_height((nodes[(nodes[i]["right"] as? Int ?? 0)]["right"] as? Int ?? 0))) > Int(get_height((nodes[(nodes[i]["right"] as? Int ?? 0)]["left"] as? Int ?? 0)))) {
                i = Int(left_rotation(i))
            } else {
                i = Int(rl_rotation(i))
            }
        } else if ((lh &- rh) == 2) {
            if (Int(get_height((nodes[(nodes[i]["left"] as? Int ?? 0)]["left"] as? Int ?? 0))) > Int(get_height((nodes[(nodes[i]["left"] as? Int ?? 0)]["right"] as? Int ?? 0)))) {
                i = Int(right_rotation(i))
            } else {
                i = Int(lr_rotation(i))
            }
        }
        
        _ = update_height(i)
        return i
    }
    func inorder(_ i: Int) -> String {
        if (i == NIL) {
            return ""
        }
        let left = String(describing: inorder((nodes[i]["left"] as? Int ?? 0)))
        let right = String(describing: inorder((nodes[i]["right"] as? Int ?? 0)))
        var res: String = String(describing: (nodes[i]["data"] as? Int ?? 0))
        if (left != "") {
            res = (((left + " ") + res) as! String)
        }
        if (right != "") {
            res = (((res + " ") + right) as! String)
        }
        return res
    }
    func main() {
        nodes = ([] as! [[String: Int]])
        var root: Int = NIL
        root = Int(insert_node(root, 4))
        root = Int(insert_node(root, 2))
        root = Int(insert_node(root, 3))
        print(_p(String(describing: inorder(root))))
        print(_p(String(describing: Int(get_height(root)))))
        root = Int(del_node(root, 3))
        print(_p(String(describing: inorder(root))))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
