// Generated by Mochi transpiler v0.10.72 on 2025-08-24 17:05:26 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.isNaN || d.isInfinite {
                return String(d)
            }
            if d.rounded(.towardZero) == d {
                // avoid overflow when converting to Int64
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _num(_ v: Any) -> Double {
    if let d = v as? Double { return d }
    if let i = v as? Int { return Double(i) }
    if let i = v as? Int64 { return Double(i) }
    return 0
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first!
}
func _idx<K: Hashable, V>(_ m: [K: V], _ k: K) -> V? {
    return m[k]
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    var i = idx
    if i < 0 { i += out.count }
    if i < out.count {
        out[i] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: i - out.count + 1))
        out[i] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    var node_data: [Int] = ({
        var _arr: [Int] = []
        _arr = _append(_arr, 0)
        return _arr
    }() as! [Int])
    var left_child: [Int] = ({
        var _arr: [Int] = []
        _arr = _append(_arr, 0)
        return _arr
    }() as! [Int])
    var right_child: [Int] = ({
        var _arr: [Int] = []
        _arr = _append(_arr, 0)
        return _arr
    }() as! [Int])
    func new_node(_ value: Int) -> Int {
        node_data = (_append(node_data, value) as! [Int])
        left_child = (_append(left_child, 0) as! [Int])
        right_child = (_append(right_child, 0) as! [Int])
        return (_int(((node_data).count)) &- 1)
    }
    func build_tree() -> Int {
        let root = _int(new_node(1))
        let n2 = _int(new_node(2))
        let n5 = _int(new_node(5))
        let n3 = _int(new_node(3))
        let n4 = _int(new_node(4))
        let n6 = _int(new_node(6))
        left_child = _set(left_child, root, { let _tmp0 = Int(n2); return _tmp0 }())
        right_child = _set(right_child, root, { let _tmp1 = Int(n5); return _tmp1 }())
        left_child = _set(left_child, n2, { let _tmp2 = Int(n3); return _tmp2 }())
        right_child = _set(right_child, n2, { let _tmp3 = Int(n4); return _tmp3 }())
        right_child = _set(right_child, n5, { let _tmp4 = Int(n6); return _tmp4 }())
        return root
    }
    func flatten(_ root: Int) -> [Int] {
        if ((root == 0)) {
            return ([] as! [Int])
        }
        var res: [Int] = ({
            var _arr: [Int] = []
            _arr = _append(_arr, (_idx(node_data, root) as? Int ?? 0))
            return _arr
        }() as! [Int])
        let left_vals: [Int] = (flatten((_idx(left_child, root) as? Int ?? 0)) as! [Int])
        let right_vals: [Int] = (flatten((_idx(right_child, root) as? Int ?? 0)) as! [Int])
        var i = 0
        while ((i < _int(((left_vals).count)))) {
            res = (_append(res, (_idx(left_vals, i) as? Int ?? 0)) as! [Int])
            i = _int((i &+ 1))
        }
        i = 0
        while ((i < _int(((right_vals).count)))) {
            res = (_append(res, (_idx(right_vals, i) as? Int ?? 0)) as! [Int])
            i = _int((i &+ 1))
        }
        return res
    }
    func display(_ values: [Int]) -> Void {
        var s = ""
        var i = 0
        while ((i < _int(((values).count)))) {
            if ((i == 0)) {
                s = _p((_idx(values, i) as? Int ?? 0))
            } else {
                s = ((_p((_p(s) + _p(" "))) + _p(_p((_idx(values, i) as? Int ?? 0)))) as! String)
            }
            i = _int((i &+ 1))
        }
        print(_p(s))
    }
    print(_p("Flattened Linked List:"))
    let root = _int(build_tree())
    let vals: [Int] = (flatten(root) as! [Int])
    _ = display((vals as! [Int]))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
