// Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:38:24 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
struct TreeNode: Codable {
    var data: Int
    var left: Int
    var right: Int
    init() {
        self.data = 0
        self.left = 0
        self.right = 0
    }
    init(data: Int, left: Int, right: Int) {
        self.data = data
        self.left = left
        self.right = right
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func count_nodes(_ nodes: [TreeNode], _ idx: Int) -> Int {
        if (idx == 0) {
            return 0
        }
        let node: TreeNode = (nodes[idx] as! TreeNode)
        return ((Int(count_nodes((nodes as! [TreeNode]), node.left)) &+ Int(count_nodes((nodes as! [TreeNode]), node.right))) &+ 1)
    }
    func count_coins(_ nodes: [TreeNode], _ idx: Int) -> Int {
        if (idx == 0) {
            return 0
        }
        let node: TreeNode = (nodes[idx] as! TreeNode)
        return ((Int(count_coins((nodes as! [TreeNode]), node.left)) &+ Int(count_coins((nodes as! [TreeNode]), node.right))) &+ node.data)
    }
    var total_moves: Int = 0
    func iabs(_ x: Int) -> Int {
        if (x < 0) {
            return -x
        }
        return x
    }
    func dfs(_ nodes: [TreeNode], _ idx: Int) -> Int {
        if (idx == 0) {
            return 0
        }
        let node: TreeNode = (nodes[idx] as! TreeNode)
        let left_excess: Int = Int(dfs((nodes as! [TreeNode]), node.left))
        let right_excess: Int = Int(dfs((nodes as! [TreeNode]), node.right))
        let abs_left: Int = Int(iabs(left_excess))
        let abs_right: Int = Int(iabs(right_excess))
        total_moves = Int(((total_moves &+ abs_left) &+ abs_right))
        return (((node.data &+ left_excess) &+ right_excess) &- 1)
    }
    func distribute_coins(_ nodes: [TreeNode], _ root: Int) -> Int {
        if (root == 0) {
            return 0
        }
        if (Int(count_nodes((nodes as! [TreeNode]), root)) != Int(count_coins((nodes as! [TreeNode]), root))) {
            _ = fatalError("The nodes number should be same as the number of coins")
        }
        total_moves = 0
        _ = Int(dfs((nodes as! [TreeNode]), root))
        return total_moves
    }
    func main() {
        let example1: [TreeNode] = ([TreeNode(data: 0, left: 0, right: 0), TreeNode(data: 3, left: 2, right: 3), TreeNode(data: 0, left: 0, right: 0), TreeNode(data: 0, left: 0, right: 0)] as! [TreeNode])
        let example2: [TreeNode] = ([TreeNode(data: 0, left: 0, right: 0), TreeNode(data: 0, left: 2, right: 3), TreeNode(data: 3, left: 0, right: 0), TreeNode(data: 0, left: 0, right: 0)] as! [TreeNode])
        let example3: [TreeNode] = ([TreeNode(data: 0, left: 0, right: 0), TreeNode(data: 0, left: 2, right: 3), TreeNode(data: 0, left: 0, right: 0), TreeNode(data: 3, left: 0, right: 0)] as! [TreeNode])
        print(_p(Int(distribute_coins((example1 as! [TreeNode]), 1))))
        print(_p(Int(distribute_coins((example2 as! [TreeNode]), 1))))
        print(_p(Int(distribute_coins((example3 as! [TreeNode]), 1))))
        print(_p(Int(distribute_coins(([TreeNode(data: 0, left: 0, right: 0)] as! [TreeNode]), 0))))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
