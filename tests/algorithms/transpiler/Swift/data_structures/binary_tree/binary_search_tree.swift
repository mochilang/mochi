// Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:38:10 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func create_node(_ value: Int) -> [Any?] {
        return [value, nil, nil]
    }
    func insert(_ node: inout [Any?], _ value: Int) -> [Any?] {
        if (node == nil) {
            return (create_node(value) as! [Any?])
        }
        if (value < (node[0] as! Int)) {
            node = _set(node, 1, (insert(&node[1], value) as! [Any?]))
        } else if (value > (node[0] as! Int)) {
            node = _set(node, 2, (insert(&node[2], value) as! [Any?]))
        }
        
        return node
    }
    func search(_ node: [Any?], _ value: Int) -> Bool {
        if (node == nil) {
            return false
        }
        if (value == (node[0] as! Int)) {
            return true
        }
        if (value < (node[0] as! Int)) {
            return search((node[1] as! [Any?]), value)
        }
        return search((node[2] as! [Any?]), value)
    }
    func inorder(_ node: [Any?], _ acc: [Int]) -> [Int] {
        if (node == nil) {
            return acc
        }
        let left_acc: [Int] = (inorder((node[1] as! [Any?]), (acc as! [Int])) as! [Int])
        let with_node: [Any?] = (_append(left_acc, node[0]) as! [Any?])
        return (inorder((node[2] as! [Any?]), (with_node as! [Int])) as! [Int])
    }
    func find_min(_ node: [Any?]) -> Int {
        var current: [Any?] = node
        while (String(describing: current[1]) != String(describing: nil as Any?)
        ) {
            current = (current[1] as! [Any?])
        }
        return (current[0] as! Int)
    }
    func find_max(_ node: [Any?]) -> Int {
        var current: [Any?] = node
        while (String(describing: current[2]) != String(describing: nil as Any?)
        ) {
            current = (current[2] as! [Any?])
        }
        return (current[0] as! Int)
    }
    func delete(_ node: inout [Any?], _ value: Int) -> [Any?]? {
        if (node == nil) {
            return nil
        }
        if (value < (node[0] as! Int)) {
            node = _set(node, 1, (delete(&node[1], value) as! [Any?]))
        } else if (value > (node[0] as! Int)) {
            node = _set(node, 2, (delete(&node[2], value) as! [Any?]))
        } else {
            if (String(describing: node[1]) == String(describing: nil as Any?)
            ) {
                return (node[2] as! [Any?]?)
            }
            if (String(describing: node[2]) == String(describing: nil as Any?)
            ) {
                return (node[1] as! [Any?]?)
            }
            let min_val = Int(find_min((node[2] as! [Any?])))
            node = _set(node, 0, min_val)
            node = _set(node, 2, (delete(&node[2], min_val) as! [Any?]))
        }
        
        return (node as! [Any?]?)
    }
    func main() {
        var root: [Any?] = nil
        let nums: [Int] = ([8, 3, 6, 1, 10, 14, 13, 4, 7] as! [Int])
        for v in nums {
            root = (insert(&root, v) as! [Any?])
        }
        print(_p("[" + (inorder((root as! [Any?]), ([] as! [Int])) as! [Int]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
        print(_p(search((root as! [Any?]), 6)))
        print(_p(search((root as! [Any?]), 20)))
        print(_p(Int(find_min((root as! [Any?])))))
        print(_p(Int(find_max((root as! [Any?])))))
        root = (delete(&root, 6) as! [Any?])
        print(_p("[" + (inorder((root as! [Any?]), ([] as! [Int])) as! [Int]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
