// Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:38:21 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
struct BigInt: Comparable, CustomStringConvertible {
    private var digits: [UInt32] = []
    init() {}
    init(_ v: Int) {
        var n = v
        while n > 0 { digits.append(UInt32(n % 1000000000)); n /= 1000000000 }
    }
    init(_ other: BigInt) { digits = other.digits }
    func toInt() -> Int {
        var res: Int64 = 0
        for d in digits.reversed() {
            if res > (Int64.max - Int64(d)) / 1000000000 {
                return Int.max
            }
            res = res * 1000000000 + Int64(d)
        }
        return Int(res)
    }
    static func +(lhs: BigInt, rhs: BigInt) -> BigInt {
        var carry: UInt64 = 0
        var result: [UInt32] = []
        let maxLen = max(lhs.digits.count, rhs.digits.count)
        for i in 0..<maxLen {
            let a = i < lhs.digits.count ? UInt64(lhs.digits[i]) : 0
            let b = i < rhs.digits.count ? UInt64(rhs.digits[i]) : 0
            let sum = a + b + carry
            result.append(UInt32(sum % 1000000000))
            carry = sum / 1000000000
        }
        if carry > 0 { result.append(UInt32(carry)) }
        var r = BigInt(); r.digits = result; return r
    }
    static func -(lhs: BigInt, rhs: BigInt) -> BigInt {
        var borrow: Int64 = 0
        var result: [UInt32] = []
        for i in 0..<lhs.digits.count {
            var a = Int64(lhs.digits[i]) - borrow
            let b = i < rhs.digits.count ? Int64(rhs.digits[i]) : 0
            var diff = a - b
            if diff < 0 { diff += 1000000000; borrow = 1 } else { borrow = 0 }
            result.append(UInt32(diff))
        }
        while result.last == 0 { result.removeLast(); if result.isEmpty { break } }
        var r = BigInt(); r.digits = result; return r
    }
    static func *(lhs: BigInt, rhs: BigInt) -> BigInt {
        if lhs.digits.isEmpty || rhs.digits.isEmpty { return BigInt() }
        var result = Array(repeating: UInt64(0), count: lhs.digits.count + rhs.digits.count)
        for i in 0..<lhs.digits.count {
            var carry: UInt64 = 0
            for j in 0..<rhs.digits.count {
                let idx = i + j
                let prod = UInt64(lhs.digits[i]) * UInt64(rhs.digits[j]) + result[idx] + carry
                result[idx] = prod % 1000000000
                carry = prod / 1000000000
            }
            if carry > 0 { result[i + rhs.digits.count] += carry }
        }
        var resDigits: [UInt32] = result.map { UInt32($0) }
        while resDigits.last == 0 { resDigits.removeLast(); if resDigits.isEmpty { break } }
        var r = BigInt(); r.digits = resDigits; return r
    }
    func bitLength() -> Int {
        if digits.isEmpty { return 0 }
        var v = digits.last!
        var bits = 0
        while v > 0 { v >>= 1; bits += 1 }
        return bits + (digits.count - 1) * 30
    }
    static func <(lhs: BigInt, rhs: BigInt) -> Bool {
        if lhs.digits.count != rhs.digits.count { return lhs.digits.count < rhs.digits.count }
        for i in stride(from: lhs.digits.count-1, through: 0, by: -1) {
            if lhs.digits[i] != rhs.digits[i] { return lhs.digits[i] < rhs.digits[i] }
        }
        return false
    }
    static func >(lhs: BigInt, rhs: BigInt) -> Bool { return rhs < lhs }
    static func <=(lhs: BigInt, rhs: BigInt) -> Bool { return !(rhs < lhs) }
    static func >=(lhs: BigInt, rhs: BigInt) -> Bool { return !(lhs < rhs) }
    static func /(lhs: BigInt, rhs: BigInt) -> BigInt {
        let divisor = rhs.toInt()
        if divisor == 0 { return BigInt() }
        var result: [UInt32] = Array(repeating: 0, count: lhs.digits.count)
        var rem: Int64 = 0
        for i in stride(from: lhs.digits.count - 1, through: 0, by: -1) {
            let cur = rem * 1000000000 + Int64(lhs.digits[i])
            result[i] = UInt32(cur / Int64(divisor))
            rem = cur % Int64(divisor)
        }
        var r = BigInt(); r.digits = result
        while r.digits.last == 0 { r.digits.removeLast(); if r.digits.isEmpty { break } }
        return r
    }
    static func %(lhs: BigInt, rhs: BigInt) -> BigInt {
        let divisor = rhs.toInt()
        if divisor == 0 { return BigInt() }
        var rem: Int64 = 0
        for d in lhs.digits.reversed() {
            rem = (rem * 1000000000 + Int64(d)) % Int64(divisor)
        }
        return BigInt(Int(rem))
    }
    static func +(lhs: BigInt, rhs: Int) -> BigInt { return lhs + BigInt(rhs) }
    static func +(lhs: Int, rhs: BigInt) -> BigInt { return BigInt(lhs) + rhs }
    static func ==(lhs: BigInt, rhs: BigInt) -> Bool { lhs.digits == rhs.digits }
    var description: String {
        if digits.isEmpty { return "0" }
        var s = String(digits.last!)
        for d in digits.dropLast().reversed() { s += String(format: "%09d", d) }
        return s
    }
}
extension Int { init(_ b: BigInt) { self = b.toInt() } }
extension Double { init(_ b: BigInt) { self = Double(b.toInt()) } }
struct Tree: Codable {
    var values: [Int]
    var lefts: [Int]
    var rights: [Int]
    var root: Int
    init() {
        self.values = []
        self.lefts = []
        self.rights = []
        self.root = 0
    }
    init(values: [Int], lefts: [Int], rights: [Int], root: Int) {
        self.values = values
        self.lefts = lefts
        self.rights = rights
        self.root = root
    }
}
struct Pair: Codable {
    var idx: Int
    var hd: Int
    init() {
        self.idx = 0
        self.hd = 0
    }
    init(idx: Int, hd: Int) {
        self.idx = idx
        self.hd = hd
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let NIL = (0 &- 1)
    func make_tree() -> Tree {
        return Tree(values: ([3, 9, 20, 15, 7] as! [Int]), lefts: ([1, NIL, 3, NIL, NIL] as! [Int]), rights: ([2, NIL, 4, NIL, NIL] as! [Int]), root: 0)
    }
    func index_of(_ xs: [Int], _ x: Int) -> Int {
        var i: Int = 0
        while (i < Int(((xs).count))) {
            if ((xs[i] as? Int ?? 0) == x) {
                return i
            }
            i = Int((i &+ 1))
        }
        return NIL
    }
    func sort_pairs(_ hds: inout [Int], _ vals: inout [Int]) {
        var i: Int = 0
        while (i < Int(((hds).count))) {
            var j: Int = i
            while ((j > 0) && ((hds[(j &- 1)] as? Int ?? 0) > (hds[j] as? Int ?? 0))) {
                let hd_tmp = (hds[(j &- 1)] as? Int ?? 0)
                hds = _set(hds, (j &- 1), (hds[j] as? Int ?? 0))
                hds = _set(hds, j, Int(hd_tmp))
                let val_tmp = (vals[(j &- 1)] as? Int ?? 0)
                vals = _set(vals, (j &- 1), (vals[j] as? Int ?? 0))
                vals = _set(vals, j, Int(val_tmp))
                j = Int((j &- 1))
            }
            i = Int((i &+ 1))
        }
    }
    func right_view(_ t: Tree) -> [Int] {
        var res: [Int] = ([] as! [Int])
        var queue: [Int] = ([t.root] as! [Int])
        while (Int(((queue).count)) > 0) {
            let size = Int(((queue).count))
            var i: Int = 0
            while (i < size) {
                let idx = (queue[i] as? Int ?? 0)
                if ((t.lefts[idx] as? Int ?? 0) != NIL) {
                    queue = (_append(queue, (t.lefts[idx] as? Int ?? 0)) as! [Int])
                }
                if ((t.rights[idx] as? Int ?? 0) != NIL) {
                    queue = (_append(queue, (t.rights[idx] as? Int ?? 0)) as! [Int])
                }
                i = Int((i &+ 1))
            }
            res = (_append(res, (t.values[(queue[(size &- 1)] as? Int ?? 0)] as? Int ?? 0)) as! [Int])
            queue = (Array(queue[size..<Int(((queue).count))]) as! [Int])
        }
        return res
    }
    func left_view(_ t: Tree) -> [Int] {
        var res: [Int] = ([] as! [Int])
        var queue: [Int] = ([t.root] as! [Int])
        while (Int(((queue).count)) > 0) {
            let size = Int(((queue).count))
            var i: Int = 0
            while (i < size) {
                let idx = (queue[i] as? Int ?? 0)
                if ((t.lefts[idx] as? Int ?? 0) != NIL) {
                    queue = (_append(queue, (t.lefts[idx] as? Int ?? 0)) as! [Int])
                }
                if ((t.rights[idx] as? Int ?? 0) != NIL) {
                    queue = (_append(queue, (t.rights[idx] as? Int ?? 0)) as! [Int])
                }
                i = Int((i &+ 1))
            }
            res = (_append(res, (t.values[(queue[0] as? Int ?? 0)] as? Int ?? 0)) as! [Int])
            queue = (Array(queue[size..<Int(((queue).count))]) as! [Int])
        }
        return res
    }
    func top_view(_ t: Tree) -> [Int] {
        var hds: [Int] = ([] as! [Int])
        var vals: [Int] = ([] as! [Int])
        var queue_idx: [Int] = ([t.root] as! [Int])
        var queue_hd: [Int] = ([0] as! [Int])
        while (Int(((queue_idx).count)) > 0) {
            let idx = (queue_idx[0] as? Int ?? 0)
            queue_idx = (Array(queue_idx[1..<Int(((queue_idx).count))]) as! [Int])
            let hd = (queue_hd[0] as? Int ?? 0)
            queue_hd = (Array(queue_hd[1..<Int(((queue_hd).count))]) as! [Int])
            if (Int(index_of((hds as! [Int]), hd)) == NIL) {
                hds = (_append(hds, hd) as! [Int])
                vals = (_append(vals, (t.values[idx] as? Int ?? 0)) as! [Int])
            }
            if ((t.lefts[idx] as? Int ?? 0) != NIL) {
                queue_idx = (_append(queue_idx, (t.lefts[idx] as? Int ?? 0)) as! [Int])
                queue_hd = (_append(queue_hd, (hd &- 1)) as! [Int])
            }
            if ((t.rights[idx] as? Int ?? 0) != NIL) {
                queue_idx = (_append(queue_idx, (t.rights[idx] as? Int ?? 0)) as! [Int])
                queue_hd = (_append(queue_hd, (hd &+ 1)) as! [Int])
            }
        }
        _ = sort_pairs(&hds, &vals)
        return vals
    }
    func bottom_view(_ t: Tree) -> [Int] {
        var hds: [Int] = ([] as! [Int])
        var vals: [Int] = ([] as! [Int])
        var queue_idx: [Int] = ([t.root] as! [Int])
        var queue_hd: [Int] = ([0] as! [Int])
        while (Int(((queue_idx).count)) > 0) {
            let idx = (queue_idx[0] as? Int ?? 0)
            queue_idx = (Array(queue_idx[1..<Int(((queue_idx).count))]) as! [Int])
            let hd = (queue_hd[0] as? Int ?? 0)
            queue_hd = (Array(queue_hd[1..<Int(((queue_hd).count))]) as! [Int])
            let pos = Int(index_of((hds as! [Int]), hd))
            if (pos == NIL) {
                hds = (_append(hds, hd) as! [Int])
                vals = (_append(vals, (t.values[idx] as? Int ?? 0)) as! [Int])
            } else {
                vals = _set(vals, pos, (t.values[idx] as? Int ?? 0))
            }
            if ((t.lefts[idx] as? Int ?? 0) != NIL) {
                queue_idx = (_append(queue_idx, (t.lefts[idx] as? Int ?? 0)) as! [Int])
                queue_hd = (_append(queue_hd, (hd &- 1)) as! [Int])
            }
            if ((t.rights[idx] as? Int ?? 0) != NIL) {
                queue_idx = (_append(queue_idx, (t.rights[idx] as? Int ?? 0)) as! [Int])
                queue_hd = (_append(queue_hd, (hd &+ 1)) as! [Int])
            }
        }
        _ = sort_pairs(&hds, &vals)
        return vals
    }
    let tree = make_tree()
    print(_p("[" + (right_view((tree as! Tree)) as! [Int]).map{ if let s = $0 as? String { "\"" + s.replacingOccurrences(of: "\"", with: "\\\"") + "\"" } else { _p($0) } }.joined(separator: ", ") + "]"))
    print(_p("[" + (left_view((tree as! Tree)) as! [Int]).map{ if let s = $0 as? String { "\"" + s.replacingOccurrences(of: "\"", with: "\\\"") + "\"" } else { _p($0) } }.joined(separator: ", ") + "]"))
    print(_p("[" + (top_view((tree as! Tree)) as! [Int]).map{ if let s = $0 as? String { "\"" + s.replacingOccurrences(of: "\"", with: "\\\"") + "\"" } else { _p($0) } }.joined(separator: ", ") + "]"))
    print(_p("[" + (bottom_view((tree as! Tree)) as! [Int]).map{ if let s = $0 as? String { "\"" + s.replacingOccurrences(of: "\"", with: "\\\"") + "\"" } else { _p($0) } }.joined(separator: ", ") + "]"))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
