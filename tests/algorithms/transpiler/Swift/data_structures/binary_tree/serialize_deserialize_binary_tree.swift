// Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:39:14 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _split(_ s: String, _ sep: String) -> [String] {
    let d = sep.isEmpty ? " " : sep
    return s.components(separatedBy: d)
}
indirect enum TreeNode {
    case Empty()
    case Node(left: TreeNode, value: Int, right: TreeNode)
}
struct BuildResult: Codable {
    var node: TreeNode
    var next: Int
    init() {
        self.node = TreeNode()
        self.next = 0
    }
    init(node: TreeNode, next: Int) {
        self.node = node
        self.next = next
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func digit(_ ch: String) -> Int {
        let digits = "0123456789"
        var i: Int = 0
        while (i < Int(((digits).count))) {
            if (String(describing: String(Array(String(describing: (digits as! String)))[i..<(i &+ 1)])) == ch) {
                return i
            }
            i = Int((i &+ 1))
        }
        return 0
    }
    func to_int(_ s: String) -> Int {
        var i: Int = 0
        var sign: Int = 1
        if ((Int(((s).count)) > 0) && (String(describing: String(Array(String(describing: (s as! String)))[0..<1])) == "-")) {
            sign = Int(-1)
            i = 1
        }
        var num: Int = 0
        while (i < Int(((s).count))) {
            let ch = String(describing: String(Array(String(describing: (s as! String)))[i..<(i &+ 1)]))
            num = Int(((num &* 10) &+ Int(digit((ch as! String)))))
            i = Int((i &+ 1))
        }
        return (sign &* num)
    }
    func split(_ s: String, _ sep: String) -> [String] {
        var res: [String] = ([] as! [String])
        var current: String = ""
        var i: Int = 0
        while (i < Int(((s).count))) {
            let ch = String(describing: String(Array(String(describing: (s as! String)))[i..<(i &+ 1)]))
            if (ch == sep) {
                res = (_append(res, current) as! [String])
                current = ""
            } else {
                current = ((current + ch) as! String)
            }
            i = Int((i &+ 1))
        }
        res = (_append(res, current) as! [String])
        return res
    }
    func serialize(_ node: TreeNode) -> String {
        return String(describing: { () -> String in
        switch node {
            case let .Empty():
            return "null"
            case let .Node(l, v, r):
            return ((((String(describing: v) + ",") + String(describing: serialize((l as! TreeNode)))) + ",") + String(describing: serialize((r as! TreeNode))))
            default:
            var z: String
            return z
        }
    }())
}
func build(_ nodes: [String], _ idx: Int) -> BuildResult {
    let value = (nodes[idx] as! String)
    if (value == "null") {
        return BuildResult(node: TreeNode.Empty(), next: (idx &+ 1))
    }
    let left_res = build((nodes as! [String]), (idx &+ 1))
    let right_res = build((nodes as! [String]), left_res.next)
    let node = TreeNode.Node(left: left_res.node, value: Int(to_int((value as! String))), right: right_res.node)
    return BuildResult(node: node, next: right_res.next)
}
func deserialize(_ data: String) -> TreeNode {
    let nodes: [String] = (_split(data, ",") as! [String])
    let res = build((nodes as! [String]), 0)
    return res.node
}
func five_tree() -> TreeNode {
    let left_child = TreeNode.Node(value: 2, left: TreeNode.Empty(), right: TreeNode.Empty())
    let right_left = TreeNode.Node(value: 4, left: TreeNode.Empty(), right: TreeNode.Empty())
    let right_right = TreeNode.Node(value: 5, left: TreeNode.Empty(), right: TreeNode.Empty())
    let right_child = TreeNode.Node(value: 3, left: right_left, right: right_right)
    return (TreeNode.Node(value: 1, left: left_child, right: right_child) as! TreeNode)
}
func main() {
    let root = five_tree()
    let serial = String(describing: serialize((root as! TreeNode)))
    print(_p(serial))
    let rebuilt = deserialize((serial as! String))
    let serial2 = String(describing: serialize((rebuilt as! TreeNode)))
    print(_p(serial2))
    print(_p(((serial == serial2) ? 1 : 0)))
}
_ = main()
let _benchEnd = _now()
let _benchMemEnd = _mem()
print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
