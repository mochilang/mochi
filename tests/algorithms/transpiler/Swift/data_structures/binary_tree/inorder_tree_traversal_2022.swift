// Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:38:36 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
struct Node: Codable {
    var data: Int
    var left: Int
    var right: Int
    init() {
        self.data = 0
        self.left = 0
        self.right = 0
    }
    init(data: Int, left: Int, right: Int) {
        self.data = data
        self.left = left
        self.right = right
    }
}
struct TreeState: Codable {
    var nodes: [Node]
    var root: Int
    init() {
        self.nodes = []
        self.root = 0
    }
    init(nodes: [Node], root: Int) {
        self.nodes = nodes
        self.root = root
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func new_node(_ state: inout TreeState, _ value: Int) -> Int {
        state.nodes = (_append(state.nodes, Node(data: value, left: Int(-1), right: Int(-1))) as! [Node])
        return (Int(((state.nodes).count)) &- 1)
    }
    func insert(_ state: inout TreeState, _ value: Int) {
        if (state.root == Int(-1)) {
            state.root = Int(new_node(&state, value))
            return
        }
        var current: Int = state.root
        var nodes: [Node] = state.nodes
        while true {
            var node: Node = (nodes[current] as! Node)
            if (value < node.data) {
                if (node.left == Int(-1)) {
                    node.left = Int(new_node(&state, value))
                    nodes = _set(nodes, current, (node as! Node))
                    state.nodes = (nodes as! [Node])
                    return
                }
                current = Int(node.left)
            } else {
                if (node.right == Int(-1)) {
                    node.right = Int(new_node(&state, value))
                    nodes = _set(nodes, current, (node as! Node))
                    state.nodes = (nodes as! [Node])
                    return
                }
                current = Int(node.right)
            }
        }
    }
    func inorder(_ state: TreeState, _ idx: Int) -> [Int] {
        if (idx == Int(-1)) {
            return ([] as! [Int])
        }
        let node = (state.nodes[idx] as! Node)
        var result: [Int] = (inorder((state as! TreeState), node.left) as! [Int])
        result = (_append(result, node.data) as! [Int])
        let right_part: [Int] = (inorder((state as! TreeState), node.right) as! [Int])
        var i: Int = 0
        while (i < Int(((right_part).count))) {
            result = (_append(result, (right_part[i] as? Int ?? 0)) as! [Int])
            i = Int((i &+ 1))
        }
        return result
    }
    func make_tree() -> TreeState {
        var state: TreeState = TreeState(nodes: [], root: Int(-1))
        _ = insert(&state, 15)
        _ = insert(&state, 10)
        _ = insert(&state, 25)
        _ = insert(&state, 6)
        _ = insert(&state, 14)
        _ = insert(&state, 20)
        _ = insert(&state, 60)
        return state
    }
    func main() {
        let state = make_tree()
        print(_p("Printing values of binary search tree in Inorder Traversal."))
        print(_p("[" + (inorder((state as! TreeState), state.root) as! [Int]).map{ if let s = $0 as? String { "\"" + s.replacingOccurrences(of: "\"", with: "\\\"") + "\"" } else { _p($0) } }.joined(separator: ", ") + "]"))
    }
    _ = main()
    do {
        let state = make_tree()
        assert(((inorder((state as! TreeState), state.root) as! [Int]) == ([6, 10, 14, 15, 20, 25, 60] as! [Int])))
    }
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
