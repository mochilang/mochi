// Generated by Mochi transpiler v0.10.72 on 2025-08-24 17:06:31 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.isNaN || d.isInfinite {
                return String(d)
            }
            if d.rounded(.towardZero) == d {
                // avoid overflow when converting to Int64
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _num(_ v: Any) -> Double {
    if let d = v as? Double { return d }
    if let i = v as? Int { return Double(i) }
    if let i = v as? Int64 { return Double(i) }
    return 0
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first!
}
func _idx<K: Hashable, V>(_ m: [K: V], _ k: K) -> V? {
    return m[k]
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _concat<T>(_ a: [T], _ b: [T]) -> [T] {
    var out = a
    out.append(contentsOf: b)
    return out
}
struct Node: Codable {
    var key: Int
    var left: Int
    var right: Int
    init() {
        self.key = 0
        self.left = 0
        self.right = 0
    }
    init(key: Int, left: Int, right: Int) {
        self.key = key
        self.left = left
        self.right = right
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func inorder(_ nodes: [Node], _ idx: Int) -> [Int] {
        if ((idx == _int(-1))) {
            return ([] as! [Int])
        }
        let node = (_idx(nodes, idx) as! Node)
        var result = (inorder((nodes as! [Node]), node.left) as! [Int])
        result = (_append(result, node.key) as! [Int])
        result = ((_concat(result, (inorder((nodes as! [Node]), node.right) as! [Int])) as! [Any?]) as! [Int])
        return result
    }
    func floor_ceiling(_ nodes: [Node], _ idx: Int, _ key: Int) -> [Int] {
        var floor_val: Any? = nil
        var ceiling_val: Any? = nil
        var current = idx
        while ((current != _int(-1))) {
            let node = (_idx(nodes, current) as! Node)
            if ((node.key == key)) {
                floor_val = node.key
                ceiling_val = node.key
                break
            }
            if ((key < node.key)) {
                ceiling_val = node.key
                current = _int(node.left)
            } else {
                floor_val = node.key
                current = _int(node.right)
            }
        }
        return ({
            var _arr: [Any?] = []
            _arr = _append(_arr, floor_val)
            _arr = _append(_arr, ceiling_val)
            return _arr
        }() as! [Int])
    }
    let tree: [Node] = ({
        var _arr: [Node] = []
        _arr = _append(_arr, Node(key: 10, left: 1, right: 2))
        _arr = _append(_arr, Node(key: 5, left: 3, right: 4))
        _arr = _append(_arr, Node(key: 20, left: 5, right: 6))
        _arr = _append(_arr, Node(key: 3, left: _int(-1), right: _int(-1)))
        _arr = _append(_arr, Node(key: 7, left: _int(-1), right: _int(-1)))
        _arr = _append(_arr, Node(key: 15, left: _int(-1), right: _int(-1)))
        _arr = _append(_arr, Node(key: 25, left: _int(-1), right: _int(-1)))
        return _arr
    }() as! [Node])
    print(_p("[" + (inorder((tree as! [Node]), 0) as! [Int]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    print(_p("[" + (floor_ceiling((tree as! [Node]), 0, 8) as! [Int]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    print(_p("[" + (floor_ceiling((tree as! [Node]), 0, 14) as! [Int]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    print(_p("[" + (floor_ceiling((tree as! [Node]), 0, -1) as! [Int]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    print(_p("[" + (floor_ceiling((tree as! [Node]), 0, 30) as! [Int]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
