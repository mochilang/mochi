// Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:39:19 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    if let b = v as? BigInt { return b.toInt() }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
func _split(_ s: String, _ sep: String) -> [String] {
    let d = sep.isEmpty ? " " : sep
    return s.components(separatedBy: d)
}
struct BigInt: Comparable, CustomStringConvertible {
    private var digits: [UInt32] = []
    init() {}
    init(_ v: Int) {
        var n = v
        while n > 0 { digits.append(UInt32(n % 1000000000)); n /= 1000000000 }
    }
    init(_ other: BigInt) { digits = other.digits }
    func toInt() -> Int {
        var res: Int64 = 0
        for d in digits.reversed() {
            if res > (Int64.max - Int64(d)) / 1000000000 {
                return Int.max
            }
            res = res * 1000000000 + Int64(d)
        }
        return Int(res)
    }
    static func +(lhs: BigInt, rhs: BigInt) -> BigInt {
        var carry: UInt64 = 0
        var result: [UInt32] = []
        let maxLen = max(lhs.digits.count, rhs.digits.count)
        for i in 0..<maxLen {
            let a = i < lhs.digits.count ? UInt64(lhs.digits[i]) : 0
            let b = i < rhs.digits.count ? UInt64(rhs.digits[i]) : 0
            let sum = a + b + carry
            result.append(UInt32(sum % 1000000000))
            carry = sum / 1000000000
        }
        if carry > 0 { result.append(UInt32(carry)) }
        var r = BigInt(); r.digits = result; return r
    }
    static func -(lhs: BigInt, rhs: BigInt) -> BigInt {
        var borrow: Int64 = 0
        var result: [UInt32] = []
        for i in 0..<lhs.digits.count {
            var a = Int64(lhs.digits[i]) - borrow
            let b = i < rhs.digits.count ? Int64(rhs.digits[i]) : 0
            var diff = a - b
            if diff < 0 { diff += 1000000000; borrow = 1 } else { borrow = 0 }
            result.append(UInt32(diff))
        }
        while result.last == 0 { result.removeLast(); if result.isEmpty { break } }
        var r = BigInt(); r.digits = result; return r
    }
    static func *(lhs: BigInt, rhs: BigInt) -> BigInt {
        if lhs.digits.isEmpty || rhs.digits.isEmpty { return BigInt() }
        var result = Array(repeating: UInt64(0), count: lhs.digits.count + rhs.digits.count)
        for i in 0..<lhs.digits.count {
            var carry: UInt64 = 0
            for j in 0..<rhs.digits.count {
                let idx = i + j
                let prod = UInt64(lhs.digits[i]) * UInt64(rhs.digits[j]) + result[idx] + carry
                result[idx] = prod % 1000000000
                carry = prod / 1000000000
            }
            if carry > 0 { result[i + rhs.digits.count] += carry }
        }
        var resDigits: [UInt32] = result.map { UInt32($0) }
        while resDigits.last == 0 { resDigits.removeLast(); if resDigits.isEmpty { break } }
        var r = BigInt(); r.digits = resDigits; return r
    }
    func bitLength() -> Int {
        if digits.isEmpty { return 0 }
        var v = digits.last!
        var bits = 0
        while v > 0 { v >>= 1; bits += 1 }
        return bits + (digits.count - 1) * 30
    }
    static func <(lhs: BigInt, rhs: BigInt) -> Bool {
        if lhs.digits.count != rhs.digits.count { return lhs.digits.count < rhs.digits.count }
        for i in stride(from: lhs.digits.count-1, through: 0, by: -1) {
            if lhs.digits[i] != rhs.digits[i] { return lhs.digits[i] < rhs.digits[i] }
        }
        return false
    }
    static func >(lhs: BigInt, rhs: BigInt) -> Bool { return rhs < lhs }
    static func <=(lhs: BigInt, rhs: BigInt) -> Bool { return !(rhs < lhs) }
    static func >=(lhs: BigInt, rhs: BigInt) -> Bool { return !(lhs < rhs) }
    static func /(lhs: BigInt, rhs: BigInt) -> BigInt {
        let divisor = rhs.toInt()
        if divisor == 0 { return BigInt() }
        var result: [UInt32] = Array(repeating: 0, count: lhs.digits.count)
        var rem: Int64 = 0
        for i in stride(from: lhs.digits.count - 1, through: 0, by: -1) {
            let cur = rem * 1000000000 + Int64(lhs.digits[i])
            result[i] = UInt32(cur / Int64(divisor))
            rem = cur % Int64(divisor)
        }
        var r = BigInt(); r.digits = result
        while r.digits.last == 0 { r.digits.removeLast(); if r.digits.isEmpty { break } }
        return r
    }
    static func %(lhs: BigInt, rhs: BigInt) -> BigInt {
        let divisor = rhs.toInt()
        if divisor == 0 { return BigInt() }
        var rem: Int64 = 0
        for d in lhs.digits.reversed() {
            rem = (rem * 1000000000 + Int64(d)) % Int64(divisor)
        }
        return BigInt(Int(rem))
    }
    static func +(lhs: BigInt, rhs: Int) -> BigInt { return lhs + BigInt(rhs) }
    static func +(lhs: Int, rhs: BigInt) -> BigInt { return BigInt(lhs) + rhs }
    static func ==(lhs: BigInt, rhs: BigInt) -> Bool { lhs.digits == rhs.digits }
    var description: String {
        if digits.isEmpty { return "0" }
        var s = String(digits.last!)
        for d in digits.dropLast().reversed() { s += String(format: "%09d", d) }
        return s
    }
}
extension Int { init(_ b: BigInt) { self = b.toInt() } }
extension Double { init(_ b: BigInt) { self = Double(b.toInt()) } }
struct SplitResult: Codable {
    var left: Int
    var right: Int
    init() {
        self.left = 0
        self.right = 0
    }
    init(left: Int, right: Int) {
        self.left = left
        self.right = right
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let NIL = (0 &- 1)
    var node_values: [Int] = ([] as! [Int])
    var node_priors: [Double] = ([] as! [Double])
    var node_lefts: [Int] = ([] as! [Int])
    var node_rights: [Int] = ([] as! [Int])
    var seed: Int = 1
    func random() -> Double {
        seed = Int(((Int(((seed &* 13) &+ 7)) % 100 + 100) % 100))
        return (Double(seed) / 100.0)
    }
    func new_node(_ value: Int) -> Int {
        node_values = (_append(node_values, value) as! [Int])
        node_priors = (_append(node_priors, Double(random())) as! [Double])
        node_lefts = (_append(node_lefts, NIL) as! [Int])
        node_rights = (_append(node_rights, NIL) as! [Int])
        return (Int(((node_values).count)) &- 1)
    }
    func split(_ root: Int, _ value: Int) -> SplitResult {
        if (root == NIL) {
            return SplitResult(left: NIL, right: NIL)
        }
        if (value < (node_values[root] as? Int ?? 0)) {
            let res = _split((node_lefts[root] as? Int ?? 0), value)
            node_lefts = _set(node_lefts, root, Int(res.right))
            return SplitResult(left: res.left, right: root)
        }
        let res = _split((node_rights[root] as? Int ?? 0), value)
        node_rights = _set(node_rights, root, Int(res.left))
        return SplitResult(left: root, right: res.right)
    }
    func merge(_ left: Int, _ right: Int) -> Int {
        if (left == NIL) {
            return right
        }
        if (right == NIL) {
            return left
        }
        if (Double(node_priors[left]) < Double(node_priors[right])) {
            node_rights = _set(node_rights, left, Int(merge((node_rights[left] as? Int ?? 0), right)))
            return left
        }
        node_lefts = _set(node_lefts, right, Int(merge(left, (node_lefts[right] as? Int ?? 0))))
        return right
    }
    func insert(_ root: Int, _ value: Int) -> Int {
        let node = Int(new_node(value))
        let res = _split(root, value)
        return Int(merge(Int(merge(res.left, node)), res.right))
    }
    func erase(_ root: Int, _ value: Int) -> Int {
        let res1 = _split(root, (value &- 1))
        let res2 = _split(res1.right, value)
        return Int(merge(res1.left, res2.right))
    }
    func inorder(_ i: Int, _ acc: [Int]) -> [Int] {
        if (i == NIL) {
            return acc
        }
        let left_acc: [Int] = (inorder((node_lefts[i] as? Int ?? 0), (acc as! [Int])) as! [Int])
        let with_node: [Int] = (_append(left_acc, (node_values[i] as? Int ?? 0)) as! [Int])
        return (inorder((node_rights[i] as? Int ?? 0), (with_node as! [Int])) as! [Int])
    }
    func main() {
        var root: Int = NIL
        root = Int(insert(root, 1))
        print(_p("[" + (inorder(root, ([] as! [Int])) as! [Int]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
        root = Int(insert(root, 3))
        root = Int(insert(root, 5))
        root = Int(insert(root, 17))
        root = Int(insert(root, 19))
        root = Int(insert(root, 2))
        root = Int(insert(root, 16))
        root = Int(insert(root, 4))
        root = Int(insert(root, 0))
        print(_p("[" + (inorder(root, ([] as! [Int])) as! [Int]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
        root = Int(insert(root, 4))
        root = Int(insert(root, 4))
        root = Int(insert(root, 4))
        print(_p("[" + (inorder(root, ([] as! [Int])) as! [Int]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
        root = Int(erase(root, 0))
        print(_p("[" + (inorder(root, ([] as! [Int])) as! [Int]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
        root = Int(erase(root, 4))
        print(_p("[" + (inorder(root, ([] as! [Int])) as! [Int]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
