// Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:39:16 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func make_symmetric_tree() -> [[Int]] {
        return ([([1, 1, 2] as! [Int]), ([2, 3, 4] as! [Int]), ([2, 5, 6] as! [Int]), ([3, -1, -1] as! [Int]), ([4, -1, -1] as! [Int]), ([4, -1, -1] as! [Int]), ([3, -1, -1] as! [Int])] as! [[Int]])
    }
    func make_asymmetric_tree() -> [[Int]] {
        return ([([1, 1, 2] as! [Int]), ([2, 3, 4] as! [Int]), ([2, 5, 6] as! [Int]), ([3, -1, -1] as! [Int]), ([4, -1, -1] as! [Int]), ([3, -1, -1] as! [Int]), ([4, -1, -1] as! [Int])] as! [[Int]])
    }
    func is_symmetric_tree(_ tree: [[Int]]) -> Bool {
        var stack: [Int] = ([(tree[0][1] as? Int ?? 0), (tree[0][2] as? Int ?? 0)] as! [Int])
        while (Int(((stack).count)) >= 2) {
            let left = (stack[(Int(((stack).count)) &- 2)] as? Int ?? 0)
            let right = (stack[(Int(((stack).count)) &- 1)] as? Int ?? 0)
            stack = (Array(stack[0..<(Int(((stack).count)) &- 2)]) as! [Int])
            if ((left == Int(-1)) && (right == Int(-1))) {
                continue
            }
            if ((left == Int(-1)) || (right == Int(-1))) {
                return false
            }
            let lnode: [Int] = (tree[left] as! [Int])
            let rnode: [Int] = (tree[right] as! [Int])
            if ((lnode[0] as? Int ?? 0) != (rnode[0] as? Int ?? 0)) {
                return false
            }
            stack = (_append(stack, (lnode[1] as? Int ?? 0)) as! [Int])
            stack = (_append(stack, (rnode[2] as? Int ?? 0)) as! [Int])
            stack = (_append(stack, (lnode[2] as? Int ?? 0)) as! [Int])
            stack = (_append(stack, (rnode[1] as? Int ?? 0)) as! [Int])
        }
        return true
    }
    let symmetric_tree: [[Int]] = (make_symmetric_tree() as! [[Int]])
    let asymmetric_tree: [[Int]] = (make_asymmetric_tree() as! [[Int]])
    print(_p(String(describing: is_symmetric_tree((symmetric_tree as! [[Int]])))))
    print(_p(String(describing: is_symmetric_tree((asymmetric_tree as! [[Int]])))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
