// Generated by Mochi transpiler v0.10.59 on 2025-08-06 23:17:19 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
struct HashTable: Codable {
    var size_table: Int
    var values: [Int?]
    var lim_charge: Double
    init() {
        self.size_table = 0
        self.values = []
        self.lim_charge = 0
    }
    init(size_table: Int, values: [Int?], lim_charge: Double) {
        self.size_table = size_table
        self.values = values
        self.lim_charge = lim_charge
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func create_hash_table(_ size: Int) -> HashTable {
        var vals: [Int?] = ([] as! [Int?])
        var i: Int = 0
        while (i < size) {
            vals = ((_append(vals, nil) as! [Any??]) as! [Int?])
            i = Int((i &+ 1))
        }
        return HashTable(size_table: size, values: vals, lim_charge: 0.75)
    }
    func hash_function(_ table: HashTable, _ key: Int) -> Int {
        return ((key % table.size_table + table.size_table) % table.size_table)
    }
    func balanced_factor(_ table: HashTable) -> Double {
        var count: Int = 0
        var i: Int = 0
        while (i < Int(((table.values).count))) {
            if ((table.values[i] as? Int ?? 0) != nil) {
                count = Int((count &+ 1))
            }
            i = Int((i &+ 1))
        }
        return (Double(count) / Double(table.size_table))
    }
    func collision_resolution(_ table: HashTable, _ key: Int) -> Int {
        var i: Int = 1
        var new_key: Int = Int(hash_function((table as! HashTable), (key &+ (i &* i))))
        while (((table.values[new_key] as? Int ?? 0) != nil) && ((table.values[new_key] as? Int ?? 0) != key)) {
            i = Int((i &+ 1))
            if (Double(balanced_factor((table as! HashTable))) >= table.lim_charge) {
                return table.size_table
            }
            new_key = Int(hash_function((table as! HashTable), (key &+ (i &* i))))
        }
        return new_key
    }
    func insert_data(_ table: inout HashTable, _ data: Int) -> Void {
        var key: Int = Int(hash_function((table as! HashTable), data))
        var vals: [Int?] = table.values
        if ((vals[key] as? Int ?? 0) == nil) {
            vals = _set(vals, key, (data as! Int))
        } else if ((vals[key] as? Int ?? 0) == data) {
            table.values = (vals as! [Int?])
            return
        } else {
            let new_key = Int(collision_resolution((table as! HashTable), key))
            if ((new_key < Int(((vals).count))) && ((vals[new_key] as? Int ?? 0) == nil)) {
                vals = _set(vals, new_key, (data as! Int))
            }
        }
        
        table.values = (vals as! [Int?])
    }
    func int_to_string(_ n: Int) -> String {
        if (n == 0) {
            return "0"
        }
        var num: Int = n
        var neg: Bool = false
        if (num < 0) {
            neg = true
            num = Int(-num)
        }
        var res: String = ""
        while (num > 0) {
            let digit = ((num % 10 + 10) % 10)
            let ch = String(describing: String(Array(String(describing: "0123456789"))[digit..<(digit &+ 1)]))
            res = ((ch + res) as! String)
            num = Int((num / 10))
        }
        if neg {
            res = (("-" + res) as! String)
        }
        return res
    }
    func keys_to_string(_ table: HashTable) -> String {
        var result: String = "{"
        var first: Bool = true
        var i: Int = 0
        while (i < Int(((table.values).count))) {
            let v = (table.values[i] as? Int ?? 0)
            if (v != nil) {
                if (!first) {
                    result = ((result + ", ") as! String)
                }
                result = ((((result + String(describing: int_to_string(i))) + ": ") + String(describing: int_to_string(v))) as! String)
                first = false
            }
            i = Int((i &+ 1))
        }
        result = ((result + "}") as! String)
        return result
    }
    var qp = create_hash_table(8)
    _ = insert_data(&qp, 0)
    _ = insert_data(&qp, 999)
    _ = insert_data(&qp, 111)
    print(_p(String(describing: keys_to_string((qp as! HashTable)))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
