// Generated by Mochi transpiler v0.10.59 on 2025-08-06 23:17:14 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
struct HashTable: Codable {
    var size_table: Int
    var values: [Int?]
    var filled: [Bool?]
    var charge_factor: Int
    var lim_charge: Double
    init() {
        self.size_table = 0
        self.values = []
        self.filled = []
        self.charge_factor = 0
        self.lim_charge = 0
    }
    init(size_table: Int, values: [Int?], filled: [Bool?], charge_factor: Int, lim_charge: Double) {
        self.size_table = size_table
        self.values = values
        self.filled = filled
        self.charge_factor = charge_factor
        self.lim_charge = lim_charge
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func repeat_int(_ n: Int, _ val: Int) -> [Int?] {
        var res: [Int?] = []
        var i: Int = 0
        while (i < n) {
            res = (_append(res, val) as! [Int?])
            i = Int((i &+ 1))
        }
        return res
    }
    func repeat_bool(_ n: Int, _ val: Bool) -> [Bool?] {
        var res: [Bool?] = []
        var i: Int = 0
        while (i < n) {
            res = (_append(res, val) as! [Bool?])
            i = Int((i &+ 1))
        }
        return res
    }
    func set_int(_ xs: [Int?], _ idx: Int, _ value: Int) -> [Int?] {
        var res: [Int?] = []
        var i: Int = 0
        while (i < Int(((xs).count))) {
            if (i == idx) {
                res = (_append(res, value) as! [Int?])
            } else {
                res = (_append(res, (xs[i] as? Int ?? 0)) as! [Int?])
            }
            i = Int((i &+ 1))
        }
        return res
    }
    func set_bool(_ xs: [Bool?], _ idx: Int, _ value: Bool) -> [Bool?] {
        var res: [Bool?] = []
        var i: Int = 0
        while (i < Int(((xs).count))) {
            if (i == idx) {
                res = (_append(res, value) as! [Bool?])
            } else {
                res = (_append(res, (xs[i] as! Bool)) as! [Bool?])
            }
            i = Int((i &+ 1))
        }
        return res
    }
    func create_table(_ size_table: Int, _ charge_factor: Int, _ lim_charge: Double) -> HashTable {
        return HashTable(size_table: size_table, values: (repeat_int(size_table, 0) as! [Int?]), filled: (repeat_bool(size_table, false) as! [Bool?]), charge_factor: charge_factor, lim_charge: lim_charge)
    }
    func hash_function(_ ht: HashTable, _ key: Int) -> Int {
        var k: Int = ((key % ht.size_table + ht.size_table) % ht.size_table)
        if (k < 0) {
            k = Int((k &+ ht.size_table))
        }
        return k
    }
    func is_prime(_ n: Int) -> Bool {
        if (n < 2) {
            return false
        }
        if (((n % 2 + 2) % 2) == 0) {
            return (n == 2)
        }
        var i: Int = 3
        while ((i &* i) <= n) {
            if (((n % i + i) % i) == 0) {
                return false
            }
            i = Int((i &+ 2))
        }
        return true
    }
    func next_prime(_ value: Int, _ factor: Int) -> Int {
        var candidate: Int = ((value &* factor) &+ 1)
        while (!is_prime(candidate)) {
            candidate = Int((candidate &+ 1))
        }
        return candidate
    }
    func set_value(_ ht: HashTable, _ key: Int, _ data: Int) -> HashTable {
        let new_values: [Int?] = (set_int((ht.values as! [Int?]), key, data) as! [Int?])
        let new_filled: [Bool?] = (set_bool((ht.filled as! [Bool?]), key, true) as! [Bool?])
        return HashTable(size_table: ht.size_table, values: new_values, filled: new_filled, charge_factor: ht.charge_factor, lim_charge: ht.lim_charge)
    }
    func collision_resolution(_ ht: HashTable, _ key: Int) -> Int {
        var new_key: Int = Int(hash_function((ht as! HashTable), (key &+ 1)))
        var steps: Int = 0
        while (ht.filled[new_key] as! Bool) {
            new_key = Int(hash_function((ht as! HashTable), (new_key &+ 1)))
            steps = Int((steps &+ 1))
            if (steps >= ht.size_table) {
                return -1
            }
        }
        return new_key
    }
    func rehashing(_ ht: HashTable) -> HashTable {
        var survivors: [Int?] = []
        var i: Int = 0
        while (i < Int(((ht.values).count))) {
            if (ht.filled[i] as! Bool) {
                survivors = (_append(survivors, (ht.values[i] as? Int ?? 0)) as! [Int?])
            }
            i = Int((i &+ 1))
        }
        let new_size = Int(next_prime(ht.size_table, 2))
        var new_ht: HashTable = create_table(new_size, ht.charge_factor, Double(ht.lim_charge))
        i = 0
        while (i < Int(((survivors).count))) {
            new_ht = (insert_data((new_ht as! HashTable), (survivors[i] as? Int ?? 0)) as! HashTable)
            i = Int((i &+ 1))
        }
        return new_ht
    }
    func insert_data(_ ht: HashTable, _ data: Int) -> HashTable {
        let key = Int(hash_function((ht as! HashTable), data))
        if !(ht.filled[key] ?? false) {
            return set_value((ht as! HashTable), key, data)
        }
        if ((ht.values[key] as? Int ?? 0) == data) {
            return ht
        }
        let new_key = Int(collision_resolution((ht as! HashTable), key))
        if (new_key >= 0) {
            return set_value((ht as! HashTable), new_key, data)
        }
        let resized = rehashing((ht as! HashTable))
        return insert_data((resized as! HashTable), data)
    }
    func keys(_ ht: HashTable) -> [[Int?]?] {
        var res: [[Int?]?] = []
        var i: Int = 0
        while (i < Int(((ht.values).count))) {
            if (ht.filled[i] as! Bool) {
                res = (_append(res, ([i, (ht.values[i] as? Int ?? 0)] as! [Int?])) as! [[Int?]?])
            }
            i = Int((i &+ 1))
        }
        return res
    }
    func main() {
        var ht: HashTable = create_table(3, 1, 0.75)
        ht = (insert_data((ht as! HashTable), 17) as! HashTable)
        ht = (insert_data((ht as! HashTable), 18) as! HashTable)
        ht = (insert_data((ht as! HashTable), 99) as! HashTable)
        print(_p("[" + (keys(ht) as! [Any??]).map{ if let s = $0 as? String { "\"" + s.replacingOccurrences(of: "\"", with: "\\\"") + "\"" } else { _p($0) } }.joined(separator: ", ") + "]"))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
