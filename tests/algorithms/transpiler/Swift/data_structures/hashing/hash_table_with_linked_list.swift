// Generated by Mochi transpiler v0.10.59 on 2025-08-06 23:13:04 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
struct HashTableWithLinkedList: Codable {
    var size_table: Int
    var charge_factor: Int
    var values: [[Int]]
    var keys: [Int: [Int]]
    init() {
        self.size_table = 0
        self.charge_factor = 0
        self.values = []
        self.keys = [:]
    }
    init(size_table: Int, charge_factor: Int, values: [[Int]], keys: [Int: [Int]]) {
        self.size_table = size_table
        self.charge_factor = charge_factor
        self.values = values
        self.keys = keys
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func make_table(_ size_table: Int, _ charge_factor: Int) -> HashTableWithLinkedList {
        var vals: [[Int]] = ([] as! [[Int]])
        var i: Int = 0
        while (i < size_table) {
            vals = ((_append(vals, []) as! [Any?]) as! [[Int]])
            i = Int((i &+ 1))
        }
        return HashTableWithLinkedList(size_table: size_table, charge_factor: charge_factor, values: vals, keys: [:])
    }
    func hash_function(_ ht: HashTableWithLinkedList, _ key: Int) -> Int {
        var res: Int = ((key % ht.size_table + ht.size_table) % ht.size_table)
        if (res < 0) {
            res = Int((res &+ ht.size_table))
        }
        return res
    }
    func prepend(_ lst: [Int], _ value: Int) -> [Int] {
        var result: [Int] = ([value] as! [Int])
        var i: Int = 0
        while (i < Int(((lst).count))) {
            result = (_append(result, (lst[i] as? Int ?? 0)) as! [Int])
            i = Int((i &+ 1))
        }
        return result
    }
    func set_value(_ ht: inout HashTableWithLinkedList, _ key: Int, _ data: Int) {
        let current: [Int] = (ht.values[key] as! [Int])
        let updated: [Int] = (prepend((current as! [Int]), data) as! [Int])
        var vals: [[Int]] = ht.values
        vals = _set(vals, key, (updated as! [Int]))
        ht.values = (vals as! [[Int]])
        var ks: [Int: [Int]] = ht.keys
        ks = _set(ks, key, (updated as! [Int]))
        ht.keys = (ks as! [Int: [Int]])
    }
    func count_empty(_ ht: HashTableWithLinkedList) -> Int {
        var count: Int = 0
        var i: Int = 0
        while (i < Int(((ht.values).count))) {
            if (Int((((ht.values[i] as! [Int])).count)) == 0) {
                count = Int((count &+ 1))
            }
            i = Int((i &+ 1))
        }
        return count
    }
    func balanced_factor(_ ht: HashTableWithLinkedList) -> Double {
        var total: Int = 0
        var i: Int = 0
        while (i < Int(((ht.values).count))) {
            total = Int((total &+ Int((ht.charge_factor &- Int((((ht.values[i] as! [Int])).count))))))
            i = Int((i &+ 1))
        }
        return ((Double(total) / Double(ht.size_table)) * Double(ht.charge_factor))
    }
    func collision_resolution(_ ht: HashTableWithLinkedList, _ key: Int) -> Int {
        if (!((Int((((ht.values[key] as! [Int])).count)) == ht.charge_factor) && (Int(count_empty((ht as! HashTableWithLinkedList))) == 0))) {
            return key
        }
        var new_key: Int = ((Int((key &+ 1)) % ht.size_table + ht.size_table) % ht.size_table)
        var steps: Int = 0
        while ((Int((((ht.values[new_key] as! [Int])).count)) == ht.charge_factor) && (steps < (ht.size_table &- 1))) {
            new_key = Int(((Int((new_key &+ 1)) % ht.size_table + ht.size_table) % ht.size_table))
            steps = Int((steps &+ 1))
        }
        if (Int((((ht.values[new_key] as! [Int])).count)) < ht.charge_factor) {
            return new_key
        }
        return -1
    }
    func insert(_ ht: inout HashTableWithLinkedList, _ data: Int) {
        var key: Int = Int(hash_function((ht as! HashTableWithLinkedList), data))
        if ((Int((((ht.values[key] as! [Int])).count)) == 0) || (Int((((ht.values[key] as! [Int])).count)) < ht.charge_factor)) {
            _ = set_value(&ht, key, data)
            return
        }
        var dest: Int = Int(collision_resolution((ht as! HashTableWithLinkedList), key))
        if (dest >= 0) {
            _ = set_value(&ht, dest, data)
        } else {
            print(_p("table full"))
        }
    }
    func main() {
        var ht: HashTableWithLinkedList = make_table(3, 2)
        _ = insert(&ht, 10)
        _ = insert(&ht, 20)
        _ = insert(&ht, 30)
        _ = insert(&ht, 40)
        _ = insert(&ht, 50)
        print(_p("[" + ht.values.map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
        print(_p(String(describing: Double(balanced_factor((ht as! HashTableWithLinkedList))))))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
