// Generated by Mochi transpiler v0.10.59 on 2025-08-06 23:17:09 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
struct Bloom: Codable {
    var size: Int
    var bits: [Int?]
    init() {
        self.size = 0
        self.bits = []
    }
    init(size: Int, bits: [Int?]) {
        self.size = size
        self.bits = bits
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let ascii = " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"
    func ord(_ ch: String) -> Int {
        var i: Int = 0
        while (i < Int(((ascii).count))) {
            if (String(Array(ascii)[i..<(i &+ 1)]) == ch) {
                return (32 &+ i)
            }
            i = Int((i &+ 1))
        }
        return 0
    }
    func new_bloom(_ size: Int) -> Bloom {
        var bits: [Int?] = ([] as! [Int?])
        var i: Int = 0
        while (i < size) {
            bits = (_append(bits, 0) as! [Int?])
            i = Int((i &+ 1))
        }
        return Bloom(size: size, bits: bits)
    }
    func hash1(_ value: String, _ size: Int) -> Int {
        var h: Int = 0
        var i: Int = 0
        while (i < Int(((value).count))) {
            h = Int(((Int(((h &* 31) &+ Int(ord((String(Array(value)[i..<(i &+ 1)]) as! String))))) % size + size) % size))
            i = Int((i &+ 1))
        }
        return h
    }
    func hash2(_ value: String, _ size: Int) -> Int {
        var h: Int = 0
        var i: Int = 0
        while (i < Int(((value).count))) {
            h = Int(((Int(((h &* 131) &+ Int(ord((String(Array(value)[i..<(i &+ 1)]) as! String))))) % size + size) % size))
            i = Int((i &+ 1))
        }
        return h
    }
    func hash_positions(_ value: String, _ size: Int) -> [Int?] {
        let h1 = Int(hash1((value as! String), size))
        let h2 = Int(hash2((value as! String), size))
        var res: [Int?] = ([] as! [Int?])
        res = (_append(res, h1) as! [Int?])
        res = (_append(res, h2) as! [Int?])
        return res
    }
    func bloom_add(_ b: Bloom, _ value: String) -> Bloom {
        let pos: [Int?] = (hash_positions((value as! String), b.size) as! [Int?])
        var bits: [Int?] = b.bits
        var i: Int = 0
        while (i < Int(((pos).count))) {
            let idx = ((b.size &- 1) &- (pos[i] as? Int ?? 0))
            bits = _set(bits, idx, 1)
            i = Int((i &+ 1))
        }
        return Bloom(size: b.size, bits: bits)
    }
    func bloom_exists(_ b: Bloom, _ value: String) -> Bool {
        let pos: [Int?] = (hash_positions((value as! String), b.size) as! [Int?])
        var i: Int = 0
        while (i < Int(((pos).count))) {
            let idx = ((b.size &- 1) &- (pos[i] as? Int ?? 0))
            if ((b.bits[idx] as? Int ?? 0) != 1) {
                return false
            }
            i = Int((i &+ 1))
        }
        return true
    }
    func bitstring(_ b: Bloom) -> String {
        var res: String = ""
        var i: Int = 0
        while (i < b.size) {
            res = ((res + String(describing: (b.bits[i] as? Int ?? 0))) as! String)
            i = Int((i &+ 1))
        }
        return res
    }
    func format_hash(_ b: Bloom, _ value: String) -> String {
        let pos: [Int?] = (hash_positions((value as! String), b.size) as! [Int?])
        var bits: [Int?] = ([] as! [Int?])
        var i: Int = 0
        while (i < b.size) {
            bits = (_append(bits, 0) as! [Int?])
            i = Int((i &+ 1))
        }
        i = 0
        while (i < Int(((pos).count))) {
            let idx = ((b.size &- 1) &- (pos[i] as? Int ?? 0))
            bits = _set(bits, idx, 1)
            i = Int((i &+ 1))
        }
        var res: String = ""
        i = 0
        while (i < b.size) {
            res = ((res + String(describing: (bits[i] as? Int ?? 0))) as! String)
            i = Int((i &+ 1))
        }
        return res
    }
    func estimated_error_rate(_ b: Bloom) -> Double {
        var ones: Int = 0
        var i: Int = 0
        while (i < b.size) {
            if ((b.bits[i] as? Int ?? 0) == 1) {
                ones = Int((ones &+ 1))
            }
            i = Int((i &+ 1))
        }
        let frac = (Double(ones) / Double(b.size))
        return (frac * frac)
    }
    func any_in(_ b: Bloom, _ items: [String?]) -> Bool {
        var i: Int = 0
        while (i < Int(((items).count))) {
            if bloom_exists((b as! Bloom), (items[i] as! String)) {
                return true
            }
            i = Int((i &+ 1))
        }
        return false
    }
    func main() {
        var bloom: Bloom = new_bloom(8)
        print(_p(String(describing: bitstring((bloom as! Bloom)))))
        print(_p(bloom_exists((bloom as! Bloom), "Titanic")))
        bloom = (bloom_add((bloom as! Bloom), "Titanic") as! Bloom)
        print(_p(String(describing: bitstring((bloom as! Bloom)))))
        print(_p(bloom_exists((bloom as! Bloom), "Titanic")))
        bloom = (bloom_add((bloom as! Bloom), "Avatar") as! Bloom)
        print(_p(bloom_exists((bloom as! Bloom), "Avatar")))
        print(_p(String(describing: format_hash((bloom as! Bloom), "Avatar"))))
        print(_p(String(describing: bitstring((bloom as! Bloom)))))
        let not_present: [String?] = (["The Godfather", "Interstellar", "Parasite", "Pulp Fiction"] as! [String?])
        var i: Int = 0
        while (i < Int(((not_present).count))) {
            let film = (not_present[i] as! String)
            print(_p(((film + ":") + String(describing: format_hash((bloom as! Bloom), (film as! String))))))
            i = Int((i &+ 1))
        }
        print(_p(any_in((bloom as! Bloom), (not_present as! [String?]))))
        print(_p(bloom_exists((bloom as! Bloom), "Ratatouille")))
        print(_p(String(describing: format_hash((bloom as! Bloom), "Ratatouille"))))
        print(_p(String(describing: Double(estimated_error_rate((bloom as! Bloom))))))
        bloom = (bloom_add((bloom as! Bloom), "The Godfather") as! Bloom)
        print(_p(String(describing: Double(estimated_error_rate((bloom as! Bloom))))))
        print(_p(String(describing: bitstring((bloom as! Bloom)))))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
