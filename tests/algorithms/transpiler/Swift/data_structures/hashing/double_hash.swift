// Generated by Mochi transpiler v0.10.59 on 2025-08-06 23:11:57 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func is_prime(_ n: Int) -> Bool {
        if (n < 2) {
            return false
        }
        var i: Int = 2
        while ((i &* i) <= n) {
            if (((n % i + i) % i) == 0) {
                return false
            }
            i = Int((i &+ 1))
        }
        return true
    }
    func prev_prime(_ n: Int) -> Int {
        var p: Int = (n &- 1)
        while (p >= 2) {
            if is_prime(p) {
                return p
            }
            p = Int((p &- 1))
        }
        return 1
    }
    func create_table(_ size: Int) -> [Int] {
        var vals: [Int] = ([] as! [Int])
        var i: Int = 0
        while (i < size) {
            vals = (_append(vals, Int(-1)) as! [Int])
            i = Int((i &+ 1))
        }
        return vals
    }
    func hash1(_ size: Int, _ key: Int) -> Int {
        return ((key % size + size) % size)
    }
    func hash2(_ prime: Int, _ key: Int) -> Int {
        return (prime &- Int(((key % prime + prime) % prime)))
    }
    func insert_double_hash(_ values: [Int], _ size: Int, _ prime: Int, _ value: Int) -> [Int] {
        var vals: [Int] = values
        var idx: Int = Int(hash1(size, value))
        let step = Int(hash2(prime, value))
        var count: Int = 0
        while (((vals[idx] as? Int ?? 0) != Int(-1)) && (count < size)) {
            idx = Int(((Int((idx &+ step)) % size + size) % size))
            count = Int((count &+ 1))
        }
        if ((vals[idx] as? Int ?? 0) == Int(-1)) {
            vals = _set(vals, idx, (value as! Int))
        }
        return vals
    }
    func table_keys(_ values: [Int]) -> [Int: Int] {
        var res: [Int: Int] = ([:] as! [Int: Int])
        var i: Int = 0
        while (i < Int(((values).count))) {
            if ((values[i] as? Int ?? 0) != Int(-1)) {
                res = _set(res, i, (values[i] as? Int ?? 0))
            }
            i = Int((i &+ 1))
        }
        return res
    }
    func run_example(_ size: Int, _ data: [Int]) {
        let prime = Int(prev_prime(size))
        var table: [Int] = (create_table(size) as! [Int])
        var i: Int = 0
        while (i < Int(((data).count))) {
            table = (insert_double_hash((table as! [Int]), size, prime, (data[i] as? Int ?? 0)) as! [Int])
            i = Int((i &+ 1))
        }
        print(_p(String(describing: (table_keys((table as! [Int])) as! [Int: Int]))))
    }
    _ = run_example(3, ([10, 20, 30] as! [Int]))
    _ = run_example(4, ([10, 20, 30] as! [Int]))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
