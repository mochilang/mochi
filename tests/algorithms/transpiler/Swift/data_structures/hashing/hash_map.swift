// Generated by Mochi transpiler v0.10.59 on 2025-08-06 23:11:58 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
struct Bucket: Codable {
    var state: Int
    var key: Int
    var val: Int
    init() {
        self.state = 0
        self.key = 0
        self.val = 0
    }
    init(state: Int, key: Int, val: Int) {
        self.state = state
        self.key = key
        self.val = val
    }
}
struct HashMap: Codable {
    var buckets: [Bucket]
    var len: Int
    var cap_num: Int
    var cap_den: Int
    var initial_size: Int
    init() {
        self.buckets = []
        self.len = 0
        self.cap_num = 0
        self.cap_den = 0
        self.initial_size = 0
    }
    init(buckets: [Bucket], len: Int, cap_num: Int, cap_den: Int, initial_size: Int) {
        self.buckets = buckets
        self.len = len
        self.cap_num = cap_num
        self.cap_den = cap_den
        self.initial_size = initial_size
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func make_buckets(_ n: Int) -> [Bucket] {
        var buckets: [Bucket] = []
        var i: Int = 0
        while (i < n) {
            buckets = (_append(buckets, Bucket(state: 0, key: 0, val: 0)) as! [Bucket])
            i = Int((i &+ 1))
        }
        return buckets
    }
    func hashmap_new(_ initial_size: Int) -> HashMap {
        return HashMap(buckets: (make_buckets(initial_size) as! [Bucket]), len: 0, cap_num: 3, cap_den: 4, initial_size: initial_size)
    }
    func bucket_index(_ hm: HashMap, _ key: Int) -> Int {
        var ind: Int = ((key % Int(((hm.buckets).count)) + Int(((hm.buckets).count))) % Int(((hm.buckets).count)))
        if (ind < 0) {
            ind = Int((ind &+ Int(((hm.buckets).count))))
        }
        return ind
    }
    func next_index(_ hm: HashMap, _ ind: Int) -> Int {
        return ((Int((ind &+ 1)) % Int(((hm.buckets).count)) + Int(((hm.buckets).count))) % Int(((hm.buckets).count)))
    }
    func try_set(_ hm: inout HashMap, _ ind: Int, _ key: Int, _ val: Int) -> Bool {
        var buckets: [Bucket] = hm.buckets
        let b = (buckets[ind] as! Bucket)
        if ((b.state == 0) || (b.state == 2)) {
            buckets = _set(buckets, ind, (Bucket(state: 1, key: key, val: val) as! Bucket))
            hm.buckets = (buckets as! [Bucket])
            hm.len = Int((hm.len &+ 1))
            return true
        }
        if (b.key == key) {
            buckets = _set(buckets, ind, (Bucket(state: 1, key: key, val: val) as! Bucket))
            hm.buckets = (buckets as! [Bucket])
            return true
        }
        return false
    }
    func is_full(_ hm: HashMap) -> Bool {
        let limit = ((Int(((hm.buckets).count)) &* hm.cap_num) / hm.cap_den)
        return (hm.len >= limit)
    }
    func is_sparse(_ hm: HashMap) -> Bool {
        if (Int(((hm.buckets).count)) <= hm.initial_size) {
            return false
        }
        let limit = ((Int(((hm.buckets).count)) &* hm.cap_num) / Int((2 &* hm.cap_den)))
        return (hm.len < limit)
    }
    func resize(_ hm: inout HashMap, _ new_size: Int) {
        let old: [Bucket] = hm.buckets
        hm.buckets = (make_buckets(new_size) as! [Bucket])
        hm.len = 0
        var i: Int = 0
        while (i < Int(((old).count))) {
            let it = (old[i] as! Bucket)
            if (it.state == 1) {
                _ = add_item(&hm, it.key, it.val)
            }
            i = Int((i &+ 1))
        }
    }
    func size_up(_ hm: inout HashMap) {
        _ = resize(&hm, (Int(((hm.buckets).count)) &* 2))
    }
    func size_down(_ hm: inout HashMap) {
        _ = resize(&hm, (Int(((hm.buckets).count)) / 2))
    }
    func add_item(_ hm: inout HashMap, _ key: Int, _ val: Int) {
        var ind: Int = Int(bucket_index((hm as! HashMap), key))
        var i: Int = 0
        while (i < Int(((hm.buckets).count))) {
            if try_set(&hm, ind, key, val) {
                break
            }
            ind = Int(next_index((hm as! HashMap), ind))
            i = Int((i &+ 1))
        }
    }
    func hashmap_set(_ hm: inout HashMap, _ key: Int, _ val: Int) {
        if is_full((hm as! HashMap)) {
            _ = size_up(&hm)
        }
        _ = add_item(&hm, key, val)
    }
    func hashmap_get(_ hm: HashMap, _ key: Int) -> Int {
        var buckets: [Bucket] = hm.buckets
        var ind: Int = Int(bucket_index((hm as! HashMap), key))
        var i: Int = 0
        while (i < Int(((buckets).count))) {
            let it = (buckets[ind] as! Bucket)
            if (it.state == 0) {
                break
            }
            if ((it.state == 1) && (it.key == key)) {
                return it.val
            }
            ind = Int(next_index((hm as! HashMap), ind))
            i = Int((i &+ 1))
        }
        return 0
    }
    func hashmap_del(_ hm: inout HashMap, _ key: Int) {
        var buckets: [Bucket] = hm.buckets
        var ind: Int = Int(bucket_index((hm as! HashMap), key))
        var i: Int = 0
        while (i < Int(((buckets).count))) {
            let it = (buckets[ind] as! Bucket)
            if (it.state == 0) {
                print(_p(("KeyError: " + String(describing: key))))
                return
            }
            if ((it.state == 1) && (it.key == key)) {
                buckets = _set(buckets, ind, (Bucket(state: 2, key: 0, val: 0) as! Bucket))
                hm.buckets = (buckets as! [Bucket])
                hm.len = Int((hm.len &- 1))
                break
            }
            ind = Int(next_index((hm as! HashMap), ind))
            i = Int((i &+ 1))
        }
        if is_sparse((hm as! HashMap)) {
            _ = size_down(&hm)
        }
    }
    func hashmap_len(_ hm: HashMap) -> Int {
        return hm.len
    }
    func hashmap_repr(_ hm: HashMap) -> String {
        var out: String = "HashMap("
        var first: Bool = true
        var i: Int = 0
        while (i < Int(((hm.buckets).count))) {
            let b = (hm.buckets[i] as! Bucket)
            if (b.state == 1) {
                if (!first) {
                    out = ((out + ", ") as! String)
                } else {
                    first = false
                }
                out = ((((out + String(describing: b.key)) + ": ") + String(describing: b.val)) as! String)
            }
            i = Int((i &+ 1))
        }
        out = ((out + ")") as! String)
        return out
    }
    var hm: HashMap = hashmap_new(5)
    _ = hashmap_set(&hm, 1, 10)
    _ = hashmap_set(&hm, 2, 20)
    _ = hashmap_set(&hm, 3, 30)
    print(_p(String(describing: hashmap_repr((hm as! HashMap)))))
    print(_p(String(describing: Int(hashmap_get((hm as! HashMap), 2)))))
    _ = hashmap_del(&hm, 1)
    print(_p(String(describing: hashmap_repr((hm as! HashMap)))))
    print(_p(String(describing: Int(hashmap_len((hm as! HashMap))))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
