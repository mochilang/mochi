// Generated by Mochi transpiler v0.10.59 on 2025-08-06 23:13:06 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func isPrime(_ number: Int) -> Bool {
        if (number < 2) {
            return false
        }
        if (number < 4) {
            return true
        }
        if (((number % 2 + 2) % 2) == 0) {
            return false
        }
        var i: Int = 3
        while ((i &* i) <= number) {
            if (((number % i + i) % i) == 0) {
                return false
            }
            i = Int((i &+ 2))
        }
        return true
    }
    func nextPrime(_ value: Int, _ factor: Int, _ desc: Bool) -> Int {
        var v: Int = (value &* factor)
        let firstValue = v
        while (!isPrime(v)) {
            if desc {
                v = Int((v &- 1))
            } else {
                v = Int((v &+ 1))
            }
        }
        if (v == firstValue) {
            if desc {
                return Int(nextPrime((v &- 1), 1, (desc as! Bool)))
            } else {
                return Int(nextPrime((v &+ 1), 1, (desc as! Bool)))
            }
        }
        return v
    }
    print(_p(isPrime(0)))
    print(_p(isPrime(1)))
    print(_p(isPrime(2)))
    print(_p(isPrime(3)))
    print(_p(isPrime(27)))
    print(_p(isPrime(87)))
    print(_p(isPrime(563)))
    print(_p(isPrime(2999)))
    print(_p(isPrime(67483)))
    print(_p(Int(nextPrime(14, 1, false))))
    print(_p(Int(nextPrime(14, 1, true))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
