// Generated by Mochi transpiler v0.10.59 on 2025-08-06 23:17:26 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
struct Entry: Codable {
    var key: String
    var value: String
    init() {
        self.key = ""
        self.value = ""
    }
    init(key: String, value: String) {
        self.key = key
        self.value = value
    }
}
struct HashMap: Codable {
    var entries: [Entry?]
    init() {
        self.entries = []
    }
    init(entries: [Entry?]) {
        self.entries = entries
    }
}
struct GetResult: Codable {
    var found: Bool
    var value: String
    init() {
        self.found = false
        self.value = ""
    }
    init(found: Bool, value: String) {
        self.found = found
        self.value = value
    }
}
struct DelResult: Codable {
    var map: HashMap
    var ok: Bool
    init() {
        self.map = HashMap()
        self.ok = false
    }
    init(map: HashMap, ok: Bool) {
        self.map = map
        self.ok = ok
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func make_hash_map() -> HashMap {
        return HashMap(entries: ([] as! [Entry?]))
    }
    func hm_len(_ m: HashMap) -> Int {
        return Int(((m.entries).count))
    }
    func hm_set(_ m: HashMap, _ key: String, _ value: String) -> HashMap {
        var entries: [Entry?] = m.entries
        var updated: Bool = false
        var new_entries: [Entry?] = ([] as! [Entry?])
        var i: Int = 0
        while (i < Int(((entries).count))) {
            let e = (entries[i] as! Entry)
            if (e.key == key) {
                new_entries = (_append(new_entries, Entry(key: key, value: value)) as! [Entry?])
                updated = true
            } else {
                new_entries = (_append(new_entries, e) as! [Entry?])
            }
            i = Int((i &+ 1))
        }
        if (!updated) {
            new_entries = (_append(new_entries, Entry(key: key, value: value)) as! [Entry?])
        }
        return HashMap(entries: new_entries)
    }
    func hm_get(_ m: HashMap, _ key: String) -> GetResult {
        var i: Int = 0
        while (i < Int(((m.entries).count))) {
            let e = (m.entries[i] as! Entry)
            if (e.key == key) {
                return GetResult(found: true, value: e.value)
            }
            i = Int((i &+ 1))
        }
        return GetResult(found: false, value: "")
    }
    func hm_del(_ m: HashMap, _ key: String) -> DelResult {
        var entries: [Entry?] = m.entries
        var new_entries: [Entry?] = ([] as! [Entry?])
        var removed: Bool = false
        var i: Int = 0
        while (i < Int(((entries).count))) {
            let e = (entries[i] as! Entry)
            if (e.key == key) {
                removed = true
            } else {
                new_entries = (_append(new_entries, e) as! [Entry?])
            }
            i = Int((i &+ 1))
        }
        if removed {
            return DelResult(map: HashMap(entries: new_entries), ok: true)
        }
        return DelResult(map: m, ok: false)
    }
    func test_add_items() -> Bool {
        var h: HashMap = make_hash_map()
        h = (hm_set((h as! HashMap), "key_a", "val_a") as! HashMap)
        h = (hm_set((h as! HashMap), "key_b", "val_b") as! HashMap)
        let a = hm_get((h as! HashMap), "key_a")
        let b = hm_get((h as! HashMap), "key_b")
        return (((((Int(hm_len((h as! HashMap))) == 2) && a.found) && b.found) && (a.value == "val_a")) && (b.value == "val_b"))
    }
    func test_overwrite_items() -> Bool {
        var h: HashMap = make_hash_map()
        h = (hm_set((h as! HashMap), "key_a", "val_a") as! HashMap)
        h = (hm_set((h as! HashMap), "key_a", "val_b") as! HashMap)
        let a = hm_get((h as! HashMap), "key_a")
        return (((Int(hm_len((h as! HashMap))) == 1) && a.found) && (a.value == "val_b"))
    }
    func test_delete_items() -> Bool {
        var h: HashMap = make_hash_map()
        h = (hm_set((h as! HashMap), "key_a", "val_a") as! HashMap)
        h = (hm_set((h as! HashMap), "key_b", "val_b") as! HashMap)
        let d1 = hm_del((h as! HashMap), "key_a")
        h = (d1.map as! HashMap)
        let d2 = hm_del((h as! HashMap), "key_b")
        h = (d2.map as! HashMap)
        h = (hm_set((h as! HashMap), "key_a", "val_a") as! HashMap)
        let d3 = hm_del((h as! HashMap), "key_a")
        h = (d3.map as! HashMap)
        return (Int(hm_len((h as! HashMap))) == 0)
    }
    func test_access_absent_items() -> Bool {
        var h: HashMap = make_hash_map()
        let g1 = hm_get((h as! HashMap), "key_a")
        let d1 = hm_del((h as! HashMap), "key_a")
        h = (d1.map as! HashMap)
        h = (hm_set((h as! HashMap), "key_a", "val_a") as! HashMap)
        let d2 = hm_del((h as! HashMap), "key_a")
        h = (d2.map as! HashMap)
        let d3 = hm_del((h as! HashMap), "key_a")
        h = (d3.map as! HashMap)
        let g2 = hm_get((h as! HashMap), "key_a")
        return ((((((g1.found == false) && (d1.ok == false)) && d2.ok) && (d3.ok == false)) && (g2.found == false)) && (Int(hm_len((h as! HashMap))) == 0))
    }
    func test_add_with_resize_up() -> Bool {
        var h: HashMap = make_hash_map()
        var i: Int = 0
        while (i < 5) {
            let s = String(describing: i)
            h = (hm_set((h as! HashMap), (s as! String), (s as! String)) as! HashMap)
            i = Int((i &+ 1))
        }
        return (Int(hm_len((h as! HashMap))) == 5)
    }
    func test_add_with_resize_down() -> Bool {
        var h: HashMap = make_hash_map()
        var i: Int = 0
        while (i < 5) {
            let s = String(describing: i)
            h = (hm_set((h as! HashMap), (s as! String), (s as! String)) as! HashMap)
            i = Int((i &+ 1))
        }
        var j: Int = 0
        while (j < 5) {
            let s = String(describing: j)
            let d = hm_del((h as! HashMap), (s as! String))
            h = (d.map as! HashMap)
            j = Int((j &+ 1))
        }
        h = (hm_set((h as! HashMap), "key_a", "val_b") as! HashMap)
        let a = hm_get((h as! HashMap), "key_a")
        return (((Int(hm_len((h as! HashMap))) == 1) && a.found) && (a.value == "val_b"))
    }
    print(_p(test_add_items()))
    print(_p(test_overwrite_items()))
    print(_p(test_delete_items()))
    print(_p(test_access_absent_items()))
    print(_p(test_add_with_resize_up()))
    print(_p(test_add_with_resize_down()))
    print(_p(true))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
