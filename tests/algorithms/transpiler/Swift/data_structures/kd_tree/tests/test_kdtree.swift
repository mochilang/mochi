// Generated by Mochi transpiler v0.10.61 on 2025-08-08 16:32:05 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return nil
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let INF: Double = 1000000000.0
    var seed: Int = 1
    func rand_float() -> Double {
        seed = _int(((_int(((seed &* 1103515245) &+ 12345)) % 2147483648 + 2147483648) % 2147483648))
        return (Double(seed) / 2147483648.0)
    }
    func hypercube_points(_ num_points: Int, _ cube_size: Double, _ num_dimensions: Int) -> [[Double]] {
        var pts: [[Double]] = ([] as! [[Double]])
        var i: Int = 0
        while (i < num_points) {
            var p: [Double] = ([] as! [Double])
            var j: Int = 0
            while (j < num_dimensions) {
                let v = (cube_size * Double(rand_float()))
                p = (_append(p, v) as! [Double])
                j = _int((j &+ 1))
            }
            pts = (_append(pts, p) as! [[Double]])
            i = _int((i &+ 1))
        }
        return pts
    }
    func build_kdtree(_ points: [[Double]], _ depth: Int) -> [[Double]] {
        return points
    }
    func distance_sq(_ a: [Double], _ b: [Double]) -> Double {
        var sum: Double = 0.0
        var i: Int = 0
        while (i < _int(((a).count))) {
            let d = (Double(_idx(a, i)) - Double(_idx(b, i)))
            sum = Double((sum + (d * d)))
            i = _int((i &+ 1))
        }
        return sum
    }
    func nearest_neighbour_search(_ points: [[Double]], _ query: [Double]) -> [String: Double] {
        if (_int(((points).count)) == 0) {
            return (["index": -1.0, "dist": INF, "visited": 0.0] as! [String: Double])
        }
        var nearest_idx: Int = 0
        var nearest_dist: Double = INF
        var visited: Int = 0
        var i: Int = 0
        while (i < _int(((points).count))) {
            let d = Double(distance_sq((query as! [Double]), (_idx(points, i) as! [Double])))
            visited = _int((visited &+ 1))
            if (d < nearest_dist) {
                nearest_dist = Double(d)
                nearest_idx = Int(i)
            }
            i = _int((i &+ 1))
        }
        return (["index": Double(nearest_idx), "dist": nearest_dist, "visited": Double(visited)] as! [String: Double])
    }
    func test_build_cases() {
        let empty_pts: [[Double]] = ([] as! [[Double]])
        let tree0: [[Double]] = (build_kdtree((empty_pts as! [[Double]]), 0) as! [[Double]])
        if (_int(((tree0).count)) == 0) {
            print(_p("case1 true"))
        } else {
            print(_p("case1 false"))
        }
        let pts1: [[Double]] = (hypercube_points(10, 10.0, 2) as! [[Double]])
        let tree1: [[Double]] = (build_kdtree((pts1 as! [[Double]]), 2) as! [[Double]])
        if ((_int(((tree1).count)) > 0) && (_int((((_idx(tree1, 0) as! [Double])).count)) == 2)) {
            print(_p("case2 true"))
        } else {
            print(_p("case2 false"))
        }
        let pts2: [[Double]] = (hypercube_points(10, 10.0, 3) as! [[Double]])
        let tree2: [[Double]] = (build_kdtree((pts2 as! [[Double]]), -2) as! [[Double]])
        if ((_int(((tree2).count)) > 0) && (_int((((_idx(tree2, 0) as! [Double])).count)) == 3)) {
            print(_p("case3 true"))
        } else {
            print(_p("case3 false"))
        }
    }
    func test_search() {
        let pts: [[Double]] = (hypercube_points(10, 10.0, 2) as! [[Double]])
        let tree: [[Double]] = (build_kdtree((pts as! [[Double]]), 0) as! [[Double]])
        let qp: [Double] = (_idx((hypercube_points(1, 10.0, 2) as! [Any]), 0) as! [Double])
        let res: [String: Double] = (nearest_neighbour_search((tree as! [[Double]]), (qp as! [Double])) as! [String: Double])
        if (((Double(res[String("index")]) != Double(-1.0)) && (Double(res[String("dist")]) >= 0.0)) && (Double(res[String("visited")]) > 0.0)) {
            print(_p("search true"))
        } else {
            print(_p("search false"))
        }
    }
    func test_edge() {
        let empty_pts: [[Double]] = ([] as! [[Double]])
        let tree: [[Double]] = (build_kdtree((empty_pts as! [[Double]]), 0) as! [[Double]])
        let query: [Double] = ([0.0, 0.0] as! [Double])
        let res: [String: Double] = (nearest_neighbour_search((tree as! [[Double]]), (query as! [Double])) as! [String: Double])
        if (((Double(res[String("index")]) == Double(-1.0)) && (Double(res[String("dist")]) > 100000000.0)) && (Double(res[String("visited")]) == 0.0)) {
            print(_p("edge true"))
        } else {
            print(_p("edge false"))
        }
    }
    func main() {
        seed = 1
        _ = test_build_cases()
        _ = test_search()
        _ = test_edge()
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
