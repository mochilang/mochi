// Generated by Mochi transpiler v0.10.59 on 2025-08-06 23:30:43 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
struct Node: Codable {
    var point: [Double?]
    var left: Int
    var right: Int
    init() {
        self.point = []
        self.left = 0
        self.right = 0
    }
    init(point: [Double?], left: Int, right: Int) {
        self.point = point
        self.left = left
        self.right = right
    }
}
struct BuildResult: Codable {
    var index: Int
    var nodes: [Node?]
    init() {
        self.index = 0
        self.nodes = []
    }
    init(index: Int, nodes: [Node?]) {
        self.index = index
        self.nodes = nodes
    }
}
struct SearchResult: Codable {
    var point: [Double?]
    var dist: Double
    var visited: Int
    init() {
        self.point = []
        self.dist = 0
        self.visited = 0
    }
    init(point: [Double?], dist: Double, visited: Int) {
        self.point = point
        self.dist = dist
        self.visited = visited
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    var seed: Int = 1
    func rand() -> Int {
        seed = Int(((Int(((seed &* 1103515245) &+ 12345)) % 2147483648 + 2147483648) % 2147483648))
        return seed
    }
    func random() -> Double {
        return (Double((1.0 * Double(Int(rand())))) / 2147483648.0)
    }
    func hypercube_points(_ num_points: Int, _ cube_size: Double, _ num_dimensions: Int) -> [[Double?]] {
        var pts: [[Double?]] = ([] as! [[Double?]])
        var i: Int = 0
        while (i < num_points) {
            var p: [Double?] = ([] as! [Double?])
            var j: Int = 0
            while (j < num_dimensions) {
                p = (_append(p, (cube_size * Double(random()))) as! [Double?])
                j = Int((j &+ 1))
            }
            pts = (_append(pts, p) as! [[Double?]])
            i = Int((i &+ 1))
        }
        return pts
    }
    func sort_points(_ points: inout [[Double?]], _ axis: Int) -> [[Double?]] {
        let n = Int(((points).count))
        var i: Int = 1
        while (i < n) {
            var key: [Double?] = (points[i] as! [Double?])
            var j: Int = (i &- 1)
            while ((j >= 0) && (Double(points[j][axis]) > Double(key[axis]))) {
                points = _set(points, (j &+ 1), (points[j] as! [Double?]))
                j = Int((j &- 1))
            }
            points = _set(points, (j &+ 1), (key as! [Double?]))
            i = Int((i &+ 1))
        }
        return points
    }
    func sublist(_ arr: [[Double?]], _ start: Int, _ end: Int) -> [[Double?]] {
        var res: [[Double?]] = ([] as! [[Double?]])
        var i: Int = start
        while (i < end) {
            res = (_append(res, (arr[i] as! [Double?])) as! [[Double?]])
            i = Int((i &+ 1))
        }
        return res
    }
    func shift_nodes(_ nodes: inout [Node?], _ offset: Int) -> [Node?] {
        var i: Int = 0
        while (i < Int(((nodes).count))) {
            if (String(describing: (nodes[i] as! Node).left) != String(describing: (0 &- 1))
            ) {
                nodes[i]!.left = Int(((nodes[i] as! Node).left + offset))
            }
            if (String(describing: (nodes[i] as! Node).right) != String(describing: (0 &- 1))
            ) {
                nodes[i]!.right = Int(((nodes[i] as! Node).right + offset))
            }
            i = Int((i &+ 1))
        }
        return nodes
    }
    func build_kdtree(_ points: inout [[Double?]], _ depth: Int) -> BuildResult {
        if (Int(((points).count)) == 0) {
            return BuildResult(index: (0 &- 1), nodes: [])
        }
        let k = Int((((points[0] as! [Double?])).count))
        let axis = ((depth % k + k) % k)
        points = (sort_points(&points, axis) as! [[Double?]])
        let median = (Int(((points).count)) / 2)
        var left_points: [[Double?]] = (sublist((points as! [[Double?]]), 0, median) as! [[Double?]])
        var right_points: [[Double?]] = (sublist((points as! [[Double?]]), (median &+ 1), Int(((points).count))) as! [[Double?]])
        let left_res = build_kdtree(&left_points, (depth &+ 1))
        var right_res = build_kdtree(&right_points, (depth &+ 1))
        let offset = (Int(((left_res.nodes).count)) &+ 1)
        let shifted_right: [Node?] = (shift_nodes(&right_res.nodes, offset) as! [Node?])
        var nodes: [Node?] = left_res.nodes
        let left_index = left_res.index
        let right_index = Int(((right_res.index == (0 &- 1)) ? (0 &- 1) : (right_res.index &+ offset)))
        nodes = (_append(nodes, Node(point: (points[median] as! [Double?]), left: left_index, right: right_index)) as! [Node?])
        nodes = ((concat((nodes as! [Any??]), shifted_right) as! [Any??]) as! [Node?])
        let root_index = Int(((left_res.nodes).count))
        return BuildResult(index: root_index, nodes: nodes)
    }
    func square_distance(_ a: [Double?], _ b: [Double?]) -> Double {
        var sum: Double = 0.0
        var i: Int = 0
        while (i < Int(((a).count))) {
            let diff = (Double(a[i]) - Double(b[i]))
            sum = Double((sum + (diff * diff)))
            i = Int((i &+ 1))
        }
        return sum
    }
    func nearest_neighbour_search(_ tree: [Node?], _ root: Int, _ query_point: [Double?]) -> SearchResult {
        var nearest_point: [Double?] = ([] as! [Double?])
        var nearest_dist: Double = 0.0
        var visited: Int = 0
        var i: Int = 0
        while (i < Int(((tree).count))) {
            let node = (tree[i] as! Node)
            let dist = Double(square_distance((query_point as! [Double?]), (node.point as! [Double?])))
            visited = Int((visited &+ 1))
            if ((visited == 1) || (dist < nearest_dist)) {
                nearest_point = (node.point as! [Double?])
                nearest_dist = Double(dist)
            }
            i = Int((i &+ 1))
        }
        return SearchResult(point: nearest_point, dist: nearest_dist, visited: visited)
    }
    func list_to_string(_ arr: [Double?]) -> String {
        var s: String = "["
        var i: Int = 0
        while (i < Int(((arr).count))) {
            s = ((s + String(describing: Double(arr[i]))) as! String)
            if (i < (Int(((arr).count)) &- 1)) {
                s = ((s + ", ") as! String)
            }
            i = Int((i &+ 1))
        }
        return (s + "]")
    }
    func main() -> Void {
        let num_points = 5000
        let cube_size = 10.0
        let num_dimensions = 10
        var pts: [[Double?]] = (hypercube_points(num_points, Double(cube_size), num_dimensions) as! [[Double?]])
        let build = build_kdtree(&pts, 0)
        let root = build.index
        let tree: [Node?] = build.nodes
        var query: [Double?] = ([] as! [Double?])
        var i: Int = 0
        while (i < num_dimensions) {
            query = (_append(query, Double(random())) as! [Double?])
            i = Int((i &+ 1))
        }
        let res = nearest_neighbour_search((tree as! [Node?]), root, (query as! [Double?]))
        print(_p(("Query point: " + String(describing: list_to_string((query as! [Double?]))))))
        print(_p(("Nearest point: " + String(describing: list_to_string((res.point as! [Double?]))))))
        print(_p(("Distance: " + String(describing: res.dist))))
        print(_p(("Nodes visited: " + String(describing: res.visited))))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
