// Generated by Mochi transpiler v0.10.60 on 2025-08-07 15:16:17 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
struct KDNode: Codable {
    var point: [Double]
    var left: Int
    var right: Int
    init() {
        self.point = []
        self.left = 0
        self.right = 0
    }
    init(point: [Double], left: Int, right: Int) {
        self.point = point
        self.left = left
        self.right = right
    }
}
struct SearchResult: Codable {
    var point: [Double]
    var distance: Double
    var nodes_visited: Int
    init() {
        self.point = []
        self.distance = 0
        self.nodes_visited = 0
    }
    init(point: [Double], distance: Double, nodes_visited: Int) {
        self.point = point
        self.distance = distance
        self.nodes_visited = nodes_visited
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func square_distance(_ a: [Double], _ b: [Double]) -> Double {
        var i: Int = 0
        var total: Double = 0.0
        while (i < _int(((a).count))) {
            let diff = (Double(a[i]) - Double(b[i]))
            total = Double((total + (diff * diff)))
            i = _int((i &+ 1))
        }
        return total
    }
    func search(_ nodes: [KDNode], _ index: Int, _ query_point: [Double], _ depth: Int, _ best: SearchResult) -> SearchResult {
        if (index == _int(-1)) {
            return best
        }
        var result: SearchResult = best
        result.nodes_visited = _int((result.nodes_visited &+ 1))
        let node = (nodes[index] as! KDNode)
        let current_point: [Double] = node.point
        let current_dist = Double(square_distance((query_point as! [Double]), (current_point as! [Double])))
        if ((_int(((result.point).count)) == 0) || (current_dist < result.distance)) {
            result.point = (current_point as! [Double])
            result.distance = Double(current_dist)
        }
        let k = _int(((query_point).count))
        let axis = ((depth % k + k) % k)
        var nearer: Int = node.left
        var further: Int = node.right
        if (Double(query_point[axis]) > Double(current_point[axis])) {
            nearer = _int(node.right)
            further = _int(node.left)
        }
        result = (search((nodes as! [KDNode]), nearer, (query_point as! [Double]), (depth &+ 1), (result as! SearchResult)) as! SearchResult)
        let diff = (Double(query_point[axis]) - Double(current_point[axis]))
        if ((diff * diff) < result.distance) {
            result = (search((nodes as! [KDNode]), further, (query_point as! [Double]), (depth &+ 1), (result as! SearchResult)) as! SearchResult)
        }
        return result
    }
    func nearest_neighbour_search(_ nodes: [KDNode], _ root: Int, _ query_point: [Double]) -> SearchResult {
        let initial = SearchResult(point: [], distance: 1000000000000000000000000000000.0, nodes_visited: 0)
        return search((nodes as! [KDNode]), root, (query_point as! [Double]), 0, (initial as! SearchResult))
    }
    let nodes: [KDNode] = ([KDNode(point: ([9.0, 1.0] as! [Double]), left: 1, right: 4), KDNode(point: ([2.0, 7.0] as! [Double]), left: 2, right: 3), KDNode(point: ([3.0, 6.0] as! [Double]), left: -1, right: -1), KDNode(point: ([6.0, 12.0] as! [Double]), left: -1, right: -1), KDNode(point: ([17.0, 15.0] as! [Double]), left: 5, right: 6), KDNode(point: ([13.0, 15.0] as! [Double]), left: -1, right: -1), KDNode(point: ([10.0, 19.0] as! [Double]), left: -1, right: -1)] as! [KDNode])
    let queries: [[Double]] = ([([9.0, 2.0] as! [Double]), ([12.0, 15.0] as! [Double]), ([1.0, 3.0] as! [Double])] as! [[Double]])
    var q: Int = 0
    while (q < _int(((queries).count))) {
        let res = nearest_neighbour_search((nodes as! [KDNode]), 0, (queries[q] as! [Double]))
        print(_p(((((("[" + res.point.map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]" + " ") + _p(res.distance)) + " ") + _p(res.nodes_visited)) + "\n")))
        q = _int((q &+ 1))
    }
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
