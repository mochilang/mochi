// Generated by Mochi transpiler v0.10.59 on 2025-08-06 23:30:41 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
struct KDNode: Codable {
    var point: [Double?]
    var left: Int
    var right: Int
    init() {
        self.point = []
        self.left = 0
        self.right = 0
    }
    init(point: [Double?], left: Int, right: Int) {
        self.point = point
        self.left = left
        self.right = right
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    var tree: [KDNode?] = ([] as! [KDNode?])
    func sort_points(_ points: [[Double?]], _ axis: Int) -> [[Double?]] {
        var arr: [[Double?]] = points
        var i: Int = 0
        while (i < Int(((arr).count))) {
            var j: Int = 0
            while (j < (Int(((arr).count)) &- 1)) {
                if (Double(arr[j][axis]) > Double(arr[(j &+ 1)][axis])) {
                    let tmp: [Double?] = (arr[j] as! [Double?])
                    arr = _set(arr, j, (arr[(j &+ 1)] as! [Double?]))
                    arr = _set(arr, (j &+ 1), (tmp as! [Double?]))
                }
                j = Int((j &+ 1))
            }
            i = Int((i &+ 1))
        }
        return arr
    }
    func build_kdtree(_ points: [[Double?]], _ depth: Int) -> Int {
        if (Int(((points).count)) == 0) {
            return (0 &- 1)
        }
        let k = Int((((points[0] as! [Double?])).count))
        let axis = ((depth % k + k) % k)
        let sorted: [[Double?]] = (sort_points((points as! [[Double?]]), axis) as! [[Double?]])
        let median_idx = (Int(((sorted).count)) / 2)
        let left_points: [[Double?]] = (Array(sorted[0..<median_idx]) as! [[Double?]])
        let right_points: [[Double?]] = (Array(sorted[(median_idx &+ 1)..<Int(((sorted).count))]) as! [[Double?]])
        var idx: Int = Int(((tree).count))
        tree = (_append(tree, KDNode(point: (sorted[median_idx] as! [Double?]), left: (0 &- 1), right: (0 &- 1))) as! [KDNode?])
        let left_idx = Int(build_kdtree((left_points as! [[Double?]]), (depth &+ 1)))
        let right_idx = Int(build_kdtree((right_points as! [[Double?]]), (depth &+ 1)))
        var node: KDNode = (tree[idx] as! KDNode)
        node.left = (left_idx as! Int)
        node.right = (right_idx as! Int)
        tree = _set(tree, idx, (node as! KDNode))
        return idx
    }
    let pts: [[Double?]] = ([([2.0, 3.0] as! [Double?]), ([5.0, 4.0] as! [Double?]), ([9.0, 6.0] as! [Double?]), ([4.0, 7.0] as! [Double?]), ([8.0, 1.0] as! [Double?]), ([7.0, 2.0] as! [Double?])] as! [[Double?]])
    let root = Int(build_kdtree((pts as! [[Double?]]), 0))
    print(_p("[" + tree.map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    print(_p(root))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
