// Generated by Mochi transpiler v0.10.59 on 2025-08-07 00:29:28 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
struct Node: Codable {
    var children: [String: Int]
    var is_end_of_string: Bool
    var start: Int
    var end: Int
    init() {
        self.children = [:]
        self.is_end_of_string = false
        self.start = 0
        self.end = 0
    }
    init(children: [String: Int], is_end_of_string: Bool, start: Int, end: Int) {
        self.children = children
        self.is_end_of_string = is_end_of_string
        self.start = start
        self.end = end
    }
}
struct SuffixTree: Codable {
    var text: String
    var nodes: [Node?]
    init() {
        self.text = ""
        self.nodes = []
    }
    init(text: String, nodes: [Node?]) {
        self.text = text
        self.nodes = nodes
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func new_node() -> Node {
        return Node(children: [:], is_end_of_string: false, start: -1, end: -1)
    }
    func has_key(_ m: [String: Int], _ k: String) -> Bool {
        for key in m.keys.sorted() {
            if (key == k) {
                return true
            }
        }
        return false
    }
    func add_suffix(_ tree: inout SuffixTree, _ suffix: String, _ index: Int) -> SuffixTree {
        var nodes: [Node?] = tree.nodes
        var node_idx: Int = 0
        var j: Int = 0
        while (j < Int(((suffix).count))) {
            let ch = (String(Array(suffix)[j]) as! String)
            var node: Node = (nodes[node_idx] as! Node)
            var children: [String: Int] = node.children
            if (!has_key((children as! [String: Int]), (ch as! String))) {
                nodes = (_append(nodes, new_node()) as! [Node?])
                let new_idx = (Int(((nodes).count)) &- 1)
                children = _set(children, String(describing: ch), (new_idx as! Int))
            }
            node.children = (children as! [String: Int])
            nodes = _set(nodes, node_idx, (node as! Node))
            node_idx = (children[String(String(describing: ch))] as? Int ?? 0)
            j = Int((j &+ 1))
        }
        var node: Node = (nodes[node_idx] as! Node)
        node.is_end_of_string = true
        node.start = (index as! Int)
        node.end = Int(((index &+ Int(((suffix).count))) &- 1))
        nodes = _set(nodes, node_idx, (node as! Node))
        tree.nodes = (nodes as! [Node?])
        return tree
    }
    func build_suffix_tree(_ tree: SuffixTree) -> SuffixTree {
        let text = tree.text
        let n = Int(((text).count))
        var i: Int = 0
        var t: SuffixTree = tree
        while (i < n) {
            var suffix: String = ""
            var k: Int = i
            while (k < n) {
                suffix = ((suffix + (String(Array(text)[k]) as! String)) as! String)
                k = Int((k &+ 1))
            }
            t = (add_suffix(&t, (suffix as! String), i) as! SuffixTree)
            i = Int((i &+ 1))
        }
        return t
    }
    func new_suffix_tree(_ text: String) -> SuffixTree {
        var tree: SuffixTree = SuffixTree(text: text, nodes: [])
        tree.nodes = (_append(tree.nodes, new_node()) as! [Node?])
        tree = (build_suffix_tree((tree as! SuffixTree)) as! SuffixTree)
        return tree
    }
    func search(_ tree: SuffixTree, _ pattern: String) -> Bool {
        var node_idx: Int = 0
        var i: Int = 0
        let nodes: [Node?] = tree.nodes
        while (i < Int(((pattern).count))) {
            let ch = (String(Array(pattern)[i]) as! String)
            let node = (nodes[node_idx] as! Node)
            let children: [String: Int] = node.children
            if (!has_key((children as! [String: Int]), (ch as! String))) {
                return false
            }
            node_idx = (children[String(String(describing: ch))] as? Int ?? 0)
            i = Int((i &+ 1))
        }
        return true
    }
    let st = new_suffix_tree("bananas")
    print(_p(String(describing: search((st as! SuffixTree), "ana"))))
    print(_p(String(describing: search((st as! SuffixTree), "apple"))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
