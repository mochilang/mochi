// Generated by Mochi transpiler v0.10.61 on 2025-08-08 16:32:31 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return nil
}
struct SuffixTree: Codable {
    var text: String
    init() {
        self.text = ""
    }
    init(text: String) {
        self.text = text
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func new_suffix_tree(_ text: String) -> SuffixTree {
        return SuffixTree(text: text)
    }
    func search(_ tree: SuffixTree, _ pattern: String) -> Bool {
        let n = _int(((tree.text).count))
        let m = _int(((pattern).count))
        if (m == 0) {
            return true
        }
        if (m > n) {
            return false
        }
        var i: Int = 0
        while (i <= (n &- m)) {
            if (String(Array(tree.text)[i..<(i &+ m)]) == pattern) {
                return true
            }
            i = _int((i &+ 1))
        }
        return false
    }
    func main() {
        let text = "monkey banana"
        let suffix_tree = new_suffix_tree((text as! String))
        let patterns: [String] = (["ana", "ban", "na", "xyz", "mon"] as! [String])
        var i: Int = 0
        while (i < _int(((patterns).count))) {
            let pattern = (_idx(patterns, i) as! String)
            let found = search((suffix_tree as! SuffixTree), (pattern as! String))
            print(_p(((("Pattern '" + pattern) + "' found: ") + _p(found))))
            i = _int((i &+ 1))
        }
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
