// Generated by Mochi transpiler v0.10.60 on 2025-08-08 10:13:04 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
struct SuffixTree: Codable {
    var text: String
    init() {
        self.text = ""
    }
    init(text: String) {
        self.text = text
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func suffix_tree_new(_ text: String) -> SuffixTree {
        return SuffixTree(text: text)
    }
    func suffix_tree_search(_ st: SuffixTree, _ pattern: String) -> Bool {
        if (_int(((pattern).count)) == 0) {
            return true
        }
        var i: Int = 0
        let n = _int(((st.text).count))
        let m = _int(((pattern).count))
        while (i <= (n &- m)) {
            var j: Int = 0
            var found: Bool = true
            while (j < m) {
                if ((String(Array(st.text)[(i &+ j)]) as! String) != (String(Array(pattern)[j]) as! String)) {
                    found = false
                    break
                }
                j = _int((j &+ 1))
            }
            if found {
                return true
            }
            i = _int((i &+ 1))
        }
        return false
    }
    let text = "banana"
    let st = suffix_tree_new((text as! String))
    let patterns_exist: [String] = (["ana", "ban", "na"] as! [String])
    var i: Int = 0
    while (i < _int(((patterns_exist).count))) {
        print(_p(_p(suffix_tree_search((st as! SuffixTree), (patterns_exist[i] as! String)))))
        i = _int((i &+ 1))
    }
    let patterns_none: [String] = (["xyz", "apple", "cat"] as! [String])
    i = 0
    while (i < _int(((patterns_none).count))) {
        print(_p(_p(suffix_tree_search((st as! SuffixTree), (patterns_none[i] as! String)))))
        i = _int((i &+ 1))
    }
    print(_p(_p(suffix_tree_search((st as! SuffixTree), ""))))
    print(_p(_p(suffix_tree_search((st as! SuffixTree), (text as! String)))))
    let substrings: [String] = (["ban", "ana", "a", "na"] as! [String])
    i = 0
    while (i < _int(((substrings).count))) {
        print(_p(_p(suffix_tree_search((st as! SuffixTree), (substrings[i] as! String)))))
        i = _int((i &+ 1))
    }
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
