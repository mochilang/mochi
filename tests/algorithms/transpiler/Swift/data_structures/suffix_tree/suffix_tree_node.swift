// Generated by Mochi transpiler v0.10.60 on 2025-08-08 10:13:00 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
struct SuffixTreeNode: Codable {
    var children: [String: Int]
    var is_end_of_string: Bool
    var start: Int
    var end: Int
    var suffix_link: Int
    init() {
        self.children = [:]
        self.is_end_of_string = false
        self.start = 0
        self.end = 0
        self.suffix_link = 0
    }
    init(children: [String: Int], is_end_of_string: Bool, start: Int, end: Int, suffix_link: Int) {
        self.children = children
        self.is_end_of_string = is_end_of_string
        self.start = start
        self.end = end
        self.suffix_link = suffix_link
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func new_suffix_tree_node(_ children: [String: Int], _ is_end_of_string: Bool, _ start: Int, _ end: Int, _ suffix_link: Int) -> SuffixTreeNode {
        return SuffixTreeNode(children: children, is_end_of_string: is_end_of_string, start: start, end: end, suffix_link: suffix_link)
    }
    func empty_suffix_tree_node() -> SuffixTreeNode {
        return new_suffix_tree_node(([:] as! [String: Int]), false, (0 &- 1), (0 &- 1), (0 &- 1))
    }
    func has_key(_ m: [String: Int], _ k: String) -> Bool {
        for key in m.keys.sorted() {
            if (key == k) {
                return true
            }
        }
        return false
    }
    let root = new_suffix_tree_node((["a": 1] as! [String: Int]), false, (0 &- 1), (0 &- 1), (0 &- 1))
    let leaf = new_suffix_tree_node(([:] as! [String: Int]), true, 0, 2, 0)
    var nodes: [SuffixTreeNode] = ([root, leaf] as! [SuffixTreeNode])
    var root_check: SuffixTreeNode = (nodes[0] as! SuffixTreeNode)
    var leaf_check: SuffixTreeNode = (nodes[1] as! SuffixTreeNode)
    print(_p(_p(has_key((root_check.children as! [String: Int]), "a"))))
    print(_p(_p(leaf_check.is_end_of_string)))
    print(_p(_p(leaf_check.start)))
    print(_p(_p(leaf_check.end)))
    print(_p(_p(leaf_check.suffix_link)))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
