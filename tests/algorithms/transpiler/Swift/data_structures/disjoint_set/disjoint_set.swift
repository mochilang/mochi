// Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:39:29 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
struct DS: Codable {
    var parent: [Int]
    var rank: [Int]
    init() {
        self.parent = []
        self.rank = []
    }
    init(parent: [Int], rank: [Int]) {
        self.parent = parent
        self.rank = rank
    }
}
struct FindResult: Codable {
    var ds: DS
    var root: Int
    init() {
        self.ds = DS()
        self.root = 0
    }
    init(ds: DS, root: Int) {
        self.ds = ds
        self.root = root
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func make_set(_ ds: DS, _ x: Int) -> DS {
        var p: [Int] = ds.parent
        var r: [Int] = ds.rank
        p = _set(p, x, Int(x))
        r = _set(r, x, 0)
        return DS(parent: p, rank: r)
    }
    func find_set(_ ds: DS, _ x: Int) -> FindResult {
        if ((ds.parent[x] as? Int ?? 0) == x) {
            return FindResult(ds: ds, root: x)
        }
        let res = find_set((ds as! DS), (ds.parent[x] as? Int ?? 0))
        var p: [Int] = res.ds.parent
        p = _set(p, x, Int(res.root))
        return FindResult(ds: DS(parent: p, rank: res.ds.rank), root: res.root)
    }
    func union_set(_ ds: DS, _ x: Int, _ y: Int) -> DS {
        let fx = find_set((ds as! DS), x)
        let ds1 = fx.ds
        let x_root = fx.root
        let fy = find_set((ds1 as! DS), y)
        let ds2 = fy.ds
        let y_root = fy.root
        if (x_root == y_root) {
            return ds2
        }
        var p: [Int] = ds2.parent
        var r: [Int] = ds2.rank
        if ((r[x_root] as? Int ?? 0) > (r[y_root] as? Int ?? 0)) {
            p = _set(p, y_root, Int(x_root))
        } else {
            p = _set(p, x_root, Int(y_root))
            if ((r[x_root] as? Int ?? 0) == (r[y_root] as? Int ?? 0)) {
                r = _set(r, y_root, Int(((r[y_root] as? Int ?? 0) &+ 1)))
            }
        }
        return DS(parent: p, rank: r)
    }
    func same_python_set(_ a: Int, _ b: Int) -> Bool {
        if ((a < 3) && (b < 3)) {
            return true
        }
        if ((((a >= 3) && (a < 6)) && (b >= 3)) && (b < 6)) {
            return true
        }
        return false
    }
    var ds: DS = DS(parent: [], rank: [])
    var i: Int = 0
    while (i < 6) {
        ds.parent = (_append(ds.parent, 0) as! [Int])
        ds.rank = (_append(ds.rank, 0) as! [Int])
        ds = (make_set((ds as! DS), i) as! DS)
        i = Int((i &+ 1))
    }
    ds = (union_set((ds as! DS), 0, 1) as! DS)
    ds = (union_set((ds as! DS), 1, 2) as! DS)
    ds = (union_set((ds as! DS), 3, 4) as! DS)
    ds = (union_set((ds as! DS), 3, 5) as! DS)
    i = 0
    while (i < 6) {
        var j: Int = 0
        while (j < 6) {
            let res_i = find_set((ds as! DS), i)
            ds = (res_i.ds as! DS)
            let root_i = res_i.root
            let res_j = find_set((ds as! DS), j)
            ds = (res_j.ds as! DS)
            let root_j = res_j.root
            let same = same_python_set(i, j)
            let root_same = (root_i == root_j)
            if same {
                if (!root_same) {
                    _ = fatalError("nodes should be in same set")
                }
            } else {
                if root_same {
                    _ = fatalError("nodes should be in different sets")
                }
            }
            j = Int((j &+ 1))
        }
        i = Int((i &+ 1))
    }
    i = 0
    while (i < 6) {
        let res = find_set((ds as! DS), i)
        ds = (res.ds as! DS)
        print(_p(String(describing: res.root)))
        i = Int((i &+ 1))
    }
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
