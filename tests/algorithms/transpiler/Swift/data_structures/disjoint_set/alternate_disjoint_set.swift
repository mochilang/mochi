// Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:39:25 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
struct DisjointSet: Codable {
    var set_counts: [Int]
    var max_set: Int
    var ranks: [Int]
    var parents: [Int]
    init() {
        self.set_counts = []
        self.max_set = 0
        self.ranks = []
        self.parents = []
    }
    init(set_counts: [Int], max_set: Int, ranks: [Int], parents: [Int]) {
        self.set_counts = set_counts
        self.max_set = max_set
        self.ranks = ranks
        self.parents = parents
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func max_list(_ xs: [Int]) -> Int {
        var m: Int = (xs[0] as? Int ?? 0)
        var i: Int = 1
        while (i < Int(((xs).count))) {
            if ((xs[i] as? Int ?? 0) > m) {
                m = (xs[i] as? Int ?? 0)
            }
            i = Int((i &+ 1))
        }
        return m
    }
    func disjoint_set_new(_ set_counts: [Int]) -> DisjointSet {
        let max_set = Int(max_list((set_counts as! [Int])))
        let num_sets = Int(((set_counts).count))
        var ranks: [Int] = ([] as! [Int])
        var parents: [Int] = ([] as! [Int])
        var i: Int = 0
        while (i < num_sets) {
            ranks = (_append(ranks, 1) as! [Int])
            parents = (_append(parents, i) as! [Int])
            i = Int((i &+ 1))
        }
        return DisjointSet(set_counts: set_counts, max_set: max_set, ranks: ranks, parents: parents)
    }
    func get_parent(_ ds: inout DisjointSet, _ idx: Int) -> Int {
        if ((ds.parents[idx] as? Int ?? 0) == idx) {
            return idx
        }
        var parents: [Int] = ds.parents
        parents = _set(parents, idx, Int(get_parent(&ds, (parents[idx] as? Int ?? 0))))
        ds.parents = (parents as! [Int])
        return (ds.parents[idx] as? Int ?? 0)
    }
    func merge(_ ds: inout DisjointSet, _ src: Int, _ dst: Int) -> Bool {
        let src_parent = Int(get_parent(&ds, src))
        let dst_parent = Int(get_parent(&ds, dst))
        if (src_parent == dst_parent) {
            return false
        }
        if ((ds.ranks[dst_parent] as? Int ?? 0) >= (ds.ranks[src_parent] as? Int ?? 0)) {
            var counts: [Int] = ds.set_counts
            counts = _set(counts, dst_parent, Int(((counts[dst_parent] as? Int ?? 0) &+ (counts[src_parent] as? Int ?? 0))))
            counts = _set(counts, src_parent, 0)
            ds.set_counts = (counts as! [Int])
            var parents: [Int] = ds.parents
            parents = _set(parents, src_parent, Int(dst_parent))
            ds.parents = (parents as! [Int])
            if ((ds.ranks[dst_parent] as? Int ?? 0) == (ds.ranks[src_parent] as? Int ?? 0)) {
                var ranks: [Int] = ds.ranks
                ranks = _set(ranks, dst_parent, Int(((ranks[dst_parent] as? Int ?? 0) &+ 1)))
                ds.ranks = (ranks as! [Int])
            }
            let joined = (ds.set_counts[dst_parent] as? Int ?? 0)
            if (joined > ds.max_set) {
                ds.max_set = Int(joined)
            }
        } else {
            var counts: [Int] = ds.set_counts
            counts = _set(counts, src_parent, Int(((counts[src_parent] as? Int ?? 0) &+ (counts[dst_parent] as? Int ?? 0))))
            counts = _set(counts, dst_parent, 0)
            ds.set_counts = (counts as! [Int])
            var parents: [Int] = ds.parents
            parents = _set(parents, dst_parent, Int(src_parent))
            ds.parents = (parents as! [Int])
            let joined = (ds.set_counts[src_parent] as? Int ?? 0)
            if (joined > ds.max_set) {
                ds.max_set = Int(joined)
            }
        }
        return true
    }
    var ds: DisjointSet = disjoint_set_new(([1, 1, 1] as! [Int]))
    print(_p(merge(&ds, 1, 2)))
    print(_p(merge(&ds, 0, 2)))
    print(_p(merge(&ds, 0, 1)))
    print(_p(Int(get_parent(&ds, 0))))
    print(_p(Int(get_parent(&ds, 1))))
    print(_p(ds.max_set))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
