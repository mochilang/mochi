// Generated by Mochi transpiler v0.10.60 on 2025-08-07 16:59:48 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
struct Node: Codable {
    var children: [String: Int]
    var is_leaf: Bool
    init() {
        self.children = [:]
        self.is_leaf = false
    }
    init(children: [String: Int], is_leaf: Bool) {
        self.children = children
        self.is_leaf = is_leaf
    }
}
struct Trie: Codable {
    var nodes: [Node]
    init() {
        self.nodes = []
    }
    init(nodes: [Node]) {
        self.nodes = nodes
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func new_trie() -> Trie {
        return Trie(nodes: ([Node(children: ([:] as! [String: Int]), is_leaf: false)] as! [Node]))
    }
    func remove_key(_ m: [String: Int], _ k: String) -> [String: Int] {
        var out: [String: Int] = ([:] as! [String: Int])
        for key in m.keys.sorted() {
            if (key != k) {
                out = _set(out, String(describing: key), (m[String(String(describing: key))] as? Int ?? 0))
            }
        }
        return out
    }
    func insert(_ trie: inout Trie, _ word: String) {
        var nodes: [Node] = trie.nodes
        var curr: Int = 0
        var i: Int = 0
        while (i < _int(((word).count))) {
            let ch = (String(Array(word)[i]) as! String)
            var child_idx: Int = -1
            let children = nodes[curr].children
            if (children[ch] != nil) {
                child_idx = (children[ch]! as? Int ?? 0)
            } else {
                let new_node = Node(children: ([:] as! [String: Int]), is_leaf: false)
                nodes = (_append(nodes, new_node) as! [Node])
                child_idx = _int((_int(((nodes).count)) &- 1))
                var new_children: Node = children
                new_children = _set(new_children, ch, (child_idx as! Node))
                var node: Node = (nodes[curr] as! Node)
                node.children = (new_children as! [String: Int])
                nodes = _set(nodes, curr, (node as! Node))
            }
            curr = Int(child_idx)
            i = _int((i &+ 1))
        }
        var node: Node = (nodes[curr] as! Node)
        node.is_leaf = true
        nodes = _set(nodes, curr, (node as! Node))
        trie.nodes = (nodes as! [Node])
    }
    func insert_many(_ trie: inout Trie, _ words: [String]) {
        for w in words {
            _ = insert(&trie, (w as! String))
        }
    }
    func find(_ trie: Trie, _ word: String) -> Bool {
        let nodes: [Node] = trie.nodes
        var curr: Int = 0
        var i: Int = 0
        while (i < _int(((word).count))) {
            let ch = (String(Array(word)[i]) as! String)
            let children = nodes[curr].children
            if (!(children[ch] != nil)) {
                return false
            }
            curr = (children[ch]! as? Int ?? 0)
            i = _int((i &+ 1))
        }
        let node = (nodes[curr] as! Node)
        return node.is_leaf
    }
    func delete(_ trie: inout Trie, _ word: String) {
        var nodes: [Node] = trie.nodes
        func _delete(_ idx: Int, _ pos: Int) -> Bool {
            if (pos == _int(((word).count))) {
                var node: Node = (nodes[idx] as! Node)
                if (node.is_leaf == false) {
                    return false
                }
                node.is_leaf = false
                nodes = _set(nodes, idx, (node as! Node))
                return (_int(((node.children).count)) == 0)
            }
            var node: Node = (nodes[idx] as! Node)
            let children: [String: Int] = node.children
            let ch = (String(Array(word)[pos]) as! String)
            if (!(children[ch] != nil)) {
                return false
            }
            let child_idx = (children[String(String(describing: ch))] as? Int ?? 0)
            let should_delete = _delete(child_idx, (pos &+ 1))
            node = (nodes[idx] as! Node)
            if should_delete {
                var new_children: [String: Int] = (remove_key((node.children as! [String: Int]), (ch as! String)) as! [String: Int])
                node.children = (new_children as! [String: Int])
                nodes = _set(nodes, idx, (node as! Node))
                return ((_int(((new_children).count)) == 0) && (node.is_leaf == false))
            }
            nodes = _set(nodes, idx, (node as! Node))
            return false
        }
        _ = _delete(0, 0)
        trie.nodes = (nodes as! [Node])
    }
    func print_words(_ trie: Trie) {
        func dfs(_ idx: Int, _ word: String) {
            let node = (trie.nodes[idx] as! Node)
            if node.is_leaf {
                print(_p(word))
            }
            for key in node.children.keys.sorted() {
                _ = dfs((node.children[String(String(describing: key))] as? Int ?? 0), ((word + key) as! String))
            }
        }
        _ = dfs(0, "")
    }
    func test_trie() -> Bool {
        let words: [String] = (["banana", "bananas", "bandana", "band", "apple", "all", "beast"] as! [String])
        var trie = new_trie()
        _ = insert_many(&trie, (words as! [String]))
        var ok: Bool = true
        for w in words {
            ok = (ok && find((trie as! Trie), (w as! String)))
        }
        ok = (ok && find((trie as! Trie), "banana"))
        var t: Bool = find((trie as! Trie), "bandanas")
        ok = (ok && (t == false))
        var t2: Bool = find((trie as! Trie), "apps")
        ok = (ok && (t2 == false))
        ok = (ok && find((trie as! Trie), "apple"))
        ok = (ok && find((trie as! Trie), "all"))
        _ = delete(&trie, "all")
        var t3: Bool = find((trie as! Trie), "all")
        ok = (ok && (t3 == false))
        _ = delete(&trie, "banana")
        var t4: Bool = find((trie as! Trie), "banana")
        ok = (ok && (t4 == false))
        ok = (ok && find((trie as! Trie), "bananas"))
        return ok
    }
    func print_results(_ msg: String, _ passes: Bool) {
        if passes {
            print(_p((msg + " works!")))
        } else {
            print(_p((msg + " doesn't work :(")))
        }
    }
    var trie = new_trie()
    _ = print_results("Testing trie functionality", test_trie())
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
