// Generated by Mochi transpiler v0.10.59 on 2025-08-07 00:29:33 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
struct RadixNode: Codable {
    var prefix: String
    var is_leaf: Bool
    var children: [String: Int]
    init() {
        self.prefix = ""
        self.is_leaf = false
        self.children = [:]
    }
    init(prefix: String, is_leaf: Bool, children: [String: Int]) {
        self.prefix = prefix
        self.is_leaf = is_leaf
        self.children = children
    }
}
struct RadixTree: Codable {
    var nodes: [RadixNode?]
    init() {
        self.nodes = []
    }
    init(nodes: [RadixNode?]) {
        self.nodes = nodes
    }
}
struct MatchResult: Codable {
    var common: String
    var rem_prefix: String
    var rem_word: String
    init() {
        self.common = ""
        self.rem_prefix = ""
        self.rem_word = ""
    }
    init(common: String, rem_prefix: String, rem_word: String) {
        self.common = common
        self.rem_prefix = rem_prefix
        self.rem_word = rem_word
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func new_node(_ prefix: String, _ is_leaf: Bool) -> RadixNode {
        return RadixNode(prefix: prefix, is_leaf: is_leaf, children: [:])
    }
    func new_tree() -> RadixTree {
        var nodes: [RadixNode?] = ([new_node("", false)] as! [RadixNode?])
        return RadixTree(nodes: nodes)
    }
    func match_prefix(_ node: RadixNode, _ word: String) -> MatchResult {
        var x: Int = 0
        var p: String = node.prefix
        var w: String = word
        var min_len: Int = Int(((p).count))
        if (Int(((w).count)) < min_len) {
            min_len = Int(((w).count))
        }
        while (x < min_len) {
            if (String(describing: String(Array(String(describing: (p as! String)))[x..<(x &+ 1)])) != String(describing: String(Array(String(describing: (w as! String)))[x..<(x &+ 1)]))) {
                break
            }
            x = Int((x &+ 1))
        }
        let common = String(describing: String(Array(String(describing: (p as! String)))[0..<x]))
        let rem_prefix = String(describing: String(Array(String(describing: (p as! String)))[x..<Int(((p).count))]))
        let rem_word = String(describing: String(Array(String(describing: (w as! String)))[x..<Int(((w).count))]))
        return MatchResult(common: common, rem_prefix: rem_prefix, rem_word: rem_word)
    }
    func insert_many(_ tree: inout RadixTree, _ words: [String?]) {
        for w in words {
            _ = insert(&tree, 0, (w as! String))
        }
    }
    func insert(_ tree: inout RadixTree, _ idx: Int, _ word: String) {
        var nodes: [RadixNode?] = tree.nodes
        var node: RadixNode = (nodes[idx] as! RadixNode)
        if ((node.prefix == word) && ((!node.is_leaf) as! Bool)) {
            node.is_leaf = true
            nodes = _set(nodes, idx, (node as! RadixNode))
            tree.nodes = (nodes as! [RadixNode?])
            return
        }
        let first = String(describing: String(Array(String(describing: (word as! String)))[0..<1]))
        var children: [String: Int] = node.children
        if (!has_key((children as! [String: Int]), (first as! String))) {
            let new_idx = Int(((nodes).count))
            nodes = (_append(nodes, new_node((word as! String), true)) as! [RadixNode?])
            children = _set(children, String(describing: first), (new_idx as! Int))
            node.children = (children as! [String: Int])
            nodes = _set(nodes, idx, (node as! RadixNode))
            tree.nodes = (nodes as! [RadixNode?])
            return
        }
        let child_idx = (children[String(String(describing: first))] as? Int ?? 0)
        var child: RadixNode = (nodes[child_idx] as! RadixNode)
        let res = match_prefix((child as! RadixNode), (word as! String))
        if (res.rem_prefix == "") {
            _ = insert(&tree, child_idx, (res.rem_word as! String))
            return
        }
        child.prefix = (res.rem_prefix as! String)
        nodes = _set(nodes, child_idx, (child as! RadixNode))
        var new_children: [String: Int] = ([:] as! [String: Int])
        new_children = _set(new_children, String(describing: String(Array(String(describing: (res.rem_prefix as! String)))[0..<1])), (child_idx as! Int))
        let new_idx = Int(((nodes).count))
        nodes = (_append(nodes, new_node((res.common as! String), false)) as! [RadixNode?])
        nodes[new_idx]!.children = (new_children as! [String: Int])
        if (res.rem_word == "") {
            nodes[new_idx]!.is_leaf = true
        } else {
            _ = insert(&tree, new_idx, (res.rem_word as! String))
        }
        children = _set(children, String(describing: first), (new_idx as! Int))
        node.children = (children as! [String: Int])
        nodes = _set(nodes, idx, (node as! RadixNode))
        tree.nodes = (nodes as! [RadixNode?])
    }
    func find(_ tree: RadixTree, _ idx: Int, _ word: String) -> Bool {
        var nodes: [RadixNode?] = tree.nodes
        let node = (nodes[idx] as! RadixNode)
        let first = String(describing: String(Array(String(describing: (word as! String)))[0..<1]))
        let children: [String: Int] = node.children
        if (!has_key((children as! [String: Int]), (first as! String))) {
            return false
        }
        let child_idx = (children[String(String(describing: first))] as? Int ?? 0)
        let child = (nodes[child_idx] as! RadixNode)
        let res = match_prefix((child as! RadixNode), (word as! String))
        if (res.rem_prefix != "") {
            return false
        }
        if (res.rem_word == "") {
            return child.is_leaf
        }
        return find((tree as! RadixTree), child_idx, (res.rem_word as! String))
    }
    func remove_key(_ m: [String: Int], _ k: String) -> [String: Int] {
        var out: [String: Int] = ([:] as! [String: Int])
        for key in m.keys.sorted() {
            if (key != k) {
                out = _set(out, String(describing: key), (m[String(String(describing: key))] as? Int ?? 0))
            }
        }
        return out
    }
    func has_key(_ m: [String: Int], _ k: String) -> Bool {
        for key in m.keys.sorted() {
            if (key == k) {
                return true
            }
        }
        return false
    }
    func delete(_ tree: inout RadixTree, _ idx: Int, _ word: String) -> Bool {
        var nodes: [RadixNode?] = tree.nodes
        var node: RadixNode = (nodes[idx] as! RadixNode)
        let first = String(describing: String(Array(String(describing: (word as! String)))[0..<1]))
        var children: [String: Int] = node.children
        if (!has_key((children as! [String: Int]), (first as! String))) {
            return false
        }
        let child_idx = (children[String(String(describing: first))] as? Int ?? 0)
        var child: RadixNode = (nodes[child_idx] as! RadixNode)
        let res = match_prefix((child as! RadixNode), (word as! String))
        if (res.rem_prefix != "") {
            return false
        }
        if (res.rem_word != "") {
            let deleted = delete(&tree, child_idx, (res.rem_word as! String))
            if deleted {
                nodes = (tree.nodes as! [RadixNode?])
                node = (nodes[idx] as! RadixNode)
            }
            return deleted
        }
        if (!child.is_leaf) {
            return false
        }
        if (Int(((child.children).count)) == 0) {
            children = (remove_key((children as! [String: Int]), (first as! String)) as! [String: Int])
            node.children = (children as! [String: Int])
            nodes = _set(nodes, idx, (node as! RadixNode))
            tree.nodes = (nodes as! [RadixNode?])
            if ((Int(((children).count)) == 1) && ((!node.is_leaf) as! Bool)) {
                var only_key: Any? = ""
                for k in children.keys.sorted() {
                    only_key = k
                }
                let merge_idx = (children[String(String(describing: only_key))] as? Int ?? 0)
                let merge_node = (nodes[merge_idx] as! RadixNode)
                node.is_leaf = (merge_node.is_leaf as! Bool)
                node.prefix = ((node.prefix + merge_node.prefix) as! String)
                node.children = (merge_node.children as! [String: Int])
                nodes = _set(nodes, idx, (node as! RadixNode))
                tree.nodes = (nodes as! [RadixNode?])
            }
        } else if (Int(((child.children).count)) > 1) {
            child.is_leaf = false
            nodes = _set(nodes, child_idx, (child as! RadixNode))
            tree.nodes = (nodes as! [RadixNode?])
        } else {
            var only_key: Any? = ""
            for k in child.children.keys.sorted() {
                only_key = k
            }
            let merge_idx = (child.children[String(String(describing: only_key))] as? Int ?? 0)
            let merge_node = (nodes[merge_idx] as! RadixNode)
            child.is_leaf = (merge_node.is_leaf as! Bool)
            child.prefix = ((child.prefix + merge_node.prefix) as! String)
            child.children = (merge_node.children as! [String: Int])
            nodes = _set(nodes, child_idx, (child as! RadixNode))
            tree.nodes = (nodes as! [RadixNode?])
        }
        
        return true
    }
    func print_tree(_ tree: RadixTree, _ idx: Int, _ height: Int) {
        var nodes: [RadixNode?] = tree.nodes
        let node = (nodes[idx] as! RadixNode)
        if (node.prefix != "") {
            var line: String = ""
            var i: Int = 0
            while (i < height) {
                line = ((line + "-") as! String)
                i = Int((i &+ 1))
            }
            line = (((line + " ") + node.prefix) as! String)
            if node.is_leaf {
                line = ((line + "  (leaf)") as! String)
            }
            print(_p(line))
        }
        let children: [String: Int] = node.children
        for k in children.keys.sorted() {
            let child_idx = (children[String(String(describing: k))] as? Int ?? 0)
            _ = print_tree((tree as! RadixTree), child_idx, (height &+ 1))
        }
    }
    func test_trie() -> Bool {
        let words: [String?] = (["banana", "bananas", "bandana", "band", "apple", "all", "beast"] as! [String?])
        var tree = new_tree()
        _ = insert_many(&tree, (words as! [String?]))
        var ok: Bool = true
        for w in words {
            if (!find((tree as! RadixTree), 0, (w as! String))) {
                ok = false
            }
        }
        if find((tree as! RadixTree), 0, "bandanas") {
            ok = false
        }
        if find((tree as! RadixTree), 0, "apps") {
            ok = false
        }
        _ = delete(&tree, 0, "all")
        if find((tree as! RadixTree), 0, "all") {
            ok = false
        }
        _ = delete(&tree, 0, "banana")
        if find((tree as! RadixTree), 0, "banana") {
            ok = false
        }
        if (!find((tree as! RadixTree), 0, "bananas")) {
            ok = false
        }
        return ok
    }
    func pytests() {
        if (!test_trie()) {
            _ = fatalError("test failed")
        }
    }
    func main() {
        var tree = new_tree()
        let words: [String?] = (["banana", "bananas", "bandanas", "bandana", "band", "apple", "all", "beast"] as! [String?])
        _ = insert_many(&tree, (words as! [String?]))
        print(_p(("Words: " + "[" + words.map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]")))
        print(_p("Tree:"))
        _ = print_tree((tree as! RadixTree), 0, 0)
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
