// Generated by Mochi transpiler v0.10.59 on 2025-08-07 08:55:26 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
struct Angle: Codable {
    var degrees: Double
    init() {
        self.degrees = 0
    }
    init(degrees: Double) {
        self.degrees = degrees
    }
}
struct Side: Codable {
    var length: Double
    var angle: Angle
    var next: Int
    init() {
        self.length = 0
        self.angle = Angle()
        self.next = 0
    }
    init(length: Double, angle: Angle, next: Int) {
        self.length = length
        self.angle = angle
        self.next = next
    }
}
struct Ellipse: Codable {
    var major: Double
    var minor: Double
    init() {
        self.major = 0
        self.minor = 0
    }
    init(major: Double, minor: Double) {
        self.major = major
        self.minor = minor
    }
}
struct Circle: Codable {
    var radius: Double
    init() {
        self.radius = 0
    }
    init(radius: Double) {
        self.radius = radius
    }
}
struct Polygon: Codable {
    var sides: [Side]
    init() {
        self.sides = []
    }
    init(sides: [Side]) {
        self.sides = sides
    }
}
struct Rectangle: Codable {
    var short_side: Side
    var long_side: Side
    var poly: Polygon
    init() {
        self.short_side = Side()
        self.long_side = Side()
        self.poly = Polygon()
    }
    init(short_side: Side, long_side: Side, poly: Polygon) {
        self.short_side = short_side
        self.long_side = long_side
        self.poly = poly
    }
}
struct Square: Codable {
    var side: Side
    var rect: Rectangle
    init() {
        self.side = Side()
        self.rect = Rectangle()
    }
    init(side: Side, rect: Rectangle) {
        self.side = side
        self.rect = rect
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let PI = 3.141592653589793
    func make_angle(_ deg: Double) -> Angle {
        if ((deg < 0.0) || (deg > 360.0)) {
            _ = fatalError("degrees must be between 0 and 360")
        }
        return Angle(degrees: deg)
    }
    func make_side(_ length: Double, _ angle: Angle) -> Side {
        if (length <= 0.0) {
            _ = fatalError("length must be positive")
        }
        return Side(length: length, angle: angle, next: -1)
    }
    func ellipse_area(_ e: Ellipse) -> Double {
        return ((PI * e.major) * e.minor)
    }
    func ellipse_perimeter(_ e: Ellipse) -> Double {
        return (PI * Double((e.major + e.minor)))
    }
    func circle_area(_ c: Circle) -> Double {
        let e: Ellipse = Ellipse(major: c.radius, minor: c.radius)
        let area = Double(ellipse_area((e as! Ellipse)))
        return area
    }
    func circle_perimeter(_ c: Circle) -> Double {
        let e: Ellipse = Ellipse(major: c.radius, minor: c.radius)
        let per = Double(ellipse_perimeter((e as! Ellipse)))
        return per
    }
    func circle_diameter(_ c: Circle) -> Double {
        return (c.radius * 2.0)
    }
    func circle_max_parts(_ num_cuts: Double) -> Double {
        if (num_cuts < 0.0) {
            _ = fatalError("num_cuts must be positive")
        }
        return (Double(((num_cuts + 2.0) + (num_cuts * num_cuts))) * 0.5)
    }
    func make_polygon() -> Polygon {
        var s: [Side] = ([] as! [Side])
        return Polygon(sides: s)
    }
    func polygon_add_side(_ p: inout Polygon, _ s: Side) {
        p.sides = (_append(p.sides, s) as! [Side])
    }
    func polygon_get_side(_ p: Polygon, _ index: Int) -> Side {
        return (p.sides[index] as! Side)
    }
    func polygon_set_side(_ p: inout Polygon, _ index: Int, _ s: Side) {
        var tmp: [Side] = p.sides
        tmp = _set(tmp, index, (s as! Side))
        p.sides = (tmp as! [Side])
    }
    func make_rectangle(_ short_len: Double, _ long_len: Double) -> Rectangle {
        if ((short_len <= 0.0) || (long_len <= 0.0)) {
            _ = fatalError("length must be positive")
        }
        let short = make_side(Double(short_len), (make_angle(90.0) as! Angle))
        let long = make_side(Double(long_len), (make_angle(90.0) as! Angle))
        var p: Polygon = make_polygon()
        _ = polygon_add_side(&p, (short as! Side))
        _ = polygon_add_side(&p, (long as! Side))
        return Rectangle(short_side: short, long_side: long, poly: p)
    }
    func rectangle_perimeter(_ r: Rectangle) -> Double {
        return (Double((r.short_side.length + r.long_side.length)) * 2.0)
    }
    func rectangle_area(_ r: Rectangle) -> Double {
        return (r.short_side.length * r.long_side.length)
    }
    func make_square(_ side_len: Double) -> Square {
        let rect: Rectangle = make_rectangle(Double(side_len), Double(side_len))
        return Square(side: rect.short_side, rect: rect)
    }
    func square_perimeter(_ s: Square) -> Double {
        let p = Double(rectangle_perimeter((s.rect as! Rectangle)))
        return p
    }
    func square_area(_ s: Square) -> Double {
        let a = Double(rectangle_area((s.rect as! Rectangle)))
        return a
    }
    func main() {
        let a = make_angle(90.0)
        print(_p(a.degrees))
        let s = make_side(5.0, (a as! Angle))
        print(_p(s.length))
        let e = Ellipse(major: 5.0, minor: 10.0)
        print(_p(Double(ellipse_area((e as! Ellipse)))))
        print(_p(Double(ellipse_perimeter((e as! Ellipse)))))
        let c = Circle(radius: 5.0)
        print(_p(Double(circle_area((c as! Circle)))))
        print(_p(Double(circle_perimeter((c as! Circle)))))
        print(_p(Double(circle_diameter((c as! Circle)))))
        print(_p(Double(circle_max_parts(7.0))))
        let r = make_rectangle(5.0, 10.0)
        print(_p(Double(rectangle_perimeter((r as! Rectangle)))))
        print(_p(Double(rectangle_area((r as! Rectangle)))))
        let q = make_square(5.0)
        print(_p(Double(square_perimeter((q as! Square)))))
        print(_p(Double(square_area((q as! Square)))))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
