// Generated by Mochi transpiler v0.10.63 on 2025-08-11 17:27:10 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
func _slice<T>(_ xs: [T], _ start: Int, _ end: Int) -> [T] {
    var s = start
    var e = end
    if s < 0 { s = 0 }
    if e > xs.count { e = xs.count }
    if s > e { s = e }
    return Array(xs[s..<e])
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let DIGITS = "0123456789"
    let LOWER = "abcdefghijklmnopqrstuvwxyz"
    let UPPER = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    func index_of(_ s: String, _ ch: String) -> Int {
        var i = 0
        while (i < _int(((s).count))) {
            if ((String(Array(s)[i]) as! String) == ch) {
                return i
            }
            i = _int((i &+ 1))
        }
        return -1
    }
    func is_digit(_ ch: String) -> Bool {
        return (_int(index_of((DIGITS as! String), (ch as! String))) >= 0)
    }
    func to_lower(_ ch: String) -> String {
        var idx = _int(index_of((UPPER as! String), (ch as! String)))
        if (idx >= 0) {
            return String(_slice(Array(LOWER), idx, (idx &+ 1)))
        }
        return ch
    }
    func pad_left(_ s: String, _ width: Int) -> String {
        var res = s
        while (_int(((res).count)) < width) {
            res = (("0" + res) as! String)
        }
        return res
    }
    func alphanum_key(_ s: String) -> [String] {
        var key: [String] = ([] as! [String])
        var i = 0
        while (i < _int(((s).count))) {
            if is_digit((String(Array(s)[i]) as! String)) {
                var num = ""
                while ((i < _int(((s).count))) && is_digit((String(Array(s)[i]) as! String))) {
                    num = ((num + (String(Array(s)[i]) as! String)) as! String)
                    i = _int((i &+ 1))
                }
                let len_str = String(describing: pad_left(_p(_int(((num).count))), 3))
                key = (_append(key, (("#" + len_str) + num)) as! [String])
            } else {
                var seg = ""
                while (i < _int(((s).count))) {
                    if is_digit((String(Array(s)[i]) as! String)) {
                        break
                    }
                    seg = ((seg + String(describing: to_lower((String(Array(s)[i]) as! String)))) as! String)
                    i = _int((i &+ 1))
                }
                key = (_append(key, seg) as! [String])
            }
        }
        return key
    }
    func compare_keys(_ a: [String], _ b: [String]) -> Int {
        var i = 0
        while ((i < _int(((a).count))) && (i < _int(((b).count)))) {
            if ((_idx(a, i) as! String) < (_idx(b, i) as! String)) {
                return -1
            }
            if ((_idx(a, i) as! String) > (_idx(b, i) as! String)) {
                return 1
            }
            i = _int((i &+ 1))
        }
        if (_int(((a).count)) < _int(((b).count))) {
            return -1
        }
        if (_int(((a).count)) > _int(((b).count))) {
            return 1
        }
        return 0
    }
    func natural_sort(_ arr: [String]) -> [String] {
        var res: [String] = ([] as! [String])
        var keys: [[String]] = ([] as! [[String]])
        var k = 0
        while (k < _int(((arr).count))) {
            res = (_append(res, (_idx(arr, k) as! String)) as! [String])
            keys = (_append(keys, (alphanum_key((_idx(arr, k) as! String)) as! [String])) as! [[String]])
            k = _int((k &+ 1))
        }
        var i = 1
        while (i < _int(((res).count))) {
            let current = (_idx(res, i) as! String)
            let current_key: [String] = (_idx(keys, i) as! [String])
            var j = (i &- 1)
            while ((j >= 0) && (_int(compare_keys((_idx(keys, j) as! [String]), (current_key as! [String]))) > 0)) {
                res = _set(res, (j &+ 1), (_idx(res, j) as! String))
                keys = _set(keys, (j &+ 1), (_idx(keys, j) as! [String]))
                j = _int((j &- 1))
            }
            res = _set(res, (j &+ 1), (current as! String))
            keys = _set(keys, (j &+ 1), (current_key as! [String]))
            i = _int((i &+ 1))
        }
        return res
    }
    var example1: [String] = ({
        var _arr: [String] = []
        _arr = _append(_arr, "2 ft 7 in")
        _arr = _append(_arr, "1 ft 5 in")
        _arr = _append(_arr, "10 ft 2 in")
        _arr = _append(_arr, "2 ft 11 in")
        _arr = _append(_arr, "7 ft 6 in")
        return _arr
    }() as! [String])
    print(_p("[" + (natural_sort((example1 as! [String])) as! [String]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    var example2: [String] = ({
        var _arr: [String] = []
        _arr = _append(_arr, "Elm11")
        _arr = _append(_arr, "Elm12")
        _arr = _append(_arr, "Elm2")
        _arr = _append(_arr, "elm0")
        _arr = _append(_arr, "elm1")
        _arr = _append(_arr, "elm10")
        _arr = _append(_arr, "elm13")
        _arr = _append(_arr, "elm9")
        return _arr
    }() as! [String])
    print(_p("[" + (natural_sort((example2 as! [String])) as! [String]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
