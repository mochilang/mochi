// Generated by Mochi transpiler v0.10.63 on 2025-08-11 16:26:19 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func int_to_float(_ x: Int) -> Double {
        return (Double(x) * 1.0)
    }
    func floor_int(_ x: Double) -> Int {
        var i = 0
        while (Double(int_to_float((i &+ 1))) <= x) {
            i = _int((i &+ 1))
        }
        return i
    }
    func set_at_float(_ xs: [Double], _ idx: Int, _ value: Double) -> [Double] {
        var i = 0
        var res: [Double] = ([] as! [Double])
        while (i < _int(((xs).count))) {
            if (i == idx) {
                res = (_append(res, value) as! [Double])
            } else {
                res = (_append(res, Double(_idx(xs, i))) as! [Double])
            }
            i = _int((i &+ 1))
        }
        return res
    }
    func set_at_list_float(_ xs: [[Double]], _ idx: Int, _ value: [Double]) -> [[Double]] {
        var i = 0
        var res: [[Double]] = ([] as! [[Double]])
        while (i < _int(((xs).count))) {
            if (i == idx) {
                res = (_append(res, value) as! [[Double]])
            } else {
                res = (_append(res, (_idx(xs, i) as! [Double])) as! [[Double]])
            }
            i = _int((i &+ 1))
        }
        return res
    }
    func sort_float(_ xs: [Double]) -> [Double] {
        var res = xs
        var i = 1
        while (i < _int(((res).count))) {
            let key = Double(_idx(res, i))
            var j = (i &- 1)
            while ((j >= 0) && (Double(_idx(res, j)) > key)) {
                res = (set_at_float((res as! [Double]), (j &+ 1), Double(_idx(res, j))) as! [Double])
                j = _int((j &- 1))
            }
            res = (set_at_float((res as! [Double]), (j &+ 1), Double(key)) as! [Double])
            i = _int((i &+ 1))
        }
        return res
    }
    func bucket_sort_with_count(_ xs: [Double], _ bucket_count: Int) -> [Double] {
        if ((_int(((xs).count)) == 0) || (bucket_count <= 0)) {
            return ([] as! [Double])
        }
        var min_value = Double(_idx(xs, 0))
        var max_value = Double(_idx(xs, 0))
        var i = 1
        while (i < _int(((xs).count))) {
            if (Double(_idx(xs, i)) < min_value) {
                min_value = Double(_idx(xs, i))
            }
            if (Double(_idx(xs, i)) > max_value) {
                max_value = Double(_idx(xs, i))
            }
            i = _int((i &+ 1))
        }
        if (max_value == min_value) {
            return xs
        }
        let bucket_size = (Double((max_value - min_value)) / Double(int_to_float(bucket_count)))
        var buckets: [[Double]] = ([] as! [[Double]])
        i = 0
        while (i < bucket_count) {
            buckets = (((_append(buckets, ([] as! [Double])) as! [[Double]]) as! [Any?]) as! [[Double]])
            i = _int((i &+ 1))
        }
        i = 0
        while (i < _int(((xs).count))) {
            let val = Double(_idx(xs, i))
            var idx = _int(floor_int(Double((Double((val - min_value)) / bucket_size))))
            if (idx < 0) {
                idx = 0
            }
            if (idx >= bucket_count) {
                idx = _int((bucket_count &- 1))
            }
            var bucket = (_idx(buckets, idx) as! [Double])
            bucket = (_append(bucket, val) as! [Double])
            buckets = (set_at_list_float((buckets as! [[Double]]), idx, (bucket as! [Double])) as! [[Double]])
            i = _int((i &+ 1))
        }
        var result: [Double] = ([] as! [Double])
        i = 0
        while (i < _int(((buckets).count))) {
            let sorted_bucket: [Double] = (sort_float((_idx(buckets, i) as! [Double])) as! [Double])
            var j = 0
            while (j < _int(((sorted_bucket).count))) {
                result = (_append(result, Double(_idx(sorted_bucket, j))) as! [Double])
                j = _int((j &+ 1))
            }
            i = _int((i &+ 1))
        }
        return result
    }
    func bucket_sort(_ xs: [Double]) -> [Double] {
        return (bucket_sort_with_count((xs as! [Double]), 10) as! [Double])
    }
    print(_p("[" + (bucket_sort(({
        var _arr: [Double] = []
        _arr = _append(_arr, -1.0)
        _arr = _append(_arr, 2.0)
        _arr = _append(_arr, -5.0)
        _arr = _append(_arr, 0.0)
        return _arr
    }() as! [Double])) as! [Double]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    print(_p("[" + (bucket_sort(({
        var _arr: [Double] = []
        _arr = _append(_arr, 9.0)
        _arr = _append(_arr, 8.0)
        _arr = _append(_arr, 7.0)
        _arr = _append(_arr, 6.0)
        _arr = _append(_arr, -12.0)
        return _arr
    }() as! [Double])) as! [Double]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    print(_p("[" + (bucket_sort(({
        var _arr: [Double] = []
        _arr = _append(_arr, 0.4)
        _arr = _append(_arr, 1.2)
        _arr = _append(_arr, 0.1)
        _arr = _append(_arr, 0.2)
        _arr = _append(_arr, -0.9)
        return _arr
    }() as! [Double])) as! [Double]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    print(_p("[" + (bucket_sort(([] as! [Double])) as! [Double]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    print(_p("[" + (bucket_sort(({
        var _arr: [Double] = []
        _arr = _append(_arr, -10000000000.0)
        _arr = _append(_arr, 10000000000.0)
        return _arr
    }() as! [Double])) as! [Double]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
