// Generated by Mochi transpiler v0.10.63 on 2025-08-11 17:28:26 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _concat<T>(_ a: [T], _ b: [T]) -> [T] {
    var out = a
    out.append(contentsOf: b)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func list_min(_ xs: [Int]) -> Int {
        var i = 1
        var m = (_idx(xs, 0) as? Int ?? 0)
        while (i < _int(((xs).count))) {
            if ((_idx(xs, i) as? Int ?? 0) < m) {
                m = (_idx(xs, i) as? Int ?? 0)
            }
            i = _int((i &+ 1))
        }
        return m
    }
    func list_max(_ xs: [Int]) -> Int {
        var i = 1
        var m = (_idx(xs, 0) as? Int ?? 0)
        while (i < _int(((xs).count))) {
            if ((_idx(xs, i) as? Int ?? 0) > m) {
                m = (_idx(xs, i) as? Int ?? 0)
            }
            i = _int((i &+ 1))
        }
        return m
    }
    func remove_once(_ xs: [Int], _ value: Int) -> [Int] {
        var res: [Int] = ([] as! [Int])
        var removed: Bool = false
        var i = 0
        while (i < _int(((xs).count))) {
            if ((!removed) && ((_idx(xs, i) as? Int ?? 0) == value)) {
                removed = true
            } else {
                res = (_append(res, (_idx(xs, i) as? Int ?? 0)) as! [Int])
            }
            i = _int((i &+ 1))
        }
        return res
    }
    func reverse_list(_ xs: [Int]) -> [Int] {
        var res: [Int] = ([] as! [Int])
        var i = (_int(((xs).count)) &- 1)
        while (i >= 0) {
            res = (_append(res, (_idx(xs, i) as? Int ?? 0)) as! [Int])
            i = _int((i &- 1))
        }
        return res
    }
    func merge_sort(_ collection: [Int]) -> [Int] {
        var start: [Int] = ([] as! [Int])
        var end: [Int] = ([] as! [Int])
        var coll = collection
        while (_int(((coll).count)) > 1) {
            let mn = _int(list_min((coll as! [Int])))
            let mx = _int(list_max((coll as! [Int])))
            start = (_append(start, mn) as! [Int])
            end = (_append(end, mx) as! [Int])
            coll = (remove_once((coll as! [Int]), mn) as! [Int])
            coll = (remove_once((coll as! [Int]), mx) as! [Int])
        }
        end = (reverse_list((end as! [Int])) as! [Int])
        return ((_concat((_concat(start, coll) as! [Any?]), end) as! [Any?]) as! [Int])
    }
    func test_merge_sort() {
        if ((merge_sort(({
            var _arr: [Int] = []
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 5)
            _arr = _append(_arr, 3)
            _arr = _append(_arr, 2)
            _arr = _append(_arr, 2)
            return _arr
        }() as! [Int])) as! [Int]) != ({
            var _arr: [Int] = []
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 2)
            _arr = _append(_arr, 2)
            _arr = _append(_arr, 3)
            _arr = _append(_arr, 5)
            return _arr
        }() as! [Int])) {
            _ = fatalError("case1 failed")
        }
        if ((merge_sort(([] as! [Int])) as! [Int]) != []) {
            _ = fatalError("case2 failed")
        }
        if ((merge_sort(({
            var _arr: [Int] = []
            _arr = _append(_arr, -2)
            _arr = _append(_arr, -5)
            _arr = _append(_arr, -45)
            return _arr
        }() as! [Int])) as! [Int]) != ({
            var _arr: [Int] = []
            _arr = _append(_arr, -45)
            _arr = _append(_arr, -5)
            _arr = _append(_arr, -2)
            return _arr
        }() as! [Int])) {
            _ = fatalError("case3 failed")
        }
    }
    func main() {
        _ = test_merge_sort()
        print(_p("[" + (merge_sort(({
            var _arr: [Int] = []
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 5)
            _arr = _append(_arr, 3)
            _arr = _append(_arr, 2)
            _arr = _append(_arr, 2)
            return _arr
        }() as! [Int])) as! [Int]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
