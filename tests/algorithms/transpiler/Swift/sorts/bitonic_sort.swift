// Generated by Mochi transpiler v0.10.63 on 2025-08-11 16:26:13 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func set_at_int(_ xs: [Int], _ idx: Int, _ value: Int) -> [Int] {
        var res: [Int] = ([] as! [Int])
        var i = 0
        while (i < _int(((xs).count))) {
            if (i == idx) {
                res = (_append(res, value) as! [Int])
            } else {
                res = (_append(res, (_idx(xs, i) as? Int ?? 0)) as! [Int])
            }
            i = _int((i &+ 1))
        }
        return res
    }
    func comp_and_swap(_ arr: [Int], _ i: Int, _ j: Int, _ dir: Int) -> [Int] {
        var res = arr
        let xi = (_idx(arr, i) as? Int ?? 0)
        let xj = (_idx(arr, j) as? Int ?? 0)
        if (((dir == 1) && (xi > xj)) || ((dir == 0) && (xi < xj))) {
            res = (set_at_int((res as! [Int]), i, xj) as! [Int])
            res = (set_at_int((res as! [Int]), j, xi) as! [Int])
        }
        return res
    }
    func bitonic_merge(_ arr: [Int], _ low: Int, _ length: Int, _ dir: Int) -> [Int] {
        var res = arr
        if (length > 1) {
            let mid = (length / 2)
            var k = low
            while (k < (low &+ mid)) {
                res = (comp_and_swap((res as! [Int]), k, (k &+ mid), dir) as! [Int])
                k = _int((k &+ 1))
            }
            res = (bitonic_merge((res as! [Int]), low, mid, dir) as! [Int])
            res = (bitonic_merge((res as! [Int]), (low &+ mid), mid, dir) as! [Int])
        }
        return res
    }
    func bitonic_sort(_ arr: [Int], _ low: Int, _ length: Int, _ dir: Int) -> [Int] {
        var res = arr
        if (length > 1) {
            let mid = (length / 2)
            res = (bitonic_sort((res as! [Int]), low, mid, 1) as! [Int])
            res = (bitonic_sort((res as! [Int]), (low &+ mid), mid, 0) as! [Int])
            res = (bitonic_merge((res as! [Int]), low, length, dir) as! [Int])
        }
        return res
    }
    func main() {
        let data: [Int] = ({
            var _arr: [Int] = []
            _arr = _append(_arr, 12)
            _arr = _append(_arr, 34)
            _arr = _append(_arr, 92)
            _arr = _append(_arr, -23)
            _arr = _append(_arr, 0)
            _arr = _append(_arr, -121)
            _arr = _append(_arr, -167)
            _arr = _append(_arr, 145)
            return _arr
        }() as! [Int])
        let asc: [Int] = (bitonic_sort((data as! [Int]), 0, _int(((data).count)), 1) as! [Int])
        print(_p("[" + asc.map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
        let desc: [Int] = (bitonic_merge((asc as! [Int]), 0, _int(((asc).count)), 0) as! [Int])
        print(_p("[" + desc.map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
