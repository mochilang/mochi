// Generated by Mochi transpiler v0.10.71 on 2025-08-24 09:03:25 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.isNaN || d.isInfinite {
                return String(d)
            }
            if d.rounded(.towardZero) == d {
                // avoid overflow when converting to Int64
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _num(_ v: Any) -> Double {
    if let d = v as? Double { return d }
    if let i = v as? Int { return Double(i) }
    if let i = v as? Int64 { return Double(i) }
    return 0
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first!
}
func _idx<K: Hashable, V>(_ m: [K: V], _ k: K) -> V? {
    return m[k]
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    var i = idx
    if i < 0 { i += out.count }
    if i < out.count {
        out[i] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: i - out.count + 1))
        out[i] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func heapify(_ arr: inout [Int], _ index: Int, _ heap_size: Int) {
        var largest = index
        let left_index = ((2 &* index) &+ 1)
        let right_index = ((2 &* index) &+ 2)
        if (((left_index < heap_size) && ((_idx(arr, left_index) as? Int ?? 0) > (_idx(arr, largest) as? Int ?? 0)))) {
            largest = Int(left_index)
        }
        if (((right_index < heap_size) && ((_idx(arr, right_index) as? Int ?? 0) > (_idx(arr, largest) as? Int ?? 0)))) {
            largest = Int(right_index)
        }
        if ((largest != index)) {
            let temp = (_idx(arr, largest) as? Int ?? 0)
            arr = _set(arr, largest, { let _tmp0 = (_idx(arr, index) as? Int ?? 0); return _tmp0 }())
            arr = _set(arr, index, { let _tmp1 = Int(temp); return _tmp1 }())
            _ = heapify(&arr, largest, heap_size)
        }
    }
    func heap_sort(_ arr: inout [Int]) -> [Int] {
        let n = _int(((arr).count))
        var i = ((n / 2) &- 1)
        while ((i >= 0)) {
            _ = heapify(&arr, i, n)
            i = _int((i &- 1))
        }
        i = _int((n &- 1))
        while ((i > 0)) {
            let temp = (_idx(arr, 0) as? Int ?? 0)
            arr = _set(arr, 0, { let _tmp2 = (_idx(arr, i) as? Int ?? 0); return _tmp2 }())
            arr = _set(arr, i, { let _tmp3 = Int(temp); return _tmp3 }())
            _ = heapify(&arr, 0, i)
            i = _int((i &- 1))
        }
        return arr
    }
    var data: [Int] = ({
        var _arr: [Int] = []
        _arr = _append(_arr, 3)
        _arr = _append(_arr, 7)
        _arr = _append(_arr, 9)
        _arr = _append(_arr, 28)
        _arr = _append(_arr, 123)
        _arr = _append(_arr, -5)
        _arr = _append(_arr, 8)
        _arr = _append(_arr, -30)
        _arr = _append(_arr, -200)
        _arr = _append(_arr, 0)
        _arr = _append(_arr, 4)
        return _arr
    }() as! [Int])
    var result = (heap_sort(&data) as! [Int])
    print(_p("[" + result.map{ if let s = $0 as? String { "\"" + s.replacingOccurrences(of: "\"", with: "\\\"") + "\"" } else { _p($0) } }.joined(separator: ", ") + "]"))
    if ({ let _tmp5 = "[" + result.map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"; let _tmp6 = "[" + ({
        var _arr: [Int] = []
        _arr = _append(_arr, -200)
        _arr = _append(_arr, -30)
        _arr = _append(_arr, -5)
        _arr = _append(_arr, 0)
        _arr = _append(_arr, 3)
        _arr = _append(_arr, 4)
        _arr = _append(_arr, 7)
        _arr = _append(_arr, 8)
        _arr = _append(_arr, 9)
        _arr = _append(_arr, 28)
        _arr = _append(_arr, 123)
        return _arr
    }() as! [Int]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"; return _tmp5 != _tmp6}()) {
        _ = fatalError("Assertion error")
    }
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
