// Generated by Mochi transpiler v0.10.63 on 2025-08-11 16:27:13 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func binary_search_insertion_from(_ sorted_list: [Int], _ item: Int, _ start: Int) -> [Int] {
        var left = start
        var right = (_int(((sorted_list).count)) &- 1)
        while (left <= right) {
            let middle = (_int((left &+ right)) / 2)
            if (left == right) {
                if ((_idx(sorted_list, middle) as? Int ?? 0) < item) {
                    left = _int((middle &+ 1))
                }
                break
            } else if ((_idx(sorted_list, middle) as? Int ?? 0) < item) {
                left = _int((middle &+ 1))
            } else {
                right = _int((middle &- 1))
            }
            
        }
        var result: [Int] = ([] as! [Int])
        var i = 0
        while (i < left) {
            result = (_append(result, (_idx(sorted_list, i) as? Int ?? 0)) as! [Int])
            i = _int((i &+ 1))
        }
        result = (_append(result, item) as! [Int])
        while (i < _int(((sorted_list).count))) {
            result = (_append(result, (_idx(sorted_list, i) as? Int ?? 0)) as! [Int])
            i = _int((i &+ 1))
        }
        return result
    }
    func binary_search_insertion(_ sorted_list: [Int], _ item: Int) -> [Int] {
        return (binary_search_insertion_from((sorted_list as! [Int]), item, 0) as! [Int])
    }
    func merge(_ left: [[Int]], _ right: [[Int]]) -> [[Int]] {
        var result: [[Int]] = ([] as! [[Int]])
        var i = 0
        var j = 0
        while ((i < _int(((left).count))) && (j < _int(((right).count)))) {
            if ((_idx(_idx(left, i)!, 0) as? Int ?? 0) < (_idx(_idx(right, j)!, 0) as? Int ?? 0)) {
                result = (_append(result, (_idx(left, i) as! [Int])) as! [[Int]])
                i = _int((i &+ 1))
            } else {
                result = (_append(result, (_idx(right, j) as! [Int])) as! [[Int]])
                j = _int((j &+ 1))
            }
        }
        while (i < _int(((left).count))) {
            result = (_append(result, (_idx(left, i) as! [Int])) as! [[Int]])
            i = _int((i &+ 1))
        }
        while (j < _int(((right).count))) {
            result = (_append(result, (_idx(right, j) as! [Int])) as! [[Int]])
            j = _int((j &+ 1))
        }
        return result
    }
    func sortlist_2d(_ list_2d: [[Int]]) -> [[Int]] {
        let length = _int(((list_2d).count))
        if (length <= 1) {
            return list_2d
        }
        let middle = (length / 2)
        var left: [[Int]] = ([] as! [[Int]])
        var i = 0
        while (i < middle) {
            left = (_append(left, (_idx(list_2d, i) as! [Int])) as! [[Int]])
            i = _int((i &+ 1))
        }
        var right: [[Int]] = ([] as! [[Int]])
        var j = middle
        while (j < length) {
            right = (_append(right, (_idx(list_2d, j) as! [Int])) as! [[Int]])
            j = _int((j &+ 1))
        }
        return (merge((sortlist_2d((left as! [[Int]])) as! [[Int]]), (sortlist_2d((right as! [[Int]])) as! [[Int]])) as! [[Int]])
    }
    func merge_insertion_sort(_ collection: [Int]) -> [Int] {
        if (_int(((collection).count)) <= 1) {
            return collection
        }
        var two_paired_list: [[Int]] = ([] as! [[Int]])
        var has_last_odd_item = false
        var i = 0
        while (i < _int(((collection).count))) {
            if (i == (_int(((collection).count)) &- 1)) {
                has_last_odd_item = true
            } else {
                let a = (_idx(collection, i) as? Int ?? 0)
                let b = (_idx(collection, (i &+ 1)) as? Int ?? 0)
                if (a < b) {
                    two_paired_list = (_append(two_paired_list, ({
                        var _arr: [Int] = []
                        _arr = _append(_arr, a)
                        _arr = _append(_arr, b)
                        return _arr
                    }() as! [Int])) as! [[Int]])
                } else {
                    two_paired_list = (_append(two_paired_list, ({
                        var _arr: [Int] = []
                        _arr = _append(_arr, b)
                        _arr = _append(_arr, a)
                        return _arr
                    }() as! [Int])) as! [[Int]])
                }
            }
            i = _int((i &+ 2))
        }
        var sorted_list_2d = (sortlist_2d((two_paired_list as! [[Int]])) as! [[Int]])
        var result: [Int] = ([] as! [Int])
        i = 0
        while (i < _int(((sorted_list_2d).count))) {
            result = (_append(result, (_idx(_idx(sorted_list_2d, i)!, 0) as? Int ?? 0)) as! [Int])
            i = _int((i &+ 1))
        }
        result = (_append(result, (_idx(_idx(sorted_list_2d, (_int(((sorted_list_2d).count)) &- 1))!, 1) as? Int ?? 0)) as! [Int])
        if has_last_odd_item {
            result = (binary_search_insertion((result as! [Int]), (_idx(collection, (_int(((collection).count)) &- 1)) as? Int ?? 0)) as! [Int])
        }
        var inserted_before = false
        var idx = 0
        while (idx < (_int(((sorted_list_2d).count)) &- 1)) {
            if (has_last_odd_item && ((_idx(result, idx) as? Int ?? 0) == (_idx(collection, (_int(((collection).count)) &- 1)) as? Int ?? 0))) {
                inserted_before = true
            }
            let pivot = (_idx(_idx(sorted_list_2d, idx)!, 1) as? Int ?? 0)
            if inserted_before {
                result = (binary_search_insertion_from((result as! [Int]), pivot, (idx &+ 2)) as! [Int])
            } else {
                result = (binary_search_insertion_from((result as! [Int]), pivot, (idx &+ 1)) as! [Int])
            }
            idx = _int((idx &+ 1))
        }
        return result
    }
    func main() {
        let example1: [Int] = ({
            var _arr: [Int] = []
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 5)
            _arr = _append(_arr, 3)
            _arr = _append(_arr, 2)
            _arr = _append(_arr, 2)
            return _arr
        }() as! [Int])
        let example2: [Int] = ({
            var _arr: [Int] = []
            _arr = _append(_arr, 99)
            return _arr
        }() as! [Int])
        let example3: [Int] = ({
            var _arr: [Int] = []
            _arr = _append(_arr, -2)
            _arr = _append(_arr, -5)
            _arr = _append(_arr, -45)
            return _arr
        }() as! [Int])
        print(_p("[" + (merge_insertion_sort((example1 as! [Int])) as! [Int]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
        print(_p("[" + (merge_insertion_sort((example2 as! [Int])) as! [Int]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
        print(_p("[" + (merge_insertion_sort((example3 as! [Int])) as! [Int]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
