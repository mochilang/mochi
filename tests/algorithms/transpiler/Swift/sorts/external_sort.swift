// Generated by Mochi transpiler v0.10.63 on 2025-08-11 16:26:45 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func subarray(_ xs: [Int], _ start: Int, _ end: Int) -> [Int] {
        var result: [Int] = ([] as! [Int])
        var k = start
        while (k < end) {
            result = (_append(result, (_idx(xs, k) as? Int ?? 0)) as! [Int])
            k = _int((k &+ 1))
        }
        return result
    }
    func merge(_ left_half: [Int], _ right_half: [Int]) -> [Int] {
        var result: [Int] = ([] as! [Int])
        var i = 0
        var j = 0
        while ((i < _int(((left_half).count))) && (j < _int(((right_half).count)))) {
            if ((_idx(left_half, i) as? Int ?? 0) < (_idx(right_half, j) as? Int ?? 0)) {
                result = (_append(result, (_idx(left_half, i) as? Int ?? 0)) as! [Int])
                i = _int((i &+ 1))
            } else {
                result = (_append(result, (_idx(right_half, j) as? Int ?? 0)) as! [Int])
                j = _int((j &+ 1))
            }
        }
        while (i < _int(((left_half).count))) {
            result = (_append(result, (_idx(left_half, i) as? Int ?? 0)) as! [Int])
            i = _int((i &+ 1))
        }
        while (j < _int(((right_half).count))) {
            result = (_append(result, (_idx(right_half, j) as? Int ?? 0)) as! [Int])
            j = _int((j &+ 1))
        }
        return result
    }
    func merge_sort(_ array: [Int]) -> [Int] {
        if (_int(((array).count)) <= 1) {
            return array
        }
        let middle = (_int(((array).count)) / 2)
        let left_half: [Int] = (subarray((array as! [Int]), 0, middle) as! [Int])
        let right_half: [Int] = (subarray((array as! [Int]), middle, _int(((array).count))) as! [Int])
        let sorted_left: [Int] = (merge_sort((left_half as! [Int])) as! [Int])
        let sorted_right: [Int] = (merge_sort((right_half as! [Int])) as! [Int])
        return (merge((sorted_left as! [Int]), (sorted_right as! [Int])) as! [Int])
    }
    func split_into_blocks(_ data: [Int], _ block_size: Int) -> [[Int]] {
        var blocks: [[Int]] = ([] as! [[Int]])
        var i = 0
        while (i < _int(((data).count))) {
            let end = _int((((i &+ block_size) < _int(((data).count))) ? (i &+ block_size) : _int(((data).count))))
            let block: [Int] = (subarray((data as! [Int]), i, end) as! [Int])
            let sorted_block: [Int] = (merge_sort((block as! [Int])) as! [Int])
            blocks = (_append(blocks, sorted_block) as! [[Int]])
            i = Int(end)
        }
        return blocks
    }
    func merge_blocks(_ blocks: [[Int]]) -> [Int] {
        let num_blocks = _int(((blocks).count))
        var indices: [Int] = ([] as! [Int])
        var i = 0
        while (i < num_blocks) {
            indices = (_append(indices, 0) as! [Int])
            i = _int((i &+ 1))
        }
        var result: [Int] = ([] as! [Int])
        var done = false
        while (!done) {
            done = true
            var min_val = 0
            var min_block = (0 &- 1)
            var j = 0
            while (j < num_blocks) {
                let idx = (_idx(indices, j) as? Int ?? 0)
                if (idx < _int((((_idx(blocks, j) as! [Int])).count))) {
                    let val = (_idx(_idx(blocks, j)!, idx) as? Int ?? 0)
                    if ((min_block == _int((0 &- 1))) || (val < min_val)) {
                        min_val = Int(val)
                        min_block = Int(j)
                    }
                    done = false
                }
                j = _int((j &+ 1))
            }
            if (!done) {
                result = (_append(result, min_val) as! [Int])
                indices = _set(indices, min_block, _int(((_idx(indices, min_block) as? Int ?? 0) &+ 1)))
            }
        }
        return result
    }
    func external_sort(_ data: [Int], _ block_size: Int) -> [Int] {
        let blocks: [[Int]] = (split_into_blocks((data as! [Int]), block_size) as! [[Int]])
        return (merge_blocks((blocks as! [[Int]])) as! [Int])
    }
    func main() {
        let data: [Int] = ({
            var _arr: [Int] = []
            _arr = _append(_arr, 7)
            _arr = _append(_arr, 1)
            _arr = _append(_arr, 5)
            _arr = _append(_arr, 3)
            _arr = _append(_arr, 9)
            _arr = _append(_arr, 2)
            _arr = _append(_arr, 6)
            _arr = _append(_arr, 4)
            _arr = _append(_arr, 8)
            _arr = _append(_arr, 0)
            return _arr
        }() as! [Int])
        let sorted_data: [Int] = (external_sort((data as! [Int]), 3) as! [Int])
        print(_p("[" + sorted_data.map{ if let s = $0 as? String { "\"" + s.replacingOccurrences(of: "\"", with: "\\\"") + "\"" } else { _p($0) } }.joined(separator: ", ") + "]"))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
