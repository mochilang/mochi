// Generated by Mochi transpiler v0.10.63 on 2025-08-11 16:27:26 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func odd_even_transposition(_ arr: [Double]) -> [Double] {
        var arr = arr
        let n = _int(((arr).count))
        var pass = 0
        while (pass < n) {
            var i = ((pass % 2 + 2) % 2)
            while (i < (n &- 1)) {
                if (Double(_idx(arr, (i &+ 1))) < Double(_idx(arr, i))) {
                    let tmp = Double(_idx(arr, i))
                    arr = _set(arr, i, Double(_idx(arr, (i &+ 1))))
                    arr = _set(arr, (i &+ 1), Double(tmp))
                }
                i = _int((i &+ 2))
            }
            pass = _int((pass &+ 1))
        }
        return arr
    }
    print(_p("[" + (odd_even_transposition(({
        var _arr: [Double] = []
        _arr = _append(_arr, 5.0)
        _arr = _append(_arr, 4.0)
        _arr = _append(_arr, 3.0)
        _arr = _append(_arr, 2.0)
        _arr = _append(_arr, 1.0)
        return _arr
    }() as! [Double])) as! [Double]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    print(_p("[" + (odd_even_transposition(({
        var _arr: [Double] = []
        _arr = _append(_arr, 13.0)
        _arr = _append(_arr, 11.0)
        _arr = _append(_arr, 18.0)
        _arr = _append(_arr, 0.0)
        _arr = _append(_arr, -1.0)
        return _arr
    }() as! [Double])) as! [Double]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    print(_p("[" + (odd_even_transposition(({
        var _arr: [Double] = []
        _arr = _append(_arr, -0.1)
        _arr = _append(_arr, 1.1)
        _arr = _append(_arr, 0.1)
        _arr = _append(_arr, -2.9)
        return _arr
    }() as! [Double])) as! [Double]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
