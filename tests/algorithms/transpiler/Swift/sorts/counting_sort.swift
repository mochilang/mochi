// Generated by Mochi transpiler v0.10.63 on 2025-08-11 16:26:35 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
func _slice<T>(_ xs: [T], _ start: Int, _ end: Int) -> [T] {
    var s = start
    var e = end
    if s < 0 { s = 0 }
    if e > xs.count { e = xs.count }
    if s > e { s = e }
    return Array(xs[s..<e])
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func max_val(_ arr: [Int]) -> Int {
        var m = (_idx(arr, 0) as? Int ?? 0)
        var i = 1
        while (i < _int(((arr).count))) {
            if ((_idx(arr, i) as? Int ?? 0) > m) {
                m = (_idx(arr, i) as? Int ?? 0)
            }
            i = _int((i &+ 1))
        }
        return m
    }
    func min_val(_ arr: [Int]) -> Int {
        var m = (_idx(arr, 0) as? Int ?? 0)
        var i = 1
        while (i < _int(((arr).count))) {
            if ((_idx(arr, i) as? Int ?? 0) < m) {
                m = (_idx(arr, i) as? Int ?? 0)
            }
            i = _int((i &+ 1))
        }
        return m
    }
    func counting_sort(_ collection: [Int]) -> [Int] {
        if (_int(((collection).count)) == 0) {
            return ([] as! [Int])
        }
        let coll_len = _int(((collection).count))
        let coll_max = _int(max_val((collection as! [Int])))
        let coll_min = _int(min_val((collection as! [Int])))
        let counting_arr_length = ((coll_max &+ 1) &- coll_min)
        var counting_arr: [Int] = ([] as! [Int])
        var i = 0
        while (i < counting_arr_length) {
            counting_arr = (_append(counting_arr, 0) as! [Int])
            i = _int((i &+ 1))
        }
        i = 0
        while (i < coll_len) {
            let number = (_idx(collection, i) as? Int ?? 0)
            counting_arr = _set(counting_arr, (number &- coll_min), _int(((_idx(counting_arr, (number &- coll_min)) as? Int ?? 0) &+ 1)))
            i = _int((i &+ 1))
        }
        i = 1
        while (i < counting_arr_length) {
            counting_arr = _set(counting_arr, i, _int(((_idx(counting_arr, i) as? Int ?? 0) &+ (_idx(counting_arr, (i &- 1)) as? Int ?? 0))))
            i = _int((i &+ 1))
        }
        var ordered: [Int] = ([] as! [Int])
        i = 0
        while (i < coll_len) {
            ordered = (_append(ordered, 0) as! [Int])
            i = _int((i &+ 1))
        }
        var idx = (coll_len &- 1)
        while (idx >= 0) {
            let number = (_idx(collection, idx) as? Int ?? 0)
            let pos = ((_idx(counting_arr, (number &- coll_min)) as? Int ?? 0) &- 1)
            ordered = _set(ordered, pos, Int(number))
            counting_arr = _set(counting_arr, (number &- coll_min), _int(((_idx(counting_arr, (number &- coll_min)) as? Int ?? 0) &- 1)))
            idx = _int((idx &- 1))
        }
        return ordered
    }
    let ascii_chars: String = " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"
    func chr(_ code: Int) -> String {
        if (code == 10) {
            return "\n"
        }
        if (code == 13) {
            return "\r"
        }
        if (code == 9) {
            return "\t"
        }
        if ((code >= 32) && (code < 127)) {
            return String(_slice(Array(ascii_chars), (code &- 32), (code &- 31)))
        }
        return ""
    }
    func ord(_ ch: String) -> Int {
        if (ch == "\n") {
            return 10
        }
        if (ch == "\r") {
            return 13
        }
        if (ch == "\t") {
            return 9
        }
        var i = 0
        while (i < _int(((ascii_chars).count))) {
            if (String(_slice(Array(ascii_chars), i, (i &+ 1))) == ch) {
                return (32 &+ i)
            }
            i = _int((i &+ 1))
        }
        return 0
    }
    func counting_sort_string(_ s: String) -> String {
        var codes: [Int] = ([] as! [Int])
        var i = 0
        while (i < _int(((s).count))) {
            codes = (_append(codes, _int(ord((String(_slice(Array(s), i, (i &+ 1))) as! String)))) as! [Int])
            i = _int((i &+ 1))
        }
        let sorted_codes: [Int] = (counting_sort((codes as! [Int])) as! [Int])
        var res = ""
        i = 0
        while (i < _int(((sorted_codes).count))) {
            res = ((res + String(describing: chr((_idx(sorted_codes, i) as? Int ?? 0)))) as! String)
            i = _int((i &+ 1))
        }
        return res
    }
    let example1: [Int] = (counting_sort(({
        var _arr: [Int] = []
        _arr = _append(_arr, 0)
        _arr = _append(_arr, 5)
        _arr = _append(_arr, 3)
        _arr = _append(_arr, 2)
        _arr = _append(_arr, 2)
        return _arr
    }() as! [Int])) as! [Int])
    print(_p("[" + example1.map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    let example2: [Int] = (counting_sort(([] as! [Int])) as! [Int])
    print(_p("[" + example2.map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    let example3: [Int] = (counting_sort(({
        var _arr: [Int] = []
        _arr = _append(_arr, -2)
        _arr = _append(_arr, -5)
        _arr = _append(_arr, -45)
        return _arr
    }() as! [Int])) as! [Int])
    print(_p("[" + example3.map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    print(_p(String(describing: counting_sort_string("thisisthestring"))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
