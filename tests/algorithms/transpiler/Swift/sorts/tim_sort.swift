// Generated by Mochi transpiler v0.10.63 on 2025-08-11 17:28:20 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func copy_list(_ xs: [Int]) -> [Int] {
        var res: [Int] = ([] as! [Int])
        var k = 0
        while (k < _int(((xs).count))) {
            res = (_append(res, (_idx(xs, k) as? Int ?? 0)) as! [Int])
            k = _int((k &+ 1))
        }
        return res
    }
    func insertion_sort(_ xs: [Int]) -> [Int] {
        var arr = (copy_list((xs as! [Int])) as! [Int])
        var idx = 1
        while (idx < _int(((arr).count))) {
            let value = (_idx(arr, idx) as? Int ?? 0)
            var jdx = (idx &- 1)
            while ((jdx >= 0) && ((_idx(arr, jdx) as? Int ?? 0) > value)) {
                arr = _set(arr, (jdx &+ 1), (_idx(arr, jdx) as? Int ?? 0))
                jdx = _int((jdx &- 1))
            }
            arr = _set(arr, (jdx &+ 1), Int(value))
            idx = _int((idx &+ 1))
        }
        return arr
    }
    func merge(_ left: [Int], _ right: [Int]) -> [Int] {
        var result: [Int] = ([] as! [Int])
        var i = 0
        var j = 0
        while ((i < _int(((left).count))) && (j < _int(((right).count)))) {
            if ((_idx(left, i) as? Int ?? 0) < (_idx(right, j) as? Int ?? 0)) {
                result = (_append(result, (_idx(left, i) as? Int ?? 0)) as! [Int])
                i = _int((i &+ 1))
            } else {
                result = (_append(result, (_idx(right, j) as? Int ?? 0)) as! [Int])
                j = _int((j &+ 1))
            }
        }
        while (i < _int(((left).count))) {
            result = (_append(result, (_idx(left, i) as? Int ?? 0)) as! [Int])
            i = _int((i &+ 1))
        }
        while (j < _int(((right).count))) {
            result = (_append(result, (_idx(right, j) as? Int ?? 0)) as! [Int])
            j = _int((j &+ 1))
        }
        return result
    }
    func tim_sort(_ xs: [Int]) -> [Int] {
        let n = _int(((xs).count))
        var runs: [[Int]] = ([] as! [[Int]])
        var sorted_runs: [[Int]] = ([] as! [[Int]])
        var current: [Int] = ([] as! [Int])
        current = (_append(current, (_idx(xs, 0) as? Int ?? 0)) as! [Int])
        var i = 1
        while (i < n) {
            if ((_idx(xs, i) as? Int ?? 0) < (_idx(xs, (i &- 1)) as? Int ?? 0)) {
                runs = (_append(runs, (copy_list((current as! [Int])) as! [Int])) as! [[Int]])
                current = ([] as! [Int])
                current = (_append(current, (_idx(xs, i) as? Int ?? 0)) as! [Int])
            } else {
                current = (_append(current, (_idx(xs, i) as? Int ?? 0)) as! [Int])
            }
            i = _int((i &+ 1))
        }
        runs = (_append(runs, (copy_list((current as! [Int])) as! [Int])) as! [[Int]])
        var r = 0
        while (r < _int(((runs).count))) {
            sorted_runs = (_append(sorted_runs, (insertion_sort((_idx(runs, r) as! [Int])) as! [Int])) as! [[Int]])
            r = _int((r &+ 1))
        }
        var result: [Int] = ([] as! [Int])
        r = 0
        while (r < _int(((sorted_runs).count))) {
            result = (merge((result as! [Int]), (_idx(sorted_runs, r) as! [Int])) as! [Int])
            r = _int((r &+ 1))
        }
        return result
    }
    func list_to_string(_ xs: [Int]) -> String {
        var s = "["
        var k = 0
        while (k < _int(((xs).count))) {
            s = ((s + _p((_idx(xs, k) as? Int ?? 0))) as! String)
            if (k < (_int(((xs).count)) &- 1)) {
                s = ((s + ", ") as! String)
            }
            k = _int((k &+ 1))
        }
        return (s + "]")
    }
    let sample: [Int] = ({
        var _arr: [Int] = []
        _arr = _append(_arr, 5)
        _arr = _append(_arr, 9)
        _arr = _append(_arr, 10)
        _arr = _append(_arr, 3)
        _arr = _append(_arr, -4)
        _arr = _append(_arr, 5)
        _arr = _append(_arr, 178)
        _arr = _append(_arr, 92)
        _arr = _append(_arr, 46)
        _arr = _append(_arr, -18)
        _arr = _append(_arr, 0)
        _arr = _append(_arr, 7)
        return _arr
    }() as! [Int])
    let sorted_sample: [Int] = (tim_sort((sample as! [Int])) as! [Int])
    print(_p(String(describing: list_to_string((sorted_sample as! [Int])))))
    let sample2: [Int] = ({
        var _arr: [Int] = []
        _arr = _append(_arr, 3)
        _arr = _append(_arr, 2)
        _arr = _append(_arr, 1)
        return _arr
    }() as! [Int])
    let sorted_sample2: [Int] = (tim_sort((sample2 as! [Int])) as! [Int])
    print(_p(String(describing: list_to_string((sorted_sample2 as! [Int])))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
