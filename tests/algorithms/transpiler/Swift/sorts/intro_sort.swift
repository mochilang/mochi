// Generated by Mochi transpiler v0.10.63 on 2025-08-11 16:27:00 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func insertion_sort(_ a: [Int], _ start: Int, _ end_: Int) -> [Int] {
        var arr = a
        var i = start
        while (i < end_) {
            let key = (_idx(arr, i) as? Int ?? 0)
            var j = i
            while ((j > start) && ((_idx(arr, (j &- 1)) as? Int ?? 0) > key)) {
                arr = _set(arr, j, (_idx(arr, (j &- 1)) as? Int ?? 0))
                j = _int((j &- 1))
            }
            arr = _set(arr, j, Int(key))
            i = _int((i &+ 1))
        }
        return arr
    }
    func heapify(_ a: [Int], _ index: Int, _ heap_size: Int) -> [Int] {
        var arr = a
        var largest = index
        let left = ((2 &* index) &+ 1)
        let right = ((2 &* index) &+ 2)
        if ((left < heap_size) && ((_idx(arr, left) as? Int ?? 0) > (_idx(arr, largest) as? Int ?? 0))) {
            largest = Int(left)
        }
        if ((right < heap_size) && ((_idx(arr, right) as? Int ?? 0) > (_idx(arr, largest) as? Int ?? 0))) {
            largest = Int(right)
        }
        if (largest != index) {
            let temp = (_idx(arr, index) as? Int ?? 0)
            arr = _set(arr, index, (_idx(arr, largest) as? Int ?? 0))
            arr = _set(arr, largest, Int(temp))
            arr = (heapify((arr as! [Int]), largest, heap_size) as! [Int])
        }
        return arr
    }
    func heap_sort(_ a: [Int]) -> [Int] {
        var arr = a
        let n = _int(((arr).count))
        if (n <= 1) {
            return arr
        }
        var i = (n / 2)
        while true {
            arr = (heapify((arr as! [Int]), i, n) as! [Int])
            if (i == 0) {
                break
            }
            i = _int((i &- 1))
        }
        i = _int((n &- 1))
        while (i > 0) {
            let temp = (_idx(arr, 0) as? Int ?? 0)
            arr = _set(arr, 0, (_idx(arr, i) as? Int ?? 0))
            arr = _set(arr, i, Int(temp))
            arr = (heapify((arr as! [Int]), 0, i) as! [Int])
            i = _int((i &- 1))
        }
        return arr
    }
    func median_of_3(_ arr: [Int], _ first: Int, _ middle: Int, _ last: Int) -> Int {
        let a = (_idx(arr, first) as? Int ?? 0)
        let b = (_idx(arr, middle) as? Int ?? 0)
        let c = (_idx(arr, last) as? Int ?? 0)
        if (((a > b) && (a < c)) || ((a < b) && (a > c))) {
            return a
        } else if (((b > a) && (b < c)) || ((b < a) && (b > c))) {
            return b
        } else {
            return c
        }
        
    }
    func partition(_ arr: [Int], _ low: Int, _ high: Int, _ pivot: Int) -> Int {
        var arr = arr
        var i = low
        var j = high
        while true {
            while ((_idx(arr, i) as? Int ?? 0) < pivot) {
                i = _int((i &+ 1))
            }
            j = _int((j &- 1))
            while (pivot < (_idx(arr, j) as? Int ?? 0)) {
                j = _int((j &- 1))
            }
            if (i >= j) {
                return i
            }
            let temp = (_idx(arr, i) as? Int ?? 0)
            arr = _set(arr, i, (_idx(arr, j) as? Int ?? 0))
            arr = _set(arr, j, Int(temp))
            i = _int((i &+ 1))
        }
    }
    func int_log2(_ n: Int) -> Int {
        var v = n
        var r = 0
        while (v > 1) {
            v = _int((v / 2))
            r = _int((r &+ 1))
        }
        return r
    }
    func intro_sort(_ arr: [Int], _ start: Int, _ end_: Int, _ size_threshold: Int, _ max_depth: Int) -> [Int] {
        var array = arr
        var s = start
        var e = end_
        var depth = max_depth
        while ((e &- s) > size_threshold) {
            if (depth == 0) {
                return (heap_sort((array as! [Int])) as! [Int])
            }
            depth = _int((depth &- 1))
            let pivot = _int(median_of_3((array as! [Int]), s, ((s &+ _int((_int((e &- s)) / 2))) &+ 1), (e &- 1)))
            let p = _int(partition((array as! [Int]), s, e, pivot))
            array = (intro_sort((array as! [Int]), p, e, size_threshold, depth) as! [Int])
            e = Int(p)
        }
        let res: [Int] = (insertion_sort((array as! [Int]), s, e) as! [Int])
        let _ = _int(((res).count))
        return res
    }
    func intro_sort_main(_ arr: [Int]) {
        if (_int(((arr).count)) == 0) {
            print(_p("[" + arr.map{ if let s = $0 as? String { "\"" + s.replacingOccurrences(of: "\"", with: "\\\"") + "\"" } else { _p($0) } }.joined(separator: ", ") + "]"))
            return
        }
        let max_depth = (2 &* _int(int_log2(_int(((arr).count)))))
        let sorted: [Int] = (intro_sort((arr as! [Int]), 0, _int(((arr).count)), 16, max_depth) as! [Int])
        print(_p("[" + sorted.map{ if let s = $0 as? String { "\"" + s.replacingOccurrences(of: "\"", with: "\\\"") + "\"" } else { _p($0) } }.joined(separator: ", ") + "]"))
    }
    let example1: [Int] = ({
        var _arr: [Int] = []
        _arr = _append(_arr, 4)
        _arr = _append(_arr, 2)
        _arr = _append(_arr, 6)
        _arr = _append(_arr, 8)
        _arr = _append(_arr, 1)
        _arr = _append(_arr, 7)
        _arr = _append(_arr, 8)
        _arr = _append(_arr, 22)
        _arr = _append(_arr, 14)
        _arr = _append(_arr, 56)
        _arr = _append(_arr, 27)
        _arr = _append(_arr, 79)
        _arr = _append(_arr, 23)
        _arr = _append(_arr, 45)
        _arr = _append(_arr, 14)
        _arr = _append(_arr, 12)
        return _arr
    }() as! [Int])
    _ = intro_sort_main((example1 as! [Int]))
    let example2: [Int] = ({
        var _arr: [Int] = []
        _arr = _append(_arr, 21)
        _arr = _append(_arr, 15)
        _arr = _append(_arr, 11)
        _arr = _append(_arr, 45)
        _arr = _append(_arr, -2)
        _arr = _append(_arr, -11)
        _arr = _append(_arr, 46)
        return _arr
    }() as! [Int])
    _ = intro_sort_main((example2 as! [Int]))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
