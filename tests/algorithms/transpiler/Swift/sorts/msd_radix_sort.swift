// Generated by Mochi transpiler v0.10.63 on 2025-08-11 17:27:08 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func get_bit_length(_ n: Int) -> Int {
        if (n == 0) {
            return 1
        }
        var length = 0
        var num = n
        while (num > 0) {
            length = _int((length &+ 1))
            num = _int((num / 2))
        }
        return length
    }
    func max_bit_length(_ nums: [Int]) -> Int {
        var i = 0
        var max_len = 0
        while (i < _int(((nums).count))) {
            let l = _int(get_bit_length((_idx(nums, i) as? Int ?? 0)))
            if (l > max_len) {
                max_len = Int(l)
            }
            i = _int((i &+ 1))
        }
        return max_len
    }
    func get_bit(_ num: Int, _ pos: Int) -> Int {
        var n = num
        var i = 0
        while (i < pos) {
            n = _int((n / 2))
            i = _int((i &+ 1))
        }
        return ((n % 2 + 2) % 2)
    }
    func _msd_radix_sort(_ nums: [Int], _ bit_position: Int) -> [Int] {
        if ((bit_position == 0) || (_int(((nums).count)) <= 1)) {
            return nums
        }
        var zeros: [Int] = ([] as! [Int])
        var ones: [Int] = ([] as! [Int])
        var i = 0
        while (i < _int(((nums).count))) {
            let num = (_idx(nums, i) as? Int ?? 0)
            if (_int(get_bit(num, (bit_position &- 1))) == 1) {
                ones = (_append(ones, num) as! [Int])
            } else {
                zeros = (_append(zeros, num) as! [Int])
            }
            i = _int((i &+ 1))
        }
        zeros = (_msd_radix_sort((zeros as! [Int]), (bit_position &- 1)) as! [Int])
        ones = (_msd_radix_sort((ones as! [Int]), (bit_position &- 1)) as! [Int])
        var res: [Int] = zeros
        i = 0
        while (i < _int(((ones).count))) {
            res = (_append(res, (_idx(ones, i) as? Int ?? 0)) as! [Int])
            i = _int((i &+ 1))
        }
        return res
    }
    func msd_radix_sort(_ nums: [Int]) -> [Int] {
        if (_int(((nums).count)) == 0) {
            return ([] as! [Int])
        }
        var i = 0
        while (i < _int(((nums).count))) {
            if ((_idx(nums, i) as? Int ?? 0) < 0) {
                _ = fatalError("All numbers must be positive")
            }
            i = _int((i &+ 1))
        }
        let bits = _int(max_bit_length((nums as! [Int])))
        let result: [Int] = (_msd_radix_sort((nums as! [Int]), bits) as! [Int])
        return result
    }
    func msd_radix_sort_inplace(_ nums: [Int]) -> [Int] {
        return (msd_radix_sort((nums as! [Int])) as! [Int])
    }
    var ex1: [Int] = ({
        var _arr: [Int] = []
        _arr = _append(_arr, 40)
        _arr = _append(_arr, 12)
        _arr = _append(_arr, 1)
        _arr = _append(_arr, 100)
        _arr = _append(_arr, 4)
        return _arr
    }() as! [Int])
    var sorted1: [Int] = (msd_radix_sort((ex1 as! [Int])) as! [Int])
    print(_p("[" + sorted1.map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    var ex2: [Int] = ([] as! [Int])
    var sorted2: [Int] = (msd_radix_sort((ex2 as! [Int])) as! [Int])
    print(_p("[" + sorted2.map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    var ex3: [Int] = ({
        var _arr: [Int] = []
        _arr = _append(_arr, 123)
        _arr = _append(_arr, 345)
        _arr = _append(_arr, 123)
        _arr = _append(_arr, 80)
        return _arr
    }() as! [Int])
    var sorted3: [Int] = (msd_radix_sort((ex3 as! [Int])) as! [Int])
    print(_p("[" + sorted3.map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    var ex4: [Int] = ({
        var _arr: [Int] = []
        _arr = _append(_arr, 1209)
        _arr = _append(_arr, 834598)
        _arr = _append(_arr, 1)
        _arr = _append(_arr, 540402)
        _arr = _append(_arr, 45)
        return _arr
    }() as! [Int])
    var sorted4: [Int] = (msd_radix_sort((ex4 as! [Int])) as! [Int])
    print(_p("[" + sorted4.map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
