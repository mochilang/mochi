// Generated by Mochi transpiler v0.10.63 on 2025-08-11 17:28:24 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
struct Node: Codable {
    var value: Int
    var left: Int
    var right: Int
    init() {
        self.value = 0
        self.left = 0
        self.right = 0
    }
    init(value: Int, left: Int, right: Int) {
        self.value = value
        self.left = left
        self.right = right
    }
}
struct TreeState: Codable {
    var nodes: [Node]
    var root: Int
    init() {
        self.nodes = []
        self.root = 0
    }
    init(nodes: [Node], root: Int) {
        self.nodes = nodes
        self.root = root
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func new_node(_ state: inout TreeState, _ value: Int) -> Int {
        state.nodes = (_append(state.nodes, Node(value: Int(value), left: _int(-1), right: _int(-1))) as! [Node])
        return (_int(((state.nodes).count)) &- 1)
    }
    func insert(_ state: inout TreeState, _ value: Int) {
        if (state.root == _int(-1)) {
            state.root = _int(new_node(&state, value))
            return
        }
        var current = state.root
        var nodes = state.nodes
        while true {
            var node = (_idx(nodes, current) as! Node)
            if (value < node.value) {
                if (node.left == _int(-1)) {
                    let idx = _int(new_node(&state, value))
                    nodes = (state.nodes as! [Node])
                    node.left = Int(idx)
                    nodes = _set(nodes, current, (node as! Node))
                    state.nodes = (nodes as! [Node])
                    return
                }
                current = _int(node.left)
            } else if (value > node.value) {
                if (node.right == _int(-1)) {
                    let idx = _int(new_node(&state, value))
                    nodes = (state.nodes as! [Node])
                    node.right = Int(idx)
                    nodes = _set(nodes, current, (node as! Node))
                    state.nodes = (nodes as! [Node])
                    return
                }
                current = _int(node.right)
            } else {
                return
            }
            
        }
    }
    func inorder(_ state: TreeState, _ idx: Int) -> [Int] {
        if (idx == _int(-1)) {
            return ([] as! [Int])
        }
        let node = (_idx(state.nodes, idx) as! Node)
        var result = (inorder((state as! TreeState), node.left) as! [Int])
        result = (_append(result, node.value) as! [Int])
        let right_part: [Int] = (inorder((state as! TreeState), node.right) as! [Int])
        var i = 0
        while (i < _int(((right_part).count))) {
            result = (_append(result, (_idx(right_part, i) as? Int ?? 0)) as! [Int])
            i = _int((i &+ 1))
        }
        return result
    }
    func tree_sort(_ arr: [Int]) -> [Int] {
        var state = TreeState(nodes: ([] as! [Node]), root: _int(-1))
        var i = 0
        while (i < _int(((arr).count))) {
            _ = insert(&state, (_idx(arr, i) as? Int ?? 0))
            i = _int((i &+ 1))
        }
        if (state.root == _int(-1)) {
            return ([] as! [Int])
        }
        return (inorder((state as! TreeState), state.root) as! [Int])
    }
    print(_p("[" + (tree_sort(([] as! [Int])) as! [Int]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    print(_p("[" + (tree_sort(({
        var _arr: [Int] = []
        _arr = _append(_arr, 1)
        return _arr
    }() as! [Int])) as! [Int]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    print(_p("[" + (tree_sort(({
        var _arr: [Int] = []
        _arr = _append(_arr, 1)
        _arr = _append(_arr, 2)
        return _arr
    }() as! [Int])) as! [Int]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    print(_p("[" + (tree_sort(({
        var _arr: [Int] = []
        _arr = _append(_arr, 5)
        _arr = _append(_arr, 2)
        _arr = _append(_arr, 7)
        return _arr
    }() as! [Int])) as! [Int]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    print(_p("[" + (tree_sort(({
        var _arr: [Int] = []
        _arr = _append(_arr, 5)
        _arr = _append(_arr, -4)
        _arr = _append(_arr, 9)
        _arr = _append(_arr, 2)
        _arr = _append(_arr, 7)
        return _arr
    }() as! [Int])) as! [Int]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    print(_p("[" + (tree_sort(({
        var _arr: [Int] = []
        _arr = _append(_arr, 5)
        _arr = _append(_arr, 6)
        _arr = _append(_arr, 1)
        _arr = _append(_arr, -1)
        _arr = _append(_arr, 4)
        _arr = _append(_arr, 37)
        _arr = _append(_arr, 2)
        _arr = _append(_arr, 7)
        return _arr
    }() as! [Int])) as! [Int]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
