// Generated by Mochi transpiler v0.10.63 on 2025-08-11 17:27:27 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _concat<T>(_ a: [T], _ b: [T]) -> [T] {
    var out = a
    out.append(contentsOf: b)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func quick_sort_3partition(_ arr: [Int], _ left: Int, _ right: Int) -> [Int] {
        var arr = arr
        if (right <= left) {
            return arr
        }
        var a = left
        var i = left
        var b = right
        let pivot = (_idx(arr, left) as? Int ?? 0)
        while (i <= b) {
            if ((_idx(arr, i) as? Int ?? 0) < pivot) {
                let temp = (_idx(arr, a) as? Int ?? 0)
                arr = _set(arr, a, (_idx(arr, i) as? Int ?? 0))
                arr = _set(arr, i, Int(temp))
                a = _int((a &+ 1))
                i = _int((i &+ 1))
            } else if ((_idx(arr, i) as? Int ?? 0) > pivot) {
                let temp = (_idx(arr, b) as? Int ?? 0)
                arr = _set(arr, b, (_idx(arr, i) as? Int ?? 0))
                arr = _set(arr, i, Int(temp))
                b = _int((b &- 1))
            } else {
                i = _int((i &+ 1))
            }
            
        }
        arr = (quick_sort_3partition((arr as! [Int]), left, (a &- 1)) as! [Int])
        arr = (quick_sort_3partition((arr as! [Int]), (b &+ 1), right) as! [Int])
        return arr
    }
    func quick_sort_lomuto_partition(_ arr: [Int], _ left: Int, _ right: Int) -> [Int] {
        var arr = arr
        if (left < right) {
            let pivot_index = _int(lomuto_partition((arr as! [Int]), left, right))
            arr = (quick_sort_lomuto_partition((arr as! [Int]), left, (pivot_index &- 1)) as! [Int])
            arr = (quick_sort_lomuto_partition((arr as! [Int]), (pivot_index &+ 1), right) as! [Int])
        }
        return arr
    }
    func lomuto_partition(_ arr: [Int], _ left: Int, _ right: Int) -> Int {
        var arr = arr
        let pivot = (_idx(arr, right) as? Int ?? 0)
        var store_index = left
        var i = left
        while (i < right) {
            if ((_idx(arr, i) as? Int ?? 0) < pivot) {
                let temp = (_idx(arr, store_index) as? Int ?? 0)
                arr = _set(arr, store_index, (_idx(arr, i) as? Int ?? 0))
                arr = _set(arr, i, Int(temp))
                store_index = _int((store_index &+ 1))
            }
            i = _int((i &+ 1))
        }
        let temp = (_idx(arr, right) as? Int ?? 0)
        arr = _set(arr, right, (_idx(arr, store_index) as? Int ?? 0))
        arr = _set(arr, store_index, Int(temp))
        return store_index
    }
    func three_way_radix_quicksort(_ arr: [Int]) -> [Int] {
        if (_int(((arr).count)) <= 1) {
            return arr
        }
        let pivot = (_idx(arr, 0) as? Int ?? 0)
        var less: [Int] = ([] as! [Int])
        var equal: [Int] = ([] as! [Int])
        var greater: [Int] = ([] as! [Int])
        var i = 0
        while (i < _int(((arr).count))) {
            let val = (_idx(arr, i) as? Int ?? 0)
            if (val < pivot) {
                less = (_append(less, val) as! [Int])
            } else if (val > pivot) {
                greater = (_append(greater, val) as! [Int])
            } else {
                equal = (_append(equal, val) as! [Int])
            }
            
            i = _int((i &+ 1))
        }
        let sorted_less: [Int] = (three_way_radix_quicksort((less as! [Int])) as! [Int])
        let sorted_greater: [Int] = (three_way_radix_quicksort((greater as! [Int])) as! [Int])
        var result = (_concat(sorted_less, equal) as! [Any?])
        result = (_concat(result, sorted_greater) as! [Any?])
        return (result as! [Int])
    }
    var array1 = ({
        var _arr: [Int] = []
        _arr = _append(_arr, 5)
        _arr = _append(_arr, -1)
        _arr = _append(_arr, -1)
        _arr = _append(_arr, 5)
        _arr = _append(_arr, 5)
        _arr = _append(_arr, 24)
        _arr = _append(_arr, 0)
        return _arr
    }() as! [Int])
    array1 = (quick_sort_3partition((array1 as! [Int]), 0, (_int(((array1).count)) &- 1)) as! [Int])
    print(_p("[" + array1.map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    var array2 = ({
        var _arr: [Int] = []
        _arr = _append(_arr, 9)
        _arr = _append(_arr, 0)
        _arr = _append(_arr, 2)
        _arr = _append(_arr, 6)
        return _arr
    }() as! [Int])
    array2 = (quick_sort_3partition((array2 as! [Int]), 0, (_int(((array2).count)) &- 1)) as! [Int])
    print(_p("[" + array2.map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    var array3: [Int] = ([] as! [Int])
    array3 = (quick_sort_3partition((array3 as! [Int]), 0, (_int(((array3).count)) &- 1)) as! [Int])
    print(_p("[" + array3.map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    var nums1 = ({
        var _arr: [Int] = []
        _arr = _append(_arr, 0)
        _arr = _append(_arr, 5)
        _arr = _append(_arr, 3)
        _arr = _append(_arr, 1)
        _arr = _append(_arr, 2)
        return _arr
    }() as! [Int])
    nums1 = (quick_sort_lomuto_partition((nums1 as! [Int]), 0, (_int(((nums1).count)) &- 1)) as! [Int])
    print(_p("[" + nums1.map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    var nums2: [Int] = ([] as! [Int])
    nums2 = (quick_sort_lomuto_partition((nums2 as! [Int]), 0, (_int(((nums2).count)) &- 1)) as! [Int])
    print(_p("[" + nums2.map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    var nums3 = ({
        var _arr: [Int] = []
        _arr = _append(_arr, -2)
        _arr = _append(_arr, 5)
        _arr = _append(_arr, 0)
        _arr = _append(_arr, -4)
        return _arr
    }() as! [Int])
    nums3 = (quick_sort_lomuto_partition((nums3 as! [Int]), 0, (_int(((nums3).count)) &- 1)) as! [Int])
    print(_p("[" + nums3.map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    print(_p("[" + (three_way_radix_quicksort(([] as! [Int])) as! [Int]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    print(_p("[" + (three_way_radix_quicksort(({
        var _arr: [Int] = []
        _arr = _append(_arr, 1)
        return _arr
    }() as! [Int])) as! [Int]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    print(_p("[" + (three_way_radix_quicksort(({
        var _arr: [Int] = []
        _arr = _append(_arr, -5)
        _arr = _append(_arr, -2)
        _arr = _append(_arr, 1)
        _arr = _append(_arr, -2)
        _arr = _append(_arr, 0)
        _arr = _append(_arr, 1)
        return _arr
    }() as! [Int])) as! [Int]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    print(_p("[" + (three_way_radix_quicksort(({
        var _arr: [Int] = []
        _arr = _append(_arr, 1)
        _arr = _append(_arr, 2)
        _arr = _append(_arr, 5)
        _arr = _append(_arr, 1)
        _arr = _append(_arr, 2)
        _arr = _append(_arr, 0)
        _arr = _append(_arr, 0)
        _arr = _append(_arr, 5)
        _arr = _append(_arr, 2)
        _arr = _append(_arr, -1)
        return _arr
    }() as! [Int])) as! [Int]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
