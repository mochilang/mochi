// Generated by Mochi transpiler v0.10.59 on 2025-08-07 08:55:10 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
struct Vec: Codable {
    var x: Double
    var y: Double
    init() {
        self.x = 0
        self.y = 0
    }
    init(x: Double, y: Double) {
        self.x = x
        self.y = y
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let PI: Double = 3.141592653589793
    let TWO_PI: Double = 6.283185307179586
    func _mod(_ x: Double, _ m: Double) -> Double {
        return (x - (Double(_int((x / m))) * m))
    }
    func sin(_ x: Double) -> Double {
        let y = (Double(_mod(Double((x + PI)), Double(TWO_PI))) - PI)
        let y2 = (y * y)
        let y3 = (y2 * y)
        let y5 = (y3 * y2)
        let y7 = (y5 * y2)
        return (((y - (y3 / 6.0)) + (y5 / 120.0)) - (y7 / 5040.0))
    }
    func cos(_ x: Double) -> Double {
        let y = (Double(_mod(Double((x + PI)), Double(TWO_PI))) - PI)
        let y2 = (y * y)
        let y4 = (y2 * y2)
        let y6 = (y4 * y2)
        return (((1.0 - (y2 / 2.0)) + (y4 / 24.0)) - (y6 / 720.0))
    }
    func rotate(_ v: Vec, _ angle_deg: Double) -> Vec {
        let theta = ((angle_deg * PI) / 180.0)
        let c = Double(cos(Double(theta)))
        let s = Double(sin(Double(theta)))
        return Vec(x: ((v.x * c) - (v.y * s)), y: ((v.x * s) + (v.y * c)))
    }
    func iteration_step(_ vectors: [Vec]) -> [Vec] {
        var new_vectors: [Vec] = ([] as! [Vec])
        var i: Int = 0
        while (i < (Int(((vectors).count)) &- 1)) {
            let start = (vectors[i] as! Vec)
            let end = (vectors[(i &+ 1)] as! Vec)
            new_vectors = (_append(new_vectors, start) as! [Vec])
            let dx = (end.x - start.x)
            let dy = (end.y - start.y)
            let one_third = Vec(x: (start.x + (dx / 3.0)), y: (start.y + (dy / 3.0)))
            let mid = rotate((Vec(x: (dx / 3.0), y: (dy / 3.0)) as! Vec), 60.0)
            let peak = Vec(x: (one_third.x + mid.x), y: (one_third.y + mid.y))
            let two_third = Vec(x: (start.x + ((dx * 2.0) / 3.0)), y: (start.y + ((dy * 2.0) / 3.0)))
            new_vectors = (_append(new_vectors, one_third) as! [Vec])
            new_vectors = (_append(new_vectors, peak) as! [Vec])
            new_vectors = (_append(new_vectors, two_third) as! [Vec])
            i = Int((i &+ 1))
        }
        new_vectors = (_append(new_vectors, (vectors[(Int(((vectors).count)) &- 1)] as! Vec)) as! [Vec])
        return new_vectors
    }
    func iterate(_ initial: [Vec], _ steps: Int) -> [Vec] {
        var vectors: [Vec] = initial
        var i: Int = 0
        while (i < steps) {
            vectors = (iteration_step((vectors as! [Vec])) as! [Vec])
            i = Int((i &+ 1))
        }
        return vectors
    }
    func vec_to_string(_ v: Vec) -> String {
        return (((("(" + _p(v.x)) + ", ") + _p(v.y)) + ")")
    }
    func vec_list_to_string(_ lst: [Vec]) -> String {
        var res: String = "["
        var i: Int = 0
        while (i < Int(((lst).count))) {
            res = ((res + String(describing: vec_to_string((lst[i] as! Vec)))) as! String)
            if (i < (Int(((lst).count)) &- 1)) {
                res = ((res + ", ") as! String)
            }
            i = Int((i &+ 1))
        }
        res = ((res + "]") as! String)
        return res
    }
    let VECTOR_1 = Vec(x: 0.0, y: 0.0)
    let VECTOR_2 = Vec(x: 0.5, y: 0.8660254)
    let VECTOR_3 = Vec(x: 1.0, y: 0.0)
    let INITIAL_VECTORS: [Vec] = ([VECTOR_1, VECTOR_2, VECTOR_3, VECTOR_1] as! [Vec])
    let example: [Vec] = (iterate(([VECTOR_1, VECTOR_3] as! [Vec]), 1) as! [Vec])
    print(_p(String(describing: vec_list_to_string((example as! [Vec])))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
