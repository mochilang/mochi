// Generated by Mochi transpiler v0.10.59 on 2025-08-07 08:55:14 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
struct Point: Codable {
    var x: Int
    var y: Int
    init() {
        self.x = 0
        self.y = 0
    }
    init(x: Int, y: Int) {
        self.x = x
        self.y = y
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func get_mid(_ p1: Point, _ p2: Point) -> Point {
        return Point(x: (Int((p1.x &+ p2.x)) / 2), y: (Int((p1.y &+ p2.y)) / 2))
    }
    func point_to_string(_ p: Point) -> String {
        return (((("(" + _p(p.x)) + ",") + _p(p.y)) + ")")
    }
    func triangle(_ v1: Point, _ v2: Point, _ v3: Point, _ depth: Int) {
        print(_p(((((String(describing: point_to_string((v1 as! Point))) + " ") + String(describing: point_to_string((v2 as! Point)))) + " ") + String(describing: point_to_string((v3 as! Point))))))
        if (depth == 0) {
            return
        }
        _ = triangle((v1 as! Point), (get_mid((v1 as! Point), (v2 as! Point)) as! Point), (get_mid((v1 as! Point), (v3 as! Point)) as! Point), (depth &- 1))
        _ = triangle((v2 as! Point), (get_mid((v1 as! Point), (v2 as! Point)) as! Point), (get_mid((v2 as! Point), (v3 as! Point)) as! Point), (depth &- 1))
        _ = triangle((v3 as! Point), (get_mid((v3 as! Point), (v2 as! Point)) as! Point), (get_mid((v1 as! Point), (v3 as! Point)) as! Point), (depth &- 1))
    }
    _ = triangle((Point(x: -175, y: -125) as! Point), (Point(x: 0, y: 175) as! Point), (Point(x: 175, y: -125) as! Point), 2)
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
