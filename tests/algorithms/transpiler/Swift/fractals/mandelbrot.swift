// Generated by Mochi transpiler v0.10.59 on 2025-08-07 08:55:12 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
struct RGB: Codable {
    var r: Int
    var g: Int
    var b: Int
    init() {
        self.r = 0
        self.g = 0
        self.b = 0
    }
    init(r: Int, g: Int, b: Int) {
        self.r = r
        self.g = g
        self.b = b
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func round_int(_ x: Double) -> Int {
        return Int((x + 0.5))
    }
    func hsv_to_rgb(_ h: Double, _ s: Double, _ v: Double) -> RGB {
        let i = Int((h * 6.0))
        let f = ((h * 6.0) - Double(i))
        let p = (v * Double((1.0 - s)))
        let q = (v * Double((1.0 - (f * s))))
        let t = (v * Double((1.0 - (Double((1.0 - f)) * s))))
        let mod = ((i % 6 + 6) % 6)
        var r: Double = 0.0
        var g: Double = 0.0
        var b: Double = 0.0
        if (mod == 0) {
            r = Double(v)
            g = Double(t)
            b = Double(p)
        } else if (mod == 1) {
            r = Double(q)
            g = Double(v)
            b = Double(p)
        } else if (mod == 2) {
            r = Double(p)
            g = Double(v)
            b = Double(t)
        } else if (mod == 3) {
            r = Double(p)
            g = Double(q)
            b = Double(v)
        } else if (mod == 4) {
            r = Double(t)
            g = Double(p)
            b = Double(v)
        } else {
            r = Double(v)
            g = Double(p)
            b = Double(q)
        }
        
        
        
        
        return RGB(r: Int(round_int(Double((r * 255.0)))), g: Int(round_int(Double((g * 255.0)))), b: Int(round_int(Double((b * 255.0)))))
    }
    func get_distance(_ x: Double, _ y: Double, _ max_step: Int) -> Double {
        var a: Double = x
        var b: Double = y
        var step: Int = -1
        while (step < (max_step &- 1)) {
            step = Int((step &+ 1))
            let a_new = (((a * a) - (b * b)) + x)
            b = Double((((2.0 * a) * b) + y))
            a = Double(a_new)
            if (((a * a) + (b * b)) > 4.0) {
                break
            }
        }
        return (Double(step) / Double((max_step &- 1)))
    }
    func get_black_and_white_rgb(_ distance: Double) -> RGB {
        if (distance == 1.0) {
            return RGB(r: 0, g: 0, b: 0)
        } else {
            return RGB(r: 255, g: 255, b: 255)
        }
    }
    func get_color_coded_rgb(_ distance: Double) -> RGB {
        if (distance == 1.0) {
            return RGB(r: 0, g: 0, b: 0)
        } else {
            return hsv_to_rgb(Double(distance), 1.0, 1.0)
        }
    }
    func get_image(_ image_width: Int, _ image_height: Int, _ figure_center_x: Double, _ figure_center_y: Double, _ figure_width: Double, _ max_step: Int, _ use_distance_color_coding: Bool) -> [[RGB]] {
        var img: [[RGB]] = ([] as! [[RGB]])
        let figure_height = ((figure_width / Double(image_width)) * Double(image_height))
        var image_y: Int = 0
        while (image_y < image_height) {
            var row: [RGB] = ([] as! [RGB])
            var image_x: Int = 0
            while (image_x < image_width) {
                let fx = (figure_center_x + (Double(((Double(image_x) / Double(image_width)) - 0.5)) * figure_width))
                let fy = (figure_center_y + (Double(((Double(image_y) / Double(image_height)) - 0.5)) * figure_height))
                let distance = Double(get_distance(Double(fx), Double(fy), max_step))
                var rgb: RGB = RGB()
                if use_distance_color_coding {
                    rgb = (get_color_coded_rgb(Double(distance)) as! RGB)
                } else {
                    rgb = (get_black_and_white_rgb(Double(distance)) as! RGB)
                }
                row = (_append(row, rgb) as! [RGB])
                image_x = Int((image_x &+ 1))
            }
            img = (_append(img, row) as! [[RGB]])
            image_y = Int((image_y &+ 1))
        }
        return img
    }
    func rgb_to_string(_ c: RGB) -> String {
        return (((((("(" + _p(c.r)) + ", ") + _p(c.g)) + ", ") + _p(c.b)) + ")")
    }
    let img1: [[RGB]] = (get_image(10, 10, Double(-0.6), 0.0, 3.2, 50, true) as! [[RGB]])
    print(_p(String(describing: rgb_to_string((img1[0][0] as! RGB)))))
    let img2: [[RGB]] = (get_image(10, 10, Double(-0.6), 0.0, 3.2, 50, false) as! [[RGB]])
    print(_p(String(describing: rgb_to_string((img2[0][0] as! RGB)))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
