// Generated by Mochi transpiler v0.10.59 on 2025-08-07 08:55:08 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
struct Complex: Codable {
    var re: Double
    var im: Double
    init() {
        self.re = 0
        self.im = 0
    }
    init(re: Double, im: Double) {
        self.re = re
        self.im = im
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func complex_add(_ a: Complex, _ b: Complex) -> Complex {
        return Complex(re: (a.re + b.re), im: (a.im + b.im))
    }
    func complex_mul(_ a: Complex, _ b: Complex) -> Complex {
        let real = ((a.re * b.re) - (a.im * b.im))
        let imag = ((a.re * b.im) + (a.im * b.re))
        return Complex(re: real, im: imag)
    }
    func sqrtApprox(_ x: Double) -> Double {
        var guess: Double = (x / 2.0)
        var i: Int = 0
        while (i < 20) {
            guess = Double((Double((guess + (x / guess))) / 2.0))
            i = Int((i &+ 1))
        }
        return guess
    }
    func complex_abs(_ a: Complex) -> Double {
        return Double(sqrtApprox(Double(((a.re * a.re) + (a.im * a.im)))))
    }
    func sin_taylor(_ x: Double) -> Double {
        var term: Double = x
        var sum: Double = x
        var i: Int = 1
        while (i < 10) {
            let k1 = (2.0 * Double(i))
            let k2 = ((2.0 * Double(i)) + 1.0)
            term = Double((((-term * x) * x) / Double((k1 * k2))))
            sum = Double((sum + term))
            i = Int((i &+ 1))
        }
        return sum
    }
    func cos_taylor(_ x: Double) -> Double {
        var term: Double = 1.0
        var sum: Double = 1.0
        var i: Int = 1
        while (i < 10) {
            let k1 = ((2.0 * Double(i)) - 1.0)
            let k2 = (2.0 * Double(i))
            term = Double((((-term * x) * x) / Double((k1 * k2))))
            sum = Double((sum + term))
            i = Int((i &+ 1))
        }
        return sum
    }
    func exp_taylor(_ x: Double) -> Double {
        var term: Double = 1.0
        var sum: Double = 1.0
        var i: Double = 1.0
        while (i < 20.0) {
            term = Double(((term * x) / i))
            sum = Double((sum + term))
            i = Double((i + 1.0))
        }
        return sum
    }
    func complex_exp(_ z: Complex) -> Complex {
        let e = Double(exp_taylor(Double(z.re)))
        return Complex(re: (e * Double(cos_taylor(Double(z.im)))), im: (e * Double(sin_taylor(Double(z.im)))))
    }
    func eval_quadratic(_ c: Complex, _ z: Complex) -> Complex {
        return complex_add((complex_mul((z as! Complex), (z as! Complex)) as! Complex), (c as! Complex))
    }
    func eval_exponential(_ c: Complex, _ z: Complex) -> Complex {
        return complex_add((complex_exp((z as! Complex)) as! Complex), (c as! Complex))
    }
    func iterate_function(_ eval_function: @escaping (Complex, Complex) -> Complex, _ c: Complex, _ nb_iterations: Int, _ z0: Complex, _ infinity: Double) -> Complex {
        var z_n: Complex = z0
        var i: Int = 0
        while (i < nb_iterations) {
            z_n = (eval_function((c as! Complex), (z_n as! Complex)) as! Complex)
            if (Double(complex_abs((z_n as! Complex))) > infinity) {
                return z_n
            }
            i = Int((i &+ 1))
        }
        return z_n
    }
    func prepare_grid(_ window_size: Double, _ nb_pixels: Int) -> [[Complex]] {
        var grid: [[Complex]] = ([] as! [[Complex]])
        var i: Int = 0
        while (i < nb_pixels) {
            var row: [Complex] = ([] as! [Complex])
            var j: Int = 0
            while (j < nb_pixels) {
                let real = (-window_size + (((2.0 * window_size) * Double(i)) / Double((nb_pixels &- 1))))
                let imag = (-window_size + (((2.0 * window_size) * Double(j)) / Double((nb_pixels &- 1))))
                row = (_append(row, Complex(re: real, im: imag)) as! [Complex])
                j = Int((j &+ 1))
            }
            grid = (_append(grid, row) as! [[Complex]])
            i = Int((i &+ 1))
        }
        return grid
    }
    func julia_demo() -> Void {
        let grid: [[Complex]] = (prepare_grid(1.0, 5) as! [[Complex]])
        let c_poly = Complex(re: -0.4, im: 0.6)
        let c_exp = Complex(re: -2.0, im: 0.0)
        var poly_result: [[Int]] = ([] as! [[Int]])
        var exp_result: [[Int]] = ([] as! [[Int]])
        var y: Int = 0
        while (y < Int(((grid).count))) {
            var row_poly: [Int] = ([] as! [Int])
            var row_exp: [Int] = ([] as! [Int])
            var x: Int = 0
            while (x < Int((((grid[y] as! [Complex])).count))) {
                let z0 = (grid[y][x] as! Complex)
                let z_poly = iterate_function((eval_quadratic as! (Complex, Complex) -> Complex), (c_poly as! Complex), 20, (z0 as! Complex), 4.0)
                let z_exp = iterate_function((eval_exponential as! (Complex, Complex) -> Complex), (c_exp as! Complex), 10, (z0 as! Complex), 10000000000.0)
                row_poly = (_append(row_poly, Int(((Double(complex_abs((z_poly as! Complex))) < 2.0) ? 1 : 0))) as! [Int])
                row_exp = (_append(row_exp, Int(((Double(complex_abs((z_exp as! Complex))) < 10000.0) ? 1 : 0))) as! [Int])
                x = Int((x &+ 1))
            }
            poly_result = (_append(poly_result, row_poly) as! [[Int]])
            exp_result = (_append(exp_result, row_exp) as! [[Int]])
            y = Int((y &+ 1))
        }
        print(_p("[" + poly_result.map{ if let s = $0 as? String { "\"" + s.replacingOccurrences(of: "\"", with: "\\\"") + "\"" } else { _p($0) } }.joined(separator: ", ") + "]"))
        print(_p("[" + exp_result.map{ if let s = $0 as? String { "\"" + s.replacingOccurrences(of: "\"", with: "\\\"") + "\"" } else { _p($0) } }.joined(separator: ", ") + "]"))
    }
    _ = julia_demo()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
