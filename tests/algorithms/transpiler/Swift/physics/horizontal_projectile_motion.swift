// Generated by Mochi transpiler v0.10.69 on 2025-08-19 16:46:32 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.isNaN || d.isInfinite {
                return String(d)
            }
            if d.rounded(.towardZero) == d {
                // avoid overflow when converting to Int64
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _num(_ v: Any) -> Double {
    if let d = v as? Double { return d }
    if let i = v as? Int { return Double(i) }
    if let i = v as? Int64 { return Double(i) }
    return 0
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let PI: Double = 3.1415926535897931
    let TWO_PI: Double = 6.2831853071795862
    let g: Double = 9.8066499999999994
    func _mod(_ x: Double, _ m: Double) -> Double {
        return (x - (_num(_int((x / m))) * m))
    }
    func sin(_ x: Double) -> Double {
        let y = (_num(_mod(_num((x + PI)), _num(TWO_PI))) - PI)
        let y2 = (y * y)
        let y3 = (y2 * y)
        let y5 = (y3 * y2)
        let y7 = (y5 * y2)
        return (((y - (y3 / 6.0)) + (y5 / 120.0)) - (y7 / 5040.0))
    }
    func deg_to_rad(_ deg: Double) -> Double {
        return ((deg * PI) / 180.0)
    }
    func floor(_ x: Double) -> Double {
        var i = Int(x)
        if ((_num(i) > x)) {
            i = _int((i &- 1))
        }
        return _num(i)
    }
    func pow10(_ n: Int) -> Double {
        var result = 1.0
        var i = 0
        while (i < n) {
            result = _num((result * 10.0))
            i = _int((i &+ 1))
        }
        return result
    }
    func round(_ x: Double, _ n: Int) -> Double {
        let m = _num(pow10(n))
        let y = _num(floor(_num(((x * m) + 0.5))))
        return (y / m)
    }
    func check_args(_ init_velocity: Double, _ angle: Double) {
        if (((angle > 90.0) || (angle < 1.0))) {
            _ = fatalError("Invalid angle. Range is 1-90 degrees.")
        }
        if ((init_velocity < 0.0)) {
            _ = fatalError("Invalid velocity. Should be a positive number.")
        }
    }
    func horizontal_distance(_ init_velocity: Double, _ angle: Double) -> Double {
        _ = check_args(_num(init_velocity), _num(angle))
        let radians = _num(deg_to_rad(_num((2.0 * angle))))
        return _num(round(_num((_num(((init_velocity * init_velocity) * _num(sin(_num(radians))))) / g)), 2))
    }
    func max_height(_ init_velocity: Double, _ angle: Double) -> Double {
        _ = check_args(_num(init_velocity), _num(angle))
        let radians = _num(deg_to_rad(_num(angle)))
        let s = _num(sin(_num(radians)))
        return _num(round(_num((_num((((init_velocity * init_velocity) * s) * s)) / _num((2.0 * g)))), 2))
    }
    func total_time(_ init_velocity: Double, _ angle: Double) -> Double {
        _ = check_args(_num(init_velocity), _num(angle))
        let radians = _num(deg_to_rad(_num(angle)))
        return _num(round(_num((_num(((2.0 * init_velocity) * _num(sin(_num(radians))))) / g)), 2))
    }
    let v0 = 25.0
    let angle = 20.0
    print(_p(_num(horizontal_distance(_num(v0), _num(angle)))))
    print(_p(_num(max_height(_num(v0), _num(angle)))))
    print(_p(_num(total_time(_num(v0), _num(angle)))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
