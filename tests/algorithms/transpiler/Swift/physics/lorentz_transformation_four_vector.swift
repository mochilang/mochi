// Generated by Mochi transpiler v0.10.69 on 2025-08-19 16:46:43 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.isNaN || d.isInfinite {
                return String(d)
            }
            if d.rounded(.towardZero) == d {
                // avoid overflow when converting to Int64
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _num(_ v: Any) -> Double {
    if let d = v as? Double { return d }
    if let i = v as? Int { return Double(i) }
    if let i = v as? Int64 { return Double(i) }
    return 0
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first!
}
func _idx<K: Hashable, V>(_ m: [K: V], _ k: K) -> V? {
    return m[k]
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let c = 299792458.0
    func sqrtApprox(_ x: Double) -> Double {
        if ((x <= 0.0)) {
            return 0.0
        }
        var guess = (x / 2.0)
        var i = 0
        while (i < 20) {
            guess = _num((_num((guess + (x / guess))) / 2.0))
            i = _int((i &+ 1))
        }
        return guess
    }
    func beta(_ velocity: Double) -> Double {
        if ((velocity > c)) {
            _ = fatalError("Speed must not exceed light speed 299,792,458 [m/s]!")
        }
        if ((velocity < 1.0)) {
            _ = fatalError("Speed must be greater than or equal to 1!")
        }
        return (velocity / c)
    }
    func gamma(_ velocity: Double) -> Double {
        let b = _num(beta(_num(velocity)))
        return (1.0 / _num(sqrtApprox(_num((1.0 - (b * b))))))
    }
    func transformation_matrix(_ velocity: Double) -> [[Double]] {
        let g = _num(gamma(_num(velocity)))
        let b = _num(beta(_num(velocity)))
        return ({
            var _arr: [[Double]] = []
            _arr = _append(_arr, ({
                var _arr: [Double] = []
                _arr = _append(_arr, g)
                _arr = _append(_arr, (-g * b))
                _arr = _append(_arr, 0.0)
                _arr = _append(_arr, 0.0)
                return _arr
            }() as! [Double]))
            _arr = _append(_arr, ({
                var _arr: [Double] = []
                _arr = _append(_arr, (-g * b))
                _arr = _append(_arr, g)
                _arr = _append(_arr, 0.0)
                _arr = _append(_arr, 0.0)
                return _arr
            }() as! [Double]))
            _arr = _append(_arr, ({
                var _arr: [Double] = []
                _arr = _append(_arr, 0.0)
                _arr = _append(_arr, 0.0)
                _arr = _append(_arr, 1.0)
                _arr = _append(_arr, 0.0)
                return _arr
            }() as! [Double]))
            _arr = _append(_arr, ({
                var _arr: [Double] = []
                _arr = _append(_arr, 0.0)
                _arr = _append(_arr, 0.0)
                _arr = _append(_arr, 0.0)
                _arr = _append(_arr, 1.0)
                return _arr
            }() as! [Double]))
            return _arr
        }() as! [[Double]])
    }
    func mat_vec_mul(_ mat: [[Double]], _ vec: [Double]) -> [Double] {
        var res: [Double] = ([] as! [Double])
        var i = 0
        while (i < 4) {
            let row: [Double] = (_idx(mat, i) as! [Double])
            let value = ((((_num(_idx(row, 0)) * _num(_idx(vec, 0))) + (_num(_idx(row, 1)) * _num(_idx(vec, 1)))) + (_num(_idx(row, 2)) * _num(_idx(vec, 2)))) + (_num(_idx(row, 3)) * _num(_idx(vec, 3))))
            res = ((res + ({
                var _arr: [Double] = []
                _arr = _append(_arr, value)
                return _arr
            }() as! [Double])) as! [Double])
            i = _int((i &+ 1))
        }
        return res
    }
    func transform(_ velocity: Double, _ event: [Double]) -> [Double] {
        let g = _num(gamma(_num(velocity)))
        let b = _num(beta(_num(velocity)))
        let ct = (_num(_idx(event, 0)) * c)
        let x = _num(_idx(event, 1))
        return ({
            var _arr: [Double] = []
            _arr = _append(_arr, ((g * ct) - ((g * b) * x)))
            _arr = _append(_arr, (((-g * b) * ct) + (g * x)))
            _arr = _append(_arr, _num(_idx(event, 2)))
            _arr = _append(_arr, _num(_idx(event, 3)))
            return _arr
        }() as! [Double])
    }
    print(_p(_p(_num(beta(_num(c))))))
    print(_p(_p(_num(beta(199792458.0)))))
    print(_p(_p(_num(beta(100000.0)))))
    print(_p(_p(_num(gamma(4.0)))))
    print(_p(_p(_num(gamma(100000.0)))))
    print(_p(_p(_num(gamma(30000000.0)))))
    print(_p("[" + (transformation_matrix(29979245.0) as! [[Double]]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    let v: [Double] = (transform(29979245.0, ({
        var _arr: [Double] = []
        _arr = _append(_arr, 1.0)
        _arr = _append(_arr, 2.0)
        _arr = _append(_arr, 3.0)
        _arr = _append(_arr, 4.0)
        return _arr
    }() as! [Double])) as! [Double])
    print(_p("[" + v.map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
