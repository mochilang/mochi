// Generated by Mochi transpiler v0.10.64 on 2025-08-12 10:13:45 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let PI: Double = 3.141592653589793
    let REDUCED_PLANCK_CONSTANT: Double = 0.0000000000000000000000000000000001054571817
    let SPEED_OF_LIGHT: Double = 300000000.0
    func sqrtApprox(_ x: Double) -> Double {
        if (x <= 0.0) {
            return 0.0
        }
        var guess = x
        var i = 0
        while (i < 100) {
            guess = Double((Double((guess + (x / guess))) / 2.0))
            i = _int((i &+ 1))
        }
        return guess
    }
    func casimir_force(_ force: Double, _ area: Double, _ distance: Double) -> [String: Double] {
        var zero_count = 0
        if (force == 0.0) {
            zero_count = _int((zero_count &+ 1))
        }
        if (area == 0.0) {
            zero_count = _int((zero_count &+ 1))
        }
        if (distance == 0.0) {
            zero_count = _int((zero_count &+ 1))
        }
        if (zero_count != 1) {
            _ = fatalError("One and only one argument must be 0")
        }
        if (force < 0.0) {
            _ = fatalError("Magnitude of force can not be negative")
        }
        if (distance < 0.0) {
            _ = fatalError("Distance can not be negative")
        }
        if (area < 0.0) {
            _ = fatalError("Area can not be negative")
        }
        if (force == 0.0) {
            let num = ((((REDUCED_PLANCK_CONSTANT * SPEED_OF_LIGHT) * PI) * PI) * area)
            let den = ((((240.0 * distance) * distance) * distance) * distance)
            let f = (num / den)
            return (["force": f] as! [String: Double])
        }
        if (area == 0.0) {
            let num = (((((240.0 * force) * distance) * distance) * distance) * distance)
            let den = (((REDUCED_PLANCK_CONSTANT * SPEED_OF_LIGHT) * PI) * PI)
            let a = (num / den)
            return (["area": a] as! [String: Double])
        }
        let num = ((((REDUCED_PLANCK_CONSTANT * SPEED_OF_LIGHT) * PI) * PI) * area)
        let den = (240.0 * force)
        let inner = (num / den)
        let d = Double(sqrtApprox(Double(sqrtApprox(Double(inner)))))
        return (["distance": d] as! [String: Double])
    }
    func main() {
        print(_p(String(describing: (casimir_force(0.0, 4.0, 0.03) as! [String: Double]))))
        print(_p(String(describing: (casimir_force(0.0000000002635, 0.0023, 0.0) as! [String: Double]))))
        print(_p(String(describing: (casimir_force(0.000000000000000002737, 0.0, 0.0023746) as! [String: Double]))))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
