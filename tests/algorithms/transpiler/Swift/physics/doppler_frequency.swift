// Generated by Mochi transpiler v0.10.69 on 2025-08-19 16:46:27 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.isNaN || d.isInfinite {
                return String(d)
            }
            if d.rounded(.towardZero) == d {
                // avoid overflow when converting to Int64
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _num(_ v: Any) -> Double {
    if let d = v as? Double { return d }
    if let i = v as? Int { return Double(i) }
    if let i = v as? Int64 { return Double(i) }
    return 0
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func doppler_effect(_ org_freq: Double, _ wave_vel: Double, _ obs_vel: Double, _ src_vel: Double) -> Double {
        if ((wave_vel == src_vel)) {
            _ = fatalError("division by zero implies vs=v and observer in front of the source")
        }
        let doppler_freq = (_num((org_freq * _num((wave_vel + obs_vel)))) / _num((wave_vel - src_vel)))
        if ((doppler_freq <= 0.0)) {
            _ = fatalError("non-positive frequency implies vs>v or v0>v (in the opposite direction)")
        }
        return doppler_freq
    }
    func absf(_ x: Double) -> Double {
        if ((x < 0.0)) {
            return -x
        }
        return x
    }
    func almost_equal(_ a: Double, _ b: Double, _ tol: Double) -> Bool {
        return (_num(absf(_num((a - b)))) <= tol)
    }
    func test_doppler_effect() {
        if ((!almost_equal(_num(doppler_effect(100.0, 330.0, 10.0, 0.0)), 103.03030303030303, 9.9999999999999995e-08))) {
            _ = fatalError("test 1 failed")
        }
        if ((!almost_equal(_num(doppler_effect(100.0, 330.0, _num(-10.0), 0.0)), 96.969696969696969, 9.9999999999999995e-08))) {
            _ = fatalError("test 2 failed")
        }
        if ((!almost_equal(_num(doppler_effect(100.0, 330.0, 0.0, 10.0)), 103.125, 9.9999999999999995e-08))) {
            _ = fatalError("test 3 failed")
        }
        if ((!almost_equal(_num(doppler_effect(100.0, 330.0, 0.0, _num(-10.0))), 97.058823529411768, 9.9999999999999995e-08))) {
            _ = fatalError("test 4 failed")
        }
        if ((!almost_equal(_num(doppler_effect(100.0, 330.0, 10.0, 10.0)), 106.25, 9.9999999999999995e-08))) {
            _ = fatalError("test 5 failed")
        }
        if ((!almost_equal(_num(doppler_effect(100.0, 330.0, _num(-10.0), _num(-10.0))), 94.117647058823536, 9.9999999999999995e-08))) {
            _ = fatalError("test 6 failed")
        }
    }
    func main() {
        _ = test_doppler_effect()
        print(_p(_num(doppler_effect(100.0, 330.0, 10.0, 0.0))))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
