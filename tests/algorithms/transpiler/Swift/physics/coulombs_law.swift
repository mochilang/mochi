// Generated by Mochi transpiler v0.10.64 on 2025-08-12 10:13:50 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func format2(_ x: Double) -> String {
        let sign = String(describing: ((x < 0.0) ? "-" : ""))
        let y = Double(((x < 0.0) ? -x : x))
        let m = 100.0
        let scaled = (y * m)
        var i = Int(scaled)
        if ((scaled - Double(i)) >= 0.5) {
            i = _int((i &+ 1))
        }
        let int_part = (i / 100)
        let frac_part = ((i % 100 + 100) % 100)
        var frac_str = _p(frac_part)
        if (frac_part < 10) {
            frac_str = (("0" + frac_str) as! String)
        }
        return (((sign + _p(int_part)) + ".") + frac_str)
    }
    let K: Double = 8987551792.3
    func coulombs_law(_ q1: Double, _ q2: Double, _ radius: Double) -> Double {
        if (radius <= 0.0) {
            _ = fatalError("radius must be positive")
        }
        let force = (((K * q1) * q2) / Double((radius * radius)))
        return force
    }
    print(_p(String(describing: format2(Double(coulombs_law(15.5, 20.0, 15.0))))))
    print(_p(String(describing: format2(Double(coulombs_law(1.0, 15.0, 5.0))))))
    print(_p(String(describing: format2(Double(coulombs_law(20.0, Double(-50.0), 15.0))))))
    print(_p(String(describing: format2(Double(coulombs_law(Double(-5.0), Double(-8.0), 10.0))))))
    print(_p(String(describing: format2(Double(coulombs_law(50.0, 100.0, 50.0))))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
