// Generated by Mochi transpiler v0.10.64 on 2025-08-12 12:37:22 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func abs_float(_ x: Double) -> Double {
        if (x < 0.0) {
            return -x
        }
        return x
    }
    func isclose(_ a: Double, _ b: Double, _ tolerance: Double) -> Bool {
        return (Double(abs_float(Double((a - b)))) < tolerance)
    }
    func focal_length(_ distance_of_object: Double, _ distance_of_image: Double) -> Double {
        if ((distance_of_object == 0.0) || (distance_of_image == 0.0)) {
            _ = fatalError("Invalid inputs. Enter non zero values with respect to the sign convention.")
        }
        return (1.0 / Double((Double((1.0 / distance_of_object)) + Double((1.0 / distance_of_image)))))
    }
    func object_distance(_ focal_length: Double, _ distance_of_image: Double) -> Double {
        if ((distance_of_image == 0.0) || (focal_length == 0.0)) {
            _ = fatalError("Invalid inputs. Enter non zero values with respect to the sign convention.")
        }
        return (1.0 / Double((Double((1.0 / focal_length)) - Double((1.0 / distance_of_image)))))
    }
    func image_distance(_ focal_length: Double, _ distance_of_object: Double) -> Double {
        if ((distance_of_object == 0.0) || (focal_length == 0.0)) {
            _ = fatalError("Invalid inputs. Enter non zero values with respect to the sign convention.")
        }
        return (1.0 / Double((Double((1.0 / focal_length)) - Double((1.0 / distance_of_object)))))
    }
    func test_focal_length() {
        let f1 = Double(focal_length(10.0, 20.0))
        if (!isclose(Double(f1), 6.66666666666666, 0.00000001)) {
            _ = fatalError("focal_length test1 failed")
        }
        let f2 = Double(focal_length(9.5, 6.7))
        if (!isclose(Double(f2), 3.929012346, 0.00000001)) {
            _ = fatalError("focal_length test2 failed")
        }
    }
    func test_object_distance() {
        let u1 = Double(object_distance(30.0, 20.0))
        if (!isclose(Double(u1), Double(-60.0), 0.00000001)) {
            _ = fatalError("object_distance test1 failed")
        }
        let u2 = Double(object_distance(10.5, 11.7))
        if (!isclose(Double(u2), 102.375, 0.00000001)) {
            _ = fatalError("object_distance test2 failed")
        }
    }
    func test_image_distance() {
        let v1 = Double(image_distance(10.0, 40.0))
        if (!isclose(Double(v1), 13.33333333, 0.00000001)) {
            _ = fatalError("image_distance test1 failed")
        }
        let v2 = Double(image_distance(1.5, 6.7))
        if (!isclose(Double(v2), 1.932692308, 0.00000001)) {
            _ = fatalError("image_distance test2 failed")
        }
    }
    func main() {
        _ = test_focal_length()
        _ = test_object_distance()
        _ = test_image_distance()
        print(_p(_p(Double(focal_length(10.0, 20.0)))))
        print(_p(_p(Double(object_distance(30.0, 20.0)))))
        print(_p(_p(Double(image_distance(10.0, 40.0)))))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
