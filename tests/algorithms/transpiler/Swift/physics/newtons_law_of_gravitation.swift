// Generated by Mochi transpiler v0.10.69 on 2025-08-19 16:46:52 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.isNaN || d.isInfinite {
                return String(d)
            }
            if d.rounded(.towardZero) == d {
                // avoid overflow when converting to Int64
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _num(_ v: Any) -> Double {
    if let d = v as? Double { return d }
    if let i = v as? Int { return Double(i) }
    if let i = v as? Int64 { return Double(i) }
    return 0
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
struct Result: Codable {
    var kind: String
    var value: Double
    init() {
        self.kind = ""
        self.value = 0
    }
    init(kind: String, value: Double) {
        self.kind = kind
        self.value = value
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let GRAVITATIONAL_CONSTANT: Double = 6.6742999999999994e-11
    func sqrtApprox(_ x: Double) -> Double {
        var guess = (x / 2.0)
        var i = 0
        while (i < 20) {
            guess = _num((_num((guess + (x / guess))) / 2.0))
            i = _int((i &+ 1))
        }
        return guess
    }
    func gravitational_law(_ force: Double, _ mass_1: Double, _ mass_2: Double, _ distance: Double) -> Result {
        var zero_count = 0
        if ((force == 0.0)) {
            zero_count = _int((zero_count &+ 1))
        }
        if ((mass_1 == 0.0)) {
            zero_count = _int((zero_count &+ 1))
        }
        if ((mass_2 == 0.0)) {
            zero_count = _int((zero_count &+ 1))
        }
        if ((distance == 0.0)) {
            zero_count = _int((zero_count &+ 1))
        }
        if ((zero_count != 1)) {
            _ = fatalError("One and only one argument must be 0")
        }
        if ((force < 0.0)) {
            _ = fatalError("Gravitational force can not be negative")
        }
        if ((distance < 0.0)) {
            _ = fatalError("Distance can not be negative")
        }
        if ((mass_1 < 0.0)) {
            _ = fatalError("Mass can not be negative")
        }
        if ((mass_2 < 0.0)) {
            _ = fatalError("Mass can not be negative")
        }
        let product_of_mass = (mass_1 * mass_2)
        if ((force == 0.0)) {
            let f = ((GRAVITATIONAL_CONSTANT * product_of_mass) / _num((distance * distance)))
            return Result(kind: "force", value: _num(f))
        }
        if ((mass_1 == 0.0)) {
            let m1 = ((force * _num((distance * distance))) / _num((GRAVITATIONAL_CONSTANT * mass_2)))
            return Result(kind: "mass_1", value: _num(m1))
        }
        if ((mass_2 == 0.0)) {
            let m2 = ((force * _num((distance * distance))) / _num((GRAVITATIONAL_CONSTANT * mass_1)))
            return Result(kind: "mass_2", value: _num(m2))
        }
        let d = _num(sqrtApprox(_num(((GRAVITATIONAL_CONSTANT * product_of_mass) / force))))
        return Result(kind: "distance", value: _num(d))
    }
    let r1 = gravitational_law(0.0, 5.0, 10.0, 20.0)
    let r2 = gravitational_law(7367.3819999999996, 0.0, 74.0, 3048.0)
    let r3 = gravitational_law(100.0, 5.0, 0.0, 3.0)
    let r4 = gravitational_law(100.0, 5.0, 10.0, 0.0)
    print(_p((_p((_p(r1.kind) + _p(" "))) + _p(_p(r1.value)))))
    print(_p((_p((_p(r2.kind) + _p(" "))) + _p(_p(r2.value)))))
    print(_p((_p((_p(r3.kind) + _p(" "))) + _p(_p(r3.value)))))
    print(_p((_p((_p(r4.kind) + _p(" "))) + _p(_p(r4.value)))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
