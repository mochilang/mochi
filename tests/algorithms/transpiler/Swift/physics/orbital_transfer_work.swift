// Generated by Mochi transpiler v0.10.64 on 2025-08-12 12:37:32 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func pow10(_ n: Int) -> Double {
        var p = 1.0
        if (n >= 0) {
            var i = 0
            while (i < n) {
                p = Double((p * 10.0))
                i = _int((i &+ 1))
            }
        } else {
            var i = 0
            while (i > n) {
                p = Double((p / 10.0))
                i = _int((i &- 1))
            }
        }
        return p
    }
    func floor(_ x: Double) -> Double {
        let i = Int(x)
        let f = Double(i)
        if (f > x) {
            return Double((i &- 1))
        }
        return f
    }
    func format_scientific_3(_ x: Double) -> String {
        if (x == 0.0) {
            return "0.000e+00"
        }
        var sign = ""
        var num = x
        if (num < 0.0) {
            sign = "-"
            num = Double(-num)
        }
        var exp = 0
        while (num >= 10.0) {
            num = Double((num / 10.0))
            exp = _int((exp &+ 1))
        }
        while (num < 1.0) {
            num = Double((num * 10.0))
            exp = _int((exp &- 1))
        }
        let temp = Double(floor(Double(((num * 1000.0) + 0.5))))
        var scaled = Int(temp)
        if (scaled == 10000) {
            scaled = 1000
            exp = _int((exp &+ 1))
        }
        let int_part = (scaled / 1000)
        var frac_part = ((scaled % 1000 + 1000) % 1000)
        var frac_str = _p(frac_part)
        while (_int(((frac_str).count)) < 3) {
            frac_str = (("0" + frac_str) as! String)
        }
        let mantissa = ((_p(int_part) + ".") + frac_str)
        var exp_sign = "+"
        var exp_abs = exp
        if (exp < 0) {
            exp_sign = "-"
            exp_abs = _int(-exp)
        }
        var exp_str = _p(exp_abs)
        if (exp_abs < 10) {
            exp_str = (("0" + exp_str) as! String)
        }
        return ((((sign + mantissa) + "e") + exp_sign) + exp_str)
    }
    func orbital_transfer_work(_ mass_central: Double, _ mass_object: Double, _ r_initial: Double, _ r_final: Double) -> String {
        let G = (6.6743 * Double(pow10(-11)))
        if ((r_initial <= 0.0) || (r_final <= 0.0)) {
            _ = fatalError("Orbital radii must be greater than zero.")
        }
        let work = (Double((((G * mass_central) * mass_object) / 2.0)) * Double(((1.0 / r_initial) - (1.0 / r_final))))
        return String(describing: format_scientific_3(Double(work)))
    }
    func test_orbital_transfer_work() {
        if (String(describing: orbital_transfer_work(Double((5.972 * Double(pow10(24)))), 1000.0, Double((6.371 * Double(pow10(6)))), Double((7.0 * Double(pow10(6)))))) != "2.811e+09") {
            _ = fatalError("case1 failed")
        }
        if (String(describing: orbital_transfer_work(Double((5.972 * Double(pow10(24)))), 500.0, Double((7.0 * Double(pow10(6)))), Double((6.371 * Double(pow10(6)))))) != "-1.405e+09") {
            _ = fatalError("case2 failed")
        }
        if (String(describing: orbital_transfer_work(Double((1.989 * Double(pow10(30)))), 1000.0, Double((1.5 * Double(pow10(11)))), Double((2.28 * Double(pow10(11)))))) != "1.514e+11") {
            _ = fatalError("case3 failed")
        }
    }
    func main() {
        _ = test_orbital_transfer_work()
        print(_p(String(describing: orbital_transfer_work(Double((5.972 * Double(pow10(24)))), 1000.0, Double((6.371 * Double(pow10(6)))), Double((7.0 * Double(pow10(6))))))))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
