// Generated by Mochi transpiler v0.10.73 on 2025-08-26 08:45:54 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.isNaN || d.isInfinite {
                return String(d)
            }
            if d.rounded(.towardZero) == d {
                // avoid overflow when converting to Int64
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _num(_ v: Any) -> Double {
    if let d = v as? Double { return d }
    if let i = v as? Int { return Double(i) }
    if let i = v as? Int64 { return Double(i) }
    return 0
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let G: Double = 6.6742999999999994e-11
    let C: Double = 299792458.0
    let PI: Double = 3.1415926535897931
    func pow10(_ n: Int) -> Double {
        var result = 1.0
        var i = 0
        while ((i < n)) {
            result = _num((result * 10.0))
            i = _int((i &+ 1))
        }
        return result
    }
    func sqrt(_ x: Double) -> Double {
        if ((x <= 0.0)) {
            return 0.0
        }
        var guess = x
        var i = 0
        while ((i < 20)) {
            guess = _num((_num((guess + (x / guess))) / 2.0))
            i = _int((i &+ 1))
        }
        return guess
    }
    func abs(_ x: Double) -> Double {
        if ((x < 0.0)) {
            return -x
        }
        return x
    }
    func capture_radii(_ target_body_radius: Double, _ target_body_mass: Double, _ projectile_velocity: Double) -> Double {
        if ((target_body_mass < 0.0)) {
            _ = fatalError("Mass cannot be less than 0")
        }
        if ((target_body_radius < 0.0)) {
            _ = fatalError("Radius cannot be less than 0")
        }
        if ((projectile_velocity > C)) {
            _ = fatalError("Cannot go beyond speed of light")
        }
        let escape_velocity_squared = (_num(((2.0 * G) * target_body_mass)) / target_body_radius)
        let denom = (projectile_velocity * projectile_velocity)
        let capture_radius = (target_body_radius * _num(sqrt(_num((1.0 + (escape_velocity_squared / denom))))))
        return capture_radius
    }
    func capture_area(_ capture_radius: Double) -> Double {
        if ((capture_radius < 0.0)) {
            _ = fatalError("Cannot have a capture radius less than 0")
        }
        let sigma = ((PI * capture_radius) * capture_radius)
        return sigma
    }
    func run_tests() {
        let r = _num(capture_radii(_num((6.9569999999999999 * _num(pow10(8)))), _num((1.99 * _num(pow10(30)))), 25000.0))
        if ((_num(abs(_num((r - (1.720959069143714 * _num(pow10(10))))))) > 1.0)) {
            _ = fatalError("capture_radii failed")
        }
        let a = _num(capture_area(_num(r)))
        if ((_num(abs(_num((a - (9.3044553318018117 * _num(pow10(20))))))) > 1.0)) {
            _ = fatalError("capture_area failed")
        }
    }
    func main() {
        _ = run_tests()
        let r = _num(capture_radii(_num((6.9569999999999999 * _num(pow10(8)))), _num((1.99 * _num(pow10(30)))), 25000.0))
        print(_p(_p(r)))
        print(_p(_p(_num(capture_area(_num(r))))))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
