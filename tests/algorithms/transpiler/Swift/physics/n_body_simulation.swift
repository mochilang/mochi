// Generated by Mochi transpiler v0.10.64 on 2025-08-12 10:14:14 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _json(_ v: Any) {
    if JSONSerialization.isValidJSONObject(v),
    let data = try? JSONSerialization.data(withJSONObject: v, options: [.sortedKeys, .prettyPrinted]),
    let str = String(data: data, encoding: .utf8) {
        print(str)
    } else {
        print(_p(v))
    }
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
struct Body: Codable {
    var position_x: Double
    var position_y: Double
    var velocity_x: Double
    var velocity_y: Double
    var mass: Double
    init() {
        self.position_x = 0
        self.position_y = 0
        self.velocity_x = 0
        self.velocity_y = 0
        self.mass = 0
    }
    init(position_x: Double, position_y: Double, velocity_x: Double, velocity_y: Double, mass: Double) {
        self.position_x = position_x
        self.position_y = position_y
        self.velocity_x = velocity_x
        self.velocity_y = velocity_y
        self.mass = mass
    }
}
struct BodySystem: Codable {
    var bodies: [Body]
    var gravitation_constant: Double
    var time_factor: Double
    var softening_factor: Double
    init() {
        self.bodies = []
        self.gravitation_constant = 0
        self.time_factor = 0
        self.softening_factor = 0
    }
    init(bodies: [Body], gravitation_constant: Double, time_factor: Double, softening_factor: Double) {
        self.bodies = bodies
        self.gravitation_constant = gravitation_constant
        self.time_factor = time_factor
        self.softening_factor = softening_factor
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func make_body(_ px: Double, _ py: Double, _ vx: Double, _ vy: Double, _ mass: Double) -> Body {
        return Body(position_x: Double(px), position_y: Double(py), velocity_x: Double(vx), velocity_y: Double(vy), mass: Double(mass))
    }
    func update_velocity(_ body: inout Body, _ force_x: Double, _ force_y: Double, _ delta_time: Double) -> Body {
        body.velocity_x = Double((body.velocity_x + (force_x * delta_time)))
        body.velocity_y = Double((body.velocity_y + (force_y * delta_time)))
        return body
    }
    func update_position(_ body: inout Body, _ delta_time: Double) -> Body {
        body.position_x = Double((body.position_x + (body.velocity_x * delta_time)))
        body.position_y = Double((body.position_y + (body.velocity_y * delta_time)))
        return body
    }
    func make_body_system(_ bodies: [Body], _ g: Double, _ tf: Double, _ sf: Double) -> BodySystem {
        return BodySystem(bodies: (bodies as! [Body]), gravitation_constant: Double(g), time_factor: Double(tf), softening_factor: Double(sf))
    }
    func sqrtApprox(_ x: Double) -> Double {
        var guess = (x / 2.0)
        var i = 0
        while (i < 20) {
            guess = Double((Double((guess + (x / guess))) / 2.0))
            i = _int((i &+ 1))
        }
        return guess
    }
    func update_system(_ system: inout BodySystem, _ delta_time: Double) -> BodySystem {
        var bodies = system.bodies
        var i = 0
        while (i < _int(((bodies).count))) {
            var body1 = (_idx(bodies, i) as! Body)
            var force_x = 0.0
            var force_y = 0.0
            var j = 0
            while (j < _int(((bodies).count))) {
                if (i != j) {
                    let body2 = (_idx(bodies, j) as! Body)
                    let dif_x = (body2.position_x - body1.position_x)
                    let dif_y = (body2.position_y - body1.position_y)
                    let distance_sq = (((dif_x * dif_x) + (dif_y * dif_y)) + system.softening_factor)
                    let distance = Double(sqrtApprox(Double(distance_sq)))
                    let denom = ((distance * distance) * distance)
                    force_x = Double((force_x + (((system.gravitation_constant * body2.mass) * dif_x) / denom)))
                    force_y = Double((force_y + (((system.gravitation_constant * body2.mass) * dif_y) / denom)))
                }
                j = _int((j &+ 1))
            }
            body1 = (update_velocity(&body1, Double(force_x), Double(force_y), Double((delta_time * system.time_factor))) as! Body)
            bodies = _set(bodies, i, (body1 as! Body))
            i = _int((i &+ 1))
        }
        i = 0
        while (i < _int(((bodies).count))) {
            var body = (_idx(bodies, i) as! Body)
            body = (update_position(&body, Double((delta_time * system.time_factor))) as! Body)
            bodies = _set(bodies, i, (body as! Body))
            i = _int((i &+ 1))
        }
        system.bodies = (bodies as! [Body])
        return system
    }
    func main() {
        let b1 = make_body(0.0, 0.0, 0.0, 0.0, 1.0)
        let b2 = make_body(10.0, 0.0, 0.0, 0.0, 1.0)
        var sys1 = make_body_system(({
            var _arr: [Body] = []
            _arr = _append(_arr, b1)
            _arr = _append(_arr, b2)
            return _arr
        }() as! [Body]), 1.0, 1.0, 0.0)
        sys1 = (update_system(&sys1, 1.0) as! BodySystem)
        let b1_after = (_idx(sys1.bodies, 0) as! Body)
        let pos1x = b1_after.position_x
        let pos1y = b1_after.position_y
        _ = _json(["x": pos1x, "y": pos1y])
        let vel1x = b1_after.velocity_x
        let vel1y = b1_after.velocity_y
        _ = _json(["vx": vel1x, "vy": vel1y])
        let b3 = make_body(Double(-10.0), 0.0, 0.0, 0.0, 1.0)
        let b4 = make_body(10.0, 0.0, 0.0, 0.0, 4.0)
        var sys2 = make_body_system(({
            var _arr: [Body] = []
            _arr = _append(_arr, b3)
            _arr = _append(_arr, b4)
            return _arr
        }() as! [Body]), 1.0, 10.0, 0.0)
        sys2 = (update_system(&sys2, 1.0) as! BodySystem)
        let b2_after = (_idx(sys2.bodies, 0) as! Body)
        let pos2x = b2_after.position_x
        let pos2y = b2_after.position_y
        _ = _json(["x": pos2x, "y": pos2y])
        let vel2x = b2_after.velocity_x
        let vel2y = b2_after.velocity_y
        _ = _json(["vx": vel2x, "vy": vel2y])
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
