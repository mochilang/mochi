// Generated by Mochi transpiler v0.10.69 on 2025-08-19 16:46:37 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.isNaN || d.isInfinite {
                return String(d)
            }
            if d.rounded(.towardZero) == d {
                // avoid overflow when converting to Int64
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _num(_ v: Any) -> Double {
    if let d = v as? Double { return d }
    if let i = v as? Int { return Double(i) }
    if let i = v as? Int64 { return Double(i) }
    return 0
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first!
}
func _idx<K: Hashable, V>(_ m: [K: V], _ k: K) -> V? {
    return m[k]
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let PI: Double = 3.1415926535897931
    let TWO_PI: Double = 6.2831853071795862
    func _mod(_ x: Double, _ m: Double) -> Double {
        return (x - (_num(_int((x / m))) * m))
    }
    func sin_approx(_ x: Double) -> Double {
        let y = (_num(_mod(_num((x + PI)), _num(TWO_PI))) - PI)
        let y2 = (y * y)
        let y3 = (y2 * y)
        let y5 = (y3 * y2)
        let y7 = (y5 * y2)
        return (((y - (y3 / 6.0)) + (y5 / 120.0)) - (y7 / 5040.0))
    }
    func cos_approx(_ x: Double) -> Double {
        let y = (_num(_mod(_num((x + PI)), _num(TWO_PI))) - PI)
        let y2 = (y * y)
        let y4 = (y2 * y2)
        let y6 = (y4 * y2)
        return (((1.0 - (y2 / 2.0)) + (y4 / 24.0)) - (y6 / 720.0))
    }
    func polar_force(_ magnitude: Double, _ angle: Double, _ radian_mode: Bool) -> [Double] {
        let theta = _num((radian_mode ? angle : ((angle * PI) / 180.0)))
        return ({
            var _arr: [Double] = []
            _arr = _append(_arr, (magnitude * _num(cos_approx(_num(theta)))))
            _arr = _append(_arr, (magnitude * _num(sin_approx(_num(theta)))))
            return _arr
        }() as! [Double])
    }
    func abs_float(_ x: Double) -> Double {
        if ((x < 0.0)) {
            return -x
        } else {
            return x
        }
    }
    func in_static_equilibrium(_ forces: [[Double]], _ location: [[Double]], _ eps: Double) -> Bool {
        var sum_moments: Double = 0.0
        var i = 0
        let n = _int(((forces).count))
        while (i < n) {
            let r: [Double] = (_idx(location, i) as! [Double])
            let f: [Double] = (_idx(forces, i) as! [Double])
            let moment = ((_num(_idx(r, 0)) * _num(_idx(f, 1))) - (_num(_idx(r, 1)) * _num(_idx(f, 0))))
            sum_moments = _num((sum_moments + moment))
            i = _int((i &+ 1))
        }
        return (_num(abs_float(_num(sum_moments))) < eps)
    }
    let forces1: [[Double]] = ({
        var _arr: [[Double]] = []
        _arr = _append(_arr, ({
            var _arr: [Double] = []
            _arr = _append(_arr, 1.0)
            _arr = _append(_arr, 1.0)
            return _arr
        }() as! [Double]))
        _arr = _append(_arr, ({
            var _arr: [Double] = []
            _arr = _append(_arr, -1.0)
            _arr = _append(_arr, 2.0)
            return _arr
        }() as! [Double]))
        return _arr
    }() as! [[Double]])
    let location1: [[Double]] = ({
        var _arr: [[Double]] = []
        _arr = _append(_arr, ({
            var _arr: [Double] = []
            _arr = _append(_arr, 1.0)
            _arr = _append(_arr, 0.0)
            return _arr
        }() as! [Double]))
        _arr = _append(_arr, ({
            var _arr: [Double] = []
            _arr = _append(_arr, 10.0)
            _arr = _append(_arr, 0.0)
            return _arr
        }() as! [Double]))
        return _arr
    }() as! [[Double]])
    print(_p(_p(in_static_equilibrium((forces1 as! [[Double]]), (location1 as! [[Double]]), 0.10000000000000001))))
    let forces2: [[Double]] = ({
        var _arr: [[Double]] = []
        _arr = _append(_arr, (polar_force(718.39999999999998, 150.0, false) as! [Double]))
        _arr = _append(_arr, (polar_force(879.53999999999996, 45.0, false) as! [Double]))
        _arr = _append(_arr, (polar_force(100.0, _num(-90.0), false) as! [Double]))
        return _arr
    }() as! [[Double]])
    let location2: [[Double]] = ({
        var _arr: [[Double]] = []
        _arr = _append(_arr, ({
            var _arr: [Double] = []
            _arr = _append(_arr, 0.0)
            _arr = _append(_arr, 0.0)
            return _arr
        }() as! [Double]))
        _arr = _append(_arr, ({
            var _arr: [Double] = []
            _arr = _append(_arr, 0.0)
            _arr = _append(_arr, 0.0)
            return _arr
        }() as! [Double]))
        _arr = _append(_arr, ({
            var _arr: [Double] = []
            _arr = _append(_arr, 0.0)
            _arr = _append(_arr, 0.0)
            return _arr
        }() as! [Double]))
        return _arr
    }() as! [[Double]])
    print(_p(_p(in_static_equilibrium((forces2 as! [[Double]]), (location2 as! [[Double]]), 0.10000000000000001))))
    let forces3: [[Double]] = ({
        var _arr: [[Double]] = []
        _arr = _append(_arr, (polar_force(_num((30.0 * 9.8100000000000005)), 15.0, false) as! [Double]))
        _arr = _append(_arr, (polar_force(215.0, 135.0, false) as! [Double]))
        _arr = _append(_arr, (polar_force(264.0, 60.0, false) as! [Double]))
        return _arr
    }() as! [[Double]])
    let location3: [[Double]] = ({
        var _arr: [[Double]] = []
        _arr = _append(_arr, ({
            var _arr: [Double] = []
            _arr = _append(_arr, 0.0)
            _arr = _append(_arr, 0.0)
            return _arr
        }() as! [Double]))
        _arr = _append(_arr, ({
            var _arr: [Double] = []
            _arr = _append(_arr, 0.0)
            _arr = _append(_arr, 0.0)
            return _arr
        }() as! [Double]))
        _arr = _append(_arr, ({
            var _arr: [Double] = []
            _arr = _append(_arr, 0.0)
            _arr = _append(_arr, 0.0)
            return _arr
        }() as! [Double]))
        return _arr
    }() as! [[Double]])
    print(_p(_p(in_static_equilibrium((forces3 as! [[Double]]), (location3 as! [[Double]]), 0.10000000000000001))))
    let forces4: [[Double]] = ({
        var _arr: [[Double]] = []
        _arr = _append(_arr, ({
            var _arr: [Double] = []
            _arr = _append(_arr, 0.0)
            _arr = _append(_arr, -2000.0)
            return _arr
        }() as! [Double]))
        _arr = _append(_arr, ({
            var _arr: [Double] = []
            _arr = _append(_arr, 0.0)
            _arr = _append(_arr, -1200.0)
            return _arr
        }() as! [Double]))
        _arr = _append(_arr, ({
            var _arr: [Double] = []
            _arr = _append(_arr, 0.0)
            _arr = _append(_arr, 15600.0)
            return _arr
        }() as! [Double]))
        _arr = _append(_arr, ({
            var _arr: [Double] = []
            _arr = _append(_arr, 0.0)
            _arr = _append(_arr, -12400.0)
            return _arr
        }() as! [Double]))
        return _arr
    }() as! [[Double]])
    let location4: [[Double]] = ({
        var _arr: [[Double]] = []
        _arr = _append(_arr, ({
            var _arr: [Double] = []
            _arr = _append(_arr, 0.0)
            _arr = _append(_arr, 0.0)
            return _arr
        }() as! [Double]))
        _arr = _append(_arr, ({
            var _arr: [Double] = []
            _arr = _append(_arr, 6.0)
            _arr = _append(_arr, 0.0)
            return _arr
        }() as! [Double]))
        _arr = _append(_arr, ({
            var _arr: [Double] = []
            _arr = _append(_arr, 10.0)
            _arr = _append(_arr, 0.0)
            return _arr
        }() as! [Double]))
        _arr = _append(_arr, ({
            var _arr: [Double] = []
            _arr = _append(_arr, 12.0)
            _arr = _append(_arr, 0.0)
            return _arr
        }() as! [Double]))
        return _arr
    }() as! [[Double]])
    print(_p(_p(in_static_equilibrium((forces4 as! [[Double]]), (location4 as! [[Double]]), 0.10000000000000001))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
