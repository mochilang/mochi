// Generated by Mochi transpiler v0.10.69 on 2025-08-19 16:46:21 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.isNaN || d.isInfinite {
                return String(d)
            }
            if d.rounded(.towardZero) == d {
                // avoid overflow when converting to Int64
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _num(_ v: Any) -> Double {
    if let d = v as? Double { return d }
    if let i = v as? Int { return Double(i) }
    if let i = v as? Int64 { return Double(i) }
    return 0
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first!
}
func _idx<K: Hashable, V>(_ m: [K: V], _ k: K) -> V? {
    return m[k]
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
struct Particle: Codable {
    var x: Double
    var y: Double
    var z: Double
    var mass: Double
    init() {
        self.x = 0
        self.y = 0
        self.z = 0
        self.mass = 0
    }
    init(x: Double, y: Double, z: Double, mass: Double) {
        self.x = x
        self.y = y
        self.z = z
        self.mass = mass
    }
}
struct Coord3D: Codable {
    var x: Double
    var y: Double
    var z: Double
    init() {
        self.x = 0
        self.y = 0
        self.z = 0
    }
    init(x: Double, y: Double, z: Double) {
        self.x = x
        self.y = y
        self.z = z
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func round2(_ x: Double) -> Double {
        let scaled = (x * 100.0)
        let rounded = _num(_int((scaled + 0.5)))
        return (rounded / 100.0)
    }
    func center_of_mass(_ ps: [Particle]) -> Coord3D {
        if ((_int(((ps).count)) == 0)) {
            _ = fatalError("No particles provided")
        }
        var i: Int = 0
        var total_mass: Double = 0.0
        while (i < _int(((ps).count))) {
            let p = (_idx(ps, i) as! Particle)
            if ((p.mass <= 0.0)) {
                _ = fatalError("Mass of all particles must be greater than 0")
            }
            total_mass = _num((total_mass + p.mass))
            i = _int((i &+ 1))
        }
        var sum_x: Double = 0.0
        var sum_y: Double = 0.0
        var sum_z: Double = 0.0
        i = 0
        while (i < _int(((ps).count))) {
            let p = (_idx(ps, i) as! Particle)
            sum_x = _num((sum_x + (p.x * p.mass)))
            sum_y = _num((sum_y + (p.y * p.mass)))
            sum_z = _num((sum_z + (p.z * p.mass)))
            i = _int((i &+ 1))
        }
        let cm_x = _num(round2(_num((sum_x / total_mass))))
        let cm_y = _num(round2(_num((sum_y / total_mass))))
        let cm_z = _num(round2(_num((sum_z / total_mass))))
        return Coord3D(x: _num(cm_x), y: _num(cm_y), z: _num(cm_z))
    }
    func coord_to_string(_ c: Coord3D) -> String {
        return (_p((_p((_p((_p((_p((_p("Coord3D(x=") + _p(_p(c.x)))) + _p(", y="))) + _p(_p(c.y)))) + _p(", z="))) + _p(_p(c.z)))) + _p(")"))
    }
    let r1 = center_of_mass(({
        var _arr: [Particle] = []
        _arr = _append(_arr, Particle(x: 1.5, y: 4.0, z: 3.3999999999999999, mass: 4.0))
        _arr = _append(_arr, Particle(x: 5.0, y: 6.7999999999999998, z: 7.0, mass: 8.0999999999999996))
        _arr = _append(_arr, Particle(x: 9.4000000000000004, y: 10.1, z: 11.6, mass: 12.0))
        return _arr
    }() as! [Particle]))
    print(_p(String(describing: coord_to_string((r1 as! Coord3D)))))
    let r2 = center_of_mass(({
        var _arr: [Particle] = []
        _arr = _append(_arr, Particle(x: 1.0, y: 2.0, z: 3.0, mass: 4.0))
        _arr = _append(_arr, Particle(x: 5.0, y: 6.0, z: 7.0, mass: 8.0))
        _arr = _append(_arr, Particle(x: 9.0, y: 10.0, z: 11.0, mass: 12.0))
        return _arr
    }() as! [Particle]))
    print(_p(String(describing: coord_to_string((r2 as! Coord3D)))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
