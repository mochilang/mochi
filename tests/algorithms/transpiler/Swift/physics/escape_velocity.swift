// Generated by Mochi transpiler v0.10.64 on 2025-08-12 10:13:53 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func pow10(_ n: Int) -> Double {
        var p = 1.0
        var k = 0
        if (n >= 0) {
            while (k < n) {
                p = Double((p * 10.0))
                k = _int((k &+ 1))
            }
        } else {
            let m = -n
            while (k < m) {
                p = Double((p / 10.0))
                k = _int((k &+ 1))
            }
        }
        return p
    }
    func sqrt_newton(_ n: Double) -> Double {
        if (n == 0.0) {
            return 0.0
        }
        var x = n
        var j = 0
        while (j < 20) {
            x = Double((Double((x + (n / x))) / 2.0))
            j = _int((j &+ 1))
        }
        return x
    }
    func round3(_ x: Double) -> Double {
        var y = ((x * 1000.0) + 0.5)
        var yi = Int(y)
        if (Double(yi) > y) {
            yi = _int((yi &- 1))
        }
        return (Double(yi) / 1000.0)
    }
    func escape_velocity(_ mass: Double, _ radius: Double) -> Double {
        if (radius == 0.0) {
            _ = fatalError("Radius cannot be zero.")
        }
        let G = (6.6743 * Double(pow10(-11)))
        let velocity = Double(sqrt_newton(Double((((2.0 * G) * mass) / radius))))
        return Double(round3(Double(velocity)))
    }
    print(_p(Double(escape_velocity(Double((5.972 * Double(pow10(24)))), Double((6.371 * Double(pow10(6))))))))
    print(_p(Double(escape_velocity(Double((7.348 * Double(pow10(22)))), Double((1.737 * Double(pow10(6))))))))
    print(_p(Double(escape_velocity(Double((1.898 * Double(pow10(27)))), Double((6.9911 * Double(pow10(7))))))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
