// Generated by Mochi transpiler v0.10.64 on 2025-08-12 16:33:14 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
indirect enum Item {
    case Int(value: Int)
    case Str(value: String)
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func from_int(_ x: Int) -> Item {
        return (Item.Int(value: Int(x)) as! Item)
    }
    func from_string(_ s: String) -> Item {
        return (Item.Str(value: String(describing: s)) as! Item)
    }
    func item_to_string(_ it: Item) -> String {
        return String(describing: { () -> String in
        switch it {
            case let .Int(v):
            return _p(v)
            case let .Str(s):
            return s
            default:
            var z: String
            return z
        }
    }())
}
func alternative_list_arrange(_ first: [Item], _ second: [Item]) -> [Item] {
    let len1 = _int(((first).count))
    let len2 = _int(((second).count))
    let abs_len = _int(((len1 > len2) ? len1 : len2))
    var result: [Item] = ([] as! [Item])
    var i = 0
    while (i < abs_len) {
        if (i < len1) {
            result = (_append(result, (_idx(first, i) as! Item)) as! [Item])
        }
        if (i < len2) {
            result = (_append(result, (_idx(second, i) as! Item)) as! [Item])
        }
        i = _int((i &+ 1))
    }
    return result
}
func list_to_string(_ xs: [Item]) -> String {
    var s = "["
    var i = 0
    while (i < _int(((xs).count))) {
        s = ((s + String(describing: item_to_string((_idx(xs, i) as! Item)))) as! String)
        if (i < (_int(((xs).count)) &- 1)) {
            s = ((s + ", ") as! String)
        }
        i = _int((i &+ 1))
    }
    s = ((s + "]") as! String)
    return s
}
let example1: [Item] = (alternative_list_arrange(({
    var _arr: [Item] = []
    _arr = _append(_arr, from_int(1))
    _arr = _append(_arr, from_int(2))
    _arr = _append(_arr, from_int(3))
    _arr = _append(_arr, from_int(4))
    _arr = _append(_arr, from_int(5))
    return _arr
}() as! [Item]), ({
    var _arr: [Item] = []
    _arr = _append(_arr, from_string("A"))
    _arr = _append(_arr, from_string("B"))
    _arr = _append(_arr, from_string("C"))
    return _arr
}() as! [Item])) as! [Item])
print(_p(String(describing: list_to_string((example1 as! [Item])))))
let example2: [Item] = (alternative_list_arrange(({
    var _arr: [Item] = []
    _arr = _append(_arr, from_string("A"))
    _arr = _append(_arr, from_string("B"))
    _arr = _append(_arr, from_string("C"))
    return _arr
}() as! [Item]), ({
    var _arr: [Item] = []
    _arr = _append(_arr, from_int(1))
    _arr = _append(_arr, from_int(2))
    _arr = _append(_arr, from_int(3))
    _arr = _append(_arr, from_int(4))
    _arr = _append(_arr, from_int(5))
    return _arr
}() as! [Item])) as! [Item])
print(_p(String(describing: list_to_string((example2 as! [Item])))))
let example3: [Item] = (alternative_list_arrange(({
    var _arr: [Item] = []
    _arr = _append(_arr, from_string("X"))
    _arr = _append(_arr, from_string("Y"))
    _arr = _append(_arr, from_string("Z"))
    return _arr
}() as! [Item]), ({
    var _arr: [Item] = []
    _arr = _append(_arr, from_int(9))
    _arr = _append(_arr, from_int(8))
    _arr = _append(_arr, from_int(7))
    _arr = _append(_arr, from_int(6))
    return _arr
}() as! [Item])) as! [Item])
print(_p(String(describing: list_to_string((example3 as! [Item])))))
let example4: [Item] = (alternative_list_arrange(({
    var _arr: [Item] = []
    _arr = _append(_arr, from_int(1))
    _arr = _append(_arr, from_int(2))
    _arr = _append(_arr, from_int(3))
    _arr = _append(_arr, from_int(4))
    _arr = _append(_arr, from_int(5))
    return _arr
}() as! [Item]), ([] as! [Item])) as! [Item])
print(_p(String(describing: list_to_string((example4 as! [Item])))))
let _benchEnd = _now()
let _benchMemEnd = _mem()
print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
