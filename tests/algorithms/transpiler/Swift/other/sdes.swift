// Generated by Mochi transpiler v0.10.69 on 2025-08-19 16:46:07 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.isNaN || d.isInfinite {
                return String(d)
            }
            if d.rounded(.towardZero) == d {
                // avoid overflow when converting to Int64
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _num(_ v: Any) -> Double {
    if let d = v as? Double { return d }
    if let i = v as? Int { return Double(i) }
    if let i = v as? Int64 { return Double(i) }
    return 0
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first!
}
func _idx<K: Hashable, V>(_ m: [K: V], _ k: K) -> V? {
    return m[k]
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _slice<T>(_ xs: [T], _ start: Int, _ end: Int) -> [T] {
    var s = start
    var e = end
    if s < 0 { s = 0 }
    if e > xs.count { e = xs.count }
    if s > e { s = e }
    return Array(xs[s..<e])
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func apply_table(_ inp: String, _ table: [Int]) -> String {
        var res = ""
        var i = 0
        while (i < _int(((table).count))) {
            var idx = ((_idx(table, i) as? Int ?? 0) &- 1)
            if ((idx < 0)) {
                idx = _int((_int(((inp).count)) &- 1))
            }
            res = ((_p(res) + _p(String(_slice(Array(inp), idx, (idx &+ 1))))) as! String)
            i = _int((i &+ 1))
        }
        return res
    }
    func left_shift(_ data: String) -> String {
        return (_p(String(_slice(Array(data), 1, _int(((data).count))))) + _p(String(_slice(Array(data), 0, 1))))
    }
    func xor(_ a: String, _ b: String) -> String {
        var res = ""
        var i = 0
        while ((i < _int(((a).count))) && (i < _int(((b).count)))) {
            if ((String(_slice(Array(a), i, (i &+ 1))) == String(_slice(Array(b), i, (i &+ 1))))) {
                res = ((_p(res) + _p("0")) as! String)
            } else {
                res = ((_p(res) + _p("1")) as! String)
            }
            i = _int((i &+ 1))
        }
        return res
    }
    func int_to_binary(_ n: Int) -> String {
        if ((n == 0)) {
            return "0"
        }
        var res = ""
        var num = n
        while (num > 0) {
            res = ((_p(_p(((num % 2 + 2) % 2))) + _p(res)) as! String)
            num = _int((num / 2))
        }
        return res
    }
    func pad_left(_ s: String, _ width: Int) -> String {
        var res = s
        while (_int(((res).count)) < width) {
            res = ((_p("0") + _p(res)) as! String)
        }
        return res
    }
    func bin_to_int(_ s: String) -> Int {
        var result = 0
        var i = 0
        while (i < _int(((s).count))) {
            let digit = _int(String(_slice(Array(s), i, (i &+ 1))))
            result = _int(((result &* 2) &+ digit))
            i = _int((i &+ 1))
        }
        return result
    }
    func apply_sbox(_ s: [[Int]], _ data: String) -> String {
        let row_bits = (_p(String(_slice(Array(data), 0, 1))) + _p(String(_slice(Array(data), (_int(((data).count)) &- 1), _int(((data).count))))))
        let col_bits = String(_slice(Array(data), 1, 3))
        let row = _int(bin_to_int((row_bits as! String)))
        let col = _int(bin_to_int((col_bits as! String)))
        let val = (_idx(_idx(s, row), col) as? Int ?? 0)
        let out = String(describing: int_to_binary(val))
        return out
    }
    let p4_table: [Int] = ({
        var _arr: [Int] = []
        _arr = _append(_arr, 2)
        _arr = _append(_arr, 4)
        _arr = _append(_arr, 3)
        _arr = _append(_arr, 1)
        return _arr
    }() as! [Int])
    func f(_ expansion: [Int], _ s0: [[Int]], _ s1: [[Int]], _ key: String, _ message: String) -> String {
        let left = String(_slice(Array(message), 0, 4))
        let right = String(_slice(Array(message), 4, 8))
        var temp = String(describing: apply_table((right as! String), (expansion as! [Int])))
        temp = String(describing: xor((temp as! String), (key as! String)))
        var left_bin_str = String(describing: apply_sbox((s0 as! [[Int]]), (String(_slice(Array(temp), 0, 4)) as! String)))
        var right_bin_str = String(describing: apply_sbox((s1 as! [[Int]]), (String(_slice(Array(temp), 4, 8)) as! String)))
        left_bin_str = String(describing: pad_left((left_bin_str as! String), 2))
        right_bin_str = String(describing: pad_left((right_bin_str as! String), 2))
        temp = String(describing: apply_table(((_p(left_bin_str) + _p(right_bin_str)) as! String), (p4_table as! [Int])))
        temp = String(describing: xor((left as! String), (temp as! String)))
        return (_p(temp) + _p(right))
    }
    let key = "1010000010"
    let message = "11010111"
    let p8_table: [Int] = ({
        var _arr: [Int] = []
        _arr = _append(_arr, 6)
        _arr = _append(_arr, 3)
        _arr = _append(_arr, 7)
        _arr = _append(_arr, 4)
        _arr = _append(_arr, 8)
        _arr = _append(_arr, 5)
        _arr = _append(_arr, 10)
        _arr = _append(_arr, 9)
        return _arr
    }() as! [Int])
    let p10_table: [Int] = ({
        var _arr: [Int] = []
        _arr = _append(_arr, 3)
        _arr = _append(_arr, 5)
        _arr = _append(_arr, 2)
        _arr = _append(_arr, 7)
        _arr = _append(_arr, 4)
        _arr = _append(_arr, 10)
        _arr = _append(_arr, 1)
        _arr = _append(_arr, 9)
        _arr = _append(_arr, 8)
        _arr = _append(_arr, 6)
        return _arr
    }() as! [Int])
    let IP: [Int] = ({
        var _arr: [Int] = []
        _arr = _append(_arr, 2)
        _arr = _append(_arr, 6)
        _arr = _append(_arr, 3)
        _arr = _append(_arr, 1)
        _arr = _append(_arr, 4)
        _arr = _append(_arr, 8)
        _arr = _append(_arr, 5)
        _arr = _append(_arr, 7)
        return _arr
    }() as! [Int])
    let IP_inv: [Int] = ({
        var _arr: [Int] = []
        _arr = _append(_arr, 4)
        _arr = _append(_arr, 1)
        _arr = _append(_arr, 3)
        _arr = _append(_arr, 5)
        _arr = _append(_arr, 7)
        _arr = _append(_arr, 2)
        _arr = _append(_arr, 8)
        _arr = _append(_arr, 6)
        return _arr
    }() as! [Int])
    let expansion: [Int] = ({
        var _arr: [Int] = []
        _arr = _append(_arr, 4)
        _arr = _append(_arr, 1)
        _arr = _append(_arr, 2)
        _arr = _append(_arr, 3)
        _arr = _append(_arr, 2)
        _arr = _append(_arr, 3)
        _arr = _append(_arr, 4)
        _arr = _append(_arr, 1)
        return _arr
    }() as! [Int])
    let s0: [[Int]] = ({
        var _arr: [[Int]] = []
        _arr = _append(_arr, ({
            var _arr: [Int] = []
            _arr = _append(_arr, 1)
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 3)
            _arr = _append(_arr, 2)
            return _arr
        }() as! [Int]))
        _arr = _append(_arr, ({
            var _arr: [Int] = []
            _arr = _append(_arr, 3)
            _arr = _append(_arr, 2)
            _arr = _append(_arr, 1)
            _arr = _append(_arr, 0)
            return _arr
        }() as! [Int]))
        _arr = _append(_arr, ({
            var _arr: [Int] = []
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 2)
            _arr = _append(_arr, 1)
            _arr = _append(_arr, 3)
            return _arr
        }() as! [Int]))
        _arr = _append(_arr, ({
            var _arr: [Int] = []
            _arr = _append(_arr, 3)
            _arr = _append(_arr, 1)
            _arr = _append(_arr, 3)
            _arr = _append(_arr, 2)
            return _arr
        }() as! [Int]))
        return _arr
    }() as! [[Int]])
    let s1: [[Int]] = ({
        var _arr: [[Int]] = []
        _arr = _append(_arr, ({
            var _arr: [Int] = []
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 1)
            _arr = _append(_arr, 2)
            _arr = _append(_arr, 3)
            return _arr
        }() as! [Int]))
        _arr = _append(_arr, ({
            var _arr: [Int] = []
            _arr = _append(_arr, 2)
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 1)
            _arr = _append(_arr, 3)
            return _arr
        }() as! [Int]))
        _arr = _append(_arr, ({
            var _arr: [Int] = []
            _arr = _append(_arr, 3)
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 1)
            _arr = _append(_arr, 0)
            return _arr
        }() as! [Int]))
        _arr = _append(_arr, ({
            var _arr: [Int] = []
            _arr = _append(_arr, 2)
            _arr = _append(_arr, 1)
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 3)
            return _arr
        }() as! [Int]))
        return _arr
    }() as! [[Int]])
    var temp = String(describing: apply_table((key as! String), (p10_table as! [Int])))
    var left = String(_slice(Array(temp), 0, 5))
    var right = String(_slice(Array(temp), 5, 10))
    left = String(describing: left_shift((left as! String)))
    right = String(describing: left_shift((right as! String)))
    let key1 = String(describing: apply_table(((_p(left) + _p(right)) as! String), (p8_table as! [Int])))
    left = String(describing: left_shift((left as! String)))
    right = String(describing: left_shift((right as! String)))
    left = String(describing: left_shift((left as! String)))
    right = String(describing: left_shift((right as! String)))
    let key2 = String(describing: apply_table(((_p(left) + _p(right)) as! String), (p8_table as! [Int])))
    temp = String(describing: apply_table((message as! String), (IP as! [Int])))
    temp = String(describing: f((expansion as! [Int]), (s0 as! [[Int]]), (s1 as! [[Int]]), (key1 as! String), (temp as! String)))
    temp = ((_p(String(_slice(Array(temp), 4, 8))) + _p(String(_slice(Array(temp), 0, 4)))) as! String)
    temp = String(describing: f((expansion as! [Int]), (s0 as! [[Int]]), (s1 as! [[Int]]), (key2 as! String), (temp as! String)))
    let CT = String(describing: apply_table((temp as! String), (IP_inv as! [Int])))
    print(_p((_p("Cipher text is: ") + _p(CT))))
    temp = String(describing: apply_table((CT as! String), (IP as! [Int])))
    temp = String(describing: f((expansion as! [Int]), (s0 as! [[Int]]), (s1 as! [[Int]]), (key2 as! String), (temp as! String)))
    temp = ((_p(String(_slice(Array(temp), 4, 8))) + _p(String(_slice(Array(temp), 0, 4)))) as! String)
    temp = String(describing: f((expansion as! [Int]), (s0 as! [[Int]]), (s1 as! [[Int]]), (key1 as! String), (temp as! String)))
    let PT = String(describing: apply_table((temp as! String), (IP_inv as! [Int])))
    print(_p((_p("Plain text after decypting is: ") + _p(PT))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
