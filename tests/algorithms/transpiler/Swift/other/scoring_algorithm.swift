// Generated by Mochi transpiler v0.10.64 on 2025-08-12 16:34:34 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func get_data(_ source_data: [[Double]]) -> [[Double]] {
        var data_lists: [[Double]] = ([] as! [[Double]])
        var i = 0
        while (i < _int(((source_data).count))) {
            let row: [Double] = (_idx(source_data, i) as! [Double])
            var j = 0
            while (j < _int(((row).count))) {
                if (_int(((data_lists).count)) < (j &+ 1)) {
                    var empty: [Double] = ([] as! [Double])
                    data_lists = (_append(data_lists, empty) as! [[Double]])
                }
                data_lists = _set(data_lists, j, (_append((_idx(data_lists, j) as! [Double]), Double(_idx(row, j))) as! [Double]))
                j = _int((j &+ 1))
            }
            i = _int((i &+ 1))
        }
        return data_lists
    }
    func calculate_each_score(_ data_lists: [[Double]], _ weights: [Int]) -> [[Double]] {
        var score_lists: [[Double]] = ([] as! [[Double]])
        var i = 0
        while (i < _int(((data_lists).count))) {
            let dlist: [Double] = (_idx(data_lists, i) as! [Double])
            let weight = (_idx(weights, i) as? Int ?? 0)
            var mind = Double(_idx(dlist, 0))
            var maxd = Double(_idx(dlist, 0))
            var j = 1
            while (j < _int(((dlist).count))) {
                let val = Double(_idx(dlist, j))
                if (val < mind) {
                    mind = Double(val)
                }
                if (val > maxd) {
                    maxd = Double(val)
                }
                j = _int((j &+ 1))
            }
            var score: [Double] = ([] as! [Double])
            j = 0
            if (weight == 0) {
                while (j < _int(((dlist).count))) {
                    let item = Double(_idx(dlist, j))
                    if ((maxd - mind) == 0.0) {
                        score = (_append(score, 1.0) as! [Double])
                    } else {
                        score = (_append(score, (1.0 - Double((Double((item - mind)) / Double((maxd - mind)))))) as! [Double])
                    }
                    j = _int((j &+ 1))
                }
            } else {
                while (j < _int(((dlist).count))) {
                    let item = Double(_idx(dlist, j))
                    if ((maxd - mind) == 0.0) {
                        score = (_append(score, 0.0) as! [Double])
                    } else {
                        score = (_append(score, (Double((item - mind)) / Double((maxd - mind)))) as! [Double])
                    }
                    j = _int((j &+ 1))
                }
            }
            score_lists = (_append(score_lists, score) as! [[Double]])
            i = _int((i &+ 1))
        }
        return score_lists
    }
    func generate_final_scores(_ score_lists: [[Double]]) -> [Double] {
        let count = _int((((_idx(score_lists, 0) as! [Double])).count))
        var final_scores: [Double] = ([] as! [Double])
        var i = 0
        while (i < count) {
            final_scores = (_append(final_scores, 0.0) as! [Double])
            i = _int((i &+ 1))
        }
        i = 0
        while (i < _int(((score_lists).count))) {
            let slist: [Double] = (_idx(score_lists, i) as! [Double])
            var j = 0
            while (j < _int(((slist).count))) {
                final_scores = _set(final_scores, j, Double((Double(_idx(final_scores, j)) + Double(_idx(slist, j)))))
                j = _int((j &+ 1))
            }
            i = _int((i &+ 1))
        }
        return final_scores
    }
    func procentual_proximity(_ source_data: inout [[Double]], _ weights: [Int]) -> [[Double]] {
        let data_lists: [[Double]] = (get_data((source_data as! [[Double]])) as! [[Double]])
        let score_lists: [[Double]] = (calculate_each_score((data_lists as! [[Double]]), (weights as! [Int])) as! [[Double]])
        let final_scores: [Double] = (generate_final_scores((score_lists as! [[Double]])) as! [Double])
        var i = 0
        while (i < _int(((final_scores).count))) {
            source_data = _set(source_data, i, (_append((_idx(source_data, i) as! [Double]), Double(_idx(final_scores, i))) as! [Double]))
            i = _int((i &+ 1))
        }
        return source_data
    }
    var vehicles: [[Double]] = ([] as! [[Double]])
    vehicles = (_append(vehicles, ({
        var _arr: [Double] = []
        _arr = _append(_arr, 20.0)
        _arr = _append(_arr, 60.0)
        _arr = _append(_arr, 2012.0)
        return _arr
    }() as! [Double])) as! [[Double]])
    vehicles = (_append(vehicles, ({
        var _arr: [Double] = []
        _arr = _append(_arr, 23.0)
        _arr = _append(_arr, 90.0)
        _arr = _append(_arr, 2015.0)
        return _arr
    }() as! [Double])) as! [[Double]])
    vehicles = (_append(vehicles, ({
        var _arr: [Double] = []
        _arr = _append(_arr, 22.0)
        _arr = _append(_arr, 50.0)
        _arr = _append(_arr, 2011.0)
        return _arr
    }() as! [Double])) as! [[Double]])
    var weights: [Int] = ({
        var _arr: [Int] = []
        _arr = _append(_arr, 0)
        _arr = _append(_arr, 0)
        _arr = _append(_arr, 1)
        return _arr
    }() as! [Int])
    let result: [[Double]] = (procentual_proximity(&vehicles, (weights as! [Int])) as! [[Double]])
    print(_p("[" + result.map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
