// Generated by Mochi transpiler v0.10.64 on 2025-08-12 16:34:13 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
struct Entry: Codable {
    var key: Int
    var val: Int
    var freq: Int
    var order: Int
    init() {
        self.key = 0
        self.val = 0
        self.freq = 0
        self.order = 0
    }
    init(key: Int, val: Int, freq: Int, order: Int) {
        self.key = key
        self.val = val
        self.freq = freq
        self.order = order
    }
}
struct LFUCache: Codable {
    var entries: [Entry]
    var capacity: Int
    var hits: Int
    var miss: Int
    var tick: Int
    init() {
        self.entries = []
        self.capacity = 0
        self.hits = 0
        self.miss = 0
        self.tick = 0
    }
    init(entries: [Entry], capacity: Int, hits: Int, miss: Int, tick: Int) {
        self.entries = entries
        self.capacity = capacity
        self.hits = hits
        self.miss = miss
        self.tick = tick
    }
}
struct GetResult: Codable {
    var cache: LFUCache
    var value: Int
    var ok: Bool
    init() {
        self.cache = LFUCache()
        self.value = 0
        self.ok = false
    }
    init(cache: LFUCache, value: Int, ok: Bool) {
        self.cache = cache
        self.value = value
        self.ok = ok
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func lfu_new(_ cap: Int) -> LFUCache {
        return LFUCache(entries: ([] as! [Entry]), capacity: Int(cap), hits: 0, miss: 0, tick: 0)
    }
    func find_entry(_ entries: [Entry], _ key: Int) -> Int {
        var i = 0
        while (i < _int(((entries).count))) {
            let e = (_idx(entries, i) as! Entry)
            if (e.key == key) {
                return i
            }
            i = _int((i &+ 1))
        }
        return (0 &- 1)
    }
    func lfu_get(_ cache: LFUCache, _ key: Int) -> GetResult {
        let idx = _int(find_entry((cache.entries as! [Entry]), key))
        if (idx == (0 &- 1)) {
            let new_cache = LFUCache(entries: (cache.entries as! [Entry]), capacity: (cache.capacity as? Int ?? 0), hits: (cache.hits as? Int ?? 0), miss: _int((cache.miss &+ 1)), tick: (cache.tick as? Int ?? 0))
            return GetResult(cache: (new_cache as! LFUCache), value: 0, ok: false)
        }
        var entries = cache.entries
        var e = (_idx(entries, idx) as! Entry)
        e.freq = _int((e.freq &+ 1))
        let new_tick = (cache.tick &+ 1)
        e.order = Int(new_tick)
        entries = _set(entries, idx, (e as! Entry))
        let new_cache = LFUCache(entries: (entries as! [Entry]), capacity: (cache.capacity as? Int ?? 0), hits: _int((cache.hits &+ 1)), miss: (cache.miss as? Int ?? 0), tick: Int(new_tick))
        return GetResult(cache: (new_cache as! LFUCache), value: (e.val as? Int ?? 0), ok: true)
    }
    func remove_lfu(_ entries: [Entry]) -> [Entry] {
        if (_int(((entries).count)) == 0) {
            return entries
        }
        var min_idx = 0
        var i = 1
        while (i < _int(((entries).count))) {
            let e = (_idx(entries, i) as! Entry)
            let m = (_idx(entries, min_idx) as! Entry)
            if ((e.freq < m.freq) || ((e.freq == m.freq) && (e.order < m.order))) {
                min_idx = Int(i)
            }
            i = _int((i &+ 1))
        }
        var res: [Entry] = ([] as! [Entry])
        var j = 0
        while (j < _int(((entries).count))) {
            if (j != min_idx) {
                res = (_append(res, (_idx(entries, j) as! Entry)) as! [Entry])
            }
            j = _int((j &+ 1))
        }
        return res
    }
    func lfu_put(_ cache: LFUCache, _ key: Int, _ value: Int) -> LFUCache {
        var entries = cache.entries
        let idx = _int(find_entry((entries as! [Entry]), key))
        if (idx != (0 &- 1)) {
            var e = (_idx(entries, idx) as! Entry)
            e.val = Int(value)
            e.freq = _int((e.freq &+ 1))
            let new_tick = (cache.tick &+ 1)
            e.order = Int(new_tick)
            entries = _set(entries, idx, (e as! Entry))
            return LFUCache(entries: (entries as! [Entry]), capacity: (cache.capacity as? Int ?? 0), hits: (cache.hits as? Int ?? 0), miss: (cache.miss as? Int ?? 0), tick: Int(new_tick))
        }
        if (_int(((entries).count)) >= cache.capacity) {
            entries = (remove_lfu((entries as! [Entry])) as! [Entry])
        }
        let new_tick = (cache.tick &+ 1)
        let new_entry = Entry(key: Int(key), val: Int(value), freq: 1, order: Int(new_tick))
        entries = (_append(entries, new_entry) as! [Entry])
        return LFUCache(entries: (entries as! [Entry]), capacity: (cache.capacity as? Int ?? 0), hits: (cache.hits as? Int ?? 0), miss: (cache.miss as? Int ?? 0), tick: Int(new_tick))
    }
    func cache_info(_ cache: LFUCache) -> String {
        return (((((((("CacheInfo(hits=" + _p(cache.hits)) + ", misses=") + _p(cache.miss)) + ", capacity=") + _p(cache.capacity)) + ", current_size=") + _p(_int(((cache.entries).count)))) + ")")
    }
    func main() {
        var cache = lfu_new(2)
        cache = (lfu_put((cache as! LFUCache), 1, 1) as! LFUCache)
        cache = (lfu_put((cache as! LFUCache), 2, 2) as! LFUCache)
        var r = lfu_get((cache as! LFUCache), 1)
        cache = (r.cache as! LFUCache)
        if r.ok {
            print(_p(_p(r.value)))
        } else {
            print(_p("None"))
        }
        cache = (lfu_put((cache as! LFUCache), 3, 3) as! LFUCache)
        r = (lfu_get((cache as! LFUCache), 2) as! GetResult)
        cache = (r.cache as! LFUCache)
        if r.ok {
            print(_p(_p(r.value)))
        } else {
            print(_p("None"))
        }
        cache = (lfu_put((cache as! LFUCache), 4, 4) as! LFUCache)
        r = (lfu_get((cache as! LFUCache), 1) as! GetResult)
        cache = (r.cache as! LFUCache)
        if r.ok {
            print(_p(_p(r.value)))
        } else {
            print(_p("None"))
        }
        r = (lfu_get((cache as! LFUCache), 3) as! GetResult)
        cache = (r.cache as! LFUCache)
        if r.ok {
            print(_p(_p(r.value)))
        } else {
            print(_p("None"))
        }
        r = (lfu_get((cache as! LFUCache), 4) as! GetResult)
        cache = (r.cache as! LFUCache)
        if r.ok {
            print(_p(_p(r.value)))
        } else {
            print(_p("None"))
        }
        print(_p(String(describing: cache_info((cache as! LFUCache)))))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
