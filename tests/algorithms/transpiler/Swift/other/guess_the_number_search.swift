// Generated by Mochi transpiler v0.10.64 on 2025-08-12 16:34:06 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func get_avg(_ number_1: Int, _ number_2: Int) -> Int {
        return (_int((number_1 &+ number_2)) / 2)
    }
    func guess_the_number(_ lower: Int, _ higher: Int, _ to_guess: Int) -> [Int] {
        if (lower > higher) {
            _ = fatalError("argument value for lower and higher must be(lower > higher)")
        }
        if (!((lower < to_guess) && (to_guess < higher))) {
            _ = fatalError("guess value must be within the range of lower and higher value")
        }
        func answer(_ number: Int) -> String {
            if (number > to_guess) {
                return "high"
            } else if (number < to_guess) {
                return "low"
            } else {
                return "same"
            }
            
        }
        print(_p("started..."))
        var last_lowest = lower
        var last_highest = higher
        var last_numbers: [Int] = ([] as! [Int])
        while true {
            let number = _int(get_avg(last_lowest, last_highest))
            last_numbers = (_append(last_numbers, number) as! [Int])
            let resp = String(describing: answer(number))
            if (resp == "low") {
                last_lowest = Int(number)
            } else if (resp == "high") {
                last_highest = Int(number)
            } else {
                break
            }
            
        }
        print(_p(("guess the number : " + _p((_idx(last_numbers, (_int(((last_numbers).count)) &- 1)) as? Int ?? 0)))))
        print(_p(("details : " + "[" + last_numbers.map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]")))
        return last_numbers
    }
    _ = (guess_the_number(10, 1000, 17) as! [Int])
    _ = (guess_the_number(-10000, 10000, 7) as! [Int])
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
