// Generated by Mochi transpiler v0.10.64 on 2025-08-12 16:33:23 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
struct State: Codable {
    var claim: [Int]
    var alloc: [[Int]]
    var max: [[Int]]
    init() {
        self.claim = []
        self.alloc = []
        self.max = []
    }
    init(claim: [Int], alloc: [[Int]], max: [[Int]]) {
        self.claim = claim
        self.alloc = alloc
        self.max = max
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func processes_resource_summation(_ alloc: [[Int]]) -> [Int] {
        let resources = _int((((_idx(alloc, 0) as! [Int])).count))
        var sums: [Int] = ([] as! [Int])
        var i = 0
        while (i < resources) {
            var total = 0
            var j = 0
            while (j < _int(((alloc).count))) {
                total = _int((total &+ (_idx(_idx(alloc, j)!, i) as? Int ?? 0)))
                j = _int((j &+ 1))
            }
            sums = (_append(sums, total) as! [Int])
            i = _int((i &+ 1))
        }
        return sums
    }
    func available_resources(_ claim: [Int], _ alloc_sum: [Int]) -> [Int] {
        var avail: [Int] = ([] as! [Int])
        var i = 0
        while (i < _int(((claim).count))) {
            avail = (_append(avail, ((_idx(claim, i) as? Int ?? 0) &- (_idx(alloc_sum, i) as? Int ?? 0))) as! [Int])
            i = _int((i &+ 1))
        }
        return avail
    }
    func need(_ max: [[Int]], _ alloc: [[Int]]) -> [[Int]] {
        var needs: [[Int]] = ([] as! [[Int]])
        var i = 0
        while (i < _int(((max).count))) {
            var row: [Int] = ([] as! [Int])
            var j = 0
            while (j < _int((((_idx(max, 0) as! [Int])).count))) {
                row = (_append(row, ((_idx(_idx(max, i)!, j) as? Int ?? 0) &- (_idx(_idx(alloc, i)!, j) as? Int ?? 0))) as! [Int])
                j = _int((j &+ 1))
            }
            needs = (_append(needs, row) as! [[Int]])
            i = _int((i &+ 1))
        }
        return needs
    }
    func pretty_print(_ claim: [Int], _ alloc: [[Int]], _ max: [[Int]]) -> Void {
        print(_p("         Allocated Resource Table"))
        var i = 0
        while (i < _int(((alloc).count))) {
            var row = (_idx(alloc, i) as! [Int])
            var line = (("P" + _p((i &+ 1))) + "       ")
            var j = 0
            while (j < _int(((row).count))) {
                line = ((line + _p((_idx(row, j) as? Int ?? 0))) as! String)
                if (j < (_int(((row).count)) &- 1)) {
                    line = ((line + "        ") as! String)
                }
                j = _int((j &+ 1))
            }
            print(_p(line))
            print(_p(""))
            i = _int((i &+ 1))
        }
        print(_p("         System Resource Table"))
        i = 0
        while (i < _int(((max).count))) {
            var row = (_idx(max, i) as! [Int])
            var line = (("P" + _p((i &+ 1))) + "       ")
            var j = 0
            while (j < _int(((row).count))) {
                line = ((line + _p((_idx(row, j) as? Int ?? 0))) as! String)
                if (j < (_int(((row).count)) &- 1)) {
                    line = ((line + "        ") as! String)
                }
                j = _int((j &+ 1))
            }
            print(_p(line))
            print(_p(""))
            i = _int((i &+ 1))
        }
        var usage = ""
        i = 0
        while (i < _int(((claim).count))) {
            if (i > 0) {
                usage = ((usage + " ") as! String)
            }
            usage = ((usage + _p((_idx(claim, i) as? Int ?? 0))) as! String)
            i = _int((i &+ 1))
        }
        var alloc_sum = (processes_resource_summation((alloc as! [[Int]])) as! [Int])
        var avail = (available_resources((claim as! [Int]), (alloc_sum as! [Int])) as! [Int])
        var avail_str = ""
        i = 0
        while (i < _int(((avail).count))) {
            if (i > 0) {
                avail_str = ((avail_str + " ") as! String)
            }
            avail_str = ((avail_str + _p((_idx(avail, i) as? Int ?? 0))) as! String)
            i = _int((i &+ 1))
        }
        print(_p(("Current Usage by Active Processes: " + usage)))
        print(_p(("Initial Available Resources:       " + avail_str)))
    }
    func bankers_algorithm(_ claim: [Int], _ alloc: [[Int]], _ max: [[Int]]) -> Void {
        var need_list = (need((max as! [[Int]]), (alloc as! [[Int]])) as! [[Int]])
        var alloc_sum = (processes_resource_summation((alloc as! [[Int]])) as! [Int])
        var avail = (available_resources((claim as! [Int]), (alloc_sum as! [Int])) as! [Int])
        print(_p("__________________________________________________"))
        print(_p(""))
        var finished: [Bool] = ([] as! [Bool])
        var i = 0
        while (i < _int(((need_list).count))) {
            finished = (_append(finished, false) as! [Bool])
            i = _int((i &+ 1))
        }
        var remaining = _int(((need_list).count))
        while (remaining > 0) {
            var safe = false
            var p = 0
            while (p < _int(((need_list).count))) {
                if !(_idx(finished, p) ?? false) {
                    var exec = true
                    var r = 0
                    while (r < _int(((avail).count))) {
                        if ((_idx(_idx(need_list, p)!, r) as? Int ?? 0) > (_idx(avail, r) as? Int ?? 0)) {
                            exec = false
                            break
                        }
                        r = _int((r &+ 1))
                    }
                    if exec {
                        safe = true
                        print(_p((("Process " + _p((p &+ 1))) + " is executing.")))
                        r = 0
                        while (r < _int(((avail).count))) {
                            avail = _set(avail, r, _int(((_idx(avail, r) as? Int ?? 0) &+ (_idx(_idx(alloc, p)!, r) as? Int ?? 0))))
                            r = _int((r &+ 1))
                        }
                        var avail_str = ""
                        r = 0
                        while (r < _int(((avail).count))) {
                            if (r > 0) {
                                avail_str = ((avail_str + " ") as! String)
                            }
                            avail_str = ((avail_str + _p((_idx(avail, r) as? Int ?? 0))) as! String)
                            r = _int((r &+ 1))
                        }
                        print(_p(("Updated available resource stack for processes: " + avail_str)))
                        print(_p("The process is in a safe state."))
                        print(_p(""))
                        finished = _set(finished, p, true)
                        remaining = _int((remaining &- 1))
                    }
                }
                p = _int((p &+ 1))
            }
            if (!safe) {
                print(_p("System in unsafe state. Aborting..."))
                print(_p(""))
                break
            }
        }
    }
    var claim_vector: [Int] = ({
        var _arr: [Int] = []
        _arr = _append(_arr, 8)
        _arr = _append(_arr, 5)
        _arr = _append(_arr, 9)
        _arr = _append(_arr, 7)
        return _arr
    }() as! [Int])
    var allocated_resources_table: [[Int]] = ({
        var _arr: [[Int]] = []
        _arr = _append(_arr, ({
            var _arr: [Int] = []
            _arr = _append(_arr, 2)
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 1)
            _arr = _append(_arr, 1)
            return _arr
        }() as! [Int]))
        _arr = _append(_arr, ({
            var _arr: [Int] = []
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 1)
            _arr = _append(_arr, 2)
            _arr = _append(_arr, 1)
            return _arr
        }() as! [Int]))
        _arr = _append(_arr, ({
            var _arr: [Int] = []
            _arr = _append(_arr, 4)
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 3)
            return _arr
        }() as! [Int]))
        _arr = _append(_arr, ({
            var _arr: [Int] = []
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 2)
            _arr = _append(_arr, 1)
            _arr = _append(_arr, 0)
            return _arr
        }() as! [Int]))
        _arr = _append(_arr, ({
            var _arr: [Int] = []
            _arr = _append(_arr, 1)
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 3)
            _arr = _append(_arr, 0)
            return _arr
        }() as! [Int]))
        return _arr
    }() as! [[Int]])
    var maximum_claim_table: [[Int]] = ({
        var _arr: [[Int]] = []
        _arr = _append(_arr, ({
            var _arr: [Int] = []
            _arr = _append(_arr, 3)
            _arr = _append(_arr, 2)
            _arr = _append(_arr, 1)
            _arr = _append(_arr, 4)
            return _arr
        }() as! [Int]))
        _arr = _append(_arr, ({
            var _arr: [Int] = []
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 2)
            _arr = _append(_arr, 5)
            _arr = _append(_arr, 2)
            return _arr
        }() as! [Int]))
        _arr = _append(_arr, ({
            var _arr: [Int] = []
            _arr = _append(_arr, 5)
            _arr = _append(_arr, 1)
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 5)
            return _arr
        }() as! [Int]))
        _arr = _append(_arr, ({
            var _arr: [Int] = []
            _arr = _append(_arr, 1)
            _arr = _append(_arr, 5)
            _arr = _append(_arr, 3)
            _arr = _append(_arr, 0)
            return _arr
        }() as! [Int]))
        _arr = _append(_arr, ({
            var _arr: [Int] = []
            _arr = _append(_arr, 3)
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 3)
            _arr = _append(_arr, 3)
            return _arr
        }() as! [Int]))
        return _arr
    }() as! [[Int]])
    _ = pretty_print((claim_vector as! [Int]), (allocated_resources_table as! [[Int]]), (maximum_claim_table as! [[Int]]))
    _ = bankers_algorithm((claim_vector as! [Int]), (allocated_resources_table as! [[Int]]), (maximum_claim_table as! [[Int]]))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
