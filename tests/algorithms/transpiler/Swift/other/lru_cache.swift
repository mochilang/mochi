// Generated by Mochi transpiler v0.10.64 on 2025-08-12 10:13:20 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
struct Node: Codable {
    var key: Int
    var value: Int
    var prev: Int
    var next: Int
    init() {
        self.key = 0
        self.value = 0
        self.prev = 0
        self.next = 0
    }
    init(key: Int, value: Int, prev: Int, next: Int) {
        self.key = key
        self.value = value
        self.prev = prev
        self.next = next
    }
}
struct DoubleLinkedList: Codable {
    var nodes: [Node]
    var head: Int
    var tail: Int
    init() {
        self.nodes = []
        self.head = 0
        self.tail = 0
    }
    init(nodes: [Node], head: Int, tail: Int) {
        self.nodes = nodes
        self.head = head
        self.tail = tail
    }
}
struct LRUCache: Codable {
    var list: DoubleLinkedList
    var capacity: Int
    var num_keys: Int
    var hits: Int
    var misses: Int
    var cache: [String: Int]
    init() {
        self.list = DoubleLinkedList()
        self.capacity = 0
        self.num_keys = 0
        self.hits = 0
        self.misses = 0
        self.cache = [:]
    }
    init(list: DoubleLinkedList, capacity: Int, num_keys: Int, hits: Int, misses: Int, cache: [String: Int]) {
        self.list = list
        self.capacity = capacity
        self.num_keys = num_keys
        self.hits = hits
        self.misses = misses
        self.cache = cache
    }
}
struct GetResult: Codable {
    var cache: LRUCache
    var value: Int
    var ok: Bool
    init() {
        self.cache = LRUCache()
        self.value = 0
        self.ok = false
    }
    init(cache: LRUCache, value: Int, ok: Bool) {
        self.cache = cache
        self.value = value
        self.ok = ok
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func new_list() -> DoubleLinkedList {
        var nodes: [Node] = ([] as! [Node])
        let head = Node(key: 0, value: 0, prev: _int((0 &- 1)), next: 1)
        let tail = Node(key: 0, value: 0, prev: 0, next: _int((0 &- 1)))
        nodes = (_append(nodes, head) as! [Node])
        nodes = (_append(nodes, tail) as! [Node])
        return DoubleLinkedList(nodes: (nodes as! [Node]), head: 0, tail: 1)
    }
    func dll_add(_ lst: inout DoubleLinkedList, _ idx: Int) -> DoubleLinkedList {
        var nodes = lst.nodes
        let tail_idx = lst.tail
        var tail_node = (_idx(nodes, tail_idx) as! Node)
        let prev_idx = tail_node.prev
        var node = (_idx(nodes, idx) as! Node)
        node.prev = Int(prev_idx)
        node.next = Int(tail_idx)
        nodes = _set(nodes, idx, (node as! Node))
        var prev_node = (_idx(nodes, prev_idx) as! Node)
        prev_node.next = Int(idx)
        nodes = _set(nodes, prev_idx, (prev_node as! Node))
        tail_node.prev = Int(idx)
        nodes = _set(nodes, tail_idx, (tail_node as! Node))
        lst.nodes = (nodes as! [Node])
        return lst
    }
    func dll_remove(_ lst: inout DoubleLinkedList, _ idx: Int) -> DoubleLinkedList {
        var nodes = lst.nodes
        var node = (_idx(nodes, idx) as! Node)
        let prev_idx = node.prev
        let next_idx = node.next
        if ((prev_idx == (0 &- 1)) || (next_idx == (0 &- 1))) {
            return lst
        }
        var prev_node = (_idx(nodes, prev_idx) as! Node)
        prev_node.next = Int(next_idx)
        nodes = _set(nodes, prev_idx, (prev_node as! Node))
        var next_node = (_idx(nodes, next_idx) as! Node)
        next_node.prev = Int(prev_idx)
        nodes = _set(nodes, next_idx, (next_node as! Node))
        node.prev = _int((0 &- 1))
        node.next = _int((0 &- 1))
        nodes = _set(nodes, idx, (node as! Node))
        lst.nodes = (nodes as! [Node])
        return lst
    }
    func new_cache(_ cap: Int) -> LRUCache {
        var empty_map: [String: Int] = ([:] as! [String: Int])
        return LRUCache(list: (new_list() as! DoubleLinkedList), capacity: Int(cap), num_keys: 0, hits: 0, misses: 0, cache: (empty_map as! [String: Int]))
    }
    func lru_get(_ c: LRUCache, _ key: Int) -> GetResult {
        var cache = c
        let key_str = _p(key)
        if (cache.cache[key_str] != nil) {
            let idx = (cache.cache[String(String(describing: key_str))] as? Int ?? 0)
            if (idx != (0 &- 1)) {
                cache.hits = _int((cache.hits &+ 1))
                let node = (_idx(cache.list.nodes, idx) as! Node)
                let value = node.value
                cache.list = (dll_remove(&cache.list, idx) as! DoubleLinkedList)
                cache.list = (dll_add(&cache.list, idx) as! DoubleLinkedList)
                return GetResult(cache: (cache as! LRUCache), value: Int(value), ok: true)
            }
        }
        cache.misses = _int((cache.misses &+ 1))
        return GetResult(cache: (cache as! LRUCache), value: 0, ok: false)
    }
    func lru_put(_ c: LRUCache, _ key: Int, _ value: Int) -> LRUCache {
        var cache = c
        let key_str = _p(key)
        if (!(cache.cache[key_str] != nil)) {
            if (cache.num_keys >= cache.capacity) {
                let head_node = (_idx(cache.list.nodes, cache.list.head) as! Node)
                let first_idx = head_node.next
                let first_node = (_idx(cache.list.nodes, first_idx) as! Node)
                let old_key = first_node.key
                cache.list = (dll_remove(&cache.list, first_idx) as! DoubleLinkedList)
                var mdel = cache.cache
                mdel = _set(mdel, _p(old_key), _int((0 &- 1)))
                cache.cache = (mdel as! [String: Int])
                cache.num_keys = _int((cache.num_keys &- 1))
            }
            var nodes = cache.list.nodes
            let new_node = Node(key: Int(key), value: Int(value), prev: _int((0 &- 1)), next: _int((0 &- 1)))
            nodes = (_append(nodes, new_node) as! [Node])
            let idx = (_int(((nodes).count)) &- 1)
            cache.list.nodes = (nodes as! [Node])
            cache.list = (dll_add(&cache.list, idx) as! DoubleLinkedList)
            var m = cache.cache
            m = _set(m, String(describing: key_str), Int(idx))
            cache.cache = (m as! [String: Int])
            cache.num_keys = _int((cache.num_keys &+ 1))
        } else {
            var m = cache.cache
            let idx = (m[String(String(describing: key_str))] as? Int ?? 0)
            var nodes = cache.list.nodes
            var node = (_idx(nodes, idx) as! Node)
            node.value = Int(value)
            nodes = _set(nodes, idx, (node as! Node))
            cache.list.nodes = (nodes as! [Node])
            cache.list = (dll_remove(&cache.list, idx) as! DoubleLinkedList)
            cache.list = (dll_add(&cache.list, idx) as! DoubleLinkedList)
            cache.cache = (m as! [String: Int])
        }
        return cache
    }
    func cache_info(_ cache: LRUCache) -> String {
        return (((((((("CacheInfo(hits=" + _p(cache.hits)) + ", misses=") + _p(cache.misses)) + ", capacity=") + _p(cache.capacity)) + ", current size=") + _p(cache.num_keys)) + ")")
    }
    func print_result(_ res: GetResult) {
        if res.ok {
            print(_p(_p(res.value)))
        } else {
            print(_p("None"))
        }
    }
    func main() {
        var cache = new_cache(2)
        cache = (lru_put((cache as! LRUCache), 1, 1) as! LRUCache)
        cache = (lru_put((cache as! LRUCache), 2, 2) as! LRUCache)
        var r1 = lru_get((cache as! LRUCache), 1)
        cache = (r1.cache as! LRUCache)
        _ = print_result((r1 as! GetResult))
        cache = (lru_put((cache as! LRUCache), 3, 3) as! LRUCache)
        var r2 = lru_get((cache as! LRUCache), 2)
        cache = (r2.cache as! LRUCache)
        _ = print_result((r2 as! GetResult))
        cache = (lru_put((cache as! LRUCache), 4, 4) as! LRUCache)
        var r3 = lru_get((cache as! LRUCache), 1)
        cache = (r3.cache as! LRUCache)
        _ = print_result((r3 as! GetResult))
        var r4 = lru_get((cache as! LRUCache), 3)
        cache = (r4.cache as! LRUCache)
        _ = print_result((r4 as! GetResult))
        var r5 = lru_get((cache as! LRUCache), 4)
        cache = (r5.cache as! LRUCache)
        _ = print_result((r5 as! GetResult))
        print(_p(String(describing: cache_info((cache as! LRUCache)))))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
