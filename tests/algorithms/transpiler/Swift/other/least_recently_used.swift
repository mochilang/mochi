// Generated by Mochi transpiler v0.10.64 on 2025-08-12 16:34:10 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
struct LRUCache: Codable {
    var max_capacity: Int
    var store: [String]
    init() {
        self.max_capacity = 0
        self.store = []
    }
    init(max_capacity: Int, store: [String]) {
        self.max_capacity = max_capacity
        self.store = store
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func new_cache(_ n: Int) -> LRUCache {
        if (n < 0) {
            _ = fatalError("n should be an integer greater than 0.")
        }
        let cap = _int(((n == 0) ? 2147483647 : n))
        return LRUCache(max_capacity: Int(cap), store: ([] as! [String]))
    }
    func remove_element(_ xs: [String], _ x: String) -> [String] {
        var res: [String] = ([] as! [String])
        var removed = false
        var i = 0
        while (i < _int(((xs).count))) {
            let v = (_idx(xs, i) as! String)
            if ((removed == false) && (v == x)) {
                removed = true
            } else {
                res = ((res + ({
                    var _arr: [String] = []
                    _arr = _append(_arr, v)
                    return _arr
                }() as! [String])) as! [String])
            }
            i = _int((i &+ 1))
        }
        return res
    }
    func refer(_ cache: LRUCache, _ x: String) -> LRUCache {
        var store = cache.store
        var exists = false
        var i = 0
        while (i < _int(((store).count))) {
            if ((_idx(store, i) as! String) == x) {
                exists = true
            }
            i = _int((i &+ 1))
        }
        if exists {
            store = (remove_element((store as! [String]), (x as! String)) as! [String])
        } else {
            if (_int(((store).count)) == cache.max_capacity) {
                var new_store: [String] = ([] as! [String])
                var j = 0
                while (j < (_int(((store).count)) &- 1)) {
                    new_store = ((new_store + ({
                        var _arr: [String] = []
                        _arr = _append(_arr, (_idx(store, j) as! String))
                        return _arr
                    }() as! [String])) as! [String])
                    j = _int((j &+ 1))
                }
                store = (new_store as! [String])
            }
        }
        store = ((({
            var _arr: [String] = []
            _arr = _append(_arr, x)
            return _arr
        }() as! [String]) + store) as! [String])
        return LRUCache(max_capacity: (cache.max_capacity as? Int ?? 0), store: (store as! [String]))
    }
    func display(_ cache: LRUCache) {
        var i = 0
        while (i < _int(((cache.store).count))) {
            print(_p((_idx(cache.store, i) as! String)))
            i = _int((i &+ 1))
        }
    }
    func repr_item(_ s: String) -> String {
        var all_digits = true
        var i = 0
        while (i < _int(((s).count))) {
            let ch = (String(Array(s)[i]) as! String)
            if ((ch < "0") || (ch > "9")) {
                all_digits = false
            }
            i = _int((i &+ 1))
        }
        if all_digits {
            return s
        }
        return (("'" + s) + "'")
    }
    func cache_repr(_ cache: LRUCache) -> String {
        var res = (("LRUCache(" + _p(cache.max_capacity)) + ") => [")
        var i = 0
        while (i < _int(((cache.store).count))) {
            res = ((res + String(describing: repr_item((_idx(cache.store, i) as! String)))) as! String)
            if (i < (_int(((cache.store).count)) &- 1)) {
                res = ((res + ", ") as! String)
            }
            i = _int((i &+ 1))
        }
        res = ((res + "]") as! String)
        return res
    }
    var lru = new_cache(4)
    lru = (refer((lru as! LRUCache), "A") as! LRUCache)
    lru = (refer((lru as! LRUCache), "2") as! LRUCache)
    lru = (refer((lru as! LRUCache), "3") as! LRUCache)
    lru = (refer((lru as! LRUCache), "A") as! LRUCache)
    lru = (refer((lru as! LRUCache), "4") as! LRUCache)
    lru = (refer((lru as! LRUCache), "5") as! LRUCache)
    var r = String(describing: cache_repr((lru as! LRUCache)))
    print(_p(r))
    if (r != "LRUCache(4) => [5, 4, 'A', 3]") {
        _ = fatalError("Assertion error")
    }
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
