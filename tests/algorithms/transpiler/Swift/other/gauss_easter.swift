// Generated by Mochi transpiler v0.10.64 on 2025-08-12 16:34:01 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
struct EasterDate: Codable {
    var month: Int
    var day: Int
    init() {
        self.month = 0
        self.day = 0
    }
    init(month: Int, day: Int) {
        self.month = month
        self.day = day
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func gauss_easter(_ year: Int) -> EasterDate {
        let metonic_cycle = ((year % 19 + 19) % 19)
        let julian_leap_year = ((year % 4 + 4) % 4)
        let non_leap_year = ((year % 7 + 7) % 7)
        let leap_day_inhibits = (year / 100)
        let lunar_orbit_correction = (_int((13 &+ (8 &* leap_day_inhibits))) / 25)
        let leap_day_reinstall_number = (Double(leap_day_inhibits) / 4.0)
        let secular_moon_shift = (Double((((15.0 - Double(lunar_orbit_correction)) + Double(leap_day_inhibits)) - leap_day_reinstall_number)).truncatingRemainder(dividingBy: 30.0))
        let century_starting_point = (Double(((4.0 + Double(leap_day_inhibits)) - leap_day_reinstall_number)).truncatingRemainder(dividingBy: 7.0))
        let days_to_add = (Double(((19.0 * Double(metonic_cycle)) + secular_moon_shift)).truncatingRemainder(dividingBy: 30.0))
        let days_from_phm_to_sunday = (Double(((((2.0 * Double(julian_leap_year)) + (4.0 * Double(non_leap_year))) + (6.0 * days_to_add)) + century_starting_point)).truncatingRemainder(dividingBy: 7.0))
        if ((days_to_add == 29.0) && (days_from_phm_to_sunday == 6.0)) {
            return EasterDate(month: 4, day: 19)
        }
        if ((days_to_add == 28.0) && (days_from_phm_to_sunday == 6.0)) {
            return EasterDate(month: 4, day: 18)
        }
        let offset = _int((days_to_add + days_from_phm_to_sunday))
        let total = (22 &+ offset)
        if (total > 31) {
            return EasterDate(month: 4, day: _int((total &- 31)))
        }
        return EasterDate(month: 3, day: Int(total))
    }
    func format_date(_ year: Int, _ d: EasterDate) -> String {
        let month = String(describing: ((d.month < 10) ? ("0" + _p(d.month)) : _p(d.month)))
        let day = String(describing: ((d.day < 10) ? ("0" + _p(d.day)) : _p(d.day)))
        return ((((_p(year) + "-") + month) + "-") + day)
    }
    let years: [Int] = ({
        var _arr: [Int] = []
        _arr = _append(_arr, 1994)
        _arr = _append(_arr, 2000)
        _arr = _append(_arr, 2010)
        _arr = _append(_arr, 2021)
        _arr = _append(_arr, 2023)
        _arr = _append(_arr, 2032)
        _arr = _append(_arr, 2100)
        return _arr
    }() as! [Int])
    var i = 0
    while (i < _int(((years).count))) {
        let y = (_idx(years, i) as? Int ?? 0)
        let e = gauss_easter(y)
        print(_p(((("Easter in " + _p(y)) + " is ") + String(describing: format_date(y, (e as! EasterDate))))))
        i = _int((i &+ 1))
    }
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
