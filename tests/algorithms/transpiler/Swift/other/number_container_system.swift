// Generated by Mochi transpiler v0.10.69 on 2025-08-19 16:46:01 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.isNaN || d.isInfinite {
                return String(d)
            }
            if d.rounded(.towardZero) == d {
                // avoid overflow when converting to Int64
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _num(_ v: Any) -> Double {
    if let d = v as? Double { return d }
    if let i = v as? Int { return Double(i) }
    if let i = v as? Int64 { return Double(i) }
    return 0
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first!
}
func _idx<K: Hashable, V>(_ m: [K: V], _ k: K) -> V? {
    return m[k]
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
struct NumberContainer: Codable {
    var numbermap: [Int: [Int]]
    var indexmap: [Int: Int]
    init() {
        self.numbermap = [:]
        self.indexmap = [:]
    }
    init(numbermap: [Int: [Int]], indexmap: [Int: Int]) {
        self.numbermap = numbermap
        self.indexmap = indexmap
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func remove_at(_ xs: [Int], _ idx: Int) -> [Int] {
        var res: [Int] = ([] as! [Int])
        var i = 0
        while (i < _int(((xs).count))) {
            if ((i != idx)) {
                res = (_append(res, (_idx(xs, i) as? Int ?? 0)) as! [Int])
            }
            i = _int((i &+ 1))
        }
        return res
    }
    func insert_at(_ xs: [Int], _ idx: Int, _ val: Int) -> [Int] {
        var res: [Int] = ([] as! [Int])
        var i = 0
        while (i < _int(((xs).count))) {
            if ((i == idx)) {
                res = (_append(res, val) as! [Int])
            }
            res = (_append(res, (_idx(xs, i) as? Int ?? 0)) as! [Int])
            i = _int((i &+ 1))
        }
        if ((idx == _int(((xs).count)))) {
            res = (_append(res, val) as! [Int])
        }
        return res
    }
    func binary_search_delete(_ array: [Int], _ item: Int) -> [Int] {
        var low = 0
        var high = (_int(((array).count)) &- 1)
        var arr = array
        while (low <= high) {
            let mid = (_int((low &+ high)) / 2)
            if (((_idx(arr, mid) as? Int ?? 0) == item)) {
                arr = (remove_at((arr as! [Int]), mid) as! [Int])
                return arr
            } else if (((_idx(arr, mid) as? Int ?? 0) < item)) {
                low = _int((mid &+ 1))
            } else {
                high = _int((mid &- 1))
            }
            
        }
        print(_p("ValueError: Either the item is not in the array or the array was unsorted"))
        return arr
    }
    func binary_search_insert(_ array: [Int], _ index: Int) -> [Int] {
        var low = 0
        var high = (_int(((array).count)) &- 1)
        var arr = array
        while (low <= high) {
            let mid = (_int((low &+ high)) / 2)
            if (((_idx(arr, mid) as? Int ?? 0) == index)) {
                arr = (insert_at((arr as! [Int]), (mid &+ 1), index) as! [Int])
                return arr
            } else if (((_idx(arr, mid) as? Int ?? 0) < index)) {
                low = _int((mid &+ 1))
            } else {
                high = _int((mid &- 1))
            }
            
        }
        arr = (insert_at((arr as! [Int]), low, index) as! [Int])
        return arr
    }
    func change(_ cont: NumberContainer, _ idx: Int, _ num: Int) -> NumberContainer {
        var numbermap = cont.numbermap
        var indexmap = cont.indexmap
        if ((indexmap[idx] != nil)) {
            let old = ((indexmap[idx] ?? 0) as? Int ?? 0)
            let indexes: [Int] = ((numbermap[old] ?? []) as! [Int])
            if ((_int(((indexes).count)) == 1)) {
                numbermap = _set(numbermap, old, { let _tmp0 = ([] as! [Int]); return _tmp0 }())
            } else {
                numbermap = _set(numbermap, old, { let _tmp1 = (binary_search_delete((indexes as! [Int]), idx) as! [Int]); return _tmp1 }())
            }
        }
        indexmap = _set(indexmap, idx, { let _tmp2 = Int(num); return _tmp2 }())
        if ((numbermap[num] != nil)) {
            numbermap = _set(numbermap, num, { let _tmp3 = (binary_search_insert(((numbermap[num] ?? []) as! [Int]), idx) as! [Int]); return _tmp3 }())
        } else {
            numbermap = _set(numbermap, num, { let _tmp4 = ({
                var _arr: [Int] = []
                _arr = _append(_arr, idx)
                return _arr
            }() as! [Int]); return _tmp4 }())
        }
        return NumberContainer(numbermap: (numbermap as! [Int: [Int]]), indexmap: (indexmap as! [Int: Int]))
    }
    func find(_ cont: NumberContainer, _ num: Int) -> Int {
        let numbermap: [Int: [Int]] = cont.numbermap
        if ((numbermap[num] != nil)) {
            let arr: [Int] = ((numbermap[num] ?? []) as! [Int])
            if ((_int(((arr).count)) > 0)) {
                return (_idx(arr, 0) as? Int ?? 0)
            }
        }
        return -1
    }
    var nm: [Int: [Int]] = ([:] as! [Int: [Int]])
    var im: [Int: Int] = ([:] as! [Int: Int])
    var cont = NumberContainer(numbermap: (nm as! [Int: [Int]]), indexmap: (im as! [Int: Int]))
    print(_p(_int(find((cont as! NumberContainer), 10))))
    cont = (change((cont as! NumberContainer), 0, 10) as! NumberContainer)
    print(_p(_int(find((cont as! NumberContainer), 10))))
    cont = (change((cont as! NumberContainer), 0, 20) as! NumberContainer)
    print(_p(_int(find((cont as! NumberContainer), 10))))
    print(_p(_int(find((cont as! NumberContainer), 20))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
