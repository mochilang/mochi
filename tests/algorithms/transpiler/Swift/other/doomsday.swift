// Generated by Mochi transpiler v0.10.64 on 2025-08-12 16:33:56 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let DOOMSDAY_LEAP: [Int] = ({
        var _arr: [Int] = []
        _arr = _append(_arr, 4)
        _arr = _append(_arr, 1)
        _arr = _append(_arr, 7)
        _arr = _append(_arr, 4)
        _arr = _append(_arr, 2)
        _arr = _append(_arr, 6)
        _arr = _append(_arr, 4)
        _arr = _append(_arr, 1)
        _arr = _append(_arr, 5)
        _arr = _append(_arr, 3)
        _arr = _append(_arr, 7)
        _arr = _append(_arr, 5)
        return _arr
    }() as! [Int])
    let DOOMSDAY_NOT_LEAP: [Int] = ({
        var _arr: [Int] = []
        _arr = _append(_arr, 3)
        _arr = _append(_arr, 7)
        _arr = _append(_arr, 7)
        _arr = _append(_arr, 4)
        _arr = _append(_arr, 2)
        _arr = _append(_arr, 6)
        _arr = _append(_arr, 4)
        _arr = _append(_arr, 1)
        _arr = _append(_arr, 5)
        _arr = _append(_arr, 3)
        _arr = _append(_arr, 7)
        _arr = _append(_arr, 5)
        return _arr
    }() as! [Int])
    let WEEK_DAY_NAMES: [Int: String] = ([0: "Sunday", 1: "Monday", 2: "Tuesday", 3: "Wednesday", 4: "Thursday", 5: "Friday", 6: "Saturday"] as! [Int: String])
    func get_week_day(_ year: Int, _ month: Int, _ day: Int) -> String {
        if (year < 100) {
            _ = fatalError("year should be in YYYY format")
        }
        if ((month < 1) || (month > 12)) {
            _ = fatalError("month should be between 1 to 12")
        }
        if ((day < 1) || (day > 31)) {
            _ = fatalError("day should be between 1 to 31")
        }
        let century = (year / 100)
        let century_anchor = ((_int(((5 &* _int(((century % 4 + 4) % 4))) &+ 2)) % 7 + 7) % 7)
        let centurian = ((year % 100 + 100) % 100)
        let centurian_m = ((centurian % 12 + 12) % 12)
        let dooms_day = ((_int((((_int((centurian / 12)) &+ centurian_m) &+ _int((centurian_m / 4))) &+ century_anchor)) % 7 + 7) % 7)
        let day_anchor = _int((((((year % 4 + 4) % 4) != 0) || ((centurian == 0) && (((year % 400 + 400) % 400) != 0))) ? (_idx(DOOMSDAY_NOT_LEAP, (month &- 1)) as? Int ?? 0) : (_idx(DOOMSDAY_LEAP, (month &- 1)) as? Int ?? 0)))
        var week_day = ((_int(((dooms_day &+ day) &- day_anchor)) % 7 + 7) % 7)
        if (week_day < 0) {
            week_day = _int((week_day &+ 7))
        }
        return (WEEK_DAY_NAMES[week_day] as! String)
    }
    print(_p(String(describing: get_week_day(2020, 10, 24))))
    print(_p(String(describing: get_week_day(2017, 10, 24))))
    print(_p(String(describing: get_week_day(2019, 5, 3))))
    print(_p(String(describing: get_week_day(1970, 9, 16))))
    print(_p(String(describing: get_week_day(1870, 8, 13))))
    print(_p(String(describing: get_week_day(2040, 3, 14))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
