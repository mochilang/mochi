// Generated by Mochi transpiler v0.10.64 on 2025-08-12 16:34:23 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func index_of(_ xs: [Int], _ x: Int) -> Int {
        var i = 0
        while (i < _int(((xs).count))) {
            if ((_idx(xs, i) as? Int ?? 0) == x) {
                return i
            }
            i = _int((i &+ 1))
        }
        return (0 &- 1)
    }
    func majority_vote(_ votes: [Int], _ votes_needed_to_win: Int) -> [Int] {
        if (votes_needed_to_win < 2) {
            return ([] as! [Int])
        }
        var candidates: [Int] = ([] as! [Int])
        var counts: [Int] = ([] as! [Int])
        var i = 0
        while (i < _int(((votes).count))) {
            let v = (_idx(votes, i) as? Int ?? 0)
            let idx = _int(index_of((candidates as! [Int]), v))
            if (idx != (0 &- 1)) {
                counts = _set(counts, idx, _int(((_idx(counts, idx) as? Int ?? 0) &+ 1)))
            } else if (_int(((candidates).count)) < (votes_needed_to_win &- 1)) {
                candidates = (_append(candidates, v) as! [Int])
                counts = (_append(counts, 1) as! [Int])
            } else {
                var j = 0
                while (j < _int(((counts).count))) {
                    counts = _set(counts, j, _int(((_idx(counts, j) as? Int ?? 0) &- 1)))
                    j = _int((j &+ 1))
                }
                var new_candidates: [Int] = ([] as! [Int])
                var new_counts: [Int] = ([] as! [Int])
                j = 0
                while (j < _int(((candidates).count))) {
                    if ((_idx(counts, j) as? Int ?? 0) > 0) {
                        new_candidates = (_append(new_candidates, (_idx(candidates, j) as? Int ?? 0)) as! [Int])
                        new_counts = (_append(new_counts, (_idx(counts, j) as? Int ?? 0)) as! [Int])
                    }
                    j = _int((j &+ 1))
                }
                candidates = (new_candidates as! [Int])
                counts = (new_counts as! [Int])
            }
            
            i = _int((i &+ 1))
        }
        var final_counts: [Int] = ([] as! [Int])
        var j = 0
        while (j < _int(((candidates).count))) {
            final_counts = (_append(final_counts, 0) as! [Int])
            j = _int((j &+ 1))
        }
        i = 0
        while (i < _int(((votes).count))) {
            let v = (_idx(votes, i) as? Int ?? 0)
            let idx = _int(index_of((candidates as! [Int]), v))
            if (idx != (0 &- 1)) {
                final_counts = _set(final_counts, idx, _int(((_idx(final_counts, idx) as? Int ?? 0) &+ 1)))
            }
            i = _int((i &+ 1))
        }
        var result: [Int] = ([] as! [Int])
        j = 0
        while (j < _int(((candidates).count))) {
            if (((_idx(final_counts, j) as? Int ?? 0) &* votes_needed_to_win) > _int(((votes).count))) {
                result = (_append(result, (_idx(candidates, j) as? Int ?? 0)) as! [Int])
            }
            j = _int((j &+ 1))
        }
        return result
    }
    func main() {
        let votes: [Int] = ({
            var _arr: [Int] = []
            _arr = _append(_arr, 1)
            _arr = _append(_arr, 2)
            _arr = _append(_arr, 2)
            _arr = _append(_arr, 3)
            _arr = _append(_arr, 1)
            _arr = _append(_arr, 3)
            _arr = _append(_arr, 2)
            return _arr
        }() as! [Int])
        print(_p("[" + (majority_vote((votes as! [Int]), 3) as! [Int]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
        print(_p("[" + (majority_vote((votes as! [Int]), 2) as! [Int]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
        print(_p("[" + (majority_vote((votes as! [Int]), 4) as! [Int]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
