// Generated by Mochi transpiler v0.10.64 on 2025-08-12 10:13:37 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
func _slice<T>(_ xs: [T], _ start: Int, _ end: Int) -> [T] {
    var s = start
    var e = end
    if s < 0 { s = 0 }
    if e > xs.count { e = xs.count }
    if s > e { s = e }
    return Array(xs[s..<e])
}
struct WordSearch: Codable {
    var words: [String]
    var width: Int
    var height: Int
    var board: [[String]]
    init() {
        self.words = []
        self.width = 0
        self.height = 0
        self.board = []
    }
    init(words: [String], width: Int, height: Int, board: [[String]]) {
        self.words = words
        self.width = width
        self.height = height
        self.board = board
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    var seed = 123456789
    func rand() -> Int {
        seed = _int(((_int(((seed &* 1103515245) &+ 12345)) % 2147483648 + 2147483648) % 2147483648))
        return seed
    }
    func rand_range(_ max: Int) -> Int {
        return ((_int(rand()) % max + max) % max)
    }
    func shuffle(_ list_int: [Int]) -> [Int] {
        var list_int = list_int
        var i = (_int(((list_int).count)) &- 1)
        while (i > 0) {
            let j = _int(rand_range((i &+ 1)))
            let tmp = (_idx(list_int, i) as? Int ?? 0)
            list_int = _set(list_int, i, (_idx(list_int, j) as? Int ?? 0))
            list_int = _set(list_int, j, Int(tmp))
            i = _int((i &- 1))
        }
        return list_int
    }
    func rand_letter() -> String {
        let letters = "abcdefghijklmnopqrstuvwxyz"
        let i = _int(rand_range(26))
        return String(_slice(Array(letters), i, (i &+ 1)))
    }
    func make_word_search(_ words: [String], _ width: Int, _ height: Int) -> WordSearch {
        var board: [[String]] = ([] as! [[String]])
        var r = 0
        while (r < height) {
            var row: [String] = ([] as! [String])
            var c = 0
            while (c < width) {
                row = (_append(row, "") as! [String])
                c = _int((c &+ 1))
            }
            board = (_append(board, row) as! [[String]])
            r = _int((r &+ 1))
        }
        return WordSearch(words: (words as! [String]), width: Int(width), height: Int(height), board: (board as! [[String]]))
    }
    func insert_dir(_ ws: WordSearch, _ word: String, _ dr: Int, _ dc: Int, _ rows: [Int], _ cols: [Int]) -> Bool {
        let word_len = _int(((word).count))
        var ri = 0
        while (ri < _int(((rows).count))) {
            let row = (_idx(rows, ri) as? Int ?? 0)
            var ci = 0
            while (ci < _int(((cols).count))) {
                let col = (_idx(cols, ci) as? Int ?? 0)
                let end_r = (row &+ (dr &* _int((word_len &- 1))))
                let end_c = (col &+ (dc &* _int((word_len &- 1))))
                if ((((end_r < 0) || (end_r >= ws.height)) || (end_c < 0)) || (end_c >= ws.width)) {
                    ci = _int((ci &+ 1))
                    continue
                }
                var k = 0
                var ok = true
                while (k < word_len) {
                    let rr = (row &+ (dr &* k))
                    let cc = (col &+ (dc &* k))
                    if ((_idx(_idx(ws.board, rr)!, cc) as! String) != "") {
                        ok = false
                        break
                    }
                    k = _int((k &+ 1))
                }
                if ok {
                    k = 0
                    while (k < word_len) {
                        let rr2 = (row &+ (dr &* k))
                        let cc2 = (col &+ (dc &* k))
                        var row_list = (_idx(ws.board, rr2) as! [String])
                        row_list = _set(row_list, cc2, (String(_slice(Array(word), k, (k &+ 1))) as! String))
                        k = _int((k &+ 1))
                    }
                    return true
                }
                ci = _int((ci &+ 1))
            }
            ri = _int((ri &+ 1))
        }
        return false
    }
    func generate_board(_ ws: WordSearch) {
        let dirs_r: [Int] = ({
            var _arr: [Int] = []
            _arr = _append(_arr, -1)
            _arr = _append(_arr, -1)
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 1)
            _arr = _append(_arr, 1)
            _arr = _append(_arr, 1)
            _arr = _append(_arr, 0)
            _arr = _append(_arr, -1)
            return _arr
        }() as! [Int])
        let dirs_c: [Int] = ({
            var _arr: [Int] = []
            _arr = _append(_arr, 0)
            _arr = _append(_arr, 1)
            _arr = _append(_arr, 1)
            _arr = _append(_arr, 1)
            _arr = _append(_arr, 0)
            _arr = _append(_arr, -1)
            _arr = _append(_arr, -1)
            _arr = _append(_arr, -1)
            return _arr
        }() as! [Int])
        var i = 0
        while (i < _int(((ws.words).count))) {
            let word = (_idx(ws.words, i) as! String)
            var rows: [Int] = ([] as! [Int])
            var r = 0
            while (r < ws.height) {
                rows = (_append(rows, r) as! [Int])
                r = _int((r &+ 1))
            }
            var cols: [Int] = ([] as! [Int])
            var c = 0
            while (c < ws.width) {
                cols = (_append(cols, c) as! [Int])
                c = _int((c &+ 1))
            }
            rows = (shuffle((rows as! [Int])) as! [Int])
            cols = (shuffle((cols as! [Int])) as! [Int])
            let d = _int(rand_range(8))
            _ = insert_dir((ws as! WordSearch), (word as! String), (_idx(dirs_r, d) as? Int ?? 0), (_idx(dirs_c, d) as? Int ?? 0), (rows as! [Int]), (cols as! [Int]))
            i = _int((i &+ 1))
        }
    }
    func visualise(_ ws: WordSearch, _ add_fake_chars: Bool) -> String {
        var result = ""
        var r = 0
        while (r < ws.height) {
            var c = 0
            while (c < ws.width) {
                var ch = (_idx(_idx(ws.board, r)!, c) as! String)
                if (ch == "") {
                    if add_fake_chars {
                        ch = String(describing: rand_letter())
                    } else {
                        ch = "#"
                    }
                }
                result = (((result + ch) + " ") as! String)
                c = _int((c &+ 1))
            }
            result = ((result + "\n") as! String)
            r = _int((r &+ 1))
        }
        return result
    }
    func main() {
        let words: [String] = ({
            var _arr: [String] = []
            _arr = _append(_arr, "cat")
            _arr = _append(_arr, "dog")
            _arr = _append(_arr, "snake")
            _arr = _append(_arr, "fish")
            return _arr
        }() as! [String])
        var ws = make_word_search((words as! [String]), 10, 10)
        _ = generate_board((ws as! WordSearch))
        print(_p(String(describing: visualise((ws as! WordSearch), true))))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
