// Generated by Mochi transpiler v0.10.64 on 2025-08-12 16:34:03 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
struct Thing: Codable {
    var name: String
    var value: Double
    var weight: Double
    init() {
        self.name = ""
        self.value = 0
        self.weight = 0
    }
    init(name: String, value: Double, weight: Double) {
        self.name = name
        self.value = value
        self.weight = weight
    }
}
struct GreedyResult: Codable {
    var items: [Thing]
    var total_value: Double
    init() {
        self.items = []
        self.total_value = 0
    }
    init(items: [Thing], total_value: Double) {
        self.items = items
        self.total_value = total_value
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func get_value(_ t: Thing) -> Double {
        return t.value
    }
    func get_weight(_ t: Thing) -> Double {
        return t.weight
    }
    func get_name(_ t: Thing) -> String {
        return t.name
    }
    func value_weight(_ t: Thing) -> Double {
        return (t.value / t.weight)
    }
    func build_menu(_ names: [String], _ values: [Double], _ weights: [Double]) -> [Thing] {
        var menu: [Thing] = ([] as! [Thing])
        var i = 0
        while (((i < _int(((values).count))) && (i < _int(((names).count)))) && (i < _int(((weights).count)))) {
            menu = (_append(menu, Thing(name: (_idx(names, i) as! String), value: Double(_idx(values, i)), weight: Double(_idx(weights, i)))) as! [Thing])
            i = _int((i &+ 1))
        }
        return menu
    }
    func sort_desc(_ items: [Thing], _ key_func: @escaping (Thing) -> Double) -> [Thing] {
        var arr: [Thing] = ([] as! [Thing])
        var i = 0
        while (i < _int(((items).count))) {
            arr = (_append(arr, (_idx(items, i) as! Thing)) as! [Thing])
            i = _int((i &+ 1))
        }
        var j = 1
        while (j < _int(((arr).count))) {
            let key_item = (_idx(arr, j) as! Thing)
            let key_val = Double(key_func((key_item as! Thing)))
            var k = (j &- 1)
            while ((k >= 0) && (Double(key_func((_idx(arr, k) as! Thing))) < key_val)) {
                arr = _set(arr, (k &+ 1), (_idx(arr, k) as! Thing))
                k = _int((k &- 1))
            }
            arr = _set(arr, (k &+ 1), (key_item as! Thing))
            j = _int((j &+ 1))
        }
        return arr
    }
    func greedy(_ items: [Thing], _ max_cost: Double, _ key_func: @escaping (Thing) -> Double) -> GreedyResult {
        let items_copy: [Thing] = (sort_desc((items as! [Thing]), (key_func as! (Thing) -> Double)) as! [Thing])
        var result: [Thing] = ([] as! [Thing])
        var total_value = 0.0
        var total_cost = 0.0
        var i = 0
        while (i < _int(((items_copy).count))) {
            let it = (_idx(items_copy, i) as! Thing)
            let w = Double(get_weight((it as! Thing)))
            if ((total_cost + w) <= max_cost) {
                result = (_append(result, it) as! [Thing])
                total_cost = Double((total_cost + w))
                total_value = Double((total_value + Double(get_value((it as! Thing)))))
            }
            i = _int((i &+ 1))
        }
        return GreedyResult(items: (result as! [Thing]), total_value: Double(total_value))
    }
    func thing_to_string(_ t: Thing) -> String {
        return (((((("Thing(" + t.name) + ", ") + _p(t.value)) + ", ") + _p(t.weight)) + ")")
    }
    func list_to_string(_ ts: [Thing]) -> String {
        var s = "["
        var i = 0
        while (i < _int(((ts).count))) {
            s = ((s + String(describing: thing_to_string((_idx(ts, i) as! Thing)))) as! String)
            if (i < (_int(((ts).count)) &- 1)) {
                s = ((s + ", ") as! String)
            }
            i = _int((i &+ 1))
        }
        s = ((s + "]") as! String)
        return s
    }
    let food: [String] = ({
        var _arr: [String] = []
        _arr = _append(_arr, "Burger")
        _arr = _append(_arr, "Pizza")
        _arr = _append(_arr, "Coca Cola")
        _arr = _append(_arr, "Rice")
        _arr = _append(_arr, "Sambhar")
        _arr = _append(_arr, "Chicken")
        _arr = _append(_arr, "Fries")
        _arr = _append(_arr, "Milk")
        return _arr
    }() as! [String])
    let value: [Double] = ({
        var _arr: [Double] = []
        _arr = _append(_arr, 80.0)
        _arr = _append(_arr, 100.0)
        _arr = _append(_arr, 60.0)
        _arr = _append(_arr, 70.0)
        _arr = _append(_arr, 50.0)
        _arr = _append(_arr, 110.0)
        _arr = _append(_arr, 90.0)
        _arr = _append(_arr, 60.0)
        return _arr
    }() as! [Double])
    let weight: [Double] = ({
        var _arr: [Double] = []
        _arr = _append(_arr, 40.0)
        _arr = _append(_arr, 60.0)
        _arr = _append(_arr, 40.0)
        _arr = _append(_arr, 70.0)
        _arr = _append(_arr, 100.0)
        _arr = _append(_arr, 85.0)
        _arr = _append(_arr, 55.0)
        _arr = _append(_arr, 70.0)
        return _arr
    }() as! [Double])
    let foods: [Thing] = (build_menu((food as! [String]), (value as! [Double]), (weight as! [Double])) as! [Thing])
    print(_p(String(describing: list_to_string((foods as! [Thing])))))
    let res = greedy((foods as! [Thing]), 500.0, (get_value as! (Thing) -> Double))
    print(_p(String(describing: list_to_string((res.items as! [Thing])))))
    print(_p(_p(res.total_value)))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
