// Generated by Mochi transpiler v0.10.64 on 2025-08-12 16:33:26 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
struct Clause: Codable {
    var literals: [String: Int]
    var names: [String]
    init() {
        self.literals = [:]
        self.names = []
    }
    init(literals: [String: Int], names: [String]) {
        self.literals = literals
        self.names = names
    }
}
struct EvalResult: Codable {
    var value: Int
    var clause: Clause
    init() {
        self.value = 0
        self.clause = Clause()
    }
    init(value: Int, clause: Clause) {
        self.value = value
        self.clause = clause
    }
}
struct Formula: Codable {
    var clauses: [Clause]
    init() {
        self.clauses = []
    }
    init(clauses: [Clause]) {
        self.clauses = clauses
    }
}
struct DPLLResult: Codable {
    var sat: Bool
    var model: [String: Int]
    init() {
        self.sat = false
        self.model = [:]
    }
    init(sat: Bool, model: [String: Int]) {
        self.sat = sat
        self.model = model
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func new_clause(_ lits: [String]) -> Clause {
        var m: [String: Int] = ([:] as! [String: Int])
        var names: [String] = ([] as! [String])
        var i = 0
        while (i < _int(((lits).count))) {
            let lit = (_idx(lits, i) as! String)
            m = _set(m, String(describing: lit), _int((0 &- 1)))
            names = (_append(names, lit) as! [String])
            i = _int((i &+ 1))
        }
        return Clause(literals: (m as! [String: Int]), names: (names as! [String]))
    }
    func assign_clause(_ c: inout Clause, _ model: [String: Int]) -> Clause {
        var lits = c.literals
        var i = 0
        while (i < _int(((c.names).count))) {
            let lit = (_idx(c.names, i) as! String)
            let symbol = String(describing: String(Array(String(describing: (lit as! String)))[0..<2]))
            if (model[symbol] != nil) {
                var value = (model[String(String(describing: symbol))] as? Int ?? 0)
                if ((String(describing: String(Array(String(describing: (lit as! String)))[(_int(((lit).count)) &- 1)..<_int(((lit).count))])) == "'") && (value != (0 &- 1))) {
                    value = _int((1 &- value))
                }
                lits = _set(lits, String(describing: lit), Int(value))
            }
            i = _int((i &+ 1))
        }
        c.literals = (lits as! [String: Int])
        return c
    }
    func evaluate_clause(_ c: inout Clause, _ model: [String: Int]) -> EvalResult {
        var i = 0
        while (i < _int(((c.names).count))) {
            let lit = (_idx(c.names, i) as! String)
            let sym = String(describing: ((String(describing: String(Array(String(describing: (lit as! String)))[(_int(((lit).count)) &- 1)..<_int(((lit).count))])) == "'") ? String(describing: String(Array(String(describing: (lit as! String)))[0..<2])) : (lit + "'")))
            if (c.literals[sym] != nil) {
                return EvalResult(value: 1, clause: (c as! Clause))
            }
            i = _int((i &+ 1))
        }
        c = (assign_clause(&c, (model as! [String: Int])) as! Clause)
        i = 0
        while (i < _int(((c.names).count))) {
            let lit = (_idx(c.names, i) as! String)
            let value = (c.literals[String(String(describing: lit))] as? Int ?? 0)
            if (value == 1) {
                return EvalResult(value: 1, clause: (c as! Clause))
            }
            if (value == (0 &- 1)) {
                return EvalResult(value: _int((0 &- 1)), clause: (c as! Clause))
            }
            i = _int((i &+ 1))
        }
        var any_true = 0
        i = 0
        while (i < _int(((c.names).count))) {
            let lit = (_idx(c.names, i) as! String)
            if ((c.literals[String(String(describing: lit))] as? Int ?? 0) == 1) {
                any_true = 1
            }
            i = _int((i &+ 1))
        }
        return EvalResult(value: Int(any_true), clause: (c as! Clause))
    }
    func new_formula(_ cs: [Clause]) -> Formula {
        return Formula(clauses: (cs as! [Clause]))
    }
    func remove_symbol(_ symbols: [String], _ s: String) -> [String] {
        var res: [String] = ([] as! [String])
        var i = 0
        while (i < _int(((symbols).count))) {
            if ((_idx(symbols, i) as! String) != s) {
                res = (_append(res, (_idx(symbols, i) as! String)) as! [String])
            }
            i = _int((i &+ 1))
        }
        return res
    }
    func dpll_algorithm(_ clauses: inout [Clause], _ symbols: [String], _ model: [String: Int]) -> DPLLResult {
        var all_true = true
        var i = 0
        while (i < _int(((clauses).count))) {
            let ev = evaluate_clause(&_idx(clauses, i), (model as! [String: Int]))
            clauses = _set(clauses, i, (ev.clause as! Clause))
            if (ev.value == 0) {
                return DPLLResult(sat: false, model: ([:] as! [String: Int]))
            } else if (ev.value == (0 &- 1)) {
                all_true = false
            }
            
            i = _int((i &+ 1))
        }
        if all_true {
            return DPLLResult(sat: true, model: (model as! [String: Int]))
        }
        let p = (_idx(symbols, 0) as! String)
        let rest: [String] = (remove_symbol((symbols as! [String]), (p as! String)) as! [String])
        var tmp1 = model
        var tmp2 = model
        tmp1 = _set(tmp1, String(describing: p), 1)
        tmp2 = _set(tmp2, String(describing: p), 0)
        let res1 = dpll_algorithm(&clauses, (rest as! [String]), (tmp1 as! [String: Int]))
        if res1.sat {
            return res1
        }
        return dpll_algorithm(&clauses, (rest as! [String]), (tmp2 as! [String: Int]))
    }
    func str_clause(_ c: Clause) -> String {
        var line = "{"
        var first = true
        var i = 0
        while (i < _int(((c.names).count))) {
            let lit = (_idx(c.names, i) as! String)
            if first {
                first = false
            } else {
                line = ((line + " , ") as! String)
            }
            line = ((line + lit) as! String)
            i = _int((i &+ 1))
        }
        line = ((line + "}") as! String)
        return line
    }
    func str_formula(_ f: Formula) -> String {
        var line = "{"
        var i = 0
        while (i < _int(((f.clauses).count))) {
            line = ((line + String(describing: str_clause((_idx(f.clauses, i) as! Clause)))) as! String)
            if (i < (_int(((f.clauses).count)) &- 1)) {
                line = ((line + " , ") as! String)
            }
            i = _int((i &+ 1))
        }
        line = ((line + "}") as! String)
        return line
    }
    let clause1 = new_clause(({
        var _arr: [String] = []
        _arr = _append(_arr, "A4")
        _arr = _append(_arr, "A3")
        _arr = _append(_arr, "A5'")
        _arr = _append(_arr, "A1")
        _arr = _append(_arr, "A3'")
        return _arr
    }() as! [String]))
    let clause2 = new_clause(({
        var _arr: [String] = []
        _arr = _append(_arr, "A4")
        return _arr
    }() as! [String]))
    let formula = new_formula(({
        var _arr: [Clause] = []
        _arr = _append(_arr, clause1)
        _arr = _append(_arr, clause2)
        return _arr
    }() as! [Clause]))
    let formula_str = String(describing: str_formula((formula as! Formula)))
    var clauses: [Clause] = ({
        var _arr: [Clause] = []
        _arr = _append(_arr, clause1)
        _arr = _append(_arr, clause2)
        return _arr
    }() as! [Clause])
    let symbols: [String] = ({
        var _arr: [String] = []
        _arr = _append(_arr, "A4")
        _arr = _append(_arr, "A3")
        _arr = _append(_arr, "A5")
        _arr = _append(_arr, "A1")
        return _arr
    }() as! [String])
    var model: [String: Int] = ([:] as! [String: Int])
    let result = dpll_algorithm(&clauses, (symbols as! [String]), (model as! [String: Int]))
    if result.sat {
        print(_p((("The formula " + formula_str) + " is satisfiable.")))
    } else {
        print(_p((("The formula " + formula_str) + " is not satisfiable.")))
    }
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
