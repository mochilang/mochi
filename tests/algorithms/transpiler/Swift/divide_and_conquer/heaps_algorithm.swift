// Generated by Mochi transpiler v0.10.59 on 2025-08-07 00:30:25 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func permute(_ k: Int, _ arr: inout [Int?], _ res: inout [[Int?]]) -> [[Int?]] {
        if (k == 1) {
            let copy: [Int?] = (Array(arr[0..<arr.count]) as! [Int?])
            return (_append(res, copy) as! [[Int?]])
        }
        res = (permute((k &- 1), &arr, &res) as! [[Int?]])
        var i: Int = 0
        while (i < (k &- 1)) {
            if (((k % 2 + 2) % 2) == 0) {
                let temp = (arr[i] as? Int ?? 0)
                arr = _set(arr, i, (arr[(k &- 1)] as? Int ?? 0))
                arr = _set(arr, (k &- 1), (temp as! Int))
            } else {
                let temp = (arr[0] as? Int ?? 0)
                arr = _set(arr, 0, (arr[(k &- 1)] as? Int ?? 0))
                arr = _set(arr, (k &- 1), (temp as! Int))
            }
            res = (permute((k &- 1), &arr, &res) as! [[Int?]])
            i = Int((i &+ 1))
        }
        return res
    }
    func heaps(_ arr: [Int?]) -> [[Int?]] {
        if (Int(((arr).count)) <= 1) {
            return ([(Array(arr[0..<arr.count]) as! [Int?])] as! [[Int?]])
        }
        var res: [[Int?]] = ([] as! [[Int?]])
        res = (permute(Int(((arr).count)), &arr, &res) as! [[Int?]])
        return res
    }
    func main() {
        let perms: [[Int?]] = (heaps(([1, 2, 3] as! [Int?])) as! [[Int?]])
        print(_p("[" + perms.map{ if let s = $0 as? String { "\"" + s.replacingOccurrences(of: "\"", with: "\\\"") + "\"" } else { _p($0) } }.joined(separator: ", ") + "]"))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
