// Generated by Mochi transpiler v0.10.59 on 2025-08-07 00:30:36 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func subarray(_ xs: [Int?], _ start: Int, _ end: Int) -> [Int?] {
        var result: [Int?] = ([] as! [Int?])
        var k: Int = start
        while (k < end) {
            result = (_append(result, (xs[k] as? Int ?? 0)) as! [Int?])
            k = Int((k &+ 1))
        }
        return result
    }
    func merge(_ left_half: [Int?], _ right_half: [Int?]) -> [Int?] {
        var result: [Int?] = ([] as! [Int?])
        var i: Int = 0
        var j: Int = 0
        while ((i < Int(((left_half).count))) && (j < Int(((right_half).count)))) {
            if ((left_half[i] as? Int ?? 0) < (right_half[j] as? Int ?? 0)) {
                result = (_append(result, (left_half[i] as? Int ?? 0)) as! [Int?])
                i = Int((i &+ 1))
            } else {
                result = (_append(result, (right_half[j] as? Int ?? 0)) as! [Int?])
                j = Int((j &+ 1))
            }
        }
        while (i < Int(((left_half).count))) {
            result = (_append(result, (left_half[i] as? Int ?? 0)) as! [Int?])
            i = Int((i &+ 1))
        }
        while (j < Int(((right_half).count))) {
            result = (_append(result, (right_half[j] as? Int ?? 0)) as! [Int?])
            j = Int((j &+ 1))
        }
        return result
    }
    func merge_sort(_ array: [Int?]) -> [Int?] {
        if (Int(((array).count)) <= 1) {
            return array
        }
        let middle = (Int(((array).count)) / 2)
        let left_half: [Int?] = (subarray((array as! [Int?]), 0, middle) as! [Int?])
        let right_half: [Int?] = (subarray((array as! [Int?]), middle, Int(((array).count))) as! [Int?])
        let sorted_left: [Int?] = (merge_sort((left_half as! [Int?])) as! [Int?])
        let sorted_right: [Int?] = (merge_sort((right_half as! [Int?])) as! [Int?])
        return (merge((sorted_left as! [Int?]), (sorted_right as! [Int?])) as! [Int?])
    }
    print(_p("[" + (merge_sort(([5, 3, 1, 4, 2] as! [Int?])) as! [Int?]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    print(_p("[" + (merge_sort(([-2, 3, -10, 11, 99, 100000, 100, -200] as! [Int?])) as! [Int?]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    print(_p("[" + (merge_sort(([-200] as! [Int?])) as! [Int?]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    print(_p("[" + (merge_sort(([] as! [Int?])) as! [Int?]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
