// Generated by Mochi transpiler v0.10.61 on 2025-08-08 18:05:53 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func abs(_ x: Double) -> Double {
        if (x < 0.0) {
            return (0.0 - x)
        }
        return x
    }
    func sqrtApprox(_ x: Double) -> Double {
        var guess = x
        var i = 0
        while (i < 20) {
            guess = Double((Double((guess + (x / guess))) / 2.0))
            i = _int((i &+ 1))
        }
        return guess
    }
    func euclidean_distance_sqr(_ p1: [Double], _ p2: [Double]) -> Double {
        let dx = (Double(_idx(p1, 0)) - Double(_idx(p2, 0)))
        let dy = (Double(_idx(p1, 1)) - Double(_idx(p2, 1)))
        return ((dx * dx) + (dy * dy))
    }
    func column_based_sort(_ arr: [[Double]], _ column: Int) -> [[Double]] {
        var points = arr
        var i = 0
        while (i < _int(((points).count))) {
            var j = 0
            while (j < (_int(((points).count)) &- 1)) {
                if (Double(_idx(_idx(points, j)!, column)) > Double(_idx(_idx(points, (j &+ 1))!, column))) {
                    let tmp: [Double] = (_idx(points, j) as! [Double])
                    points = _set(points, j, (_idx(points, (j &+ 1)) as! [Double]))
                    points = _set(points, (j &+ 1), (tmp as! [Double]))
                }
                j = _int((j &+ 1))
            }
            i = _int((i &+ 1))
        }
        return points
    }
    func dis_between_closest_pair(_ points: [[Double]], _ count: Int, _ min_dis: Double) -> Double {
        var min_dis = min_dis
        var i = 0
        while (i < (count &- 1)) {
            var j = (i &+ 1)
            while (j < count) {
                let current = Double(euclidean_distance_sqr((_idx(points, i) as! [Double]), (_idx(points, j) as! [Double])))
                if (current < min_dis) {
                    min_dis = Double(current)
                }
                j = _int((j &+ 1))
            }
            i = _int((i &+ 1))
        }
        return min_dis
    }
    func dis_between_closest_in_strip(_ points: [[Double]], _ count: Int, _ min_dis: Double) -> Double {
        var min_dis = min_dis
        var i_start = 0
        if (6 < (count &- 1)) {
            i_start = 6
        } else {
            i_start = _int((count &- 1))
        }
        var i = i_start
        while (i < count) {
            var j_start = 0
            if ((i &- 6) > 0) {
                j_start = _int((i &- 6))
            }
            var j = j_start
            while (j < i) {
                let current = Double(euclidean_distance_sqr((_idx(points, i) as! [Double]), (_idx(points, j) as! [Double])))
                if (current < min_dis) {
                    min_dis = Double(current)
                }
                j = _int((j &+ 1))
            }
            i = _int((i &+ 1))
        }
        return min_dis
    }
    func closest_pair_of_points_sqr(_ px: [[Double]], _ py: [[Double]], _ count: Int) -> Double {
        if (count <= 3) {
            return Double(dis_between_closest_pair((px as! [[Double]]), count, 1000000000000000000.0))
        }
        let mid = (count / 2)
        let left = Double(closest_pair_of_points_sqr((px as! [[Double]]), (Array(py[0..<mid]) as! [[Double]]), mid))
        let right = Double(closest_pair_of_points_sqr((py as! [[Double]]), (Array(py[mid..<count]) as! [[Double]]), (count &- mid)))
        var best = left
        if (right < best) {
            best = Double(right)
        }
        var strip: [[Double]] = ([] as! [[Double]])
        var i = 0
        while (i < _int(((px).count))) {
            if (Double(abs(Double((Double(_idx(_idx(px, i)!, 0)) - Double(_idx(_idx(px, mid)!, 0)))))) < best) {
                strip = (_append(strip, (_idx(px, i) as! [Double])) as! [[Double]])
            }
            i = _int((i &+ 1))
        }
        let strip_best = Double(dis_between_closest_in_strip((strip as! [[Double]]), _int(((strip).count)), Double(best)))
        if (strip_best < best) {
            best = Double(strip_best)
        }
        return best
    }
    func closest_pair_of_points(_ points: [[Double]], _ count: Int) -> Double {
        let points_sorted_on_x: [[Double]] = (column_based_sort((points as! [[Double]]), 0) as! [[Double]])
        let points_sorted_on_y: [[Double]] = (column_based_sort((points as! [[Double]]), 1) as! [[Double]])
        let dist_sqr = Double(closest_pair_of_points_sqr((points_sorted_on_x as! [[Double]]), (points_sorted_on_y as! [[Double]]), count))
        return Double(sqrtApprox(Double(dist_sqr)))
    }
    var points: [[Double]] = ([([2.0, 3.0] as! [Double]), ([12.0, 30.0] as! [Double]), ([40.0, 50.0] as! [Double]), ([5.0, 1.0] as! [Double]), ([12.0, 10.0] as! [Double]), ([3.0, 4.0] as! [Double])] as! [[Double]])
    print(_p(("Distance: " + _p(Double(closest_pair_of_points((points as! [[Double]]), _int(((points).count))))))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
