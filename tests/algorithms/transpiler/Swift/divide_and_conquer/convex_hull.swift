// Generated by Mochi transpiler v0.10.59 on 2025-08-07 00:30:23 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
struct Point: Codable {
    var x: Int
    var y: Int
    init() {
        self.x = 0
        self.y = 0
    }
    init(x: Int, y: Int) {
        self.x = x
        self.y = y
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func cross(_ o: Point, _ a: Point, _ b: Point) -> Int {
        return ((Int((a.x &- o.x)) &* Int((b.y &- o.y))) &- (Int((a.y &- o.y)) &* Int((b.x &- o.x))))
    }
    func sortPoints(_ ps: [Point?]) -> [Point?] {
        var arr: [Point?] = ps
        var n: Int = Int(((arr).count))
        var i: Int = 0
        while (i < n) {
            var j: Int = 0
            while (j < (n &- 1)) {
                let p = (arr[j] as! Point)
                let q = (arr[(j &+ 1)] as! Point)
                if ((p.x > q.x) || ((p.x == q.x) && (p.y > q.y))) {
                    arr = _set(arr, j, (q as! Point))
                    arr = _set(arr, (j &+ 1), (p as! Point))
                }
                j = Int((j &+ 1))
            }
            i = Int((i &+ 1))
        }
        return arr
    }
    func convex_hull(_ ps: inout [Point?]) -> [Point?] {
        ps = (sortPoints((ps as! [Point?])) as! [Point?])
        var lower: [Point?] = ([] as! [Point?])
        for p in ps {
            while ((Int(((lower).count)) >= 2) && (Int(cross((lower[(Int(((lower).count)) &- 2)] as! Point), (lower[(Int(((lower).count)) &- 1)] as! Point), (p as! Point))) <= 0)) {
                lower = (Array(lower[0..<(Int(((lower).count)) &- 1)]) as! [Point?])
            }
            lower = (_append(lower, p) as! [Point?])
        }
        var upper: [Point?] = ([] as! [Point?])
        var i: Int = (Int(((ps).count)) &- 1)
        while (i >= 0) {
            let p = (ps[i] as! Point)
            while ((Int(((upper).count)) >= 2) && (Int(cross((upper[(Int(((upper).count)) &- 2)] as! Point), (upper[(Int(((upper).count)) &- 1)] as! Point), (p as! Point))) <= 0)) {
                upper = (Array(upper[0..<(Int(((upper).count)) &- 1)]) as! [Point?])
            }
            upper = (_append(upper, p) as! [Point?])
            i = Int((i &- 1))
        }
        var hull: [Point?] = (Array(lower[0..<(Int(((lower).count)) &- 1)]) as! [Point?])
        var j: Int = 0
        while (j < (Int(((upper).count)) &- 1)) {
            hull = (_append(hull, (upper[j] as! Point)) as! [Point?])
            j = Int((j &+ 1))
        }
        return hull
    }
    do {
        var pts: [Point?] = ([Point(x: 0, y: 3), Point(x: 2, y: 2), Point(x: 1, y: 1), Point(x: 2, y: 1), Point(x: 3, y: 0), Point(x: 0, y: 0), Point(x: 3, y: 3), Point(x: 2, y: -1), Point(x: 2, y: -4), Point(x: 1, y: -3)] as! [Point?])
        let hull: [Point?] = (convex_hull(&pts) as! [Point?])
        assert((String(describing: hull) == String(describing: ([Point(x: 0, y: 0), Point(x: 1, y: -3), Point(x: 2, y: -4), Point(x: 3, y: 0), Point(x: 3, y: 3), Point(x: 0, y: 3)] as! [Point?]))
        ))
    }
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
