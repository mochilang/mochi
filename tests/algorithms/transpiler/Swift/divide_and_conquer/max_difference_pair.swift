// Generated by Mochi transpiler v0.10.59 on 2025-08-07 00:30:32 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func min_slice(_ a: [Int?], _ start: Int, _ end: Int) -> Int {
        var m: Int = (a[start] as? Int ?? 0)
        var i: Int = (start &+ 1)
        while (i < end) {
            if ((a[i] as? Int ?? 0) < m) {
                m = (a[i] as? Int ?? 0)
            }
            i = Int((i &+ 1))
        }
        return m
    }
    func max_slice(_ a: [Int?], _ start: Int, _ end: Int) -> Int {
        var m: Int = (a[start] as? Int ?? 0)
        var i: Int = (start &+ 1)
        while (i < end) {
            if ((a[i] as? Int ?? 0) > m) {
                m = (a[i] as? Int ?? 0)
            }
            i = Int((i &+ 1))
        }
        return m
    }
    func max_diff_range(_ a: [Int?], _ start: Int, _ end: Int) -> [Int?] {
        if ((end &- start) == 1) {
            let v = (a[start] as? Int ?? 0)
            return ([v, v] as! [Int?])
        }
        let mid = (Int((start &+ end)) / 2)
        let left: [Int?] = (max_diff_range((a as! [Int?]), start, mid) as! [Int?])
        let right: [Int?] = (max_diff_range((a as! [Int?]), mid, end) as! [Int?])
        let small1 = (left[0] as? Int ?? 0)
        let big1 = (left[1] as? Int ?? 0)
        let small2 = (right[0] as? Int ?? 0)
        let big2 = (right[1] as? Int ?? 0)
        let min_left = Int(min_slice((a as! [Int?]), start, mid))
        let max_right = Int(max_slice((a as! [Int?]), mid, end))
        let cross_diff = (max_right &- min_left)
        let left_diff = (big1 &- small1)
        let right_diff = (big2 &- small2)
        if ((right_diff > cross_diff) && (right_diff > left_diff)) {
            return ([small2, big2] as! [Int?])
        } else if (left_diff > cross_diff) {
            return ([small1, big1] as! [Int?])
        } else {
            return ([min_left, max_right] as! [Int?])
        }
        
    }
    func max_difference(_ a: [Int?]) -> [Int?] {
        return (max_diff_range((a as! [Int?]), 0, Int(((a).count))) as! [Int?])
    }
    func main() {
        let result: [Int?] = (max_difference(([5, 11, 2, 1, 7, 9, 0, 7] as! [Int?])) as! [Int?])
        print(_p("[" + result.map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
