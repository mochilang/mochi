// Generated by Mochi transpiler v0.10.59 on 2025-08-07 00:30:30 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func pivot(_ lst: [Int?]) -> Int {
        return (lst[0] as? Int ?? 0)
    }
    func kth_number(_ lst: [Int?], _ k: Int) -> Int {
        let p = Int(pivot((lst as! [Int?])))
        var small: [Int?] = ([] as! [Int?])
        var big: [Int?] = ([] as! [Int?])
        var i: Int = 0
        while (i < Int(((lst).count))) {
            let e = (lst[i] as? Int ?? 0)
            if (e < p) {
                small = (_append(small, e) as! [Int?])
            } else if (e > p) {
                big = (_append(big, e) as! [Int?])
            }
            
            i = Int((i &+ 1))
        }
        if (Int(((small).count)) == (k &- 1)) {
            return p
        } else if (Int(((small).count)) < (k &- 1)) {
            return Int(kth_number((big as! [Int?]), ((k &- Int(((small).count))) &- 1)))
        } else {
            return Int(kth_number((small as! [Int?]), k))
        }
        
    }
    print(_p(String(describing: Int(kth_number(([2, 1, 3, 4, 5] as! [Int?]), 3)))))
    print(_p(String(describing: Int(kth_number(([2, 1, 3, 4, 5] as! [Int?]), 1)))))
    print(_p(String(describing: Int(kth_number(([2, 1, 3, 4, 5] as! [Int?]), 5)))))
    print(_p(String(describing: Int(kth_number(([3, 2, 5, 6, 7, 8] as! [Int?]), 2)))))
    print(_p(String(describing: Int(kth_number(([25, 21, 98, 100, 76, 22, 43, 60, 89, 87] as! [Int?]), 4)))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
