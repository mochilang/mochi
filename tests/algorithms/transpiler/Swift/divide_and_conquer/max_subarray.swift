// Generated by Mochi transpiler v0.10.59 on 2025-08-07 00:30:34 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
struct Result: Codable {
    var start: Int
    var end: Int
    var sum: Double
    init() {
        self.start = 0
        self.end = 0
        self.sum = 0
    }
    init(start: Int, end: Int, sum: Double) {
        self.start = start
        self.end = end
        self.sum = sum
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func max_cross_sum(_ arr: [Double?], _ low: Int, _ mid: Int, _ high: Int) -> Result {
        var left_sum: Double = -1000000000000000000.0
        var max_left: Int = -1
        var sum: Double = 0.0
        var i: Int = mid
        while (i >= low) {
            sum = Double((sum + Double(arr[i])))
            if (sum > left_sum) {
                left_sum = Double(sum)
                max_left = (i as! Int)
            }
            i = Int((i &- 1))
        }
        var right_sum: Double = -1000000000000000000.0
        var max_right: Int = -1
        sum = 0.0
        i = Int((mid &+ 1))
        while (i <= high) {
            sum = Double((sum + Double(arr[i])))
            if (sum > right_sum) {
                right_sum = Double(sum)
                max_right = (i as! Int)
            }
            i = Int((i &+ 1))
        }
        return Result(start: max_left, end: max_right, sum: (left_sum + right_sum))
    }
    func max_subarray(_ arr: [Double?], _ low: Int, _ high: Int) -> Result {
        if (Int(((arr).count)) == 0) {
            return Result(start: -1, end: -1, sum: 0.0)
        }
        if (low == high) {
            return Result(start: low, end: high, sum: Double(arr[low]))
        }
        let mid = (Int((low &+ high)) / 2)
        let left = max_subarray((arr as! [Double?]), low, mid)
        let right = max_subarray((arr as! [Double?]), (mid &+ 1), high)
        let cross = max_cross_sum((arr as! [Double?]), low, mid, high)
        if ((left.sum >= right.sum) && (left.sum >= cross.sum)) {
            return left
        }
        if ((right.sum >= left.sum) && (right.sum >= cross.sum)) {
            return right
        }
        return cross
    }
    func show(_ res: Result) {
        print(_p((((((("[" + String(describing: res.start)) + ", ") + String(describing: res.end)) + ", ") + String(describing: res.sum)) + "]")))
    }
    func main() {
        let nums1: [Double?] = ([-2.0, 1.0, -3.0, 4.0, -1.0, 2.0, 1.0, -5.0, 4.0] as! [Double?])
        let res1 = max_subarray((nums1 as! [Double?]), 0, (Int(((nums1).count)) &- 1))
        _ = show((res1 as! Result))
        let nums2: [Double?] = ([2.0, 8.0, 9.0] as! [Double?])
        let res2 = max_subarray((nums2 as! [Double?]), 0, (Int(((nums2).count)) &- 1))
        _ = show((res2 as! Result))
        let nums3: [Double?] = ([0.0, 0.0] as! [Double?])
        let res3 = max_subarray((nums3 as! [Double?]), 0, (Int(((nums3).count)) &- 1))
        _ = show((res3 as! Result))
        let nums4: [Double?] = ([-1.0, 0.0, 1.0] as! [Double?])
        let res4 = max_subarray((nums4 as! [Double?]), 0, (Int(((nums4).count)) &- 1))
        _ = show((res4 as! Result))
        let nums5: [Double?] = ([-2.0, -3.0, -1.0, -4.0, -6.0] as! [Double?])
        let res5 = max_subarray((nums5 as! [Double?]), 0, (Int(((nums5).count)) &- 1))
        _ = show((res5 as! Result))
        let nums6: [Double?] = ([] as! [Double?])
        let res6 = max_subarray((nums6 as! [Double?]), 0, 0)
        _ = show((res6 as! Result))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
