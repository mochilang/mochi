// Generated by Mochi transpiler v0.10.59 on 2025-08-07 00:30:28 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _concat<T>(_ a: [T], _ b: [T]) -> [T] {
    var out = a
    out.append(contentsOf: b)
    return out
}
struct InvResult: Codable {
    var arr: [Int?]
    var inv: Int
    init() {
        self.arr = []
        self.inv = 0
    }
    init(arr: [Int?], inv: Int) {
        self.arr = arr
        self.inv = inv
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func slice_list(_ arr: [Int?], _ start: Int, _ end: Int) -> [Int?] {
        var res: [Int?] = ([] as! [Int?])
        var k: Int = start
        while (k < end) {
            res = (_append(res, (arr[k] as? Int ?? 0)) as! [Int?])
            k = Int((k &+ 1))
        }
        return res
    }
    func count_inversions_bf(_ arr: [Int?]) -> Int {
        let n = Int(((arr).count))
        var inv: Int = 0
        var i: Int = 0
        while (i < (n &- 1)) {
            var j: Int = (i &+ 1)
            while (j < n) {
                if ((arr[i] as? Int ?? 0) > (arr[j] as? Int ?? 0)) {
                    inv = Int((inv &+ 1))
                }
                j = Int((j &+ 1))
            }
            i = Int((i &+ 1))
        }
        return inv
    }
    func count_cross_inversions(_ p: [Int?], _ q: [Int?]) -> InvResult {
        var r: [Int?] = ([] as! [Int?])
        var i: Int = 0
        var j: Int = 0
        var inv: Int = 0
        while ((i < Int(((p).count))) && (j < Int(((q).count)))) {
            if ((p[i] as? Int ?? 0) > (q[j] as? Int ?? 0)) {
                inv = Int((inv &+ Int((Int(((p).count)) &- i))))
                r = (_append(r, (q[j] as? Int ?? 0)) as! [Int?])
                j = Int((j &+ 1))
            } else {
                r = (_append(r, (p[i] as? Int ?? 0)) as! [Int?])
                i = Int((i &+ 1))
            }
        }
        if (i < Int(((p).count))) {
            r = ((_concat(r, (slice_list((p as! [Int?]), i, Int(((p).count))) as! [Int?])) as! [Any??]) as! [Int?])
        } else {
            r = ((_concat(r, (slice_list((q as! [Int?]), j, Int(((q).count))) as! [Int?])) as! [Any??]) as! [Int?])
        }
        return InvResult(arr: r, inv: inv)
    }
    func count_inversions_recursive(_ arr: [Int?]) -> InvResult {
        if (Int(((arr).count)) <= 1) {
            return InvResult(arr: arr, inv: 0)
        }
        let mid = (Int(((arr).count)) / 2)
        let p: [Int?] = (slice_list((arr as! [Int?]), 0, mid) as! [Int?])
        let q: [Int?] = (slice_list((arr as! [Int?]), mid, Int(((arr).count))) as! [Int?])
        let res_p = count_inversions_recursive((p as! [Int?]))
        let res_q = count_inversions_recursive((q as! [Int?]))
        let res_cross = count_cross_inversions((res_p.arr as! [Int?]), (res_q.arr as! [Int?]))
        let total = ((res_p.inv &+ res_q.inv) &+ res_cross.inv)
        return InvResult(arr: res_cross.arr, inv: total)
    }
    var arr_1: [Int?] = ([10, 2, 1, 5, 5, 2, 11] as! [Int?])
    let nbf = Int(count_inversions_bf((arr_1 as! [Int?])))
    let nrec = (count_inversions_recursive((arr_1 as! [Int?])) as! InvResult).inv
    print(_p("number of inversions = "), _p(nbf))
    arr_1 = ([1, 2, 2, 5, 5, 10, 11] as! [Int?])
    let nbf2 = Int(count_inversions_bf((arr_1 as! [Int?])))
    let nrec2 = (count_inversions_recursive((arr_1 as! [Int?])) as! InvResult).inv
    print(_p("number of inversions = "), _p(nbf2))
    arr_1 = ([] as! [Int?])
    let nbf3 = Int(count_inversions_bf((arr_1 as! [Int?])))
    let nrec3 = (count_inversions_recursive((arr_1 as! [Int?])) as! InvResult).inv
    print(_p("number of inversions = "), _p(nbf3))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
