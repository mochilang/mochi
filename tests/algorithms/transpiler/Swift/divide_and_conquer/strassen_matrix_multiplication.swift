// Generated by Mochi transpiler v0.10.59 on 2025-08-07 00:30:42 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _concat<T>(_ a: [T], _ b: [T]) -> [T] {
    var out = a
    out.append(contentsOf: b)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func default_matrix_multiplication(_ a: [[Int?]], _ b: [[Int?]]) -> [[Int?]] {
        return ([([(((a[0][0] as? Int ?? 0) &* (b[0][0] as? Int ?? 0)) &+ ((a[0][1] as? Int ?? 0) &* (b[1][0] as? Int ?? 0))), (((a[0][0] as? Int ?? 0) &* (b[0][1] as? Int ?? 0)) &+ ((a[0][1] as? Int ?? 0) &* (b[1][1] as? Int ?? 0)))] as! [Int?]), ([(((a[1][0] as? Int ?? 0) &* (b[0][0] as? Int ?? 0)) &+ ((a[1][1] as? Int ?? 0) &* (b[1][0] as? Int ?? 0))), (((a[1][0] as? Int ?? 0) &* (b[0][1] as? Int ?? 0)) &+ ((a[1][1] as? Int ?? 0) &* (b[1][1] as? Int ?? 0)))] as! [Int?])] as! [[Int?]])
    }
    func matrix_addition(_ matrix_a: [[Int?]], _ matrix_b: [[Int?]]) -> [[Int?]] {
        var result: [[Int?]] = ([] as! [[Int?]])
        var i: Int = 0
        while (i < Int(((matrix_a).count))) {
            var row: [Int?] = ([] as! [Int?])
            var j: Int = 0
            while (j < Int((((matrix_a[i] as! [Int?])).count))) {
                row = (_append(row, ((matrix_a[i][j] as? Int ?? 0) &+ (matrix_b[i][j] as? Int ?? 0))) as! [Int?])
                j = Int((j &+ 1))
            }
            result = (_append(result, row) as! [[Int?]])
            i = Int((i &+ 1))
        }
        return result
    }
    func matrix_subtraction(_ matrix_a: [[Int?]], _ matrix_b: [[Int?]]) -> [[Int?]] {
        var result: [[Int?]] = ([] as! [[Int?]])
        var i: Int = 0
        while (i < Int(((matrix_a).count))) {
            var row: [Int?] = ([] as! [Int?])
            var j: Int = 0
            while (j < Int((((matrix_a[i] as! [Int?])).count))) {
                row = (_append(row, ((matrix_a[i][j] as? Int ?? 0) &- (matrix_b[i][j] as? Int ?? 0))) as! [Int?])
                j = Int((j &+ 1))
            }
            result = (_append(result, row) as! [[Int?]])
            i = Int((i &+ 1))
        }
        return result
    }
    func split_matrix(_ a: [[Int?]]) -> [[[Int?]]] {
        let n = Int(((a).count))
        let mid = (n / 2)
        var top_left: [[Int?]] = ([] as! [[Int?]])
        var top_right: [[Int?]] = ([] as! [[Int?]])
        var bot_left: [[Int?]] = ([] as! [[Int?]])
        var bot_right: [[Int?]] = ([] as! [[Int?]])
        var i: Int = 0
        while (i < mid) {
            var left_row: [Int?] = ([] as! [Int?])
            var right_row: [Int?] = ([] as! [Int?])
            var j: Int = 0
            while (j < mid) {
                left_row = (_append(left_row, (a[i][j] as? Int ?? 0)) as! [Int?])
                right_row = (_append(right_row, (a[i][(j &+ mid)] as? Int ?? 0)) as! [Int?])
                j = Int((j &+ 1))
            }
            top_left = (_append(top_left, left_row) as! [[Int?]])
            top_right = (_append(top_right, right_row) as! [[Int?]])
            i = Int((i &+ 1))
        }
        i = (mid as! Int)
        while (i < n) {
            var left_row: [Int?] = ([] as! [Int?])
            var right_row: [Int?] = ([] as! [Int?])
            var j: Int = 0
            while (j < mid) {
                left_row = (_append(left_row, (a[i][j] as? Int ?? 0)) as! [Int?])
                right_row = (_append(right_row, (a[i][(j &+ mid)] as? Int ?? 0)) as! [Int?])
                j = Int((j &+ 1))
            }
            bot_left = (_append(bot_left, left_row) as! [[Int?]])
            bot_right = (_append(bot_right, right_row) as! [[Int?]])
            i = Int((i &+ 1))
        }
        return ([top_left, top_right, bot_left, bot_right] as! [[[Int?]]])
    }
    func matrix_dimensions(_ matrix: [[Int?]]) -> [Int?] {
        return ([Int(((matrix).count)), Int((((matrix[0] as! [Int?])).count))] as! [Int?])
    }
    func next_power_of_two(_ n: Int) -> Int {
        var p: Int = 1
        while (p < n) {
            p = Int((p &* 2))
        }
        return p
    }
    func pad_matrix(_ mat: [[Int?]], _ rows: Int, _ cols: Int) -> [[Int?]] {
        var res: [[Int?]] = ([] as! [[Int?]])
        var i: Int = 0
        while (i < rows) {
            var row: [Int?] = ([] as! [Int?])
            var j: Int = 0
            while (j < cols) {
                var v: Int = 0
                if ((i < Int(((mat).count))) && (j < Int((((mat[0] as! [Int?])).count)))) {
                    v = (mat[i][j] as? Int ?? 0)
                }
                row = (_append(row, v) as! [Int?])
                j = Int((j &+ 1))
            }
            res = (_append(res, row) as! [[Int?]])
            i = Int((i &+ 1))
        }
        return res
    }
    func actual_strassen(_ matrix_a: [[Int?]], _ matrix_b: [[Int?]]) -> [[Int?]] {
        if (((matrix_dimensions((matrix_a as! [[Int?]])) as! [Any])[0] as? Int ?? 0) == 2) {
            return (default_matrix_multiplication((matrix_a as! [[Int?]]), (matrix_b as! [[Int?]])) as! [[Int?]])
        }
        let parts_a: [[[Int?]]] = (split_matrix((matrix_a as! [[Int?]])) as! [[[Int?]]])
        let a: [[Int?]] = (parts_a[0] as! [[Int?]])
        let b: [[Int?]] = (parts_a[1] as! [[Int?]])
        let c: [[Int?]] = (parts_a[2] as! [[Int?]])
        let d: [[Int?]] = (parts_a[3] as! [[Int?]])
        let parts_b: [[[Int?]]] = (split_matrix((matrix_b as! [[Int?]])) as! [[[Int?]]])
        let e: [[Int?]] = (parts_b[0] as! [[Int?]])
        let f: [[Int?]] = (parts_b[1] as! [[Int?]])
        let g: [[Int?]] = (parts_b[2] as! [[Int?]])
        let h: [[Int?]] = (parts_b[3] as! [[Int?]])
        let t1: [[Int?]] = (actual_strassen((a as! [[Int?]]), (matrix_subtraction((f as! [[Int?]]), (h as! [[Int?]])) as! [[Int?]])) as! [[Int?]])
        let t2: [[Int?]] = (actual_strassen((matrix_addition((a as! [[Int?]]), (b as! [[Int?]])) as! [[Int?]]), (h as! [[Int?]])) as! [[Int?]])
        let t3: [[Int?]] = (actual_strassen((matrix_addition((c as! [[Int?]]), (d as! [[Int?]])) as! [[Int?]]), (e as! [[Int?]])) as! [[Int?]])
        let t4: [[Int?]] = (actual_strassen((d as! [[Int?]]), (matrix_subtraction((g as! [[Int?]]), (e as! [[Int?]])) as! [[Int?]])) as! [[Int?]])
        let t5: [[Int?]] = (actual_strassen((matrix_addition((a as! [[Int?]]), (d as! [[Int?]])) as! [[Int?]]), (matrix_addition((e as! [[Int?]]), (h as! [[Int?]])) as! [[Int?]])) as! [[Int?]])
        let t6: [[Int?]] = (actual_strassen((matrix_subtraction((b as! [[Int?]]), (d as! [[Int?]])) as! [[Int?]]), (matrix_addition((g as! [[Int?]]), (h as! [[Int?]])) as! [[Int?]])) as! [[Int?]])
        let t7: [[Int?]] = (actual_strassen((matrix_subtraction((a as! [[Int?]]), (c as! [[Int?]])) as! [[Int?]]), (matrix_addition((e as! [[Int?]]), (f as! [[Int?]])) as! [[Int?]])) as! [[Int?]])
        let top_left: [[Int?]] = (matrix_addition((matrix_subtraction((matrix_addition((t5 as! [[Int?]]), (t4 as! [[Int?]])) as! [[Int?]]), (t2 as! [[Int?]])) as! [[Int?]]), (t6 as! [[Int?]])) as! [[Int?]])
        let top_right: [[Int?]] = (matrix_addition((t1 as! [[Int?]]), (t2 as! [[Int?]])) as! [[Int?]])
        let bot_left: [[Int?]] = (matrix_addition((t3 as! [[Int?]]), (t4 as! [[Int?]])) as! [[Int?]])
        let bot_right: [[Int?]] = (matrix_subtraction((matrix_subtraction((matrix_addition((t1 as! [[Int?]]), (t5 as! [[Int?]])) as! [[Int?]]), (t3 as! [[Int?]])) as! [[Int?]]), (t7 as! [[Int?]])) as! [[Int?]])
        var new_matrix: [[Int?]] = ([] as! [[Int?]])
        var i: Int = 0
        while (i < Int(((top_right).count))) {
            new_matrix = ((_append(new_matrix, (_concat((top_left[i] as! [Int?]), (top_right[i] as! [Int?])) as! [Any??])) as! [Any??]) as! [[Int?]])
            i = Int((i &+ 1))
        }
        i = 0
        while (i < Int(((bot_right).count))) {
            new_matrix = ((_append(new_matrix, (_concat((bot_left[i] as! [Int?]), (bot_right[i] as! [Int?])) as! [Any??])) as! [Any??]) as! [[Int?]])
            i = Int((i &+ 1))
        }
        return new_matrix
    }
    func strassen(_ matrix1: [[Int?]], _ matrix2: [[Int?]]) -> [[Int?]] {
        let dims1: [Int?] = (matrix_dimensions((matrix1 as! [[Int?]])) as! [Int?])
        let dims2: [Int?] = (matrix_dimensions((matrix2 as! [[Int?]])) as! [Int?])
        if ((dims1[1] as? Int ?? 0) != (dims2[0] as? Int ?? 0)) {
            return ([] as! [[Int?]])
        }
        let maximum = Int((([(dims1[0] as? Int ?? 0), (dims1[1] as? Int ?? 0), (dims2[0] as? Int ?? 0), (dims2[1] as? Int ?? 0)] as! [Int?]).max()!))
        let size = Int(next_power_of_two(maximum))
        let new_matrix1: [[Int?]] = (pad_matrix((matrix1 as! [[Int?]]), size, size) as! [[Int?]])
        let new_matrix2: [[Int?]] = (pad_matrix((matrix2 as! [[Int?]]), size, size) as! [[Int?]])
        let result_padded: [[Int?]] = (actual_strassen((new_matrix1 as! [[Int?]]), (new_matrix2 as! [[Int?]])) as! [[Int?]])
        var final_matrix: [[Int?]] = ([] as! [[Int?]])
        var i: Int = 0
        while (i < (dims1[0] as? Int ?? 0)) {
            var row: [Int?] = ([] as! [Int?])
            var j: Int = 0
            while (j < (dims2[1] as? Int ?? 0)) {
                row = (_append(row, (result_padded[i][j] as? Int ?? 0)) as! [Int?])
                j = Int((j &+ 1))
            }
            final_matrix = (_append(final_matrix, row) as! [[Int?]])
            i = Int((i &+ 1))
        }
        return final_matrix
    }
    func main() {
        let matrix1: [[Int?]] = ([([2, 3, 4, 5] as! [Int?]), ([6, 4, 3, 1] as! [Int?]), ([2, 3, 6, 7] as! [Int?]), ([3, 1, 2, 4] as! [Int?]), ([2, 3, 4, 5] as! [Int?]), ([6, 4, 3, 1] as! [Int?]), ([2, 3, 6, 7] as! [Int?]), ([3, 1, 2, 4] as! [Int?]), ([2, 3, 4, 5] as! [Int?]), ([6, 2, 3, 1] as! [Int?])] as! [[Int?]])
        let matrix2: [[Int?]] = ([([0, 2, 1, 1] as! [Int?]), ([16, 2, 3, 3] as! [Int?]), ([2, 2, 7, 7] as! [Int?]), ([13, 11, 22, 4] as! [Int?])] as! [[Int?]])
        let res: [[Int?]] = (strassen((matrix1 as! [[Int?]]), (matrix2 as! [[Int?]])) as! [[Int?]])
        print(_p("[" + res.map{ if let s = $0 as? String { "\"" + s.replacingOccurrences(of: "\"", with: "\\\"") + "\"" } else { _p($0) } }.joined(separator: ", ") + "]"))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
