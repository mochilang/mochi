exit status 1
/tmp/TestSwiftTranspiler_Algorithms_Golden290_divide_and_conquer_heaps_algorithm3550496789/001/main.swift:93:46: warning: forced cast of '[[Int]]' to same type has no effect
 91 |             return (_append(res, copy) as! [[Int]])
 92 |         }
 93 |         res = (permute((k &- 1), &arr, &res) as! [[Int]])
    |                                              `- warning: forced cast of '[[Int]]' to same type has no effect
 94 |         var i: Int = 0
 95 |         while (i < (k &- 1)) {

/tmp/TestSwiftTranspiler_Algorithms_Golden290_divide_and_conquer_heaps_algorithm3550496789/001/main.swift:97:36: warning: conditional cast from 'Int' to 'Int' always succeeds
 95 |         while (i < (k &- 1)) {
 96 |             if (((k % 2 + 2) % 2) == 0) {
 97 |                 let temp = (arr[i] as? Int ?? 0)
    |                                    `- warning: conditional cast from 'Int' to 'Int' always succeeds
 98 |                 arr = _set(arr, i, (arr[(k &- 1)] as? Int ?? 0))
 99 |                 arr = _set(arr, (k &- 1), Int(temp))

/tmp/TestSwiftTranspiler_Algorithms_Golden290_divide_and_conquer_heaps_algorithm3550496789/001/main.swift:98:51: warning: conditional cast from 'Int' to 'Int' always succeeds
 96 |             if (((k % 2 + 2) % 2) == 0) {
 97 |                 let temp = (arr[i] as? Int ?? 0)
 98 |                 arr = _set(arr, i, (arr[(k &- 1)] as? Int ?? 0))
    |                                                   `- warning: conditional cast from 'Int' to 'Int' always succeeds
 99 |                 arr = _set(arr, (k &- 1), Int(temp))
100 |             } else {

/tmp/TestSwiftTranspiler_Algorithms_Golden290_divide_and_conquer_heaps_algorithm3550496789/001/main.swift:101:36: warning: conditional cast from 'Int' to 'Int' always succeeds
 99 |                 arr = _set(arr, (k &- 1), Int(temp))
100 |             } else {
101 |                 let temp = (arr[0] as? Int ?? 0)
    |                                    `- warning: conditional cast from 'Int' to 'Int' always succeeds
102 |                 arr = _set(arr, 0, (arr[(k &- 1)] as? Int ?? 0))
103 |                 arr = _set(arr, (k &- 1), Int(temp))

/tmp/TestSwiftTranspiler_Algorithms_Golden290_divide_and_conquer_heaps_algorithm3550496789/001/main.swift:102:51: warning: conditional cast from 'Int' to 'Int' always succeeds
100 |             } else {
101 |                 let temp = (arr[0] as? Int ?? 0)
102 |                 arr = _set(arr, 0, (arr[(k &- 1)] as? Int ?? 0))
    |                                                   `- warning: conditional cast from 'Int' to 'Int' always succeeds
103 |                 arr = _set(arr, (k &- 1), Int(temp))
104 |             }

/tmp/TestSwiftTranspiler_Algorithms_Golden290_divide_and_conquer_heaps_algorithm3550496789/001/main.swift:105:50: warning: forced cast of '[[Int]]' to same type has no effect
103 |                 arr = _set(arr, (k &- 1), Int(temp))
104 |             }
105 |             res = (permute((k &- 1), &arr, &res) as! [[Int]])
    |                                                  `- warning: forced cast of '[[Int]]' to same type has no effect
106 |             i = _int((i &+ 1))
107 |         }

/tmp/TestSwiftTranspiler_Algorithms_Golden290_divide_and_conquer_heaps_algorithm3550496789/001/main.swift:115:45: error: cannot pass immutable value as inout argument: 'arr' is a 'let' constant
113 |         }
114 |         var res: [[Int]] = ([] as! [[Int]])
115 |         res = (permute(_int(((arr).count)), &arr, &res) as! [[Int]])
    |                                             `- error: cannot pass immutable value as inout argument: 'arr' is a 'let' constant
116 |         return res
117 |     }

/tmp/TestSwiftTranspiler_Algorithms_Golden290_divide_and_conquer_heaps_algorithm3550496789/001/main.swift:115:57: warning: forced cast of '[[Int]]' to same type has no effect
113 |         }
114 |         var res: [[Int]] = ([] as! [[Int]])
115 |         res = (permute(_int(((arr).count)), &arr, &res) as! [[Int]])
    |                                                         `- warning: forced cast of '[[Int]]' to same type has no effect
116 |         return res
117 |     }

/tmp/TestSwiftTranspiler_Algorithms_Golden290_divide_and_conquer_heaps_algorithm3550496789/001/main.swift:119:60: warning: forced cast of '[[Int]]' to same type has no effect
117 |     }
118 |     func main() {
119 |         let perms: [[Int]] = (heaps(([1, 2, 3] as! [Int])) as! [[Int]])
    |                                                            `- warning: forced cast of '[[Int]]' to same type has no effect
120 |         print(_p("[" + perms.map{ if let s = $0 as? String { "\"" + s.replacingOccurrences(of: "\"", with: "\\\"") + "\"" } else { _p($0) } }.joined(separator: ", ") + "]"))
121 |     }

/tmp/TestSwiftTranspiler_Algorithms_Golden290_divide_and_conquer_heaps_algorithm3550496789/001/main.swift:120:49: warning: cast from '[Int]' to unrelated type 'String' always fails
118 |     func main() {
119 |         let perms: [[Int]] = (heaps(([1, 2, 3] as! [Int])) as! [[Int]])
120 |         print(_p("[" + perms.map{ if let s = $0 as? String { "\"" + s.replacingOccurrences(of: "\"", with: "\\\"") + "\"" } else { _p($0) } }.joined(separator: ", ") + "]"))
    |                                                 `- warning: cast from '[Int]' to unrelated type 'String' always fails
121 |     }
122 |     _ = main()

/tmp/TestSwiftTranspiler_Algorithms_Golden290_divide_and_conquer_heaps_algorithm3550496789/001/main.swift:122:5: warning: using '_' to ignore the result of a Void-returning function is redundant
120 |         print(_p("[" + perms.map{ if let s = $0 as? String { "\"" + s.replacingOccurrences(of: "\"", with: "\\\"") + "\"" } else { _p($0) } }.joined(separator: ", ") + "]"))
121 |     }
122 |     _ = main()
    |     `- warning: using '_' to ignore the result of a Void-returning function is redundant
123 |     let _benchEnd = _now()
124 |     let _benchMemEnd = _mem()
