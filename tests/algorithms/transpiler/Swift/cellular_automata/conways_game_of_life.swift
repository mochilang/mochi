// Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:58:02 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let GLIDER: [[Int]] = ([([0, 1, 0, 0, 0, 0, 0, 0] as! [Int]), ([0, 0, 1, 0, 0, 0, 0, 0] as! [Int]), ([1, 1, 1, 0, 0, 0, 0, 0] as! [Int]), ([0, 0, 0, 0, 0, 0, 0, 0] as! [Int]), ([0, 0, 0, 0, 0, 0, 0, 0] as! [Int]), ([0, 0, 0, 0, 0, 0, 0, 0] as! [Int]), ([0, 0, 0, 0, 0, 0, 0, 0] as! [Int]), ([0, 0, 0, 0, 0, 0, 0, 0] as! [Int])] as! [[Int]])
    let BLINKER: [[Int]] = ([([0, 1, 0] as! [Int]), ([0, 1, 0] as! [Int]), ([0, 1, 0] as! [Int])] as! [[Int]])
    func new_generation(_ cells: [[Int]]) -> [[Int]] {
        let rows = Int(((cells).count))
        let cols = Int((((cells[0] as! [Int])).count))
        var next: [[Int]] = ([] as! [[Int]])
        var i: Int = 0
        while (i < rows) {
            var row: [Int] = ([] as! [Int])
            var j: Int = 0
            while (j < cols) {
                var count: Int = 0
                if ((i > 0) && (j > 0)) {
                    count = Int((count &+ (cells[(i &- 1)][(j &- 1)] as? Int ?? 0)))
                }
                if (i > 0) {
                    count = Int((count &+ (cells[(i &- 1)][j] as? Int ?? 0)))
                }
                if ((i > 0) && (j < (cols &- 1))) {
                    count = Int((count &+ (cells[(i &- 1)][(j &+ 1)] as? Int ?? 0)))
                }
                if (j > 0) {
                    count = Int((count &+ (cells[i][(j &- 1)] as? Int ?? 0)))
                }
                if (j < (cols &- 1)) {
                    count = Int((count &+ (cells[i][(j &+ 1)] as? Int ?? 0)))
                }
                if ((i < (rows &- 1)) && (j > 0)) {
                    count = Int((count &+ (cells[(i &+ 1)][(j &- 1)] as? Int ?? 0)))
                }
                if (i < (rows &- 1)) {
                    count = Int((count &+ (cells[(i &+ 1)][j] as? Int ?? 0)))
                }
                if ((i < (rows &- 1)) && (j < (cols &- 1))) {
                    count = Int((count &+ (cells[(i &+ 1)][(j &+ 1)] as? Int ?? 0)))
                }
                let alive = ((cells[i][j] as? Int ?? 0) == 1)
                if (((alive && (count >= 2)) && (count <= 3)) || ((!alive) && (count == 3))) {
                    row = (_append(row, 1) as! [Int])
                } else {
                    row = (_append(row, 0) as! [Int])
                }
                j = Int((j &+ 1))
            }
            next = (_append(next, row) as! [[Int]])
            i = Int((i &+ 1))
        }
        return next
    }
    func generate_generations(_ cells: [[Int]], _ frames: Int) -> [[[Int]]] {
        var result: [[[Int]]] = ([] as! [[[Int]]])
        var i: Int = 0
        var current: [[Int]] = cells
        while (i < frames) {
            result = (_append(result, current) as! [[[Int]]])
            current = (new_generation((current as! [[Int]])) as! [[Int]])
            i = Int((i &+ 1))
        }
        return result
    }
    func main() {
        let frames: [[[Int]]] = (generate_generations((GLIDER as! [[Int]]), 4) as! [[[Int]]])
        var i: Int = 0
        while (i < Int(((frames).count))) {
            print(_p("[" + (frames[i] as! [[Int]]).map{ if let s = $0 as? String { "\"" + s.replacingOccurrences(of: "\"", with: "\\\"") + "\"" } else { _p($0) } }.joined(separator: ", ") + "]"))
            i = Int((i &+ 1))
        }
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
