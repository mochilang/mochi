// Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:58:06 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func count_alive_neighbours(_ board: [[Bool]], _ row: Int, _ col: Int) -> Int {
        let size = Int(((board).count))
        var alive: Int = 0
        var dr: Int = -1
        while (dr < 2) {
            var dc: Int = -1
            while (dc < 2) {
                let nr = (row &+ dr)
                let nc = (col &+ dc)
                if (((((!((dr == 0) && (dc == 0))) && (nr >= 0)) && (nr < size)) && (nc >= 0)) && (nc < size)) {
                    if (board[nr][nc] as! Bool) {
                        alive = Int((alive &+ 1))
                    }
                }
                dc = Int((dc &+ 1))
            }
            dr = Int((dr &+ 1))
        }
        return alive
    }
    func next_state(_ current: Bool, _ alive: Int) -> Bool {
        var state: Bool = current
        if current {
            if (alive < 2) {
                state = false
            } else if ((alive == 2) || (alive == 3)) {
                state = true
            } else {
                state = false
            }
            
        } else {
            if (alive == 3) {
                state = true
            }
        }
        return state
    }
    func step(_ board: [[Bool]]) -> [[Bool]] {
        let size = Int(((board).count))
        var new_board: [[Bool]] = ([] as! [[Bool]])
        var r: Int = 0
        while (r < size) {
            var new_row: [Bool] = ([] as! [Bool])
            var c: Int = 0
            while (c < size) {
                let alive = Int(count_alive_neighbours((board as! [[Bool]]), r, c))
                let cell = (board[r][c] as! Bool)
                let updated = next_state((cell as! Bool), alive)
                new_row = (_append(new_row, updated) as! [Bool])
                c = Int((c &+ 1))
            }
            new_board = (_append(new_board, new_row) as! [[Bool]])
            r = Int((r &+ 1))
        }
        return new_board
    }
    func show(_ board: [[Bool]]) {
        var r: Int = 0
        while (r < Int(((board).count))) {
            var line: String = ""
            var c: Int = 0
            while (c < Int((((board[r] as! [Bool])).count))) {
                if (board[r][c] as! Bool) {
                    line = ((line + "#") as! String)
                } else {
                    line = ((line + ".") as! String)
                }
                c = Int((c &+ 1))
            }
            print(_p(line))
            r = Int((r &+ 1))
        }
    }
    let glider: [[Bool]] = ([([false, true, false, false, false] as! [Bool]), ([false, false, true, false, false] as! [Bool]), ([true, true, true, false, false] as! [Bool]), ([false, false, false, false, false] as! [Bool]), ([false, false, false, false, false] as! [Bool])] as! [[Bool]])
    var board: [[Bool]] = glider
    print(_p("Initial"))
    _ = show((board as! [[Bool]]))
    var i: Int = 0
    while (i < 4) {
        board = (step((board as! [[Bool]])) as! [[Bool]])
        print(_p(("\nStep " + String(describing: (i &+ 1)))))
        _ = show((board as! [[Bool]]))
        i = Int((i &+ 1))
    }
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
