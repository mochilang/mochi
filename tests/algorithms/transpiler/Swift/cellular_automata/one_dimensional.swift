// Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:58:13 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func format_ruleset(_ ruleset: Int) -> [Int] {
        var rs: Int = ruleset
        var bits_rev: [Int] = ([] as! [Int])
        var i: Int = 0
        while (i < 8) {
            bits_rev = (_append(bits_rev, (rs % 2)) as! [Int])
            rs = Int((rs / 2))
            i = Int((i &+ 1))
        }
        var bits: [Int] = ([] as! [Int])
        var j: Int = (Int(((bits_rev).count)) &- 1)
        while (j >= 0) {
            bits = (_append(bits, (bits_rev[j] as? Int ?? 0)) as! [Int])
            j = Int((j &- 1))
        }
        return bits
    }
    func new_generation(_ cells: [[Int]], _ rules: [Int], _ time: Int) -> [Int] {
        let population = Int((((cells[0] as! [Int])).count))
        var next_generation: [Int] = ([] as! [Int])
        var i: Int = 0
        while (i < population) {
            let left_neighbor = Int(((i == 0) ? 0 : (cells[time][(i &- 1)] as? Int ?? 0)))
            let right_neighbor = Int(((i == (population &- 1)) ? 0 : (cells[time][(i &+ 1)] as? Int ?? 0)))
            let center = (cells[time][i] as? Int ?? 0)
            let idx = (7 &- Int((((left_neighbor &* 4) &+ (center &* 2)) &+ right_neighbor)))
            next_generation = (_append(next_generation, (rules[idx] as? Int ?? 0)) as! [Int])
            i = Int((i &+ 1))
        }
        return next_generation
    }
    func cells_to_string(_ row: [Int]) -> String {
        var result: String = ""
        var i: Int = 0
        while (i < Int(((row).count))) {
            if ((row[i] as? Int ?? 0) == 1) {
                result = ((result + "#") as! String)
            } else {
                result = ((result + ".") as! String)
            }
            i = Int((i &+ 1))
        }
        return result
    }
    let initial: [Int] = ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] as! [Int])
    var cells: [[Int]] = ([initial] as! [[Int]])
    let rules: [Int] = (format_ruleset(30) as! [Int])
    var time: Int = 0
    while (time < 16) {
        let next: [Int] = (new_generation((cells as! [[Int]]), (rules as! [Int]), time) as! [Int])
        cells = (_append(cells, next) as! [[Int]])
        time = Int((time &+ 1))
    }
    var t: Int = 0
    while (t < Int(((cells).count))) {
        print(_p(String(describing: cells_to_string((cells[t] as! [Int])))))
        t = Int((t &+ 1))
    }
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
