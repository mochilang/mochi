// Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:58:11 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    var seed: Int = 1
    let NEG_ONE = -1
    func rand() -> Int {
        seed = Int((Int(((seed &* 1103515245) &+ 12345)) % 2147483648))
        return seed
    }
    func randint(_ a: Int, _ b: Int) -> Int {
        let r = Int(rand())
        return (a &+ (r % Int(((b &- a) &+ 1))))
    }
    func random() -> Double {
        return (Double((1.0 * Double(Int(rand())))) / 2147483648.0)
    }
    func construct_highway(_ number_of_cells: Int, _ frequency: Int, _ initial_speed: Int, _ random_frequency: Bool, _ random_speed: Bool, _ max_speed: Int) -> [[Int]] {
        var initial_speed = initial_speed
        var row: [Int] = ([] as! [Int])
        var i: Int = 0
        while (i < number_of_cells) {
            row = (_append(row, -1) as! [Int])
            i = Int((i &+ 1))
        }
        var highway: [[Int]] = ([] as! [[Int]])
        highway = (_append(highway, row) as! [[Int]])
        i = 0
        if (initial_speed < 0) {
            initial_speed = 0
        }
        while (i < number_of_cells) {
            var speed: Int = initial_speed
            if random_speed {
                speed = Int(randint(0, max_speed))
            }
            highway[0][i] = Int(speed)
            var step: Int = frequency
            if random_frequency {
                step = Int(randint(1, (max_speed &* 2)))
            }
            i = Int((i &+ step))
        }
        return highway
    }
    func get_distance(_ highway_now: [Int], _ car_index: Int) -> Int {
        var distance: Int = 0
        var i: Int = (car_index &+ 1)
        while (i < Int(((highway_now).count))) {
            if ((highway_now[i] as? Int ?? 0) > NEG_ONE) {
                return distance
            }
            distance = Int((distance &+ 1))
            i = Int((i &+ 1))
        }
        return (distance &+ Int(get_distance((highway_now as! [Int]), -1)))
    }
    func update(_ highway_now: [Int], _ probability: Double, _ max_speed: Int) -> [Int] {
        let number_of_cells = Int(((highway_now).count))
        var next_highway: [Int] = ([] as! [Int])
        var i: Int = 0
        while (i < number_of_cells) {
            next_highway = (_append(next_highway, -1) as! [Int])
            i = Int((i &+ 1))
        }
        var car_index: Int = 0
        while (car_index < number_of_cells) {
            let speed = (highway_now[car_index] as? Int ?? 0)
            if (speed > NEG_ONE) {
                var new_speed: Int = (speed &+ 1)
                if (new_speed > max_speed) {
                    new_speed = Int(max_speed)
                }
                let dn = (Int(get_distance((highway_now as! [Int]), car_index)) &- 1)
                if (new_speed > dn) {
                    new_speed = Int(dn)
                }
                if (Double(random()) < probability) {
                    new_speed = Int((new_speed &- 1))
                    if (new_speed < 0) {
                        new_speed = 0
                    }
                }
                next_highway = _set(next_highway, car_index, Int(new_speed))
            }
            car_index = Int((car_index &+ 1))
        }
        return next_highway
    }
    func simulate(_ highway: inout [[Int]], _ number_of_update: Int, _ probability: Double, _ max_speed: Int) -> [[Int]] {
        let number_of_cells = Int((((highway[0] as! [Int])).count))
        var i: Int = 0
        while (i < number_of_update) {
            let next_speeds: [Int] = (update((highway[i] as! [Int]), Double(probability), max_speed) as! [Int])
            var real_next: [Int] = ([] as! [Int])
            var j: Int = 0
            while (j < number_of_cells) {
                real_next = (_append(real_next, -1) as! [Int])
                j = Int((j &+ 1))
            }
            var k: Int = 0
            while (k < number_of_cells) {
                let speed = (next_speeds[k] as? Int ?? 0)
                if (speed > NEG_ONE) {
                    let index = (Int((k &+ speed)) % number_of_cells)
                    real_next = _set(real_next, index, Int(speed))
                }
                k = Int((k &+ 1))
            }
            highway = (_append(highway, real_next) as! [[Int]])
            i = Int((i &+ 1))
        }
        return highway
    }
    func main() {
        let ex1: [[Int]] = ({ () -> Any in
        var _tmp0 = construct_highway(6, 3, 0, false, false, 2)
        return simulate(&_tmp0, 2, 0.0, 2)
    }() as! [[Int]])
    print(_p("[" + ex1.map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    let ex2: [[Int]] = ({ () -> Any in
    var _tmp0 = construct_highway(5, 2, -2, false, false, 2)
    return simulate(&_tmp0, 3, 0.0, 2)
}() as! [[Int]])
print(_p("[" + ex2.map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
}
_ = main()
let _benchEnd = _now()
let _benchMemEnd = _mem()
print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
