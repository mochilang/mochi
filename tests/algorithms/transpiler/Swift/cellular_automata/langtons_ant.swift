// Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:58:08 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func create_board(_ width: Int, _ height: Int) -> [[Bool]] {
        var board: [[Bool]] = ([] as! [[Bool]])
        var i: Int = 0
        while (i < height) {
            var row: [Bool] = ([] as! [Bool])
            var j: Int = 0
            while (j < width) {
                row = (_append(row, true) as! [Bool])
                j = Int((j &+ 1))
            }
            board = (_append(board, row) as! [[Bool]])
            i = Int((i &+ 1))
        }
        return board
    }
    func move_ant(_ board: inout [[Bool]], _ x: Int, _ y: Int, _ direction: Int) -> [Int] {
        var x = x
        var y = y
        var direction = direction
        if (board[x][y] as! Bool) {
            direction = Int((Int((direction &+ 1)) % 4))
        } else {
            direction = Int((Int((direction &+ 3)) % 4))
        }
        let old_x = x
        let old_y = y
        if (direction == 0) {
            x = Int((x &- 1))
        } else if (direction == 1) {
            y = Int((y &+ 1))
        } else if (direction == 2) {
            x = Int((x &+ 1))
        } else {
            y = Int((y &- 1))
        }
        
        
        board[old_x][old_y] = (!(board[old_x][old_y] ?? false) as! Bool)
        return ([x, y, direction] as! [Int])
    }
    func langtons_ant(_ width: Int, _ height: Int, _ steps: Int) -> [[Bool]] {
        var board: [[Bool]] = (create_board(width, height) as! [[Bool]])
        var x: Int = (width / 2)
        var y: Int = (height / 2)
        var dir: Int = 3
        var s: Int = 0
        while (s < steps) {
            let state: [Int] = (move_ant(&board, x, y, dir) as! [Int])
            x = (state[0] as? Int ?? 0)
            y = (state[1] as? Int ?? 0)
            dir = (state[2] as? Int ?? 0)
            s = Int((s &+ 1))
        }
        return board
    }
    do {
        let board: [[Bool]] = (langtons_ant(2, 2, 1) as! [[Bool]])
        assert((board == ([([true, true] as! [Bool]), ([true, false] as! [Bool])] as! [[Bool]])))
    }
    do {
        let board: [[Bool]] = (langtons_ant(2, 2, 2) as! [[Bool]])
        assert((board == ([([true, false] as! [Bool]), ([true, false] as! [Bool])] as! [[Bool]])))
    }
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
