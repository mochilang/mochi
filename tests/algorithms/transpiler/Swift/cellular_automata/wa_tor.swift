// Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:58:17 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _set<T>(_ xs: [T], _ idx: Int, _ v: T) -> [T] {
    var out = xs
    if idx < out.count {
        out[idx] = v
    } else {
        out.append(contentsOf: Array(repeating: v, count: idx - out.count + 1))
        out[idx] = v
    }
    return out
}
func _set<K: Hashable, V>(_ xs: [K: V], _ key: K, _ v: V) -> [K: V] {
    var out = xs
    out[key] = v
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let WIDTH = 10
    let HEIGHT = 10
    let PREY_INITIAL_COUNT = 20
    let PREY_REPRODUCTION_TIME = 5
    let PREDATOR_INITIAL_COUNT = 5
    let PREDATOR_REPRODUCTION_TIME = 20
    let PREDATOR_INITIAL_ENERGY = 15
    let PREDATOR_FOOD_VALUE = 5
    let TYPE_PREY = 0
    let TYPE_PREDATOR = 1
    var seed: Int = 123456789
    func rand() -> Int {
        seed = Int((Int(((seed &* 1103515245) &+ 12345)) % 2147483648))
        return seed
    }
    func rand_range(_ max: Int) -> Int {
        return (Int(rand()) % max)
    }
    func shuffle(_ list_int: inout [Int]) -> [Int] {
        var i: Int = (Int(((list_int).count)) &- 1)
        while (i > 0) {
            let j = Int(rand_range((i &+ 1)))
            let tmp = (list_int[i] as? Int ?? 0)
            list_int = _set(list_int, i, (list_int[j] as? Int ?? 0))
            list_int = _set(list_int, j, Int(tmp))
            i = Int((i &- 1))
        }
        return list_int
    }
    func create_board() -> [[Int]] {
        var board: [[Int]] = ([] as! [[Int]])
        var r: Int = 0
        while (r < HEIGHT) {
            var row: [Int] = ([] as! [Int])
            var c: Int = 0
            while (c < WIDTH) {
                row = (_append(row, 0) as! [Int])
                c = Int((c &+ 1))
            }
            board = (_append(board, row) as! [[Int]])
            r = Int((r &+ 1))
        }
        return board
    }
    func create_prey(_ r: Int, _ c: Int) -> [Int] {
        return ([TYPE_PREY, r, c, PREY_REPRODUCTION_TIME, 0, 1] as! [Int])
    }
    func create_predator(_ r: Int, _ c: Int) -> [Int] {
        return ([TYPE_PREDATOR, r, c, PREDATOR_REPRODUCTION_TIME, PREDATOR_INITIAL_ENERGY, 1] as! [Int])
    }
    var board: [[Int]] = (create_board() as! [[Int]])
    var entities: [[Int]] = ([] as! [[Int]])
    func empty_cell(_ r: Int, _ c: Int) -> Bool {
        return ((board[r][c] as? Int ?? 0) == 0)
    }
    func add_entity(_ typ: Int) {
        while true {
            let r = Int(rand_range(HEIGHT))
            let c = Int(rand_range(WIDTH))
            if empty_cell(r, c) {
                if (typ == TYPE_PREY) {
                    board[r][c] = 1
                    entities = (_append(entities, (create_prey(r, c) as! [Int])) as! [[Int]])
                } else {
                    board[r][c] = 2
                    entities = (_append(entities, (create_predator(r, c) as! [Int])) as! [[Int]])
                }
                return
            }
        }
    }
    func setup() {
        var i: Int = 0
        while (i < PREY_INITIAL_COUNT) {
            _ = add_entity(TYPE_PREY)
            i = Int((i &+ 1))
        }
        i = 0
        while (i < PREDATOR_INITIAL_COUNT) {
            _ = add_entity(TYPE_PREDATOR)
            i = Int((i &+ 1))
        }
    }
    let dr: [Int] = ([-1, 0, 1, 0] as! [Int])
    let dc: [Int] = ([0, 1, 0, -1] as! [Int])
    func inside(_ r: Int, _ c: Int) -> Bool {
        return ((((r >= 0) && (r < HEIGHT)) && (c >= 0)) && (c < WIDTH))
    }
    func find_prey(_ r: Int, _ c: Int) -> Int {
        var i: Int = 0
        while (i < Int(((entities).count))) {
            let e: [Int] = (entities[i] as! [Int])
            if (((((e[5] as? Int ?? 0) == 1) && ((e[0] as? Int ?? 0) == TYPE_PREY)) && ((e[1] as? Int ?? 0) == r)) && ((e[2] as? Int ?? 0) == c)) {
                return i
            }
            i = Int((i &+ 1))
        }
        return -1
    }
    func step_world() {
        var i: Int = 0
        while (i < Int(((entities).count))) {
            var e: [Int] = (entities[i] as! [Int])
            if ((e[5] as? Int ?? 0) == 0) {
                i = Int((i &+ 1))
                continue
            }
            let typ = (e[0] as? Int ?? 0)
            let row = (e[1] as? Int ?? 0)
            let col = (e[2] as? Int ?? 0)
            let repro = (e[3] as? Int ?? 0)
            let energy = (e[4] as? Int ?? 0)
            var dirs: [Int] = ([0, 1, 2, 3] as! [Int])
            dirs = (shuffle(&dirs) as! [Int])
            var moved: Bool = false
            let old_r = row
            let old_c = col
            if (typ == TYPE_PREDATOR) {
                var j: Int = 0
                var ate: Bool = false
                while (j < 4) {
                    let d = (dirs[j] as? Int ?? 0)
                    let nr = (row &+ (dr[d] as? Int ?? 0))
                    let nc = (col &+ (dc[d] as? Int ?? 0))
                    if (inside(nr, nc) && ((board[nr][nc] as? Int ?? 0) == 1)) {
                        let prey_index = Int(find_prey(nr, nc))
                        if (prey_index >= 0) {
                            entities[prey_index][5] = 0
                        }
                        board[nr][nc] = 2
                        board[row][col] = 0
                        e = _set(e, 1, Int(nr))
                        e = _set(e, 2, Int(nc))
                        e = _set(e, 4, Int(((energy &+ PREDATOR_FOOD_VALUE) &- 1)))
                        moved = true
                        ate = true
                        break
                    }
                    j = Int((j &+ 1))
                }
                if (!ate) {
                    j = 0
                    while (j < 4) {
                        let d = (dirs[j] as? Int ?? 0)
                        let nr = (row &+ (dr[d] as? Int ?? 0))
                        let nc = (col &+ (dc[d] as? Int ?? 0))
                        if (inside(nr, nc) && ((board[nr][nc] as? Int ?? 0) == 0)) {
                            board[nr][nc] = 2
                            board[row][col] = 0
                            e = _set(e, 1, Int(nr))
                            e = _set(e, 2, Int(nc))
                            moved = true
                            break
                        }
                        j = Int((j &+ 1))
                    }
                    e = _set(e, 4, Int((energy &- 1)))
                }
                if ((e[4] as? Int ?? 0) <= 0) {
                    e = _set(e, 5, 0)
                    board[(e[1] as? Int ?? 0)][(e[2] as? Int ?? 0)] = 0
                }
            } else {
                var j: Int = 0
                while (j < 4) {
                    let d = (dirs[j] as? Int ?? 0)
                    let nr = (row &+ (dr[d] as? Int ?? 0))
                    let nc = (col &+ (dc[d] as? Int ?? 0))
                    if (inside(nr, nc) && ((board[nr][nc] as? Int ?? 0) == 0)) {
                        board[nr][nc] = 1
                        board[row][col] = 0
                        e = _set(e, 1, Int(nr))
                        e = _set(e, 2, Int(nc))
                        moved = true
                        break
                    }
                    j = Int((j &+ 1))
                }
            }
            if ((e[5] as? Int ?? 0) == 1) {
                if (moved && (repro <= 0)) {
                    if (typ == TYPE_PREY) {
                        board[old_r][old_c] = 1
                        entities = (_append(entities, (create_prey(old_r, old_c) as! [Int])) as! [[Int]])
                        e = _set(e, 3, Int(PREY_REPRODUCTION_TIME))
                    } else {
                        board[old_r][old_c] = 2
                        entities = (_append(entities, (create_predator(old_r, old_c) as! [Int])) as! [[Int]])
                        e = _set(e, 3, Int(PREDATOR_REPRODUCTION_TIME))
                    }
                } else {
                    e = _set(e, 3, Int((repro &- 1)))
                }
            }
            i = Int((i &+ 1))
        }
        var alive: [[Int]] = ([] as! [[Int]])
        var k: Int = 0
        while (k < Int(((entities).count))) {
            let e2: [Int] = (entities[k] as! [Int])
            if ((e2[5] as? Int ?? 0) == 1) {
                alive = (_append(alive, e2) as! [[Int]])
            }
            k = Int((k &+ 1))
        }
        entities = (alive as! [[Int]])
    }
    func count_entities(_ typ: Int) -> Int {
        var cnt: Int = 0
        var i: Int = 0
        while (i < Int(((entities).count))) {
            if (((entities[i][0] as? Int ?? 0) == typ) && ((entities[i][5] as? Int ?? 0) == 1)) {
                cnt = Int((cnt &+ 1))
            }
            i = Int((i &+ 1))
        }
        return cnt
    }
    _ = setup()
    var t: Int = 0
    while (t < 10) {
        _ = step_world()
        t = Int((t &+ 1))
    }
    print(_p(("Prey: " + String(describing: Int(count_entities(TYPE_PREY))))))
    print(_p(("Predators: " + String(describing: Int(count_entities(TYPE_PREDATOR))))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
