// Generated by Mochi transpiler v0.10.64 on 2025-08-13 16:14:49 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                if d <= Double(Int64.max) && d >= Double(Int64.min) {
                    return String(Int64(d))
                }
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _idx<T>(_ xs: [T], _ i: Int) -> T? {
    var idx = i
    if idx < 0 { idx += xs.count }
    if idx >= 0 && idx < xs.count { return xs[idx] }
    return xs.first
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
struct SMAValue: Codable {
    var value: Double
    var ok: Bool
    init() {
        self.value = 0
        self.ok = false
    }
    init(value: Double, ok: Bool) {
        self.value = value
        self.ok = ok
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func simple_moving_average(_ data: [Double], _ window_size: Int) -> [SMAValue] {
        if (window_size < 1) {
            _ = fatalError("Window size must be a positive integer")
        }
        var result: [SMAValue] = ([] as! [SMAValue])
        var window_sum: Double = 0.0
        var i: Int = 0
        while (i < _int(((data).count))) {
            window_sum = Double((window_sum + Double(_idx(data, i))))
            if (i >= window_size) {
                window_sum = Double((window_sum - Double(_idx(data, (i &- window_size)))))
            }
            if (i >= (window_size &- 1)) {
                let avg = (window_sum / Double(window_size))
                result = (_append(result, SMAValue(value: Double(avg), ok: true)) as! [SMAValue])
            } else {
                result = (_append(result, SMAValue(value: 0.0, ok: false)) as! [SMAValue])
            }
            i = _int((i &+ 1))
        }
        return result
    }
    let data: [Double] = ({
        var _arr: [Double] = []
        _arr = _append(_arr, 10.0)
        _arr = _append(_arr, 12.0)
        _arr = _append(_arr, 15.0)
        _arr = _append(_arr, 13.0)
        _arr = _append(_arr, 14.0)
        _arr = _append(_arr, 16.0)
        _arr = _append(_arr, 18.0)
        _arr = _append(_arr, 17.0)
        _arr = _append(_arr, 19.0)
        _arr = _append(_arr, 21.0)
        return _arr
    }() as! [Double])
    let window_size = 3
    let sma_values: [SMAValue] = (simple_moving_average((data as! [Double]), window_size) as! [SMAValue])
    var idx = 0
    while (idx < _int(((sma_values).count))) {
        let item = (_idx(sma_values, idx) as! SMAValue)
        if item.ok {
            print(_p(((("Day " + _p((idx &+ 1))) + ": ") + _p(item.value))))
        } else {
            print(_p((("Day " + _p((idx &+ 1))) + ": Not enough data for SMA")))
        }
        idx = _int((idx &+ 1))
    }
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
