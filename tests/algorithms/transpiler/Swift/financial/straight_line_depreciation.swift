// Generated by Mochi transpiler v0.10.61 on 2025-08-08 19:13:56 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func straight_line_depreciation(_ useful_years: Int, _ purchase_value: Double, _ residual_value: Double) -> [Double] {
        if (useful_years < 1) {
            _ = fatalError("Useful years cannot be less than 1")
        }
        if (purchase_value < 0.0) {
            _ = fatalError("Purchase value cannot be less than zero")
        }
        if (purchase_value < residual_value) {
            _ = fatalError("Purchase value cannot be less than residual value")
        }
        let depreciable_cost = (purchase_value - residual_value)
        let annual_expense = (depreciable_cost / Double((1.0 * Double(useful_years))))
        var expenses: [Double] = ([] as! [Double])
        var accumulated = 0.0
        var period = 0
        while (period < useful_years) {
            if (period != (useful_years &- 1)) {
                accumulated = Double((accumulated + annual_expense))
                expenses = (_append(expenses, annual_expense) as! [Double])
            } else {
                let end_year_expense = (depreciable_cost - accumulated)
                expenses = (_append(expenses, end_year_expense) as! [Double])
            }
            period = _int((period &+ 1))
        }
        return expenses
    }
    print(_p("[" + (straight_line_depreciation(10, 1100.0, 100.0) as! [Double]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    print(_p("[" + (straight_line_depreciation(6, 1250.0, 50.0) as! [Double]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    print(_p("[" + (straight_line_depreciation(4, 1001.0, 0.0) as! [Double]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    print(_p("[" + (straight_line_depreciation(11, 380.0, 50.0) as! [Double]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    print(_p("[" + (straight_line_depreciation(1, 4985.0, 100.0) as! [Double]).map{ _p($0).replacingOccurrences(of: ", ", with: " ") }.joined(separator: " ") + "]"))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
