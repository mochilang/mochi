// Generated by Mochi transpiler v0.10.59 on 2025-08-07 08:54:57 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func panic(_ msg: String) {
        print(_p(msg))
    }
    func powf(_ base: Double, _ exp: Double) -> Double {
        var result: Double = 1.0
        var i: Int = 0
        while (i < Int(exp)) {
            result = Double((result * base))
            i = Int((i &+ 1))
        }
        return result
    }
    func simple_interest(_ principal: Double, _ daily_rate: Double, _ days: Double) -> Double {
        if (days <= 0.0) {
            _ = fatalError("days_between_payments must be > 0")
            return 0.0
        }
        if (daily_rate < 0.0) {
            _ = fatalError("daily_interest_rate must be >= 0")
            return 0.0
        }
        if (principal <= 0.0) {
            _ = fatalError("principal must be > 0")
            return 0.0
        }
        return ((principal * daily_rate) * days)
    }
    func compound_interest(_ principal: Double, _ nominal_rate: Double, _ periods: Double) -> Double {
        if (periods <= 0.0) {
            _ = fatalError("number_of_compounding_periods must be > 0")
            return 0.0
        }
        if (nominal_rate < 0.0) {
            _ = fatalError("nominal_annual_interest_rate_percentage must be >= 0")
            return 0.0
        }
        if (principal <= 0.0) {
            _ = fatalError("principal must be > 0")
            return 0.0
        }
        return (principal * Double((Double(powf(Double((1.0 + nominal_rate)), Double(periods))) - 1.0)))
    }
    func apr_interest(_ principal: Double, _ apr: Double, _ years: Double) -> Double {
        if (years <= 0.0) {
            _ = fatalError("number_of_years must be > 0")
            return 0.0
        }
        if (apr < 0.0) {
            _ = fatalError("nominal_annual_percentage_rate must be >= 0")
            return 0.0
        }
        if (principal <= 0.0) {
            _ = fatalError("principal must be > 0")
            return 0.0
        }
        return Double(compound_interest(Double(principal), Double((apr / 365.0)), Double((years * 365.0))))
    }
    func main() {
        print(_p(_p(Double(simple_interest(18000.0, 0.06, 3.0)))))
        print(_p(_p(Double(simple_interest(0.5, 0.06, 3.0)))))
        print(_p(_p(Double(simple_interest(18000.0, 0.01, 10.0)))))
        print(_p(_p(Double(compound_interest(10000.0, 0.05, 3.0)))))
        print(_p(_p(Double(compound_interest(10000.0, 0.05, 1.0)))))
        print(_p(_p(Double(apr_interest(10000.0, 0.05, 3.0)))))
        print(_p(_p(Double(apr_interest(10000.0, 0.05, 1.0)))))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
