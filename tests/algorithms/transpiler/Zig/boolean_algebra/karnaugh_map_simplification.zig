// Generated by Mochi Zig transpiler on 2025-08-06 21:31 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

var kmap_var: i64 = 0;

fn row_string(row: []i64) []const u8 {
    var s: []const u8 = "[";
    var i: i64 = 0;
    while (i < @as(i64, @intCast(row.len))) {
        s = _concat_string(s, _str(row[@as(usize, @intCast(i))]));
        if (i < @as(i64, @intCast(row.len)) - 1) {
            s = _concat_string(s, ", ");
        }
        i = i + 1;
    }
    s = _concat_string(s, "]");
    return s;
}

fn print_kmap(kmap_param: [][]i64) void {
    var i: i64 = 0;
    while (i < @as(i64, @intCast(kmap_param.len))) {
        std.debug.print("{s}\n", .{row_string(kmap_param[@as(usize, @intCast(i))])});
        i = i + 1;
    }
}

fn join_terms(terms: [][]const u8) []const u8 {
    if (@as(i64, @intCast(terms.len)) == 0) {
        return "";
    }
    var res: []const u8 = terms[@as(usize, @intCast(0))];
    var i: i64 = 1;
    while (i < @as(i64, @intCast(terms.len))) {
        res = _concat_string(_concat_string(res, " + "), terms[@as(usize, @intCast(i))]);
        i = i + 1;
    }
    return res;
}

fn simplify_kmap(board: [][]i64) []const u8 {
    var terms_1: [][]const u8 = &[_][]const u8{};
    var a: i64 = 0;
    while (a < @as(i64, @intCast(board.len))) {
        const row_1: []i64 = board[@as(usize, @intCast(a))];
        var b: i64 = 0;
        while (b < @as(i64, @intCast(row_1.len))) {
            const item: i64 = row_1[@as(usize, @intCast(b))];
            if (item != 0) {
                const term: []const u8 = _concat_string(if (a != 0) "A" else "A'", if (b != 0) "B" else "B'");
                terms_1 = blk: { var _tmp = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []const u8, terms_1)) catch |err| handleError(err); _tmp.append(term) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            }
            b = b + 1;
        }
        a = a + 1;
    }
    const expr: []const u8 = join_terms(terms_1);
    return expr;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        kmap_var = blk0: { var _tmp0 = std.heap.page_allocator.alloc([]i64, 2) catch unreachable; _tmp0[0] = blk1: { var _tmp1 = std.heap.page_allocator.alloc(i64, 2) catch unreachable; _tmp1[0] = 0; _tmp1[1] = 1; break :blk1 _tmp1; }; _tmp0[1] = blk2: { var _tmp2 = std.heap.page_allocator.alloc(i64, 2) catch unreachable; _tmp2[0] = 1; _tmp2[1] = 1; break :blk2 _tmp2; }; break :blk0 _tmp0; };
        print_kmap(kmap_var);
        std.debug.print("{s}\n", .{"Simplified Expression:"});
        std.debug.print("{s}\n", .{simplify_kmap(kmap_var)});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    if (info == .Pointer and info.Pointer.size == .Slice) {
        var out = std.ArrayList(u8).init(std.heap.page_allocator);
        defer out.deinit();
        out.append('[') catch unreachable;
        for (v, 0..) |e, i| {
            if (i != 0) { out.append(' ') catch unreachable; }
            const s = _str(e);
            out.appendSlice(s) catch unreachable;
        }
        out.append(']') catch unreachable;
        return out.toOwnedSlice() catch unreachable;
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * std.mem.page_size;
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
