// Generated by Mochi Zig transpiler on 2025-08-06 22:23 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn compare_string(string1: []const u8, string2: []const u8) []const u8 {
    var result: []const u8 = "";
    var count: i64 = 0;
    var i: i64 = 0;
    while (i < @as(i64, @intCast(string1.len))) {
        const c1: []const u8 = string1[@as(usize, @intCast(i))..@min(@as(usize, @intCast(i + 1)), @as(usize, @intCast(string1.len)))];
        const c2: []const u8 = string2[@as(usize, @intCast(i))..@min(@as(usize, @intCast(i + 1)), @as(usize, @intCast(string2.len)))];
        if (c1 != c2) {
            count = count + 1;
            result = _concat_string(result, "_");
        } else {
            result = _concat_string(result, c1);
        }
        i = i + 1;
    }
    if (count > 1) {
        return "";
    }
    return result;
}

fn contains_string(arr: [][]const u8, value: []const u8) bool {
    var i: i64 = 0;
    while (i < @as(i64, @intCast(arr.len))) {
        if (arr[@as(usize, @intCast(i))] == value) {
            return true;
        }
        i = i + 1;
    }
    return false;
}

fn unique_strings(arr: [][]const u8) [][]const u8 {
    var res: [][]const u8 = &[_][]const u8{};
    var i: i64 = 0;
    while (i < @as(i64, @intCast(arr.len))) {
        if (!(contains_string(res, arr[@as(usize, @intCast(i))]))) {
            res = blk: { var _tmp = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []const u8, res)) catch |err| handleError(err); _tmp.append(arr[@as(usize, @intCast(i))]) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        }
        i = i + 1;
    }
    return res;
}

fn check(binary: [][]const u8) [][]const u8 {
    var pi: [][]const u8 = &[_][]const u8{};
    var current: [][]const u8 = blk: { const tmp = std.heap.page_allocator.alloc([]const u8, binary.len) catch unreachable; @memcpy(tmp, binary); break :blk tmp; };
    while (true) {
        var check1: [][]const u8 = &[_][]const u8{};
        var i: i64 = 0;
        while (i < @as(i64, @intCast(current.len))) {
            check1 = blk: { var _tmp = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []const u8, check1)) catch |err| handleError(err); _tmp.append("$") catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            i = i + 1;
        }
        var temp: [][]const u8 = &[_][]const u8{};
        i = 0;
        while (i < @as(i64, @intCast(current.len))) {
            var j: i64 = i + 1;
            while (j < @as(i64, @intCast(current.len))) {
                const k: []const u8 = compare_string(current[@as(usize, @intCast(i))], current[@as(usize, @intCast(j))]);
                if (k.len == 0) {
                    check1[@as(usize, @intCast(i))] = "*";
                    check1[@as(usize, @intCast(j))] = "*";
                    temp = blk: { var _tmp = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []const u8, temp)) catch |err| handleError(err); _tmp.append("X") catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
                }
                j = j + 1;
            }
            i = i + 1;
        }
        i = 0;
        while (i < @as(i64, @intCast(current.len))) {
            if (std.mem.eql(u8, check1[@as(usize, @intCast(i))], "$")) {
                pi = blk: { var _tmp = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []const u8, pi)) catch |err| handleError(err); _tmp.append(current[@as(usize, @intCast(i))]) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            }
            i = i + 1;
        }
        if (@as(i64, @intCast(temp.len)) == 0) {
            return pi;
        }
        current = unique_strings(temp);
    }
}

fn decimal_to_binary(no_of_variable: i64, minterms: []i64) [][]const u8 {
    var temp: [][]const u8 = &[_][]const u8{};
    var idx: i64 = 0;
    while (idx < @as(i64, @intCast(minterms.len))) {
        var minterm: i64 = minterms[@as(usize, @intCast(idx))];
        var string: []const u8 = "";
        var i: i64 = 0;
        while (i < no_of_variable) {
            string = _concat_string(_str(@mod(minterm, 2)), string);
            minterm = @divTrunc(minterm, 2);
            i = i + 1;
        }
        temp = blk: { var _tmp = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []const u8, temp)) catch |err| handleError(err); _tmp.append(string) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        idx = idx + 1;
    }
    return temp;
}

fn is_for_table(string1: []const u8, string2: []const u8, count: i64) bool {
    var count_n: i64 = 0;
    var i: i64 = 0;
    while (i < @as(i64, @intCast(string1.len))) {
        const c1: []const u8 = string1[@as(usize, @intCast(i))..@min(@as(usize, @intCast(i + 1)), @as(usize, @intCast(string1.len)))];
        const c2: []const u8 = string2[@as(usize, @intCast(i))..@min(@as(usize, @intCast(i + 1)), @as(usize, @intCast(string2.len)))];
        if (c1 != c2) {
            count_n = count_n + 1;
        }
        i = i + 1;
    }
    return count_n == count;
}

fn count_ones(row: []i64) i64 {
    var c: i64 = 0;
    var j: i64 = 0;
    while (j < @as(i64, @intCast(row.len))) {
        if (row[@as(usize, @intCast(j))] == 1) {
            c = c + 1;
        }
        j = j + 1;
    }
    return c;
}

fn selection(chart: [][]i64, prime_implicants: [][]const u8) [][]const u8 {
    var temp: [][]const u8 = &[_][]const u8{};
    var select: []i64 = &[_]i64{};
    var i: i64 = 0;
    while (i < @as(i64, @intCast(chart.len))) {
        select = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, select)) catch |err| handleError(err); _tmp.append(0) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    var col: i64 = 0;
    while (col < @as(i64, @intCast(chart[@as(usize, @intCast(0))].len))) {
        var count: i64 = 0;
        var row: i64 = 0;
        while (row < @as(i64, @intCast(chart.len))) {
            if (chart[@as(usize, @intCast(row))][@as(usize, @intCast(col))] == 1) {
                count = count + 1;
            }
            row = row + 1;
        }
        if (count == 1) {
            var rem: i64 = 0;
            row = 0;
            while (row < @as(i64, @intCast(chart.len))) {
                if (chart[@as(usize, @intCast(row))][@as(usize, @intCast(col))] == 1) {
                    rem = row;
                }
                row = row + 1;
            }
            select[@as(usize, @intCast(rem))] = 1;
        }
        col = col + 1;
    }
    i = 0;
    while (i < @as(i64, @intCast(select.len))) {
        if (select[@as(usize, @intCast(i))] == 1) {
            var j: i64 = 0;
            while (j < @as(i64, @intCast(chart[@as(usize, @intCast(0))].len))) {
                if (chart[@as(usize, @intCast(i))][@as(usize, @intCast(j))] == 1) {
                    var r: i64 = 0;
                    while (r < @as(i64, @intCast(chart.len))) {
                        chart[@as(usize, @intCast(r))][@as(usize, @intCast(j))] = 0;
                        r = r + 1;
                    }
                }
                j = j + 1;
            }
            temp = blk: { var _tmp = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []const u8, temp)) catch |err| handleError(err); _tmp.append(prime_implicants[@as(usize, @intCast(i))]) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        }
        i = i + 1;
    }
    while (true) {
        var counts: []i64 = &[_]i64{};
        var r: i64 = 0;
        while (r < @as(i64, @intCast(chart.len))) {
            counts = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, counts)) catch |err| handleError(err); _tmp.append(count_ones(chart[@as(usize, @intCast(r))])) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            r = r + 1;
        }
        var max_n: i64 = counts[@as(usize, @intCast(0))];
        var rem: i64 = 0;
        var k: i64 = 1;
        while (k < @as(i64, @intCast(counts.len))) {
            if (counts[@as(usize, @intCast(k))] > max_n) {
                max_n = counts[@as(usize, @intCast(k))];
                rem = k;
            }
            k = k + 1;
        }
        if (max_n == 0) {
            return temp;
        }
        temp = blk: { var _tmp = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []const u8, temp)) catch |err| handleError(err); _tmp.append(prime_implicants[@as(usize, @intCast(rem))]) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        var j: i64 = 0;
        while (j < @as(i64, @intCast(chart[@as(usize, @intCast(0))].len))) {
            if (chart[@as(usize, @intCast(rem))][@as(usize, @intCast(j))] == 1) {
                var r2: i64 = 0;
                while (r2 < @as(i64, @intCast(chart.len))) {
                    chart[@as(usize, @intCast(r2))][@as(usize, @intCast(j))] = 0;
                    r2 = r2 + 1;
                }
            }
            j = j + 1;
        }
    }
}

fn count_char(s: []const u8, ch: []const u8) i64 {
    var cnt: i64 = 0;
    var i: i64 = 0;
    while (i < @as(i64, @intCast(s.len))) {
        if (s[@as(usize, @intCast(i))..@min(@as(usize, @intCast(i + 1)), @as(usize, @intCast(s.len)))] == ch) {
            cnt = cnt + 1;
        }
        i = i + 1;
    }
    return cnt;
}

fn prime_implicant_chart(prime_implicants: [][]const u8, binary: [][]const u8) [][]i64 {
    var chart: [][]i64 = &[_][]i64{};
    var i: i64 = 0;
    while (i < @as(i64, @intCast(prime_implicants.len))) {
        var row: []i64 = &[_]i64{};
        var j: i64 = 0;
        while (j < @as(i64, @intCast(binary.len))) {
            row = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, row)) catch |err| handleError(err); _tmp.append(0) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            j = j + 1;
        }
        chart = blk: { var _tmp = std.ArrayList([]i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []i64, chart)) catch |err| handleError(err); _tmp.append(row) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    i = 0;
    while (i < @as(i64, @intCast(prime_implicants.len))) {
        const count: i64 = count_char(prime_implicants[@as(usize, @intCast(i))], "_");
        var j: i64 = 0;
        while (j < @as(i64, @intCast(binary.len))) {
            if (is_for_table(prime_implicants[@as(usize, @intCast(i))], binary[@as(usize, @intCast(j))], count)) {
                chart[@as(usize, @intCast(i))][@as(usize, @intCast(j))] = 1;
            }
            j = j + 1;
        }
        i = i + 1;
    }
    return chart;
}

fn mochi_main() void {
    const no_of_variable: i64 = 3;
    const minterms: []i64 = blk0: { var _tmp0 = std.heap.page_allocator.alloc(i64, 3) catch unreachable; _tmp0[0] = 1; _tmp0[1] = 5; _tmp0[2] = 7; break :blk0 _tmp0; };
    const binary: [][]const u8 = decimal_to_binary(no_of_variable, minterms);
    const prime_implicants: [][]const u8 = check(binary);
    std.debug.print("{s}\n", .{"Prime Implicants are:"});
    std.debug.print("{s}\n", .{_str(prime_implicants)});
    const chart: [][]i64 = prime_implicant_chart(prime_implicants, binary);
    const essential_prime_implicants: [][]const u8 = selection(chart, prime_implicants);
    std.debug.print("{s}\n", .{"Essential Prime Implicants are:"});
    std.debug.print("{s}\n", .{_str(essential_prime_implicants)});
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        mochi_main();
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    if (info == .Pointer and info.Pointer.size == .Slice) {
        var out = std.ArrayList(u8).init(std.heap.page_allocator);
        defer out.deinit();
        out.append('[') catch unreachable;
        for (v, 0..) |e, i| {
            if (i != 0) { out.append(' ') catch unreachable; }
            const s = _str(e);
            out.appendSlice(s) catch unreachable;
        }
        out.append(']') catch unreachable;
        return out.toOwnedSlice() catch unreachable;
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * std.mem.page_size;
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
