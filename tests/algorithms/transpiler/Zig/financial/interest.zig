// Generated by Mochi Zig transpiler on 2025-08-13 16:55 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn panic(msg_param: []const u8) void {
    var msg_var: []const u8 = msg_param;
    msg_var = msg_var;
    std.debug.print("{s}\n", .{msg_var});
}

fn powf(base_param: f64, exp_param: f64) f64 {
    var base_var: f64 = base_param;
    base_var = base_var;
    var exp_var: f64 = exp_param;
    exp_var = exp_var;
    var result: f64 = 1.0;
    result = result;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intFromFloat(exp_var))) {
        result = result * base_var;
        i = i + 1;
    }
    return result;
}

fn simple_interest(principal_param: f64, daily_rate_param: f64, days_param: f64) f64 {
    var principal_var: f64 = principal_param;
    principal_var = principal_var;
    var daily_rate_var: f64 = daily_rate_param;
    daily_rate_var = daily_rate_var;
    var days_var: f64 = days_param;
    days_var = days_var;
    if (days_var <= 0.0) {
        panic("days_between_payments must be > 0");
        return 0.0;
    }
    if (daily_rate_var < 0.0) {
        panic("daily_interest_rate must be >= 0");
        return 0.0;
    }
    if (principal_var <= 0.0) {
        panic("principal must be > 0");
        return 0.0;
    }
    return principal_var * daily_rate_var * days_var;
}

fn compound_interest(principal_param_1: f64, nominal_rate_param: f64, periods_param: f64) f64 {
    var principal_var: f64 = principal_param_1;
    principal_var = principal_var;
    var nominal_rate_var: f64 = nominal_rate_param;
    nominal_rate_var = nominal_rate_var;
    var periods_var: f64 = periods_param;
    periods_var = periods_var;
    if (periods_var <= 0.0) {
        panic("number_of_compounding_periods must be > 0");
        return 0.0;
    }
    if (nominal_rate_var < 0.0) {
        panic("nominal_annual_interest_rate_percentage must be >= 0");
        return 0.0;
    }
    if (principal_var <= 0.0) {
        panic("principal must be > 0");
        return 0.0;
    }
    return principal_var * (powf(1.0 + nominal_rate_var, periods_var) - 1.0);
}

fn apr_interest(principal_param_2: f64, apr_param: f64, years_param: f64) f64 {
    var principal_var: f64 = principal_param_2;
    principal_var = principal_var;
    var apr_var: f64 = apr_param;
    apr_var = apr_var;
    var years_var: f64 = years_param;
    years_var = years_var;
    if (years_var <= 0.0) {
        panic("number_of_years must be > 0");
        return 0.0;
    }
    if (apr_var < 0.0) {
        panic("nominal_annual_percentage_rate must be >= 0");
        return 0.0;
    }
    if (principal_var <= 0.0) {
        panic("principal must be > 0");
        return 0.0;
    }
    return compound_interest(principal_var, apr_var / 365.0, years_var * 365.0);
}

fn mochi_main() void {
    std.debug.print("{s}\n", .{_str(simple_interest(18000.0, 0.06, 3.0))});
    std.debug.print("{s}\n", .{_str(simple_interest(0.5, 0.06, 3.0))});
    std.debug.print("{s}\n", .{_str(simple_interest(18000.0, 0.01, 10.0))});
    std.debug.print("{s}\n", .{_str(compound_interest(10000.0, 0.05, 3.0))});
    std.debug.print("{s}\n", .{_str(compound_interest(10000.0, 0.05, 1.0))});
    std.debug.print("{s}\n", .{_str(apr_interest(10000.0, 0.05, 3.0))});
    std.debug.print("{s}\n", .{_str(apr_interest(10000.0, 0.05, 1.0))});
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        mochi_main();
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
