// Generated by Mochi Zig transpiler on 2025-08-24 08:57 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const LETTERS_AND_SPACE_var: []const u8 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz \t\n";
const LOWER_var: []const u8 = "abcdefghijklmnopqrstuvwxyz";
const UPPER_var: []const u8 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
var ENGLISH_WORDS_var: std.StringHashMap(bool) = std.StringHashMap(bool).init(std.heap.page_allocator);

fn to_upper(s: []const u8) []const u8 {
    var res: []const u8 = "";
    res = res;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(s.len))) {
        const c: []const u8 = s[@as(usize, @intCast(i))..@min(@as(usize, @intCast(i +% 1)), @as(usize, @intCast(s.len)))];
        var j: i64 = 0;
        j = j;
        var up: []const u8 = blk0: { const tmp = std.heap.page_allocator.alloc(u8, c.len) catch unreachable; @memcpy(tmp, c); break :blk0 tmp; };
        up = up;
        while (j < @as(i64, @intCast(LOWER_var.len))) {
            if (std.mem.eql(u8, c, LOWER_var[@as(usize, @intCast(j))..@min(@as(usize, @intCast(j +% 1)), @as(usize, @intCast(LOWER_var.len)))])) {
                up = UPPER_var[@as(usize, @intCast(j))..@min(@as(usize, @intCast(j +% 1)), @as(usize, @intCast(UPPER_var.len)))];
                break;
            }
            j = j +% 1;
        }
        res = _concat_string(res, up);
        i = i +% 1;
    }
    return res;
}

fn char_in(chars: []const u8, c_1: []const u8) bool {
    var i_1: i64 = 0;
    i_1 = i_1;
    while (i_1 < @as(i64, @intCast(chars.len))) {
        if (std.mem.eql(u8, chars[@as(usize, @intCast(i_1))..@min(@as(usize, @intCast(i_1 +% 1)), @as(usize, @intCast(chars.len)))], c_1)) {
            return true;
        }
        i_1 = i_1 +% 1;
    }
    return false;
}

fn remove_non_letters(message: []const u8) []const u8 {
    var res_1: []const u8 = "";
    res_1 = res_1;
    var i_2: i64 = 0;
    i_2 = i_2;
    while (i_2 < @as(i64, @intCast(message.len))) {
        const ch: []const u8 = message[@as(usize, @intCast(i_2))..@min(@as(usize, @intCast(i_2 +% 1)), @as(usize, @intCast(message.len)))];
        if (char_in(LETTERS_AND_SPACE_var, ch)) {
            res_1 = _concat_string(res_1, ch);
        }
        i_2 = i_2 +% 1;
    }
    return res_1;
}

fn split_spaces(text: []const u8) [][]const u8 {
    var res_2: [][]const u8 = std.heap.page_allocator.alloc([]const u8, 0) catch unreachable;
    res_2 = res_2;
    var current: []const u8 = "";
    current = current;
    var i_3: i64 = 0;
    i_3 = i_3;
    while (i_3 < @as(i64, @intCast(text.len))) {
        const ch_1: []const u8 = text[@as(usize, @intCast(i_3))..@min(@as(usize, @intCast(i_3 +% 1)), @as(usize, @intCast(text.len)))];
        if (std.mem.eql(u8, ch_1, " ")) {
            res_2 = blk1: { var _tmp = std.ArrayList([]const u8).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp.appendSlice(@as([]const []const u8, res_2)) catch |err| handleError(err); _tmp.append(@constCast(current)) catch |err| handleError(err); break :blk1 (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            current = "";
        } else {
            current = _concat_string(current, ch_1);
        }
        i_3 = i_3 +% 1;
    }
    res_2 = blk2: { var _tmp_1 = std.ArrayList([]const u8).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_1.appendSlice(@as([]const []const u8, res_2)) catch |err| handleError(err); _tmp_1.append(@constCast(current)) catch |err| handleError(err); break :blk2 (_tmp_1.toOwnedSlice() catch |err| handleError(err)); };
    return res_2;
}

fn load_dictionary() std.StringHashMap(bool) {
    const words: [][]const u8 = ;
    words = words;
    var dict: std.StringHashMap(bool) = std.StringHashMap(bool).init(std.heap.page_allocator);
    dict = dict;
    for (words) |__it0| {
        const w = __it0;
        dict.put(w, true) catch unreachable;
    }
    return dict;
}

fn get_english_count(message_1: []const u8) f64 {
    const upper: []const u8 = to_upper(message_1);
    const cleaned: []const u8 = remove_non_letters(upper);
    const possible: [][]const u8 = split_spaces(cleaned);
    var matches: i64 = 0;
    matches = matches;
    var total: i64 = 0;
    total = total;
    for (possible) |__it1| {
        const w_1 = __it1;
        if (w_1.len != 0) {
            total = total +% 1;
            if (ENGLISH_WORDS_var.contains(w_1)) {
                matches = matches +% 1;
            }
        }
    }
    if (total == 0) {
        return 0.0;
    }
    return @as(f64, @floatFromInt(matches)) / @as(f64, @floatFromInt(total));
}

fn is_english(message_2: []const u8, word_percentage: i64, letter_percentage: i64) bool {
    const words_match: bool = get_english_count(message_2) * 100.0 >= @as(f64, @floatFromInt(word_percentage));
    const num_letters: i64 = @as(i64, @intCast(remove_non_letters(message_2).len));
    const letters_pct: f64 = if (@as(i64, @intCast(message_2.len)) == 0) 0.0 else @as(f64, @floatFromInt(num_letters)) / @as(f64, @floatFromInt(@as(i64, @intCast(message_2.len)))) * 100.0;
    const letters_match: bool = letters_pct >= @as(f64, @floatFromInt(letter_percentage));
    return words_match and letters_match;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        ENGLISH_WORDS_var = load_dictionary();
        std.debug.print("{s}\n", .{_str(is_english("Hello World", 20, 85))});
        std.debug.print("{s}\n", .{_str(is_english("llold HorWd", 20, 85))});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
