// Generated by Mochi Zig transpiler on 2025-08-23 13:46 +0700
const std = @import("std");
const _dataDir = "/workspace/mochi/tests/github/TheAlgorithms/Mochi/strings";

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

var word_by_signature_var_1: std.StringHashMap([][]const u8) = std.StringHashMap([][]const u8).init(std.heap.page_allocator);

fn split(s: []const u8, sep: []const u8) [][]const u8 {
    var res: [][]const u8 = std.heap.page_allocator.alloc([]const u8, 0) catch unreachable;
    res = res;
    var current: []const u8 = "";
    current = current;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(s.len))) {
        const ch: []const u8 = s[@as(usize, @intCast(i))..@min(@as(usize, @intCast(i +% 1)), @as(usize, @intCast(s.len)))];
        if (std.mem.eql(u8, ch, sep)) {
            res = blk0: { var _tmp = std.ArrayList([]const u8).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp.appendSlice(std.heap.page_allocator, @as([]const []const u8, res)) catch |err| handleError(err); _tmp.append(std.heap.page_allocator, @constCast(current)) catch |err| handleError(err); break :blk0 (_tmp.toOwnedSlice(std.heap.page_allocator) catch |err| handleError(err)); };
            current = "";
        } else {
            current = _concat_string(current, ch);
        }
        i = i +% 1;
    }
    res = blk1: { var _tmp_1 = std.ArrayList([]const u8).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_1.appendSlice(std.heap.page_allocator, @as([]const []const u8, res)) catch |err| handleError(err); _tmp_1.append(std.heap.page_allocator, @constCast(current)) catch |err| handleError(err); break :blk1 (_tmp_1.toOwnedSlice(std.heap.page_allocator) catch |err| handleError(err)); };
    return res;
}

fn insertion_sort(arr: [][]const u8) [][]const u8 {
    const a: [][]const u8 = blk2: { const tmp = std.heap.page_allocator.alloc([]const u8, arr.len) catch unreachable; @memcpy(tmp, arr); break :blk2 tmp; };
    var i_1: i64 = 1;
    i_1 = i_1;
    while (i_1 < @as(i64, @intCast(a.len))) {
        const key: []const u8 = a[_idx(a.len, i_1)];
        var j: i64 = i_1 -% 1;
        j = j;
        while (j >= 0 and std.mem.order(u8, a[_idx(a.len, j)], key) == .gt) {
            a[_idx(a.len, j +% 1)] = a[_idx(a.len, j)];
            j = j -% 1;
        }
        a[_idx(a.len, j +% 1)] = key;
        i_1 = i_1 +% 1;
    }
    return a;
}

fn sort_chars(word: []const u8) []const u8 {
    var chars: [][]const u8 = std.heap.page_allocator.alloc([]const u8, 0) catch unreachable;
    chars = chars;
    var i_2: i64 = 0;
    i_2 = i_2;
    while (i_2 < @as(i64, @intCast(word.len))) {
        chars = blk3: { var _tmp_2 = std.ArrayList([]const u8).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_2.appendSlice(std.heap.page_allocator, @as([]const []const u8, chars)) catch |err| handleError(err); _tmp_2.append(std.heap.page_allocator, @constCast(word[@as(usize, @intCast(i_2))..@min(@as(usize, @intCast(i_2 +% 1)), @as(usize, @intCast(word.len)))])) catch |err| handleError(err); break :blk3 (_tmp_2.toOwnedSlice(std.heap.page_allocator) catch |err| handleError(err)); };
        i_2 = i_2 +% 1;
    }
    chars = insertion_sort(chars);
    var res_1: []const u8 = "";
    res_1 = res_1;
    i_2 = 0;
    while (i_2 < @as(i64, @intCast(chars.len))) {
        res_1 = _concat_string(res_1, chars[_idx(chars.len, i_2)]);
        i_2 = i_2 +% 1;
    }
    return res_1;
}

fn unique_sorted(words: [][]const u8) [][]const u8 {
    var seen: std.StringHashMap(bool) = std.StringHashMap(bool).init(std.heap.page_allocator);
    seen = seen;
    var res_2: [][]const u8 = std.heap.page_allocator.alloc([]const u8, 0) catch unreachable;
    res_2 = res_2;
    for (words) |__it0| {
        const w = __it0;
        if (w.len != 0 and !(seen.contains(w))) {
            res_2 = blk4: { var _tmp_3 = std.ArrayList([]const u8).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_3.appendSlice(std.heap.page_allocator, @as([]const []const u8, res_2)) catch |err| handleError(err); _tmp_3.append(std.heap.page_allocator, @constCast(w)) catch |err| handleError(err); break :blk4 (_tmp_3.toOwnedSlice(std.heap.page_allocator) catch |err| handleError(err)); };
            seen.put(w, true) catch unreachable;
        }
    }
    res_2 = insertion_sort(res_2);
    return res_2;
}

fn build_map(words_1: [][]const u8) void {
    for (words_1) |__it1| {
        const w_1 = __it1;
        const sig: []const u8 = sort_chars(w_1);
        var arr_1: [][]const u8 = std.heap.page_allocator.alloc([]const u8, 0) catch unreachable;
        arr_1 = arr_1;
        if (word_by_signature_var_1.contains(sig)) {
            arr_1 = word_by_signature_var_1.get(sig).?;
        }
        arr_1 = blk5: { var _tmp_4 = std.ArrayList([]const u8).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_4.appendSlice(std.heap.page_allocator, @as([]const []const u8, arr_1)) catch |err| handleError(err); _tmp_4.append(std.heap.page_allocator, @constCast(w_1)) catch |err| handleError(err); break :blk5 (_tmp_4.toOwnedSlice(std.heap.page_allocator) catch |err| handleError(err)); };
        word_by_signature_var_1.put(sig, arr_1) catch unreachable;
    }
}

fn anagram(my_word: []const u8) [][]const u8 {
    const sig_1: []const u8 = sort_chars(my_word);
    if (word_by_signature_var_1.contains(sig_1)) {
        return word_by_signature_var_1.get(sig_1).?;
    }
    return (&[_][]const u8{})[0..0];
}

fn mochi_main() void {
    const text: []const u8 = _read_file("words.txt");
    const lines: [][]const u8 = split(text, "\n");
    const words_2: [][]const u8 = unique_sorted(lines);
    build_map(words_2);
    for (words_2) |__it2| {
        const w_2 = __it2;
        const anas: [][]const u8 = anagram(w_2);
        if (@as(i64, @intCast(anas.len)) > 1) {
            var line: []const u8 = _concat_string(w_2, ":");
            line = line;
            var i_3: i64 = 0;
            i_3 = i_3;
            while (i_3 < @as(i64, @intCast(anas.len))) {
                if (i_3 > 0) {
                    line = _concat_string(line, ",");
                }
                line = _concat_string(line, anas[_idx(anas.len, i_3)]);
                i_3 = i_3 +% 1;
            }
            std.debug.print("{s}\n", .{line});
        }
    }
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        word_by_signature_var_1 = std.StringHashMap([][]const u8).init(std.heap.page_allocator);
        mochi_main();
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _read_file(path: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    if (std.fs.cwd().readFileAlloc(alloc, path, 1 << 20) catch null) |d| { return d; }
    const joined = std.fs.path.join(alloc, &[_][]const u8{_dataDir, path}) catch return "";
    defer alloc.free(joined);
    return std.fs.cwd().readFileAlloc(alloc, joined, 1 << 20) catch "";
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.heap.page_size_min));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
