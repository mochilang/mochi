// Generated by Mochi Zig transpiler on 2025-08-24 08:57 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn pow2(n: i64) i64 {
    var res: i64 = 1;
    res = res;
    var i: i64 = 0;
    i = i;
    while (i < n) {
        res = res *% 2;
        i = i +% 1;
    }
    return res;
}

fn bit_and(a: i64, b: i64) i64 {
    var x: i64 = a;
    x = x;
    var y: i64 = b;
    y = y;
    var res_1: i64 = 0;
    res_1 = res_1;
    var bit: i64 = 1;
    bit = bit;
    while (x > 0 or y > 0) {
        if (@mod(x, 2) == 1 and @mod(y, 2) == 1) {
            res_1 = res_1 +% bit;
        }
        x = @as(i64, @divTrunc(x, 2));
        y = @as(i64, @divTrunc(y, 2));
        bit = bit *% 2;
    }
    return res_1;
}

fn bit_or(a_1: i64, b_1: i64) i64 {
    var x_1: i64 = a_1;
    x_1 = x_1;
    var y_1: i64 = b_1;
    y_1 = y_1;
    var res_2: i64 = 0;
    res_2 = res_2;
    var bit_1: i64 = 1;
    bit_1 = bit_1;
    while (x_1 > 0 or y_1 > 0) {
        if (@mod(x_1, 2) == 1 or @mod(y_1, 2) == 1) {
            res_2 = res_2 +% bit_1;
        }
        x_1 = @as(i64, @divTrunc(x_1, 2));
        y_1 = @as(i64, @divTrunc(y_1, 2));
        bit_1 = bit_1 *% 2;
    }
    return res_2;
}

fn char_to_index(ch: []const u8) i64 {
    const letters: []const u8 = "abcdefghijklmnopqrstuvwxyz";
    var i_1: i64 = 0;
    i_1 = i_1;
    while (i_1 < @as(i64, @intCast(letters.len))) {
        if (std.mem.eql(u8, letters[@as(usize, @intCast(i_1))..@min(@as(usize, @intCast(i_1 +% 1)), @as(usize, @intCast(letters.len)))], ch)) {
            return i_1;
        }
        i_1 = i_1 +% 1;
    }
    return 26;
}

fn bitap_string_match(text: []const u8, pattern: []const u8) i64 {
    if (pattern.len == 0) {
        return 0;
    }
    const m: i64 = @as(i64, @intCast(pattern.len));
    if (m > @as(i64, @intCast(text.len))) {
        return 0 -% 1;
    }
    const limit: i64 = pow2(m +% 1);
    const all_ones: i64 = limit -% 1;
    var pattern_mask: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    pattern_mask = pattern_mask;
    var i_2: i64 = 0;
    i_2 = i_2;
    while (i_2 < 27) {
        pattern_mask = blk0: { var _tmp = std.ArrayList(i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp.appendSlice(@as([]const i64, pattern_mask)) catch |err| handleError(err); _tmp.append(all_ones) catch |err| handleError(err); break :blk0 (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i_2 = i_2 +% 1;
    }
    i_2 = 0;
    while (i_2 < m) {
        const ch_1: []const u8 = pattern[@as(usize, @intCast(i_2))..@min(@as(usize, @intCast(i_2 +% 1)), @as(usize, @intCast(pattern.len)))];
        const idx: i64 = char_to_index(ch_1);
        pattern_mask[_idx(pattern_mask.len, idx)] = bit_and(pattern_mask[_idx(pattern_mask.len, idx)], all_ones -% pow2(i_2));
        i_2 = i_2 +% 1;
    }
    var state: i64 = all_ones -% 1;
    state = state;
    i_2 = 0;
    while (i_2 < @as(i64, @intCast(text.len))) {
        const ch_2: []const u8 = text[@as(usize, @intCast(i_2))..@min(@as(usize, @intCast(i_2 +% 1)), @as(usize, @intCast(text.len)))];
        const idx_1: i64 = char_to_index(ch_2);
        state = bit_or(state, pattern_mask[_idx(pattern_mask.len, idx_1)]);
        state = @mod(state *% 2, limit);
        if (bit_and(state, pow2(m)) == 0) {
            return i_2 -% m +% 1;
        }
        i_2 = i_2 +% 1;
    }
    return 0 -% 1;
}

fn mochi_main() void {
    std.debug.print("{s}\n", .{_str(bitap_string_match("abdabababc", "ababc"))});
    std.debug.print("{s}\n", .{_str(bitap_string_match("abdabababc", ""))});
    std.debug.print("{s}\n", .{_str(bitap_string_match("abdabababc", "c"))});
    std.debug.print("{s}\n", .{_str(bitap_string_match("abdabababc", "fofosdfo"))});
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        mochi_main();
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
