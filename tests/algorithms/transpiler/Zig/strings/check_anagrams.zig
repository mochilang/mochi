// Generated by Mochi Zig transpiler on 2025-08-24 08:57 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn strip_and_remove_spaces(s: []const u8) []const u8 {
    var start: i64 = 0;
    start = start;
    var end: i64 = @as(i64, @intCast(s.len)) -% 1;
    end = end;
    while (start < @as(i64, @intCast(s.len)) and std.mem.eql(u8, s[_idx(s.len, start).._idx(s.len, start) + 1], " ")) {
        start = start +% 1;
    }
    while (end >= start and std.mem.eql(u8, s[_idx(s.len, end).._idx(s.len, end) + 1], " ")) {
        end = end -% 1;
    }
    var res: []const u8 = "";
    res = res;
    var i: i64 = start;
    i = i;
    while (i <= end) {
        const ch: []const u8 = s[_idx(s.len, i).._idx(s.len, i) + 1];
        if (!std.mem.eql(u8, ch, " ")) {
            res = _concat_string(res, ch);
        }
        i = i +% 1;
    }
    return res;
}

fn check_anagrams(a: []const u8, b: []const u8) bool {
    var s1: []const u8 = _lower(a);
    s1 = s1;
    var s2: []const u8 = _lower(b);
    s2 = s2;
    s1 = strip_and_remove_spaces(s1);
    s2 = strip_and_remove_spaces(s2);
    if (@as(i64, @intCast(s1.len)) != @as(i64, @intCast(s2.len))) {
        return false;
    }
    var count: std.StringHashMap(i64) = std.StringHashMap(i64).init(std.heap.page_allocator);
    count = count;
    var i_1: i64 = 0;
    i_1 = i_1;
    while (i_1 < @as(i64, @intCast(s1.len))) {
        const c1: []const u8 = s1[_idx(s1.len, i_1).._idx(s1.len, i_1) + 1];
        const c2: []const u8 = s2[_idx(s2.len, i_1).._idx(s2.len, i_1) + 1];
        if (count.contains(c1)) {
            count.put(c1, (blk0: { if (count.get(c1)) |v| { break :blk0 v; } break :blk0 0; }) +% 1) catch unreachable;
        } else {
            count.put(c1, 1) catch unreachable;
        }
        if (count.contains(c2)) {
            count.put(c2, (blk1: { if (count.get(c2)) |v| { break :blk1 v; } break :blk1 0; }) -% 1) catch unreachable;
        } else {
            count.put(c2, 0 -% 1) catch unreachable;
        }
        i_1 = i_1 +% 1;
    }
    var __mapit1 = count.keyIterator();
    while (__mapit1.next()) |__it0| {
        const ch_1 = __it0.*;
        if ((blk2: { if (count.get(ch_1)) |v| { break :blk2 v; } break :blk2 0; }) != 0) {
            return false;
        }
    }
    return true;
}

fn print_bool(b_1: bool) void {
    if (b_1) {
        std.debug.print("{s}\n", .{_str(true)});
    } else {
        std.debug.print("{s}\n", .{_str(false)});
    }
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        print_bool(check_anagrams("Silent", "Listen"));
        print_bool(check_anagrams("This is a string", "Is this a string"));
        print_bool(check_anagrams("This is    a      string", "Is     this a string"));
        print_bool(check_anagrams("There", "Their"));
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _upper(s: []const u8) []const u8 {
    var out = std.heap.page_allocator.alloc(u8, s.len + 1) catch unreachable;
    _ = std.ascii.upperString(out[0..s.len], s);
    out[s.len] = 0;
    return out[0..s.len];
}

fn _lower(s: []const u8) []const u8 {
    var out = std.heap.page_allocator.alloc(u8, s.len + 1) catch unreachable;
    _ = std.ascii.lowerString(out[0..s.len], s);
    out[s.len] = 0;
    return out[0..s.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
