// Generated by Mochi Zig transpiler on 2025-08-24 08:57 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

var res_var_1: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
var x_var_1: i64 = 0;

fn has_alpha(s: []const u8) bool {
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(s.len))) {
        const c: []const u8 = s[_idx(s.len, i).._idx(s.len, i) + 1];
        if (std.mem.order(u8, c, "a") != .lt and std.mem.order(u8, c, "z") != .gt or std.mem.order(u8, c, "A") != .lt and std.mem.order(u8, c, "Z") != .gt) {
            return true;
        }
        i = i +% 1;
    }
    return false;
}

fn parse_decimal(s_1: []const u8) i64 {
    var value: i64 = 0;
    value = value;
    var i_1: i64 = 0;
    i_1 = i_1;
    while (i_1 < @as(i64, @intCast(s_1.len))) {
        const c_1: []const u8 = s_1[_idx(s_1.len, i_1).._idx(s_1.len, i_1) + 1];
        if (std.mem.order(u8, c_1, "0") == .lt or std.mem.order(u8, c_1, "9") == .gt) {
            @panic("Non-digit character encountered");
        }
        value = value *% 10 +% (std.fmt.parseInt(i64, c_1, 10) catch 0);
        i_1 = i_1 +% 1;
    }
    return value;
}

fn get_barcode(barcode: []const u8) i64 {
    if (has_alpha(barcode)) {
        @panic(_concat_string(_concat_string("Barcode '", barcode), "' has alphabetic characters."));
    }
    if (@as(i64, @intCast(barcode.len)) > 0 and std.mem.eql(u8, barcode[_idx(barcode.len, 0).._idx(barcode.len, 0) + 1], "-")) {
        @panic("The entered barcode has a negative value. Try again.");
    }
    return parse_decimal(barcode);
}

fn get_check_digit(barcode_1: i64) i64 {
    var num: i64 = @divTrunc(barcode_1, 10);
    num = num;
    var s_2: i64 = 0;
    s_2 = s_2;
    var position: i64 = 0;
    position = position;
    while (num != 0) {
        const mult: i64 = if (@mod(position, 2) == 0) 3 else 1;
        s_2 = s_2 +% mult *% (@mod(num, 10));
        num = @divTrunc(num, 10);
        position = position +% 1;
    }
    return @mod(10 -% @mod(s_2, 10), 10);
}

fn is_valid(barcode_2: i64) bool {
    return @as(i64, @intCast(_str(barcode_2).len)) == 13 and get_check_digit(barcode_2) == @mod(barcode_2, 10);
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        std.debug.print("{s}\n", .{_str(get_check_digit(8718452538119))});
        std.debug.print("{s}\n", .{_str(get_check_digit(87184523))});
        std.debug.print("{s}\n", .{_str(get_check_digit(87193425381086))});
        while (x_var_1 < 100) {
            res_var_1 = blk0: { var _tmp = std.ArrayList(i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp.appendSlice(@as([]const i64, res_var_1)) catch |err| handleError(err); _tmp.append(get_check_digit(x_var_1)) catch |err| handleError(err); break :blk0 (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            x_var_1 = x_var_1 +% 10;
        }
        std.debug.print("{s}\n", .{_str(res_var_1)});
        std.debug.print("{s}\n", .{_str(is_valid(8718452538119))});
        std.debug.print("{s}\n", .{_str(is_valid(87184525))});
        std.debug.print("{s}\n", .{_str(is_valid(87193425381089))});
        std.debug.print("{s}\n", .{_str(is_valid(0))});
        std.debug.print("{s}\n", .{_str(get_barcode("8718452538119"))});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
