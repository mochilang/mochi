// Generated by Mochi Zig transpiler on 2025-08-24 08:57 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const LOWER_var: []const u8 = "abcdefghijklmnopqrstuvwxyz";
const UPPER_var: []const u8 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
const DIGITS_var: []const u8 = "0123456789";

fn is_lower(ch: []const u8) bool {
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(LOWER_var.len))) {
        if (std.mem.eql(u8, LOWER_var[_idx(LOWER_var.len, i).._idx(LOWER_var.len, i) + 1], ch)) {
            return true;
        }
        i = i +% 1;
    }
    return false;
}

fn is_upper(ch_1: []const u8) bool {
    var i_1: i64 = 0;
    i_1 = i_1;
    while (i_1 < @as(i64, @intCast(UPPER_var.len))) {
        if (std.mem.eql(u8, UPPER_var[_idx(UPPER_var.len, i_1).._idx(UPPER_var.len, i_1) + 1], ch_1)) {
            return true;
        }
        i_1 = i_1 +% 1;
    }
    return false;
}

fn is_digit(ch_2: []const u8) bool {
    var i_2: i64 = 0;
    i_2 = i_2;
    while (i_2 < @as(i64, @intCast(DIGITS_var.len))) {
        if (std.mem.eql(u8, DIGITS_var[_idx(DIGITS_var.len, i_2).._idx(DIGITS_var.len, i_2) + 1], ch_2)) {
            return true;
        }
        i_2 = i_2 +% 1;
    }
    return false;
}

fn is_alpha(ch_3: []const u8) bool {
    if (is_lower(ch_3)) {
        return true;
    }
    if (is_upper(ch_3)) {
        return true;
    }
    return false;
}

fn is_alnum(ch_4: []const u8) bool {
    if (is_alpha(ch_4)) {
        return true;
    }
    if (is_digit(ch_4)) {
        return true;
    }
    return false;
}

fn to_lower(ch_5: []const u8) []const u8 {
    var i_3: i64 = 0;
    i_3 = i_3;
    while (i_3 < @as(i64, @intCast(UPPER_var.len))) {
        if (std.mem.eql(u8, UPPER_var[_idx(UPPER_var.len, i_3).._idx(UPPER_var.len, i_3) + 1], ch_5)) {
            return LOWER_var[_idx(LOWER_var.len, i_3).._idx(LOWER_var.len, i_3) + 1];
        }
        i_3 = i_3 +% 1;
    }
    return ch_5;
}

fn camel_to_snake_case(input_str: []const u8) []const u8 {
    var snake_str: []const u8 = "";
    snake_str = snake_str;
    var i_4: i64 = 0;
    i_4 = i_4;
    var prev_is_digit: bool = false;
    prev_is_digit = prev_is_digit;
    var prev_is_alpha: bool = false;
    prev_is_alpha = prev_is_alpha;
    while (i_4 < @as(i64, @intCast(input_str.len))) {
        const ch_6: []const u8 = input_str[_idx(input_str.len, i_4).._idx(input_str.len, i_4) + 1];
        if (is_upper(ch_6)) {
            snake_str = _concat_string(_concat_string(snake_str, "_"), to_lower(ch_6));
        } else {
            if (prev_is_digit and is_lower(ch_6)) {
                snake_str = _concat_string(_concat_string(snake_str, "_"), ch_6);
            } else {
                if (prev_is_alpha and is_digit(ch_6)) {
                    snake_str = _concat_string(_concat_string(snake_str, "_"), ch_6);
                } else {
                    if (!(is_alnum(ch_6))) {
                        snake_str = _concat_string(snake_str, "_");
                    } else {
                        snake_str = _concat_string(snake_str, ch_6);
                    }
                }
            }
        }
        prev_is_digit = is_digit(ch_6);
        prev_is_alpha = is_alpha(ch_6);
        i_4 = i_4 +% 1;
    }
    if (@as(i64, @intCast(snake_str.len)) > 0 and std.mem.eql(u8, snake_str[_idx(snake_str.len, 0).._idx(snake_str.len, 0) + 1], "_")) {
        snake_str = snake_str[@as(usize, @intCast(1))..@min(@as(usize, @intCast(@as(i64, @intCast(snake_str.len)))), @as(usize, @intCast(snake_str.len)))];
    }
    return snake_str;
}

fn mochi_main() void {
    std.debug.print("{s}\n", .{camel_to_snake_case("someRandomString")});
    std.debug.print("{s}\n", .{camel_to_snake_case("SomeRandomStr#ng")});
    std.debug.print("{s}\n", .{camel_to_snake_case("123SomeRandom123String123")});
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        mochi_main();
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
