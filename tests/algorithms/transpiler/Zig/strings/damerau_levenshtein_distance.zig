// Generated by Mochi Zig transpiler on 2025-08-24 08:57 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn damerau_levenshtein_distance(first_string: []const u8, second_string: []const u8) i64 {
    const len1: i64 = @as(i64, @intCast(first_string.len));
    const len2: i64 = @as(i64, @intCast(second_string.len));
    var dp_matrix: [][]i64 = std.heap.page_allocator.alloc([]i64, 0) catch unreachable;
    dp_matrix = dp_matrix;
    var __it0: i64 = @as(i64, @intCast(0));
    while (__it0 < @as(i64, @intCast(len1 +% 1))) : (__it0 += 1) {
        var row: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
        row = row;
        var __it1: i64 = @as(i64, @intCast(0));
        while (__it1 < @as(i64, @intCast(len2 +% 1))) : (__it1 += 1) {
            row = blk0: { var _tmp = std.ArrayList(i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp.appendSlice(@as([]const i64, row)) catch |err| handleError(err); _tmp.append(0) catch |err| handleError(err); break :blk0 (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        }
        dp_matrix = blk1: { var _tmp_1 = std.ArrayList([]i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_1.appendSlice(@as([]const []i64, dp_matrix)) catch |err| handleError(err); _tmp_1.append(row) catch |err| handleError(err); break :blk1 (_tmp_1.toOwnedSlice() catch |err| handleError(err)); };
    }
    var __it2: i64 = @as(i64, @intCast(0));
    while (__it2 < @as(i64, @intCast(len1 +% 1))) : (__it2 += 1) {
        const i: i64 = __it2;
        const row_1: []i64 = dp_matrix[_idx(dp_matrix.len, i)];
        row_1[_idx(row_1.len, 0)] = i;
        dp_matrix[_idx(dp_matrix.len, i)] = row_1;
    }
    const first_row: []i64 = dp_matrix[_idx(dp_matrix.len, 0)];
    var __it3: i64 = @as(i64, @intCast(0));
    while (__it3 < @as(i64, @intCast(len2 +% 1))) : (__it3 += 1) {
        const j: i64 = __it3;
        first_row[_idx(first_row.len, j)] = j;
    }
    dp_matrix[_idx(dp_matrix.len, 0)] = first_row;
    var __it4: i64 = @as(i64, @intCast(1));
    while (__it4 < @as(i64, @intCast(len1 +% 1))) : (__it4 += 1) {
        const i_1: i64 = __it4;
        const row_2: []i64 = dp_matrix[_idx(dp_matrix.len, i_1)];
        const first_char: []const u8 = first_string[@as(usize, @intCast(i_1 -% 1))..@min(@as(usize, @intCast(i_1)), @as(usize, @intCast(first_string.len)))];
        var __it5: i64 = @as(i64, @intCast(1));
        while (__it5 < @as(i64, @intCast(len2 +% 1))) : (__it5 += 1) {
            const j_1: i64 = __it5;
            const second_char: []const u8 = second_string[@as(usize, @intCast(j_1 -% 1))..@min(@as(usize, @intCast(j_1)), @as(usize, @intCast(second_string.len)))];
            const cost: i64 = if (std.mem.eql(u8, first_char, second_char)) 0 else 1;
            var value: i64 = dp_matrix[_idx(dp_matrix.len, i_1 -% 1)][_idx(dp_matrix[_idx(dp_matrix.len, i_1 -% 1)].len, j_1)] +% 1;
            value = value;
            const insertion: i64 = row_2[_idx(row_2.len, j_1 -% 1)] +% 1;
            if (insertion < value) {
                value = insertion;
            }
            const substitution: i64 = dp_matrix[_idx(dp_matrix.len, i_1 -% 1)][_idx(dp_matrix[_idx(dp_matrix.len, i_1 -% 1)].len, j_1 -% 1)] +% cost;
            if (substitution < value) {
                value = substitution;
            }
            row_2[_idx(row_2.len, j_1)] = value;
            if (i_1 > 1 and j_1 > 1 and std.mem.eql(u8, first_string[@as(usize, @intCast(i_1 -% 1))..@min(@as(usize, @intCast(i_1)), @as(usize, @intCast(first_string.len)))], second_string[@as(usize, @intCast(j_1 -% 2))..@min(@as(usize, @intCast(j_1 -% 1)), @as(usize, @intCast(second_string.len)))]) and std.mem.eql(u8, first_string[@as(usize, @intCast(i_1 -% 2))..@min(@as(usize, @intCast(i_1 -% 1)), @as(usize, @intCast(first_string.len)))], second_string[@as(usize, @intCast(j_1 -% 1))..@min(@as(usize, @intCast(j_1)), @as(usize, @intCast(second_string.len)))])) {
                const transposition: i64 = dp_matrix[_idx(dp_matrix.len, i_1 -% 2)][_idx(dp_matrix[_idx(dp_matrix.len, i_1 -% 2)].len, j_1 -% 2)] +% cost;
                if (transposition < row_2[_idx(row_2.len, j_1)]) {
                    row_2[_idx(row_2.len, j_1)] = transposition;
                }
            }
        }
        dp_matrix[_idx(dp_matrix.len, i_1)] = row_2;
    }
    return dp_matrix[_idx(dp_matrix.len, len1)][_idx(dp_matrix[_idx(dp_matrix.len, len1)].len, len2)];
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        std.debug.print("{s}\n", .{_str(damerau_levenshtein_distance("cat", "cut"))});
        std.debug.print("{s}\n", .{_str(damerau_levenshtein_distance("kitten", "sitting"))});
        std.debug.print("{s}\n", .{_str(damerau_levenshtein_distance("hello", "world"))});
        std.debug.print("{s}\n", .{_str(damerau_levenshtein_distance("book", "back"))});
        std.debug.print("{s}\n", .{_str(damerau_levenshtein_distance("container", "containment"))});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
