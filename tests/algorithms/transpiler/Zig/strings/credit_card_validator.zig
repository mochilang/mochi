// Generated by Mochi Zig transpiler on 2025-08-24 08:57 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn validate_initial_digits(cc: []const u8) bool {
    return std.mem.eql(u8, cc[@as(usize, @intCast(0))..@min(@as(usize, @intCast(2)), @as(usize, @intCast(cc.len)))], "34") or std.mem.eql(u8, cc[@as(usize, @intCast(0))..@min(@as(usize, @intCast(2)), @as(usize, @intCast(cc.len)))], "35") or std.mem.eql(u8, cc[@as(usize, @intCast(0))..@min(@as(usize, @intCast(2)), @as(usize, @intCast(cc.len)))], "37") or std.mem.eql(u8, cc[@as(usize, @intCast(0))..@min(@as(usize, @intCast(1)), @as(usize, @intCast(cc.len)))], "4") or std.mem.eql(u8, cc[@as(usize, @intCast(0))..@min(@as(usize, @intCast(1)), @as(usize, @intCast(cc.len)))], "5") or std.mem.eql(u8, cc[@as(usize, @intCast(0))..@min(@as(usize, @intCast(1)), @as(usize, @intCast(cc.len)))], "6");
}

fn luhn_validation(cc_1: []const u8) bool {
    var sum: i64 = 0;
    sum = sum;
    var double_digit: bool = false;
    double_digit = double_digit;
    var i: i64 = @as(i64, @intCast(cc_1.len)) -% 1;
    i = i;
    while (i >= 0) {
        var n: i64 = (std.fmt.parseInt(i64, cc_1[@as(usize, @intCast(i))..@min(@as(usize, @intCast(i +% 1)), @as(usize, @intCast(cc_1.len)))], 10) catch 0);
        n = n;
        if (double_digit) {
            n = n *% 2;
            if (n > 9) {
                n = n -% 9;
            }
        }
        sum = sum +% n;
        double_digit = !(double_digit);
        i = i -% 1;
    }
    return @mod(sum, 10) == 0;
}

fn is_digit_string(s: []const u8) bool {
    var i_1: i64 = 0;
    i_1 = i_1;
    while (i_1 < @as(i64, @intCast(s.len))) {
        const c: []const u8 = s[@as(usize, @intCast(i_1))..@min(@as(usize, @intCast(i_1 +% 1)), @as(usize, @intCast(s.len)))];
        if (std.mem.order(u8, c, "0") == .lt or std.mem.order(u8, c, "9") == .gt) {
            return false;
        }
        i_1 = i_1 +% 1;
    }
    return true;
}

fn validate_credit_card_number(cc_2: []const u8) bool {
    const error_message: []const u8 = _concat_string(cc_2, " is an invalid credit card number because");
    if (!(is_digit_string(cc_2))) {
        std.debug.print("{s}\n", .{_concat_string(error_message, " it has nonnumerical characters.")});
        return false;
    }
    if (!(@as(i64, @intCast(cc_2.len)) >= 13 and @as(i64, @intCast(cc_2.len)) <= 16)) {
        std.debug.print("{s}\n", .{_concat_string(error_message, " of its length.")});
        return false;
    }
    if (!(validate_initial_digits(cc_2))) {
        std.debug.print("{s}\n", .{_concat_string(error_message, " of its first two digits.")});
        return false;
    }
    if (!(luhn_validation(cc_2))) {
        std.debug.print("{s}\n", .{_concat_string(error_message, " it fails the Luhn check.")});
        return false;
    }
    std.debug.print("{s}\n", .{_concat_string(cc_2, " is a valid credit card number.")});
    return true;
}

fn mochi_main() void {
    _ = validate_credit_card_number("4111111111111111");
    _ = validate_credit_card_number("32323");
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        mochi_main();
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
