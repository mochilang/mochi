// Generated by Mochi Zig transpiler on 2025-08-24 08:57 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn match_in_pattern(pat: []const u8, ch: []const u8) i64 {
    var i: i64 = @as(i64, @intCast(pat.len)) -% 1;
    i = i;
    while (i >= 0) {
        if (std.mem.eql(u8, pat[@as(usize, @intCast(i))..@min(@as(usize, @intCast(i +% 1)), @as(usize, @intCast(pat.len)))], ch)) {
            return i;
        }
        i = i -% 1;
    }
    return 0 -% 1;
}

fn mismatch_in_text(text: []const u8, pat_1: []const u8, current_pos: i64) i64 {
    var i_1: i64 = @as(i64, @intCast(pat_1.len)) -% 1;
    i_1 = i_1;
    while (i_1 >= 0) {
        if (!std.mem.eql(u8, pat_1[@as(usize, @intCast(i_1))..@min(@as(usize, @intCast(i_1 +% 1)), @as(usize, @intCast(pat_1.len)))], text[@as(usize, @intCast(current_pos +% i_1))..@min(@as(usize, @intCast(current_pos +% i_1 +% 1)), @as(usize, @intCast(text.len)))])) {
            return current_pos +% i_1;
        }
        i_1 = i_1 -% 1;
    }
    return 0 -% 1;
}

fn bad_character_heuristic(text_1: []const u8, pat_2: []const u8) []i64 {
    const textLen: i64 = @as(i64, @intCast(text_1.len));
    const patLen: i64 = @as(i64, @intCast(pat_2.len));
    var positions: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    positions = positions;
    var i_2: i64 = 0;
    i_2 = i_2;
    while (i_2 <= textLen -% patLen) {
        const mismatch_index: i64 = mismatch_in_text(text_1, pat_2, i_2);
        if (mismatch_index < 0) {
            positions = blk0: { var _tmp = std.ArrayList(i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp.appendSlice(@as([]const i64, positions)) catch |err| handleError(err); _tmp.append(i_2) catch |err| handleError(err); break :blk0 (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            i_2 = i_2 +% 1;
        } else {
            const ch_1: []const u8 = text_1[@as(usize, @intCast(mismatch_index))..@min(@as(usize, @intCast(mismatch_index +% 1)), @as(usize, @intCast(text_1.len)))];
            const match_index: i64 = match_in_pattern(pat_2, ch_1);
            if (match_index < 0) {
                i_2 = mismatch_index +% 1;
            } else {
                i_2 = mismatch_index -% match_index;
            }
        }
    }
    return positions;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}
