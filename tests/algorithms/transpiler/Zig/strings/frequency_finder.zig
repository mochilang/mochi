// Generated by Mochi Zig transpiler on 2025-08-24 08:57 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const ETAOIN_var: []const u8 = "ETAOINSHRDLCUMWFGYPBVKJXQZ";
const LETTERS_var: []const u8 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";

fn etaoin_index(letter: []const u8) i64 {
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(ETAOIN_var.len))) {
        if (std.mem.eql(u8, ETAOIN_var[@as(usize, @intCast(i))..@min(@as(usize, @intCast(i +% 1)), @as(usize, @intCast(ETAOIN_var.len)))], letter)) {
            return i;
        }
        i = i +% 1;
    }
    return @as(i64, @intCast(ETAOIN_var.len));
}

fn get_letter_count(message: []const u8) std.StringHashMap(i64) {
    var letter_count: std.StringHashMap(i64) = std.StringHashMap(i64).init(std.heap.page_allocator);
    letter_count = letter_count;
    var i_1: i64 = 0;
    i_1 = i_1;
    while (i_1 < @as(i64, @intCast(LETTERS_var.len))) {
        const c: []const u8 = LETTERS_var[@as(usize, @intCast(i_1))..@min(@as(usize, @intCast(i_1 +% 1)), @as(usize, @intCast(LETTERS_var.len)))];
        letter_count.put(c, 0) catch unreachable;
        i_1 = i_1 +% 1;
    }
    const msg: []const u8 = _upper(message);
    var j: i64 = 0;
    j = j;
    while (j < @as(i64, @intCast(msg.len))) {
        const ch: []const u8 = msg[@as(usize, @intCast(j))..@min(@as(usize, @intCast(j +% 1)), @as(usize, @intCast(msg.len)))];
        if (std.mem.indexOfScalar(const u8, LETTERS_var, ch) != null) {
            letter_count.put(ch, (blk0: { if (letter_count.get(ch)) |v| { break :blk0 v; } break :blk0 0; }) +% 1) catch unreachable;
        }
        j = j +% 1;
    }
    return letter_count;
}

fn get_frequency_order(message_1: []const u8) []const u8 {
    var letter_to_freq: std.StringHashMap(i64) = get_letter_count(message_1);
    letter_to_freq = letter_to_freq;
    var max_freq: i64 = 0;
    max_freq = max_freq;
    var i_2: i64 = 0;
    i_2 = i_2;
    while (i_2 < @as(i64, @intCast(LETTERS_var.len))) {
        const letter_1: []const u8 = LETTERS_var[@as(usize, @intCast(i_2))..@min(@as(usize, @intCast(i_2 +% 1)), @as(usize, @intCast(LETTERS_var.len)))];
        const f: i64 = (blk1: { if (letter_to_freq.get(letter_1)) |v| { break :blk1 v; } break :blk1 0; });
        if (f > max_freq) {
            max_freq = f;
        }
        i_2 = i_2 +% 1;
    }
    var result: []const u8 = "";
    result = result;
    var freq: i64 = max_freq;
    freq = freq;
    while (freq >= 0) {
        var group: [][]const u8 = std.heap.page_allocator.alloc([]const u8, 0) catch unreachable;
        group = group;
        var j_1: i64 = 0;
        j_1 = j_1;
        while (j_1 < @as(i64, @intCast(LETTERS_var.len))) {
            const letter_2: []const u8 = LETTERS_var[@as(usize, @intCast(j_1))..@min(@as(usize, @intCast(j_1 +% 1)), @as(usize, @intCast(LETTERS_var.len)))];
            if ((blk2: { if (letter_to_freq.get(letter_2)) |v| { break :blk2 v; } break :blk2 0; }) == freq) {
                group = blk3: { var _tmp = std.ArrayList([]const u8).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp.appendSlice(@as([]const []const u8, group)) catch |err| handleError(err); _tmp.append(@constCast(letter_2)) catch |err| handleError(err); break :blk3 (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            }
            j_1 = j_1 +% 1;
        }
        const g_len: i64 = @as(i64, @intCast(group.len));
        var a: i64 = 0;
        a = a;
        while (a < g_len) {
            var b: i64 = 0;
            b = b;
            while (b < g_len -% a -% 1) {
                const g1: []const u8 = group[_idx(group.len, b)];
                const g2: []const u8 = group[_idx(group.len, b +% 1)];
                const idx1: i64 = etaoin_index(g1);
                const idx2: i64 = etaoin_index(g2);
                if (idx1 < idx2) {
                    const tmp: []const u8 = group[_idx(group.len, b)];
                    group[_idx(group.len, b)] = group[_idx(group.len, b +% 1)];
                    group[_idx(group.len, b +% 1)] = tmp;
                }
                b = b +% 1;
            }
            a = a +% 1;
        }
        var g: i64 = 0;
        g = g;
        while (g < @as(i64, @intCast(group.len))) {
            result = _concat_string(result, group[_idx(group.len, g)]);
            g = g +% 1;
        }
        freq = freq -% 1;
    }
    return result;
}

fn english_freq_match_score(message_2: []const u8) i64 {
    const freq_order: []const u8 = get_frequency_order(message_2);
    const top: []const u8 = freq_order[@as(usize, @intCast(0))..@min(@as(usize, @intCast(6)), @as(usize, @intCast(freq_order.len)))];
    const bottom: []const u8 = freq_order[@as(usize, @intCast(@as(i64, @intCast(freq_order.len)) -% 6))..@min(@as(usize, @intCast(@as(i64, @intCast(freq_order.len)))), @as(usize, @intCast(freq_order.len)))];
    var score: i64 = 0;
    score = score;
    var i_3: i64 = 0;
    i_3 = i_3;
    while (i_3 < 6) {
        const c_1: []const u8 = ETAOIN_var[@as(usize, @intCast(i_3))..@min(@as(usize, @intCast(i_3 +% 1)), @as(usize, @intCast(ETAOIN_var.len)))];
        if (std.mem.indexOfScalar(const u8, top, c_1) != null) {
            score = score +% 1;
        }
        i_3 = i_3 +% 1;
    }
    var j_2: i64 = @as(i64, @intCast(ETAOIN_var.len)) -% 6;
    j_2 = j_2;
    while (j_2 < @as(i64, @intCast(ETAOIN_var.len))) {
        const c_2: []const u8 = ETAOIN_var[@as(usize, @intCast(j_2))..@min(@as(usize, @intCast(j_2 +% 1)), @as(usize, @intCast(ETAOIN_var.len)))];
        if (std.mem.indexOfScalar(const u8, bottom, c_2) != null) {
            score = score +% 1;
        }
        j_2 = j_2 +% 1;
    }
    return score;
}

fn mochi_main() void {
    std.debug.print("{s}\n", .{get_frequency_order("Hello World")});
    std.debug.print("{s}\n", .{_str(english_freq_match_score("Hello World"))});
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        mochi_main();
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _upper(s: []const u8) []const u8 {
    var out = std.heap.page_allocator.alloc(u8, s.len + 1) catch unreachable;
    _ = std.ascii.upperString(out[0..s.len], s);
    out[s.len] = 0;
    return out[0..s.len];
}

fn _lower(s: []const u8) []const u8 {
    var out = std.heap.page_allocator.alloc(u8, s.len + 1) catch unreachable;
    _ = std.ascii.lowerString(out[0..s.len], s);
    out[s.len] = 0;
    return out[0..s.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
