// Generated by Mochi Zig transpiler on 2025-08-06 20:30 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn contains(xs: []i64, x: i64) bool {
    var i: i64 = 0;
    while (i < @as(i64, @intCast(xs.len))) {
        if (xs[@as(usize, @intCast(i))] == x) {
            return true;
        }
        i = i + 1;
    }
    return false;
}

fn repeat(s: []const u8, times: i64) []const u8 {
    var result: []const u8 = "";
    var i: i64 = 0;
    while (i < times) {
        result = _concat_string(result, s);
        i = i + 1;
    }
    return result;
}

fn build_board(pos: []i64, n: i64) [][]const u8 {
    var board: [][]const u8 = &[_][]const u8{};
    var i: i64 = 0;
    while (i < @as(i64, @intCast(pos.len))) {
        const col: i64 = pos[@as(usize, @intCast(i))];
        const line: []const u8 = _concat_string(_concat_string(repeat(". ", col), "Q "), repeat(". ", n - 1 - col));
        board = blk: { var _tmp = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []const u8, board)) catch |err| handleError(err); _tmp.append(line) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    return board;
}

fn depth_first_search(pos_1: []i64, dr: []i64, dl: []i64, n_1: i64) [][][]const u8 {
    const row: i64 = @as(i64, @intCast(pos_1.len));
    if (row == n_1) {
        var single: [][][]const u8 = &[_][][]const u8{};
        single = blk: { var _tmp = std.ArrayList([][]const u8).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const [][]const u8, single)) catch |err| handleError(err); _tmp.append(build_board(pos_1, n_1)) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        return single;
    }
    var boards: [][][]const u8 = &[_][][]const u8{};
    var col: i64 = 0;
    while (col < n_1) {
        if (std.mem.indexOfScalar(i64, pos_1, col) != null or std.mem.indexOfScalar(i64, dr, row - col) != null or std.mem.indexOfScalar(i64, dl, row + col) != null) {
            col = col + 1;
            continue;
        }
        const result: [][][]const u8 = depth_first_search(blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, pos_1)) catch |err| handleError(err); _tmp.append(col) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); }, blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, dr)) catch |err| handleError(err); _tmp.append(row - col) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); }, blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, dl)) catch |err| handleError(err); _tmp.append(row + col) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); }, n_1);
        boards = blk: { var _tmp = std.ArrayList([][]const u8).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const [][]const u8, boards)) catch |err| handleError(err); _tmp.appendSlice(@as([]const [][]const u8, result)) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        col = col + 1;
    }
    return boards;
}

fn n_queens_solution(n_2: i64) i64 {
    const boards: [][][]const u8 = depth_first_search(&[_]i64{}, &[_]i64{}, &[_]i64{}, n_2);
    var i: i64 = 0;
    while (i < @as(i64, @intCast(boards.len))) {
        var j: i64 = 0;
        while (j < @as(i64, @intCast(boards[@as(usize, @intCast(i))].len))) {
            std.debug.print("{d}\n", .{boards[@as(usize, @intCast(i))][@as(usize, @intCast(j))]});
            j = j + 1;
        }
        std.debug.print("{s}\n", .{""});
        i = i + 1;
    }
    std.debug.print("{s} {s}\n", .{_str(@as(i64, @intCast(boards.len))), "solutions were found."});
    return @as(i64, @intCast(boards.len));
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        _ = n_queens_solution(4);
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    if (info == .Pointer and info.Pointer.size == .Slice) {
        var out = std.ArrayList(u8).init(std.heap.page_allocator);
        defer out.deinit();
        out.append('[') catch unreachable;
        for (v, 0..) |e, i| {
            if (i != 0) { out.append(' ') catch unreachable; }
            const s = _str(e);
            out.appendSlice(s) catch unreachable;
        }
        out.append(']') catch unreachable;
        return out.toOwnedSlice() catch unreachable;
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * std.mem.page_size;
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
