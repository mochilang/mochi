// Generated by Mochi Zig transpiler on 2025-08-06 20:58 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

var maze_var: [][]i64 = &[_][]i64{};
var n_var: i64 = 0;

fn run_maze(maze_param: [][]i64, i: i64, j: i64, dr: i64, dc: i64, sol: [][]i64) bool {
    const size: i64 = @as(i64, @intCast(maze_param.len));
    if (i == dr and j == dc and maze_param[@as(usize, @intCast(i))][@as(usize, @intCast(j))] == 0) {
        sol[@as(usize, @intCast(i))][@as(usize, @intCast(j))] = 0;
        return true;
    }
    const lower_flag: bool = i >= 0 and j >= 0;
    const upper_flag: bool = i < size and j < size;
    if (lower_flag and upper_flag) {
        const block_flag: bool = sol[@as(usize, @intCast(i))][@as(usize, @intCast(j))] == 1 and maze_param[@as(usize, @intCast(i))][@as(usize, @intCast(j))] == 0;
        if (block_flag) {
            sol[@as(usize, @intCast(i))][@as(usize, @intCast(j))] = 0;
            if (run_maze(maze_param, i + 1, j, dr, dc, sol) or run_maze(maze_param, i, j + 1, dr, dc, sol) or run_maze(maze_param, i - 1, j, dr, dc, sol) or run_maze(maze_param, i, j - 1, dr, dc, sol)) {
                return true;
            }
            sol[@as(usize, @intCast(i))][@as(usize, @intCast(j))] = 1;
            return false;
        }
    }
    return false;
}

fn solve_maze(maze_param: [][]i64, sr: i64, sc: i64, dr_1: i64, dc_1: i64) [][]i64 {
    const size: i64 = @as(i64, @intCast(maze_param.len));
    if (!(0 <= sr and sr < size and 0 <= sc and sc < size and 0 <= dr_1 and dr_1 < size and 0 <= dc_1 and dc_1 < size)) {
        @panic("Invalid source or destination coordinates");
    }
    var sol_1: [][]i64 = &[_][]i64{};
    var i_1: i64 = 0;
    while (i_1 < size) {
        var row: []i64 = &[_]i64{};
        var j_1: i64 = 0;
        while (j_1 < size) {
            row = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, row)) catch |err| handleError(err); _tmp.append(1) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            j_1 = j_1 + 1;
        }
        sol_1 = blk: { var _tmp = std.ArrayList([]i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []i64, sol_1)) catch |err| handleError(err); _tmp.append(row) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i_1 = i_1 + 1;
    }
    const solved: bool = run_maze(maze_param, sr, sc, dr_1, dc_1, sol_1);
    if (solved) {
        return sol_1;
    } else {
        @panic("No solution exists!");
    }
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        maze_var = blk0: { var _tmp0 = std.heap.page_allocator.alloc([]i64, 5) catch unreachable; _tmp0[0] = blk1: { var _tmp1 = std.heap.page_allocator.alloc(i64, 5) catch unreachable; _tmp1[0] = 0; _tmp1[1] = 1; _tmp1[2] = 0; _tmp1[3] = 1; _tmp1[4] = 1; break :blk1 _tmp1; }; _tmp0[1] = blk2: { var _tmp2 = std.heap.page_allocator.alloc(i64, 5) catch unreachable; _tmp2[0] = 0; _tmp2[1] = 0; _tmp2[2] = 0; _tmp2[3] = 0; _tmp2[4] = 0; break :blk2 _tmp2; }; _tmp0[2] = blk3: { var _tmp3 = std.heap.page_allocator.alloc(i64, 5) catch unreachable; _tmp3[0] = 1; _tmp3[1] = 0; _tmp3[2] = 1; _tmp3[3] = 0; _tmp3[4] = 1; break :blk3 _tmp3; }; _tmp0[3] = blk4: { var _tmp4 = std.heap.page_allocator.alloc(i64, 5) catch unreachable; _tmp4[0] = 0; _tmp4[1] = 0; _tmp4[2] = 1; _tmp4[3] = 0; _tmp4[4] = 0; break :blk4 _tmp4; }; _tmp0[4] = blk5: { var _tmp5 = std.heap.page_allocator.alloc(i64, 5) catch unreachable; _tmp5[0] = 1; _tmp5[1] = 0; _tmp5[2] = 0; _tmp5[3] = 1; _tmp5[4] = 0; break :blk5 _tmp5; }; break :blk0 _tmp0; };
        n_var = @as(i64, @intCast(maze_var.len)) - 1;
        std.debug.print("{s}\n", .{_str(solve_maze(maze_var, 0, 0, n_var, n_var))});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    if (info == .Pointer and info.Pointer.size == .Slice) {
        var out = std.ArrayList(u8).init(std.heap.page_allocator);
        defer out.deinit();
        out.append('[') catch unreachable;
        for (v, 0..) |e, i| {
            if (i != 0) { out.append(' ') catch unreachable; }
            const s = _str(e);
            out.appendSlice(s) catch unreachable;
        }
        out.append(']') catch unreachable;
        return out.toOwnedSlice() catch unreachable;
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * std.mem.page_size;
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
