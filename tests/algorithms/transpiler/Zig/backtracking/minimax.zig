// Generated by Mochi Zig transpiler on 2025-08-06 20:30 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn minimax(depth: i64, node_index: i64, is_max: bool, scores: []i64, height: i64) i64 {
    if (depth < 0) {
        @panic("Depth cannot be less than 0");
    }
    if (@as(i64, @intCast(scores.len)) == 0) {
        @panic("Scores cannot be empty");
    }
    if (depth == height) {
        return scores[@as(usize, @intCast(node_index))];
    }
    if (is_max) {
        const left: i64 = minimax(depth + 1, node_index * 2, false, scores, height);
        const right: i64 = minimax(depth + 1, node_index * 2 + 1, false, scores, height);
        if (left > right) {
            return left;
        } else {
            return right;
        }
    }
    const left: i64 = minimax(depth + 1, node_index * 2, true, scores, height);
    const right: i64 = minimax(depth + 1, node_index * 2 + 1, true, scores, height);
    if (left < right) {
        return left;
    } else {
        return right;
    }
}

fn tree_height(n: i64) i64 {
    var h: i64 = 0;
    var v: i64 = n;
    while (v > 1) {
        v = @divTrunc(v, 2);
        h = h + 1;
    }
    return h;
}

fn mochi_main() void {
    const scores_1: []i64 = blk0: { var _tmp0 = std.heap.page_allocator.alloc(i64, 8) catch unreachable; _tmp0[0] = 90; _tmp0[1] = 23; _tmp0[2] = 6; _tmp0[3] = 33; _tmp0[4] = 21; _tmp0[5] = 65; _tmp0[6] = 123; _tmp0[7] = 34423; break :blk0 _tmp0; };
    const height_1: i64 = tree_height(@as(i64, @intCast(scores_1.len)));
    std.debug.print("{s}\n", .{_concat_string("Optimal value : ", _str(minimax(0, 0, true, scores_1, height_1)))});
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        mochi_main();
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    if (info == .Pointer and info.Pointer.size == .Slice) {
        var out = std.ArrayList(u8).init(std.heap.page_allocator);
        defer out.deinit();
        out.append('[') catch unreachable;
        for (v, 0..) |e, i| {
            if (i != 0) { out.append(' ') catch unreachable; }
            const s = _str(e);
            out.appendSlice(s) catch unreachable;
        }
        out.append(']') catch unreachable;
        return out.toOwnedSlice() catch unreachable;
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * std.mem.page_size;
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
