// Generated by Mochi Zig transpiler on 2025-08-06 20:58 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn sum_list(nums: []i64) i64 {
    var s: i64 = 0;
    for (nums) |__it0| {
        const n = __it0;
        s = s + n;
    }
    return s;
}

fn create_state_space_tree(nums_1: []i64, max_sum: i64, num_index: i64, path: []i64, curr_sum: i64, remaining_sum: i64) [][]i64 {
    var result: [][]i64 = &[_][]i64{};
    if (curr_sum > max_sum or curr_sum + remaining_sum < max_sum) {
        return result;
    }
    if (curr_sum == max_sum) {
        result = blk: { var _tmp = std.ArrayList([]i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []i64, result)) catch |err| handleError(err); _tmp.append(path) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        return result;
    }
    var index: i64 = num_index;
    while (index < @as(i64, @intCast(nums_1.len))) {
        const value: i64 = nums_1[@as(usize, @intCast(index))];
        const subres: [][]i64 = create_state_space_tree(nums_1, max_sum, index + 1, blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, path)) catch |err| handleError(err); _tmp.append(value) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); }, curr_sum + value, remaining_sum - value);
        var j: i64 = 0;
        while (j < @as(i64, @intCast(subres.len))) {
            result = blk: { var _tmp = std.ArrayList([]i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []i64, result)) catch |err| handleError(err); _tmp.append(subres[@as(usize, @intCast(j))]) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            j = j + 1;
        }
        index = index + 1;
    }
    return result;
}

fn generate_sum_of_subsets_solutions(nums_2: []i64, max_sum_1: i64) [][]i64 {
    const total: i64 = sum_list(nums_2);
    return create_state_space_tree(nums_2, max_sum_1, 0, &[_]i64{}, 0, total);
}

fn mochi_main() void {
    const __j = std.json.stringifyAlloc(std.heap.page_allocator, generate_sum_of_subsets_solutions(blk0: { var _tmp0 = std.heap.page_allocator.alloc(i64, 6) catch unreachable; _tmp0[0] = 3; _tmp0[1] = 34; _tmp0[2] = 4; _tmp0[3] = 12; _tmp0[4] = 5; _tmp0[5] = 2; break :blk0 _tmp0; }, 9), .{}) catch unreachable;
    std.debug.print("{s}\n", .{__j});
    std.heap.page_allocator.free(__j);
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        mochi_main();
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * std.mem.page_size;
    }
    return 0;
}
