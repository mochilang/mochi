// Generated by Mochi Zig transpiler on 2025-08-09 16:15 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn valid_connection(graph: []const []i64, next_ver: i64, curr_ind: i64, path: []const i64) bool {
    if (graph[@as(usize, @intCast(path[@as(usize, @intCast(curr_ind - 1))]))][@as(usize, @intCast(next_ver))] == 0) {
        return false;
    }
    for (path) |__it0| {
        const v = __it0;
        if (v == next_ver) {
            return false;
        }
    }
    return true;
}

fn util_hamilton_cycle(graph: [][]i64, path_param: []i64, curr_ind: i64) bool {
    var path_var: []i64 = path_param;
    path_var = path_var;
    if (curr_ind == @as(i64, @intCast(graph.len))) {
        return graph[@as(usize, @intCast(path_var[@as(usize, @intCast(curr_ind - 1))]))][@as(usize, @intCast(path_var[@as(usize, @intCast(0))]))] == 1;
    }
    var next_ver: i64 = 0;
    next_ver = next_ver;
    while (next_ver < @as(i64, @intCast(graph.len))) {
        if (valid_connection(graph, next_ver, curr_ind, path_var)) {
            path_var[@as(usize, @intCast(curr_ind))] = next_ver;
            if (util_hamilton_cycle(graph, path_var, curr_ind + 1)) {
                return true;
            }
            path_var[@as(usize, @intCast(curr_ind))] = 0 - 1;
        }
        next_ver = next_ver + 1;
    }
    return false;
}

fn hamilton_cycle(graph: [][]i64, start_index: i64) []i64 {
    var path: []i64 = &[_]i64{};
    path = path;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(graph.len)) + 1) {
        path[@as(usize, @intCast(i))] = 0 - 1;
        i = i + 1;
    }
    path[@as(usize, @intCast(0))] = start_index;
    const last: i64 = @as(i64, @intCast(path.len)) - 1;
    path[@as(usize, @intCast(last))] = start_index;
    if (util_hamilton_cycle(graph, path, 1)) {
        return path;
    }
    return (&[_]i64{})[0..];
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * std.mem.page_size;
    }
    return 0;
}
