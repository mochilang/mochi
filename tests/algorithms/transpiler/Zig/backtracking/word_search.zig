// Generated by Mochi Zig transpiler on 2025-08-06 20:58 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn contains(xs: []i64, x: i64) bool {
    var i: i64 = 0;
    while (i < @as(i64, @intCast(xs.len))) {
        if (xs[@as(usize, @intCast(i))] == x) {
            return true;
        }
        i = i + 1;
    }
    return false;
}

fn get_point_key(len_board: i64, len_board_column: i64, row: i64, column: i64) i64 {
    return len_board * len_board_column * row + column;
}

fn search_from(board: [][][]const u8, word: []const u8, row_1: i64, column_1: i64, word_index: i64, visited: []i64) bool {
    if (!std.mem.eql(u8, board[@as(usize, @intCast(row_1))][@as(usize, @intCast(column_1))], word[@as(usize, @intCast(word_index))..@min(@as(usize, @intCast(word_index + 1)), @as(usize, @intCast(word.len)))])) {
        return false;
    }
    if (word_index == @as(i64, @intCast(word.len)) - 1) {
        return true;
    }
    const len_board_1: i64 = @as(i64, @intCast(board.len));
    const len_board_column_1: i64 = @as(i64, @intCast(board[@as(usize, @intCast(0))].len));
    const dir_i: []i64 = blk0: { var _tmp0 = std.heap.page_allocator.alloc(i64, 4) catch unreachable; _tmp0[0] = 0; _tmp0[1] = 0; _tmp0[2] = 0 - 1; _tmp0[3] = 1; break :blk0 _tmp0; };
    const dir_j: []i64 = blk1: { var _tmp1 = std.heap.page_allocator.alloc(i64, 4) catch unreachable; _tmp1[0] = 1; _tmp1[1] = 0 - 1; _tmp1[2] = 0; _tmp1[3] = 0; break :blk1 _tmp1; };
    var k: i64 = 0;
    while (k < 4) {
        const next_i: i64 = row_1 + dir_i[@as(usize, @intCast(k))];
        const next_j: i64 = column_1 + dir_j[@as(usize, @intCast(k))];
        if (!(0 <= next_i and next_i < len_board_1 and 0 <= next_j and next_j < len_board_column_1)) {
            k = k + 1;
            continue;
        }
        const key: i64 = get_point_key(len_board_1, len_board_column_1, next_i, next_j);
        if (contains(visited, key)) {
            k = k + 1;
            continue;
        }
        const new_visited: []i64 = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, visited)) catch |err| handleError(err); _tmp.append(key) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        if (search_from(board, word, next_i, next_j, word_index + 1, new_visited)) {
            return true;
        }
        k = k + 1;
    }
    return false;
}

fn word_exists(board_1: [][][]const u8, word_1: []const u8) bool {
    const len_board_1: i64 = @as(i64, @intCast(board_1.len));
    const len_board_column_1: i64 = @as(i64, @intCast(board_1[@as(usize, @intCast(0))].len));
    var i: i64 = 0;
    while (i < len_board_1) {
        var j: i64 = 0;
        while (j < len_board_column_1) {
            const key: i64 = get_point_key(len_board_1, len_board_column_1, i, j);
            const visited_1: []i64 = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, &[_]i64{})) catch |err| handleError(err); _tmp.append(key) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            if (search_from(board_1, word_1, i, j, 0, visited_1)) {
                return true;
            }
            j = j + 1;
        }
        i = i + 1;
    }
    return false;
}

fn mochi_main() void {
    const board_2: [][][]const u8 = blk2: { var _tmp2 = std.heap.page_allocator.alloc([][]const u8, 3) catch unreachable; _tmp2[0] = blk3: { var _tmp3 = std.heap.page_allocator.alloc([]const u8, 4) catch unreachable; _tmp3[0] = "A"; _tmp3[1] = "B"; _tmp3[2] = "C"; _tmp3[3] = "E"; break :blk3 _tmp3; }; _tmp2[1] = blk4: { var _tmp4 = std.heap.page_allocator.alloc([]const u8, 4) catch unreachable; _tmp4[0] = "S"; _tmp4[1] = "F"; _tmp4[2] = "C"; _tmp4[3] = "S"; break :blk4 _tmp4; }; _tmp2[2] = blk5: { var _tmp5 = std.heap.page_allocator.alloc([]const u8, 4) catch unreachable; _tmp5[0] = "A"; _tmp5[1] = "D"; _tmp5[2] = "E"; _tmp5[3] = "E"; break :blk5 _tmp5; }; break :blk2 _tmp2; };
    std.debug.print("{s}\n", .{_str(word_exists(board_2, "ABCCED"))});
    std.debug.print("{s}\n", .{_str(word_exists(board_2, "SEE"))});
    std.debug.print("{s}\n", .{_str(word_exists(board_2, "ABCB"))});
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        mochi_main();
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    if (info == .Pointer and info.Pointer.size == .Slice) {
        var out = std.ArrayList(u8).init(std.heap.page_allocator);
        defer out.deinit();
        out.append('[') catch unreachable;
        for (v, 0..) |e, i| {
            if (i != 0) { out.append(' ') catch unreachable; }
            const s = _str(e);
            out.appendSlice(s) catch unreachable;
        }
        out.append(']') catch unreachable;
        return out.toOwnedSlice() catch unreachable;
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * std.mem.page_size;
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
