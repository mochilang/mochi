// Generated by Mochi Zig transpiler on 2025-08-09 16:15 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

var board_var: [][]i64 = &[_][]i64{};

fn get_valid_pos(position: []const i64, n: i64) [][]i64 {
    const y: i64 = position[@as(usize, @intCast(0))];
    const x: i64 = position[@as(usize, @intCast(1))];
    var positions: [][]i64 = @constCast(&([8][]i64{@constCast(&([2]i64{y + 1, x + 2}))[0..], @constCast(&([2]i64{y - 1, x + 2}))[0..], @constCast(&([2]i64{y + 1, x - 2}))[0..], @constCast(&([2]i64{y - 1, x - 2}))[0..], @constCast(&([2]i64{y + 2, x + 1}))[0..], @constCast(&([2]i64{y + 2, x - 1}))[0..], @constCast(&([2]i64{y - 2, x + 1}))[0..], @constCast(&([2]i64{y - 2, x - 1}))[0..]}))[0..];
    positions = positions;
    var permissible: [][]i64 = (&[_][]i64{})[0..];
    permissible = permissible;
    for (@as(usize, @intCast(0))..@as(usize, @intCast(@as(i64, @intCast(positions.len))))) |__it0| {
        const idx: i64 = @as(i64, @intCast(__it0));
        const inner: []const i64 = positions[@as(usize, @intCast(idx))];
        const y_test: i64 = inner[@as(usize, @intCast(0))];
        const x_test: i64 = inner[@as(usize, @intCast(1))];
        if (y_test >= 0 and y_test < n and x_test >= 0 and x_test < n) {
            permissible = blk: { var _tmp = std.ArrayList([]i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []i64, permissible)) catch |err| handleError(err); _tmp.append(@constCast(inner)) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        }
    }
    return permissible;
}

fn is_complete(board_param: [][]i64) bool {
    for (@as(usize, @intCast(0))..@as(usize, @intCast(@as(i64, @intCast(board_param.len))))) |__it1| {
        const i: i64 = @as(i64, @intCast(__it1));
        var row: []const i64 = board_param[@as(usize, @intCast(i))];
        row = row;
        for (@as(usize, @intCast(0))..@as(usize, @intCast(@as(i64, @intCast(row.len))))) |__it2| {
            const j: i64 = @as(i64, @intCast(__it2));
            if (row[@as(usize, @intCast(j))] == 0) {
                return false;
            }
        }
    }
    return true;
}

fn open_knight_tour_helper(board_param: [][]i64, pos: []i64, curr: i64) bool {
    const board_var_1: []const []i64 = board_param;
    if (is_complete(board_var_1)) {
        return true;
    }
    var moves: [][]i64 = get_valid_pos(pos, @as(i64, @intCast(board_var_1.len)));
    moves = moves;
    for (@as(usize, @intCast(0))..@as(usize, @intCast(@as(i64, @intCast(moves.len))))) |__it3| {
        const i: i64 = @as(i64, @intCast(__it3));
        var position: []i64 = moves[@as(usize, @intCast(i))];
        position = position;
        const y: i64 = position[@as(usize, @intCast(0))];
        const x: i64 = position[@as(usize, @intCast(1))];
        if (board_var_1[@as(usize, @intCast(y))][@as(usize, @intCast(x))] == 0) {
            board_var_1[@as(usize, @intCast(y))][@as(usize, @intCast(x))] = curr + 1;
            if (open_knight_tour_helper(board_var_1, position, curr + 1)) {
                return true;
            }
            board_var_1[@as(usize, @intCast(y))][@as(usize, @intCast(x))] = 0;
        }
    }
    return false;
}

fn open_knight_tour(n: i64) [][]i64 {
    var board_var_2: [][]i64 = (&[_][]i64{})[0..];
    board_var_2 = board_var_2;
    for (@as(usize, @intCast(0))..@as(usize, @intCast(n))) |_| {
        var row: []i64 = (&[_]i64{})[0..];
        row = row;
        for (@as(usize, @intCast(0))..@as(usize, @intCast(n))) |_| {
            row = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, row)) catch |err| handleError(err); _tmp.append(0) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        }
        board_var_2 = blk: { var _tmp = std.ArrayList([]i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []i64, board_var_2)) catch |err| handleError(err); _tmp.append(@constCast(row)) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
    }
    for (@as(usize, @intCast(0))..@as(usize, @intCast(n))) |__it6| {
        const i: i64 = @as(i64, @intCast(__it6));
        for (@as(usize, @intCast(0))..@as(usize, @intCast(n))) |__it7| {
            const j: i64 = @as(i64, @intCast(__it7));
            board_var_2[@as(usize, @intCast(i))][@as(usize, @intCast(j))] = 1;
            if (open_knight_tour_helper(board_var_2, @constCast(&([2]i64{i, j}))[0..], 1)) {
                return board_var_2;
            }
            board_var_2[@as(usize, @intCast(i))][@as(usize, @intCast(j))] = 0;
        }
    }
    std.debug.print("{s}\n", .{_concat_string("Open Knight Tour cannot be performed on a board of size ", _str(n))});
    return board_var_2;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        board_var = open_knight_tour(1);
        std.debug.print("{d}\n", .{board_var[@as(usize, @intCast(0))][@as(usize, @intCast(0))]});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * std.mem.page_size;
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
