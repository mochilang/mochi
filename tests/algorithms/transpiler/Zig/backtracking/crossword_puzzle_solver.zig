// Generated by Mochi Zig transpiler on 2025-08-06 18:11 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

var puzzle_var: [][][]const u8 = &[_][][]const u8{};
var words_var: [][]const u8 = &[_][]const u8{};
var used_var: []bool = &[_]bool{};

fn is_valid(puzzle_param: [][][]const u8, word: []const u8, row: i64, col: i64, vertical: bool) bool {
    for (0..@as(i64, @intCast(word.len))) |__it0| {
        const i: i64 = @as(i64, @intCast(__it0));
        if (vertical) {
            if (row + i >= @as(i64, @intCast(puzzle_param.len)) or !std.mem.eql(u8, puzzle_param[@intCast(row + i)][@intCast(col)], "")) {
                return false;
            }
        } else {
            if (col + i >= @as(i64, @intCast(puzzle_param[@intCast(0)].len)) or !std.mem.eql(u8, puzzle_param[@intCast(row)][@intCast(col + i)], "")) {
                return false;
            }
        }
    }
    return true;
}

fn place_word(puzzle_param: [][][]const u8, word_1: []const u8, row_1: i64, col_1: i64, vertical_1: bool) void {
    for (0..@as(i64, @intCast(word_1.len))) |__it1| {
        const i_1: i64 = @as(i64, @intCast(__it1));
        const ch: []const u8 = word_1[@intCast(i_1)..@intCast(i_1) + 1];
        if (vertical_1) {
            puzzle_param[@intCast(row_1 + i_1)][@intCast(col_1)] = ch;
        } else {
            puzzle_param[@intCast(row_1)][@intCast(col_1 + i_1)] = ch;
        }
    }
}

fn remove_word(puzzle_param: [][][]const u8, word_2: []const u8, row_2: i64, col_2: i64, vertical_2: bool) void {
    for (0..@as(i64, @intCast(word_2.len))) |__it2| {
        const i_2: i64 = @as(i64, @intCast(__it2));
        if (vertical_2) {
            puzzle_param[@intCast(row_2 + i_2)][@intCast(col_2)] = "";
        } else {
            puzzle_param[@intCast(row_2)][@intCast(col_2 + i_2)] = "";
        }
    }
}

fn solve_crossword(puzzle_param: [][][]const u8, words_param: [][]const u8, used_param: []bool) bool {
    for (0..@as(i64, @intCast(puzzle_param.len))) |__it3| {
        const row_3: i64 = @as(i64, @intCast(__it3));
        for (0..@as(i64, @intCast(puzzle_param[@intCast(0)].len))) |__it4| {
            const col_3: i64 = @as(i64, @intCast(__it4));
            if (std.mem.eql(u8, puzzle_param[@intCast(row_3)][@intCast(col_3)], "")) {
                for (0..@as(i64, @intCast(words_param.len))) |__it5| {
                    const i_3: i64 = @as(i64, @intCast(__it5));
                    if (!(used_param[@intCast(i_3)])) {
                        const word_3: []const u8 = words_param[@intCast(i_3)];
                        for (blk0: { var _tmp0 = std.heap.page_allocator.alloc(bool, 2) catch unreachable; _tmp0[0] = true; _tmp0[1] = false; break :blk0 _tmp0; }) |__it6| {
                            const vertical_3 = __it6;
                            if (is_valid(puzzle_param, word_3, row_3, col_3, vertical_3)) {
                                place_word(puzzle_param, word_3, row_3, col_3, vertical_3);
                                used_param[@intCast(i_3)] = true;
                                if (solve_crossword(puzzle_param, words_param, used_param)) {
                                    return true;
                                }
                                used_param[@intCast(i_3)] = false;
                                remove_word(puzzle_param, word_3, row_3, col_3, vertical_3);
                            }
                        }
                    }
                }
                return false;
            }
        }
    }
    return true;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        puzzle_var = blk1: { var _tmp1 = std.heap.page_allocator.alloc([][]const u8, 3) catch unreachable; _tmp1[0] = blk2: { var _tmp2 = std.heap.page_allocator.alloc([]const u8, 3) catch unreachable; _tmp2[0] = ""; _tmp2[1] = ""; _tmp2[2] = ""; break :blk2 _tmp2; }; _tmp1[1] = blk3: { var _tmp3 = std.heap.page_allocator.alloc([]const u8, 3) catch unreachable; _tmp3[0] = ""; _tmp3[1] = ""; _tmp3[2] = ""; break :blk3 _tmp3; }; _tmp1[2] = blk4: { var _tmp4 = std.heap.page_allocator.alloc([]const u8, 3) catch unreachable; _tmp4[0] = ""; _tmp4[1] = ""; _tmp4[2] = ""; break :blk4 _tmp4; }; break :blk1 _tmp1; };
        words_var = blk5: { var _tmp5 = std.heap.page_allocator.alloc([]const u8, 3) catch unreachable; _tmp5[0] = "cat"; _tmp5[1] = "dog"; _tmp5[2] = "car"; break :blk5 _tmp5; };
        used_var = blk6: { var _tmp6 = std.heap.page_allocator.alloc(bool, 3) catch unreachable; _tmp6[0] = false; _tmp6[1] = false; _tmp6[2] = false; break :blk6 _tmp6; };
        if (solve_crossword(puzzle_var, words_var, used_var)) {
            std.debug.print("{s}\n", .{"Solution found:"});
            for (puzzle_var) |__it7| {
                const row_4 = __it7;
                std.debug.print("{s}\n", .{_str(row_4)});
            }
        } else {
            std.debug.print("{s}\n", .{"No solution found:"});
        }
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    if (info == .Pointer and info.Pointer.size == .Slice) {
        var out = std.ArrayList(u8).init(std.heap.page_allocator);
        defer out.deinit();
        out.append('[') catch unreachable;
        for (v, 0..) |e, i| {
            if (i != 0) { out.append(' ') catch unreachable; }
            const s = _str(e);
            out.appendSlice(s) catch unreachable;
        }
        out.append(']') catch unreachable;
        return out.toOwnedSlice() catch unreachable;
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * std.mem.page_size;
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
