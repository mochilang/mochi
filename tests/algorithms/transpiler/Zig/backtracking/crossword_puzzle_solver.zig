// Generated by Mochi Zig transpiler on 2025-08-09 16:15 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

var puzzle_var: [][][]const u8 = &[_][][]const u8{};
var words_var: [][]const u8 = &[_][]const u8{};
var used_var: []bool = &[_]bool{};

fn is_valid(puzzle_param: [][][]const u8, word: []u8, row: i64, col: i64, vertical: bool) bool {
    for (@as(usize, @intCast(0))..@as(usize, @intCast(@as(i64, @intCast(word.len))))) |__it0| {
        const i: i64 = @as(i64, @intCast(__it0));
        if (vertical) {
            if (row + i >= @as(i64, @intCast(puzzle_param.len)) or puzzle_param[@as(usize, @intCast(row + i))][@as(usize, @intCast(col))].len != 0) {
                return false;
            }
        } else {
            if (col + i >= @as(i64, @intCast(puzzle_param[@as(usize, @intCast(0))].len)) or puzzle_param[@as(usize, @intCast(row))][@as(usize, @intCast(col + i))].len != 0) {
                return false;
            }
        }
    }
    return true;
}

fn place_word(puzzle_param: [][][]const u8, word: []u8, row: i64, col: i64, vertical: bool) void {
    const puzzle_var_1: []const [][]const u8 = puzzle_param;
    for (@as(usize, @intCast(0))..@as(usize, @intCast(@as(i64, @intCast(word.len))))) |__it1| {
        const i: i64 = @as(i64, @intCast(__it1));
        const ch: []const u8 = word[@as(usize, @intCast(i))..@as(usize, @intCast(i)) + 1];
        if (vertical) {
            puzzle_var_1[@as(usize, @intCast(row + i))][@as(usize, @intCast(col))] = ch;
        } else {
            puzzle_var_1[@as(usize, @intCast(row))][@as(usize, @intCast(col + i))] = ch;
        }
    }
}

fn remove_word(puzzle_param_1: [][][]const u8, word: []u8, row: i64, col: i64, vertical: bool) void {
    const puzzle_var_2: []const [][]const u8 = puzzle_param_1;
    for (@as(usize, @intCast(0))..@as(usize, @intCast(@as(i64, @intCast(word.len))))) |__it2| {
        const i: i64 = @as(i64, @intCast(__it2));
        if (vertical) {
            puzzle_var_2[@as(usize, @intCast(row + i))][@as(usize, @intCast(col))] = "";
        } else {
            puzzle_var_2[@as(usize, @intCast(row))][@as(usize, @intCast(col + i))] = "";
        }
    }
}

fn solve_crossword(puzzle_param: [][][]const u8, words_param: [][]const u8, used_param: []bool) bool {
    const used_var_1: []const bool = used_param;
    for (@as(usize, @intCast(0))..@as(usize, @intCast(@as(i64, @intCast(puzzle_param.len))))) |__it3| {
        const row: i64 = @as(i64, @intCast(__it3));
        for (@as(usize, @intCast(0))..@as(usize, @intCast(@as(i64, @intCast(puzzle_param[@as(usize, @intCast(0))].len))))) |__it4| {
            const col: i64 = @as(i64, @intCast(__it4));
            if (puzzle_param[@as(usize, @intCast(row))][@as(usize, @intCast(col))].len == 0) {
                for (@as(usize, @intCast(0))..@as(usize, @intCast(@as(i64, @intCast(words_param.len))))) |__it5| {
                    const i: i64 = @as(i64, @intCast(__it5));
                    if (!(used_var_1[@as(usize, @intCast(i))])) {
                        var word: []const u8 = words_param[@as(usize, @intCast(i))];
                        word = word;
                        for ([2]bool{true, false}) |__it6| {
                            const vertical = __it6;
                            if (is_valid(puzzle_param, word, row, col, vertical)) {
                                place_word(puzzle_param, word, row, col, vertical);
                                used_var_1[@as(usize, @intCast(i))] = true;
                                if (solve_crossword(puzzle_param, words_param, used_var_1)) {
                                    return true;
                                }
                                used_var_1[@as(usize, @intCast(i))] = false;
                                remove_word(puzzle_param, word, row, col, vertical);
                            }
                        }
                    }
                }
                return false;
            }
        }
    }
    return true;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        puzzle_var = @constCast(&([3][][]const u8{@constCast(&([3][]const u8{"", "", ""}))[0..], @constCast(&([3][]const u8{"", "", ""}))[0..], @constCast(&([3][]const u8{"", "", ""}))[0..]}))[0..];
        words_var = @constCast(&([3][]const u8{"cat", "dog", "car"}))[0..];
        used_var = @constCast(&([3]bool{false, false, false}))[0..];
        if (solve_crossword(puzzle_var, words_var, used_var)) {
            std.debug.print("{s}\n", .{"Solution found:"});
            for (puzzle_var) |__it7| {
                const row = __it7;
                std.debug.print("{s}\n", .{_str(row)});
            }
        } else {
            std.debug.print("{s}\n", .{"No solution found:"});
        }
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * std.mem.page_size;
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
