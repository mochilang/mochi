// Generated by Mochi Zig transpiler on 2025-08-06 20:30 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn get_value(keys: [][]const u8, values: [][]const u8, key: []const u8) []const u8 {
    var i: i64 = 0;
    while (i < @as(i64, @intCast(keys.len))) {
        if (std.mem.eql(u8, keys[@as(usize, @intCast(i))], key)) {
            return values[@as(usize, @intCast(i))];
        }
        i = i + 1;
    }
    return "";
}

fn contains_value(values_1: [][]const u8, value: []const u8) bool {
    var i_1: i64 = 0;
    while (i_1 < @as(i64, @intCast(values_1.len))) {
        if (std.mem.eql(u8, values_1[@as(usize, @intCast(i_1))], value)) {
            return true;
        }
        i_1 = i_1 + 1;
    }
    return false;
}

fn backtrack(pattern: []const u8, input_string: []const u8, pi: i64, si: i64, keys_1: [][]const u8, values_2: [][]const u8) bool {
    if (pi == @as(i64, @intCast(pattern.len)) and si == @as(i64, @intCast(input_string.len))) {
        return true;
    }
    if (pi == @as(i64, @intCast(pattern.len)) or si == @as(i64, @intCast(input_string.len))) {
        return false;
    }
    const ch: []const u8 = pattern[@as(usize, @intCast(pi))..@min(@as(usize, @intCast(pi + 1)), @as(usize, @intCast(pattern.len)))];
    const mapped: []const u8 = get_value(keys_1, values_2, ch);
    if (!std.mem.eql(u8, mapped, "")) {
        if (std.mem.eql(u8, input_string[@as(usize, @intCast(si))..@min(@as(usize, @intCast(si + @as(i64, @intCast(mapped.len)))), @as(usize, @intCast(input_string.len)))], mapped)) {
            return backtrack(pattern, input_string, pi + 1, si + @as(i64, @intCast(mapped.len)), keys_1, values_2);
        }
        return false;
    }
    var end: i64 = si + 1;
    while (end <= @as(i64, @intCast(input_string.len))) {
        const substr: []const u8 = input_string[@as(usize, @intCast(si))..@min(@as(usize, @intCast(end)), @as(usize, @intCast(input_string.len)))];
        if (contains_value(values_2, substr)) {
            end = end + 1;
            continue;
        }
        const new_keys: [][]const u8 = blk: { var _tmp = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []const u8, keys_1)) catch |err| handleError(err); _tmp.append(ch) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        const new_values: [][]const u8 = blk: { var _tmp = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []const u8, values_2)) catch |err| handleError(err); _tmp.append(substr) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        if (backtrack(pattern, input_string, pi + 1, end, new_keys, new_values)) {
            return true;
        }
        end = end + 1;
    }
    return false;
}

fn match_word_pattern(pattern_1: []const u8, input_string_1: []const u8) bool {
    const keys_2: [][]const u8 = &[_][]const u8{};
    const values_3: [][]const u8 = &[_][]const u8{};
    return backtrack(pattern_1, input_string_1, 0, 0, keys_2, values_3);
}

fn mochi_main() void {
    std.debug.print("{s}\n", .{_str(match_word_pattern("aba", "GraphTreesGraph"))});
    std.debug.print("{s}\n", .{_str(match_word_pattern("xyx", "PythonRubyPython"))});
    std.debug.print("{s}\n", .{_str(match_word_pattern("GG", "PythonJavaPython"))});
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        mochi_main();
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    if (info == .Pointer and info.Pointer.size == .Slice) {
        var out = std.ArrayList(u8).init(std.heap.page_allocator);
        defer out.deinit();
        out.append('[') catch unreachable;
        for (v, 0..) |e, i| {
            if (i != 0) { out.append(' ') catch unreachable; }
            const s = _str(e);
            out.appendSlice(s) catch unreachable;
        }
        out.append(']') catch unreachable;
        return out.toOwnedSlice() catch unreachable;
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * std.mem.page_size;
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
