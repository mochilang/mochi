// Generated by Mochi Zig transpiler on 2025-08-09 16:15 +0700
const std = @import("std");
const Value = union(enum) { Null: void, Int: i64, Float: f64, Str: []const u8, Bool: bool, List: []Value, StrList: [][]const u8, };

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn get_value(keys: [][]const u8, values: []const []const u8, key: []const u8) []const u8 {
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(keys.len))) {
        if (std.mem.eql(u8, keys[@as(usize, @intCast(i))], key)) {
            return values[@as(usize, @intCast(i))];
        }
        i = i + 1;
    }
    return (&[_]u8{})[0..];
}

fn contains_value(values: [][]const u8, value: []const u8) bool {
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(values.len))) {
        if (std.mem.eql(u8, values[@as(usize, @intCast(i))], value)) {
            return true;
        }
        i = i + 1;
    }
    return false;
}

fn backtrack(pattern: []u8, input_string: []u8, pi: i64, si: i64, keys: [][]const u8, values: [][]const u8) bool {
    if (pi == @as(i64, @intCast(pattern.len)) and si == @as(i64, @intCast(input_string.len))) {
        return true;
    }
    if (pi == @as(i64, @intCast(pattern.len)) or si == @as(i64, @intCast(input_string.len))) {
        return false;
    }
    var ch: []const u8 = pattern[@as(usize, @intCast(pi))..@min(@as(usize, @intCast(pi + 1)), @as(usize, @intCast(pattern.len)))];
    ch = ch;
    var mapped: []const u8 = get_value(keys, values, ch);
    mapped = mapped;
    if (mapped.len != 0) {
        if (std.mem.eql(u8, input_string[@as(usize, @intCast(si))..@min(@as(usize, @intCast(si + @as(i64, @intCast(mapped.len)))), @as(usize, @intCast(input_string.len)))], mapped)) {
            return backtrack(pattern, input_string, pi + 1, si + @as(i64, @intCast(mapped.len)), keys, values);
        }
        return false;
    }
    var end: i64 = si + 1;
    end = end;
    while (end <= @as(i64, @intCast(input_string.len))) {
        var substr: []const u8 = input_string[@as(usize, @intCast(si))..@min(@as(usize, @intCast(end)), @as(usize, @intCast(input_string.len)))];
        substr = substr;
        if (contains_value(values, substr)) {
            end = end + 1;
            continue;
        }
        var new_keys: [][]const u8 = blk: { var _tmp = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []const u8, keys)) catch |err| handleError(err); _tmp.append(@constCast(ch)) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        new_keys = new_keys;
        var new_values: [][]const u8 = blk: { var _tmp = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []const u8, values)) catch |err| handleError(err); _tmp.append(@constCast(substr)) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        new_values = new_values;
        if (backtrack(pattern, input_string, pi + 1, end, new_keys, new_values)) {
            return true;
        }
        end = end + 1;
    }
    return false;
}

fn match_word_pattern(pattern: []u8, input_string: []u8) bool {
    var keys: [][]const u8 = (&[_][]const u8{})[0..];
    keys = keys;
    var values: [][]const u8 = (&[_][]const u8{})[0..];
    values = values;
    return backtrack(pattern, input_string, 0, 0, keys, values);
}

fn mochi_main() void {
    std.debug.print("{s}\n", .{_str(match_word_pattern(@constCast("aba"), @constCast("GraphTreesGraph")))});
    std.debug.print("{s}\n", .{_str(match_word_pattern(@constCast("xyx"), @constCast("PythonRubyPython")))});
    std.debug.print("{s}\n", .{_str(match_word_pattern(@constCast("GG"), @constCast("PythonJavaPython")))});
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        mochi_main();
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    if (@TypeOf(v) == Value) {
        return switch (v) {
            .Int => std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v.Int}) catch unreachable,
            .Float => std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v.Float}) catch unreachable,
            .Str => std.fmt.allocPrint(std.heap.page_allocator, "{s}", .{v.Str}) catch unreachable,
            .Bool => if (v.Bool) "true" else "false",
            .List => _str(v.List),
            .StrList => _str(v.StrList),
            else => "null",
        };
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * std.mem.page_size;
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
