// Generated by Mochi Zig transpiler on 2025-08-06 20:58 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const alphabet_var: []const u8 = "abcdefghijklmnopqrstuvwxyz";

fn contains(xs: [][]const u8, x: []const u8) bool {
    var i: i64 = 0;
    while (i < @as(i64, @intCast(xs.len))) {
        if (std.mem.eql(u8, xs[@as(usize, @intCast(i))], x)) {
            return true;
        }
        i = i + 1;
    }
    return false;
}

fn remove_item(xs_1: [][]const u8, x_1: []const u8) [][]const u8 {
    var res: [][]const u8 = &[_][]const u8{};
    var removed: bool = false;
    var i: i64 = 0;
    while (i < @as(i64, @intCast(xs_1.len))) {
        if (!(removed) and std.mem.eql(u8, xs_1[@as(usize, @intCast(i))], x_1)) {
            removed = true;
        } else {
            res = blk: { var _tmp = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []const u8, res)) catch |err| handleError(err); _tmp.append(xs_1[@as(usize, @intCast(i))]) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        }
        i = i + 1;
    }
    return res;
}

fn word_ladder(current: []const u8, path: [][]const u8, target: []const u8, words: [][]const u8) [][]const u8 {
    if (std.mem.eql(u8, current, target)) {
        return path;
    }
    var i: i64 = 0;
    while (i < @as(i64, @intCast(current.len))) {
        var j: i64 = 0;
        while (j < @as(i64, @intCast(alphabet_var.len))) {
            const c: []const u8 = alphabet_var[@as(usize, @intCast(j))..@min(@as(usize, @intCast(j + 1)), @as(usize, @intCast(alphabet_var.len)))];
            const transformed: []const u8 = _concat_string(_concat_string(current[@as(usize, @intCast(0))..@min(@as(usize, @intCast(i)), @as(usize, @intCast(current.len)))], c), current[@as(usize, @intCast(i + 1))..@min(@as(usize, @intCast(@as(i64, @intCast(current.len)))), @as(usize, @intCast(current.len)))]);
            if (contains(words, transformed)) {
                const new_words: [][]const u8 = remove_item(words, transformed);
                const new_path: [][]const u8 = blk: { var _tmp = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []const u8, path)) catch |err| handleError(err); _tmp.append(transformed) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
                const result: [][]const u8 = word_ladder(transformed, new_path, target, new_words);
                if (@as(i64, @intCast(result.len)) > 0) {
                    return result;
                }
            }
            j = j + 1;
        }
        i = i + 1;
    }
    return &[_][]const u8{};
}

fn mochi_main() void {
    const w1: [][]const u8 = blk0: { var _tmp0 = std.heap.page_allocator.alloc([]const u8, 6) catch unreachable; _tmp0[0] = "hot"; _tmp0[1] = "dot"; _tmp0[2] = "dog"; _tmp0[3] = "lot"; _tmp0[4] = "log"; _tmp0[5] = "cog"; break :blk0 _tmp0; };
    std.debug.print("{s}\n", .{_str(word_ladder("hit", blk1: { var _tmp1 = std.heap.page_allocator.alloc([]const u8, 1) catch unreachable; _tmp1[0] = "hit"; break :blk1 _tmp1; }, "cog", w1))});
    const w2: [][]const u8 = blk2: { var _tmp2 = std.heap.page_allocator.alloc([]const u8, 5) catch unreachable; _tmp2[0] = "hot"; _tmp2[1] = "dot"; _tmp2[2] = "dog"; _tmp2[3] = "lot"; _tmp2[4] = "log"; break :blk2 _tmp2; };
    std.debug.print("{s}\n", .{_str(word_ladder("hit", blk3: { var _tmp3 = std.heap.page_allocator.alloc([]const u8, 1) catch unreachable; _tmp3[0] = "hit"; break :blk3 _tmp3; }, "cog", w2))});
    const w3: [][]const u8 = blk4: { var _tmp4 = std.heap.page_allocator.alloc([]const u8, 5) catch unreachable; _tmp4[0] = "load"; _tmp4[1] = "goad"; _tmp4[2] = "gold"; _tmp4[3] = "lead"; _tmp4[4] = "lord"; break :blk4 _tmp4; };
    std.debug.print("{s}\n", .{_str(word_ladder("lead", blk5: { var _tmp5 = std.heap.page_allocator.alloc([]const u8, 1) catch unreachable; _tmp5[0] = "lead"; break :blk5 _tmp5; }, "gold", w3))});
    const w4: [][]const u8 = blk6: { var _tmp6 = std.heap.page_allocator.alloc([]const u8, 5) catch unreachable; _tmp6[0] = "came"; _tmp6[1] = "cage"; _tmp6[2] = "code"; _tmp6[3] = "cade"; _tmp6[4] = "gave"; break :blk6 _tmp6; };
    std.debug.print("{s}\n", .{_str(word_ladder("game", blk7: { var _tmp7 = std.heap.page_allocator.alloc([]const u8, 1) catch unreachable; _tmp7[0] = "game"; break :blk7 _tmp7; }, "code", w4))});
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        mochi_main();
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    if (info == .Pointer and info.Pointer.size == .Slice) {
        var out = std.ArrayList(u8).init(std.heap.page_allocator);
        defer out.deinit();
        out.append('[') catch unreachable;
        for (v, 0..) |e, i| {
            if (i != 0) { out.append(' ') catch unreachable; }
            const s = _str(e);
            out.appendSlice(s) catch unreachable;
        }
        out.append(']') catch unreachable;
        return out.toOwnedSlice() catch unreachable;
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * std.mem.page_size;
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
