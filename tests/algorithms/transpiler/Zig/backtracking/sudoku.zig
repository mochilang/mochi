// Generated by Mochi Zig transpiler on 2025-08-06 20:58 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

var initial_grid_var: [][]i64 = &[_][]i64{};
var no_solution_var: [][]i64 = &[_][]i64{};
var examples_var: [][][]i64 = &[_][][]i64{};
var idx_var: i64 = 0;

fn is_safe(grid: [][]i64, row: i64, column: i64, n: i64) bool {
    for (@as(usize, @intCast(0))..@as(usize, @intCast(9))) |__it0| {
        const i: i64 = @as(i64, @intCast(__it0));
        if (grid[@as(usize, @intCast(row))][@as(usize, @intCast(i))] == n or grid[@as(usize, @intCast(i))][@as(usize, @intCast(column))] == n) {
            return false;
        }
    }
    for (@as(usize, @intCast(0))..@as(usize, @intCast(3))) |__it1| {
        const i: i64 = @as(i64, @intCast(__it1));
        for (@as(usize, @intCast(0))..@as(usize, @intCast(3))) |__it2| {
            const j: i64 = @as(i64, @intCast(__it2));
            if (grid[@as(usize, @intCast(row - @mod(row, 3) + i))][@as(usize, @intCast(column - @mod(column, 3) + j))] == n) {
                return false;
            }
        }
    }
    return true;
}

fn find_empty_location(grid_1: [][]i64) []i64 {
    for (@as(usize, @intCast(0))..@as(usize, @intCast(9))) |__it3| {
        const i: i64 = @as(i64, @intCast(__it3));
        for (@as(usize, @intCast(0))..@as(usize, @intCast(9))) |__it4| {
            const j: i64 = @as(i64, @intCast(__it4));
            if (grid_1[@as(usize, @intCast(i))][@as(usize, @intCast(j))] == 0) {
                return blk0: { var _tmp0 = std.heap.page_allocator.alloc(i64, 2) catch unreachable; _tmp0[0] = i; _tmp0[1] = j; break :blk0 _tmp0; };
            }
        }
    }
    return &[_]i64{};
}

fn sudoku(grid_2: [][]i64) bool {
    const loc: []i64 = find_empty_location(grid_2);
    if (@as(i64, @intCast(loc.len)) == 0) {
        return true;
    }
    const row_1: i64 = loc[@as(usize, @intCast(0))];
    const column_1: i64 = loc[@as(usize, @intCast(1))];
    for (@as(usize, @intCast(1))..@as(usize, @intCast(10))) |__it5| {
        const digit: i64 = @as(i64, @intCast(__it5));
        if (is_safe(grid_2, row_1, column_1, digit)) {
            grid_2[@as(usize, @intCast(row_1))][@as(usize, @intCast(column_1))] = digit;
            if (sudoku(grid_2)) {
                return true;
            }
            grid_2[@as(usize, @intCast(row_1))][@as(usize, @intCast(column_1))] = 0;
        }
    }
    return false;
}

fn print_solution(grid_3: [][]i64) void {
    for (@as(usize, @intCast(0))..@as(usize, @intCast(@as(i64, @intCast(grid_3.len))))) |__it6| {
        const r: i64 = @as(i64, @intCast(__it6));
        var line: []const u8 = "";
        for (@as(usize, @intCast(0))..@as(usize, @intCast(@as(i64, @intCast(grid_3[@as(usize, @intCast(r))].len))))) |__it7| {
            const c: i64 = @as(i64, @intCast(__it7));
            line = _concat_string(line, _str(grid_3[@as(usize, @intCast(r))][@as(usize, @intCast(c))]));
            if (c < @as(i64, @intCast(grid_3[@as(usize, @intCast(r))].len)) - 1) {
                line = _concat_string(line, " ");
            }
        }
        std.debug.print("{s}\n", .{_str(line)});
    }
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        initial_grid_var = blk1: { var _tmp1 = std.heap.page_allocator.alloc([]i64, 9) catch unreachable; _tmp1[0] = blk2: { var _tmp2 = std.heap.page_allocator.alloc(i64, 9) catch unreachable; _tmp2[0] = 3; _tmp2[1] = 0; _tmp2[2] = 6; _tmp2[3] = 5; _tmp2[4] = 0; _tmp2[5] = 8; _tmp2[6] = 4; _tmp2[7] = 0; _tmp2[8] = 0; break :blk2 _tmp2; }; _tmp1[1] = blk3: { var _tmp3 = std.heap.page_allocator.alloc(i64, 9) catch unreachable; _tmp3[0] = 5; _tmp3[1] = 2; _tmp3[2] = 0; _tmp3[3] = 0; _tmp3[4] = 0; _tmp3[5] = 0; _tmp3[6] = 0; _tmp3[7] = 0; _tmp3[8] = 0; break :blk3 _tmp3; }; _tmp1[2] = blk4: { var _tmp4 = std.heap.page_allocator.alloc(i64, 9) catch unreachable; _tmp4[0] = 0; _tmp4[1] = 8; _tmp4[2] = 7; _tmp4[3] = 0; _tmp4[4] = 0; _tmp4[5] = 0; _tmp4[6] = 0; _tmp4[7] = 3; _tmp4[8] = 1; break :blk4 _tmp4; }; _tmp1[3] = blk5: { var _tmp5 = std.heap.page_allocator.alloc(i64, 9) catch unreachable; _tmp5[0] = 0; _tmp5[1] = 0; _tmp5[2] = 3; _tmp5[3] = 0; _tmp5[4] = 1; _tmp5[5] = 0; _tmp5[6] = 0; _tmp5[7] = 8; _tmp5[8] = 0; break :blk5 _tmp5; }; _tmp1[4] = blk6: { var _tmp6 = std.heap.page_allocator.alloc(i64, 9) catch unreachable; _tmp6[0] = 9; _tmp6[1] = 0; _tmp6[2] = 0; _tmp6[3] = 8; _tmp6[4] = 6; _tmp6[5] = 3; _tmp6[6] = 0; _tmp6[7] = 0; _tmp6[8] = 5; break :blk6 _tmp6; }; _tmp1[5] = blk7: { var _tmp7 = std.heap.page_allocator.alloc(i64, 9) catch unreachable; _tmp7[0] = 0; _tmp7[1] = 5; _tmp7[2] = 0; _tmp7[3] = 0; _tmp7[4] = 9; _tmp7[5] = 0; _tmp7[6] = 6; _tmp7[7] = 0; _tmp7[8] = 0; break :blk7 _tmp7; }; _tmp1[6] = blk8: { var _tmp8 = std.heap.page_allocator.alloc(i64, 9) catch unreachable; _tmp8[0] = 1; _tmp8[1] = 3; _tmp8[2] = 0; _tmp8[3] = 0; _tmp8[4] = 0; _tmp8[5] = 0; _tmp8[6] = 2; _tmp8[7] = 5; _tmp8[8] = 0; break :blk8 _tmp8; }; _tmp1[7] = blk9: { var _tmp9 = std.heap.page_allocator.alloc(i64, 9) catch unreachable; _tmp9[0] = 0; _tmp9[1] = 0; _tmp9[2] = 0; _tmp9[3] = 0; _tmp9[4] = 0; _tmp9[5] = 0; _tmp9[6] = 0; _tmp9[7] = 7; _tmp9[8] = 4; break :blk9 _tmp9; }; _tmp1[8] = blk10: { var _tmp10 = std.heap.page_allocator.alloc(i64, 9) catch unreachable; _tmp10[0] = 0; _tmp10[1] = 0; _tmp10[2] = 5; _tmp10[3] = 2; _tmp10[4] = 0; _tmp10[5] = 6; _tmp10[6] = 3; _tmp10[7] = 0; _tmp10[8] = 0; break :blk10 _tmp10; }; break :blk1 _tmp1; };
        no_solution_var = blk11: { var _tmp11 = std.heap.page_allocator.alloc([]i64, 9) catch unreachable; _tmp11[0] = blk12: { var _tmp12 = std.heap.page_allocator.alloc(i64, 9) catch unreachable; _tmp12[0] = 5; _tmp12[1] = 0; _tmp12[2] = 6; _tmp12[3] = 5; _tmp12[4] = 0; _tmp12[5] = 8; _tmp12[6] = 4; _tmp12[7] = 0; _tmp12[8] = 3; break :blk12 _tmp12; }; _tmp11[1] = blk13: { var _tmp13 = std.heap.page_allocator.alloc(i64, 9) catch unreachable; _tmp13[0] = 5; _tmp13[1] = 2; _tmp13[2] = 0; _tmp13[3] = 0; _tmp13[4] = 0; _tmp13[5] = 0; _tmp13[6] = 0; _tmp13[7] = 0; _tmp13[8] = 2; break :blk13 _tmp13; }; _tmp11[2] = blk14: { var _tmp14 = std.heap.page_allocator.alloc(i64, 9) catch unreachable; _tmp14[0] = 1; _tmp14[1] = 8; _tmp14[2] = 7; _tmp14[3] = 0; _tmp14[4] = 0; _tmp14[5] = 0; _tmp14[6] = 0; _tmp14[7] = 3; _tmp14[8] = 1; break :blk14 _tmp14; }; _tmp11[3] = blk15: { var _tmp15 = std.heap.page_allocator.alloc(i64, 9) catch unreachable; _tmp15[0] = 0; _tmp15[1] = 0; _tmp15[2] = 3; _tmp15[3] = 0; _tmp15[4] = 1; _tmp15[5] = 0; _tmp15[6] = 0; _tmp15[7] = 8; _tmp15[8] = 0; break :blk15 _tmp15; }; _tmp11[4] = blk16: { var _tmp16 = std.heap.page_allocator.alloc(i64, 9) catch unreachable; _tmp16[0] = 9; _tmp16[1] = 0; _tmp16[2] = 0; _tmp16[3] = 8; _tmp16[4] = 6; _tmp16[5] = 3; _tmp16[6] = 0; _tmp16[7] = 0; _tmp16[8] = 5; break :blk16 _tmp16; }; _tmp11[5] = blk17: { var _tmp17 = std.heap.page_allocator.alloc(i64, 9) catch unreachable; _tmp17[0] = 0; _tmp17[1] = 5; _tmp17[2] = 0; _tmp17[3] = 0; _tmp17[4] = 9; _tmp17[5] = 0; _tmp17[6] = 6; _tmp17[7] = 0; _tmp17[8] = 0; break :blk17 _tmp17; }; _tmp11[6] = blk18: { var _tmp18 = std.heap.page_allocator.alloc(i64, 9) catch unreachable; _tmp18[0] = 1; _tmp18[1] = 3; _tmp18[2] = 0; _tmp18[3] = 0; _tmp18[4] = 0; _tmp18[5] = 0; _tmp18[6] = 2; _tmp18[7] = 5; _tmp18[8] = 0; break :blk18 _tmp18; }; _tmp11[7] = blk19: { var _tmp19 = std.heap.page_allocator.alloc(i64, 9) catch unreachable; _tmp19[0] = 0; _tmp19[1] = 0; _tmp19[2] = 0; _tmp19[3] = 0; _tmp19[4] = 0; _tmp19[5] = 0; _tmp19[6] = 0; _tmp19[7] = 7; _tmp19[8] = 4; break :blk19 _tmp19; }; _tmp11[8] = blk20: { var _tmp20 = std.heap.page_allocator.alloc(i64, 9) catch unreachable; _tmp20[0] = 0; _tmp20[1] = 0; _tmp20[2] = 5; _tmp20[3] = 2; _tmp20[4] = 0; _tmp20[5] = 6; _tmp20[6] = 3; _tmp20[7] = 0; _tmp20[8] = 0; break :blk20 _tmp20; }; break :blk11 _tmp11; };
        examples_var = blk21: { var _tmp21 = std.heap.page_allocator.alloc([][]i64, 2) catch unreachable; _tmp21[0] = initial_grid_var; _tmp21[1] = no_solution_var; break :blk21 _tmp21; };
        while (idx_var < @as(i64, @intCast(examples_var.len))) {
            std.debug.print("{s}\n", .{"\nExample grid:\n===================="});
            print_solution(examples_var[@as(usize, @intCast(idx_var))]);
            std.debug.print("{s}\n", .{"\nExample grid solution:"});
            if (sudoku(examples_var[@as(usize, @intCast(idx_var))])) {
                print_solution(examples_var[@as(usize, @intCast(idx_var))]);
            } else {
                std.debug.print("{s}\n", .{"Cannot find a solution."});
            }
            idx_var = idx_var + 1;
        }
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    if (info == .Pointer and info.Pointer.size == .Slice) {
        var out = std.ArrayList(u8).init(std.heap.page_allocator);
        defer out.deinit();
        out.append('[') catch unreachable;
        for (v, 0..) |e, i| {
            if (i != 0) { out.append(' ') catch unreachable; }
            const s = _str(e);
            out.appendSlice(s) catch unreachable;
        }
        out.append(']') catch unreachable;
        return out.toOwnedSlice() catch unreachable;
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * std.mem.page_size;
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
