// Generated by Mochi Zig transpiler on 2025-08-14 22:13 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const Pos = struct {
    y: i64,
    x: i64,
};

const Node = struct {
    pos_x: i64,
    pos_y: i64,
    goal_x: i64,
    goal_y: i64,
    g_cost: i64,
    f_cost: i64,
    path: []Pos,
};

var delta_var: []Pos = &[_]Pos{};
const TEST_GRIDS_var: [][][]i64 = @constCast(([3][][]i64{@constCast(([7][]i64{@constCast(([7]i64{0, 0, 0, 0, 0, 0, 0})[0..7]), @constCast(([7]i64{0, 1, 0, 0, 0, 0, 0})[0..7]), @constCast(([7]i64{0, 0, 0, 0, 0, 0, 0})[0..7]), @constCast(([7]i64{0, 0, 1, 0, 0, 0, 0})[0..7]), @constCast(([7]i64{1, 0, 1, 0, 0, 0, 0})[0..7]), @constCast(([7]i64{0, 0, 0, 0, 0, 0, 0})[0..7]), @constCast(([7]i64{0, 0, 0, 0, 1, 0, 0})[0..7])})[0..7]), @constCast(([6][]i64{@constCast(([7]i64{0, 0, 0, 1, 1, 0, 0})[0..7]), @constCast(([7]i64{0, 0, 0, 0, 1, 0, 1})[0..7]), @constCast(([7]i64{0, 0, 0, 1, 1, 0, 0})[0..7]), @constCast(([7]i64{0, 1, 0, 0, 1, 0, 0})[0..7]), @constCast(([7]i64{1, 0, 0, 1, 1, 0, 1})[0..7]), @constCast(([7]i64{0, 0, 0, 0, 0, 0, 0})[0..7])})[0..6]), @constCast(([5][]i64{@constCast(([5]i64{0, 0, 1, 0, 0})[0..5]), @constCast(([5]i64{0, 1, 0, 0, 0})[0..5]), @constCast(([5]i64{0, 0, 1, 0, 1})[0..5]), @constCast(([5]i64{1, 0, 0, 1, 1})[0..5]), @constCast(([5]i64{0, 0, 0, 0, 0})[0..5])})[0..5])})[0..3]);

fn abs(x: i64) i64 {
    if (x < 0) {
        return 0 - x;
    }
    return x;
}

fn manhattan(x1: i64, y1: i64, x2: i64, y2: i64) i64 {
    return abs(x1 - x2) + abs(y1 - y2);
}

fn clone_path(p: []Pos) []Pos {
    var res: []Pos = std.heap.page_allocator.alloc(Pos, 0) catch unreachable;
    res = res;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(p.len))) {
        res = blk: { var _tmp = std.ArrayList(Pos).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const Pos, res)) catch |err| handleError(err); _tmp.append(p[_idx(p.len, i)]) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    return res;
}

fn make_node(pos_x: i64, pos_y: i64, goal_x: i64, goal_y: i64, g_cost: i64, path: []Pos) Node {
    const f: i64 = manhattan(pos_x, pos_y, goal_x, goal_y);
    return .{ .pos_x = pos_x, .pos_y = pos_y, .goal_x = goal_x, .goal_y = goal_y, .g_cost = g_cost, .f_cost = f, .path = path };
}

fn node_equal(a: Node, b: Node) bool {
    return a.pos_x == b.pos_x and a.pos_y == b.pos_y;
}

fn contains(nodes: []Node, node: Node) bool {
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(nodes.len))) {
        if (node_equal(nodes[_idx(nodes.len, i)], node)) {
            return true;
        }
        i = i + 1;
    }
    return false;
}

fn sort_nodes(nodes: []Node) []Node {
    var arr: []Node = blk: { const tmp = std.heap.page_allocator.alloc(Node, nodes.len) catch unreachable; @memcpy(tmp, nodes); break :blk tmp; };
    arr = arr;
    var i: i64 = 1;
    i = i;
    while (i < @as(i64, @intCast(arr.len))) {
        const key_node: Node = arr[_idx(arr.len, i)];
        var j: i64 = i - 1;
        j = j;
        while (j >= 0) {
            const temp: Node = arr[_idx(arr.len, j)];
            if (temp.f_cost > key_node.f_cost) {
                arr[_idx(arr.len, j + 1)] = temp;
                j = j - 1;
            } else {
                break;
            }
        }
        arr[_idx(arr.len, j + 1)] = key_node;
        i = i + 1;
    }
    return arr;
}

fn get_successors(grid: [][]i64, parent: Node, target: Pos) []Node {
    var res: []Node = std.heap.page_allocator.alloc(Node, 0) catch unreachable;
    res = res;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(delta_var.len))) {
        const d: Pos = delta_var[_idx(delta_var.len, i)];
        const pos_x: i64 = parent.pos_x + d.x;
        const pos_y: i64 = parent.pos_y + d.y;
        if (pos_x >= 0 and pos_x < @as(i64, @intCast(grid[_idx(grid.len, 0)].len)) and pos_y >= 0 and pos_y < @as(i64, @intCast(grid.len)) and grid[_idx(grid.len, pos_y)][_idx(grid[_idx(grid.len, pos_y)].len, pos_x)] == 0) {
            var new_path: []Pos = clone_path(parent.path);
            new_path = new_path;
            new_path = blk: { var _tmp_1 = std.ArrayList(Pos).init(std.heap.page_allocator); _tmp_1.appendSlice(@as([]const Pos, new_path)) catch |err| handleError(err); _tmp_1.append(.{ .y = pos_y, .x = pos_x }) catch |err| handleError(err); break :blk (_tmp_1.toOwnedSlice() catch |err| handleError(err)); };
            res = blk: { var _tmp_2 = std.ArrayList(Node).init(std.heap.page_allocator); _tmp_2.appendSlice(@as([]const Node, res)) catch |err| handleError(err); _tmp_2.append(make_node(pos_x, pos_y, target.x, target.y, parent.g_cost + 1, new_path)) catch |err| handleError(err); break :blk (_tmp_2.toOwnedSlice() catch |err| handleError(err)); };
        }
        i = i + 1;
    }
    return res;
}

fn greedy_best_first(grid: [][]i64, init: Pos, goal: Pos) []Pos {
    const start_path: []Pos = blk0: { var _tmp_3 = std.ArrayList(Pos).init(std.heap.page_allocator); _tmp_3.append(init) catch unreachable; break :blk0 (_tmp_3.toOwnedSlice() catch unreachable); };
    const start: Node = make_node(init.x, init.y, goal.x, goal.y, 0, start_path);
    var open_nodes: []Node = blk1: { var _tmp_4 = std.ArrayList(Node).init(std.heap.page_allocator); _tmp_4.append(start) catch unreachable; break :blk1 (_tmp_4.toOwnedSlice() catch unreachable); };
    open_nodes = open_nodes;
    var closed_nodes: []Node = std.heap.page_allocator.alloc(Node, 0) catch unreachable;
    closed_nodes = closed_nodes;
    while (@as(i64, @intCast(open_nodes.len)) > 0) {
        open_nodes = sort_nodes(open_nodes);
        const current: Node = open_nodes[_idx(open_nodes.len, 0)];
        var new_open: []Node = std.heap.page_allocator.alloc(Node, 0) catch unreachable;
        new_open = new_open;
        var idx: i64 = 1;
        idx = idx;
        while (idx < @as(i64, @intCast(open_nodes.len))) {
            new_open = blk: { var _tmp_5 = std.ArrayList(Node).init(std.heap.page_allocator); _tmp_5.appendSlice(@as([]const Node, new_open)) catch |err| handleError(err); _tmp_5.append(open_nodes[_idx(open_nodes.len, idx)]) catch |err| handleError(err); break :blk (_tmp_5.toOwnedSlice() catch |err| handleError(err)); };
            idx = idx + 1;
        }
        open_nodes = new_open;
        if (current.pos_x == goal.x and current.pos_y == goal.y) {
            return current.path;
        }
        closed_nodes = blk: { var _tmp_6 = std.ArrayList(Node).init(std.heap.page_allocator); _tmp_6.appendSlice(@as([]const Node, closed_nodes)) catch |err| handleError(err); _tmp_6.append(current) catch |err| handleError(err); break :blk (_tmp_6.toOwnedSlice() catch |err| handleError(err)); };
        const successors: []Node = get_successors(grid, current, goal);
        var i: i64 = 0;
        i = i;
        while (i < @as(i64, @intCast(successors.len))) {
            const child: Node = successors[_idx(successors.len, i)];
            if (!(contains(closed_nodes, child)) and !(contains(open_nodes, child))) {
                open_nodes = blk: { var _tmp_7 = std.ArrayList(Node).init(std.heap.page_allocator); _tmp_7.appendSlice(@as([]const Node, open_nodes)) catch |err| handleError(err); _tmp_7.append(child) catch |err| handleError(err); break :blk (_tmp_7.toOwnedSlice() catch |err| handleError(err)); };
            }
            i = i + 1;
        }
    }
    const r: []Pos = blk2: { var _tmp_8 = std.ArrayList(Pos).init(std.heap.page_allocator); _tmp_8.append(init) catch unreachable; break :blk2 (_tmp_8.toOwnedSlice() catch unreachable); };
    return r;
}

fn print_grid(grid: [][]i64) void {
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(grid.len))) {
        std.debug.print("{s}\n", .{_str(grid[_idx(grid.len, i)])});
        i = i + 1;
    }
}

fn mochi_main() void {
    var idx: i64 = 0;
    idx = idx;
    while (idx < @as(i64, @intCast(TEST_GRIDS_var.len))) {
        std.debug.print("{s}\n", .{_concat_string(_concat_string("==grid-", _str(idx + 1)), "==")});
        var grid: [][]i64 = TEST_GRIDS_var[_idx(TEST_GRIDS_var.len, idx)];
        grid = grid;
        const init: Pos = .{ .y = 0, .x = 0 };
        const goal: Pos = .{ .y = @as(i64, @intCast(grid.len)) - 1, .x = @as(i64, @intCast(grid[_idx(grid.len, 0)].len)) - 1 };
        print_grid(grid);
        std.debug.print("{s}\n", .{"------"});
        const path: []Pos = greedy_best_first(grid, init, goal);
        var j: i64 = 0;
        j = j;
        while (j < @as(i64, @intCast(path.len))) {
            const p: Pos = path[_idx(path.len, j)];
            grid[_idx(grid.len, p.y)][_idx(grid[_idx(grid.len, p.y)].len, p.x)] = 2;
            j = j + 1;
        }
        print_grid(grid);
        idx = idx + 1;
    }
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        delta_var = blk3: { var _tmp_9 = std.ArrayList(Pos).init(std.heap.page_allocator); _tmp_9.append(.{ .y = 0 - 1, .x = 0 }) catch unreachable; _tmp_9.append(.{ .y = 0, .x = 0 - 1 }) catch unreachable; _tmp_9.append(.{ .y = 1, .x = 0 }) catch unreachable; _tmp_9.append(.{ .y = 0, .x = 1 }) catch unreachable; break :blk3 (_tmp_9.toOwnedSlice() catch unreachable); };
        mochi_main();
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .pointer => |p| {
        if (p.size == .slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .@"struct" => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.heap.pageSize()));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
