// Generated by Mochi Zig transpiler on 2025-08-14 22:13 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const edges1_var: [][]i64 = @constCast(([3][]i64{@constCast(([3]i64{0, 1, 3})[0..3]), @constCast(([3]i64{1, 2, 5})[0..3]), @constCast(([3]i64{2, 3, 1})[0..3])})[0..3]);
const edges2_var: [][]i64 = @constCast(([5][]i64{@constCast(([3]i64{0, 1, 3})[0..3]), @constCast(([3]i64{1, 2, 5})[0..3]), @constCast(([3]i64{2, 3, 1})[0..3]), @constCast(([3]i64{0, 2, 1})[0..3]), @constCast(([3]i64{0, 3, 2})[0..3])})[0..5]);
const edges3_var: [][]i64 = @constCast(([6][]i64{@constCast(([3]i64{0, 1, 3})[0..3]), @constCast(([3]i64{1, 2, 5})[0..3]), @constCast(([3]i64{2, 3, 1})[0..3]), @constCast(([3]i64{0, 2, 1})[0..3]), @constCast(([3]i64{0, 3, 2})[0..3]), @constCast(([3]i64{2, 1, 1})[0..3])})[0..6]);

fn sort_edges(edges: [][]i64) [][]i64 {
    var es: [][]i64 = blk: { const tmp = std.heap.page_allocator.alloc([]i64, edges.len) catch unreachable; @memcpy(tmp, edges); break :blk tmp; };
    es = es;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(es.len))) {
        var j: i64 = 0;
        j = j;
        while (j < @as(i64, @intCast(es.len)) - i - 1) {
            if (es[_idx(es.len, j)][_idx(es[_idx(es.len, j)].len, 2)] > es[_idx(es.len, j + 1)][_idx(es[_idx(es.len, j + 1)].len, 2)]) {
                const temp: []i64 = es[_idx(es.len, j)];
                es[_idx(es.len, j)] = es[_idx(es.len, j + 1)];
                es[_idx(es.len, j + 1)] = temp;
            }
            j = j + 1;
        }
        i = i + 1;
    }
    return es;
}

fn find_parent(parent_param: []i64, i: i64) i64 {
    var parent_var: []i64 = parent_param;
    parent_var = parent_var;
    if (parent_var[_idx(parent_var.len, i)] != i) {
        parent_var[_idx(parent_var.len, i)] = find_parent(parent_var, parent_var[_idx(parent_var.len, i)]);
    }
    return parent_var[_idx(parent_var.len, i)];
}

fn kruskal(num_nodes: i64, edges: [][]i64) [][]i64 {
    const es: [][]i64 = sort_edges(edges);
    var parent: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    parent = parent;
    var i: i64 = 0;
    i = i;
    while (i < num_nodes) {
        parent = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, parent)) catch |err| handleError(err); _tmp.append(i) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    var mst: [][]i64 = std.heap.page_allocator.alloc([]i64, 0) catch unreachable;
    mst = mst;
    var idx: i64 = 0;
    idx = idx;
    while (idx < @as(i64, @intCast(es.len))) {
        const e: []i64 = es[_idx(es.len, idx)];
        const pa: i64 = find_parent(parent, e[_idx(e.len, 0)]);
        const pb: i64 = find_parent(parent, e[_idx(e.len, 1)]);
        if (pa != pb) {
            mst = blk: { var _tmp_1 = std.ArrayList([]i64).init(std.heap.page_allocator); _tmp_1.appendSlice(@as([]const []i64, mst)) catch |err| handleError(err); _tmp_1.append(e) catch |err| handleError(err); break :blk (_tmp_1.toOwnedSlice() catch |err| handleError(err)); };
            parent[_idx(parent.len, pa)] = pb;
        }
        idx = idx + 1;
    }
    return mst;
}

fn edges_to_string(es: [][]i64) []const u8 {
    var s: []const u8 = "[";
    s = s;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(es.len))) {
        const e: []i64 = es[_idx(es.len, i)];
        s = _concat_string(_concat_string(_concat_string(_concat_string(_concat_string(_concat_string(_concat_string(s, "("), _str(e[_idx(e.len, 0)])), ", "), _str(e[_idx(e.len, 1)])), ", "), _str(e[_idx(e.len, 2)])), ")");
        if (i < @as(i64, @intCast(es.len)) - 1) {
            s = _concat_string(s, ", ");
        }
        i = i + 1;
    }
    s = _concat_string(s, "]");
    return s;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        std.debug.print("{s}\n", .{edges_to_string(kruskal(4, edges1_var))});
        std.debug.print("{s}\n", .{edges_to_string(kruskal(4, edges2_var))});
        std.debug.print("{s}\n", .{edges_to_string(kruskal(4, edges3_var))});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .pointer => |p| {
        if (p.size == .slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .@"struct" => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.heap.pageSize()));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
