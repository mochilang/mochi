// Generated by Mochi Zig transpiler on 2025-08-14 18:16 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const Graph = struct {
    graph: std.StringHashMap([][]const u8),
    parent: std.StringHashMap([]const u8),
    source: []const u8,
};

var graph_var: std.StringHashMap([][]const u8) = std.StringHashMap([][]const u8).init(std.heap.page_allocator);
var g_var_1: Graph = undefined;

fn newGraph(g_param: *const std.StringHashMap([][]const u8), s: []const u8) Graph {
    return .{ .graph = (g_param).*, .parent = std.StringHashMap([]const u8).init(std.heap.page_allocator), .source = s };
}

fn breath_first_search(g_param: *Graph) Graph {
    var parent: std.StringHashMap([]const u8) = g_param.parent;
    parent = parent;
    parent.put(g_param.source, g_param.source) catch unreachable;
    var queue: [][]const u8 = blk: { var _tmp = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp.append(g_param.source) catch unreachable; break :blk (_tmp.toOwnedSlice() catch unreachable); };
    queue = queue;
    var idx: i64 = 0;
    idx = idx;
    while (idx < @as(i64, @intCast(queue.len))) {
        const vertex: []const u8 = queue[_idx(queue.len, idx)];
        for (g_param.graph.get(vertex) orelse undefined) |__it0| {
            const adj = __it0;
            if (!(parent.contains(adj))) {
                parent.put(adj, vertex) catch unreachable;
                queue = blk: { var _tmp = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []const u8, queue)) catch |err| handleError(err); _tmp.append(@constCast(adj)) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            }
        }
        idx = idx + 1;
    }
    g_param.parent = parent;
    return g_param.*;
}

fn shortest_path(g_param: Graph, target: []const u8) []const u8 {
    if (std.mem.eql(u8, target, g_param.source)) {
        return g_param.source;
    }
    if (!(g_param.parent.contains(target))) {
        return _concat_string(_concat_string(_concat_string("No path from vertex: ", g_param.source), " to vertex: "), target);
    }
    const p: []const u8 = g_param.parent.get(target) orelse undefined;
    return _concat_string(_concat_string(shortest_path(g_param, p), "->"), target);
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        graph_var = blk0: { var m = std.StringHashMap([][]const u8).init(std.heap.page_allocator); m.put("A", @constCast(&([3][]const u8{"B", "C", "E"}))[0..]) catch unreachable; m.put("B", @constCast(&([3][]const u8{"A", "D", "E"}))[0..]) catch unreachable; m.put("C", @constCast(&([3][]const u8{"A", "F", "G"}))[0..]) catch unreachable; m.put("D", @constCast(&([1][]const u8{"B"}))[0..]) catch unreachable; m.put("E", @constCast(&([3][]const u8{"A", "B", "D"}))[0..]) catch unreachable; m.put("F", @constCast(&([1][]const u8{"C"}))[0..]) catch unreachable; m.put("G", @constCast(&([1][]const u8{"C"}))[0..]) catch unreachable; break :blk0 m; };
        g_var_1 = newGraph(&graph_var, "G");
        g_var_1 = breath_first_search(&g_var_1);
        std.debug.print("{s}\n", .{shortest_path(g_var_1, "D")});
        std.debug.print("{s}\n", .{shortest_path(g_var_1, "G")});
        std.debug.print("{s}\n", .{shortest_path(g_var_1, "Foo")});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.heap.pageSize()));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
