// Generated by Mochi Zig transpiler on 2025-08-14 22:13 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const EdgePair = struct {
    u: i64,
    v: i64,
};

const Neighbor = struct {
    node: i64,
    cost: i64,
};

fn prims_algorithm(adjacency: *const std.AutoHashMap(i64,[]Neighbor)) []EdgePair {
    var visited: std.AutoHashMap(i64,bool) = std.AutoHashMap(i64, bool).init(std.heap.page_allocator);
    visited = visited;
    visited.put(0, true) catch unreachable;
    var mst: []EdgePair = std.heap.page_allocator.alloc(EdgePair, 0) catch unreachable;
    mst = mst;
    var count: i64 = 1;
    count = count;
    var total: i64 = 0;
    total = total;
    var __mapit1 = adjacency.keyIterator();
    while (__mapit1.next()) |_| {
        total = total + 1;
    }
    while (count < total) {
        var best_u: i64 = 0;
        best_u = best_u;
        var best_v: i64 = 0;
        best_v = best_v;
        var best_cost: i64 = 2147483647;
        best_cost = best_cost;
        var __mapit3 = adjacency.keyIterator();
        while (__mapit3.next()) |__it2| {
            const u_str = __it2.*;
            const u: i64 = @as(i64, u_str);
            if (visited.get(u).?) {
                for (adjacency.get(u).?) |__it4| {
                    const n = __it4;
                    if (!(visited.get(n.node).?) and n.cost < best_cost) {
                        best_cost = n.cost;
                        best_u = u;
                        best_v = n.node;
                    }
                }
            }
        }
        visited.put(best_v, true) catch unreachable;
        mst = blk: { var _tmp = std.ArrayList(EdgePair).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const EdgePair, mst)) catch |err| handleError(err); _tmp.append(.{ .u = best_u, .v = best_v }) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        count = count + 1;
    }
    return mst;
}

fn test_prim_successful_result() bool {
    const edges: [][]i64 = @constCast(([14][]i64{@constCast(([3]i64{0, 1, 4})[0..3]), @constCast(([3]i64{0, 7, 8})[0..3]), @constCast(([3]i64{1, 2, 8})[0..3]), @constCast(([3]i64{7, 8, 7})[0..3]), @constCast(([3]i64{7, 6, 1})[0..3]), @constCast(([3]i64{2, 8, 2})[0..3]), @constCast(([3]i64{8, 6, 6})[0..3]), @constCast(([3]i64{2, 3, 7})[0..3]), @constCast(([3]i64{2, 5, 4})[0..3]), @constCast(([3]i64{6, 5, 2})[0..3]), @constCast(([3]i64{3, 5, 14})[0..3]), @constCast(([3]i64{3, 4, 9})[0..3]), @constCast(([3]i64{5, 4, 10})[0..3]), @constCast(([3]i64{1, 7, 11})[0..3])})[0..14]);
    var adjacency: std.AutoHashMap(i64,[]Neighbor) = std.AutoHashMap(i64, []Neighbor).init(std.heap.page_allocator);
    adjacency = adjacency;
    for (edges) |__it5| {
        const e = __it5;
        const u: i64 = e[_idx(e.len, 0)];
        const v: i64 = e[_idx(e.len, 1)];
        const w: i64 = e[_idx(e.len, 2)];
        if (!(adjacency.contains(u))) {
            adjacency.put(u, @constCast((&[_]i64{}))[0..]) catch unreachable;
        }
        if (!(adjacency.contains(v))) {
            adjacency.put(v, @constCast((&[_]i64{}))[0..]) catch unreachable;
        }
        adjacency.put(u, blk: { var _tmp_1 = std.ArrayList(Neighbor).init(std.heap.page_allocator); _tmp_1.appendSlice(@as([]const Neighbor, adjacency.get(u).?)) catch |err| handleError(err); _tmp_1.append(.{ .node = v, .cost = w }) catch |err| handleError(err); break :blk (_tmp_1.toOwnedSlice() catch |err| handleError(err)); }) catch unreachable;
        adjacency.put(v, blk: { var _tmp_2 = std.ArrayList(Neighbor).init(std.heap.page_allocator); _tmp_2.appendSlice(@as([]const Neighbor, adjacency.get(v).?)) catch |err| handleError(err); _tmp_2.append(.{ .node = u, .cost = w }) catch |err| handleError(err); break :blk (_tmp_2.toOwnedSlice() catch |err| handleError(err)); }) catch unreachable;
    }
    const result: []EdgePair = prims_algorithm(&adjacency);
    var seen: std.StringHashMap(bool) = std.StringHashMap(bool).init(std.heap.page_allocator);
    seen = seen;
    for (result) |__it6| {
        const e = __it6;
        const key1: []const u8 = _concat_string(_concat_string(_str(e.u), ","), _str(e.v));
        const key2: []const u8 = _concat_string(_concat_string(_str(e.v), ","), _str(e.u));
        seen.put(key1, true) catch unreachable;
        seen.put(key2, true) catch unreachable;
    }
    const expected: [][]i64 = @constCast(([8][]i64{@constCast(([3]i64{7, 6, 1})[0..3]), @constCast(([3]i64{2, 8, 2})[0..3]), @constCast(([3]i64{6, 5, 2})[0..3]), @constCast(([3]i64{0, 1, 4})[0..3]), @constCast(([3]i64{2, 5, 4})[0..3]), @constCast(([3]i64{2, 3, 7})[0..3]), @constCast(([3]i64{0, 7, 8})[0..3]), @constCast(([3]i64{3, 4, 9})[0..3])})[0..8]);
    for (expected) |__it7| {
        const ans = __it7;
        const key: []const u8 = _concat_string(_concat_string(_str(ans[_idx(ans.len, 0)]), ","), _str(ans[_idx(ans.len, 1)]));
        if (!(seen.get(key).?)) {
            return false;
        }
    }
    return true;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        std.debug.print("{s}\n", .{_str(test_prim_successful_result())});
        std.debug.print("{s}\n", .{_str(true)});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .pointer => |p| {
        if (p.size == .slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .@"struct" => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.heap.pageSize()));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
