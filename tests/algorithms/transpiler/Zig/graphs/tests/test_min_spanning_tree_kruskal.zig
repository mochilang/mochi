// Generated by Mochi Zig transpiler on 2025-08-14 22:13 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn sort_edges(edges: [][]i64) [][]i64 {
    var es: [][]i64 = blk: { const tmp = std.heap.page_allocator.alloc([]i64, edges.len) catch unreachable; @memcpy(tmp, edges); break :blk tmp; };
    es = es;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(es.len))) {
        var j: i64 = 0;
        j = j;
        while (j < @as(i64, @intCast(es.len)) - i - 1) {
            if (es[_idx(es.len, j)][_idx(es[_idx(es.len, j)].len, 2)] > es[_idx(es.len, j + 1)][_idx(es[_idx(es.len, j + 1)].len, 2)]) {
                const tmp: []i64 = es[_idx(es.len, j)];
                es[_idx(es.len, j)] = es[_idx(es.len, j + 1)];
                es[_idx(es.len, j + 1)] = tmp;
            }
            j = j + 1;
        }
        i = i + 1;
    }
    return es;
}

fn find(parent: []i64, x: i64) i64 {
    var r: i64 = x;
    r = r;
    while (parent[_idx(parent.len, r)] != r) {
        r = parent[_idx(parent.len, r)];
    }
    return r;
}

fn kruskal(n: i64, edges: [][]i64) [][]i64 {
    var parent: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    parent = parent;
    var i: i64 = 0;
    i = i;
    while (i < n) {
        parent = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, parent)) catch |err| handleError(err); _tmp.append(i) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    const sorted: [][]i64 = sort_edges(edges);
    var mst: [][]i64 = std.heap.page_allocator.alloc([]i64, 0) catch unreachable;
    mst = mst;
    var e: i64 = 0;
    e = e;
    while (e < @as(i64, @intCast(sorted.len))) {
        if (@as(i64, @intCast(mst.len)) == n - 1) {
            break;
        }
        const edge: []i64 = sorted[_idx(sorted.len, e)];
        e = e + 1;
        const u: i64 = edge[_idx(edge.len, 0)];
        const v: i64 = edge[_idx(edge.len, 1)];
        const w: i64 = edge[_idx(edge.len, 2)];
        const ru: i64 = find(parent, u);
        const rv: i64 = find(parent, v);
        if (ru != rv) {
            parent[_idx(parent.len, ru)] = rv;
            mst = blk: { var _tmp_1 = std.ArrayList([]i64).init(std.heap.page_allocator); _tmp_1.appendSlice(@as([]const []i64, mst)) catch |err| handleError(err); _tmp_1.append(@constCast(blk0: { var _tmp_2 = std.ArrayList(i64).init(std.heap.page_allocator); _tmp_2.append(u) catch unreachable; _tmp_2.append(v) catch unreachable; _tmp_2.append(w) catch unreachable; break :blk0 (_tmp_2.toOwnedSlice() catch unreachable); })) catch |err| handleError(err); break :blk (_tmp_1.toOwnedSlice() catch |err| handleError(err)); };
        }
    }
    return mst;
}

fn edges_equal(a: [][]i64, b: [][]i64) bool {
    if (@as(i64, @intCast(a.len)) != @as(i64, @intCast(b.len))) {
        return false;
    }
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(a.len))) {
        const e1: []i64 = a[_idx(a.len, i)];
        const e2: []i64 = b[_idx(b.len, i)];
        if (e1[_idx(e1.len, 0)] != e2[_idx(e2.len, 0)] or e1[_idx(e1.len, 1)] != e2[_idx(e2.len, 1)] or e1[_idx(e1.len, 2)] != e2[_idx(e2.len, 2)]) {
            return false;
        }
        i = i + 1;
    }
    return true;
}

fn mochi_main() void {
    const num_nodes: i64 = 9;
    const edges: [][]i64 = @constCast(([14][]i64{@constCast(([3]i64{0, 1, 4})[0..3]), @constCast(([3]i64{0, 7, 8})[0..3]), @constCast(([3]i64{1, 2, 8})[0..3]), @constCast(([3]i64{7, 8, 7})[0..3]), @constCast(([3]i64{7, 6, 1})[0..3]), @constCast(([3]i64{2, 8, 2})[0..3]), @constCast(([3]i64{8, 6, 6})[0..3]), @constCast(([3]i64{2, 3, 7})[0..3]), @constCast(([3]i64{2, 5, 4})[0..3]), @constCast(([3]i64{6, 5, 2})[0..3]), @constCast(([3]i64{3, 5, 14})[0..3]), @constCast(([3]i64{3, 4, 9})[0..3]), @constCast(([3]i64{5, 4, 10})[0..3]), @constCast(([3]i64{1, 7, 11})[0..3])})[0..14]);
    const expected: [][]i64 = @constCast(([8][]i64{@constCast(([3]i64{7, 6, 1})[0..3]), @constCast(([3]i64{2, 8, 2})[0..3]), @constCast(([3]i64{6, 5, 2})[0..3]), @constCast(([3]i64{0, 1, 4})[0..3]), @constCast(([3]i64{2, 5, 4})[0..3]), @constCast(([3]i64{2, 3, 7})[0..3]), @constCast(([3]i64{0, 7, 8})[0..3]), @constCast(([3]i64{3, 4, 9})[0..3])})[0..8]);
    const result: [][]i64 = kruskal(num_nodes, edges);
    const sorted_result: [][]i64 = sort_edges(result);
    const sorted_expected: [][]i64 = sort_edges(expected);
    std.debug.print("{s}\n", .{_str(sorted_result)});
    if (edges_equal(sorted_expected, sorted_result)) {
        std.debug.print("{s}\n", .{_str(true)});
    } else {
        std.debug.print("{s}\n", .{_str(false)});
    }
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        mochi_main();
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .pointer => |p| {
        if (p.size == .slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .@"struct" => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.heap.pageSize()));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
