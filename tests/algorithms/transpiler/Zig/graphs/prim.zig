// Generated by Mochi Zig transpiler on 2025-08-14 22:13 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const INF_var: i64 = 1000000000;

fn connect(graph: *const std.AutoHashMap(i64,[][]i64), a: i64, b: i64, w: i64) std.AutoHashMap(i64,[][]i64) {
    var u: i64 = a - 1;
    u = u;
    const v: i64 = b - 1;
    var g: std.AutoHashMap(i64,[][]i64) = graph.*;
    g = g;
    g.put(u, blk: { var _tmp = std.ArrayList([]i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []i64, g.get(u).?)) catch |err| handleError(err); _tmp.append(@constCast(blk0: { var _tmp_1 = std.ArrayList(i64).init(std.heap.page_allocator); _tmp_1.append(v) catch unreachable; _tmp_1.append(w) catch unreachable; break :blk0 (_tmp_1.toOwnedSlice() catch unreachable); })) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); }) catch unreachable;
    g.put(v, blk: { var _tmp_2 = std.ArrayList([]i64).init(std.heap.page_allocator); _tmp_2.appendSlice(@as([]const []i64, g.get(v).?)) catch |err| handleError(err); _tmp_2.append(@constCast(blk1: { var _tmp_3 = std.ArrayList(i64).init(std.heap.page_allocator); _tmp_3.append(u) catch unreachable; _tmp_3.append(w) catch unreachable; break :blk1 (_tmp_3.toOwnedSlice() catch unreachable); })) catch |err| handleError(err); break :blk (_tmp_2.toOwnedSlice() catch |err| handleError(err)); }) catch unreachable;
    return g;
}

fn in_list(arr: []i64, x: i64) bool {
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(arr.len))) {
        if (arr[_idx(arr.len, i)] == x) {
            return true;
        }
        i = i + 1;
    }
    return false;
}

fn prim(graph: *const std.AutoHashMap(i64,[][]i64), s: i64, n: i64) [][]i64 {
    var dist: std.AutoHashMap(i64,i64) = std.AutoHashMap(i64, i64).init(std.heap.page_allocator);
    dist = dist;
    var parent: std.AutoHashMap(i64,i64) = std.AutoHashMap(i64, i64).init(std.heap.page_allocator);
    parent = parent;
    dist.put(s, 0) catch unreachable;
    parent.put(s, 0 - 1) catch unreachable;
    var known: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    known = known;
    var keys: []i64 = blk2: { var _tmp_4 = std.ArrayList(i64).init(std.heap.page_allocator); _tmp_4.append(s) catch unreachable; break :blk2 (_tmp_4.toOwnedSlice() catch unreachable); };
    keys = keys;
    while (@as(i64, @intCast(known.len)) < n) {
        var mini: i64 = INF_var;
        mini = mini;
        var u: i64 = 0 - 1;
        u = u;
        var i: i64 = 0;
        i = i;
        while (i < @as(i64, @intCast(keys.len))) {
            const k: i64 = keys[_idx(keys.len, i)];
            const d: i64 = dist.get(k).?;
            if (!(in_list(known, k)) and d < mini) {
                mini = d;
                u = k;
            }
            i = i + 1;
        }
        known = blk: { var _tmp_5 = std.ArrayList(i64).init(std.heap.page_allocator); _tmp_5.appendSlice(@as([]const i64, known)) catch |err| handleError(err); _tmp_5.append(u) catch |err| handleError(err); break :blk (_tmp_5.toOwnedSlice() catch |err| handleError(err)); };
        for (graph.get(u).?) |__it0| {
            const e = __it0;
            const v: i64 = e[_idx(e.len, 0)];
            const w: i64 = e[_idx(e.len, 1)];
            if (!(in_list(keys, v))) {
                keys = blk: { var _tmp_6 = std.ArrayList(i64).init(std.heap.page_allocator); _tmp_6.appendSlice(@as([]const i64, keys)) catch |err| handleError(err); _tmp_6.append(v) catch |err| handleError(err); break :blk (_tmp_6.toOwnedSlice() catch |err| handleError(err)); };
            }
            const cur: i64 = if (dist.contains(v)) dist.get(v).? else INF_var;
            if (!(in_list(known, v)) and w < cur) {
                dist.put(v, w) catch unreachable;
                parent.put(v, u) catch unreachable;
            }
        }
    }
    var edges: [][]i64 = std.heap.page_allocator.alloc([]i64, 0) catch unreachable;
    edges = edges;
    var j: i64 = 0;
    j = j;
    while (j < @as(i64, @intCast(keys.len))) {
        const v: i64 = keys[_idx(keys.len, j)];
        if (v != s) {
            edges = blk: { var _tmp_7 = std.ArrayList([]i64).init(std.heap.page_allocator); _tmp_7.appendSlice(@as([]const []i64, edges)) catch |err| handleError(err); _tmp_7.append(@constCast(blk3: { var _tmp_8 = std.ArrayList(i64).init(std.heap.page_allocator); _tmp_8.append(v + 1) catch unreachable; _tmp_8.append(parent.get(v).? + 1) catch unreachable; break :blk3 (_tmp_8.toOwnedSlice() catch unreachable); })) catch |err| handleError(err); break :blk (_tmp_7.toOwnedSlice() catch |err| handleError(err)); };
        }
        j = j + 1;
    }
    return edges;
}

fn sort_heap(h: []i64, dist: *const std.AutoHashMap(i64,i64)) []i64 {
    var a: []i64 = blk: { const tmp = std.heap.page_allocator.alloc(i64, h.len) catch unreachable; @memcpy(tmp, h); break :blk tmp; };
    a = a;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(a.len))) {
        var j: i64 = 0;
        j = j;
        while (j < @as(i64, @intCast(a.len)) - i - 1) {
            const dj: i64 = if (dist.contains(a[_idx(a.len, j)])) dist.get(a[_idx(a.len, j)]).? else INF_var;
            const dj1: i64 = if (dist.contains(a[_idx(a.len, j + 1)])) dist.get(a[_idx(a.len, j + 1)]).? else INF_var;
            if (dj > dj1) {
                const t: i64 = a[_idx(a.len, j)];
                a[_idx(a.len, j)] = a[_idx(a.len, j + 1)];
                a[_idx(a.len, j + 1)] = t;
            }
            j = j + 1;
        }
        i = i + 1;
    }
    return a;
}

fn prim_heap(graph: *const std.AutoHashMap(i64,[][]i64), s: i64, n: i64) [][]i64 {
    var dist: std.AutoHashMap(i64,i64) = std.AutoHashMap(i64, i64).init(std.heap.page_allocator);
    dist = dist;
    var parent: std.AutoHashMap(i64,i64) = std.AutoHashMap(i64, i64).init(std.heap.page_allocator);
    parent = parent;
    dist.put(s, 0) catch unreachable;
    parent.put(s, 0 - 1) catch unreachable;
    var h: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    h = h;
    var i: i64 = 0;
    i = i;
    while (i < n) {
        h = blk: { var _tmp_9 = std.ArrayList(i64).init(std.heap.page_allocator); _tmp_9.appendSlice(@as([]const i64, h)) catch |err| handleError(err); _tmp_9.append(i) catch |err| handleError(err); break :blk (_tmp_9.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    h = sort_heap(h, &dist);
    var known: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    known = known;
    while (@as(i64, @intCast(h.len)) > 0) {
        var u: i64 = h[_idx(h.len, 0)];
        u = u;
        h = h[@as(usize, @intCast(1))..@min(@as(usize, @intCast(@as(i64, @intCast(h.len)))), @as(usize, @intCast(h.len)))];
        known = blk: { var _tmp_10 = std.ArrayList(i64).init(std.heap.page_allocator); _tmp_10.appendSlice(@as([]const i64, known)) catch |err| handleError(err); _tmp_10.append(u) catch |err| handleError(err); break :blk (_tmp_10.toOwnedSlice() catch |err| handleError(err)); };
        for (graph.get(u).?) |__it1| {
            const e = __it1;
            const v: i64 = e[_idx(e.len, 0)];
            const w: i64 = e[_idx(e.len, 1)];
            const cur: i64 = if (dist.contains(v)) dist.get(v).? else INF_var;
            if (!(in_list(known, v)) and w < cur) {
                dist.put(v, w) catch unreachable;
                parent.put(v, u) catch unreachable;
            }
        }
        h = sort_heap(h, &dist);
    }
    var edges: [][]i64 = std.heap.page_allocator.alloc([]i64, 0) catch unreachable;
    edges = edges;
    var j: i64 = 0;
    j = j;
    while (j < n) {
        if (j != s) {
            edges = blk: { var _tmp_11 = std.ArrayList([]i64).init(std.heap.page_allocator); _tmp_11.appendSlice(@as([]const []i64, edges)) catch |err| handleError(err); _tmp_11.append(@constCast(blk4: { var _tmp_12 = std.ArrayList(i64).init(std.heap.page_allocator); _tmp_12.append(j + 1) catch unreachable; _tmp_12.append(parent.get(j).? + 1) catch unreachable; break :blk4 (_tmp_12.toOwnedSlice() catch unreachable); })) catch |err| handleError(err); break :blk (_tmp_11.toOwnedSlice() catch |err| handleError(err)); };
        }
        j = j + 1;
    }
    return edges;
}

fn print_edges(edges: [][]i64) void {
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(edges.len))) {
        const e: []i64 = edges[_idx(edges.len, i)];
        std.debug.print("{s}\n", .{_concat_string(_concat_string(_concat_string(_concat_string("(", _str(e[_idx(e.len, 0)])), ", "), _str(e[_idx(e.len, 1)])), ")")});
        i = i + 1;
    }
}

fn test_vector() void {
    const x: i64 = 5;
    var G: std.AutoHashMap(i64,[][]i64) = std.AutoHashMap(i64, [][]i64).init(std.heap.page_allocator);
    G = G;
    var i: i64 = 0;
    i = i;
    while (i < x) {
        G.put(i, @constCast((&[_]i64{}))[0..]) catch unreachable;
        i = i + 1;
    }
    G = connect(&G, 1, 2, 15);
    G = connect(&G, 1, 3, 12);
    G = connect(&G, 2, 4, 13);
    G = connect(&G, 2, 5, 5);
    G = connect(&G, 3, 2, 6);
    G = connect(&G, 3, 4, 6);
    const mst: [][]i64 = prim(&G, 0, x);
    print_edges(mst);
    const mst_heap: [][]i64 = prim_heap(&G, 0, x);
    print_edges(mst_heap);
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        test_vector();
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .pointer => |p| {
        if (p.size == .slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .@"struct" => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.heap.pageSize()));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
