// Generated by Mochi Zig transpiler on 2025-08-14 22:13 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const Point = struct {
    x: i64,
    y: i64,
};

const Result = struct {
    distance: f64,
    path: []Point,
};

const grid1_var_1: [][]i64 = @constCast(([3][]i64{@constCast(([3]i64{1, 1, 1})[0..3]), @constCast(([3]i64{0, 1, 0})[0..3]), @constCast(([3]i64{0, 1, 1})[0..3])})[0..3]);
const grid2_var_1: [][]i64 = @constCast(([3][]i64{@constCast(([3]i64{1, 1, 1})[0..3]), @constCast(([3]i64{0, 0, 1})[0..3]), @constCast(([3]i64{0, 1, 1})[0..3])})[0..3]);

fn key(p: Point) []const u8 {
    return _concat_string(_concat_string(_str(p.x), ","), _str(p.y));
}

fn path_to_string(path: []Point) []const u8 {
    var s: []const u8 = "[";
    s = s;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(path.len))) {
        const pt: Point = path[_idx(path.len, i)];
        s = _concat_string(_concat_string(_concat_string(_concat_string(_concat_string(s, "("), _str(pt.x)), ", "), _str(pt.y)), ")");
        if (i < @as(i64, @intCast(path.len)) - 1) {
            s = _concat_string(s, ", ");
        }
        i = i + 1;
    }
    s = _concat_string(s, "]");
    return s;
}

fn dijkstra(grid: [][]i64, source: Point, destination: Point, allow_diagonal: bool) Result {
    const rows: i64 = @as(i64, @intCast(grid.len));
    const cols: i64 = @as(i64, @intCast(grid[_idx(grid.len, 0)].len));
    var dx: []i64 = blk0: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.append(0 - 1) catch unreachable; _tmp.append(1) catch unreachable; _tmp.append(0) catch unreachable; _tmp.append(0) catch unreachable; break :blk0 (_tmp.toOwnedSlice() catch unreachable); };
    dx = dx;
    var dy: []i64 = blk1: { var _tmp_1 = std.ArrayList(i64).init(std.heap.page_allocator); _tmp_1.append(0) catch unreachable; _tmp_1.append(0) catch unreachable; _tmp_1.append(0 - 1) catch unreachable; _tmp_1.append(1) catch unreachable; break :blk1 (_tmp_1.toOwnedSlice() catch unreachable); };
    dy = dy;
    if (allow_diagonal) {
        dx = blk: { var _tmp_2 = std.ArrayList(i64).init(std.heap.page_allocator); _tmp_2.appendSlice(@as([]const i64, dx)) catch |err| handleError(err); _tmp_2.appendSlice(@as([]const i64, blk2: { var _tmp_3 = std.ArrayList(i64).init(std.heap.page_allocator); _tmp_3.append(0 - 1) catch unreachable; _tmp_3.append(0 - 1) catch unreachable; _tmp_3.append(1) catch unreachable; _tmp_3.append(1) catch unreachable; break :blk2 (_tmp_3.toOwnedSlice() catch unreachable); })) catch |err| handleError(err); break :blk (_tmp_2.toOwnedSlice() catch |err| handleError(err)); };
        dy = blk: { var _tmp_4 = std.ArrayList(i64).init(std.heap.page_allocator); _tmp_4.appendSlice(@as([]const i64, dy)) catch |err| handleError(err); _tmp_4.appendSlice(@as([]const i64, blk3: { var _tmp_5 = std.ArrayList(i64).init(std.heap.page_allocator); _tmp_5.append(0 - 1) catch unreachable; _tmp_5.append(1) catch unreachable; _tmp_5.append(0 - 1) catch unreachable; _tmp_5.append(1) catch unreachable; break :blk3 (_tmp_5.toOwnedSlice() catch unreachable); })) catch |err| handleError(err); break :blk (_tmp_4.toOwnedSlice() catch |err| handleError(err)); };
    }
    const INF: f64 = 1000000000000.0;
    var queue: []Point = blk4: { var _tmp_6 = std.ArrayList(Point).init(std.heap.page_allocator); _tmp_6.append(source) catch unreachable; break :blk4 (_tmp_6.toOwnedSlice() catch unreachable); };
    queue = queue;
    var front: i64 = 0;
    front = front;
    var dist_map: std.StringHashMap(f64) = blk5: { var m = std.StringHashMap(f64).init(std.heap.page_allocator); m.put(key(source), 0.0) catch unreachable; break :blk5 m; };
    dist_map = dist_map;
    var prev: std.StringHashMap(Point) = std.StringHashMap(Point).init(std.heap.page_allocator);
    prev = prev;
    while (front < @as(i64, @intCast(queue.len))) {
        const current: Point = queue[_idx(queue.len, front)];
        front = front + 1;
        const cur_key: []const u8 = key(current);
        if (current.x == destination.x and current.y == destination.y) {
            break;
        }
        var i: i64 = 0;
        i = i;
        while (i < @as(i64, @intCast(dx.len))) {
            const nx: i64 = current.x + dx[_idx(dx.len, i)];
            const ny: i64 = current.y + dy[_idx(dy.len, i)];
            if (nx >= 0 and nx < rows and ny >= 0 and ny < cols) {
                if (grid[_idx(grid.len, nx)][_idx(grid[_idx(grid.len, nx)].len, ny)] == 1) {
                    const n_key: []const u8 = _concat_string(_concat_string(_str(nx), ","), _str(ny));
                    if (!(dist_map.contains(n_key))) {
                        dist_map.put(n_key, dist_map.get(cur_key).? + 1.0) catch unreachable;
                        prev.put(n_key, current) catch unreachable;
                        queue = blk: { var _tmp_7 = std.ArrayList(Point).init(std.heap.page_allocator); _tmp_7.appendSlice(@as([]const Point, queue)) catch |err| handleError(err); _tmp_7.append(.{ .x = nx, .y = ny }) catch |err| handleError(err); break :blk (_tmp_7.toOwnedSlice() catch |err| handleError(err)); };
                    }
                }
            }
            i = i + 1;
        }
    }
    const dest_key: []const u8 = key(destination);
    if (dist_map.contains(dest_key)) {
        var path_rev: []Point = blk6: { var _tmp_8 = std.ArrayList(Point).init(std.heap.page_allocator); _tmp_8.append(destination) catch unreachable; break :blk6 (_tmp_8.toOwnedSlice() catch unreachable); };
        path_rev = path_rev;
        var step_key: []const u8 = blk: { const tmp = std.heap.page_allocator.alloc(u8, dest_key.len) catch unreachable; @memcpy(tmp, dest_key); break :blk tmp; };
        step_key = step_key;
        var step_pt: Point = destination;
        step_pt = step_pt;
        while (!std.mem.eql(u8, step_key, key(source))) {
            step_pt = prev.get(step_key).?;
            step_key = key(step_pt);
            path_rev = blk: { var _tmp_9 = std.ArrayList(Point).init(std.heap.page_allocator); _tmp_9.appendSlice(@as([]const Point, path_rev)) catch |err| handleError(err); _tmp_9.append(step_pt) catch |err| handleError(err); break :blk (_tmp_9.toOwnedSlice() catch |err| handleError(err)); };
        }
        var path: []Point = std.heap.page_allocator.alloc(Point, 0) catch unreachable;
        path = path;
        var k: i64 = @as(i64, @intCast(path_rev.len)) - 1;
        k = k;
        while (k >= 0) {
            path = blk: { var _tmp_10 = std.ArrayList(Point).init(std.heap.page_allocator); _tmp_10.appendSlice(@as([]const Point, path)) catch |err| handleError(err); _tmp_10.append(path_rev[_idx(path_rev.len, k)]) catch |err| handleError(err); break :blk (_tmp_10.toOwnedSlice() catch |err| handleError(err)); };
            k = k - 1;
        }
        return .{ .distance = dist_map.get(dest_key).?, .path = path };
    }
    return .{ .distance = INF, .path = (&[_]Point{})[0..0] };
}

fn print_result(res: Result) void {
    std.debug.print("{s}\n", .{_concat_string(_concat_string(_str(res.distance), ", "), path_to_string(res.path))});
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        print_result(dijkstra(grid1_var_1, .{ .x = 0, .y = 0 }, .{ .x = 2, .y = 2 }, false));
        print_result(dijkstra(grid1_var_1, .{ .x = 0, .y = 0 }, .{ .x = 2, .y = 2 }, true));
        print_result(dijkstra(grid2_var_1, .{ .x = 0, .y = 0 }, .{ .x = 2, .y = 2 }, false));
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .pointer => |p| {
        if (p.size == .slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .@"struct" => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.heap.pageSize()));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
