// Generated by Mochi Zig transpiler on 2025-08-14 22:13 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const Transition = struct {
    src: []const u8,
    dst: []const u8,
    prob: f64,
};

var seed_var_1: i64 = 1;

fn rand() i64 {
    seed_var_1 = @mod(seed_var_1 * 1103515245 + 12345, 2147483648);
    return seed_var_1;
}

fn random() f64 {
    return 1.0 * @as(f64, @floatFromInt(rand())) / 2147483648.0;
}

fn get_nodes(trans: []Transition) [][]const u8 {
    var seen: std.StringHashMap(bool) = std.StringHashMap(bool).init(std.heap.page_allocator);
    seen = seen;
    for (trans) |__it0| {
        const t = __it0;
        seen.put(t.src, true) catch unreachable;
        seen.put(t.dst, true) catch unreachable;
    }
    var nodes: [][]const u8 = std.heap.page_allocator.alloc([]const u8, 0) catch unreachable;
    nodes = nodes;
    for (blk: { var it = seen.keyIterator(); var arr = std.ArrayList([]const u8).init(std.heap.page_allocator); while (it.next()) |k| { arr.append(k.*) catch unreachable; } break :blk arr.toOwnedSlice() catch unreachable; }) |__it1| {
        const k = __it1;
        nodes = blk: { var _tmp = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []const u8, nodes)) catch |err| handleError(err); _tmp.append(k) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
    }
    return nodes;
}

fn transition(current: []const u8, trans: []Transition) []const u8 {
    var current_probability: f64 = 0.0;
    current_probability = current_probability;
    const random_value: f64 = random();
    for (trans) |__it2| {
        const t = __it2;
        if (std.mem.eql(u8, t.src, current)) {
            current_probability = current_probability + t.prob;
            if (current_probability > random_value) {
                return t.dst;
            }
        }
    }
    return "";
}

fn get_transitions(start: []const u8, trans: []Transition, steps: i64) std.StringHashMap(i64) {
    var visited: std.StringHashMap(i64) = std.StringHashMap(i64).init(std.heap.page_allocator);
    visited = visited;
    for (get_nodes(trans)) |__it3| {
        const node = __it3;
        const one: i64 = 1;
        visited.put(node, one) catch unreachable;
    }
    var node: []const u8 = blk: { const tmp = std.heap.page_allocator.alloc(u8, start.len) catch unreachable; @memcpy(tmp, start); break :blk tmp; };
    node = node;
    var i: i64 = 0;
    i = i;
    while (i < steps) {
        node = transition(node, trans);
        var count: i64 = visited.get(node).?;
        count = count;
        count = count + 1;
        visited.put(node, count) catch unreachable;
        i = i + 1;
    }
    return visited;
}

fn mochi_main() void {
    const transitions: []Transition = blk0: { var _tmp_1 = std.ArrayList(Transition).init(std.heap.page_allocator); _tmp_1.append(.{ .src = "a", .dst = "a", .prob = 0.9 }) catch unreachable; _tmp_1.append(.{ .src = "a", .dst = "b", .prob = 0.075 }) catch unreachable; _tmp_1.append(.{ .src = "a", .dst = "c", .prob = 0.025 }) catch unreachable; _tmp_1.append(.{ .src = "b", .dst = "a", .prob = 0.15 }) catch unreachable; _tmp_1.append(.{ .src = "b", .dst = "b", .prob = 0.8 }) catch unreachable; _tmp_1.append(.{ .src = "b", .dst = "c", .prob = 0.05 }) catch unreachable; _tmp_1.append(.{ .src = "c", .dst = "a", .prob = 0.25 }) catch unreachable; _tmp_1.append(.{ .src = "c", .dst = "b", .prob = 0.25 }) catch unreachable; _tmp_1.append(.{ .src = "c", .dst = "c", .prob = 0.5 }) catch unreachable; break :blk0 (_tmp_1.toOwnedSlice() catch unreachable); };
    const result: std.StringHashMap(i64) = get_transitions("a", transitions, 5000);
    std.debug.print("{s}\n", .{_concat_string(_concat_string(_concat_string(_concat_string(_str(result.get("a").?), " "), _str(result.get("b").?)), " "), _str(result.get("c").?))});
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        mochi_main();
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .pointer => |p| {
        if (p.size == .slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .@"struct" => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.heap.pageSize()));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
