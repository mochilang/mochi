// Generated by Mochi Zig transpiler on 2025-08-14 16:41 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const Pos = struct {
    y: i64,
    x: i64,
};

const Node = struct {
    pos: Pos,
    g_cost: i64,
    h_cost: f64,
    f_cost: f64,
    path: []Pos,
};

const HEURISTIC_var: i64 = 0;
var grid_var: [][]i64 = &[_][]i64{};
var delta_var: [][]i64 = &[_][]i64{};
var start_var: Pos = undefined;
var goal_var: Pos = undefined;
var path1_var: []Pos = &[_]Pos{};
var path2_var: []Pos = &[_]Pos{};

fn abs(x: i64) i64 {
    if (x < 0) {
        return 0 - x;
    }
    return x;
}

fn sqrtApprox(x: f64) f64 {
    if (x <= 0.0) {
        return 0.0;
    }
    var guess: f64 = x;
    guess = guess;
    var i: i64 = 0;
    i = i;
    while (i < 10) {
        guess = (guess + x / guess) / 2.0;
        i = i + 1;
    }
    return guess;
}

fn heuristic(a: Pos, b: Pos) f64 {
    const dy: i64 = a.y - b.y;
    const dx: i64 = a.x - b.x;
    if (HEURISTIC_var == 1) {
        return @as(f64, @floatFromInt(abs(dy) + abs(dx)));
    }
    const dyf: f64 = @as(f64, @floatFromInt(dy));
    const dxf: f64 = @as(f64, @floatFromInt(dx));
    return sqrtApprox(dyf * dyf + dxf * dxf);
}

fn pos_equal(a: Pos, b: Pos) bool {
    return a.y == b.y and a.x == b.x;
}

fn contains_pos(lst: []Pos, p: Pos) bool {
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(lst.len))) {
        if (pos_equal(lst[_idx(lst.len, i)], p)) {
            return true;
        }
        i = i + 1;
    }
    return false;
}

fn open_index_of_pos(open: []Node, p: Pos) i64 {
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(open.len))) {
        if (pos_equal(open[_idx(open.len, i)].pos, p)) {
            return i;
        }
        i = i + 1;
    }
    return -1;
}

fn remove_node_at(nodes: []Node, idx: i64) []Node {
    var res: []Node = std.heap.page_allocator.alloc(Node, 0) catch unreachable;
    res = res;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(nodes.len))) {
        if (i != idx) {
            res = blk: { var _tmp = std.ArrayList(Node).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const Node, res)) catch |err| handleError(err); _tmp.append(nodes[_idx(nodes.len, i)]) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        }
        i = i + 1;
    }
    return res;
}

fn append_pos_list(path: []Pos, p: Pos) []Pos {
    var res: []Pos = std.heap.page_allocator.alloc(Pos, 0) catch unreachable;
    res = res;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(path.len))) {
        res = blk: { var _tmp = std.ArrayList(Pos).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const Pos, res)) catch |err| handleError(err); _tmp.append(path[_idx(path.len, i)]) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    res = blk: { var _tmp = std.ArrayList(Pos).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const Pos, res)) catch |err| handleError(err); _tmp.append(p) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
    return res;
}

fn reverse_pos_list(lst: []Pos) []Pos {
    var res: []Pos = std.heap.page_allocator.alloc(Pos, 0) catch unreachable;
    res = res;
    var i: i64 = @as(i64, @intCast(lst.len)) - 1;
    i = i;
    while (i >= 0) {
        res = blk: { var _tmp = std.ArrayList(Pos).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const Pos, res)) catch |err| handleError(err); _tmp.append(lst[_idx(lst.len, i)]) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i - 1;
    }
    return res;
}

fn concat_pos_lists(a: []Pos, b: []Pos) []Pos {
    var res: []Pos = std.heap.page_allocator.alloc(Pos, 0) catch unreachable;
    res = res;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(a.len))) {
        res = blk: { var _tmp = std.ArrayList(Pos).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const Pos, res)) catch |err| handleError(err); _tmp.append(a[_idx(a.len, i)]) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    var j: i64 = 0;
    j = j;
    while (j < @as(i64, @intCast(b.len))) {
        res = blk: { var _tmp = std.ArrayList(Pos).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const Pos, res)) catch |err| handleError(err); _tmp.append(b[_idx(b.len, j)]) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        j = j + 1;
    }
    return res;
}

fn get_successors(p: Pos) []Pos {
    var res: []Pos = std.heap.page_allocator.alloc(Pos, 0) catch unreachable;
    res = res;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(delta_var.len))) {
        const nx: i64 = p.x + delta_var[_idx(delta_var.len, i)][_idx(delta_var[_idx(delta_var.len, i)].len, 1)];
        const ny: i64 = p.y + delta_var[_idx(delta_var.len, i)][_idx(delta_var[_idx(delta_var.len, i)].len, 0)];
        if (nx >= 0 and ny >= 0 and nx < @as(i64, @intCast(grid_var[_idx(grid_var.len, 0)].len)) and ny < @as(i64, @intCast(grid_var.len))) {
            if (grid_var[_idx(grid_var.len, ny)][_idx(grid_var[_idx(grid_var.len, ny)].len, nx)] == 0) {
                res = blk: { var _tmp = std.ArrayList(Pos).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const Pos, res)) catch |err| handleError(err); _tmp.append(.{ .y = ny, .x = nx }) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            }
        }
        i = i + 1;
    }
    return res;
}

fn find_lowest_f(open: []Node) i64 {
    var best: i64 = 0;
    best = best;
    var i: i64 = 1;
    i = i;
    while (i < @as(i64, @intCast(open.len))) {
        if (open[_idx(open.len, i)].f_cost < open[_idx(open.len, best)].f_cost) {
            best = i;
        }
        i = i + 1;
    }
    return best;
}

fn astar(start_param: Pos, goal_param: Pos) []Pos {
    const h0: f64 = heuristic(start_param, goal_param);
    var open: []Node = std.heap.page_allocator.dupe(Node, (&([1]Node{.{ .pos = start_param, .g_cost = 0, .h_cost = h0, .f_cost = h0, .path = @constCast(&([1]Pos{start_param}))[0..] }}))[0..]) catch unreachable;
    open = open;
    var closed: []Pos = std.heap.page_allocator.alloc(Pos, 0) catch unreachable;
    closed = closed;
    while (@as(i64, @intCast(open.len)) > 0) {
        const idx: i64 = find_lowest_f(open);
        const current: Node = open[_idx(open.len, idx)];
        open = remove_node_at(open, idx);
        if (pos_equal(current.pos, goal_param)) {
            return current.path;
        }
        closed = blk: { var _tmp = std.ArrayList(Pos).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const Pos, closed)) catch |err| handleError(err); _tmp.append(current.pos) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        const succ: []Pos = get_successors(current.pos);
        var i: i64 = 0;
        i = i;
        while (i < @as(i64, @intCast(succ.len))) {
            const pos: Pos = succ[_idx(succ.len, i)];
            if (contains_pos(closed, pos)) {
                i = i + 1;
                continue;
            }
            const tentative_g: i64 = current.g_cost + 1;
            const idx_open: i64 = open_index_of_pos(open, pos);
            if (idx_open == -1 or tentative_g < open[_idx(open.len, idx_open)].g_cost) {
                const new_path: []Pos = append_pos_list(current.path, pos);
                const h: f64 = heuristic(pos, goal_param);
                const f: f64 = @as(f64, @floatFromInt(tentative_g)) + h;
                if (idx_open != -1) {
                    open = remove_node_at(open, idx_open);
                }
                open = blk: { var _tmp = std.ArrayList(Node).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const Node, open)) catch |err| handleError(err); _tmp.append(.{ .pos = pos, .g_cost = tentative_g, .h_cost = h, .f_cost = f, .path = new_path }) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            }
            i = i + 1;
        }
    }
    return blk: { var _tmp = std.ArrayList(Pos).init(std.heap.page_allocator); _tmp.append(start_param) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
}

fn combine_paths(fwd: Node, bwd: Node) []Pos {
    var bwd_copy: []Pos = std.heap.page_allocator.alloc(Pos, 0) catch unreachable;
    bwd_copy = bwd_copy;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(bwd.path.len)) - 1) {
        bwd_copy = blk: { var _tmp = std.ArrayList(Pos).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const Pos, bwd_copy)) catch |err| handleError(err); _tmp.append(bwd.path[_idx(bwd.path.len, i)]) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    bwd_copy = reverse_pos_list(bwd_copy);
    return concat_pos_lists(fwd.path, bwd_copy);
}

fn bidirectional_astar(start_param: Pos, goal_param: Pos) []Pos {
    const hf: f64 = heuristic(start_param, goal_param);
    const hb: f64 = heuristic(goal_param, start_param);
    var open_f: []Node = std.heap.page_allocator.dupe(Node, (&([1]Node{.{ .pos = start_param, .g_cost = 0, .h_cost = hf, .f_cost = hf, .path = @constCast(&([1]Pos{start_param}))[0..] }}))[0..]) catch unreachable;
    open_f = open_f;
    var open_b: []Node = std.heap.page_allocator.dupe(Node, (&([1]Node{.{ .pos = goal_param, .g_cost = 0, .h_cost = hb, .f_cost = hb, .path = @constCast(&([1]Pos{goal_param}))[0..] }}))[0..]) catch unreachable;
    open_b = open_b;
    var closed_f: []Pos = std.heap.page_allocator.alloc(Pos, 0) catch unreachable;
    closed_f = closed_f;
    var closed_b: []Pos = std.heap.page_allocator.alloc(Pos, 0) catch unreachable;
    closed_b = closed_b;
    while (@as(i64, @intCast(open_f.len)) > 0 and @as(i64, @intCast(open_b.len)) > 0) {
        const idx_f: i64 = find_lowest_f(open_f);
        const current_f: Node = open_f[_idx(open_f.len, idx_f)];
        open_f = remove_node_at(open_f, idx_f);
        const idx_b: i64 = find_lowest_f(open_b);
        const current_b: Node = open_b[_idx(open_b.len, idx_b)];
        open_b = remove_node_at(open_b, idx_b);
        if (pos_equal(current_f.pos, current_b.pos)) {
            return combine_paths(current_f, current_b);
        }
        closed_f = blk: { var _tmp = std.ArrayList(Pos).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const Pos, closed_f)) catch |err| handleError(err); _tmp.append(current_f.pos) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        closed_b = blk: { var _tmp = std.ArrayList(Pos).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const Pos, closed_b)) catch |err| handleError(err); _tmp.append(current_b.pos) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        const succ_f: []Pos = get_successors(current_f.pos);
        var i: i64 = 0;
        i = i;
        while (i < @as(i64, @intCast(succ_f.len))) {
            const pos: Pos = succ_f[_idx(succ_f.len, i)];
            if (contains_pos(closed_f, pos)) {
                i = i + 1;
                continue;
            }
            const tentative_g: i64 = current_f.g_cost + 1;
            const h: f64 = heuristic(pos, current_b.pos);
            const f: f64 = @as(f64, @floatFromInt(tentative_g)) + h;
            const idx_open: i64 = open_index_of_pos(open_f, pos);
            if (idx_open == -1 or tentative_g < open_f[_idx(open_f.len, idx_open)].g_cost) {
                const new_path: []Pos = append_pos_list(current_f.path, pos);
                if (idx_open != -1) {
                    open_f = remove_node_at(open_f, idx_open);
                }
                open_f = blk: { var _tmp = std.ArrayList(Node).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const Node, open_f)) catch |err| handleError(err); _tmp.append(.{ .pos = pos, .g_cost = tentative_g, .h_cost = h, .f_cost = f, .path = new_path }) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            }
            i = i + 1;
        }
        const succ_b: []Pos = get_successors(current_b.pos);
        i = 0;
        while (i < @as(i64, @intCast(succ_b.len))) {
            const pos: Pos = succ_b[_idx(succ_b.len, i)];
            if (contains_pos(closed_b, pos)) {
                i = i + 1;
                continue;
            }
            const tentative_g: i64 = current_b.g_cost + 1;
            const h: f64 = heuristic(pos, current_f.pos);
            const f: f64 = @as(f64, @floatFromInt(tentative_g)) + h;
            const idx_open: i64 = open_index_of_pos(open_b, pos);
            if (idx_open == -1 or tentative_g < open_b[_idx(open_b.len, idx_open)].g_cost) {
                const new_path: []Pos = append_pos_list(current_b.path, pos);
                if (idx_open != -1) {
                    open_b = remove_node_at(open_b, idx_open);
                }
                open_b = blk: { var _tmp = std.ArrayList(Node).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const Node, open_b)) catch |err| handleError(err); _tmp.append(.{ .pos = pos, .g_cost = tentative_g, .h_cost = h, .f_cost = f, .path = new_path }) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            }
            i = i + 1;
        }
    }
    return blk: { var _tmp = std.ArrayList(Pos).init(std.heap.page_allocator); _tmp.append(start_param) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
}

fn path_to_string(path: []Pos) []const u8 {
    if (@as(i64, @intCast(path.len)) == 0) {
        return "[]";
    }
    var s: []const u8 = _concat_string(_concat_string(_concat_string(_concat_string("[(", _str(path[_idx(path.len, 0)].y)), ", "), _str(path[_idx(path.len, 0)].x)), ")");
    s = s;
    var i: i64 = 1;
    i = i;
    while (i < @as(i64, @intCast(path.len))) {
        s = _concat_string(_concat_string(_concat_string(_concat_string(_concat_string(s, ", ("), _str(path[_idx(path.len, i)].y)), ", "), _str(path[_idx(path.len, i)].x)), ")");
        i = i + 1;
    }
    s = _concat_string(s, "]");
    return s;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        grid_var = std.heap.page_allocator.dupe([]i64, (&([7][]i64{std.heap.page_allocator.dupe(i64, (&([7]i64{0, 0, 0, 0, 0, 0, 0}))[0..]) catch unreachable, std.heap.page_allocator.dupe(i64, (&([7]i64{0, 1, 0, 0, 0, 0, 0}))[0..]) catch unreachable, std.heap.page_allocator.dupe(i64, (&([7]i64{0, 0, 0, 0, 0, 0, 0}))[0..]) catch unreachable, std.heap.page_allocator.dupe(i64, (&([7]i64{0, 0, 1, 0, 0, 0, 0}))[0..]) catch unreachable, std.heap.page_allocator.dupe(i64, (&([7]i64{1, 0, 1, 0, 0, 0, 0}))[0..]) catch unreachable, std.heap.page_allocator.dupe(i64, (&([7]i64{0, 0, 0, 0, 0, 0, 0}))[0..]) catch unreachable, std.heap.page_allocator.dupe(i64, (&([7]i64{0, 0, 0, 0, 1, 0, 0}))[0..]) catch unreachable}))[0..]) catch unreachable;
        delta_var = std.heap.page_allocator.dupe([]i64, (&([4][]i64{std.heap.page_allocator.dupe(i64, (&([2]i64{0 - 1, 0}))[0..]) catch unreachable, std.heap.page_allocator.dupe(i64, (&([2]i64{0, 0 - 1}))[0..]) catch unreachable, std.heap.page_allocator.dupe(i64, (&([2]i64{1, 0}))[0..]) catch unreachable, std.heap.page_allocator.dupe(i64, (&([2]i64{0, 1}))[0..]) catch unreachable}))[0..]) catch unreachable;
        start_var = .{ .y = 0, .x = 0 };
        goal_var = .{ .y = @as(i64, @intCast(grid_var.len)) - 1, .x = @as(i64, @intCast(grid_var[_idx(grid_var.len, 0)].len)) - 1 };
        path1_var = astar(start_var, goal_var);
        path2_var = bidirectional_astar(start_var, goal_var);
        std.debug.print("{s}\n", .{path_to_string(path1_var)});
        std.debug.print("{s}\n", .{path_to_string(path2_var)});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
