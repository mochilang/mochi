// Generated by Mochi Zig transpiler on 2025-08-14 22:13 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const Edge = struct {
    u: i64,
    v: i64,
    w: i64,
};

const UF = struct {
    parent: []i64,
    rank: []i64,
};

const FindRes = struct {
    root: i64,
    uf: UF,
};

fn uf_make(n: i64) UF {
    var p: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    p = p;
    var r: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    r = r;
    var i: i64 = 0;
    i = i;
    while (i < n) {
        p = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, p)) catch |err| handleError(err); _tmp.append(i) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        r = blk: { var _tmp_1 = std.ArrayList(i64).init(std.heap.page_allocator); _tmp_1.appendSlice(@as([]const i64, r)) catch |err| handleError(err); _tmp_1.append(0) catch |err| handleError(err); break :blk (_tmp_1.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    return .{ .parent = p, .rank = r };
}

fn uf_find(uf: UF, x: i64) FindRes {
    var p: []i64 = uf.parent;
    p = p;
    if (p[_idx(p.len, x)] != x) {
        const res: FindRes = uf_find(.{ .parent = p, .rank = uf.rank }, p[_idx(p.len, x)]);
        p = res.uf.parent;
        p[_idx(p.len, x)] = res.root;
        return .{ .root = res.root, .uf = .{ .parent = p, .rank = res.uf.rank } };
    }
    return .{ .root = x, .uf = uf };
}

fn uf_union(uf: UF, x: i64, y: i64) UF {
    const fr1: FindRes = uf_find(uf, x);
    var uf1: UF = fr1.uf;
    uf1 = uf1;
    const root1: i64 = fr1.root;
    const fr2: FindRes = uf_find(uf1, y);
    uf1 = fr2.uf;
    const root2: i64 = fr2.root;
    if (root1 == root2) {
        return uf1;
    }
    if (uf1.rank[_idx(uf1.rank.len, root1)] > uf1.rank[_idx(uf1.rank.len, root2)]) {
        uf1.parent[_idx(uf1.parent.len, root2)] = root1;
    } else {
        if (uf1.rank[_idx(uf1.rank.len, root1)] < uf1.rank[_idx(uf1.rank.len, root2)]) {
            uf1.parent[_idx(uf1.parent.len, root1)] = root2;
        } else {
            uf1.parent[_idx(uf1.parent.len, root2)] = root1;
            uf1.rank[_idx(uf1.rank.len, root1)] = uf1.rank[_idx(uf1.rank.len, root1)] + 1;
        }
    }
    return .{ .parent = uf1.parent, .rank = uf1.rank };
}

fn boruvka(n: i64, edges: []Edge) []Edge {
    var uf: UF = uf_make(n);
    uf = uf;
    var num_components: i64 = n;
    num_components = num_components;
    var mst: []Edge = std.heap.page_allocator.alloc(Edge, 0) catch unreachable;
    mst = mst;
    while (num_components > 1) {
        var cheap: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
        cheap = cheap;
        var i: i64 = 0;
        i = i;
        while (i < n) {
            cheap = blk: { var _tmp_2 = std.ArrayList(i64).init(std.heap.page_allocator); _tmp_2.appendSlice(@as([]const i64, cheap)) catch |err| handleError(err); _tmp_2.append(-1) catch |err| handleError(err); break :blk (_tmp_2.toOwnedSlice() catch |err| handleError(err)); };
            i = i + 1;
        }
        var idx: i64 = 0;
        idx = idx;
        while (idx < @as(i64, @intCast(edges.len))) {
            const e: Edge = edges[_idx(edges.len, idx)];
            const fr1: FindRes = uf_find(uf, e.u);
            uf = fr1.uf;
            const set1: i64 = fr1.root;
            const fr2: FindRes = uf_find(uf, e.v);
            uf = fr2.uf;
            const set2: i64 = fr2.root;
            if (set1 != set2) {
                if (cheap[_idx(cheap.len, set1)] == -1 or edges[_idx(edges.len, cheap[_idx(cheap.len, set1)])].w > e.w) {
                    cheap[_idx(cheap.len, set1)] = idx;
                }
                if (cheap[_idx(cheap.len, set2)] == -1 or edges[_idx(edges.len, cheap[_idx(cheap.len, set2)])].w > e.w) {
                    cheap[_idx(cheap.len, set2)] = idx;
                }
            }
            idx = idx + 1;
        }
        var v: i64 = 0;
        v = v;
        while (v < n) {
            const idxe: i64 = cheap[_idx(cheap.len, v)];
            if (idxe != -1) {
                const e: Edge = edges[_idx(edges.len, idxe)];
                const fr1: FindRes = uf_find(uf, e.u);
                uf = fr1.uf;
                const set1: i64 = fr1.root;
                const fr2: FindRes = uf_find(uf, e.v);
                uf = fr2.uf;
                const set2: i64 = fr2.root;
                if (set1 != set2) {
                    mst = blk: { var _tmp_3 = std.ArrayList(Edge).init(std.heap.page_allocator); _tmp_3.appendSlice(@as([]const Edge, mst)) catch |err| handleError(err); _tmp_3.append(e) catch |err| handleError(err); break :blk (_tmp_3.toOwnedSlice() catch |err| handleError(err)); };
                    uf = uf_union(uf, set1, set2);
                    num_components = num_components - 1;
                }
            }
            v = v + 1;
        }
    }
    return mst;
}

fn mochi_main() void {
    const edges: []Edge = blk0: { var _tmp_4 = std.ArrayList(Edge).init(std.heap.page_allocator); _tmp_4.append(.{ .u = 0, .v = 1, .w = 1 }) catch unreachable; _tmp_4.append(.{ .u = 0, .v = 2, .w = 2 }) catch unreachable; _tmp_4.append(.{ .u = 2, .v = 3, .w = 3 }) catch unreachable; break :blk0 (_tmp_4.toOwnedSlice() catch unreachable); };
    var mst: []Edge = boruvka(4, edges);
    mst = mst;
    for (mst) |__it0| {
        const e = __it0;
        std.debug.print("{s}\n", .{_concat_string(_concat_string(_concat_string(_concat_string(_str(e.u), " - "), _str(e.v)), " : "), _str(e.w))});
    }
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        mochi_main();
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .pointer => |p| {
        if (p.size == .slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .@"struct" => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.heap.pageSize()));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
