// Generated by Mochi Zig transpiler on 2025-08-14 22:13 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const CheckResult = struct {
    status: i64,
    odd_node: i64,
};

var g1_var: std.AutoHashMap(i64,[]i64) = std.AutoHashMap(i64,[]i64).init(std.heap.page_allocator);
var g2_var: std.AutoHashMap(i64,[]i64) = std.AutoHashMap(i64,[]i64).init(std.heap.page_allocator);
var g3_var: std.AutoHashMap(i64,[]i64) = std.AutoHashMap(i64,[]i64).init(std.heap.page_allocator);
var g4_var: std.AutoHashMap(i64,[]i64) = std.AutoHashMap(i64,[]i64).init(std.heap.page_allocator);
var g5_var: std.AutoHashMap(i64,[]i64) = std.AutoHashMap(i64,[]i64).init(std.heap.page_allocator);
const max_node_var: i64 = 10;

fn make_matrix(n: i64) [][]bool {
    var matrix: [][]bool = std.heap.page_allocator.alloc([]bool, 0) catch unreachable;
    matrix = matrix;
    var i: i64 = 0;
    i = i;
    while (i <= n) {
        var row: []bool = std.heap.page_allocator.alloc(bool, 0) catch unreachable;
        row = row;
        var j: i64 = 0;
        j = j;
        while (j <= n) {
            row = blk: { var _tmp = std.ArrayList(bool).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const bool, row)) catch |err| handleError(err); _tmp.append(false) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            j = j + 1;
        }
        matrix = blk: { var _tmp_1 = std.ArrayList([]bool).init(std.heap.page_allocator); _tmp_1.appendSlice(@as([]const []bool, matrix)) catch |err| handleError(err); _tmp_1.append(row) catch |err| handleError(err); break :blk (_tmp_1.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    return matrix;
}

fn dfs(u: i64, graph: *const std.AutoHashMap(i64,[]i64), visited_edge_param: [][]bool, path_param: []i64) []i64 {
    var visited_edge_var: [][]bool = visited_edge_param;
    visited_edge_var = visited_edge_var;
    var path_var: []i64 = path_param;
    path_var = path_var;
    path_var = blk: { var _tmp_2 = std.ArrayList(i64).init(std.heap.page_allocator); _tmp_2.appendSlice(@as([]const i64, path_var)) catch |err| handleError(err); _tmp_2.append(u) catch |err| handleError(err); break :blk (_tmp_2.toOwnedSlice() catch |err| handleError(err)); };
    if (graph.contains(u)) {
        const neighbors: []i64 = graph.get(u).?;
        var i: i64 = 0;
        i = i;
        while (i < @as(i64, @intCast(neighbors.len))) {
            const v: i64 = neighbors[_idx(neighbors.len, i)];
            if (visited_edge_var[_idx(visited_edge_var.len, u)][_idx(visited_edge_var[_idx(visited_edge_var.len, u)].len, v)] == false) {
                visited_edge_var[_idx(visited_edge_var.len, u)][_idx(visited_edge_var[_idx(visited_edge_var.len, u)].len, v)] = true;
                visited_edge_var[_idx(visited_edge_var.len, v)][_idx(visited_edge_var[_idx(visited_edge_var.len, v)].len, u)] = true;
                path_var = dfs(v, graph, visited_edge_var, path_var);
            }
            i = i + 1;
        }
    }
    return path_var;
}

fn check_circuit_or_path(graph: *const std.AutoHashMap(i64,[]i64), max_node_param: i64) CheckResult {
    var odd_degree_nodes: i64 = 0;
    odd_degree_nodes = odd_degree_nodes;
    var odd_node: i64 = 0 - 1;
    odd_node = odd_node;
    var i: i64 = 0;
    i = i;
    while (i < max_node_param) {
        if (graph.contains(i)) {
            if (@mod(@as(i64, @intCast(graph.get(i).?.len)), 2) == 1) {
                odd_degree_nodes = odd_degree_nodes + 1;
                odd_node = i;
            }
        }
        i = i + 1;
    }
    if (odd_degree_nodes == 0) {
        return .{ .status = 1, .odd_node = odd_node };
    }
    if (odd_degree_nodes == 2) {
        return .{ .status = 2, .odd_node = odd_node };
    }
    return .{ .status = 3, .odd_node = odd_node };
}

fn check_euler(graph: *const std.AutoHashMap(i64,[]i64), max_node_param: i64) void {
    const visited_edge: [][]bool = make_matrix(max_node_param);
    const res: CheckResult = check_circuit_or_path(graph, max_node_param);
    if (res.status == 3) {
        std.debug.print("{s}\n", .{"graph is not Eulerian"});
        std.debug.print("{s}\n", .{"no path"});
        return;
    }
    var start_node: i64 = 1;
    start_node = start_node;
    if (res.status == 2) {
        start_node = res.odd_node;
        std.debug.print("{s}\n", .{"graph has a Euler path"});
    }
    if (res.status == 1) {
        std.debug.print("{s}\n", .{"graph has a Euler cycle"});
    }
    const path: []i64 = dfs(start_node, graph, visited_edge, @constCast(&[_]i64{}));
    std.debug.print("{s}\n", .{_str(path)});
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        g1_var = blk0: { var m = std.AutoHashMap(i64, []i64).init(std.heap.page_allocator); m.put(1, @constCast(([3]i64{2, 3, 4})[0..3])) catch unreachable; m.put(2, @constCast(([2]i64{1, 3})[0..2])) catch unreachable; m.put(3, @constCast(([2]i64{1, 2})[0..2])) catch unreachable; m.put(4, @constCast(([2]i64{1, 5})[0..2])) catch unreachable; m.put(5, @constCast(([1]i64{4})[0..1])) catch unreachable; break :blk0 m; };
        g2_var = blk1: { var m_1 = std.AutoHashMap(i64, []i64).init(std.heap.page_allocator); m_1.put(1, @constCast(([4]i64{2, 3, 4, 5})[0..4])) catch unreachable; m_1.put(2, @constCast(([2]i64{1, 3})[0..2])) catch unreachable; m_1.put(3, @constCast(([2]i64{1, 2})[0..2])) catch unreachable; m_1.put(4, @constCast(([2]i64{1, 5})[0..2])) catch unreachable; m_1.put(5, @constCast(([2]i64{1, 4})[0..2])) catch unreachable; break :blk1 m_1; };
        g3_var = blk2: { var m_2 = std.AutoHashMap(i64, []i64).init(std.heap.page_allocator); m_2.put(1, @constCast(([3]i64{2, 3, 4})[0..3])) catch unreachable; m_2.put(2, @constCast(([3]i64{1, 3, 4})[0..3])) catch unreachable; m_2.put(3, @constCast(([2]i64{1, 2})[0..2])) catch unreachable; m_2.put(4, @constCast(([3]i64{1, 2, 5})[0..3])) catch unreachable; m_2.put(5, @constCast(([1]i64{4})[0..1])) catch unreachable; break :blk2 m_2; };
        g4_var = blk3: { var m_3 = std.AutoHashMap(i64, []i64).init(std.heap.page_allocator); m_3.put(1, @constCast(([2]i64{2, 3})[0..2])) catch unreachable; m_3.put(2, @constCast(([2]i64{1, 3})[0..2])) catch unreachable; m_3.put(3, @constCast(([2]i64{1, 2})[0..2])) catch unreachable; break :blk3 m_3; };
        g5_var = blk4: { var m_4 = std.AutoHashMap(i64, []i64).init(std.heap.page_allocator); m_4.put(1, @constCast((&[_]i64{})[0..0])) catch unreachable; m_4.put(2, @constCast((&[_]i64{})[0..0])) catch unreachable; break :blk4 m_4; };
        check_euler(&g1_var, max_node_var);
        check_euler(&g2_var, max_node_var);
        check_euler(&g3_var, max_node_var);
        check_euler(&g4_var, max_node_var);
        check_euler(&g5_var, max_node_var);
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .pointer => |p| {
        if (p.size == .slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .@"struct" => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.heap.pageSize()));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
