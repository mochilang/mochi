// Generated by Mochi Zig transpiler on 2025-08-14 17:09 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const Edge = struct {
    u: i64,
    v: i64,
    w: i64,
};

const Graph = struct {
    num_nodes: i64,
    edges: []Edge,
    component: std.AutoHashMap(i64,i64),
};

const UnionResult = struct {
    graph: Graph,
    component_size: []i64,
};

fn new_graph(num_nodes: i64) Graph {
    return .{ .num_nodes = num_nodes, .edges = &[_]Edge{}, .component = std.AutoHashMap(i64, i64).init(std.heap.page_allocator) };
}

fn add_edge(g: Graph, u: i64, v: i64, w: i64) Graph {
    var es: []Edge = g.edges;
    es = es;
    es = blk: { var _tmp = std.ArrayList(Edge).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const Edge, es)) catch |err| handleError(err); _tmp.append(.{ .u = u, .v = v, .w = w }) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
    return .{ .num_nodes = g.num_nodes, .edges = es, .component = g.component };
}

fn find_component(g: Graph, node: i64) i64 {
    if (g.component.get(node) orelse undefined == node) {
        return node;
    }
    return find_component(g, g.component.get(node) orelse undefined);
}

fn set_component(g_param: *Graph, node: i64) Graph {
    if (g_param.component.get(node) orelse undefined != node) {
        var comp: std.AutoHashMap(i64,i64) = g_param.component;
        comp = comp;
        var k: i64 = 0;
        k = k;
        while (k < g_param.num_nodes) {
            comp.put(k, find_component(g_param.*, k)) catch unreachable;
            k = k + 1;
        }
        g_param.* = .{ .num_nodes = g_param.num_nodes, .edges = g_param.edges, .component = comp };
    }
    return g_param.*;
}

fn union_(g_param: *Graph, component_size: []i64, u: i64, v: i64) UnionResult {
    var comp_size: []i64 = blk: { const tmp = std.heap.page_allocator.alloc(i64, component_size.len) catch unreachable; @memcpy(tmp, component_size); break :blk tmp; };
    comp_size = comp_size;
    var comp: std.AutoHashMap(i64,i64) = g_param.component;
    comp = comp;
    if (comp_size[_idx(comp_size.len, u)] <= comp_size[_idx(comp_size.len, v)]) {
        comp.put(u, v) catch unreachable;
        comp_size[_idx(comp_size.len, v)] = comp_size[_idx(comp_size.len, v)] + comp_size[_idx(comp_size.len, u)];
        g_param.* = .{ .num_nodes = g_param.num_nodes, .edges = g_param.edges, .component = comp };
        g_param.* = set_component(g_param, u);
    } else {
        comp.put(v, u) catch unreachable;
        comp_size[_idx(comp_size.len, u)] = comp_size[_idx(comp_size.len, u)] + comp_size[_idx(comp_size.len, v)];
        g_param.* = .{ .num_nodes = g_param.num_nodes, .edges = g_param.edges, .component = comp };
        g_param.* = set_component(g_param, v);
    }
    return .{ .graph = (g_param).*, .component_size = comp_size };
}

fn create_empty_edges(n: i64) []Edge {
    var res: []Edge = std.heap.page_allocator.alloc(Edge, 0) catch unreachable;
    res = res;
    var i: i64 = 0;
    i = i;
    while (i < n) {
        res = blk: { var _tmp = std.ArrayList(Edge).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const Edge, res)) catch |err| handleError(err); _tmp.append(.{ .u = -1, .v = -1, .w = -1 }) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    return res;
}

fn boruvka(g_param: *Graph) i64 {
    var component_size: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    component_size = component_size;
    var i: i64 = 0;
    i = i;
    while (i < g_param.num_nodes) {
        component_size = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, component_size)) catch |err| handleError(err); _tmp.append(1) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        var comp: std.AutoHashMap(i64,i64) = g_param.component;
        comp = comp;
        comp.put(i, i) catch unreachable;
        g_param.* = .{ .num_nodes = g_param.num_nodes, .edges = g_param.edges, .component = comp };
        i = i + 1;
    }
    var mst_weight: i64 = 0;
    mst_weight = mst_weight;
    var num_components: i64 = g_param.num_nodes;
    num_components = num_components;
    var minimum_weight_edge: []Edge = create_empty_edges(g_param.num_nodes);
    minimum_weight_edge = minimum_weight_edge;
    while (num_components > 1) {
        for (g_param.edges) |__it0| {
            const e = __it0;
            const u: i64 = e.u;
            const v: i64 = e.v;
            const w: i64 = e.w;
            const u_comp: i64 = g_param.component.get(u) orelse undefined;
            const v_comp: i64 = g_param.component.get(v) orelse undefined;
            if (u_comp != v_comp) {
                const current_u: Edge = minimum_weight_edge[_idx(minimum_weight_edge.len, u_comp)];
                if (current_u.u == -1 or current_u.w > w) {
                    minimum_weight_edge[_idx(minimum_weight_edge.len, u_comp)] = .{ .u = u, .v = v, .w = w };
                }
                const current_v: Edge = minimum_weight_edge[_idx(minimum_weight_edge.len, v_comp)];
                if (current_v.u == -1 or current_v.w > w) {
                    minimum_weight_edge[_idx(minimum_weight_edge.len, v_comp)] = .{ .u = u, .v = v, .w = w };
                }
            }
        }
        for (minimum_weight_edge) |__it1| {
            const e = __it1;
            if (e.u != -1) {
                const u: i64 = e.u;
                const v: i64 = e.v;
                const w: i64 = e.w;
                const u_comp: i64 = g_param.component.get(u) orelse undefined;
                const v_comp: i64 = g_param.component.get(v) orelse undefined;
                if (u_comp != v_comp) {
                    mst_weight = mst_weight + w;
                    var res: UnionResult = union_(g_param, component_size, u_comp, v_comp);
                    res = res;
                    g_param.* = res.graph;
                    component_size = res.component_size;
                    std.debug.print("{s}\n", .{_concat_string(_concat_string(_concat_string(_concat_string("Added edge [", _str(u)), " - "), _str(v)), "]")});
                    std.debug.print("{s}\n", .{_concat_string("Added weight: ", _str(w))});
                    std.debug.print("{s}\n", .{""});
                    num_components = num_components - 1;
                }
            }
        }
        minimum_weight_edge = create_empty_edges(g_param.num_nodes);
    }
    std.debug.print("{s}\n", .{_concat_string("The total weight of the minimal spanning tree is: ", _str(mst_weight))});
    return mst_weight;
}

fn mochi_main() void {
    var g: Graph = new_graph(8);
    g = g;
    const edges: [][]i64 = std.heap.page_allocator.dupe([]i64, (&([11][]i64{std.heap.page_allocator.dupe(i64, (&([3]i64{0, 1, 10}))[0..]) catch unreachable, std.heap.page_allocator.dupe(i64, (&([3]i64{0, 2, 6}))[0..]) catch unreachable, std.heap.page_allocator.dupe(i64, (&([3]i64{0, 3, 5}))[0..]) catch unreachable, std.heap.page_allocator.dupe(i64, (&([3]i64{1, 3, 15}))[0..]) catch unreachable, std.heap.page_allocator.dupe(i64, (&([3]i64{2, 3, 4}))[0..]) catch unreachable, std.heap.page_allocator.dupe(i64, (&([3]i64{3, 4, 8}))[0..]) catch unreachable, std.heap.page_allocator.dupe(i64, (&([3]i64{4, 5, 10}))[0..]) catch unreachable, std.heap.page_allocator.dupe(i64, (&([3]i64{4, 6, 6}))[0..]) catch unreachable, std.heap.page_allocator.dupe(i64, (&([3]i64{4, 7, 5}))[0..]) catch unreachable, std.heap.page_allocator.dupe(i64, (&([3]i64{5, 7, 15}))[0..]) catch unreachable, std.heap.page_allocator.dupe(i64, (&([3]i64{6, 7, 4}))[0..]) catch unreachable}))[0..]) catch unreachable;
    for (edges) |__it2| {
        const e = __it2;
        g = add_edge(g, e[_idx(e.len, 0)], e[_idx(e.len, 1)], e[_idx(e.len, 2)]);
    }
    _ = boruvka(&g);
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        mochi_main();
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .pointer => |p| {
        if (p.size == .slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .@"struct" => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.heap.pageSize()));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
