// Generated by Mochi Zig transpiler on 2025-08-14 22:13 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const DS = struct {
    parent: []i64,
    rank: []i64,
};

const FindResult = struct {
    ds: DS,
    root: i64,
};

const Edge = struct {
    u: i64,
    v: i64,
    w: i64,
};

const Graph = struct {
    edges: []Edge,
    num_nodes: i64,
};

fn new_graph() Graph {
    return .{ .edges = (&[_]Edge{})[0..0], .num_nodes = 0 };
}

fn add_edge(g: Graph, u: i64, v: i64, w: i64) Graph {
    var es: []Edge = g.edges;
    es = es;
    es = blk: { var _tmp = std.ArrayList(Edge).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const Edge, es)) catch |err| handleError(err); _tmp.append(.{ .u = u, .v = v, .w = w }) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
    var n: i64 = g.num_nodes;
    n = n;
    if (u > n) {
        n = u;
    }
    if (v > n) {
        n = v;
    }
    return .{ .edges = es, .num_nodes = n };
}

fn make_ds(n: i64) DS {
    var parent: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    parent = parent;
    var rank: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    rank = rank;
    var i: i64 = 0;
    i = i;
    while (i <= n) {
        parent = blk: { var _tmp_1 = std.ArrayList(i64).init(std.heap.page_allocator); _tmp_1.appendSlice(@as([]const i64, parent)) catch |err| handleError(err); _tmp_1.append(i) catch |err| handleError(err); break :blk (_tmp_1.toOwnedSlice() catch |err| handleError(err)); };
        rank = blk: { var _tmp_2 = std.ArrayList(i64).init(std.heap.page_allocator); _tmp_2.appendSlice(@as([]const i64, rank)) catch |err| handleError(err); _tmp_2.append(0) catch |err| handleError(err); break :blk (_tmp_2.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    return .{ .parent = parent, .rank = rank };
}

fn find_set(ds: DS, x: i64) FindResult {
    if (ds.parent[_idx(ds.parent.len, x)] == x) {
        return .{ .ds = ds, .root = x };
    }
    var res: FindResult = find_set(ds, ds.parent[_idx(ds.parent.len, x)]);
    res = res;
    res.ds.parent[_idx(res.ds.parent.len, x)] = res.root;
    return .{ .ds = .{ .parent = res.ds.parent, .rank = res.ds.rank }, .root = res.root };
}

fn union_set(ds: DS, x: i64, y: i64) DS {
    const fx: FindResult = find_set(ds, x);
    const ds1: DS = fx.ds;
    const x_root: i64 = fx.root;
    const fy: FindResult = find_set(ds1, y);
    var ds2: DS = fy.ds;
    ds2 = ds2;
    const y_root: i64 = fy.root;
    if (x_root == y_root) {
        return ds2;
    }
    if (ds2.rank[_idx(ds2.rank.len, x_root)] > ds2.rank[_idx(ds2.rank.len, y_root)]) {
        ds2.parent[_idx(ds2.parent.len, y_root)] = x_root;
    } else {
        ds2.parent[_idx(ds2.parent.len, x_root)] = y_root;
        if (ds2.rank[_idx(ds2.rank.len, x_root)] == ds2.rank[_idx(ds2.rank.len, y_root)]) {
            ds2.rank[_idx(ds2.rank.len, y_root)] = ds2.rank[_idx(ds2.rank.len, y_root)] + 1;
        }
    }
    return .{ .parent = ds2.parent, .rank = ds2.rank };
}

fn sort_edges(edges: []Edge) []Edge {
    var arr: []Edge = blk: { const tmp = std.heap.page_allocator.alloc(Edge, edges.len) catch unreachable; @memcpy(tmp, edges); break :blk tmp; };
    arr = arr;
    var i: i64 = 1;
    i = i;
    while (i < @as(i64, @intCast(arr.len))) {
        const key: Edge = arr[_idx(arr.len, i)];
        var j: i64 = i - 1;
        j = j;
        while (j >= 0) {
            const temp: Edge = arr[_idx(arr.len, j)];
            if (temp.w > key.w or temp.w == key.w and (temp.u > key.u or temp.u == key.u and temp.v > key.v)) {
                arr[_idx(arr.len, j + 1)] = temp;
                j = j - 1;
            } else {
                break;
            }
        }
        arr[_idx(arr.len, j + 1)] = key;
        i = i + 1;
    }
    return arr;
}

fn kruskal(g: Graph) Graph {
    const edges: []Edge = sort_edges(g.edges);
    var ds: DS = make_ds(g.num_nodes);
    ds = ds;
    var mst_edges: []Edge = std.heap.page_allocator.alloc(Edge, 0) catch unreachable;
    mst_edges = mst_edges;
    var i: i64 = 0;
    i = i;
    var added: i64 = 0;
    added = added;
    while (added < g.num_nodes - 1 and i < @as(i64, @intCast(edges.len))) {
        const e: Edge = edges[_idx(edges.len, i)];
        i = i + 1;
        const fu: FindResult = find_set(ds, e.u);
        ds = fu.ds;
        const ru: i64 = fu.root;
        const fv: FindResult = find_set(ds, e.v);
        ds = fv.ds;
        const rv: i64 = fv.root;
        if (ru != rv) {
            mst_edges = blk: { var _tmp_3 = std.ArrayList(Edge).init(std.heap.page_allocator); _tmp_3.appendSlice(@as([]const Edge, mst_edges)) catch |err| handleError(err); _tmp_3.append(e) catch |err| handleError(err); break :blk (_tmp_3.toOwnedSlice() catch |err| handleError(err)); };
            added = added + 1;
            ds = union_set(ds, ru, rv);
        }
    }
    return .{ .edges = mst_edges, .num_nodes = g.num_nodes };
}

fn print_mst(g: Graph) void {
    var es: []Edge = sort_edges(g.edges);
    es = es;
    for (es) |__it0| {
        const e = __it0;
        std.debug.print("{s}\n", .{_concat_string(_concat_string(_concat_string(_concat_string(_str(e.u), "-"), _str(e.v)), ":"), _str(e.w))});
    }
}

fn mochi_main() void {
    var g: Graph = new_graph();
    g = g;
    g = add_edge(g, 1, 2, 1);
    g = add_edge(g, 2, 3, 2);
    g = add_edge(g, 3, 4, 1);
    g = add_edge(g, 3, 5, 100);
    g = add_edge(g, 4, 5, 5);
    const mst: Graph = kruskal(g);
    print_mst(mst);
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        mochi_main();
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .pointer => |p| {
        if (p.size == .slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .@"struct" => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.heap.pageSize()));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
