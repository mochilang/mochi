// Generated by Mochi Zig transpiler on 2025-08-14 22:13 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const INF_var: f64 = 1000000000.0;

fn print_dist(dist: []f64) void {
    std.debug.print("{s}\n", .{"Vertex Distance"});
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(dist.len))) {
        if (dist[_idx(dist.len, i)] >= INF_var) {
            std.debug.print("{s} {s}\n", .{_str(i), "\tINF"});
        } else {
            std.debug.print("{s} {s} {s}\n", .{_str(i), "\t", _str(@as(i64, @intFromFloat(dist[_idx(dist.len, i)])))});
        }
        i = i + 1;
    }
}

fn min_dist(mdist: []f64, vset: []bool) i64 {
    var min_val: f64 = INF_var;
    min_val = min_val;
    var min_ind: i64 = 0 - 1;
    min_ind = min_ind;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(mdist.len))) {
        if (!(vset[_idx(vset.len, i)]) and mdist[_idx(mdist.len, i)] < min_val) {
            min_val = mdist[_idx(mdist.len, i)];
            min_ind = i;
        }
        i = i + 1;
    }
    return min_ind;
}

fn dijkstra(graph: [][]f64, src: i64) []f64 {
    const v: i64 = @as(i64, @intCast(graph.len));
    var mdist: []f64 = std.heap.page_allocator.alloc(f64, 0) catch unreachable;
    mdist = mdist;
    var vset: []bool = std.heap.page_allocator.alloc(bool, 0) catch unreachable;
    vset = vset;
    var i: i64 = 0;
    i = i;
    while (i < v) {
        mdist = blk: { var _tmp = std.ArrayList(f64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const f64, mdist)) catch |err| handleError(err); _tmp.append(INF_var) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        vset = blk: { var _tmp_1 = std.ArrayList(bool).init(std.heap.page_allocator); _tmp_1.appendSlice(@as([]const bool, vset)) catch |err| handleError(err); _tmp_1.append(false) catch |err| handleError(err); break :blk (_tmp_1.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    mdist[_idx(mdist.len, src)] = 0.0;
    var count: i64 = 0;
    count = count;
    while (count < v - 1) {
        const u: i64 = min_dist(mdist, vset);
        vset[_idx(vset.len, u)] = true;
        var i_1: i64 = 0;
        i_1 = i_1;
        while (i_1 < v) {
            const alt: f64 = mdist[_idx(mdist.len, u)] + graph[_idx(graph.len, u)][_idx(graph[_idx(graph.len, u)].len, i_1)];
            if (!(vset[_idx(vset.len, i_1)]) and graph[_idx(graph.len, u)][_idx(graph[_idx(graph.len, u)].len, i_1)] < INF_var and alt < mdist[_idx(mdist.len, i_1)]) {
                mdist[_idx(mdist.len, i_1)] = alt;
            }
            i_1 = i_1 + 1;
        }
        count = count + 1;
    }
    return mdist;
}

fn mochi_main() void {
    const graph: [][]f64 = blk0: { var _tmp_2 = std.ArrayList([]f64).init(std.heap.page_allocator); _tmp_2.append(@constCast(blk1: { var _tmp_3 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_3.append(0.0) catch unreachable; _tmp_3.append(10.0) catch unreachable; _tmp_3.append(INF_var) catch unreachable; _tmp_3.append(INF_var) catch unreachable; _tmp_3.append(5.0) catch unreachable; break :blk1 (_tmp_3.toOwnedSlice() catch unreachable); })) catch unreachable; _tmp_2.append(@constCast(blk2: { var _tmp_4 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_4.append(INF_var) catch unreachable; _tmp_4.append(0.0) catch unreachable; _tmp_4.append(1.0) catch unreachable; _tmp_4.append(INF_var) catch unreachable; _tmp_4.append(2.0) catch unreachable; break :blk2 (_tmp_4.toOwnedSlice() catch unreachable); })) catch unreachable; _tmp_2.append(@constCast(blk3: { var _tmp_5 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_5.append(INF_var) catch unreachable; _tmp_5.append(INF_var) catch unreachable; _tmp_5.append(0.0) catch unreachable; _tmp_5.append(4.0) catch unreachable; _tmp_5.append(INF_var) catch unreachable; break :blk3 (_tmp_5.toOwnedSlice() catch unreachable); })) catch unreachable; _tmp_2.append(@constCast(blk4: { var _tmp_6 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_6.append(INF_var) catch unreachable; _tmp_6.append(INF_var) catch unreachable; _tmp_6.append(6.0) catch unreachable; _tmp_6.append(0.0) catch unreachable; _tmp_6.append(INF_var) catch unreachable; break :blk4 (_tmp_6.toOwnedSlice() catch unreachable); })) catch unreachable; _tmp_2.append(@constCast(blk5: { var _tmp_7 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_7.append(INF_var) catch unreachable; _tmp_7.append(3.0) catch unreachable; _tmp_7.append(9.0) catch unreachable; _tmp_7.append(2.0) catch unreachable; _tmp_7.append(0.0) catch unreachable; break :blk5 (_tmp_7.toOwnedSlice() catch unreachable); })) catch unreachable; break :blk0 (_tmp_2.toOwnedSlice() catch unreachable); };
    const dist: []f64 = dijkstra(graph, 0);
    print_dist(dist);
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        mochi_main();
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .pointer => |p| {
        if (p.size == .slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .@"struct" => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.heap.pageSize()));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
