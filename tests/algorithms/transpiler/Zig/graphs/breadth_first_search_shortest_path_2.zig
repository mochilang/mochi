// Generated by Mochi Zig transpiler on 2025-08-14 18:07 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

var demo_graph_var: std.StringHashMap([][]const u8) = std.StringHashMap([][]const u8).init(std.heap.page_allocator);

fn contains(xs: [][]const u8, x: []const u8) bool {
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(xs.len))) {
        if (std.mem.eql(u8, xs[_idx(xs.len, i)], x)) {
            return true;
        }
        i = i + 1;
    }
    return false;
}

fn contains_key(m: *const std.StringHashMap([][]const u8), key: []const u8) bool {
    var __mapit1 = m.keyIterator();
    while (__mapit1.next()) |__it0| {
        const k = __it0.*;
        if (std.mem.eql(u8, k, key)) {
            return true;
        }
    }
    return false;
}

fn bfs_shortest_path(graph: *const std.StringHashMap([][]const u8), start: []const u8, goal: []const u8) [][]const u8 {
    var explored: [][]const u8 = std.heap.page_allocator.alloc([]const u8, 0) catch unreachable;
    explored = explored;
    var queue: [][][]const u8 = std.heap.page_allocator.dupe([][]const u8, (&([1][][]const u8{std.heap.page_allocator.dupe([]const u8, (&([1][]const u8{start}))[0..]) catch unreachable}))[0..]) catch unreachable;
    queue = queue;
    if (std.mem.eql(u8, start, goal)) {
        return blk: { var _tmp = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp.append(start) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
    }
    while (@as(i64, @intCast(queue.len)) > 0) {
        const path: [][]const u8 = queue[_idx(queue.len, 0)];
        queue = queue[@as(usize, @intCast(1))..@min(@as(usize, @intCast(@as(i64, @intCast(queue.len)))), @as(usize, @intCast(queue.len)))];
        const node: []const u8 = path[_idx(path.len, @as(i64, @intCast(path.len)) - 1)];
        if (!(contains(explored, node))) {
            const neighbours: [][]const u8 = graph.get(node) orelse undefined;
            var i: i64 = 0;
            i = i;
            while (i < @as(i64, @intCast(neighbours.len))) {
                const neighbour: []const u8 = neighbours[_idx(neighbours.len, i)];
                var new_path: [][]const u8 = blk: { const tmp = std.heap.page_allocator.alloc([]const u8, path.len) catch unreachable; @memcpy(tmp, path); break :blk tmp; };
                new_path = new_path;
                new_path = blk: { var _tmp = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []const u8, new_path)) catch |err| handleError(err); _tmp.append(@constCast(neighbour)) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
                queue = blk: { var _tmp = std.ArrayList([][]const u8).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const [][]const u8, queue)) catch |err| handleError(err); _tmp.append(new_path) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
                if (std.mem.eql(u8, neighbour, goal)) {
                    return new_path;
                }
                i = i + 1;
            }
            explored = blk: { var _tmp = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []const u8, explored)) catch |err| handleError(err); _tmp.append(@constCast(node)) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        }
    }
    return &[_][]const u8{};
}

fn bfs_shortest_path_distance(graph: *const std.StringHashMap([][]const u8), start: []const u8, target: []const u8) i64 {
    if (contains_key(graph, start) == false or contains_key(graph, target) == false) {
        return 0 - 1;
    }
    if (std.mem.eql(u8, start, target)) {
        return 0;
    }
    var queue: [][]const u8 = std.heap.page_allocator.dupe([]const u8, (&([1][]const u8{start}))[0..]) catch unreachable;
    queue = queue;
    var visited: [][]const u8 = std.heap.page_allocator.dupe([]const u8, (&([1][]const u8{start}))[0..]) catch unreachable;
    visited = visited;
    var dist: std.StringHashMap(i64) = std.StringHashMap(i64).init(std.heap.page_allocator);
    dist = dist;
    dist.put(start, 0) catch unreachable;
    dist.put(target, 0 - 1) catch unreachable;
    while (@as(i64, @intCast(queue.len)) > 0) {
        const node: []const u8 = queue[_idx(queue.len, 0)];
        queue = queue[@as(usize, @intCast(1))..@min(@as(usize, @intCast(@as(i64, @intCast(queue.len)))), @as(usize, @intCast(queue.len)))];
        if (std.mem.eql(u8, node, target)) {
            if (dist.get(target) orelse undefined == 0 - 1 or dist.get(node) orelse undefined < dist.get(target) orelse undefined) {
                dist.put(target, dist.get(node) orelse undefined) catch unreachable;
            }
        }
        const adj: [][]const u8 = graph.get(node) orelse undefined;
        var i: i64 = 0;
        i = i;
        while (i < @as(i64, @intCast(adj.len))) {
            const next: []const u8 = adj[_idx(adj.len, i)];
            if (!(contains(visited, next))) {
                visited = blk: { var _tmp = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []const u8, visited)) catch |err| handleError(err); _tmp.append(@constCast(next)) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
                queue = blk: { var _tmp = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []const u8, queue)) catch |err| handleError(err); _tmp.append(@constCast(next)) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
                dist.put(next, dist.get(node) orelse undefined + 1) catch unreachable;
            }
            i = i + 1;
        }
    }
    return dist.get(target) orelse undefined;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        demo_graph_var = blk0: { var m = std.StringHashMap([][]const u8).init(std.heap.page_allocator); m.put("A", @constCast(&([3][]const u8{"B", "C", "E"}))[0..]) catch unreachable; m.put("B", @constCast(&([3][]const u8{"A", "D", "E"}))[0..]) catch unreachable; m.put("C", @constCast(&([3][]const u8{"A", "F", "G"}))[0..]) catch unreachable; m.put("D", @constCast(&([1][]const u8{"B"}))[0..]) catch unreachable; m.put("E", @constCast(&([3][]const u8{"A", "B", "D"}))[0..]) catch unreachable; m.put("F", @constCast(&([1][]const u8{"C"}))[0..]) catch unreachable; m.put("G", @constCast(&([1][]const u8{"C"}))[0..]) catch unreachable; break :blk0 m; };
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}
