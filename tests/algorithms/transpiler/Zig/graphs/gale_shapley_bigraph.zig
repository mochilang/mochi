// Generated by Mochi Zig transpiler on 2025-08-14 22:13 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const donor_pref_var: [][]i64 = @constCast(([4][]i64{@constCast(([4]i64{0, 1, 3, 2})[0..4]), @constCast(([4]i64{0, 2, 3, 1})[0..4]), @constCast(([4]i64{1, 0, 2, 3})[0..4]), @constCast(([4]i64{0, 3, 1, 2})[0..4])})[0..4]);
const recipient_pref_var: [][]i64 = @constCast(([4][]i64{@constCast(([4]i64{3, 1, 2, 0})[0..4]), @constCast(([4]i64{3, 1, 0, 2})[0..4]), @constCast(([4]i64{0, 3, 1, 2})[0..4]), @constCast(([4]i64{1, 0, 3, 2})[0..4])})[0..4]);

fn index_of(xs: []i64, x: i64) i64 {
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(xs.len))) {
        if (xs[_idx(xs.len, i)] == x) {
            return i;
        }
        i = i + 1;
    }
    return 0 - 1;
}

fn remove_item(xs: []i64, x: i64) []i64 {
    var res: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    res = res;
    var removed: bool = false;
    removed = removed;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(xs.len))) {
        if (!(removed) and xs[_idx(xs.len, i)] == x) {
            removed = true;
        } else {
            res = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, res)) catch |err| handleError(err); _tmp.append(xs[_idx(xs.len, i)]) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        }
        i = i + 1;
    }
    return res;
}

fn stable_matching(donor_pref_param: [][]i64, recipient_pref_param: [][]i64) []i64 {
    if (@as(i64, @intCast(donor_pref_param.len)) != @as(i64, @intCast(recipient_pref_param.len))) {
        @panic("unequal groups");
    }
    const n: i64 = @as(i64, @intCast(donor_pref_param.len));
    var unmatched: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    unmatched = unmatched;
    var i: i64 = 0;
    i = i;
    while (i < n) {
        unmatched = blk: { var _tmp_1 = std.ArrayList(i64).init(std.heap.page_allocator); _tmp_1.appendSlice(@as([]const i64, unmatched)) catch |err| handleError(err); _tmp_1.append(i) catch |err| handleError(err); break :blk (_tmp_1.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    var donor_record: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    donor_record = donor_record;
    i = 0;
    while (i < n) {
        donor_record = blk: { var _tmp_2 = std.ArrayList(i64).init(std.heap.page_allocator); _tmp_2.appendSlice(@as([]const i64, donor_record)) catch |err| handleError(err); _tmp_2.append(0 - 1) catch |err| handleError(err); break :blk (_tmp_2.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    var rec_record: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    rec_record = rec_record;
    i = 0;
    while (i < n) {
        rec_record = blk: { var _tmp_3 = std.ArrayList(i64).init(std.heap.page_allocator); _tmp_3.appendSlice(@as([]const i64, rec_record)) catch |err| handleError(err); _tmp_3.append(0 - 1) catch |err| handleError(err); break :blk (_tmp_3.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    var num_donations: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    num_donations = num_donations;
    i = 0;
    while (i < n) {
        num_donations = blk: { var _tmp_4 = std.ArrayList(i64).init(std.heap.page_allocator); _tmp_4.appendSlice(@as([]const i64, num_donations)) catch |err| handleError(err); _tmp_4.append(0) catch |err| handleError(err); break :blk (_tmp_4.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    while (@as(i64, @intCast(unmatched.len)) > 0) {
        const donor: i64 = unmatched[_idx(unmatched.len, 0)];
        const donor_preference: []i64 = donor_pref_param[_idx(donor_pref_param.len, donor)];
        const recipient: i64 = donor_preference[_idx(donor_preference.len, num_donations[_idx(num_donations.len, donor)])];
        num_donations[_idx(num_donations.len, donor)] = num_donations[_idx(num_donations.len, donor)] + 1;
        const rec_preference: []i64 = recipient_pref_param[_idx(recipient_pref_param.len, recipient)];
        const prev_donor: i64 = rec_record[_idx(rec_record.len, recipient)];
        if (prev_donor != -1) {
            const prev_index: i64 = index_of(rec_preference, prev_donor);
            const new_index: i64 = index_of(rec_preference, donor);
            if (prev_index > new_index) {
                rec_record[_idx(rec_record.len, recipient)] = donor;
                donor_record[_idx(donor_record.len, donor)] = recipient;
                unmatched = blk: { var _tmp_5 = std.ArrayList(i64).init(std.heap.page_allocator); _tmp_5.appendSlice(@as([]const i64, unmatched)) catch |err| handleError(err); _tmp_5.append(prev_donor) catch |err| handleError(err); break :blk (_tmp_5.toOwnedSlice() catch |err| handleError(err)); };
                unmatched = remove_item(unmatched, donor);
            }
        } else {
            rec_record[_idx(rec_record.len, recipient)] = donor;
            donor_record[_idx(donor_record.len, donor)] = recipient;
            unmatched = remove_item(unmatched, donor);
        }
    }
    return donor_record;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        std.debug.print("{s}\n", .{_str(stable_matching(donor_pref_var, recipient_pref_var))});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .pointer => |p| {
        if (p.size == .slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .@"struct" => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.heap.pageSize()));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
