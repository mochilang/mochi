// Generated by Mochi Zig transpiler on 2025-08-14 22:13 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const g1_var: [][]i64 = @constCast(([6][]i64{@constCast((&[_]i64{})[0..0]), @constCast(([2]i64{0, 3})[0..2]), @constCast(([2]i64{0, 4})[0..2]), @constCast(([1]i64{5})[0..1]), @constCast(([1]i64{5})[0..1]), @constCast((&[_]i64{})[0..0])})[0..6]);
const g2_var: [][]i64 = @constCast(([4][]i64{@constCast(([2]i64{1, 2})[0..2]), @constCast(([1]i64{2})[0..1]), @constCast(([2]i64{0, 3})[0..2]), @constCast(([1]i64{3})[0..1])})[0..4]);

fn depth_first_search(graph: [][]i64, vertex: i64, visited_param: []bool, rec_stk_param: []bool) bool {
    var visited_var: []bool = visited_param;
    visited_var = visited_var;
    var rec_stk_var: []bool = rec_stk_param;
    rec_stk_var = rec_stk_var;
    visited_var[_idx(visited_var.len, vertex)] = true;
    rec_stk_var[_idx(rec_stk_var.len, vertex)] = true;
    for (graph[_idx(graph.len, vertex)]) |__it0| {
        const node = __it0;
        if (!(visited_var[_idx(visited_var.len, node)])) {
            if (depth_first_search(graph, node, visited_var, rec_stk_var)) {
                return true;
            }
        } else {
            if (rec_stk_var[_idx(rec_stk_var.len, node)]) {
                return true;
            }
        }
    }
    rec_stk_var[_idx(rec_stk_var.len, vertex)] = false;
    return false;
}

fn check_cycle(graph: [][]i64) bool {
    const n: i64 = @as(i64, @intCast(graph.len));
    var visited: []bool = std.heap.page_allocator.alloc(bool, 0) catch unreachable;
    visited = visited;
    var rec_stk: []bool = std.heap.page_allocator.alloc(bool, 0) catch unreachable;
    rec_stk = rec_stk;
    var i: i64 = 0;
    i = i;
    while (i < n) {
        visited = blk: { var _tmp = std.ArrayList(bool).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const bool, visited)) catch |err| handleError(err); _tmp.append(false) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        rec_stk = blk: { var _tmp = std.ArrayList(bool).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const bool, rec_stk)) catch |err| handleError(err); _tmp.append(false) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    i = 0;
    while (i < n) {
        if (!(visited[_idx(visited.len, i)])) {
            if (depth_first_search(graph, i, visited, rec_stk)) {
                return true;
            }
        }
        i = i + 1;
    }
    return false;
}

fn print_bool(b: bool) void {
    if (b) {
        std.debug.print("{s}\n", .{_str(true)});
    } else {
        std.debug.print("{s}\n", .{_str(false)});
    }
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        print_bool(check_cycle(g1_var));
        print_bool(check_cycle(g2_var));
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .pointer => |p| {
        if (p.size == .slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .@"struct" => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.heap.pageSize()));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
