// Generated by Mochi Zig transpiler on 2025-08-14 16:41 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

var g_dfs_var: std.AutoHashMap(i64,[]i64) = std.AutoHashMap(i64,[]i64).init(std.heap.page_allocator);
var g_bfs_var: std.AutoHashMap(i64,[]i64) = std.AutoHashMap(i64,[]i64).init(std.heap.page_allocator);
var g_weighted_var: std.AutoHashMap(i64,[][]i64) = std.AutoHashMap(i64,[][]i64).init(std.heap.page_allocator);
var g_topo_var: std.AutoHashMap(i64,[]i64) = std.AutoHashMap(i64,[]i64).init(std.heap.page_allocator);
var matrix_var: [][]i64 = &[_][]i64{};
var g_prim_var: std.AutoHashMap(i64,[][]i64) = std.AutoHashMap(i64,[][]i64).init(std.heap.page_allocator);
var edges_kruskal_var: [][]i64 = &[_][]i64{};
var g_iso_var: std.AutoHashMap(i64,[]i64) = std.AutoHashMap(i64,[]i64).init(std.heap.page_allocator);
var iso_var: []i64 = &[_]i64{};

fn dfs(g: *const std.AutoHashMap(i64,[]i64), s: i64) void {
    var visited: std.AutoHashMap(i64,bool) = std.AutoHashMap(i64, bool).init(std.heap.page_allocator);
    visited = visited;
    var stack: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    stack = stack;
    visited.put(s, true) catch unreachable;
    stack = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, stack)) catch |err| handleError(err); _tmp.append(s) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
    std.debug.print("{s}\n", .{_str(s)});
    while (@as(i64, @intCast(stack.len)) > 0) {
        const u: i64 = stack[_idx(stack.len, @as(i64, @intCast(stack.len)) - 1)];
        var found: bool = false;
        found = found;
        for (g.get(u).?) |__it0| {
            const v = __it0;
            if (!(visited.contains(v))) {
                visited.put(v, true) catch unreachable;
                stack = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, stack)) catch |err| handleError(err); _tmp.append(v) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
                std.debug.print("{s}\n", .{_str(v)});
                found = true;
                break;
            }
        }
        if (!(found)) {
            stack = stack[@as(usize, @intCast(0))..@min(@as(usize, @intCast(@as(i64, @intCast(stack.len)) - 1)), @as(usize, @intCast(stack.len)))];
        }
    }
}

fn bfs(g: *const std.AutoHashMap(i64,[]i64), s: i64) void {
    var visited: std.AutoHashMap(i64,bool) = std.AutoHashMap(i64, bool).init(std.heap.page_allocator);
    visited = visited;
    var q: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    q = q;
    visited.put(s, true) catch unreachable;
    q = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, q)) catch |err| handleError(err); _tmp.append(s) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
    std.debug.print("{s}\n", .{_str(s)});
    while (@as(i64, @intCast(q.len)) > 0) {
        const u: i64 = q[_idx(q.len, 0)];
        q = q[@as(usize, @intCast(1))..@min(@as(usize, @intCast(@as(i64, @intCast(q.len)))), @as(usize, @intCast(q.len)))];
        for (g.get(u).?) |__it1| {
            const v = __it1;
            if (!(visited.contains(v))) {
                visited.put(v, true) catch unreachable;
                q = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, q)) catch |err| handleError(err); _tmp.append(v) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
                std.debug.print("{s}\n", .{_str(v)});
            }
        }
    }
}

fn sort_ints(a: []i64) []i64 {
    var arr: []i64 = blk: { const tmp = std.heap.page_allocator.alloc(i64, a.len) catch unreachable; @memcpy(tmp, a); break :blk tmp; };
    arr = arr;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(arr.len))) {
        var j: i64 = 0;
        j = j;
        while (j < @as(i64, @intCast(arr.len)) - i - 1) {
            if (arr[_idx(arr.len, j)] > arr[_idx(arr.len, j + 1)]) {
                const tmp: i64 = arr[_idx(arr.len, j)];
                arr[_idx(arr.len, j)] = arr[_idx(arr.len, j + 1)];
                arr[_idx(arr.len, j + 1)] = tmp;
            }
            j = j + 1;
        }
        i = i + 1;
    }
    return arr;
}

fn dijkstra(g: *const std.AutoHashMap(i64,[][]i64), s: i64) void {
    var dist: std.AutoHashMap(i64,i64) = std.AutoHashMap(i64, i64).init(std.heap.page_allocator);
    dist = dist;
    dist.put(s, 0) catch unreachable;
    var path: std.AutoHashMap(i64,i64) = std.AutoHashMap(i64, i64).init(std.heap.page_allocator);
    path = path;
    path.put(s, 0) catch unreachable;
    var known: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    known = known;
    var keys: []i64 = std.heap.page_allocator.dupe(i64, (&([1]i64{s}))[0..]) catch unreachable;
    keys = keys;
    while (@as(i64, @intCast(known.len)) < @as(i64, @intCast(keys.len))) {
        var mini: i64 = 100000;
        mini = mini;
        var u: i64 = 0 - 1;
        u = u;
        var i: i64 = 0;
        i = i;
        while (i < @as(i64, @intCast(keys.len))) {
            const k: i64 = keys[_idx(keys.len, i)];
            const d: i64 = dist.get(k).?;
            if (!(std.mem.indexOfScalar(i64, known, k) != null) and d < mini) {
                mini = d;
                u = k;
            }
            i = i + 1;
        }
        known = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, known)) catch |err| handleError(err); _tmp.append(u) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        for (g.get(u).?) |__it2| {
            const e = __it2;
            const v: i64 = e[_idx(e.len, 0)];
            const w: i64 = e[_idx(e.len, 1)];
            if (!(std.mem.indexOfScalar(i64, keys, v) != null)) {
                keys = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, keys)) catch |err| handleError(err); _tmp.append(v) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            }
            const alt: i64 = dist.get(u).? + w;
            const cur: i64 = if (dist.contains(v)) dist.get(v).? else 100000;
            if (!(std.mem.indexOfScalar(i64, known, v) != null) and alt < cur) {
                dist.put(v, alt) catch unreachable;
                path.put(v, u) catch unreachable;
            }
        }
    }
    const ordered: []i64 = sort_ints(keys);
    var idx: i64 = 0;
    idx = idx;
    while (idx < @as(i64, @intCast(ordered.len))) {
        const k: i64 = ordered[_idx(ordered.len, idx)];
        if (k != s) {
            std.debug.print("{s}\n", .{_str(dist.get(k).?)});
        }
        idx = idx + 1;
    }
}

fn topo(g: *const std.AutoHashMap(i64,[]i64), n: i64) void {
    var ind: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    ind = ind;
    var i: i64 = 0;
    i = i;
    while (i <= n) {
        ind = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, ind)) catch |err| handleError(err); _tmp.append(0) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    var node: i64 = 1;
    node = node;
    while (node <= n) {
        for (g.get(node).?) |__it3| {
            const v = __it3;
            ind[_idx(ind.len, v)] = ind[_idx(ind.len, v)] + 1;
        }
        node = node + 1;
    }
    var q: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    q = q;
    var j: i64 = 1;
    j = j;
    while (j <= n) {
        if (ind[_idx(ind.len, j)] == 0) {
            q = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, q)) catch |err| handleError(err); _tmp.append(j) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        }
        j = j + 1;
    }
    while (@as(i64, @intCast(q.len)) > 0) {
        const v: i64 = q[_idx(q.len, 0)];
        q = q[@as(usize, @intCast(1))..@min(@as(usize, @intCast(@as(i64, @intCast(q.len)))), @as(usize, @intCast(q.len)))];
        std.debug.print("{s}\n", .{_str(v)});
        for (g.get(v).?) |__it4| {
            const w = __it4;
            ind[_idx(ind.len, w)] = ind[_idx(ind.len, w)] - 1;
            if (ind[_idx(ind.len, w)] == 0) {
                q = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, q)) catch |err| handleError(err); _tmp.append(w) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            }
        }
    }
}

fn floyd(a: [][]i64) void {
    const n: i64 = @as(i64, @intCast(a.len));
    var dist: [][]i64 = std.heap.page_allocator.alloc([]i64, 0) catch unreachable;
    dist = dist;
    var i: i64 = 0;
    i = i;
    while (i < n) {
        var row: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
        row = row;
        var j: i64 = 0;
        j = j;
        while (j < n) {
            row = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, row)) catch |err| handleError(err); _tmp.append(a[_idx(a.len, i)][_idx(a[_idx(a.len, i)].len, j)]) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            j = j + 1;
        }
        dist = blk: { var _tmp = std.ArrayList([]i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []i64, dist)) catch |err| handleError(err); _tmp.append(row) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    var k: i64 = 0;
    k = k;
    while (k < n) {
        var ii: i64 = 0;
        ii = ii;
        while (ii < n) {
            var jj: i64 = 0;
            jj = jj;
            while (jj < n) {
                if (dist[_idx(dist.len, ii)][_idx(dist[_idx(dist.len, ii)].len, jj)] > dist[_idx(dist.len, ii)][_idx(dist[_idx(dist.len, ii)].len, k)] + dist[_idx(dist.len, k)][_idx(dist[_idx(dist.len, k)].len, jj)]) {
                    dist[_idx(dist.len, ii)][_idx(dist[_idx(dist.len, ii)].len, jj)] = dist[_idx(dist.len, ii)][_idx(dist[_idx(dist.len, ii)].len, k)] + dist[_idx(dist.len, k)][_idx(dist[_idx(dist.len, k)].len, jj)];
                }
                jj = jj + 1;
            }
            ii = ii + 1;
        }
        k = k + 1;
    }
    std.debug.print("{s}\n", .{_str(dist)});
}

fn prim(g: *const std.AutoHashMap(i64,[][]i64), s: i64, n: i64) i64 {
    var dist: std.AutoHashMap(i64,i64) = std.AutoHashMap(i64, i64).init(std.heap.page_allocator);
    dist = dist;
    dist.put(s, 0) catch unreachable;
    var known: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    known = known;
    var keys: []i64 = std.heap.page_allocator.dupe(i64, (&([1]i64{s}))[0..]) catch unreachable;
    keys = keys;
    var total: i64 = 0;
    total = total;
    while (@as(i64, @intCast(known.len)) < n) {
        var mini: i64 = 100000;
        mini = mini;
        var u: i64 = 0 - 1;
        u = u;
        var i: i64 = 0;
        i = i;
        while (i < @as(i64, @intCast(keys.len))) {
            const k: i64 = keys[_idx(keys.len, i)];
            const d: i64 = dist.get(k).?;
            if (!(std.mem.indexOfScalar(i64, known, k) != null) and d < mini) {
                mini = d;
                u = k;
            }
            i = i + 1;
        }
        known = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, known)) catch |err| handleError(err); _tmp.append(u) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        total = total + mini;
        for (g.get(u).?) |__it5| {
            const e = __it5;
            const v: i64 = e[_idx(e.len, 0)];
            const w: i64 = e[_idx(e.len, 1)];
            if (!(std.mem.indexOfScalar(i64, keys, v) != null)) {
                keys = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, keys)) catch |err| handleError(err); _tmp.append(v) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            }
            const cur: i64 = if (dist.contains(v)) dist.get(v).? else 100000;
            if (!(std.mem.indexOfScalar(i64, known, v) != null) and w < cur) {
                dist.put(v, w) catch unreachable;
            }
        }
    }
    return total;
}

fn sort_edges(edges: [][]i64) [][]i64 {
    var es: [][]i64 = blk: { const tmp = std.heap.page_allocator.alloc([]i64, edges.len) catch unreachable; @memcpy(tmp, edges); break :blk tmp; };
    es = es;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(es.len))) {
        var j: i64 = 0;
        j = j;
        while (j < @as(i64, @intCast(es.len)) - i - 1) {
            if (es[_idx(es.len, j)][_idx(es[_idx(es.len, j)].len, 2)] > es[_idx(es.len, j + 1)][_idx(es[_idx(es.len, j + 1)].len, 2)]) {
                const tmp: []i64 = es[_idx(es.len, j)];
                es[_idx(es.len, j)] = es[_idx(es.len, j + 1)];
                es[_idx(es.len, j + 1)] = tmp;
            }
            j = j + 1;
        }
        i = i + 1;
    }
    return es;
}

fn find_parent(parent: []i64, x: i64) i64 {
    var r: i64 = x;
    r = r;
    while (parent[_idx(parent.len, r)] != r) {
        r = parent[_idx(parent.len, r)];
    }
    return r;
}

fn union_parent(parent_param: []i64, a: i64, b: i64) void {
    var parent_var: []i64 = parent_param;
    parent_var = parent_var;
    parent_var[_idx(parent_var.len, a)] = b;
}

fn kruskal(edges: [][]i64, n: i64) i64 {
    const es: [][]i64 = sort_edges(edges);
    var parent: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    parent = parent;
    var i: i64 = 0;
    i = i;
    while (i <= n) {
        parent = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, parent)) catch |err| handleError(err); _tmp.append(i) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    var total: i64 = 0;
    total = total;
    var count: i64 = 0;
    count = count;
    var idx: i64 = 0;
    idx = idx;
    while (count < n - 1 and idx < @as(i64, @intCast(es.len))) {
        const e: []i64 = es[_idx(es.len, idx)];
        idx = idx + 1;
        const u: i64 = e[_idx(e.len, 0)];
        const v: i64 = e[_idx(e.len, 1)];
        const w: i64 = e[_idx(e.len, 2)];
        const ru: i64 = find_parent(parent, u);
        const rv: i64 = find_parent(parent, v);
        if (ru != rv) {
            union_parent(parent, ru, rv);
            total = total + w;
            count = count + 1;
        }
    }
    return total;
}

fn find_isolated_nodes(g: *const std.AutoHashMap(i64,[]i64), nodes: []i64) []i64 {
    var isolated: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    isolated = isolated;
    for (nodes) |__it6| {
        const node = __it6;
        if (@as(i64, @intCast(g.get(node).?.len)) == 0) {
            isolated = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, isolated)) catch |err| handleError(err); _tmp.append(node) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        }
    }
    return isolated;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        g_dfs_var = blk0: { var m = std.AutoHashMap(i64, []i64).init(std.heap.page_allocator); m.put(1, @constCast(&([2]i64{2, 3}))[0..]) catch unreachable; m.put(2, @constCast(&([2]i64{4, 5}))[0..]) catch unreachable; m.put(3, @constCast((&[_]i64{}))[0..]) catch unreachable; m.put(4, @constCast((&[_]i64{}))[0..]) catch unreachable; m.put(5, @constCast((&[_]i64{}))[0..]) catch unreachable; break :blk0 m; };
        g_bfs_var = blk1: { var m_1 = std.AutoHashMap(i64, []i64).init(std.heap.page_allocator); m_1.put(1, @constCast(&([2]i64{2, 3}))[0..]) catch unreachable; m_1.put(2, @constCast(&([2]i64{4, 5}))[0..]) catch unreachable; m_1.put(3, @constCast(&([2]i64{6, 7}))[0..]) catch unreachable; m_1.put(4, @constCast((&[_]i64{}))[0..]) catch unreachable; m_1.put(5, @constCast(&([1]i64{8}))[0..]) catch unreachable; m_1.put(6, @constCast((&[_]i64{}))[0..]) catch unreachable; m_1.put(7, @constCast((&[_]i64{}))[0..]) catch unreachable; m_1.put(8, @constCast((&[_]i64{}))[0..]) catch unreachable; break :blk1 m_1; };
        g_weighted_var = blk2: { var m_2 = std.AutoHashMap(i64, [][]i64).init(std.heap.page_allocator); m_2.put(1, @constCast(&([3][]i64{std.heap.page_allocator.dupe(i64, (&([2]i64{2, 7}))[0..]) catch unreachable, std.heap.page_allocator.dupe(i64, (&([2]i64{3, 9}))[0..]) catch unreachable, std.heap.page_allocator.dupe(i64, (&([2]i64{6, 14}))[0..]) catch unreachable}))[0..]) catch unreachable; m_2.put(2, @constCast(&([3][]i64{std.heap.page_allocator.dupe(i64, (&([2]i64{1, 7}))[0..]) catch unreachable, std.heap.page_allocator.dupe(i64, (&([2]i64{3, 10}))[0..]) catch unreachable, std.heap.page_allocator.dupe(i64, (&([2]i64{4, 15}))[0..]) catch unreachable}))[0..]) catch unreachable; m_2.put(3, @constCast(&([4][]i64{std.heap.page_allocator.dupe(i64, (&([2]i64{1, 9}))[0..]) catch unreachable, std.heap.page_allocator.dupe(i64, (&([2]i64{2, 10}))[0..]) catch unreachable, std.heap.page_allocator.dupe(i64, (&([2]i64{4, 11}))[0..]) catch unreachable, std.heap.page_allocator.dupe(i64, (&([2]i64{6, 2}))[0..]) catch unreachable}))[0..]) catch unreachable; m_2.put(4, @constCast(&([3][]i64{std.heap.page_allocator.dupe(i64, (&([2]i64{2, 15}))[0..]) catch unreachable, std.heap.page_allocator.dupe(i64, (&([2]i64{3, 11}))[0..]) catch unreachable, std.heap.page_allocator.dupe(i64, (&([2]i64{5, 6}))[0..]) catch unreachable}))[0..]) catch unreachable; m_2.put(5, @constCast(&([2][]i64{std.heap.page_allocator.dupe(i64, (&([2]i64{4, 6}))[0..]) catch unreachable, std.heap.page_allocator.dupe(i64, (&([2]i64{6, 9}))[0..]) catch unreachable}))[0..]) catch unreachable; m_2.put(6, @constCast(&([3][]i64{std.heap.page_allocator.dupe(i64, (&([2]i64{1, 14}))[0..]) catch unreachable, std.heap.page_allocator.dupe(i64, (&([2]i64{3, 2}))[0..]) catch unreachable, std.heap.page_allocator.dupe(i64, (&([2]i64{5, 9}))[0..]) catch unreachable}))[0..]) catch unreachable; break :blk2 m_2; };
        g_topo_var = blk3: { var m_3 = std.AutoHashMap(i64, []i64).init(std.heap.page_allocator); m_3.put(1, @constCast(&([2]i64{2, 3}))[0..]) catch unreachable; m_3.put(2, @constCast(&([1]i64{4}))[0..]) catch unreachable; m_3.put(3, @constCast(&([1]i64{4}))[0..]) catch unreachable; m_3.put(4, @constCast((&[_]i64{}))[0..]) catch unreachable; break :blk3 m_3; };
        matrix_var = std.heap.page_allocator.dupe([]i64, (&([4][]i64{std.heap.page_allocator.dupe(i64, (&([4]i64{0, 5, 9, 100000}))[0..]) catch unreachable, std.heap.page_allocator.dupe(i64, (&([4]i64{100000, 0, 2, 8}))[0..]) catch unreachable, std.heap.page_allocator.dupe(i64, (&([4]i64{100000, 100000, 0, 7}))[0..]) catch unreachable, std.heap.page_allocator.dupe(i64, (&([4]i64{4, 100000, 100000, 0}))[0..]) catch unreachable}))[0..]) catch unreachable;
        g_prim_var = blk4: { var m_4 = std.AutoHashMap(i64, [][]i64).init(std.heap.page_allocator); m_4.put(1, @constCast(&([2][]i64{std.heap.page_allocator.dupe(i64, (&([2]i64{2, 1}))[0..]) catch unreachable, std.heap.page_allocator.dupe(i64, (&([2]i64{3, 3}))[0..]) catch unreachable}))[0..]) catch unreachable; m_4.put(2, @constCast(&([3][]i64{std.heap.page_allocator.dupe(i64, (&([2]i64{1, 1}))[0..]) catch unreachable, std.heap.page_allocator.dupe(i64, (&([2]i64{3, 1}))[0..]) catch unreachable, std.heap.page_allocator.dupe(i64, (&([2]i64{4, 6}))[0..]) catch unreachable}))[0..]) catch unreachable; m_4.put(3, @constCast(&([3][]i64{std.heap.page_allocator.dupe(i64, (&([2]i64{1, 3}))[0..]) catch unreachable, std.heap.page_allocator.dupe(i64, (&([2]i64{2, 1}))[0..]) catch unreachable, std.heap.page_allocator.dupe(i64, (&([2]i64{4, 2}))[0..]) catch unreachable}))[0..]) catch unreachable; m_4.put(4, @constCast(&([2][]i64{std.heap.page_allocator.dupe(i64, (&([2]i64{2, 6}))[0..]) catch unreachable, std.heap.page_allocator.dupe(i64, (&([2]i64{3, 2}))[0..]) catch unreachable}))[0..]) catch unreachable; break :blk4 m_4; };
        edges_kruskal_var = std.heap.page_allocator.dupe([]i64, (&([4][]i64{std.heap.page_allocator.dupe(i64, (&([3]i64{1, 2, 1}))[0..]) catch unreachable, std.heap.page_allocator.dupe(i64, (&([3]i64{2, 3, 2}))[0..]) catch unreachable, std.heap.page_allocator.dupe(i64, (&([3]i64{1, 3, 2}))[0..]) catch unreachable, std.heap.page_allocator.dupe(i64, (&([3]i64{3, 4, 1}))[0..]) catch unreachable}))[0..]) catch unreachable;
        g_iso_var = blk5: { var m_5 = std.AutoHashMap(i64, []i64).init(std.heap.page_allocator); m_5.put(1, @constCast(&([2]i64{2, 3}))[0..]) catch unreachable; m_5.put(2, @constCast(&([2]i64{1, 3}))[0..]) catch unreachable; m_5.put(3, @constCast(&([2]i64{1, 2}))[0..]) catch unreachable; m_5.put(4, @constCast((&[_]i64{}))[0..]) catch unreachable; break :blk5 m_5; };
        iso_var = find_isolated_nodes(&g_iso_var, @constCast(&([4]i64{1, 2, 3, 4}))[0..]);
        dfs(&g_dfs_var, 1);
        bfs(&g_bfs_var, 1);
        dijkstra(&g_weighted_var, 1);
        topo(&g_topo_var, 4);
        floyd(matrix_var);
        std.debug.print("{s}\n", .{_str(prim(&g_prim_var, 1, 4))});
        std.debug.print("{s}\n", .{_str(kruskal(edges_kruskal_var, 4))});
        std.debug.print("{s}\n", .{_str(iso_var)});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
