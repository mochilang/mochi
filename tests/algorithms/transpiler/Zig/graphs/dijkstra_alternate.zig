// Generated by Mochi Zig transpiler on 2025-08-14 22:13 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const graph_var: [][]i64 = @constCast(([9][]i64{@constCast(([9]i64{0, 4, 0, 0, 0, 0, 0, 8, 0})[0..9]), @constCast(([9]i64{4, 0, 8, 0, 0, 0, 0, 11, 0})[0..9]), @constCast(([9]i64{0, 8, 0, 7, 0, 4, 0, 0, 2})[0..9]), @constCast(([9]i64{0, 0, 7, 0, 9, 14, 0, 0, 0})[0..9]), @constCast(([9]i64{0, 0, 0, 9, 0, 10, 0, 0, 0})[0..9]), @constCast(([9]i64{0, 0, 4, 14, 10, 0, 2, 0, 0})[0..9]), @constCast(([9]i64{0, 0, 0, 0, 0, 2, 0, 1, 6})[0..9]), @constCast(([9]i64{8, 11, 0, 0, 0, 0, 1, 0, 7})[0..9]), @constCast(([9]i64{0, 0, 2, 0, 0, 0, 6, 7, 0})[0..9])})[0..9]);
var distances_var: []i64 = &[_]i64{};

fn minimum_distance(distances_param: []i64, visited: []bool) i64 {
    var minimum: i64 = 10000000;
    minimum = minimum;
    var min_index: i64 = 0;
    min_index = min_index;
    var vertex: i64 = 0;
    vertex = vertex;
    while (vertex < @as(i64, @intCast(distances_param.len))) {
        if (distances_param[_idx(distances_param.len, vertex)] < minimum and visited[_idx(visited.len, vertex)] == false) {
            minimum = distances_param[_idx(distances_param.len, vertex)];
            min_index = vertex;
        }
        vertex = vertex + 1;
    }
    return min_index;
}

fn dijkstra(graph_param: [][]i64, source: i64) []i64 {
    const vertices: i64 = @as(i64, @intCast(graph_param.len));
    var distances_var_1: []i64 = &[_]i64{};
    distances_var_1 = distances_var_1;
    var i: i64 = 0;
    i = i;
    while (i < vertices) {
        distances_var_1 = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, distances_var_1)) catch |err| handleError(err); _tmp.append(10000000) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    distances_var_1[_idx(distances_var_1.len, source)] = 0;
    var visited: []bool = &[_]bool{};
    visited = visited;
    i = 0;
    while (i < vertices) {
        visited = blk: { var _tmp_1 = std.ArrayList(bool).init(std.heap.page_allocator); _tmp_1.appendSlice(@as([]const bool, visited)) catch |err| handleError(err); _tmp_1.append(false) catch |err| handleError(err); break :blk (_tmp_1.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    var count: i64 = 0;
    count = count;
    while (count < vertices) {
        const u: i64 = minimum_distance(distances_var_1, visited);
        visited[_idx(visited.len, u)] = true;
        var v: i64 = 0;
        v = v;
        while (v < vertices) {
            if (graph_param[_idx(graph_param.len, u)][_idx(graph_param[_idx(graph_param.len, u)].len, v)] > 0 and visited[_idx(visited.len, v)] == false and distances_var_1[_idx(distances_var_1.len, v)] > distances_var_1[_idx(distances_var_1.len, u)] + graph_param[_idx(graph_param.len, u)][_idx(graph_param[_idx(graph_param.len, u)].len, v)]) {
                distances_var_1[_idx(distances_var_1.len, v)] = distances_var_1[_idx(distances_var_1.len, u)] + graph_param[_idx(graph_param.len, u)][_idx(graph_param[_idx(graph_param.len, u)].len, v)];
            }
            v = v + 1;
        }
        count = count + 1;
    }
    return distances_var_1;
}

fn print_solution(distances_param: []i64) void {
    std.debug.print("{s}\n", .{"Vertex \t Distance from Source"});
    var v: i64 = 0;
    v = v;
    while (v < @as(i64, @intCast(distances_param.len))) {
        std.debug.print("{s}\n", .{_concat_string(_concat_string(_str(v), "\t\t"), _str(distances_param[_idx(distances_param.len, v)]))});
        v = v + 1;
    }
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        distances_var = dijkstra(graph_var, 0);
        print_solution(distances_var);
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .pointer => |p| {
        if (p.size == .slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .@"struct" => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.heap.pageSize()));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
