// Generated by Mochi Zig transpiler on 2025-08-14 22:13 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const Graph = struct {
    vertex: std.AutoHashMap(i64,[]i64),
    size: i64,
};

var g_var_1: Graph = undefined;

fn add_edge(g_param: *Graph, from_vertex: i64, to_vertex: i64) Graph {
    var v: std.AutoHashMap(i64,[]i64) = g_param.vertex;
    v = v;
    if (v.contains(from_vertex)) {
        var lst: []i64 = v.get(from_vertex).?;
        lst = lst;
        lst = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, lst)) catch |err| handleError(err); _tmp.append(to_vertex) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        v.put(from_vertex, lst) catch unreachable;
    } else {
        v.put(from_vertex, blk0: { var _tmp_1 = std.ArrayList(i64).init(std.heap.page_allocator); _tmp_1.append(to_vertex) catch unreachable; break :blk0 (_tmp_1.toOwnedSlice() catch unreachable); }) catch unreachable;
    }
    g_param.vertex = v;
    if (from_vertex + 1 > g_param.size) {
        g_param.size = from_vertex + 1;
    }
    if (to_vertex + 1 > g_param.size) {
        g_param.size = to_vertex + 1;
    }
    return g_param.*;
}

fn list_to_string(lst: []i64) []const u8 {
    var res: []const u8 = "";
    res = res;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(lst.len))) {
        res = _concat_string(res, _str(lst[_idx(lst.len, i)]));
        if (i < @as(i64, @intCast(lst.len)) - 1) {
            res = _concat_string(res, " ");
        }
        i = i + 1;
    }
    return res;
}

fn list_to_arrow(lst: []i64) []const u8 {
    var res: []const u8 = "";
    res = res;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(lst.len))) {
        res = _concat_string(res, _str(lst[_idx(lst.len, i)]));
        if (i < @as(i64, @intCast(lst.len)) - 1) {
            res = _concat_string(res, " -> ");
        }
        i = i + 1;
    }
    return res;
}

fn print_graph(g_param: Graph) void {
    std.debug.print("{s}\n", .{_str(g_param.vertex)});
    var i: i64 = 0;
    i = i;
    while (i < g_param.size) {
        var edges: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
        edges = edges;
        if (g_param.vertex.contains(i)) {
            edges = g_param.vertex.get(i).?;
        }
        const line: []const u8 = _concat_string(_concat_string(_str(i), "  ->  "), list_to_arrow(edges));
        std.debug.print("{s}\n", .{line});
        i = i + 1;
    }
}

fn dfs_recursive(g_param: Graph, start_vertex: i64, visited_param: []bool, order_param: []i64) []i64 {
    var visited_var: []bool = visited_param;
    visited_var = visited_var;
    var order_var: []i64 = order_param;
    order_var = order_var;
    visited_var[_idx(visited_var.len, start_vertex)] = true;
    order_var = blk: { var _tmp_2 = std.ArrayList(i64).init(std.heap.page_allocator); _tmp_2.appendSlice(@as([]const i64, order_var)) catch |err| handleError(err); _tmp_2.append(start_vertex) catch |err| handleError(err); break :blk (_tmp_2.toOwnedSlice() catch |err| handleError(err)); };
    if (g_param.vertex.contains(start_vertex)) {
        const neighbors: []i64 = g_param.vertex.get(start_vertex).?;
        var i: i64 = 0;
        i = i;
        while (i < @as(i64, @intCast(neighbors.len))) {
            const nb: i64 = neighbors[_idx(neighbors.len, i)];
            if (!(visited_var[_idx(visited_var.len, nb)])) {
                order_var = dfs_recursive(g_param, nb, visited_var, order_var);
            }
            i = i + 1;
        }
    }
    return order_var;
}

fn dfs(g_param: Graph) []i64 {
    const n: i64 = g_param.size;
    var visited: []bool = std.heap.page_allocator.alloc(bool, 0) catch unreachable;
    visited = visited;
    var i: i64 = 0;
    i = i;
    while (i < n) {
        visited = blk: { var _tmp_3 = std.ArrayList(bool).init(std.heap.page_allocator); _tmp_3.appendSlice(@as([]const bool, visited)) catch |err| handleError(err); _tmp_3.append(false) catch |err| handleError(err); break :blk (_tmp_3.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    var order: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    order = order;
    i = 0;
    while (i < n) {
        if (!(visited[_idx(visited.len, i)])) {
            order = dfs_recursive(g_param, i, visited, order);
        }
        i = i + 1;
    }
    return order;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        g_var_1 = .{ .vertex = std.AutoHashMap(i64, []i64).init(std.heap.page_allocator), .size = 0 };
        g_var_1 = add_edge(&g_var_1, 0, 1);
        g_var_1 = add_edge(&g_var_1, 0, 2);
        g_var_1 = add_edge(&g_var_1, 1, 2);
        g_var_1 = add_edge(&g_var_1, 2, 0);
        g_var_1 = add_edge(&g_var_1, 2, 3);
        g_var_1 = add_edge(&g_var_1, 3, 3);
        print_graph(g_var_1);
        std.debug.print("{s}\n", .{"DFS:"});
        std.debug.print("{s}\n", .{list_to_string(dfs(g_var_1))});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .pointer => |p| {
        if (p.size == .slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .@"struct" => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.heap.pageSize()));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
