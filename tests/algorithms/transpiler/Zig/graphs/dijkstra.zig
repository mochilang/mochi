// Generated by Mochi Zig transpiler on 2025-08-14 22:13 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const NodeCost = struct {
    node: []const u8,
    cost: i64,
};

var G_var: std.StringHashMap(std.StringHashMap(i64)) = std.StringHashMap(std.StringHashMap(i64)).init(std.heap.page_allocator);
var heap_var_1: []NodeCost = &[_]NodeCost{};
var visited_var_1: std.StringHashMap(bool) = std.StringHashMap(bool).init(std.heap.page_allocator);
var result_var_1: i64 = 0;
var G2_var: std.StringHashMap(std.StringHashMap(i64)) = std.StringHashMap(std.StringHashMap(i64)).init(std.heap.page_allocator);
var heap2_var_1: []NodeCost = &[_]NodeCost{};
var visited2_var_1: std.StringHashMap(bool) = std.StringHashMap(bool).init(std.heap.page_allocator);
var result2_var_1: i64 = 0;
var G3_var: std.StringHashMap(std.StringHashMap(i64)) = std.StringHashMap(std.StringHashMap(i64)).init(std.heap.page_allocator);
var heap3_var_1: []NodeCost = &[_]NodeCost{};
var visited3_var_1: std.StringHashMap(bool) = std.StringHashMap(bool).init(std.heap.page_allocator);
var result3_var_1: i64 = 0;

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        G_var = blk0: { var m = std.StringHashMap(std.StringHashMap(i64)).init(std.heap.page_allocator); m.put("A", blk1: { var m_1 = std.StringHashMap(i64).init(std.heap.page_allocator); m_1.put("B", 2) catch unreachable; m_1.put("C", 5) catch unreachable; break :blk1 m_1; }) catch unreachable; m.put("B", blk2: { var m_2 = std.StringHashMap(i64).init(std.heap.page_allocator); m_2.put("A", 2) catch unreachable; m_2.put("D", 3) catch unreachable; m_2.put("E", 1) catch unreachable; m_2.put("F", 1) catch unreachable; break :blk2 m_2; }) catch unreachable; m.put("C", blk3: { var m_3 = std.StringHashMap(i64).init(std.heap.page_allocator); m_3.put("A", 5) catch unreachable; m_3.put("F", 3) catch unreachable; break :blk3 m_3; }) catch unreachable; m.put("D", blk4: { var m_4 = std.StringHashMap(i64).init(std.heap.page_allocator); m_4.put("B", 3) catch unreachable; break :blk4 m_4; }) catch unreachable; m.put("E", blk5: { var m_5 = std.StringHashMap(i64).init(std.heap.page_allocator); m_5.put("B", 4) catch unreachable; m_5.put("F", 3) catch unreachable; break :blk5 m_5; }) catch unreachable; m.put("F", blk6: { var m_6 = std.StringHashMap(i64).init(std.heap.page_allocator); m_6.put("C", 3) catch unreachable; m_6.put("E", 3) catch unreachable; break :blk6 m_6; }) catch unreachable; break :blk0 m; };
        heap_var_1 = blk7: { var _tmp = std.ArrayList(NodeCost).init(std.heap.page_allocator); _tmp.append(.{ .node = "E", .cost = 0 }) catch unreachable; break :blk7 (_tmp.toOwnedSlice() catch unreachable); };
        visited_var_1 = std.StringHashMap(bool).init(std.heap.page_allocator);
        result_var_1 = 0 - 1;
        G2_var = blk8: { var m_7 = std.StringHashMap(std.StringHashMap(i64)).init(std.heap.page_allocator); m_7.put("B", blk9: { var m_8 = std.StringHashMap(i64).init(std.heap.page_allocator); m_8.put("C", 1) catch unreachable; break :blk9 m_8; }) catch unreachable; m_7.put("C", blk10: { var m_9 = std.StringHashMap(i64).init(std.heap.page_allocator); m_9.put("D", 1) catch unreachable; break :blk10 m_9; }) catch unreachable; m_7.put("D", blk11: { var m_10 = std.StringHashMap(i64).init(std.heap.page_allocator); m_10.put("F", 1) catch unreachable; break :blk11 m_10; }) catch unreachable; m_7.put("E", blk12: { var m_11 = std.StringHashMap(i64).init(std.heap.page_allocator); m_11.put("B", 1) catch unreachable; m_11.put("F", 3) catch unreachable; break :blk12 m_11; }) catch unreachable; m_7.put("F", std.StringHashMap(i64).init(std.heap.page_allocator)) catch unreachable; break :blk8 m_7; };
        heap2_var_1 = blk13: { var _tmp_1 = std.ArrayList(NodeCost).init(std.heap.page_allocator); _tmp_1.append(.{ .node = "E", .cost = 0 }) catch unreachable; break :blk13 (_tmp_1.toOwnedSlice() catch unreachable); };
        visited2_var_1 = std.StringHashMap(bool).init(std.heap.page_allocator);
        result2_var_1 = 0 - 1;
        G3_var = blk14: { var m_12 = std.StringHashMap(std.StringHashMap(i64)).init(std.heap.page_allocator); m_12.put("B", blk15: { var m_13 = std.StringHashMap(i64).init(std.heap.page_allocator); m_13.put("C", 1) catch unreachable; break :blk15 m_13; }) catch unreachable; m_12.put("C", blk16: { var m_14 = std.StringHashMap(i64).init(std.heap.page_allocator); m_14.put("D", 1) catch unreachable; break :blk16 m_14; }) catch unreachable; m_12.put("D", blk17: { var m_15 = std.StringHashMap(i64).init(std.heap.page_allocator); m_15.put("F", 1) catch unreachable; break :blk17 m_15; }) catch unreachable; m_12.put("E", blk18: { var m_16 = std.StringHashMap(i64).init(std.heap.page_allocator); m_16.put("B", 1) catch unreachable; m_16.put("G", 2) catch unreachable; break :blk18 m_16; }) catch unreachable; m_12.put("F", std.StringHashMap(i64).init(std.heap.page_allocator)) catch unreachable; m_12.put("G", blk19: { var m_17 = std.StringHashMap(i64).init(std.heap.page_allocator); m_17.put("F", 1) catch unreachable; break :blk19 m_17; }) catch unreachable; break :blk14 m_12; };
        heap3_var_1 = blk20: { var _tmp_2 = std.ArrayList(NodeCost).init(std.heap.page_allocator); _tmp_2.append(.{ .node = "E", .cost = 0 }) catch unreachable; break :blk20 (_tmp_2.toOwnedSlice() catch unreachable); };
        visited3_var_1 = std.StringHashMap(bool).init(std.heap.page_allocator);
        result3_var_1 = 0 - 1;
        while (@as(i64, @intCast(heap_var_1.len)) > 0) {
            var best_idx: i64 = 0;
            best_idx = best_idx;
            var i: i64 = 1;
            i = i;
            while (i < @as(i64, @intCast(heap_var_1.len))) {
                if (heap_var_1[_idx(heap_var_1.len, i)].cost < heap_var_1[_idx(heap_var_1.len, best_idx)].cost) {
                    best_idx = i;
                }
                i = i + 1;
            }
            const best: NodeCost = heap_var_1[_idx(heap_var_1.len, best_idx)];
            var new_heap: []NodeCost = std.heap.page_allocator.alloc(NodeCost, 0) catch unreachable;
            new_heap = new_heap;
            var j: i64 = 0;
            j = j;
            while (j < @as(i64, @intCast(heap_var_1.len))) {
                if (j != best_idx) {
                    new_heap = blk: { var _tmp_3 = std.ArrayList(NodeCost).init(std.heap.page_allocator); _tmp_3.appendSlice(@as([]const NodeCost, new_heap)) catch |err| handleError(err); _tmp_3.append(heap_var_1[_idx(heap_var_1.len, j)]) catch |err| handleError(err); break :blk (_tmp_3.toOwnedSlice() catch |err| handleError(err)); };
                }
                j = j + 1;
            }
            heap_var_1 = new_heap;
            const cost: i64 = best.cost;
            if (visited_var_1.contains(best.node)) {
                continue;
            }
            visited_var_1.put(best.node, true) catch unreachable;
            if (std.mem.eql(u8, best.node, "C")) {
                result_var_1 = cost;
                break;
            }
            var __mapit1 = G_var.get(best.node).?.keyIterator();
            while (__mapit1.next()) |__it0| {
                const v = __it0.*;
                if (visited_var_1.contains(v)) {
                    continue;
                }
                const next_cost: i64 = cost + G_var.get(best.node).?.get(v).?;
                heap_var_1 = blk: { var _tmp_4 = std.ArrayList(NodeCost).init(std.heap.page_allocator); _tmp_4.appendSlice(@as([]const NodeCost, heap_var_1)) catch |err| handleError(err); _tmp_4.append(.{ .node = v, .cost = next_cost }) catch |err| handleError(err); break :blk (_tmp_4.toOwnedSlice() catch |err| handleError(err)); };
            }
        }
        std.debug.print("{s}\n", .{_str(result_var_1)});
        while (@as(i64, @intCast(heap2_var_1.len)) > 0) {
            var best2_idx: i64 = 0;
            best2_idx = best2_idx;
            var _i2: i64 = 1;
            _i2 = _i2;
            while (_i2 < @as(i64, @intCast(heap2_var_1.len))) {
                if (heap2_var_1[_idx(heap2_var_1.len, _i2)].cost < heap2_var_1[_idx(heap2_var_1.len, best2_idx)].cost) {
                    best2_idx = _i2;
                }
                _i2 = _i2 + 1;
            }
            const best2: NodeCost = heap2_var_1[_idx(heap2_var_1.len, best2_idx)];
            var new_heap2: []NodeCost = std.heap.page_allocator.alloc(NodeCost, 0) catch unreachable;
            new_heap2 = new_heap2;
            var j2: i64 = 0;
            j2 = j2;
            while (j2 < @as(i64, @intCast(heap2_var_1.len))) {
                if (j2 != best2_idx) {
                    new_heap2 = blk: { var _tmp_5 = std.ArrayList(NodeCost).init(std.heap.page_allocator); _tmp_5.appendSlice(@as([]const NodeCost, new_heap2)) catch |err| handleError(err); _tmp_5.append(heap2_var_1[_idx(heap2_var_1.len, j2)]) catch |err| handleError(err); break :blk (_tmp_5.toOwnedSlice() catch |err| handleError(err)); };
                }
                j2 = j2 + 1;
            }
            heap2_var_1 = new_heap2;
            const cost2: i64 = best2.cost;
            if (visited2_var_1.contains(best2.node)) {
                continue;
            }
            visited2_var_1.put(best2.node, true) catch unreachable;
            if (std.mem.eql(u8, best2.node, "F")) {
                result2_var_1 = cost2;
                break;
            }
            var __mapit3 = G2_var.get(best2.node).?.keyIterator();
            while (__mapit3.next()) |__it2| {
                const v2 = __it2.*;
                if (visited2_var_1.contains(v2)) {
                    continue;
                }
                const next_cost2: i64 = cost2 + G2_var.get(best2.node).?.get(v2).?;
                heap2_var_1 = blk: { var _tmp_6 = std.ArrayList(NodeCost).init(std.heap.page_allocator); _tmp_6.appendSlice(@as([]const NodeCost, heap2_var_1)) catch |err| handleError(err); _tmp_6.append(.{ .node = v2, .cost = next_cost2 }) catch |err| handleError(err); break :blk (_tmp_6.toOwnedSlice() catch |err| handleError(err)); };
            }
        }
        std.debug.print("{s}\n", .{_str(result2_var_1)});
        while (@as(i64, @intCast(heap3_var_1.len)) > 0) {
            var best3_idx: i64 = 0;
            best3_idx = best3_idx;
            var _i3: i64 = 1;
            _i3 = _i3;
            while (_i3 < @as(i64, @intCast(heap3_var_1.len))) {
                if (heap3_var_1[_idx(heap3_var_1.len, _i3)].cost < heap3_var_1[_idx(heap3_var_1.len, best3_idx)].cost) {
                    best3_idx = _i3;
                }
                _i3 = _i3 + 1;
            }
            const best3: NodeCost = heap3_var_1[_idx(heap3_var_1.len, best3_idx)];
            var new_heap3: []NodeCost = std.heap.page_allocator.alloc(NodeCost, 0) catch unreachable;
            new_heap3 = new_heap3;
            var j3: i64 = 0;
            j3 = j3;
            while (j3 < @as(i64, @intCast(heap3_var_1.len))) {
                if (j3 != best3_idx) {
                    new_heap3 = blk: { var _tmp_7 = std.ArrayList(NodeCost).init(std.heap.page_allocator); _tmp_7.appendSlice(@as([]const NodeCost, new_heap3)) catch |err| handleError(err); _tmp_7.append(heap3_var_1[_idx(heap3_var_1.len, j3)]) catch |err| handleError(err); break :blk (_tmp_7.toOwnedSlice() catch |err| handleError(err)); };
                }
                j3 = j3 + 1;
            }
            heap3_var_1 = new_heap3;
            const cost3: i64 = best3.cost;
            if (visited3_var_1.contains(best3.node)) {
                continue;
            }
            visited3_var_1.put(best3.node, true) catch unreachable;
            if (std.mem.eql(u8, best3.node, "F")) {
                result3_var_1 = cost3;
                break;
            }
            var __mapit5 = G3_var.get(best3.node).?.keyIterator();
            while (__mapit5.next()) |__it4| {
                const v3 = __it4.*;
                if (visited3_var_1.contains(v3)) {
                    continue;
                }
                const next_cost3: i64 = cost3 + G3_var.get(best3.node).?.get(v3).?;
                heap3_var_1 = blk: { var _tmp_8 = std.ArrayList(NodeCost).init(std.heap.page_allocator); _tmp_8.appendSlice(@as([]const NodeCost, heap3_var_1)) catch |err| handleError(err); _tmp_8.append(.{ .node = v3, .cost = next_cost3 }) catch |err| handleError(err); break :blk (_tmp_8.toOwnedSlice() catch |err| handleError(err)); };
            }
        }
        std.debug.print("{s}\n", .{_str(result3_var_1)});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .pointer => |p| {
        if (p.size == .slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .@"struct" => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.heap.pageSize()));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
