// Generated by Mochi Zig transpiler on 2025-08-16 13:51 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn dfs(u: i64, graph: [][]i64, visit_param: []bool, stack_param: []i64) []i64 {
    var visit_var: []bool = visit_param;
    visit_var = visit_var;
    var stack_var: []i64 = stack_param;
    stack_var = stack_var;
    if (visit_var[_idx(visit_var.len, u)]) {
        return stack_var;
    }
    visit_var[_idx(visit_var.len, u)] = true;
    for (graph[_idx(graph.len, u)]) |__it0| {
        const v_3 = __it0;
        stack_var = dfs(v_3, graph, visit_var, stack_var);
    }
    stack_var = blk0: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, stack_var)) catch |err| handleError(err); _tmp.append(u) catch |err| handleError(err); break :blk0 (_tmp.toOwnedSlice() catch |err| handleError(err)); };
    return stack_var;
}

fn dfs2(u_1: i64, reversed_graph: [][]i64, visit_param_1: []bool, component_param: []i64) []i64 {
    var visit_var_1: []bool = visit_param_1;
    visit_var_1 = visit_var_1;
    var component_var: []i64 = component_param;
    component_var = component_var;
    if (visit_var_1[_idx(visit_var_1.len, u_1)]) {
        return component_var;
    }
    visit_var_1[_idx(visit_var_1.len, u_1)] = true;
    component_var = blk1: { var _tmp_1 = std.ArrayList(i64).init(std.heap.page_allocator); _tmp_1.appendSlice(@as([]const i64, component_var)) catch |err| handleError(err); _tmp_1.append(u_1) catch |err| handleError(err); break :blk1 (_tmp_1.toOwnedSlice() catch |err| handleError(err)); };
    for (reversed_graph[_idx(reversed_graph.len, u_1)]) |__it1| {
        const v_1 = __it1;
        component_var = dfs2(v_1, reversed_graph, visit_var_1, component_var);
    }
    return component_var;
}

fn kosaraju(graph_1: [][]i64) [][]i64 {
    const n: i64 = @as(i64, @intCast(graph_1.len));
    var reversed_graph_1: [][]i64 = std.heap.page_allocator.alloc([]i64, 0) catch unreachable;
    reversed_graph_1 = reversed_graph_1;
    var i: i64 = 0;
    i = i;
    while (i < n) {
        reversed_graph_1 = blk2: { var _tmp_2 = std.ArrayList([]i64).init(std.heap.page_allocator); _tmp_2.appendSlice(@as([]const []i64, reversed_graph_1)) catch |err| handleError(err); _tmp_2.append(@constCast((&[_]i64{})[0..0])) catch |err| handleError(err); break :blk2 (_tmp_2.toOwnedSlice() catch |err| handleError(err)); };
        i = i +% 1;
    }
    i = 0;
    while (i < n) {
        for (graph_1[_idx(graph_1.len, i)]) |__it2| {
            const v_2 = __it2;
            reversed_graph_1[_idx(reversed_graph_1.len, v_2)] = blk3: { var _tmp_3 = std.ArrayList(i64).init(std.heap.page_allocator); _tmp_3.appendSlice(@as([]const i64, reversed_graph_1[_idx(reversed_graph_1.len, v_2)])) catch |err| handleError(err); _tmp_3.append(i) catch |err| handleError(err); break :blk3 (_tmp_3.toOwnedSlice() catch |err| handleError(err)); };
        }
        i = i +% 1;
    }
    var visit: []bool = std.heap.page_allocator.alloc(bool, 0) catch unreachable;
    visit = visit;
    i = 0;
    while (i < n) {
        visit = blk4: { var _tmp_4 = std.ArrayList(bool).init(std.heap.page_allocator); _tmp_4.appendSlice(@as([]const bool, visit)) catch |err| handleError(err); _tmp_4.append(false) catch |err| handleError(err); break :blk4 (_tmp_4.toOwnedSlice() catch |err| handleError(err)); };
        i = i +% 1;
    }
    var stack: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    stack = stack;
    i = 0;
    while (i < n) {
        if (visit[_idx(visit.len, i)] == false) {
            stack = dfs(i, graph_1, visit, stack);
        }
        i = i +% 1;
    }
    i = 0;
    while (i < n) {
        visit[_idx(visit.len, i)] = false;
        i = i +% 1;
    }
    var scc: [][]i64 = std.heap.page_allocator.alloc([]i64, 0) catch unreachable;
    scc = scc;
    var idx: i64 = @as(i64, @intCast(stack.len)) -% 1;
    idx = idx;
    while (idx >= 0) {
        const node: i64 = stack[_idx(stack.len, idx)];
        if (visit[_idx(visit.len, node)] == false) {
            var component: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
            component = component;
            component = dfs2(node, reversed_graph_1, visit, component);
            scc = blk5: { var _tmp_5 = std.ArrayList([]i64).init(std.heap.page_allocator); _tmp_5.appendSlice(@as([]const []i64, scc)) catch |err| handleError(err); _tmp_5.append(component) catch |err| handleError(err); break :blk5 (_tmp_5.toOwnedSlice() catch |err| handleError(err)); };
        }
        idx = idx -% 1;
    }
    return scc;
}

fn mochi_main() void {
    const graph_2: [][]i64 = @constCast(([5][]i64{@constCast(([1]i64{1})[0..1]), @constCast(([1]i64{2})[0..1]), @constCast(([2]i64{0, 3})[0..2]), @constCast(([1]i64{4})[0..1]), @constCast((&[_]i64{})[0..0])})[0..5]);
    const comps: [][]i64 = kosaraju(graph_2);
    var i_1: i64 = 0;
    i_1 = i_1;
    while (i_1 < @as(i64, @intCast(comps.len))) {
        std.debug.print("{d}\n", .{comps[_idx(comps.len, i_1)]});
        i_1 = i_1 +% 1;
    }
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        mochi_main();
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
