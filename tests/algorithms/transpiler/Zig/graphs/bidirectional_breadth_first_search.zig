// Generated by Mochi Zig transpiler on 2025-08-14 17:09 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const Node = struct {
    pos: []const u8,
    path: [][]const u8,
};

var grid_var: [][]i64 = &[_][]i64{};
var delta_var: [][]i64 = &[_][]i64{};
var start_var: []const u8 = &[_]u8{};
var goal_var: []const u8 = &[_]u8{};
var path1_var: [][]const u8 = &[_][]const u8{};
var path2_var: [][]const u8 = &[_][]const u8{};

fn key(y: i64, x: i64) []const u8 {
    return _concat_string(_concat_string(_str(y), ","), _str(x));
}

fn parse_int(s: []const u8) i64 {
    var value: i64 = 0;
    value = value;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(s.len))) {
        const c: []const u8 = s[_idx(s.len, i).._idx(s.len, i) + 1];
        value = value * 10 + (std.fmt.parseInt(i64, c, 10) catch 0);
        i = i + 1;
    }
    return value;
}

fn parse_key(k: []const u8) []i64 {
    var idx: i64 = 0;
    idx = idx;
    while (idx < @as(i64, @intCast(k.len)) and !std.mem.eql(u8, k[@as(usize, @intCast(idx))..@min(@as(usize, @intCast(idx + 1)), @as(usize, @intCast(k.len)))], ",")) {
        idx = idx + 1;
    }
    const y: i64 = parse_int(k[@as(usize, @intCast(0))..@min(@as(usize, @intCast(idx)), @as(usize, @intCast(k.len)))]);
    const x: i64 = parse_int(k[@as(usize, @intCast(idx + 1))..@min(@as(usize, @intCast(@as(i64, @intCast(k.len)))), @as(usize, @intCast(k.len)))]);
    return blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.append(y) catch |err| handleError(err); _tmp.append(x) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
}

fn neighbors(pos: []const u8) [][]const u8 {
    const coords: []i64 = parse_key(pos);
    const y: i64 = coords[_idx(coords.len, 0)];
    const x: i64 = coords[_idx(coords.len, 1)];
    var res: [][]const u8 = std.heap.page_allocator.alloc([]const u8, 0) catch unreachable;
    res = res;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(delta_var.len))) {
        const ny: i64 = y + delta_var[_idx(delta_var.len, i)][_idx(delta_var[_idx(delta_var.len, i)].len, 0)];
        const nx: i64 = x + delta_var[_idx(delta_var.len, i)][_idx(delta_var[_idx(delta_var.len, i)].len, 1)];
        if (ny >= 0 and ny < @as(i64, @intCast(grid_var.len)) and nx >= 0 and nx < @as(i64, @intCast(grid_var[_idx(grid_var.len, 0)].len))) {
            if (grid_var[_idx(grid_var.len, ny)][_idx(grid_var[_idx(grid_var.len, ny)].len, nx)] == 0) {
                res = blk: { var _tmp = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []const u8, res)) catch |err| handleError(err); _tmp.append(@constCast(key(ny, nx))) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            }
        }
        i = i + 1;
    }
    return res;
}

fn reverse_list(lst: [][]const u8) [][]const u8 {
    var res: [][]const u8 = std.heap.page_allocator.alloc([]const u8, 0) catch unreachable;
    res = res;
    var i: i64 = @as(i64, @intCast(lst.len)) - 1;
    i = i;
    while (i >= 0) {
        res = blk: { var _tmp = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []const u8, res)) catch |err| handleError(err); _tmp.append(@constCast(lst[_idx(lst.len, i)])) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i - 1;
    }
    return res;
}

fn bfs(start_param: []const u8, goal_param: []const u8) [][]const u8 {
    var queue: []Node = std.heap.page_allocator.alloc(Node, 0) catch unreachable;
    queue = queue;
    queue = blk: { var _tmp = std.ArrayList(Node).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const Node, queue)) catch |err| handleError(err); _tmp.append(.{ .pos = start_param, .path = @constCast(&([1][]const u8{start_param}))[0..] }) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
    var head: i64 = 0;
    head = head;
    var visited: std.StringHashMap(bool) = blk0: { var m = std.StringHashMap(bool).init(std.heap.page_allocator); m.put("start_param", true) catch unreachable; break :blk0 m; };
    visited = visited;
    while (head < @as(i64, @intCast(queue.len))) {
        const node: Node = queue[_idx(queue.len, head)];
        head = head + 1;
        if (std.mem.eql(u8, node.pos, goal_param)) {
            return node.path;
        }
        const neigh: [][]const u8 = neighbors(node.pos);
        var i: i64 = 0;
        i = i;
        while (i < @as(i64, @intCast(neigh.len))) {
            const npos: []const u8 = neigh[_idx(neigh.len, i)];
            if (!(visited.contains(npos))) {
                visited.put(npos, true) catch unreachable;
                var new_path: [][]const u8 = blk: { var _tmp = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []const u8, node.path)) catch |err| handleError(err); _tmp.append(@constCast(npos)) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
                new_path = new_path;
                queue = blk: { var _tmp = std.ArrayList(Node).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const Node, queue)) catch |err| handleError(err); _tmp.append(.{ .pos = npos, .path = new_path }) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            }
            i = i + 1;
        }
    }
    return &[_][]const u8{};
}

fn bidirectional_bfs(start_param: []const u8, goal_param: []const u8) [][]const u8 {
    var queue_f: []Node = std.heap.page_allocator.alloc(Node, 0) catch unreachable;
    queue_f = queue_f;
    var queue_b: []Node = std.heap.page_allocator.alloc(Node, 0) catch unreachable;
    queue_b = queue_b;
    queue_f = blk: { var _tmp = std.ArrayList(Node).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const Node, queue_f)) catch |err| handleError(err); _tmp.append(.{ .pos = start_param, .path = @constCast(&([1][]const u8{start_param}))[0..] }) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
    queue_b = blk: { var _tmp = std.ArrayList(Node).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const Node, queue_b)) catch |err| handleError(err); _tmp.append(.{ .pos = goal_param, .path = @constCast(&([1][]const u8{goal_param}))[0..] }) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
    var head_f: i64 = 0;
    head_f = head_f;
    var head_b: i64 = 0;
    head_b = head_b;
    var visited_f: std.StringHashMap([][]const u8) = blk1: { var m_1 = std.StringHashMap([][]const u8).init(std.heap.page_allocator); m_1.put("start_param", @constCast(&([1][]const u8{start_param}))[0..]) catch unreachable; break :blk1 m_1; };
    visited_f = visited_f;
    var visited_b: std.StringHashMap([][]const u8) = blk2: { var m_2 = std.StringHashMap([][]const u8).init(std.heap.page_allocator); m_2.put("goal_param", @constCast(&([1][]const u8{goal_param}))[0..]) catch unreachable; break :blk2 m_2; };
    visited_b = visited_b;
    while (head_f < @as(i64, @intCast(queue_f.len)) and head_b < @as(i64, @intCast(queue_b.len))) {
        const node_f: Node = queue_f[_idx(queue_f.len, head_f)];
        head_f = head_f + 1;
        const neigh_f: [][]const u8 = neighbors(node_f.pos);
        var i: i64 = 0;
        i = i;
        while (i < @as(i64, @intCast(neigh_f.len))) {
            const npos: []const u8 = neigh_f[_idx(neigh_f.len, i)];
            if (!(visited_f.contains(npos))) {
                var new_path: [][]const u8 = blk: { var _tmp = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []const u8, node_f.path)) catch |err| handleError(err); _tmp.append(@constCast(npos)) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
                new_path = new_path;
                visited_f.put(npos, new_path) catch unreachable;
                if (visited_b.contains(npos)) {
                    const rev: [][]const u8 = reverse_list(visited_b.get(npos).?);
                    var j: i64 = 1;
                    j = j;
                    while (j < @as(i64, @intCast(rev.len))) {
                        new_path = blk: { var _tmp = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []const u8, new_path)) catch |err| handleError(err); _tmp.append(@constCast(rev[_idx(rev.len, j)])) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
                        j = j + 1;
                    }
                    return new_path;
                }
                queue_f = blk: { var _tmp = std.ArrayList(Node).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const Node, queue_f)) catch |err| handleError(err); _tmp.append(.{ .pos = npos, .path = new_path }) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            }
            i = i + 1;
        }
        const node_b: Node = queue_b[_idx(queue_b.len, head_b)];
        head_b = head_b + 1;
        const neigh_b: [][]const u8 = neighbors(node_b.pos);
        var j: i64 = 0;
        j = j;
        while (j < @as(i64, @intCast(neigh_b.len))) {
            const nposb: []const u8 = neigh_b[_idx(neigh_b.len, j)];
            if (!(visited_b.contains(nposb))) {
                var new_path_b: [][]const u8 = blk: { var _tmp = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []const u8, node_b.path)) catch |err| handleError(err); _tmp.append(@constCast(nposb)) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
                new_path_b = new_path_b;
                visited_b.put(nposb, new_path_b) catch unreachable;
                if (visited_f.contains(nposb)) {
                    var path_f: [][]const u8 = visited_f.get(nposb).?;
                    path_f = path_f;
                    new_path_b = reverse_list(new_path_b);
                    var t: i64 = 1;
                    t = t;
                    while (t < @as(i64, @intCast(new_path_b.len))) {
                        path_f = blk: { var _tmp = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []const u8, path_f)) catch |err| handleError(err); _tmp.append(@constCast(new_path_b[_idx(new_path_b.len, t)])) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
                        t = t + 1;
                    }
                    return path_f;
                }
                queue_b = blk: { var _tmp = std.ArrayList(Node).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const Node, queue_b)) catch |err| handleError(err); _tmp.append(.{ .pos = nposb, .path = new_path_b }) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            }
            j = j + 1;
        }
    }
    return blk: { var _tmp = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp.append(start_param) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
}

fn path_to_string(path: [][]const u8) []const u8 {
    if (@as(i64, @intCast(path.len)) == 0) {
        return "[]";
    }
    const first: []i64 = parse_key(path[_idx(path.len, 0)]);
    var s: []const u8 = _concat_string(_concat_string(_concat_string(_concat_string("[(", _str(first[_idx(first.len, 0)])), ", "), _str(first[_idx(first.len, 1)])), ")");
    s = s;
    var i: i64 = 1;
    i = i;
    while (i < @as(i64, @intCast(path.len))) {
        const c: []i64 = parse_key(path[_idx(path.len, i)]);
        s = _concat_string(_concat_string(_concat_string(_concat_string(_concat_string(s, ", ("), _str(c[_idx(c.len, 0)])), ", "), _str(c[_idx(c.len, 1)])), ")");
        i = i + 1;
    }
    s = _concat_string(s, "]");
    return s;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        grid_var = std.heap.page_allocator.dupe([]i64, (&([7][]i64{std.heap.page_allocator.dupe(i64, (&([7]i64{0, 0, 0, 0, 0, 0, 0}))[0..]) catch unreachable, std.heap.page_allocator.dupe(i64, (&([7]i64{0, 1, 0, 0, 0, 0, 0}))[0..]) catch unreachable, std.heap.page_allocator.dupe(i64, (&([7]i64{0, 0, 0, 0, 0, 0, 0}))[0..]) catch unreachable, std.heap.page_allocator.dupe(i64, (&([7]i64{0, 0, 1, 0, 0, 0, 0}))[0..]) catch unreachable, std.heap.page_allocator.dupe(i64, (&([7]i64{1, 0, 1, 0, 0, 0, 0}))[0..]) catch unreachable, std.heap.page_allocator.dupe(i64, (&([7]i64{0, 0, 0, 0, 0, 0, 0}))[0..]) catch unreachable, std.heap.page_allocator.dupe(i64, (&([7]i64{0, 0, 0, 0, 1, 0, 0}))[0..]) catch unreachable}))[0..]) catch unreachable;
        delta_var = std.heap.page_allocator.dupe([]i64, (&([4][]i64{std.heap.page_allocator.dupe(i64, (&([2]i64{0 - 1, 0}))[0..]) catch unreachable, std.heap.page_allocator.dupe(i64, (&([2]i64{0, 0 - 1}))[0..]) catch unreachable, std.heap.page_allocator.dupe(i64, (&([2]i64{1, 0}))[0..]) catch unreachable, std.heap.page_allocator.dupe(i64, (&([2]i64{0, 1}))[0..]) catch unreachable}))[0..]) catch unreachable;
        start_var = key(0, 0);
        goal_var = key(@as(i64, @intCast(grid_var.len)) - 1, @as(i64, @intCast(grid_var[_idx(grid_var.len, 0)].len)) - 1);
        path1_var = bfs(start_var, goal_var);
        path2_var = bidirectional_bfs(start_var, goal_var);
        std.debug.print("{s}\n", .{path_to_string(path1_var)});
        std.debug.print("{s}\n", .{path_to_string(path2_var)});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .pointer => |p| {
        if (p.size == .slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .@"struct" => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.heap.pageSize()));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
