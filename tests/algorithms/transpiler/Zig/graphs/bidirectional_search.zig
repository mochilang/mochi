// Generated by Mochi Zig transpiler on 2025-08-14 17:09 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const ExpandResult = struct {
    queue: []i64,
    head: i64,
    parents: std.AutoHashMap(i64,i64),
    visited: std.AutoHashMap(i64,bool),
    intersection: i64,
    found: bool,
};

const SearchResult = struct {
    path: []i64,
    ok: bool,
};

fn expand_search(graph: *const std.AutoHashMap(i64,[]i64), queue: []i64, head_param: i64, parents: *const std.AutoHashMap(i64,i64), visited: *const std.AutoHashMap(i64,bool), opposite_visited: *const std.AutoHashMap(i64,bool)) ExpandResult {
    var head_var: i64 = head_param;
    head_var = head_var;
    if (head_var >= @as(i64, @intCast(queue.len))) {
        return .{ .queue = queue, .head = head_var, .parents = (parents).*, .visited = (visited).*, .intersection = -1, .found = false };
    }
    const current: i64 = queue[_idx(queue.len, head_var)];
    head_var = head_var + 1;
    const neighbors: []i64 = graph.get(current) orelse undefined;
    var q: []i64 = blk: { const tmp = std.heap.page_allocator.alloc(i64, queue.len) catch unreachable; @memcpy(tmp, queue); break :blk tmp; };
    q = q;
    var p: std.AutoHashMap(i64,i64) = parents.*;
    p = p;
    var v: std.AutoHashMap(i64,bool) = visited.*;
    v = v;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(neighbors.len))) {
        const neighbor: i64 = neighbors[_idx(neighbors.len, i)];
        if (v.get(neighbor) orelse undefined) {
            i = i + 1;
            continue;
        }
        v.put(neighbor, true) catch unreachable;
        p.put(neighbor, current) catch unreachable;
        q = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, q)) catch |err| handleError(err); _tmp.append(neighbor) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        if (opposite_visited.get(neighbor) orelse undefined) {
            return .{ .queue = q, .head = head_var, .parents = p, .visited = v, .intersection = neighbor, .found = true };
        }
        i = i + 1;
    }
    return .{ .queue = q, .head = head_var, .parents = p, .visited = v, .intersection = -1, .found = false };
}

fn construct_path(current: i64, parents: *const std.AutoHashMap(i64,i64)) []i64 {
    var path: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    path = path;
    var node: i64 = current;
    node = node;
    while (node != -1) {
        path = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, path)) catch |err| handleError(err); _tmp.append(node) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        node = parents.get(node) orelse undefined;
    }
    return path;
}

fn reverse_list(xs: []i64) []i64 {
    var res: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    res = res;
    var i: i64 = @as(i64, @intCast(xs.len));
    i = i;
    while (i > 0) {
        i = i - 1;
        res = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, res)) catch |err| handleError(err); _tmp.append(xs[_idx(xs.len, i)]) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
    }
    return res;
}

fn bidirectional_search(g: *const std.AutoHashMap(i64,[]i64), start: i64, goal: i64) SearchResult {
    if (start == goal) {
        return .{ .path = @constCast(&([1]i64{start}))[0..], .ok = true };
    }
    var forward_parents: std.AutoHashMap(i64,i64) = std.AutoHashMap(i64, i64).init(std.heap.page_allocator);
    forward_parents = forward_parents;
    forward_parents.put(start, -1) catch unreachable;
    var backward_parents: std.AutoHashMap(i64,i64) = std.AutoHashMap(i64, i64).init(std.heap.page_allocator);
    backward_parents = backward_parents;
    backward_parents.put(goal, -1) catch unreachable;
    var forward_visited: std.AutoHashMap(i64,bool) = std.AutoHashMap(i64, bool).init(std.heap.page_allocator);
    forward_visited = forward_visited;
    forward_visited.put(start, true) catch unreachable;
    var backward_visited: std.AutoHashMap(i64,bool) = std.AutoHashMap(i64, bool).init(std.heap.page_allocator);
    backward_visited = backward_visited;
    backward_visited.put(goal, true) catch unreachable;
    var forward_queue: []i64 = std.heap.page_allocator.dupe(i64, (&([1]i64{start}))[0..]) catch unreachable;
    forward_queue = forward_queue;
    var backward_queue: []i64 = std.heap.page_allocator.dupe(i64, (&([1]i64{goal}))[0..]) catch unreachable;
    backward_queue = backward_queue;
    var forward_head: i64 = 0;
    forward_head = forward_head;
    var backward_head: i64 = 0;
    backward_head = backward_head;
    var intersection: i64 = -1;
    intersection = intersection;
    while (forward_head < @as(i64, @intCast(forward_queue.len)) and backward_head < @as(i64, @intCast(backward_queue.len)) and intersection == -1) {
        var res: ExpandResult = expand_search(g, forward_queue, forward_head, &forward_parents, &forward_visited, &backward_visited);
        res = res;
        forward_queue = res.queue;
        forward_head = res.head;
        forward_parents = res.parents;
        forward_visited = res.visited;
        if (res.found) {
            intersection = res.intersection;
            break;
        }
        res = expand_search(g, backward_queue, backward_head, &backward_parents, &backward_visited, &forward_visited);
        backward_queue = res.queue;
        backward_head = res.head;
        backward_parents = res.parents;
        backward_visited = res.visited;
        if (res.found) {
            intersection = res.intersection;
            break;
        }
    }
    if (intersection == -1) {
        return .{ .path = &[_]i64{}, .ok = false };
    }
    var forward_path: []i64 = construct_path(intersection, &forward_parents);
    forward_path = forward_path;
    forward_path = reverse_list(forward_path);
    const back_start: i64 = backward_parents.get(intersection) orelse undefined;
    const backward_path: []i64 = construct_path(back_start, &backward_parents);
    var result: []i64 = blk: { const tmp = std.heap.page_allocator.alloc(i64, forward_path.len) catch unreachable; @memcpy(tmp, forward_path); break :blk tmp; };
    result = result;
    var j: i64 = 0;
    j = j;
    while (j < @as(i64, @intCast(backward_path.len))) {
        result = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, result)) catch |err| handleError(err); _tmp.append(backward_path[_idx(backward_path.len, j)]) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        j = j + 1;
    }
    return .{ .path = result, .ok = true };
}

fn is_edge(g: *const std.AutoHashMap(i64,[]i64), u: i64, v: i64) bool {
    const neighbors: []i64 = g.get(u) orelse undefined;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(neighbors.len))) {
        if (neighbors[_idx(neighbors.len, i)] == v) {
            return true;
        }
        i = i + 1;
    }
    return false;
}

fn path_exists(g: *const std.AutoHashMap(i64,[]i64), path: []i64) bool {
    if (@as(i64, @intCast(path.len)) == 0) {
        return false;
    }
    var i: i64 = 0;
    i = i;
    while (i + 1 < @as(i64, @intCast(path.len))) {
        if (!(is_edge(g, path[_idx(path.len, i)], path[_idx(path.len, i + 1)]))) {
            return false;
        }
        i = i + 1;
    }
    return true;
}

fn print_path(g: *const std.AutoHashMap(i64,[]i64), s: i64, t: i64) void {
    var res: SearchResult = bidirectional_search(g, s, t);
    res = res;
    if (res.ok and path_exists(g, res.path)) {
        std.debug.print("{s}\n", .{_concat_string(_concat_string(_concat_string(_concat_string(_concat_string("Path from ", _str(s)), " to "), _str(t)), ": "), _str(res.path))});
    } else {
        std.debug.print("{s}\n", .{_concat_string(_concat_string(_concat_string(_concat_string("Path from ", _str(s)), " to "), _str(t)), ": None")});
    }
}

fn mochi_main() void {
    const graph: std.AutoHashMap(i64,[]i64) = blk0: { var m = std.AutoHashMap(i64, []i64).init(std.heap.page_allocator); m.put(0, @constCast(&([2]i64{1, 2}))[0..]) catch unreachable; m.put(1, @constCast(&([3]i64{0, 3, 4}))[0..]) catch unreachable; m.put(2, @constCast(&([3]i64{0, 5, 6}))[0..]) catch unreachable; m.put(3, @constCast(&([2]i64{1, 7}))[0..]) catch unreachable; m.put(4, @constCast(&([2]i64{1, 8}))[0..]) catch unreachable; m.put(5, @constCast(&([2]i64{2, 9}))[0..]) catch unreachable; m.put(6, @constCast(&([2]i64{2, 10}))[0..]) catch unreachable; m.put(7, @constCast(&([2]i64{3, 11}))[0..]) catch unreachable; m.put(8, @constCast(&([2]i64{4, 11}))[0..]) catch unreachable; m.put(9, @constCast(&([2]i64{5, 11}))[0..]) catch unreachable; m.put(10, @constCast(&([2]i64{6, 11}))[0..]) catch unreachable; m.put(11, @constCast(&([4]i64{7, 8, 9, 10}))[0..]) catch unreachable; break :blk0 m; };
    print_path(@constCast(&graph), 0, 11);
    print_path(@constCast(&graph), 5, 5);
    const disconnected: std.AutoHashMap(i64,[]i64) = blk1: { var m_1 = std.AutoHashMap(i64, []i64).init(std.heap.page_allocator); m_1.put(0, @constCast(&([2]i64{1, 2}))[0..]) catch unreachable; m_1.put(1, @constCast(&([1]i64{0}))[0..]) catch unreachable; m_1.put(2, @constCast(&([1]i64{0}))[0..]) catch unreachable; m_1.put(3, @constCast(&([1]i64{4}))[0..]) catch unreachable; m_1.put(4, @constCast(&([1]i64{3}))[0..]) catch unreachable; break :blk1 m_1; };
    print_path(@constCast(&disconnected), 0, 3);
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        mochi_main();
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .pointer => |p| {
        if (p.size == .slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .@"struct" => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.heap.pageSize()));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
