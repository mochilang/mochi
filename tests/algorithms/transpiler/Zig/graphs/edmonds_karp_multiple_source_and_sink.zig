// Generated by Mochi Zig transpiler on 2025-08-14 22:13 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const graph_var: [][]i64 = @constCast(([4][]i64{@constCast(([4]i64{0, 7, 0, 0})[0..4]), @constCast(([4]i64{0, 0, 6, 0})[0..4]), @constCast(([4]i64{0, 0, 0, 8})[0..4]), @constCast(([4]i64{9, 0, 0, 0})[0..4])})[0..4]);
const sources_var: []i64 = @constCast(([1]i64{0})[0..1]);
const sinks_var: []i64 = @constCast(([1]i64{3})[0..1]);
var result_var: i64 = 0;

fn push_relabel_max_flow(graph_param: [][]i64, sources_param: []i64, sinks_param: []i64) i64 {
    if (@as(i64, @intCast(sources_param.len)) == 0 or @as(i64, @intCast(sinks_param.len)) == 0) {
        return 0;
    }
    var g: [][]i64 = blk: { const tmp = std.heap.page_allocator.alloc([]i64, graph_param.len) catch unreachable; @memcpy(tmp, graph_param); break :blk tmp; };
    g = g;
    var source_index: i64 = sources_param[_idx(sources_param.len, 0)];
    source_index = source_index;
    var sink_index: i64 = sinks_param[_idx(sinks_param.len, 0)];
    sink_index = sink_index;
    if (@as(i64, @intCast(sources_param.len)) > 1 or @as(i64, @intCast(sinks_param.len)) > 1) {
        var max_input_flow: i64 = 0;
        max_input_flow = max_input_flow;
        var i: i64 = 0;
        i = i;
        while (i < @as(i64, @intCast(sources_param.len))) {
            var j: i64 = 0;
            j = j;
            while (j < @as(i64, @intCast(g[_idx(g.len, sources_param[_idx(sources_param.len, i)])].len))) {
                max_input_flow = max_input_flow + g[_idx(g.len, sources_param[_idx(sources_param.len, i)])][_idx(g[_idx(g.len, sources_param[_idx(sources_param.len, i)])].len, j)];
                j = j + 1;
            }
            i = i + 1;
        }
        var size: i64 = @as(i64, @intCast(g.len)) + 1;
        size = size;
        var new_graph: [][]i64 = std.heap.page_allocator.alloc([]i64, 0) catch unreachable;
        new_graph = new_graph;
        var zero_row: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
        zero_row = zero_row;
        var j: i64 = 0;
        j = j;
        while (j < size) {
            zero_row = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, zero_row)) catch |err| handleError(err); _tmp.append(0) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            j = j + 1;
        }
        new_graph = blk: { var _tmp_1 = std.ArrayList([]i64).init(std.heap.page_allocator); _tmp_1.appendSlice(@as([]const []i64, new_graph)) catch |err| handleError(err); _tmp_1.append(zero_row) catch |err| handleError(err); break :blk (_tmp_1.toOwnedSlice() catch |err| handleError(err)); };
        var r: i64 = 0;
        r = r;
        while (r < @as(i64, @intCast(g.len))) {
            var row: []i64 = std.heap.page_allocator.dupe(i64, ([1]i64{0})[0..1]) catch unreachable;
            row = row;
            var c: i64 = 0;
            c = c;
            while (c < @as(i64, @intCast(g[_idx(g.len, r)].len))) {
                row = blk: { var _tmp_2 = std.ArrayList(i64).init(std.heap.page_allocator); _tmp_2.appendSlice(@as([]const i64, row)) catch |err| handleError(err); _tmp_2.append(g[_idx(g.len, r)][_idx(g[_idx(g.len, r)].len, c)]) catch |err| handleError(err); break :blk (_tmp_2.toOwnedSlice() catch |err| handleError(err)); };
                c = c + 1;
            }
            new_graph = blk: { var _tmp_3 = std.ArrayList([]i64).init(std.heap.page_allocator); _tmp_3.appendSlice(@as([]const []i64, new_graph)) catch |err| handleError(err); _tmp_3.append(row) catch |err| handleError(err); break :blk (_tmp_3.toOwnedSlice() catch |err| handleError(err)); };
            r = r + 1;
        }
        g = new_graph;
        i = 0;
        while (i < @as(i64, @intCast(sources_param.len))) {
            g[_idx(g.len, 0)][_idx(g[_idx(g.len, 0)].len, sources_param[_idx(sources_param.len, i)] + 1)] = max_input_flow;
            i = i + 1;
        }
        source_index = 0;
        size = @as(i64, @intCast(g.len)) + 1;
        new_graph = std.heap.page_allocator.alloc([]i64, 0) catch unreachable;
        r = 0;
        while (r < @as(i64, @intCast(g.len))) {
            var row2: []i64 = g[_idx(g.len, r)];
            row2 = row2;
            row2 = blk: { var _tmp_4 = std.ArrayList(i64).init(std.heap.page_allocator); _tmp_4.appendSlice(@as([]const i64, row2)) catch |err| handleError(err); _tmp_4.append(0) catch |err| handleError(err); break :blk (_tmp_4.toOwnedSlice() catch |err| handleError(err)); };
            new_graph = blk: { var _tmp_5 = std.ArrayList([]i64).init(std.heap.page_allocator); _tmp_5.appendSlice(@as([]const []i64, new_graph)) catch |err| handleError(err); _tmp_5.append(row2) catch |err| handleError(err); break :blk (_tmp_5.toOwnedSlice() catch |err| handleError(err)); };
            r = r + 1;
        }
        var last_row: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
        last_row = last_row;
        j = 0;
        while (j < size) {
            last_row = blk: { var _tmp_6 = std.ArrayList(i64).init(std.heap.page_allocator); _tmp_6.appendSlice(@as([]const i64, last_row)) catch |err| handleError(err); _tmp_6.append(0) catch |err| handleError(err); break :blk (_tmp_6.toOwnedSlice() catch |err| handleError(err)); };
            j = j + 1;
        }
        new_graph = blk: { var _tmp_7 = std.ArrayList([]i64).init(std.heap.page_allocator); _tmp_7.appendSlice(@as([]const []i64, new_graph)) catch |err| handleError(err); _tmp_7.append(last_row) catch |err| handleError(err); break :blk (_tmp_7.toOwnedSlice() catch |err| handleError(err)); };
        g = new_graph;
        i = 0;
        while (i < @as(i64, @intCast(sinks_param.len))) {
            g[_idx(g.len, sinks_param[_idx(sinks_param.len, i)] + 1)][_idx(g[_idx(g.len, sinks_param[_idx(sinks_param.len, i)] + 1)].len, size - 1)] = max_input_flow;
            i = i + 1;
        }
        sink_index = size - 1;
    }
    const n: i64 = @as(i64, @intCast(g.len));
    var preflow: [][]i64 = std.heap.page_allocator.alloc([]i64, 0) catch unreachable;
    preflow = preflow;
    var i: i64 = 0;
    i = i;
    while (i < n) {
        var row: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
        row = row;
        var j: i64 = 0;
        j = j;
        while (j < n) {
            row = blk: { var _tmp_8 = std.ArrayList(i64).init(std.heap.page_allocator); _tmp_8.appendSlice(@as([]const i64, row)) catch |err| handleError(err); _tmp_8.append(0) catch |err| handleError(err); break :blk (_tmp_8.toOwnedSlice() catch |err| handleError(err)); };
            j = j + 1;
        }
        preflow = blk: { var _tmp_9 = std.ArrayList([]i64).init(std.heap.page_allocator); _tmp_9.appendSlice(@as([]const []i64, preflow)) catch |err| handleError(err); _tmp_9.append(row) catch |err| handleError(err); break :blk (_tmp_9.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    var heights: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    heights = heights;
    i = 0;
    while (i < n) {
        heights = blk: { var _tmp_10 = std.ArrayList(i64).init(std.heap.page_allocator); _tmp_10.appendSlice(@as([]const i64, heights)) catch |err| handleError(err); _tmp_10.append(0) catch |err| handleError(err); break :blk (_tmp_10.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    var excesses: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    excesses = excesses;
    i = 0;
    while (i < n) {
        excesses = blk: { var _tmp_11 = std.ArrayList(i64).init(std.heap.page_allocator); _tmp_11.appendSlice(@as([]const i64, excesses)) catch |err| handleError(err); _tmp_11.append(0) catch |err| handleError(err); break :blk (_tmp_11.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    heights[_idx(heights.len, source_index)] = n;
    i = 0;
    while (i < n) {
        const bandwidth: i64 = g[_idx(g.len, source_index)][_idx(g[_idx(g.len, source_index)].len, i)];
        preflow[_idx(preflow.len, source_index)][_idx(preflow[_idx(preflow.len, source_index)].len, i)] = preflow[_idx(preflow.len, source_index)][_idx(preflow[_idx(preflow.len, source_index)].len, i)] + bandwidth;
        preflow[_idx(preflow.len, i)][_idx(preflow[_idx(preflow.len, i)].len, source_index)] = preflow[_idx(preflow.len, i)][_idx(preflow[_idx(preflow.len, i)].len, source_index)] - bandwidth;
        excesses[_idx(excesses.len, i)] = excesses[_idx(excesses.len, i)] + bandwidth;
        i = i + 1;
    }
    var vertices_list: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    vertices_list = vertices_list;
    i = 0;
    while (i < n) {
        if (i != source_index and i != sink_index) {
            vertices_list = blk: { var _tmp_12 = std.ArrayList(i64).init(std.heap.page_allocator); _tmp_12.appendSlice(@as([]const i64, vertices_list)) catch |err| handleError(err); _tmp_12.append(i) catch |err| handleError(err); break :blk (_tmp_12.toOwnedSlice() catch |err| handleError(err)); };
        }
        i = i + 1;
    }
    var idx: i64 = 0;
    idx = idx;
    while (idx < @as(i64, @intCast(vertices_list.len))) {
        const v: i64 = vertices_list[_idx(vertices_list.len, idx)];
        const prev_height: i64 = heights[_idx(heights.len, v)];
        while (excesses[_idx(excesses.len, v)] > 0) {
            var nb: i64 = 0;
            nb = nb;
            while (nb < n) {
                if (g[_idx(g.len, v)][_idx(g[_idx(g.len, v)].len, nb)] - preflow[_idx(preflow.len, v)][_idx(preflow[_idx(preflow.len, v)].len, nb)] > 0 and heights[_idx(heights.len, v)] > heights[_idx(heights.len, nb)]) {
                    var delta: i64 = excesses[_idx(excesses.len, v)];
                    delta = delta;
                    const capacity: i64 = g[_idx(g.len, v)][_idx(g[_idx(g.len, v)].len, nb)] - preflow[_idx(preflow.len, v)][_idx(preflow[_idx(preflow.len, v)].len, nb)];
                    if (delta > capacity) {
                        delta = capacity;
                    }
                    preflow[_idx(preflow.len, v)][_idx(preflow[_idx(preflow.len, v)].len, nb)] = preflow[_idx(preflow.len, v)][_idx(preflow[_idx(preflow.len, v)].len, nb)] + delta;
                    preflow[_idx(preflow.len, nb)][_idx(preflow[_idx(preflow.len, nb)].len, v)] = preflow[_idx(preflow.len, nb)][_idx(preflow[_idx(preflow.len, nb)].len, v)] - delta;
                    excesses[_idx(excesses.len, v)] = excesses[_idx(excesses.len, v)] - delta;
                    excesses[_idx(excesses.len, nb)] = excesses[_idx(excesses.len, nb)] + delta;
                }
                nb = nb + 1;
            }
            var min_height: i64 = 0 - 1;
            min_height = min_height;
            nb = 0;
            while (nb < n) {
                if (g[_idx(g.len, v)][_idx(g[_idx(g.len, v)].len, nb)] - preflow[_idx(preflow.len, v)][_idx(preflow[_idx(preflow.len, v)].len, nb)] > 0) {
                    if (min_height == 0 - 1 or heights[_idx(heights.len, nb)] < min_height) {
                        min_height = heights[_idx(heights.len, nb)];
                    }
                }
                nb = nb + 1;
            }
            if (min_height != 0 - 1) {
                heights[_idx(heights.len, v)] = min_height + 1;
            } else {
                break;
            }
        }
        if (heights[_idx(heights.len, v)] > prev_height) {
            const vertex: i64 = vertices_list[_idx(vertices_list.len, idx)];
            var j: i64 = idx;
            j = j;
            while (j > 0) {
                vertices_list[_idx(vertices_list.len, j)] = vertices_list[_idx(vertices_list.len, j - 1)];
                j = j - 1;
            }
            vertices_list[_idx(vertices_list.len, 0)] = vertex;
            idx = 0;
        } else {
            idx = idx + 1;
        }
    }
    var flow: i64 = 0;
    flow = flow;
    i = 0;
    while (i < n) {
        flow = flow + preflow[_idx(preflow.len, source_index)][_idx(preflow[_idx(preflow.len, source_index)].len, i)];
        i = i + 1;
    }
    if (flow < 0) {
        flow = 0 - flow;
    }
    return flow;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        result_var = push_relabel_max_flow(graph_var, sources_var, sinks_var);
        std.debug.print("{s}\n", .{_concat_string("maximum flow is ", _str(result_var))});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .pointer => |p| {
        if (p.size == .slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .@"struct" => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.heap.pageSize()));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
