// Generated by Mochi Zig transpiler on 2025-08-14 22:13 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const Graph = struct {
    directed: bool,
    vertex_to_index: std.AutoHashMap(i64,i64),
    adj_matrix: [][]i64,
};

var g_var_1: Graph = undefined;

fn make_graph(vertices: []i64, edges: [][]i64, directed: bool) Graph {
    var g_var_1: Graph = .{ .directed = directed, .vertex_to_index = std.AutoHashMap(i64, i64).init(std.heap.page_allocator), .adj_matrix = (&[_][]i64{})[0..0] };
    g_var_1 = g_var_1;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(vertices.len))) {
        add_vertex(&g_var_1, vertices[_idx(vertices.len, i)]);
        i = i + 1;
    }
    var j: i64 = 0;
    j = j;
    while (j < @as(i64, @intCast(edges.len))) {
        const e: []i64 = edges[_idx(edges.len, j)];
        add_edge(&g_var_1, e[_idx(e.len, 0)], e[_idx(e.len, 1)]);
        j = j + 1;
    }
    return g_var_1;
}

fn contains_vertex(g_param: Graph, v: i64) bool {
    return g_param.vertex_to_index.contains(v);
}

fn add_vertex(g_param: *Graph, v: i64) void {
    if (contains_vertex(g_param.*, v)) {
        @panic("vertex already exists");
    }
    var matrix: [][]i64 = g_param.adj_matrix;
    matrix = matrix;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(matrix.len))) {
        matrix[_idx(matrix.len, i)] = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, matrix[_idx(matrix.len, i)])) catch |err| handleError(err); _tmp.append(0) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    var row: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    row = row;
    var j: i64 = 0;
    j = j;
    while (j < @as(i64, @intCast(matrix.len)) + 1) {
        row = blk: { var _tmp_1 = std.ArrayList(i64).init(std.heap.page_allocator); _tmp_1.appendSlice(@as([]const i64, row)) catch |err| handleError(err); _tmp_1.append(0) catch |err| handleError(err); break :blk (_tmp_1.toOwnedSlice() catch |err| handleError(err)); };
        j = j + 1;
    }
    matrix = blk: { var _tmp_2 = std.ArrayList([]i64).init(std.heap.page_allocator); _tmp_2.appendSlice(@as([]const []i64, matrix)) catch |err| handleError(err); _tmp_2.append(row) catch |err| handleError(err); break :blk (_tmp_2.toOwnedSlice() catch |err| handleError(err)); };
    g_param.adj_matrix = matrix;
    var idx_map: std.AutoHashMap(i64,i64) = g_param.vertex_to_index;
    idx_map = idx_map;
    idx_map.put(v, @as(i64, @intCast(matrix.len)) - 1) catch unreachable;
    g_param.vertex_to_index = idx_map;
}

fn remove_key(m: *const std.AutoHashMap(i64,i64), k: i64) std.AutoHashMap(i64,i64) {
    var out: std.AutoHashMap(i64,i64) = std.AutoHashMap(i64, i64).init(std.heap.page_allocator);
    out = out;
    var __mapit1 = m.keyIterator();
    while (__mapit1.next()) |__it0| {
        const key = __it0.*;
        if (key != k) {
            out.put(key, m.get(key).?) catch unreachable;
        }
    }
    return out;
}

fn decrement_indices(m: *const std.AutoHashMap(i64,i64), start: i64) std.AutoHashMap(i64,i64) {
    var out: std.AutoHashMap(i64,i64) = std.AutoHashMap(i64, i64).init(std.heap.page_allocator);
    out = out;
    var __mapit3 = m.keyIterator();
    while (__mapit3.next()) |__it2| {
        const key = __it2.*;
        const idx: i64 = m.get(key).?;
        if (idx > start) {
            out.put(key, idx - 1) catch unreachable;
        } else {
            out.put(key, idx) catch unreachable;
        }
    }
    return out;
}

fn remove_vertex(g_param: *Graph, v: i64) void {
    if (!(contains_vertex(g_param.*, v))) {
        @panic("vertex does not exist");
    }
    const idx: i64 = g_param.vertex_to_index.get(v).?;
    var new_matrix: [][]i64 = std.heap.page_allocator.alloc([]i64, 0) catch unreachable;
    new_matrix = new_matrix;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(g_param.adj_matrix.len))) {
        if (i != idx) {
            var row: []i64 = g_param.adj_matrix[_idx(g_param.adj_matrix.len, i)];
            row = row;
            var new_row: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
            new_row = new_row;
            var j: i64 = 0;
            j = j;
            while (j < @as(i64, @intCast(row.len))) {
                if (j != idx) {
                    new_row = blk: { var _tmp_3 = std.ArrayList(i64).init(std.heap.page_allocator); _tmp_3.appendSlice(@as([]const i64, new_row)) catch |err| handleError(err); _tmp_3.append(row[_idx(row.len, j)]) catch |err| handleError(err); break :blk (_tmp_3.toOwnedSlice() catch |err| handleError(err)); };
                }
                j = j + 1;
            }
            new_matrix = blk: { var _tmp_4 = std.ArrayList([]i64).init(std.heap.page_allocator); _tmp_4.appendSlice(@as([]const []i64, new_matrix)) catch |err| handleError(err); _tmp_4.append(new_row) catch |err| handleError(err); break :blk (_tmp_4.toOwnedSlice() catch |err| handleError(err)); };
        }
        i = i + 1;
    }
    g_param.adj_matrix = new_matrix;
    const m: std.AutoHashMap(i64,i64) = remove_key(&g_param.vertex_to_index, v);
    g_param.vertex_to_index = decrement_indices(@constCast(&m), idx);
}

fn add_edge(g_param: *Graph, u: i64, v: i64) void {
    if (!(contains_vertex(g_param.*, u) and contains_vertex(g_param.*, v))) {
        @panic("missing vertex");
    }
    var i: i64 = g_param.vertex_to_index.get(u).?;
    i = i;
    var j: i64 = g_param.vertex_to_index.get(v).?;
    j = j;
    var matrix: [][]i64 = g_param.adj_matrix;
    matrix = matrix;
    matrix[_idx(matrix.len, i)][_idx(matrix[_idx(matrix.len, i)].len, j)] = 1;
    if (!(g_param.directed)) {
        matrix[_idx(matrix.len, j)][_idx(matrix[_idx(matrix.len, j)].len, i)] = 1;
    }
    g_param.adj_matrix = matrix;
}

fn remove_edge(g_param: *Graph, u: i64, v: i64) void {
    if (!(contains_vertex(g_param.*, u) and contains_vertex(g_param.*, v))) {
        @panic("missing vertex");
    }
    var i: i64 = g_param.vertex_to_index.get(u).?;
    i = i;
    var j: i64 = g_param.vertex_to_index.get(v).?;
    j = j;
    var matrix: [][]i64 = g_param.adj_matrix;
    matrix = matrix;
    matrix[_idx(matrix.len, i)][_idx(matrix[_idx(matrix.len, i)].len, j)] = 0;
    if (!(g_param.directed)) {
        matrix[_idx(matrix.len, j)][_idx(matrix[_idx(matrix.len, j)].len, i)] = 0;
    }
    g_param.adj_matrix = matrix;
}

fn contains_edge(g_param: Graph, u: i64, v: i64) bool {
    if (!(contains_vertex(g_param, u) and contains_vertex(g_param, v))) {
        @panic("missing vertex");
    }
    var i: i64 = g_param.vertex_to_index.get(u).?;
    i = i;
    var j: i64 = g_param.vertex_to_index.get(v).?;
    j = j;
    return g_param.adj_matrix[_idx(g_param.adj_matrix.len, i)][_idx(g_param.adj_matrix[_idx(g_param.adj_matrix.len, i)].len, j)] == 1;
}

fn clear_graph(g_param: *Graph) void {
    g_param.vertex_to_index = std.StringHashMap(i64).init(std.heap.page_allocator);
    g_param.adj_matrix = (&[_]i64{});
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        g_var_1 = make_graph(@constCast(&(([3]i64{1, 2, 3})[0..3]))[0..], @constCast(&(([2][]i64{@constCast(([2]i64{1, 2})[0..2]), @constCast(([2]i64{2, 3})[0..2])})[0..2]))[0..], false);
        std.debug.print("{s}\n", .{_str(g_var_1.adj_matrix)});
        std.debug.print("{s}\n", .{_str(contains_edge(g_var_1, 1, 2))});
        std.debug.print("{s}\n", .{_str(contains_edge(g_var_1, 2, 1))});
        remove_edge(&g_var_1, 1, 2);
        std.debug.print("{s}\n", .{_str(contains_edge(g_var_1, 1, 2))});
        remove_vertex(&g_var_1, 2);
        std.debug.print("{s}\n", .{_str(g_var_1.adj_matrix)});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .pointer => |p| {
        if (p.size == .slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .@"struct" => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.heap.pageSize()));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
