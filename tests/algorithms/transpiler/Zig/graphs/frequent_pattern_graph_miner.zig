// Generated by Mochi Zig transpiler on 2025-08-14 22:13 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const NodesData = struct {
    map: std.StringHashMap([][]const u8),
    keys: [][]const u8,
};

const ClusterData = struct {
    clusters: std.AutoHashMap(i64,[][]const u8),
    weights: []i64,
};

const GraphData = struct {
    edges: std.StringHashMap([][]const u8),
    keys: [][]const u8,
};

const EDGE_ARRAY_var: [][][][]const u8 = @constCast(([5][][][]const u8{@constCast(([18][][]const u8{@constCast(([2][]const u8{"ab", "e1"})[0..2]), @constCast(([2][]const u8{"ac", "e3"})[0..2]), @constCast(([2][]const u8{"ad", "e5"})[0..2]), @constCast(([2][]const u8{"bc", "e4"})[0..2]), @constCast(([2][]const u8{"bd", "e2"})[0..2]), @constCast(([2][]const u8{"be", "e6"})[0..2]), @constCast(([2][]const u8{"bh", "e12"})[0..2]), @constCast(([2][]const u8{"cd", "e2"})[0..2]), @constCast(([2][]const u8{"ce", "e4"})[0..2]), @constCast(([2][]const u8{"de", "e1"})[0..2]), @constCast(([2][]const u8{"df", "e8"})[0..2]), @constCast(([2][]const u8{"dg", "e5"})[0..2]), @constCast(([2][]const u8{"dh", "e10"})[0..2]), @constCast(([2][]const u8{"ef", "e3"})[0..2]), @constCast(([2][]const u8{"eg", "e2"})[0..2]), @constCast(([2][]const u8{"fg", "e6"})[0..2]), @constCast(([2][]const u8{"gh", "e6"})[0..2]), @constCast(([2][]const u8{"hi", "e3"})[0..2])})[0..18]), @constCast(([12][][]const u8{@constCast(([2][]const u8{"ab", "e1"})[0..2]), @constCast(([2][]const u8{"ac", "e3"})[0..2]), @constCast(([2][]const u8{"ad", "e5"})[0..2]), @constCast(([2][]const u8{"bc", "e4"})[0..2]), @constCast(([2][]const u8{"bd", "e2"})[0..2]), @constCast(([2][]const u8{"be", "e6"})[0..2]), @constCast(([2][]const u8{"cd", "e2"})[0..2]), @constCast(([2][]const u8{"de", "e1"})[0..2]), @constCast(([2][]const u8{"df", "e8"})[0..2]), @constCast(([2][]const u8{"ef", "e3"})[0..2]), @constCast(([2][]const u8{"eg", "e2"})[0..2]), @constCast(([2][]const u8{"fg", "e6"})[0..2])})[0..12]), @constCast(([13][][]const u8{@constCast(([2][]const u8{"ab", "e1"})[0..2]), @constCast(([2][]const u8{"ac", "e3"})[0..2]), @constCast(([2][]const u8{"bc", "e4"})[0..2]), @constCast(([2][]const u8{"bd", "e2"})[0..2]), @constCast(([2][]const u8{"de", "e1"})[0..2]), @constCast(([2][]const u8{"df", "e8"})[0..2]), @constCast(([2][]const u8{"dg", "e5"})[0..2]), @constCast(([2][]const u8{"ef", "e3"})[0..2]), @constCast(([2][]const u8{"eg", "e2"})[0..2]), @constCast(([2][]const u8{"eh", "e12"})[0..2]), @constCast(([2][]const u8{"fg", "e6"})[0..2]), @constCast(([2][]const u8{"fh", "e10"})[0..2]), @constCast(([2][]const u8{"gh", "e6"})[0..2])})[0..13]), @constCast(([8][][]const u8{@constCast(([2][]const u8{"ab", "e1"})[0..2]), @constCast(([2][]const u8{"ac", "e3"})[0..2]), @constCast(([2][]const u8{"bc", "e4"})[0..2]), @constCast(([2][]const u8{"bd", "e2"})[0..2]), @constCast(([2][]const u8{"bh", "e12"})[0..2]), @constCast(([2][]const u8{"cd", "e2"})[0..2]), @constCast(([2][]const u8{"df", "e8"})[0..2]), @constCast(([2][]const u8{"dh", "e10"})[0..2])})[0..8]), @constCast(([13][][]const u8{@constCast(([2][]const u8{"ab", "e1"})[0..2]), @constCast(([2][]const u8{"ac", "e3"})[0..2]), @constCast(([2][]const u8{"ad", "e5"})[0..2]), @constCast(([2][]const u8{"bc", "e4"})[0..2]), @constCast(([2][]const u8{"bd", "e2"})[0..2]), @constCast(([2][]const u8{"cd", "e2"})[0..2]), @constCast(([2][]const u8{"ce", "e4"})[0..2]), @constCast(([2][]const u8{"de", "e1"})[0..2]), @constCast(([2][]const u8{"df", "e8"})[0..2]), @constCast(([2][]const u8{"dg", "e5"})[0..2]), @constCast(([2][]const u8{"ef", "e3"})[0..2]), @constCast(([2][]const u8{"eg", "e2"})[0..2]), @constCast(([2][]const u8{"fg", "e6"})[0..2])})[0..13])})[0..5]);
var paths_var_1: [][][]const u8 = std.heap.page_allocator.alloc([][]const u8, 0) catch unreachable;

fn contains(lst: [][]const u8, item: []const u8) bool {
    for (lst) |__it0| {
        const v = __it0;
        if (std.mem.eql(u8, v, item)) {
            return true;
        }
    }
    return false;
}

fn get_distinct_edge(edge_array: [][][][]const u8) [][]const u8 {
    var distinct: [][]const u8 = std.heap.page_allocator.alloc([]const u8, 0) catch unreachable;
    distinct = distinct;
    for (edge_array) |__it1| {
        const row = __it1;
        for (row) |__it2| {
            const item = __it2;
            var e: []const u8 = item[_idx(item.len, 0)];
            e = e;
            if (!(contains(distinct, e))) {
                distinct = blk: { var _tmp = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []const u8, distinct)) catch |err| handleError(err); _tmp.append(@constCast(e)) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            }
        }
    }
    return distinct;
}

fn get_bitcode(edge_array: [][][][]const u8, de: []const u8) []const u8 {
    var bitcode: []const u8 = "";
    bitcode = bitcode;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(edge_array.len))) {
        var found: bool = false;
        found = found;
        for (edge_array[_idx(edge_array.len, i)]) |__it3| {
            const item = __it3;
            if (std.mem.eql(u8, item[_idx(item.len, 0)], de)) {
                found = true;
                break;
            }
        }
        if (found) {
            bitcode = _concat_string(bitcode, "1");
        } else {
            bitcode = _concat_string(bitcode, "0");
        }
        i = i + 1;
    }
    return bitcode;
}

fn count_ones(s: []const u8) i64 {
    var c: i64 = 0;
    c = c;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(s.len))) {
        if (std.mem.eql(u8, s[@as(usize, @intCast(i))..@min(@as(usize, @intCast(i + 1)), @as(usize, @intCast(s.len)))], "1")) {
            c = c + 1;
        }
        i = i + 1;
    }
    return c;
}

fn get_frequency_table(edge_array: [][][][]const u8) []std.StringHashMap([]const u8) {
    var distinct: [][]const u8 = get_distinct_edge(edge_array);
    distinct = distinct;
    var table: []std.StringHashMap([]const u8) = std.heap.page_allocator.alloc(std.StringHashMap([]const u8), 0) catch unreachable;
    table = table;
    for (distinct) |__it4| {
        const e = __it4;
        const bit: []const u8 = get_bitcode(edge_array, e);
        const cnt: i64 = count_ones(bit);
        const entry: std.StringHashMap([]const u8) = blk0: { var m = std.StringHashMap([]const u8).init(std.heap.page_allocator); m.put("edge", e) catch unreachable; m.put("count", _str(cnt)) catch unreachable; m.put("bit", bit) catch unreachable; break :blk0 m; };
        table = blk: { var _tmp_1 = std.ArrayList(std.StringHashMap([]const u8)).init(std.heap.page_allocator); _tmp_1.appendSlice(@as([]const std.StringHashMap([]const u8), table)) catch |err| handleError(err); _tmp_1.append(entry) catch |err| handleError(err); break :blk (_tmp_1.toOwnedSlice() catch |err| handleError(err)); };
    }
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(table.len))) {
        var max_i: i64 = i;
        max_i = max_i;
        var j: i64 = i + 1;
        j = j;
        while (j < @as(i64, @intCast(table.len))) {
            if (toi(table[_idx(table.len, j)].get("count").?) > toi(table[_idx(table.len, max_i)].get("count").?)) {
                max_i = j;
            }
            j = j + 1;
        }
        const tmp: std.StringHashMap([]const u8) = table[_idx(table.len, i)];
        table[_idx(table.len, i)] = table[_idx(table.len, max_i)];
        table[_idx(table.len, max_i)] = tmp;
        i = i + 1;
    }
    return table;
}

fn get_nodes(freq_table: []std.StringHashMap([]const u8)) NodesData {
    var nodes: std.StringHashMap([][]const u8) = std.StringHashMap([][]const u8).init(std.heap.page_allocator);
    nodes = nodes;
    var keys: [][]const u8 = std.heap.page_allocator.alloc([]const u8, 0) catch unreachable;
    keys = keys;
    var __mapit6 = freq_table.keyIterator();
    while (__mapit6.next()) |__it5| {
        const f = __it5.*;
        const code: []const u8 = f.get("bit").?;
        const edge: []const u8 = f.get("edge").?;
        if (nodes.contains(code)) {
            nodes.put(code, blk: { var _tmp_2 = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp_2.appendSlice(@as([]const []const u8, nodes.get(code).?)) catch |err| handleError(err); _tmp_2.append(@constCast(edge)) catch |err| handleError(err); break :blk (_tmp_2.toOwnedSlice() catch |err| handleError(err)); }) catch unreachable;
        } else {
            nodes.put(code, blk1: { var _tmp_3 = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp_3.append(edge) catch unreachable; break :blk1 (_tmp_3.toOwnedSlice() catch unreachable); }) catch unreachable;
            keys = blk: { var _tmp_4 = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp_4.appendSlice(@as([]const []const u8, keys)) catch |err| handleError(err); _tmp_4.append(@constCast(code)) catch |err| handleError(err); break :blk (_tmp_4.toOwnedSlice() catch |err| handleError(err)); };
        }
    }
    return .{ .map = nodes, .keys = keys };
}

fn get_cluster(nodes: NodesData) ClusterData {
    var clusters: std.AutoHashMap(i64,[][]const u8) = std.AutoHashMap(i64, [][]const u8).init(std.heap.page_allocator);
    clusters = clusters;
    var weights: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    weights = weights;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(nodes.keys.len))) {
        const code: []const u8 = nodes.keys[_idx(nodes.keys.len, i)];
        const wt: i64 = count_ones(code);
        if (clusters.contains(wt)) {
            clusters.put(wt, blk: { var _tmp_5 = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp_5.appendSlice(@as([]const []const u8, clusters.get(wt).?)) catch |err| handleError(err); _tmp_5.append(@constCast(code)) catch |err| handleError(err); break :blk (_tmp_5.toOwnedSlice() catch |err| handleError(err)); }) catch unreachable;
        } else {
            clusters.put(wt, blk2: { var _tmp_6 = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp_6.append(code) catch unreachable; break :blk2 (_tmp_6.toOwnedSlice() catch unreachable); }) catch unreachable;
            weights = blk: { var _tmp_7 = std.ArrayList(i64).init(std.heap.page_allocator); _tmp_7.appendSlice(@as([]const i64, weights)) catch |err| handleError(err); _tmp_7.append(wt) catch |err| handleError(err); break :blk (_tmp_7.toOwnedSlice() catch |err| handleError(err)); };
        }
        i = i + 1;
    }
    return .{ .clusters = clusters, .weights = weights };
}

fn get_support(clusters: ClusterData) []i64 {
    var sup: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    sup = sup;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(clusters.weights.len))) {
        const w: i64 = clusters.weights[_idx(clusters.weights.len, i)];
        sup = blk: { var _tmp_8 = std.ArrayList(i64).init(std.heap.page_allocator); _tmp_8.appendSlice(@as([]const i64, sup)) catch |err| handleError(err); _tmp_8.append(@divTrunc(w * 100, @as(i64, @intCast(clusters.weights.len)))) catch |err| handleError(err); break :blk (_tmp_8.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    return sup;
}

fn contains_bits(a: []const u8, b: []const u8) bool {
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(a.len))) {
        const c1: []const u8 = a[@as(usize, @intCast(i))..@min(@as(usize, @intCast(i + 1)), @as(usize, @intCast(a.len)))];
        var c2: []const u8 = b[@as(usize, @intCast(i))..@min(@as(usize, @intCast(i + 1)), @as(usize, @intCast(b.len)))];
        c2 = c2;
        if (std.mem.eql(u8, c1, "1") and !std.mem.eql(u8, c2, "1")) {
            return false;
        }
        i = i + 1;
    }
    return true;
}

fn max_cluster_key(clusters: ClusterData) i64 {
    var m: i64 = 0;
    m = m;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(clusters.weights.len))) {
        const w: i64 = clusters.weights[_idx(clusters.weights.len, i)];
        if (w > m) {
            m = w;
        }
        i = i + 1;
    }
    return m;
}

fn get_cluster_codes(clusters: ClusterData, wt: i64) [][]const u8 {
    if (clusters.clusters.contains(wt)) {
        return clusters.clusters.get(wt).?;
    }
    return (&[_][]const u8{})[0..0];
}

fn create_edge(nodes: NodesData, graph_param: *std.StringHashMap([][]const u8), gkeys: [][]const u8, clusters: ClusterData, c1: i64, maxk: i64) [][]const u8 {
    var keys: [][]const u8 = blk: { const tmp = std.heap.page_allocator.alloc([]const u8, gkeys.len) catch unreachable; @memcpy(tmp, gkeys); break :blk tmp; };
    keys = keys;
    const codes1: [][]const u8 = get_cluster_codes(clusters, c1);
    var idx1: i64 = 0;
    idx1 = idx1;
    while (idx1 < @as(i64, @intCast(codes1.len))) {
        const i_code: []const u8 = codes1[_idx(codes1.len, idx1)];
        var count: i64 = 0;
        count = count;
        var c2: i64 = c1 + 1;
        c2 = c2;
        while (c2 <= maxk) {
            const codes2: [][]const u8 = get_cluster_codes(clusters, c2);
            var j: i64 = 0;
            j = j;
            while (j < @as(i64, @intCast(codes2.len))) {
                const j_code: []const u8 = codes2[_idx(codes2.len, j)];
                if (contains_bits(i_code, j_code)) {
                    if (graph_param.contains(i_code)) {
                        graph_param.put(i_code, blk: { var _tmp_9 = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp_9.appendSlice(@as([]const []const u8, graph_param.get(i_code).?)) catch |err| handleError(err); _tmp_9.append(@constCast(j_code)) catch |err| handleError(err); break :blk (_tmp_9.toOwnedSlice() catch |err| handleError(err)); }) catch unreachable;
                    } else {
                        graph_param.put(i_code, blk3: { var _tmp_10 = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp_10.append(j_code) catch unreachable; break :blk3 (_tmp_10.toOwnedSlice() catch unreachable); }) catch unreachable;
                        if (!(contains(keys, i_code))) {
                            keys = blk: { var _tmp_11 = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp_11.appendSlice(@as([]const []const u8, keys)) catch |err| handleError(err); _tmp_11.append(@constCast(i_code)) catch |err| handleError(err); break :blk (_tmp_11.toOwnedSlice() catch |err| handleError(err)); };
                        }
                    }
                    if (!(contains(keys, j_code))) {
                        keys = blk: { var _tmp_12 = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp_12.appendSlice(@as([]const []const u8, keys)) catch |err| handleError(err); _tmp_12.append(@constCast(j_code)) catch |err| handleError(err); break :blk (_tmp_12.toOwnedSlice() catch |err| handleError(err)); };
                    }
                    count = count + 1;
                }
                j = j + 1;
            }
            if (count == 0) {
                c2 = c2 + 1;
            } else {
                break;
            }
        }
        idx1 = idx1 + 1;
    }
    return keys;
}

fn construct_graph(clusters: ClusterData, nodes: NodesData) GraphData {
    const maxk: i64 = max_cluster_key(clusters);
    const top_codes: [][]const u8 = get_cluster_codes(clusters, maxk);
    var graph: std.StringHashMap([][]const u8) = std.StringHashMap([][]const u8).init(std.heap.page_allocator);
    graph = graph;
    var keys: [][]const u8 = std.heap.page_allocator.dupe([]const u8, ([1][]const u8{"Header"})[0..1]) catch unreachable;
    keys = keys;
    graph.put("Header", @constCast((&[_]i64{}))[0..]) catch unreachable;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(top_codes.len))) {
        const code: []const u8 = top_codes[_idx(top_codes.len, i)];
        graph.put("Header", blk: { var _tmp_13 = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp_13.appendSlice(@as([]const []const u8, graph.get("Header").?)) catch |err| handleError(err); _tmp_13.append(@constCast(code)) catch |err| handleError(err); break :blk (_tmp_13.toOwnedSlice() catch |err| handleError(err)); }) catch unreachable;
        graph.put(code, @constCast(&([1][]const u8{"Header"})[0..1])[0..]) catch unreachable;
        keys = blk: { var _tmp_14 = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp_14.appendSlice(@as([]const []const u8, keys)) catch |err| handleError(err); _tmp_14.append(@constCast(code)) catch |err| handleError(err); break :blk (_tmp_14.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    var c: i64 = 1;
    c = c;
    while (c < maxk) {
        keys = create_edge(nodes, @constCast(&graph), keys, clusters, c, maxk);
        c = c + 1;
    }
    return .{ .edges = graph, .keys = keys };
}

fn copy_list(lst: [][]const u8) [][]const u8 {
    var n: [][]const u8 = std.heap.page_allocator.alloc([]const u8, 0) catch unreachable;
    n = n;
    for (lst) |__it7| {
        const v = __it7;
        n = blk: { var _tmp_15 = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp_15.appendSlice(@as([]const []const u8, n)) catch |err| handleError(err); _tmp_15.append(@constCast(v)) catch |err| handleError(err); break :blk (_tmp_15.toOwnedSlice() catch |err| handleError(err)); };
    }
    return n;
}

fn my_dfs(graph: *const std.StringHashMap([][]const u8), start: []const u8, end: []const u8, path: [][]const u8) void {
    var new_path: [][]const u8 = copy_list(path);
    new_path = new_path;
    new_path = blk: { var _tmp_16 = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp_16.appendSlice(@as([]const []const u8, new_path)) catch |err| handleError(err); _tmp_16.append(@constCast(start)) catch |err| handleError(err); break :blk (_tmp_16.toOwnedSlice() catch |err| handleError(err)); };
    if (std.mem.eql(u8, start, end)) {
        paths_var_1 = blk: { var _tmp_17 = std.ArrayList([][]const u8).init(std.heap.page_allocator); _tmp_17.appendSlice(@as([]const [][]const u8, paths_var_1)) catch |err| handleError(err); _tmp_17.append(new_path) catch |err| handleError(err); break :blk (_tmp_17.toOwnedSlice() catch |err| handleError(err)); };
        return;
    }
    for (graph.get(start).?) |__it8| {
        const node = __it8;
        var seen: bool = false;
        seen = seen;
        for (new_path) |__it9| {
            const p = __it9;
            if (std.mem.eql(u8, p, node)) {
                seen = true;
            }
        }
        if (!(seen)) {
            my_dfs(graph, node, end, new_path);
        }
    }
}

fn find_freq_subgraph_given_support(s: i64, clusters: ClusterData, graph: GraphData) void {
    var k: i64 = @divTrunc(s * @as(i64, @intCast(clusters.weights.len)), 100);
    k = k;
    const codes: [][]const u8 = get_cluster_codes(clusters, k);
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(codes.len))) {
        my_dfs(&graph.edges, codes[_idx(codes.len, i)], "Header", @constCast(&[_][]const u8{}));
        i = i + 1;
    }
}

fn node_edges(nodes: NodesData, code: []const u8) [][]const u8 {
    return nodes.map.get(code).?;
}

fn freq_subgraphs_edge_list(paths_param: [][][]const u8, nodes: NodesData) [][][][]const u8 {
    var freq_sub_el: [][][][]const u8 = std.heap.page_allocator.alloc([][][]const u8, 0) catch unreachable;
    freq_sub_el = freq_sub_el;
    for (paths_param) |__it10| {
        const path = __it10;
        var el: [][][]const u8 = std.heap.page_allocator.alloc([][]const u8, 0) catch unreachable;
        el = el;
        var j: i64 = 0;
        j = j;
        while (j < @as(i64, @intCast(path.len)) - 1) {
            const code: []const u8 = path[_idx(path.len, j)];
            const edge_list: [][]const u8 = node_edges(nodes, code);
            var e: i64 = 0;
            e = e;
            while (e < @as(i64, @intCast(edge_list.len))) {
                const edge: []const u8 = edge_list[_idx(edge_list.len, e)];
                const a: []const u8 = edge[@as(usize, @intCast(0))..@min(@as(usize, @intCast(1)), @as(usize, @intCast(edge.len)))];
                const b: []const u8 = edge[@as(usize, @intCast(1))..@min(@as(usize, @intCast(2)), @as(usize, @intCast(edge.len)))];
                el = blk: { var _tmp_18 = std.ArrayList([][]const u8).init(std.heap.page_allocator); _tmp_18.appendSlice(@as([]const [][]const u8, el)) catch |err| handleError(err); _tmp_18.append(@constCast(blk4: { var _tmp_19 = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp_19.append(a) catch unreachable; _tmp_19.append(b) catch unreachable; break :blk4 (_tmp_19.toOwnedSlice() catch unreachable); })) catch |err| handleError(err); break :blk (_tmp_18.toOwnedSlice() catch |err| handleError(err)); };
                e = e + 1;
            }
            j = j + 1;
        }
        freq_sub_el = blk: { var _tmp_20 = std.ArrayList([][][]const u8).init(std.heap.page_allocator); _tmp_20.appendSlice(@as([]const [][][]const u8, freq_sub_el)) catch |err| handleError(err); _tmp_20.append(el) catch |err| handleError(err); break :blk (_tmp_20.toOwnedSlice() catch |err| handleError(err)); };
    }
    return freq_sub_el;
}

fn print_all(nodes: NodesData, support: []i64, clusters: ClusterData, graph: GraphData, freq_subgraph_edge_list: [][][][]const u8) void {
    std.debug.print("{s}\n", .{"\nNodes\n"});
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(nodes.keys.len))) {
        const code: []const u8 = nodes.keys[_idx(nodes.keys.len, i)];
        std.debug.print("{s}\n", .{code});
        std.debug.print("{s}\n", .{_str(nodes.map.get(code).?)});
        i = i + 1;
    }
    std.debug.print("{s}\n", .{"\nSupport\n"});
    std.debug.print("{s}\n", .{_str(support)});
    std.debug.print("{s}\n", .{"\nCluster\n"});
    var j: i64 = 0;
    j = j;
    while (j < @as(i64, @intCast(clusters.weights.len))) {
        const w: i64 = clusters.weights[_idx(clusters.weights.len, j)];
        std.debug.print("{s}\n", .{_concat_string(_concat_string(_str(w), ":"), _str(clusters.clusters.get(w).?))});
        j = j + 1;
    }
    std.debug.print("{s}\n", .{"\nGraph\n"});
    var k: i64 = 0;
    k = k;
    while (k < @as(i64, @intCast(graph.keys.len))) {
        const key: []const u8 = graph.keys[_idx(graph.keys.len, k)];
        std.debug.print("{s}\n", .{key});
        std.debug.print("{s}\n", .{_str(graph.edges.get(key).?)});
        k = k + 1;
    }
    std.debug.print("{s}\n", .{"\nEdge List of Frequent subgraphs\n"});
    for (freq_subgraph_edge_list) |__it11| {
        const el = __it11;
        std.debug.print("{s}\n", .{_str(el)});
    }
}

fn mochi_main() void {
    const frequency_table: []std.StringHashMap([]const u8) = get_frequency_table(EDGE_ARRAY_var);
    const nodes: NodesData = get_nodes(frequency_table);
    const clusters: ClusterData = get_cluster(nodes);
    const support: []i64 = get_support(clusters);
    const graph: GraphData = construct_graph(clusters, nodes);
    find_freq_subgraph_given_support(60, clusters, graph);
    const freq_subgraph_edge_list: [][][][]const u8 = freq_subgraphs_edge_list(paths_var_1, nodes);
    print_all(nodes, support, clusters, graph, freq_subgraph_edge_list);
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        mochi_main();
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .pointer => |p| {
        if (p.size == .slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .@"struct" => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.heap.pageSize()));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
