// Generated by Mochi Zig transpiler on 2025-08-14 22:13 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const grid1_var: [][]i64 = @constCast(([3][]i64{@constCast(([3]i64{1, 3, 1})[0..3]), @constCast(([3]i64{1, 5, 1})[0..3]), @constCast(([3]i64{4, 2, 1})[0..3])})[0..3]);
const grid2_var: [][]i64 = @constCast(([5][]i64{@constCast(([5]i64{1, 0, 5, 6, 7})[0..5]), @constCast(([5]i64{8, 9, 0, 4, 2})[0..5]), @constCast(([5]i64{4, 4, 4, 5, 1})[0..5]), @constCast(([5]i64{9, 6, 3, 1, 0})[0..5]), @constCast(([5]i64{8, 4, 3, 2, 7})[0..5])})[0..5]);

fn fill_row(current_row_param: []i64, row_above: []i64) []i64 {
    var current_row_var: []i64 = current_row_param;
    current_row_var = current_row_var;
    current_row_var[_idx(current_row_var.len, 0)] = current_row_var[_idx(current_row_var.len, 0)] + row_above[_idx(row_above.len, 0)];
    var cell_n: i64 = 1;
    cell_n = cell_n;
    while (cell_n < @as(i64, @intCast(current_row_var.len))) {
        const left: i64 = current_row_var[_idx(current_row_var.len, cell_n - 1)];
        const up: i64 = row_above[_idx(row_above.len, cell_n)];
        if (left < up) {
            current_row_var[_idx(current_row_var.len, cell_n)] = current_row_var[_idx(current_row_var.len, cell_n)] + left;
        } else {
            current_row_var[_idx(current_row_var.len, cell_n)] = current_row_var[_idx(current_row_var.len, cell_n)] + up;
        }
        cell_n = cell_n + 1;
    }
    return current_row_var;
}

fn min_path_sum(grid_param: [][]i64) i64 {
    var grid_var: [][]i64 = grid_param;
    grid_var = grid_var;
    if (@as(i64, @intCast(grid_var.len)) == 0 or @as(i64, @intCast(grid_var[_idx(grid_var.len, 0)].len)) == 0) {
        _ = error("The grid does not contain the appropriate information");
    }
    var cell_n: i64 = 1;
    cell_n = cell_n;
    while (cell_n < @as(i64, @intCast(grid_var[_idx(grid_var.len, 0)].len))) {
        grid_var[_idx(grid_var.len, 0)][_idx(grid_var[_idx(grid_var.len, 0)].len, cell_n)] = grid_var[_idx(grid_var.len, 0)][_idx(grid_var[_idx(grid_var.len, 0)].len, cell_n)] + grid_var[_idx(grid_var.len, 0)][_idx(grid_var[_idx(grid_var.len, 0)].len, cell_n - 1)];
        cell_n = cell_n + 1;
    }
    var row_above: []i64 = grid_var[_idx(grid_var.len, 0)];
    row_above = row_above;
    var row_n: i64 = 1;
    row_n = row_n;
    while (row_n < @as(i64, @intCast(grid_var.len))) {
        const current_row: []i64 = grid_var[_idx(grid_var.len, row_n)];
        grid_var[_idx(grid_var.len, row_n)] = fill_row(current_row, row_above);
        row_above = grid_var[_idx(grid_var.len, row_n)];
        row_n = row_n + 1;
    }
    return grid_var[_idx(grid_var.len, @as(i64, @intCast(grid_var.len)) - 1)][_idx(grid_var[_idx(grid_var.len, @as(i64, @intCast(grid_var.len)) - 1)].len, @as(i64, @intCast(grid_var[_idx(grid_var.len, 0)].len)) - 1)];
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        std.debug.print("{s}\n", .{_str(min_path_sum(grid1_var))});
        std.debug.print("{s}\n", .{_str(min_path_sum(grid2_var))});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .pointer => |p| {
        if (p.size == .slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .@"struct" => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.heap.pageSize()));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
