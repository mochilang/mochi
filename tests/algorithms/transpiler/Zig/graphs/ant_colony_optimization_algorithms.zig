// Generated by Mochi Zig transpiler on 2025-08-14 16:41 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

var cities_var: std.AutoHashMap(i64,[]i64) = std.AutoHashMap(i64,[]i64).init(std.heap.page_allocator);

fn sqrtApprox(x: f64) f64 {
    var guess: f64 = x / 2.0;
    guess = guess;
    var i: i64 = 0;
    i = i;
    while (i < 20) {
        guess = (guess + x / guess) / 2.0;
        i = i + 1;
    }
    return guess;
}

fn rand_float() f64 {
    return @as(f64, @floatFromInt(@mod(_now(), 1000000))) / 1000000.0;
}

fn pow_float(base: f64, exp: f64) f64 {
    var result: f64 = 1.0;
    result = result;
    var i: i64 = 0;
    i = i;
    const e: i64 = @as(i64, @intFromFloat(exp));
    while (i < e) {
        result = result * base;
        i = i + 1;
    }
    return result;
}

fn distance(city1: []i64, city2: []i64) f64 {
    const dx: f64 = @as(f64, @floatFromInt(city1[_idx(city1.len, 0)] - city2[_idx(city2.len, 0)]));
    const dy: f64 = @as(f64, @floatFromInt(city1[_idx(city1.len, 1)] - city2[_idx(city2.len, 1)]));
    return sqrtApprox(dx * dx + dy * dy);
}

fn choose_weighted(options: []i64, weights: []f64) i64 {
    var total: f64 = 0.0;
    total = total;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(weights.len))) {
        total = total + weights[_idx(weights.len, i)];
        i = i + 1;
    }
    const r: f64 = rand_float() * total;
    var accum: f64 = 0.0;
    accum = accum;
    i = 0;
    while (i < @as(i64, @intCast(weights.len))) {
        accum = accum + weights[_idx(weights.len, i)];
        if (r <= accum) {
            return options[_idx(options.len, i)];
        }
        i = i + 1;
    }
    return options[_idx(options.len, @as(i64, @intCast(options.len)) - 1)];
}

fn city_select(pheromone: [][]f64, current: i64, unvisited: []i64, alpha: f64, beta: f64, cities_param: *const std.AutoHashMap(i64,[]i64)) i64 {
    var probs: []f64 = std.heap.page_allocator.alloc(f64, 0) catch unreachable;
    probs = probs;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(unvisited.len))) {
        const city: i64 = unvisited[_idx(unvisited.len, i)];
        const dist: f64 = distance(cities_param.get(city).?, cities_param.get(current).?);
        const trail: f64 = pheromone[_idx(pheromone.len, city)][_idx(pheromone[_idx(pheromone.len, city)].len, current)];
        const prob: f64 = pow_float(trail, alpha) * pow_float(1.0 / dist, beta);
        probs = blk: { var _tmp = std.ArrayList(f64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const f64, probs)) catch |err| handleError(err); _tmp.append(prob) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    return choose_weighted(unvisited, probs);
}

fn pheromone_update(pheromone_param: [][]f64, cities_param: *const std.AutoHashMap(i64,[]i64), evaporation: f64, ants_route: [][]i64, q: f64) [][]f64 {
    var pheromone_var: [][]f64 = pheromone_param;
    pheromone_var = pheromone_var;
    const n: i64 = @as(i64, @intCast(pheromone_var.len));
    var i: i64 = 0;
    i = i;
    while (i < n) {
        var j: i64 = 0;
        j = j;
        while (j < n) {
            pheromone_var[_idx(pheromone_var.len, i)][_idx(pheromone_var[_idx(pheromone_var.len, i)].len, j)] = pheromone_var[_idx(pheromone_var.len, i)][_idx(pheromone_var[_idx(pheromone_var.len, i)].len, j)] * evaporation;
            j = j + 1;
        }
        i = i + 1;
    }
    var a: i64 = 0;
    a = a;
    while (a < @as(i64, @intCast(ants_route.len))) {
        const route: []i64 = ants_route[_idx(ants_route.len, a)];
        var total: f64 = 0.0;
        total = total;
        var r: i64 = 0;
        r = r;
        while (r < @as(i64, @intCast(route.len)) - 1) {
            total = total + distance(cities_param.get(route[_idx(route.len, r)]).?, cities_param.get(route[_idx(route.len, r + 1)]).?);
            r = r + 1;
        }
        const delta: f64 = q / total;
        r = 0;
        while (r < @as(i64, @intCast(route.len)) - 1) {
            const u: i64 = route[_idx(route.len, r)];
            const v: i64 = route[_idx(route.len, r + 1)];
            pheromone_var[_idx(pheromone_var.len, u)][_idx(pheromone_var[_idx(pheromone_var.len, u)].len, v)] = pheromone_var[_idx(pheromone_var.len, u)][_idx(pheromone_var[_idx(pheromone_var.len, u)].len, v)] + delta;
            pheromone_var[_idx(pheromone_var.len, v)][_idx(pheromone_var[_idx(pheromone_var.len, v)].len, u)] = pheromone_var[_idx(pheromone_var.len, u)][_idx(pheromone_var[_idx(pheromone_var.len, u)].len, v)];
            r = r + 1;
        }
        a = a + 1;
    }
    return pheromone_var;
}

fn remove_value(lst: []i64, val: i64) []i64 {
    var res: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    res = res;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(lst.len))) {
        if (lst[_idx(lst.len, i)] != val) {
            res = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, res)) catch |err| handleError(err); _tmp.append(lst[_idx(lst.len, i)]) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        }
        i = i + 1;
    }
    return res;
}

fn ant_colony(cities_param: *const std.AutoHashMap(i64,[]i64), ants_num: i64, iterations: i64, evaporation: f64, alpha: f64, beta: f64, q: f64) void {
    const n: i64 = @as(i64, @intCast(cities_param.count()));
    var pheromone: [][]f64 = std.heap.page_allocator.alloc([]f64, 0) catch unreachable;
    pheromone = pheromone;
    var i: i64 = 0;
    i = i;
    while (i < n) {
        var row: []f64 = std.heap.page_allocator.alloc(f64, 0) catch unreachable;
        row = row;
        var j: i64 = 0;
        j = j;
        while (j < n) {
            row = blk: { var _tmp = std.ArrayList(f64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const f64, row)) catch |err| handleError(err); _tmp.append(1.0) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            j = j + 1;
        }
        pheromone = blk: { var _tmp = std.ArrayList([]f64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []f64, pheromone)) catch |err| handleError(err); _tmp.append(row) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    var best_path: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    best_path = best_path;
    var best_distance: f64 = 1000000000.0;
    best_distance = best_distance;
    var iter: i64 = 0;
    iter = iter;
    while (iter < iterations) {
        var ants_route: [][]i64 = std.heap.page_allocator.alloc([]i64, 0) catch unreachable;
        ants_route = ants_route;
        var k: i64 = 0;
        k = k;
        while (k < ants_num) {
            var route: []i64 = std.heap.page_allocator.dupe(i64, (&([1]i64{0}))[0..]) catch unreachable;
            route = route;
            var unvisited: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
            unvisited = unvisited;
            var __mapit1 = cities_param.keyIterator();
            while (__mapit1.next()) |__it0| {
                const key = __it0.*;
                if (key != 0) {
                    unvisited = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, unvisited)) catch |err| handleError(err); _tmp.append(key) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
                }
            }
            var current: i64 = 0;
            current = current;
            while (@as(i64, @intCast(unvisited.len)) > 0) {
                const next_city: i64 = city_select(pheromone, current, unvisited, alpha, beta, cities_param);
                route = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, route)) catch |err| handleError(err); _tmp.append(next_city) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
                unvisited = remove_value(unvisited, next_city);
                current = next_city;
            }
            route = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, route)) catch |err| handleError(err); _tmp.append(0) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            ants_route = blk: { var _tmp = std.ArrayList([]i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []i64, ants_route)) catch |err| handleError(err); _tmp.append(route) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            k = k + 1;
        }
        pheromone = pheromone_update(pheromone, cities_param, evaporation, ants_route, q);
        var a: i64 = 0;
        a = a;
        while (a < @as(i64, @intCast(ants_route.len))) {
            var route: []i64 = ants_route[_idx(ants_route.len, a)];
            route = route;
            var dist: f64 = 0.0;
            dist = dist;
            var r: i64 = 0;
            r = r;
            while (r < @as(i64, @intCast(route.len)) - 1) {
                dist = dist + distance(cities_param.get(route[_idx(route.len, r)]).?, cities_param.get(route[_idx(route.len, r + 1)]).?);
                r = r + 1;
            }
            if (dist < best_distance) {
                best_distance = dist;
                best_path = route;
            }
            a = a + 1;
        }
        iter = iter + 1;
    }
    std.debug.print("{s}\n", .{_concat_string("best_path = ", _str(best_path))});
    std.debug.print("{s}\n", .{_concat_string("best_distance = ", _str(best_distance))});
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        cities_var = blk0: { var m = std.AutoHashMap(i64, []i64).init(std.heap.page_allocator); m.put(0, @constCast(&([2]i64{0, 0}))[0..]) catch unreachable; m.put(1, @constCast(&([2]i64{0, 5}))[0..]) catch unreachable; m.put(2, @constCast(&([2]i64{3, 8}))[0..]) catch unreachable; m.put(3, @constCast(&([2]i64{8, 10}))[0..]) catch unreachable; m.put(4, @constCast(&([2]i64{12, 8}))[0..]) catch unreachable; m.put(5, @constCast(&([2]i64{12, 4}))[0..]) catch unreachable; m.put(6, @constCast(&([2]i64{8, 0}))[0..]) catch unreachable; m.put(7, @constCast(&([2]i64{6, 2}))[0..]) catch unreachable; break :blk0 m; };
        ant_colony(&cities_var, 10, 20, 0.7, 1.0, 5.0, 10.0);
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
