// Generated by Mochi Zig transpiler on 2025-08-14 22:13 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn topological_sort(graph: *const std.AutoHashMap(i64,[]i64)) []i64 {
    var indegree: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    indegree = indegree;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(graph.count()))) {
        indegree = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, indegree)) catch |err| handleError(err); _tmp.append(0) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    for (blk: { var it = graph.iterator(); var arr = std.ArrayList(i64).init(std.heap.page_allocator); while (it.next()) |kv| { arr.append(kv.value) catch unreachable; } break :blk arr.toOwnedSlice() catch unreachable; }) |__it0| {
        const edges = __it0;
        var j: i64 = 0;
        j = j;
        while (j < @as(i64, @intCast(edges.len))) {
            const v: i64 = edges[_idx(edges.len, j)];
            indegree[_idx(indegree.len, v)] = indegree[_idx(indegree.len, v)] + 1;
            j = j + 1;
        }
    }
    var queue: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    queue = queue;
    i = 0;
    while (i < @as(i64, @intCast(indegree.len))) {
        if (indegree[_idx(indegree.len, i)] == 0) {
            queue = blk: { var _tmp_1 = std.ArrayList(i64).init(std.heap.page_allocator); _tmp_1.appendSlice(@as([]const i64, queue)) catch |err| handleError(err); _tmp_1.append(i) catch |err| handleError(err); break :blk (_tmp_1.toOwnedSlice() catch |err| handleError(err)); };
        }
        i = i + 1;
    }
    var order: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    order = order;
    var head: i64 = 0;
    head = head;
    var processed: i64 = 0;
    processed = processed;
    while (head < @as(i64, @intCast(queue.len))) {
        const v: i64 = queue[_idx(queue.len, head)];
        head = head + 1;
        processed = processed + 1;
        order = blk: { var _tmp_2 = std.ArrayList(i64).init(std.heap.page_allocator); _tmp_2.appendSlice(@as([]const i64, order)) catch |err| handleError(err); _tmp_2.append(v) catch |err| handleError(err); break :blk (_tmp_2.toOwnedSlice() catch |err| handleError(err)); };
        const neighbors: []i64 = graph.get(v).?;
        var k: i64 = 0;
        k = k;
        while (k < @as(i64, @intCast(neighbors.len))) {
            const nb: i64 = neighbors[_idx(neighbors.len, k)];
            indegree[_idx(indegree.len, nb)] = indegree[_idx(indegree.len, nb)] - 1;
            if (indegree[_idx(indegree.len, nb)] == 0) {
                queue = blk: { var _tmp_3 = std.ArrayList(i64).init(std.heap.page_allocator); _tmp_3.appendSlice(@as([]const i64, queue)) catch |err| handleError(err); _tmp_3.append(nb) catch |err| handleError(err); break :blk (_tmp_3.toOwnedSlice() catch |err| handleError(err)); };
            }
            k = k + 1;
        }
    }
    if (processed != @as(i64, @intCast(graph.count()))) {
        return Value{.Null = {}};
    }
    return order;
}

fn mochi_main() void {
    const graph: std.AutoHashMap(i64,[]i64) = blk0: { var m = std.AutoHashMap(i64, []i64).init(std.heap.page_allocator); m.put(0, @constCast(([2]i64{1, 2})[0..2])) catch unreachable; m.put(1, @constCast(([1]i64{3})[0..1])) catch unreachable; m.put(2, @constCast(([1]i64{3})[0..1])) catch unreachable; m.put(3, @constCast(([2]i64{4, 5})[0..2])) catch unreachable; m.put(4, @constCast((&[_]i64{})[0..0])) catch unreachable; m.put(5, @constCast((&[_]i64{})[0..0])) catch unreachable; break :blk0 m; };
    std.debug.print("{s}\n", .{_str(topological_sort(@constCast(&graph)))});
    const cyclic: std.AutoHashMap(i64,[]i64) = blk1: { var m_1 = std.AutoHashMap(i64, []i64).init(std.heap.page_allocator); m_1.put(0, @constCast(([1]i64{1})[0..1])) catch unreachable; m_1.put(1, @constCast(([1]i64{2})[0..1])) catch unreachable; m_1.put(2, @constCast(([1]i64{0})[0..1])) catch unreachable; break :blk1 m_1; };
    std.debug.print("{s}\n", .{_str(topological_sort(@constCast(&cyclic)))});
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        mochi_main();
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    if (@TypeOf(v) == Value) {
        return switch (v) {
            .Int => std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v.Int}) catch unreachable,
            .Float => std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v.Float}) catch unreachable,
            .Str => std.fmt.allocPrint(std.heap.page_allocator, "'{s}'", .{v.Str}) catch unreachable,
            .Bool => if (v.Bool) "true" else "false",
            .List => _str(v.List),
            .StrList => _str(v.StrList),
            else => "null",
        };
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .pointer => |p| {
        if (p.size == .slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .@"struct" => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.heap.pageSize()));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
