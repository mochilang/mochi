// Generated by Mochi Zig transpiler on 2025-08-14 22:13 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const QueueNode = struct {
    node: []const u8,
    weight: i64,
};

const MSTResult = struct {
    dist: std.StringHashMap(i64),
    parent: std.StringHashMap([]const u8),
};

var graph_var_1: std.StringHashMap(std.StringHashMap(i64)) = std.StringHashMap(std.StringHashMap(i64)).init(std.heap.page_allocator);
var res_var: MSTResult = undefined;

fn prims_algo(graph_param: *const std.StringHashMap(std.StringHashMap(i64))) MSTResult {
    const INF: i64 = 2147483647;
    var dist_var_1: std.StringHashMap(i64) = std.StringHashMap(i64).init(std.heap.page_allocator);
    dist_var_1 = dist_var_1;
    var parent: std.StringHashMap([]const u8) = std.StringHashMap([]const u8).init(std.heap.page_allocator);
    parent = parent;
    var queue: []QueueNode = std.heap.page_allocator.alloc(QueueNode, 0) catch unreachable;
    queue = queue;
    var __mapit1 = graph_param.keyIterator();
    while (__mapit1.next()) |__it0| {
        const node = __it0.*;
        dist_var_1.put(node, INF) catch unreachable;
        parent.put(node, "") catch unreachable;
        queue = blk: { var _tmp = std.ArrayList(QueueNode).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const QueueNode, queue)) catch |err| handleError(err); _tmp.append(.{ .node = node, .weight = INF }) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
    }
    if (@as(i64, @intCast(queue.len)) == 0) {
        return .{ .dist = dist_var_1, .parent = parent };
    }
    var min_idx: i64 = 0;
    min_idx = min_idx;
    var i: i64 = 1;
    i = i;
    while (i < @as(i64, @intCast(queue.len))) {
        if (queue[_idx(queue.len, i)].weight < queue[_idx(queue.len, min_idx)].weight) {
            min_idx = i;
        }
        i = i + 1;
    }
    const start_node: QueueNode = queue[_idx(queue.len, min_idx)];
    var new_q: []QueueNode = std.heap.page_allocator.alloc(QueueNode, 0) catch unreachable;
    new_q = new_q;
    var j: i64 = 0;
    j = j;
    while (j < @as(i64, @intCast(queue.len))) {
        if (j != min_idx) {
            new_q = blk: { var _tmp_1 = std.ArrayList(QueueNode).init(std.heap.page_allocator); _tmp_1.appendSlice(@as([]const QueueNode, new_q)) catch |err| handleError(err); _tmp_1.append(queue[_idx(queue.len, j)]) catch |err| handleError(err); break :blk (_tmp_1.toOwnedSlice() catch |err| handleError(err)); };
        }
        j = j + 1;
    }
    queue = new_q;
    dist_var_1.put(start_node.node, 0) catch unreachable;
    var __mapit3 = graph_param.get(start_node.node).?.keyIterator();
    while (__mapit3.next()) |__it2| {
        const neighbour = __it2.*;
        const w: i64 = graph_param.get(start_node.node).?.get(neighbour).?;
        if (dist_var_1.get(neighbour).? > dist_var_1.get(start_node.node).? + w) {
            dist_var_1.put(neighbour, dist_var_1.get(start_node.node).? + w) catch unreachable;
            parent.put(neighbour, start_node.node) catch unreachable;
            var k: i64 = 0;
            k = k;
            while (k < @as(i64, @intCast(queue.len))) {
                if (std.mem.eql(u8, queue[_idx(queue.len, k)].node, neighbour)) {
                    queue.weight = dist_var_1.get(neighbour).?;
                    break;
                }
                k = k + 1;
            }
        }
    }
    while (@as(i64, @intCast(queue.len)) > 0) {
        var best_idx: i64 = 0;
        best_idx = best_idx;
        var p: i64 = 1;
        p = p;
        while (p < @as(i64, @intCast(queue.len))) {
            if (queue[_idx(queue.len, p)].weight < queue[_idx(queue.len, best_idx)].weight) {
                best_idx = p;
            }
            p = p + 1;
        }
        const node_entry: QueueNode = queue[_idx(queue.len, best_idx)];
        var tmp: []QueueNode = std.heap.page_allocator.alloc(QueueNode, 0) catch unreachable;
        tmp = tmp;
        var q: i64 = 0;
        q = q;
        while (q < @as(i64, @intCast(queue.len))) {
            if (q != best_idx) {
                tmp = blk: { var _tmp_2 = std.ArrayList(QueueNode).init(std.heap.page_allocator); _tmp_2.appendSlice(@as([]const QueueNode, tmp)) catch |err| handleError(err); _tmp_2.append(queue[_idx(queue.len, q)]) catch |err| handleError(err); break :blk (_tmp_2.toOwnedSlice() catch |err| handleError(err)); };
            }
            q = q + 1;
        }
        queue = tmp;
        var __mapit5 = graph_param.get(node_entry.node).?.keyIterator();
        while (__mapit5.next()) |__it4| {
            const neighbour = __it4.*;
            const w: i64 = graph_param.get(node_entry.node).?.get(neighbour).?;
            if (dist_var_1.get(neighbour).? > dist_var_1.get(node_entry.node).? + w) {
                dist_var_1.put(neighbour, dist_var_1.get(node_entry.node).? + w) catch unreachable;
                parent.put(neighbour, node_entry.node) catch unreachable;
                var r: i64 = 0;
                r = r;
                while (r < @as(i64, @intCast(queue.len))) {
                    if (std.mem.eql(u8, queue[_idx(queue.len, r)].node, neighbour)) {
                        queue.weight = dist_var_1.get(neighbour).?;
                        break;
                    }
                    r = r + 1;
                }
            }
        }
    }
    return .{ .dist = dist_var_1, .parent = parent };
}

fn iabs(x: i64) i64 {
    if (x < 0) {
        return 0 - x;
    }
    return x;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        graph_var_1 = std.StringHashMap(std.StringHashMap(i64)).init(std.heap.page_allocator);
        res_var = prims_algo(&graph_var_1);
        graph_var_1.put("a", blk0: { var m = std.StringHashMap(i64).init(std.heap.page_allocator); m.put("b", 3) catch unreachable; m.put("c", 15) catch unreachable; break :blk0 m; }) catch unreachable;
        graph_var_1.put("b", blk1: { var m_1 = std.StringHashMap(i64).init(std.heap.page_allocator); m_1.put("a", 3) catch unreachable; m_1.put("c", 10) catch unreachable; m_1.put("d", 100) catch unreachable; break :blk1 m_1; }) catch unreachable;
        graph_var_1.put("c", blk2: { var m_2 = std.StringHashMap(i64).init(std.heap.page_allocator); m_2.put("a", 15) catch unreachable; m_2.put("b", 10) catch unreachable; m_2.put("d", 5) catch unreachable; break :blk2 m_2; }) catch unreachable;
        graph_var_1.put("d", blk3: { var m_3 = std.StringHashMap(i64).init(std.heap.page_allocator); m_3.put("b", 100) catch unreachable; m_3.put("c", 5) catch unreachable; break :blk3 m_3; }) catch unreachable;
        std.debug.print("{s}\n", .{_str(iabs(res_var.dist.get("a").? - res_var.dist.get("b").?))});
        std.debug.print("{s}\n", .{_str(iabs(res_var.dist.get("d").? - res_var.dist.get("b").?))});
        std.debug.print("{s}\n", .{_str(iabs(res_var.dist.get("a").? - res_var.dist.get("c").?))});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .pointer => |p| {
        if (p.size == .slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .@"struct" => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.heap.pageSize()));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
