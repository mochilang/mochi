// Generated by Mochi Zig transpiler on 2025-08-14 18:16 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

var G_var: std.StringHashMap([][]const u8) = std.StringHashMap([][]const u8).init(std.heap.page_allocator);

fn join(xs: [][]const u8) []const u8 {
    var s: []const u8 = "";
    s = s;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(xs.len))) {
        s = _concat_string(s, xs[_idx(xs.len, i)]);
        i = i + 1;
    }
    return s;
}

fn breadth_first_search(graph: *const std.StringHashMap([][]const u8), start: []const u8) [][]const u8 {
    var explored: std.StringHashMap(bool) = std.StringHashMap(bool).init(std.heap.page_allocator);
    explored = explored;
    explored.put(start, true) catch unreachable;
    var result: [][]const u8 = blk: { var _tmp = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp.append(start) catch unreachable; break :blk (_tmp.toOwnedSlice() catch unreachable); };
    result = result;
    var queue: [][]const u8 = blk: { var _tmp = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp.append(start) catch unreachable; break :blk (_tmp.toOwnedSlice() catch unreachable); };
    queue = queue;
    while (@as(i64, @intCast(queue.len)) > 0) {
        const v: []const u8 = queue[_idx(queue.len, 0)];
        queue = queue[@as(usize, @intCast(1))..@min(@as(usize, @intCast(@as(i64, @intCast(queue.len)))), @as(usize, @intCast(queue.len)))];
        const children: [][]const u8 = graph.get(v) orelse undefined;
        var i: i64 = 0;
        i = i;
        while (i < @as(i64, @intCast(children.len))) {
            const w: []const u8 = children[_idx(children.len, i)];
            if (!(explored.contains(w))) {
                explored.put(w, true) catch unreachable;
                result = blk: { var _tmp = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []const u8, result)) catch |err| handleError(err); _tmp.append(@constCast(w)) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
                queue = blk: { var _tmp = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []const u8, queue)) catch |err| handleError(err); _tmp.append(@constCast(w)) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            }
            i = i + 1;
        }
    }
    return result;
}

fn breadth_first_search_with_deque(graph: *const std.StringHashMap([][]const u8), start: []const u8) [][]const u8 {
    var visited: std.StringHashMap(bool) = std.StringHashMap(bool).init(std.heap.page_allocator);
    visited = visited;
    visited.put(start, true) catch unreachable;
    var result: [][]const u8 = blk: { var _tmp = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp.append(start) catch unreachable; break :blk (_tmp.toOwnedSlice() catch unreachable); };
    result = result;
    var queue: [][]const u8 = blk: { var _tmp = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp.append(start) catch unreachable; break :blk (_tmp.toOwnedSlice() catch unreachable); };
    queue = queue;
    var head: i64 = 0;
    head = head;
    while (head < @as(i64, @intCast(queue.len))) {
        const v: []const u8 = queue[_idx(queue.len, head)];
        head = head + 1;
        const children: [][]const u8 = graph.get(v) orelse undefined;
        var i: i64 = 0;
        i = i;
        while (i < @as(i64, @intCast(children.len))) {
            const child: []const u8 = children[_idx(children.len, i)];
            if (!(visited.contains(child))) {
                visited.put(child, true) catch unreachable;
                result = blk: { var _tmp = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []const u8, result)) catch |err| handleError(err); _tmp.append(@constCast(child)) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
                queue = blk: { var _tmp = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []const u8, queue)) catch |err| handleError(err); _tmp.append(@constCast(child)) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            }
            i = i + 1;
        }
    }
    return result;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        G_var = blk0: { var m = std.StringHashMap([][]const u8).init(std.heap.page_allocator); m.put("A", @constCast(&([2][]const u8{"B", "C"}))[0..]) catch unreachable; m.put("B", @constCast(&([3][]const u8{"A", "D", "E"}))[0..]) catch unreachable; m.put("C", @constCast(&([2][]const u8{"A", "F"}))[0..]) catch unreachable; m.put("D", @constCast(&([1][]const u8{"B"}))[0..]) catch unreachable; m.put("E", @constCast(&([2][]const u8{"B", "F"}))[0..]) catch unreachable; m.put("F", @constCast(&([2][]const u8{"C", "E"}))[0..]) catch unreachable; break :blk0 m; };
        std.debug.print("{s}\n", .{join(breadth_first_search(&G_var, "A"))});
        std.debug.print("{s}\n", .{join(breadth_first_search_with_deque(&G_var, "A"))});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.heap.pageSize()));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
