// Generated by Mochi Zig transpiler on 2025-08-14 22:13 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const GraphAdjacencyList = struct {
    adj_list: std.StringHashMap([][]const u8),
    directed: bool,
};

var d_graph_var_1: GraphAdjacencyList = undefined;

fn make_graph(directed: bool) GraphAdjacencyList {
    const m: std.StringHashMap([][]const u8) = std.StringHashMap([][]const u8).init(std.heap.page_allocator);
    return .{ .adj_list = m, .directed = directed };
}

fn contains_vertex(m: *const std.StringHashMap([][]const u8), v: []const u8) bool {
    return m.contains(v);
}

fn add_edge(g_param: *GraphAdjacencyList, s: []const u8, d: []const u8) GraphAdjacencyList {
    var adj: std.StringHashMap([][]const u8) = g_param.adj_list;
    adj = adj;
    if (!(g_param.directed)) {
        if (contains_vertex(&adj, s) and contains_vertex(&adj, d)) {
            adj.put(s, blk: { var _tmp = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []const u8, adj.get(s).?)) catch |err| handleError(err); _tmp.append(@constCast(d)) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); }) catch unreachable;
            adj.put(d, blk: { var _tmp_1 = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp_1.appendSlice(@as([]const []const u8, adj.get(d).?)) catch |err| handleError(err); _tmp_1.append(@constCast(s)) catch |err| handleError(err); break :blk (_tmp_1.toOwnedSlice() catch |err| handleError(err)); }) catch unreachable;
        } else {
            if (contains_vertex(&adj, s)) {
                adj.put(s, blk: { var _tmp_2 = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp_2.appendSlice(@as([]const []const u8, adj.get(s).?)) catch |err| handleError(err); _tmp_2.append(@constCast(d)) catch |err| handleError(err); break :blk (_tmp_2.toOwnedSlice() catch |err| handleError(err)); }) catch unreachable;
                adj.put(d, blk0: { var _tmp_3 = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp_3.append(s) catch unreachable; break :blk0 (_tmp_3.toOwnedSlice() catch unreachable); }) catch unreachable;
            } else {
                if (contains_vertex(&adj, d)) {
                    adj.put(d, blk: { var _tmp_4 = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp_4.appendSlice(@as([]const []const u8, adj.get(d).?)) catch |err| handleError(err); _tmp_4.append(@constCast(s)) catch |err| handleError(err); break :blk (_tmp_4.toOwnedSlice() catch |err| handleError(err)); }) catch unreachable;
                    adj.put(s, blk1: { var _tmp_5 = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp_5.append(d) catch unreachable; break :blk1 (_tmp_5.toOwnedSlice() catch unreachable); }) catch unreachable;
                } else {
                    adj.put(s, blk2: { var _tmp_6 = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp_6.append(d) catch unreachable; break :blk2 (_tmp_6.toOwnedSlice() catch unreachable); }) catch unreachable;
                    adj.put(d, blk3: { var _tmp_7 = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp_7.append(s) catch unreachable; break :blk3 (_tmp_7.toOwnedSlice() catch unreachable); }) catch unreachable;
                }
            }
        }
    } else {
        if (contains_vertex(&adj, s) and contains_vertex(&adj, d)) {
            adj.put(s, blk: { var _tmp_8 = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp_8.appendSlice(@as([]const []const u8, adj.get(s).?)) catch |err| handleError(err); _tmp_8.append(@constCast(d)) catch |err| handleError(err); break :blk (_tmp_8.toOwnedSlice() catch |err| handleError(err)); }) catch unreachable;
        } else {
            if (contains_vertex(&adj, s)) {
                adj.put(s, blk: { var _tmp_9 = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp_9.appendSlice(@as([]const []const u8, adj.get(s).?)) catch |err| handleError(err); _tmp_9.append(@constCast(d)) catch |err| handleError(err); break :blk (_tmp_9.toOwnedSlice() catch |err| handleError(err)); }) catch unreachable;
                adj.put(d, @constCast((&[_]i64{}))[0..]) catch unreachable;
            } else {
                if (contains_vertex(&adj, d)) {
                    adj.put(s, blk4: { var _tmp_10 = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp_10.append(d) catch unreachable; break :blk4 (_tmp_10.toOwnedSlice() catch unreachable); }) catch unreachable;
                } else {
                    adj.put(s, blk5: { var _tmp_11 = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp_11.append(d) catch unreachable; break :blk5 (_tmp_11.toOwnedSlice() catch unreachable); }) catch unreachable;
                    adj.put(d, @constCast((&[_]i64{}))[0..]) catch unreachable;
                }
            }
        }
    }
    g_param.adj_list = adj;
    return g_param.*;
}

fn graph_to_string(g: GraphAdjacencyList) []const u8 {
    return _str(g.adj_list);
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        d_graph_var_1 = make_graph(true);
        d_graph_var_1 = add_edge(&d_graph_var_1, "0", "1");
        std.debug.print("{s}\n", .{graph_to_string(d_graph_var_1)});
        d_graph_var_1 = add_edge(&d_graph_var_1, "1", "2");
        d_graph_var_1 = add_edge(&d_graph_var_1, "1", "4");
        d_graph_var_1 = add_edge(&d_graph_var_1, "1", "5");
        std.debug.print("{s}\n", .{graph_to_string(d_graph_var_1)});
        d_graph_var_1 = add_edge(&d_graph_var_1, "2", "0");
        d_graph_var_1 = add_edge(&d_graph_var_1, "2", "6");
        d_graph_var_1 = add_edge(&d_graph_var_1, "2", "7");
        std.debug.print("{s}\n", .{graph_to_string(d_graph_var_1)});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .pointer => |p| {
        if (p.size == .slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .@"struct" => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.heap.pageSize()));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
