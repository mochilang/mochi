// Generated by Mochi Zig transpiler on 2025-08-14 22:13 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const Pair = struct {
    u: i64,
    v: i64,
};

const Edge = struct {
    to: i64,
    weight: i64,
};

const INF_var: i64 = 1000000000;
var adjacency_list_var: [][]Edge = &[_][]Edge{};
var mst_edges_var: []Pair = &[_]Pair{};

fn pairs_to_string(edges: []Pair) []const u8 {
    var s: []const u8 = "[";
    s = s;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(edges.len))) {
        const e: Pair = edges[_idx(edges.len, i)];
        s = _concat_string(_concat_string(_concat_string(_concat_string(_concat_string(s, "("), _str(e.u)), ", "), _str(e.v)), ")");
        if (i < @as(i64, @intCast(edges.len)) - 1) {
            s = _concat_string(s, ", ");
        }
        i = i + 1;
    }
    return _concat_string(s, "]");
}

fn prim_mst(graph: [][]Edge) []Pair {
    const n: i64 = @as(i64, @intCast(graph.len));
    var visited: []bool = std.heap.page_allocator.alloc(bool, 0) catch unreachable;
    visited = visited;
    var dist: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    dist = dist;
    var parent: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    parent = parent;
    var i: i64 = 0;
    i = i;
    while (i < n) {
        visited = blk: { var _tmp = std.ArrayList(bool).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const bool, visited)) catch |err| handleError(err); _tmp.append(false) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        dist = blk: { var _tmp_1 = std.ArrayList(i64).init(std.heap.page_allocator); _tmp_1.appendSlice(@as([]const i64, dist)) catch |err| handleError(err); _tmp_1.append(INF_var) catch |err| handleError(err); break :blk (_tmp_1.toOwnedSlice() catch |err| handleError(err)); };
        parent = blk: { var _tmp_2 = std.ArrayList(i64).init(std.heap.page_allocator); _tmp_2.appendSlice(@as([]const i64, parent)) catch |err| handleError(err); _tmp_2.append(0 - 1) catch |err| handleError(err); break :blk (_tmp_2.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    dist[_idx(dist.len, 0)] = 0;
    var result: []Pair = std.heap.page_allocator.alloc(Pair, 0) catch unreachable;
    result = result;
    var count: i64 = 0;
    count = count;
    while (count < n) {
        var min_val: i64 = INF_var;
        min_val = min_val;
        var u: i64 = 0;
        u = u;
        var v: i64 = 0;
        v = v;
        while (v < n) {
            if (visited[_idx(visited.len, v)] == false and dist[_idx(dist.len, v)] < min_val) {
                min_val = dist[_idx(dist.len, v)];
                u = v;
            }
            v = v + 1;
        }
        if (min_val == INF_var) {
            break;
        }
        visited[_idx(visited.len, u)] = true;
        if (u != 0) {
            result = blk: { var _tmp_3 = std.ArrayList(Pair).init(std.heap.page_allocator); _tmp_3.appendSlice(@as([]const Pair, result)) catch |err| handleError(err); _tmp_3.append(.{ .u = parent[_idx(parent.len, u)], .v = u }) catch |err| handleError(err); break :blk (_tmp_3.toOwnedSlice() catch |err| handleError(err)); };
        }
        for (graph[_idx(graph.len, u)]) |__it0| {
            const e = __it0;
            if (visited[_idx(visited.len, e.to)] == false and e.weight < dist[_idx(dist.len, e.to)]) {
                dist[_idx(dist.len, e.to)] = e.weight;
                parent[_idx(parent.len, e.to)] = u;
            }
        }
        count = count + 1;
    }
    return result;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        adjacency_list_var = std.heap.page_allocator.dupe([]Edge, blk0: { var _tmp_4 = std.ArrayList([]Edge).init(std.heap.page_allocator); _tmp_4.append(@constCast(blk1: { var _tmp_5 = std.ArrayList(Edge).init(std.heap.page_allocator); _tmp_5.append(.{ .to = 1, .weight = 1 }) catch unreachable; _tmp_5.append(.{ .to = 3, .weight = 3 }) catch unreachable; break :blk1 (_tmp_5.toOwnedSlice() catch unreachable); })) catch unreachable; _tmp_4.append(@constCast(blk2: { var _tmp_6 = std.ArrayList(Edge).init(std.heap.page_allocator); _tmp_6.append(.{ .to = 0, .weight = 1 }) catch unreachable; _tmp_6.append(.{ .to = 2, .weight = 6 }) catch unreachable; _tmp_6.append(.{ .to = 3, .weight = 5 }) catch unreachable; _tmp_6.append(.{ .to = 4, .weight = 1 }) catch unreachable; break :blk2 (_tmp_6.toOwnedSlice() catch unreachable); })) catch unreachable; _tmp_4.append(@constCast(blk3: { var _tmp_7 = std.ArrayList(Edge).init(std.heap.page_allocator); _tmp_7.append(.{ .to = 1, .weight = 6 }) catch unreachable; _tmp_7.append(.{ .to = 4, .weight = 5 }) catch unreachable; _tmp_7.append(.{ .to = 5, .weight = 2 }) catch unreachable; break :blk3 (_tmp_7.toOwnedSlice() catch unreachable); })) catch unreachable; _tmp_4.append(@constCast(blk4: { var _tmp_8 = std.ArrayList(Edge).init(std.heap.page_allocator); _tmp_8.append(.{ .to = 0, .weight = 3 }) catch unreachable; _tmp_8.append(.{ .to = 1, .weight = 5 }) catch unreachable; _tmp_8.append(.{ .to = 4, .weight = 1 }) catch unreachable; break :blk4 (_tmp_8.toOwnedSlice() catch unreachable); })) catch unreachable; _tmp_4.append(@constCast(blk5: { var _tmp_9 = std.ArrayList(Edge).init(std.heap.page_allocator); _tmp_9.append(.{ .to = 1, .weight = 1 }) catch unreachable; _tmp_9.append(.{ .to = 2, .weight = 5 }) catch unreachable; _tmp_9.append(.{ .to = 3, .weight = 1 }) catch unreachable; _tmp_9.append(.{ .to = 5, .weight = 4 }) catch unreachable; break :blk5 (_tmp_9.toOwnedSlice() catch unreachable); })) catch unreachable; _tmp_4.append(@constCast(blk6: { var _tmp_10 = std.ArrayList(Edge).init(std.heap.page_allocator); _tmp_10.append(.{ .to = 2, .weight = 2 }) catch unreachable; _tmp_10.append(.{ .to = 4, .weight = 4 }) catch unreachable; break :blk6 (_tmp_10.toOwnedSlice() catch unreachable); })) catch unreachable; break :blk0 (_tmp_4.toOwnedSlice() catch unreachable); }) catch unreachable;
        mst_edges_var = prim_mst(adjacency_list_var);
        std.debug.print("{s}\n", .{pairs_to_string(mst_edges_var)});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .pointer => |p| {
        if (p.size == .slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .@"struct" => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.heap.pageSize()));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
