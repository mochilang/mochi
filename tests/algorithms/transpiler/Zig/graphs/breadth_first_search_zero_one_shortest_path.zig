// Generated by Mochi Zig transpiler on 2025-08-14 18:16 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const Edge = struct {
    destination_vertex: i64,
    weight: i64,
};

const AdjacencyList = struct {
    graph: [][]Edge,
    size: i64,
};

var g_var: AdjacencyList = undefined;

fn new_adjacency_list(size: i64) AdjacencyList {
    var g_var_1: [][]Edge = std.heap.page_allocator.alloc([]Edge, 0) catch unreachable;
    g_var_1 = g_var_1;
    var i: i64 = 0;
    i = i;
    while (i < size) {
        g_var_1 = blk: { var _tmp = std.ArrayList([]Edge).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []Edge, g_var_1)) catch |err| handleError(err); _tmp.append(@constCast(&[_]Edge{})[0..]) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    return .{ .graph = g_var_1, .size = size };
}

fn add_edge(al_param: *AdjacencyList, from_vertex: i64, to_vertex: i64, weight: i64) void {
    if (!(weight == 0 or weight == 1)) {
        @panic("Edge weight must be either 0 or 1.");
    }
    if (to_vertex < 0 or to_vertex >= al_param.size) {
        @panic("Vertex indexes must be in [0; size).");
    }
    var g_var_1: [][]Edge = al_param.graph;
    g_var_1 = g_var_1;
    const edges: []Edge = g_var_1[_idx(g_var_1.len, from_vertex)];
    g_var_1[_idx(g_var_1.len, from_vertex)] = blk: { var _tmp = std.ArrayList(Edge).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const Edge, edges)) catch |err| handleError(err); _tmp.append(.{ .destination_vertex = to_vertex, .weight = weight }) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
    al_param.graph = g_var_1;
}

fn push_front(q: []i64, v: i64) []i64 {
    var res: []i64 = blk0: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.append(v) catch unreachable; break :blk0 (_tmp.toOwnedSlice() catch unreachable); };
    res = res;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(q.len))) {
        res = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, res)) catch |err| handleError(err); _tmp.append(q[_idx(q.len, i)]) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    return res;
}

fn pop_front(q: []i64) []i64 {
    var res: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    res = res;
    var i: i64 = 1;
    i = i;
    while (i < @as(i64, @intCast(q.len))) {
        res = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, res)) catch |err| handleError(err); _tmp.append(q[_idx(q.len, i)]) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    return res;
}

fn front(q: []i64) i64 {
    return q[_idx(q.len, 0)];
}

fn get_shortest_path(al: AdjacencyList, start_vertex: i64, finish_vertex: i64) i64 {
    var queue: []i64 = blk1: { var _tmp_1 = std.ArrayList(i64).init(std.heap.page_allocator); _tmp_1.append(start_vertex) catch unreachable; break :blk1 (_tmp_1.toOwnedSlice() catch unreachable); };
    queue = queue;
    var distances: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    distances = distances;
    var i: i64 = 0;
    i = i;
    while (i < al.size) {
        distances = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, distances)) catch |err| handleError(err); _tmp.append(0 - 1) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    distances[_idx(distances.len, start_vertex)] = 0;
    while (@as(i64, @intCast(queue.len)) > 0) {
        const current_vertex: i64 = front(queue);
        queue = pop_front(queue);
        const current_distance: i64 = distances[_idx(distances.len, current_vertex)];
        const edges: []Edge = al.graph[_idx(al.graph.len, current_vertex)];
        var j: i64 = 0;
        j = j;
        while (j < @as(i64, @intCast(edges.len))) {
            const edge: Edge = edges[_idx(edges.len, j)];
            const new_distance: i64 = current_distance + edge.weight;
            const dest: i64 = edge.destination_vertex;
            const dest_distance: i64 = distances[_idx(distances.len, dest)];
            if (dest_distance >= 0 and new_distance >= dest_distance) {
                j = j + 1;
                continue;
            }
            distances[_idx(distances.len, dest)] = new_distance;
            if (edge.weight == 0) {
                queue = push_front(queue, dest);
            } else {
                queue = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, queue)) catch |err| handleError(err); _tmp.append(dest) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            }
            j = j + 1;
        }
    }
    const result: i64 = distances[_idx(distances.len, finish_vertex)];
    if (result < 0) {
        @panic("No path from start_vertex to finish_vertex.");
    }
    return result;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        g_var = new_adjacency_list(11);
        add_edge(&g_var, 0, 1, 0);
        add_edge(&g_var, 0, 3, 1);
        add_edge(&g_var, 1, 2, 0);
        add_edge(&g_var, 2, 3, 0);
        add_edge(&g_var, 4, 2, 1);
        add_edge(&g_var, 4, 5, 1);
        add_edge(&g_var, 4, 6, 1);
        add_edge(&g_var, 5, 9, 0);
        add_edge(&g_var, 6, 7, 1);
        add_edge(&g_var, 7, 8, 1);
        add_edge(&g_var, 8, 10, 1);
        add_edge(&g_var, 9, 7, 0);
        add_edge(&g_var, 9, 10, 1);
        std.debug.print("{s}\n", .{_str(get_shortest_path(g_var, 0, 3))});
        std.debug.print("{s}\n", .{_str(get_shortest_path(g_var, 4, 10))});
        std.debug.print("{s}\n", .{_str(get_shortest_path(g_var, 4, 8))});
        std.debug.print("{s}\n", .{_str(get_shortest_path(g_var, 0, 1))});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .pointer => |p| {
        if (p.size == .slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .@"struct" => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.heap.pageSize()));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
