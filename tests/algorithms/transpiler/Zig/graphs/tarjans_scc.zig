// Generated by Mochi Zig transpiler on 2025-08-12 08:38 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn tarjan(g_param: [][]i64) [][]i64 {
    var g_var: [][]i64 = g_param;
    g_var = g_var;
    const n: i64 = @as(i64, @intCast(g_var.len));
    const stack: []i64 = @constCast(&[_]i64{})[0..];
    var on_stack: []bool = @constCast(&[_]bool{})[0..];
    on_stack = on_stack;
    var index_of: []i64 = @constCast(&[_]i64{})[0..];
    index_of = index_of;
    var lowlink_of: []i64 = @constCast(&[_]i64{})[0..];
    lowlink_of = lowlink_of;
    var i: i64 = 0;
    i = i;
    while (i < n) {
        on_stack = blk: { var _tmp = std.ArrayList(bool).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const bool, on_stack)) catch |err| handleError(err); _tmp.append(false) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        index_of = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, index_of)) catch |err| handleError(err); _tmp.append(-1) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        lowlink_of = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, lowlink_of)) catch |err| handleError(err); _tmp.append(-1) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    const components: [][]i64 = @constCast(&[_][]i64{})[0..];
    var v: i64 = 0;
    v = v;
    while (v < n) {
        if (index_of[@as(usize, @intCast(v))] == -1) {
            _ = strong_connect(components, g_var, stack, on_stack, index_of, lowlink_of, v, 0);
        }
        v = v + 1;
    }
    return components;
}

fn create_graph(n_param: i64, edges_param: [][]i64) [][]i64 {
    var n_var: i64 = n_param;
    n_var = n_var;
    var edges_var: [][]i64 = edges_param;
    edges_var = edges_var;
    var g: [][]i64 = @constCast(&[_][]i64{})[0..];
    g = g;
    var i: i64 = 0;
    i = i;
    while (i < n_var) {
        g = blk: { var _tmp = std.ArrayList([]i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []i64, g)) catch |err| handleError(err); _tmp.append(@constCast(&[_]i64{})[0..]) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    for (edges_var) |__it0| {
        const e = __it0;
        const u: i64 = e[@as(usize, @intCast(0))];
        const v: i64 = e[@as(usize, @intCast(1))];
        g[@as(usize, @intCast(u))] = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, g[@as(usize, @intCast(u))])) catch |err| handleError(err); _tmp.append(v) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
    }
    return g;
}

fn mochi_main() void {
    const n_vertices: i64 = 7;
    const source: []i64 = @constCast(&([9]i64{0, 0, 1, 2, 3, 3, 4, 4, 6}))[0..];
    const target: []i64 = @constCast(&([9]i64{1, 3, 2, 0, 1, 4, 5, 6, 5}))[0..];
    var edges: [][]i64 = @constCast(&[_][]i64{})[0..];
    edges = edges;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(source.len))) {
        edges = blk: { var _tmp = std.ArrayList([]i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []i64, edges)) catch |err| handleError(err); _tmp.append(@constCast(&([2]i64{source[@as(usize, @intCast(i))], target[@as(usize, @intCast(i))]}))[0..]) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    const g: [][]i64 = create_graph(n_vertices, edges);
    std.debug.print("{s}\n", .{_str(tarjan(g))});
}

fn strong_connect(components: [][]i64, g_var: [][]i64, stack: []i64, on_stack: []bool, index_of: []i64, lowlink_of: []i64, v_param: i64, index_param: i64) i64 {
    var v_var: i64 = v_param;
    v_var = v_var;
    var index_var: i64 = index_param;
    index_var = index_var;
    index_of[@as(usize, @intCast(v_var))] = index_var;
    lowlink_of[@as(usize, @intCast(v_var))] = index_var;
    var current_index: i64 = index_var + 1;
    current_index = current_index;
    stack = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, stack)) catch |err| handleError(err); _tmp.append(v_var) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
    on_stack[@as(usize, @intCast(v_var))] = true;
    for (g_var[@as(usize, @intCast(v_var))]) |__it1| {
        const w = __it1;
        if (index_of[@as(usize, @intCast(w))] == -1) {
            current_index = strong_connect(w, current_index);
            if (lowlink_of[@as(usize, @intCast(w))] < lowlink_of[@as(usize, @intCast(v_var))]) {
                lowlink_of[@as(usize, @intCast(v_var))] = lowlink_of[@as(usize, @intCast(w))];
            }
        } else {
            if (on_stack[@as(usize, @intCast(w))]) {
                if (lowlink_of[@as(usize, @intCast(w))] < lowlink_of[@as(usize, @intCast(v_var))]) {
                    lowlink_of[@as(usize, @intCast(v_var))] = lowlink_of[@as(usize, @intCast(w))];
                }
            }
        }
    }
    if (lowlink_of[@as(usize, @intCast(v_var))] == index_of[@as(usize, @intCast(v_var))]) {
        var component: []i64 = @constCast(&[_]i64{})[0..];
        component = component;
        var w: i64 = stack[@as(usize, @intCast(@as(i64, @intCast(stack.len)) - 1))];
        w = w;
        stack = stack[@as(usize, @intCast(0))..@min(@as(usize, @intCast(@as(i64, @intCast(stack.len)) - 1)), @as(usize, @intCast(stack.len)))];
        on_stack[@as(usize, @intCast(w))] = false;
        component = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, component)) catch |err| handleError(err); _tmp.append(w) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        while (w != v_var) {
            w = stack[@as(usize, @intCast(@as(i64, @intCast(stack.len)) - 1))];
            stack = stack[@as(usize, @intCast(0))..@min(@as(usize, @intCast(@as(i64, @intCast(stack.len)) - 1)), @as(usize, @intCast(stack.len)))];
            on_stack[@as(usize, @intCast(w))] = false;
            component = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, component)) catch |err| handleError(err); _tmp.append(w) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        }
        components = blk: { var _tmp = std.ArrayList([]i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []i64, components)) catch |err| handleError(err); _tmp.append(component) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
    }
    return current_index;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        mochi_main();
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * std.mem.page_size;
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
