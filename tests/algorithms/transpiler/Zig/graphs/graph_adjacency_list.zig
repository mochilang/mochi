// Generated by Mochi Zig transpiler on 2025-08-15 10:23 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const Graph = struct {
    adj: std.StringHashMap([][]const u8),
    directed: bool,
};

fn create_graph(vertices: [][]const u8, edges: [][][]const u8, directed: bool) Graph {
    var adj: std.StringHashMap([][]const u8) = std.StringHashMap([][]const u8).init(std.heap.page_allocator);
    adj = adj;
    for (vertices) |__it0| {
        const v = __it0;
        adj.put(v, @constCast((&[_][]const u8{})[0..0])[0..]) catch unreachable;
    }
    for (edges) |__it1| {
        const e = __it1;
        const s: []const u8 = e[_idx(e.len, 0)];
        const d: []const u8 = e[_idx(e.len, 1)];
        if (!(adj.contains(s))) {
            adj.put(s, @constCast((&[_][]const u8{})[0..0])[0..]) catch unreachable;
        }
        if (!(adj.contains(d))) {
            adj.put(d, @constCast((&[_][]const u8{})[0..0])[0..]) catch unreachable;
        }
        adj.put(s, blk: { var _tmp = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []const u8, adj.get(s).?)) catch |err| handleError(err); _tmp.append(@constCast(d)) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); }) catch unreachable;
        if (!(directed)) {
            adj.put(d, blk: { var _tmp_1 = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp_1.appendSlice(@as([]const []const u8, adj.get(d).?)) catch |err| handleError(err); _tmp_1.append(@constCast(s)) catch |err| handleError(err); break :blk (_tmp_1.toOwnedSlice() catch |err| handleError(err)); }) catch unreachable;
        }
    }
    return .{ .adj = adj, .directed = directed };
}

fn add_vertex(graph: Graph, v_1: []const u8) Graph {
    if (graph.adj.contains(v_1)) {
        @panic("vertex exists");
    }
    var adj_1: std.StringHashMap([][]const u8) = std.StringHashMap([][]const u8).init(std.heap.page_allocator);
    adj_1 = adj_1;
    var __mapit3 = graph.adj.keyIterator();
    while (__mapit3.next()) |__it2| {
        const k = __it2.*;
        adj_1.put(k, graph.adj.get(k).?) catch unreachable;
    }
    adj_1.put(v_1, @constCast((&[_][]const u8{})[0..0])[0..]) catch unreachable;
    return .{ .adj = adj_1, .directed = graph.directed };
}

fn remove_from_list(lst: [][]const u8, value: []const u8) [][]const u8 {
    var res: [][]const u8 = std.heap.page_allocator.alloc([]const u8, 0) catch unreachable;
    res = res;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(lst.len))) {
        if (!std.mem.eql(u8, lst[_idx(lst.len, i)], value)) {
            res = blk: { var _tmp_2 = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp_2.appendSlice(@as([]const []const u8, res)) catch |err| handleError(err); _tmp_2.append(@constCast(lst[_idx(lst.len, i)])) catch |err| handleError(err); break :blk (_tmp_2.toOwnedSlice() catch |err| handleError(err)); };
        }
        i = i + 1;
    }
    return res;
}

fn remove_key(m: *const std.StringHashMap([][]const u8), key: []const u8) std.StringHashMap([][]const u8) {
    var res_1: std.StringHashMap([][]const u8) = std.StringHashMap([][]const u8).init(std.heap.page_allocator);
    res_1 = res_1;
    var __mapit5 = m.keyIterator();
    while (__mapit5.next()) |__it4| {
        const k_1 = __it4.*;
        if (!std.mem.eql(u8, k_1, key)) {
            res_1.put(k_1, m.get(k_1).?) catch unreachable;
        }
    }
    return res_1;
}

fn add_edge(graph_1: Graph, s_1: []const u8, d_1: []const u8) Graph {
    if (!(graph_1.adj.contains(s_1)) or !(graph_1.adj.contains(d_1))) {
        @panic("vertex missing");
    }
    if (contains_edge(graph_1, s_1, d_1)) {
        @panic("edge exists");
    }
    var adj_2: std.StringHashMap([][]const u8) = std.StringHashMap([][]const u8).init(std.heap.page_allocator);
    adj_2 = adj_2;
    var __mapit7 = graph_1.adj.keyIterator();
    while (__mapit7.next()) |__it6| {
        const k_2 = __it6.*;
        adj_2.put(k_2, graph_1.adj.get(k_2).?) catch unreachable;
    }
    var list_s: [][]const u8 = adj_2.get(s_1).?;
    list_s = list_s;
    list_s = blk: { var _tmp_3 = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp_3.appendSlice(@as([]const []const u8, list_s)) catch |err| handleError(err); _tmp_3.append(@constCast(d_1)) catch |err| handleError(err); break :blk (_tmp_3.toOwnedSlice() catch |err| handleError(err)); };
    adj_2.put(s_1, list_s) catch unreachable;
    if (!(graph_1.directed)) {
        var list_d: [][]const u8 = adj_2.get(d_1).?;
        list_d = list_d;
        list_d = blk: { var _tmp_4 = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp_4.appendSlice(@as([]const []const u8, list_d)) catch |err| handleError(err); _tmp_4.append(@constCast(s_1)) catch |err| handleError(err); break :blk (_tmp_4.toOwnedSlice() catch |err| handleError(err)); };
        adj_2.put(d_1, list_d) catch unreachable;
    }
    return .{ .adj = adj_2, .directed = graph_1.directed };
}

fn remove_edge(graph_2: Graph, s_2: []const u8, d_2: []const u8) Graph {
    if (!(graph_2.adj.contains(s_2)) or !(graph_2.adj.contains(d_2))) {
        @panic("vertex missing");
    }
    if (!(contains_edge(graph_2, s_2, d_2))) {
        @panic("edge missing");
    }
    var adj_3: std.StringHashMap([][]const u8) = std.StringHashMap([][]const u8).init(std.heap.page_allocator);
    adj_3 = adj_3;
    var __mapit9 = graph_2.adj.keyIterator();
    while (__mapit9.next()) |__it8| {
        const k_3 = __it8.*;
        adj_3.put(k_3, graph_2.adj.get(k_3).?) catch unreachable;
    }
    adj_3.put(s_2, remove_from_list(adj_3.get(s_2).?, d_2)) catch unreachable;
    if (!(graph_2.directed)) {
        adj_3.put(d_2, remove_from_list(adj_3.get(d_2).?, s_2)) catch unreachable;
    }
    return .{ .adj = adj_3, .directed = graph_2.directed };
}

fn remove_vertex(graph_3: Graph, v_2: []const u8) Graph {
    if (!(graph_3.adj.contains(v_2))) {
        @panic("vertex missing");
    }
    var adj_4: std.StringHashMap([][]const u8) = std.StringHashMap([][]const u8).init(std.heap.page_allocator);
    adj_4 = adj_4;
    var __mapit11 = graph_3.adj.keyIterator();
    while (__mapit11.next()) |__it10| {
        const k_4 = __it10.*;
        if (!std.mem.eql(u8, k_4, v_2)) {
            adj_4.put(k_4, remove_from_list(graph_3.adj.get(k_4).?, v_2)) catch unreachable;
        }
    }
    return .{ .adj = adj_4, .directed = graph_3.directed };
}

fn contains_vertex(graph_4: Graph, v_3: []const u8) bool {
    return graph_4.adj.contains(v_3);
}

fn contains_edge(graph_5: Graph, s_3: []const u8, d_3: []const u8) bool {
    if (!(graph_5.adj.contains(s_3)) or !(graph_5.adj.contains(d_3))) {
        @panic("vertex missing");
    }
    for (graph_5.adj.get(s_3).?) |__it12| {
        const x = __it12;
        if (std.mem.eql(u8, x, d_3)) {
            return true;
        }
    }
    return false;
}

fn clear_graph(graph_6: Graph) Graph {
    return .{ .adj = std.StringHashMap([][]const u8).init(std.heap.page_allocator), .directed = graph_6.directed };
}

fn to_string(graph_7: Graph) []const u8 {
    return _str(graph_7.adj);
}

fn mochi_main() void {
    const vertices_1: [][]const u8 = @constCast(([4][]const u8{"1", "2", "3", "4"})[0..4]);
    const edges_1: [][][]const u8 = @constCast(([3][][]const u8{@constCast(([2][]const u8{"1", "2"})[0..2]), @constCast(([2][]const u8{"2", "3"})[0..2]), @constCast(([2][]const u8{"3", "4"})[0..2])})[0..3]);
    var g: Graph = create_graph(vertices_1, edges_1, false);
    g = g;
    std.debug.print("{s}\n", .{to_string(g)});
    g = add_vertex(g, "5");
    g = add_edge(g, "4", "5");
    std.debug.print("{s}\n", .{_str(contains_edge(g, "4", "5"))});
    g = remove_edge(g, "1", "2");
    g = remove_vertex(g, "3");
    std.debug.print("{s}\n", .{to_string(g)});
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        mochi_main();
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .pointer => |p| {
        if (p.size == .slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .@"struct" => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.heap.pageSize()));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
