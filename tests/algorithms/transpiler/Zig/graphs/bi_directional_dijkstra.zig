// Generated by Mochi Zig transpiler on 2025-08-14 16:41 +0700
const std = @import("std");
const Value = union(enum) { Null: void, Int: i64, Float: f64, Str: []const u8, Bool: bool, List: []Value, StrList: [][]const u8, };

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const Edge = struct {
    to: []const u8,
    cost: i64,
};

const QItem = struct {
    node: []const u8,
    cost: i64,
};

const PassResult = struct {
    queue: []QItem,
    dist: i64,
};

var graph_fwd_var_1: std.StringHashMap([]Edge) = std.StringHashMap([]Edge).init(std.heap.page_allocator);
var graph_bwd_var_1: std.StringHashMap([]Edge) = std.StringHashMap([]Edge).init(std.heap.page_allocator);

fn get_min_index(q: []QItem) i64 {
    var idx: i64 = 0;
    idx = idx;
    var i: i64 = 1;
    i = i;
    while (i < @as(i64, @intCast(q.len))) {
        if (q[_idx(q.len, i)].cost < q[_idx(q.len, idx)].cost) {
            idx = i;
        }
        i = i + 1;
    }
    return idx;
}

fn remove_at(q: []QItem, idx: i64) []QItem {
    var res: []QItem = std.heap.page_allocator.alloc(QItem, 0) catch unreachable;
    res = res;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(q.len))) {
        if (i != idx) {
            res = blk: { var _tmp = std.ArrayList(QItem).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const QItem, res)) catch |err| handleError(err); _tmp.append(q[_idx(q.len, i)]) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        }
        i = i + 1;
    }
    return res;
}

fn pass_and_relaxation(graph: *const std.StringHashMap([]Edge), v: []const u8, visited_forward: *const std.StringHashMap(bool), visited_backward: *const std.StringHashMap(bool), cst_fwd_param: *std.StringHashMap(i64), cst_bwd: *const std.StringHashMap(i64), queue: []QItem, parent_param: *std.StringHashMap([]const u8), shortest_distance: i64) PassResult {
    var q: []QItem = blk: { const tmp = std.heap.page_allocator.alloc(QItem, queue.len) catch unreachable; @memcpy(tmp, queue); break :blk tmp; };
    q = q;
    var sd: i64 = shortest_distance;
    sd = sd;
    for (graph.get(v).?) |__it0| {
        const e = __it0;
        const d: i64 = e.cost;
        if (visited_forward.contains(e.to)) {
            continue;
        }
        const old_cost: i64 = if (cst_fwd_param.contains(e.to)) cst_fwd_param.get(e.to).? else 2147483647;
        const new_cost: i64 = cst_fwd_param.get(v).? + d;
        if (new_cost < old_cost) {
            q = blk: { var _tmp = std.ArrayList(QItem).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const QItem, q)) catch |err| handleError(err); _tmp.append(.{ .node = e.to, .cost = new_cost }) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            cst_fwd_param.put(e.to, new_cost) catch unreachable;
            parent_param.put(e.to, v) catch unreachable;
        }
        if (visited_backward.contains(e.to)) {
            const alt: i64 = cst_fwd_param.get(v).? + d + cst_bwd.get(e.to).?;
            if (alt < sd) {
                sd = alt;
            }
        }
    }
    return .{ .queue = q, .dist = sd };
}

fn bidirectional_dij(source: []const u8, destination: []const u8, graph_forward: *const std.StringHashMap([]Edge), graph_backward: *const std.StringHashMap([]Edge)) i64 {
    var shortest_path_distance: i64 = 0 - 1;
    shortest_path_distance = shortest_path_distance;
    var visited_forward: std.StringHashMap(bool) = std.StringHashMap(bool).init(std.heap.page_allocator);
    visited_forward = visited_forward;
    var visited_backward: std.StringHashMap(bool) = std.StringHashMap(bool).init(std.heap.page_allocator);
    visited_backward = visited_backward;
    var cst_fwd: std.StringHashMap(i64) = std.StringHashMap(i64).init(std.heap.page_allocator);
    cst_fwd = cst_fwd;
    cst_fwd.put(source, 0) catch unreachable;
    var cst_bwd: std.StringHashMap(i64) = std.StringHashMap(i64).init(std.heap.page_allocator);
    cst_bwd = cst_bwd;
    cst_bwd.put(destination, 0) catch unreachable;
    var parent_forward: std.StringHashMap([]const u8) = std.StringHashMap([]const u8).init(std.heap.page_allocator);
    parent_forward = parent_forward;
    parent_forward.put(source, "") catch unreachable;
    var parent_backward: std.StringHashMap([]const u8) = std.StringHashMap([]const u8).init(std.heap.page_allocator);
    parent_backward = parent_backward;
    parent_backward.put(destination, "") catch unreachable;
    var queue_forward: []QItem = std.heap.page_allocator.alloc(QItem, 0) catch unreachable;
    queue_forward = queue_forward;
    queue_forward = blk: { var _tmp = std.ArrayList(QItem).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const QItem, queue_forward)) catch |err| handleError(err); _tmp.append(.{ .node = source, .cost = 0 }) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
    var queue_backward: []QItem = std.heap.page_allocator.alloc(QItem, 0) catch unreachable;
    queue_backward = queue_backward;
    queue_backward = blk: { var _tmp = std.ArrayList(QItem).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const QItem, queue_backward)) catch |err| handleError(err); _tmp.append(.{ .node = destination, .cost = 0 }) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
    var shortest_distance: i64 = 2147483647;
    shortest_distance = shortest_distance;
    if (std.mem.eql(u8, source, destination)) {
        return 0;
    }
    while (@as(i64, @intCast(queue_forward.len)) > 0 and @as(i64, @intCast(queue_backward.len)) > 0) {
        const idx_f: i64 = get_min_index(queue_forward);
        const item_f: QItem = queue_forward[_idx(queue_forward.len, idx_f)];
        queue_forward = remove_at(queue_forward, idx_f);
        visited_forward.put(item_f.node, true) catch unreachable;
        const idx_b: i64 = get_min_index(queue_backward);
        const item_b: QItem = queue_backward[_idx(queue_backward.len, idx_b)];
        queue_backward = remove_at(queue_backward, idx_b);
        visited_backward.put(item_b.node, true) catch unreachable;
        const res_f: PassResult = pass_and_relaxation(graph_forward, item_f.node, &visited_forward, &visited_backward, &cst_fwd, &cst_bwd, queue_forward, &parent_forward, shortest_distance);
        queue_forward = res_f.queue;
        shortest_distance = res_f.dist;
        const res_b: PassResult = pass_and_relaxation(graph_backward, item_b.node, &visited_backward, &visited_forward, &cst_bwd, &cst_fwd, queue_backward, &parent_backward, shortest_distance);
        queue_backward = res_b.queue;
        shortest_distance = res_b.dist;
        if (cst_fwd.get(item_f.node).? + cst_bwd.get(item_b.node).? >= shortest_distance) {
            break;
        }
    }
    if (shortest_distance != 2147483647) {
        shortest_path_distance = shortest_distance;
    }
    return shortest_path_distance;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        graph_fwd_var_1 = blk0: { var m = std.StringHashMap([]Edge).init(std.heap.page_allocator); m.put("B", @constCast(&([1]Edge{.{ .to = "C", .cost = 1 }}))[0..]) catch unreachable; m.put("C", @constCast(&([1]Edge{.{ .to = "D", .cost = 1 }}))[0..]) catch unreachable; m.put("D", @constCast(&([1]Edge{.{ .to = "F", .cost = 1 }}))[0..]) catch unreachable; m.put("E", @constCast(&([2]Edge{.{ .to = "B", .cost = 1 }, .{ .to = "G", .cost = 2 }}))[0..]) catch unreachable; m.put("F", @constCast(&[_]Edge{})[0..]) catch unreachable; m.put("G", @constCast(&([1]Edge{.{ .to = "F", .cost = 1 }}))[0..]) catch unreachable; break :blk0 m; };
        graph_bwd_var_1 = blk1: { var m_1 = std.StringHashMap([]Edge).init(std.heap.page_allocator); m_1.put("B", @constCast(&([1]Edge{.{ .to = "E", .cost = 1 }}))[0..]) catch unreachable; m_1.put("C", @constCast(&([1]Edge{.{ .to = "B", .cost = 1 }}))[0..]) catch unreachable; m_1.put("D", @constCast(&([1]Edge{.{ .to = "C", .cost = 1 }}))[0..]) catch unreachable; m_1.put("F", @constCast(&([2]Edge{.{ .to = "D", .cost = 1 }, .{ .to = "G", .cost = 1 }}))[0..]) catch unreachable; m_1.put("E", @constCast(&[_]Edge{})[0..]) catch unreachable; m_1.put("G", @constCast(&([1]Edge{.{ .to = "E", .cost = 2 }}))[0..]) catch unreachable; break :blk1 m_1; };
        std.debug.print("{s}\n", .{_str(bidirectional_dij("E", "F", &graph_fwd_var_1, &graph_bwd_var_1))});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    if (@TypeOf(v) == Value) {
        return switch (v) {
            .Int => std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v.Int}) catch unreachable,
            .Float => std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v.Float}) catch unreachable,
            .Str => std.fmt.allocPrint(std.heap.page_allocator, "'{s}'", .{v.Str}) catch unreachable,
            .Bool => if (v.Bool) "true" else "false",
            .List => _str(v.List),
            .StrList => _str(v.StrList),
            else => "null",
        };
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
