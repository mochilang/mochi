// Generated by Mochi Zig transpiler on 2025-08-14 22:13 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

var test_graph_1_var: std.AutoHashMap(i64,[]i64) = std.AutoHashMap(i64,[]i64).init(std.heap.page_allocator);
var test_graph_2_var: std.AutoHashMap(i64,[]i64) = std.AutoHashMap(i64,[]i64).init(std.heap.page_allocator);

fn dfs(graph: *const std.AutoHashMap(i64,[]i64), vert: i64, visited_param: []bool) []i64 {
    var visited_var: []bool = visited_param;
    visited_var = visited_var;
    visited_var[_idx(visited_var.len, vert)] = true;
    var connected_verts: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    connected_verts = connected_verts;
    for (graph.get(vert).?) |__it0| {
        const neighbour = __it0;
        if (!(visited_var[_idx(visited_var.len, neighbour)])) {
            connected_verts = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, connected_verts)) catch |err| handleError(err); _tmp.appendSlice(@as([]const i64, dfs(graph, neighbour, visited_var))) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        }
    }
    return blk: { var _tmp_1 = std.ArrayList(i64).init(std.heap.page_allocator); _tmp_1.appendSlice(@as([]const i64, blk0: { var _tmp_2 = std.ArrayList(i64).init(std.heap.page_allocator); _tmp_2.append(vert) catch unreachable; break :blk0 (_tmp_2.toOwnedSlice() catch unreachable); })) catch |err| handleError(err); _tmp_1.appendSlice(@as([]const i64, connected_verts)) catch |err| handleError(err); break :blk (_tmp_1.toOwnedSlice() catch |err| handleError(err)); };
}

fn connected_components(graph: *const std.AutoHashMap(i64,[]i64)) [][]i64 {
    const graph_size: i64 = @as(i64, @intCast(graph.count()));
    var visited: []bool = std.heap.page_allocator.alloc(bool, 0) catch unreachable;
    visited = visited;
    for (@as(usize, @intCast(0))..@as(usize, @intCast(graph_size))) |_| {
        visited = blk: { var _tmp_3 = std.ArrayList(bool).init(std.heap.page_allocator); _tmp_3.appendSlice(@as([]const bool, visited)) catch |err| handleError(err); _tmp_3.append(false) catch |err| handleError(err); break :blk (_tmp_3.toOwnedSlice() catch |err| handleError(err)); };
    }
    var components_list: [][]i64 = std.heap.page_allocator.alloc([]i64, 0) catch unreachable;
    components_list = components_list;
    for (@as(usize, @intCast(0))..@as(usize, @intCast(graph_size))) |__it2| {
        const i: i64 = @as(i64, @intCast(__it2));
        if (!(visited[_idx(visited.len, i)])) {
            const component: []i64 = dfs(graph, i, visited);
            components_list = blk: { var _tmp_4 = std.ArrayList([]i64).init(std.heap.page_allocator); _tmp_4.appendSlice(@as([]const []i64, components_list)) catch |err| handleError(err); _tmp_4.append(component) catch |err| handleError(err); break :blk (_tmp_4.toOwnedSlice() catch |err| handleError(err)); };
        }
    }
    return components_list;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        test_graph_1_var = blk1: { var m = std.AutoHashMap(i64, []i64).init(std.heap.page_allocator); m.put(0, @constCast(([2]i64{1, 2})[0..2])) catch unreachable; m.put(1, @constCast(([2]i64{0, 3})[0..2])) catch unreachable; m.put(2, @constCast(([1]i64{0})[0..1])) catch unreachable; m.put(3, @constCast(([1]i64{1})[0..1])) catch unreachable; m.put(4, @constCast(([2]i64{5, 6})[0..2])) catch unreachable; m.put(5, @constCast(([2]i64{4, 6})[0..2])) catch unreachable; m.put(6, @constCast(([2]i64{4, 5})[0..2])) catch unreachable; break :blk1 m; };
        test_graph_2_var = blk2: { var m_1 = std.AutoHashMap(i64, []i64).init(std.heap.page_allocator); m_1.put(0, @constCast(([3]i64{1, 2, 3})[0..3])) catch unreachable; m_1.put(1, @constCast(([2]i64{0, 3})[0..2])) catch unreachable; m_1.put(2, @constCast(([1]i64{0})[0..1])) catch unreachable; m_1.put(3, @constCast(([2]i64{0, 1})[0..2])) catch unreachable; m_1.put(4, @constCast((&[_]i64{})[0..0])) catch unreachable; m_1.put(5, @constCast((&[_]i64{})[0..0])) catch unreachable; break :blk2 m_1; };
        std.debug.print("{s}\n", .{_str(connected_components(&test_graph_1_var))});
        std.debug.print("{s}\n", .{_str(connected_components(&test_graph_2_var))});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .pointer => |p| {
        if (p.size == .slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .@"struct" => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.heap.pageSize()));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
