// Generated by Mochi Zig transpiler on 2025-08-14 22:13 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const graph_var: [][]i64 = @constCast(([8][]i64{@constCast(([3]i64{2, 3, 4})[0..3]), @constCast(([2]i64{2, 7})[0..2]), @constCast(([1]i64{5})[0..1]), @constCast(([2]i64{5, 7})[0..2]), @constCast(([1]i64{7})[0..1]), @constCast(([1]i64{6})[0..1]), @constCast(([1]i64{7})[0..1]), @constCast((&[_]i64{})[0..0])})[0..8]);

fn longest_distance(graph_param: [][]i64) i64 {
    const n: i64 = @as(i64, @intCast(graph_param.len));
    var indegree: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    indegree = indegree;
    var i: i64 = 0;
    i = i;
    while (i < n) {
        indegree = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, indegree)) catch |err| handleError(err); _tmp.append(0) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    var long_dist: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    long_dist = long_dist;
    var j: i64 = 0;
    j = j;
    while (j < n) {
        long_dist = blk: { var _tmp_1 = std.ArrayList(i64).init(std.heap.page_allocator); _tmp_1.appendSlice(@as([]const i64, long_dist)) catch |err| handleError(err); _tmp_1.append(1) catch |err| handleError(err); break :blk (_tmp_1.toOwnedSlice() catch |err| handleError(err)); };
        j = j + 1;
    }
    var u: i64 = 0;
    u = u;
    while (u < n) {
        for (graph_param[_idx(graph_param.len, u)]) |__it0| {
            const v = __it0;
            indegree[_idx(indegree.len, v)] = indegree[_idx(indegree.len, v)] + 1;
        }
        u = u + 1;
    }
    var queue: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    queue = queue;
    var head: i64 = 0;
    head = head;
    var k: i64 = 0;
    k = k;
    while (k < n) {
        if (indegree[_idx(indegree.len, k)] == 0) {
            queue = blk: { var _tmp_2 = std.ArrayList(i64).init(std.heap.page_allocator); _tmp_2.appendSlice(@as([]const i64, queue)) catch |err| handleError(err); _tmp_2.append(k) catch |err| handleError(err); break :blk (_tmp_2.toOwnedSlice() catch |err| handleError(err)); };
        }
        k = k + 1;
    }
    while (head < @as(i64, @intCast(queue.len))) {
        const vertex: i64 = queue[_idx(queue.len, head)];
        head = head + 1;
        for (graph_param[_idx(graph_param.len, vertex)]) |__it1| {
            const x = __it1;
            indegree[_idx(indegree.len, x)] = indegree[_idx(indegree.len, x)] - 1;
            const new_dist: i64 = long_dist[_idx(long_dist.len, vertex)] + 1;
            if (new_dist > long_dist[_idx(long_dist.len, x)]) {
                long_dist[_idx(long_dist.len, x)] = new_dist;
            }
            if (indegree[_idx(indegree.len, x)] == 0) {
                queue = blk: { var _tmp_3 = std.ArrayList(i64).init(std.heap.page_allocator); _tmp_3.appendSlice(@as([]const i64, queue)) catch |err| handleError(err); _tmp_3.append(x) catch |err| handleError(err); break :blk (_tmp_3.toOwnedSlice() catch |err| handleError(err)); };
            }
        }
    }
    var max_len: i64 = long_dist[_idx(long_dist.len, 0)];
    max_len = max_len;
    var m: i64 = 1;
    m = m;
    while (m < n) {
        if (long_dist[_idx(long_dist.len, m)] > max_len) {
            max_len = long_dist[_idx(long_dist.len, m)];
        }
        m = m + 1;
    }
    return max_len;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        std.debug.print("{s}\n", .{_str(longest_distance(graph_var))});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .pointer => |p| {
        if (p.size == .slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .@"struct" => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.heap.pageSize()));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
