// Generated by Mochi Zig transpiler on 2025-08-14 22:13 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const Dinic = struct {
    n: i64,
    lvl: []i64,
    ptr: []i64,
    q: []i64,
    adj: [][][]i64,
};

const INF_var: i64 = 1000000000;
var graph_var_1: Dinic = undefined;
const source_var: i64 = 0;
const sink_var: i64 = 9;
var v_var_1: i64 = 1;

fn pow2(k: i64) i64 {
    var res: i64 = 1;
    res = res;
    var i: i64 = 0;
    i = i;
    while (i < k) {
        res = res * 2;
        i = i + 1;
    }
    return res;
}

fn min2(a: i64, b: i64) i64 {
    if (a < b) {
        return a;
    }
    return b;
}

fn new_dinic(n: i64) Dinic {
    var lvl: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    lvl = lvl;
    var ptr: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    ptr = ptr;
    var q: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    q = q;
    var adj: [][][]i64 = std.heap.page_allocator.alloc([][]i64, 0) catch unreachable;
    adj = adj;
    var i: i64 = 0;
    i = i;
    while (i < n) {
        lvl = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, lvl)) catch |err| handleError(err); _tmp.append(0) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        ptr = blk: { var _tmp_1 = std.ArrayList(i64).init(std.heap.page_allocator); _tmp_1.appendSlice(@as([]const i64, ptr)) catch |err| handleError(err); _tmp_1.append(0) catch |err| handleError(err); break :blk (_tmp_1.toOwnedSlice() catch |err| handleError(err)); };
        q = blk: { var _tmp_2 = std.ArrayList(i64).init(std.heap.page_allocator); _tmp_2.appendSlice(@as([]const i64, q)) catch |err| handleError(err); _tmp_2.append(0) catch |err| handleError(err); break :blk (_tmp_2.toOwnedSlice() catch |err| handleError(err)); };
        const edges: [][]i64 = std.heap.page_allocator.alloc([]i64, 0) catch unreachable;
        adj = blk: { var _tmp_3 = std.ArrayList([][]i64).init(std.heap.page_allocator); _tmp_3.appendSlice(@as([]const [][]i64, adj)) catch |err| handleError(err); _tmp_3.append(edges) catch |err| handleError(err); break :blk (_tmp_3.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    return .{ .n = n, .lvl = lvl, .ptr = ptr, .q = q, .adj = adj };
}

fn add_edge(g_param: *Dinic, a: i64, b: i64, c: i64, rcap: i64) void {
    var adj: [][][]i64 = g_param.adj;
    adj = adj;
    var list_a: [][]i64 = adj[_idx(adj.len, a)];
    list_a = list_a;
    var list_b: [][]i64 = adj[_idx(adj.len, b)];
    list_b = list_b;
    const e1: []i64 = blk0: { var _tmp_4 = std.ArrayList(i64).init(std.heap.page_allocator); _tmp_4.append(b) catch unreachable; _tmp_4.append(@as(i64, @intCast(list_b.len))) catch unreachable; _tmp_4.append(c) catch unreachable; _tmp_4.append(0) catch unreachable; break :blk0 (_tmp_4.toOwnedSlice() catch unreachable); };
    const e2: []i64 = blk1: { var _tmp_5 = std.ArrayList(i64).init(std.heap.page_allocator); _tmp_5.append(a) catch unreachable; _tmp_5.append(@as(i64, @intCast(list_a.len))) catch unreachable; _tmp_5.append(rcap) catch unreachable; _tmp_5.append(0) catch unreachable; break :blk1 (_tmp_5.toOwnedSlice() catch unreachable); };
    list_a = blk: { var _tmp_6 = std.ArrayList([]i64).init(std.heap.page_allocator); _tmp_6.appendSlice(@as([]const []i64, list_a)) catch |err| handleError(err); _tmp_6.append(e1) catch |err| handleError(err); break :blk (_tmp_6.toOwnedSlice() catch |err| handleError(err)); };
    list_b = blk: { var _tmp_7 = std.ArrayList([]i64).init(std.heap.page_allocator); _tmp_7.appendSlice(@as([]const []i64, list_b)) catch |err| handleError(err); _tmp_7.append(e2) catch |err| handleError(err); break :blk (_tmp_7.toOwnedSlice() catch |err| handleError(err)); };
    adj[_idx(adj.len, a)] = list_a;
    adj[_idx(adj.len, b)] = list_b;
    g_param.adj = adj;
}

fn dfs(g_param: *Dinic, v_param: i64, sink_param: i64, flow: i64) i64 {
    if (v_param == sink_param or flow == 0) {
        return flow;
    }
    var ptr: []i64 = g_param.ptr;
    ptr = ptr;
    var i: i64 = ptr[_idx(ptr.len, v_param)];
    i = i;
    var adj_all: [][][]i64 = g_param.adj;
    adj_all = adj_all;
    var adj_v: [][]i64 = adj_all[_idx(adj_all.len, v_param)];
    adj_v = adj_v;
    while (i < @as(i64, @intCast(adj_v.len))) {
        var e: []i64 = adj_v[_idx(adj_v.len, i)];
        e = e;
        const to: i64 = e[_idx(e.len, 0)];
        if (g_param.lvl[_idx(g_param.lvl.len, to)] == g_param.lvl[_idx(g_param.lvl.len, v_param)] + 1) {
            const avail: i64 = e[_idx(e.len, 2)] - e[_idx(e.len, 3)];
            const pushed: i64 = dfs(g_param, to, sink_param, min2(flow, avail));
            if (pushed > 0) {
                e[_idx(e.len, 3)] = e[_idx(e.len, 3)] + pushed;
                adj_v[_idx(adj_v.len, i)] = e;
                var adj_to: [][]i64 = adj_all[_idx(adj_all.len, to)];
                adj_to = adj_to;
                var back: []i64 = adj_to[_idx(adj_to.len, e[_idx(e.len, 1)])];
                back = back;
                back[_idx(back.len, 3)] = back[_idx(back.len, 3)] - pushed;
                adj_to[_idx(adj_to.len, e[_idx(e.len, 1)])] = back;
                adj_all[_idx(adj_all.len, to)] = adj_to;
                adj_all[_idx(adj_all.len, v_param)] = adj_v;
                g_param.adj = adj_all;
                return pushed;
            }
        }
        i = i + 1;
        ptr[_idx(ptr.len, v_param)] = i;
    }
    g_param.ptr = ptr;
    adj_all[_idx(adj_all.len, v_param)] = adj_v;
    g_param.adj = adj_all;
    return 0;
}

fn max_flow(g_param: *Dinic, source_param: i64, sink_param: i64) i64 {
    var flow: i64 = 0;
    flow = flow;
    var l: i64 = 0;
    l = l;
    while (l < 31) {
        const threshold: i64 = pow2(30 - l);
        while (true) {
            var lvl: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
            lvl = lvl;
            var ptr: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
            ptr = ptr;
            var i: i64 = 0;
            i = i;
            while (i < g_param.n) {
                lvl = blk: { var _tmp_8 = std.ArrayList(i64).init(std.heap.page_allocator); _tmp_8.appendSlice(@as([]const i64, lvl)) catch |err| handleError(err); _tmp_8.append(0) catch |err| handleError(err); break :blk (_tmp_8.toOwnedSlice() catch |err| handleError(err)); };
                ptr = blk: { var _tmp_9 = std.ArrayList(i64).init(std.heap.page_allocator); _tmp_9.appendSlice(@as([]const i64, ptr)) catch |err| handleError(err); _tmp_9.append(0) catch |err| handleError(err); break :blk (_tmp_9.toOwnedSlice() catch |err| handleError(err)); };
                i = i + 1;
            }
            g_param.lvl = lvl;
            g_param.ptr = ptr;
            var qi: i64 = 0;
            qi = qi;
            var qe: i64 = 1;
            qe = qe;
            lvl[_idx(lvl.len, source_param)] = 1;
            g_param.lvl = lvl;
            var q: []i64 = g_param.q;
            q = q;
            q[_idx(q.len, 0)] = source_param;
            while (qi < qe and g_param.lvl[_idx(g_param.lvl.len, sink_param)] == 0) {
                var v_var_1: i64 = q[_idx(q.len, qi)];
                v_var_1 = v_var_1;
                qi = qi + 1;
                const edges: [][]i64 = g_param.adj[_idx(g_param.adj.len, v_var_1)];
                var j: i64 = 0;
                j = j;
                while (j < @as(i64, @intCast(edges.len))) {
                    const e: []i64 = edges[_idx(edges.len, j)];
                    const to: i64 = e[_idx(e.len, 0)];
                    const residual: i64 = e[_idx(e.len, 2)] - e[_idx(e.len, 3)];
                    var lvl_inner: []i64 = g_param.lvl;
                    lvl_inner = lvl_inner;
                    if (lvl_inner[_idx(lvl_inner.len, to)] == 0 and residual >= threshold) {
                        q[_idx(q.len, qe)] = to;
                        qe = qe + 1;
                        lvl_inner[_idx(lvl_inner.len, to)] = lvl_inner[_idx(lvl_inner.len, v_var_1)] + 1;
                        g_param.lvl = lvl_inner;
                    }
                    j = j + 1;
                }
            }
            var p: i64 = dfs(g_param, source_param, sink_param, INF_var);
            p = p;
            while (p > 0) {
                flow = flow + p;
                p = dfs(g_param, source_param, sink_param, INF_var);
            }
            if (g_param.lvl[_idx(g_param.lvl.len, sink_param)] == 0) {
                break;
            }
        }
        l = l + 1;
    }
    return flow;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        graph_var_1 = new_dinic(10);
        while (v_var_1 < 5) {
            add_edge(&graph_var_1, source_var, v_var_1, 1, 0);
            v_var_1 = v_var_1 + 1;
        }
        v_var_1 = 5;
        while (v_var_1 < 9) {
            add_edge(&graph_var_1, v_var_1, sink_var, 1, 0);
            v_var_1 = v_var_1 + 1;
        }
        v_var_1 = 1;
        while (v_var_1 < 5) {
            add_edge(&graph_var_1, v_var_1, v_var_1 + 4, 1, 0);
            v_var_1 = v_var_1 + 1;
        }
        std.debug.print("{s}\n", .{_str(max_flow(&graph_var_1, source_var, sink_var))});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .pointer => |p| {
        if (p.size == .slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .@"struct" => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.heap.pageSize()));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
