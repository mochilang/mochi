// Generated by Mochi Zig transpiler on 2025-08-14 22:13 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const DfsResult = struct {
    id: i64,
    bridges: [][]i64,
};

fn dfs(graph: *const std.AutoHashMap(i64,[]i64), at: i64, parent: i64, visited_param: []bool, ids_param: []i64, low_param: []i64, id: i64, bridges: [][]i64) DfsResult {
    var visited_var: []bool = visited_param;
    visited_var = visited_var;
    var ids_var: []i64 = ids_param;
    ids_var = ids_var;
    var low_var: []i64 = low_param;
    low_var = low_var;
    visited_var[_idx(visited_var.len, at)] = true;
    ids_var[_idx(ids_var.len, at)] = id;
    low_var[_idx(low_var.len, at)] = id;
    var current_id: i64 = id + 1;
    current_id = current_id;
    var res_bridges: [][]i64 = blk: { const tmp = std.heap.page_allocator.alloc([]i64, bridges.len) catch unreachable; @memcpy(tmp, bridges); break :blk tmp; };
    res_bridges = res_bridges;
    for (graph.get(at).?) |__it0| {
        const to = __it0;
        if (to == parent) {
            continue;
        } else {
            if (!(visited_var[_idx(visited_var.len, to)])) {
                const result: DfsResult = dfs(graph, to, at, visited_var, ids_var, low_var, current_id, res_bridges);
                current_id = result.id;
                res_bridges = result.bridges;
                if (low_var[_idx(low_var.len, at)] > low_var[_idx(low_var.len, to)]) {
                    low_var[_idx(low_var.len, at)] = low_var[_idx(low_var.len, to)];
                }
                if (ids_var[_idx(ids_var.len, at)] < low_var[_idx(low_var.len, to)]) {
                    const edge: []i64 = if (at < to) blk0: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.append(at) catch unreachable; _tmp.append(to) catch unreachable; break :blk0 (_tmp.toOwnedSlice() catch unreachable); } else blk1: { var _tmp_1 = std.ArrayList(i64).init(std.heap.page_allocator); _tmp_1.append(to) catch unreachable; _tmp_1.append(at) catch unreachable; break :blk1 (_tmp_1.toOwnedSlice() catch unreachable); };
                    res_bridges = blk: { var _tmp_2 = std.ArrayList([]i64).init(std.heap.page_allocator); _tmp_2.appendSlice(@as([]const []i64, res_bridges)) catch |err| handleError(err); _tmp_2.append(edge) catch |err| handleError(err); break :blk (_tmp_2.toOwnedSlice() catch |err| handleError(err)); };
                }
            } else {
                if (low_var[_idx(low_var.len, at)] > ids_var[_idx(ids_var.len, to)]) {
                    low_var[_idx(low_var.len, at)] = ids_var[_idx(ids_var.len, to)];
                }
            }
        }
    }
    return .{ .id = current_id, .bridges = res_bridges };
}

fn compute_bridges(graph: *const std.AutoHashMap(i64,[]i64)) [][]i64 {
    const n: i64 = @as(i64, @intCast(graph.count()));
    var visited: []bool = std.heap.page_allocator.alloc(bool, 0) catch unreachable;
    visited = visited;
    var ids: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    ids = ids;
    var low: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    low = low;
    var i: i64 = 0;
    i = i;
    while (i < n) {
        visited = blk: { var _tmp_3 = std.ArrayList(bool).init(std.heap.page_allocator); _tmp_3.appendSlice(@as([]const bool, visited)) catch |err| handleError(err); _tmp_3.append(false) catch |err| handleError(err); break :blk (_tmp_3.toOwnedSlice() catch |err| handleError(err)); };
        ids = blk: { var _tmp_4 = std.ArrayList(i64).init(std.heap.page_allocator); _tmp_4.appendSlice(@as([]const i64, ids)) catch |err| handleError(err); _tmp_4.append(0) catch |err| handleError(err); break :blk (_tmp_4.toOwnedSlice() catch |err| handleError(err)); };
        low = blk: { var _tmp_5 = std.ArrayList(i64).init(std.heap.page_allocator); _tmp_5.appendSlice(@as([]const i64, low)) catch |err| handleError(err); _tmp_5.append(0) catch |err| handleError(err); break :blk (_tmp_5.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    var bridges: [][]i64 = std.heap.page_allocator.alloc([]i64, 0) catch unreachable;
    bridges = bridges;
    var id: i64 = 0;
    id = id;
    i = 0;
    while (i < n) {
        if (!(visited[_idx(visited.len, i)])) {
            const result: DfsResult = dfs(graph, i, 0 - 1, visited, ids, low, id, bridges);
            id = result.id;
            bridges = result.bridges;
        }
        i = i + 1;
    }
    return bridges;
}

fn get_demo_graph(index: i64) std.AutoHashMap(i64,[]i64) {
    if (index == 0) {
        return blk2: { var m = std.AutoHashMap(i64, []i64).init(std.heap.page_allocator); m.put(0, @constCast(([2]i64{1, 2})[0..2])) catch unreachable; m.put(1, @constCast(([2]i64{0, 2})[0..2])) catch unreachable; m.put(2, @constCast(([4]i64{0, 1, 3, 5})[0..4])) catch unreachable; m.put(3, @constCast(([2]i64{2, 4})[0..2])) catch unreachable; m.put(4, @constCast(([1]i64{3})[0..1])) catch unreachable; m.put(5, @constCast(([3]i64{2, 6, 8})[0..3])) catch unreachable; m.put(6, @constCast(([2]i64{5, 7})[0..2])) catch unreachable; m.put(7, @constCast(([2]i64{6, 8})[0..2])) catch unreachable; m.put(8, @constCast(([2]i64{5, 7})[0..2])) catch unreachable; break :blk2 m; };
    }
    if (index == 1) {
        return blk3: { var m_1 = std.AutoHashMap(i64, []i64).init(std.heap.page_allocator); m_1.put(0, @constCast(([1]i64{6})[0..1])) catch unreachable; m_1.put(1, @constCast(([1]i64{9})[0..1])) catch unreachable; m_1.put(2, @constCast(([2]i64{4, 5})[0..2])) catch unreachable; m_1.put(3, @constCast(([1]i64{4})[0..1])) catch unreachable; m_1.put(4, @constCast(([2]i64{2, 3})[0..2])) catch unreachable; m_1.put(5, @constCast(([1]i64{2})[0..1])) catch unreachable; m_1.put(6, @constCast(([2]i64{0, 7})[0..2])) catch unreachable; m_1.put(7, @constCast(([1]i64{6})[0..1])) catch unreachable; m_1.put(8, @constCast((&[_]i64{})[0..0])) catch unreachable; m_1.put(9, @constCast(([1]i64{1})[0..1])) catch unreachable; break :blk3 m_1; };
    }
    if (index == 2) {
        return blk4: { var m_2 = std.AutoHashMap(i64, []i64).init(std.heap.page_allocator); m_2.put(0, @constCast(([1]i64{4})[0..1])) catch unreachable; m_2.put(1, @constCast(([1]i64{6})[0..1])) catch unreachable; m_2.put(2, @constCast((&[_]i64{})[0..0])) catch unreachable; m_2.put(3, @constCast(([3]i64{5, 6, 7})[0..3])) catch unreachable; m_2.put(4, @constCast(([2]i64{0, 6})[0..2])) catch unreachable; m_2.put(5, @constCast(([3]i64{3, 8, 9})[0..3])) catch unreachable; m_2.put(6, @constCast(([4]i64{1, 3, 4, 7})[0..4])) catch unreachable; m_2.put(7, @constCast(([4]i64{3, 6, 8, 9})[0..4])) catch unreachable; m_2.put(8, @constCast(([2]i64{5, 7})[0..2])) catch unreachable; m_2.put(9, @constCast(([2]i64{5, 7})[0..2])) catch unreachable; break :blk4 m_2; };
    }
    return blk5: { var m_3 = std.AutoHashMap(i64, []i64).init(std.heap.page_allocator); m_3.put(0, @constCast(([2]i64{1, 3})[0..2])) catch unreachable; m_3.put(1, @constCast(([3]i64{0, 2, 4})[0..3])) catch unreachable; m_3.put(2, @constCast(([3]i64{1, 3, 4})[0..3])) catch unreachable; m_3.put(3, @constCast(([3]i64{0, 2, 4})[0..3])) catch unreachable; m_3.put(4, @constCast(([3]i64{1, 2, 3})[0..3])) catch unreachable; break :blk5 m_3; };
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        std.debug.print("{s}\n", .{_str(compute_bridges(&get_demo_graph(0)))});
        std.debug.print("{s}\n", .{_str(compute_bridges(&get_demo_graph(1)))});
        std.debug.print("{s}\n", .{_str(compute_bridges(&get_demo_graph(2)))});
        std.debug.print("{s}\n", .{_str(compute_bridges(&get_demo_graph(3)))});
        std.debug.print("{s}\n", .{_str(compute_bridges(&std.StringHashMap(i64).init(std.heap.page_allocator)))});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .pointer => |p| {
        if (p.size == .slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .@"struct" => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.heap.pageSize()));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
