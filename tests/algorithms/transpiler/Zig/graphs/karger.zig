// Generated by Mochi Zig transpiler on 2025-08-14 22:13 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const Pair = struct {
    a: []const u8,
    b: []const u8,
};

var seed_var_1: i64 = 1;
var TEST_GRAPH_var: std.StringHashMap([][]const u8) = std.StringHashMap([][]const u8).init(std.heap.page_allocator);
var result_var: []Pair = &[_]Pair{};

fn rand_int(n: i64) i64 {
    seed_var_1 = @mod(seed_var_1 * 1103515245 + 12345, 2147483648);
    return @mod(seed_var_1, n);
}

fn contains(list: [][]const u8, value: []const u8) bool {
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(list.len))) {
        if (std.mem.eql(u8, list[_idx(list.len, i)], value)) {
            return true;
        }
        i = i + 1;
    }
    return false;
}

fn remove_all(list: [][]const u8, value: []const u8) [][]const u8 {
    var res: [][]const u8 = std.heap.page_allocator.alloc([]const u8, 0) catch unreachable;
    res = res;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(list.len))) {
        if (!std.mem.eql(u8, list[_idx(list.len, i)], value)) {
            res = blk: { var _tmp = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []const u8, res)) catch |err| handleError(err); _tmp.append(@constCast(list[_idx(list.len, i)])) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        }
        i = i + 1;
    }
    return res;
}

fn partition_graph(graph: *const std.StringHashMap([][]const u8)) []Pair {
    var contracted: std.StringHashMap([][]const u8) = std.StringHashMap([][]const u8).init(std.heap.page_allocator);
    contracted = contracted;
    for (blk: { var it = graph.keyIterator(); var arr = std.ArrayList([]const u8).init(std.heap.page_allocator); while (it.next()) |k| { arr.append(k.*) catch unreachable; } break :blk arr.toOwnedSlice() catch unreachable; }) |__it0| {
        const node = __it0;
        contracted.put(node, blk0: { var _tmp_1 = std.ArrayList(i64).init(std.heap.page_allocator); _tmp_1.append(node) catch unreachable; break :blk0 (_tmp_1.toOwnedSlice() catch unreachable); }) catch unreachable;
    }
    var graph_copy: std.StringHashMap([][]const u8) = std.StringHashMap([][]const u8).init(std.heap.page_allocator);
    graph_copy = graph_copy;
    for (blk: { var it = graph.keyIterator(); var arr = std.ArrayList([]const u8).init(std.heap.page_allocator); while (it.next()) |k| { arr.append(k.*) catch unreachable; } break :blk arr.toOwnedSlice() catch unreachable; }) |__it1| {
        const node = __it1;
        var lst: [][]const u8 = std.heap.page_allocator.alloc([]const u8, 0) catch unreachable;
        lst = lst;
        const neigh: [][]const u8 = graph.get(node).?;
        var i: i64 = 0;
        i = i;
        while (i < @as(i64, @intCast(neigh.len))) {
            lst = blk: { var _tmp_2 = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp_2.appendSlice(@as([]const []const u8, lst)) catch |err| handleError(err); _tmp_2.append(@constCast(neigh[_idx(neigh.len, i)])) catch |err| handleError(err); break :blk (_tmp_2.toOwnedSlice() catch |err| handleError(err)); };
            i = i + 1;
        }
        graph_copy.put(node, lst) catch unreachable;
    }
    var nodes: i64 = blk: { var it = graph_copy.keyIterator(); var arr = std.ArrayList([]const u8).init(std.heap.page_allocator); while (it.next()) |k| { arr.append(k.*) catch unreachable; } break :blk arr.toOwnedSlice() catch unreachable; };
    nodes = nodes;
    while (@as(i64, @intCast(nodes.len)) > 2) {
        const u: i64 = nodes[_idx(nodes.len, rand_int(@as(i64, @intCast(nodes.len))))];
        const u_neighbors: [][]const u8 = graph_copy.get(u).?;
        const v: []const u8 = u_neighbors[_idx(u_neighbors.len, rand_int(@as(i64, @intCast(u_neighbors.len))))];
        const uv: []const u8 = _concat_string(u, v);
        var uv_neighbors: [][]const u8 = std.heap.page_allocator.alloc([]const u8, 0) catch unreachable;
        uv_neighbors = uv_neighbors;
        var i: i64 = 0;
        i = i;
        while (i < @as(i64, @intCast(graph_copy.get(u).?.len))) {
            const n: i64 = graph_copy.get(u).?.get(i).?;
            if (n != u and !std.mem.eql(u8, n, v) and contains(uv_neighbors, n) == false) {
                uv_neighbors = blk: { var _tmp_3 = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp_3.appendSlice(@as([]const []const u8, uv_neighbors)) catch |err| handleError(err); _tmp_3.append(n) catch |err| handleError(err); break :blk (_tmp_3.toOwnedSlice() catch |err| handleError(err)); };
            }
            i = i + 1;
        }
        i = 0;
        while (i < @as(i64, @intCast(graph_copy.get(v).?.len))) {
            const n: i64 = graph_copy.get(v).?.get(i).?;
            if (n != u and !std.mem.eql(u8, n, v) and contains(uv_neighbors, n) == false) {
                uv_neighbors = blk: { var _tmp_4 = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp_4.appendSlice(@as([]const []const u8, uv_neighbors)) catch |err| handleError(err); _tmp_4.append(n) catch |err| handleError(err); break :blk (_tmp_4.toOwnedSlice() catch |err| handleError(err)); };
            }
            i = i + 1;
        }
        graph_copy.put(uv, uv_neighbors) catch unreachable;
        var k: i64 = 0;
        k = k;
        while (k < @as(i64, @intCast(uv_neighbors.len))) {
            const nb: []const u8 = uv_neighbors[_idx(uv_neighbors.len, k)];
            graph_copy.put(nb, blk: { var _tmp_5 = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp_5.appendSlice(@as([]const []const u8, graph_copy.get(nb).?)) catch |err| handleError(err); _tmp_5.append(@constCast(uv)) catch |err| handleError(err); break :blk (_tmp_5.toOwnedSlice() catch |err| handleError(err)); }) catch unreachable;
            graph_copy.put(nb, remove_all(graph_copy.get(nb).?, u)) catch unreachable;
            graph_copy.put(nb, remove_all(graph_copy.get(nb).?, v)) catch unreachable;
            k = k + 1;
        }
        var group: [][]const u8 = std.heap.page_allocator.alloc([]const u8, 0) catch unreachable;
        group = group;
        i = 0;
        while (i < @as(i64, @intCast(contracted.get(u).?.len))) {
            group = blk: { var _tmp_6 = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp_6.appendSlice(@as([]const []const u8, group)) catch |err| handleError(err); _tmp_6.append(contracted.get(u).?.get(i).?) catch |err| handleError(err); break :blk (_tmp_6.toOwnedSlice() catch |err| handleError(err)); };
            i = i + 1;
        }
        i = 0;
        while (i < @as(i64, @intCast(contracted.get(v).?.len))) {
            const val: i64 = contracted.get(v).?.get(i).?;
            if (contains(group, val) == false) {
                group = blk: { var _tmp_7 = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp_7.appendSlice(@as([]const []const u8, group)) catch |err| handleError(err); _tmp_7.append(val) catch |err| handleError(err); break :blk (_tmp_7.toOwnedSlice() catch |err| handleError(err)); };
            }
            i = i + 1;
        }
        contracted.put(uv, group) catch unreachable;
        nodes = remove_all(nodes, u);
        nodes = remove_all(nodes, v);
        nodes = blk: { var _tmp_8 = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp_8.appendSlice(@as([]const []const u8, nodes)) catch |err| handleError(err); _tmp_8.append(@constCast(uv)) catch |err| handleError(err); break :blk (_tmp_8.toOwnedSlice() catch |err| handleError(err)); };
    }
    var groups: [][][]const u8 = std.heap.page_allocator.alloc([][]const u8, 0) catch unreachable;
    groups = groups;
    var j: i64 = 0;
    j = j;
    while (j < @as(i64, @intCast(nodes.len))) {
        const n: i64 = nodes[_idx(nodes.len, j)];
        groups = blk: { var _tmp_9 = std.ArrayList([][]const u8).init(std.heap.page_allocator); _tmp_9.appendSlice(@as([]const [][]const u8, groups)) catch |err| handleError(err); _tmp_9.append(contracted.get(n).?) catch |err| handleError(err); break :blk (_tmp_9.toOwnedSlice() catch |err| handleError(err)); };
        j = j + 1;
    }
    const groupA: [][]const u8 = groups[_idx(groups.len, 0)];
    const groupB: [][]const u8 = groups[_idx(groups.len, 1)];
    var cut: []Pair = std.heap.page_allocator.alloc(Pair, 0) catch unreachable;
    cut = cut;
    j = 0;
    while (j < @as(i64, @intCast(groupA.len))) {
        const node: []const u8 = groupA[_idx(groupA.len, j)];
        const neigh: [][]const u8 = graph.get(node).?;
        var l: i64 = 0;
        l = l;
        while (l < @as(i64, @intCast(neigh.len))) {
            const nb: []const u8 = neigh[_idx(neigh.len, l)];
            if (contains(groupB, nb)) {
                cut = blk: { var _tmp_10 = std.ArrayList(Pair).init(std.heap.page_allocator); _tmp_10.appendSlice(@as([]const Pair, cut)) catch |err| handleError(err); _tmp_10.append(.{ .a = node, .b = nb }) catch |err| handleError(err); break :blk (_tmp_10.toOwnedSlice() catch |err| handleError(err)); };
            }
            l = l + 1;
        }
        j = j + 1;
    }
    return cut;
}

fn cut_to_string(cut: []Pair) []const u8 {
    var s: []const u8 = "{";
    s = s;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(cut.len))) {
        const p: Pair = cut[_idx(cut.len, i)];
        s = _concat_string(_concat_string(_concat_string(_concat_string(_concat_string(s, "("), p.a), ", "), p.b), ")");
        if (i < @as(i64, @intCast(cut.len)) - 1) {
            s = _concat_string(s, ", ");
        }
        i = i + 1;
    }
    s = _concat_string(s, "}");
    return s;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        TEST_GRAPH_var = blk1: { var m = std.StringHashMap([][]const u8).init(std.heap.page_allocator); m.put("1", @constCast(([4][]const u8{"2", "3", "4", "5"})[0..4])) catch unreachable; m.put("2", @constCast(([4][]const u8{"1", "3", "4", "5"})[0..4])) catch unreachable; m.put("3", @constCast(([5][]const u8{"1", "2", "4", "5", "10"})[0..5])) catch unreachable; m.put("4", @constCast(([5][]const u8{"1", "2", "3", "5", "6"})[0..5])) catch unreachable; m.put("5", @constCast(([5][]const u8{"1", "2", "3", "4", "7"})[0..5])) catch unreachable; m.put("6", @constCast(([5][]const u8{"7", "8", "9", "10", "4"})[0..5])) catch unreachable; m.put("7", @constCast(([5][]const u8{"6", "8", "9", "10", "5"})[0..5])) catch unreachable; m.put("8", @constCast(([4][]const u8{"6", "7", "9", "10"})[0..4])) catch unreachable; m.put("9", @constCast(([4][]const u8{"6", "7", "8", "10"})[0..4])) catch unreachable; m.put("10", @constCast(([5][]const u8{"6", "7", "8", "9", "3"})[0..5])) catch unreachable; break :blk1 m; };
        result_var = partition_graph(&TEST_GRAPH_var);
        std.debug.print("{s}\n", .{cut_to_string(result_var)});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.heap.pageSize()));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
