// Generated by Mochi Zig transpiler on 2025-08-22 13:08 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const CNN = struct {
    conv_kernels: [][][]f64,
    conv_bias: []f64,
    conv_step: i64,
    pool_size: i64,
    w_hidden: [][]f64,
    w_out: [][]f64,
    b_hidden: []f64,
    b_out: []f64,
    rate_weight: f64,
    rate_bias: f64,
};

const TrainSample = struct {
    image: [][]f64,
    target: []f64,
};

var seed_var_1: i64 = 1;

fn random() f64 {
    seed_var_1 = @mod(seed_var_1 *% 13 +% 7, 100);
    return @as(f64, @floatFromInt(seed_var_1)) / 100.0;
}

fn sigmoid(x: f64) f64 {
    return 1.0 / (1.0 + exp(@as(f64, @floatFromInt(0)) - x));
}

fn to_float(x_1: i64) f64 {
    return @as(f64, @floatFromInt(x_1)) * 1.0;
}

fn exp(x_2: f64) f64 {
    var term: f64 = 1.0;
    term = term;
    var sum: f64 = 1.0;
    sum = sum;
    var n: i64 = 1;
    n = n;
    while (n < 20) {
        term = term * x_2 / @as(f64, @floatFromInt(n));
        sum = sum + term;
        n = n +% 1;
    }
    return sum;
}

fn convolve(data: [][]f64, kernel: [][]f64, step: i64, bias: f64) [][]f64 {
    const size_data: i64 = @as(i64, @intCast(data.len));
    const size_kernel: i64 = @as(i64, @intCast(kernel.len));
    var out: [][]f64 = std.heap.page_allocator.alloc([]f64, 0) catch unreachable;
    out = out;
    var i: i64 = 0;
    i = i;
    while (i <= size_data -% size_kernel) {
        var row: []f64 = std.heap.page_allocator.alloc(f64, 0) catch unreachable;
        row = row;
        var j: i64 = 0;
        j = j;
        while (j <= size_data -% size_kernel) {
            var sum_1: f64 = 0.0;
            sum_1 = sum_1;
            var a: i64 = 0;
            a = a;
            while (a < size_kernel) {
                var b: i64 = 0;
                b = b;
                while (b < size_kernel) {
                    sum_1 = sum_1 + data[_idx(data.len, i +% a)][_idx(data[_idx(data.len, i +% a)].len, j +% b)] * kernel[_idx(kernel.len, a)][_idx(kernel[_idx(kernel.len, a)].len, b)];
                    b = b +% 1;
                }
                a = a +% 1;
            }
            row = blk0: { var _tmp = std.ArrayList(f64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const f64, row)) catch |err| handleError(err); _tmp.append(sigmoid(sum_1 - bias)) catch |err| handleError(err); break :blk0 (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            j = j +% step;
        }
        out = blk1: { var _tmp_1 = std.ArrayList([]f64).init(std.heap.page_allocator); _tmp_1.appendSlice(@as([]const []f64, out)) catch |err| handleError(err); _tmp_1.append(row) catch |err| handleError(err); break :blk1 (_tmp_1.toOwnedSlice() catch |err| handleError(err)); };
        i = i +% step;
    }
    return out;
}

fn average_pool(map: [][]f64, size: i64) [][]f64 {
    var out_1: [][]f64 = std.heap.page_allocator.alloc([]f64, 0) catch unreachable;
    out_1 = out_1;
    var i_1: i64 = 0;
    i_1 = i_1;
    while (i_1 < @as(i64, @intCast(map.len))) {
        var row_1: []f64 = std.heap.page_allocator.alloc(f64, 0) catch unreachable;
        row_1 = row_1;
        var j_1: i64 = 0;
        j_1 = j_1;
        while (j_1 < @as(i64, @intCast(map[_idx(map.len, i_1)].len))) {
            var sum_2: f64 = 0.0;
            sum_2 = sum_2;
            var a_1: i64 = 0;
            a_1 = a_1;
            while (a_1 < size) {
                var b_1: i64 = 0;
                b_1 = b_1;
                while (b_1 < size) {
                    sum_2 = sum_2 + map[_idx(map.len, i_1 +% a_1)][_idx(map[_idx(map.len, i_1 +% a_1)].len, j_1 +% b_1)];
                    b_1 = b_1 +% 1;
                }
                a_1 = a_1 +% 1;
            }
            row_1 = blk2: { var _tmp_2 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_2.appendSlice(@as([]const f64, row_1)) catch |err| handleError(err); _tmp_2.append(sum_2 / @as(f64, @floatFromInt(size *% size))) catch |err| handleError(err); break :blk2 (_tmp_2.toOwnedSlice() catch |err| handleError(err)); };
            j_1 = j_1 +% size;
        }
        out_1 = blk3: { var _tmp_3 = std.ArrayList([]f64).init(std.heap.page_allocator); _tmp_3.appendSlice(@as([]const []f64, out_1)) catch |err| handleError(err); _tmp_3.append(row_1) catch |err| handleError(err); break :blk3 (_tmp_3.toOwnedSlice() catch |err| handleError(err)); };
        i_1 = i_1 +% size;
    }
    return out_1;
}

fn flatten(maps: [][][]f64) []f64 {
    var out_2: []f64 = std.heap.page_allocator.alloc(f64, 0) catch unreachable;
    out_2 = out_2;
    var i_2: i64 = 0;
    i_2 = i_2;
    while (i_2 < @as(i64, @intCast(maps.len))) {
        var j_2: i64 = 0;
        j_2 = j_2;
        while (j_2 < @as(i64, @intCast(maps[_idx(maps.len, i_2)].len))) {
            var k: i64 = 0;
            k = k;
            while (k < @as(i64, @intCast(maps[_idx(maps.len, i_2)][_idx(maps[_idx(maps.len, i_2)].len, j_2)].len))) {
                out_2 = blk4: { var _tmp_4 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_4.appendSlice(@as([]const f64, out_2)) catch |err| handleError(err); _tmp_4.append(maps[_idx(maps.len, i_2)][_idx(maps[_idx(maps.len, i_2)].len, j_2)][_idx(maps[_idx(maps.len, i_2)][_idx(maps[_idx(maps.len, i_2)].len, j_2)].len, k)]) catch |err| handleError(err); break :blk4 (_tmp_4.toOwnedSlice() catch |err| handleError(err)); };
                k = k +% 1;
            }
            j_2 = j_2 +% 1;
        }
        i_2 = i_2 +% 1;
    }
    return out_2;
}

fn vec_mul_mat(v: []f64, m: [][]f64) []f64 {
    const cols: i64 = @as(i64, @intCast(m[_idx(m.len, 0)].len));
    var res: []f64 = std.heap.page_allocator.alloc(f64, 0) catch unreachable;
    res = res;
    var j_3: i64 = 0;
    j_3 = j_3;
    while (j_3 < cols) {
        var sum_3: f64 = 0.0;
        sum_3 = sum_3;
        var i_3: i64 = 0;
        i_3 = i_3;
        while (i_3 < @as(i64, @intCast(v.len))) {
            sum_3 = sum_3 + v[_idx(v.len, i_3)] * m[_idx(m.len, i_3)][_idx(m[_idx(m.len, i_3)].len, j_3)];
            i_3 = i_3 +% 1;
        }
        res = blk5: { var _tmp_5 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_5.appendSlice(@as([]const f64, res)) catch |err| handleError(err); _tmp_5.append(sum_3) catch |err| handleError(err); break :blk5 (_tmp_5.toOwnedSlice() catch |err| handleError(err)); };
        j_3 = j_3 +% 1;
    }
    return res;
}

fn matT_vec_mul(m_1: [][]f64, v_1: []f64) []f64 {
    var res_1: []f64 = std.heap.page_allocator.alloc(f64, 0) catch unreachable;
    res_1 = res_1;
    var i_4: i64 = 0;
    i_4 = i_4;
    while (i_4 < @as(i64, @intCast(m_1.len))) {
        var sum_4: f64 = 0.0;
        sum_4 = sum_4;
        var j_4: i64 = 0;
        j_4 = j_4;
        while (j_4 < @as(i64, @intCast(m_1[_idx(m_1.len, i_4)].len))) {
            sum_4 = sum_4 + m_1[_idx(m_1.len, i_4)][_idx(m_1[_idx(m_1.len, i_4)].len, j_4)] * v_1[_idx(v_1.len, j_4)];
            j_4 = j_4 +% 1;
        }
        res_1 = blk6: { var _tmp_6 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_6.appendSlice(@as([]const f64, res_1)) catch |err| handleError(err); _tmp_6.append(sum_4) catch |err| handleError(err); break :blk6 (_tmp_6.toOwnedSlice() catch |err| handleError(err)); };
        i_4 = i_4 +% 1;
    }
    return res_1;
}

fn vec_add(a_2: []f64, b_2: []f64) []f64 {
    var res_2: []f64 = std.heap.page_allocator.alloc(f64, 0) catch unreachable;
    res_2 = res_2;
    var i_5: i64 = 0;
    i_5 = i_5;
    while (i_5 < @as(i64, @intCast(a_2.len))) {
        res_2 = blk7: { var _tmp_7 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_7.appendSlice(@as([]const f64, res_2)) catch |err| handleError(err); _tmp_7.append(a_2[_idx(a_2.len, i_5)] + b_2[_idx(b_2.len, i_5)]) catch |err| handleError(err); break :blk7 (_tmp_7.toOwnedSlice() catch |err| handleError(err)); };
        i_5 = i_5 +% 1;
    }
    return res_2;
}

fn vec_sub(a_3: []f64, b_3: []f64) []f64 {
    var res_3: []f64 = std.heap.page_allocator.alloc(f64, 0) catch unreachable;
    res_3 = res_3;
    var i_6: i64 = 0;
    i_6 = i_6;
    while (i_6 < @as(i64, @intCast(a_3.len))) {
        res_3 = blk8: { var _tmp_8 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_8.appendSlice(@as([]const f64, res_3)) catch |err| handleError(err); _tmp_8.append(a_3[_idx(a_3.len, i_6)] - b_3[_idx(b_3.len, i_6)]) catch |err| handleError(err); break :blk8 (_tmp_8.toOwnedSlice() catch |err| handleError(err)); };
        i_6 = i_6 +% 1;
    }
    return res_3;
}

fn vec_mul(a_4: []f64, b_4: []f64) []f64 {
    var res_4: []f64 = std.heap.page_allocator.alloc(f64, 0) catch unreachable;
    res_4 = res_4;
    var i_7: i64 = 0;
    i_7 = i_7;
    while (i_7 < @as(i64, @intCast(a_4.len))) {
        res_4 = blk9: { var _tmp_9 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_9.appendSlice(@as([]const f64, res_4)) catch |err| handleError(err); _tmp_9.append(a_4[_idx(a_4.len, i_7)] * b_4[_idx(b_4.len, i_7)]) catch |err| handleError(err); break :blk9 (_tmp_9.toOwnedSlice() catch |err| handleError(err)); };
        i_7 = i_7 +% 1;
    }
    return res_4;
}

fn vec_map_sig(v_2: []f64) []f64 {
    var res_5: []f64 = std.heap.page_allocator.alloc(f64, 0) catch unreachable;
    res_5 = res_5;
    var i_8: i64 = 0;
    i_8 = i_8;
    while (i_8 < @as(i64, @intCast(v_2.len))) {
        res_5 = blk10: { var _tmp_10 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_10.appendSlice(@as([]const f64, res_5)) catch |err| handleError(err); _tmp_10.append(sigmoid(v_2[_idx(v_2.len, i_8)])) catch |err| handleError(err); break :blk10 (_tmp_10.toOwnedSlice() catch |err| handleError(err)); };
        i_8 = i_8 +% 1;
    }
    return res_5;
}

fn new_cnn() CNN {
    const k1: [][]f64 = @constCast(([2][]f64{@constCast(([2]f64{1.0, 0.0})[0..2]), @constCast(([2]f64{0.0, 1.0})[0..2])})[0..2]);
    const k2: [][]f64 = @constCast(([2][]f64{@constCast(([2]f64{0.0, 1.0})[0..2]), @constCast(([2]f64{1.0, 0.0})[0..2])})[0..2]);
    const conv_kernels: [][][]f64 = blk11: { var _tmp_11 = std.ArrayList([][]f64).init(std.heap.page_allocator); _tmp_11.append(k1) catch unreachable; _tmp_11.append(k2) catch unreachable; break :blk11 (_tmp_11.toOwnedSlice() catch unreachable); };
    const conv_bias: []f64 = @constCast(([2]f64{0.0, 0.0})[0..2]);
    const conv_step: i64 = 2;
    const pool_size: i64 = 2;
    const input_size: i64 = 2;
    const hidden_size: i64 = 2;
    const output_size: i64 = 2;
    var w_hidden: [][]f64 = std.heap.page_allocator.alloc([]f64, 0) catch unreachable;
    w_hidden = w_hidden;
    var i_9: i64 = 0;
    i_9 = i_9;
    while (i_9 < input_size) {
        var row_2: []f64 = std.heap.page_allocator.alloc(f64, 0) catch unreachable;
        row_2 = row_2;
        var j_5: i64 = 0;
        j_5 = j_5;
        while (j_5 < hidden_size) {
            row_2 = blk12: { var _tmp_12 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_12.appendSlice(@as([]const f64, row_2)) catch |err| handleError(err); _tmp_12.append(random() - 0.5) catch |err| handleError(err); break :blk12 (_tmp_12.toOwnedSlice() catch |err| handleError(err)); };
            j_5 = j_5 +% 1;
        }
        w_hidden = blk13: { var _tmp_13 = std.ArrayList([]f64).init(std.heap.page_allocator); _tmp_13.appendSlice(@as([]const []f64, w_hidden)) catch |err| handleError(err); _tmp_13.append(row_2) catch |err| handleError(err); break :blk13 (_tmp_13.toOwnedSlice() catch |err| handleError(err)); };
        i_9 = i_9 +% 1;
    }
    var w_out: [][]f64 = std.heap.page_allocator.alloc([]f64, 0) catch unreachable;
    w_out = w_out;
    i_9 = 0;
    while (i_9 < hidden_size) {
        var row_3: []f64 = std.heap.page_allocator.alloc(f64, 0) catch unreachable;
        row_3 = row_3;
        var j_6: i64 = 0;
        j_6 = j_6;
        while (j_6 < output_size) {
            row_3 = blk14: { var _tmp_14 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_14.appendSlice(@as([]const f64, row_3)) catch |err| handleError(err); _tmp_14.append(random() - 0.5) catch |err| handleError(err); break :blk14 (_tmp_14.toOwnedSlice() catch |err| handleError(err)); };
            j_6 = j_6 +% 1;
        }
        w_out = blk15: { var _tmp_15 = std.ArrayList([]f64).init(std.heap.page_allocator); _tmp_15.appendSlice(@as([]const []f64, w_out)) catch |err| handleError(err); _tmp_15.append(row_3) catch |err| handleError(err); break :blk15 (_tmp_15.toOwnedSlice() catch |err| handleError(err)); };
        i_9 = i_9 +% 1;
    }
    const b_hidden: []f64 = @constCast(([2]f64{0.0, 0.0})[0..2]);
    const b_out: []f64 = @constCast(([2]f64{0.0, 0.0})[0..2]);
    return .{ .conv_kernels = conv_kernels, .conv_bias = conv_bias, .conv_step = conv_step, .pool_size = pool_size, .w_hidden = w_hidden, .w_out = w_out, .b_hidden = b_hidden, .b_out = b_out, .rate_weight = 0.200000000000000011, .rate_bias = 0.200000000000000011 };
}

fn forward(cnn: CNN, data_1: [][]f64) []f64 {
    var maps_1: [][][]f64 = std.heap.page_allocator.alloc([][]f64, 0) catch unreachable;
    maps_1 = maps_1;
    var i_10: i64 = 0;
    i_10 = i_10;
    while (i_10 < @as(i64, @intCast(cnn.conv_kernels.len))) {
        const conv_map: [][]f64 = convolve(data_1, cnn.conv_kernels[_idx(cnn.conv_kernels.len, i_10)], cnn.conv_step, cnn.conv_bias[_idx(cnn.conv_bias.len, i_10)]);
        const pooled: [][]f64 = average_pool(conv_map, cnn.pool_size);
        maps_1 = blk16: { var _tmp_16 = std.ArrayList([][]f64).init(std.heap.page_allocator); _tmp_16.appendSlice(@as([]const [][]f64, maps_1)) catch |err| handleError(err); _tmp_16.append(pooled) catch |err| handleError(err); break :blk16 (_tmp_16.toOwnedSlice() catch |err| handleError(err)); };
        i_10 = i_10 +% 1;
    }
    const flat: []f64 = flatten(maps_1);
    const hidden_net: []f64 = vec_add(vec_mul_mat(flat, cnn.w_hidden), cnn.b_hidden);
    const hidden_out: []f64 = vec_map_sig(hidden_net);
    const out_net: []f64 = vec_add(vec_mul_mat(hidden_out, cnn.w_out), cnn.b_out);
    const out_3: []f64 = vec_map_sig(out_net);
    return out_3;
}

fn train(cnn_1: CNN, samples: []TrainSample, epochs: i64) CNN {
    const w_out_1: [][]f64 = cnn_1.w_out;
    const b_out_1: []f64 = cnn_1.b_out;
    const w_hidden_1: [][]f64 = cnn_1.w_hidden;
    const b_hidden_1: []f64 = cnn_1.b_hidden;
    var e: i64 = 0;
    e = e;
    while (e < epochs) {
        var s: i64 = 0;
        s = s;
        while (s < @as(i64, @intCast(samples.len))) {
            var maps_2: [][][]f64 = std.heap.page_allocator.alloc([][]f64, 0) catch unreachable;
            maps_2 = maps_2;
            var i_11: i64 = 0;
            i_11 = i_11;
            while (i_11 < @as(i64, @intCast(cnn_1.conv_kernels.len))) {
                const conv_map_1: [][]f64 = convolve(samples[s].image, cnn_1.conv_kernels[_idx(cnn_1.conv_kernels.len, i_11)], cnn_1.conv_step, cnn_1.conv_bias[_idx(cnn_1.conv_bias.len, i_11)]);
                const pooled_1: [][]f64 = average_pool(conv_map_1, cnn_1.pool_size);
                maps_2 = blk17: { var _tmp_17 = std.ArrayList([][]f64).init(std.heap.page_allocator); _tmp_17.appendSlice(@as([]const [][]f64, maps_2)) catch |err| handleError(err); _tmp_17.append(pooled_1) catch |err| handleError(err); break :blk17 (_tmp_17.toOwnedSlice() catch |err| handleError(err)); };
                i_11 = i_11 +% 1;
            }
            const flat_1: []f64 = flatten(maps_2);
            const hidden_net_1: []f64 = vec_add(vec_mul_mat(flat_1, w_hidden_1), b_hidden_1);
            const hidden_out_1: []f64 = vec_map_sig(hidden_net_1);
            const out_net_1: []f64 = vec_add(vec_mul_mat(hidden_out_1, w_out_1), b_out_1);
            const out_4: []f64 = vec_map_sig(out_net_1);
            const error_out: []f64 = vec_sub(samples[s].target, out_4);
            const pd_out: []f64 = vec_mul(error_out, vec_mul(out_4, vec_sub(@constCast(([2]f64{1.0, 1.0})[0..2]), out_4)));
            const error_hidden: []f64 = matT_vec_mul(w_out_1, pd_out);
            const pd_hidden: []f64 = vec_mul(error_hidden, vec_mul(hidden_out_1, vec_sub(@constCast(([2]f64{1.0, 1.0})[0..2]), hidden_out_1)));
            var j_7: i64 = 0;
            j_7 = j_7;
            while (j_7 < @as(i64, @intCast(w_out_1.len))) {
                var k_1: i64 = 0;
                k_1 = k_1;
                while (k_1 < @as(i64, @intCast(w_out_1[_idx(w_out_1.len, j_7)].len))) {
                    w_out_1[_idx(w_out_1.len, j_7)][_idx(w_out_1[_idx(w_out_1.len, j_7)].len, k_1)] = w_out_1[_idx(w_out_1.len, j_7)][_idx(w_out_1[_idx(w_out_1.len, j_7)].len, k_1)] + cnn_1.rate_weight * hidden_out_1[_idx(hidden_out_1.len, j_7)] * pd_out[_idx(pd_out.len, k_1)];
                    k_1 = k_1 +% 1;
                }
                j_7 = j_7 +% 1;
            }
            j_7 = 0;
            while (j_7 < @as(i64, @intCast(b_out_1.len))) {
                b_out_1[_idx(b_out_1.len, j_7)] = b_out_1[_idx(b_out_1.len, j_7)] - cnn_1.rate_bias * pd_out[_idx(pd_out.len, j_7)];
                j_7 = j_7 +% 1;
            }
            var i_h: i64 = 0;
            i_h = i_h;
            while (i_h < @as(i64, @intCast(w_hidden_1.len))) {
                var j_h: i64 = 0;
                j_h = j_h;
                while (j_h < @as(i64, @intCast(w_hidden_1[_idx(w_hidden_1.len, i_h)].len))) {
                    w_hidden_1[_idx(w_hidden_1.len, i_h)][_idx(w_hidden_1[_idx(w_hidden_1.len, i_h)].len, j_h)] = w_hidden_1[_idx(w_hidden_1.len, i_h)][_idx(w_hidden_1[_idx(w_hidden_1.len, i_h)].len, j_h)] + cnn_1.rate_weight * flat_1[_idx(flat_1.len, i_h)] * pd_hidden[_idx(pd_hidden.len, j_h)];
                    j_h = j_h +% 1;
                }
                i_h = i_h +% 1;
            }
            j_7 = 0;
            while (j_7 < @as(i64, @intCast(b_hidden_1.len))) {
                b_hidden_1[_idx(b_hidden_1.len, j_7)] = b_hidden_1[_idx(b_hidden_1.len, j_7)] - cnn_1.rate_bias * pd_hidden[_idx(pd_hidden.len, j_7)];
                j_7 = j_7 +% 1;
            }
            s = s +% 1;
        }
        e = e +% 1;
    }
    return .{ .conv_kernels = cnn_1.conv_kernels, .conv_bias = cnn_1.conv_bias, .conv_step = cnn_1.conv_step, .pool_size = cnn_1.pool_size, .w_hidden = w_hidden_1, .w_out = w_out_1, .b_hidden = b_hidden_1, .b_out = b_out_1, .rate_weight = cnn_1.rate_weight, .rate_bias = cnn_1.rate_bias };
}

fn mochi_main() void {
    const cnn_2: CNN = new_cnn();
    const image: [][]f64 = @constCast(([4][]f64{@constCast(([4]f64{1.0, 0.0, 1.0, 0.0})[0..4]), @constCast(([4]f64{0.0, 1.0, 0.0, 1.0})[0..4]), @constCast(([4]f64{1.0, 0.0, 1.0, 0.0})[0..4]), @constCast(([4]f64{0.0, 1.0, 0.0, 1.0})[0..4])})[0..4]);
    const sample: TrainSample = .{ .image = image, .target = @constCast(([2]f64{1.0, 0.0})[0..2]) };
    std.debug.print("{s} {s}\n", .{"Before training:", _str(forward(cnn_2, image))});
    const trained: CNN = train(cnn_2, @constCast(blk18: { var _tmp_18 = std.ArrayList(TrainSample).init(std.heap.page_allocator); _tmp_18.append(sample) catch unreachable; break :blk18 (_tmp_18.toOwnedSlice() catch unreachable); }), 50);
    std.debug.print("{s} {s}\n", .{"After training:", _str(forward(trained, image))});
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        mochi_main();
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
