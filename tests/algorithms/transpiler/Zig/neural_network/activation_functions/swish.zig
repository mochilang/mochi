// Generated by Mochi Zig transpiler on 2025-08-26 08:36 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn exp_approx(x: f64) f64 {
    var sum: f64 = 1.0;
    sum = sum;
    var term: f64 = 1.0;
    term = term;
    var i: i64 = 1;
    i = i;
    while (i <= 20) {
        term = term * x / @as(f64, @floatFromInt(i));
        sum = sum + term;
        i = i +% 1;
    }
    return sum;
}

fn sigmoid(vector: []f64) []f64 {
    var result: []f64 = std.heap.page_allocator.alloc(f64, 0) catch unreachable;
    result = result;
    var i_1: i64 = 0;
    i_1 = i_1;
    while (i_1 < @as(i64, @intCast(vector.len))) {
        const v: f64 = vector[_idx(vector.len, i_1)];
        const s: f64 = 1.0 / (1.0 + exp_approx(@as(f64, @floatFromInt(0)) - v));
        result = blk0: { var _tmp = std.ArrayList(f64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp.appendSlice(@as([]const f64, result)) catch |err| handleError(err); _tmp.append(s) catch |err| handleError(err); break :blk0 (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i_1 = i_1 +% 1;
    }
    return result;
}

fn swish(vector_1: []f64, beta: f64) []f64 {
    var result_1: []f64 = std.heap.page_allocator.alloc(f64, 0) catch unreachable;
    result_1 = result_1;
    var i_2: i64 = 0;
    i_2 = i_2;
    while (i_2 < @as(i64, @intCast(vector_1.len))) {
        const v_1: f64 = vector_1[_idx(vector_1.len, i_2)];
        const s_1: f64 = 1.0 / (1.0 + exp_approx((@as(f64, @floatFromInt(0)) - beta) * v_1));
        result_1 = blk1: { var _tmp_1 = std.ArrayList(f64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_1.appendSlice(@as([]const f64, result_1)) catch |err| handleError(err); _tmp_1.append(v_1 * s_1) catch |err| handleError(err); break :blk1 (_tmp_1.toOwnedSlice() catch |err| handleError(err)); };
        i_2 = i_2 +% 1;
    }
    return result_1;
}

fn sigmoid_linear_unit(vector_2: []f64) []f64 {
    return swish(vector_2, 1.0);
}

fn approx_equal(a: f64, b: f64, eps: f64) bool {
    const diff: f64 = if (a > b) a - b else b - a;
    return diff < eps;
}

fn approx_equal_list(a_1: []f64, b_1: []f64, eps_1: f64) bool {
    if (@as(i64, @intCast(a_1.len)) != @as(i64, @intCast(b_1.len))) {
        return false;
    }
    var i_3: i64 = 0;
    i_3 = i_3;
    while (i_3 < @as(i64, @intCast(a_1.len))) {
        if (!(approx_equal(a_1[_idx(a_1.len, i_3)], b_1[_idx(b_1.len, i_3)], eps_1))) {
            return false;
        }
        i_3 = i_3 +% 1;
    }
    return true;
}

fn test_swish() void {
    const v_2: []f64 = blk2: { var _tmp_2 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_2.append(@as(f64, @floatFromInt(0)) - 1.0) catch unreachable; _tmp_2.append(1.0) catch unreachable; _tmp_2.append(2.0) catch unreachable; break :blk2 (_tmp_2.toOwnedSlice() catch unreachable); };
    const eps_2: f64 = 0.00100000000000000002;
    if (!(approx_equal_list(sigmoid(v_2), blk3: { var _tmp_3 = [3]f64{0.268941419999999987, 0.731058580000000013, 0.88079708000000001}; break :blk3 _tmp_3[0..]; }, eps_2))) {
        @panic("sigmoid incorrect");
    }
    if (!(approx_equal_list(sigmoid_linear_unit(v_2), blk4: { var _tmp_4 = [3]f64{@as(f64, @floatFromInt(0)) - 0.268941419999999987, 0.731058580000000013, 1.76159416000000002}; break :blk4 _tmp_4[0..]; }, eps_2))) {
        @panic("sigmoid_linear_unit incorrect");
    }
    if (!(approx_equal_list(swish(v_2, 2.0), blk5: { var _tmp_5 = [3]f64{@as(f64, @floatFromInt(0)) - 0.119202920000000004, 0.88079708000000001, 1.96402758}; break :blk5 _tmp_5[0..]; }, eps_2))) {
        @panic("swish incorrect");
    }
    if (!(approx_equal_list(swish(blk6: { var _tmp_6 = [1]f64{@as(f64, @floatFromInt(0)) - 2.0}; break :blk6 _tmp_6[0..]; }, 1.0), blk7: { var _tmp_7 = [1]f64{@as(f64, @floatFromInt(0)) - 0.238405840000000008}; break :blk7 _tmp_7[0..]; }, eps_2))) {
        @panic("swish with parameter 1 incorrect");
    }
}

fn mochi_main() void {
    test_swish();
    std.debug.print("{s}\n", .{_str(sigmoid(blk8: { var _tmp_8 = [3]f64{@as(f64, @floatFromInt(0)) - 1.0, 1.0, 2.0}; break :blk8 _tmp_8[0..]; }))});
    std.debug.print("{s}\n", .{_str(sigmoid_linear_unit(blk9: { var _tmp_9 = [3]f64{@as(f64, @floatFromInt(0)) - 1.0, 1.0, 2.0}; break :blk9 _tmp_9[0..]; }))});
    std.debug.print("{s}\n", .{_str(swish(blk10: { var _tmp_10 = [3]f64{@as(f64, @floatFromInt(0)) - 1.0, 1.0, 2.0}; break :blk10 _tmp_10[0..]; }, 2.0))});
    std.debug.print("{s}\n", .{_str(swish(blk11: { var _tmp_11 = [1]f64{@as(f64, @floatFromInt(0)) - 2.0}; break :blk11 _tmp_11[0..]; }, 1.0))});
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        mochi_main();
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
