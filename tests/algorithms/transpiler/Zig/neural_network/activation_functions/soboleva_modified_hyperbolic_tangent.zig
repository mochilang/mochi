// Generated by Mochi Zig transpiler on 2025-08-12 11:18 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn exp(x_param: f64) f64 {
    var x_var: f64 = x_param;
    x_var = x_var;
    var term: f64 = 1.0;
    term = term;
    var sum: f64 = 1.0;
    sum = sum;
    var n: i64 = 1;
    n = n;
    while (n < 20) {
        term = term * x_var / @as(f64, @floatFromInt(n));
        sum = sum + term;
        n = n + 1;
    }
    return sum;
}

fn soboleva_modified_hyperbolic_tangent(vector_param: []f64, a_value_param: f64, b_value_param: f64, c_value_param_: f64, d_value_param: f64) []f64 {
    var vector_var: []f64 = vector_param;
    vector_var = vector_var;
    var a_value_var: f64 = a_value_param;
    a_value_var = a_value_var;
    var b_value_var: f64 = b_value_param;
    b_value_var = b_value_var;
    const c_value_var_: f64 = c_value_param_;
    var d_value_var: f64 = d_value_param;
    d_value_var = d_value_var;
    var result: []f64 = @constCast(&[_]f64{})[0..];
    result = result;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(vector_var.len))) {
        const x: f64 = vector_var[@as(usize, @intCast(i))];
        const numerator: f64 = exp(a_value_var * x) - exp((@as(f64, @floatFromInt(0)) - b_value_var) * x);
        const denominator: f64 = exp(c_value_var_ * x) + exp((@as(f64, @floatFromInt(0)) - d_value_var) * x);
        result = blk: { var _tmp = std.ArrayList(f64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const f64, result)) catch |err| handleError(err); _tmp.append(numerator / denominator) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    return result;
}

fn mochi_main() void {
    const vector: []f64 = @constCast(&([6]f64{5.4, @as(f64, @floatFromInt(0)) - 2.4, 6.3, @as(f64, @floatFromInt(0)) - 5.23, 3.27, 0.56}))[0..];
    const res: []f64 = soboleva_modified_hyperbolic_tangent(vector, 0.2, 0.4, 0.6, 0.8);
    const __j = std.json.stringifyAlloc(std.heap.page_allocator, res, .{}) catch unreachable;
    std.debug.print("{s}\n", .{__j});
    std.heap.page_allocator.free(__j);
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        mochi_main();
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * std.mem.page_size;
    }
    return 0;
}
