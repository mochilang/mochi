// Generated by Mochi Zig transpiler on 2025-08-24 08:57 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

var array1_var_1: []i64 = &[_]i64{};
var array2_var_1: []i64 = ;
var array3_var_1: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
var nums1_var_1: []i64 = ;
var nums2_var_1: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
var nums3_var_1: []i64 = &[_]i64{};

fn quick_sort_3partition(arr_param: []i64, left: i64, right: i64) []i64 {
    var arr_var: []i64 = arr_param;
    arr_var = arr_var;
    if (right <= left) {
        return arr_var;
    }
    var a: i64 = left;
    a = a;
    var i: i64 = left;
    i = i;
    var b: i64 = right;
    b = b;
    const pivot: i64 = arr_var[_idx(arr_var.len, left)];
    while (i <= b) {
        if (arr_var[_idx(arr_var.len, i)] < pivot) {
            const temp: i64 = arr_var[_idx(arr_var.len, a)];
            arr_var[_idx(arr_var.len, a)] = arr_var[_idx(arr_var.len, i)];
            arr_var[_idx(arr_var.len, i)] = temp;
            a = a +% 1;
            i = i +% 1;
        } else {
            if (arr_var[_idx(arr_var.len, i)] > pivot) {
                const temp_1: i64 = arr_var[_idx(arr_var.len, b)];
                arr_var[_idx(arr_var.len, b)] = arr_var[_idx(arr_var.len, i)];
                arr_var[_idx(arr_var.len, i)] = temp_1;
                b = b -% 1;
            } else {
                i = i +% 1;
            }
        }
    }
    arr_var = quick_sort_3partition(arr_var, left, a -% 1);
    arr_var = quick_sort_3partition(arr_var, b +% 1, right);
    return arr_var;
}

fn quick_sort_lomuto_partition(arr_param_1: []i64, left_1: i64, right_1: i64) []i64 {
    var arr_var_1: []i64 = arr_param_1;
    arr_var_1 = arr_var_1;
    if (left_1 < right_1) {
        const pivot_index: i64 = lomuto_partition(arr_var_1, left_1, right_1);
        arr_var_1 = quick_sort_lomuto_partition(arr_var_1, left_1, pivot_index -% 1);
        arr_var_1 = quick_sort_lomuto_partition(arr_var_1, pivot_index +% 1, right_1);
    }
    return arr_var_1;
}

fn lomuto_partition(arr_param_2: []i64, left_2: i64, right_2: i64) i64 {
    const arr_var_2: []i64 = arr_param_2;
    const pivot_1: i64 = arr_var_2[_idx(arr_var_2.len, right_2)];
    var store_index: i64 = left_2;
    store_index = store_index;
    var i_1: i64 = left_2;
    i_1 = i_1;
    while (i_1 < right_2) {
        if (arr_var_2[_idx(arr_var_2.len, i_1)] < pivot_1) {
            const temp_2: i64 = arr_var_2[_idx(arr_var_2.len, store_index)];
            arr_var_2[_idx(arr_var_2.len, store_index)] = arr_var_2[_idx(arr_var_2.len, i_1)];
            arr_var_2[_idx(arr_var_2.len, i_1)] = temp_2;
            store_index = store_index +% 1;
        }
        i_1 = i_1 +% 1;
    }
    const temp_3: i64 = arr_var_2[_idx(arr_var_2.len, right_2)];
    arr_var_2[_idx(arr_var_2.len, right_2)] = arr_var_2[_idx(arr_var_2.len, store_index)];
    arr_var_2[_idx(arr_var_2.len, store_index)] = temp_3;
    return store_index;
}

fn three_way_radix_quicksort(arr: []i64) []i64 {
    if (@as(i64, @intCast(arr.len)) <= 1) {
        return arr;
    }
    const pivot_2: i64 = arr[_idx(arr.len, 0)];
    var less: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    less = less;
    var equal: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    equal = equal;
    var greater: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    greater = greater;
    var i_2: i64 = 0;
    i_2 = i_2;
    while (i_2 < @as(i64, @intCast(arr.len))) {
        const val: i64 = arr[_idx(arr.len, i_2)];
        if (val < pivot_2) {
            less = blk0: { var _tmp = std.ArrayList(i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp.appendSlice(@as([]const i64, less)) catch |err| handleError(err); _tmp.append(val) catch |err| handleError(err); break :blk0 (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        } else {
            if (val > pivot_2) {
                greater = blk1: { var _tmp_1 = std.ArrayList(i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_1.appendSlice(@as([]const i64, greater)) catch |err| handleError(err); _tmp_1.append(val) catch |err| handleError(err); break :blk1 (_tmp_1.toOwnedSlice() catch |err| handleError(err)); };
            } else {
                equal = blk2: { var _tmp_2 = std.ArrayList(i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_2.appendSlice(@as([]const i64, equal)) catch |err| handleError(err); _tmp_2.append(val) catch |err| handleError(err); break :blk2 (_tmp_2.toOwnedSlice() catch |err| handleError(err)); };
            }
        }
        i_2 = i_2 +% 1;
    }
    _ = three_way_radix_quicksort(less);
    _ = three_way_radix_quicksort(greater);
    var result: []i64 = blk3: { var _tmp_3 = std.ArrayList(i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_3.appendSlice(@as([]const i64, sorted_less)) catch |err| handleError(err); _tmp_3.appendSlice(@as([]const i64, equal)) catch |err| handleError(err); break :blk3 (_tmp_3.toOwnedSlice() catch |err| handleError(err)); };
    result = result;
    result = blk4: { var _tmp_4 = std.ArrayList(i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_4.appendSlice(@as([]const i64, result)) catch |err| handleError(err); _tmp_4.appendSlice(@as([]const i64, sorted_greater)) catch |err| handleError(err); break :blk4 (_tmp_4.toOwnedSlice() catch |err| handleError(err)); };
    return result;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        array1_var_1 = std.heap.page_allocator.dupe(i64, blk5: { var _tmp_5 = std.ArrayList(i64).init(std.heap.page_allocator); _tmp_5.append(5) catch unreachable; _tmp_5.append(0 -% 1) catch unreachable; _tmp_5.append(0 -% 1) catch unreachable; _tmp_5.append(5) catch unreachable; _tmp_5.append(5) catch unreachable; _tmp_5.append(24) catch unreachable; _tmp_5.append(0) catch unreachable; break :blk5 (_tmp_5.toOwnedSlice() catch unreachable); }) catch unreachable;
        array1_var_1 = quick_sort_3partition(array1_var_1, 0, @as(i64, @intCast(array1_var_1.len)) -% 1);
        array2_var_1 = quick_sort_3partition(array2_var_1, 0, @as(i64, @intCast(array2_var_1.len)) -% 1);
        array3_var_1 = quick_sort_3partition(array3_var_1, 0, @as(i64, @intCast(array3_var_1.len)) -% 1);
        nums1_var_1 = quick_sort_lomuto_partition(nums1_var_1, 0, @as(i64, @intCast(nums1_var_1.len)) -% 1);
        nums2_var_1 = quick_sort_lomuto_partition(nums2_var_1, 0, @as(i64, @intCast(nums2_var_1.len)) -% 1);
        nums3_var_1 = std.heap.page_allocator.dupe(i64, blk6: { var _tmp_6 = std.ArrayList(i64).init(std.heap.page_allocator); _tmp_6.append(0 -% 2) catch unreachable; _tmp_6.append(5) catch unreachable; _tmp_6.append(0) catch unreachable; _tmp_6.append(0 -% 4) catch unreachable; break :blk6 (_tmp_6.toOwnedSlice() catch unreachable); }) catch unreachable;
        nums3_var_1 = quick_sort_lomuto_partition(nums3_var_1, 0, @as(i64, @intCast(nums3_var_1.len)) -% 1);
        std.debug.print("{s}\n", .{_str(array1_var_1)});
        std.debug.print("{s}\n", .{_str(array2_var_1)});
        std.debug.print("{s}\n", .{_str(array3_var_1)});
        std.debug.print("{s}\n", .{_str(nums1_var_1)});
        std.debug.print("{s}\n", .{_str(nums2_var_1)});
        std.debug.print("{s}\n", .{_str(nums3_var_1)});
        std.debug.print("{s}\n", .{_str(three_way_radix_quicksort(@constCast((&[_]i64{})[0..0])))});
        std.debug.print("{s}\n", .{_str(three_way_radix_quicksort(blk7: { var _tmp_7 = [1]i64{1}; break :blk7 _tmp_7[0..]; }))});
        std.debug.print("{s}\n", .{_str(three_way_radix_quicksort(blk8: { var _tmp_8 = [6]i64{0 -% 5, 0 -% 2, 1, 0 -% 2, 0, 1}; break :blk8 _tmp_8[0..]; }))});
        std.debug.print("{s}\n", .{_str(three_way_radix_quicksort(blk9: { var _tmp_9 = [10]i64{1, 2, 5, 1, 2, 0, 0, 5, 2, 0 -% 1}; break :blk9 _tmp_9[0..]; }))});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
