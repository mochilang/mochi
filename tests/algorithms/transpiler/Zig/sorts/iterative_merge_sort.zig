// Generated by Mochi Zig transpiler on 2025-08-24 08:57 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn merge(a_param: []i64, low: i64, mid: i64, high: i64) []i64 {
    var a_var: []i64 = a_param;
    a_var = a_var;
    var left: []i64 = a_var[@as(usize, @intCast(low))..@min(@as(usize, @intCast(mid)), @as(usize, @intCast(a_var.len)))];
    left = left;
    var right: []i64 = a_var[@as(usize, @intCast(mid))..@min(@as(usize, @intCast(high +% 1)), @as(usize, @intCast(a_var.len)))];
    right = right;
    var result: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    result = result;
    while (@as(i64, @intCast(left.len)) > 0 and @as(i64, @intCast(right.len)) > 0) {
        if (left[_idx(left.len, 0)] <= right[_idx(right.len, 0)]) {
            result = blk0: { var _tmp = std.ArrayList(i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp.appendSlice(@as([]const i64, result)) catch |err| handleError(err); _tmp.append(left[_idx(left.len, 0)]) catch |err| handleError(err); break :blk0 (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            left = left[@as(usize, @intCast(1))..];
        } else {
            result = blk1: { var _tmp_1 = std.ArrayList(i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_1.appendSlice(@as([]const i64, result)) catch |err| handleError(err); _tmp_1.append(right[_idx(right.len, 0)]) catch |err| handleError(err); break :blk1 (_tmp_1.toOwnedSlice() catch |err| handleError(err)); };
            right = right[@as(usize, @intCast(1))..];
        }
    }
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(left.len))) {
        result = blk2: { var _tmp_2 = std.ArrayList(i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_2.appendSlice(@as([]const i64, result)) catch |err| handleError(err); _tmp_2.append(left[_idx(left.len, i)]) catch |err| handleError(err); break :blk2 (_tmp_2.toOwnedSlice() catch |err| handleError(err)); };
        i = i +% 1;
    }
    i = 0;
    while (i < @as(i64, @intCast(right.len))) {
        result = blk3: { var _tmp_3 = std.ArrayList(i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_3.appendSlice(@as([]const i64, result)) catch |err| handleError(err); _tmp_3.append(right[_idx(right.len, i)]) catch |err| handleError(err); break :blk3 (_tmp_3.toOwnedSlice() catch |err| handleError(err)); };
        i = i +% 1;
    }
    i = 0;
    while (i < @as(i64, @intCast(result.len))) {
        a_var[_idx(a_var.len, low +% i)] = result[_idx(result.len, i)];
        i = i +% 1;
    }
    return a_var;
}

fn iter_merge_sort(items: []i64) []i64 {
    const n: i64 = @as(i64, @intCast(items.len));
    if (n <= 1) {
        return items;
    }
    var arr: []i64 = items[@as(usize, @intCast(0))..];
    arr = arr;
    var p: i64 = 2;
    p = p;
    while (p <= n) {
        var i_1: i64 = 0;
        i_1 = i_1;
        while (i_1 < n) {
            var high_1: i64 = i_1 +% p -% 1;
            high_1 = high_1;
            if (high_1 >= n) {
                high_1 = n -% 1;
            }
            const low_1: i64 = i_1;
            const mid_1: i64 = @divTrunc(low_1 +% high_1 +% 1, 2);
            arr = merge(arr, low_1, mid_1, high_1);
            i_1 = i_1 +% p;
        }
        if (p *% 2 >= n) {
            const mid2: i64 = i_1 -% p;
            arr = merge(arr, 0, mid2, n -% 1);
            break;
        }
        p = p *% 2;
    }
    return arr;
}

fn list_to_string(arr_1: []i64) []const u8 {
    var s: []const u8 = "[";
    s = s;
    var i_2: i64 = 0;
    i_2 = i_2;
    while (i_2 < @as(i64, @intCast(arr_1.len))) {
        s = _concat_string(s, _str(arr_1[_idx(arr_1.len, i_2)]));
        if (i_2 < @as(i64, @intCast(arr_1.len)) -% 1) {
            s = _concat_string(s, ", ");
        }
        i_2 = i_2 +% 1;
    }
    return _concat_string(s, "]");
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        std.debug.print("{s}\n", .{list_to_string(iter_merge_sort(blk4: { var _tmp_4 = [7]i64{5, 9, 8, 7, 1, 2, 7}; break :blk4 _tmp_4[0..]; }))});
        std.debug.print("{s}\n", .{list_to_string(iter_merge_sort(blk5: { var _tmp_5 = [1]i64{1}; break :blk5 _tmp_5[0..]; }))});
        std.debug.print("{s}\n", .{list_to_string(iter_merge_sort(blk6: { var _tmp_6 = [2]i64{2, 1}; break :blk6 _tmp_6[0..]; }))});
        std.debug.print("{s}\n", .{list_to_string(iter_merge_sort(blk7: { var _tmp_7 = [4]i64{4, 3, 2, 1}; break :blk7 _tmp_7[0..]; }))});
        std.debug.print("{s}\n", .{list_to_string(iter_merge_sort(blk8: { var _tmp_8 = [5]i64{5, 4, 3, 2, 1}; break :blk8 _tmp_8[0..]; }))});
        std.debug.print("{s}\n", .{list_to_string(iter_merge_sort(blk9: { var _tmp_9 = [4]i64{0 -% 2, 0 -% 9, 0 -% 1, 0 -% 4}; break :blk9 _tmp_9[0..]; }))});
        std.debug.print("{s}\n", .{list_to_string(iter_merge_sort(@constCast((&[_]i64{})[0..0])))});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
