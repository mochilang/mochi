// Generated by Mochi Zig transpiler on 2025-08-24 08:57 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const DIGITS_var: []const u8 = "0123456789";
const LOWER_var: []const u8 = "abcdefghijklmnopqrstuvwxyz";
const UPPER_var: []const u8 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
const example1_var_1: [][]const u8 = @constCast(([5][]const u8{"2 ft 7 in", "1 ft 5 in", "10 ft 2 in", "2 ft 11 in", "7 ft 6 in"})[0..5]);
const example2_var_1: [][]const u8 = @constCast(([8][]const u8{"Elm11", "Elm12", "Elm2", "elm0", "elm1", "elm10", "elm13", "elm9"})[0..8]);

fn index_of(s: []const u8, ch: []const u8) i64 {
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(s.len))) {
        if (std.mem.eql(u8, s[_idx(s.len, i).._idx(s.len, i) + 1], ch)) {
            return i;
        }
        i = i +% 1;
    }
    return 0 -% 1;
}

fn is_digit(ch_1: []const u8) bool {
    return index_of(DIGITS_var, ch_1) >= 0;
}

fn to_lower(ch_2: []const u8) []const u8 {
    const idx: i64 = index_of(UPPER_var, ch_2);
    if (idx >= 0) {
        return LOWER_var[@as(usize, @intCast(idx))..@min(@as(usize, @intCast(idx +% 1)), @as(usize, @intCast(LOWER_var.len)))];
    }
    return ch_2;
}

fn pad_left(s_1: []const u8, width: i64) []const u8 {
    var res: []const u8 = blk0: { const tmp = std.heap.page_allocator.alloc(u8, s_1.len) catch unreachable; @memcpy(tmp, s_1); break :blk0 tmp; };
    res = res;
    while (@as(i64, @intCast(res.len)) < width) {
        res = _concat_string("0", res);
    }
    return res;
}

fn alphanum_key(s_2: []const u8) [][]const u8 {
    var key: [][]const u8 = std.heap.page_allocator.alloc([]const u8, 0) catch unreachable;
    key = key;
    var i_1: i64 = 0;
    i_1 = i_1;
    while (i_1 < @as(i64, @intCast(s_2.len))) {
        if (is_digit(s_2[_idx(s_2.len, i_1).._idx(s_2.len, i_1) + 1])) {
            var num: []const u8 = "";
            num = num;
            while (i_1 < @as(i64, @intCast(s_2.len)) and is_digit(s_2[_idx(s_2.len, i_1).._idx(s_2.len, i_1) + 1])) {
                num = _concat_string(num, s_2[_idx(s_2.len, i_1).._idx(s_2.len, i_1) + 1]);
                i_1 = i_1 +% 1;
            }
            const len_str: []const u8 = pad_left(_str(@as(i64, @intCast(num.len))), 3);
            key = blk1: { var _tmp = std.ArrayList([]const u8).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp.appendSlice(@as([]const []const u8, key)) catch |err| handleError(err); _tmp.append(@constCast(_concat_string(_concat_string("#", len_str), num))) catch |err| handleError(err); break :blk1 (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        } else {
            var seg: []const u8 = "";
            seg = seg;
            while (i_1 < @as(i64, @intCast(s_2.len))) {
                if (is_digit(s_2[_idx(s_2.len, i_1).._idx(s_2.len, i_1) + 1])) {
                    break;
                }
                seg = _concat_string(seg, to_lower(s_2[_idx(s_2.len, i_1).._idx(s_2.len, i_1) + 1]));
                i_1 = i_1 +% 1;
            }
            key = blk2: { var _tmp_1 = std.ArrayList([]const u8).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_1.appendSlice(@as([]const []const u8, key)) catch |err| handleError(err); _tmp_1.append(@constCast(seg)) catch |err| handleError(err); break :blk2 (_tmp_1.toOwnedSlice() catch |err| handleError(err)); };
        }
    }
    return key;
}

fn compare_keys(a: [][]const u8, b: [][]const u8) i64 {
    var i_2: i64 = 0;
    i_2 = i_2;
    while (i_2 < @as(i64, @intCast(a.len)) and i_2 < @as(i64, @intCast(b.len))) {
        if (std.mem.order(u8, a[_idx(a.len, i_2)], b[_idx(b.len, i_2)]) == .lt) {
            return 0 -% 1;
        }
        if (std.mem.order(u8, a[_idx(a.len, i_2)], b[_idx(b.len, i_2)]) == .gt) {
            return 1;
        }
        i_2 = i_2 +% 1;
    }
    if (@as(i64, @intCast(a.len)) < @as(i64, @intCast(b.len))) {
        return 0 -% 1;
    }
    if (@as(i64, @intCast(a.len)) > @as(i64, @intCast(b.len))) {
        return 1;
    }
    return 0;
}

fn natural_sort(arr: [][]const u8) [][]const u8 {
    var res_1: [][]const u8 = std.heap.page_allocator.alloc([]const u8, 0) catch unreachable;
    res_1 = res_1;
    var keys: [][][]const u8 = std.heap.page_allocator.alloc([][]const u8, 0) catch unreachable;
    keys = keys;
    var k: i64 = 0;
    k = k;
    while (k < @as(i64, @intCast(arr.len))) {
        res_1 = blk3: { var _tmp_2 = std.ArrayList([]const u8).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_2.appendSlice(@as([]const []const u8, res_1)) catch |err| handleError(err); _tmp_2.append(@constCast(arr[_idx(arr.len, k)])) catch |err| handleError(err); break :blk3 (_tmp_2.toOwnedSlice() catch |err| handleError(err)); };
        keys = blk4: { var _tmp_3 = std.ArrayList([][]const u8).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_3.appendSlice(@as([]const [][]const u8, keys)) catch |err| handleError(err); _tmp_3.append(alphanum_key(arr[_idx(arr.len, k)])) catch |err| handleError(err); break :blk4 (_tmp_3.toOwnedSlice() catch |err| handleError(err)); };
        k = k +% 1;
    }
    var i_3: i64 = 1;
    i_3 = i_3;
    while (i_3 < @as(i64, @intCast(res_1.len))) {
        const current: []const u8 = res_1[_idx(res_1.len, i_3)];
        const current_key: [][]const u8 = keys[_idx(keys.len, i_3)];
        var j: i64 = i_3 -% 1;
        j = j;
        while (j >= 0 and compare_keys(keys[_idx(keys.len, j)], current_key) > 0) {
            res_1[_idx(res_1.len, j +% 1)] = res_1[_idx(res_1.len, j)];
            keys[_idx(keys.len, j +% 1)] = keys[_idx(keys.len, j)];
            j = j -% 1;
        }
        res_1[_idx(res_1.len, j +% 1)] = current;
        keys[_idx(keys.len, j +% 1)] = current_key;
        i_3 = i_3 +% 1;
    }
    return res_1;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        std.debug.print("{s}\n", .{_str(natural_sort(example1_var_1))});
        std.debug.print("{s}\n", .{_str(natural_sort(example2_var_1))});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
