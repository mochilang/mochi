// Generated by Mochi Zig transpiler on 2025-08-24 08:57 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn odd_even_sort(xs: []i64) []i64 {
    var arr: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    arr = arr;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(xs.len))) {
        arr = blk0: { var _tmp = std.ArrayList(i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp.appendSlice(@as([]const i64, arr)) catch |err| handleError(err); _tmp.append(xs[_idx(xs.len, i)]) catch |err| handleError(err); break :blk0 (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i +% 1;
    }
    const n: i64 = @as(i64, @intCast(arr.len));
    var sorted: bool = false;
    sorted = sorted;
    while (sorted == false) {
        sorted = true;
        var j: i64 = 0;
        j = j;
        while (j < n -% 1) {
            if (arr[_idx(arr.len, j)] > arr[_idx(arr.len, j +% 1)]) {
                const tmp: i64 = arr[_idx(arr.len, j)];
                arr[_idx(arr.len, j)] = arr[_idx(arr.len, j +% 1)];
                arr[_idx(arr.len, j +% 1)] = tmp;
                sorted = false;
            }
            j = j +% 2;
        }
        j = 1;
        while (j < n -% 1) {
            if (arr[_idx(arr.len, j)] > arr[_idx(arr.len, j +% 1)]) {
                const tmp_1: i64 = arr[_idx(arr.len, j)];
                arr[_idx(arr.len, j)] = arr[_idx(arr.len, j +% 1)];
                arr[_idx(arr.len, j +% 1)] = tmp_1;
                sorted = false;
            }
            j = j +% 2;
        }
    }
    return arr;
}

fn print_list(xs_1: []i64) void {
    var i_1: i64 = 0;
    i_1 = i_1;
    var out: []const u8 = "";
    out = out;
    while (i_1 < @as(i64, @intCast(xs_1.len))) {
        if (i_1 > 0) {
            out = _concat_string(out, " ");
        }
        out = _concat_string(out, _str(xs_1[_idx(xs_1.len, i_1)]));
        i_1 = i_1 +% 1;
    }
    std.debug.print("{s}\n", .{out});
}

fn test_odd_even_sort() void {
    const a: []i64 = @constCast(([5]i64{5, 4, 3, 2, 1})[0..5]);
    const r1: []i64 = odd_even_sort(a);
    if (r1[_idx(r1.len, 0)] != 1 or r1[_idx(r1.len, 1)] != 2 or r1[_idx(r1.len, 2)] != 3 or r1[_idx(r1.len, 3)] != 4 or r1[_idx(r1.len, 4)] != 5) {
        @panic("case1 failed");
    }
    const b: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    const r2: []i64 = odd_even_sort(b);
    if (@as(i64, @intCast(r2.len)) != 0) {
        @panic("case2 failed");
    }
    const c: []i64 = blk1: { var _tmp_1 = std.ArrayList(i64).init(std.heap.page_allocator); _tmp_1.append(0 -% 10) catch unreachable; _tmp_1.append(0 -% 1) catch unreachable; _tmp_1.append(10) catch unreachable; _tmp_1.append(2) catch unreachable; break :blk1 (_tmp_1.toOwnedSlice() catch unreachable); };
    const r3: []i64 = odd_even_sort(c);
    if (r3[_idx(r3.len, 0)] != 0 -% 10 or r3[_idx(r3.len, 1)] != 0 -% 1 or r3[_idx(r3.len, 2)] != 2 or r3[_idx(r3.len, 3)] != 10) {
        @panic("case3 failed");
    }
    const d: []i64 = @constCast(([4]i64{1, 2, 3, 4})[0..4]);
    const r4: []i64 = odd_even_sort(d);
    if (r4[_idx(r4.len, 0)] != 1 or r4[_idx(r4.len, 1)] != 2 or r4[_idx(r4.len, 2)] != 3 or r4[_idx(r4.len, 3)] != 4) {
        @panic("case4 failed");
    }
}

fn mochi_main() void {
    test_odd_even_sort();
    const sample: []i64 = @constCast(([5]i64{5, 4, 3, 2, 1})[0..5]);
    const sorted_1: []i64 = odd_even_sort(sample);
    print_list(sorted_1);
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        mochi_main();
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
