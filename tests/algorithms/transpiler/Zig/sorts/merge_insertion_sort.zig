// Generated by Mochi Zig transpiler on 2025-08-24 08:57 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn binary_search_insertion_from(sorted_list: []i64, item: i64, start: i64) []i64 {
    var left: i64 = start;
    left = left;
    var right: i64 = @as(i64, @intCast(sorted_list.len)) -% 1;
    right = right;
    while (left <= right) {
        const middle: i64 = @divTrunc(left +% right, 2);
        if (left == right) {
            if (sorted_list[_idx(sorted_list.len, middle)] < item) {
                left = middle +% 1;
            }
            break;
        } else {
            if (sorted_list[_idx(sorted_list.len, middle)] < item) {
                left = middle +% 1;
            } else {
                right = middle -% 1;
            }
        }
    }
    var result: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    result = result;
    var i: i64 = 0;
    i = i;
    while (i < left) {
        result = blk0: { var _tmp = std.ArrayList(i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp.appendSlice(@as([]const i64, result)) catch |err| handleError(err); _tmp.append(sorted_list[_idx(sorted_list.len, i)]) catch |err| handleError(err); break :blk0 (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i +% 1;
    }
    result = blk1: { var _tmp_1 = std.ArrayList(i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_1.appendSlice(@as([]const i64, result)) catch |err| handleError(err); _tmp_1.append(item) catch |err| handleError(err); break :blk1 (_tmp_1.toOwnedSlice() catch |err| handleError(err)); };
    while (i < @as(i64, @intCast(sorted_list.len))) {
        result = blk2: { var _tmp_2 = std.ArrayList(i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_2.appendSlice(@as([]const i64, result)) catch |err| handleError(err); _tmp_2.append(sorted_list[_idx(sorted_list.len, i)]) catch |err| handleError(err); break :blk2 (_tmp_2.toOwnedSlice() catch |err| handleError(err)); };
        i = i +% 1;
    }
    return result;
}

fn binary_search_insertion(sorted_list_1: []i64, item_1: i64) []i64 {
    return binary_search_insertion_from(sorted_list_1, item_1, 0);
}

fn merge(left_1: [][]i64, right_1: [][]i64) [][]i64 {
    var result_1: [][]i64 = std.heap.page_allocator.alloc([]i64, 0) catch unreachable;
    result_1 = result_1;
    var i_1: i64 = 0;
    i_1 = i_1;
    var j: i64 = 0;
    j = j;
    while (i_1 < @as(i64, @intCast(left_1.len)) and j < @as(i64, @intCast(right_1.len))) {
        if (left_1[_idx(left_1.len, i_1)][_idx(left_1[_idx(left_1.len, i_1)].len, 0)] < right_1[_idx(right_1.len, j)][_idx(right_1[_idx(right_1.len, j)].len, 0)]) {
            result_1 = blk3: { var _tmp_3 = std.ArrayList([]i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_3.appendSlice(@as([]const []i64, result_1)) catch |err| handleError(err); _tmp_3.append(left_1[_idx(left_1.len, i_1)]) catch |err| handleError(err); break :blk3 (_tmp_3.toOwnedSlice() catch |err| handleError(err)); };
            i_1 = i_1 +% 1;
        } else {
            result_1 = blk4: { var _tmp_4 = std.ArrayList([]i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_4.appendSlice(@as([]const []i64, result_1)) catch |err| handleError(err); _tmp_4.append(right_1[_idx(right_1.len, j)]) catch |err| handleError(err); break :blk4 (_tmp_4.toOwnedSlice() catch |err| handleError(err)); };
            j = j +% 1;
        }
    }
    while (i_1 < @as(i64, @intCast(left_1.len))) {
        result_1 = blk5: { var _tmp_5 = std.ArrayList([]i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_5.appendSlice(@as([]const []i64, result_1)) catch |err| handleError(err); _tmp_5.append(left_1[_idx(left_1.len, i_1)]) catch |err| handleError(err); break :blk5 (_tmp_5.toOwnedSlice() catch |err| handleError(err)); };
        i_1 = i_1 +% 1;
    }
    while (j < @as(i64, @intCast(right_1.len))) {
        result_1 = blk6: { var _tmp_6 = std.ArrayList([]i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_6.appendSlice(@as([]const []i64, result_1)) catch |err| handleError(err); _tmp_6.append(right_1[_idx(right_1.len, j)]) catch |err| handleError(err); break :blk6 (_tmp_6.toOwnedSlice() catch |err| handleError(err)); };
        j = j +% 1;
    }
    return result_1;
}

fn sortlist_2d(list_2d: [][]i64) [][]i64 {
    const length: i64 = @as(i64, @intCast(list_2d.len));
    if (length <= 1) {
        return list_2d;
    }
    const middle_1: i64 = @divTrunc(length, 2);
    var left_2: [][]i64 = std.heap.page_allocator.alloc([]i64, 0) catch unreachable;
    left_2 = left_2;
    var i_2: i64 = 0;
    i_2 = i_2;
    while (i_2 < middle_1) {
        left_2 = blk7: { var _tmp_7 = std.ArrayList([]i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_7.appendSlice(@as([]const []i64, left_2)) catch |err| handleError(err); _tmp_7.append(list_2d[_idx(list_2d.len, i_2)]) catch |err| handleError(err); break :blk7 (_tmp_7.toOwnedSlice() catch |err| handleError(err)); };
        i_2 = i_2 +% 1;
    }
    var right_2: [][]i64 = std.heap.page_allocator.alloc([]i64, 0) catch unreachable;
    right_2 = right_2;
    var j_1: i64 = middle_1;
    j_1 = j_1;
    while (j_1 < length) {
        right_2 = blk8: { var _tmp_8 = std.ArrayList([]i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_8.appendSlice(@as([]const []i64, right_2)) catch |err| handleError(err); _tmp_8.append(list_2d[_idx(list_2d.len, j_1)]) catch |err| handleError(err); break :blk8 (_tmp_8.toOwnedSlice() catch |err| handleError(err)); };
        j_1 = j_1 +% 1;
    }
    return merge(sortlist_2d(left_2), sortlist_2d(right_2));
}

fn merge_insertion_sort(collection: []i64) []i64 {
    if (@as(i64, @intCast(collection.len)) <= 1) {
        return collection;
    }
    var two_paired_list: [][]i64 = std.heap.page_allocator.alloc([]i64, 0) catch unreachable;
    two_paired_list = two_paired_list;
    var has_last_odd_item: bool = false;
    has_last_odd_item = has_last_odd_item;
    var i_3: i64 = 0;
    i_3 = i_3;
    while (i_3 < @as(i64, @intCast(collection.len))) {
        if (i_3 == @as(i64, @intCast(collection.len)) -% 1) {
            has_last_odd_item = true;
        } else {
            const a: i64 = collection[_idx(collection.len, i_3)];
            const b: i64 = collection[_idx(collection.len, i_3 +% 1)];
            if (a < b) {
                two_paired_list = blk9: { var _tmp_9 = std.ArrayList([]i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_9.appendSlice(@as([]const []i64, two_paired_list)) catch |err| handleError(err); _tmp_9.append(@constCast(blk10: { var _tmp_10 = std.ArrayList(i64).init(std.heap.page_allocator); _tmp_10.append(a) catch unreachable; _tmp_10.append(b) catch unreachable; break :blk10 (_tmp_10.toOwnedSlice() catch unreachable); })) catch |err| handleError(err); break :blk9 (_tmp_9.toOwnedSlice() catch |err| handleError(err)); };
            } else {
                two_paired_list = blk11: { var _tmp_11 = std.ArrayList([]i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_11.appendSlice(@as([]const []i64, two_paired_list)) catch |err| handleError(err); _tmp_11.append(@constCast(blk12: { var _tmp_12 = std.ArrayList(i64).init(std.heap.page_allocator); _tmp_12.append(b) catch unreachable; _tmp_12.append(a) catch unreachable; break :blk12 (_tmp_12.toOwnedSlice() catch unreachable); })) catch |err| handleError(err); break :blk11 (_tmp_11.toOwnedSlice() catch |err| handleError(err)); };
            }
        }
        i_3 = i_3 +% 2;
    }
    const sorted_list_2d: [][]i64 = sortlist_2d(two_paired_list);
    var result_2: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    result_2 = result_2;
    i_3 = 0;
    while (i_3 < @as(i64, @intCast(sorted_list_2d.len))) {
        result_2 = blk13: { var _tmp_13 = std.ArrayList(i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_13.appendSlice(@as([]const i64, result_2)) catch |err| handleError(err); _tmp_13.append(sorted_list_2d[_idx(sorted_list_2d.len, i_3)][_idx(sorted_list_2d[_idx(sorted_list_2d.len, i_3)].len, 0)]) catch |err| handleError(err); break :blk13 (_tmp_13.toOwnedSlice() catch |err| handleError(err)); };
        i_3 = i_3 +% 1;
    }
    result_2 = blk14: { var _tmp_14 = std.ArrayList(i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_14.appendSlice(@as([]const i64, result_2)) catch |err| handleError(err); _tmp_14.append(sorted_list_2d[_idx(sorted_list_2d.len, @as(i64, @intCast(sorted_list_2d.len)) -% 1)][_idx(sorted_list_2d[_idx(sorted_list_2d.len, @as(i64, @intCast(sorted_list_2d.len)) -% 1)].len, 1)]) catch |err| handleError(err); break :blk14 (_tmp_14.toOwnedSlice() catch |err| handleError(err)); };
    if (has_last_odd_item) {
        result_2 = binary_search_insertion(result_2, collection[_idx(collection.len, @as(i64, @intCast(collection.len)) -% 1)]);
    }
    var inserted_before: bool = false;
    inserted_before = inserted_before;
    var idx: i64 = 0;
    idx = idx;
    while (idx < @as(i64, @intCast(sorted_list_2d.len)) -% 1) {
        if (has_last_odd_item and result_2[_idx(result_2.len, idx)] == collection[_idx(collection.len, @as(i64, @intCast(collection.len)) -% 1)]) {
            inserted_before = true;
        }
        const pivot: i64 = sorted_list_2d[_idx(sorted_list_2d.len, idx)][_idx(sorted_list_2d[_idx(sorted_list_2d.len, idx)].len, 1)];
        if (inserted_before) {
            result_2 = binary_search_insertion_from(result_2, pivot, idx +% 2);
        } else {
            result_2 = binary_search_insertion_from(result_2, pivot, idx +% 1);
        }
        idx = idx +% 1;
    }
    return result_2;
}

fn mochi_main() void {
    const example1: []i64 = @constCast(([5]i64{0, 5, 3, 2, 2})[0..5]);
    const example2: []i64 = @constCast(([1]i64{99})[0..1]);
    const example3: []i64 = blk15: { var _tmp_15 = std.ArrayList(i64).init(std.heap.page_allocator); _tmp_15.append(0 -% 2) catch unreachable; _tmp_15.append(0 -% 5) catch unreachable; _tmp_15.append(0 -% 45) catch unreachable; break :blk15 (_tmp_15.toOwnedSlice() catch unreachable); };
    std.debug.print("{s}\n", .{_str(merge_insertion_sort(example1))});
    std.debug.print("{s}\n", .{_str(merge_insertion_sort(example2))});
    std.debug.print("{s}\n", .{_str(merge_insertion_sort(example3))});
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        mochi_main();
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
