// Generated by Mochi Zig transpiler on 2025-08-24 08:57 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const example1_var: []i64 = @constCast(([16]i64{4, 2, 6, 8, 1, 7, 8, 22, 14, 56, 27, 79, 23, 45, 14, 12})[0..16]);
var example2_var: []i64 = &[_]i64{};

fn insertion_sort(a: []i64, start: i64, end_: i64) []i64 {
    var arr: []i64 = blk0: { const tmp = std.heap.page_allocator.alloc(i64, a.len) catch unreachable; @memcpy(tmp, a); break :blk0 tmp; };
    arr = arr;
    var i: i64 = start;
    i = i;
    while (i < end_) {
        const key: i64 = arr[_idx(arr.len, i)];
        var j: i64 = i;
        j = j;
        while (j > start and arr[_idx(arr.len, j -% 1)] > key) {
            arr[_idx(arr.len, j)] = arr[_idx(arr.len, j -% 1)];
            j = j -% 1;
        }
        arr[_idx(arr.len, j)] = key;
        i = i +% 1;
    }
    return arr;
}

fn heapify(a_1: []i64, index: i64, heap_size: i64) []i64 {
    var arr_1: []i64 = blk1: { const tmp = std.heap.page_allocator.alloc(i64, a_1.len) catch unreachable; @memcpy(tmp, a_1); break :blk1 tmp; };
    arr_1 = arr_1;
    var largest: i64 = index;
    largest = largest;
    const left: i64 = 2 *% index +% 1;
    const right: i64 = 2 *% index +% 2;
    if (left < heap_size and arr_1[_idx(arr_1.len, left)] > arr_1[_idx(arr_1.len, largest)]) {
        largest = left;
    }
    if (right < heap_size and arr_1[_idx(arr_1.len, right)] > arr_1[_idx(arr_1.len, largest)]) {
        largest = right;
    }
    if (largest != index) {
        const temp: i64 = arr_1[_idx(arr_1.len, index)];
        arr_1[_idx(arr_1.len, index)] = arr_1[_idx(arr_1.len, largest)];
        arr_1[_idx(arr_1.len, largest)] = temp;
        arr_1 = heapify(arr_1, largest, heap_size);
    }
    return arr_1;
}

fn heap_sort(a_2: []i64) []i64 {
    var arr_2: []i64 = blk2: { const tmp = std.heap.page_allocator.alloc(i64, a_2.len) catch unreachable; @memcpy(tmp, a_2); break :blk2 tmp; };
    arr_2 = arr_2;
    const n: i64 = @as(i64, @intCast(arr_2.len));
    if (n <= 1) {
        return arr_2;
    }
    var i_1: i64 = @divTrunc(n, 2);
    i_1 = i_1;
    while (true) {
        arr_2 = heapify(arr_2, i_1, n);
        if (i_1 == 0) {
            break;
        }
        i_1 = i_1 -% 1;
    }
    i_1 = n -% 1;
    while (i_1 > 0) {
        const temp_1: i64 = arr_2[_idx(arr_2.len, 0)];
        arr_2[_idx(arr_2.len, 0)] = arr_2[_idx(arr_2.len, i_1)];
        arr_2[_idx(arr_2.len, i_1)] = temp_1;
        arr_2 = heapify(arr_2, 0, i_1);
        i_1 = i_1 -% 1;
    }
    return arr_2;
}

fn median_of_3(arr_3: []i64, first: i64, middle: i64, last: i64) i64 {
    const a_3: i64 = arr_3[_idx(arr_3.len, first)];
    const b: i64 = arr_3[_idx(arr_3.len, middle)];
    const c: i64 = arr_3[_idx(arr_3.len, last)];
    if (a_3 > b and a_3 < c or a_3 < b and a_3 > c) {
        return a_3;
    } else {
        if (b > a_3 and b < c or b < a_3 and b > c) {
            return b;
        } else {
            return c;
        }
    }
    return 0;
}

fn partition(arr_param: []i64, low: i64, high: i64, pivot: i64) i64 {
    var arr_var: []i64 = arr_param;
    arr_var = arr_var;
    var i_2: i64 = low;
    i_2 = i_2;
    var j_1: i64 = high;
    j_1 = j_1;
    while (true) {
        while (arr_var[_idx(arr_var.len, i_2)] < pivot) {
            i_2 = i_2 +% 1;
        }
        j_1 = j_1 -% 1;
        while (pivot < arr_var[_idx(arr_var.len, j_1)]) {
            j_1 = j_1 -% 1;
        }
        if (i_2 >= j_1) {
            return i_2;
        }
        const temp_2: i64 = arr_var[_idx(arr_var.len, i_2)];
        arr_var[_idx(arr_var.len, i_2)] = arr_var[_idx(arr_var.len, j_1)];
        arr_var[_idx(arr_var.len, j_1)] = temp_2;
        i_2 = i_2 +% 1;
    }
    return 0;
}

fn int_log2(n_1: i64) i64 {
    var v: i64 = n_1;
    v = v;
    var r: i64 = 0;
    r = r;
    while (v > 1) {
        v = @divTrunc(v, 2);
        r = r +% 1;
    }
    return r;
}

fn intro_sort(arr_4: []i64, start_1: i64, end__1: i64, size_threshold: i64, max_depth: i64) []i64 {
    var array: []i64 = blk3: { const tmp = std.heap.page_allocator.alloc(i64, arr_4.len) catch unreachable; @memcpy(tmp, arr_4); break :blk3 tmp; };
    array = array;
    const s: i64 = start_1;
    var e: i64 = end__1;
    e = e;
    var depth: i64 = max_depth;
    depth = depth;
    while (e -% s > size_threshold) {
        if (depth == 0) {
            return heap_sort(array);
        }
        depth = depth -% 1;
        const pivot_1: i64 = median_of_3(array, s, s +% @divTrunc(e -% s, 2) +% 1, e -% 1);
        const p: i64 = partition(array, s, e, pivot_1);
        array = intro_sort(array, p, e, size_threshold, depth);
        e = p;
    }
    const res: []i64 = insertion_sort(array, s, e);
    _ = @as(i64, @intCast(res.len));
    return res;
}

fn intro_sort_main(arr_5: []i64) void {
    if (@as(i64, @intCast(arr_5.len)) == 0) {
        std.debug.print("{s}\n", .{_str(arr_5)});
        return;
    }
    const max_depth_1: i64 = 2 *% int_log2(@as(i64, @intCast(arr_5.len)));
    const sorted: []i64 = intro_sort(arr_5, 0, @as(i64, @intCast(arr_5.len)), 16, max_depth_1);
    std.debug.print("{s}\n", .{_str(sorted)});
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        example2_var = std.heap.page_allocator.dupe(i64, blk4: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.append(21) catch unreachable; _tmp.append(15) catch unreachable; _tmp.append(11) catch unreachable; _tmp.append(45) catch unreachable; _tmp.append(0 -% 2) catch unreachable; _tmp.append(0 -% 11) catch unreachable; _tmp.append(46) catch unreachable; break :blk4 (_tmp.toOwnedSlice() catch unreachable); }) catch unreachable;
        intro_sort_main(example1_var);
        intro_sort_main(example2_var);
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
