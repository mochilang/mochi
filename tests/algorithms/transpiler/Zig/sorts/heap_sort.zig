// Generated by Mochi Zig transpiler on 2025-08-24 08:57 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

var data_var_1: []i64 = &[_]i64{};
var result_var_1: []i64 = &[_]i64{};

fn heapify(arr_param: []i64, index: i64, heap_size: i64) void {
    var arr_var: []i64 = arr_param;
    arr_var = arr_var;
    var largest: i64 = index;
    largest = largest;
    const left_index: i64 = 2 *% index +% 1;
    const right_index: i64 = 2 *% index +% 2;
    if (left_index < heap_size and arr_var[_idx(arr_var.len, left_index)] > arr_var[_idx(arr_var.len, largest)]) {
        largest = left_index;
    }
    if (right_index < heap_size and arr_var[_idx(arr_var.len, right_index)] > arr_var[_idx(arr_var.len, largest)]) {
        largest = right_index;
    }
    if (largest != index) {
        const temp: i64 = arr_var[_idx(arr_var.len, largest)];
        arr_var[_idx(arr_var.len, largest)] = arr_var[_idx(arr_var.len, index)];
        arr_var[_idx(arr_var.len, index)] = temp;
        heapify(arr_var, largest, heap_size);
    }
}

fn heap_sort(arr_param_1: []i64) []i64 {
    const arr_var_1: []i64 = arr_param_1;
    const n: i64 = @as(i64, @intCast(arr_var_1.len));
    var i: i64 = @divTrunc(n, 2) -% 1;
    i = i;
    while (i >= 0) {
        heapify(arr_var_1, i, n);
        i = i -% 1;
    }
    i = n -% 1;
    while (i > 0) {
        const temp_1: i64 = arr_var_1[_idx(arr_var_1.len, 0)];
        arr_var_1[_idx(arr_var_1.len, 0)] = arr_var_1[_idx(arr_var_1.len, i)];
        arr_var_1[_idx(arr_var_1.len, i)] = temp_1;
        heapify(arr_var_1, 0, i);
        i = i -% 1;
    }
    return arr_var_1;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        data_var_1 = std.heap.page_allocator.dupe(i64, blk0: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.append(3) catch unreachable; _tmp.append(7) catch unreachable; _tmp.append(9) catch unreachable; _tmp.append(28) catch unreachable; _tmp.append(123) catch unreachable; _tmp.append(0 -% 5) catch unreachable; _tmp.append(8) catch unreachable; _tmp.append(0 -% 30) catch unreachable; _tmp.append(0 -% 200) catch unreachable; _tmp.append(0) catch unreachable; _tmp.append(4) catch unreachable; break :blk0 (_tmp.toOwnedSlice() catch unreachable); }) catch unreachable;
        result_var_1 = heap_sort(data_var_1);
        std.debug.print("{s}\n", .{_str(result_var_1)});
        if (!std.mem.eql(u8, _str(result_var_1), _str(blk1: { var _tmp_1 = std.ArrayList(i64).init(std.heap.page_allocator); _tmp_1.append(0 -% 200) catch unreachable; _tmp_1.append(0 -% 30) catch unreachable; _tmp_1.append(0 -% 5) catch unreachable; _tmp_1.append(0) catch unreachable; _tmp_1.append(3) catch unreachable; _tmp_1.append(4) catch unreachable; _tmp_1.append(7) catch unreachable; _tmp_1.append(8) catch unreachable; _tmp_1.append(9) catch unreachable; _tmp_1.append(28) catch unreachable; _tmp_1.append(123) catch unreachable; break :blk1 (_tmp_1.toOwnedSlice() catch unreachable); }))) {
            @panic("Assertion error");
        }
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
