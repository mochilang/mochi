// Generated by Mochi Zig transpiler on 2025-08-24 08:57 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn bisect_left(stacks: [][]i64, value: i64) i64 {
    var low: i64 = 0;
    low = low;
    var high: i64 = @as(i64, @intCast(stacks.len));
    high = high;
    while (low < high) {
        const mid: i64 = @divTrunc(low +% high, 2);
        const stack: []i64 = stacks[_idx(stacks.len, mid)];
        const top_idx: i64 = @as(i64, @intCast(stack.len)) -% 1;
        const top: i64 = stack[_idx(stack.len, top_idx)];
        if (top < value) {
            low = mid +% 1;
        } else {
            high = mid;
        }
    }
    return low;
}

fn reverse_list(src: []i64) []i64 {
    var res: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    res = res;
    var i: i64 = @as(i64, @intCast(src.len)) -% 1;
    i = i;
    while (i >= 0) {
        res = blk0: { var _tmp = std.ArrayList(i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp.appendSlice(@as([]const i64, res)) catch |err| handleError(err); _tmp.append(src[_idx(src.len, i)]) catch |err| handleError(err); break :blk0 (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i -% 1;
    }
    return res;
}

fn patience_sort(collection_param: []i64) []i64 {
    var collection_var: []i64 = collection_param;
    collection_var = collection_var;
    var stacks_1: [][]i64 = std.heap.page_allocator.alloc([]i64, 0) catch unreachable;
    stacks_1 = stacks_1;
    var i_1: i64 = 0;
    i_1 = i_1;
    while (i_1 < @as(i64, @intCast(collection_var.len))) {
        const element: i64 = collection_var[_idx(collection_var.len, i_1)];
        const idx: i64 = bisect_left(stacks_1, element);
        if (idx != @as(i64, @intCast(stacks_1.len))) {
            const stack_1: []i64 = stacks_1[_idx(stacks_1.len, idx)];
            stacks_1[_idx(stacks_1.len, idx)] = blk1: { var _tmp_1 = std.ArrayList(i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_1.appendSlice(@as([]const i64, stack_1)) catch |err| handleError(err); _tmp_1.append(element) catch |err| handleError(err); break :blk1 (_tmp_1.toOwnedSlice() catch |err| handleError(err)); };
        } else {
            const new_stack: []i64 = blk2: { var _tmp_2 = std.ArrayList(i64).init(std.heap.page_allocator); _tmp_2.append(element) catch unreachable; break :blk2 (_tmp_2.toOwnedSlice() catch unreachable); };
            stacks_1 = blk3: { var _tmp_3 = std.ArrayList([]i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_3.appendSlice(@as([]const []i64, stacks_1)) catch |err| handleError(err); _tmp_3.append(new_stack) catch |err| handleError(err); break :blk3 (_tmp_3.toOwnedSlice() catch |err| handleError(err)); };
        }
        i_1 = i_1 +% 1;
    }
    i_1 = 0;
    while (i_1 < @as(i64, @intCast(stacks_1.len))) {
        stacks_1[_idx(stacks_1.len, i_1)] = reverse_list(stacks_1[_idx(stacks_1.len, i_1)]);
        i_1 = i_1 +% 1;
    }
    var indices: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    indices = indices;
    i_1 = 0;
    while (i_1 < @as(i64, @intCast(stacks_1.len))) {
        indices = blk4: { var _tmp_4 = std.ArrayList(i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_4.appendSlice(@as([]const i64, indices)) catch |err| handleError(err); _tmp_4.append(0) catch |err| handleError(err); break :blk4 (_tmp_4.toOwnedSlice() catch |err| handleError(err)); };
        i_1 = i_1 +% 1;
    }
    var total: i64 = 0;
    total = total;
    i_1 = 0;
    while (i_1 < @as(i64, @intCast(stacks_1.len))) {
        total = total +% @as(i64, @intCast(stacks_1[_idx(stacks_1.len, i_1)].len));
        i_1 = i_1 +% 1;
    }
    var result: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    result = result;
    var count: i64 = 0;
    count = count;
    while (count < total) {
        var min_val: i64 = 0;
        min_val = min_val;
        var min_stack: i64 = 0 -% 1;
        min_stack = min_stack;
        var j: i64 = 0;
        j = j;
        while (j < @as(i64, @intCast(stacks_1.len))) {
            const idx_1: i64 = indices[_idx(indices.len, j)];
            if (idx_1 < @as(i64, @intCast(stacks_1[_idx(stacks_1.len, j)].len))) {
                const val: i64 = stacks_1[_idx(stacks_1.len, j)][_idx(stacks_1[_idx(stacks_1.len, j)].len, idx_1)];
                if (min_stack < 0) {
                    min_val = val;
                    min_stack = j;
                } else {
                    if (val < min_val) {
                        min_val = val;
                        min_stack = j;
                    }
                }
            }
            j = j +% 1;
        }
        result = blk5: { var _tmp_5 = std.ArrayList(i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_5.appendSlice(@as([]const i64, result)) catch |err| handleError(err); _tmp_5.append(min_val) catch |err| handleError(err); break :blk5 (_tmp_5.toOwnedSlice() catch |err| handleError(err)); };
        indices[_idx(indices.len, min_stack)] = indices[_idx(indices.len, min_stack)] +% 1;
        count = count +% 1;
    }
    i_1 = 0;
    while (i_1 < @as(i64, @intCast(result.len))) {
        collection_var[_idx(collection_var.len, i_1)] = result[_idx(result.len, i_1)];
        i_1 = i_1 +% 1;
    }
    return collection_var;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        std.debug.print("{s}\n", .{_str(patience_sort(blk6: { var _tmp_6 = [6]i64{1, 9, 5, 21, 17, 6}; break :blk6 _tmp_6[0..]; }))});
        std.debug.print("{s}\n", .{_str(patience_sort(@constCast((&[_]i64{})[0..0])))});
        std.debug.print("{s}\n", .{_str(patience_sort(blk7: { var _tmp_7 = [3]i64{0 -% 3, 0 -% 17, 0 -% 48}; break :blk7 _tmp_7[0..]; }))});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
