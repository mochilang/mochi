// Generated by Mochi Zig transpiler on 2025-08-11 17:47 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

var seq1_var: []i64 = &[_]i64{};
var seq2_var: []i64 = &[_]i64{};
var seq3_var: []i64 = &[_]i64{};
var seq4_var: []i64 = &[_]i64{};
var seq5_var: []i64 = &[_]i64{};
var seq6_var: []i64 = &[_]i64{};
var seq7_var: []i64 = &[_]i64{};
var seq8_var: []i64 = &[_]i64{};

fn swap(seq_param: []i64, i: i64, j: i64) void {
    var seq_var: []i64 = seq_param;
    seq_var = seq_var;
    const temp: i64 = seq_var[@as(usize, @intCast(i))];
    seq_var[@as(usize, @intCast(i))] = seq_var[@as(usize, @intCast(j))];
    seq_var[@as(usize, @intCast(j))] = temp;
}

fn slowsort_recursive(seq: []i64, start: i64, end_index: i64) void {
    if (start >= end_index) {
        return;
    }
    const mid: i64 = @divTrunc(start + end_index, 2);
    slowsort_recursive(seq, start, mid);
    slowsort_recursive(seq, mid + 1, end_index);
    if (seq[@as(usize, @intCast(end_index))] < seq[@as(usize, @intCast(mid))]) {
        swap(seq, end_index, mid);
    }
    slowsort_recursive(seq, start, end_index - 1);
}

fn slow_sort(seq: []i64) []i64 {
    if (@as(i64, @intCast(seq.len)) > 0) {
        slowsort_recursive(seq, 0, @as(i64, @intCast(seq.len)) - 1);
    }
    return seq;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        seq1_var = std.heap.page_allocator.dupe(i64, (&([8]i64{1, 6, 2, 5, 3, 4, 4, 5}))[0..]) catch unreachable;
        seq2_var = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
        seq3_var = std.heap.page_allocator.dupe(i64, (&([1]i64{2}))[0..]) catch unreachable;
        seq4_var = std.heap.page_allocator.dupe(i64, (&([4]i64{1, 2, 3, 4}))[0..]) catch unreachable;
        seq5_var = std.heap.page_allocator.dupe(i64, (&([4]i64{4, 3, 2, 1}))[0..]) catch unreachable;
        seq6_var = std.heap.page_allocator.dupe(i64, (&([10]i64{9, 8, 7, 6, 5, 4, 3, 2, 1, 0}))[0..]) catch unreachable;
        seq7_var = std.heap.page_allocator.dupe(i64, (&([10]i64{9, 8, 7, 6, 5, 4, 3, 2, 1, 0}))[0..]) catch unreachable;
        seq8_var = std.heap.page_allocator.dupe(i64, (&([10]i64{9, 8, 7, 6, 5, 4, 3, 2, 1, 0}))[0..]) catch unreachable;
        std.debug.print("{s}\n", .{_str(slow_sort(seq1_var))});
        std.debug.print("{s}\n", .{_str(slow_sort(seq2_var))});
        std.debug.print("{s}\n", .{_str(slow_sort(seq3_var))});
        std.debug.print("{s}\n", .{_str(slow_sort(seq4_var))});
        std.debug.print("{s}\n", .{_str(slow_sort(seq5_var))});
        slowsort_recursive(seq6_var, 2, 7);
        std.debug.print("{s}\n", .{_str(seq6_var)});
        slowsort_recursive(seq7_var, 0, 4);
        std.debug.print("{s}\n", .{_str(seq7_var)});
        slowsort_recursive(seq8_var, 5, @as(i64, @intCast(seq8_var.len)) - 1);
        std.debug.print("{s}\n", .{_str(seq8_var)});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * std.mem.page_size;
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
