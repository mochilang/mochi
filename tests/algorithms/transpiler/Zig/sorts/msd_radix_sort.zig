// Generated by Mochi Zig transpiler on 2025-08-24 08:57 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const ex1_var_1: []i64 = @constCast(([5]i64{40, 12, 1, 100, 4})[0..5]);
var sorted1_var_1: []i64 = &[_]i64{};
const ex2_var_1: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
var sorted2_var_1: []i64 = &[_]i64{};
const ex3_var_1: []i64 = @constCast(([4]i64{123, 345, 123, 80})[0..4]);
var sorted3_var_1: []i64 = &[_]i64{};
const ex4_var_1: []i64 = @constCast(([5]i64{1209, 834598, 1, 540402, 45})[0..5]);
var sorted4_var_1: []i64 = &[_]i64{};

fn get_bit_length(n: i64) i64 {
    if (n == 0) {
        return 1;
    }
    var length: i64 = 0;
    length = length;
    var num: i64 = n;
    num = num;
    while (num > 0) {
        length = length +% 1;
        num = @divTrunc(num, 2);
    }
    return length;
}

fn max_bit_length(nums: []i64) i64 {
    var i: i64 = 0;
    i = i;
    var max_len: i64 = 0;
    max_len = max_len;
    while (i < @as(i64, @intCast(nums.len))) {
        const l: i64 = get_bit_length(nums[_idx(nums.len, i)]);
        if (l > max_len) {
            max_len = l;
        }
        i = i +% 1;
    }
    return max_len;
}

fn get_bit(num_1: i64, pos: i64) i64 {
    var n_1: i64 = num_1;
    n_1 = n_1;
    var i_1: i64 = 0;
    i_1 = i_1;
    while (i_1 < pos) {
        n_1 = @divTrunc(n_1, 2);
        i_1 = i_1 +% 1;
    }
    return @mod(n_1, 2);
}

fn _msd_radix_sort(nums_1: []i64, bit_position: i64) []i64 {
    if (bit_position == 0 or @as(i64, @intCast(nums_1.len)) <= 1) {
        return nums_1;
    }
    var zeros: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    zeros = zeros;
    var ones: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    ones = ones;
    var i_2: i64 = 0;
    i_2 = i_2;
    while (i_2 < @as(i64, @intCast(nums_1.len))) {
        const num_2: i64 = nums_1[_idx(nums_1.len, i_2)];
        if (get_bit(num_2, bit_position -% 1) == 1) {
            ones = blk0: { var _tmp = std.ArrayList(i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp.appendSlice(@as([]const i64, ones)) catch |err| handleError(err); _tmp.append(num_2) catch |err| handleError(err); break :blk0 (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        } else {
            zeros = blk1: { var _tmp_1 = std.ArrayList(i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_1.appendSlice(@as([]const i64, zeros)) catch |err| handleError(err); _tmp_1.append(num_2) catch |err| handleError(err); break :blk1 (_tmp_1.toOwnedSlice() catch |err| handleError(err)); };
        }
        i_2 = i_2 +% 1;
    }
    zeros = _msd_radix_sort(zeros, bit_position -% 1);
    ones = _msd_radix_sort(ones, bit_position -% 1);
    var res: []i64 = blk2: { const tmp = std.heap.page_allocator.alloc(i64, zeros.len) catch unreachable; @memcpy(tmp, zeros); break :blk2 tmp; };
    res = res;
    i_2 = 0;
    while (i_2 < @as(i64, @intCast(ones.len))) {
        res = blk3: { var _tmp_2 = std.ArrayList(i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_2.appendSlice(@as([]const i64, res)) catch |err| handleError(err); _tmp_2.append(ones[_idx(ones.len, i_2)]) catch |err| handleError(err); break :blk3 (_tmp_2.toOwnedSlice() catch |err| handleError(err)); };
        i_2 = i_2 +% 1;
    }
    return res;
}

fn msd_radix_sort(nums_2: []i64) []i64 {
    if (@as(i64, @intCast(nums_2.len)) == 0) {
        return (&[_]i64{})[0..0];
    }
    var i_3: i64 = 0;
    i_3 = i_3;
    while (i_3 < @as(i64, @intCast(nums_2.len))) {
        if (nums_2[_idx(nums_2.len, i_3)] < 0) {
            @panic("All numbers must be positive");
        }
        i_3 = i_3 +% 1;
    }
    const bits: i64 = max_bit_length(nums_2);
    const result: []i64 = _msd_radix_sort(nums_2, bits);
    return result;
}

fn msd_radix_sort_inplace(nums_3: []i64) []i64 {
    return msd_radix_sort(nums_3);
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        sorted1_var_1 = msd_radix_sort(ex1_var_1);
        sorted2_var_1 = msd_radix_sort(ex2_var_1);
        sorted3_var_1 = msd_radix_sort(ex3_var_1);
        sorted4_var_1 = msd_radix_sort(ex4_var_1);
        std.debug.print("{s}\n", .{_str(sorted1_var_1)});
        std.debug.print("{s}\n", .{_str(sorted2_var_1)});
        std.debug.print("{s}\n", .{_str(sorted3_var_1)});
        std.debug.print("{s}\n", .{_str(sorted4_var_1)});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
