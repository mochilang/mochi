// Generated by Mochi Zig transpiler on 2025-08-24 08:57 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

var sample_var: []i64 = &[_]i64{};
var sorted_sample_var: []i64 = &[_]i64{};
const sample2_var: []i64 = ;
var sorted_sample2_var: []i64 = &[_]i64{};

fn copy_list(xs: []i64) []i64 {
    var res: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    res = res;
    var k: i64 = 0;
    k = k;
    while (k < @as(i64, @intCast(xs.len))) {
        res = blk0: { var _tmp = std.ArrayList(i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp.appendSlice(@as([]const i64, res)) catch |err| handleError(err); _tmp.append(xs[_idx(xs.len, k)]) catch |err| handleError(err); break :blk0 (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        k = k +% 1;
    }
    return res;
}

fn insertion_sort(xs_1: []i64) []i64 {
    const arr: []i64 = copy_list(xs_1);
    var idx: i64 = 1;
    idx = idx;
    while (idx < @as(i64, @intCast(arr.len))) {
        const value: i64 = arr[_idx(arr.len, idx)];
        var jdx: i64 = idx -% 1;
        jdx = jdx;
        while (jdx >= 0 and arr[_idx(arr.len, jdx)] > value) {
            arr[_idx(arr.len, jdx +% 1)] = arr[_idx(arr.len, jdx)];
            jdx = jdx -% 1;
        }
        arr[_idx(arr.len, jdx +% 1)] = value;
        idx = idx +% 1;
    }
    return arr;
}

fn merge(left: []i64, right: []i64) []i64 {
    var result: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    result = result;
    var i: i64 = 0;
    i = i;
    var j: i64 = 0;
    j = j;
    while (i < @as(i64, @intCast(left.len)) and j < @as(i64, @intCast(right.len))) {
        if (left[_idx(left.len, i)] < right[_idx(right.len, j)]) {
            result = blk1: { var _tmp_1 = std.ArrayList(i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_1.appendSlice(@as([]const i64, result)) catch |err| handleError(err); _tmp_1.append(left[_idx(left.len, i)]) catch |err| handleError(err); break :blk1 (_tmp_1.toOwnedSlice() catch |err| handleError(err)); };
            i = i +% 1;
        } else {
            result = blk2: { var _tmp_2 = std.ArrayList(i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_2.appendSlice(@as([]const i64, result)) catch |err| handleError(err); _tmp_2.append(right[_idx(right.len, j)]) catch |err| handleError(err); break :blk2 (_tmp_2.toOwnedSlice() catch |err| handleError(err)); };
            j = j +% 1;
        }
    }
    while (i < @as(i64, @intCast(left.len))) {
        result = blk3: { var _tmp_3 = std.ArrayList(i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_3.appendSlice(@as([]const i64, result)) catch |err| handleError(err); _tmp_3.append(left[_idx(left.len, i)]) catch |err| handleError(err); break :blk3 (_tmp_3.toOwnedSlice() catch |err| handleError(err)); };
        i = i +% 1;
    }
    while (j < @as(i64, @intCast(right.len))) {
        result = blk4: { var _tmp_4 = std.ArrayList(i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_4.appendSlice(@as([]const i64, result)) catch |err| handleError(err); _tmp_4.append(right[_idx(right.len, j)]) catch |err| handleError(err); break :blk4 (_tmp_4.toOwnedSlice() catch |err| handleError(err)); };
        j = j +% 1;
    }
    return result;
}

fn tim_sort(xs_2: []i64) []i64 {
    const n: i64 = @as(i64, @intCast(xs_2.len));
    var runs: [][]i64 = std.heap.page_allocator.alloc([]i64, 0) catch unreachable;
    runs = runs;
    var sorted_runs: [][]i64 = std.heap.page_allocator.alloc([]i64, 0) catch unreachable;
    sorted_runs = sorted_runs;
    var current: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    current = current;
    current = blk5: { var _tmp_5 = std.ArrayList(i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_5.appendSlice(@as([]const i64, current)) catch |err| handleError(err); _tmp_5.append(xs_2[_idx(xs_2.len, 0)]) catch |err| handleError(err); break :blk5 (_tmp_5.toOwnedSlice() catch |err| handleError(err)); };
    var i_1: i64 = 1;
    i_1 = i_1;
    while (i_1 < n) {
        if (xs_2[_idx(xs_2.len, i_1)] < xs_2[_idx(xs_2.len, i_1 -% 1)]) {
            runs = blk6: { var _tmp_6 = std.ArrayList([]i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_6.appendSlice(@as([]const []i64, runs)) catch |err| handleError(err); _tmp_6.append(copy_list(current)) catch |err| handleError(err); break :blk6 (_tmp_6.toOwnedSlice() catch |err| handleError(err)); };
            current = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
            current = blk7: { var _tmp_7 = std.ArrayList(i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_7.appendSlice(@as([]const i64, current)) catch |err| handleError(err); _tmp_7.append(xs_2[_idx(xs_2.len, i_1)]) catch |err| handleError(err); break :blk7 (_tmp_7.toOwnedSlice() catch |err| handleError(err)); };
        } else {
            current = blk8: { var _tmp_8 = std.ArrayList(i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_8.appendSlice(@as([]const i64, current)) catch |err| handleError(err); _tmp_8.append(xs_2[_idx(xs_2.len, i_1)]) catch |err| handleError(err); break :blk8 (_tmp_8.toOwnedSlice() catch |err| handleError(err)); };
        }
        i_1 = i_1 +% 1;
    }
    runs = blk9: { var _tmp_9 = std.ArrayList([]i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_9.appendSlice(@as([]const []i64, runs)) catch |err| handleError(err); _tmp_9.append(copy_list(current)) catch |err| handleError(err); break :blk9 (_tmp_9.toOwnedSlice() catch |err| handleError(err)); };
    var r: i64 = 0;
    r = r;
    while (r < @as(i64, @intCast(runs.len))) {
        sorted_runs = blk10: { var _tmp_10 = std.ArrayList([]i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_10.appendSlice(@as([]const []i64, sorted_runs)) catch |err| handleError(err); _tmp_10.append(insertion_sort(runs[_idx(runs.len, r)])) catch |err| handleError(err); break :blk10 (_tmp_10.toOwnedSlice() catch |err| handleError(err)); };
        r = r +% 1;
    }
    var result_1: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    result_1 = result_1;
    r = 0;
    while (r < @as(i64, @intCast(sorted_runs.len))) {
        result_1 = merge(result_1, sorted_runs[_idx(sorted_runs.len, r)]);
        r = r +% 1;
    }
    return result_1;
}

fn list_to_string(xs_3: []i64) []const u8 {
    var s: []const u8 = "[";
    s = s;
    var k_1: i64 = 0;
    k_1 = k_1;
    while (k_1 < @as(i64, @intCast(xs_3.len))) {
        s = _concat_string(s, _str(xs_3[_idx(xs_3.len, k_1)]));
        if (k_1 < @as(i64, @intCast(xs_3.len)) -% 1) {
            s = _concat_string(s, ", ");
        }
        k_1 = k_1 +% 1;
    }
    return _concat_string(s, "]");
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        sample_var = std.heap.page_allocator.dupe(i64, blk11: { var _tmp_11 = std.ArrayList(i64).init(std.heap.page_allocator); _tmp_11.append(5) catch unreachable; _tmp_11.append(9) catch unreachable; _tmp_11.append(10) catch unreachable; _tmp_11.append(3) catch unreachable; _tmp_11.append(0 -% 4) catch unreachable; _tmp_11.append(5) catch unreachable; _tmp_11.append(178) catch unreachable; _tmp_11.append(92) catch unreachable; _tmp_11.append(46) catch unreachable; _tmp_11.append(0 -% 18) catch unreachable; _tmp_11.append(0) catch unreachable; _tmp_11.append(7) catch unreachable; break :blk11 (_tmp_11.toOwnedSlice() catch unreachable); }) catch unreachable;
        sorted_sample_var = tim_sort(sample_var);
        sorted_sample2_var = tim_sort(sample2_var);
        std.debug.print("{s}\n", .{list_to_string(sorted_sample_var)});
        std.debug.print("{s}\n", .{list_to_string(sorted_sample2_var)});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
