// Generated by Mochi Zig transpiler on 2025-08-24 08:57 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn subarray(xs: []i64, start: i64, end: i64) []i64 {
    var result: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    result = result;
    var k: i64 = start;
    k = k;
    while (k < end) {
        result = blk0: { var _tmp = std.ArrayList(i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp.appendSlice(@as([]const i64, result)) catch |err| handleError(err); _tmp.append(xs[_idx(xs.len, k)]) catch |err| handleError(err); break :blk0 (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        k = k +% 1;
    }
    return result;
}

fn merge(arr_param: []i64) []i64 {
    var arr_var: []i64 = arr_param;
    arr_var = arr_var;
    if (@as(i64, @intCast(arr_var.len)) > 1) {
        const middle_length: i64 = @divTrunc(@as(i64, @intCast(arr_var.len)), 2);
        const left_array: []i64 = subarray(arr_var, 0, middle_length);
        const right_array: []i64 = subarray(arr_var, middle_length, @as(i64, @intCast(arr_var.len)));
        const left_size: i64 = @as(i64, @intCast(left_array.len));
        const right_size: i64 = @as(i64, @intCast(right_array.len));
        _ = merge(left_array);
        _ = merge(right_array);
        var left_index: i64 = 0;
        left_index = left_index;
        var right_index: i64 = 0;
        right_index = right_index;
        var index: i64 = 0;
        index = index;
        while (left_index < left_size and right_index < right_size) {
            if (left_array[_idx(left_array.len, left_index)] < right_array[_idx(right_array.len, right_index)]) {
                arr_var[_idx(arr_var.len, index)] = left_array[_idx(left_array.len, left_index)];
                left_index = left_index +% 1;
            } else {
                arr_var[_idx(arr_var.len, index)] = right_array[_idx(right_array.len, right_index)];
                right_index = right_index +% 1;
            }
            index = index +% 1;
        }
        while (left_index < left_size) {
            arr_var[_idx(arr_var.len, index)] = left_array[_idx(left_array.len, left_index)];
            left_index = left_index +% 1;
            index = index +% 1;
        }
        while (right_index < right_size) {
            arr_var[_idx(arr_var.len, index)] = right_array[_idx(right_array.len, right_index)];
            right_index = right_index +% 1;
            index = index +% 1;
        }
    }
    return arr_var;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        std.debug.print("{s}\n", .{_str(merge(blk1: { var _tmp_1 = [10]i64{10, 9, 8, 7, 6, 5, 4, 3, 2, 1}; break :blk1 _tmp_1[0..]; }))});
        std.debug.print("{s}\n", .{_str(merge(blk2: { var _tmp_2 = [10]i64{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}; break :blk2 _tmp_2[0..]; }))});
        std.debug.print("{s}\n", .{_str(merge(blk3: { var _tmp_3 = [8]i64{10, 22, 1, 2, 3, 9, 15, 23}; break :blk3 _tmp_3[0..]; }))});
        std.debug.print("{s}\n", .{_str(merge(blk4: { var _tmp_4 = [1]i64{100}; break :blk4 _tmp_4[0..]; }))});
        std.debug.print("{s}\n", .{_str(merge(@constCast((&[_]i64{})[0..0])))});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
