// Generated by Mochi Zig transpiler on 2025-08-13 07:12 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn sort_list(nums_param: []i64) []i64 {
    var nums_var: []i64 = nums_param;
    nums_var = nums_var;
    var arr: []i64 = blk: { const tmp = std.heap.page_allocator.alloc(i64, nums_var.len) catch unreachable; @memcpy(tmp, nums_var); break :blk tmp; };
    arr = arr;
    var i: i64 = 1;
    i = i;
    while (i < @as(i64, @intCast(arr.len))) {
        const key: i64 = arr[_idx(arr.len, i)];
        var j: i64 = i - 1;
        j = j;
        while (j >= 0 and arr[_idx(arr.len, j)] > key) {
            arr[_idx(arr.len, j + 1)] = arr[_idx(arr.len, j)];
            j = j - 1;
        }
        arr[_idx(arr.len, j + 1)] = key;
        i = i + 1;
    }
    return arr;
}

fn largest_divisible_subset(items_param: []i64) []i64 {
    var items_var: []i64 = items_param;
    items_var = items_var;
    if (@as(i64, @intCast(items_var.len)) == 0) {
        return &[_]i64{};
    }
    const nums: []i64 = sort_list(items_var);
    const n: i64 = @as(i64, @intCast(nums.len));
    var memo: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    memo = memo;
    var prev: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    prev = prev;
    var i: i64 = 0;
    i = i;
    while (i < n) {
        memo = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, memo)) catch |err| handleError(err); _tmp.append(1) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        prev = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, prev)) catch |err| handleError(err); _tmp.append(i) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    i = 0;
    while (i < n) {
        var j: i64 = 0;
        j = j;
        while (j < i) {
            if ((nums[_idx(nums.len, j)] == 0 or @mod(nums[_idx(nums.len, i)], nums[_idx(nums.len, j)]) == 0) and memo[_idx(memo.len, j)] + 1 > memo[_idx(memo.len, i)]) {
                memo[_idx(memo.len, i)] = memo[_idx(memo.len, j)] + 1;
                prev[_idx(prev.len, i)] = j;
            }
            j = j + 1;
        }
        i = i + 1;
    }
    var ans: i64 = -1;
    ans = ans;
    var last_index: i64 = -1;
    last_index = last_index;
    i = 0;
    while (i < n) {
        if (memo[_idx(memo.len, i)] > ans) {
            ans = memo[_idx(memo.len, i)];
            last_index = i;
        }
        i = i + 1;
    }
    if (last_index == -1) {
        return &[_]i64{};
    }
    var result: []i64 = std.heap.page_allocator.dupe(i64, (&([1]i64{nums[_idx(nums.len, last_index)]}))[0..]) catch unreachable;
    result = result;
    while (prev[_idx(prev.len, last_index)] != last_index) {
        last_index = prev[_idx(prev.len, last_index)];
        result = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, result)) catch |err| handleError(err); _tmp.append(nums[_idx(nums.len, last_index)]) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
    }
    return result;
}

fn mochi_main() void {
    const items: []i64 = std.heap.page_allocator.dupe(i64, (&([5]i64{1, 16, 7, 8, 4}))[0..]) catch unreachable;
    const subset: []i64 = largest_divisible_subset(items);
    std.debug.print("{s}\n", .{_concat_string(_concat_string(_concat_string(_concat_string("The longest divisible subset of ", _str(items)), " is "), _str(subset)), ".")});
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        mochi_main();
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
