// Generated by Mochi Zig transpiler on 2025-08-13 07:12 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const KnapsackResult = struct {
    value: i64,
    subset: []i64,
};

var f_var: [][]i64 = &[_][]i64{};
var val_list_var: []i64 = &[_]i64{};
var wt_list_var: []i64 = &[_]i64{};
const n_var: i64 = 4;
const w_cap_var: i64 = 6;
var dp_table_var: [][]i64 = &[_][]i64{};
var optimal_solution_var: i64 = 0;
var example_var: KnapsackResult = undefined;

fn max_int(a_param: i64, b_param: i64) i64 {
    var a_var: i64 = a_param;
    a_var = a_var;
    var b_var: i64 = b_param;
    b_var = b_var;
    if (a_var > b_var) {
        return a_var;
    } else {
        return b_var;
    }
    return 0;
}

fn init_f(n_param: i64, w_param: i64) [][]i64 {
    const n_var_1: i64 = n_param;
    var w_var: i64 = w_param;
    w_var = w_var;
    var table: [][]i64 = &[_][]i64{};
    table = table;
    var i: i64 = 0;
    i = i;
    while (i <= n_var_1) {
        var row: []i64 = &[_]i64{};
        row = row;
        var j: i64 = 0;
        j = j;
        while (j <= w_var) {
            if (i == 0 or j == 0) {
                row = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, row)) catch |err| handleError(err); _tmp.append(0) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            } else {
                row = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, row)) catch |err| handleError(err); _tmp.append(0 - 1) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            }
            j = j + 1;
        }
        table = blk: { var _tmp = std.ArrayList([]i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []i64, table)) catch |err| handleError(err); _tmp.append(row) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    return table;
}

fn mf_knapsack(i_param: i64, wt_param: []i64, val_param: []i64, j_param: i64) i64 {
    var i_var: i64 = i_param;
    i_var = i_var;
    var wt_var: []i64 = wt_param;
    wt_var = wt_var;
    var val_var: []i64 = val_param;
    val_var = val_var;
    var j_var: i64 = j_param;
    j_var = j_var;
    if (f_var[_idx(f_var.len, i_var)][_idx(f_var[_idx(f_var.len, i_var)].len, j_var)] < 0) {
        if (j_var < wt_var[_idx(wt_var.len, i_var - 1)]) {
            f_var[_idx(f_var.len, i_var)][_idx(f_var[_idx(f_var.len, i_var)].len, j_var)] = mf_knapsack(i_var - 1, wt_var, val_var, j_var);
        } else {
            const without_item: i64 = mf_knapsack(i_var - 1, wt_var, val_var, j_var);
            const with_item: i64 = mf_knapsack(i_var - 1, wt_var, val_var, j_var - wt_var[_idx(wt_var.len, i_var - 1)]) + val_var[_idx(val_var.len, i_var - 1)];
            f_var[_idx(f_var.len, i_var)][_idx(f_var[_idx(f_var.len, i_var)].len, j_var)] = max_int(without_item, with_item);
        }
    }
    return f_var[_idx(f_var.len, i_var)][_idx(f_var[_idx(f_var.len, i_var)].len, j_var)];
}

fn create_matrix(rows_param: i64, cols_param: i64) [][]i64 {
    var rows_var: i64 = rows_param;
    rows_var = rows_var;
    var cols_var: i64 = cols_param;
    cols_var = cols_var;
    var matrix: [][]i64 = &[_][]i64{};
    matrix = matrix;
    var i: i64 = 0;
    i = i;
    while (i <= rows_var) {
        var row: []i64 = &[_]i64{};
        row = row;
        var j: i64 = 0;
        j = j;
        while (j <= cols_var) {
            row = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, row)) catch |err| handleError(err); _tmp.append(0) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            j = j + 1;
        }
        matrix = blk: { var _tmp = std.ArrayList([]i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []i64, matrix)) catch |err| handleError(err); _tmp.append(row) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    return matrix;
}

fn knapsack(w_param_1: i64, wt_param_1: []i64, val_param_1: []i64, n_param_1: i64) [][]i64 {
    var w_var: i64 = w_param_1;
    w_var = w_var;
    var wt_var: []i64 = wt_param_1;
    wt_var = wt_var;
    var val_var: []i64 = val_param_1;
    val_var = val_var;
    const n_var_2: i64 = n_param_1;
    var dp: [][]i64 = create_matrix(n_var_2, w_var);
    dp = dp;
    var i: i64 = 1;
    i = i;
    while (i <= n_var_2) {
        var w_: i64 = 1;
        w_ = w_;
        while (w_ <= w_var) {
            if (wt_var[_idx(wt_var.len, i - 1)] <= w_) {
                const include: i64 = val_var[_idx(val_var.len, i - 1)] + dp[_idx(dp.len, i - 1)][_idx(dp[_idx(dp.len, i - 1)].len, w_ - wt_var[_idx(wt_var.len, i - 1)])];
                const exclude: i64 = dp[_idx(dp.len, i - 1)][_idx(dp[_idx(dp.len, i - 1)].len, w_)];
                dp[_idx(dp.len, i)][_idx(dp[_idx(dp.len, i)].len, w_)] = max_int(include, exclude);
            } else {
                dp[_idx(dp.len, i)][_idx(dp[_idx(dp.len, i)].len, w_)] = dp[_idx(dp.len, i - 1)][_idx(dp[_idx(dp.len, i - 1)].len, w_)];
            }
            w_ = w_ + 1;
        }
        i = i + 1;
    }
    return dp;
}

fn construct_solution(dp_param: [][]i64, wt_param_2: []i64, i_param_1: i64, j_param_1: i64, optimal_set_param: []i64) []i64 {
    var dp_var: [][]i64 = dp_param;
    dp_var = dp_var;
    var wt_var: []i64 = wt_param_2;
    wt_var = wt_var;
    var i_var: i64 = i_param_1;
    i_var = i_var;
    var j_var: i64 = j_param_1;
    j_var = j_var;
    var optimal_set_var: []i64 = optimal_set_param;
    optimal_set_var = optimal_set_var;
    if (i_var > 0 and j_var > 0) {
        if (dp_var[_idx(dp_var.len, i_var - 1)][_idx(dp_var[_idx(dp_var.len, i_var - 1)].len, j_var)] == dp_var[_idx(dp_var.len, i_var)][_idx(dp_var[_idx(dp_var.len, i_var)].len, j_var)]) {
            return construct_solution(dp_var, wt_var, i_var - 1, j_var, optimal_set_var);
        } else {
            const with_prev: []i64 = construct_solution(dp_var, wt_var, i_var - 1, j_var - wt_var[_idx(wt_var.len, i_var - 1)], optimal_set_var);
            return blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, with_prev)) catch |err| handleError(err); _tmp.append(i_var) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        }
    }
    return optimal_set_var;
}

fn knapsack_with_example_solution(w_param_2: i64, wt_param_3: []i64, val_param_2: []i64) KnapsackResult {
    var w_var: i64 = w_param_2;
    w_var = w_var;
    var wt_var: []i64 = wt_param_3;
    wt_var = wt_var;
    var val_var: []i64 = val_param_2;
    val_var = val_var;
    const num_items: i64 = @as(i64, @intCast(wt_var.len));
    const dp_table_var_1: [][]i64 = knapsack(w_var, wt_var, val_var, num_items);
    const optimal_val: i64 = dp_table_var_1[_idx(dp_table_var_1.len, num_items)][_idx(dp_table_var_1[_idx(dp_table_var_1.len, num_items)].len, w_var)];
    const subset: []i64 = construct_solution(dp_table_var_1, wt_var, num_items, w_var, @constCast(&[_]i64{}));
    return .{ .value = optimal_val, .subset = subset };
}

fn format_set(xs_param: []i64) []const u8 {
    var xs_var: []i64 = xs_param;
    xs_var = xs_var;
    var res: []const u8 = "{";
    res = res;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(xs_var.len))) {
        res = _concat_string(res, _str(xs_var[_idx(xs_var.len, i)]));
        if (i + 1 < @as(i64, @intCast(xs_var.len))) {
            res = _concat_string(res, ", ");
        }
        i = i + 1;
    }
    res = _concat_string(res, "}");
    return res;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        f_var = undefined;
        val_list_var = std.heap.page_allocator.dupe(i64, (&([4]i64{3, 2, 4, 4}))[0..]) catch unreachable;
        wt_list_var = std.heap.page_allocator.dupe(i64, (&([4]i64{4, 3, 2, 3}))[0..]) catch unreachable;
        dp_table_var = knapsack(w_cap_var, wt_list_var, val_list_var, n_var);
        optimal_solution_var = dp_table_var[_idx(dp_table_var.len, n_var)][_idx(dp_table_var[_idx(dp_table_var.len, n_var)].len, w_cap_var)];
        example_var = knapsack_with_example_solution(w_cap_var, wt_list_var, val_list_var);
        f_var = init_f(n_var, w_cap_var);
        std.debug.print("{s}\n", .{_str(optimal_solution_var)});
        std.debug.print("{s}\n", .{_str(mf_knapsack(n_var, wt_list_var, val_list_var, w_cap_var))});
        std.debug.print("{s}\n", .{_concat_string("optimal_value = ", _str(example_var.value))});
        std.debug.print("{s}\n", .{_concat_string("An optimal subset corresponding to the optimal value ", format_set(example_var.subset))});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
