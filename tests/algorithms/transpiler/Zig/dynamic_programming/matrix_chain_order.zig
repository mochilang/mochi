// Generated by Mochi Zig transpiler on 2025-08-13 07:12 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const MatrixChainResult = struct {
    matrix: [][]i64,
    solution: [][]i64,
};

fn make_2d(n_param: i64) [][]i64 {
    var n_var: i64 = n_param;
    n_var = n_var;
    var res: [][]i64 = std.heap.page_allocator.alloc([]i64, 0) catch unreachable;
    res = res;
    var i: i64 = 0;
    i = i;
    while (i < n_var) {
        var row: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
        row = row;
        var j: i64 = 0;
        j = j;
        while (j < n_var) {
            row = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, row)) catch |err| handleError(err); _tmp.append(0) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            j = j + 1;
        }
        res = blk: { var _tmp = std.ArrayList([]i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []i64, res)) catch |err| handleError(err); _tmp.append(row) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    return res;
}

fn matrix_chain_order(arr_param: []i64) MatrixChainResult {
    var arr_var: []i64 = arr_param;
    arr_var = arr_var;
    const n: i64 = @as(i64, @intCast(arr_var.len));
    var m: [][]i64 = make_2d(n);
    m = m;
    var s: [][]i64 = make_2d(n);
    s = s;
    var chain_length: i64 = 2;
    chain_length = chain_length;
    while (chain_length < n) {
        var a: i64 = 1;
        a = a;
        while (a < n - chain_length + 1) {
            const b: i64 = a + chain_length - 1;
            m[_idx(m.len, a)][_idx(m[_idx(m.len, a)].len, b)] = 1000000000;
            var c: i64 = a;
            c = c;
            while (c < b) {
                const cost: i64 = m[_idx(m.len, a)][_idx(m[_idx(m.len, a)].len, c)] + m[_idx(m.len, c + 1)][_idx(m[_idx(m.len, c + 1)].len, b)] + arr_var[_idx(arr_var.len, a - 1)] * arr_var[_idx(arr_var.len, c)] * arr_var[_idx(arr_var.len, b)];
                if (cost < m[_idx(m.len, a)][_idx(m[_idx(m.len, a)].len, b)]) {
                    m[_idx(m.len, a)][_idx(m[_idx(m.len, a)].len, b)] = cost;
                    s[_idx(s.len, a)][_idx(s[_idx(s.len, a)].len, b)] = c;
                }
                c = c + 1;
            }
            a = a + 1;
        }
        chain_length = chain_length + 1;
    }
    return .{ .matrix = m, .solution = s };
}

fn optimal_parenthesization(s_param: [][]i64, i_param: i64, j_param: i64) []const u8 {
    var s_var: [][]i64 = s_param;
    s_var = s_var;
    var i_var: i64 = i_param;
    i_var = i_var;
    var j_var: i64 = j_param;
    j_var = j_var;
    if (i_var == j_var) {
        return _concat_string("A", _str(i_var));
    } else {
        const left: []const u8 = optimal_parenthesization(s_var, i_var, s_var[_idx(s_var.len, i_var)][_idx(s_var[_idx(s_var.len, i_var)].len, j_var)]);
        const right: []const u8 = optimal_parenthesization(s_var, s_var[_idx(s_var.len, i_var)][_idx(s_var[_idx(s_var.len, i_var)].len, j_var)] + 1, j_var);
        return _concat_string(_concat_string(_concat_string(_concat_string("( ", left), " "), right), " )");
    }
    return "";
}

fn mochi_main() void {
    const arr: []i64 = std.heap.page_allocator.dupe(i64, (&([7]i64{30, 35, 15, 5, 10, 20, 25}))[0..]) catch unreachable;
    const n: i64 = @as(i64, @intCast(arr.len));
    const res: MatrixChainResult = matrix_chain_order(arr);
    std.debug.print("{s}\n", .{_concat_string("No. of Operation required: ", _str(res.matrix[_idx(res.matrix.len, 1)][_idx(res.matrix[_idx(res.matrix.len, 1)].len, n - 1)]))});
    const seq: []const u8 = optimal_parenthesization(res.solution, 1, n - 1);
    std.debug.print("{s}\n", .{seq});
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        mochi_main();
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
