// Generated by Mochi Zig transpiler on 2025-08-13 07:12 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const Graph = struct {
    n: i64,
    dp: [][]i64,
};

const INF_var: i64 = 1000000000;
var graph_var: Graph = undefined;

fn new_graph(n_param: i64) Graph {
    var n_var: i64 = n_param;
    n_var = n_var;
    var dp: [][]i64 = std.heap.page_allocator.alloc([]i64, 0) catch unreachable;
    dp = dp;
    var i: i64 = 0;
    i = i;
    while (i < n_var) {
        var row: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
        row = row;
        var j: i64 = 0;
        j = j;
        while (j < n_var) {
            if (i == j) {
                row = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, row)) catch |err| handleError(err); _tmp.append(0) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            } else {
                row = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, row)) catch |err| handleError(err); _tmp.append(INF_var) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            }
            j = j + 1;
        }
        dp = blk: { var _tmp = std.ArrayList([]i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []i64, dp)) catch |err| handleError(err); _tmp.append(row) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    return .{ .n = n_var, .dp = dp };
}

fn add_edge(g_param: *Graph, u_param: i64, v_param: i64, w_param: i64) void {
    var u_var: i64 = u_param;
    u_var = u_var;
    var v_var: i64 = v_param;
    v_var = v_var;
    var w_var: i64 = w_param;
    w_var = w_var;
    var row: []i64 = g_param.dp[_idx(g_param.dp.len, u_var)];
    row = row;
    row[_idx(row.len, v_var)] = w_var;
    g_param.dp[_idx(g_param.dp.len, u_var)] = row;
    g_param.dp = g_param.dp;
}

fn floyd_warshall(g_param: *Graph) void {
    var k: i64 = 0;
    k = k;
    while (k < g_param.n) {
        var i: i64 = 0;
        i = i;
        while (i < g_param.n) {
            var j: i64 = 0;
            j = j;
            while (j < g_param.n) {
                const alt: i64 = g_param.dp[_idx(g_param.dp.len, i)][_idx(g_param.dp[_idx(g_param.dp.len, i)].len, k)] + g_param.dp[_idx(g_param.dp.len, k)][_idx(g_param.dp[_idx(g_param.dp.len, k)].len, j)];
                var row: []i64 = g_param.dp[_idx(g_param.dp.len, i)];
                row = row;
                if (alt < row[_idx(row.len, j)]) {
                    row[_idx(row.len, j)] = alt;
                    g_param.dp[_idx(g_param.dp.len, i)] = row;
                }
                j = j + 1;
            }
            i = i + 1;
        }
        k = k + 1;
    }
    g_param.dp = g_param.dp;
}

fn show_min(g_param: *Graph, u_param_1: i64, v_param_1: i64) i64 {
    var u_var: i64 = u_param_1;
    u_var = u_var;
    var v_var: i64 = v_param_1;
    v_var = v_var;
    return g_param.dp[_idx(g_param.dp.len, u_var)][_idx(g_param.dp[_idx(g_param.dp.len, u_var)].len, v_var)];
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        graph_var = new_graph(5);
        add_edge(&graph_var, 0, 2, 9);
        add_edge(&graph_var, 0, 4, 10);
        add_edge(&graph_var, 1, 3, 5);
        add_edge(&graph_var, 2, 3, 7);
        add_edge(&graph_var, 3, 0, 10);
        add_edge(&graph_var, 3, 1, 2);
        add_edge(&graph_var, 3, 2, 1);
        add_edge(&graph_var, 3, 4, 6);
        add_edge(&graph_var, 4, 1, 3);
        add_edge(&graph_var, 4, 2, 4);
        add_edge(&graph_var, 4, 3, 9);
        floyd_warshall(&graph_var);
        std.debug.print("{s}\n", .{_str(show_min(&graph_var, 1, 4))});
        std.debug.print("{s}\n", .{_str(show_min(&graph_var, 0, 3))});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
