// Generated by Mochi Zig transpiler on 2025-08-13 07:12 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn longest_common_substring(text1_param: []const u8, text2_param: []const u8) []const u8 {
    var text1_var: []const u8 = text1_param;
    text1_var = text1_var;
    var text2_var: []const u8 = text2_param;
    text2_var = text2_var;
    if (@as(i64, @intCast(text1_var.len)) == 0 or @as(i64, @intCast(text2_var.len)) == 0) {
        return "";
    }
    const m: i64 = @as(i64, @intCast(text1_var.len));
    const n: i64 = @as(i64, @intCast(text2_var.len));
    var dp: [][]i64 = std.heap.page_allocator.alloc([]i64, 0) catch unreachable;
    dp = dp;
    var i: i64 = 0;
    i = i;
    while (i < m + 1) {
        var row: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
        row = row;
        var j: i64 = 0;
        j = j;
        while (j < n + 1) {
            row = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, row)) catch |err| handleError(err); _tmp.append(0) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            j = j + 1;
        }
        dp = blk: { var _tmp = std.ArrayList([]i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []i64, dp)) catch |err| handleError(err); _tmp.append(row) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    var end_pos: i64 = 0;
    end_pos = end_pos;
    var max_len: i64 = 0;
    max_len = max_len;
    var ii: i64 = 1;
    ii = ii;
    while (ii <= m) {
        var jj: i64 = 1;
        jj = jj;
        while (jj <= n) {
            if (std.mem.eql(u8, text1_var[@as(usize, @intCast(ii - 1))..@min(@as(usize, @intCast(ii)), @as(usize, @intCast(text1_var.len)))], text2_var[@as(usize, @intCast(jj - 1))..@min(@as(usize, @intCast(jj)), @as(usize, @intCast(text2_var.len)))])) {
                dp[_idx(dp.len, ii)][_idx(dp[_idx(dp.len, ii)].len, jj)] = 1 + dp[_idx(dp.len, ii - 1)][_idx(dp[_idx(dp.len, ii - 1)].len, jj - 1)];
                if (dp[_idx(dp.len, ii)][_idx(dp[_idx(dp.len, ii)].len, jj)] > max_len) {
                    max_len = dp[_idx(dp.len, ii)][_idx(dp[_idx(dp.len, ii)].len, jj)];
                    end_pos = ii;
                }
            }
            jj = jj + 1;
        }
        ii = ii + 1;
    }
    return text1_var[@as(usize, @intCast(end_pos - max_len))..@min(@as(usize, @intCast(end_pos)), @as(usize, @intCast(text1_var.len)))];
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        std.debug.print("{s}\n", .{longest_common_substring("abcdef", "xabded")});
        std.debug.print("\n", .{});
        std.debug.print("{s}\n", .{longest_common_substring("zxabcdezy", "yzabcdezx")});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
