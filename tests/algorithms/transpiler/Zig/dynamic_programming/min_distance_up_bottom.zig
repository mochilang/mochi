// Generated by Mochi Zig transpiler on 2025-08-13 07:12 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn min3(a_param: i64, b_param: i64, c_param_: i64) i64 {
    var a_var: i64 = a_param;
    a_var = a_var;
    var b_var: i64 = b_param;
    b_var = b_var;
    const c_var_: i64 = c_param_;
    var m: i64 = a_var;
    m = m;
    if (b_var < m) {
        m = b_var;
    }
    if (c_var_ < m) {
        m = c_var_;
    }
    return m;
}

fn helper(word1_param: []const u8, word2_param: []const u8, cache_param: [][]i64, i_param: i64, j_param: i64, len1_param: i64, len2_param: i64) i64 {
    var word1_var: []const u8 = word1_param;
    word1_var = word1_var;
    var word2_var: []const u8 = word2_param;
    word2_var = word2_var;
    var cache_var: [][]i64 = cache_param;
    cache_var = cache_var;
    var i_var: i64 = i_param;
    i_var = i_var;
    var j_var: i64 = j_param;
    j_var = j_var;
    var len1_var: i64 = len1_param;
    len1_var = len1_var;
    var len2_var: i64 = len2_param;
    len2_var = len2_var;
    if (i_var >= len1_var) {
        return len2_var - j_var;
    }
    if (j_var >= len2_var) {
        return len1_var - i_var;
    }
    if (cache_var[_idx(cache_var.len, i_var)][_idx(cache_var[_idx(cache_var.len, i_var)].len, j_var)] != -1) {
        return cache_var[_idx(cache_var.len, i_var)][_idx(cache_var[_idx(cache_var.len, i_var)].len, j_var)];
    }
    var diff: i64 = 0;
    diff = diff;
    if (!std.mem.eql(u8, word1_var[@as(usize, @intCast(i_var))..@min(@as(usize, @intCast(i_var + 1)), @as(usize, @intCast(word1_var.len)))], word2_var[@as(usize, @intCast(j_var))..@min(@as(usize, @intCast(j_var + 1)), @as(usize, @intCast(word2_var.len)))])) {
        diff = 1;
    }
    const delete_cost: i64 = 1 + helper(word1_var, word2_var, cache_var, i_var + 1, j_var, len1_var, len2_var);
    const insert_cost: i64 = 1 + helper(word1_var, word2_var, cache_var, i_var, j_var + 1, len1_var, len2_var);
    const replace_cost: i64 = diff + helper(word1_var, word2_var, cache_var, i_var + 1, j_var + 1, len1_var, len2_var);
    cache_var[_idx(cache_var.len, i_var)][_idx(cache_var[_idx(cache_var.len, i_var)].len, j_var)] = min3(delete_cost, insert_cost, replace_cost);
    return cache_var[_idx(cache_var.len, i_var)][_idx(cache_var[_idx(cache_var.len, i_var)].len, j_var)];
}

fn min_distance_up_bottom(word1_param_1: []const u8, word2_param_1: []const u8) i64 {
    var word1_var: []const u8 = word1_param_1;
    word1_var = word1_var;
    var word2_var: []const u8 = word2_param_1;
    word2_var = word2_var;
    const len1: i64 = @as(i64, @intCast(word1_var.len));
    const len2: i64 = @as(i64, @intCast(word2_var.len));
    var cache: [][]i64 = std.heap.page_allocator.alloc([]i64, 0) catch unreachable;
    cache = cache;
    for (@as(usize, @intCast(0))..@as(usize, @intCast(len1))) |_| {
        var row: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
        row = row;
        for (@as(usize, @intCast(0))..@as(usize, @intCast(len2))) |_| {
            row = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, row)) catch |err| handleError(err); _tmp.append(-1) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        }
        cache = blk: { var _tmp = std.ArrayList([]i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []i64, cache)) catch |err| handleError(err); _tmp.append(row) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
    }
    return helper(word1_var, word2_var, cache, 0, 0, len1, len2);
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        std.debug.print("{s}\n", .{_str(min_distance_up_bottom("intention", "execution"))});
        std.debug.print("{s}\n", .{_str(min_distance_up_bottom("intention", ""))});
        std.debug.print("{s}\n", .{_str(min_distance_up_bottom("", ""))});
        std.debug.print("{s}\n", .{_str(min_distance_up_bottom("zooicoarchaeologist", "zoologist"))});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
