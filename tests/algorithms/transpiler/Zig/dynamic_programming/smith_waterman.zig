// Generated by Mochi Zig transpiler on 2025-08-13 07:12 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const query_var: []const u8 = "HEAGAWGHEE";
const subject_var: []const u8 = "PAWHEAE";
var score_var: [][]i64 = &[_][]i64{};

fn score_function(source_char_param: []const u8, target_char_param: []const u8, match_score_param: i64, mismatch_score_param: i64, gap_score_param: i64) i64 {
    var source_char_var: []const u8 = source_char_param;
    source_char_var = source_char_var;
    var target_char_var: []const u8 = target_char_param;
    target_char_var = target_char_var;
    var match_score_var: i64 = match_score_param;
    match_score_var = match_score_var;
    var mismatch_score_var: i64 = mismatch_score_param;
    mismatch_score_var = mismatch_score_var;
    var gap_score_var: i64 = gap_score_param;
    gap_score_var = gap_score_var;
    if (std.mem.eql(u8, source_char_var, "-") or std.mem.eql(u8, target_char_var, "-")) {
        return gap_score_var;
    }
    if (std.mem.eql(u8, source_char_var, target_char_var)) {
        return match_score_var;
    }
    return mismatch_score_var;
}

fn smith_waterman(query_param: []const u8, subject_param: []const u8, match_score_param_1: i64, mismatch_score_param_1: i64, gap_score_param_1: i64) [][]i64 {
    const query_var_1: []const u8 = query_param;
    const subject_var_1: []const u8 = subject_param;
    var match_score_var: i64 = match_score_param_1;
    match_score_var = match_score_var;
    var mismatch_score_var: i64 = mismatch_score_param_1;
    mismatch_score_var = mismatch_score_var;
    var gap_score_var: i64 = gap_score_param_1;
    gap_score_var = gap_score_var;
    const q: []const u8 = _upper(query_var_1);
    const s: []const u8 = _upper(subject_var_1);
    const m: i64 = @as(i64, @intCast(q.len));
    const n: i64 = @as(i64, @intCast(s.len));
    var score_var_1: [][]i64 = std.heap.page_allocator.alloc([]i64, 0) catch unreachable;
    score_var_1 = score_var_1;
    for (@as(usize, @intCast(0))..@as(usize, @intCast(m + 1))) |_| {
        var row: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
        row = row;
        for (@as(usize, @intCast(0))..@as(usize, @intCast(n + 1))) |_| {
            row = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, row)) catch |err| handleError(err); _tmp.append(0) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        }
        score_var_1 = blk: { var _tmp = std.ArrayList([]i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []i64, score_var_1)) catch |err| handleError(err); _tmp.append(row) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
    }
    for (@as(usize, @intCast(1))..@as(usize, @intCast(m + 1))) |__it2| {
        const i: i64 = @as(i64, @intCast(__it2));
        for (@as(usize, @intCast(1))..@as(usize, @intCast(n + 1))) |__it3| {
            const j: i64 = @as(i64, @intCast(__it3));
            const qc: []const u8 = q[@as(usize, @intCast(i - 1))..@min(@as(usize, @intCast(i)), @as(usize, @intCast(q.len)))];
            const sc: []const u8 = s[@as(usize, @intCast(j - 1))..@min(@as(usize, @intCast(j)), @as(usize, @intCast(s.len)))];
            const diag: i64 = score_var_1[_idx(score_var_1.len, i - 1)][_idx(score_var_1[_idx(score_var_1.len, i - 1)].len, j - 1)] + score_function(qc, sc, match_score_var, mismatch_score_var, gap_score_var);
            const delete: i64 = score_var_1[_idx(score_var_1.len, i - 1)][_idx(score_var_1[_idx(score_var_1.len, i - 1)].len, j)] + gap_score_var;
            const insert: i64 = score_var_1[_idx(score_var_1.len, i)][_idx(score_var_1[_idx(score_var_1.len, i)].len, j - 1)] + gap_score_var;
            var max_val: i64 = 0;
            max_val = max_val;
            if (diag > max_val) {
                max_val = diag;
            }
            if (delete > max_val) {
                max_val = delete;
            }
            if (insert > max_val) {
                max_val = insert;
            }
            score_var_1[_idx(score_var_1.len, i)][_idx(score_var_1[_idx(score_var_1.len, i)].len, j)] = max_val;
        }
    }
    return score_var_1;
}

fn traceback(score_param: [][]i64, query_param_1: []const u8, subject_param_1: []const u8, match_score_param_2: i64, mismatch_score_param_2: i64, gap_score_param_2: i64) []const u8 {
    const score_var_1: [][]i64 = score_param;
    const query_var_2: []const u8 = query_param_1;
    const subject_var_2: []const u8 = subject_param_1;
    var match_score_var: i64 = match_score_param_2;
    match_score_var = match_score_var;
    var mismatch_score_var: i64 = mismatch_score_param_2;
    mismatch_score_var = mismatch_score_var;
    var gap_score_var: i64 = gap_score_param_2;
    gap_score_var = gap_score_var;
    const q: []const u8 = _upper(query_var_2);
    const s: []const u8 = _upper(subject_var_2);
    var max_value: i64 = 0;
    max_value = max_value;
    var i_max: i64 = 0;
    i_max = i_max;
    var j_max: i64 = 0;
    j_max = j_max;
    for (@as(usize, @intCast(0))..@as(usize, @intCast(@as(i64, @intCast(score_var_1.len))))) |__it4| {
        const i: i64 = @as(i64, @intCast(__it4));
        for (@as(usize, @intCast(0))..@as(usize, @intCast(@as(i64, @intCast(score_var_1[_idx(score_var_1.len, i)].len))))) |__it5| {
            const j: i64 = @as(i64, @intCast(__it5));
            if (score_var_1[_idx(score_var_1.len, i)][_idx(score_var_1[_idx(score_var_1.len, i)].len, j)] > max_value) {
                max_value = score_var_1[_idx(score_var_1.len, i)][_idx(score_var_1[_idx(score_var_1.len, i)].len, j)];
                i_max = i;
                j_max = j;
            }
        }
    }
    var i: i64 = i_max;
    i = i;
    var j: i64 = j_max;
    j = j;
    var align1: []const u8 = "";
    align1 = align1;
    var align2: []const u8 = "";
    align2 = align2;
    const gap_penalty: i64 = score_function("-", "-", match_score_var, mismatch_score_var, gap_score_var);
    if (i == 0 or j == 0) {
        return "";
    }
    while (i > 0 and j > 0) {
        const qc: []const u8 = q[@as(usize, @intCast(i - 1))..@min(@as(usize, @intCast(i)), @as(usize, @intCast(q.len)))];
        const sc: []const u8 = s[@as(usize, @intCast(j - 1))..@min(@as(usize, @intCast(j)), @as(usize, @intCast(s.len)))];
        if (score_var_1[_idx(score_var_1.len, i)][_idx(score_var_1[_idx(score_var_1.len, i)].len, j)] == score_var_1[_idx(score_var_1.len, i - 1)][_idx(score_var_1[_idx(score_var_1.len, i - 1)].len, j - 1)] + score_function(qc, sc, match_score_var, mismatch_score_var, gap_score_var)) {
            align1 = _concat_string(qc, align1);
            align2 = _concat_string(sc, align2);
            i = i - 1;
            j = j - 1;
        } else {
            if (score_var_1[_idx(score_var_1.len, i)][_idx(score_var_1[_idx(score_var_1.len, i)].len, j)] == score_var_1[_idx(score_var_1.len, i - 1)][_idx(score_var_1[_idx(score_var_1.len, i - 1)].len, j)] + gap_penalty) {
                align1 = _concat_string(qc, align1);
                align2 = _concat_string("-", align2);
                i = i - 1;
            } else {
                align1 = _concat_string("-", align1);
                align2 = _concat_string(sc, align2);
                j = j - 1;
            }
        }
    }
    return _concat_string(_concat_string(align1, "\n"), align2);
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        score_var = smith_waterman(query_var, subject_var, 1, 0 - 1, 0 - 2);
        std.debug.print("{s}\n", .{traceback(score_var, query_var, subject_var, 1, 0 - 1, 0 - 2)});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _upper(s: []const u8) []const u8 {
    var out = std.heap.page_allocator.alloc(u8, s.len + 1) catch unreachable;
    _ = std.ascii.upperString(out[0..s.len], s);
    out[s.len] = 0;
    return out[0..s.len];
}

fn _lower(s: []const u8) []const u8 {
    var out = std.heap.page_allocator.alloc(u8, s.len + 1) catch unreachable;
    _ = std.ascii.lowerString(out[0..s.len], s);
    out[s.len] = 0;
    return out[0..s.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
