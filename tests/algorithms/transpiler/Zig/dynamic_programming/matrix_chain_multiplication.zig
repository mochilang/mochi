// Generated by Mochi Zig transpiler on 2025-08-13 07:12 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const INF_var: i64 = 1000000000;

fn matrix_chain_multiply(arr_param: []i64) i64 {
    var arr_var: []i64 = arr_param;
    arr_var = arr_var;
    if (@as(i64, @intCast(arr_var.len)) < 2) {
        return 0;
    }
    const n: i64 = @as(i64, @intCast(arr_var.len));
    var dp: [][]i64 = std.heap.page_allocator.alloc([]i64, 0) catch unreachable;
    dp = dp;
    var i: i64 = 0;
    i = i;
    while (i < n) {
        var row: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
        row = row;
        var j: i64 = 0;
        j = j;
        while (j < n) {
            row = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, row)) catch |err| handleError(err); _tmp.append(INF_var) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            j = j + 1;
        }
        dp = blk: { var _tmp = std.ArrayList([]i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []i64, dp)) catch |err| handleError(err); _tmp.append(row) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    i = n - 1;
    while (i > 0) {
        var j: i64 = i;
        j = j;
        while (j < n) {
            if (i == j) {
                dp[_idx(dp.len, i)][_idx(dp[_idx(dp.len, i)].len, j)] = 0;
            } else {
                var k: i64 = i;
                k = k;
                while (k < j) {
                    const cost: i64 = dp[_idx(dp.len, i)][_idx(dp[_idx(dp.len, i)].len, k)] + dp[_idx(dp.len, k + 1)][_idx(dp[_idx(dp.len, k + 1)].len, j)] + arr_var[_idx(arr_var.len, i - 1)] * arr_var[_idx(arr_var.len, k)] * arr_var[_idx(arr_var.len, j)];
                    if (cost < dp[_idx(dp.len, i)][_idx(dp[_idx(dp.len, i)].len, j)]) {
                        dp[_idx(dp.len, i)][_idx(dp[_idx(dp.len, i)].len, j)] = cost;
                    }
                    k = k + 1;
                }
            }
            j = j + 1;
        }
        i = i - 1;
    }
    return dp[_idx(dp.len, 1)][_idx(dp[_idx(dp.len, 1)].len, n - 1)];
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}
