// Generated by Mochi Zig transpiler on 2025-08-13 07:12 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const Node = struct {
    key: i64,
    freq: i64,
};

fn sort_nodes(nodes_param: []Node) []Node {
    var nodes_var: []Node = nodes_param;
    nodes_var = nodes_var;
    var arr: []Node = blk: { const tmp = std.heap.page_allocator.alloc(Node, nodes_var.len) catch unreachable; @memcpy(tmp, nodes_var); break :blk tmp; };
    arr = arr;
    var i: i64 = 1;
    i = i;
    while (i < @as(i64, @intCast(arr.len))) {
        const key_node: Node = arr[_idx(arr.len, i)];
        var j: i64 = i - 1;
        j = j;
        while (j >= 0) {
            const temp: Node = arr[_idx(arr.len, j)];
            if (temp.key > key_node.key) {
                arr[_idx(arr.len, j + 1)] = temp;
                j = j - 1;
            } else {
                break;
            }
        }
        arr[_idx(arr.len, j + 1)] = key_node;
        i = i + 1;
    }
    return arr;
}

fn print_node(n_param: *Node) void {
    std.debug.print("{s}\n", .{_concat_string(_concat_string(_concat_string(_concat_string("Node(key=", _str(n_param.key)), ", freq="), _str(n_param.freq)), ")")});
}

fn print_binary_search_tree(root_param: [][]i64, keys_param: []i64, i_param: i64, j_param: i64, parent_param: i64, is_left_param: bool) void {
    var root_var: [][]i64 = root_param;
    root_var = root_var;
    var keys_var: []i64 = keys_param;
    keys_var = keys_var;
    var i_var: i64 = i_param;
    i_var = i_var;
    var j_var: i64 = j_param;
    j_var = j_var;
    var parent_var: i64 = parent_param;
    parent_var = parent_var;
    var is_left_var: bool = is_left_param;
    is_left_var = is_left_var;
    if (i_var > j_var or i_var < 0 or j_var > @as(i64, @intCast(root_var.len)) - 1) {
        return;
    }
    const node: i64 = root_var[_idx(root_var.len, i_var)][_idx(root_var[_idx(root_var.len, i_var)].len, j_var)];
    if (parent_var == 0 - 1) {
        std.debug.print("{s}\n", .{_concat_string(_str(keys_var[_idx(keys_var.len, node)]), " is the root of the binary search tree.")});
    } else {
        if (is_left_var) {
            std.debug.print("{s}\n", .{_concat_string(_concat_string(_concat_string(_str(keys_var[_idx(keys_var.len, node)]), " is the left child of key "), _str(parent_var)), ".")});
        } else {
            std.debug.print("{s}\n", .{_concat_string(_concat_string(_concat_string(_str(keys_var[_idx(keys_var.len, node)]), " is the right child of key "), _str(parent_var)), ".")});
        }
    }
    print_binary_search_tree(root_var, keys_var, i_var, node - 1, keys_var[_idx(keys_var.len, node)], true);
    print_binary_search_tree(root_var, keys_var, node + 1, j_var, keys_var[_idx(keys_var.len, node)], false);
}

fn find_optimal_binary_search_tree(original_nodes_param: []Node) void {
    var original_nodes_var: []Node = original_nodes_param;
    original_nodes_var = original_nodes_var;
    const nodes: []Node = sort_nodes(original_nodes_var);
    const n: i64 = @as(i64, @intCast(nodes.len));
    var keys: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    keys = keys;
    var freqs: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    freqs = freqs;
    var i: i64 = 0;
    i = i;
    while (i < n) {
        const node: Node = nodes[_idx(nodes.len, i)];
        keys = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, keys)) catch |err| handleError(err); _tmp.append(node.key) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        freqs = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, freqs)) catch |err| handleError(err); _tmp.append(node.freq) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    var dp: [][]i64 = std.heap.page_allocator.alloc([]i64, 0) catch unreachable;
    dp = dp;
    var total: [][]i64 = std.heap.page_allocator.alloc([]i64, 0) catch unreachable;
    total = total;
    var root: [][]i64 = std.heap.page_allocator.alloc([]i64, 0) catch unreachable;
    root = root;
    i = 0;
    while (i < n) {
        var dp_row: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
        dp_row = dp_row;
        var total_row: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
        total_row = total_row;
        var root_row: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
        root_row = root_row;
        var j: i64 = 0;
        j = j;
        while (j < n) {
            if (i == j) {
                dp_row = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, dp_row)) catch |err| handleError(err); _tmp.append(freqs[_idx(freqs.len, i)]) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
                total_row = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, total_row)) catch |err| handleError(err); _tmp.append(freqs[_idx(freqs.len, i)]) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
                root_row = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, root_row)) catch |err| handleError(err); _tmp.append(i) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            } else {
                dp_row = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, dp_row)) catch |err| handleError(err); _tmp.append(0) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
                total_row = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, total_row)) catch |err| handleError(err); _tmp.append(0) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
                root_row = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, root_row)) catch |err| handleError(err); _tmp.append(0) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            }
            j = j + 1;
        }
        dp = blk: { var _tmp = std.ArrayList([]i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []i64, dp)) catch |err| handleError(err); _tmp.append(dp_row) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        total = blk: { var _tmp = std.ArrayList([]i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []i64, total)) catch |err| handleError(err); _tmp.append(total_row) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        root = blk: { var _tmp = std.ArrayList([]i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []i64, root)) catch |err| handleError(err); _tmp.append(root_row) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    var interval_length: i64 = 2;
    interval_length = interval_length;
    const INF: i64 = 2147483647;
    while (interval_length <= n) {
        i = 0;
        while (i < n - interval_length + 1) {
            var j: i64 = i + interval_length - 1;
            j = j;
            dp[_idx(dp.len, i)][_idx(dp[_idx(dp.len, i)].len, j)] = INF;
            total[_idx(total.len, i)][_idx(total[_idx(total.len, i)].len, j)] = total[_idx(total.len, i)][_idx(total[_idx(total.len, i)].len, j - 1)] + freqs[_idx(freqs.len, j)];
            var r: i64 = root[_idx(root.len, i)][_idx(root[_idx(root.len, i)].len, j - 1)];
            r = r;
            while (r <= root[_idx(root.len, i + 1)][_idx(root[_idx(root.len, i + 1)].len, j)]) {
                const left: i64 = if (r != i) dp[_idx(dp.len, i)][_idx(dp[_idx(dp.len, i)].len, r - 1)] else 0;
                const right: i64 = if (r != j) dp[_idx(dp.len, r + 1)][_idx(dp[_idx(dp.len, r + 1)].len, j)] else 0;
                const cost: i64 = left + total[_idx(total.len, i)][_idx(total[_idx(total.len, i)].len, j)] + right;
                if (dp[_idx(dp.len, i)][_idx(dp[_idx(dp.len, i)].len, j)] > cost) {
                    dp[_idx(dp.len, i)][_idx(dp[_idx(dp.len, i)].len, j)] = cost;
                    root[_idx(root.len, i)][_idx(root[_idx(root.len, i)].len, j)] = r;
                }
                r = r + 1;
            }
            i = i + 1;
        }
        interval_length = interval_length + 1;
    }
    std.debug.print("{s}\n", .{"Binary search tree nodes:"});
    i = 0;
    while (i < n) {
        print_node(&nodes[_idx(nodes.len, i)]);
        i = i + 1;
    }
    std.debug.print("{s}\n", .{_concat_string(_concat_string("\nThe cost of optimal BST for given tree nodes is ", _str(dp[_idx(dp.len, 0)][_idx(dp[_idx(dp.len, 0)].len, n - 1)])), ".")});
    print_binary_search_tree(root, keys, 0, n - 1, 0 - 1, false);
}

fn mochi_main() void {
    const nodes: []Node = std.heap.page_allocator.dupe(Node, (&([6]Node{.{ .key = 12, .freq = 8 }, .{ .key = 10, .freq = 34 }, .{ .key = 20, .freq = 50 }, .{ .key = 42, .freq = 3 }, .{ .key = 25, .freq = 40 }, .{ .key = 37, .freq = 30 }}))[0..]) catch unreachable;
    find_optimal_binary_search_tree(nodes);
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        mochi_main();
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
