// Generated by Mochi Zig transpiler on 2025-08-13 07:12 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn longest_subsequence(xs_param: []i64) []i64 {
    var xs_var: []i64 = xs_param;
    xs_var = xs_var;
    const n: i64 = @as(i64, @intCast(xs_var.len));
    if (n <= 1) {
        return xs_var;
    }
    const pivot: i64 = xs_var[_idx(xs_var.len, 0)];
    var is_found: bool = false;
    is_found = is_found;
    var i: i64 = 1;
    i = i;
    var longest_subseq: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    longest_subseq = longest_subseq;
    while (!(is_found) and i < n) {
        if (xs_var[_idx(xs_var.len, i)] < pivot) {
            is_found = true;
            var temp_array: []i64 = xs_var[@as(usize, @intCast(i))..@min(@as(usize, @intCast(n)), @as(usize, @intCast(xs_var.len)))];
            temp_array = temp_array;
            temp_array = longest_subsequence(temp_array);
            if (@as(i64, @intCast(temp_array.len)) > @as(i64, @intCast(longest_subseq.len))) {
                longest_subseq = temp_array;
            }
        } else {
            i = i + 1;
        }
    }
    var filtered: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    filtered = filtered;
    var j: i64 = 1;
    j = j;
    while (j < n) {
        if (xs_var[_idx(xs_var.len, j)] >= pivot) {
            filtered = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, filtered)) catch |err| handleError(err); _tmp.append(xs_var[_idx(xs_var.len, j)]) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        }
        j = j + 1;
    }
    var candidate: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    candidate = candidate;
    candidate = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, candidate)) catch |err| handleError(err); _tmp.append(pivot) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
    candidate = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, candidate)) catch |err| handleError(err); _tmp.appendSlice(@as([]const i64, longest_subsequence(filtered))) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
    if (@as(i64, @intCast(candidate.len)) > @as(i64, @intCast(longest_subseq.len))) {
        return candidate;
    } else {
        return longest_subseq;
    }
    return &[_]i64{};
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}
