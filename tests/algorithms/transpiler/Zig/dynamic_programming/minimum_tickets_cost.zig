// Generated by Mochi Zig transpiler on 2025-08-13 07:12 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn make_list(len_param: i64, value_param: i64) []i64 {
    var len_var: i64 = len_param;
    len_var = len_var;
    var value_var: i64 = value_param;
    value_var = value_var;
    var arr: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    arr = arr;
    var i: i64 = 0;
    i = i;
    while (i < len_var) {
        arr = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, arr)) catch |err| handleError(err); _tmp.append(value_var) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    return arr;
}

fn max_int(a_param: i64, b_param: i64) i64 {
    var a_var: i64 = a_param;
    a_var = a_var;
    var b_var: i64 = b_param;
    b_var = b_var;
    if (a_var > b_var) {
        return a_var;
    } else {
        return b_var;
    }
    return 0;
}

fn min_int(a_param_1: i64, b_param_1: i64) i64 {
    var a_var: i64 = a_param_1;
    a_var = a_var;
    var b_var: i64 = b_param_1;
    b_var = b_var;
    if (a_var < b_var) {
        return a_var;
    } else {
        return b_var;
    }
    return 0;
}

fn min3(a_param_2: i64, b_param_2: i64, c_param_: i64) i64 {
    var a_var: i64 = a_param_2;
    a_var = a_var;
    var b_var: i64 = b_param_2;
    b_var = b_var;
    const c_var_: i64 = c_param_;
    return min_int(min_int(a_var, b_var), c_var_);
}

fn minimum_tickets_cost(days_param: []i64, costs_param: []i64) i64 {
    var days_var: []i64 = days_param;
    days_var = days_var;
    var costs_var: []i64 = costs_param;
    costs_var = costs_var;
    if (@as(i64, @intCast(days_var.len)) == 0) {
        return 0;
    }
    const last_day: i64 = days_var[_idx(days_var.len, @as(i64, @intCast(days_var.len)) - 1)];
    var dp: []i64 = make_list(last_day + 1, 0);
    dp = dp;
    var day_index: i64 = 0;
    day_index = day_index;
    var d: i64 = 1;
    d = d;
    while (d <= last_day) {
        if (day_index < @as(i64, @intCast(days_var.len)) and d == days_var[_idx(days_var.len, day_index)]) {
            const cost1: i64 = dp[_idx(dp.len, d - 1)] + costs_var[_idx(costs_var.len, 0)];
            const cost7: i64 = dp[_idx(dp.len, max_int(0, d - 7))] + costs_var[_idx(costs_var.len, 1)];
            const cost30: i64 = dp[_idx(dp.len, max_int(0, d - 30))] + costs_var[_idx(costs_var.len, 2)];
            dp[_idx(dp.len, d)] = min3(cost1, cost7, cost30);
            day_index = day_index + 1;
        } else {
            dp[_idx(dp.len, d)] = dp[_idx(dp.len, d - 1)];
        }
        d = d + 1;
    }
    return dp[_idx(dp.len, last_day)];
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        std.debug.print("{s}\n", .{_str(minimum_tickets_cost(@constCast(&([6]i64{1, 4, 6, 7, 8, 20}))[0..], @constCast(&([3]i64{2, 7, 15}))[0..]))});
        std.debug.print("{s}\n", .{_str(minimum_tickets_cost(@constCast(&([12]i64{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 30, 31}))[0..], @constCast(&([3]i64{2, 7, 15}))[0..]))});
        std.debug.print("{s}\n", .{_str(minimum_tickets_cost(@constCast(&([12]i64{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 30, 31}))[0..], @constCast(&([3]i64{2, 90, 150}))[0..]))});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
