// Generated by Mochi Zig transpiler on 2025-08-13 07:12 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const KMeansResult = struct {
    centroids: [][]f64,
    assignments: []i64,
};

fn distance_sq(a_param: []f64, b_param: []f64) f64 {
    var a_var: []f64 = a_param;
    a_var = a_var;
    var b_var: []f64 = b_param;
    b_var = b_var;
    var sum: f64 = 0.0;
    sum = sum;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(a_var.len))) {
        const diff: f64 = a_var[_idx(a_var.len, i)] - b_var[_idx(b_var.len, i)];
        sum = sum + diff * diff;
        i = i + 1;
    }
    return sum;
}

fn mean(vectors_param: [][]f64) []f64 {
    var vectors_var: [][]f64 = vectors_param;
    vectors_var = vectors_var;
    const dim: i64 = @as(i64, @intCast(vectors_var[_idx(vectors_var.len, 0)].len));
    var res: []f64 = std.heap.page_allocator.alloc(f64, 0) catch unreachable;
    res = res;
    var i: i64 = 0;
    i = i;
    while (i < dim) {
        var total: f64 = 0.0;
        total = total;
        var j: i64 = 0;
        j = j;
        while (j < @as(i64, @intCast(vectors_var.len))) {
            total = total + vectors_var[_idx(vectors_var.len, j)][_idx(vectors_var[_idx(vectors_var.len, j)].len, i)];
            j = j + 1;
        }
        res = blk: { var _tmp = std.ArrayList(f64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const f64, res)) catch |err| handleError(err); _tmp.append(total / @as(f64, @floatFromInt(@as(i64, @intCast(vectors_var.len))))) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    return res;
}

fn k_means(vectors_param_1: [][]f64, k_param: i64, iterations_param: i64) KMeansResult {
    var vectors_var: [][]f64 = vectors_param_1;
    vectors_var = vectors_var;
    var k_var: i64 = k_param;
    k_var = k_var;
    var iterations_var: i64 = iterations_param;
    iterations_var = iterations_var;
    var centroids: [][]f64 = std.heap.page_allocator.alloc([]f64, 0) catch unreachable;
    centroids = centroids;
    var i: i64 = 0;
    i = i;
    while (i < k_var) {
        centroids = blk: { var _tmp = std.ArrayList([]f64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []f64, centroids)) catch |err| handleError(err); _tmp.append(vectors_var[_idx(vectors_var.len, i)]) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    var assignments: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    assignments = assignments;
    const n: i64 = @as(i64, @intCast(vectors_var.len));
    i = 0;
    while (i < n) {
        assignments = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, assignments)) catch |err| handleError(err); _tmp.append(0) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    var it: i64 = 0;
    it = it;
    while (it < iterations_var) {
        var v: i64 = 0;
        v = v;
        while (v < n) {
            var best: i64 = 0;
            best = best;
            var bestDist: f64 = distance_sq(vectors_var[_idx(vectors_var.len, v)], centroids[_idx(centroids.len, 0)]);
            bestDist = bestDist;
            var c: i64 = 1;
            c = c;
            while (c < k_var) {
                const d: f64 = distance_sq(vectors_var[_idx(vectors_var.len, v)], centroids[_idx(centroids.len, c)]);
                if (d < bestDist) {
                    bestDist = d;
                    best = c;
                }
                c = c + 1;
            }
            assignments[_idx(assignments.len, v)] = best;
            v = v + 1;
        }
        var cIdx: i64 = 0;
        cIdx = cIdx;
        while (cIdx < k_var) {
            var cluster: [][]f64 = std.heap.page_allocator.alloc([]f64, 0) catch unreachable;
            cluster = cluster;
            var v2: i64 = 0;
            v2 = v2;
            while (v2 < n) {
                if (assignments[_idx(assignments.len, v2)] == cIdx) {
                    cluster = blk: { var _tmp = std.ArrayList([]f64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []f64, cluster)) catch |err| handleError(err); _tmp.append(vectors_var[_idx(vectors_var.len, v2)]) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
                }
                v2 = v2 + 1;
            }
            if (@as(i64, @intCast(cluster.len)) > 0) {
                centroids[_idx(centroids.len, cIdx)] = mean(cluster);
            }
            cIdx = cIdx + 1;
        }
        it = it + 1;
    }
    return .{ .centroids = centroids, .assignments = assignments };
}

fn mochi_main() void {
    const vectors: [][]f64 = std.heap.page_allocator.dupe([]f64, (&([6][]f64{std.heap.page_allocator.dupe(f64, (&([2]f64{1.0, 2.0}))[0..]) catch unreachable, std.heap.page_allocator.dupe(f64, (&([2]f64{1.5, 1.8}))[0..]) catch unreachable, std.heap.page_allocator.dupe(f64, (&([2]f64{5.0, 8.0}))[0..]) catch unreachable, std.heap.page_allocator.dupe(f64, (&([2]f64{8.0, 8.0}))[0..]) catch unreachable, std.heap.page_allocator.dupe(f64, (&([2]f64{1.0, 0.6}))[0..]) catch unreachable, std.heap.page_allocator.dupe(f64, (&([2]f64{9.0, 11.0}))[0..]) catch unreachable}))[0..]) catch unreachable;
    const result: KMeansResult = k_means(vectors, 2, 5);
    std.debug.print("{s}\n", .{_str(result.centroids)});
    std.debug.print("{s}\n", .{_str(result.assignments)});
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        mochi_main();
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
