// Generated by Mochi Zig transpiler on 2025-08-19 09:22 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const NumberContainer = struct {
    numbermap: std.AutoHashMap(i64,[]i64),
    indexmap: std.AutoHashMap(i64,i64),
};

var nm_var_1: std.AutoHashMap(i64,[]i64) = std.AutoHashMap(i64,[]i64).init(std.heap.page_allocator);
var im_var_1: std.AutoHashMap(i64,i64) = std.AutoHashMap(i64,i64).init(std.heap.page_allocator);
var cont_var_1: NumberContainer = undefined;

fn remove_at(xs: []i64, idx: i64) []i64 {
    var res: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    res = res;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(xs.len))) {
        if (i != idx) {
            res = blk0: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, res)) catch |err| handleError(err); _tmp.append(xs[_idx(xs.len, i)]) catch |err| handleError(err); break :blk0 (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        }
        i = i +% 1;
    }
    return res;
}

fn insert_at(xs_1: []i64, idx_1: i64, val: i64) []i64 {
    var res_1: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    res_1 = res_1;
    var i_1: i64 = 0;
    i_1 = i_1;
    while (i_1 < @as(i64, @intCast(xs_1.len))) {
        if (i_1 == idx_1) {
            res_1 = blk1: { var _tmp_1 = std.ArrayList(i64).init(std.heap.page_allocator); _tmp_1.appendSlice(@as([]const i64, res_1)) catch |err| handleError(err); _tmp_1.append(val) catch |err| handleError(err); break :blk1 (_tmp_1.toOwnedSlice() catch |err| handleError(err)); };
        }
        res_1 = blk2: { var _tmp_2 = std.ArrayList(i64).init(std.heap.page_allocator); _tmp_2.appendSlice(@as([]const i64, res_1)) catch |err| handleError(err); _tmp_2.append(xs_1[_idx(xs_1.len, i_1)]) catch |err| handleError(err); break :blk2 (_tmp_2.toOwnedSlice() catch |err| handleError(err)); };
        i_1 = i_1 +% 1;
    }
    if (idx_1 == @as(i64, @intCast(xs_1.len))) {
        res_1 = blk3: { var _tmp_3 = std.ArrayList(i64).init(std.heap.page_allocator); _tmp_3.appendSlice(@as([]const i64, res_1)) catch |err| handleError(err); _tmp_3.append(val) catch |err| handleError(err); break :blk3 (_tmp_3.toOwnedSlice() catch |err| handleError(err)); };
    }
    return res_1;
}

fn binary_search_delete(array: []i64, item: i64) []i64 {
    var low: i64 = 0;
    low = low;
    var high: i64 = @as(i64, @intCast(array.len)) -% 1;
    high = high;
    var arr: []i64 = blk4: { const tmp = std.heap.page_allocator.alloc(i64, array.len) catch unreachable; @memcpy(tmp, array); break :blk4 tmp; };
    arr = arr;
    while (low <= high) {
        const mid: i64 = @divTrunc(low +% high, 2);
        if (arr[_idx(arr.len, mid)] == item) {
            arr = remove_at(arr, mid);
            return arr;
        } else {
            if (arr[_idx(arr.len, mid)] < item) {
                low = mid +% 1;
            } else {
                high = mid -% 1;
            }
        }
    }
    std.debug.print("{s}\n", .{"ValueError: Either the item is not in the array or the array was unsorted"});
    return arr;
}

fn binary_search_insert(array_1: []i64, index: i64) []i64 {
    var low_1: i64 = 0;
    low_1 = low_1;
    var high_1: i64 = @as(i64, @intCast(array_1.len)) -% 1;
    high_1 = high_1;
    var arr_1: []i64 = blk5: { const tmp = std.heap.page_allocator.alloc(i64, array_1.len) catch unreachable; @memcpy(tmp, array_1); break :blk5 tmp; };
    arr_1 = arr_1;
    while (low_1 <= high_1) {
        const mid_1: i64 = @divTrunc(low_1 +% high_1, 2);
        if (arr_1[_idx(arr_1.len, mid_1)] == index) {
            arr_1 = insert_at(arr_1, mid_1 +% 1, index);
            return arr_1;
        } else {
            if (arr_1[_idx(arr_1.len, mid_1)] < index) {
                low_1 = mid_1 +% 1;
            } else {
                high_1 = mid_1 -% 1;
            }
        }
    }
    arr_1 = insert_at(arr_1, low_1, index);
    return arr_1;
}

fn change(cont_param: NumberContainer, idx_2: i64, num: i64) NumberContainer {
    var numbermap: std.AutoHashMap(i64,[]i64) = cont_param.numbermap;
    numbermap = numbermap;
    var indexmap: std.AutoHashMap(i64,i64) = cont_param.indexmap;
    indexmap = indexmap;
    if (indexmap.contains(idx_2)) {
        const old: i64 = indexmap.get(idx_2).?;
        const indexes: []i64 = numbermap.get(old).?;
        if (@as(i64, @intCast(indexes.len)) == 1) {
            numbermap.put(old, @constCast((&[_]i64{})[0..0])[0..]) catch unreachable;
        } else {
            numbermap.put(old, binary_search_delete(indexes, idx_2)) catch unreachable;
        }
    }
    indexmap.put(idx_2, num) catch unreachable;
    if (numbermap.contains(num)) {
        numbermap.put(num, binary_search_insert(numbermap.get(num).?, idx_2)) catch unreachable;
    } else {
        numbermap.put(num, blk6: { var _tmp_4 = std.ArrayList(i64).init(std.heap.page_allocator); _tmp_4.append(idx_2) catch unreachable; break :blk6 (_tmp_4.toOwnedSlice() catch unreachable); }) catch unreachable;
    }
    return .{ .numbermap = numbermap, .indexmap = indexmap };
}

fn find(cont_param_1: NumberContainer, num_1: i64) i64 {
    if (cont_param_1.numbermap.contains(num_1)) {
        const arr_2: []i64 = cont_param_1.numbermap.get(num_1).?;
        if (@as(i64, @intCast(arr_2.len)) > 0) {
            return arr_2[_idx(arr_2.len, 0)];
        }
    }
    return 0 -% 1;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        nm_var_1 = std.AutoHashMap(i64, []i64).init(std.heap.page_allocator);
        im_var_1 = std.AutoHashMap(i64, i64).init(std.heap.page_allocator);
        cont_var_1 = .{ .numbermap = nm_var_1, .indexmap = im_var_1 };
        std.debug.print("{s}\n", .{_str(find(cont_var_1, 10))});
        cont_var_1 = change(cont_var_1, 0, 10);
        std.debug.print("{s}\n", .{_str(find(cont_var_1, 10))});
        cont_var_1 = change(cont_var_1, 0, 20);
        std.debug.print("{s}\n", .{_str(find(cont_var_1, 10))});
        std.debug.print("{s}\n", .{_str(find(cont_var_1, 20))});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
