// Generated by Mochi Zig transpiler on 2025-08-19 09:22 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

var vehicles_var_1: [][]f64 = std.heap.page_allocator.alloc([]f64, 0) catch unreachable;
const weights_var_1: []i64 = @constCast(([3]i64{0, 0, 1})[0..3]);
var result_var: [][]f64 = &[_][]f64{};

fn get_data(source_data: [][]f64) [][]f64 {
    var data_lists: [][]f64 = std.heap.page_allocator.alloc([]f64, 0) catch unreachable;
    data_lists = data_lists;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(source_data.len))) {
        const row: []f64 = source_data[_idx(source_data.len, i)];
        var j: i64 = 0;
        j = j;
        while (j < @as(i64, @intCast(row.len))) {
            if (@as(i64, @intCast(data_lists.len)) < j +% 1) {
                const empty: []f64 = std.heap.page_allocator.alloc(f64, 0) catch unreachable;
                data_lists = blk0: { var _tmp = std.ArrayList([]f64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []f64, data_lists)) catch |err| handleError(err); _tmp.append(empty) catch |err| handleError(err); break :blk0 (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            }
            data_lists[_idx(data_lists.len, j)] = blk1: { var _tmp_1 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_1.appendSlice(@as([]const f64, data_lists[_idx(data_lists.len, j)])) catch |err| handleError(err); _tmp_1.append(row[_idx(row.len, j)]) catch |err| handleError(err); break :blk1 (_tmp_1.toOwnedSlice() catch |err| handleError(err)); };
            j = j +% 1;
        }
        i = i +% 1;
    }
    return data_lists;
}

fn calculate_each_score(data_lists_1: [][]f64, weights_param: []i64) [][]f64 {
    var score_lists: [][]f64 = std.heap.page_allocator.alloc([]f64, 0) catch unreachable;
    score_lists = score_lists;
    var i_1: i64 = 0;
    i_1 = i_1;
    while (i_1 < @as(i64, @intCast(data_lists_1.len))) {
        const dlist: []f64 = data_lists_1[_idx(data_lists_1.len, i_1)];
        const weight: i64 = weights_param[_idx(weights_param.len, i_1)];
        var mind: f64 = dlist[_idx(dlist.len, 0)];
        mind = mind;
        var maxd: f64 = dlist[_idx(dlist.len, 0)];
        maxd = maxd;
        var j_1: i64 = 1;
        j_1 = j_1;
        while (j_1 < @as(i64, @intCast(dlist.len))) {
            const val: f64 = dlist[_idx(dlist.len, j_1)];
            if (val < mind) {
                mind = val;
            }
            if (val > maxd) {
                maxd = val;
            }
            j_1 = j_1 +% 1;
        }
        var score: []f64 = std.heap.page_allocator.alloc(f64, 0) catch unreachable;
        score = score;
        j_1 = 0;
        if (weight == 0) {
            while (j_1 < @as(i64, @intCast(dlist.len))) {
                const item: f64 = dlist[_idx(dlist.len, j_1)];
                if (maxd - mind == 0.0) {
                    score = blk2: { var _tmp_2 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_2.appendSlice(@as([]const f64, score)) catch |err| handleError(err); _tmp_2.append(1.0) catch |err| handleError(err); break :blk2 (_tmp_2.toOwnedSlice() catch |err| handleError(err)); };
                } else {
                    score = blk3: { var _tmp_3 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_3.appendSlice(@as([]const f64, score)) catch |err| handleError(err); _tmp_3.append(1.0 - (item - mind) / (maxd - mind)) catch |err| handleError(err); break :blk3 (_tmp_3.toOwnedSlice() catch |err| handleError(err)); };
                }
                j_1 = j_1 +% 1;
            }
        } else {
            while (j_1 < @as(i64, @intCast(dlist.len))) {
                const item_1: f64 = dlist[_idx(dlist.len, j_1)];
                if (maxd - mind == 0.0) {
                    score = blk4: { var _tmp_4 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_4.appendSlice(@as([]const f64, score)) catch |err| handleError(err); _tmp_4.append(0.0) catch |err| handleError(err); break :blk4 (_tmp_4.toOwnedSlice() catch |err| handleError(err)); };
                } else {
                    score = blk5: { var _tmp_5 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_5.appendSlice(@as([]const f64, score)) catch |err| handleError(err); _tmp_5.append((item_1 - mind) / (maxd - mind)) catch |err| handleError(err); break :blk5 (_tmp_5.toOwnedSlice() catch |err| handleError(err)); };
                }
                j_1 = j_1 +% 1;
            }
        }
        score_lists = blk6: { var _tmp_6 = std.ArrayList([]f64).init(std.heap.page_allocator); _tmp_6.appendSlice(@as([]const []f64, score_lists)) catch |err| handleError(err); _tmp_6.append(score) catch |err| handleError(err); break :blk6 (_tmp_6.toOwnedSlice() catch |err| handleError(err)); };
        i_1 = i_1 +% 1;
    }
    return score_lists;
}

fn generate_final_scores(score_lists_1: [][]f64) []f64 {
    const count: i64 = @as(i64, @intCast(score_lists_1[_idx(score_lists_1.len, 0)].len));
    var final_scores: []f64 = std.heap.page_allocator.alloc(f64, 0) catch unreachable;
    final_scores = final_scores;
    var i_2: i64 = 0;
    i_2 = i_2;
    while (i_2 < count) {
        final_scores = blk7: { var _tmp_7 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_7.appendSlice(@as([]const f64, final_scores)) catch |err| handleError(err); _tmp_7.append(0.0) catch |err| handleError(err); break :blk7 (_tmp_7.toOwnedSlice() catch |err| handleError(err)); };
        i_2 = i_2 +% 1;
    }
    i_2 = 0;
    while (i_2 < @as(i64, @intCast(score_lists_1.len))) {
        const slist: []f64 = score_lists_1[_idx(score_lists_1.len, i_2)];
        var j_2: i64 = 0;
        j_2 = j_2;
        while (j_2 < @as(i64, @intCast(slist.len))) {
            final_scores[_idx(final_scores.len, j_2)] = final_scores[_idx(final_scores.len, j_2)] + slist[_idx(slist.len, j_2)];
            j_2 = j_2 +% 1;
        }
        i_2 = i_2 +% 1;
    }
    return final_scores;
}

fn procentual_proximity(source_data_param: [][]f64, weights_param_1: []i64) [][]f64 {
    var source_data_var: [][]f64 = source_data_param;
    source_data_var = source_data_var;
    const data_lists_2: [][]f64 = get_data(source_data_var);
    const score_lists_2: [][]f64 = calculate_each_score(data_lists_2, weights_param_1);
    const final_scores_1: []f64 = generate_final_scores(score_lists_2);
    var i_3: i64 = 0;
    i_3 = i_3;
    while (i_3 < @as(i64, @intCast(final_scores_1.len))) {
        source_data_var[_idx(source_data_var.len, i_3)] = blk8: { var _tmp_8 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_8.appendSlice(@as([]const f64, source_data_var[_idx(source_data_var.len, i_3)])) catch |err| handleError(err); _tmp_8.append(final_scores_1[_idx(final_scores_1.len, i_3)]) catch |err| handleError(err); break :blk8 (_tmp_8.toOwnedSlice() catch |err| handleError(err)); };
        i_3 = i_3 +% 1;
    }
    return source_data_var;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        vehicles_var_1 = blk9: { var _tmp_9 = std.ArrayList([]f64).init(std.heap.page_allocator); _tmp_9.appendSlice(@as([]const []f64, vehicles_var_1)) catch |err| handleError(err); _tmp_9.append(@constCast(([3]f64{20.0, 60.0, 2012.0})[0..3])) catch |err| handleError(err); break :blk9 (_tmp_9.toOwnedSlice() catch |err| handleError(err)); };
        vehicles_var_1 = blk10: { var _tmp_10 = std.ArrayList([]f64).init(std.heap.page_allocator); _tmp_10.appendSlice(@as([]const []f64, vehicles_var_1)) catch |err| handleError(err); _tmp_10.append(@constCast(([3]f64{23.0, 90.0, 2015.0})[0..3])) catch |err| handleError(err); break :blk10 (_tmp_10.toOwnedSlice() catch |err| handleError(err)); };
        vehicles_var_1 = blk11: { var _tmp_11 = std.ArrayList([]f64).init(std.heap.page_allocator); _tmp_11.appendSlice(@as([]const []f64, vehicles_var_1)) catch |err| handleError(err); _tmp_11.append(@constCast(([3]f64{22.0, 50.0, 2011.0})[0..3])) catch |err| handleError(err); break :blk11 (_tmp_11.toOwnedSlice() catch |err| handleError(err)); };
        result_var = procentual_proximity(vehicles_var_1, weights_var_1);
        std.debug.print("{s}\n", .{_str(result_var)});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
