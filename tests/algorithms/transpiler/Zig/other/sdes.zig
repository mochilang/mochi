// Generated by Mochi Zig transpiler on 2025-08-19 09:22 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const p4_table_var: []i64 = @constCast(([4]i64{2, 4, 3, 1})[0..4]);
const key_var: []const u8 = "1010000010";
const message_var: []const u8 = "11010111";
const p8_table_var: []i64 = @constCast(([8]i64{6, 3, 7, 4, 8, 5, 10, 9})[0..8]);
const p10_table_var: []i64 = @constCast(([10]i64{3, 5, 2, 7, 4, 10, 1, 9, 8, 6})[0..10]);
const IP_var: []i64 = @constCast(([8]i64{2, 6, 3, 1, 4, 8, 5, 7})[0..8]);
const IP_inv_var: []i64 = @constCast(([8]i64{4, 1, 3, 5, 7, 2, 8, 6})[0..8]);
const expansion_var: []i64 = @constCast(([8]i64{4, 1, 2, 3, 2, 3, 4, 1})[0..8]);
const s0_var: [][]i64 = @constCast(([4][]i64{@constCast(([4]i64{1, 0, 3, 2})[0..4]), @constCast(([4]i64{3, 2, 1, 0})[0..4]), @constCast(([4]i64{0, 2, 1, 3})[0..4]), @constCast(([4]i64{3, 1, 3, 2})[0..4])})[0..4]);
const s1_var: [][]i64 = @constCast(([4][]i64{@constCast(([4]i64{0, 1, 2, 3})[0..4]), @constCast(([4]i64{2, 0, 1, 3})[0..4]), @constCast(([4]i64{3, 0, 1, 0})[0..4]), @constCast(([4]i64{2, 1, 0, 3})[0..4])})[0..4]);
var temp_var_2: []const u8 = &[_]u8{};
var left_var_2: []const u8 = &[_]u8{};
var right_var_2: []const u8 = &[_]u8{};
var key1_var: []const u8 = &[_]u8{};
var key2_var: []const u8 = &[_]u8{};
var CT_var: []const u8 = &[_]u8{};
var PT_var: []const u8 = &[_]u8{};

fn apply_table(inp: []const u8, table: []i64) []const u8 {
    var res: []const u8 = "";
    res = res;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(table.len))) {
        var idx: i64 = table[_idx(table.len, i)] -% 1;
        idx = idx;
        if (idx < 0) {
            idx = @as(i64, @intCast(inp.len)) -% 1;
        }
        res = _concat_string(res, inp[@as(usize, @intCast(idx))..@min(@as(usize, @intCast(idx +% 1)), @as(usize, @intCast(inp.len)))]);
        i = i +% 1;
    }
    return res;
}

fn left_shift(data: []const u8) []const u8 {
    return _concat_string(data[@as(usize, @intCast(1))..@min(@as(usize, @intCast(@as(i64, @intCast(data.len)))), @as(usize, @intCast(data.len)))], data[@as(usize, @intCast(0))..@min(@as(usize, @intCast(1)), @as(usize, @intCast(data.len)))]);
}

fn xor(a: []const u8, b: []const u8) []const u8 {
    var res_1: []const u8 = "";
    res_1 = res_1;
    var i_1: i64 = 0;
    i_1 = i_1;
    while (i_1 < @as(i64, @intCast(a.len)) and i_1 < @as(i64, @intCast(b.len))) {
        if (std.mem.eql(u8, a[@as(usize, @intCast(i_1))..@min(@as(usize, @intCast(i_1 +% 1)), @as(usize, @intCast(a.len)))], b[@as(usize, @intCast(i_1))..@min(@as(usize, @intCast(i_1 +% 1)), @as(usize, @intCast(b.len)))])) {
            res_1 = _concat_string(res_1, "0");
        } else {
            res_1 = _concat_string(res_1, "1");
        }
        i_1 = i_1 +% 1;
    }
    return res_1;
}

fn int_to_binary(n: i64) []const u8 {
    if (n == 0) {
        return "0";
    }
    var res_2: []const u8 = "";
    res_2 = res_2;
    var num: i64 = n;
    num = num;
    while (num > 0) {
        res_2 = _concat_string(_str(@mod(num, 2)), res_2);
        num = @divTrunc(num, 2);
    }
    return res_2;
}

fn pad_left(s: []const u8, width: i64) []const u8 {
    var res_3: []const u8 = blk0: { const tmp = std.heap.page_allocator.alloc(u8, s.len) catch unreachable; @memcpy(tmp, s); break :blk0 tmp; };
    res_3 = res_3;
    while (@as(i64, @intCast(res_3.len)) < width) {
        res_3 = _concat_string("0", res_3);
    }
    return res_3;
}

fn bin_to_int(s_1: []const u8) i64 {
    var result: i64 = 0;
    result = result;
    var i_2: i64 = 0;
    i_2 = i_2;
    while (i_2 < @as(i64, @intCast(s_1.len))) {
        const digit: i64 = (std.fmt.parseInt(i64, s_1[@as(usize, @intCast(i_2))..@min(@as(usize, @intCast(i_2 +% 1)), @as(usize, @intCast(s_1.len)))], 10) catch 0);
        result = result *% 2 +% digit;
        i_2 = i_2 +% 1;
    }
    return result;
}

fn apply_sbox(s_2: [][]i64, data_1: []const u8) []const u8 {
    const row_bits: []const u8 = _concat_string(data_1[@as(usize, @intCast(0))..@min(@as(usize, @intCast(1)), @as(usize, @intCast(data_1.len)))], data_1[@as(usize, @intCast(@as(i64, @intCast(data_1.len)) -% 1))..@min(@as(usize, @intCast(@as(i64, @intCast(data_1.len)))), @as(usize, @intCast(data_1.len)))]);
    const col_bits: []const u8 = data_1[@as(usize, @intCast(1))..@min(@as(usize, @intCast(3)), @as(usize, @intCast(data_1.len)))];
    const row: i64 = bin_to_int(row_bits);
    const col: i64 = bin_to_int(col_bits);
    const val: i64 = s_2[_idx(s_2.len, row)][_idx(s_2[_idx(s_2.len, row)].len, col)];
    const out: []const u8 = int_to_binary(val);
    return out;
}

fn f(expansion_param: []i64, s0_param: [][]i64, s1_param: [][]i64, key_param: []const u8, message_param: []const u8) []const u8 {
    const left_var_1: []const u8 = message_param[@as(usize, @intCast(0))..@min(@as(usize, @intCast(4)), @as(usize, @intCast(message_param.len)))];
    const right_var_1: []const u8 = message_param[@as(usize, @intCast(4))..@min(@as(usize, @intCast(8)), @as(usize, @intCast(message_param.len)))];
    var temp_var_1: []const u8 = apply_table(right_var_1, expansion_param);
    temp_var_1 = temp_var_1;
    temp_var_1 = xor(temp_var_1, key_param);
    var left_bin_str: []const u8 = apply_sbox(s0_param, temp_var_1[@as(usize, @intCast(0))..@min(@as(usize, @intCast(4)), @as(usize, @intCast(temp_var_1.len)))]);
    left_bin_str = left_bin_str;
    var right_bin_str: []const u8 = apply_sbox(s1_param, temp_var_1[@as(usize, @intCast(4))..@min(@as(usize, @intCast(8)), @as(usize, @intCast(temp_var_1.len)))]);
    right_bin_str = right_bin_str;
    left_bin_str = pad_left(left_bin_str, 2);
    right_bin_str = pad_left(right_bin_str, 2);
    temp_var_1 = apply_table(_concat_string(left_bin_str, right_bin_str), p4_table_var);
    temp_var_1 = xor(left_var_1, temp_var_1);
    return _concat_string(temp_var_1, right_var_1);
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        temp_var_2 = apply_table(key_var, p10_table_var);
        left_var_2 = temp_var_2[@as(usize, @intCast(0))..@min(@as(usize, @intCast(5)), @as(usize, @intCast(temp_var_2.len)))];
        right_var_2 = temp_var_2[@as(usize, @intCast(5))..@min(@as(usize, @intCast(10)), @as(usize, @intCast(temp_var_2.len)))];
        left_var_2 = left_shift(left_var_2);
        right_var_2 = left_shift(right_var_2);
        key1_var = apply_table(_concat_string(left_var_2, right_var_2), p8_table_var);
        left_var_2 = left_shift(left_var_2);
        right_var_2 = left_shift(right_var_2);
        left_var_2 = left_shift(left_var_2);
        right_var_2 = left_shift(right_var_2);
        key2_var = apply_table(_concat_string(left_var_2, right_var_2), p8_table_var);
        temp_var_2 = apply_table(message_var, IP_var);
        temp_var_2 = f(expansion_var, s0_var, s1_var, key1_var, temp_var_2);
        temp_var_2 = _concat_string(temp_var_2[@as(usize, @intCast(4))..@min(@as(usize, @intCast(8)), @as(usize, @intCast(temp_var_2.len)))], temp_var_2[@as(usize, @intCast(0))..@min(@as(usize, @intCast(4)), @as(usize, @intCast(temp_var_2.len)))]);
        temp_var_2 = f(expansion_var, s0_var, s1_var, key2_var, temp_var_2);
        CT_var = apply_table(temp_var_2, IP_inv_var);
        temp_var_2 = apply_table(CT_var, IP_var);
        temp_var_2 = f(expansion_var, s0_var, s1_var, key2_var, temp_var_2);
        temp_var_2 = _concat_string(temp_var_2[@as(usize, @intCast(4))..@min(@as(usize, @intCast(8)), @as(usize, @intCast(temp_var_2.len)))], temp_var_2[@as(usize, @intCast(0))..@min(@as(usize, @intCast(4)), @as(usize, @intCast(temp_var_2.len)))]);
        temp_var_2 = f(expansion_var, s0_var, s1_var, key1_var, temp_var_2);
        PT_var = apply_table(temp_var_2, IP_inv_var);
        std.debug.print("{s}\n", .{_concat_string("Cipher text is: ", CT_var)});
        std.debug.print("{s}\n", .{_concat_string("Plain text after decypting is: ", PT_var)});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
