// Generated by Mochi Zig transpiler on 2025-08-19 09:22 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const WordSearch = struct {
    words: [][]const u8,
    width: i64,
    height: i64,
    board: [][][]const u8,
};

var seed_var_1: i64 = 123456789;

fn rand() i64 {
    seed_var_1 = @mod(seed_var_1 *% 1103515245 +% 12345, 2147483648);
    return seed_var_1;
}

fn rand_range(max: i64) i64 {
    return @mod(rand(), max);
}

fn shuffle(list_int_param: []i64) []i64 {
    var list_int_var: []i64 = list_int_param;
    list_int_var = list_int_var;
    var i: i64 = @as(i64, @intCast(list_int_var.len)) -% 1;
    i = i;
    while (i > 0) {
        const j: i64 = rand_range(i +% 1);
        const tmp: i64 = list_int_var[_idx(list_int_var.len, i)];
        list_int_var[_idx(list_int_var.len, i)] = list_int_var[_idx(list_int_var.len, j)];
        list_int_var[_idx(list_int_var.len, j)] = tmp;
        i = i -% 1;
    }
    return list_int_var;
}

fn rand_letter() []const u8 {
    const letters: []const u8 = "abcdefghijklmnopqrstuvwxyz";
    const i_1: i64 = rand_range(26);
    return letters[@as(usize, @intCast(i_1))..@min(@as(usize, @intCast(i_1 +% 1)), @as(usize, @intCast(letters.len)))];
}

fn make_word_search(words: [][]const u8, width: i64, height: i64) WordSearch {
    var board: [][][]const u8 = std.heap.page_allocator.alloc([][]const u8, 0) catch unreachable;
    board = board;
    var r: i64 = 0;
    r = r;
    while (r < height) {
        var row: [][]const u8 = std.heap.page_allocator.alloc([]const u8, 0) catch unreachable;
        row = row;
        var c: i64 = 0;
        c = c;
        while (c < width) {
            row = blk0: { var _tmp = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []const u8, row)) catch |err| handleError(err); _tmp.append(@constCast("")) catch |err| handleError(err); break :blk0 (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            c = c +% 1;
        }
        board = blk1: { var _tmp_1 = std.ArrayList([][]const u8).init(std.heap.page_allocator); _tmp_1.appendSlice(@as([]const [][]const u8, board)) catch |err| handleError(err); _tmp_1.append(row) catch |err| handleError(err); break :blk1 (_tmp_1.toOwnedSlice() catch |err| handleError(err)); };
        r = r +% 1;
    }
    return .{ .words = words, .width = width, .height = height, .board = board };
}

fn insert_dir(ws: WordSearch, word: []const u8, dr: i64, dc: i64, rows: []i64, cols: []i64) bool {
    const word_len: i64 = @as(i64, @intCast(word.len));
    var ri: i64 = 0;
    ri = ri;
    while (ri < @as(i64, @intCast(rows.len))) {
        const row_1: i64 = rows[_idx(rows.len, ri)];
        var ci: i64 = 0;
        ci = ci;
        while (ci < @as(i64, @intCast(cols.len))) {
            const col: i64 = cols[_idx(cols.len, ci)];
            const end_r: i64 = row_1 +% dr *% (word_len -% 1);
            const end_c: i64 = col +% dc *% (word_len -% 1);
            if (end_r < 0 or end_r >= ws.height or end_c < 0 or end_c >= ws.width) {
                ci = ci +% 1;
                continue;
            }
            var k: i64 = 0;
            k = k;
            var ok: bool = true;
            ok = ok;
            while (k < word_len) {
                const rr: i64 = row_1 +% dr *% k;
                const cc: i64 = col +% dc *% k;
                if (ws.board[_idx(ws.board.len, rr)][_idx(ws.board[_idx(ws.board.len, rr)].len, cc)].len != 0) {
                    ok = false;
                    break;
                }
                k = k +% 1;
            }
            if (ok) {
                k = 0;
                while (k < word_len) {
                    const rr2: i64 = row_1 +% dr *% k;
                    const cc2: i64 = col +% dc *% k;
                    var row_list: [][]const u8 = ws.board[_idx(ws.board.len, rr2)];
                    row_list = row_list;
                    row_list[_idx(row_list.len, cc2)] = word[@as(usize, @intCast(k))..@min(@as(usize, @intCast(k +% 1)), @as(usize, @intCast(word.len)))];
                    k = k +% 1;
                }
                return true;
            }
            ci = ci +% 1;
        }
        ri = ri +% 1;
    }
    return false;
}

fn generate_board(ws_1: WordSearch) void {
    const dirs_r: []i64 = blk2: { var _tmp_2 = std.ArrayList(i64).init(std.heap.page_allocator); _tmp_2.append(0 -% 1) catch unreachable; _tmp_2.append(0 -% 1) catch unreachable; _tmp_2.append(0) catch unreachable; _tmp_2.append(1) catch unreachable; _tmp_2.append(1) catch unreachable; _tmp_2.append(1) catch unreachable; _tmp_2.append(0) catch unreachable; _tmp_2.append(0 -% 1) catch unreachable; break :blk2 (_tmp_2.toOwnedSlice() catch unreachable); };
    const dirs_c: []i64 = blk3: { var _tmp_3 = std.ArrayList(i64).init(std.heap.page_allocator); _tmp_3.append(0) catch unreachable; _tmp_3.append(1) catch unreachable; _tmp_3.append(1) catch unreachable; _tmp_3.append(1) catch unreachable; _tmp_3.append(0) catch unreachable; _tmp_3.append(0 -% 1) catch unreachable; _tmp_3.append(0 -% 1) catch unreachable; _tmp_3.append(0 -% 1) catch unreachable; break :blk3 (_tmp_3.toOwnedSlice() catch unreachable); };
    var i_2: i64 = 0;
    i_2 = i_2;
    while (i_2 < @as(i64, @intCast(ws_1.words.len))) {
        const word_1: []const u8 = ws_1.words[_idx(ws_1.words.len, i_2)];
        var rows_1: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
        rows_1 = rows_1;
        var r_1: i64 = 0;
        r_1 = r_1;
        while (r_1 < ws_1.height) {
            rows_1 = blk4: { var _tmp_4 = std.ArrayList(i64).init(std.heap.page_allocator); _tmp_4.appendSlice(@as([]const i64, rows_1)) catch |err| handleError(err); _tmp_4.append(r_1) catch |err| handleError(err); break :blk4 (_tmp_4.toOwnedSlice() catch |err| handleError(err)); };
            r_1 = r_1 +% 1;
        }
        var cols_1: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
        cols_1 = cols_1;
        var c_1: i64 = 0;
        c_1 = c_1;
        while (c_1 < ws_1.width) {
            cols_1 = blk5: { var _tmp_5 = std.ArrayList(i64).init(std.heap.page_allocator); _tmp_5.appendSlice(@as([]const i64, cols_1)) catch |err| handleError(err); _tmp_5.append(c_1) catch |err| handleError(err); break :blk5 (_tmp_5.toOwnedSlice() catch |err| handleError(err)); };
            c_1 = c_1 +% 1;
        }
        rows_1 = shuffle(rows_1);
        cols_1 = shuffle(cols_1);
        const d: i64 = rand_range(8);
        _ = insert_dir(ws_1, word_1, dirs_r[_idx(dirs_r.len, d)], dirs_c[_idx(dirs_c.len, d)], rows_1, cols_1);
        i_2 = i_2 +% 1;
    }
}

fn visualise(ws_2: WordSearch, add_fake_chars: bool) []const u8 {
    var result: []const u8 = "";
    result = result;
    var r_2: i64 = 0;
    r_2 = r_2;
    while (r_2 < ws_2.height) {
        var c_2: i64 = 0;
        c_2 = c_2;
        while (c_2 < ws_2.width) {
            var ch: []const u8 = ws_2.board[_idx(ws_2.board.len, r_2)][_idx(ws_2.board[_idx(ws_2.board.len, r_2)].len, c_2)];
            ch = ch;
            if (ch.len == 0) {
                if (add_fake_chars) {
                    ch = rand_letter();
                } else {
                    ch = "#";
                }
            }
            result = _concat_string(_concat_string(result, ch), " ");
            c_2 = c_2 +% 1;
        }
        result = _concat_string(result, "\n");
        r_2 = r_2 +% 1;
    }
    return result;
}

fn mochi_main() void {
    const words_1: [][]const u8 = @constCast(([4][]const u8{"cat", "dog", "snake", "fish"})[0..4]);
    const ws_3: WordSearch = make_word_search(words_1, 10, 10);
    generate_board(ws_3);
    std.debug.print("{s}\n", .{visualise(ws_3, true)});
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        mochi_main();
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
