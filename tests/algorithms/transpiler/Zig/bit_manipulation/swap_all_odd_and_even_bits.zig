// Generated by Mochi Zig transpiler on 2025-08-06 21:31 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn pad_left_num(n: i64) []const u8 {
    var s: []const u8 = _str(n);
    while (@as(i64, @intCast(s.len)) < 5) {
        s = _concat_string(" ", s);
    }
    return s;
}

fn to_binary(n_1: i64) []const u8 {
    var sign: []const u8 = "";
    var num: i64 = n_1;
    if (num < 0) {
        sign = "-";
        num = 0 - num;
    }
    var bits: []const u8 = "";
    while (num > 0) {
        bits = _concat_string(_str(@mod(num, 2)), bits);
        num = @divTrunc(num - @mod(num, 2), 2);
    }
    if (bits.len == 0) {
        bits = "0";
    }
    const min_width: i64 = 8;
    while (@as(i64, @intCast(bits.len)) < min_width - @as(i64, @intCast(sign.len))) {
        bits = _concat_string("0", bits);
    }
    return _concat_string(sign, bits);
}

fn show_bits(before: i64, after: i64) []const u8 {
    return _concat_string(_concat_string(_concat_string(_concat_string(_concat_string(_concat_string(pad_left_num(before), ": "), to_binary(before)), "\n"), pad_left_num(after)), ": "), to_binary(after));
}

fn lshift(num: i64, k: i64) i64 {
    var result: i64 = num;
    var i: i64 = 0;
    while (i < k) {
        result = result * 2;
        i = i + 1;
    }
    return result;
}

fn rshift(num_1: i64, k_1: i64) i64 {
    var result: i64 = num_1;
    var i: i64 = 0;
    while (i < k_1) {
        result = @divTrunc(result - @mod(result, 2), 2);
        i = i + 1;
    }
    return result;
}

fn swap_odd_even_bits(num_2: i64) i64 {
    var n_2: i64 = num_2;
    if (n_2 < 0) {
        n_2 = n_2 + 4294967296;
    }
    var result: i64 = 0;
    var i: i64 = 0;
    while (i < 32) {
        const bit1: i64 = @mod(rshift(n_2, i), 2);
        const bit2: i64 = @mod(rshift(n_2, i + 1), 2);
        result = result + lshift(bit1, i + 1) + lshift(bit2, i);
        i = i + 2;
    }
    return result;
}

fn mochi_main() void {
    const nums: []i64 = blk0: { var _tmp0 = std.heap.page_allocator.alloc(i64, 8) catch unreachable; _tmp0[0] = 0 - 1; _tmp0[1] = 0; _tmp0[2] = 1; _tmp0[3] = 2; _tmp0[4] = 3; _tmp0[5] = 4; _tmp0[6] = 23; _tmp0[7] = 24; break :blk0 _tmp0; };
    var i: i64 = 0;
    while (i < @as(i64, @intCast(nums.len))) {
        const n_2: i64 = nums[@as(usize, @intCast(i))];
        std.debug.print("{s}\n", .{show_bits(n_2, swap_odd_even_bits(n_2))});
        std.debug.print("{s}\n", .{""});
        i = i + 1;
    }
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        mochi_main();
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    if (info == .Pointer and info.Pointer.size == .Slice) {
        var out = std.ArrayList(u8).init(std.heap.page_allocator);
        defer out.deinit();
        out.append('[') catch unreachable;
        for (v, 0..) |e, i| {
            if (i != 0) { out.append(' ') catch unreachable; }
            const s = _str(e);
            out.appendSlice(s) catch unreachable;
        }
        out.append(']') catch unreachable;
        return out.toOwnedSlice() catch unreachable;
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * std.mem.page_size;
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
