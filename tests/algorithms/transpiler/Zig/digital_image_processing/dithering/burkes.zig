// Generated by Mochi Zig transpiler on 2025-08-24 22:16 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn get_greyscale(blue: i64, green: i64, red: i64) i64 {
    const b: f64 = @as(f64, @floatFromInt(blue));
    const g: f64 = @as(f64, @floatFromInt(green));
    const r: f64 = @as(f64, @floatFromInt(red));
    return @as(i64, @intFromFloat(0.114000000000000004 * b + 0.586999999999999966 * g + 0.298999999999999988 * r));
}

fn zeros(h: i64, w: i64) [][]i64 {
    var table: [][]i64 = std.heap.page_allocator.alloc([]i64, 0) catch unreachable;
    table = table;
    var i: i64 = 0;
    i = i;
    while (i < h) {
        var row: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
        row = row;
        var j: i64 = 0;
        j = j;
        while (j < w) {
            row = blk0: { var _tmp = std.ArrayList(i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp.appendSlice(@as([]const i64, row)) catch |err| handleError(err); _tmp.append(0) catch |err| handleError(err); break :blk0 (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            j = j +% 1;
        }
        table = blk1: { var _tmp_1 = std.ArrayList([]i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_1.appendSlice(@as([]const []i64, table)) catch |err| handleError(err); _tmp_1.append(row) catch |err| handleError(err); break :blk1 (_tmp_1.toOwnedSlice() catch |err| handleError(err)); };
        i = i +% 1;
    }
    return table;
}

fn burkes_dither(img: [][][]i64, threshold: i64) [][]i64 {
    const height: i64 = @as(i64, @intCast(img.len));
    const width: i64 = @as(i64, @intCast(img[_idx(img.len, 0)].len));
    const error_table: [][]i64 = zeros(height +% 1, width +% 4);
    var output: [][]i64 = std.heap.page_allocator.alloc([]i64, 0) catch unreachable;
    output = output;
    var y: i64 = 0;
    y = y;
    while (y < height) {
        var row_1: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
        row_1 = row_1;
        var x: i64 = 0;
        x = x;
        while (x < width) {
            const px: []i64 = img[_idx(img.len, y)][_idx(img[_idx(img.len, y)].len, x)];
            const grey: i64 = get_greyscale(px[_idx(px.len, 0)], px[_idx(px.len, 1)], px[_idx(px.len, 2)]);
            const total: i64 = grey +% error_table[_idx(error_table.len, y)][_idx(error_table[_idx(error_table.len, y)].len, x +% 2)];
            var new_val: i64 = 0;
            new_val = new_val;
            var current_error: i64 = 0;
            current_error = current_error;
            if (threshold > total) {
                new_val = 0;
                current_error = total;
            } else {
                new_val = 255;
                current_error = total -% 255;
            }
            row_1 = blk2: { var _tmp_2 = std.ArrayList(i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_2.appendSlice(@as([]const i64, row_1)) catch |err| handleError(err); _tmp_2.append(new_val) catch |err| handleError(err); break :blk2 (_tmp_2.toOwnedSlice() catch |err| handleError(err)); };
            error_table[_idx(error_table.len, y)][_idx(error_table[_idx(error_table.len, y)].len, x +% 3)] = error_table[_idx(error_table.len, y)][_idx(error_table[_idx(error_table.len, y)].len, x +% 3)] +% @divTrunc(8 *% current_error, 32);
            error_table[_idx(error_table.len, y)][_idx(error_table[_idx(error_table.len, y)].len, x +% 4)] = error_table[_idx(error_table.len, y)][_idx(error_table[_idx(error_table.len, y)].len, x +% 4)] +% @divTrunc(4 *% current_error, 32);
            error_table[_idx(error_table.len, y +% 1)][_idx(error_table[_idx(error_table.len, y +% 1)].len, x +% 2)] = error_table[_idx(error_table.len, y +% 1)][_idx(error_table[_idx(error_table.len, y +% 1)].len, x +% 2)] +% @divTrunc(8 *% current_error, 32);
            error_table[_idx(error_table.len, y +% 1)][_idx(error_table[_idx(error_table.len, y +% 1)].len, x +% 3)] = error_table[_idx(error_table.len, y +% 1)][_idx(error_table[_idx(error_table.len, y +% 1)].len, x +% 3)] +% @divTrunc(4 *% current_error, 32);
            error_table[_idx(error_table.len, y +% 1)][_idx(error_table[_idx(error_table.len, y +% 1)].len, x +% 4)] = error_table[_idx(error_table.len, y +% 1)][_idx(error_table[_idx(error_table.len, y +% 1)].len, x +% 4)] +% @divTrunc(2 *% current_error, 32);
            error_table[_idx(error_table.len, y +% 1)][_idx(error_table[_idx(error_table.len, y +% 1)].len, x +% 1)] = error_table[_idx(error_table.len, y +% 1)][_idx(error_table[_idx(error_table.len, y +% 1)].len, x +% 1)] +% @divTrunc(4 *% current_error, 32);
            error_table[_idx(error_table.len, y +% 1)][_idx(error_table[_idx(error_table.len, y +% 1)].len, x)] = error_table[_idx(error_table.len, y +% 1)][_idx(error_table[_idx(error_table.len, y +% 1)].len, x)] +% @divTrunc(2 *% current_error, 32);
            x = x +% 1;
        }
        output = blk3: { var _tmp_3 = std.ArrayList([]i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_3.appendSlice(@as([]const []i64, output)) catch |err| handleError(err); _tmp_3.append(row_1) catch |err| handleError(err); break :blk3 (_tmp_3.toOwnedSlice() catch |err| handleError(err)); };
        y = y +% 1;
    }
    return output;
}

fn mochi_main() void {
    const img_1: [][][]i64 = blk4: { var _tmp_4 = [4][][]i64{[4][]i64{[3]i64{0, 0, 0}, [3]i64{64, 64, 64}, [3]i64{128, 128, 128}, [3]i64{192, 192, 192}}, [4][]i64{[3]i64{255, 255, 255}, [3]i64{200, 200, 200}, [3]i64{150, 150, 150}, [3]i64{100, 100, 100}}, [4][]i64{[3]i64{30, 144, 255}, [3]i64{255, 0, 0}, [3]i64{0, 255, 0}, [3]i64{0, 0, 255}}, [4][]i64{[3]i64{50, 100, 150}, [3]i64{80, 160, 240}, [3]i64{70, 140, 210}, [3]i64{60, 120, 180}}}; break :blk4 _tmp_4[0..]; };
    const result: [][]i64 = burkes_dither(img_1, 128);
    var y_1: i64 = 0;
    y_1 = y_1;
    while (y_1 < @as(i64, @intCast(result.len))) {
        var line: []const u8 = "";
        line = line;
        var x_1: i64 = 0;
        x_1 = x_1;
        while (x_1 < @as(i64, @intCast(result[_idx(result.len, y_1)].len))) {
            line = _concat_string(line, _str(result[_idx(result.len, y_1)][_idx(result[_idx(result.len, y_1)].len, x_1)]));
            if (x_1 < @as(i64, @intCast(result[_idx(result.len, y_1)].len)) -% 1) {
                line = _concat_string(line, " ");
            }
            x_1 = x_1 +% 1;
        }
        std.debug.print("{s}\n", .{line});
        y_1 = y_1 +% 1;
    }
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        mochi_main();
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
