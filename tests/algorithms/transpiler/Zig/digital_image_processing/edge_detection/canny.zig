// Generated by Mochi Zig transpiler on 2025-08-24 22:16 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const PI_var: f64 = 3.14159265358979312;
const GAUSSIAN_KERNEL_var: [][]f64 = &[_][]f64{};
var SOBEL_GX_var: [][]f64 = &[_][]f64{};
var SOBEL_GY_var: [][]f64 = &[_][]f64{};
const image_var: [][]f64 = &[_][]f64{};
var edges_var: [][]f64 = &[_][]f64{};

fn sqrtApprox(x: f64) f64 {
    var guess: f64 = x / 2.0;
    guess = guess;
    var i: i64 = 0;
    i = i;
    while (i < 20) {
        guess = (guess + x / guess) / 2.0;
        i = i +% 1;
    }
    return guess;
}

fn atanApprox(x_1: f64) f64 {
    if (x_1 > 1.0) {
        return PI_var / 2.0 - x_1 / (x_1 * x_1 + 0.280000000000000027);
    }
    if (x_1 < @as(f64, @floatFromInt(0)) - 1.0) {
        return (@as(f64, @floatFromInt(0)) - PI_var) / 2.0 - x_1 / (x_1 * x_1 + 0.280000000000000027);
    }
    return x_1 / (1.0 + 0.280000000000000027 * x_1 * x_1);
}

fn atan2Approx(y: f64, x_2: f64) f64 {
    if (x_2 > 0.0) {
        const r: f64 = atanApprox(y / x_2);
        return r;
    }
    if (x_2 < 0.0) {
        if (y >= 0.0) {
            return atanApprox(y / x_2) + PI_var;
        }
        return atanApprox(y / x_2) - PI_var;
    }
    if (y > 0.0) {
        return PI_var / 2.0;
    }
    if (y < 0.0) {
        return (@as(f64, @floatFromInt(0)) - PI_var) / 2.0;
    }
    return 0.0;
}

fn deg(rad: f64) f64 {
    return rad * 180.0 / PI_var;
}

fn zero_matrix(h: i64, w: i64) [][]f64 {
    var out: [][]f64 = std.heap.page_allocator.alloc([]f64, 0) catch unreachable;
    out = out;
    var i_1: i64 = 0;
    i_1 = i_1;
    while (i_1 < h) {
        var row: []f64 = std.heap.page_allocator.alloc(f64, 0) catch unreachable;
        row = row;
        var j: i64 = 0;
        j = j;
        while (j < w) {
            row = blk0: { var _tmp = std.ArrayList(f64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp.appendSlice(@as([]const f64, row)) catch |err| handleError(err); _tmp.append(0.0) catch |err| handleError(err); break :blk0 (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            j = j +% 1;
        }
        out = blk1: { var _tmp_1 = std.ArrayList([]f64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_1.appendSlice(@as([]const []f64, out)) catch |err| handleError(err); _tmp_1.append(row) catch |err| handleError(err); break :blk1 (_tmp_1.toOwnedSlice() catch |err| handleError(err)); };
        i_1 = i_1 +% 1;
    }
    return out;
}

fn convolve(img: [][]f64, kernel: [][]f64) [][]f64 {
    const h_1: i64 = @as(i64, @intCast(img.len));
    const w_1: i64 = @as(i64, @intCast(img[_idx(img.len, 0)].len));
    const k: i64 = @as(i64, @intCast(kernel.len));
    const pad: i64 = @divTrunc(k, 2);
    var out_1: [][]f64 = zero_matrix(h_1, w_1);
    out_1 = out_1;
    var y_1: i64 = pad;
    y_1 = y_1;
    while (y_1 < h_1 -% pad) {
        var x_3: i64 = pad;
        x_3 = x_3;
        while (x_3 < w_1 -% pad) {
            var sum: f64 = 0.0;
            sum = sum;
            var ky: i64 = 0;
            ky = ky;
            while (ky < k) {
                var kx: i64 = 0;
                kx = kx;
                while (kx < k) {
                    const pixel: f64 = img[_idx(img.len, y_1 -% pad +% ky)][_idx(img[_idx(img.len, y_1 -% pad +% ky)].len, x_3 -% pad +% kx)];
                    const weight: f64 = kernel[_idx(kernel.len, ky)][_idx(kernel[_idx(kernel.len, ky)].len, kx)];
                    sum = sum + pixel * weight;
                    kx = kx +% 1;
                }
                ky = ky +% 1;
            }
            out_1[_idx(out_1.len, y_1)][_idx(out_1[_idx(out_1.len, y_1)].len, x_3)] = sum;
            x_3 = x_3 +% 1;
        }
        y_1 = y_1 +% 1;
    }
    return out_1;
}

fn gaussian_blur(img_1: [][]f64) [][]f64 {
    return convolve(img_1, GAUSSIAN_KERNEL_var);
}

fn sobel_filter(img_2: [][]f64) std.StringHashMap([][]f64) {
    const gx: [][]f64 = convolve(img_2, SOBEL_GX_var);
    const gy: [][]f64 = convolve(img_2, SOBEL_GY_var);
    const h_2: i64 = @as(i64, @intCast(img_2.len));
    const w_2: i64 = @as(i64, @intCast(img_2[_idx(img_2.len, 0)].len));
    var grad: [][]f64 = zero_matrix(h_2, w_2);
    grad = grad;
    var dir: [][]f64 = zero_matrix(h_2, w_2);
    dir = dir;
    var i_2: i64 = 0;
    i_2 = i_2;
    while (i_2 < h_2) {
        var j_1: i64 = 0;
        j_1 = j_1;
        while (j_1 < w_2) {
            const gxx: f64 = gx[_idx(gx.len, i_2)][_idx(gx[_idx(gx.len, i_2)].len, j_1)];
            const gyy: f64 = gy[_idx(gy.len, i_2)][_idx(gy[_idx(gy.len, i_2)].len, j_1)];
            grad[_idx(grad.len, i_2)][_idx(grad[_idx(grad.len, i_2)].len, j_1)] = sqrtApprox(gxx * gxx + gyy * gyy);
            dir[_idx(dir.len, i_2)][_idx(dir[_idx(dir.len, i_2)].len, j_1)] = deg(atan2Approx(gyy, gxx)) + 180.0;
            j_1 = j_1 +% 1;
        }
        i_2 = i_2 +% 1;
    }
    return blk2: { var m = std.StringHashMap([][]f64).init(std.heap.page_allocator); m.put("grad", grad) catch unreachable; m.put("dir", dir) catch unreachable; break :blk2 m; };
}

fn suppress_non_maximum(h_3: i64, w_3: i64, direction: [][]f64, grad_1: [][]f64) [][]f64 {
    var dest: [][]f64 = zero_matrix(h_3, w_3);
    dest = dest;
    var r_1: i64 = 1;
    r_1 = r_1;
    while (r_1 < h_3 -% 1) {
        var c: i64 = 1;
        c = c;
        while (c < w_3 -% 1) {
            const angle: f64 = direction[_idx(direction.len, r_1)][_idx(direction[_idx(direction.len, r_1)].len, c)];
            var q: f64 = 0.0;
            q = q;
            var p: f64 = 0.0;
            p = p;
            if (angle >= 0.0 and angle < 22.5 or angle >= 157.5 and angle <= 180.0 or angle >= 337.5) {
                q = grad_1[_idx(grad_1.len, r_1)][_idx(grad_1[_idx(grad_1.len, r_1)].len, c +% 1)];
                p = grad_1[_idx(grad_1.len, r_1)][_idx(grad_1[_idx(grad_1.len, r_1)].len, c -% 1)];
            } else {
                if (angle >= 22.5 and angle < 67.5 or angle >= 202.5 and angle < 247.5) {
                    q = grad_1[_idx(grad_1.len, r_1 +% 1)][_idx(grad_1[_idx(grad_1.len, r_1 +% 1)].len, c -% 1)];
                    p = grad_1[_idx(grad_1.len, r_1 -% 1)][_idx(grad_1[_idx(grad_1.len, r_1 -% 1)].len, c +% 1)];
                } else {
                    if (angle >= 67.5 and angle < 112.5 or angle >= 247.5 and angle < 292.5) {
                        q = grad_1[_idx(grad_1.len, r_1 +% 1)][_idx(grad_1[_idx(grad_1.len, r_1 +% 1)].len, c)];
                        p = grad_1[_idx(grad_1.len, r_1 -% 1)][_idx(grad_1[_idx(grad_1.len, r_1 -% 1)].len, c)];
                    } else {
                        q = grad_1[_idx(grad_1.len, r_1 -% 1)][_idx(grad_1[_idx(grad_1.len, r_1 -% 1)].len, c -% 1)];
                        p = grad_1[_idx(grad_1.len, r_1 +% 1)][_idx(grad_1[_idx(grad_1.len, r_1 +% 1)].len, c +% 1)];
                    }
                }
            }
            if (grad_1[_idx(grad_1.len, r_1)][_idx(grad_1[_idx(grad_1.len, r_1)].len, c)] >= q and grad_1[_idx(grad_1.len, r_1)][_idx(grad_1[_idx(grad_1.len, r_1)].len, c)] >= p) {
                dest[_idx(dest.len, r_1)][_idx(dest[_idx(dest.len, r_1)].len, c)] = grad_1[_idx(grad_1.len, r_1)][_idx(grad_1[_idx(grad_1.len, r_1)].len, c)];
            }
            c = c +% 1;
        }
        r_1 = r_1 +% 1;
    }
    return dest;
}

fn double_threshold(h_4: i64, w_4: i64, img_param: [][]f64, low: f64, high: f64, weak: f64, strong: f64) void {
    var img_var: [][]f64 = img_param;
    img_var = img_var;
    var r_2: i64 = 0;
    r_2 = r_2;
    while (r_2 < h_4) {
        var c_1: i64 = 0;
        c_1 = c_1;
        while (c_1 < w_4) {
            const v: f64 = img_var[_idx(img_var.len, r_2)][_idx(img_var[_idx(img_var.len, r_2)].len, c_1)];
            if (v >= high) {
                img_var[_idx(img_var.len, r_2)][_idx(img_var[_idx(img_var.len, r_2)].len, c_1)] = strong;
            } else {
                if (v < low) {
                    img_var[_idx(img_var.len, r_2)][_idx(img_var[_idx(img_var.len, r_2)].len, c_1)] = 0.0;
                } else {
                    img_var[_idx(img_var.len, r_2)][_idx(img_var[_idx(img_var.len, r_2)].len, c_1)] = weak;
                }
            }
            c_1 = c_1 +% 1;
        }
        r_2 = r_2 +% 1;
    }
}

fn track_edge(h_5: i64, w_5: i64, img_param_1: [][]f64, weak_1: f64, strong_1: f64) void {
    var img_var_1: [][]f64 = img_param_1;
    img_var_1 = img_var_1;
    var r_3: i64 = 1;
    r_3 = r_3;
    while (r_3 < h_5 -% 1) {
        var c_2: i64 = 1;
        c_2 = c_2;
        while (c_2 < w_5 -% 1) {
            if (std.math.approxEqAbs(f64, img_var_1[_idx(img_var_1.len, r_3)][_idx(img_var_1[_idx(img_var_1.len, r_3)].len, c_2)], weak_1, 1e-6)) {
                if (std.math.approxEqAbs(f64, img_var_1[_idx(img_var_1.len, r_3 +% 1)][_idx(img_var_1[_idx(img_var_1.len, r_3 +% 1)].len, c_2)], strong_1, 1e-6) or std.math.approxEqAbs(f64, img_var_1[_idx(img_var_1.len, r_3 -% 1)][_idx(img_var_1[_idx(img_var_1.len, r_3 -% 1)].len, c_2)], strong_1, 1e-6) or std.math.approxEqAbs(f64, img_var_1[_idx(img_var_1.len, r_3)][_idx(img_var_1[_idx(img_var_1.len, r_3)].len, c_2 +% 1)], strong_1, 1e-6) or std.math.approxEqAbs(f64, img_var_1[_idx(img_var_1.len, r_3)][_idx(img_var_1[_idx(img_var_1.len, r_3)].len, c_2 -% 1)], strong_1, 1e-6) or std.math.approxEqAbs(f64, img_var_1[_idx(img_var_1.len, r_3 -% 1)][_idx(img_var_1[_idx(img_var_1.len, r_3 -% 1)].len, c_2 -% 1)], strong_1, 1e-6) or std.math.approxEqAbs(f64, img_var_1[_idx(img_var_1.len, r_3 -% 1)][_idx(img_var_1[_idx(img_var_1.len, r_3 -% 1)].len, c_2 +% 1)], strong_1, 1e-6) or std.math.approxEqAbs(f64, img_var_1[_idx(img_var_1.len, r_3 +% 1)][_idx(img_var_1[_idx(img_var_1.len, r_3 +% 1)].len, c_2 -% 1)], strong_1, 1e-6) or std.math.approxEqAbs(f64, img_var_1[_idx(img_var_1.len, r_3 +% 1)][_idx(img_var_1[_idx(img_var_1.len, r_3 +% 1)].len, c_2 +% 1)], strong_1, 1e-6)) {
                    img_var_1[_idx(img_var_1.len, r_3)][_idx(img_var_1[_idx(img_var_1.len, r_3)].len, c_2)] = strong_1;
                } else {
                    img_var_1[_idx(img_var_1.len, r_3)][_idx(img_var_1[_idx(img_var_1.len, r_3)].len, c_2)] = 0.0;
                }
            }
            c_2 = c_2 +% 1;
        }
        r_3 = r_3 +% 1;
    }
}

fn canny(image_param: [][]f64, low_1: f64, high_1: f64, weak_2: f64, strong_2: f64) [][]f64 {
    const blurred: [][]f64 = gaussian_blur(image_param);
    var sob: std.StringHashMap([][]f64) = sobel_filter(blurred);
    sob = sob;
    const grad_2: [][]f64 = (blk3: { if (sob.get("grad")) |v| { break :blk3 v; } break :blk3 0; });
    const direction_1: [][]f64 = (blk4: { if (sob.get("dir")) |v| { break :blk4 v; } break :blk4 0; });
    const h_6: i64 = @as(i64, @intCast(image_param.len));
    const w_6: i64 = @as(i64, @intCast(image_param[_idx(image_param.len, 0)].len));
    const suppressed: [][]f64 = suppress_non_maximum(h_6, w_6, direction_1, grad_2);
    double_threshold(h_6, w_6, suppressed, low_1, high_1, weak_2, strong_2);
    track_edge(h_6, w_6, suppressed, weak_2, strong_2);
    return suppressed;
}

fn print_image(img_3: [][]f64) void {
    var r_4: i64 = 0;
    r_4 = r_4;
    while (r_4 < @as(i64, @intCast(img_3.len))) {
        var c_3: i64 = 0;
        c_3 = c_3;
        var line: []const u8 = "";
        line = line;
        while (c_3 < @as(i64, @intCast(img_3[_idx(img_3.len, r_4)].len))) {
            line = _concat_string(_concat_string(line, _str(@as(i64, @intFromFloat(img_3[_idx(img_3.len, r_4)][_idx(img_3[_idx(img_3.len, r_4)].len, c_3)])))), " ");
            c_3 = c_3 +% 1;
        }
        std.debug.print("{s}\n", .{line});
        r_4 = r_4 +% 1;
    }
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        SOBEL_GX_var = std.heap.page_allocator.dupe([]f64, blk5: { var _tmp_2 = std.ArrayList([]f64).init(std.heap.page_allocator); _tmp_2.append(@constCast(blk6: { var _tmp_3 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_3.append(@as(f64, @floatFromInt(0)) - 1.0) catch unreachable; _tmp_3.append(0.0) catch unreachable; _tmp_3.append(1.0) catch unreachable; break :blk6 (_tmp_3.toOwnedSlice() catch unreachable); })) catch unreachable; _tmp_2.append(@constCast(blk7: { var _tmp_4 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_4.append(@as(f64, @floatFromInt(0)) - 2.0) catch unreachable; _tmp_4.append(0.0) catch unreachable; _tmp_4.append(2.0) catch unreachable; break :blk7 (_tmp_4.toOwnedSlice() catch unreachable); })) catch unreachable; _tmp_2.append(@constCast(blk8: { var _tmp_5 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_5.append(@as(f64, @floatFromInt(0)) - 1.0) catch unreachable; _tmp_5.append(0.0) catch unreachable; _tmp_5.append(1.0) catch unreachable; break :blk8 (_tmp_5.toOwnedSlice() catch unreachable); })) catch unreachable; break :blk5 (_tmp_2.toOwnedSlice() catch unreachable); }) catch unreachable;
        SOBEL_GY_var = std.heap.page_allocator.dupe([]f64, blk9: { var _tmp_6 = std.ArrayList([]f64).init(std.heap.page_allocator); _tmp_6.append(@constCast(([3]f64{1.0, 2.0, 1.0})[0..3])) catch unreachable; _tmp_6.append(@constCast(([3]f64{0.0, 0.0, 0.0})[0..3])) catch unreachable; _tmp_6.append(@constCast(blk10: { var _tmp_7 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_7.append(@as(f64, @floatFromInt(0)) - 1.0) catch unreachable; _tmp_7.append(@as(f64, @floatFromInt(0)) - 2.0) catch unreachable; _tmp_7.append(@as(f64, @floatFromInt(0)) - 1.0) catch unreachable; break :blk10 (_tmp_7.toOwnedSlice() catch unreachable); })) catch unreachable; break :blk9 (_tmp_6.toOwnedSlice() catch unreachable); }) catch unreachable;
        edges_var = canny(image_var, 20.0, 40.0, 128.0, 255.0);
        print_image(edges_var);
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
