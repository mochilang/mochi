// Generated by Mochi Zig transpiler on 2025-08-24 22:16 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const image_var: [][]i64 = &[_][]i64{};
var laplace_kernel_var: [][]i64 = &[_][]i64{};
var result_var: [][]i64 = &[_][]i64{};

fn pad_edge(image_param: [][]i64, pad_size: i64) [][]i64 {
    const height: i64 = @as(i64, @intCast(image_param.len));
    const width: i64 = @as(i64, @intCast(image_param[_idx(image_param.len, 0)].len));
    const new_height: i64 = height +% pad_size *% 2;
    const new_width: i64 = width +% pad_size *% 2;
    var padded: [][]i64 = std.heap.page_allocator.alloc([]i64, 0) catch unreachable;
    padded = padded;
    var i: i64 = 0;
    i = i;
    while (i < new_height) {
        var row: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
        row = row;
        var src_i: i64 = i;
        src_i = src_i;
        if (src_i < pad_size) {
            src_i = 0;
        }
        if (src_i >= height +% pad_size) {
            src_i = height -% 1;
        } else {
            src_i = src_i -% pad_size;
        }
        var j: i64 = 0;
        j = j;
        while (j < new_width) {
            var src_j: i64 = j;
            src_j = src_j;
            if (src_j < pad_size) {
                src_j = 0;
            }
            if (src_j >= width +% pad_size) {
                src_j = width -% 1;
            } else {
                src_j = src_j -% pad_size;
            }
            row = blk0: { var _tmp = std.ArrayList(i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp.appendSlice(@as([]const i64, row)) catch |err| handleError(err); _tmp.append(image_param[_idx(image_param.len, src_i)][_idx(image_param[_idx(image_param.len, src_i)].len, src_j)]) catch |err| handleError(err); break :blk0 (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            j = j +% 1;
        }
        padded = blk1: { var _tmp_1 = std.ArrayList([]i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_1.appendSlice(@as([]const []i64, padded)) catch |err| handleError(err); _tmp_1.append(row) catch |err| handleError(err); break :blk1 (_tmp_1.toOwnedSlice() catch |err| handleError(err)); };
        i = i +% 1;
    }
    return padded;
}

fn im2col(image_param_1: [][]i64, block_h: i64, block_w: i64) [][]i64 {
    const rows: i64 = @as(i64, @intCast(image_param_1.len));
    const cols: i64 = @as(i64, @intCast(image_param_1[_idx(image_param_1.len, 0)].len));
    const dst_height: i64 = rows -% block_h +% 1;
    const dst_width: i64 = cols -% block_w +% 1;
    var image_array: [][]i64 = std.heap.page_allocator.alloc([]i64, 0) catch unreachable;
    image_array = image_array;
    var i_1: i64 = 0;
    i_1 = i_1;
    while (i_1 < dst_height) {
        var j_1: i64 = 0;
        j_1 = j_1;
        while (j_1 < dst_width) {
            var window: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
            window = window;
            var bi: i64 = 0;
            bi = bi;
            while (bi < block_h) {
                var bj: i64 = 0;
                bj = bj;
                while (bj < block_w) {
                    window = blk2: { var _tmp_2 = std.ArrayList(i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_2.appendSlice(@as([]const i64, window)) catch |err| handleError(err); _tmp_2.append(image_param_1[_idx(image_param_1.len, i_1 +% bi)][_idx(image_param_1[_idx(image_param_1.len, i_1 +% bi)].len, j_1 +% bj)]) catch |err| handleError(err); break :blk2 (_tmp_2.toOwnedSlice() catch |err| handleError(err)); };
                    bj = bj +% 1;
                }
                bi = bi +% 1;
            }
            image_array = blk3: { var _tmp_3 = std.ArrayList([]i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_3.appendSlice(@as([]const []i64, image_array)) catch |err| handleError(err); _tmp_3.append(window) catch |err| handleError(err); break :blk3 (_tmp_3.toOwnedSlice() catch |err| handleError(err)); };
            j_1 = j_1 +% 1;
        }
        i_1 = i_1 +% 1;
    }
    return image_array;
}

fn flatten(matrix: [][]i64) []i64 {
    var out: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    out = out;
    var i_2: i64 = 0;
    i_2 = i_2;
    while (i_2 < @as(i64, @intCast(matrix.len))) {
        var j_2: i64 = 0;
        j_2 = j_2;
        while (j_2 < @as(i64, @intCast(matrix[_idx(matrix.len, i_2)].len))) {
            out = blk4: { var _tmp_4 = std.ArrayList(i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_4.appendSlice(@as([]const i64, out)) catch |err| handleError(err); _tmp_4.append(matrix[_idx(matrix.len, i_2)][_idx(matrix[_idx(matrix.len, i_2)].len, j_2)]) catch |err| handleError(err); break :blk4 (_tmp_4.toOwnedSlice() catch |err| handleError(err)); };
            j_2 = j_2 +% 1;
        }
        i_2 = i_2 +% 1;
    }
    return out;
}

fn dot(a: []i64, b: []i64) i64 {
    var sum: i64 = 0;
    sum = sum;
    var i_3: i64 = 0;
    i_3 = i_3;
    while (i_3 < @as(i64, @intCast(a.len))) {
        sum = sum +% a[_idx(a.len, i_3)] *% b[_idx(b.len, i_3)];
        i_3 = i_3 +% 1;
    }
    return sum;
}

fn img_convolve(image_param_2: [][]i64, kernel: [][]i64) [][]i64 {
    const height_1: i64 = @as(i64, @intCast(image_param_2.len));
    const width_1: i64 = @as(i64, @intCast(image_param_2[_idx(image_param_2.len, 0)].len));
    const k_size: i64 = @as(i64, @intCast(kernel.len));
    const pad_size_1: i64 = @divTrunc(k_size, 2);
    const padded_1: [][]i64 = pad_edge(image_param_2, pad_size_1);
    const image_array_1: [][]i64 = im2col(padded_1, k_size, k_size);
    const kernel_flat: []i64 = flatten(kernel);
    var dst: [][]i64 = std.heap.page_allocator.alloc([]i64, 0) catch unreachable;
    dst = dst;
    var idx: i64 = 0;
    idx = idx;
    var i_4: i64 = 0;
    i_4 = i_4;
    while (i_4 < height_1) {
        var row_1: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
        row_1 = row_1;
        var j_3: i64 = 0;
        j_3 = j_3;
        while (j_3 < width_1) {
            const val: i64 = dot(image_array_1[_idx(image_array_1.len, idx)], kernel_flat);
            row_1 = blk5: { var _tmp_5 = std.ArrayList(i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_5.appendSlice(@as([]const i64, row_1)) catch |err| handleError(err); _tmp_5.append(val) catch |err| handleError(err); break :blk5 (_tmp_5.toOwnedSlice() catch |err| handleError(err)); };
            idx = idx +% 1;
            j_3 = j_3 +% 1;
        }
        dst = blk6: { var _tmp_6 = std.ArrayList([]i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_6.appendSlice(@as([]const []i64, dst)) catch |err| handleError(err); _tmp_6.append(row_1) catch |err| handleError(err); break :blk6 (_tmp_6.toOwnedSlice() catch |err| handleError(err)); };
        i_4 = i_4 +% 1;
    }
    return dst;
}

fn print_matrix(m: [][]i64) void {
    var i_5: i64 = 0;
    i_5 = i_5;
    while (i_5 < @as(i64, @intCast(m.len))) {
        var line: []const u8 = "";
        line = line;
        var j_4: i64 = 0;
        j_4 = j_4;
        while (j_4 < @as(i64, @intCast(m[_idx(m.len, i_5)].len))) {
            if (j_4 > 0) {
                line = _concat_string(line, " ");
            }
            line = _concat_string(line, _str(m[_idx(m.len, i_5)][_idx(m[_idx(m.len, i_5)].len, j_4)]));
            j_4 = j_4 +% 1;
        }
        std.debug.print("{s}\n", .{line});
        i_5 = i_5 +% 1;
    }
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        laplace_kernel_var = std.heap.page_allocator.dupe([]i64, blk7: { var _tmp_7 = std.ArrayList([]i64).init(std.heap.page_allocator); _tmp_7.append(@constCast(([3]i64{0, 1, 0})[0..3])) catch unreachable; _tmp_7.append(@constCast(blk8: { var _tmp_8 = std.ArrayList(i64).init(std.heap.page_allocator); _tmp_8.append(1) catch unreachable; _tmp_8.append(0 -% 4) catch unreachable; _tmp_8.append(1) catch unreachable; break :blk8 (_tmp_8.toOwnedSlice() catch unreachable); })) catch unreachable; _tmp_7.append(@constCast(([3]i64{0, 1, 0})[0..3])) catch unreachable; break :blk7 (_tmp_7.toOwnedSlice() catch unreachable); }) catch unreachable;
        result_var = img_convolve(image_var, laplace_kernel_var);
        print_matrix(result_var);
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
