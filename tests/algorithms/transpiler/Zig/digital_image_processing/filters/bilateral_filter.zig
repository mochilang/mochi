// Generated by Mochi Zig transpiler on 2025-08-24 22:16 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

_ = 3.14159265358979312;
const img_var: [][]f64 = &[_][]f64{};
var result_var: f64 = 0;

fn abs(x: f64) f64 {
    if (x < 0.0) {
        return @as(f64, @floatFromInt(0)) - x;
    }
    return x;
}

fn sqrtApprox(x_1: f64) f64 {
    if (x_1 <= 0.0) {
        return 0.0;
    }
    var guess: f64 = x_1;
    guess = guess;
    var i: i64 = 0;
    i = i;
    while (i < 10) {
        guess = (guess + x_1 / guess) / 2.0;
        i = i +% 1;
    }
    return guess;
}

fn expApprox(x_2: f64) f64 {
    var term: f64 = 1.0;
    term = term;
    var sum: f64 = 1.0;
    sum = sum;
    var n: i64 = 1;
    n = n;
    while (n < 10) {
        term = term * x_2 / @as(f64, @floatFromInt(n));
        sum = sum + term;
        n = n +% 1;
    }
    return sum;
}

fn vec_gaussian(mat: [][]f64, variance: f64) [][]f64 {
    var i_1: i64 = 0;
    i_1 = i_1;
    var out: [][]f64 = std.heap.page_allocator.alloc([]f64, 0) catch unreachable;
    out = out;
    while (i_1 < @as(i64, @intCast(mat.len))) {
        var row: []f64 = std.heap.page_allocator.alloc(f64, 0) catch unreachable;
        row = row;
        var j: i64 = 0;
        j = j;
        while (j < @as(i64, @intCast(mat[_idx(mat.len, i_1)].len))) {
            const v: f64 = mat[_idx(mat.len, i_1)][_idx(mat[_idx(mat.len, i_1)].len, j)];
            const e: f64 = (@as(f64, @floatFromInt(0)) - v * v) / (2.0 * variance);
            row = row + blk0: { var _tmp = std.ArrayList(f64).init(std.heap.page_allocator); _tmp.append(expApprox(e)) catch unreachable; break :blk0 (_tmp.toOwnedSlice() catch unreachable); };
            j = j +% 1;
        }
        out = out + blk1: { var _tmp_1 = std.ArrayList([]f64).init(std.heap.page_allocator); _tmp_1.append(row) catch unreachable; break :blk1 (_tmp_1.toOwnedSlice() catch unreachable); };
        i_1 = i_1 +% 1;
    }
    return out;
}

fn get_slice(img_param: [][]f64, x_3: i64, y: i64, kernel_size: i64) [][]f64 {
    const half: i64 = @divTrunc(kernel_size, 2);
    var i_2: i64 = x_3 -% half;
    i_2 = i_2;
    var slice: [][]f64 = std.heap.page_allocator.alloc([]f64, 0) catch unreachable;
    slice = slice;
    while (i_2 <= x_3 +% half) {
        var row_1: []f64 = std.heap.page_allocator.alloc(f64, 0) catch unreachable;
        row_1 = row_1;
        var j_1: i64 = y -% half;
        j_1 = j_1;
        while (j_1 <= y +% half) {
            row_1 = row_1 + blk2: { var _tmp_2 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_2.append(img_param[_idx(img_param.len, i_2)][_idx(img_param[_idx(img_param.len, i_2)].len, j_1)]) catch unreachable; break :blk2 (_tmp_2.toOwnedSlice() catch unreachable); };
            j_1 = j_1 +% 1;
        }
        slice = slice + blk3: { var _tmp_3 = std.ArrayList([]f64).init(std.heap.page_allocator); _tmp_3.append(row_1) catch unreachable; break :blk3 (_tmp_3.toOwnedSlice() catch unreachable); };
        i_2 = i_2 +% 1;
    }
    return slice;
}

fn get_gauss_kernel(kernel_size_1: i64, spatial_variance: f64) [][]f64 {
    var arr: [][]f64 = std.heap.page_allocator.alloc([]f64, 0) catch unreachable;
    arr = arr;
    var i_3: i64 = 0;
    i_3 = i_3;
    while (i_3 < kernel_size_1) {
        var row_2: []f64 = std.heap.page_allocator.alloc(f64, 0) catch unreachable;
        row_2 = row_2;
        var j_2: i64 = 0;
        j_2 = j_2;
        while (j_2 < kernel_size_1) {
            const di: f64 = @as(f64, @floatFromInt(i_3 -% @divTrunc(kernel_size_1, 2)));
            const dj: f64 = @as(f64, @floatFromInt(j_2 -% @divTrunc(kernel_size_1, 2)));
            const dist: f64 = sqrtApprox(di * di + dj * dj);
            row_2 = row_2 + blk4: { var _tmp_4 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_4.append(dist) catch unreachable; break :blk4 (_tmp_4.toOwnedSlice() catch unreachable); };
            j_2 = j_2 +% 1;
        }
        arr = arr + blk5: { var _tmp_5 = std.ArrayList([]f64).init(std.heap.page_allocator); _tmp_5.append(row_2) catch unreachable; break :blk5 (_tmp_5.toOwnedSlice() catch unreachable); };
        i_3 = i_3 +% 1;
    }
    return vec_gaussian(arr, spatial_variance);
}

fn elementwise_sub(mat_1: [][]f64, value: f64) [][]f64 {
    var res: [][]f64 = std.heap.page_allocator.alloc([]f64, 0) catch unreachable;
    res = res;
    var i_4: i64 = 0;
    i_4 = i_4;
    while (i_4 < @as(i64, @intCast(mat_1.len))) {
        var row_3: []f64 = std.heap.page_allocator.alloc(f64, 0) catch unreachable;
        row_3 = row_3;
        var j_3: i64 = 0;
        j_3 = j_3;
        while (j_3 < @as(i64, @intCast(mat_1[_idx(mat_1.len, i_4)].len))) {
            row_3 = row_3 + blk6: { var _tmp_6 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_6.append(mat_1[_idx(mat_1.len, i_4)][_idx(mat_1[_idx(mat_1.len, i_4)].len, j_3)] - value) catch unreachable; break :blk6 (_tmp_6.toOwnedSlice() catch unreachable); };
            j_3 = j_3 +% 1;
        }
        res = res + blk7: { var _tmp_7 = std.ArrayList([]f64).init(std.heap.page_allocator); _tmp_7.append(row_3) catch unreachable; break :blk7 (_tmp_7.toOwnedSlice() catch unreachable); };
        i_4 = i_4 +% 1;
    }
    return res;
}

fn elementwise_mul(a: [][]f64, b: [][]f64) [][]f64 {
    var res_1: [][]f64 = std.heap.page_allocator.alloc([]f64, 0) catch unreachable;
    res_1 = res_1;
    var i_5: i64 = 0;
    i_5 = i_5;
    while (i_5 < @as(i64, @intCast(a.len))) {
        var row_4: []f64 = std.heap.page_allocator.alloc(f64, 0) catch unreachable;
        row_4 = row_4;
        var j_4: i64 = 0;
        j_4 = j_4;
        while (j_4 < @as(i64, @intCast(a[_idx(a.len, i_5)].len))) {
            row_4 = row_4 + blk8: { var _tmp_8 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_8.append(a[_idx(a.len, i_5)][_idx(a[_idx(a.len, i_5)].len, j_4)] * b[_idx(b.len, i_5)][_idx(b[_idx(b.len, i_5)].len, j_4)]) catch unreachable; break :blk8 (_tmp_8.toOwnedSlice() catch unreachable); };
            j_4 = j_4 +% 1;
        }
        res_1 = res_1 + blk9: { var _tmp_9 = std.ArrayList([]f64).init(std.heap.page_allocator); _tmp_9.append(row_4) catch unreachable; break :blk9 (_tmp_9.toOwnedSlice() catch unreachable); };
        i_5 = i_5 +% 1;
    }
    return res_1;
}

fn matrix_sum(mat_2: [][]f64) f64 {
    var total: f64 = 0.0;
    total = total;
    var i_6: i64 = 0;
    i_6 = i_6;
    while (i_6 < @as(i64, @intCast(mat_2.len))) {
        var j_5: i64 = 0;
        j_5 = j_5;
        while (j_5 < @as(i64, @intCast(mat_2[_idx(mat_2.len, i_6)].len))) {
            total = total + mat_2[_idx(mat_2.len, i_6)][_idx(mat_2[_idx(mat_2.len, i_6)].len, j_5)];
            j_5 = j_5 +% 1;
        }
        i_6 = i_6 +% 1;
    }
    return total;
}

fn bilateral_filter(img_param_1: [][]f64, spatial_variance_1: f64, intensity_variance: f64, kernel_size_2: i64) f64 {
    const gauss_ker: [][]f64 = get_gauss_kernel(kernel_size_2, spatial_variance_1);
    const img_s: [][]f64 = img_param_1;
    const center: f64 = img_s[_idx(img_s.len, @divTrunc(kernel_size_2, 2))][_idx(img_s[_idx(img_s.len, @divTrunc(kernel_size_2, 2))].len, @divTrunc(kernel_size_2, 2))];
    const img_i: [][]f64 = elementwise_sub(img_s, center);
    const img_ig: [][]f64 = vec_gaussian(img_i, intensity_variance);
    const weights: [][]f64 = elementwise_mul(gauss_ker, img_ig);
    const vals: [][]f64 = elementwise_mul(img_s, weights);
    const sum_weights: f64 = matrix_sum(weights);
    var val: f64 = 0.0;
    val = val;
    if (!std.math.approxEqAbs(f64, sum_weights, 0.0, 1e-6)) {
        val = matrix_sum(vals) / sum_weights;
    }
    return val;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        result_var = bilateral_filter(img_var, 1.0, 1.0, 3);
        std.debug.print("{d}\n", .{result_var});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
