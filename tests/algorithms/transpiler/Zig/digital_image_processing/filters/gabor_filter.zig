// Generated by Mochi Zig transpiler on 2025-08-24 22:16 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const PI_var: f64 = 3.14159265358979312;
var kernel_var: [][]f64 = &[_][]f64{};

fn to_radians(deg: f64) f64 {
    return deg * PI_var / 180.0;
}

fn sin_taylor(x: f64) f64 {
    var term: f64 = x;
    term = term;
    var sum: f64 = x;
    sum = sum;
    var i: i64 = 1;
    i = i;
    while (i < 10) {
        const k1: f64 = 2.0 * @as(f64, @floatFromInt(i));
        const k2: f64 = k1 + 1.0;
        term = (@as(f64, @floatFromInt(0)) - term) * x * x / (k1 * k2);
        sum = sum + term;
        i = i +% 1;
    }
    return sum;
}

fn cos_taylor(x_1: f64) f64 {
    var term_1: f64 = 1.0;
    term_1 = term_1;
    var sum_1: f64 = 1.0;
    sum_1 = sum_1;
    var i_1: i64 = 1;
    i_1 = i_1;
    while (i_1 < 10) {
        const k1_1: f64 = 2.0 * @as(f64, @floatFromInt(i_1)) - 1.0;
        const k2_1: f64 = 2.0 * @as(f64, @floatFromInt(i_1));
        term_1 = (@as(f64, @floatFromInt(0)) - term_1) * x_1 * x_1 / (k1_1 * k2_1);
        sum_1 = sum_1 + term_1;
        i_1 = i_1 +% 1;
    }
    return sum_1;
}

fn exp_taylor(x_2: f64) f64 {
    var term_2: f64 = 1.0;
    term_2 = term_2;
    var sum_2: f64 = 1.0;
    sum_2 = sum_2;
    var i_2: f64 = 1.0;
    i_2 = i_2;
    while (i_2 < 20.0) {
        term_2 = term_2 * x_2 / i_2;
        sum_2 = sum_2 + term_2;
        i_2 = i_2 + 1.0;
    }
    return sum_2;
}

fn gabor_filter_kernel(ksize: i64, sigma: f64, theta: f64, lambd: f64, gamma: f64, psi: f64) [][]f64 {
    var size: i64 = ksize;
    size = size;
    if (@mod(size, 2) == 0) {
        size = size +% 1;
    }
    var gabor: [][]f64 = std.heap.page_allocator.alloc([]f64, 0) catch unreachable;
    gabor = gabor;
    var y: i64 = 0;
    y = y;
    while (y < size) {
        var row: []f64 = std.heap.page_allocator.alloc(f64, 0) catch unreachable;
        row = row;
        var x_3: i64 = 0;
        x_3 = x_3;
        while (x_3 < size) {
            const px: f64 = @as(f64, @floatFromInt(x_3 -% @divTrunc(size, 2)));
            const py: f64 = @as(f64, @floatFromInt(y -% @divTrunc(size, 2)));
            const rad: f64 = to_radians(theta);
            const cos_theta: f64 = cos_taylor(rad);
            const sin_theta: f64 = sin_taylor(rad);
            const x_rot: f64 = cos_theta * px + sin_theta * py;
            const y_rot: f64 = (@as(f64, @floatFromInt(0)) - sin_theta) * px + cos_theta * py;
            const exponent: f64 = (@as(f64, @floatFromInt(0)) - x_rot * x_rot + gamma * gamma * y_rot * y_rot) / (2.0 * sigma * sigma);
            const value: f64 = exp_taylor(exponent) * cos_taylor(2.0 * PI_var * x_rot / lambd + psi);
            row = blk0: { var _tmp = std.ArrayList(f64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp.appendSlice(@as([]const f64, row)) catch |err| handleError(err); _tmp.append(value) catch |err| handleError(err); break :blk0 (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            x_3 = x_3 +% 1;
        }
        gabor = blk1: { var _tmp_1 = std.ArrayList([]f64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_1.appendSlice(@as([]const []f64, gabor)) catch |err| handleError(err); _tmp_1.append(row) catch |err| handleError(err); break :blk1 (_tmp_1.toOwnedSlice() catch |err| handleError(err)); };
        y = y +% 1;
    }
    return gabor;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        kernel_var = gabor_filter_kernel(3, 8.0, 0.0, 10.0, 0.0, 0.0);
        std.debug.print("{s}\n", .{_str(kernel_var)});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
