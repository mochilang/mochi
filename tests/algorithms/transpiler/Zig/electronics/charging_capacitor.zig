// Generated by Mochi Zig transpiler on 2025-08-14 16:41 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn expApprox(x: f64) f64 {
    var y: f64 = x;
    y = y;
    var is_neg: bool = false;
    is_neg = is_neg;
    if (x < 0.0) {
        is_neg = true;
        y = @as(f64, @floatFromInt(0)) - x;
    }
    var term: f64 = 1.0;
    term = term;
    var sum: f64 = 1.0;
    sum = sum;
    var n: i64 = 1;
    n = n;
    while (n < 30) {
        term = term * y / @as(f64, @floatFromInt(n));
        sum = sum + term;
        n = n + 1;
    }
    if (is_neg) {
        return 1.0 / sum;
    }
    return sum;
}

fn round3(x: f64) f64 {
    var scaled: f64 = x * 1000.0;
    scaled = scaled;
    if (scaled >= 0.0) {
        scaled = scaled + 0.5;
    } else {
        scaled = scaled - 0.5;
    }
    const scaled_int: i64 = @as(i64, @intFromFloat(scaled));
    return @as(f64, @floatFromInt(scaled_int)) / 1000.0;
}

fn charging_capacitor(source_voltage: f64, resistance: f64, capacitance: f64, time_sec: f64) f64 {
    if (source_voltage <= 0.0) {
        @panic("Source voltage must be positive.");
    }
    if (resistance <= 0.0) {
        @panic("Resistance must be positive.");
    }
    if (capacitance <= 0.0) {
        @panic("Capacitance must be positive.");
    }
    const exponent: f64 = (@as(f64, @floatFromInt(0)) - time_sec) / (resistance * capacitance);
    const voltage: f64 = source_voltage * (1.0 - expApprox(exponent));
    return round3(voltage);
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        std.debug.print("{d}\n", .{charging_capacitor(0.2, 0.9, 8.4, 0.5)});
        std.debug.print("{d}\n", .{charging_capacitor(2.2, 3.5, 2.4, 9.0)});
        std.debug.print("{d}\n", .{charging_capacitor(15.0, 200.0, 20.0, 2.0)});
        std.debug.print("{d}\n", .{charging_capacitor(20.0, 2000.0, 0.0003, 4.0)});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
