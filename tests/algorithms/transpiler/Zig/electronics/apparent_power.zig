// Generated by Mochi Zig transpiler on 2025-08-13 07:12 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const PI_var: f64 = 3.141592653589793;

fn abs(x_param: f64) f64 {
    var x_var: f64 = x_param;
    x_var = x_var;
    if (x_var < 0.0) {
        return @as(f64, @floatFromInt(0)) - x_var;
    }
    return x_var;
}

fn to_radians(deg_param: f64) f64 {
    var deg_var: f64 = deg_param;
    deg_var = deg_var;
    return deg_var * PI_var / 180.0;
}

fn sin_taylor(x_param_1: f64) f64 {
    var x_var: f64 = x_param_1;
    x_var = x_var;
    var term: f64 = x_var;
    term = term;
    var sum: f64 = x_var;
    sum = sum;
    var i: i64 = 1;
    i = i;
    while (i < 10) {
        const k1: f64 = 2.0 * @as(f64, @floatFromInt(i));
        const k2: f64 = k1 + 1.0;
        term = (@as(f64, @floatFromInt(0)) - term) * x_var * x_var / (k1 * k2);
        sum = sum + term;
        i = i + 1;
    }
    return sum;
}

fn cos_taylor(x_param_2: f64) f64 {
    var x_var: f64 = x_param_2;
    x_var = x_var;
    var term: f64 = 1.0;
    term = term;
    var sum: f64 = 1.0;
    sum = sum;
    var i: i64 = 1;
    i = i;
    while (i < 10) {
        const k1: f64 = 2.0 * @as(f64, @floatFromInt(i)) - 1.0;
        const k2: f64 = 2.0 * @as(f64, @floatFromInt(i));
        term = (@as(f64, @floatFromInt(0)) - term) * x_var * x_var / (k1 * k2);
        sum = sum + term;
        i = i + 1;
    }
    return sum;
}

fn rect(mag_param: f64, angle_param: f64) []f64 {
    var mag_var: f64 = mag_param;
    mag_var = mag_var;
    var angle_var: f64 = angle_param;
    angle_var = angle_var;
    const c: f64 = cos_taylor(angle_var);
    const s: f64 = sin_taylor(angle_var);
    return blk: { var _tmp = std.ArrayList(f64).init(std.heap.page_allocator); _tmp.append(mag_var * c) catch |err| handleError(err); _tmp.append(mag_var * s) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
}

fn multiply(a_param: []f64, b_param: []f64) []f64 {
    var a_var: []f64 = a_param;
    a_var = a_var;
    var b_var: []f64 = b_param;
    b_var = b_var;
    return blk: { var _tmp = std.ArrayList(f64).init(std.heap.page_allocator); _tmp.append(a_var[_idx(a_var.len, 0)] * b_var[_idx(b_var.len, 0)] - a_var[_idx(a_var.len, 1)] * b_var[_idx(b_var.len, 1)]) catch |err| handleError(err); _tmp.append(a_var[_idx(a_var.len, 0)] * b_var[_idx(b_var.len, 1)] + a_var[_idx(a_var.len, 1)] * b_var[_idx(b_var.len, 0)]) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
}

fn apparent_power(voltage_param: f64, current_param: f64, voltage_angle_param: f64, current_angle_param: f64) []f64 {
    var voltage_var: f64 = voltage_param;
    voltage_var = voltage_var;
    var current_var: f64 = current_param;
    current_var = current_var;
    var voltage_angle_var: f64 = voltage_angle_param;
    voltage_angle_var = voltage_angle_var;
    var current_angle_var: f64 = current_angle_param;
    current_angle_var = current_angle_var;
    const vrad: f64 = to_radians(voltage_angle_var);
    const irad: f64 = to_radians(current_angle_var);
    const vrect: []f64 = rect(voltage_var, vrad);
    const irect: []f64 = rect(current_var, irad);
    const result: []f64 = multiply(vrect, irect);
    return result;
}

fn approx_equal(a_param_1: []f64, b_param_1: []f64, eps_param: f64) bool {
    var a_var: []f64 = a_param_1;
    a_var = a_var;
    var b_var: []f64 = b_param_1;
    b_var = b_var;
    var eps_var: f64 = eps_param;
    eps_var = eps_var;
    return abs(a_var[_idx(a_var.len, 0)] - b_var[_idx(b_var.len, 0)]) < eps_var and abs(a_var[_idx(a_var.len, 1)] - b_var[_idx(b_var.len, 1)]) < eps_var;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}
