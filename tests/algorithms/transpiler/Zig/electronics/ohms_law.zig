// Generated by Mochi Zig transpiler on 2025-08-14 16:41 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn ohms_law(voltage: f64, current: f64, resistance: f64) std.StringHashMap(f64) {
    var zeros: i64 = 0;
    zeros = zeros;
    if (voltage == 0.0) {
        zeros = zeros + 1;
    }
    if (current == 0.0) {
        zeros = zeros + 1;
    }
    if (resistance == 0.0) {
        zeros = zeros + 1;
    }
    if (zeros != 1) {
        std.debug.print("{s}\n", .{"One and only one argument must be 0"});
        return std.StringHashMap(f64).init(std.heap.page_allocator);
    }
    if (resistance < 0.0) {
        std.debug.print("{s}\n", .{"Resistance cannot be negative"});
        return std.StringHashMap(f64).init(std.heap.page_allocator);
    }
    if (voltage == 0.0) {
        return blk0: { var m = std.StringHashMap(f64).init(std.heap.page_allocator); m.put("voltage", current * resistance) catch unreachable; break :blk0 m; };
    }
    if (current == 0.0) {
        return blk1: { var m_1 = std.StringHashMap(f64).init(std.heap.page_allocator); m_1.put("current", voltage / resistance) catch unreachable; break :blk1 m_1; };
    }
    return blk2: { var m_2 = std.StringHashMap(f64).init(std.heap.page_allocator); m_2.put("resistance", voltage / current) catch unreachable; break :blk2 m_2; };
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        const __m = ohms_law(10.0, 0.0, 5.0);
        std.debug.print("{{", .{});
        var __it = __m.iterator();
        var __first = true;
        while (__it.next()) |entry| {
            if (!__first) std.debug.print(",", .{});
            __first = false;
            const __val = std.json.stringifyAlloc(std.heap.page_allocator, entry.value_ptr.*, .{}) catch unreachable;
            std.debug.print("\"{s}\":{s}", .{entry.key_ptr.*, __val});
            std.heap.page_allocator.free(__val);
        }
        std.debug.print("}}\n", .{});
        const __m_1 = ohms_law(@as(f64, @floatFromInt(0)) - 10.0, 1.0, 0.0);
        std.debug.print("{{", .{});
        var __it_1 = __m_1.iterator();
        var __first_1 = true;
        while (__it_1.next()) |entry| {
            if (!__first_1) std.debug.print(",", .{});
            __first_1 = false;
            const __val = std.json.stringifyAlloc(std.heap.page_allocator, entry.value_ptr.*, .{}) catch unreachable;
            std.debug.print("\"{s}\":{s}", .{entry.key_ptr.*, __val});
            std.heap.page_allocator.free(__val);
        }
        std.debug.print("}}\n", .{});
        const __m_2 = ohms_law(0.0, @as(f64, @floatFromInt(0)) - 1.5, 2.0);
        std.debug.print("{{", .{});
        var __it_2 = __m_2.iterator();
        var __first_2 = true;
        while (__it_2.next()) |entry| {
            if (!__first_2) std.debug.print(",", .{});
            __first_2 = false;
            const __val = std.json.stringifyAlloc(std.heap.page_allocator, entry.value_ptr.*, .{}) catch unreachable;
            std.debug.print("\"{s}\":{s}", .{entry.key_ptr.*, __val});
            std.heap.page_allocator.free(__val);
        }
        std.debug.print("}}\n", .{});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
