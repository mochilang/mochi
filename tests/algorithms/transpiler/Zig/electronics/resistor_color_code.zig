// Generated by Mochi Zig transpiler on 2025-08-14 16:41 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

var valid_colors_var: [][]const u8 = &[_][]const u8{};
var significant_figures_color_values_var: std.StringHashMap(i64) = std.StringHashMap(i64).init(std.heap.page_allocator);
var multiplier_color_values_var: std.StringHashMap(f64) = std.StringHashMap(f64).init(std.heap.page_allocator);
var tolerance_color_values_var: std.StringHashMap(f64) = std.StringHashMap(f64).init(std.heap.page_allocator);
var temperature_coeffecient_color_values_var: std.StringHashMap(i64) = std.StringHashMap(i64).init(std.heap.page_allocator);

fn contains(list: [][]const u8, value: []const u8) bool {
    for (list) |__it0| {
        const c = __it0;
        if (std.mem.eql(u8, c, value)) {
            return true;
        }
    }
    return false;
}

fn get_significant_digits(colors: [][]const u8) i64 {
    var digit: i64 = 0;
    digit = digit;
    for (colors) |__it1| {
        const color = __it1;
        if (!(significant_figures_color_values_var.contains(color))) {
            @panic(_concat_string(color, " is not a valid color for significant figure bands"));
        }
        digit = digit * 10 + significant_figures_color_values_var.get(color).?;
    }
    return digit;
}

fn get_multiplier(color: []const u8) f64 {
    if (!(multiplier_color_values_var.contains(color))) {
        @panic(_concat_string(color, " is not a valid color for multiplier band"));
    }
    return multiplier_color_values_var.get(color).?;
}

fn get_tolerance(color: []const u8) f64 {
    if (!(tolerance_color_values_var.contains(color))) {
        @panic(_concat_string(color, " is not a valid color for tolerance band"));
    }
    return tolerance_color_values_var.get(color).?;
}

fn get_temperature_coeffecient(color: []const u8) i64 {
    if (!(temperature_coeffecient_color_values_var.contains(color))) {
        @panic(_concat_string(color, " is not a valid color for temperature coeffecient band"));
    }
    return temperature_coeffecient_color_values_var.get(color).?;
}

fn get_band_type_count(total: i64, typ: []const u8) i64 {
    if (total == 3) {
        if (std.mem.eql(u8, typ, "significant")) {
            return 2;
        }
        if (std.mem.eql(u8, typ, "multiplier")) {
            return 1;
        }
        @panic(_concat_string(typ, " is not valid for a 3 band resistor"));
    } else {
        if (total == 4) {
            if (std.mem.eql(u8, typ, "significant")) {
                return 2;
            }
            if (std.mem.eql(u8, typ, "multiplier")) {
                return 1;
            }
            if (std.mem.eql(u8, typ, "tolerance")) {
                return 1;
            }
            @panic(_concat_string(typ, " is not valid for a 4 band resistor"));
        } else {
            if (total == 5) {
                if (std.mem.eql(u8, typ, "significant")) {
                    return 3;
                }
                if (std.mem.eql(u8, typ, "multiplier")) {
                    return 1;
                }
                if (std.mem.eql(u8, typ, "tolerance")) {
                    return 1;
                }
                @panic(_concat_string(typ, " is not valid for a 5 band resistor"));
            } else {
                if (total == 6) {
                    if (std.mem.eql(u8, typ, "significant")) {
                        return 3;
                    }
                    if (std.mem.eql(u8, typ, "multiplier")) {
                        return 1;
                    }
                    if (std.mem.eql(u8, typ, "tolerance")) {
                        return 1;
                    }
                    if (std.mem.eql(u8, typ, "temp_coeffecient")) {
                        return 1;
                    }
                    @panic(_concat_string(typ, " is not valid for a 6 band resistor"));
                } else {
                    @panic(_concat_string(_str(total), " is not a valid number of bands"));
                }
            }
        }
    }
    return 0;
}

fn check_validity(number_of_bands: i64, colors: [][]const u8) bool {
    if (number_of_bands < 3 or number_of_bands > 6) {
        @panic("Invalid number of bands. Resistor bands must be 3 to 6");
    }
    if (number_of_bands != @as(i64, @intCast(colors.len))) {
        @panic(_concat_string(_concat_string(_concat_string(_concat_string("Expecting ", _str(number_of_bands)), " colors, provided "), _str(@as(i64, @intCast(colors.len)))), " colors"));
    }
    for (colors) |__it2| {
        const color = __it2;
        if (!(contains(valid_colors_var, color))) {
            @panic(_concat_string(color, " is not a valid color"));
        }
    }
    return true;
}

fn calculate_resistance(number_of_bands: i64, color_code_list: [][]const u8) []const u8 {
    _ = check_validity(number_of_bands, color_code_list);
    const sig_count: i64 = get_band_type_count(number_of_bands, "significant");
    const significant_colors: [][]const u8 = color_code_list[@as(usize, @intCast(0))..@min(@as(usize, @intCast(sig_count)), @as(usize, @intCast(color_code_list.len)))];
    const significant_digits: i64 = get_significant_digits(significant_colors);
    const multiplier_color: []const u8 = color_code_list[_idx(color_code_list.len, sig_count)];
    const multiplier: f64 = get_multiplier(multiplier_color);
    var tolerance: f64 = 20.0;
    tolerance = tolerance;
    if (number_of_bands >= 4) {
        const tolerance_color: []const u8 = color_code_list[_idx(color_code_list.len, sig_count + 1)];
        tolerance = get_tolerance(tolerance_color);
    }
    var temp_coeff: i64 = 0;
    temp_coeff = temp_coeff;
    if (number_of_bands == 6) {
        const temp_color: []const u8 = color_code_list[_idx(color_code_list.len, sig_count + 2)];
        temp_coeff = get_temperature_coeffecient(temp_color);
    }
    const resistance_value: f64 = multiplier * @as(f64, @floatFromInt(significant_digits));
    var resistance_str: []const u8 = _str(resistance_value);
    resistance_str = resistance_str;
    if (resistance_value == @as(i64, @intFromFloat(resistance_value))) {
        resistance_str = _str(@as(i64, @intFromFloat(resistance_value)));
    }
    var answer: []const u8 = _concat_string(_concat_string(_concat_string(resistance_str, "Ω ±"), _str(tolerance)), "% ");
    answer = answer;
    if (temp_coeff != 0) {
        answer = _concat_string(_concat_string(answer, _str(temp_coeff)), " ppm/K");
    }
    return answer;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        valid_colors_var = std.heap.page_allocator.dupe([]const u8, (&([12][]const u8{"Black", "Brown", "Red", "Orange", "Yellow", "Green", "Blue", "Violet", "Grey", "White", "Gold", "Silver"}))[0..]) catch unreachable;
        significant_figures_color_values_var = blk0: { var m = std.StringHashMap(i64).init(std.heap.page_allocator); m.put("Black", 0) catch unreachable; m.put("Brown", 1) catch unreachable; m.put("Red", 2) catch unreachable; m.put("Orange", 3) catch unreachable; m.put("Yellow", 4) catch unreachable; m.put("Green", 5) catch unreachable; m.put("Blue", 6) catch unreachable; m.put("Violet", 7) catch unreachable; m.put("Grey", 8) catch unreachable; m.put("White", 9) catch unreachable; break :blk0 m; };
        multiplier_color_values_var = blk1: { var m_1 = std.StringHashMap(f64).init(std.heap.page_allocator); m_1.put("Black", 1.0) catch unreachable; m_1.put("Brown", 10.0) catch unreachable; m_1.put("Red", 100.0) catch unreachable; m_1.put("Orange", 1000.0) catch unreachable; m_1.put("Yellow", 10000.0) catch unreachable; m_1.put("Green", 100000.0) catch unreachable; m_1.put("Blue", 1000000.0) catch unreachable; m_1.put("Violet", 10000000.0) catch unreachable; m_1.put("Grey", 100000000.0) catch unreachable; m_1.put("White", 1000000000.0) catch unreachable; m_1.put("Gold", 0.1) catch unreachable; m_1.put("Silver", 0.01) catch unreachable; break :blk1 m_1; };
        tolerance_color_values_var = blk2: { var m_2 = std.StringHashMap(f64).init(std.heap.page_allocator); m_2.put("Brown", 1.0) catch unreachable; m_2.put("Red", 2.0) catch unreachable; m_2.put("Orange", 0.05) catch unreachable; m_2.put("Yellow", 0.02) catch unreachable; m_2.put("Green", 0.5) catch unreachable; m_2.put("Blue", 0.25) catch unreachable; m_2.put("Violet", 0.1) catch unreachable; m_2.put("Grey", 0.01) catch unreachable; m_2.put("Gold", 5.0) catch unreachable; m_2.put("Silver", 10.0) catch unreachable; break :blk2 m_2; };
        temperature_coeffecient_color_values_var = blk3: { var m_3 = std.StringHashMap(i64).init(std.heap.page_allocator); m_3.put("Black", 250) catch unreachable; m_3.put("Brown", 100) catch unreachable; m_3.put("Red", 50) catch unreachable; m_3.put("Orange", 15) catch unreachable; m_3.put("Yellow", 25) catch unreachable; m_3.put("Green", 20) catch unreachable; m_3.put("Blue", 10) catch unreachable; m_3.put("Violet", 5) catch unreachable; m_3.put("Grey", 1) catch unreachable; break :blk3 m_3; };
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}
