// Generated by Mochi Zig transpiler on 2025-08-14 16:41 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const Result = struct {
    name: []const u8,
    value: f64,
};

var r1_var: Result = undefined;
var r2_var: Result = undefined;
var r3_var: Result = undefined;
var r4_var: Result = undefined;
var r5_var: Result = undefined;

fn absf(x: f64) f64 {
    if (x < 0.0) {
        return @as(f64, @floatFromInt(0)) - x;
    }
    return x;
}

fn pow10(n: i64) f64 {
    var p: f64 = 1.0;
    p = p;
    var i: i64 = 0;
    i = i;
    while (i < n) {
        p = p * 10.0;
        i = i + 1;
    }
    return p;
}

fn round_to(x: f64, n: i64) f64 {
    const m: f64 = pow10(n);
    return std.math.floor(x * m + 0.5) / m;
}

fn electric_power(voltage: f64, current: f64, power: f64) Result {
    var zeros: i64 = 0;
    zeros = zeros;
    if (voltage == 0.0) {
        zeros = zeros + 1;
    }
    if (current == 0.0) {
        zeros = zeros + 1;
    }
    if (power == 0.0) {
        zeros = zeros + 1;
    }
    if (zeros != 1) {
        @panic("Exactly one argument must be 0");
    } else {
        if (power < 0.0) {
            @panic("Power cannot be negative in any electrical/electronics system");
        } else {
            if (voltage == 0.0) {
                return .{ .name = "voltage", .value = power / current };
            } else {
                if (current == 0.0) {
                    return .{ .name = "current", .value = power / voltage };
                } else {
                    if (power == 0.0) {
                        const p: f64 = absf(voltage * current);
                        return .{ .name = "power", .value = round_to(p, 2) };
                    } else {
                        @panic("Unhandled case");
                    }
                }
            }
        }
    }
    return undefined;
}

fn str_result(r: Result) []const u8 {
    return _concat_string(_concat_string(_concat_string(_concat_string("Result(name='", r.name), "', value="), _str(r.value)), ")");
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        r1_var = electric_power(0.0, 2.0, 5.0);
        r2_var = electric_power(2.0, 2.0, 0.0);
        r3_var = electric_power(@as(f64, @floatFromInt(0)) - 2.0, 3.0, 0.0);
        r4_var = electric_power(2.2, 2.2, 0.0);
        r5_var = electric_power(2.0, 0.0, 6.0);
        std.debug.print("{s}\n", .{str_result(r1_var)});
        std.debug.print("{s}\n", .{str_result(r2_var)});
        std.debug.print("{s}\n", .{str_result(r3_var)});
        std.debug.print("{s}\n", .{str_result(r4_var)});
        std.debug.print("{s}\n", .{str_result(r5_var)});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
