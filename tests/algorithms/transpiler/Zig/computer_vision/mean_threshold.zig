// Generated by Mochi Zig transpiler on 2025-08-07 00:08 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

var img_var: [][]i64 = &[_][]i64{};
var result_var: [][]i64 = &[_][]i64{};

fn mean_threshold(image: [][]i64) [][]i64 {
    const height: i64 = @as(i64, @intCast(image.len));
    const width: i64 = @as(i64, @intCast(image[@as(usize, @intCast(0))].len));
    var total: i64 = 0;
    var i: i64 = 0;
    while (i < height) {
        var j: i64 = 0;
        while (j < width) {
            total = total + image[@as(usize, @intCast(i))][@as(usize, @intCast(j))];
            j = j + 1;
        }
        i = i + 1;
    }
    const mean: i64 = @divTrunc(total, height * width);
    i = 0;
    while (i < height) {
        var j: i64 = 0;
        while (j < width) {
            if (image[@as(usize, @intCast(i))][@as(usize, @intCast(j))] > mean) {
                image[@as(usize, @intCast(i))][@as(usize, @intCast(j))] = 255;
            } else {
                image[@as(usize, @intCast(i))][@as(usize, @intCast(j))] = 0;
            }
            j = j + 1;
        }
        i = i + 1;
    }
    return image;
}

fn print_image(image: [][]i64) void {
    var i: i64 = 0;
    while (i < @as(i64, @intCast(image.len))) {
        std.debug.print("{d}\n", .{image[@as(usize, @intCast(i))]});
        i = i + 1;
    }
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        img_var = blk0: { var _tmp0 = std.heap.page_allocator.alloc([]i64, 3) catch unreachable; _tmp0[0] = blk1: { var _tmp1 = std.heap.page_allocator.alloc(i64, 3) catch unreachable; _tmp1[0] = 10; _tmp1[1] = 200; _tmp1[2] = 50; break :blk1 _tmp1; }; _tmp0[1] = blk2: { var _tmp2 = std.heap.page_allocator.alloc(i64, 3) catch unreachable; _tmp2[0] = 100; _tmp2[1] = 150; _tmp2[2] = 30; break :blk2 _tmp2; }; _tmp0[2] = blk3: { var _tmp3 = std.heap.page_allocator.alloc(i64, 3) catch unreachable; _tmp3[0] = 90; _tmp3[1] = 80; _tmp3[2] = 220; break :blk3 _tmp3; }; break :blk0 _tmp0; };
        result_var = mean_threshold(img_var);
        print_image(result_var);
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * std.mem.page_size;
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
