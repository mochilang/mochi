// Generated by Mochi Zig transpiler on 2025-08-07 00:08 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const MosaicResult = struct {
    img: [][]i64,
    annos: [][]f64,
    path: []const u8,
};

fn update_image_and_anno(all_img_list: [][]const u8, all_annos: [][][]f64, idxs: []i64, output_size: []i64, scale_range: []f64, filter_scale: f64) MosaicResult {
    const height: i64 = output_size[@as(usize, @intCast(0))];
    const width: i64 = output_size[@as(usize, @intCast(1))];
    var output_img: [][]i64 = &[_][]i64{};
    var r: i64 = 0;
    while (r < height) {
        var row: []i64 = &[_]i64{};
        var c: i64 = 0;
        while (c < width) {
            row = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, row)) catch |err| handleError(err); _tmp.append(0) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            c = c + 1;
        }
        output_img = blk: { var _tmp = std.ArrayList([]i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []i64, output_img)) catch |err| handleError(err); _tmp.append(row) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        r = r + 1;
    }
    const scale_x: f64 = (scale_range[@as(usize, @intCast(0))] + scale_range[@as(usize, @intCast(1))]) / 2.0;
    const scale_y: f64 = (scale_range[@as(usize, @intCast(0))] + scale_range[@as(usize, @intCast(1))]) / 2.0;
    const divid_point_x: i64 = @as(i64, @intFromFloat(scale_x * @as(f64, @floatFromInt(width))));
    const divid_point_y: i64 = @as(i64, @intFromFloat(scale_y * @as(f64, @floatFromInt(height))));
    var new_anno: [][]f64 = &[_][]f64{};
    var path_list: [][]const u8 = &[_][]const u8{};
    var i: i64 = 0;
    while (i < @as(i64, @intCast(idxs.len))) {
        const index: i64 = idxs[@as(usize, @intCast(i))];
        const path: []const u8 = all_img_list[@as(usize, @intCast(index))];
        path_list = blk: { var _tmp = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []const u8, path_list)) catch |err| handleError(err); _tmp.append(path) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        const img_annos: [][]f64 = all_annos[@as(usize, @intCast(index))];
        if (i == 0) {
            var y0: i64 = 0;
            while (y0 < divid_point_y) {
                var x0: i64 = 0;
                while (x0 < divid_point_x) {
                    output_img[@as(usize, @intCast(y0))][@as(usize, @intCast(x0))] = i + 1;
                    x0 = x0 + 1;
                }
                y0 = y0 + 1;
            }
            var j0: i64 = 0;
            while (j0 < @as(i64, @intCast(img_annos.len))) {
                const bbox: []f64 = img_annos[@as(usize, @intCast(j0))];
                const xmin: f64 = bbox[@as(usize, @intCast(1))] * scale_x;
                const ymin: f64 = bbox[@as(usize, @intCast(2))] * scale_y;
                const xmax: f64 = bbox[@as(usize, @intCast(3))] * scale_x;
                const ymax: f64 = bbox[@as(usize, @intCast(4))] * scale_y;
                new_anno = blk: { var _tmp = std.ArrayList([]f64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []f64, new_anno)) catch |err| handleError(err); _tmp.append(blk0: { var _tmp0 = std.heap.page_allocator.alloc(f64, 5) catch unreachable; _tmp0[0] = bbox[@as(usize, @intCast(0))]; _tmp0[1] = xmin; _tmp0[2] = ymin; _tmp0[3] = xmax; _tmp0[4] = ymax; break :blk0 _tmp0; }) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
                j0 = j0 + 1;
            }
        } else {
            if (i == 1) {
                var y1: i64 = 0;
                while (y1 < divid_point_y) {
                    var x1: i64 = divid_point_x;
                    while (x1 < width) {
                        output_img[@as(usize, @intCast(y1))][@as(usize, @intCast(x1))] = i + 1;
                        x1 = x1 + 1;
                    }
                    y1 = y1 + 1;
                }
                var j1: i64 = 0;
                while (j1 < @as(i64, @intCast(img_annos.len))) {
                    const bbox1: []f64 = img_annos[@as(usize, @intCast(j1))];
                    const xmin1: f64 = scale_x + bbox1[@as(usize, @intCast(1))] * (1.0 - scale_x);
                    const ymin1: f64 = bbox1[@as(usize, @intCast(2))] * scale_y;
                    const xmax1: f64 = scale_x + bbox1[@as(usize, @intCast(3))] * (1.0 - scale_x);
                    const ymax1: f64 = bbox1[@as(usize, @intCast(4))] * scale_y;
                    new_anno = blk: { var _tmp = std.ArrayList([]f64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []f64, new_anno)) catch |err| handleError(err); _tmp.append(blk1: { var _tmp1 = std.heap.page_allocator.alloc(f64, 5) catch unreachable; _tmp1[0] = bbox1[@as(usize, @intCast(0))]; _tmp1[1] = xmin1; _tmp1[2] = ymin1; _tmp1[3] = xmax1; _tmp1[4] = ymax1; break :blk1 _tmp1; }) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
                    j1 = j1 + 1;
                }
            } else {
                if (i == 2) {
                    var y2: i64 = divid_point_y;
                    while (y2 < height) {
                        var x2: i64 = 0;
                        while (x2 < divid_point_x) {
                            output_img[@as(usize, @intCast(y2))][@as(usize, @intCast(x2))] = i + 1;
                            x2 = x2 + 1;
                        }
                        y2 = y2 + 1;
                    }
                    var j2: i64 = 0;
                    while (j2 < @as(i64, @intCast(img_annos.len))) {
                        const bbox2: []f64 = img_annos[@as(usize, @intCast(j2))];
                        const xmin2: f64 = bbox2[@as(usize, @intCast(1))] * scale_x;
                        const ymin2: f64 = scale_y + bbox2[@as(usize, @intCast(2))] * (1.0 - scale_y);
                        const xmax2: f64 = bbox2[@as(usize, @intCast(3))] * scale_x;
                        const ymax2: f64 = scale_y + bbox2[@as(usize, @intCast(4))] * (1.0 - scale_y);
                        new_anno = blk: { var _tmp = std.ArrayList([]f64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []f64, new_anno)) catch |err| handleError(err); _tmp.append(blk2: { var _tmp2 = std.heap.page_allocator.alloc(f64, 5) catch unreachable; _tmp2[0] = bbox2[@as(usize, @intCast(0))]; _tmp2[1] = xmin2; _tmp2[2] = ymin2; _tmp2[3] = xmax2; _tmp2[4] = ymax2; break :blk2 _tmp2; }) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
                        j2 = j2 + 1;
                    }
                } else {
                    var y3: i64 = divid_point_y;
                    while (y3 < height) {
                        var x3: i64 = divid_point_x;
                        while (x3 < width) {
                            output_img[@as(usize, @intCast(y3))][@as(usize, @intCast(x3))] = i + 1;
                            x3 = x3 + 1;
                        }
                        y3 = y3 + 1;
                    }
                    var j3: i64 = 0;
                    while (j3 < @as(i64, @intCast(img_annos.len))) {
                        const bbox3: []f64 = img_annos[@as(usize, @intCast(j3))];
                        const xmin3: f64 = scale_x + bbox3[@as(usize, @intCast(1))] * (1.0 - scale_x);
                        const ymin3: f64 = scale_y + bbox3[@as(usize, @intCast(2))] * (1.0 - scale_y);
                        const xmax3: f64 = scale_x + bbox3[@as(usize, @intCast(3))] * (1.0 - scale_x);
                        const ymax3: f64 = scale_y + bbox3[@as(usize, @intCast(4))] * (1.0 - scale_y);
                        new_anno = blk: { var _tmp = std.ArrayList([]f64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []f64, new_anno)) catch |err| handleError(err); _tmp.append(blk3: { var _tmp3 = std.heap.page_allocator.alloc(f64, 5) catch unreachable; _tmp3[0] = bbox3[@as(usize, @intCast(0))]; _tmp3[1] = xmin3; _tmp3[2] = ymin3; _tmp3[3] = xmax3; _tmp3[4] = ymax3; break :blk3 _tmp3; }) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
                        j3 = j3 + 1;
                    }
                }
            }
        }
        i = i + 1;
    }
    if (filter_scale > 0.0) {
        var filtered: [][]f64 = &[_][]f64{};
        var k: i64 = 0;
        while (k < @as(i64, @intCast(new_anno.len))) {
            const anno: []f64 = new_anno[@as(usize, @intCast(k))];
            const w: f64 = anno[@as(usize, @intCast(3))] - anno[@as(usize, @intCast(1))];
            const h: f64 = anno[@as(usize, @intCast(4))] - anno[@as(usize, @intCast(2))];
            if (filter_scale < w and filter_scale < h) {
                filtered = blk: { var _tmp = std.ArrayList([]f64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []f64, filtered)) catch |err| handleError(err); _tmp.append(anno) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            }
            k = k + 1;
        }
        new_anno = filtered;
    }
    return .{ .img = output_img, .annos = new_anno, .path = path_list[@as(usize, @intCast(0))] };
}

fn mochi_main() void {
    const all_img_list: [][]const u8 = blk4: { var _tmp4 = std.heap.page_allocator.alloc([]const u8, 4) catch unreachable; _tmp4[0] = "img0.jpg"; _tmp4[1] = "img1.jpg"; _tmp4[2] = "img2.jpg"; _tmp4[3] = "img3.jpg"; break :blk4 _tmp4; };
    const all_annos: [][][]f64 = blk5: { var _tmp5 = std.heap.page_allocator.alloc([][]f64, 4) catch unreachable; _tmp5[0] = blk6: { var _tmp6 = std.heap.page_allocator.alloc([]f64, 1) catch unreachable; _tmp6[0] = blk7: { var _tmp7 = std.heap.page_allocator.alloc(f64, 5) catch unreachable; _tmp7[0] = 0.0; _tmp7[1] = 0.1; _tmp7[2] = 0.1; _tmp7[3] = 0.4; _tmp7[4] = 0.4; break :blk7 _tmp7; }; break :blk6 _tmp6; }; _tmp5[1] = blk8: { var _tmp8 = std.heap.page_allocator.alloc([]f64, 1) catch unreachable; _tmp8[0] = blk9: { var _tmp9 = std.heap.page_allocator.alloc(f64, 5) catch unreachable; _tmp9[0] = 1.0; _tmp9[1] = 0.2; _tmp9[2] = 0.3; _tmp9[3] = 0.5; _tmp9[4] = 0.7; break :blk9 _tmp9; }; break :blk8 _tmp8; }; _tmp5[2] = blk10: { var _tmp10 = std.heap.page_allocator.alloc([]f64, 1) catch unreachable; _tmp10[0] = blk11: { var _tmp11 = std.heap.page_allocator.alloc(f64, 5) catch unreachable; _tmp11[0] = 2.0; _tmp11[1] = 0.6; _tmp11[2] = 0.2; _tmp11[3] = 0.9; _tmp11[4] = 0.5; break :blk11 _tmp11; }; break :blk10 _tmp10; }; _tmp5[3] = blk12: { var _tmp12 = std.heap.page_allocator.alloc([]f64, 1) catch unreachable; _tmp12[0] = blk13: { var _tmp13 = std.heap.page_allocator.alloc(f64, 5) catch unreachable; _tmp13[0] = 3.0; _tmp13[1] = 0.5; _tmp13[2] = 0.5; _tmp13[3] = 0.8; _tmp13[4] = 0.8; break :blk13 _tmp13; }; break :blk12 _tmp12; }; break :blk5 _tmp5; };
    const idxs: []i64 = blk14: { var _tmp14 = std.heap.page_allocator.alloc(i64, 4) catch unreachable; _tmp14[0] = 0; _tmp14[1] = 1; _tmp14[2] = 2; _tmp14[3] = 3; break :blk14 _tmp14; };
    const output_size: []i64 = blk15: { var _tmp15 = std.heap.page_allocator.alloc(i64, 2) catch unreachable; _tmp15[0] = 100; _tmp15[1] = 100; break :blk15 _tmp15; };
    const scale_range: []f64 = blk16: { var _tmp16 = std.heap.page_allocator.alloc(f64, 2) catch unreachable; _tmp16[0] = 0.4; _tmp16[1] = 0.6; break :blk16 _tmp16; };
    const filter_scale: f64 = 0.05;
    const res: MosaicResult = update_image_and_anno(all_img_list, all_annos, idxs, output_size, scale_range, filter_scale);
    const new_annos: [][]f64 = res.annos;
    const path: []const u8 = res.path;
    std.debug.print("{s}\n", .{_concat_string("Base image: ", path)});
    std.debug.print("{s}\n", .{_concat_string("Mosaic annotation count: ", _str(@as(i64, @intCast(new_annos.len))))});
    var i: i64 = 0;
    while (i < @as(i64, @intCast(new_annos.len))) {
        const a: []f64 = new_annos[@as(usize, @intCast(i))];
        std.debug.print("{s}\n", .{_concat_string(_concat_string(_concat_string(_concat_string(_concat_string(_concat_string(_concat_string(_concat_string(_str(a[@as(usize, @intCast(0))]), " "), _str(a[@as(usize, @intCast(1))])), " "), _str(a[@as(usize, @intCast(2))])), " "), _str(a[@as(usize, @intCast(3))])), " "), _str(a[@as(usize, @intCast(4))]))});
        i = i + 1;
    }
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        mochi_main();
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    if (info == .Pointer and info.Pointer.size == .Slice) {
        var out = std.ArrayList(u8).init(std.heap.page_allocator);
        defer out.deinit();
        out.append('[') catch unreachable;
        for (v, 0..) |e, i| {
            if (i != 0) { out.append(' ') catch unreachable; }
            const s = _str(e);
            out.appendSlice(s) catch unreachable;
        }
        out.append(']') catch unreachable;
        return out.toOwnedSlice() catch unreachable;
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * std.mem.page_size;
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
