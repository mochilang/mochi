// Generated by Mochi Zig transpiler on 2025-08-07 14:57 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

var image_var: [][]i64 = &[_][]i64{};
var glcm_var: [][]f64 = &[_][]f64{};
var descriptors_var: []f64 = &[_]f64{};
var idx_var: i64 = 0;

fn abs_int(n: i64) i64 {
    if (n < 0) {
        return 0 - n;
    }
    return n;
}

fn sqrt(x: f64) f64 {
    if (x <= 0.0) {
        return 0.0;
    }
    var guess: f64 = x;
    guess = guess;
    var i: i64 = 0;
    i = i;
    while (i < 10) {
        guess = (guess + x / guess) / 2.0;
        i = i + 1;
    }
    return guess;
}

fn ln(x: f64) f64 {
    if (x <= 0.0) {
        return 0.0;
    }
    var e: f64 = 2.718281828;
    e = e;
    var n: i64 = 0;
    n = n;
    var y: f64 = x;
    y = y;
    while (y >= e) {
        y = y / e;
        n = n + 1;
    }
    while (y <= 1.0 / e) {
        y = y * e;
        n = n - 1;
    }
    y = y - 1.0;
    var term: f64 = y;
    term = term;
    var result: f64 = 0.0;
    result = result;
    var k: i64 = 1;
    k = k;
    while (k <= 20) {
        if (@mod(k, 2) == 1) {
            result = result + term / (1.0 * @as(f64, @floatFromInt(k)));
        } else {
            result = result - term / (1.0 * @as(f64, @floatFromInt(k)));
        }
        term = term * y;
        k = k + 1;
    }
    return result + 1.0 * @as(f64, @floatFromInt(n));
}

fn matrix_concurrency(image_param: [][]i64, coord: []i64) [][]f64 {
    var offset_x: i64 = coord[@as(usize, @intCast(0))];
    offset_x = offset_x;
    var offset_y: i64 = coord[@as(usize, @intCast(1))];
    offset_y = offset_y;
    var max_val: i64 = 0;
    max_val = max_val;
    for (@as(usize, @intCast(0))..@as(usize, @intCast(@as(i64, @intCast(image_param.len))))) |__it0| {
        const r: i64 = @as(i64, @intCast(__it0));
        for (@as(usize, @intCast(0))..@as(usize, @intCast(@as(i64, @intCast(image_param[@as(usize, @intCast(r))].len))))) |__it1| {
            const c: i64 = @as(i64, @intCast(__it1));
            if (image_param[@as(usize, @intCast(r))][@as(usize, @intCast(c))] > max_val) {
                max_val = image_param[@as(usize, @intCast(r))][@as(usize, @intCast(c))];
            }
        }
    }
    var size: i64 = max_val + 1;
    size = size;
    var matrix: [][]f64 = &[_][]f64{};
    matrix = matrix;
    for (@as(usize, @intCast(0))..@as(usize, @intCast(size))) |_| {
        var row: []f64 = &[_]f64{};
        row = row;
        for (@as(usize, @intCast(0))..@as(usize, @intCast(size))) |_| {
            row = blk: { var _tmp = std.ArrayList(f64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const f64, row)) catch |err| handleError(err); _tmp.append(0.0) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        }
        matrix = blk: { var _tmp = std.ArrayList([]f64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []f64, matrix)) catch |err| handleError(err); _tmp.append(row) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
    }
    for (@as(usize, @intCast(1))..@as(usize, @intCast(@as(i64, @intCast(image_param.len)) - 1))) |__it4| {
        const x: i64 = @as(i64, @intCast(__it4));
        for (@as(usize, @intCast(1))..@as(usize, @intCast(@as(i64, @intCast(image_param[@as(usize, @intCast(x))].len)) - 1))) |__it5| {
            const y: i64 = @as(i64, @intCast(__it5));
            var base: i64 = image_param[@as(usize, @intCast(x))][@as(usize, @intCast(y))];
            base = base;
            var offset: i64 = image_param[@as(usize, @intCast(x + offset_x))][@as(usize, @intCast(y + offset_y))];
            offset = offset;
            matrix[@as(usize, @intCast(base))][@as(usize, @intCast(offset))] = matrix[@as(usize, @intCast(base))][@as(usize, @intCast(offset))] + 1.0;
        }
    }
    var total: f64 = 0.0;
    total = total;
    for (@as(usize, @intCast(0))..@as(usize, @intCast(size))) |__it6| {
        const i: i64 = @as(i64, @intCast(__it6));
        for (@as(usize, @intCast(0))..@as(usize, @intCast(size))) |__it7| {
            const j: i64 = @as(i64, @intCast(__it7));
            total = total + matrix[@as(usize, @intCast(i))][@as(usize, @intCast(j))];
        }
    }
    if (total == 0.0) {
        return matrix;
    }
    for (@as(usize, @intCast(0))..@as(usize, @intCast(size))) |__it8| {
        const i: i64 = @as(i64, @intCast(__it8));
        for (@as(usize, @intCast(0))..@as(usize, @intCast(size))) |__it9| {
            const j: i64 = @as(i64, @intCast(__it9));
            matrix[@as(usize, @intCast(i))][@as(usize, @intCast(j))] = matrix[@as(usize, @intCast(i))][@as(usize, @intCast(j))] / total;
        }
    }
    return matrix;
}

fn haralick_descriptors(matrix: [][]f64) []f64 {
    var rows: i64 = @as(i64, @intCast(matrix.len));
    rows = rows;
    var cols: i64 = @as(i64, @intCast(matrix[@as(usize, @intCast(0))].len));
    cols = cols;
    var maximum_prob: f64 = 0.0;
    maximum_prob = maximum_prob;
    var correlation: f64 = 0.0;
    correlation = correlation;
    var energy: f64 = 0.0;
    energy = energy;
    var contrast: f64 = 0.0;
    contrast = contrast;
    var dissimilarity: f64 = 0.0;
    dissimilarity = dissimilarity;
    var inverse_difference: f64 = 0.0;
    inverse_difference = inverse_difference;
    var homogeneity: f64 = 0.0;
    homogeneity = homogeneity;
    var entropy: f64 = 0.0;
    entropy = entropy;
    var i: i64 = 0;
    i = i;
    while (i < rows) {
        var j: i64 = 0;
        j = j;
        while (j < cols) {
            var val: f64 = matrix[@as(usize, @intCast(i))][@as(usize, @intCast(j))];
            val = val;
            if (val > maximum_prob) {
                maximum_prob = val;
            }
            correlation = correlation + 1.0 * @as(f64, @floatFromInt(i)) * @as(f64, @floatFromInt(j)) * val;
            energy = energy + val * val;
            var diff: i64 = i - j;
            diff = diff;
            var adiff: i64 = abs_int(diff);
            adiff = adiff;
            contrast = contrast + val * (1.0 * @as(f64, @floatFromInt(diff)) * @as(f64, @floatFromInt(diff)));
            dissimilarity = dissimilarity + val * (1.0 * @as(f64, @floatFromInt(adiff)));
            inverse_difference = inverse_difference + val / (1.0 + 1.0 * @as(f64, @floatFromInt(adiff)));
            homogeneity = homogeneity + val / (1.0 + 1.0 * @as(f64, @floatFromInt(diff)) * @as(f64, @floatFromInt(diff)));
            if (val > 0.0) {
                entropy = entropy - val * ln(val);
            }
            j = j + 1;
        }
        i = i + 1;
    }
    return blk0: { var _tmp0 = std.heap.page_allocator.alloc(f64, 8) catch unreachable; _tmp0[0] = maximum_prob; _tmp0[1] = correlation; _tmp0[2] = energy; _tmp0[3] = contrast; _tmp0[4] = dissimilarity; _tmp0[5] = inverse_difference; _tmp0[6] = homogeneity; _tmp0[7] = entropy; break :blk0 _tmp0; };
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        image_var = blk1: { var _tmp1 = std.heap.page_allocator.alloc([]i64, 3) catch unreachable; _tmp1[0] = blk2: { var _tmp2 = std.heap.page_allocator.alloc(i64, 3) catch unreachable; _tmp2[0] = 0; _tmp2[1] = 1; _tmp2[2] = 0; break :blk2 _tmp2; }; _tmp1[1] = blk3: { var _tmp3 = std.heap.page_allocator.alloc(i64, 3) catch unreachable; _tmp3[0] = 1; _tmp3[1] = 0; _tmp3[2] = 1; break :blk3 _tmp3; }; _tmp1[2] = blk4: { var _tmp4 = std.heap.page_allocator.alloc(i64, 3) catch unreachable; _tmp4[0] = 0; _tmp4[1] = 1; _tmp4[2] = 0; break :blk4 _tmp4; }; break :blk1 _tmp1; };
        glcm_var = matrix_concurrency(image_var, blk5: { var _tmp5 = std.heap.page_allocator.alloc(i64, 2) catch unreachable; _tmp5[0] = 0; _tmp5[1] = 1; break :blk5 _tmp5; });
        descriptors_var = haralick_descriptors(glcm_var);
        while (idx_var < @as(i64, @intCast(descriptors_var.len))) {
            std.debug.print("{s}\n", .{_str(descriptors_var[@as(usize, @intCast(idx_var))])});
            idx_var = idx_var + 1;
        }
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * std.mem.page_size;
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
