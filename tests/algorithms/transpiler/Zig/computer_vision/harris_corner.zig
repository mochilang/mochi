// Generated by Mochi Zig transpiler on 2025-08-07 14:57 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

var img_var: [][]i64 = &[_][]i64{};
var corners_var: [][]i64 = &[_][]i64{};

fn zeros(h: i64, w: i64) [][]f64 {
    var m: [][]f64 = &[_][]f64{};
    m = m;
    var y: i64 = 0;
    y = y;
    while (y < h) {
        var row: []f64 = &[_]f64{};
        row = row;
        var x: i64 = 0;
        x = x;
        while (x < w) {
            row = blk: { var _tmp = std.ArrayList(f64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const f64, row)) catch |err| handleError(err); _tmp.append(0.0) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            x = x + 1;
        }
        m = blk: { var _tmp = std.ArrayList([]f64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []f64, m)) catch |err| handleError(err); _tmp.append(row) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        y = y + 1;
    }
    return m;
}

fn gradient(img_param: [][]i64) [][][]f64 {
    var h: i64 = @as(i64, @intCast(img_param.len));
    h = h;
    var w: i64 = @as(i64, @intCast(img_param[@as(usize, @intCast(0))].len));
    w = w;
    var dx: [][]f64 = zeros(h, w);
    dx = dx;
    var dy: [][]f64 = zeros(h, w);
    dy = dy;
    var y: i64 = 1;
    y = y;
    while (y < h - 1) {
        var x: i64 = 1;
        x = x;
        while (x < w - 1) {
            dx[@as(usize, @intCast(y))][@as(usize, @intCast(x))] = @as(f64, @floatFromInt(img_param[@as(usize, @intCast(y))][@as(usize, @intCast(x + 1))])) - @as(f64, @floatFromInt(img_param[@as(usize, @intCast(y))][@as(usize, @intCast(x - 1))]));
            dy[@as(usize, @intCast(y))][@as(usize, @intCast(x))] = @as(f64, @floatFromInt(img_param[@as(usize, @intCast(y + 1))][@as(usize, @intCast(x))])) - @as(f64, @floatFromInt(img_param[@as(usize, @intCast(y - 1))][@as(usize, @intCast(x))]));
            x = x + 1;
        }
        y = y + 1;
    }
    return blk0: { var _tmp0 = std.heap.page_allocator.alloc([][]f64, 2) catch unreachable; _tmp0[0] = dx; _tmp0[1] = dy; break :blk0 _tmp0; };
}

fn harris(img_param: [][]i64, k: f64, window: i64, thresh: f64) [][]i64 {
    var h: i64 = @as(i64, @intCast(img_param.len));
    h = h;
    var w: i64 = @as(i64, @intCast(img_param[@as(usize, @intCast(0))].len));
    w = w;
    var grads: [][][]f64 = gradient(img_param);
    grads = grads;
    var dx: [][]f64 = grads[@as(usize, @intCast(0))];
    dx = dx;
    var dy: [][]f64 = grads[@as(usize, @intCast(1))];
    dy = dy;
    var ixx: [][]f64 = zeros(h, w);
    ixx = ixx;
    var iyy: [][]f64 = zeros(h, w);
    iyy = iyy;
    var ixy: [][]f64 = zeros(h, w);
    ixy = ixy;
    var y: i64 = 0;
    y = y;
    while (y < h) {
        var x: i64 = 0;
        x = x;
        while (x < w) {
            var gx: f64 = dx[@as(usize, @intCast(y))][@as(usize, @intCast(x))];
            gx = gx;
            var gy: f64 = dy[@as(usize, @intCast(y))][@as(usize, @intCast(x))];
            gy = gy;
            ixx[@as(usize, @intCast(y))][@as(usize, @intCast(x))] = gx * gx;
            iyy[@as(usize, @intCast(y))][@as(usize, @intCast(x))] = gy * gy;
            ixy[@as(usize, @intCast(y))][@as(usize, @intCast(x))] = gx * gy;
            x = x + 1;
        }
        y = y + 1;
    }
    var offset: i64 = @divTrunc(window, 2);
    offset = offset;
    var corners_var_1: [][]i64 = &[_][]i64{};
    corners_var_1 = corners_var_1;
    y = offset;
    while (y < h - offset) {
        var x: i64 = offset;
        x = x;
        while (x < w - offset) {
            var wxx: f64 = 0.0;
            wxx = wxx;
            var wyy: f64 = 0.0;
            wyy = wyy;
            var wxy: f64 = 0.0;
            wxy = wxy;
            var yy: i64 = y - offset;
            yy = yy;
            while (yy <= y + offset) {
                var xx: i64 = x - offset;
                xx = xx;
                while (xx <= x + offset) {
                    wxx = wxx + ixx[@as(usize, @intCast(yy))][@as(usize, @intCast(xx))];
                    wyy = wyy + iyy[@as(usize, @intCast(yy))][@as(usize, @intCast(xx))];
                    wxy = wxy + ixy[@as(usize, @intCast(yy))][@as(usize, @intCast(xx))];
                    xx = xx + 1;
                }
                yy = yy + 1;
            }
            var det: f64 = wxx * wyy - wxy * wxy;
            det = det;
            var trace: f64 = wxx + wyy;
            trace = trace;
            var r: f64 = det - k * (trace * trace);
            r = r;
            if (r > thresh) {
                corners_var_1 = blk: { var _tmp = std.ArrayList([]i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []i64, corners_var_1)) catch |err| handleError(err); _tmp.append(blk1: { var _tmp1 = std.heap.page_allocator.alloc(i64, 2) catch unreachable; _tmp1[0] = x; _tmp1[1] = y; break :blk1 _tmp1; }) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            }
            x = x + 1;
        }
        y = y + 1;
    }
    return corners_var_1;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        img_var = blk2: { var _tmp2 = std.heap.page_allocator.alloc([]i64, 5) catch unreachable; _tmp2[0] = blk3: { var _tmp3 = std.heap.page_allocator.alloc(i64, 5) catch unreachable; _tmp3[0] = 1; _tmp3[1] = 1; _tmp3[2] = 1; _tmp3[3] = 1; _tmp3[4] = 1; break :blk3 _tmp3; }; _tmp2[1] = blk4: { var _tmp4 = std.heap.page_allocator.alloc(i64, 5) catch unreachable; _tmp4[0] = 1; _tmp4[1] = 255; _tmp4[2] = 255; _tmp4[3] = 255; _tmp4[4] = 1; break :blk4 _tmp4; }; _tmp2[2] = blk5: { var _tmp5 = std.heap.page_allocator.alloc(i64, 5) catch unreachable; _tmp5[0] = 1; _tmp5[1] = 255; _tmp5[2] = 0; _tmp5[3] = 255; _tmp5[4] = 1; break :blk5 _tmp5; }; _tmp2[3] = blk6: { var _tmp6 = std.heap.page_allocator.alloc(i64, 5) catch unreachable; _tmp6[0] = 1; _tmp6[1] = 255; _tmp6[2] = 255; _tmp6[3] = 255; _tmp6[4] = 1; break :blk6 _tmp6; }; _tmp2[4] = blk7: { var _tmp7 = std.heap.page_allocator.alloc(i64, 5) catch unreachable; _tmp7[0] = 1; _tmp7[1] = 1; _tmp7[2] = 1; _tmp7[3] = 1; _tmp7[4] = 1; break :blk7 _tmp7; }; break :blk2 _tmp2; };
        corners_var = harris(img_var, 0.04, 3, 10000000000.0);
        std.debug.print("{s}\n", .{_str(corners_var)});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * std.mem.page_size;
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
