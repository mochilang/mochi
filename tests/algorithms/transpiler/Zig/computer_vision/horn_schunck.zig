// Generated by Mochi Zig transpiler on 2025-08-07 14:57 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn round_int(x: f64) i64 {
    if (x >= 0.0) {
        return @as(i64, @intFromFloat(x + 0.5));
    }
    return @as(i64, @intFromFloat(x - 0.5));
}

fn zeros(rows: i64, cols: i64) [][]f64 {
    var res: [][]f64 = &[_][]f64{};
    res = res;
    var i: i64 = 0;
    i = i;
    while (i < rows) {
        var row: []f64 = &[_]f64{};
        row = row;
        var j: i64 = 0;
        j = j;
        while (j < cols) {
            row = blk: { var _tmp = std.ArrayList(f64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const f64, row)) catch |err| handleError(err); _tmp.append(0.0) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            j = j + 1;
        }
        res = blk: { var _tmp = std.ArrayList([]f64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []f64, res)) catch |err| handleError(err); _tmp.append(row) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    return res;
}

fn warp(image: [][]f64, h_flow: [][]f64, v_flow: [][]f64) [][]f64 {
    var h: i64 = @as(i64, @intCast(image.len));
    h = h;
    var w: i64 = @as(i64, @intCast(image[@as(usize, @intCast(0))].len));
    w = w;
    var out: [][]f64 = &[_][]f64{};
    out = out;
    var y: i64 = 0;
    y = y;
    while (y < h) {
        var row: []f64 = &[_]f64{};
        row = row;
        var x: i64 = 0;
        x = x;
        while (x < w) {
            var sx: i64 = x - round_int(h_flow[@as(usize, @intCast(y))][@as(usize, @intCast(x))]);
            sx = sx;
            var sy: i64 = y - round_int(v_flow[@as(usize, @intCast(y))][@as(usize, @intCast(x))]);
            sy = sy;
            if (sx >= 0 and sx < w and sy >= 0 and sy < h) {
                row = blk: { var _tmp = std.ArrayList(f64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const f64, row)) catch |err| handleError(err); _tmp.append(image[@as(usize, @intCast(sy))][@as(usize, @intCast(sx))]) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            } else {
                row = blk: { var _tmp = std.ArrayList(f64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const f64, row)) catch |err| handleError(err); _tmp.append(0.0) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            }
            x = x + 1;
        }
        out = blk: { var _tmp = std.ArrayList([]f64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []f64, out)) catch |err| handleError(err); _tmp.append(row) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        y = y + 1;
    }
    return out;
}

fn convolve(img: [][]f64, ker: [][]f64) [][]f64 {
    var h: i64 = @as(i64, @intCast(img.len));
    h = h;
    var w: i64 = @as(i64, @intCast(img[@as(usize, @intCast(0))].len));
    w = w;
    var kh: i64 = @as(i64, @intCast(ker.len));
    kh = kh;
    var kw: i64 = @as(i64, @intCast(ker[@as(usize, @intCast(0))].len));
    kw = kw;
    var py: i64 = @divTrunc(kh, 2);
    py = py;
    var px: i64 = @divTrunc(kw, 2);
    px = px;
    var out: [][]f64 = &[_][]f64{};
    out = out;
    var y: i64 = 0;
    y = y;
    while (y < h) {
        var row: []f64 = &[_]f64{};
        row = row;
        var x: i64 = 0;
        x = x;
        while (x < w) {
            var s: f64 = 0.0;
            s = s;
            var ky: i64 = 0;
            ky = ky;
            while (ky < kh) {
                var kx: i64 = 0;
                kx = kx;
                while (kx < kw) {
                    var iy: i64 = y + ky - py;
                    iy = iy;
                    var ix: i64 = x + kx - px;
                    ix = ix;
                    if (iy >= 0 and iy < h and ix >= 0 and ix < w) {
                        s = s + img[@as(usize, @intCast(iy))][@as(usize, @intCast(ix))] * ker[@as(usize, @intCast(ky))][@as(usize, @intCast(kx))];
                    }
                    kx = kx + 1;
                }
                ky = ky + 1;
            }
            row = blk: { var _tmp = std.ArrayList(f64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const f64, row)) catch |err| handleError(err); _tmp.append(s) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            x = x + 1;
        }
        out = blk: { var _tmp = std.ArrayList([]f64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []f64, out)) catch |err| handleError(err); _tmp.append(row) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        y = y + 1;
    }
    return out;
}

fn horn_schunck(image0: [][]f64, image1: [][]f64, num_iter: i64, alpha: f64) [][][]f64 {
    var h: i64 = @as(i64, @intCast(image0.len));
    h = h;
    var w: i64 = @as(i64, @intCast(image0[@as(usize, @intCast(0))].len));
    w = w;
    var u: [][]f64 = zeros(h, w);
    u = u;
    var v: [][]f64 = zeros(h, w);
    v = v;
    var kernel_x: [][]f64 = blk0: { var _tmp0 = std.heap.page_allocator.alloc([]f64, 2) catch unreachable; _tmp0[0] = blk1: { var _tmp1 = std.heap.page_allocator.alloc(f64, 2) catch unreachable; _tmp1[0] = @as(f64, @floatFromInt(0)) - 0.25; _tmp1[1] = 0.25; break :blk1 _tmp1; }; _tmp0[1] = blk2: { var _tmp2 = std.heap.page_allocator.alloc(f64, 2) catch unreachable; _tmp2[0] = @as(f64, @floatFromInt(0)) - 0.25; _tmp2[1] = 0.25; break :blk2 _tmp2; }; break :blk0 _tmp0; };
    kernel_x = kernel_x;
    var kernel_y: [][]f64 = blk3: { var _tmp3 = std.heap.page_allocator.alloc([]f64, 2) catch unreachable; _tmp3[0] = blk4: { var _tmp4 = std.heap.page_allocator.alloc(f64, 2) catch unreachable; _tmp4[0] = @as(f64, @floatFromInt(0)) - 0.25; _tmp4[1] = @as(f64, @floatFromInt(0)) - 0.25; break :blk4 _tmp4; }; _tmp3[1] = blk5: { var _tmp5 = std.heap.page_allocator.alloc(f64, 2) catch unreachable; _tmp5[0] = 0.25; _tmp5[1] = 0.25; break :blk5 _tmp5; }; break :blk3 _tmp3; };
    kernel_y = kernel_y;
    var kernel_t: [][]f64 = blk6: { var _tmp6 = std.heap.page_allocator.alloc([]f64, 2) catch unreachable; _tmp6[0] = blk7: { var _tmp7 = std.heap.page_allocator.alloc(f64, 2) catch unreachable; _tmp7[0] = 0.25; _tmp7[1] = 0.25; break :blk7 _tmp7; }; _tmp6[1] = blk8: { var _tmp8 = std.heap.page_allocator.alloc(f64, 2) catch unreachable; _tmp8[0] = 0.25; _tmp8[1] = 0.25; break :blk8 _tmp8; }; break :blk6 _tmp6; };
    kernel_t = kernel_t;
    var laplacian: [][]f64 = blk9: { var _tmp9 = std.heap.page_allocator.alloc([]f64, 3) catch unreachable; _tmp9[0] = blk10: { var _tmp10 = std.heap.page_allocator.alloc(f64, 3) catch unreachable; _tmp10[0] = 0.0833333333333; _tmp10[1] = 0.166666666667; _tmp10[2] = 0.0833333333333; break :blk10 _tmp10; }; _tmp9[1] = blk11: { var _tmp11 = std.heap.page_allocator.alloc(f64, 3) catch unreachable; _tmp11[0] = 0.166666666667; _tmp11[1] = 0.0; _tmp11[2] = 0.166666666667; break :blk11 _tmp11; }; _tmp9[2] = blk12: { var _tmp12 = std.heap.page_allocator.alloc(f64, 3) catch unreachable; _tmp12[0] = 0.0833333333333; _tmp12[1] = 0.166666666667; _tmp12[2] = 0.0833333333333; break :blk12 _tmp12; }; break :blk9 _tmp9; };
    laplacian = laplacian;
    var it: i64 = 0;
    it = it;
    while (it < num_iter) {
        var warped: [][]f64 = warp(image0, u, v);
        warped = warped;
        var dx1: [][]f64 = convolve(warped, kernel_x);
        dx1 = dx1;
        var dx2: [][]f64 = convolve(image1, kernel_x);
        dx2 = dx2;
        var dy1: [][]f64 = convolve(warped, kernel_y);
        dy1 = dy1;
        var dy2: [][]f64 = convolve(image1, kernel_y);
        dy2 = dy2;
        var dt1: [][]f64 = convolve(warped, kernel_t);
        dt1 = dt1;
        var dt2: [][]f64 = convolve(image1, kernel_t);
        dt2 = dt2;
        var avg_u: [][]f64 = convolve(u, laplacian);
        avg_u = avg_u;
        var avg_v: [][]f64 = convolve(v, laplacian);
        avg_v = avg_v;
        var y: i64 = 0;
        y = y;
        while (y < h) {
            var x: i64 = 0;
            x = x;
            while (x < w) {
                var dx: f64 = dx1[@as(usize, @intCast(y))][@as(usize, @intCast(x))] + dx2[@as(usize, @intCast(y))][@as(usize, @intCast(x))];
                dx = dx;
                var dy: f64 = dy1[@as(usize, @intCast(y))][@as(usize, @intCast(x))] + dy2[@as(usize, @intCast(y))][@as(usize, @intCast(x))];
                dy = dy;
                var dt: f64 = dt1[@as(usize, @intCast(y))][@as(usize, @intCast(x))] - dt2[@as(usize, @intCast(y))][@as(usize, @intCast(x))];
                dt = dt;
                var au: f64 = avg_u[@as(usize, @intCast(y))][@as(usize, @intCast(x))];
                au = au;
                var av: f64 = avg_v[@as(usize, @intCast(y))][@as(usize, @intCast(x))];
                av = av;
                var numer: f64 = dx * au + dy * av + dt;
                numer = numer;
                var denom: f64 = alpha * alpha + dx * dx + dy * dy;
                denom = denom;
                var upd: f64 = numer / denom;
                upd = upd;
                u[@as(usize, @intCast(y))][@as(usize, @intCast(x))] = au - dx * upd;
                v[@as(usize, @intCast(y))][@as(usize, @intCast(x))] = av - dy * upd;
                x = x + 1;
            }
            y = y + 1;
        }
        it = it + 1;
    }
    return blk13: { var _tmp13 = std.heap.page_allocator.alloc([][]f64, 2) catch unreachable; _tmp13[0] = u; _tmp13[1] = v; break :blk13 _tmp13; };
}

fn print_matrix(mat: [][]f64) void {
    var y: i64 = 0;
    y = y;
    while (y < @as(i64, @intCast(mat.len))) {
        var row: []f64 = mat[@as(usize, @intCast(y))];
        row = row;
        var x: i64 = 0;
        x = x;
        var line: []const u8 = "";
        line = line;
        while (x < @as(i64, @intCast(row.len))) {
            line = _concat_string(line, _str(round_int(row[@as(usize, @intCast(x))])));
            if (x + 1 < @as(i64, @intCast(row.len))) {
                line = _concat_string(line, " ");
            }
            x = x + 1;
        }
        std.debug.print("{s}\n", .{line});
        y = y + 1;
    }
}

fn mochi_main() void {
    var image0: [][]f64 = blk14: { var _tmp14 = std.heap.page_allocator.alloc([]f64, 2) catch unreachable; _tmp14[0] = blk15: { var _tmp15 = std.heap.page_allocator.alloc(f64, 3) catch unreachable; _tmp15[0] = 0.0; _tmp15[1] = 0.0; _tmp15[2] = 2.0; break :blk15 _tmp15; }; _tmp14[1] = blk16: { var _tmp16 = std.heap.page_allocator.alloc(f64, 3) catch unreachable; _tmp16[0] = 0.0; _tmp16[1] = 0.0; _tmp16[2] = 2.0; break :blk16 _tmp16; }; break :blk14 _tmp14; };
    image0 = image0;
    var image1: [][]f64 = blk17: { var _tmp17 = std.heap.page_allocator.alloc([]f64, 2) catch unreachable; _tmp17[0] = blk18: { var _tmp18 = std.heap.page_allocator.alloc(f64, 3) catch unreachable; _tmp18[0] = 0.0; _tmp18[1] = 2.0; _tmp18[2] = 0.0; break :blk18 _tmp18; }; _tmp17[1] = blk19: { var _tmp19 = std.heap.page_allocator.alloc(f64, 3) catch unreachable; _tmp19[0] = 0.0; _tmp19[1] = 2.0; _tmp19[2] = 0.0; break :blk19 _tmp19; }; break :blk17 _tmp17; };
    image1 = image1;
    var flows: [][][]f64 = horn_schunck(image0, image1, 20, 0.1);
    flows = flows;
    var u: [][]f64 = flows[@as(usize, @intCast(0))];
    u = u;
    var v: [][]f64 = flows[@as(usize, @intCast(1))];
    v = v;
    print_matrix(u);
    std.debug.print("{s}\n", .{"---"});
    print_matrix(v);
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        mochi_main();
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * std.mem.page_size;
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
