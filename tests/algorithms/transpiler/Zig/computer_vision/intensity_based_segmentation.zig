// Generated by Mochi Zig transpiler on 2025-08-07 14:57 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn segment_image(image: [][]i64, thresholds: []i64) [][]i64 {
    var segmented: [][]i64 = &[_][]i64{};
    segmented = segmented;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(image.len))) {
        var row: []i64 = &[_]i64{};
        row = row;
        var j: i64 = 0;
        j = j;
        while (j < @as(i64, @intCast(image[@as(usize, @intCast(i))].len))) {
            var pixel: i64 = image[@as(usize, @intCast(i))][@as(usize, @intCast(j))];
            pixel = pixel;
            var label: i64 = 0;
            label = label;
            var k: i64 = 0;
            k = k;
            while (k < @as(i64, @intCast(thresholds.len))) {
                if (pixel > thresholds[@as(usize, @intCast(k))]) {
                    label = k + 1;
                }
                k = k + 1;
            }
            row = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, row)) catch |err| handleError(err); _tmp.append(label) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            j = j + 1;
        }
        segmented = blk: { var _tmp = std.ArrayList([]i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []i64, segmented)) catch |err| handleError(err); _tmp.append(row) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    return segmented;
}

fn mochi_main() void {
    var image: [][]i64 = blk0: { var _tmp0 = std.heap.page_allocator.alloc([]i64, 3) catch unreachable; _tmp0[0] = blk1: { var _tmp1 = std.heap.page_allocator.alloc(i64, 3) catch unreachable; _tmp1[0] = 80; _tmp1[1] = 120; _tmp1[2] = 180; break :blk1 _tmp1; }; _tmp0[1] = blk2: { var _tmp2 = std.heap.page_allocator.alloc(i64, 3) catch unreachable; _tmp2[0] = 40; _tmp2[1] = 90; _tmp2[2] = 150; break :blk2 _tmp2; }; _tmp0[2] = blk3: { var _tmp3 = std.heap.page_allocator.alloc(i64, 3) catch unreachable; _tmp3[0] = 20; _tmp3[1] = 60; _tmp3[2] = 100; break :blk3 _tmp3; }; break :blk0 _tmp0; };
    image = image;
    var thresholds: []i64 = blk4: { var _tmp4 = std.heap.page_allocator.alloc(i64, 3) catch unreachable; _tmp4[0] = 50; _tmp4[1] = 100; _tmp4[2] = 150; break :blk4 _tmp4; };
    thresholds = thresholds;
    var segmented: [][]i64 = segment_image(image, thresholds);
    segmented = segmented;
    std.debug.print("{s}\n", .{_str(segmented)});
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        mochi_main();
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * std.mem.page_size;
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
