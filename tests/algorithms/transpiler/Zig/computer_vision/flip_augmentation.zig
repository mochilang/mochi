// Generated by Mochi Zig transpiler on 2025-08-07 14:57 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

var image_var: [][]i64 = &[_][]i64{};
var boxes_var: [][]f64 = &[_][]f64{};
var h_img_var: [][]i64 = &[_][]i64{};
var h_boxes_var: [][]f64 = &[_][]f64{};
var v_img_var: [][]i64 = &[_][]i64{};
var v_boxes_var: [][]f64 = &[_][]f64{};

fn flip_horizontal_image(img: [][]i64) [][]i64 {
    var flipped: [][]i64 = &[_][]i64{};
    flipped = flipped;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(img.len))) {
        var row: []i64 = img[@as(usize, @intCast(i))];
        row = row;
        var j: i64 = @as(i64, @intCast(row.len)) - 1;
        j = j;
        var new_row: []i64 = &[_]i64{};
        new_row = new_row;
        while (j >= 0) {
            new_row = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, new_row)) catch |err| handleError(err); _tmp.append(row[@as(usize, @intCast(j))]) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            j = j - 1;
        }
        flipped = blk: { var _tmp = std.ArrayList([]i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []i64, flipped)) catch |err| handleError(err); _tmp.append(new_row) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    return flipped;
}

fn flip_vertical_image(img: [][]i64) [][]i64 {
    var flipped: [][]i64 = &[_][]i64{};
    flipped = flipped;
    var i: i64 = @as(i64, @intCast(img.len)) - 1;
    i = i;
    while (i >= 0) {
        flipped = blk: { var _tmp = std.ArrayList([]i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []i64, flipped)) catch |err| handleError(err); _tmp.append(img[@as(usize, @intCast(i))]) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i - 1;
    }
    return flipped;
}

fn flip_horizontal_boxes(boxes_param: [][]f64) [][]f64 {
    var result: [][]f64 = &[_][]f64{};
    result = result;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(boxes_param.len))) {
        var b: []f64 = boxes_param[@as(usize, @intCast(i))];
        b = b;
        var x_new: f64 = 1.0 - b[@as(usize, @intCast(1))];
        x_new = x_new;
        result = blk: { var _tmp = std.ArrayList([]f64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []f64, result)) catch |err| handleError(err); _tmp.append(blk0: { var _tmp0 = std.heap.page_allocator.alloc(f64, 5) catch unreachable; _tmp0[0] = b[@as(usize, @intCast(0))]; _tmp0[1] = x_new; _tmp0[2] = b[@as(usize, @intCast(2))]; _tmp0[3] = b[@as(usize, @intCast(3))]; _tmp0[4] = b[@as(usize, @intCast(4))]; break :blk0 _tmp0; }) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    return result;
}

fn flip_vertical_boxes(boxes_param: [][]f64) [][]f64 {
    var result: [][]f64 = &[_][]f64{};
    result = result;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(boxes_param.len))) {
        var b: []f64 = boxes_param[@as(usize, @intCast(i))];
        b = b;
        var y_new: f64 = 1.0 - b[@as(usize, @intCast(2))];
        y_new = y_new;
        result = blk: { var _tmp = std.ArrayList([]f64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []f64, result)) catch |err| handleError(err); _tmp.append(blk1: { var _tmp1 = std.heap.page_allocator.alloc(f64, 5) catch unreachable; _tmp1[0] = b[@as(usize, @intCast(0))]; _tmp1[1] = b[@as(usize, @intCast(1))]; _tmp1[2] = y_new; _tmp1[3] = b[@as(usize, @intCast(3))]; _tmp1[4] = b[@as(usize, @intCast(4))]; break :blk1 _tmp1; }) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    return result;
}

fn print_image(img: [][]i64) void {
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(img.len))) {
        var row: []i64 = img[@as(usize, @intCast(i))];
        row = row;
        var j: i64 = 0;
        j = j;
        var line: []const u8 = "";
        line = line;
        while (j < @as(i64, @intCast(row.len))) {
            line = _concat_string(_concat_string(line, _str(row[@as(usize, @intCast(j))])), " ");
            j = j + 1;
        }
        std.debug.print("{s}\n", .{line});
        i = i + 1;
    }
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        image_var = blk2: { var _tmp2 = std.heap.page_allocator.alloc([]i64, 3) catch unreachable; _tmp2[0] = blk3: { var _tmp3 = std.heap.page_allocator.alloc(i64, 3) catch unreachable; _tmp3[0] = 1; _tmp3[1] = 2; _tmp3[2] = 3; break :blk3 _tmp3; }; _tmp2[1] = blk4: { var _tmp4 = std.heap.page_allocator.alloc(i64, 3) catch unreachable; _tmp4[0] = 4; _tmp4[1] = 5; _tmp4[2] = 6; break :blk4 _tmp4; }; _tmp2[2] = blk5: { var _tmp5 = std.heap.page_allocator.alloc(i64, 3) catch unreachable; _tmp5[0] = 7; _tmp5[1] = 8; _tmp5[2] = 9; break :blk5 _tmp5; }; break :blk2 _tmp2; };
        boxes_var = blk6: { var _tmp6 = std.heap.page_allocator.alloc([]f64, 2) catch unreachable; _tmp6[0] = blk7: { var _tmp7 = std.heap.page_allocator.alloc(f64, 5) catch unreachable; _tmp7[0] = 0.0; _tmp7[1] = 0.25; _tmp7[2] = 0.25; _tmp7[3] = 0.5; _tmp7[4] = 0.5; break :blk7 _tmp7; }; _tmp6[1] = blk8: { var _tmp8 = std.heap.page_allocator.alloc(f64, 5) catch unreachable; _tmp8[0] = 1.0; _tmp8[1] = 0.75; _tmp8[2] = 0.75; _tmp8[3] = 0.5; _tmp8[4] = 0.5; break :blk8 _tmp8; }; break :blk6 _tmp6; };
        h_img_var = flip_horizontal_image(image_var);
        h_boxes_var = flip_horizontal_boxes(boxes_var);
        v_img_var = flip_vertical_image(image_var);
        v_boxes_var = flip_vertical_boxes(boxes_var);
        std.debug.print("{s}\n", .{"Original image:"});
        print_image(image_var);
        std.debug.print("{s}\n", .{_str(boxes_var)});
        std.debug.print("{s}\n", .{"Horizontal flip:"});
        print_image(h_img_var);
        std.debug.print("{s}\n", .{_str(h_boxes_var)});
        std.debug.print("{s}\n", .{"Vertical flip:"});
        print_image(v_img_var);
        std.debug.print("{s}\n", .{_str(v_boxes_var)});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * std.mem.page_size;
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
