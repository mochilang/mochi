// Generated by Mochi Zig transpiler on 2025-08-07 00:08 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn maxpooling(arr: [][]i64, size: i64, stride: i64) [][]i64 {
    const n: i64 = @as(i64, @intCast(arr.len));
    if (n == 0 or @as(i64, @intCast(arr[@as(usize, @intCast(0))].len)) != n) {
        @panic("The input array is not a square matrix");
    }
    var result: [][]i64 = &[_][]i64{};
    var i: i64 = 0;
    while (i + size <= n) {
        var row: []i64 = &[_]i64{};
        var j: i64 = 0;
        while (j + size <= n) {
            var max_val: i64 = arr[@as(usize, @intCast(i))][@as(usize, @intCast(j))];
            var r: i64 = i;
            while (r < i + size) {
                var c: i64 = j;
                while (c < j + size) {
                    const val: i64 = arr[@as(usize, @intCast(r))][@as(usize, @intCast(c))];
                    if (val > max_val) {
                        max_val = val;
                    }
                    c = c + 1;
                }
                r = r + 1;
            }
            row = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, row)) catch |err| handleError(err); _tmp.append(max_val) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            j = j + stride;
        }
        result = blk: { var _tmp = std.ArrayList([]i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []i64, result)) catch |err| handleError(err); _tmp.append(row) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i + stride;
    }
    return result;
}

fn avgpooling(arr: [][]i64, size: i64, stride: i64) [][]i64 {
    const n: i64 = @as(i64, @intCast(arr.len));
    if (n == 0 or @as(i64, @intCast(arr[@as(usize, @intCast(0))].len)) != n) {
        @panic("The input array is not a square matrix");
    }
    var result: [][]i64 = &[_][]i64{};
    var i: i64 = 0;
    while (i + size <= n) {
        var row: []i64 = &[_]i64{};
        var j: i64 = 0;
        while (j + size <= n) {
            var sum: i64 = 0;
            var r: i64 = i;
            while (r < i + size) {
                var c: i64 = j;
                while (c < j + size) {
                    sum = sum + arr[@as(usize, @intCast(r))][@as(usize, @intCast(c))];
                    c = c + 1;
                }
                r = r + 1;
            }
            row = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, row)) catch |err| handleError(err); _tmp.append(@divTrunc(sum, size * size)) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            j = j + stride;
        }
        result = blk: { var _tmp = std.ArrayList([]i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []i64, result)) catch |err| handleError(err); _tmp.append(row) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i + stride;
    }
    return result;
}

fn print_matrix(mat: [][]i64) void {
    var i: i64 = 0;
    while (i < @as(i64, @intCast(mat.len))) {
        var line: []const u8 = "";
        var j: i64 = 0;
        while (j < @as(i64, @intCast(mat[@as(usize, @intCast(i))].len))) {
            line = _concat_string(line, _str(mat[@as(usize, @intCast(i))][@as(usize, @intCast(j))]));
            if (j < @as(i64, @intCast(mat[@as(usize, @intCast(i))].len)) - 1) {
                line = _concat_string(line, " ");
            }
            j = j + 1;
        }
        std.debug.print("{s}\n", .{line});
        i = i + 1;
    }
}

fn mochi_main() void {
    const arr1: [][]i64 = blk0: { var _tmp0 = std.heap.page_allocator.alloc([]i64, 4) catch unreachable; _tmp0[0] = blk1: { var _tmp1 = std.heap.page_allocator.alloc(i64, 4) catch unreachable; _tmp1[0] = 1; _tmp1[1] = 2; _tmp1[2] = 3; _tmp1[3] = 4; break :blk1 _tmp1; }; _tmp0[1] = blk2: { var _tmp2 = std.heap.page_allocator.alloc(i64, 4) catch unreachable; _tmp2[0] = 5; _tmp2[1] = 6; _tmp2[2] = 7; _tmp2[3] = 8; break :blk2 _tmp2; }; _tmp0[2] = blk3: { var _tmp3 = std.heap.page_allocator.alloc(i64, 4) catch unreachable; _tmp3[0] = 9; _tmp3[1] = 10; _tmp3[2] = 11; _tmp3[3] = 12; break :blk3 _tmp3; }; _tmp0[3] = blk4: { var _tmp4 = std.heap.page_allocator.alloc(i64, 4) catch unreachable; _tmp4[0] = 13; _tmp4[1] = 14; _tmp4[2] = 15; _tmp4[3] = 16; break :blk4 _tmp4; }; break :blk0 _tmp0; };
    const arr2: [][]i64 = blk5: { var _tmp5 = std.heap.page_allocator.alloc([]i64, 3) catch unreachable; _tmp5[0] = blk6: { var _tmp6 = std.heap.page_allocator.alloc(i64, 3) catch unreachable; _tmp6[0] = 147; _tmp6[1] = 180; _tmp6[2] = 122; break :blk6 _tmp6; }; _tmp5[1] = blk7: { var _tmp7 = std.heap.page_allocator.alloc(i64, 3) catch unreachable; _tmp7[0] = 241; _tmp7[1] = 76; _tmp7[2] = 32; break :blk7 _tmp7; }; _tmp5[2] = blk8: { var _tmp8 = std.heap.page_allocator.alloc(i64, 3) catch unreachable; _tmp8[0] = 126; _tmp8[1] = 13; _tmp8[2] = 157; break :blk8 _tmp8; }; break :blk5 _tmp5; };
    print_matrix(maxpooling(arr1, 2, 2));
    print_matrix(maxpooling(arr2, 2, 1));
    print_matrix(avgpooling(arr1, 2, 2));
    print_matrix(avgpooling(arr2, 2, 1));
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        mochi_main();
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    if (info == .Pointer and info.Pointer.size == .Slice) {
        var out = std.ArrayList(u8).init(std.heap.page_allocator);
        defer out.deinit();
        out.append('[') catch unreachable;
        for (v, 0..) |e, i| {
            if (i != 0) { out.append(' ') catch unreachable; }
            const s = _str(e);
            out.appendSlice(s) catch unreachable;
        }
        out.append(']') catch unreachable;
        return out.toOwnedSlice() catch unreachable;
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * std.mem.page_size;
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
