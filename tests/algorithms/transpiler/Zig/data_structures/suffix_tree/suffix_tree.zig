// Generated by Mochi Zig transpiler on 2025-08-24 22:16 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const Node = struct {
    children: std.StringHashMap(i64),
    is_end_of_string: bool,
    start: i64,
    end: i64,
};

const SuffixTree = struct {
    text: []const u8,
    nodes: []Node,
};

var st_var: SuffixTree = undefined;

fn new_node() Node {
    return .{ .children = std.StringHashMap(i64).init(std.heap.page_allocator), .is_end_of_string = false, .start = 0 -% 1, .end = 0 -% 1 };
}

fn has_key(m: *const std.StringHashMap(i64), k: []const u8) bool {
    var __mapit1 = m.keyIterator();
    while (__mapit1.next()) |__it0| {
        const key = __it0.*;
        if (std.mem.eql(u8, key, k)) {
            return true;
        }
    }
    return false;
}

fn add_suffix(tree_param: *SuffixTree, suffix: []const u8, index: i64) SuffixTree {
    var nodes: []Node = tree_param.nodes;
    nodes = nodes;
    var node_idx: i64 = 0;
    node_idx = node_idx;
    var j: i64 = 0;
    j = j;
    while (j < @as(i64, @intCast(suffix.len))) {
        const ch: []const u8 = suffix[@as(usize, @intCast(j))..@min(@as(usize, @intCast(j +% 1)), @as(usize, @intCast(suffix.len)))];
        var node: Node = nodes[_idx(nodes.len, node_idx)];
        node = node;
        if (!(has_key(&node.children, ch))) {
            nodes = blk0: { var _tmp = std.ArrayList(Node).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp.appendSlice(@as([]const Node, nodes)) catch |err| handleError(err); _tmp.append(new_node()) catch |err| handleError(err); break :blk0 (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            const new_idx: i64 = @as(i64, @intCast(nodes.len)) -% 1;
            node.children.put(ch, new_idx) catch unreachable;
        }
        node.children = node.children;
        nodes[_idx(nodes.len, node_idx)] = node;
        node_idx = (blk1: { if (node.children.get(ch)) |v| { break :blk1 v; } break :blk1 0; });
        j = j +% 1;
    }
    var node_1: Node = nodes[_idx(nodes.len, node_idx)];
    node_1 = node_1;
    node_1.is_end_of_string = true;
    node_1.start = index;
    node_1.end = index +% @as(i64, @intCast(suffix.len)) -% 1;
    nodes[_idx(nodes.len, node_idx)] = node_1;
    tree_param.nodes = nodes;
    return tree_param.*;
}

fn build_suffix_tree(tree: SuffixTree) SuffixTree {
    const n: i64 = @as(i64, @intCast(tree.text.len));
    var i: i64 = 0;
    i = i;
    var t: SuffixTree = tree;
    t = t;
    while (i < n) {
        var suffix_1: []const u8 = "";
        suffix_1 = suffix_1;
        var k_1: i64 = i;
        k_1 = k_1;
        while (k_1 < n) {
            suffix_1 = _concat_string(suffix_1, tree.text[@as(usize, @intCast(k_1))..@min(@as(usize, @intCast(k_1 +% 1)), @as(usize, @intCast(tree.text.len)))]);
            k_1 = k_1 +% 1;
        }
        t = add_suffix(&t, suffix_1, i);
        i = i +% 1;
    }
    return t;
}

fn new_suffix_tree(text: []const u8) SuffixTree {
    var tree_1: SuffixTree = .{ .text = text, .nodes = (&[_]Node{})[0..0] };
    tree_1 = tree_1;
    tree_1.nodes = blk2: { var _tmp_1 = std.ArrayList(Node).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_1.appendSlice(@as([]const Node, tree_1.nodes)) catch |err| handleError(err); _tmp_1.append(new_node()) catch |err| handleError(err); break :blk2 (_tmp_1.toOwnedSlice() catch |err| handleError(err)); };
    tree_1 = build_suffix_tree(tree_1);
    return tree_1;
}

fn search(tree_2: SuffixTree, pattern: []const u8) bool {
    var node_idx_1: i64 = 0;
    node_idx_1 = node_idx_1;
    var i_1: i64 = 0;
    i_1 = i_1;
    while (i_1 < @as(i64, @intCast(pattern.len))) {
        const ch_1: []const u8 = pattern[@as(usize, @intCast(i_1))..@min(@as(usize, @intCast(i_1 +% 1)), @as(usize, @intCast(pattern.len)))];
        const node_2: Node = tree_2.nodes[_idx(tree_2.nodes.len, node_idx_1)];
        if (!(has_key(&node_2.children, ch_1))) {
            return false;
        }
        node_idx_1 = (blk3: { if (node_2.children.get(ch_1)) |v| { break :blk3 v; } break :blk3 0; });
        i_1 = i_1 +% 1;
    }
    return true;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        st_var = new_suffix_tree("bananas");
        std.debug.print("{s}\n", .{_str(search(st_var, "ana"))});
        std.debug.print("{s}\n", .{_str(search(st_var, "apple"))});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
