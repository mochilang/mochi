// Generated by Mochi Zig transpiler on 2025-08-24 23:17 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const KDNode = struct {
    point: []f64,
    left: i64,
    right: i64,
};

var tree_var_1: []KDNode = std.heap.page_allocator.alloc(KDNode, 0) catch unreachable;
const pts_var: [][]f64 = &[_][]f64{};
var root_var: i64 = 0;

fn sort_points(points: [][]f64, axis: i64) [][]f64 {
    var arr: [][]f64 = blk0: { const tmp = std.heap.page_allocator.alloc([]f64, points.len) catch unreachable; @memcpy(tmp, points); break :blk0 tmp; };
    arr = arr;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(arr.len))) {
        var j: i64 = 0;
        j = j;
        while (j < @as(i64, @intCast(arr.len)) -% 1) {
            if (arr[_idx(arr.len, j)][_idx(arr[_idx(arr.len, j)].len, axis)] > arr[_idx(arr.len, j +% 1)][_idx(arr[_idx(arr.len, j +% 1)].len, axis)]) {
                const tmp: []f64 = arr[_idx(arr.len, j)];
                arr[_idx(arr.len, j)] = arr[_idx(arr.len, j +% 1)];
                arr[_idx(arr.len, j +% 1)] = tmp;
            }
            j = j +% 1;
        }
        i = i +% 1;
    }
    return arr;
}

fn build_kdtree(points_1: [][]f64, depth: i64) i64 {
    if (@as(i64, @intCast(points_1.len)) == 0) {
        return -1;
    }
    const k: i64 = @as(i64, @intCast(points_1[_idx(points_1.len, 0)].len));
    const axis_1: i64 = @mod(depth, k);
    const sorted: [][]f64 = sort_points(points_1, axis_1);
    const median_idx: i64 = @divTrunc(@as(i64, @intCast(sorted.len)), 2);
    const left_points: [][]f64 = sorted[@as(usize, @intCast(0))..@min(@as(usize, @intCast(median_idx)), @as(usize, @intCast(sorted.len)))];
    const right_points: [][]f64 = sorted[@as(usize, @intCast(median_idx +% 1))..@min(@as(usize, @intCast(@as(i64, @intCast(sorted.len)))), @as(usize, @intCast(sorted.len)))];
    const idx: i64 = @as(i64, @intCast(tree_var_1.len));
    tree_var_1 = blk1: { var _tmp = std.ArrayList(KDNode).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp.appendSlice(@as([]const KDNode, tree_var_1)) catch |err| handleError(err); _tmp.append(.{ .point = sorted[_idx(sorted.len, median_idx)], .left = -1, .right = -1 }) catch |err| handleError(err); break :blk1 (_tmp.toOwnedSlice() catch |err| handleError(err)); };
    const left_idx: i64 = build_kdtree(left_points, depth +% 1);
    const right_idx: i64 = build_kdtree(right_points, depth +% 1);
    var node: KDNode = tree_var_1[_idx(tree_var_1.len, idx)];
    node = node;
    node.left = left_idx;
    node.right = right_idx;
    tree_var_1[_idx(tree_var_1.len, idx)] = node;
    return idx;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        root_var = build_kdtree(pts_var, 0);
        std.debug.print("{s}\n", .{_str(tree_var_1)});
        std.debug.print("{s}\n", .{_str(root_var)});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
