// Generated by Mochi Zig transpiler on 2025-08-24 23:17 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const INF_var: f64 = 1000000000.0;
var seed_var_1: i64 = 1;

fn rand_float() f64 {
    seed_var_1 = @mod(seed_var_1 *% 1103515245 +% 12345, 2147483648);
    return @as(f64, @floatFromInt(seed_var_1)) / 2147483648.0;
}

fn hypercube_points(num_points: i64, cube_size: f64, num_dimensions: i64) [][]f64 {
    var pts: [][]f64 = std.heap.page_allocator.alloc([]f64, 0) catch unreachable;
    pts = pts;
    var i: i64 = 0;
    i = i;
    while (i < num_points) {
        var p: []f64 = std.heap.page_allocator.alloc(f64, 0) catch unreachable;
        p = p;
        var j: i64 = 0;
        j = j;
        while (j < num_dimensions) {
            const v: f64 = cube_size * rand_float();
            p = blk0: { var _tmp = std.ArrayList(f64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp.appendSlice(@as([]const f64, p)) catch |err| handleError(err); _tmp.append(v) catch |err| handleError(err); break :blk0 (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            j = j +% 1;
        }
        pts = blk1: { var _tmp_1 = std.ArrayList([]f64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_1.appendSlice(@as([]const []f64, pts)) catch |err| handleError(err); _tmp_1.append(p) catch |err| handleError(err); break :blk1 (_tmp_1.toOwnedSlice() catch |err| handleError(err)); };
        i = i +% 1;
    }
    return pts;
}

fn build_kdtree(points: [][]f64, depth: i64) [][]f64 {
    return points;
}

fn distance_sq(a: []f64, b: []f64) f64 {
    var sum: f64 = 0.0;
    sum = sum;
    var i_1: i64 = 0;
    i_1 = i_1;
    while (i_1 < @as(i64, @intCast(a.len))) {
        const d: f64 = a[_idx(a.len, i_1)] - b[_idx(b.len, i_1)];
        sum = sum + d * d;
        i_1 = i_1 +% 1;
    }
    return sum;
}

fn nearest_neighbour_search(points_1: [][]f64, query: []f64) std.StringHashMap(f64) {
    if (@as(i64, @intCast(points_1.len)) == 0) {
        return blk2: { var m = std.StringHashMap(f64).init(std.heap.page_allocator); m.put("index", @as(f64, @floatFromInt(0)) - 1.0) catch unreachable; m.put("dist", INF_var) catch unreachable; m.put("visited", 0.0) catch unreachable; break :blk2 m; };
    }
    var nearest_idx: i64 = 0;
    nearest_idx = nearest_idx;
    var nearest_dist: f64 = INF_var;
    nearest_dist = nearest_dist;
    var visited: i64 = 0;
    visited = visited;
    var i_2: i64 = 0;
    i_2 = i_2;
    while (i_2 < @as(i64, @intCast(points_1.len))) {
        const d_1: f64 = distance_sq(query, points_1[_idx(points_1.len, i_2)]);
        visited = visited +% 1;
        if (d_1 < nearest_dist) {
            nearest_dist = d_1;
            nearest_idx = i_2;
        }
        i_2 = i_2 +% 1;
    }
    return blk3: { var m_1 = std.StringHashMap(f64).init(std.heap.page_allocator); m_1.put("index", @as(f64, @floatFromInt(nearest_idx))) catch unreachable; m_1.put("dist", nearest_dist) catch unreachable; m_1.put("visited", @as(f64, @floatFromInt(visited))) catch unreachable; break :blk3 m_1; };
}

fn test_build_cases() void {
    const empty_pts: [][]f64 = std.heap.page_allocator.alloc([]f64, 0) catch unreachable;
    const tree0: [][]f64 = build_kdtree(empty_pts, 0);
    if (@as(i64, @intCast(tree0.len)) == 0) {
        std.debug.print("{s}\n", .{"case1 true"});
    } else {
        std.debug.print("{s}\n", .{"case1 false"});
    }
    const pts1: [][]f64 = hypercube_points(10, 10.0, 2);
    const tree1: [][]f64 = build_kdtree(pts1, 2);
    if (@as(i64, @intCast(tree1.len)) > 0 and @as(i64, @intCast(tree1[_idx(tree1.len, 0)].len)) == 2) {
        std.debug.print("{s}\n", .{"case2 true"});
    } else {
        std.debug.print("{s}\n", .{"case2 false"});
    }
    const pts2: [][]f64 = hypercube_points(10, 10.0, 3);
    const tree2: [][]f64 = build_kdtree(pts2, 0 -% 2);
    if (@as(i64, @intCast(tree2.len)) > 0 and @as(i64, @intCast(tree2[_idx(tree2.len, 0)].len)) == 3) {
        std.debug.print("{s}\n", .{"case3 true"});
    } else {
        std.debug.print("{s}\n", .{"case3 false"});
    }
}

fn test_search() void {
    const pts_1: [][]f64 = hypercube_points(10, 10.0, 2);
    const tree: [][]f64 = build_kdtree(pts_1, 0);
    const qp: []f64 = hypercube_points(1, 10.0, 2)[_idx(hypercube_points(1, 10.0, 2).len, 0)];
    var res: std.StringHashMap(f64) = nearest_neighbour_search(tree, qp);
    res = res;
    if (!std.math.approxEqAbs(f64, (blk4: { if (res.get("index")) |v| { break :blk4 v; } break :blk4 0; }), @as(f64, @floatFromInt(0)) - 1.0, 1e-6) and (blk5: { if (res.get("dist")) |v| { break :blk5 v; } break :blk5 0; }) >= 0.0 and (blk6: { if (res.get("visited")) |v| { break :blk6 v; } break :blk6 0; }) > 0.0) {
        std.debug.print("{s}\n", .{"search true"});
    } else {
        std.debug.print("{s}\n", .{"search false"});
    }
}

fn test_edge() void {
    const empty_pts_1: [][]f64 = std.heap.page_allocator.alloc([]f64, 0) catch unreachable;
    const tree_1: [][]f64 = build_kdtree(empty_pts_1, 0);
    const query_1: []f64 = blk7: { var _tmp_2 = [2]f64{0.0, 0.0}; break :blk7 _tmp_2[0..]; };
    var res_1: std.StringHashMap(f64) = nearest_neighbour_search(tree_1, query_1);
    res_1 = res_1;
    if (std.math.approxEqAbs(f64, (blk8: { if (res_1.get("index")) |v| { break :blk8 v; } break :blk8 0; }), @as(f64, @floatFromInt(0)) - 1.0, 1e-6) and (blk9: { if (res_1.get("dist")) |v| { break :blk9 v; } break :blk9 0; }) > 100000000.0 and std.math.approxEqAbs(f64, (blk10: { if (res_1.get("visited")) |v| { break :blk10 v; } break :blk10 0; }), 0.0, 1e-6)) {
        std.debug.print("{s}\n", .{"edge true"});
    } else {
        std.debug.print("{s}\n", .{"edge false"});
    }
}

fn mochi_main() void {
    seed_var_1 = 1;
    test_build_cases();
    test_search();
    test_edge();
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        mochi_main();
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
