// Generated by Mochi Zig transpiler on 2025-08-24 23:17 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const Node = struct {
    point: []f64,
    left: i64,
    right: i64,
};

const BuildResult = struct {
    index: i64,
    nodes: []Node,
};

const SearchResult = struct {
    point: []f64,
    dist: f64,
    visited: i64,
};

var seed_var_1: i64 = 1;

fn rand() i64 {
    seed_var_1 = @mod(seed_var_1 *% 1103515245 +% 12345, 2147483648);
    return seed_var_1;
}

fn random() f64 {
    return 1.0 * @as(f64, @floatFromInt(rand())) / 2147483648.0;
}

fn hypercube_points(num_points: i64, cube_size: f64, num_dimensions: i64) [][]f64 {
    var pts: [][]f64 = std.heap.page_allocator.alloc([]f64, 0) catch unreachable;
    pts = pts;
    var i: i64 = 0;
    i = i;
    while (i < num_points) {
        var p: []f64 = std.heap.page_allocator.alloc(f64, 0) catch unreachable;
        p = p;
        var j: i64 = 0;
        j = j;
        while (j < num_dimensions) {
            p = blk0: { var _tmp = std.ArrayList(f64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp.appendSlice(@as([]const f64, p)) catch |err| handleError(err); _tmp.append(cube_size * random()) catch |err| handleError(err); break :blk0 (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            j = j +% 1;
        }
        pts = blk1: { var _tmp_1 = std.ArrayList([]f64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_1.appendSlice(@as([]const []f64, pts)) catch |err| handleError(err); _tmp_1.append(p) catch |err| handleError(err); break :blk1 (_tmp_1.toOwnedSlice() catch |err| handleError(err)); };
        i = i +% 1;
    }
    return pts;
}

fn sort_points(points_param: [][]f64, axis: i64) [][]f64 {
    var points_var: [][]f64 = points_param;
    points_var = points_var;
    const n: i64 = @as(i64, @intCast(points_var.len));
    var i_1: i64 = 1;
    i_1 = i_1;
    while (i_1 < n) {
        const key: []f64 = points_var[_idx(points_var.len, i_1)];
        var j_1: i64 = i_1 -% 1;
        j_1 = j_1;
        while (j_1 >= 0 and points_var[_idx(points_var.len, j_1)][_idx(points_var[_idx(points_var.len, j_1)].len, axis)] > key[_idx(key.len, axis)]) {
            points_var[_idx(points_var.len, j_1 +% 1)] = points_var[_idx(points_var.len, j_1)];
            j_1 = j_1 -% 1;
        }
        points_var[_idx(points_var.len, j_1 +% 1)] = key;
        i_1 = i_1 +% 1;
    }
    return points_var;
}

fn sublist(arr: [][]f64, start: i64, end: i64) [][]f64 {
    var res: [][]f64 = std.heap.page_allocator.alloc([]f64, 0) catch unreachable;
    res = res;
    var i_2: i64 = start;
    i_2 = i_2;
    while (i_2 < end) {
        res = blk2: { var _tmp_2 = std.ArrayList([]f64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_2.appendSlice(@as([]const []f64, res)) catch |err| handleError(err); _tmp_2.append(arr[_idx(arr.len, i_2)]) catch |err| handleError(err); break :blk2 (_tmp_2.toOwnedSlice() catch |err| handleError(err)); };
        i_2 = i_2 +% 1;
    }
    return res;
}

fn shift_nodes(nodes_param: []Node, offset: i64) []Node {
    var nodes_var: []Node = nodes_param;
    nodes_var = nodes_var;
    var i_3: i64 = 0;
    i_3 = i_3;
    while (i_3 < @as(i64, @intCast(nodes_var.len))) {
        if (nodes_var[_idx(nodes_var.len, i_3)].left != -1) {
            nodes_var[_idx(nodes_var.len, i_3)].left = nodes_var[_idx(nodes_var.len, i_3)].left +% offset;
        }
        if (nodes_var[_idx(nodes_var.len, i_3)].right != -1) {
            nodes_var[_idx(nodes_var.len, i_3)].right = nodes_var[_idx(nodes_var.len, i_3)].right +% offset;
        }
        i_3 = i_3 +% 1;
    }
    return nodes_var;
}

fn build_kdtree(points_param_1: [][]f64, depth: i64) BuildResult {
    var points_var_1: [][]f64 = points_param_1;
    points_var_1 = points_var_1;
    if (@as(i64, @intCast(points_var_1.len)) == 0) {
        return .{ .index = -1, .nodes = (&[_]Node{})[0..0] };
    }
    const k: i64 = @as(i64, @intCast(points_var_1[_idx(points_var_1.len, 0)].len));
    const axis_1: i64 = @mod(depth, k);
    points_var_1 = sort_points(points_var_1, axis_1);
    const median: i64 = @divTrunc(@as(i64, @intCast(points_var_1.len)), 2);
    const left_points: [][]f64 = sublist(points_var_1, 0, median);
    const right_points: [][]f64 = sublist(points_var_1, median +% 1, @as(i64, @intCast(points_var_1.len)));
    const left_res: BuildResult = build_kdtree(left_points, depth +% 1);
    const right_res: BuildResult = build_kdtree(right_points, depth +% 1);
    const offset_1: i64 = @as(i64, @intCast(left_res.nodes.len)) +% 1;
    _ = shift_nodes(right_res.nodes, offset_1);
    const right_index: i64 = if (right_res.index == -1) -1 else right_res.index +% offset_1;
    left_res.nodes = blk3: { var _tmp_3 = std.ArrayList(Node).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_3.appendSlice(@as([]const Node, left_res.nodes)) catch |err| handleError(err); _tmp_3.append(.{ .point = points_var_1[_idx(points_var_1.len, median)], .left = left_res.index, .right = right_index }) catch |err| handleError(err); break :blk3 (_tmp_3.toOwnedSlice() catch |err| handleError(err)); };
    left_res.nodes = blk4: { var _tmp_4 = std.ArrayList(Node).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_4.appendSlice(@as([]const Node, left_res.nodes)) catch |err| handleError(err); _tmp_4.appendSlice(@as([]const Node, shifted_right)) catch |err| handleError(err); break :blk4 (_tmp_4.toOwnedSlice() catch |err| handleError(err)); };
    const root_index: i64 = @as(i64, @intCast(left_res.nodes.len));
    return .{ .index = root_index, .nodes = left_res.nodes };
}

fn square_distance(a: []f64, b: []f64) f64 {
    var sum: f64 = 0.0;
    sum = sum;
    var i_4: i64 = 0;
    i_4 = i_4;
    while (i_4 < @as(i64, @intCast(a.len))) {
        const diff: f64 = a[_idx(a.len, i_4)] - b[_idx(b.len, i_4)];
        sum = sum + diff * diff;
        i_4 = i_4 +% 1;
    }
    return sum;
}

fn nearest_neighbour_search(tree: []Node, root: i64, query_point: []f64) SearchResult {
    var nearest_point: []f64 = std.heap.page_allocator.alloc(f64, 0) catch unreachable;
    nearest_point = nearest_point;
    var nearest_dist: f64 = 0.0;
    nearest_dist = nearest_dist;
    var visited: i64 = 0;
    visited = visited;
    var i_5: i64 = 0;
    i_5 = i_5;
    while (i_5 < @as(i64, @intCast(tree.len))) {
        const node: Node = tree[_idx(tree.len, i_5)];
        const dist: f64 = square_distance(query_point, node.point);
        visited = visited +% 1;
        if (visited == 1 or dist < nearest_dist) {
            nearest_point = node.point;
            nearest_dist = dist;
        }
        i_5 = i_5 +% 1;
    }
    return .{ .point = nearest_point, .dist = nearest_dist, .visited = visited };
}

fn list_to_string(arr_1: []f64) []const u8 {
    var s: []const u8 = "[";
    s = s;
    var i_6: i64 = 0;
    i_6 = i_6;
    while (i_6 < @as(i64, @intCast(arr_1.len))) {
        s = _concat_string(s, _str(arr_1[_idx(arr_1.len, i_6)]));
        if (i_6 < @as(i64, @intCast(arr_1.len)) -% 1) {
            s = _concat_string(s, ", ");
        }
        i_6 = i_6 +% 1;
    }
    return _concat_string(s, "]");
}

fn mochi_main() void {
    const num_points_1: i64 = 5000;
    const cube_size_1: f64 = 10.0;
    const num_dimensions_1: i64 = 10;
    const pts_1: [][]f64 = hypercube_points(num_points_1, cube_size_1, num_dimensions_1);
    const build: BuildResult = build_kdtree(pts_1, 0);
    var query: []f64 = std.heap.page_allocator.alloc(f64, 0) catch unreachable;
    query = query;
    var i_7: i64 = 0;
    i_7 = i_7;
    while (i_7 < num_dimensions_1) {
        query = blk5: { var _tmp_5 = std.ArrayList(f64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_5.appendSlice(@as([]const f64, query)) catch |err| handleError(err); _tmp_5.append(random()) catch |err| handleError(err); break :blk5 (_tmp_5.toOwnedSlice() catch |err| handleError(err)); };
        i_7 = i_7 +% 1;
    }
    const res_1: SearchResult = nearest_neighbour_search(build.nodes, build.index, query);
    std.debug.print("{s}\n", .{_concat_string("Query point: ", list_to_string(query))});
    std.debug.print("{s}\n", .{_concat_string("Nearest point: ", list_to_string(res_1.point))});
    std.debug.print("{s}\n", .{_concat_string("Distance: ", _str(res_1.dist))});
    std.debug.print("{s}\n", .{_concat_string("Nodes visited: ", _str(res_1.visited))});
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        mochi_main();
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
