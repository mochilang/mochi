// Generated by Mochi Zig transpiler on 2025-08-24 23:17 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const KDNode = struct {
    point: []f64,
    left: i64,
    right: i64,
};

const SearchResult = struct {
    point: []f64,
    distance: f64,
    nodes_visited: i64,
};

var nodes_var: []KDNode = &[_]KDNode{};
const queries_var: [][]f64 = &[_][]f64{};
var q_var_1: i64 = 0;

fn square_distance(a: []f64, b: []f64) f64 {
    var i: i64 = 0;
    i = i;
    var total: f64 = 0.0;
    total = total;
    while (i < @as(i64, @intCast(a.len))) {
        const diff: f64 = a[_idx(a.len, i)] - b[_idx(b.len, i)];
        total = total + diff * diff;
        i = i +% 1;
    }
    return total;
}

fn search(nodes_param: []KDNode, index: i64, query_point: []f64, depth: i64, best: *const SearchResult) SearchResult {
    if (index == 0 -% 1) {
        return best.*;
    }
    var result: SearchResult = best.*;
    result = result;
    result.nodes_visited = result.nodes_visited +% 1;
    const node: KDNode = nodes_param[_idx(nodes_param.len, index)];
    const current_dist: f64 = square_distance(query_point, node.point);
    if (@as(i64, @intCast(result.point.len)) == 0 or current_dist < result.distance) {
        result.point = node.point;
        result.distance = current_dist;
    }
    const k: i64 = @as(i64, @intCast(query_point.len));
    const axis: i64 = @mod(depth, k);
    var nearer: i64 = node.left;
    nearer = nearer;
    var further: i64 = node.right;
    further = further;
    if (query_point[_idx(query_point.len, axis)] > node.point[_idx(node.point.len, axis)]) {
        nearer = node.right;
        further = node.left;
    }
    result = search(nodes_param, nearer, query_point, depth +% 1, &result);
    const diff_1: f64 = query_point[_idx(query_point.len, axis)] - node.point[_idx(node.point.len, axis)];
    if (diff_1 * diff_1 < result.distance) {
        result = search(nodes_param, further, query_point, depth +% 1, &result);
    }
    return result;
}

fn nearest_neighbour_search(nodes_param_1: []KDNode, root: i64, query_point_1: []f64) SearchResult {
    const initial: SearchResult = .{ .point = (&[_]f64{})[0..0], .distance = 1000000000000000019884624838656.0, .nodes_visited = 0 };
    return search(nodes_param_1, root, query_point_1, 0, @constCast(&initial));
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        nodes_var = blk0: { var _tmp = std.ArrayList(KDNode).init(std.heap.page_allocator); _tmp.append(.{ .point = @constCast(([2]f64{9.0, 1.0})[0..2]), .left = 1, .right = 4 }) catch unreachable; _tmp.append(.{ .point = @constCast(([2]f64{2.0, 7.0})[0..2]), .left = 2, .right = 3 }) catch unreachable; _tmp.append(.{ .point = @constCast(([2]f64{3.0, 6.0})[0..2]), .left = 0 -% 1, .right = 0 -% 1 }) catch unreachable; _tmp.append(.{ .point = @constCast(([2]f64{6.0, 12.0})[0..2]), .left = 0 -% 1, .right = 0 -% 1 }) catch unreachable; _tmp.append(.{ .point = @constCast(([2]f64{17.0, 15.0})[0..2]), .left = 5, .right = 6 }) catch unreachable; _tmp.append(.{ .point = @constCast(([2]f64{13.0, 15.0})[0..2]), .left = 0 -% 1, .right = 0 -% 1 }) catch unreachable; _tmp.append(.{ .point = @constCast(([2]f64{10.0, 19.0})[0..2]), .left = 0 -% 1, .right = 0 -% 1 }) catch unreachable; break :blk0 (_tmp.toOwnedSlice() catch unreachable); };
        while (q_var_1 < @as(i64, @intCast(queries_var.len))) {
            const res: SearchResult = nearest_neighbour_search(nodes_var[0..], 0, queries_var[_idx(queries_var.len, q_var_1)]);
            std.debug.print("{s}\n", .{_concat_string(_concat_string(_concat_string(_concat_string(_concat_string(_str(res.point), " "), _str(res.distance)), " "), _str(res.nodes_visited)), "\n")});
            q_var_1 = q_var_1 +% 1;
        }
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
