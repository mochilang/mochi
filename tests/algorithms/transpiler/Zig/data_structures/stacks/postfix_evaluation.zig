// Generated by Mochi Zig transpiler on 2025-08-24 23:17 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn slice_without_last(xs: []f64) []f64 {
    var res: []f64 = std.heap.page_allocator.alloc(f64, 0) catch unreachable;
    res = res;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(xs.len)) -% 1) {
        res = blk0: { var _tmp = std.ArrayList(f64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp.appendSlice(@as([]const f64, res)) catch |err| handleError(err); _tmp.append(xs[_idx(xs.len, i)]) catch |err| handleError(err); break :blk0 (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i +% 1;
    }
    return res;
}

fn parse_float(token: []const u8) f64 {
    var sign: f64 = 1.0;
    sign = sign;
    var idx: i64 = 0;
    idx = idx;
    if (@as(i64, @intCast(token.len)) > 0) {
        const first: []const u8 = token[@as(usize, @intCast(0))..@min(@as(usize, @intCast(1)), @as(usize, @intCast(token.len)))];
        if (std.mem.eql(u8, first, "-")) {
            sign = @as(f64, @floatFromInt(0)) - 1.0;
            idx = 1;
        } else {
            if (std.mem.eql(u8, first, "+")) {
                idx = 1;
            }
        }
    }
    var int_part: i64 = 0;
    int_part = int_part;
    while (idx < @as(i64, @intCast(token.len)) and !std.mem.eql(u8, token[@as(usize, @intCast(idx))..@min(@as(usize, @intCast(idx +% 1)), @as(usize, @intCast(token.len)))], ".")) {
        int_part = int_part *% 10 +% (std.fmt.parseInt(i64, token[@as(usize, @intCast(idx))..@min(@as(usize, @intCast(idx +% 1)), @as(usize, @intCast(token.len)))], 10) catch 0);
        idx = idx +% 1;
    }
    var result: f64 = 1.0 * @as(f64, @floatFromInt(int_part));
    result = result;
    if (idx < @as(i64, @intCast(token.len)) and std.mem.eql(u8, token[@as(usize, @intCast(idx))..@min(@as(usize, @intCast(idx +% 1)), @as(usize, @intCast(token.len)))], ".")) {
        idx = idx +% 1;
        var place: f64 = 0.100000000000000006;
        place = place;
        while (idx < @as(i64, @intCast(token.len))) {
            const digit: i64 = (std.fmt.parseInt(i64, token[@as(usize, @intCast(idx))..@min(@as(usize, @intCast(idx +% 1)), @as(usize, @intCast(token.len)))], 10) catch 0);
            result = result + place * (1.0 * @as(f64, @floatFromInt(digit)));
            place = place / 10.0;
            idx = idx +% 1;
        }
    }
    return sign * result;
}

fn pow_float(base: f64, exp: f64) f64 {
    var result_1: f64 = 1.0;
    result_1 = result_1;
    var i_1: i64 = 0;
    i_1 = i_1;
    const e: i64 = @as(i64, @intFromFloat(exp));
    while (i_1 < e) {
        result_1 = result_1 * base;
        i_1 = i_1 +% 1;
    }
    return result_1;
}

fn apply_op(a: f64, b: f64, op: []const u8) f64 {
    if (std.mem.eql(u8, op, "+")) {
        return a + b;
    }
    if (std.mem.eql(u8, op, "-")) {
        return a - b;
    }
    if (std.mem.eql(u8, op, "*")) {
        return a * b;
    }
    if (std.mem.eql(u8, op, "/")) {
        return a / b;
    }
    if (std.mem.eql(u8, op, "^")) {
        return pow_float(a, b);
    }
    return 0.0;
}

fn evaluate(tokens: [][]const u8) f64 {
    if (@as(i64, @intCast(tokens.len)) == 0) {
        return 0.0;
    }
    var stack: []f64 = std.heap.page_allocator.alloc(f64, 0) catch unreachable;
    stack = stack;
    for (tokens) |__it0| {
        const token_1 = __it0;
        if (std.mem.eql(u8, token_1, "+") or std.mem.eql(u8, token_1, "-") or std.mem.eql(u8, token_1, "*") or std.mem.eql(u8, token_1, "/") or std.mem.eql(u8, token_1, "^")) {
            if ((std.mem.eql(u8, token_1, "+") or std.mem.eql(u8, token_1, "-")) and @as(i64, @intCast(stack.len)) < 2) {
                const b_1: f64 = stack[_idx(stack.len, @as(i64, @intCast(stack.len)) -% 1)];
                stack = slice_without_last(stack);
                if (std.mem.eql(u8, token_1, "-")) {
                    stack = blk1: { var _tmp_1 = std.ArrayList(f64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_1.appendSlice(@as([]const f64, stack)) catch |err| handleError(err); _tmp_1.append(0.0 - b_1) catch |err| handleError(err); break :blk1 (_tmp_1.toOwnedSlice() catch |err| handleError(err)); };
                } else {
                    stack = blk2: { var _tmp_2 = std.ArrayList(f64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_2.appendSlice(@as([]const f64, stack)) catch |err| handleError(err); _tmp_2.append(b_1) catch |err| handleError(err); break :blk2 (_tmp_2.toOwnedSlice() catch |err| handleError(err)); };
                }
            } else {
                const b_2: f64 = stack[_idx(stack.len, @as(i64, @intCast(stack.len)) -% 1)];
                stack = slice_without_last(stack);
                const a_1: f64 = stack[_idx(stack.len, @as(i64, @intCast(stack.len)) -% 1)];
                stack = slice_without_last(stack);
                const result_2: f64 = apply_op(a_1, b_2, token_1);
                stack = blk3: { var _tmp_3 = std.ArrayList(f64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_3.appendSlice(@as([]const f64, stack)) catch |err| handleError(err); _tmp_3.append(result_2) catch |err| handleError(err); break :blk3 (_tmp_3.toOwnedSlice() catch |err| handleError(err)); };
            }
        } else {
            stack = blk4: { var _tmp_4 = std.ArrayList(f64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_4.appendSlice(@as([]const f64, stack)) catch |err| handleError(err); _tmp_4.append(parse_float(token_1)) catch |err| handleError(err); break :blk4 (_tmp_4.toOwnedSlice() catch |err| handleError(err)); };
        }
    }
    if (@as(i64, @intCast(stack.len)) != 1) {
        @panic("Invalid postfix expression");
    }
    return stack[_idx(stack.len, 0)];
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        std.debug.print("{s}\n", .{_str(evaluate(blk5: { var _tmp_5 = [5][]const u8{"2", "1", "+", "3", "*"}; break :blk5 _tmp_5[0..]; }))});
        std.debug.print("{s}\n", .{_str(evaluate(blk6: { var _tmp_6 = [5][]const u8{"4", "13", "5", "/", "+"}; break :blk6 _tmp_6[0..]; }))});
        std.debug.print("{s}\n", .{_str(evaluate(blk7: { var _tmp_7 = [5][]const u8{"5", "6", "9", "*", "+"}; break :blk7 _tmp_7[0..]; }))});
        std.debug.print("{s}\n", .{_str(evaluate(blk8: { var _tmp_8 = [4][]const u8{"2", "-", "3", "+"}; break :blk8 _tmp_8[0..]; }))});
        std.debug.print("{s}\n", .{_str(evaluate(@constCast((&[_][]const u8{})[0..0])))});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
