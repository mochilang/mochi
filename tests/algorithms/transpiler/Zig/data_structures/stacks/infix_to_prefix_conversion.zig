// Generated by Mochi Zig transpiler on 2025-08-24 23:17 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

var PRIORITY_var: std.StringHashMap(i64) = std.StringHashMap(i64).init(std.heap.page_allocator);
const LETTERS_var: []const u8 = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
const DIGITS_var: []const u8 = "0123456789";

fn is_alpha(ch: []const u8) bool {
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(LETTERS_var.len))) {
        if (std.mem.eql(u8, LETTERS_var[_idx(LETTERS_var.len, i).._idx(LETTERS_var.len, i) + 1], ch)) {
            return true;
        }
        i = i +% 1;
    }
    return false;
}

fn is_digit(ch_1: []const u8) bool {
    var i_1: i64 = 0;
    i_1 = i_1;
    while (i_1 < @as(i64, @intCast(DIGITS_var.len))) {
        if (std.mem.eql(u8, DIGITS_var[_idx(DIGITS_var.len, i_1).._idx(DIGITS_var.len, i_1) + 1], ch_1)) {
            return true;
        }
        i_1 = i_1 +% 1;
    }
    return false;
}

fn reverse_string(s: []const u8) []const u8 {
    var out: []const u8 = "";
    out = out;
    var i_2: i64 = @as(i64, @intCast(s.len)) -% 1;
    i_2 = i_2;
    while (i_2 >= 0) {
        out = _concat_string(out, s[_idx(s.len, i_2).._idx(s.len, i_2) + 1]);
        i_2 = i_2 -% 1;
    }
    return out;
}

fn infix_to_postfix(infix: []const u8) []const u8 {
    var stack: [][]const u8 = std.heap.page_allocator.alloc([]const u8, 0) catch unreachable;
    stack = stack;
    var post: [][]const u8 = std.heap.page_allocator.alloc([]const u8, 0) catch unreachable;
    post = post;
    var i_3: i64 = 0;
    i_3 = i_3;
    while (i_3 < @as(i64, @intCast(infix.len))) {
        const x: []const u8 = infix[_idx(infix.len, i_3).._idx(infix.len, i_3) + 1];
        if (is_alpha(x) or is_digit(x)) {
            post = blk0: { var _tmp = std.ArrayList([]const u8).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp.appendSlice(@as([]const []const u8, post)) catch |err| handleError(err); _tmp.append(@constCast(x)) catch |err| handleError(err); break :blk0 (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        } else {
            if (std.mem.eql(u8, x, "(")) {
                stack = blk1: { var _tmp_1 = std.ArrayList([]const u8).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_1.appendSlice(@as([]const []const u8, stack)) catch |err| handleError(err); _tmp_1.append(@constCast(x)) catch |err| handleError(err); break :blk1 (_tmp_1.toOwnedSlice() catch |err| handleError(err)); };
            } else {
                if (std.mem.eql(u8, x, ")")) {
                    if (@as(i64, @intCast(stack.len)) == 0) {
                        @panic("list index out of range");
                    }
                    while (!std.mem.eql(u8, stack[_idx(stack.len, @as(i64, @intCast(stack.len)) -% 1)], "(")) {
                        post = blk2: { var _tmp_2 = std.ArrayList([]const u8).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_2.appendSlice(@as([]const []const u8, post)) catch |err| handleError(err); _tmp_2.append(@constCast(stack[_idx(stack.len, @as(i64, @intCast(stack.len)) -% 1)])) catch |err| handleError(err); break :blk2 (_tmp_2.toOwnedSlice() catch |err| handleError(err)); };
                        stack = stack[@as(usize, @intCast(0))..@min(@as(usize, @intCast(@as(i64, @intCast(stack.len)) -% 1)), @as(usize, @intCast(stack.len)))];
                    }
                    stack = stack[@as(usize, @intCast(0))..@min(@as(usize, @intCast(@as(i64, @intCast(stack.len)) -% 1)), @as(usize, @intCast(stack.len)))];
                } else {
                    if (@as(i64, @intCast(stack.len)) == 0) {
                        stack = blk3: { var _tmp_3 = std.ArrayList([]const u8).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_3.appendSlice(@as([]const []const u8, stack)) catch |err| handleError(err); _tmp_3.append(@constCast(x)) catch |err| handleError(err); break :blk3 (_tmp_3.toOwnedSlice() catch |err| handleError(err)); };
                    } else {
                        while (@as(i64, @intCast(stack.len)) > 0 and !std.mem.eql(u8, stack[_idx(stack.len, @as(i64, @intCast(stack.len)) -% 1)], "(") and (blk4: { if (PRIORITY_var.get(x)) |v| { break :blk4 v; } break :blk4 0; }) <= (blk5: { if (PRIORITY_var.get(stack[_idx(stack.len, @as(i64, @intCast(stack.len)) -% 1)])) |v| { break :blk5 v; } break :blk5 0; })) {
                            post = blk6: { var _tmp_4 = std.ArrayList([]const u8).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_4.appendSlice(@as([]const []const u8, post)) catch |err| handleError(err); _tmp_4.append(@constCast(stack[_idx(stack.len, @as(i64, @intCast(stack.len)) -% 1)])) catch |err| handleError(err); break :blk6 (_tmp_4.toOwnedSlice() catch |err| handleError(err)); };
                            stack = stack[@as(usize, @intCast(0))..@min(@as(usize, @intCast(@as(i64, @intCast(stack.len)) -% 1)), @as(usize, @intCast(stack.len)))];
                        }
                        stack = blk7: { var _tmp_5 = std.ArrayList([]const u8).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_5.appendSlice(@as([]const []const u8, stack)) catch |err| handleError(err); _tmp_5.append(@constCast(x)) catch |err| handleError(err); break :blk7 (_tmp_5.toOwnedSlice() catch |err| handleError(err)); };
                    }
                }
            }
        }
        i_3 = i_3 +% 1;
    }
    while (@as(i64, @intCast(stack.len)) > 0) {
        if (std.mem.eql(u8, stack[_idx(stack.len, @as(i64, @intCast(stack.len)) -% 1)], "(")) {
            @panic("invalid expression");
        }
        post = blk8: { var _tmp_6 = std.ArrayList([]const u8).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_6.appendSlice(@as([]const []const u8, post)) catch |err| handleError(err); _tmp_6.append(@constCast(stack[_idx(stack.len, @as(i64, @intCast(stack.len)) -% 1)])) catch |err| handleError(err); break :blk8 (_tmp_6.toOwnedSlice() catch |err| handleError(err)); };
        stack = stack[@as(usize, @intCast(0))..@min(@as(usize, @intCast(@as(i64, @intCast(stack.len)) -% 1)), @as(usize, @intCast(stack.len)))];
    }
    var res: []const u8 = "";
    res = res;
    var j: i64 = 0;
    j = j;
    while (j < @as(i64, @intCast(post.len))) {
        res = _concat_string(res, post[_idx(post.len, j)]);
        j = j +% 1;
    }
    return res;
}

fn infix_to_prefix(infix_1: []const u8) []const u8 {
    var reversed: []const u8 = "";
    reversed = reversed;
    var i_4: i64 = @as(i64, @intCast(infix_1.len)) -% 1;
    i_4 = i_4;
    while (i_4 >= 0) {
        const ch_2: []const u8 = infix_1[_idx(infix_1.len, i_4).._idx(infix_1.len, i_4) + 1];
        if (std.mem.eql(u8, ch_2, "(")) {
            reversed = _concat_string(reversed, ")");
        } else {
            if (std.mem.eql(u8, ch_2, ")")) {
                reversed = _concat_string(reversed, "(");
            } else {
                reversed = _concat_string(reversed, ch_2);
            }
        }
        i_4 = i_4 -% 1;
    }
    const postfix: []const u8 = infix_to_postfix(reversed);
    const prefix: []const u8 = reverse_string(postfix);
    return prefix;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        PRIORITY_var = blk9: { var m = std.StringHashMap(i64).init(std.heap.page_allocator); m.put("^", 3) catch unreachable; m.put("*", 2) catch unreachable; m.put("/", 2) catch unreachable; m.put("%", 2) catch unreachable; m.put("+", 1) catch unreachable; m.put("-", 1) catch unreachable; break :blk9 m; };
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}
