// Generated by Mochi Zig transpiler on 2025-08-24 23:17 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

var arr_var: []f64 = &[_]f64{};
var expected_var: []f64 = &[_]f64{};

fn next_greatest_element_slow(xs: []f64) []f64 {
    var res: []f64 = std.heap.page_allocator.alloc(f64, 0) catch unreachable;
    res = res;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(xs.len))) {
        var next: f64 = @as(f64, @floatFromInt(0)) - 1.0;
        next = next;
        var j: i64 = i +% 1;
        j = j;
        while (j < @as(i64, @intCast(xs.len))) {
            if (xs[_idx(xs.len, i)] < xs[_idx(xs.len, j)]) {
                next = xs[_idx(xs.len, j)];
                break;
            }
            j = j +% 1;
        }
        res = blk0: { var _tmp = std.ArrayList(f64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp.appendSlice(@as([]const f64, res)) catch |err| handleError(err); _tmp.append(next) catch |err| handleError(err); break :blk0 (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i +% 1;
    }
    return res;
}

fn next_greatest_element_fast(xs_1: []f64) []f64 {
    var res_1: []f64 = std.heap.page_allocator.alloc(f64, 0) catch unreachable;
    res_1 = res_1;
    var i_1: i64 = 0;
    i_1 = i_1;
    while (i_1 < @as(i64, @intCast(xs_1.len))) {
        var next_1: f64 = @as(f64, @floatFromInt(0)) - 1.0;
        next_1 = next_1;
        var j_1: i64 = i_1 +% 1;
        j_1 = j_1;
        while (j_1 < @as(i64, @intCast(xs_1.len))) {
            const inner: f64 = xs_1[_idx(xs_1.len, j_1)];
            if (xs_1[_idx(xs_1.len, i_1)] < inner) {
                next_1 = inner;
                break;
            }
            j_1 = j_1 +% 1;
        }
        res_1 = blk1: { var _tmp_1 = std.ArrayList(f64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_1.appendSlice(@as([]const f64, res_1)) catch |err| handleError(err); _tmp_1.append(next_1) catch |err| handleError(err); break :blk1 (_tmp_1.toOwnedSlice() catch |err| handleError(err)); };
        i_1 = i_1 +% 1;
    }
    return res_1;
}

fn set_at_float(xs_2: []f64, idx: i64, value: f64) []f64 {
    var i_2: i64 = 0;
    i_2 = i_2;
    var res_2: []f64 = std.heap.page_allocator.alloc(f64, 0) catch unreachable;
    res_2 = res_2;
    while (i_2 < @as(i64, @intCast(xs_2.len))) {
        if (i_2 == idx) {
            res_2 = blk2: { var _tmp_2 = std.ArrayList(f64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_2.appendSlice(@as([]const f64, res_2)) catch |err| handleError(err); _tmp_2.append(value) catch |err| handleError(err); break :blk2 (_tmp_2.toOwnedSlice() catch |err| handleError(err)); };
        } else {
            res_2 = blk3: { var _tmp_3 = std.ArrayList(f64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_3.appendSlice(@as([]const f64, res_2)) catch |err| handleError(err); _tmp_3.append(xs_2[_idx(xs_2.len, i_2)]) catch |err| handleError(err); break :blk3 (_tmp_3.toOwnedSlice() catch |err| handleError(err)); };
        }
        i_2 = i_2 +% 1;
    }
    return res_2;
}

fn next_greatest_element(xs_3: []f64) []f64 {
    var res_3: []f64 = std.heap.page_allocator.alloc(f64, 0) catch unreachable;
    res_3 = res_3;
    var k: i64 = 0;
    k = k;
    while (k < @as(i64, @intCast(xs_3.len))) {
        res_3 = blk4: { var _tmp_4 = std.ArrayList(f64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_4.appendSlice(@as([]const f64, res_3)) catch |err| handleError(err); _tmp_4.append(@as(f64, @floatFromInt(0)) - 1.0) catch |err| handleError(err); break :blk4 (_tmp_4.toOwnedSlice() catch |err| handleError(err)); };
        k = k +% 1;
    }
    var stack: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    stack = stack;
    var i_3: i64 = 0;
    i_3 = i_3;
    while (i_3 < @as(i64, @intCast(xs_3.len))) {
        while (@as(i64, @intCast(stack.len)) > 0 and xs_3[_idx(xs_3.len, i_3)] > xs_3[_idx(xs_3.len, stack[_idx(stack.len, @as(i64, @intCast(stack.len)) -% 1)])]) {
            const idx_1: i64 = stack[_idx(stack.len, @as(i64, @intCast(stack.len)) -% 1)];
            stack = stack[@as(usize, @intCast(0))..@min(@as(usize, @intCast(@as(i64, @intCast(stack.len)) -% 1)), @as(usize, @intCast(stack.len)))];
            res_3 = set_at_float(res_3, idx_1, xs_3[_idx(xs_3.len, i_3)]);
        }
        stack = blk5: { var _tmp_5 = std.ArrayList(i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_5.appendSlice(@as([]const i64, stack)) catch |err| handleError(err); _tmp_5.append(i_3) catch |err| handleError(err); break :blk5 (_tmp_5.toOwnedSlice() catch |err| handleError(err)); };
        i_3 = i_3 +% 1;
    }
    return res_3;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        arr_var = std.heap.page_allocator.dupe(f64, blk6: { var _tmp_6 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_6.append(@as(f64, @floatFromInt(0)) - 10.0) catch unreachable; _tmp_6.append(@as(f64, @floatFromInt(0)) - 5.0) catch unreachable; _tmp_6.append(0.0) catch unreachable; _tmp_6.append(5.0) catch unreachable; _tmp_6.append(5.09999999999999964) catch unreachable; _tmp_6.append(11.0) catch unreachable; _tmp_6.append(13.0) catch unreachable; _tmp_6.append(21.0) catch unreachable; _tmp_6.append(3.0) catch unreachable; _tmp_6.append(4.0) catch unreachable; _tmp_6.append(@as(f64, @floatFromInt(0)) - 21.0) catch unreachable; _tmp_6.append(@as(f64, @floatFromInt(0)) - 10.0) catch unreachable; _tmp_6.append(@as(f64, @floatFromInt(0)) - 5.0) catch unreachable; _tmp_6.append(@as(f64, @floatFromInt(0)) - 1.0) catch unreachable; _tmp_6.append(0.0) catch unreachable; break :blk6 (_tmp_6.toOwnedSlice() catch unreachable); }) catch unreachable;
        expected_var = std.heap.page_allocator.dupe(f64, blk7: { var _tmp_7 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_7.append(@as(f64, @floatFromInt(0)) - 5.0) catch unreachable; _tmp_7.append(0.0) catch unreachable; _tmp_7.append(5.0) catch unreachable; _tmp_7.append(5.09999999999999964) catch unreachable; _tmp_7.append(11.0) catch unreachable; _tmp_7.append(13.0) catch unreachable; _tmp_7.append(21.0) catch unreachable; _tmp_7.append(@as(f64, @floatFromInt(0)) - 1.0) catch unreachable; _tmp_7.append(4.0) catch unreachable; _tmp_7.append(@as(f64, @floatFromInt(0)) - 1.0) catch unreachable; _tmp_7.append(@as(f64, @floatFromInt(0)) - 10.0) catch unreachable; _tmp_7.append(@as(f64, @floatFromInt(0)) - 5.0) catch unreachable; _tmp_7.append(@as(f64, @floatFromInt(0)) - 1.0) catch unreachable; _tmp_7.append(0.0) catch unreachable; _tmp_7.append(@as(f64, @floatFromInt(0)) - 1.0) catch unreachable; break :blk7 (_tmp_7.toOwnedSlice() catch unreachable); }) catch unreachable;
        std.debug.print("{s}\n", .{_str(next_greatest_element_slow(arr_var))});
        std.debug.print("{s}\n", .{_str(next_greatest_element_fast(arr_var))});
        std.debug.print("{s}\n", .{_str(next_greatest_element(arr_var))});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
