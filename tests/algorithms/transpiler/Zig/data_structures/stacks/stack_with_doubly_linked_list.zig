// Generated by Mochi Zig transpiler on 2025-08-24 22:16 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const Node = struct {
    data: i64,
    next: i64,
    prev: i64,
};

const Stack = struct {
    nodes: []Node,
    head: i64,
};

const PopResult = struct {
    stack: Stack,
    value: i64,
    ok: bool,
};

const TopResult = struct {
    value: i64,
    ok: bool,
};

fn empty_stack() Stack {
    return .{ .nodes = (&[_]Node{})[0..0], .head = -1 };
}

fn push(stack: Stack, value: i64) Stack {
    var nodes: []Node = stack.nodes;
    nodes = nodes;
    const idx: i64 = @as(i64, @intCast(nodes.len));
    const new_node: Node = .{ .data = value, .next = stack.head, .prev = -1 };
    nodes = blk0: { var _tmp = std.ArrayList(Node).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp.appendSlice(@as([]const Node, nodes)) catch |err| handleError(err); _tmp.append(new_node) catch |err| handleError(err); break :blk0 (_tmp.toOwnedSlice() catch |err| handleError(err)); };
    if (stack.head != -1) {
        var head_node: Node = nodes[_idx(nodes.len, stack.head)];
        head_node = head_node;
        head_node.prev = idx;
        nodes[_idx(nodes.len, stack.head)] = head_node;
    }
    return .{ .nodes = nodes, .head = idx };
}

fn pop(stack_1: Stack) PopResult {
    if (stack_1.head == -1) {
        return .{ .stack = stack_1, .value = 0, .ok = false };
    }
    var nodes_1: []Node = stack_1.nodes;
    nodes_1 = nodes_1;
    const head_node_1: Node = nodes_1[_idx(nodes_1.len, stack_1.head)];
    if (head_node_1.next != -1) {
        var next_node: Node = nodes_1[_idx(nodes_1.len, head_node_1.next)];
        next_node = next_node;
        next_node.prev = -1;
        nodes_1[_idx(nodes_1.len, head_node_1.next)] = next_node;
    }
    const new_stack: Stack = .{ .nodes = nodes_1, .head = head_node_1.next };
    return .{ .stack = new_stack, .value = head_node_1.data, .ok = true };
}

fn top(stack_2: Stack) TopResult {
    if (stack_2.head == -1) {
        return .{ .value = 0, .ok = false };
    }
    const node: Node = stack_2.nodes[_idx(stack_2.nodes.len, stack_2.head)];
    return .{ .value = node.data, .ok = true };
}

fn size(stack_3: Stack) i64 {
    var count: i64 = 0;
    count = count;
    var idx_1: i64 = stack_3.head;
    idx_1 = idx_1;
    while (idx_1 != -1) {
        count = count +% 1;
        const node_1: Node = stack_3.nodes[_idx(stack_3.nodes.len, idx_1)];
        idx_1 = node_1.next;
    }
    return count;
}

fn is_empty(stack_4: Stack) bool {
    return stack_4.head == -1;
}

fn print_stack(stack_5: Stack) void {
    std.debug.print("{s}\n", .{"stack elements are:"});
    var idx_2: i64 = stack_5.head;
    idx_2 = idx_2;
    var s: []const u8 = "";
    s = s;
    while (idx_2 != -1) {
        const node_2: Node = stack_5.nodes[_idx(stack_5.nodes.len, idx_2)];
        s = _concat_string(_concat_string(s, _str(node_2.data)), "->");
        idx_2 = node_2.next;
    }
    if (@as(i64, @intCast(s.len)) > 0) {
        std.debug.print("{s}\n", .{s});
    }
}

fn mochi_main() void {
    var stack_6: Stack = empty_stack();
    stack_6 = stack_6;
    std.debug.print("{s}\n", .{"Stack operations using Doubly LinkedList"});
    stack_6 = push(stack_6, 4);
    stack_6 = push(stack_6, 5);
    stack_6 = push(stack_6, 6);
    stack_6 = push(stack_6, 7);
    print_stack(stack_6);
    const t: TopResult = top(stack_6);
    if (t.ok) {
        std.debug.print("{s}\n", .{_concat_string("Top element is ", _str(t.value))});
    } else {
        std.debug.print("{s}\n", .{"Top element is None"});
    }
    std.debug.print("{s}\n", .{_concat_string("Size of the stack is ", _str(size(stack_6)))});
    var p: PopResult = pop(stack_6);
    p = p;
    stack_6 = p.stack;
    p = pop(stack_6);
    stack_6 = p.stack;
    print_stack(stack_6);
    std.debug.print("{s}\n", .{_concat_string("stack is empty: ", _str(is_empty(stack_6)))});
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        mochi_main();
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
