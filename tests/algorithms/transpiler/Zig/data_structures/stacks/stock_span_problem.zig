// Generated by Mochi Zig transpiler on 2025-08-24 22:16 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const price_var: []i64 = &[_]i64{};
var spans_var: []i64 = &[_]i64{};

fn calculation_span(price_param: []i64) []i64 {
    const n: i64 = @as(i64, @intCast(price_param.len));
    var st: []i64 = @constCast((&[_]i64{})[0..0]);
    st = st;
    var span: []i64 = @constCast((&[_]i64{})[0..0]);
    span = span;
    st = blk0: { var _tmp = std.ArrayList(i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp.appendSlice(@as([]const i64, st)) catch |err| handleError(err); _tmp.append(0) catch |err| handleError(err); break :blk0 (_tmp.toOwnedSlice() catch |err| handleError(err)); };
    span = blk1: { var _tmp_1 = std.ArrayList(i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_1.appendSlice(@as([]const i64, span)) catch |err| handleError(err); _tmp_1.append(1) catch |err| handleError(err); break :blk1 (_tmp_1.toOwnedSlice() catch |err| handleError(err)); };
    var __it0: i64 = @as(i64, @intCast(1));
    while (__it0 < @as(i64, @intCast(n))) : (__it0 += 1) {
        const i: i64 = __it0;
        while (@as(i64, @intCast(st.len)) > 0 and price_param[_idx(price_param.len, st[_idx(st.len, @as(i64, @intCast(st.len)) -% 1)])] <= price_param[_idx(price_param.len, i)]) {
            st = st[@as(usize, @intCast(0))..@min(@as(usize, @intCast(@as(i64, @intCast(st.len)) -% 1)), @as(usize, @intCast(st.len)))];
        }
        const s: i64 = if (@as(i64, @intCast(st.len)) <= 0) i +% 1 else i -% st[_idx(st.len, @as(i64, @intCast(st.len)) -% 1)];
        span = blk2: { var _tmp_2 = std.ArrayList(i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_2.appendSlice(@as([]const i64, span)) catch |err| handleError(err); _tmp_2.append(s) catch |err| handleError(err); break :blk2 (_tmp_2.toOwnedSlice() catch |err| handleError(err)); };
        st = blk3: { var _tmp_3 = std.ArrayList(i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_3.appendSlice(@as([]const i64, st)) catch |err| handleError(err); _tmp_3.append(i) catch |err| handleError(err); break :blk3 (_tmp_3.toOwnedSlice() catch |err| handleError(err)); };
    }
    return span;
}

fn print_array(arr: []i64) void {
    var __it1: i64 = @as(i64, @intCast(0));
    while (__it1 < @as(i64, @intCast(@as(i64, @intCast(arr.len))))) : (__it1 += 1) {
        const i_1: i64 = __it1;
        std.debug.print("{d}\n", .{arr[_idx(arr.len, i_1)]});
    }
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        spans_var = calculation_span(price_var);
        print_array(spans_var);
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
