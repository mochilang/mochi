// Generated by Mochi Zig transpiler on 2025-08-24 22:16 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

var PRECEDENCES_var: std.StringHashMap(i64) = std.StringHashMap(i64).init(std.heap.page_allocator);
var ASSOCIATIVITIES_var: std.StringHashMap([]const u8) = std.StringHashMap([]const u8).init(std.heap.page_allocator);

fn precedence(ch: []const u8) i64 {
    if (PRECEDENCES_var.contains(ch)) {
        return (blk0: { if (PRECEDENCES_var.get(ch)) |v| { break :blk0 v; } break :blk0 0; });
    }
    return 0 -% 1;
}

fn associativity(ch_1: []const u8) []const u8 {
    if (ASSOCIATIVITIES_var.contains(ch_1)) {
        return (blk1: { if (ASSOCIATIVITIES_var.get(ch_1)) |v| { break :blk1 v; } break :blk1 0; });
    }
    return "";
}

fn balanced_parentheses(expr: []const u8) bool {
    var count: i64 = 0;
    count = count;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(expr.len))) {
        const ch_2: []const u8 = expr[@as(usize, @intCast(i))..@min(@as(usize, @intCast(i +% 1)), @as(usize, @intCast(expr.len)))];
        if (std.mem.eql(u8, ch_2, "(")) {
            count = count +% 1;
        }
        if (std.mem.eql(u8, ch_2, ")")) {
            count = count -% 1;
            if (count < 0) {
                return false;
            }
        }
        i = i +% 1;
    }
    return count == 0;
}

fn is_letter(ch_3: []const u8) bool {
    return std.mem.order(u8, "a", ch_3) != .gt and std.mem.order(u8, ch_3, "z") != .gt or std.mem.order(u8, "A", ch_3) != .gt and std.mem.order(u8, ch_3, "Z") != .gt;
}

fn is_digit(ch_4: []const u8) bool {
    return std.mem.order(u8, "0", ch_4) != .gt and std.mem.order(u8, ch_4, "9") != .gt;
}

fn is_alnum(ch_5: []const u8) bool {
    return is_letter(ch_5) or is_digit(ch_5);
}

fn infix_to_postfix(expression: []const u8) []const u8 {
    if (balanced_parentheses(expression) == false) {
        @panic("Mismatched parentheses");
    }
    var stack: [][]const u8 = std.heap.page_allocator.alloc([]const u8, 0) catch unreachable;
    stack = stack;
    var postfix: [][]const u8 = std.heap.page_allocator.alloc([]const u8, 0) catch unreachable;
    postfix = postfix;
    var i_1: i64 = 0;
    i_1 = i_1;
    while (i_1 < @as(i64, @intCast(expression.len))) {
        const ch_6: []const u8 = expression[@as(usize, @intCast(i_1))..@min(@as(usize, @intCast(i_1 +% 1)), @as(usize, @intCast(expression.len)))];
        if (is_alnum(ch_6)) {
            postfix = blk2: { var _tmp = std.ArrayList([]const u8).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp.appendSlice(@as([]const []const u8, postfix)) catch |err| handleError(err); _tmp.append(@constCast(ch_6)) catch |err| handleError(err); break :blk2 (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        } else {
            if (std.mem.eql(u8, ch_6, "(")) {
                stack = blk3: { var _tmp_1 = std.ArrayList([]const u8).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_1.appendSlice(@as([]const []const u8, stack)) catch |err| handleError(err); _tmp_1.append(@constCast(ch_6)) catch |err| handleError(err); break :blk3 (_tmp_1.toOwnedSlice() catch |err| handleError(err)); };
            } else {
                if (std.mem.eql(u8, ch_6, ")")) {
                    while (@as(i64, @intCast(stack.len)) > 0 and !std.mem.eql(u8, stack[_idx(stack.len, @as(i64, @intCast(stack.len)) -% 1)], "(")) {
                        postfix = blk4: { var _tmp_2 = std.ArrayList([]const u8).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_2.appendSlice(@as([]const []const u8, postfix)) catch |err| handleError(err); _tmp_2.append(@constCast(stack[_idx(stack.len, @as(i64, @intCast(stack.len)) -% 1)])) catch |err| handleError(err); break :blk4 (_tmp_2.toOwnedSlice() catch |err| handleError(err)); };
                        stack = stack[@as(usize, @intCast(0))..@min(@as(usize, @intCast(@as(i64, @intCast(stack.len)) -% 1)), @as(usize, @intCast(stack.len)))];
                    }
                    if (@as(i64, @intCast(stack.len)) > 0) {
                        stack = stack[@as(usize, @intCast(0))..@min(@as(usize, @intCast(@as(i64, @intCast(stack.len)) -% 1)), @as(usize, @intCast(stack.len)))];
                    }
                } else {
                    if (std.mem.eql(u8, ch_6, " ")) {
                    } else {
                        while (true) {
                            if (@as(i64, @intCast(stack.len)) == 0) {
                                stack = blk5: { var _tmp_3 = std.ArrayList([]const u8).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_3.appendSlice(@as([]const []const u8, stack)) catch |err| handleError(err); _tmp_3.append(@constCast(ch_6)) catch |err| handleError(err); break :blk5 (_tmp_3.toOwnedSlice() catch |err| handleError(err)); };
                                break;
                            }
                            const cp: i64 = precedence(ch_6);
                            const tp: i64 = precedence(stack[_idx(stack.len, @as(i64, @intCast(stack.len)) -% 1)]);
                            if (cp > tp) {
                                stack = blk6: { var _tmp_4 = std.ArrayList([]const u8).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_4.appendSlice(@as([]const []const u8, stack)) catch |err| handleError(err); _tmp_4.append(@constCast(ch_6)) catch |err| handleError(err); break :blk6 (_tmp_4.toOwnedSlice() catch |err| handleError(err)); };
                                break;
                            }
                            if (cp < tp) {
                                postfix = blk7: { var _tmp_5 = std.ArrayList([]const u8).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_5.appendSlice(@as([]const []const u8, postfix)) catch |err| handleError(err); _tmp_5.append(@constCast(stack[_idx(stack.len, @as(i64, @intCast(stack.len)) -% 1)])) catch |err| handleError(err); break :blk7 (_tmp_5.toOwnedSlice() catch |err| handleError(err)); };
                                stack = stack[@as(usize, @intCast(0))..@min(@as(usize, @intCast(@as(i64, @intCast(stack.len)) -% 1)), @as(usize, @intCast(stack.len)))];
                                continue;
                            }
                            if (std.mem.eql(u8, associativity(ch_6), "RL")) {
                                stack = blk8: { var _tmp_6 = std.ArrayList([]const u8).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_6.appendSlice(@as([]const []const u8, stack)) catch |err| handleError(err); _tmp_6.append(@constCast(ch_6)) catch |err| handleError(err); break :blk8 (_tmp_6.toOwnedSlice() catch |err| handleError(err)); };
                                break;
                            }
                            postfix = blk9: { var _tmp_7 = std.ArrayList([]const u8).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_7.appendSlice(@as([]const []const u8, postfix)) catch |err| handleError(err); _tmp_7.append(@constCast(stack[_idx(stack.len, @as(i64, @intCast(stack.len)) -% 1)])) catch |err| handleError(err); break :blk9 (_tmp_7.toOwnedSlice() catch |err| handleError(err)); };
                            stack = stack[@as(usize, @intCast(0))..@min(@as(usize, @intCast(@as(i64, @intCast(stack.len)) -% 1)), @as(usize, @intCast(stack.len)))];
                        }
                    }
                }
            }
        }
        i_1 = i_1 +% 1;
    }
    while (@as(i64, @intCast(stack.len)) > 0) {
        postfix = blk10: { var _tmp_8 = std.ArrayList([]const u8).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_8.appendSlice(@as([]const []const u8, postfix)) catch |err| handleError(err); _tmp_8.append(@constCast(stack[_idx(stack.len, @as(i64, @intCast(stack.len)) -% 1)])) catch |err| handleError(err); break :blk10 (_tmp_8.toOwnedSlice() catch |err| handleError(err)); };
        stack = stack[@as(usize, @intCast(0))..@min(@as(usize, @intCast(@as(i64, @intCast(stack.len)) -% 1)), @as(usize, @intCast(stack.len)))];
    }
    var res: []const u8 = "";
    res = res;
    var j: i64 = 0;
    j = j;
    while (j < @as(i64, @intCast(postfix.len))) {
        if (j > 0) {
            res = _concat_string(res, " ");
        }
        res = _concat_string(res, postfix[_idx(postfix.len, j)]);
        j = j +% 1;
    }
    return res;
}

fn mochi_main() void {
    const expression_1: []const u8 = "a+b*(c^d-e)^(f+g*h)-i";
    std.debug.print("{s}\n", .{expression_1});
    std.debug.print("{s}\n", .{infix_to_postfix(expression_1)});
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        PRECEDENCES_var = blk11: { var m = std.StringHashMap(i64).init(std.heap.page_allocator); m.put("+", 1) catch unreachable; m.put("-", 1) catch unreachable; m.put("*", 2) catch unreachable; m.put("/", 2) catch unreachable; m.put("^", 3) catch unreachable; break :blk11 m; };
        ASSOCIATIVITIES_var = blk12: { var m_1 = std.StringHashMap([]const u8).init(std.heap.page_allocator); m_1.put("+", "LR") catch unreachable; m_1.put("-", "LR") catch unreachable; m_1.put("*", "LR") catch unreachable; m_1.put("/", "LR") catch unreachable; m_1.put("^", "RL") catch unreachable; break :blk12 m_1; };
        mochi_main();
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
