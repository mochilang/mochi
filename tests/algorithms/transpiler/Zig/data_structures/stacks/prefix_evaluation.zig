// Generated by Mochi Zig transpiler on 2025-08-24 22:16 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const test_expression_var: []const u8 = "+ 9 * 2 6";
const test_expression2_var: []const u8 = "/ * 10 2 + 4 1 ";
const test_expression3_var: []const u8 = "+ * 2 3 / 8 4";

fn split_custom(s: []const u8, sep: []const u8) [][]const u8 {
    var res: [][]const u8 = std.heap.page_allocator.alloc([]const u8, 0) catch unreachable;
    res = res;
    var current: []const u8 = "";
    current = current;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(s.len))) {
        const ch: []const u8 = s[@as(usize, @intCast(i))..@min(@as(usize, @intCast(i +% 1)), @as(usize, @intCast(s.len)))];
        if (std.mem.eql(u8, ch, sep)) {
            res = blk0: { var _tmp = std.ArrayList([]const u8).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp.appendSlice(@as([]const []const u8, res)) catch |err| handleError(err); _tmp.append(@constCast(current)) catch |err| handleError(err); break :blk0 (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            current = "";
        } else {
            current = _concat_string(current, ch);
        }
        i = i +% 1;
    }
    res = blk1: { var _tmp_1 = std.ArrayList([]const u8).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_1.appendSlice(@as([]const []const u8, res)) catch |err| handleError(err); _tmp_1.append(@constCast(current)) catch |err| handleError(err); break :blk1 (_tmp_1.toOwnedSlice() catch |err| handleError(err)); };
    return res;
}

fn tokenize(s_1: []const u8) [][]const u8 {
    const parts: [][]const u8 = split_custom(s_1, " ");
    var res_1: [][]const u8 = std.heap.page_allocator.alloc([]const u8, 0) catch unreachable;
    res_1 = res_1;
    var i_1: i64 = 0;
    i_1 = i_1;
    while (i_1 < @as(i64, @intCast(parts.len))) {
        const p: []const u8 = parts[_idx(parts.len, i_1)];
        if (p.len != 0) {
            res_1 = blk2: { var _tmp_2 = std.ArrayList([]const u8).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_2.appendSlice(@as([]const []const u8, res_1)) catch |err| handleError(err); _tmp_2.append(@constCast(p)) catch |err| handleError(err); break :blk2 (_tmp_2.toOwnedSlice() catch |err| handleError(err)); };
        }
        i_1 = i_1 +% 1;
    }
    return res_1;
}

fn is_digit(ch_1: []const u8) bool {
    return std.mem.order(u8, ch_1, "0") != .lt and std.mem.order(u8, ch_1, "9") != .gt;
}

fn is_operand(token: []const u8) bool {
    if (token.len == 0) {
        return false;
    }
    var i_2: i64 = 0;
    i_2 = i_2;
    while (i_2 < @as(i64, @intCast(token.len))) {
        const ch_2: []const u8 = token[@as(usize, @intCast(i_2))..@min(@as(usize, @intCast(i_2 +% 1)), @as(usize, @intCast(token.len)))];
        if (!(is_digit(ch_2))) {
            return false;
        }
        i_2 = i_2 +% 1;
    }
    return true;
}

fn to_int(token_1: []const u8) i64 {
    var res_2: i64 = 0;
    res_2 = res_2;
    var i_3: i64 = 0;
    i_3 = i_3;
    while (i_3 < @as(i64, @intCast(token_1.len))) {
        res_2 = res_2 *% 10 +% (std.fmt.parseInt(i64, token_1[@as(usize, @intCast(i_3))..@min(@as(usize, @intCast(i_3 +% 1)), @as(usize, @intCast(token_1.len)))], 10) catch 0);
        i_3 = i_3 +% 1;
    }
    return res_2;
}

fn apply_op(op: []const u8, a: f64, b: f64) f64 {
    if (std.mem.eql(u8, op, "+")) {
        return a + b;
    }
    if (std.mem.eql(u8, op, "-")) {
        return a - b;
    }
    if (std.mem.eql(u8, op, "*")) {
        return a * b;
    }
    if (std.mem.eql(u8, op, "/")) {
        return a / b;
    }
    return 0.0;
}

fn evaluate(expression: []const u8) f64 {
    const tokens: [][]const u8 = tokenize(expression);
    var stack: []f64 = std.heap.page_allocator.alloc(f64, 0) catch unreachable;
    stack = stack;
    var i_4: i64 = @as(i64, @intCast(tokens.len)) -% 1;
    i_4 = i_4;
    while (i_4 >= 0) {
        const token_2: []const u8 = tokens[_idx(tokens.len, i_4)];
        if (token_2.len != 0) {
            if (is_operand(token_2)) {
                stack = blk3: { var _tmp_3 = std.ArrayList(f64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_3.appendSlice(@as([]const f64, stack)) catch |err| handleError(err); _tmp_3.append(@as(f64, @floatFromInt(to_int(token_2)))) catch |err| handleError(err); break :blk3 (_tmp_3.toOwnedSlice() catch |err| handleError(err)); };
            } else {
                const o1: f64 = stack[_idx(stack.len, @as(i64, @intCast(stack.len)) -% 1)];
                const o2: f64 = stack[_idx(stack.len, @as(i64, @intCast(stack.len)) -% 2)];
                stack = stack[@as(usize, @intCast(0))..@min(@as(usize, @intCast(@as(i64, @intCast(stack.len)) -% 2)), @as(usize, @intCast(stack.len)))];
                const res_3: f64 = apply_op(token_2, o1, o2);
                stack = blk4: { var _tmp_4 = std.ArrayList(f64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_4.appendSlice(@as([]const f64, stack)) catch |err| handleError(err); _tmp_4.append(res_3) catch |err| handleError(err); break :blk4 (_tmp_4.toOwnedSlice() catch |err| handleError(err)); };
            }
        }
        i_4 = i_4 -% 1;
    }
    return stack[_idx(stack.len, 0)];
}

fn eval_rec(tokens_1: [][]const u8, pos: i64) []f64 {
    const token_3: []const u8 = tokens_1[_idx(tokens_1.len, pos)];
    const next: i64 = pos +% 1;
    if (is_operand(token_3)) {
        return blk5: { var _tmp_5 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_5.append(@as(f64, @floatFromInt(to_int(token_3)))) catch |err| handleError(err); _tmp_5.append(@as(f64, @floatFromInt(next))) catch |err| handleError(err); break :blk5 (_tmp_5.toOwnedSlice() catch |err| handleError(err)); };
    }
    const left: []f64 = eval_rec(tokens_1, next);
    const a_1: f64 = left[_idx(left.len, 0)];
    const p1: i64 = @as(i64, @intFromFloat(left[_idx(left.len, 1)]));
    const right: []f64 = eval_rec(tokens_1, p1);
    const b_1: f64 = right[_idx(right.len, 0)];
    const p2: f64 = right[_idx(right.len, 1)];
    return blk6: { var _tmp_6 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_6.append(apply_op(token_3, a_1, b_1)) catch |err| handleError(err); _tmp_6.append(p2) catch |err| handleError(err); break :blk6 (_tmp_6.toOwnedSlice() catch |err| handleError(err)); };
}

fn evaluate_recursive(expression_1: []const u8) f64 {
    const tokens_2: [][]const u8 = tokenize(expression_1);
    const res_4: []f64 = eval_rec(tokens_2, 0);
    return res_4[_idx(res_4.len, 0)];
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        std.debug.print("{s}\n", .{_str(evaluate(test_expression_var))});
        std.debug.print("{s}\n", .{_str(evaluate(test_expression2_var))});
        std.debug.print("{s}\n", .{_str(evaluate_recursive(test_expression3_var))});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
