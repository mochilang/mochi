// Generated by Mochi Zig transpiler on 2025-08-24 23:17 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const Heap = struct {
    arr: [][]i64,
    pos_map: std.AutoHashMap(i64,i64),
    size: i64,
    key: *const fn(i64) i64,
};

var h_var_1: Heap = undefined;

fn new_heap(key: *const fn(i64) i64) Heap {
    return .{ .arr = (&[_][]i64{})[0..0], .pos_map = std.AutoHashMap(i64, i64).init(std.heap.page_allocator), .size = 0, .key = key };
}

fn parent(i: i64) i64 {
    if (i > 0) {
        return @divTrunc(i -% 1, 2);
    }
    return 0 -% 1;
}

fn left(i_1: i64, size: i64) i64 {
    const l: i64 = 2 *% i_1 +% 1;
    if (l < size) {
        return l;
    }
    return 0 -% 1;
}

fn right(i_2: i64, size_1: i64) i64 {
    const r: i64 = 2 *% i_2 +% 2;
    if (r < size_1) {
        return r;
    }
    return 0 -% 1;
}

fn swap(h_param: *Heap, i_3: i64, j: i64) void {
    var arr: [][]i64 = h_param.arr;
    arr = arr;
    const item_i: i64 = arr[_idx(arr.len, i_3)][_idx(arr[_idx(arr.len, i_3)].len, 0)];
    const item_j: i64 = arr[_idx(arr.len, j)][_idx(arr[_idx(arr.len, j)].len, 0)];
    var pm: std.AutoHashMap(i64,i64) = h_param.pos_map;
    pm = pm;
    pm.put(item_i, j +% 1) catch unreachable;
    pm.put(item_j, i_3 +% 1) catch unreachable;
    h_param.pos_map = pm;
    const tmp: []i64 = arr[_idx(arr.len, i_3)];
    arr[_idx(arr.len, i_3)] = arr[_idx(arr.len, j)];
    arr[_idx(arr.len, j)] = tmp;
    h_param.arr = arr;
}

fn cmp(h_param_1: *const Heap, i_4: i64, j_1: i64) bool {
    return h_param_1.arr[_idx(h_param_1.arr.len, i_4)][_idx(h_param_1.arr[_idx(h_param_1.arr.len, i_4)].len, 1)] < h_param_1.arr[_idx(h_param_1.arr.len, j_1)][_idx(h_param_1.arr[_idx(h_param_1.arr.len, j_1)].len, 1)];
}

fn get_valid_parent(h_param_2: *const Heap, i_5: i64) i64 {
    var vp: i64 = i_5;
    vp = vp;
    const l_1: i64 = left(i_5, h_param_2.size);
    if (l_1 != -1 and cmp(h_param_2, l_1, vp) == false) {
        vp = l_1;
    }
    const r_1: i64 = right(i_5, h_param_2.size);
    if (r_1 != -1 and cmp(h_param_2, r_1, vp) == false) {
        vp = r_1;
    }
    return vp;
}

fn heapify_up(h_param_3: *Heap, index: i64) void {
    var idx: i64 = index;
    idx = idx;
    var p: i64 = parent(idx);
    p = p;
    while (p != -1 and cmp(h_param_3, idx, p) == false) {
        swap(h_param_3, idx, p);
        idx = p;
        p = parent(p);
    }
}

fn heapify_down(h_param_4: *Heap, index_1: i64) void {
    var idx_1: i64 = index_1;
    idx_1 = idx_1;
    var vp_1: i64 = get_valid_parent(h_param_4, idx_1);
    vp_1 = vp_1;
    while (vp_1 != idx_1) {
        swap(h_param_4, idx_1, vp_1);
        idx_1 = vp_1;
        vp_1 = get_valid_parent(h_param_4, idx_1);
    }
}

fn update_item(h_param_5: *Heap, item: i64, item_value: i64) void {
    var pm_1: std.AutoHashMap(i64,i64) = h_param_5.pos_map;
    pm_1 = pm_1;
    if ((blk0: { if (pm_1.get(item)) |v| { break :blk0 v; } break :blk0 0; }) == 0) {
        return;
    }
    const index_2: i64 = (blk1: { if (pm_1.get(item)) |v| { break :blk1 v; } break :blk1 0; }) -% 1;
    var arr_1: [][]i64 = h_param_5.arr;
    arr_1 = arr_1;
    arr_1[_idx(arr_1.len, index_2)] = blk2: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.append(item) catch unreachable; _tmp.append(h_param_5.key(item_value)) catch unreachable; break :blk2 (_tmp.toOwnedSlice() catch unreachable); };
    h_param_5.arr = arr_1;
    h_param_5.pos_map = pm_1;
    heapify_up(h_param_5, index_2);
    heapify_down(h_param_5, index_2);
}

fn delete_item(h_param_6: *Heap, item_1: i64) void {
    var pm_2: std.AutoHashMap(i64,i64) = h_param_6.pos_map;
    pm_2 = pm_2;
    if ((blk3: { if (pm_2.get(item_1)) |v| { break :blk3 v; } break :blk3 0; }) == 0) {
        return;
    }
    const index_3: i64 = (blk4: { if (pm_2.get(item_1)) |v| { break :blk4 v; } break :blk4 0; }) -% 1;
    pm_2.put(item_1, 0) catch unreachable;
    var arr_2: [][]i64 = h_param_6.arr;
    arr_2 = arr_2;
    const last_index: i64 = h_param_6.size -% 1;
    if (index_3 != last_index) {
        arr_2[_idx(arr_2.len, index_3)] = arr_2[_idx(arr_2.len, last_index)];
        const moved: i64 = arr_2[_idx(arr_2.len, index_3)][_idx(arr_2[_idx(arr_2.len, index_3)].len, 0)];
        pm_2.put(moved, index_3 +% 1) catch unreachable;
    }
    h_param_6.size = h_param_6.size -% 1;
    h_param_6.arr = arr_2;
    h_param_6.pos_map = pm_2;
    if (h_param_6.size > index_3) {
        heapify_up(h_param_6, index_3);
        heapify_down(h_param_6, index_3);
    }
}

fn insert_item(h_param_7: *Heap, item_2: i64, item_value_1: i64) void {
    var arr_3: [][]i64 = h_param_7.arr;
    arr_3 = arr_3;
    const arr_len: i64 = @as(i64, @intCast(arr_3.len));
    if (arr_len == h_param_7.size) {
        arr_3 = blk5: { var _tmp_1 = std.ArrayList([]i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_1.appendSlice(@as([]const []i64, arr_3)) catch |err| handleError(err); _tmp_1.append(@constCast(blk6: { var _tmp_2 = std.ArrayList(i64).init(std.heap.page_allocator); _tmp_2.append(item_2) catch unreachable; _tmp_2.append(h_param_7.key(item_value_1)) catch unreachable; break :blk6 (_tmp_2.toOwnedSlice() catch unreachable); })) catch |err| handleError(err); break :blk5 (_tmp_1.toOwnedSlice() catch |err| handleError(err)); };
    } else {
        arr_3[_idx(arr_3.len, h_param_7.size)] = blk7: { var _tmp_3 = std.ArrayList(i64).init(std.heap.page_allocator); _tmp_3.append(item_2) catch unreachable; _tmp_3.append(h_param_7.key(item_value_1)) catch unreachable; break :blk7 (_tmp_3.toOwnedSlice() catch unreachable); };
    }
    var pm_3: std.AutoHashMap(i64,i64) = h_param_7.pos_map;
    pm_3 = pm_3;
    pm_3.put(item_2, h_param_7.size +% 1) catch unreachable;
    h_param_7.size = h_param_7.size +% 1;
    h_param_7.arr = arr_3;
    h_param_7.pos_map = pm_3;
    heapify_up(h_param_7, h_param_7.size -% 1);
}

fn get_top(h_param_8: *const Heap) []i64 {
    if (h_param_8.size > 0) {
        return h_param_8.arr[_idx(h_param_8.arr.len, 0)];
    }
    return (&[_]i64{})[0..0];
}

fn extract_top(h_param_9: *Heap) []i64 {
    const top: []i64 = get_top(h_param_9);
    if (@as(i64, @intCast(top.len)) > 0) {
        delete_item(h_param_9, top[_idx(top.len, 0)]);
    }
    return top;
}

fn identity(x: i64) i64 {
    return x;
}

fn negate(x_1: i64) i64 {
    return 0 -% x_1;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        h_var_1 = new_heap(&identity);
        h_var_1 = new_heap(&negate);
        insert_item(&h_var_1, 5, 34);
        insert_item(&h_var_1, 6, 31);
        insert_item(&h_var_1, 7, 37);
        std.debug.print("{s}\n", .{_str(get_top(&h_var_1))});
        std.debug.print("{s}\n", .{_str(extract_top(&h_var_1))});
        std.debug.print("{s}\n", .{_str(extract_top(&h_var_1))});
        std.debug.print("{s}\n", .{_str(extract_top(&h_var_1))});
        insert_item(&h_var_1, 5, 34);
        insert_item(&h_var_1, 6, 31);
        insert_item(&h_var_1, 7, 37);
        std.debug.print("{s}\n", .{_str(get_top(&h_var_1))});
        std.debug.print("{s}\n", .{_str(extract_top(&h_var_1))});
        std.debug.print("{s}\n", .{_str(extract_top(&h_var_1))});
        std.debug.print("{s}\n", .{_str(extract_top(&h_var_1))});
        insert_item(&h_var_1, 8, 45);
        insert_item(&h_var_1, 9, 40);
        insert_item(&h_var_1, 10, 50);
        std.debug.print("{s}\n", .{_str(get_top(&h_var_1))});
        update_item(&h_var_1, 10, 30);
        std.debug.print("{s}\n", .{_str(get_top(&h_var_1))});
        delete_item(&h_var_1, 10);
        std.debug.print("{s}\n", .{_str(get_top(&h_var_1))});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
