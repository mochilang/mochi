// Generated by Mochi Zig transpiler on 2025-08-24 23:17 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const Node = struct {
    name: []const u8,
    val: i64,
};

const MinHeap = struct {
    heap: []Node,
    idx_of_element: std.StringHashMap(i64),
    heap_dict: std.StringHashMap(i64),
};

var r_var_1: Node = undefined;
var b_var_1: Node = undefined;
var a_var_1: Node = undefined;
var x_var_1: Node = undefined;
var e_var_1: Node = undefined;
var my_min_heap_var_1: MinHeap = undefined;

fn get_parent_idx(idx: i64) i64 {
    return @divTrunc(idx -% 1, 2);
}

fn get_left_child_idx(idx_1: i64) i64 {
    return idx_1 *% 2 +% 1;
}

fn get_right_child_idx(idx_2: i64) i64 {
    return idx_2 *% 2 +% 2;
}

fn remove_key(m: *const std.StringHashMap(i64), k: []const u8) std.StringHashMap(i64) {
    var out: std.StringHashMap(i64) = std.StringHashMap(i64).init(std.heap.page_allocator);
    out = out;
    var __mapit1 = m.keyIterator();
    while (__mapit1.next()) |__it0| {
        const key = __it0.*;
        if (!std.mem.eql(u8, key, k)) {
            out.put(key, (blk0: { if (m.get(key)) |v| { break :blk0 v; } break :blk0 0; })) catch unreachable;
        }
    }
    return out;
}

fn slice_without_last(xs: []Node) []Node {
    var res: []Node = std.heap.page_allocator.alloc(Node, 0) catch unreachable;
    res = res;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(xs.len)) -% 1) {
        res = blk1: { var _tmp = std.ArrayList(Node).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp.appendSlice(@as([]const Node, res)) catch |err| handleError(err); _tmp.append(xs[_idx(xs.len, i)]) catch |err| handleError(err); break :blk1 (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i +% 1;
    }
    return res;
}

fn sift_down(mh_param: *MinHeap, idx_3: i64) void {
    var heap: []Node = mh_param.heap;
    heap = heap;
    var idx_map: std.StringHashMap(i64) = mh_param.idx_of_element;
    idx_map = idx_map;
    var i_1: i64 = idx_3;
    i_1 = i_1;
    while (true) {
        const left: i64 = get_left_child_idx(i_1);
        const right: i64 = get_right_child_idx(i_1);
        var smallest: i64 = i_1;
        smallest = smallest;
        if (left < @as(i64, @intCast(heap.len)) and heap[_idx(heap.len, left)].val < heap[_idx(heap.len, smallest)].val) {
            smallest = left;
        }
        if (right < @as(i64, @intCast(heap.len)) and heap[_idx(heap.len, right)].val < heap[_idx(heap.len, smallest)].val) {
            smallest = right;
        }
        if (smallest != i_1) {
            const tmp: Node = heap[_idx(heap.len, i_1)];
            heap[_idx(heap.len, i_1)] = heap[_idx(heap.len, smallest)];
            heap[_idx(heap.len, smallest)] = tmp;
            idx_map.put(heap[_idx(heap.len, i_1)].name, i_1) catch unreachable;
            idx_map.put(heap[_idx(heap.len, smallest)].name, smallest) catch unreachable;
            i_1 = smallest;
        } else {
            break;
        }
    }
    mh_param.heap = heap;
    mh_param.idx_of_element = idx_map;
}

fn sift_up(mh_param_1: *MinHeap, idx_4: i64) void {
    var heap_1: []Node = mh_param_1.heap;
    heap_1 = heap_1;
    var idx_map_1: std.StringHashMap(i64) = mh_param_1.idx_of_element;
    idx_map_1 = idx_map_1;
    var i_2: i64 = idx_4;
    i_2 = i_2;
    var p: i64 = get_parent_idx(i_2);
    p = p;
    while (p >= 0 and heap_1[_idx(heap_1.len, p)].val > heap_1[_idx(heap_1.len, i_2)].val) {
        const tmp_1: Node = heap_1[_idx(heap_1.len, p)];
        heap_1[_idx(heap_1.len, p)] = heap_1[_idx(heap_1.len, i_2)];
        heap_1[_idx(heap_1.len, i_2)] = tmp_1;
        idx_map_1.put(heap_1[_idx(heap_1.len, p)].name, p) catch unreachable;
        idx_map_1.put(heap_1[_idx(heap_1.len, i_2)].name, i_2) catch unreachable;
        i_2 = p;
        p = get_parent_idx(i_2);
    }
    mh_param_1.heap = heap_1;
    mh_param_1.idx_of_element = idx_map_1;
}

fn new_min_heap(array: []Node) MinHeap {
    var idx_map_2: std.StringHashMap(i64) = std.StringHashMap(i64).init(std.heap.page_allocator);
    idx_map_2 = idx_map_2;
    var val_map: std.StringHashMap(i64) = std.StringHashMap(i64).init(std.heap.page_allocator);
    val_map = val_map;
    const heap_2: []Node = blk2: { const tmp = std.heap.page_allocator.alloc(Node, array.len) catch unreachable; @memcpy(tmp, array); break :blk2 tmp; };
    var i_3: i64 = 0;
    i_3 = i_3;
    while (i_3 < @as(i64, @intCast(array.len))) {
        const n: Node = array[_idx(array.len, i_3)];
        idx_map_2.put(n.name, i_3) catch unreachable;
        val_map.put(n.name, n.val) catch unreachable;
        i_3 = i_3 +% 1;
    }
    var mh: MinHeap = .{ .heap = heap_2, .idx_of_element = idx_map_2, .heap_dict = val_map };
    mh = mh;
    var start: i64 = get_parent_idx(@as(i64, @intCast(array.len)) -% 1);
    start = start;
    while (start >= 0) {
        sift_down(&mh, start);
        start = start -% 1;
    }
    return mh;
}

fn peek(mh_1: *const MinHeap) Node {
    return mh_1.heap[_idx(mh_1.heap.len, 0)];
}

fn remove_min(mh_param_2: *MinHeap) Node {
    var heap_3: []Node = mh_param_2.heap;
    heap_3 = heap_3;
    var idx_map_3: std.StringHashMap(i64) = mh_param_2.idx_of_element;
    idx_map_3 = idx_map_3;
    var val_map_1: std.StringHashMap(i64) = mh_param_2.heap_dict;
    val_map_1 = val_map_1;
    const last_idx: i64 = @as(i64, @intCast(heap_3.len)) -% 1;
    const top: Node = heap_3[_idx(heap_3.len, 0)];
    const last: Node = heap_3[_idx(heap_3.len, last_idx)];
    heap_3[_idx(heap_3.len, 0)] = last;
    idx_map_3.put(last.name, 0) catch unreachable;
    heap_3 = slice_without_last(heap_3);
    idx_map_3 = remove_key(&idx_map_3, top.name);
    val_map_1 = remove_key(&val_map_1, top.name);
    mh_param_2.heap = heap_3;
    mh_param_2.idx_of_element = idx_map_3;
    mh_param_2.heap_dict = val_map_1;
    if (@as(i64, @intCast(heap_3.len)) > 0) {
        sift_down(mh_param_2, 0);
    }
    return top;
}

fn insert(mh_param_3: *MinHeap, node: *const Node) void {
    var heap_4: []Node = mh_param_3.heap;
    heap_4 = heap_4;
    var idx_map_4: std.StringHashMap(i64) = mh_param_3.idx_of_element;
    idx_map_4 = idx_map_4;
    var val_map_2: std.StringHashMap(i64) = mh_param_3.heap_dict;
    val_map_2 = val_map_2;
    heap_4 = blk3: { var _tmp_1 = std.ArrayList(Node).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_1.appendSlice(@as([]const Node, heap_4)) catch |err| handleError(err); _tmp_1.append(node) catch |err| handleError(err); break :blk3 (_tmp_1.toOwnedSlice() catch |err| handleError(err)); };
    const idx_5: i64 = @as(i64, @intCast(heap_4.len)) -% 1;
    idx_map_4.put(node.name, idx_5) catch unreachable;
    val_map_2.put(node.name, node.val) catch unreachable;
    mh_param_3.heap = heap_4;
    mh_param_3.idx_of_element = idx_map_4;
    mh_param_3.heap_dict = val_map_2;
    sift_up(mh_param_3, idx_5);
}

fn is_empty(mh_2: *const MinHeap) bool {
    return @as(i64, @intCast(mh_2.heap.len)) == 0;
}

fn get_value(mh_3: *const MinHeap, key_1: []const u8) i64 {
    return (blk4: { if (mh_3.heap_dict.get(key_1)) |v| { break :blk4 v; } break :blk4 0; });
}

fn decrease_key(mh_param_4: *MinHeap, node_param: *Node, new_value: i64) void {
    const heap_5: []Node = mh_param_4.heap;
    var val_map_3: std.StringHashMap(i64) = mh_param_4.heap_dict;
    val_map_3 = val_map_3;
    var idx_map_5: std.StringHashMap(i64) = mh_param_4.idx_of_element;
    idx_map_5 = idx_map_5;
    const idx_6: i64 = (blk5: { if (idx_map_5.get(node_param.name)) |v| { break :blk5 v; } break :blk5 0; });
    if (!(heap_5[_idx(heap_5.len, idx_6)].val > new_value)) {
        @panic("newValue must be less than current value");
    }
    node_param.val = new_value;
    heap_5[_idx(heap_5.len, idx_6)].val = new_value;
    val_map_3.put(node_param.name, new_value) catch unreachable;
    mh_param_4.heap = heap_5;
    mh_param_4.heap_dict = val_map_3;
    sift_up(mh_param_4, idx_6);
}

fn node_to_string(n_1: *const Node) []const u8 {
    return _concat_string(_concat_string(_concat_string(_concat_string("Node(", n_1.name), ", "), _str(n_1.val)), ")");
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        r_var_1 = .{ .name = "R", .val = 0 -% 1 };
        b_var_1 = .{ .name = "B", .val = 6 };
        a_var_1 = .{ .name = "A", .val = 3 };
        x_var_1 = .{ .name = "X", .val = 1 };
        e_var_1 = .{ .name = "E", .val = 4 };
        my_min_heap_var_1 = new_min_heap(blk6: { var _tmp_2 = [5]Node{r_var_1, b_var_1, a_var_1, x_var_1, e_var_1}; break :blk6 _tmp_2[0..]; });
        std.debug.print("{s}\n", .{"Min Heap - before decrease key"});
        for (my_min_heap_var_1.heap) |__it2| {
            const n_2 = __it2;
            std.debug.print("{s}\n", .{node_to_string(&n_2)});
        }
        std.debug.print("{s}\n", .{"Min Heap - After decrease key of node [B -> -17]"});
        decrease_key(&my_min_heap_var_1, &b_var_1, 0 -% 17);
        for (my_min_heap_var_1.heap) |__it3| {
            const n_3 = __it3;
            std.debug.print("{s}\n", .{node_to_string(&n_3)});
        }
        std.debug.print("{s}\n", .{_str(get_value(&my_min_heap_var_1, "B"))});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
