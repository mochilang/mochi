// Generated by Mochi Zig transpiler on 2025-08-24 23:17 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const NIL_var: i64 = -1;
var seed_var_1: i64 = 1;
var nodes_var_1: []std.StringHashMap(i64) = std.heap.page_allocator.alloc(std.StringHashMap(i64), 0) catch unreachable;
var root_var_1: i64 = 0;

fn set_seed(s: i64) void {
    seed_var_1 = s;
}

fn randint(a: i64, b: i64) i64 {
    seed_var_1 = @mod(seed_var_1 *% 1103515245 +% 12345, 2147483648);
    return @mod(seed_var_1, b -% a +% 1) +% a;
}

fn rand_bool() bool {
    return randint(0, 1) == 1;
}

fn new_heap() void {
    nodes_var_1 = std.heap.page_allocator.alloc(std.StringHashMap(i64), 0) catch unreachable;
    root_var_1 = NIL_var;
}

fn merge(r1_param: i64, r2_param: i64) i64 {
    var r1_var: i64 = r1_param;
    r1_var = r1_var;
    var r2_var: i64 = r2_param;
    r2_var = r2_var;
    if (r1_var == NIL_var) {
        return r2_var;
    }
    if (r2_var == NIL_var) {
        return r1_var;
    }
    if ((blk0: { if (nodes_var_1[_idx(nodes_var_1.len, r1_var)].get("value")) |v| { break :blk0 v; } break :blk0 0; }) > (blk1: { if (nodes_var_1[_idx(nodes_var_1.len, r2_var)].get("value")) |v| { break :blk1 v; } break :blk1 0; })) {
        const tmp: i64 = r1_var;
        r1_var = r2_var;
        r2_var = tmp;
    }
    if (rand_bool()) {
        const tmp_1: i64 = (blk2: { if (nodes_var_1[_idx(nodes_var_1.len, r1_var)].get("left")) |v| { break :blk2 v; } break :blk2 0; });
        nodes_var_1[_idx(nodes_var_1.len, r1_var)].put("left", (blk3: { if (nodes_var_1[_idx(nodes_var_1.len, r1_var)].get("right")) |v| { break :blk3 v; } break :blk3 0; })) catch unreachable;
        nodes_var_1[_idx(nodes_var_1.len, r1_var)].put("right", tmp_1) catch unreachable;
    }
    nodes_var_1[_idx(nodes_var_1.len, r1_var)].put("left", merge((blk4: { if (nodes_var_1[_idx(nodes_var_1.len, r1_var)].get("left")) |v| { break :blk4 v; } break :blk4 0; }), r2_var)) catch unreachable;
    return r1_var;
}

fn insert(value: i64) void {
    var node: std.StringHashMap(i64) = blk5: { var m = std.StringHashMap(i64).init(std.heap.page_allocator); m.put("value", value) catch unreachable; m.put("left", NIL_var) catch unreachable; m.put("right", NIL_var) catch unreachable; break :blk5 m; };
    node = node;
    nodes_var_1 = blk6: { var _tmp = std.ArrayList(std.StringHashMap(i64)).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp.appendSlice(@as([]const std.StringHashMap(i64), nodes_var_1)) catch |err| handleError(err); _tmp.append(node) catch |err| handleError(err); break :blk6 (_tmp.toOwnedSlice() catch |err| handleError(err)); };
    const idx: i64 = @as(i64, @intCast(nodes_var_1.len)) -% 1;
    root_var_1 = merge(root_var_1, idx);
}

fn top() i64 {
    if (root_var_1 == NIL_var) {
        return 0;
    }
    return (blk7: { if (nodes_var_1[_idx(nodes_var_1.len, root_var_1)].get("value")) |v| { break :blk7 v; } break :blk7 0; });
}

fn pop() i64 {
    const result: i64 = top();
    const l: i64 = (blk8: { if (nodes_var_1[_idx(nodes_var_1.len, root_var_1)].get("left")) |v| { break :blk8 v; } break :blk8 0; });
    const r: i64 = (blk9: { if (nodes_var_1[_idx(nodes_var_1.len, root_var_1)].get("right")) |v| { break :blk9 v; } break :blk9 0; });
    root_var_1 = merge(l, r);
    return result;
}

fn is_empty() bool {
    return root_var_1 == NIL_var;
}

fn to_sorted_list() []i64 {
    var res: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    res = res;
    while (!(is_empty())) {
        res = blk10: { var _tmp_1 = std.ArrayList(i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_1.appendSlice(@as([]const i64, res)) catch |err| handleError(err); _tmp_1.append(pop()) catch |err| handleError(err); break :blk10 (_tmp_1.toOwnedSlice() catch |err| handleError(err)); };
    }
    return res;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        root_var_1 = NIL_var;
        set_seed(1);
        new_heap();
        insert(2);
        insert(3);
        insert(1);
        insert(5);
        insert(1);
        insert(7);
        std.debug.print("{s}\n", .{_str(to_sorted_list())});
        new_heap();
        insert(1);
        insert(0 -% 1);
        insert(0);
        std.debug.print("{s}\n", .{_str(to_sorted_list())});
        new_heap();
        insert(3);
        insert(1);
        insert(3);
        insert(7);
        std.debug.print("{s}\n", .{_str(pop())});
        std.debug.print("{s}\n", .{_str(pop())});
        std.debug.print("{s}\n", .{_str(pop())});
        std.debug.print("{s}\n", .{_str(pop())});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
