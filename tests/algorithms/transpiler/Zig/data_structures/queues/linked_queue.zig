// Generated by Mochi Zig transpiler on 2025-08-24 23:17 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const Node = struct {
    data: []const u8,
    next: i64,
};

const LinkedQueue = struct {
    nodes: []Node,
    front: i64,
    rear: i64,
};

var queue_var: LinkedQueue = undefined;

fn new_queue() LinkedQueue {
    return .{ .nodes = (&[_]Node{})[0..0], .front = -1, .rear = -1 };
}

fn is_empty(q: *const LinkedQueue) bool {
    return q.front == -1;
}

fn put(q_param: *LinkedQueue, item: []const u8) void {
    const node: Node = .{ .data = item, .next = -1 };
    q_param.nodes = blk0: { var _tmp = std.ArrayList(Node).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp.appendSlice(@as([]const Node, q_param.nodes)) catch |err| handleError(err); _tmp.append(node) catch |err| handleError(err); break :blk0 (_tmp.toOwnedSlice() catch |err| handleError(err)); };
    const idx: i64 = @as(i64, @intCast(q_param.nodes.len)) -% 1;
    if (q_param.front == -1) {
        q_param.front = idx;
        q_param.rear = idx;
    } else {
        const nodes: []Node = q_param.nodes;
        nodes[_idx(nodes.len, q_param.rear)].next = idx;
        q_param.nodes = nodes;
        q_param.rear = idx;
    }
}

fn get(q_param_1: *LinkedQueue) []const u8 {
    if (is_empty(q_param_1)) {
        @panic("dequeue from empty queue");
    }
    const node_1: Node = q_param_1.nodes[_idx(q_param_1.nodes.len, q_param_1.front)];
    q_param_1.front = node_1.next;
    if (q_param_1.front == -1) {
        q_param_1.rear = -1;
    }
    return node_1.data;
}

fn length(q_1: *const LinkedQueue) i64 {
    var count: i64 = 0;
    count = count;
    var idx_1: i64 = q_1.front;
    idx_1 = idx_1;
    while (idx_1 != -1) {
        count = count +% 1;
        idx_1 = q_1.nodes[_idx(q_1.nodes.len, idx_1)].next;
    }
    return count;
}

fn to_string(q_2: *const LinkedQueue) []const u8 {
    var res: []const u8 = "";
    res = res;
    var idx_2: i64 = q_2.front;
    idx_2 = idx_2;
    var first: bool = true;
    first = first;
    while (idx_2 != -1) {
        const node_2: Node = q_2.nodes[_idx(q_2.nodes.len, idx_2)];
        if (first) {
            res = node_2.data;
            first = false;
        } else {
            res = _concat_string(_concat_string(res, " <- "), node_2.data);
        }
        idx_2 = node_2.next;
    }
    return res;
}

fn clear(q_param_2: *LinkedQueue) void {
    q_param_2.nodes = (&[_]i64{});
    q_param_2.front = -1;
    q_param_2.rear = -1;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        queue_var = new_queue();
        std.debug.print("{s}\n", .{_str(is_empty(&queue_var))});
        put(&queue_var, "5");
        put(&queue_var, "9");
        put(&queue_var, "python");
        std.debug.print("{s}\n", .{_str(is_empty(&queue_var))});
        std.debug.print("{s}\n", .{get(&queue_var)});
        put(&queue_var, "algorithms");
        std.debug.print("{s}\n", .{get(&queue_var)});
        std.debug.print("{s}\n", .{get(&queue_var)});
        std.debug.print("{s}\n", .{get(&queue_var)});
        std.debug.print("{s}\n", .{_str(is_empty(&queue_var))});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
