// Generated by Mochi Zig transpiler on 2025-08-24 23:17 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const Queue = struct {
    stack: []i64,
    length: i64,
};

const GetResult = struct {
    queue: Queue,
    value: i64,
};

const FrontResult = struct {
    queue: Queue,
    value: i64,
};

fn empty_queue() Queue {
    return .{ .stack = (&[_]i64{})[0..0], .length = 0 };
}

fn put(q: *const Queue, item: i64) Queue {
    var s: []i64 = blk0: { var _tmp = std.ArrayList(i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp.appendSlice(@as([]const i64, q.stack)) catch |err| handleError(err); _tmp.append(item) catch |err| handleError(err); break :blk0 (_tmp.toOwnedSlice() catch |err| handleError(err)); };
    s = s;
    return .{ .stack = s, .length = q.length +% 1 };
}

fn drop_first(xs: []i64) []i64 {
    var res: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    res = res;
    var i: i64 = 1;
    i = i;
    while (i < @as(i64, @intCast(xs.len))) {
        res = blk1: { var _tmp_1 = std.ArrayList(i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_1.appendSlice(@as([]const i64, res)) catch |err| handleError(err); _tmp_1.append(xs[_idx(xs.len, i)]) catch |err| handleError(err); break :blk1 (_tmp_1.toOwnedSlice() catch |err| handleError(err)); };
        i = i +% 1;
    }
    return res;
}

fn drop_last(xs_1: []i64) []i64 {
    var res_1: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    res_1 = res_1;
    var i_1: i64 = 0;
    i_1 = i_1;
    while (i_1 < @as(i64, @intCast(xs_1.len)) -% 1) {
        res_1 = blk2: { var _tmp_2 = std.ArrayList(i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_2.appendSlice(@as([]const i64, res_1)) catch |err| handleError(err); _tmp_2.append(xs_1[_idx(xs_1.len, i_1)]) catch |err| handleError(err); break :blk2 (_tmp_2.toOwnedSlice() catch |err| handleError(err)); };
        i_1 = i_1 +% 1;
    }
    return res_1;
}

fn rotate(q_1: *const Queue, rotation: i64) Queue {
    var s_1: []i64 = q_1.stack;
    s_1 = s_1;
    var i_2: i64 = 0;
    i_2 = i_2;
    while (i_2 < rotation and @as(i64, @intCast(s_1.len)) > 0) {
        const temp: i64 = s_1[_idx(s_1.len, 0)];
        s_1 = drop_first(s_1);
        s_1 = blk3: { var _tmp_3 = std.ArrayList(i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_3.appendSlice(@as([]const i64, s_1)) catch |err| handleError(err); _tmp_3.append(temp) catch |err| handleError(err); break :blk3 (_tmp_3.toOwnedSlice() catch |err| handleError(err)); };
        i_2 = i_2 +% 1;
    }
    return .{ .stack = s_1, .length = q_1.length };
}

fn get(q_2: *const Queue) GetResult {
    if (q_2.length == 0) {
        @panic("queue empty");
    }
    const q1: Queue = rotate(q_2, 1);
    const v: i64 = q1.stack[_idx(q1.stack.len, q1.length -% 1)];
    const s_2: []i64 = drop_last(q1.stack);
    var q2: Queue = .{ .stack = s_2, .length = q1.length };
    q2 = q2;
    q2 = rotate(&q2, q2.length -% 1);
    q2 = .{ .stack = q2.stack, .length = q2.length -% 1 };
    return .{ .queue = q2, .value = v };
}

fn front(q_3: *const Queue) FrontResult {
    const r: GetResult = get(q_3);
    var q2_1: Queue = put(&r.queue, r.value);
    q2_1 = q2_1;
    q2_1 = rotate(&q2_1, q2_1.length -% 1);
    return .{ .queue = q2_1, .value = r.value };
}

fn size(q_4: *const Queue) i64 {
    return q_4.length;
}

fn to_string(q_5: *const Queue) []const u8 {
    var s_3: []const u8 = "<";
    s_3 = s_3;
    if (q_5.length > 0) {
        s_3 = _concat_string(s_3, _str(q_5.stack[_idx(q_5.stack.len, 0)]));
        var i_3: i64 = 1;
        i_3 = i_3;
        while (i_3 < q_5.length) {
            s_3 = _concat_string(_concat_string(s_3, ", "), _str(q_5.stack[_idx(q_5.stack.len, i_3)]));
            i_3 = i_3 +% 1;
        }
    }
    s_3 = _concat_string(s_3, ">");
    return s_3;
}

fn mochi_main() void {
    var q_6: Queue = empty_queue();
    q_6 = q_6;
    q_6 = put(&q_6, 1);
    q_6 = put(&q_6, 2);
    q_6 = put(&q_6, 3);
    std.debug.print("{s}\n", .{to_string(&q_6)});
    const g: GetResult = get(&q_6);
    q_6 = g.queue;
    std.debug.print("{s}\n", .{_str(g.value)});
    std.debug.print("{s}\n", .{to_string(&q_6)});
    const f: FrontResult = front(&q_6);
    q_6 = f.queue;
    std.debug.print("{s}\n", .{_str(f.value)});
    std.debug.print("{s}\n", .{to_string(&q_6)});
    std.debug.print("{s}\n", .{_str(size(&q_6))});
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        mochi_main();
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
