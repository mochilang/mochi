// Generated by Mochi Zig transpiler on 2025-08-24 23:17 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const Deque = struct {
    data: []i64,
};

const PopResult = struct {
    deque: Deque,
    value: i64,
};

fn empty_deque() Deque {
    return .{ .data = (&[_]i64{})[0..0] };
}

fn push_back(dq: *const Deque, value: i64) Deque {
    return .{ .data = blk0: { var _tmp = std.ArrayList(i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp.appendSlice(@as([]const i64, dq.data)) catch |err| handleError(err); _tmp.append(value) catch |err| handleError(err); break :blk0 (_tmp.toOwnedSlice() catch |err| handleError(err)); } };
}

fn push_front(dq_1: *const Deque, value_1: i64) Deque {
    var res: []i64 = blk1: { var _tmp_1 = std.ArrayList(i64).init(std.heap.page_allocator); _tmp_1.append(value_1) catch unreachable; break :blk1 (_tmp_1.toOwnedSlice() catch unreachable); };
    res = res;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(dq_1.data.len))) {
        res = blk2: { var _tmp_2 = std.ArrayList(i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_2.appendSlice(@as([]const i64, res)) catch |err| handleError(err); _tmp_2.append(dq_1.data[_idx(dq_1.data.len, i)]) catch |err| handleError(err); break :blk2 (_tmp_2.toOwnedSlice() catch |err| handleError(err)); };
        i = i +% 1;
    }
    return .{ .data = res };
}

fn extend_back(dq_2: *const Deque, values: []i64) Deque {
    var res_1: []i64 = dq_2.data;
    res_1 = res_1;
    var i_1: i64 = 0;
    i_1 = i_1;
    while (i_1 < @as(i64, @intCast(values.len))) {
        res_1 = blk3: { var _tmp_3 = std.ArrayList(i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_3.appendSlice(@as([]const i64, res_1)) catch |err| handleError(err); _tmp_3.append(values[_idx(values.len, i_1)]) catch |err| handleError(err); break :blk3 (_tmp_3.toOwnedSlice() catch |err| handleError(err)); };
        i_1 = i_1 +% 1;
    }
    return .{ .data = res_1 };
}

fn extend_front(dq_3: *const Deque, values_1: []i64) Deque {
    var res_2: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    res_2 = res_2;
    var i_2: i64 = @as(i64, @intCast(values_1.len)) -% 1;
    i_2 = i_2;
    while (i_2 >= 0) {
        res_2 = blk4: { var _tmp_4 = std.ArrayList(i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_4.appendSlice(@as([]const i64, res_2)) catch |err| handleError(err); _tmp_4.append(values_1[_idx(values_1.len, i_2)]) catch |err| handleError(err); break :blk4 (_tmp_4.toOwnedSlice() catch |err| handleError(err)); };
        i_2 = i_2 -% 1;
    }
    var j: i64 = 0;
    j = j;
    while (j < @as(i64, @intCast(dq_3.data.len))) {
        res_2 = blk5: { var _tmp_5 = std.ArrayList(i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_5.appendSlice(@as([]const i64, res_2)) catch |err| handleError(err); _tmp_5.append(dq_3.data[_idx(dq_3.data.len, j)]) catch |err| handleError(err); break :blk5 (_tmp_5.toOwnedSlice() catch |err| handleError(err)); };
        j = j +% 1;
    }
    return .{ .data = res_2 };
}

fn pop_back(dq_4: *const Deque) PopResult {
    if (@as(i64, @intCast(dq_4.data.len)) == 0) {
        @panic("pop from empty deque");
    }
    var res_3: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    res_3 = res_3;
    var i_3: i64 = 0;
    i_3 = i_3;
    while (i_3 < @as(i64, @intCast(dq_4.data.len)) -% 1) {
        res_3 = blk6: { var _tmp_6 = std.ArrayList(i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_6.appendSlice(@as([]const i64, res_3)) catch |err| handleError(err); _tmp_6.append(dq_4.data[_idx(dq_4.data.len, i_3)]) catch |err| handleError(err); break :blk6 (_tmp_6.toOwnedSlice() catch |err| handleError(err)); };
        i_3 = i_3 +% 1;
    }
    return .{ .deque = .{ .data = res_3 }, .value = dq_4.data[_idx(dq_4.data.len, @as(i64, @intCast(dq_4.data.len)) -% 1)] };
}

fn pop_front(dq_5: *const Deque) PopResult {
    if (@as(i64, @intCast(dq_5.data.len)) == 0) {
        @panic("popleft from empty deque");
    }
    var res_4: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    res_4 = res_4;
    var i_4: i64 = 1;
    i_4 = i_4;
    while (i_4 < @as(i64, @intCast(dq_5.data.len))) {
        res_4 = blk7: { var _tmp_7 = std.ArrayList(i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_7.appendSlice(@as([]const i64, res_4)) catch |err| handleError(err); _tmp_7.append(dq_5.data[_idx(dq_5.data.len, i_4)]) catch |err| handleError(err); break :blk7 (_tmp_7.toOwnedSlice() catch |err| handleError(err)); };
        i_4 = i_4 +% 1;
    }
    return .{ .deque = .{ .data = res_4 }, .value = dq_5.data[_idx(dq_5.data.len, 0)] };
}

fn is_empty(dq_6: *const Deque) bool {
    return @as(i64, @intCast(dq_6.data.len)) == 0;
}

fn length(dq_7: *const Deque) i64 {
    return @as(i64, @intCast(dq_7.data.len));
}

fn to_string(dq_8: *const Deque) []const u8 {
    if (@as(i64, @intCast(dq_8.data.len)) == 0) {
        return "[]";
    }
    var s: []const u8 = _concat_string("[", _str(dq_8.data[_idx(dq_8.data.len, 0)]));
    s = s;
    var i_5: i64 = 1;
    i_5 = i_5;
    while (i_5 < @as(i64, @intCast(dq_8.data.len))) {
        s = _concat_string(_concat_string(s, ", "), _str(dq_8.data[_idx(dq_8.data.len, i_5)]));
        i_5 = i_5 +% 1;
    }
    return _concat_string(s, "]");
}

fn mochi_main() void {
    var dq_9: Deque = empty_deque();
    dq_9 = dq_9;
    dq_9 = push_back(&dq_9, 2);
    dq_9 = push_front(&dq_9, 1);
    dq_9 = extend_back(&dq_9, blk8: { var _tmp_8 = [2]i64{3, 4}; break :blk8 _tmp_8[0..]; });
    dq_9 = extend_front(&dq_9, blk9: { var _tmp_9 = [1]i64{0}; break :blk9 _tmp_9[0..]; });
    std.debug.print("{s}\n", .{to_string(&dq_9)});
    var r: PopResult = pop_back(&dq_9);
    r = r;
    dq_9 = r.deque;
    std.debug.print("{s}\n", .{_str(r.value)});
    r = pop_front(&dq_9);
    dq_9 = r.deque;
    std.debug.print("{s}\n", .{_str(r.value)});
    std.debug.print("{s}\n", .{to_string(&dq_9)});
    std.debug.print("{s}\n", .{_str(is_empty(&empty_deque()))});
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        mochi_main();
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
