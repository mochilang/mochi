// Generated by Mochi Zig transpiler on 2025-08-24 22:16 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const Queue = struct {
    stack1: []i64,
    stack2: []i64,
};

const GetResult = struct {
    queue: Queue,
    value: i64,
};

var q_var_1: Queue = undefined;
var r1_var: GetResult = undefined;
var r2_var: GetResult = undefined;
var r3_var: GetResult = undefined;
var r4_var: GetResult = undefined;

fn new_queue(items: []i64) Queue {
    return .{ .stack1 = items, .stack2 = (&[_]i64{})[0..0] };
}

fn len_queue(q_param: Queue) i64 {
    return @as(i64, @intCast(q_param.stack1.len)) +% @as(i64, @intCast(q_param.stack2.len));
}

fn str_queue(q_param_1: Queue) []const u8 {
    var items_1: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    items_1 = items_1;
    var i: i64 = @as(i64, @intCast(q_param_1.stack2.len)) -% 1;
    i = i;
    while (i >= 0) {
        items_1 = blk0: { var _tmp = std.ArrayList(i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp.appendSlice(@as([]const i64, items_1)) catch |err| handleError(err); _tmp.append(q_param_1.stack2[_idx(q_param_1.stack2.len, i)]) catch |err| handleError(err); break :blk0 (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i -% 1;
    }
    var j: i64 = 0;
    j = j;
    while (j < @as(i64, @intCast(q_param_1.stack1.len))) {
        items_1 = blk1: { var _tmp_1 = std.ArrayList(i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_1.appendSlice(@as([]const i64, items_1)) catch |err| handleError(err); _tmp_1.append(q_param_1.stack1[_idx(q_param_1.stack1.len, j)]) catch |err| handleError(err); break :blk1 (_tmp_1.toOwnedSlice() catch |err| handleError(err)); };
        j = j +% 1;
    }
    var s: []const u8 = "Queue((";
    s = s;
    var k: i64 = 0;
    k = k;
    while (k < @as(i64, @intCast(items_1.len))) {
        s = _concat_string(s, _str(items_1[_idx(items_1.len, k)]));
        if (k < @as(i64, @intCast(items_1.len)) -% 1) {
            s = _concat_string(s, ", ");
        }
        k = k +% 1;
    }
    s = _concat_string(s, "))");
    return s;
}

fn put(q_param_2: Queue, item: i64) Queue {
    var s1: []i64 = q_param_2.stack1;
    s1 = s1;
    s1 = blk2: { var _tmp_2 = std.ArrayList(i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_2.appendSlice(@as([]const i64, s1)) catch |err| handleError(err); _tmp_2.append(item) catch |err| handleError(err); break :blk2 (_tmp_2.toOwnedSlice() catch |err| handleError(err)); };
    return .{ .stack1 = s1, .stack2 = q_param_2.stack2 };
}

fn get(q_param_3: Queue) GetResult {
    var s1_1: []i64 = q_param_3.stack1;
    s1_1 = s1_1;
    var s2: []i64 = q_param_3.stack2;
    s2 = s2;
    if (@as(i64, @intCast(s2.len)) == 0) {
        while (@as(i64, @intCast(s1_1.len)) > 0) {
            const idx: i64 = @as(i64, @intCast(s1_1.len)) -% 1;
            const v: i64 = s1_1[_idx(s1_1.len, idx)];
            var new_s1: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
            new_s1 = new_s1;
            var i_1: i64 = 0;
            i_1 = i_1;
            while (i_1 < idx) {
                new_s1 = blk3: { var _tmp_3 = std.ArrayList(i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_3.appendSlice(@as([]const i64, new_s1)) catch |err| handleError(err); _tmp_3.append(s1_1[_idx(s1_1.len, i_1)]) catch |err| handleError(err); break :blk3 (_tmp_3.toOwnedSlice() catch |err| handleError(err)); };
                i_1 = i_1 +% 1;
            }
            s1_1 = new_s1;
            s2 = blk4: { var _tmp_4 = std.ArrayList(i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_4.appendSlice(@as([]const i64, s2)) catch |err| handleError(err); _tmp_4.append(v) catch |err| handleError(err); break :blk4 (_tmp_4.toOwnedSlice() catch |err| handleError(err)); };
        }
    }
    if (@as(i64, @intCast(s2.len)) == 0) {
        @panic("Queue is empty");
    }
    const idx2: i64 = @as(i64, @intCast(s2.len)) -% 1;
    const value: i64 = s2[_idx(s2.len, idx2)];
    var new_s2: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    new_s2 = new_s2;
    var j_1: i64 = 0;
    j_1 = j_1;
    while (j_1 < idx2) {
        new_s2 = blk5: { var _tmp_5 = std.ArrayList(i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_5.appendSlice(@as([]const i64, new_s2)) catch |err| handleError(err); _tmp_5.append(s2[_idx(s2.len, j_1)]) catch |err| handleError(err); break :blk5 (_tmp_5.toOwnedSlice() catch |err| handleError(err)); };
        j_1 = j_1 +% 1;
    }
    s2 = new_s2;
    return .{ .queue = .{ .stack1 = s1_1, .stack2 = s2 }, .value = value };
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        q_var_1 = new_queue(blk6: { var _tmp_6 = [3]i64{10, 20, 30}; break :blk6 _tmp_6[0..]; });
        r1_var = get(q_var_1);
        q_var_1 = r1_var.queue;
        q_var_1 = put(q_var_1, 40);
        r2_var = get(q_var_1);
        q_var_1 = r2_var.queue;
        r3_var = get(q_var_1);
        q_var_1 = r3_var.queue;
        r4_var = get(q_var_1);
        q_var_1 = r4_var.queue;
        std.debug.print("{s}\n", .{_str(r1_var.value)});
        std.debug.print("{s}\n", .{_str(r2_var.value)});
        std.debug.print("{s}\n", .{_str(r3_var.value)});
        std.debug.print("{s}\n", .{_str(len_queue(q_var_1))});
        std.debug.print("{s}\n", .{_str(r4_var.value)});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
