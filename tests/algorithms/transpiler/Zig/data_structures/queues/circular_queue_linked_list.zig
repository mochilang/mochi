// Generated by Mochi Zig transpiler on 2025-08-24 23:17 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const CircularQueue = struct {
    data: [][]const u8,
    next: []i64,
    prev: []i64,
    front: i64,
    rear: i64,
};

const DequeueResult = struct {
    queue: CircularQueue,
    value: []const u8,
};

fn create_queue(capacity: i64) CircularQueue {
    var data: [][]const u8 = std.heap.page_allocator.alloc([]const u8, 0) catch unreachable;
    data = data;
    var next: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    next = next;
    var prev: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    prev = prev;
    var i: i64 = 0;
    i = i;
    while (i < capacity) {
        data = blk0: { var _tmp = std.ArrayList([]const u8).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp.appendSlice(@as([]const []const u8, data)) catch |err| handleError(err); _tmp.append(@constCast("")) catch |err| handleError(err); break :blk0 (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        next = blk1: { var _tmp_1 = std.ArrayList(i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_1.appendSlice(@as([]const i64, next)) catch |err| handleError(err); _tmp_1.append(@mod(i +% 1, capacity)) catch |err| handleError(err); break :blk1 (_tmp_1.toOwnedSlice() catch |err| handleError(err)); };
        prev = blk2: { var _tmp_2 = std.ArrayList(i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_2.appendSlice(@as([]const i64, prev)) catch |err| handleError(err); _tmp_2.append(@mod(i -% 1 +% capacity, capacity)) catch |err| handleError(err); break :blk2 (_tmp_2.toOwnedSlice() catch |err| handleError(err)); };
        i = i +% 1;
    }
    return .{ .data = data, .next = next, .prev = prev, .front = 0, .rear = 0 };
}

fn is_empty(q: *const CircularQueue) bool {
    return q.front == q.rear and q.data[_idx(q.data.len, q.front).._idx(q.data.len, q.front) + 1].len == 0;
}

fn check_can_perform(q_1: *const CircularQueue) void {
    if (is_empty(q_1)) {
        @panic("Empty Queue");
    }
}

fn check_is_full(q_2: *const CircularQueue) void {
    if (q_2.next[_idx(q_2.next.len, q_2.rear)] == q_2.front) {
        @panic("Full Queue");
    }
}

fn peek(q_3: *const CircularQueue) []const u8 {
    check_can_perform(q_3);
    return q_3.data[_idx(q_3.data.len, q_3.front).._idx(q_3.data.len, q_3.front) + 1];
}

fn enqueue(q_param: *CircularQueue, value: []const u8) CircularQueue {
    check_is_full(q_param);
    if (!(is_empty(q_param))) {
        q_param.rear = q_param.next[_idx(q_param.next.len, q_param.rear)];
    }
    var data_1: [][]const u8 = q_param.data;
    data_1 = data_1;
    data_1[_idx(data_1.len, q_param.rear)] = value;
    q_param.data = data_1;
    return q_param.*;
}

fn dequeue(q_param_1: *CircularQueue) DequeueResult {
    check_can_perform(q_param_1);
    var data_2: [][]const u8 = q_param_1.data;
    data_2 = data_2;
    const val: []const u8 = data_2[_idx(data_2.len, q_param_1.front)];
    data_2[_idx(data_2.len, q_param_1.front)] = "";
    q_param_1.data = data_2;
    if (q_param_1.front != q_param_1.rear) {
        q_param_1.front = q_param_1.next[_idx(q_param_1.next.len, q_param_1.front)];
    }
    return .{ .queue = (q_param_1).*, .value = val };
}

fn mochi_main() void {
    var q_4: CircularQueue = create_queue(3);
    q_4 = q_4;
    std.debug.print("{s}\n", .{_str(is_empty(&q_4))});
    q_4 = enqueue(&q_4, "a");
    q_4 = enqueue(&q_4, "b");
    std.debug.print("{s}\n", .{peek(&q_4)});
    var res: DequeueResult = dequeue(&q_4);
    res = res;
    q_4 = res.queue;
    std.debug.print("{s}\n", .{res.value});
    res = dequeue(&q_4);
    q_4 = res.queue;
    std.debug.print("{s}\n", .{res.value});
    std.debug.print("{s}\n", .{_str(is_empty(&q_4))});
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        mochi_main();
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
