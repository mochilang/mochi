// Generated by Mochi Zig transpiler on 2025-08-24 22:16 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const FixedPriorityQueue = struct {
    queues: [][]i64,
};

const FPQDequeueResult = struct {
    queue: FixedPriorityQueue,
    value: i64,
};

const ElementPriorityQueue = struct {
    queue: []i64,
};

const EPQDequeueResult = struct {
    queue: ElementPriorityQueue,
    value: i64,
};

fn panic(msg: []const u8) void {
    std.debug.print("{s}\n", .{msg});
}

fn fpq_new() FixedPriorityQueue {
    return .{ .queues = @constCast(([3][]i64{@constCast((&[_]i64{})[0..0]), @constCast((&[_]i64{})[0..0]), @constCast((&[_]i64{})[0..0])})[0..3]) };
}

fn fpq_enqueue(fpq_param: *FixedPriorityQueue, priority: i64, data: i64) FixedPriorityQueue {
    if (priority < 0 or priority >= @as(i64, @intCast(fpq_param.queues.len))) {
        panic("Valid priorities are 0, 1, and 2");
        return fpq_param.*;
    }
    if (@as(i64, @intCast(fpq_param.queues[_idx(fpq_param.queues.len, priority)].len)) >= 100) {
        panic("Maximum queue size is 100");
        return fpq_param.*;
    }
    var qs: [][]i64 = fpq_param.queues;
    qs = qs;
    qs[_idx(qs.len, priority)] = blk0: { var _tmp = std.ArrayList(i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp.appendSlice(@as([]const i64, qs[_idx(qs.len, priority)])) catch |err| handleError(err); _tmp.append(data) catch |err| handleError(err); break :blk0 (_tmp.toOwnedSlice() catch |err| handleError(err)); };
    fpq_param.queues = qs;
    return fpq_param.*;
}

fn fpq_dequeue(fpq_param_1: *FixedPriorityQueue) FPQDequeueResult {
    var qs_1: [][]i64 = fpq_param_1.queues;
    qs_1 = qs_1;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(qs_1.len))) {
        const q: []i64 = qs_1[_idx(qs_1.len, i)];
        if (@as(i64, @intCast(q.len)) > 0) {
            const val: i64 = q[_idx(q.len, 0)];
            var new_q: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
            new_q = new_q;
            var j: i64 = 1;
            j = j;
            while (j < @as(i64, @intCast(q.len))) {
                new_q = blk1: { var _tmp_1 = std.ArrayList(i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_1.appendSlice(@as([]const i64, new_q)) catch |err| handleError(err); _tmp_1.append(q[_idx(q.len, j)]) catch |err| handleError(err); break :blk1 (_tmp_1.toOwnedSlice() catch |err| handleError(err)); };
                j = j +% 1;
            }
            qs_1[_idx(qs_1.len, i)] = new_q;
            fpq_param_1.queues = qs_1;
            return .{ .queue = (fpq_param_1).*, .value = val };
        }
        i = i +% 1;
    }
    panic("All queues are empty");
    return .{ .queue = (fpq_param_1).*, .value = 0 };
}

fn fpq_to_string(fpq: FixedPriorityQueue) []const u8 {
    var lines: [][]const u8 = std.heap.page_allocator.alloc([]const u8, 0) catch unreachable;
    lines = lines;
    var i_1: i64 = 0;
    i_1 = i_1;
    while (i_1 < @as(i64, @intCast(fpq.queues.len))) {
        var q_str: []const u8 = "[";
        q_str = q_str;
        const q_1: []i64 = fpq.queues[_idx(fpq.queues.len, i_1)];
        var j_1: i64 = 0;
        j_1 = j_1;
        while (j_1 < @as(i64, @intCast(q_1.len))) {
            if (j_1 > 0) {
                q_str = _concat_string(q_str, ", ");
            }
            q_str = _concat_string(q_str, _str(q_1[_idx(q_1.len, j_1)]));
            j_1 = j_1 +% 1;
        }
        q_str = _concat_string(q_str, "]");
        lines = blk2: { var _tmp_2 = std.ArrayList([]const u8).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_2.appendSlice(@as([]const []const u8, lines)) catch |err| handleError(err); _tmp_2.append(@constCast(_concat_string(_concat_string(_concat_string("Priority ", _str(i_1)), ": "), q_str))) catch |err| handleError(err); break :blk2 (_tmp_2.toOwnedSlice() catch |err| handleError(err)); };
        i_1 = i_1 +% 1;
    }
    var res: []const u8 = "";
    res = res;
    i_1 = 0;
    while (i_1 < @as(i64, @intCast(lines.len))) {
        if (i_1 > 0) {
            res = _concat_string(res, "\n");
        }
        res = _concat_string(res, lines[_idx(lines.len, i_1)]);
        i_1 = i_1 +% 1;
    }
    return res;
}

fn epq_new() ElementPriorityQueue {
    return .{ .queue = (&[_]i64{})[0..0] };
}

fn epq_enqueue(epq_param: *ElementPriorityQueue, data_1: i64) ElementPriorityQueue {
    if (@as(i64, @intCast(epq_param.queue.len)) >= 100) {
        panic("Maximum queue size is 100");
        return epq_param.*;
    }
    epq_param.queue = blk3: { var _tmp_3 = std.ArrayList(i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_3.appendSlice(@as([]const i64, epq_param.queue)) catch |err| handleError(err); _tmp_3.append(data_1) catch |err| handleError(err); break :blk3 (_tmp_3.toOwnedSlice() catch |err| handleError(err)); };
    return epq_param.*;
}

fn epq_dequeue(epq_param_1: *ElementPriorityQueue) EPQDequeueResult {
    if (@as(i64, @intCast(epq_param_1.queue.len)) == 0) {
        panic("The queue is empty");
        return .{ .queue = (epq_param_1).*, .value = 0 };
    }
    var min_val: i64 = epq_param_1.queue[_idx(epq_param_1.queue.len, 0)];
    min_val = min_val;
    var idx: i64 = 0;
    idx = idx;
    var i_2: i64 = 1;
    i_2 = i_2;
    while (i_2 < @as(i64, @intCast(epq_param_1.queue.len))) {
        const v: i64 = epq_param_1.queue[_idx(epq_param_1.queue.len, i_2)];
        if (v < min_val) {
            min_val = v;
            idx = i_2;
        }
        i_2 = i_2 +% 1;
    }
    var new_q_1: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    new_q_1 = new_q_1;
    i_2 = 0;
    while (i_2 < @as(i64, @intCast(epq_param_1.queue.len))) {
        if (i_2 != idx) {
            new_q_1 = blk4: { var _tmp_4 = std.ArrayList(i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_4.appendSlice(@as([]const i64, new_q_1)) catch |err| handleError(err); _tmp_4.append(epq_param_1.queue[_idx(epq_param_1.queue.len, i_2)]) catch |err| handleError(err); break :blk4 (_tmp_4.toOwnedSlice() catch |err| handleError(err)); };
        }
        i_2 = i_2 +% 1;
    }
    epq_param_1.queue = new_q_1;
    return .{ .queue = (epq_param_1).*, .value = min_val };
}

fn epq_to_string(epq: ElementPriorityQueue) []const u8 {
    return _str(epq.queue);
}

fn fixed_priority_queue() void {
    var fpq_1: FixedPriorityQueue = fpq_new();
    fpq_1 = fpq_1;
    fpq_1 = fpq_enqueue(&fpq_1, 0, 10);
    fpq_1 = fpq_enqueue(&fpq_1, 1, 70);
    fpq_1 = fpq_enqueue(&fpq_1, 0, 100);
    fpq_1 = fpq_enqueue(&fpq_1, 2, 1);
    fpq_1 = fpq_enqueue(&fpq_1, 2, 5);
    fpq_1 = fpq_enqueue(&fpq_1, 1, 7);
    fpq_1 = fpq_enqueue(&fpq_1, 2, 4);
    fpq_1 = fpq_enqueue(&fpq_1, 1, 64);
    fpq_1 = fpq_enqueue(&fpq_1, 0, 128);
    std.debug.print("{s}\n", .{fpq_to_string(fpq_1)});
    var res_1: FPQDequeueResult = fpq_dequeue(&fpq_1);
    res_1 = res_1;
    fpq_1 = res_1.queue;
    std.debug.print("{s}\n", .{_str(res_1.value)});
    res_1 = fpq_dequeue(&fpq_1);
    fpq_1 = res_1.queue;
    std.debug.print("{s}\n", .{_str(res_1.value)});
    res_1 = fpq_dequeue(&fpq_1);
    fpq_1 = res_1.queue;
    std.debug.print("{s}\n", .{_str(res_1.value)});
    res_1 = fpq_dequeue(&fpq_1);
    fpq_1 = res_1.queue;
    std.debug.print("{s}\n", .{_str(res_1.value)});
    res_1 = fpq_dequeue(&fpq_1);
    fpq_1 = res_1.queue;
    std.debug.print("{s}\n", .{_str(res_1.value)});
    std.debug.print("{s}\n", .{fpq_to_string(fpq_1)});
    res_1 = fpq_dequeue(&fpq_1);
    fpq_1 = res_1.queue;
    std.debug.print("{s}\n", .{_str(res_1.value)});
    res_1 = fpq_dequeue(&fpq_1);
    fpq_1 = res_1.queue;
    std.debug.print("{s}\n", .{_str(res_1.value)});
    res_1 = fpq_dequeue(&fpq_1);
    fpq_1 = res_1.queue;
    std.debug.print("{s}\n", .{_str(res_1.value)});
    res_1 = fpq_dequeue(&fpq_1);
    fpq_1 = res_1.queue;
    std.debug.print("{s}\n", .{_str(res_1.value)});
    res_1 = fpq_dequeue(&fpq_1);
    fpq_1 = res_1.queue;
    std.debug.print("{s}\n", .{_str(res_1.value)});
}

fn element_priority_queue() void {
    var epq_1: ElementPriorityQueue = epq_new();
    epq_1 = epq_1;
    epq_1 = epq_enqueue(&epq_1, 10);
    epq_1 = epq_enqueue(&epq_1, 70);
    epq_1 = epq_enqueue(&epq_1, 100);
    epq_1 = epq_enqueue(&epq_1, 1);
    epq_1 = epq_enqueue(&epq_1, 5);
    epq_1 = epq_enqueue(&epq_1, 7);
    epq_1 = epq_enqueue(&epq_1, 4);
    epq_1 = epq_enqueue(&epq_1, 64);
    epq_1 = epq_enqueue(&epq_1, 128);
    std.debug.print("{s}\n", .{epq_to_string(epq_1)});
    var res_2: EPQDequeueResult = epq_dequeue(&epq_1);
    res_2 = res_2;
    epq_1 = res_2.queue;
    std.debug.print("{s}\n", .{_str(res_2.value)});
    res_2 = epq_dequeue(&epq_1);
    epq_1 = res_2.queue;
    std.debug.print("{s}\n", .{_str(res_2.value)});
    res_2 = epq_dequeue(&epq_1);
    epq_1 = res_2.queue;
    std.debug.print("{s}\n", .{_str(res_2.value)});
    res_2 = epq_dequeue(&epq_1);
    epq_1 = res_2.queue;
    std.debug.print("{s}\n", .{_str(res_2.value)});
    res_2 = epq_dequeue(&epq_1);
    epq_1 = res_2.queue;
    std.debug.print("{s}\n", .{_str(res_2.value)});
    std.debug.print("{s}\n", .{epq_to_string(epq_1)});
    res_2 = epq_dequeue(&epq_1);
    epq_1 = res_2.queue;
    std.debug.print("{s}\n", .{_str(res_2.value)});
    res_2 = epq_dequeue(&epq_1);
    epq_1 = res_2.queue;
    std.debug.print("{s}\n", .{_str(res_2.value)});
    res_2 = epq_dequeue(&epq_1);
    epq_1 = res_2.queue;
    std.debug.print("{s}\n", .{_str(res_2.value)});
    res_2 = epq_dequeue(&epq_1);
    epq_1 = res_2.queue;
    std.debug.print("{s}\n", .{_str(res_2.value)});
    res_2 = epq_dequeue(&epq_1);
    epq_1 = res_2.queue;
    std.debug.print("{s}\n", .{_str(res_2.value)});
}

fn mochi_main() void {
    fixed_priority_queue();
    element_priority_queue();
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        mochi_main();
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
