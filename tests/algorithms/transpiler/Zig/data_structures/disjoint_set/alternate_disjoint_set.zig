// Generated by Mochi Zig transpiler on 2025-08-25 16:29 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const DisjointSet = struct {
    set_counts: []i64,
    max_set: i64,
    ranks: []i64,
    parents: []i64,
};

var ds_var_1: DisjointSet = undefined;

fn max_list(xs: []i64) i64 {
    var m: i64 = xs[_idx(xs.len, 0)];
    m = m;
    var i: i64 = 1;
    i = i;
    while (i < @as(i64, @intCast(xs.len))) {
        if (xs[_idx(xs.len, i)] > m) {
            m = xs[_idx(xs.len, i)];
        }
        i = i +% 1;
    }
    return m;
}

fn disjoint_set_new(set_counts: []i64) DisjointSet {
    const max_set: i64 = max_list(set_counts);
    const num_sets: i64 = @as(i64, @intCast(set_counts.len));
    var ranks: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    ranks = ranks;
    var parents: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    parents = parents;
    var i_1: i64 = 0;
    i_1 = i_1;
    while (i_1 < num_sets) {
        ranks = blk0: { var _tmp = std.ArrayList(i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp.appendSlice(@as([]const i64, ranks)) catch |err| handleError(err); _tmp.append(1) catch |err| handleError(err); break :blk0 (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        parents = blk1: { var _tmp_1 = std.ArrayList(i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_1.appendSlice(@as([]const i64, parents)) catch |err| handleError(err); _tmp_1.append(i_1) catch |err| handleError(err); break :blk1 (_tmp_1.toOwnedSlice() catch |err| handleError(err)); };
        i_1 = i_1 +% 1;
    }
    return .{ .set_counts = set_counts, .max_set = max_set, .ranks = ranks, .parents = parents };
}

fn get_parent(ds_param: *DisjointSet, idx: i64) i64 {
    if (ds_param.parents[_idx(ds_param.parents.len, idx)] == idx) {
        return idx;
    }
    var parents_1: []i64 = ds_param.parents;
    parents_1 = parents_1;
    parents_1[_idx(parents_1.len, idx)] = get_parent(ds_param, parents_1[_idx(parents_1.len, idx)]);
    ds_param.parents = parents_1;
    return ds_param.parents[_idx(ds_param.parents.len, idx)];
}

fn merge(ds_param_1: *DisjointSet, src: i64, dst: i64) bool {
    const src_parent: i64 = get_parent(ds_param_1, src);
    const dst_parent: i64 = get_parent(ds_param_1, dst);
    if (src_parent == dst_parent) {
        return false;
    }
    if (ds_param_1.ranks[_idx(ds_param_1.ranks.len, dst_parent)] >= ds_param_1.ranks[_idx(ds_param_1.ranks.len, src_parent)]) {
        var counts: []i64 = ds_param_1.set_counts;
        counts = counts;
        counts[_idx(counts.len, dst_parent)] = counts[_idx(counts.len, dst_parent)] +% counts[_idx(counts.len, src_parent)];
        counts[_idx(counts.len, src_parent)] = 0;
        ds_param_1.set_counts = counts;
        var parents_2: []i64 = ds_param_1.parents;
        parents_2 = parents_2;
        parents_2[_idx(parents_2.len, src_parent)] = dst_parent;
        ds_param_1.parents = parents_2;
        if (ds_param_1.ranks[_idx(ds_param_1.ranks.len, dst_parent)] == ds_param_1.ranks[_idx(ds_param_1.ranks.len, src_parent)]) {
            var ranks_1: []i64 = ds_param_1.ranks;
            ranks_1 = ranks_1;
            ranks_1[_idx(ranks_1.len, dst_parent)] = ranks_1[_idx(ranks_1.len, dst_parent)] +% 1;
            ds_param_1.ranks = ranks_1;
        }
        const joined: i64 = ds_param_1.set_counts[_idx(ds_param_1.set_counts.len, dst_parent)];
        if (joined > ds_param_1.max_set) {
            ds_param_1.max_set = joined;
        }
    } else {
        var counts_1: []i64 = ds_param_1.set_counts;
        counts_1 = counts_1;
        counts_1[_idx(counts_1.len, src_parent)] = counts_1[_idx(counts_1.len, src_parent)] +% counts_1[_idx(counts_1.len, dst_parent)];
        counts_1[_idx(counts_1.len, dst_parent)] = 0;
        ds_param_1.set_counts = counts_1;
        var parents_3: []i64 = ds_param_1.parents;
        parents_3 = parents_3;
        parents_3[_idx(parents_3.len, dst_parent)] = src_parent;
        ds_param_1.parents = parents_3;
        const joined_1: i64 = ds_param_1.set_counts[_idx(ds_param_1.set_counts.len, src_parent)];
        if (joined_1 > ds_param_1.max_set) {
            ds_param_1.max_set = joined_1;
        }
    }
    return true;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        ds_var_1 = disjoint_set_new(blk2: { var _tmp_2 = [3]i64{1, 1, 1}; break :blk2 _tmp_2[0..]; });
        std.debug.print("{s}\n", .{_str(merge(&ds_var_1, 1, 2))});
        std.debug.print("{s}\n", .{_str(merge(&ds_var_1, 0, 2))});
        std.debug.print("{s}\n", .{_str(merge(&ds_var_1, 0, 1))});
        std.debug.print("{s}\n", .{_str(get_parent(&ds_var_1, 0))});
        std.debug.print("{s}\n", .{_str(get_parent(&ds_var_1, 1))});
        std.debug.print("{s}\n", .{_str(ds_var_1.max_set)});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
