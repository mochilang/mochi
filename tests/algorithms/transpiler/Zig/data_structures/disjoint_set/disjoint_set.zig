// Generated by Mochi Zig transpiler on 2025-08-25 16:29 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const FindResult = struct {
    ds: DS,
    root: i64,
};

const DS = struct {
    parent: []i64,
    rank: []i64,
};

var ds_var_1: DS = undefined;
var i_var_1: i64 = 0;

fn make_set(ds_param: *const DS, x: i64) DS {
    var p: []i64 = ds_param.parent;
    p = p;
    var r: []i64 = ds_param.rank;
    r = r;
    p[_idx(p.len, x)] = x;
    r[_idx(r.len, x)] = 0;
    return .{ .parent = p, .rank = r };
}

fn find_set(ds_param_1: *const DS, x_1: i64) FindResult {
    if (ds_param_1.parent[_idx(ds_param_1.parent.len, x_1)] == x_1) {
        return .{ .ds = (ds_param_1).*, .root = x_1 };
    }
    var res: FindResult = find_set(ds_param_1, ds_param_1.parent[_idx(ds_param_1.parent.len, x_1)]);
    res = res;
    res.ds.parent[_idx(res.ds.parent.len, x_1)] = res.root;
    return .{ .ds = .{ .parent = res.ds.parent, .rank = res.ds.rank }, .root = res.root };
}

fn union_set(ds_param_2: *const DS, x_2: i64, y: i64) DS {
    const fx: FindResult = find_set(ds_param_2, x_2);
    var fy: FindResult = find_set(&fx.ds, y);
    fy = fy;
    if (fx.root == fy.root) {
        return fy.ds;
    }
    if (fy.ds.rank[_idx(fy.ds.rank.len, fx.root)] > fy.ds.rank[_idx(fy.ds.rank.len, fy.root)]) {
        fy.ds.parent[_idx(fy.ds.parent.len, fy.root)] = fx.root;
    } else {
        fy.ds.parent[_idx(fy.ds.parent.len, fx.root)] = fy.root;
        if (fy.ds.rank[_idx(fy.ds.rank.len, fx.root)] == fy.ds.rank[_idx(fy.ds.rank.len, fy.root)]) {
            fy.ds.rank[_idx(fy.ds.rank.len, fy.root)] = fy.ds.rank[_idx(fy.ds.rank.len, fy.root)] +% 1;
        }
    }
    return .{ .parent = fy.ds.parent, .rank = fy.ds.rank };
}

fn same_python_set(a: i64, b: i64) bool {
    if (a < 3 and b < 3) {
        return true;
    }
    if (a >= 3 and a < 6 and b >= 3 and b < 6) {
        return true;
    }
    return false;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        ds_var_1 = .{ .parent = (&[_]i64{})[0..0], .rank = (&[_]i64{})[0..0] };
        ds_var_1 = union_set(&ds_var_1, 0, 1);
        ds_var_1 = union_set(&ds_var_1, 1, 2);
        ds_var_1 = union_set(&ds_var_1, 3, 4);
        ds_var_1 = union_set(&ds_var_1, 3, 5);
        i_var_1 = 0;
        i_var_1 = 0;
        while (i_var_1 < 6) {
            ds_var_1.parent = blk0: { var _tmp = std.ArrayList(i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp.appendSlice(@as([]const i64, ds_var_1.parent)) catch |err| handleError(err); _tmp.append(0) catch |err| handleError(err); break :blk0 (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            ds_var_1.rank = blk1: { var _tmp_1 = std.ArrayList(i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_1.appendSlice(@as([]const i64, ds_var_1.rank)) catch |err| handleError(err); _tmp_1.append(0) catch |err| handleError(err); break :blk1 (_tmp_1.toOwnedSlice() catch |err| handleError(err)); };
            ds_var_1 = make_set(&ds_var_1, i_var_1);
            i_var_1 = i_var_1 +% 1;
        }
        while (i_var_1 < 6) {
            var j: i64 = 0;
            j = j;
            while (j < 6) {
                const res_i: FindResult = find_set(&ds_var_1, i_var_1);
                ds_var_1 = res_i.ds;
                const res_j: FindResult = find_set(&ds_var_1, j);
                ds_var_1 = res_j.ds;
                const same: bool = same_python_set(i_var_1, j);
                const root_same: bool = res_i.root == res_j.root;
                if (same) {
                    if (!(root_same)) {
                        @panic("nodes should be in same set");
                    }
                } else {
                    if (root_same) {
                        @panic("nodes should be in different sets");
                    }
                }
                j = j +% 1;
            }
            i_var_1 = i_var_1 +% 1;
        }
        while (i_var_1 < 6) {
            const res_1: FindResult = find_set(&ds_var_1, i_var_1);
            ds_var_1 = res_1.ds;
            std.debug.print("{s}\n", .{_str(res_1.root)});
            i_var_1 = i_var_1 +% 1;
        }
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
