// Generated by Mochi Zig transpiler on 2025-08-07 08:09 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn tail(xs: []i64) []i64 {
    var res: []i64 = &[_]i64{};
    var i: i64 = 1;
    while (i < @as(i64, @intCast(xs.len))) {
        res = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, res)) catch |err| handleError(err); _tmp.append(xs[@as(usize, @intCast(i))]) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    return res;
}

fn rotate_left(xs: []i64) []i64 {
    if (@as(i64, @intCast(xs.len)) == 0) {
        return xs;
    }
    var res: []i64 = &[_]i64{};
    var i: i64 = 1;
    while (i < @as(i64, @intCast(xs.len))) {
        res = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, res)) catch |err| handleError(err); _tmp.append(xs[@as(usize, @intCast(i))]) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    res = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, res)) catch |err| handleError(err); _tmp.append(xs[@as(usize, @intCast(0))]) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
    return res;
}

fn permute_recursive(nums: []i64) [][]i64 {
    if (@as(i64, @intCast(nums.len)) == 0) {
        const base: [][]i64 = &[_][]i64{};
        return blk: { var _tmp = std.ArrayList([]i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []i64, base)) catch |err| handleError(err); _tmp.append(&[_]i64{}) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
    }
    var result: [][]i64 = &[_][]i64{};
    var current: []i64 = blk: { const tmp = std.heap.page_allocator.alloc(i64, nums.len) catch unreachable; @memcpy(tmp, nums); break :blk tmp; };
    var count: i64 = 0;
    while (count < @as(i64, @intCast(nums.len))) {
        const n: i64 = current[@as(usize, @intCast(0))];
        const rest: []i64 = tail(current);
        const perms: [][]i64 = permute_recursive(rest);
        var j: i64 = 0;
        while (j < @as(i64, @intCast(perms.len))) {
            const perm: []i64 = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, perms[@as(usize, @intCast(j))])) catch |err| handleError(err); _tmp.append(n) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            result = blk: { var _tmp = std.ArrayList([]i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []i64, result)) catch |err| handleError(err); _tmp.append(perm) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            j = j + 1;
        }
        current = rotate_left(current);
        count = count + 1;
    }
    return result;
}

fn swap(xs: []i64, i: i64, j: i64) []i64 {
    var res: []i64 = &[_]i64{};
    var k: i64 = 0;
    while (k < @as(i64, @intCast(xs.len))) {
        if (k == i) {
            res = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, res)) catch |err| handleError(err); _tmp.append(xs[@as(usize, @intCast(j))]) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        } else {
            if (k == j) {
                res = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, res)) catch |err| handleError(err); _tmp.append(xs[@as(usize, @intCast(i))]) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            } else {
                res = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, res)) catch |err| handleError(err); _tmp.append(xs[@as(usize, @intCast(k))]) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            }
        }
        k = k + 1;
    }
    return res;
}

fn permute_backtrack_helper(nums: []i64, start: i64, output: [][]i64) [][]i64 {
    if (start == @as(i64, @intCast(nums.len)) - 1) {
        return blk: { var _tmp = std.ArrayList([]i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []i64, output)) catch |err| handleError(err); _tmp.append(nums) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
    }
    var i: i64 = start;
    var res: [][]i64 = blk: { const tmp = std.heap.page_allocator.alloc([]i64, output.len) catch unreachable; @memcpy(tmp, output); break :blk tmp; };
    while (i < @as(i64, @intCast(nums.len))) {
        const swapped: []i64 = swap(nums, start, i);
        res = permute_backtrack_helper(swapped, start + 1, res);
        i = i + 1;
    }
    return res;
}

fn permute_backtrack(nums: []i64) [][]i64 {
    const output: [][]i64 = &[_][]i64{};
    return permute_backtrack_helper(nums, 0, output);
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        std.debug.print("{s}\n", .{_str(permute_recursive(blk0: { var _tmp0 = std.heap.page_allocator.alloc(i64, 3) catch unreachable; _tmp0[0] = 1; _tmp0[1] = 2; _tmp0[2] = 3; break :blk0 _tmp0; }))});
        std.debug.print("{s}\n", .{_str(permute_backtrack(blk1: { var _tmp1 = std.heap.page_allocator.alloc(i64, 3) catch unreachable; _tmp1[0] = 1; _tmp1[1] = 2; _tmp1[2] = 3; break :blk1 _tmp1; }))});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    if (info == .Pointer and info.Pointer.size == .Slice) {
        var out = std.ArrayList(u8).init(std.heap.page_allocator);
        defer out.deinit();
        out.append('[') catch unreachable;
        for (v, 0..) |e, i| {
            if (i != 0) { out.append(' ') catch unreachable; }
            const s = _str(e);
            out.appendSlice(s) catch unreachable;
        }
        out.append(']') catch unreachable;
        return out.toOwnedSlice() catch unreachable;
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * std.mem.page_size;
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
