// Generated by Mochi Zig transpiler on 2025-08-07 08:09 +0700
const std = @import("std");
const Value = union(enum) { Null: void, Int: i64, Float: f64, Str: []const u8, Bool: bool, List: [][]i64, StrList: [][]const u8, };

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

var example_var: []Value = &[_]Value{};

fn product_sum(arr: []Value, depth: i64) i64 {
    var total: i64 = 0;
    var i: i64 = 0;
    while (i < @as(i64, @intCast(arr.len))) {
        const el: Value = arr[@as(usize, @intCast(i))];
        if (@as(i64, @intCast(el.len)) != 0) {
            total = total + product_sum(el, depth + 1);
        } else {
            total = total + @as(i64, el);
        }
        i = i + 1;
    }
    return total * depth;
}

fn product_sum_array(array: []Value) i64 {
    const res: i64 = product_sum(array, 1);
    return res;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        example_var = blk0: { var _tmp0 = std.heap.page_allocator.alloc(Value, 5) catch unreachable; _tmp0[0] = Value{.Int = 5}; _tmp0[1] = Value{.Int = 2}; _tmp0[2] = Value{.Int = blk1: { var _tmp1 = std.heap.page_allocator.alloc(i64, 2) catch unreachable; _tmp1[0] = 0 - 7; _tmp1[1] = 1; break :blk1 _tmp1; }}; _tmp0[3] = Value{.Int = 3}; _tmp0[4] = Value{.Int = blk2: { var _tmp2 = std.heap.page_allocator.alloc(Value, 3) catch unreachable; _tmp2[0] = Value{.Int = 6}; _tmp2[1] = Value{.Int = blk3: { var _tmp3 = std.heap.page_allocator.alloc(i64, 2) catch unreachable; _tmp3[0] = 0 - 13; _tmp3[1] = 8; break :blk3 _tmp3; }}; _tmp2[2] = Value{.Int = 4}; break :blk2 _tmp2; }}; break :blk0 _tmp0; };
        std.debug.print("{s}\n", .{_str(product_sum_array(example_var))});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    if (@TypeOf(v) == Value) {
        return switch (v) {
            .Int => std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v.Int}) catch unreachable,
            .Float => std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v.Float}) catch unreachable,
            .Str => std.fmt.allocPrint(std.heap.page_allocator, "'{s}'", .{v.Str}) catch unreachable,
            .Bool => if (v.Bool) "true" else "false",
            .List => _str(v.List),
            .StrList => _str(v.StrList),
            else => "null",
        };
    }
    const info = @typeInfo(@TypeOf(v));
    if (info == .Pointer and info.Pointer.size == .Slice) {
        var out = std.ArrayList(u8).init(std.heap.page_allocator);
        defer out.deinit();
        out.append('[') catch unreachable;
        for (v, 0..) |e, i| {
            if (i != 0) { out.append(' ') catch unreachable; }
            const s = _str(e);
            out.appendSlice(s) catch unreachable;
        }
        out.append(']') catch unreachable;
        return out.toOwnedSlice() catch unreachable;
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * std.mem.page_size;
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
