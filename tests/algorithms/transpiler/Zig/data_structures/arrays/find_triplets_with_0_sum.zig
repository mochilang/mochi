// Generated by Mochi Zig transpiler on 2025-08-07 00:08 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn sort_triplet(a: i64, b: i64, c: i64) []i64 {
    var x: i64 = a;
    var y: i64 = b;
    var z: i64 = c;
    if (x > y) {
        const t: i64 = x;
        x = y;
        y = t;
    }
    if (y > z) {
        const t: i64 = y;
        y = z;
        z = t;
    }
    if (x > y) {
        const t: i64 = x;
        x = y;
        y = t;
    }
    return blk0: { var _tmp0 = std.heap.page_allocator.alloc(i64, 3) catch unreachable; _tmp0[0] = x; _tmp0[1] = y; _tmp0[2] = z; break :blk0 _tmp0; };
}

fn contains_triplet(arr: [][]i64, target: []i64) bool {
    for (@as(usize, @intCast(0))..@as(usize, @intCast(@as(i64, @intCast(arr.len))))) |__it0| {
        const i: i64 = @as(i64, @intCast(__it0));
        const item: []i64 = arr[@as(usize, @intCast(i))];
        var same: bool = true;
        for (@as(usize, @intCast(0))..@as(usize, @intCast(@as(i64, @intCast(target.len))))) |__it1| {
            const j: i64 = @as(i64, @intCast(__it1));
            if (item[@as(usize, @intCast(j))] != target[@as(usize, @intCast(j))]) {
                same = false;
                break;
            }
        }
        if (same) {
            return true;
        }
    }
    return false;
}

fn contains_int(arr: []i64, value: i64) bool {
    for (@as(usize, @intCast(0))..@as(usize, @intCast(@as(i64, @intCast(arr.len))))) |__it2| {
        const i: i64 = @as(i64, @intCast(__it2));
        if (arr[@as(usize, @intCast(i))] == value) {
            return true;
        }
    }
    return false;
}

fn find_triplets_with_0_sum(nums: []i64) [][]i64 {
    const n: i64 = @as(i64, @intCast(nums.len));
    var result: [][]i64 = &[_][]i64{};
    for (@as(usize, @intCast(0))..@as(usize, @intCast(n))) |__it3| {
        const i: i64 = @as(i64, @intCast(__it3));
        for (@as(usize, @intCast(i + 1))..@as(usize, @intCast(n))) |__it4| {
            const j: i64 = @as(i64, @intCast(__it4));
            for (@as(usize, @intCast(j + 1))..@as(usize, @intCast(n))) |__it5| {
                const k: i64 = @as(i64, @intCast(__it5));
                const a: i64 = nums[@as(usize, @intCast(i))];
                const b: i64 = nums[@as(usize, @intCast(j))];
                const c: i64 = nums[@as(usize, @intCast(k))];
                if (a + b + c == 0) {
                    const trip: []i64 = sort_triplet(a, b, c);
                    if (!(contains_triplet(result, trip))) {
                        result = blk: { var _tmp = std.ArrayList([]i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []i64, result)) catch |err| handleError(err); _tmp.append(trip) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
                    }
                }
            }
        }
    }
    return result;
}

fn find_triplets_with_0_sum_hashing(arr: []i64) [][]i64 {
    const target_sum: i64 = 0;
    var output: [][]i64 = &[_][]i64{};
    for (@as(usize, @intCast(0))..@as(usize, @intCast(@as(i64, @intCast(arr.len))))) |__it6| {
        const i: i64 = @as(i64, @intCast(__it6));
        var seen: []i64 = &[_]i64{};
        const current_sum: i64 = target_sum - arr[@as(usize, @intCast(i))];
        for (@as(usize, @intCast(i + 1))..@as(usize, @intCast(@as(i64, @intCast(arr.len))))) |__it7| {
            const j: i64 = @as(i64, @intCast(__it7));
            const other: i64 = arr[@as(usize, @intCast(j))];
            const required: i64 = current_sum - other;
            if (contains_int(seen, required)) {
                const trip: []i64 = sort_triplet(arr[@as(usize, @intCast(i))], other, required);
                if (!(contains_triplet(output, trip))) {
                    output = blk: { var _tmp = std.ArrayList([]i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []i64, output)) catch |err| handleError(err); _tmp.append(trip) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
                }
            }
            seen = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, seen)) catch |err| handleError(err); _tmp.append(other) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        }
    }
    return output;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        std.debug.print("{s}\n", .{_str(find_triplets_with_0_sum(blk1: { var _tmp1 = std.heap.page_allocator.alloc(i64, 6) catch unreachable; _tmp1[0] = 0 - 1; _tmp1[1] = 0; _tmp1[2] = 1; _tmp1[3] = 2; _tmp1[4] = 0 - 1; _tmp1[5] = 0 - 4; break :blk1 _tmp1; }))});
        std.debug.print("{s}\n", .{_str(find_triplets_with_0_sum(&[_]i64{}))});
        std.debug.print("{s}\n", .{_str(find_triplets_with_0_sum(blk2: { var _tmp2 = std.heap.page_allocator.alloc(i64, 3) catch unreachable; _tmp2[0] = 0; _tmp2[1] = 0; _tmp2[2] = 0; break :blk2 _tmp2; }))});
        std.debug.print("{s}\n", .{_str(find_triplets_with_0_sum(blk3: { var _tmp3 = std.heap.page_allocator.alloc(i64, 7) catch unreachable; _tmp3[0] = 1; _tmp3[1] = 2; _tmp3[2] = 3; _tmp3[3] = 0; _tmp3[4] = 0 - 1; _tmp3[5] = 0 - 2; _tmp3[6] = 0 - 3; break :blk3 _tmp3; }))});
        std.debug.print("{s}\n", .{_str(find_triplets_with_0_sum_hashing(blk4: { var _tmp4 = std.heap.page_allocator.alloc(i64, 6) catch unreachable; _tmp4[0] = 0 - 1; _tmp4[1] = 0; _tmp4[2] = 1; _tmp4[3] = 2; _tmp4[4] = 0 - 1; _tmp4[5] = 0 - 4; break :blk4 _tmp4; }))});
        std.debug.print("{s}\n", .{_str(find_triplets_with_0_sum_hashing(&[_]i64{}))});
        std.debug.print("{s}\n", .{_str(find_triplets_with_0_sum_hashing(blk5: { var _tmp5 = std.heap.page_allocator.alloc(i64, 3) catch unreachable; _tmp5[0] = 0; _tmp5[1] = 0; _tmp5[2] = 0; break :blk5 _tmp5; }))});
        std.debug.print("{s}\n", .{_str(find_triplets_with_0_sum_hashing(blk6: { var _tmp6 = std.heap.page_allocator.alloc(i64, 7) catch unreachable; _tmp6[0] = 1; _tmp6[1] = 2; _tmp6[2] = 3; _tmp6[3] = 0; _tmp6[4] = 0 - 1; _tmp6[5] = 0 - 2; _tmp6[6] = 0 - 3; break :blk6 _tmp6; }))});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    if (info == .Pointer and info.Pointer.size == .Slice) {
        var out = std.ArrayList(u8).init(std.heap.page_allocator);
        defer out.deinit();
        out.append('[') catch unreachable;
        for (v, 0..) |e, i| {
            if (i != 0) { out.append(' ') catch unreachable; }
            const s = _str(e);
            out.appendSlice(s) catch unreachable;
        }
        out.append(']') catch unreachable;
        return out.toOwnedSlice() catch unreachable;
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * std.mem.page_size;
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
