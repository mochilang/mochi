// Generated by Mochi Zig transpiler on 2025-08-07 00:08 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

var arr1_var: []i64 = &[_]i64{};
var arr2_var: []i64 = &[_]i64{};
var arr3_var: []i64 = &[_]i64{};
var arr4_var: []i64 = &[_]i64{};

fn equilibrium_index(arr: []i64) i64 {
    var total: i64 = 0;
    var i: i64 = 0;
    while (i < @as(i64, @intCast(arr.len))) {
        total = total + arr[@as(usize, @intCast(i))];
        i = i + 1;
    }
    var left: i64 = 0;
    i = 0;
    while (i < @as(i64, @intCast(arr.len))) {
        total = total - arr[@as(usize, @intCast(i))];
        if (left == total) {
            return i;
        }
        left = left + arr[@as(usize, @intCast(i))];
        i = i + 1;
    }
    return 0 - 1;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        arr1_var = blk0: { var _tmp0 = std.heap.page_allocator.alloc(i64, 7) catch unreachable; _tmp0[0] = 0 - 7; _tmp0[1] = 1; _tmp0[2] = 5; _tmp0[3] = 2; _tmp0[4] = 0 - 4; _tmp0[5] = 3; _tmp0[6] = 0; break :blk0 _tmp0; };
        arr2_var = blk1: { var _tmp1 = std.heap.page_allocator.alloc(i64, 5) catch unreachable; _tmp1[0] = 1; _tmp1[1] = 2; _tmp1[2] = 3; _tmp1[3] = 4; _tmp1[4] = 5; break :blk1 _tmp1; };
        arr3_var = blk2: { var _tmp2 = std.heap.page_allocator.alloc(i64, 5) catch unreachable; _tmp2[0] = 1; _tmp2[1] = 1; _tmp2[2] = 1; _tmp2[3] = 1; _tmp2[4] = 1; break :blk2 _tmp2; };
        arr4_var = blk3: { var _tmp3 = std.heap.page_allocator.alloc(i64, 6) catch unreachable; _tmp3[0] = 2; _tmp3[1] = 4; _tmp3[2] = 6; _tmp3[3] = 8; _tmp3[4] = 10; _tmp3[5] = 3; break :blk3 _tmp3; };
        std.debug.print("{s}\n", .{_str(equilibrium_index(arr1_var))});
        std.debug.print("{s}\n", .{_str(equilibrium_index(arr2_var))});
        std.debug.print("{s}\n", .{_str(equilibrium_index(arr3_var))});
        std.debug.print("{s}\n", .{_str(equilibrium_index(arr4_var))});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    if (info == .Pointer and info.Pointer.size == .Slice) {
        var out = std.ArrayList(u8).init(std.heap.page_allocator);
        defer out.deinit();
        out.append('[') catch unreachable;
        for (v, 0..) |e, i| {
            if (i != 0) { out.append(' ') catch unreachable; }
            const s = _str(e);
            out.appendSlice(s) catch unreachable;
        }
        out.append(']') catch unreachable;
        return out.toOwnedSlice() catch unreachable;
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * std.mem.page_size;
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
