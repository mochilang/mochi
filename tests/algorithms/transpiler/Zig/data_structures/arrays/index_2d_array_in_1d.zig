// Generated by Mochi Zig transpiler on 2025-08-07 08:09 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn iterator_values(matrix: [][]i64) []i64 {
    var result: []i64 = &[_]i64{};
    for (matrix) |__it0| {
        const row = __it0;
        for (row) |__it1| {
            const value = __it1;
            result = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, result)) catch |err| handleError(err); _tmp.append(value) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        }
    }
    return result;
}

fn index_2d_array_in_1d(array: [][]i64, index: i64) i64 {
    const rows: i64 = @as(i64, @intCast(array.len));
    const cols: i64 = @as(i64, @intCast(array[@as(usize, @intCast(0))].len));
    if (rows == 0 or cols == 0) {
        @panic("no items in array");
    }
    if (index < 0 or index >= rows * cols) {
        @panic("index out of range");
    }
    return array[@as(usize, @intCast(@as(i64, @divTrunc(index, cols))))][@as(usize, @intCast(@mod(index, cols)))];
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        std.debug.print("{s}\n", .{_str(iterator_values(blk0: { var _tmp0 = std.heap.page_allocator.alloc([]i64, 5) catch unreachable; _tmp0[0] = blk1: { var _tmp1 = std.heap.page_allocator.alloc(i64, 1) catch unreachable; _tmp1[0] = 5; break :blk1 _tmp1; }; _tmp0[1] = blk2: { var _tmp2 = std.heap.page_allocator.alloc(i64, 1) catch unreachable; _tmp2[0] = 0 - 523; break :blk2 _tmp2; }; _tmp0[2] = blk3: { var _tmp3 = std.heap.page_allocator.alloc(i64, 1) catch unreachable; _tmp3[0] = 0 - 1; break :blk3 _tmp3; }; _tmp0[3] = blk4: { var _tmp4 = std.heap.page_allocator.alloc(i64, 1) catch unreachable; _tmp4[0] = 34; break :blk4 _tmp4; }; _tmp0[4] = blk5: { var _tmp5 = std.heap.page_allocator.alloc(i64, 1) catch unreachable; _tmp5[0] = 0; break :blk5 _tmp5; }; break :blk0 _tmp0; }))});
        std.debug.print("{s}\n", .{_str(iterator_values(blk6: { var _tmp6 = std.heap.page_allocator.alloc([]i64, 2) catch unreachable; _tmp6[0] = blk7: { var _tmp7 = std.heap.page_allocator.alloc(i64, 3) catch unreachable; _tmp7[0] = 5; _tmp7[1] = 0 - 523; _tmp7[2] = 0 - 1; break :blk7 _tmp7; }; _tmp6[1] = blk8: { var _tmp8 = std.heap.page_allocator.alloc(i64, 2) catch unreachable; _tmp8[0] = 34; _tmp8[1] = 0; break :blk8 _tmp8; }; break :blk6 _tmp6; }))});
        std.debug.print("{s}\n", .{_str(index_2d_array_in_1d(blk9: { var _tmp9 = std.heap.page_allocator.alloc([]i64, 3) catch unreachable; _tmp9[0] = blk10: { var _tmp10 = std.heap.page_allocator.alloc(i64, 4) catch unreachable; _tmp10[0] = 0; _tmp10[1] = 1; _tmp10[2] = 2; _tmp10[3] = 3; break :blk10 _tmp10; }; _tmp9[1] = blk11: { var _tmp11 = std.heap.page_allocator.alloc(i64, 4) catch unreachable; _tmp11[0] = 4; _tmp11[1] = 5; _tmp11[2] = 6; _tmp11[3] = 7; break :blk11 _tmp11; }; _tmp9[2] = blk12: { var _tmp12 = std.heap.page_allocator.alloc(i64, 4) catch unreachable; _tmp12[0] = 8; _tmp12[1] = 9; _tmp12[2] = 10; _tmp12[3] = 11; break :blk12 _tmp12; }; break :blk9 _tmp9; }, 5))});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    if (info == .Pointer and info.Pointer.size == .Slice) {
        var out = std.ArrayList(u8).init(std.heap.page_allocator);
        defer out.deinit();
        out.append('[') catch unreachable;
        for (v, 0..) |e, i| {
            if (i != 0) { out.append(' ') catch unreachable; }
            const s = _str(e);
            out.appendSlice(s) catch unreachable;
        }
        out.append(']') catch unreachable;
        return out.toOwnedSlice() catch unreachable;
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * std.mem.page_size;
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
