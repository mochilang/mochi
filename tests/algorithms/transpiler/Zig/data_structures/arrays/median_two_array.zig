// Generated by Mochi Zig transpiler on 2025-08-07 08:09 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn sortFloats(xs: []f64) []f64 {
    var arr: []f64 = blk: { const tmp = std.heap.page_allocator.alloc(f64, xs.len) catch unreachable; @memcpy(tmp, xs); break :blk tmp; };
    var i: i64 = 0;
    while (i < @as(i64, @intCast(arr.len))) {
        var j: i64 = 0;
        while (j < @as(i64, @intCast(arr.len)) - 1) {
            if (arr[@as(usize, @intCast(j))] > arr[@as(usize, @intCast(j + 1))]) {
                const t: f64 = arr[@as(usize, @intCast(j))];
                arr[@as(usize, @intCast(j))] = arr[@as(usize, @intCast(j + 1))];
                arr[@as(usize, @intCast(j + 1))] = t;
            }
            j = j + 1;
        }
        i = i + 1;
    }
    return arr;
}

fn find_median_sorted_arrays(nums1: []f64, nums2: []f64) f64 {
    if (@as(i64, @intCast(nums1.len)) == 0 and @as(i64, @intCast(nums2.len)) == 0) {
        @panic("Both input arrays are empty.");
    }
    var merged: []f64 = &[_]f64{};
    var i: i64 = 0;
    while (i < @as(i64, @intCast(nums1.len))) {
        merged = blk: { var _tmp = std.ArrayList(f64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const f64, merged)) catch |err| handleError(err); _tmp.append(nums1[@as(usize, @intCast(i))]) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    var j: i64 = 0;
    while (j < @as(i64, @intCast(nums2.len))) {
        merged = blk: { var _tmp = std.ArrayList(f64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const f64, merged)) catch |err| handleError(err); _tmp.append(nums2[@as(usize, @intCast(j))]) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        j = j + 1;
    }
    const sorted: []f64 = sortFloats(merged);
    const total: i64 = @as(i64, @intCast(sorted.len));
    if (@mod(total, 2) == 1) {
        return sorted[@as(usize, @intCast(@divTrunc(total, 2)))];
    }
    const middle1: f64 = sorted[@as(usize, @intCast(@divTrunc(total, 2) - 1))];
    const middle2: f64 = sorted[@as(usize, @intCast(@divTrunc(total, 2)))];
    return (middle1 + middle2) / 2.0;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        std.debug.print("{d}\n", .{find_median_sorted_arrays(blk0: { var _tmp0 = std.heap.page_allocator.alloc(f64, 2) catch unreachable; _tmp0[0] = 1.0; _tmp0[1] = 3.0; break :blk0 _tmp0; }, blk1: { var _tmp1 = std.heap.page_allocator.alloc(f64, 1) catch unreachable; _tmp1[0] = 2.0; break :blk1 _tmp1; })});
        std.debug.print("{d}\n", .{find_median_sorted_arrays(blk2: { var _tmp2 = std.heap.page_allocator.alloc(f64, 2) catch unreachable; _tmp2[0] = 1.0; _tmp2[1] = 2.0; break :blk2 _tmp2; }, blk3: { var _tmp3 = std.heap.page_allocator.alloc(f64, 2) catch unreachable; _tmp3[0] = 3.0; _tmp3[1] = 4.0; break :blk3 _tmp3; })});
        std.debug.print("{d}\n", .{find_median_sorted_arrays(blk4: { var _tmp4 = std.heap.page_allocator.alloc(f64, 2) catch unreachable; _tmp4[0] = 0.0; _tmp4[1] = 0.0; break :blk4 _tmp4; }, blk5: { var _tmp5 = std.heap.page_allocator.alloc(f64, 2) catch unreachable; _tmp5[0] = 0.0; _tmp5[1] = 0.0; break :blk5 _tmp5; })});
        std.debug.print("{d}\n", .{find_median_sorted_arrays(&[_]f64{}, blk6: { var _tmp6 = std.heap.page_allocator.alloc(f64, 1) catch unreachable; _tmp6[0] = 1.0; break :blk6 _tmp6; })});
        std.debug.print("{d}\n", .{find_median_sorted_arrays(blk7: { var _tmp7 = std.heap.page_allocator.alloc(f64, 1) catch unreachable; _tmp7[0] = @as(f64, @floatFromInt(0)) - 1000.0; break :blk7 _tmp7; }, blk8: { var _tmp8 = std.heap.page_allocator.alloc(f64, 1) catch unreachable; _tmp8[0] = 1000.0; break :blk8 _tmp8; })});
        std.debug.print("{d}\n", .{find_median_sorted_arrays(blk9: { var _tmp9 = std.heap.page_allocator.alloc(f64, 2) catch unreachable; _tmp9[0] = @as(f64, @floatFromInt(0)) - 1.1; _tmp9[1] = @as(f64, @floatFromInt(0)) - 2.2; break :blk9 _tmp9; }, blk10: { var _tmp10 = std.heap.page_allocator.alloc(f64, 2) catch unreachable; _tmp10[0] = @as(f64, @floatFromInt(0)) - 3.3; _tmp10[1] = @as(f64, @floatFromInt(0)) - 4.4; break :blk10 _tmp10; })});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * std.mem.page_size;
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
