// Generated by Mochi Zig transpiler on 2025-08-07 09:53 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

var st1_var: [][]i64 = &[_][]i64{};
var st2_var: [][]i64 = &[_][]i64{};

fn pow2(n: i64) i64 {
    var result: i64 = 1;
    var i: i64 = 0;
    while (i < n) {
        result = result * 2;
        i = i + 1;
    }
    return result;
}

fn int_log2(n: i64) i64 {
    var v: i64 = n;
    var res: i64 = 0;
    while (v > 1) {
        v = @divTrunc(v, 2);
        res = res + 1;
    }
    return res;
}

fn build_sparse_table(number_list: []i64) [][]i64 {
    if (@as(i64, @intCast(number_list.len)) == 0) {
        @panic("empty number list not allowed");
    }
    const length: i64 = @as(i64, @intCast(number_list.len));
    const row: i64 = int_log2(length) + 1;
    var sparse_table: [][]i64 = &[_][]i64{};
    var j: i64 = 0;
    while (j < row) {
        var inner: []i64 = &[_]i64{};
        var i: i64 = 0;
        while (i < length) {
            inner = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, inner)) catch |err| handleError(err); _tmp.append(0) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            i = i + 1;
        }
        sparse_table = blk: { var _tmp = std.ArrayList([]i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []i64, sparse_table)) catch |err| handleError(err); _tmp.append(inner) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        j = j + 1;
    }
    var i: i64 = 0;
    while (i < length) {
        sparse_table[@as(usize, @intCast(0))][@as(usize, @intCast(i))] = number_list[@as(usize, @intCast(i))];
        i = i + 1;
    }
    j = 1;
    while (pow2(j) <= length) {
        i = 0;
        while (i + pow2(j) - 1 < length) {
            const left: i64 = sparse_table[@as(usize, @intCast(j - 1))][@as(usize, @intCast(i + pow2(j - 1)))];
            const right: i64 = sparse_table[@as(usize, @intCast(j - 1))][@as(usize, @intCast(i))];
            if (left < right) {
                sparse_table[@as(usize, @intCast(j))][@as(usize, @intCast(i))] = left;
            } else {
                sparse_table[@as(usize, @intCast(j))][@as(usize, @intCast(i))] = right;
            }
            i = i + 1;
        }
        j = j + 1;
    }
    return sparse_table;
}

fn query(sparse_table: [][]i64, left_bound: i64, right_bound: i64) i64 {
    if (left_bound < 0 or right_bound >= @as(i64, @intCast(sparse_table[@as(usize, @intCast(0))].len))) {
        @panic("list index out of range");
    }
    const interval: i64 = right_bound - left_bound + 1;
    const j: i64 = int_log2(interval);
    const val1: i64 = sparse_table[@as(usize, @intCast(j))][@as(usize, @intCast(right_bound - pow2(j) + 1))];
    const val2: i64 = sparse_table[@as(usize, @intCast(j))][@as(usize, @intCast(left_bound))];
    if (val1 < val2) {
        return val1;
    }
    return val2;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        st1_var = build_sparse_table(blk0: { var _tmp0 = std.heap.page_allocator.alloc(i64, 7) catch unreachable; _tmp0[0] = 8; _tmp0[1] = 1; _tmp0[2] = 0; _tmp0[3] = 3; _tmp0[4] = 4; _tmp0[5] = 9; _tmp0[6] = 3; break :blk0 _tmp0; });
        st2_var = build_sparse_table(blk1: { var _tmp1 = std.heap.page_allocator.alloc(i64, 3) catch unreachable; _tmp1[0] = 3; _tmp1[1] = 1; _tmp1[2] = 9; break :blk1 _tmp1; });
        std.debug.print("{s}\n", .{_str(st1_var)});
        std.debug.print("{s}\n", .{_str(st2_var)});
        std.debug.print("{s}\n", .{_str(query(st1_var, 0, 4))});
        std.debug.print("{s}\n", .{_str(query(st1_var, 4, 6))});
        std.debug.print("{s}\n", .{_str(query(st2_var, 2, 2))});
        std.debug.print("{s}\n", .{_str(query(st2_var, 0, 1))});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * std.mem.page_size;
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
