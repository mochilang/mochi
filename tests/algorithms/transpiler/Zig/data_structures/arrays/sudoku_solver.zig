// Generated by Mochi Zig transpiler on 2025-08-07 09:53 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const puzzle_var: []const u8 = "003020600900305001001806400008102900700000008006708200002609500800203009005010300";
var grid_var: [][]i64 = &[_][]i64{};

fn string_to_grid(s: []const u8) [][]i64 {
    var grid_var_1: [][]i64 = &[_][]i64{};
    var i: i64 = 0;
    while (i < 9) {
        var row: []i64 = &[_]i64{};
        var j: i64 = 0;
        while (j < 9) {
            const ch: []const u8 = s[@as(usize, @intCast(i * 9 + j))..@min(@as(usize, @intCast(i * 9 + j + 1)), @as(usize, @intCast(s.len)))];
            var val: i64 = 0;
            if (!std.mem.eql(u8, ch, "0") and !std.mem.eql(u8, ch, ".")) {
                val = std.fmt.parseInt(i64, ch, 10) catch 0;
            }
            row = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, row)) catch |err| handleError(err); _tmp.append(val) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            j = j + 1;
        }
        grid_var_1 = blk: { var _tmp = std.ArrayList([]i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []i64, grid_var_1)) catch |err| handleError(err); _tmp.append(row) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    return grid_var_1;
}

fn print_grid(grid_param: [][]i64) void {
    for (@as(usize, @intCast(0))..@as(usize, @intCast(9))) |__it0| {
        const r: i64 = @as(i64, @intCast(__it0));
        var line: []const u8 = "";
        for (@as(usize, @intCast(0))..@as(usize, @intCast(9))) |__it1| {
            const c: i64 = @as(i64, @intCast(__it1));
            line = _concat_string(line, _str(grid_param[@as(usize, @intCast(r))][@as(usize, @intCast(c))]));
            if (c < 8) {
                line = _concat_string(line, " ");
            }
        }
        std.debug.print("{s}\n", .{line});
    }
}

fn is_safe(grid_param: [][]i64, row: i64, column: i64, n: i64) bool {
    for (@as(usize, @intCast(0))..@as(usize, @intCast(9))) |__it2| {
        const i: i64 = @as(i64, @intCast(__it2));
        if (grid_param[@as(usize, @intCast(row))][@as(usize, @intCast(i))] == n or grid_param[@as(usize, @intCast(i))][@as(usize, @intCast(column))] == n) {
            return false;
        }
    }
    for (@as(usize, @intCast(0))..@as(usize, @intCast(3))) |__it3| {
        const i: i64 = @as(i64, @intCast(__it3));
        for (@as(usize, @intCast(0))..@as(usize, @intCast(3))) |__it4| {
            const j: i64 = @as(i64, @intCast(__it4));
            if (grid_param[@as(usize, @intCast(row - @mod(row, 3) + i))][@as(usize, @intCast(column - @mod(column, 3) + j))] == n) {
                return false;
            }
        }
    }
    return true;
}

fn find_empty(grid_param: [][]i64) []i64 {
    for (@as(usize, @intCast(0))..@as(usize, @intCast(9))) |__it5| {
        const i: i64 = @as(i64, @intCast(__it5));
        for (@as(usize, @intCast(0))..@as(usize, @intCast(9))) |__it6| {
            const j: i64 = @as(i64, @intCast(__it6));
            if (grid_param[@as(usize, @intCast(i))][@as(usize, @intCast(j))] == 0) {
                return blk0: { var _tmp0 = std.heap.page_allocator.alloc(i64, 2) catch unreachable; _tmp0[0] = i; _tmp0[1] = j; break :blk0 _tmp0; };
            }
        }
    }
    return &[_]i64{};
}

fn solve(grid_param: [][]i64) bool {
    const loc: []i64 = find_empty(grid_param);
    if (@as(i64, @intCast(loc.len)) == 0) {
        return true;
    }
    const row: i64 = loc[@as(usize, @intCast(0))];
    const column: i64 = loc[@as(usize, @intCast(1))];
    for (@as(usize, @intCast(1))..@as(usize, @intCast(10))) |__it7| {
        const digit: i64 = @as(i64, @intCast(__it7));
        if (is_safe(grid_param, row, column, digit)) {
            grid_param[@as(usize, @intCast(row))][@as(usize, @intCast(column))] = digit;
            if (solve(grid_param)) {
                return true;
            }
            grid_param[@as(usize, @intCast(row))][@as(usize, @intCast(column))] = 0;
        }
    }
    return false;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        grid_var = string_to_grid(puzzle_var);
        std.debug.print("{s}\n", .{"Original grid:"});
        print_grid(grid_var);
        if (solve(grid_var)) {
            std.debug.print("{s}\n", .{"\nSolved grid:"});
            print_grid(grid_var);
        } else {
            std.debug.print("{s}\n", .{"\nNo solution found"});
        }
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * std.mem.page_size;
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
