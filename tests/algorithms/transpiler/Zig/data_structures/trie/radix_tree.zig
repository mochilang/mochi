// Generated by Mochi Zig transpiler on 2025-08-24 22:16 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const RadixNode = struct {
    prefix: []const u8,
    is_leaf: bool,
    children: std.StringHashMap(i64),
};

const RadixTree = struct {
    nodes: []RadixNode,
};

const MatchResult = struct {
    common: []const u8,
    rem_prefix: []const u8,
    rem_word: []const u8,
};

fn new_node(prefix: []const u8, is_leaf: bool) RadixNode {
    return .{ .prefix = prefix, .is_leaf = is_leaf, .children = std.StringHashMap(i64).init(std.heap.page_allocator) };
}

fn new_tree() RadixTree {
    var nodes: []RadixNode = blk0: { var _tmp = std.ArrayList(RadixNode).init(std.heap.page_allocator); _tmp.append(new_node("", false)) catch unreachable; break :blk0 (_tmp.toOwnedSlice() catch unreachable); };
    nodes = nodes;
    return .{ .nodes = nodes };
}

fn match_prefix(node: RadixNode, word: []const u8) MatchResult {
    var x: i64 = 0;
    x = x;
    const p: []const u8 = node.prefix;
    const w: []const u8 = blk1: { const tmp = std.heap.page_allocator.alloc(u8, word.len) catch unreachable; @memcpy(tmp, word); break :blk1 tmp; };
    var min_len: i64 = @as(i64, @intCast(p.len));
    min_len = min_len;
    if (@as(i64, @intCast(w.len)) < min_len) {
        min_len = @as(i64, @intCast(w.len));
    }
    while (x < min_len) {
        if (!std.mem.eql(u8, p[@as(usize, @intCast(x))..@min(@as(usize, @intCast(x +% 1)), @as(usize, @intCast(p.len)))], w[@as(usize, @intCast(x))..@min(@as(usize, @intCast(x +% 1)), @as(usize, @intCast(w.len)))])) {
            break;
        }
        x = x +% 1;
    }
    const common: []const u8 = p[@as(usize, @intCast(0))..@min(@as(usize, @intCast(x)), @as(usize, @intCast(p.len)))];
    const rem_prefix: []const u8 = p[@as(usize, @intCast(x))..@min(@as(usize, @intCast(@as(i64, @intCast(p.len)))), @as(usize, @intCast(p.len)))];
    const rem_word: []const u8 = w[@as(usize, @intCast(x))..@min(@as(usize, @intCast(@as(i64, @intCast(w.len)))), @as(usize, @intCast(w.len)))];
    return .{ .common = common, .rem_prefix = rem_prefix, .rem_word = rem_word };
}

fn insert_many(tree: RadixTree, words: [][]const u8) void {
    for (words) |__it0| {
        const w_1 = __it0;
        insert(@constCast(&tree), 0, w_1);
    }
}

fn insert(tree_param: *RadixTree, idx: i64, word_1: []const u8) void {
    var nodes_1: []RadixNode = tree_param.nodes;
    nodes_1 = nodes_1;
    var node_1: RadixNode = nodes_1[_idx(nodes_1.len, idx)];
    node_1 = node_1;
    if (std.mem.eql(u8, node_1.prefix, word_1) and !(node_1.is_leaf)) {
        node_1.is_leaf = true;
        nodes_1[_idx(nodes_1.len, idx)] = node_1;
        tree_param.nodes = nodes_1;
        return;
    }
    const first: []const u8 = word_1[@as(usize, @intCast(0))..@min(@as(usize, @intCast(1)), @as(usize, @intCast(word_1.len)))];
    if (!(has_key(&node_1.children, first))) {
        const new_idx: i64 = @as(i64, @intCast(nodes_1.len));
        nodes_1 = blk2: { var _tmp_1 = std.ArrayList(RadixNode).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_1.appendSlice(@as([]const RadixNode, nodes_1)) catch |err| handleError(err); _tmp_1.append(new_node(word_1, true)) catch |err| handleError(err); break :blk2 (_tmp_1.toOwnedSlice() catch |err| handleError(err)); };
        node_1.children.put(first, new_idx) catch unreachable;
        node_1.children = node_1.children;
        nodes_1[_idx(nodes_1.len, idx)] = node_1;
        tree_param.nodes = nodes_1;
        return;
    }
    const child_idx: i64 = (blk3: { if (node_1.children.get(first)) |v| { break :blk3 v; } break :blk3 0; });
    var child: RadixNode = nodes_1[_idx(nodes_1.len, child_idx)];
    child = child;
    const res: MatchResult = match_prefix(child, word_1);
    if (res.rem_prefix.len == 0) {
        insert(tree_param, child_idx, res.rem_word);
        return;
    }
    child.prefix = res.rem_prefix;
    nodes_1[_idx(nodes_1.len, child_idx)] = child;
    var new_children: std.StringHashMap(i64) = std.StringHashMap(i64).init(std.heap.page_allocator);
    new_children = new_children;
    new_children.put(res.rem_prefix[@as(usize, @intCast(0))..@min(@as(usize, @intCast(1)), @as(usize, @intCast(res.rem_prefix.len)))], child_idx) catch unreachable;
    const new_idx_1: i64 = @as(i64, @intCast(nodes_1.len));
    nodes_1 = blk4: { var _tmp_2 = std.ArrayList(RadixNode).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_2.appendSlice(@as([]const RadixNode, nodes_1)) catch |err| handleError(err); _tmp_2.append(new_node(res.common, false)) catch |err| handleError(err); break :blk4 (_tmp_2.toOwnedSlice() catch |err| handleError(err)); };
    nodes_1[_idx(nodes_1.len, new_idx_1)].children = new_children;
    if (res.rem_word.len == 0) {
        nodes_1[_idx(nodes_1.len, new_idx_1)].is_leaf = true;
    } else {
        insert(tree_param, new_idx_1, res.rem_word);
    }
    node_1.children.put(first, new_idx_1) catch unreachable;
    node_1.children = node_1.children;
    nodes_1[_idx(nodes_1.len, idx)] = node_1;
    tree_param.nodes = nodes_1;
}

fn find(tree_1: RadixTree, idx_1: i64, word_2: []const u8) bool {
    const nodes_2: []RadixNode = tree_1.nodes;
    const node_2: RadixNode = nodes_2[_idx(nodes_2.len, idx_1)];
    const first_1: []const u8 = word_2[@as(usize, @intCast(0))..@min(@as(usize, @intCast(1)), @as(usize, @intCast(word_2.len)))];
    if (!(has_key(&node_2.children, first_1))) {
        return false;
    }
    const child_idx_1: i64 = (blk5: { if (node_2.children.get(first_1)) |v| { break :blk5 v; } break :blk5 0; });
    const child_1: RadixNode = nodes_2[_idx(nodes_2.len, child_idx_1)];
    const res_1: MatchResult = match_prefix(child_1, word_2);
    if (res_1.rem_prefix.len != 0) {
        return false;
    }
    if (res_1.rem_word.len == 0) {
        return child_1.is_leaf;
    }
    return find(tree_1, child_idx_1, res_1.rem_word);
}

fn remove_key(m: *const std.StringHashMap(i64), k: []const u8) std.StringHashMap(i64) {
    var out: std.StringHashMap(i64) = std.StringHashMap(i64).init(std.heap.page_allocator);
    out = out;
    var __mapit2 = m.keyIterator();
    while (__mapit2.next()) |__it1| {
        const key = __it1.*;
        if (!std.mem.eql(u8, key, k)) {
            out.put(key, (blk6: { if (m.get(key)) |v| { break :blk6 v; } break :blk6 0; })) catch unreachable;
        }
    }
    return out;
}

fn has_key(m_1: *const std.StringHashMap(i64), k_1: []const u8) bool {
    var __mapit4 = m_1.keyIterator();
    while (__mapit4.next()) |__it3| {
        const key_1 = __it3.*;
        if (std.mem.eql(u8, key_1, k_1)) {
            return true;
        }
    }
    return false;
}

fn delete(tree_param_1: *RadixTree, idx_2: i64, word_3: []const u8) bool {
    var nodes_3: []RadixNode = tree_param_1.nodes;
    nodes_3 = nodes_3;
    var node_3: RadixNode = nodes_3[_idx(nodes_3.len, idx_2)];
    node_3 = node_3;
    const first_2: []const u8 = word_3[@as(usize, @intCast(0))..@min(@as(usize, @intCast(1)), @as(usize, @intCast(word_3.len)))];
    if (!(has_key(&node_3.children, first_2))) {
        return false;
    }
    const child_idx_2: i64 = (blk7: { if (node_3.children.get(first_2)) |v| { break :blk7 v; } break :blk7 0; });
    var child_2: RadixNode = nodes_3[_idx(nodes_3.len, child_idx_2)];
    child_2 = child_2;
    const res_2: MatchResult = match_prefix(child_2, word_3);
    if (res_2.rem_prefix.len != 0) {
        return false;
    }
    if (res_2.rem_word.len != 0) {
        const deleted: bool = delete(tree_param_1, child_idx_2, res_2.rem_word);
        if (deleted) {
            nodes_3 = tree_param_1.nodes;
            node_3 = nodes_3[_idx(nodes_3.len, idx_2)];
        }
        return deleted;
    }
    if (!(child_2.is_leaf)) {
        return false;
    }
    if (@as(i64, @intCast(child_2.children.len)) == 0) {
        node_3.children = remove_key(&node_3.children, first_2);
        node_3.children = node_3.children;
        nodes_3[_idx(nodes_3.len, idx_2)] = node_3;
        tree_param_1.nodes = nodes_3;
        if (@as(i64, @intCast(node_3.children.len)) == 1 and !(node_3.is_leaf)) {
            var only_key: []const u8 = "";
            only_key = only_key;
            var __mapit6 = node_3.children.keyIterator();
            while (__mapit6.next()) |__it5| {
                const k_2 = __it5.*;
                only_key = k_2;
            }
            const merge_idx: i64 = (blk8: { if (node_3.children.get(only_key)) |v| { break :blk8 v; } break :blk8 0; });
            const merge_node: RadixNode = nodes_3[_idx(nodes_3.len, merge_idx)];
            node_3.is_leaf = merge_node.is_leaf;
            node_3.prefix = _concat_string(node_3.prefix, merge_node.prefix);
            node_3.children = merge_node.children;
            nodes_3[_idx(nodes_3.len, idx_2)] = node_3;
            tree_param_1.nodes = nodes_3;
        }
    } else {
        if (@as(i64, @intCast(child_2.children.len)) > 1) {
            child_2.is_leaf = false;
            nodes_3[_idx(nodes_3.len, child_idx_2)] = child_2;
            tree_param_1.nodes = nodes_3;
        } else {
            var only_key_1: []const u8 = "";
            only_key_1 = only_key_1;
            var __mapit8 = child_2.children.keyIterator();
            while (__mapit8.next()) |__it7| {
                const k_3 = __it7.*;
                only_key_1 = k_3;
            }
            const merge_idx_1: i64 = (blk9: { if (child_2.children.get(only_key_1)) |v| { break :blk9 v; } break :blk9 0; });
            const merge_node_1: RadixNode = nodes_3[_idx(nodes_3.len, merge_idx_1)];
            child_2.is_leaf = merge_node_1.is_leaf;
            child_2.prefix = _concat_string(child_2.prefix, merge_node_1.prefix);
            child_2.children = merge_node_1.children;
            nodes_3[_idx(nodes_3.len, child_idx_2)] = child_2;
            tree_param_1.nodes = nodes_3;
        }
    }
    return true;
}

fn print_tree(tree_2: RadixTree, idx_3: i64, height: i64) void {
    const nodes_4: []RadixNode = tree_2.nodes;
    const node_4: RadixNode = nodes_4[_idx(nodes_4.len, idx_3)];
    if (node_4.prefix.len != 0) {
        var line: []const u8 = "";
        line = line;
        var i: i64 = 0;
        i = i;
        while (i < height) {
            line = _concat_string(line, "-");
            i = i +% 1;
        }
        line = _concat_string(_concat_string(line, " "), node_4.prefix);
        if (node_4.is_leaf) {
            line = _concat_string(line, "  (leaf)");
        }
        std.debug.print("{s}\n", .{line});
    }
    var __mapit10 = node_4.children.keyIterator();
    while (__mapit10.next()) |__it9| {
        const k_4 = __it9.*;
        const child_idx_3: i64 = (blk10: { if (node_4.children.get(k_4)) |v| { break :blk10 v; } break :blk10 0; });
        print_tree(tree_2, child_idx_3, height +% 1);
    }
}

fn test_trie() bool {
    const words_1: [][]const u8 = blk11: { var _tmp_3 = [7][]const u8{"banana", "bananas", "bandana", "band", "apple", "all", "beast"}; break :blk11 _tmp_3[0..]; };
    var tree_3: RadixTree = new_tree();
    tree_3 = tree_3;
    insert_many(tree_3, words_1);
    var ok: bool = true;
    ok = ok;
    for (words_1) |__it11| {
        const w_2 = __it11;
        if (!(find(tree_3, 0, w_2))) {
            ok = false;
        }
    }
    if (find(tree_3, 0, "bandanas")) {
        ok = false;
    }
    if (find(tree_3, 0, "apps")) {
        ok = false;
    }
    _ = delete(@constCast(&tree_3), 0, "all");
    if (find(tree_3, 0, "all")) {
        ok = false;
    }
    _ = delete(@constCast(&tree_3), 0, "banana");
    if (find(tree_3, 0, "banana")) {
        ok = false;
    }
    if (!(find(tree_3, 0, "bananas"))) {
        ok = false;
    }
    return ok;
}

fn pytests() void {
    if (!(test_trie())) {
        @panic("test failed");
    }
}

fn mochi_main() void {
    const tree_4: RadixTree = new_tree();
    const words_2: [][]const u8 = blk12: { var _tmp_4 = [8][]const u8{"banana", "bananas", "bandanas", "bandana", "band", "apple", "all", "beast"}; break :blk12 _tmp_4[0..]; };
    insert_many(tree_4, words_2);
    std.debug.print("{s}\n", .{_concat_string("Words: ", _str(words_2))});
    std.debug.print("{s}\n", .{"Tree:"});
    print_tree(tree_4, 0, 0);
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        mochi_main();
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
