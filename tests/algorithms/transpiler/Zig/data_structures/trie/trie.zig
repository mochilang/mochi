// Generated by Mochi Zig transpiler on 2025-08-24 22:16 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const Node = struct {
    children: std.StringHashMap(i64),
    is_leaf: bool,
};

const Trie = struct {
    nodes: []Node,
};

var trie_var: Trie = undefined;

fn new_trie() Trie {
    return .{ .nodes = @constCast(blk0: { var _tmp = std.ArrayList(Node).init(std.heap.page_allocator); _tmp.append(.{ .children = std.StringHashMap(i64).init(std.heap.page_allocator), .is_leaf = false }) catch unreachable; break :blk0 (_tmp.toOwnedSlice() catch unreachable); }) };
}

fn remove_key(m: *const std.StringHashMap(i64), k: []const u8) std.StringHashMap(i64) {
    var out: std.StringHashMap(i64) = std.StringHashMap(i64).init(std.heap.page_allocator);
    out = out;
    var __mapit1 = m.keyIterator();
    while (__mapit1.next()) |__it0| {
        const key = __it0.*;
        if (!std.mem.eql(u8, key, k)) {
            out.put(key, (blk1: { if (m.get(key)) |v| { break :blk1 v; } break :blk1 0; })) catch unreachable;
        }
    }
    return out;
}

fn insert(trie_param: *Trie, word: []const u8) void {
    var nodes: []Node = trie_param.nodes;
    nodes = nodes;
    var curr: i64 = 0;
    curr = curr;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(word.len))) {
        const ch: []const u8 = word[_idx(word.len, i).._idx(word.len, i) + 1];
        var child_idx: i64 = 0 -% 1;
        child_idx = child_idx;
        if (nodes[curr].children.contains(ch)) {
            child_idx = (blk2: { if (nodes[curr].children.get(ch)) |v| { break :blk2 v; } break :blk2 0; });
        } else {
            const new_node: Node = .{ .children = std.StringHashMap(i64).init(std.heap.page_allocator), .is_leaf = false };
            nodes = blk3: { var _tmp_1 = std.ArrayList(Node).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_1.appendSlice(@as([]const Node, nodes)) catch |err| handleError(err); _tmp_1.append(new_node) catch |err| handleError(err); break :blk3 (_tmp_1.toOwnedSlice() catch |err| handleError(err)); };
            child_idx = @as(i64, @intCast(nodes.len)) -% 1;
            var new_children: std.StringHashMap(i64) = nodes[curr].children;
            new_children = new_children;
            new_children.put(ch, child_idx) catch unreachable;
            var node: Node = nodes[_idx(nodes.len, curr)];
            node = node;
            node.children = new_children;
            nodes[_idx(nodes.len, curr)] = node;
        }
        curr = child_idx;
        i = i +% 1;
    }
    var node_1: Node = nodes[_idx(nodes.len, curr)];
    node_1 = node_1;
    node_1.is_leaf = true;
    nodes[_idx(nodes.len, curr)] = node_1;
    trie_param.nodes = nodes;
}

fn insert_many(trie_param_1: Trie, words: [][]const u8) void {
    for (words) |__it2| {
        const w = __it2;
        insert(&trie_param_1, w);
    }
}

fn find(trie_param_2: Trie, word_1: []const u8) bool {
    var curr_1: i64 = 0;
    curr_1 = curr_1;
    var i_1: i64 = 0;
    i_1 = i_1;
    while (i_1 < @as(i64, @intCast(word_1.len))) {
        const ch_1: []const u8 = word_1[_idx(word_1.len, i_1).._idx(word_1.len, i_1) + 1];
        if (!(trie_param_2.nodes[curr_1].children.contains(ch_1))) {
            return false;
        }
        curr_1 = (blk4: { if (trie_param_2.nodes[curr_1].children.get(ch_1)) |v| { break :blk4 v; } break :blk4 0; });
        i_1 = i_1 +% 1;
    }
    const node_2: Node = trie_param_2.nodes[_idx(trie_param_2.nodes.len, curr_1)];
    return node_2.is_leaf;
}

fn delete(trie_param_3: *Trie, word_2: []const u8) void {
    const nodes_1: []Node = trie_param_3.nodes;
    _ = _delete(remove_key, word_2, nodes_1, 0, 0);
    trie_param_3.nodes = nodes_1;
}

fn print_words(trie_param_4: Trie) void {
    dfs(trie_param_4, 0, "");
}

fn test_trie() bool {
    const words_1: [][]const u8 = blk5: { var _tmp_2 = [7][]const u8{"banana", "bananas", "bandana", "band", "apple", "all", "beast"}; break :blk5 _tmp_2[0..]; };
    var trie_var_1: Trie = new_trie();
    trie_var_1 = trie_var_1;
    insert_many(trie_var_1, words_1);
    var ok: bool = true;
    ok = ok;
    for (words_1) |__it3| {
        const w_1 = __it3;
        ok = ok and find(trie_var_1, w_1);
    }
    ok = ok and find(trie_var_1, "banana");
    const t: bool = find(trie_var_1, "bandanas");
    ok = ok and t == false;
    const t2: bool = find(trie_var_1, "apps");
    ok = ok and t2 == false;
    ok = ok and find(trie_var_1, "apple");
    ok = ok and find(trie_var_1, "all");
    delete(@constCast(&trie_var_1), "all");
    const t3: bool = find(trie_var_1, "all");
    ok = ok and t3 == false;
    delete(@constCast(&trie_var_1), "banana");
    const t4: bool = find(trie_var_1, "banana");
    ok = ok and t4 == false;
    ok = ok and find(trie_var_1, "bananas");
    return ok;
}

fn print_results(msg: []const u8, passes: bool) void {
    if (passes) {
        std.debug.print("{s}\n", .{_concat_string(msg, " works!")});
    } else {
        std.debug.print("{s}\n", .{_concat_string(msg, " doesn't work :(")});
    }
}

fn _delete(remove_key: i64, word_2: []const u8, nodes_1: []Node, idx: i64, pos: i64) bool {
    if (pos == @as(i64, @intCast(word_2.len))) {
        var node_3: Node = nodes_1[_idx(nodes_1.len, idx)];
        node_3 = node_3;
        if (node_3.is_leaf == false) {
            return false;
        }
        node_3.is_leaf = false;
        nodes_1[_idx(nodes_1.len, idx)] = node_3;
        return @as(i64, @intCast(node_3.children.len)) == 0;
    }
    var node_4: Node = nodes_1[_idx(nodes_1.len, idx)];
    node_4 = node_4;
    const ch_2: []const u8 = word_2[_idx(word_2.len, pos).._idx(word_2.len, pos) + 1];
    if (!(node_4.children.contains(ch_2))) {
        return false;
    }
    const child_idx_1: i64 = (blk6: { if (node_4.children.get(ch_2)) |v| { break :blk6 v; } break :blk6 0; });
    const should_delete: bool = _delete(child_idx_1, pos +% 1);
    node_4 = nodes_1[_idx(nodes_1.len, idx)];
    if (should_delete) {
        var new_children_1: std.StringHashMap(i64) = remove_key(&node_4.children, ch_2);
        new_children_1 = new_children_1;
        node_4.children = new_children_1;
        nodes_1[_idx(nodes_1.len, idx)] = node_4;
        return @as(i64, @intCast(new_children_1.count())) == 0 and node_4.is_leaf == false;
    }
    nodes_1[_idx(nodes_1.len, idx)] = node_4;
    return false;
}

fn dfs(trie_param_4: Trie, idx_1: i64, word_3: []const u8) void {
    const node_5: Node = trie_param_4.nodes[_idx(trie_param_4.nodes.len, idx_1)];
    if (node_5.is_leaf) {
        std.debug.print("{s}\n", .{word_3});
    }
    var __mapit5 = node_5.children.keyIterator();
    while (__mapit5.next()) |__it4| {
        const key_1 = __it4.*;
        dfs((blk7: { if (node_5.children.get(key_1)) |v| { break :blk7 v; } break :blk7 0; }), _concat_string(word_3, key_1));
    }
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        trie_var = new_trie();
        print_results("Testing trie functionality", test_trie());
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
