// Generated by Mochi Zig transpiler on 2025-08-24 23:17 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const NIL_var: i64 = -1;
const MAX_LEVEL_var: i64 = 6;
const P_var: f64 = 0.5;
var seed_var_1: i64 = 1;
var node_keys_var_1: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
var node_vals_var_1: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
var node_forwards_var_1: [][]i64 = std.heap.page_allocator.alloc([]i64, 0) catch unreachable;
var level_var_1: i64 = 1;

fn random() f64 {
    seed_var_1 = @mod(seed_var_1 *% 13 +% 7, 100);
    return @as(f64, @floatFromInt(seed_var_1)) / 100.0;
}

fn random_level() i64 {
    var lvl: i64 = 1;
    lvl = lvl;
    while (random() < P_var and lvl < MAX_LEVEL_var) {
        lvl = lvl +% 1;
    }
    return lvl;
}

fn empty_forward() []i64 {
    var f: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    f = f;
    var i: i64 = 0;
    i = i;
    while (i < MAX_LEVEL_var) {
        f = blk0: { var _tmp = std.ArrayList(i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp.appendSlice(@as([]const i64, f)) catch |err| handleError(err); _tmp.append(NIL_var) catch |err| handleError(err); break :blk0 (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i +% 1;
    }
    return f;
}

fn init() void {
    node_keys_var_1 = std.heap.page_allocator.dupe(i64, blk1: { var _tmp_1 = std.ArrayList(i64).init(std.heap.page_allocator); _tmp_1.append(0 -% 1) catch unreachable; break :blk1 (_tmp_1.toOwnedSlice() catch unreachable); }) catch unreachable;
    node_vals_var_1 = std.heap.page_allocator.dupe(i64, ([1]i64{0})[0..1]) catch unreachable;
    node_forwards_var_1 = std.heap.page_allocator.dupe([]i64, blk2: { var _tmp_2 = std.ArrayList([]i64).init(std.heap.page_allocator); _tmp_2.append(empty_forward()) catch unreachable; break :blk2 (_tmp_2.toOwnedSlice() catch unreachable); }) catch unreachable;
    level_var_1 = 1;
}

fn insert(key: i64, value: i64) void {
    var update: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    update = update;
    var i_1: i64 = 0;
    i_1 = i_1;
    while (i_1 < MAX_LEVEL_var) {
        update = blk3: { var _tmp_3 = std.ArrayList(i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_3.appendSlice(@as([]const i64, update)) catch |err| handleError(err); _tmp_3.append(0) catch |err| handleError(err); break :blk3 (_tmp_3.toOwnedSlice() catch |err| handleError(err)); };
        i_1 = i_1 +% 1;
    }
    var x: i64 = 0;
    x = x;
    i_1 = level_var_1 -% 1;
    while (i_1 >= 0) {
        while (node_forwards_var_1[_idx(node_forwards_var_1.len, x)][_idx(node_forwards_var_1[_idx(node_forwards_var_1.len, x)].len, i_1)] != NIL_var and node_keys_var_1[_idx(node_keys_var_1.len, node_forwards_var_1[_idx(node_forwards_var_1.len, x)][_idx(node_forwards_var_1[_idx(node_forwards_var_1.len, x)].len, i_1)])] < key) {
            x = node_forwards_var_1[_idx(node_forwards_var_1.len, x)][_idx(node_forwards_var_1[_idx(node_forwards_var_1.len, x)].len, i_1)];
        }
        update[_idx(update.len, i_1)] = x;
        i_1 = i_1 -% 1;
    }
    x = node_forwards_var_1[_idx(node_forwards_var_1.len, x)][_idx(node_forwards_var_1[_idx(node_forwards_var_1.len, x)].len, 0)];
    if (x != NIL_var and node_keys_var_1[_idx(node_keys_var_1.len, x)] == key) {
        node_vals_var_1[_idx(node_vals_var_1.len, x)] = value;
        return;
    }
    const lvl_1: i64 = random_level();
    if (lvl_1 > level_var_1) {
        var j: i64 = level_var_1;
        j = j;
        while (j < lvl_1) {
            update[_idx(update.len, j)] = 0;
            j = j +% 1;
        }
        level_var_1 = lvl_1;
    }
    node_keys_var_1 = blk4: { var _tmp_4 = std.ArrayList(i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_4.appendSlice(@as([]const i64, node_keys_var_1)) catch |err| handleError(err); _tmp_4.append(key) catch |err| handleError(err); break :blk4 (_tmp_4.toOwnedSlice() catch |err| handleError(err)); };
    node_vals_var_1 = blk5: { var _tmp_5 = std.ArrayList(i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_5.appendSlice(@as([]const i64, node_vals_var_1)) catch |err| handleError(err); _tmp_5.append(value) catch |err| handleError(err); break :blk5 (_tmp_5.toOwnedSlice() catch |err| handleError(err)); };
    var forwards: []i64 = empty_forward();
    forwards = forwards;
    const idx: i64 = @as(i64, @intCast(node_keys_var_1.len)) -% 1;
    i_1 = 0;
    while (i_1 < lvl_1) {
        forwards[_idx(forwards.len, i_1)] = node_forwards_var_1[_idx(node_forwards_var_1.len, update[_idx(update.len, i_1)])][_idx(node_forwards_var_1[_idx(node_forwards_var_1.len, update[_idx(update.len, i_1)])].len, i_1)];
        node_forwards_var_1[_idx(node_forwards_var_1.len, update[_idx(update.len, i_1)])][_idx(node_forwards_var_1[_idx(node_forwards_var_1.len, update[_idx(update.len, i_1)])].len, i_1)] = idx;
        i_1 = i_1 +% 1;
    }
    node_forwards_var_1 = blk6: { var _tmp_6 = std.ArrayList([]i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_6.appendSlice(@as([]const []i64, node_forwards_var_1)) catch |err| handleError(err); _tmp_6.append(forwards) catch |err| handleError(err); break :blk6 (_tmp_6.toOwnedSlice() catch |err| handleError(err)); };
}

fn find(key_1: i64) i64 {
    var x_1: i64 = 0;
    x_1 = x_1;
    var i_2: i64 = level_var_1 -% 1;
    i_2 = i_2;
    while (i_2 >= 0) {
        while (node_forwards_var_1[_idx(node_forwards_var_1.len, x_1)][_idx(node_forwards_var_1[_idx(node_forwards_var_1.len, x_1)].len, i_2)] != NIL_var and node_keys_var_1[_idx(node_keys_var_1.len, node_forwards_var_1[_idx(node_forwards_var_1.len, x_1)][_idx(node_forwards_var_1[_idx(node_forwards_var_1.len, x_1)].len, i_2)])] < key_1) {
            x_1 = node_forwards_var_1[_idx(node_forwards_var_1.len, x_1)][_idx(node_forwards_var_1[_idx(node_forwards_var_1.len, x_1)].len, i_2)];
        }
        i_2 = i_2 -% 1;
    }
    x_1 = node_forwards_var_1[_idx(node_forwards_var_1.len, x_1)][_idx(node_forwards_var_1[_idx(node_forwards_var_1.len, x_1)].len, 0)];
    if (x_1 != NIL_var and node_keys_var_1[_idx(node_keys_var_1.len, x_1)] == key_1) {
        return node_vals_var_1[_idx(node_vals_var_1.len, x_1)];
    }
    return 0 -% 1;
}

fn delete(key_2: i64) void {
    var update_1: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    update_1 = update_1;
    var i_3: i64 = 0;
    i_3 = i_3;
    while (i_3 < MAX_LEVEL_var) {
        update_1 = blk7: { var _tmp_7 = std.ArrayList(i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_7.appendSlice(@as([]const i64, update_1)) catch |err| handleError(err); _tmp_7.append(0) catch |err| handleError(err); break :blk7 (_tmp_7.toOwnedSlice() catch |err| handleError(err)); };
        i_3 = i_3 +% 1;
    }
    var x_2: i64 = 0;
    x_2 = x_2;
    i_3 = level_var_1 -% 1;
    while (i_3 >= 0) {
        while (node_forwards_var_1[_idx(node_forwards_var_1.len, x_2)][_idx(node_forwards_var_1[_idx(node_forwards_var_1.len, x_2)].len, i_3)] != NIL_var and node_keys_var_1[_idx(node_keys_var_1.len, node_forwards_var_1[_idx(node_forwards_var_1.len, x_2)][_idx(node_forwards_var_1[_idx(node_forwards_var_1.len, x_2)].len, i_3)])] < key_2) {
            x_2 = node_forwards_var_1[_idx(node_forwards_var_1.len, x_2)][_idx(node_forwards_var_1[_idx(node_forwards_var_1.len, x_2)].len, i_3)];
        }
        update_1[_idx(update_1.len, i_3)] = x_2;
        i_3 = i_3 -% 1;
    }
    x_2 = node_forwards_var_1[_idx(node_forwards_var_1.len, x_2)][_idx(node_forwards_var_1[_idx(node_forwards_var_1.len, x_2)].len, 0)];
    if (x_2 == NIL_var or node_keys_var_1[_idx(node_keys_var_1.len, x_2)] != key_2) {
        return;
    }
    i_3 = 0;
    while (i_3 < level_var_1) {
        if (node_forwards_var_1[_idx(node_forwards_var_1.len, update_1[_idx(update_1.len, i_3)])][_idx(node_forwards_var_1[_idx(node_forwards_var_1.len, update_1[_idx(update_1.len, i_3)])].len, i_3)] == x_2) {
            node_forwards_var_1[_idx(node_forwards_var_1.len, update_1[_idx(update_1.len, i_3)])][_idx(node_forwards_var_1[_idx(node_forwards_var_1.len, update_1[_idx(update_1.len, i_3)])].len, i_3)] = node_forwards_var_1[_idx(node_forwards_var_1.len, x_2)][_idx(node_forwards_var_1[_idx(node_forwards_var_1.len, x_2)].len, i_3)];
        }
        i_3 = i_3 +% 1;
    }
    while (level_var_1 > 1 and node_forwards_var_1[_idx(node_forwards_var_1.len, 0)][_idx(node_forwards_var_1[_idx(node_forwards_var_1.len, 0)].len, level_var_1 -% 1)] == NIL_var) {
        level_var_1 = level_var_1 -% 1;
    }
}

fn to_string() []const u8 {
    var s: []const u8 = "";
    s = s;
    var x_3: i64 = node_forwards_var_1[_idx(node_forwards_var_1.len, 0)][_idx(node_forwards_var_1[_idx(node_forwards_var_1.len, 0)].len, 0)];
    x_3 = x_3;
    while (x_3 != NIL_var) {
        if (s.len != 0) {
            s = _concat_string(s, " -> ");
        }
        s = _concat_string(_concat_string(_concat_string(s, _str(node_keys_var_1[_idx(node_keys_var_1.len, x_3)])), ":"), _str(node_vals_var_1[_idx(node_vals_var_1.len, x_3)]));
        x_3 = node_forwards_var_1[_idx(node_forwards_var_1.len, x_3)][_idx(node_forwards_var_1[_idx(node_forwards_var_1.len, x_3)].len, 0)];
    }
    return s;
}

fn mochi_main() void {
    init();
    insert(2, 2);
    insert(4, 4);
    insert(6, 4);
    insert(4, 5);
    insert(8, 4);
    insert(9, 4);
    delete(4);
    std.debug.print("{s}\n", .{to_string()});
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        mochi_main();
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
