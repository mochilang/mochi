// Generated by Mochi Zig transpiler on 2025-08-09 11:16 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const SortedLinkedList = struct {
    values: []i64,
};

fn sort_list(nums: []const i64) []i64 {
    var arr: []i64 = &[_]i64{};
    arr = arr;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(nums.len))) {
        arr = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, arr)) catch |err| handleError(err); _tmp.append(nums[@as(usize, @intCast(i))]) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    var j: i64 = 0;
    j = j;
    while (j < @as(i64, @intCast(arr.len))) {
        var k: i64 = j + 1;
        k = k;
        while (k < @as(i64, @intCast(arr.len))) {
            if (arr[@as(usize, @intCast(k))] < arr[@as(usize, @intCast(j))]) {
                const tmp: i64 = arr[@as(usize, @intCast(j))];
                arr[@as(usize, @intCast(j))] = arr[@as(usize, @intCast(k))];
                arr[@as(usize, @intCast(k))] = tmp;
            }
            k = k + 1;
        }
        j = j + 1;
    }
    return arr;
}

fn make_sorted_linked_list(ints: []const i64) SortedLinkedList {
    return .{ .values = sort_list(ints) };
}

fn len_sll(sll: SortedLinkedList) i64 {
    return @as(i64, @intCast(sll.values.len));
}

fn str_sll(sll: SortedLinkedList) []const u8 {
    var res: []const u8 = "";
    res = res;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(sll.values.len))) {
        res = _concat_string(res, _str(sll.values[@as(usize, @intCast(i))]));
        if (i + 1 < @as(i64, @intCast(sll.values.len))) {
            res = _concat_string(res, " -> ");
        }
        i = i + 1;
    }
    return res;
}

fn merge_lists(a: SortedLinkedList, b: SortedLinkedList) SortedLinkedList {
    var combined: []i64 = &[_]i64{};
    combined = combined;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(a.values.len))) {
        combined = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, combined)) catch |err| handleError(err); _tmp.append(a.values[@as(usize, @intCast(i))]) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    i = 0;
    while (i < @as(i64, @intCast(b.values.len))) {
        combined = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, combined)) catch |err| handleError(err); _tmp.append(b.values[@as(usize, @intCast(i))]) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    return make_sorted_linked_list(combined[0..]);
}

fn mochi_main() void {
    const test_data_odd: []const i64 = @constCast(&([8]i64{3, 9, 0 - 11, 0, 7, 5, 1, 0 - 1}))[0..];
    const test_data_even: []const i64 = @constCast(&([8]i64{4, 6, 2, 0, 8, 10, 3, 0 - 2}))[0..];
    const sll_one: SortedLinkedList = make_sorted_linked_list(test_data_odd[0..]);
    const sll_two: SortedLinkedList = make_sorted_linked_list(test_data_even[0..]);
    const merged: SortedLinkedList = merge_lists(sll_one, sll_two);
    std.debug.print("{s}\n", .{_str(len_sll(merged))});
    std.debug.print("{s}\n", .{str_sll(merged)});
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        mochi_main();
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * std.mem.page_size;
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
