// Generated by Mochi Zig transpiler on 2025-08-24 22:16 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const LinkedList = struct {
    next: []i64,
    head: i64,
};

const NULL_var: i64 = -1;

fn empty_list() LinkedList {
    return .{ .next = @constCast((&[_]i64{})[0..0]), .head = NULL_var };
}

fn add_node(list: LinkedList, _: i64) LinkedList {
    var nexts: []i64 = list.next;
    nexts = nexts;
    const new_index: i64 = @as(i64, @intCast(nexts.len));
    nexts = blk0: { var _tmp = std.ArrayList(i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp.appendSlice(@as([]const i64, nexts)) catch |err| handleError(err); _tmp.append(NULL_var) catch |err| handleError(err); break :blk0 (_tmp.toOwnedSlice() catch |err| handleError(err)); };
    if (list.head == NULL_var) {
        return .{ .next = nexts, .head = new_index };
    }
    var last: i64 = list.head;
    last = last;
    while (nexts[_idx(nexts.len, last)] != NULL_var) {
        last = nexts[_idx(nexts.len, last)];
    }
    var new_nexts: []i64 = @constCast((&[_]i64{})[0..0]);
    new_nexts = new_nexts;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(nexts.len))) {
        if (i == last) {
            new_nexts = blk1: { var _tmp_1 = std.ArrayList(i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_1.appendSlice(@as([]const i64, new_nexts)) catch |err| handleError(err); _tmp_1.append(new_index) catch |err| handleError(err); break :blk1 (_tmp_1.toOwnedSlice() catch |err| handleError(err)); };
        } else {
            new_nexts = blk2: { var _tmp_2 = std.ArrayList(i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_2.appendSlice(@as([]const i64, new_nexts)) catch |err| handleError(err); _tmp_2.append(nexts[_idx(nexts.len, i)]) catch |err| handleError(err); break :blk2 (_tmp_2.toOwnedSlice() catch |err| handleError(err)); };
        }
        i = i +% 1;
    }
    return .{ .next = new_nexts, .head = list.head };
}

fn set_next(list_1: LinkedList, index: i64, next_index: i64) LinkedList {
    const nexts_1: []i64 = list_1.next;
    var new_nexts_1: []i64 = @constCast((&[_]i64{})[0..0]);
    new_nexts_1 = new_nexts_1;
    var i_1: i64 = 0;
    i_1 = i_1;
    while (i_1 < @as(i64, @intCast(nexts_1.len))) {
        if (i_1 == index) {
            new_nexts_1 = blk3: { var _tmp_3 = std.ArrayList(i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_3.appendSlice(@as([]const i64, new_nexts_1)) catch |err| handleError(err); _tmp_3.append(next_index) catch |err| handleError(err); break :blk3 (_tmp_3.toOwnedSlice() catch |err| handleError(err)); };
        } else {
            new_nexts_1 = blk4: { var _tmp_4 = std.ArrayList(i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_4.appendSlice(@as([]const i64, new_nexts_1)) catch |err| handleError(err); _tmp_4.append(nexts_1[_idx(nexts_1.len, i_1)]) catch |err| handleError(err); break :blk4 (_tmp_4.toOwnedSlice() catch |err| handleError(err)); };
        }
        i_1 = i_1 +% 1;
    }
    return .{ .next = new_nexts_1, .head = list_1.head };
}

fn detect_cycle(list_2: LinkedList) bool {
    if (list_2.head == NULL_var) {
        return false;
    }
    var slow: i64 = list_2.head;
    slow = slow;
    var fast: i64 = list_2.head;
    fast = fast;
    while (fast != NULL_var and list_2.next[_idx(list_2.next.len, fast)] != NULL_var) {
        slow = list_2.next[_idx(list_2.next.len, slow)];
        fast = list_2.next[_idx(list_2.next.len, list_2.next[_idx(list_2.next.len, fast)])];
        if (slow == fast) {
            return true;
        }
    }
    return false;
}

fn mochi_main() void {
    var ll: LinkedList = empty_list();
    ll = ll;
    ll = add_node(ll, 1);
    ll = add_node(ll, 2);
    ll = add_node(ll, 3);
    ll = add_node(ll, 4);
    ll = set_next(ll, 3, 1);
    std.debug.print("{s}\n", .{_str(detect_cycle(ll))});
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        mochi_main();
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
