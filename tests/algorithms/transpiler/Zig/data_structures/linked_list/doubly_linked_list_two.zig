// Generated by Mochi Zig transpiler on 2025-08-24 23:17 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const Node = struct {
    data: i64,
    prev_index: i64,
    next_index: i64,
};

const LinkedList = struct {
    nodes: []Node,
    head_idx: i64,
    tail_idx: i64,
};

fn empty_list() LinkedList {
    return .{ .nodes = (&[_]Node{})[0..0], .head_idx = 0 -% 1, .tail_idx = 0 -% 1 };
}

fn get_head_data(ll: *const LinkedList) i64 {
    if (ll.head_idx == 0 -% 1) {
        return 0 -% 1;
    }
    const node: Node = ll.nodes[_idx(ll.nodes.len, ll.head_idx)];
    return node.data;
}

fn get_tail_data(ll_1: *const LinkedList) i64 {
    if (ll_1.tail_idx == 0 -% 1) {
        return 0 -% 1;
    }
    const node_1: Node = ll_1.nodes[_idx(ll_1.nodes.len, ll_1.tail_idx)];
    return node_1.data;
}

fn insert_before_node(ll_param: *LinkedList, idx: i64, new_idx: i64) void {
    var nodes: []Node = ll_param.nodes;
    nodes = nodes;
    var new_node: Node = nodes[_idx(nodes.len, new_idx)];
    new_node = new_node;
    new_node.next_index = idx;
    var node_2: Node = nodes[_idx(nodes.len, idx)];
    node_2 = node_2;
    new_node.prev_index = node_2.prev_index;
    nodes[_idx(nodes.len, new_idx)] = new_node;
    if (node_2.prev_index == 0 -% 1) {
        ll_param.head_idx = new_idx;
    } else {
        var prev_node: Node = nodes[_idx(nodes.len, node_2.prev_index)];
        prev_node = prev_node;
        prev_node.next_index = new_idx;
        nodes[_idx(nodes.len, node_2.prev_index)] = prev_node;
    }
    node_2.prev_index = new_idx;
    nodes[_idx(nodes.len, idx)] = node_2;
    ll_param.nodes = nodes;
}

fn insert_after_node(ll_param_1: *LinkedList, idx_1: i64, new_idx_1: i64) void {
    var nodes_1: []Node = ll_param_1.nodes;
    nodes_1 = nodes_1;
    var new_node_1: Node = nodes_1[_idx(nodes_1.len, new_idx_1)];
    new_node_1 = new_node_1;
    new_node_1.prev_index = idx_1;
    var node_3: Node = nodes_1[_idx(nodes_1.len, idx_1)];
    node_3 = node_3;
    new_node_1.next_index = node_3.next_index;
    nodes_1[_idx(nodes_1.len, new_idx_1)] = new_node_1;
    if (node_3.next_index == 0 -% 1) {
        ll_param_1.tail_idx = new_idx_1;
    } else {
        var next_node: Node = nodes_1[_idx(nodes_1.len, node_3.next_index)];
        next_node = next_node;
        next_node.prev_index = new_idx_1;
        nodes_1[_idx(nodes_1.len, node_3.next_index)] = next_node;
    }
    node_3.next_index = new_idx_1;
    nodes_1[_idx(nodes_1.len, idx_1)] = node_3;
    ll_param_1.nodes = nodes_1;
}

fn set_head(ll_param_2: *LinkedList, idx_2: i64) void {
    if (ll_param_2.head_idx == 0 -% 1) {
        ll_param_2.head_idx = idx_2;
        ll_param_2.tail_idx = idx_2;
    } else {
        insert_before_node(ll_param_2, ll_param_2.head_idx, idx_2);
    }
}

fn set_tail(ll_param_3: *LinkedList, idx_3: i64) void {
    if (ll_param_3.tail_idx == 0 -% 1) {
        ll_param_3.head_idx = idx_3;
        ll_param_3.tail_idx = idx_3;
    } else {
        insert_after_node(ll_param_3, ll_param_3.tail_idx, idx_3);
    }
}

fn insert(ll_param_4: *LinkedList, value: i64) void {
    var nodes_2: []Node = ll_param_4.nodes;
    nodes_2 = nodes_2;
    nodes_2 = blk0: { var _tmp = std.ArrayList(Node).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp.appendSlice(@as([]const Node, nodes_2)) catch |err| handleError(err); _tmp.append(.{ .data = value, .prev_index = 0 -% 1, .next_index = 0 -% 1 }) catch |err| handleError(err); break :blk0 (_tmp.toOwnedSlice() catch |err| handleError(err)); };
    const idx_4: i64 = @as(i64, @intCast(nodes_2.len)) -% 1;
    ll_param_4.nodes = nodes_2;
    if (ll_param_4.head_idx == 0 -% 1) {
        ll_param_4.head_idx = idx_4;
        ll_param_4.tail_idx = idx_4;
    } else {
        insert_after_node(ll_param_4, ll_param_4.tail_idx, idx_4);
    }
}

fn insert_at_position(ll_param_5: *LinkedList, position: i64, value_1: i64) void {
    var current: i64 = ll_param_5.head_idx;
    current = current;
    var current_pos: i64 = 1;
    current_pos = current_pos;
    while (current != 0 -% 1) {
        if (current_pos == position) {
            var nodes_3: []Node = ll_param_5.nodes;
            nodes_3 = nodes_3;
            nodes_3 = blk1: { var _tmp_1 = std.ArrayList(Node).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_1.appendSlice(@as([]const Node, nodes_3)) catch |err| handleError(err); _tmp_1.append(.{ .data = value_1, .prev_index = 0 -% 1, .next_index = 0 -% 1 }) catch |err| handleError(err); break :blk1 (_tmp_1.toOwnedSlice() catch |err| handleError(err)); };
            const new_idx_2: i64 = @as(i64, @intCast(nodes_3.len)) -% 1;
            ll_param_5.nodes = nodes_3;
            insert_before_node(ll_param_5, current, new_idx_2);
            return;
        }
        const node_4: Node = ll_param_5.nodes[_idx(ll_param_5.nodes.len, current)];
        current = node_4.next_index;
        current_pos = current_pos +% 1;
    }
    insert(ll_param_5, value_1);
}

fn get_node(ll_2: *const LinkedList, item: i64) i64 {
    var current_1: i64 = ll_2.head_idx;
    current_1 = current_1;
    while (current_1 != 0 -% 1) {
        const node_5: Node = ll_2.nodes[_idx(ll_2.nodes.len, current_1)];
        if (node_5.data == item) {
            return current_1;
        }
        current_1 = node_5.next_index;
    }
    return 0 -% 1;
}

fn remove_node_pointers(ll_param_6: *LinkedList, idx_5: i64) void {
    var nodes_4: []Node = ll_param_6.nodes;
    nodes_4 = nodes_4;
    var node_6: Node = nodes_4[_idx(nodes_4.len, idx_5)];
    node_6 = node_6;
    if (node_6.next_index != 0 -% 1) {
        var nxt_node: Node = nodes_4[_idx(nodes_4.len, node_6.next_index)];
        nxt_node = nxt_node;
        nxt_node.prev_index = node_6.prev_index;
        nodes_4[_idx(nodes_4.len, node_6.next_index)] = nxt_node;
    }
    if (node_6.prev_index != 0 -% 1) {
        var prev_node_1: Node = nodes_4[_idx(nodes_4.len, node_6.prev_index)];
        prev_node_1 = prev_node_1;
        prev_node_1.next_index = node_6.next_index;
        nodes_4[_idx(nodes_4.len, node_6.prev_index)] = prev_node_1;
    }
    node_6.next_index = 0 -% 1;
    node_6.prev_index = 0 -% 1;
    nodes_4[_idx(nodes_4.len, idx_5)] = node_6;
    ll_param_6.nodes = nodes_4;
}

fn delete_value(ll_param_7: *LinkedList, value_2: i64) void {
    const idx_6: i64 = get_node(ll_param_7, value_2);
    if (idx_6 == 0 -% 1) {
        return;
    }
    if (idx_6 == ll_param_7.head_idx) {
        const node_7: Node = ll_param_7.nodes[_idx(ll_param_7.nodes.len, idx_6)];
        ll_param_7.head_idx = node_7.next_index;
    }
    if (idx_6 == ll_param_7.tail_idx) {
        const node_8: Node = ll_param_7.nodes[_idx(ll_param_7.nodes.len, idx_6)];
        ll_param_7.tail_idx = node_8.prev_index;
    }
    remove_node_pointers(ll_param_7, idx_6);
}

fn contains(ll_3: *const LinkedList, value_3: i64) bool {
    return get_node(ll_3, value_3) != 0 -% 1;
}

fn is_empty(ll_4: *const LinkedList) bool {
    return ll_4.head_idx == 0 -% 1;
}

fn to_string(ll_5: *const LinkedList) []const u8 {
    var res: []const u8 = "";
    res = res;
    var first: bool = true;
    first = first;
    var current_2: i64 = ll_5.head_idx;
    current_2 = current_2;
    while (current_2 != 0 -% 1) {
        const node_9: Node = ll_5.nodes[_idx(ll_5.nodes.len, current_2)];
        const val: []const u8 = _str(node_9.data);
        if (first) {
            res = val;
            first = false;
        } else {
            res = _concat_string(_concat_string(res, " "), val);
        }
        current_2 = node_9.next_index;
    }
    return res;
}

fn print_list(ll_6: *const LinkedList) void {
    var current_3: i64 = ll_6.head_idx;
    current_3 = current_3;
    while (current_3 != 0 -% 1) {
        const node_10: Node = ll_6.nodes[_idx(ll_6.nodes.len, current_3)];
        std.debug.print("{s}\n", .{_str(node_10.data)});
        current_3 = node_10.next_index;
    }
}

fn mochi_main() void {
    var ll_7: LinkedList = empty_list();
    ll_7 = ll_7;
    std.debug.print("{s}\n", .{_str(get_head_data(&ll_7))});
    std.debug.print("{s}\n", .{_str(get_tail_data(&ll_7))});
    std.debug.print("{s}\n", .{_str(is_empty(&ll_7))});
    insert(&ll_7, 10);
    std.debug.print("{s}\n", .{_str(get_head_data(&ll_7))});
    std.debug.print("{s}\n", .{_str(get_tail_data(&ll_7))});
    insert_at_position(&ll_7, 3, 20);
    std.debug.print("{s}\n", .{_str(get_head_data(&ll_7))});
    std.debug.print("{s}\n", .{_str(get_tail_data(&ll_7))});
    ll_7.nodes = blk2: { var _tmp_2 = std.ArrayList(Node).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_2.appendSlice(@as([]const Node, ll_7.nodes)) catch |err| handleError(err); _tmp_2.append(.{ .data = 1000, .prev_index = 0 -% 1, .next_index = 0 -% 1 }) catch |err| handleError(err); break :blk2 (_tmp_2.toOwnedSlice() catch |err| handleError(err)); };
    const idx_head: i64 = @as(i64, @intCast(ll_7.nodes.len)) -% 1;
    ll_7.nodes = ll_7.nodes;
    set_head(&ll_7, idx_head);
    ll_7.nodes = ll_7.nodes;
    ll_7.nodes = blk3: { var _tmp_3 = std.ArrayList(Node).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_3.appendSlice(@as([]const Node, ll_7.nodes)) catch |err| handleError(err); _tmp_3.append(.{ .data = 2000, .prev_index = 0 -% 1, .next_index = 0 -% 1 }) catch |err| handleError(err); break :blk3 (_tmp_3.toOwnedSlice() catch |err| handleError(err)); };
    const idx_tail: i64 = @as(i64, @intCast(ll_7.nodes.len)) -% 1;
    ll_7.nodes = ll_7.nodes;
    set_tail(&ll_7, idx_tail);
    print_list(&ll_7);
    std.debug.print("{s}\n", .{_str(is_empty(&ll_7))});
    print_list(&ll_7);
    std.debug.print("{s}\n", .{_str(contains(ll_7, 10))});
    delete_value(&ll_7, 10);
    std.debug.print("{s}\n", .{_str(contains(ll_7, 10))});
    delete_value(&ll_7, 2000);
    std.debug.print("{s}\n", .{_str(get_tail_data(&ll_7))});
    delete_value(&ll_7, 1000);
    std.debug.print("{s}\n", .{_str(get_tail_data(&ll_7))});
    std.debug.print("{s}\n", .{_str(get_head_data(&ll_7))});
    print_list(&ll_7);
    delete_value(&ll_7, 20);
    print_list(&ll_7);
    var i: i64 = 1;
    i = i;
    while (i < 10) {
        insert(&ll_7, i);
        i = i +% 1;
    }
    print_list(&ll_7);
    var ll2: LinkedList = empty_list();
    ll2 = ll2;
    insert_at_position(&ll2, 1, 10);
    std.debug.print("{s}\n", .{to_string(&ll2)});
    insert_at_position(&ll2, 2, 20);
    std.debug.print("{s}\n", .{to_string(&ll2)});
    insert_at_position(&ll2, 1, 30);
    std.debug.print("{s}\n", .{to_string(&ll2)});
    insert_at_position(&ll2, 3, 40);
    std.debug.print("{s}\n", .{to_string(&ll2)});
    insert_at_position(&ll2, 5, 50);
    std.debug.print("{s}\n", .{to_string(&ll2)});
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        mochi_main();
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
