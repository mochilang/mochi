// Generated by Mochi Zig transpiler on 2025-08-24 23:17 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const Node = struct {
    data: []const u8,
    prev: i64,
    next: i64,
};

const LinkedDeque = struct {
    nodes: []Node,
    header: i64,
    trailer: i64,
    size: i64,
};

const DeleteResult = struct {
    deque: LinkedDeque,
    value: []const u8,
};

fn new_deque() LinkedDeque {
    var nodes: []Node = std.heap.page_allocator.alloc(Node, 0) catch unreachable;
    nodes = nodes;
    nodes = blk0: { var _tmp = std.ArrayList(Node).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp.appendSlice(@as([]const Node, nodes)) catch |err| handleError(err); _tmp.append(.{ .data = "", .prev = 0 -% 1, .next = 1 }) catch |err| handleError(err); break :blk0 (_tmp.toOwnedSlice() catch |err| handleError(err)); };
    nodes = blk1: { var _tmp_1 = std.ArrayList(Node).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_1.appendSlice(@as([]const Node, nodes)) catch |err| handleError(err); _tmp_1.append(.{ .data = "", .prev = 0, .next = 0 -% 1 }) catch |err| handleError(err); break :blk1 (_tmp_1.toOwnedSlice() catch |err| handleError(err)); };
    return .{ .nodes = nodes, .header = 0, .trailer = 1, .size = 0 };
}

fn is_empty(d: *const LinkedDeque) bool {
    return d.size == 0;
}

fn front(d_1: *const LinkedDeque) []const u8 {
    if (is_empty(d_1)) {
        @panic("List is empty");
    }
    const head: Node = d_1.nodes[_idx(d_1.nodes.len, d_1.header)];
    const node: Node = d_1.nodes[_idx(d_1.nodes.len, head.next)];
    return node.data;
}

fn back(d_2: *const LinkedDeque) []const u8 {
    if (is_empty(d_2)) {
        @panic("List is empty");
    }
    const tail: Node = d_2.nodes[_idx(d_2.nodes.len, d_2.trailer)];
    const node_1: Node = d_2.nodes[_idx(d_2.nodes.len, tail.prev)];
    return node_1.data;
}

fn insert(d_param: *LinkedDeque, pred: i64, value: []const u8, succ: i64) LinkedDeque {
    var nodes_1: []Node = d_param.nodes;
    nodes_1 = nodes_1;
    const new_idx: i64 = @as(i64, @intCast(nodes_1.len));
    nodes_1 = blk2: { var _tmp_2 = std.ArrayList(Node).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_2.appendSlice(@as([]const Node, nodes_1)) catch |err| handleError(err); _tmp_2.append(.{ .data = value, .prev = pred, .next = succ }) catch |err| handleError(err); break :blk2 (_tmp_2.toOwnedSlice() catch |err| handleError(err)); };
    var pred_node: Node = nodes_1[_idx(nodes_1.len, pred)];
    pred_node = pred_node;
    pred_node.next = new_idx;
    nodes_1[_idx(nodes_1.len, pred)] = pred_node;
    var succ_node: Node = nodes_1[_idx(nodes_1.len, succ)];
    succ_node = succ_node;
    succ_node.prev = new_idx;
    nodes_1[_idx(nodes_1.len, succ)] = succ_node;
    d_param.nodes = nodes_1;
    d_param.size = d_param.size +% 1;
    return d_param.*;
}

fn delete(d_param_1: *LinkedDeque, idx: i64) DeleteResult {
    var nodes_2: []Node = d_param_1.nodes;
    nodes_2 = nodes_2;
    const node_2: Node = nodes_2[_idx(nodes_2.len, idx)];
    var pred_node_1: Node = nodes_2[_idx(nodes_2.len, node_2.prev)];
    pred_node_1 = pred_node_1;
    pred_node_1.next = node_2.next;
    nodes_2[_idx(nodes_2.len, node_2.prev)] = pred_node_1;
    var succ_node_1: Node = nodes_2[_idx(nodes_2.len, node_2.next)];
    succ_node_1 = succ_node_1;
    succ_node_1.prev = node_2.prev;
    nodes_2[_idx(nodes_2.len, node_2.next)] = succ_node_1;
    d_param_1.nodes = nodes_2;
    d_param_1.size = d_param_1.size -% 1;
    return .{ .deque = (d_param_1).*, .value = node_2.data };
}

fn add_first(d_3: *LinkedDeque, value_1: []const u8) LinkedDeque {
    const head_1: Node = d_3.nodes[_idx(d_3.nodes.len, d_3.header)];
    return insert(d_3, d_3.header, value_1, head_1.next);
}

fn add_last(d_4: *LinkedDeque, value_2: []const u8) LinkedDeque {
    const tail_1: Node = d_4.nodes[_idx(d_4.nodes.len, d_4.trailer)];
    return insert(d_4, tail_1.prev, value_2, d_4.trailer);
}

fn remove_first(d_5: *LinkedDeque) DeleteResult {
    if (is_empty(d_5)) {
        @panic("remove_first from empty list");
    }
    const head_2: Node = d_5.nodes[_idx(d_5.nodes.len, d_5.header)];
    return delete(d_5, head_2.next);
}

fn remove_last(d_6: *LinkedDeque) DeleteResult {
    if (is_empty(d_6)) {
        @panic("remove_first from empty list");
    }
    const tail_2: Node = d_6.nodes[_idx(d_6.nodes.len, d_6.trailer)];
    return delete(d_6, tail_2.prev);
}

fn mochi_main() void {
    var d_7: LinkedDeque = new_deque();
    d_7 = d_7;
    d_7 = add_first(&d_7, "A");
    std.debug.print("{s}\n", .{front(&d_7)});
    d_7 = add_last(&d_7, "B");
    std.debug.print("{s}\n", .{back(&d_7)});
    var r: DeleteResult = remove_first(&d_7);
    r = r;
    d_7 = r.deque;
    std.debug.print("{s}\n", .{r.value});
    r = remove_last(&d_7);
    d_7 = r.deque;
    std.debug.print("{s}\n", .{r.value});
    std.debug.print("{s}\n", .{_str(is_empty(&d_7))});
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        mochi_main();
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
