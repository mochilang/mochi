// Generated by Mochi Zig transpiler on 2025-08-09 11:16 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const List = struct {
    data: []i64,
};

fn empty_list() List {
    return .{ .data = &[_]i64{} };
}

fn push(lst: List, value: i64) List {
    var res: []i64 = @constCast(&([1]i64{value}))[0..];
    res = res;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(lst.data.len))) {
        res = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, res)) catch |err| handleError(err); _tmp.append(lst.data[@as(usize, @intCast(i))]) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    return .{ .data = res };
}

fn middle_element(lst: List) i64 {
    const n: i64 = @as(i64, @intCast(lst.data.len));
    if (n == 0) {
        std.debug.print("{s}\n", .{"No element found."});
        return 0;
    }
    var slow: i64 = 0;
    slow = slow;
    var fast: i64 = 0;
    fast = fast;
    while (fast + 1 < n) {
        fast = fast + 2;
        slow = slow + 1;
    }
    return lst.data[@as(usize, @intCast(slow))];
}

fn mochi_main() void {
    var lst: List = empty_list();
    lst = lst;
    _ = middle_element(lst);
    lst = push(lst, 5);
    std.debug.print("{s}\n", .{_str(5)});
    lst = push(lst, 6);
    std.debug.print("{s}\n", .{_str(6)});
    lst = push(lst, 8);
    std.debug.print("{s}\n", .{_str(8)});
    lst = push(lst, 8);
    std.debug.print("{s}\n", .{_str(8)});
    lst = push(lst, 10);
    std.debug.print("{s}\n", .{_str(10)});
    lst = push(lst, 12);
    std.debug.print("{s}\n", .{_str(12)});
    lst = push(lst, 17);
    std.debug.print("{s}\n", .{_str(17)});
    lst = push(lst, 7);
    std.debug.print("{s}\n", .{_str(7)});
    lst = push(lst, 3);
    std.debug.print("{s}\n", .{_str(3)});
    lst = push(lst, 20);
    std.debug.print("{s}\n", .{_str(20)});
    lst = push(lst, 0 - 20);
    std.debug.print("{s}\n", .{_str(0 - 20)});
    std.debug.print("{s}\n", .{_str(middle_element(lst))});
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        mochi_main();
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * std.mem.page_size;
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
