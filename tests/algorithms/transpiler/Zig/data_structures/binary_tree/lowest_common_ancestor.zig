// Generated by Mochi Zig transpiler on 2025-08-09 23:14 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn pow2(exp: i64) i64 {
    var res: i64 = 1;
    res = res;
    var i: i64 = 0;
    i = i;
    while (i < exp) {
        res = res * 2;
        i = i + 1;
    }
    return res;
}

fn create_sparse(max_node: i64, parent_param: [][]i64) [][]i64 {
    var parent_var: [][]i64 = parent_param;
    parent_var = parent_var;
    var j: i64 = 1;
    j = j;
    while (pow2(j) < max_node) {
        var i: i64 = 1;
        i = i;
        while (i <= max_node) {
            parent_var[@as(usize, @intCast(j))][@as(usize, @intCast(i))] = parent_var[@as(usize, @intCast(j - 1))][@as(usize, @intCast(parent_var[@as(usize, @intCast(j - 1))][@as(usize, @intCast(i))]))];
            i = i + 1;
        }
        j = j + 1;
    }
    return parent_var;
}

fn lowest_common_ancestor(u_param: i64, v_param: i64, level: []const i64, parent: []const []i64) i64 {
    var u_var: i64 = u_param;
    u_var = u_var;
    var v_var: i64 = v_param;
    v_var = v_var;
    if (level[@as(usize, @intCast(u_var))] < level[@as(usize, @intCast(v_var))]) {
        const temp: i64 = u_var;
        u_var = v_var;
        v_var = temp;
    }
    var i: i64 = 18;
    i = i;
    while (i >= 0) {
        if (level[@as(usize, @intCast(u_var))] - pow2(i) >= level[@as(usize, @intCast(v_var))]) {
            u_var = parent[@as(usize, @intCast(i))][@as(usize, @intCast(u_var))];
        }
        i = i - 1;
    }
    if (u_var == v_var) {
        return u_var;
    }
    i = 18;
    while (i >= 0) {
        const pu: i64 = parent[@as(usize, @intCast(i))][@as(usize, @intCast(u_var))];
        const pv: i64 = parent[@as(usize, @intCast(i))][@as(usize, @intCast(v_var))];
        if (pu != 0 and pu != pv) {
            u_var = pu;
            v_var = pv;
        }
        i = i - 1;
    }
    return parent[@as(usize, @intCast(0))][@as(usize, @intCast(u_var))];
}

fn breadth_first_search(level_param: []i64, parent_param_1: [][]i64, _: i64, graph: std.AutoHashMap(i64,[]i64), root: i64) void {
    var level_var: []i64 = level_param;
    level_var = level_var;
    var parent_var: [][]i64 = parent_param_1;
    parent_var = parent_var;
    level_var[@as(usize, @intCast(root))] = 0;
    var q: []i64 = @constCast(&[_]i64{})[0..];
    q = q;
    q = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, q)) catch |err| handleError(err); _tmp.append(root) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
    var head: i64 = 0;
    head = head;
    while (head < @as(i64, @intCast(q.len))) {
        const u: i64 = q[@as(usize, @intCast(head))];
        head = head + 1;
        var adj: []i64 = graph.get(u).?;
        adj = adj;
        var j: i64 = 0;
        j = j;
        while (j < @as(i64, @intCast(adj.len))) {
            const v: i64 = adj[@as(usize, @intCast(j))];
            if (level_var[@as(usize, @intCast(v))] == -1) {
                level_var[@as(usize, @intCast(v))] = level_var[@as(usize, @intCast(u))] + 1;
                parent_var[@as(usize, @intCast(0))][@as(usize, @intCast(v))] = u;
                q = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, q)) catch |err| handleError(err); _tmp.append(v) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            }
            j = j + 1;
        }
    }
}

fn mochi_main() void {
    var max_node: i64 = 13;
    max_node = max_node;
    var parent: [][]i64 = @constCast(&[_][]i64{})[0..];
    parent = parent;
    var i: i64 = 0;
    i = i;
    while (i < 20) {
        var row: []i64 = @constCast(&[_]i64{})[0..];
        row = row;
        var j: i64 = 0;
        j = j;
        while (j < max_node + 10) {
            row = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, row)) catch |err| handleError(err); _tmp.append(0) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            j = j + 1;
        }
        parent = blk: { var _tmp = std.ArrayList([]i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []i64, parent)) catch |err| handleError(err); _tmp.append(row) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    var level: []i64 = @constCast(&[_]i64{})[0..];
    level = level;
    i = 0;
    while (i < max_node + 10) {
        level = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, level)) catch |err| handleError(err); _tmp.append(-1) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    var graph: std.AutoHashMap(i64,[]i64) = std.AutoHashMap(i64, []i64).init(std.heap.page_allocator);
    graph = graph;
    graph.put(1, @constCast(&[3]i64{2, 3, 4})[0..]) catch unreachable;
    graph.put(2, @constCast(&[1]i64{5})[0..]) catch unreachable;
    graph.put(3, @constCast(&[2]i64{6, 7})[0..]) catch unreachable;
    graph.put(4, @constCast(&[1]i64{8})[0..]) catch unreachable;
    graph.put(5, @constCast(&[2]i64{9, 10})[0..]) catch unreachable;
    graph.put(6, @constCast(&[1]i64{11})[0..]) catch unreachable;
    graph.put(7, @constCast((&[_]i64{}))[0..]) catch unreachable;
    graph.put(8, @constCast(&[2]i64{12, 13})[0..]) catch unreachable;
    graph.put(9, @constCast((&[_]i64{}))[0..]) catch unreachable;
    graph.put(10, @constCast((&[_]i64{}))[0..]) catch unreachable;
    graph.put(11, @constCast((&[_]i64{}))[0..]) catch unreachable;
    graph.put(12, @constCast((&[_]i64{}))[0..]) catch unreachable;
    graph.put(13, @constCast((&[_]i64{}))[0..]) catch unreachable;
    breadth_first_search(level, parent, max_node, graph, 1);
    parent = create_sparse(max_node, parent);
    std.debug.print("{s}\n", .{_concat_string("LCA of node 1 and 3 is: ", _str(lowest_common_ancestor(1, 3, level[0..], parent[0..])))});
    std.debug.print("{s}\n", .{_concat_string("LCA of node 5 and 6 is: ", _str(lowest_common_ancestor(5, 6, level[0..], parent[0..])))});
    std.debug.print("{s}\n", .{_concat_string("LCA of node 7 and 11 is: ", _str(lowest_common_ancestor(7, 11, level[0..], parent[0..])))});
    std.debug.print("{s}\n", .{_concat_string("LCA of node 6 and 7 is: ", _str(lowest_common_ancestor(6, 7, level[0..], parent[0..])))});
    std.debug.print("{s}\n", .{_concat_string("LCA of node 4 and 12 is: ", _str(lowest_common_ancestor(4, 12, level[0..], parent[0..])))});
    std.debug.print("{s}\n", .{_concat_string("LCA of node 8 and 8 is: ", _str(lowest_common_ancestor(8, 8, level[0..], parent[0..])))});
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        mochi_main();
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * std.mem.page_size;
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
