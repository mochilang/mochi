// Generated by Mochi Zig transpiler on 2025-08-07 09:53 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const Node = struct {
    data: i64,
    left: i64,
    right: i64,
};

var small_var: []Node = &[_]Node{};
var medium_var: []Node = &[_]Node{};

fn inorder(nodes: []Node, index: i64, acc: []i64) []i64 {
    if (index == 0 - 1) {
        return acc;
    }
    const node: Node = nodes[@as(usize, @intCast(index))];
    var res: []i64 = inorder(nodes, node.left, acc);
    res = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, res)) catch |err| handleError(err); _tmp.append(node.data) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
    res = inorder(nodes, node.right, res);
    return res;
}

fn size(nodes: []Node, index: i64) i64 {
    if (index == 0 - 1) {
        return 0;
    }
    const node: Node = nodes[@as(usize, @intCast(index))];
    return 1 + size(nodes, node.left) + size(nodes, node.right);
}

fn depth(nodes: []Node, index: i64) i64 {
    if (index == 0 - 1) {
        return 0;
    }
    const node: Node = nodes[@as(usize, @intCast(index))];
    const left_depth: i64 = depth(nodes, node.left);
    const right_depth: i64 = depth(nodes, node.right);
    if (left_depth > right_depth) {
        return left_depth + 1;
    }
    return right_depth + 1;
}

fn is_full(nodes: []Node, index: i64) bool {
    if (index == 0 - 1) {
        return true;
    }
    const node: Node = nodes[@as(usize, @intCast(index))];
    if (node.left == 0 - 1 and node.right == 0 - 1) {
        return true;
    }
    if (node.left != 0 - 1 and node.right != 0 - 1) {
        return is_full(nodes, node.left) and is_full(nodes, node.right);
    }
    return false;
}

fn small_tree() []Node {
    var arr: []Node = &[_]Node{};
    arr = blk: { var _tmp = std.ArrayList(Node).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const Node, arr)) catch |err| handleError(err); _tmp.append(.{ .data = 2, .left = 1, .right = 2 }) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
    arr = blk: { var _tmp = std.ArrayList(Node).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const Node, arr)) catch |err| handleError(err); _tmp.append(.{ .data = 1, .left = 0 - 1, .right = 0 - 1 }) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
    arr = blk: { var _tmp = std.ArrayList(Node).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const Node, arr)) catch |err| handleError(err); _tmp.append(.{ .data = 3, .left = 0 - 1, .right = 0 - 1 }) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
    return arr;
}

fn medium_tree() []Node {
    var arr: []Node = &[_]Node{};
    arr = blk: { var _tmp = std.ArrayList(Node).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const Node, arr)) catch |err| handleError(err); _tmp.append(.{ .data = 4, .left = 1, .right = 4 }) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
    arr = blk: { var _tmp = std.ArrayList(Node).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const Node, arr)) catch |err| handleError(err); _tmp.append(.{ .data = 2, .left = 2, .right = 3 }) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
    arr = blk: { var _tmp = std.ArrayList(Node).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const Node, arr)) catch |err| handleError(err); _tmp.append(.{ .data = 1, .left = 0 - 1, .right = 0 - 1 }) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
    arr = blk: { var _tmp = std.ArrayList(Node).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const Node, arr)) catch |err| handleError(err); _tmp.append(.{ .data = 3, .left = 0 - 1, .right = 0 - 1 }) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
    arr = blk: { var _tmp = std.ArrayList(Node).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const Node, arr)) catch |err| handleError(err); _tmp.append(.{ .data = 5, .left = 0 - 1, .right = 5 }) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
    arr = blk: { var _tmp = std.ArrayList(Node).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const Node, arr)) catch |err| handleError(err); _tmp.append(.{ .data = 6, .left = 0 - 1, .right = 6 }) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
    arr = blk: { var _tmp = std.ArrayList(Node).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const Node, arr)) catch |err| handleError(err); _tmp.append(.{ .data = 7, .left = 0 - 1, .right = 0 - 1 }) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
    return arr;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        small_var = small_tree();
        medium_var = medium_tree();
        std.debug.print("{s}\n", .{_str(size(small_var, 0))});
        std.debug.print("{s}\n", .{_str(inorder(small_var, 0, &[_]i64{}))});
        std.debug.print("{s}\n", .{_str(depth(small_var, 0))});
        std.debug.print("{s}\n", .{_str(is_full(small_var, 0))});
        std.debug.print("{s}\n", .{_str(size(medium_var, 0))});
        std.debug.print("{s}\n", .{_str(inorder(medium_var, 0, &[_]i64{}))});
        std.debug.print("{s}\n", .{_str(depth(medium_var, 0))});
        std.debug.print("{s}\n", .{_str(is_full(medium_var, 0))});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * std.mem.page_size;
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
