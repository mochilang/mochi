Binary tree: hash_map.HashMap(i64,[]i64,hash_map.AutoContext(i64),80){ .unmanaged = hash_map.HashMapUnmanaged(i64,[]i64,hash_map.AutoContext(i64),80){ .metadata = hash_map.HashMapUnmanaged(i64,[]i64,hash_map.AutoContext(i64),80).Metadata@7f61f5a8d018, .size = 4, .available = 2, .pointer_stability = debug.SafetyLock{ .state = debug.SafetyLock.State__enum_4611.unlocked } }, .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ .alloc = fn (*anyopaque, usize, u8, usize) ?[*]u8@106cd60, .resize = fn (*anyopaque, []u8, u8, usize, usize) bool@106cfc0, .free = fn (*anyopaque, []u8, u8, usize) void@106d270 } }, .ctx = hash_map.AutoContext(i64){ } }
Binary tree mirror: hash_map.HashMap(i64,[]i64,hash_map.AutoContext(i64),80){ .unmanaged = hash_map.HashMapUnmanaged(i64,[]i64,hash_map.AutoContext(i64),80){ .metadata = hash_map.HashMapUnmanaged(i64,[]i64,hash_map.AutoContext(i64),80).Metadata@7f61f5a87018, .size = 4, .available = 2, .pointer_stability = debug.SafetyLock{ .state = debug.SafetyLock.State__enum_4611.unlocked } }, .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ .alloc = fn (*anyopaque, usize, u8, usize) ?[*]u8@106cd60, .resize = fn (*anyopaque, []u8, u8, usize, usize) bool@106cfc0, .free = fn (*anyopaque, []u8, u8, usize) void@106d270 } }, .ctx = hash_map.AutoContext(i64){ } }