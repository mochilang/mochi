// Generated by Mochi Zig transpiler on 2025-08-08 19:10 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const FenwickTree = struct {
    size: i64,
    tree: []i64,
};

var f_base_var: FenwickTree = undefined;
var f_var: FenwickTree = undefined;
var f2_var: FenwickTree = undefined;
var f3_var: FenwickTree = undefined;

fn fenwick_from_list(arr: []const i64) FenwickTree {
    const size: i64 = @as(i64, @intCast(arr.len));
    var tree: []i64 = @constCast((&([0]i64{}))[0..]);
    tree = tree;
    var i: i64 = 0;
    i = i;
    while (i < size) {
        tree = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, tree)) catch |err| handleError(err); _tmp.append(arr[@as(usize, @intCast(i))]) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    i = 1;
    while (i < size) {
        const j: i64 = fenwick_next(i);
        if (j < size) {
            tree[@as(usize, @intCast(j))] = tree[@as(usize, @intCast(j))] + tree[@as(usize, @intCast(i))];
        }
        i = i + 1;
    }
    return .{ .size = size, .tree = tree };
}

fn fenwick_empty(size: i64) FenwickTree {
    var tree: []i64 = @constCast((&([0]i64{}))[0..]);
    tree = tree;
    var i: i64 = 0;
    i = i;
    while (i < size) {
        tree = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, tree)) catch |err| handleError(err); _tmp.append(0) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    return .{ .size = size, .tree = tree };
}

fn fenwick_get_array(f_param: FenwickTree) []i64 {
    var arr: []i64 = @constCast((&([0]i64{}))[0..]);
    arr = arr;
    var i: i64 = 0;
    i = i;
    while (i < f_param.size) {
        arr = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, arr)) catch |err| handleError(err); _tmp.append(f_param.tree[@as(usize, @intCast(i))]) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    i = f_param.size - 1;
    while (i > 0) {
        const j: i64 = fenwick_next(i);
        if (j < f_param.size) {
            arr[@as(usize, @intCast(j))] = arr[@as(usize, @intCast(j))] - arr[@as(usize, @intCast(i))];
        }
        i = i - 1;
    }
    return arr;
}

fn bit_and(a: i64, b: i64) i64 {
    var ua: i64 = a;
    ua = ua;
    var ub: i64 = b;
    ub = ub;
    var res: i64 = 0;
    res = res;
    var bit: i64 = 1;
    bit = bit;
    while (ua != 0 or ub != 0) {
        if (@mod(ua, 2) == 1 and @mod(ub, 2) == 1) {
            res = res + bit;
        }
        ua = @as(i64, @divTrunc(ua, 2));
        ub = @as(i64, @divTrunc(ub, 2));
        bit = bit * 2;
    }
    return res;
}

fn low_bit(x: i64) i64 {
    if (x == 0) {
        return 0;
    }
    return x - bit_and(x, x - 1);
}

fn fenwick_next(index: i64) i64 {
    return index + low_bit(index);
}

fn fenwick_prev(index: i64) i64 {
    return index - low_bit(index);
}

fn fenwick_add(f_param: FenwickTree, index: i64, value: i64) FenwickTree {
    var tree: []i64 = f_param.tree;
    tree = tree;
    if (index == 0) {
        tree[@as(usize, @intCast(0))] = tree[@as(usize, @intCast(0))] + value;
        return .{ .size = f_param.size, .tree = tree };
    }
    var i: i64 = index;
    i = i;
    while (i < f_param.size) {
        tree[@as(usize, @intCast(i))] = tree[@as(usize, @intCast(i))] + value;
        i = fenwick_next(i);
    }
    return .{ .size = f_param.size, .tree = tree };
}

fn fenwick_update(f_param: FenwickTree, index: i64, value: i64) FenwickTree {
    const current: i64 = fenwick_get(f_param, index);
    return fenwick_add(f_param, index, value - current);
}

fn fenwick_prefix(f_param: FenwickTree, right: i64) i64 {
    if (right == 0) {
        return 0;
    }
    var result: i64 = f_param.tree[@as(usize, @intCast(0))];
    result = result;
    var r: i64 = right - 1;
    r = r;
    while (r > 0) {
        result = result + f_param.tree[@as(usize, @intCast(r))];
        r = fenwick_prev(r);
    }
    return result;
}

fn fenwick_query(f_param: FenwickTree, left: i64, right: i64) i64 {
    return fenwick_prefix(f_param, right) - fenwick_prefix(f_param, left);
}

fn fenwick_get(f_param: FenwickTree, index: i64) i64 {
    return fenwick_query(f_param, index, index + 1);
}

fn fenwick_rank_query(f_param: FenwickTree, value: i64) i64 {
    var v: i64 = value - f_param.tree[@as(usize, @intCast(0))];
    v = v;
    if (v < 0) {
        return 0 - 1;
    }
    var j: i64 = 1;
    j = j;
    while (j * 2 < f_param.size) {
        j = j * 2;
    }
    var i: i64 = 0;
    i = i;
    var jj: i64 = j;
    jj = jj;
    while (jj > 0) {
        if (i + jj < f_param.size and f_param.tree[@as(usize, @intCast(i + jj))] <= v) {
            v = v - f_param.tree[@as(usize, @intCast(i + jj))];
            i = i + jj;
        }
        jj = @divTrunc(jj, 2);
    }
    return i;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        f_base_var = fenwick_from_list(([5]i64{1, 2, 3, 4, 5})[0..]);
        f_var = fenwick_from_list(([5]i64{1, 2, 3, 4, 5})[0..]);
        f2_var = fenwick_from_list(([5]i64{1, 2, 3, 4, 5})[0..]);
        f3_var = fenwick_from_list(([6]i64{1, 2, 0, 3, 0, 5})[0..]);
        std.debug.print("{s}\n", .{_str(fenwick_get_array(f_base_var))});
        f_var = fenwick_add(f_var, 0, 1);
        f_var = fenwick_add(f_var, 1, 2);
        f_var = fenwick_add(f_var, 2, 3);
        f_var = fenwick_add(f_var, 3, 4);
        f_var = fenwick_add(f_var, 4, 5);
        std.debug.print("{s}\n", .{_str(fenwick_get_array(f_var))});
        std.debug.print("{s}\n", .{_str(fenwick_prefix(f2_var, 3))});
        std.debug.print("{s}\n", .{_str(fenwick_query(f2_var, 1, 4))});
        std.debug.print("{s}\n", .{_str(fenwick_rank_query(f3_var, 0))});
        std.debug.print("{s}\n", .{_str(fenwick_rank_query(f3_var, 2))});
        std.debug.print("{s}\n", .{_str(fenwick_rank_query(f3_var, 1))});
        std.debug.print("{s}\n", .{_str(fenwick_rank_query(f3_var, 3))});
        std.debug.print("{s}\n", .{_str(fenwick_rank_query(f3_var, 5))});
        std.debug.print("{s}\n", .{_str(fenwick_rank_query(f3_var, 6))});
        std.debug.print("{s}\n", .{_str(fenwick_rank_query(f3_var, 11))});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * std.mem.page_size;
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
