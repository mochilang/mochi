// Generated by Mochi Zig transpiler on 2025-08-24 16:59 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const TreeNode = struct {
    data: i64,
    left: i64,
    right: i64,
};

var total_moves_var_1: i64 = 0;

fn count_nodes(nodes: []TreeNode, idx: i64) i64 {
    if (idx == 0) {
        return 0;
    }
    const node: TreeNode = nodes[_idx(nodes.len, idx)];
    return count_nodes(nodes, node.left) +% count_nodes(nodes, node.right) +% 1;
}

fn count_coins(nodes_1: []TreeNode, idx_1: i64) i64 {
    if (idx_1 == 0) {
        return 0;
    }
    const node_1: TreeNode = nodes_1[_idx(nodes_1.len, idx_1)];
    return count_coins(nodes_1, node_1.left) +% count_coins(nodes_1, node_1.right) +% node_1.data;
}

fn iabs(x: i64) i64 {
    if (x < 0) {
        return 0 -% x;
    }
    return x;
}

fn dfs(nodes_2: []TreeNode, idx_2: i64) i64 {
    if (idx_2 == 0) {
        return 0;
    }
    const node_2: TreeNode = nodes_2[_idx(nodes_2.len, idx_2)];
    const left_excess: i64 = dfs(nodes_2, node_2.left);
    const right_excess: i64 = dfs(nodes_2, node_2.right);
    const abs_left: i64 = iabs(left_excess);
    const abs_right: i64 = iabs(right_excess);
    total_moves_var_1 = total_moves_var_1 +% abs_left +% abs_right;
    return node_2.data +% left_excess +% right_excess -% 1;
}

fn distribute_coins(nodes_3: []TreeNode, root: i64) i64 {
    if (root == 0) {
        return 0;
    }
    if (count_nodes(nodes_3, root) != count_coins(nodes_3, root)) {
        @panic("The nodes number should be same as the number of coins");
    }
    total_moves_var_1 = 0;
    _ = dfs(nodes_3, root);
    return total_moves_var_1;
}

fn mochi_main() void {
    const example1: []TreeNode = blk0: { var _tmp = std.ArrayList(TreeNode).init(std.heap.page_allocator); _tmp.append(.{ .data = 0, .left = 0, .right = 0 }) catch unreachable; _tmp.append(.{ .data = 3, .left = 2, .right = 3 }) catch unreachable; _tmp.append(.{ .data = 0, .left = 0, .right = 0 }) catch unreachable; _tmp.append(.{ .data = 0, .left = 0, .right = 0 }) catch unreachable; break :blk0 (_tmp.toOwnedSlice() catch unreachable); };
    const example2: []TreeNode = blk1: { var _tmp_1 = std.ArrayList(TreeNode).init(std.heap.page_allocator); _tmp_1.append(.{ .data = 0, .left = 0, .right = 0 }) catch unreachable; _tmp_1.append(.{ .data = 0, .left = 2, .right = 3 }) catch unreachable; _tmp_1.append(.{ .data = 3, .left = 0, .right = 0 }) catch unreachable; _tmp_1.append(.{ .data = 0, .left = 0, .right = 0 }) catch unreachable; break :blk1 (_tmp_1.toOwnedSlice() catch unreachable); };
    const example3: []TreeNode = blk2: { var _tmp_2 = std.ArrayList(TreeNode).init(std.heap.page_allocator); _tmp_2.append(.{ .data = 0, .left = 0, .right = 0 }) catch unreachable; _tmp_2.append(.{ .data = 0, .left = 2, .right = 3 }) catch unreachable; _tmp_2.append(.{ .data = 0, .left = 0, .right = 0 }) catch unreachable; _tmp_2.append(.{ .data = 3, .left = 0, .right = 0 }) catch unreachable; break :blk2 (_tmp_2.toOwnedSlice() catch unreachable); };
    std.debug.print("{s}\n", .{_str(distribute_coins(example1, 1))});
    std.debug.print("{s}\n", .{_str(distribute_coins(example2, 1))});
    std.debug.print("{s}\n", .{_str(distribute_coins(example3, 1))});
    std.debug.print("{s}\n", .{_str(distribute_coins(blk3: { var _tmp_3 = [1]TreeNode{.{ .data = 0, .left = 0, .right = 0 }}; break :blk3 _tmp_3[0..]; }, 0))});
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        mochi_main();
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
