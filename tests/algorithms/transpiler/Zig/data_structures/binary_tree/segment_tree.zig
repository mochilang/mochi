// Generated by Mochi Zig transpiler on 2025-08-25 16:29 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

var A_var_1: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
var N_var_1: i64 = 0;
var st_var_1: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
var NEG_INF_var: i64 = 0;

fn left_child(idx: i64) i64 {
    return idx *% 2;
}

fn right_child(idx_1: i64) i64 {
    return idx_1 *% 2 +% 1;
}

fn build(idx_2: i64, left: i64, right: i64) void {
    if (left == right) {
        st_var_1[_idx(st_var_1.len, idx_2)] = A_var_1[_idx(A_var_1.len, left)];
    } else {
        const mid: i64 = @divTrunc(left +% right, 2);
        build(left_child(idx_2), left, mid);
        build(right_child(idx_2), mid +% 1, right);
        const left_val: i64 = st_var_1[_idx(st_var_1.len, left_child(idx_2))];
        const right_val: i64 = st_var_1[_idx(st_var_1.len, right_child(idx_2))];
        st_var_1[_idx(st_var_1.len, idx_2)] = if (left_val > right_val) left_val else right_val;
    }
}

fn update_recursive(idx_3: i64, left_1: i64, right_1: i64, a: i64, b: i64, val: i64) bool {
    if (right_1 < a or left_1 > b) {
        return true;
    }
    if (left_1 == right_1) {
        st_var_1[_idx(st_var_1.len, idx_3)] = val;
        return true;
    }
    const mid_1: i64 = @divTrunc(left_1 +% right_1, 2);
    _ = update_recursive(left_child(idx_3), left_1, mid_1, a, b, val);
    _ = update_recursive(right_child(idx_3), mid_1 +% 1, right_1, a, b, val);
    const left_val_1: i64 = st_var_1[_idx(st_var_1.len, left_child(idx_3))];
    const right_val_1: i64 = st_var_1[_idx(st_var_1.len, right_child(idx_3))];
    st_var_1[_idx(st_var_1.len, idx_3)] = if (left_val_1 > right_val_1) left_val_1 else right_val_1;
    return true;
}

fn update(a_1: i64, b_1: i64, val_1: i64) bool {
    return update_recursive(1, 0, N_var_1 -% 1, a_1 -% 1, b_1 -% 1, val_1);
}

fn query_recursive(idx_4: i64, left_2: i64, right_2: i64, a_2: i64, b_2: i64) i64 {
    if (right_2 < a_2 or left_2 > b_2) {
        return NEG_INF_var;
    }
    if (left_2 >= a_2 and right_2 <= b_2) {
        return st_var_1[_idx(st_var_1.len, idx_4)];
    }
    const mid_2: i64 = @divTrunc(left_2 +% right_2, 2);
    const q1: i64 = query_recursive(left_child(idx_4), left_2, mid_2, a_2, b_2);
    const q2: i64 = query_recursive(right_child(idx_4), mid_2 +% 1, right_2, a_2, b_2);
    return if (q1 > q2) q1 else q2;
}

fn query(a_3: i64, b_3: i64) i64 {
    return query_recursive(1, 0, N_var_1 -% 1, a_3 -% 1, b_3 -% 1);
}

fn show_data() void {
    var i: i64 = 0;
    i = i;
    var show_list: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    show_list = show_list;
    while (i < N_var_1) {
        show_list = blk0: { var _tmp = std.ArrayList(i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp.appendSlice(@as([]const i64, show_list)) catch |err| handleError(err); _tmp.append(query(i +% 1, i +% 1)) catch |err| handleError(err); break :blk0 (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i +% 1;
    }
    std.debug.print("{s}\n", .{_str(show_list)});
}

fn mochi_main() void {
    A_var_1 = std.heap.page_allocator.dupe(i64, blk1: { var _tmp_1 = std.ArrayList(i64).init(std.heap.page_allocator); _tmp_1.append(1) catch unreachable; _tmp_1.append(2) catch unreachable; _tmp_1.append(0 -% 4) catch unreachable; _tmp_1.append(7) catch unreachable; _tmp_1.append(3) catch unreachable; _tmp_1.append(0 -% 5) catch unreachable; _tmp_1.append(6) catch unreachable; _tmp_1.append(11) catch unreachable; _tmp_1.append(0 -% 20) catch unreachable; _tmp_1.append(9) catch unreachable; _tmp_1.append(14) catch unreachable; _tmp_1.append(15) catch unreachable; _tmp_1.append(5) catch unreachable; _tmp_1.append(2) catch unreachable; _tmp_1.append(0 -% 8) catch unreachable; break :blk1 (_tmp_1.toOwnedSlice() catch unreachable); }) catch unreachable;
    N_var_1 = @as(i64, @intCast(A_var_1.len));
    var i_1: i64 = 0;
    i_1 = i_1;
    while (i_1 < 4 *% N_var_1) {
        st_var_1 = blk2: { var _tmp_2 = std.ArrayList(i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_2.appendSlice(@as([]const i64, st_var_1)) catch |err| handleError(err); _tmp_2.append(0) catch |err| handleError(err); break :blk2 (_tmp_2.toOwnedSlice() catch |err| handleError(err)); };
        i_1 = i_1 +% 1;
    }
    if (N_var_1 > 0) {
        build(1, 0, N_var_1 -% 1);
    }
    std.debug.print("{s}\n", .{_str(query(4, 6))});
    std.debug.print("{s}\n", .{_str(query(7, 11))});
    std.debug.print("{s}\n", .{_str(query(7, 12))});
    _ = update(1, 3, 111);
    std.debug.print("{s}\n", .{_str(query(1, 15))});
    _ = update(7, 8, 235);
    show_data();
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        NEG_INF_var = 0 -% 1000000000;
        mochi_main();
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
