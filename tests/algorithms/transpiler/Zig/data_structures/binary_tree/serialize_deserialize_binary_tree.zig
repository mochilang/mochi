// Generated by Mochi Zig transpiler on 2025-08-25 16:29 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const Node = struct {
    left: ?*Node,
    value: i64,
    right: ?*Node,
};

const BuildResult = struct {
    node: ?*Node,
    next: i64,
};

const Empty = struct {
};

fn digit(ch: []const u8) i64 {
    const digits: []const u8 = "0123456789";
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(digits.len))) {
        if (std.mem.eql(u8, digits[@as(usize, @intCast(i))..@min(@as(usize, @intCast(i +% 1)), @as(usize, @intCast(digits.len)))], ch)) {
            return i;
        }
        i = i +% 1;
    }
    return 0;
}

fn to_int(s: []const u8) i64 {
    var i_1: i64 = 0;
    i_1 = i_1;
    var sign: i64 = 1;
    sign = sign;
    if (@as(i64, @intCast(s.len)) > 0 and std.mem.eql(u8, s[@as(usize, @intCast(0))..@min(@as(usize, @intCast(1)), @as(usize, @intCast(s.len)))], "-")) {
        sign = 0 -% 1;
        i_1 = 1;
    }
    var num: i64 = 0;
    num = num;
    while (i_1 < @as(i64, @intCast(s.len))) {
        const ch_1: []const u8 = s[@as(usize, @intCast(i_1))..@min(@as(usize, @intCast(i_1 +% 1)), @as(usize, @intCast(s.len)))];
        num = num *% 10 +% digit(ch_1);
        i_1 = i_1 +% 1;
    }
    return sign *% num;
}

fn split(s_1: []const u8, sep: []const u8) [][]const u8 {
    var res: [][]const u8 = std.heap.page_allocator.alloc([]const u8, 0) catch unreachable;
    res = res;
    var current: []const u8 = "";
    current = current;
    var i_2: i64 = 0;
    i_2 = i_2;
    while (i_2 < @as(i64, @intCast(s_1.len))) {
        const ch_2: []const u8 = s_1[@as(usize, @intCast(i_2))..@min(@as(usize, @intCast(i_2 +% 1)), @as(usize, @intCast(s_1.len)))];
        if (std.mem.eql(u8, ch_2, sep)) {
            res = blk0: { var _tmp = std.ArrayList([]const u8).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp.appendSlice(@as([]const []const u8, res)) catch |err| handleError(err); _tmp.append(@constCast(current)) catch |err| handleError(err); break :blk0 (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            current = "";
        } else {
            current = _concat_string(current, ch_2);
        }
        i_2 = i_2 +% 1;
    }
    res = blk1: { var _tmp_1 = std.ArrayList([]const u8).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_1.appendSlice(@as([]const []const u8, res)) catch |err| handleError(err); _tmp_1.append(@constCast(current)) catch |err| handleError(err); break :blk1 (_tmp_1.toOwnedSlice() catch |err| handleError(err)); };
    return res;
}

fn serialize(node: ?*Node) []const u8 {
    return if (node == null) "null" else _concat_string(_concat_string(_concat_string(_concat_string(_str(node.?.value), ","), serialize(node.?.left)), ","), serialize(node.?.right));
}

fn build(nodes: [][]const u8, idx: i64) BuildResult {
    const value: []const u8 = nodes[_idx(nodes.len, idx)];
    if (std.mem.eql(u8, value, "null")) {
        return .{ .node = .{  }, .next = idx +% 1 };
    }
    const left_res: BuildResult = build(nodes, idx +% 1);
    const right_res: BuildResult = build(nodes, left_res.next);
    const node_1: Node = .{ .left = left_res.node, .value = to_int(value), .right = right_res.node };
    return .{ .node = node_1, .next = right_res.next };
}

fn deserialize(data: []const u8) ?*Node {
    const nodes_1: [][]const u8 = split(data, ",");
    const res_1: BuildResult = build(nodes_1, 0);
    return res_1.node;
}

fn five_tree() ?*Node {
    const left_child: Node = .{ .value = 2, .left = .{  }, .right = .{  } };
    const right_left: Node = .{ .value = 4, .left = .{  }, .right = .{  } };
    const right_right: Node = .{ .value = 5, .left = .{  }, .right = .{  } };
    const right_child: Node = .{ .value = 3, .left = right_left, .right = right_right };
    return .{ .value = 1, .left = left_child, .right = right_child };
}

fn mochi_main() void {
    const root: ?*Node = five_tree();
    const serial: []const u8 = serialize(root);
    std.debug.print("{s}\n", .{serial});
    const rebuilt: ?*Node = deserialize(serial);
    const serial2: []const u8 = serialize(rebuilt);
    std.debug.print("{s}\n", .{serial2});
    std.debug.print("{s}\n", .{_str(std.mem.eql(u8, serial, serial2))});
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        mochi_main();
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
