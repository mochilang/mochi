// Generated by Mochi Zig transpiler on 2025-08-25 16:29 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const Node = struct {
    minn: i64,
    maxx: i64,
    map_left: []i64,
    left: i64,
    right: i64,
};

var nodes_var_1: []Node = std.heap.page_allocator.alloc(Node, 0) catch unreachable;
const test_array_var: []i64 = blk0: { var _tmp = [20]i64{2, 1, 4, 5, 6, 0, 8, 9, 1, 2, 0, 6, 4, 2, 0, 6, 5, 3, 2, 7}; break :blk0 _tmp[0..]; };
var root_var: i64 = 0;

fn make_list(length: i64, value: i64) []i64 {
    var lst: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    lst = lst;
    var i: i64 = 0;
    i = i;
    while (i < length) {
        lst = blk1: { var _tmp_1 = std.ArrayList(i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_1.appendSlice(@as([]const i64, lst)) catch |err| handleError(err); _tmp_1.append(value) catch |err| handleError(err); break :blk1 (_tmp_1.toOwnedSlice() catch |err| handleError(err)); };
        i = i +% 1;
    }
    return lst;
}

fn min_list(arr: []i64) i64 {
    var m: i64 = arr[_idx(arr.len, 0)];
    m = m;
    var i_1: i64 = 1;
    i_1 = i_1;
    while (i_1 < @as(i64, @intCast(arr.len))) {
        if (arr[_idx(arr.len, i_1)] < m) {
            m = arr[_idx(arr.len, i_1)];
        }
        i_1 = i_1 +% 1;
    }
    return m;
}

fn max_list(arr_1: []i64) i64 {
    var m_1: i64 = arr_1[_idx(arr_1.len, 0)];
    m_1 = m_1;
    var i_2: i64 = 1;
    i_2 = i_2;
    while (i_2 < @as(i64, @intCast(arr_1.len))) {
        if (arr_1[_idx(arr_1.len, i_2)] > m_1) {
            m_1 = arr_1[_idx(arr_1.len, i_2)];
        }
        i_2 = i_2 +% 1;
    }
    return m_1;
}

fn build_tree(arr_2: []i64) i64 {
    var n: Node = .{ .minn = min_list(arr_2), .maxx = max_list(arr_2), .map_left = make_list(@as(i64, @intCast(arr_2.len)), 0), .left = 0 -% 1, .right = 0 -% 1 };
    n = n;
    if (n.minn == n.maxx) {
        nodes_var_1 = blk2: { var _tmp_2 = std.ArrayList(Node).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_2.appendSlice(@as([]const Node, nodes_var_1)) catch |err| handleError(err); _tmp_2.append(n) catch |err| handleError(err); break :blk2 (_tmp_2.toOwnedSlice() catch |err| handleError(err)); };
        return @as(i64, @intCast(nodes_var_1.len)) -% 1;
    }
    const pivot: i64 = @divTrunc(n.minn +% n.maxx, 2);
    var left_arr: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    left_arr = left_arr;
    var right_arr: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    right_arr = right_arr;
    var i_3: i64 = 0;
    i_3 = i_3;
    while (i_3 < @as(i64, @intCast(arr_2.len))) {
        const num: i64 = arr_2[_idx(arr_2.len, i_3)];
        if (num <= pivot) {
            left_arr = blk3: { var _tmp_3 = std.ArrayList(i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_3.appendSlice(@as([]const i64, left_arr)) catch |err| handleError(err); _tmp_3.append(num) catch |err| handleError(err); break :blk3 (_tmp_3.toOwnedSlice() catch |err| handleError(err)); };
        } else {
            right_arr = blk4: { var _tmp_4 = std.ArrayList(i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_4.appendSlice(@as([]const i64, right_arr)) catch |err| handleError(err); _tmp_4.append(num) catch |err| handleError(err); break :blk4 (_tmp_4.toOwnedSlice() catch |err| handleError(err)); };
        }
        n.map_left[_idx(n.map_left.len, i_3)] = @as(i64, @intCast(left_arr.len));
        n.map_left = n.map_left;
        i_3 = i_3 +% 1;
    }
    if (@as(i64, @intCast(left_arr.len)) > 0) {
        n.left = build_tree(left_arr);
    }
    if (@as(i64, @intCast(right_arr.len)) > 0) {
        n.right = build_tree(right_arr);
    }
    nodes_var_1 = blk5: { var _tmp_5 = std.ArrayList(Node).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_5.appendSlice(@as([]const Node, nodes_var_1)) catch |err| handleError(err); _tmp_5.append(n) catch |err| handleError(err); break :blk5 (_tmp_5.toOwnedSlice() catch |err| handleError(err)); };
    return @as(i64, @intCast(nodes_var_1.len)) -% 1;
}

fn rank_till_index(node_idx: i64, num_1: i64, index: i64) i64 {
    if (index < 0 or node_idx < 0) {
        return 0;
    }
    const node: Node = nodes_var_1[_idx(nodes_var_1.len, node_idx)];
    if (node.minn == node.maxx) {
        if (node.minn == num_1) {
            return index +% 1;
        } else {
            return 0;
        }
    }
    const pivot_1: i64 = @divTrunc(node.minn +% node.maxx, 2);
    if (num_1 <= pivot_1) {
        return rank_till_index(node.left, num_1, node.map_left[_idx(node.map_left.len, index)] -% 1);
    } else {
        return rank_till_index(node.right, num_1, index -% node.map_left[_idx(node.map_left.len, index)]);
    }
    return 0;
}

fn rank(node_idx_1: i64, num_2: i64, start: i64, end: i64) i64 {
    if (start > end) {
        return 0;
    }
    const rank_till_end: i64 = rank_till_index(node_idx_1, num_2, end);
    const rank_before_start: i64 = rank_till_index(node_idx_1, num_2, start -% 1);
    return rank_till_end -% rank_before_start;
}

fn quantile(node_idx_2: i64, index_1: i64, start_1: i64, end_1: i64) i64 {
    if (index_1 > end_1 -% start_1 or start_1 > end_1 or node_idx_2 < 0) {
        return 0 -% 1;
    }
    const node_1: Node = nodes_var_1[_idx(nodes_var_1.len, node_idx_2)];
    if (node_1.minn == node_1.maxx) {
        return node_1.minn;
    }
    const left_start: i64 = if (start_1 == 0) 0 else node_1.map_left[_idx(node_1.map_left.len, start_1 -% 1)];
    const num_left: i64 = node_1.map_left[_idx(node_1.map_left.len, end_1)] -% left_start;
    if (num_left > index_1) {
        return quantile(node_1.left, index_1, left_start, node_1.map_left[_idx(node_1.map_left.len, end_1)] -% 1);
    } else {
        return quantile(node_1.right, index_1 -% num_left, start_1 -% left_start, end_1 -% node_1.map_left[_idx(node_1.map_left.len, end_1)]);
    }
    return 0;
}

fn range_counting(node_idx_3: i64, start_2: i64, end_2: i64, start_num: i64, end_num: i64) i64 {
    if (start_2 > end_2 or node_idx_3 < 0 or start_num > end_num) {
        return 0;
    }
    const node_2: Node = nodes_var_1[_idx(nodes_var_1.len, node_idx_3)];
    if (node_2.minn > end_num or node_2.maxx < start_num) {
        return 0;
    }
    if (start_num <= node_2.minn and node_2.maxx <= end_num) {
        return end_2 -% start_2 +% 1;
    }
    const left: i64 = range_counting(node_2.left, if (start_2 == 0) 0 else node_2.map_left[_idx(node_2.map_left.len, start_2 -% 1)], node_2.map_left[_idx(node_2.map_left.len, end_2)] -% 1, start_num, end_num);
    const right: i64 = range_counting(node_2.right, start_2 -% if (start_2 == 0) 0 else node_2.map_left[_idx(node_2.map_left.len, start_2 -% 1)], end_2 -% node_2.map_left[_idx(node_2.map_left.len, end_2)], start_num, end_num);
    return left +% right;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        root_var = build_tree(test_array_var);
        std.debug.print("{s}\n", .{_concat_string("rank_till_index 6 at 6 -> ", _str(rank_till_index(root_var, 6, 6)))});
        std.debug.print("{s}\n", .{_concat_string("rank 6 in [3,13] -> ", _str(rank(root_var, 6, 3, 13)))});
        std.debug.print("{s}\n", .{_concat_string("quantile index 2 in [2,5] -> ", _str(quantile(root_var, 2, 2, 5)))});
        std.debug.print("{s}\n", .{_concat_string("range_counting [3,7] in [1,10] -> ", _str(range_counting(root_var, 1, 10, 3, 7)))});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
