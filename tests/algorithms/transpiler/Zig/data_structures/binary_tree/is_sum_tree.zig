// Generated by Mochi Zig transpiler on 2025-08-09 23:14 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const Node = struct {
    value: i64,
    left: i64,
    right: i64,
};

fn tree_sum(nodes: []Node, idx: i64) i64 {
    if (idx == 0 - 1) {
        return 0;
    }
    const node: Node = nodes[@as(usize, @intCast(idx))];
    return node.value + tree_sum(nodes, node.left) + tree_sum(nodes, node.right);
}

fn is_sum_node(nodes: []Node, idx: i64) bool {
    const node: Node = nodes[@as(usize, @intCast(idx))];
    if (node.left == 0 - 1 and node.right == 0 - 1) {
        return true;
    }
    const left_sum: i64 = tree_sum(nodes, node.left);
    const right_sum: i64 = tree_sum(nodes, node.right);
    if (node.value != left_sum + right_sum) {
        return false;
    }
    var left_ok: bool = true;
    left_ok = left_ok;
    if (node.left != 0 - 1) {
        left_ok = is_sum_node(nodes, node.left);
    }
    var right_ok: bool = true;
    right_ok = right_ok;
    if (node.right != 0 - 1) {
        right_ok = is_sum_node(nodes, node.right);
    }
    return left_ok and right_ok;
}

fn build_a_tree() []Node {
    return blk: { var _tmp = std.ArrayList(Node).init(std.heap.page_allocator); _tmp.append(.{ .value = 11, .left = 1, .right = 2 }) catch |err| handleError(err); _tmp.append(.{ .value = 2, .left = 3, .right = 4 }) catch |err| handleError(err); _tmp.append(.{ .value = 29, .left = 5, .right = 6 }) catch |err| handleError(err); _tmp.append(.{ .value = 1, .left = 0 - 1, .right = 0 - 1 }) catch |err| handleError(err); _tmp.append(.{ .value = 7, .left = 0 - 1, .right = 0 - 1 }) catch |err| handleError(err); _tmp.append(.{ .value = 15, .left = 0 - 1, .right = 0 - 1 }) catch |err| handleError(err); _tmp.append(.{ .value = 40, .left = 7, .right = 0 - 1 }) catch |err| handleError(err); _tmp.append(.{ .value = 35, .left = 0 - 1, .right = 0 - 1 }) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
}

fn build_a_sum_tree() []Node {
    return blk: { var _tmp = std.ArrayList(Node).init(std.heap.page_allocator); _tmp.append(.{ .value = 26, .left = 1, .right = 2 }) catch |err| handleError(err); _tmp.append(.{ .value = 10, .left = 3, .right = 4 }) catch |err| handleError(err); _tmp.append(.{ .value = 3, .left = 0 - 1, .right = 5 }) catch |err| handleError(err); _tmp.append(.{ .value = 4, .left = 0 - 1, .right = 0 - 1 }) catch |err| handleError(err); _tmp.append(.{ .value = 6, .left = 0 - 1, .right = 0 - 1 }) catch |err| handleError(err); _tmp.append(.{ .value = 3, .left = 0 - 1, .right = 0 - 1 }) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * std.mem.page_size;
    }
    return 0;
}
