// Generated by Mochi Zig transpiler on 2025-08-08 19:10 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

var node_data_var: []i64 = &[_]i64{};
var left_child_var: []i64 = &[_]i64{};
var right_child_var: []i64 = &[_]i64{};
var root_var: i64 = 0;
var vals_var: []i64 = &[_]i64{};

fn new_node(value: i64) i64 {
    node_data_var = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, node_data_var)) catch |err| handleError(err); _tmp.append(value) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
    left_child_var = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, left_child_var)) catch |err| handleError(err); _tmp.append(0) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
    right_child_var = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, right_child_var)) catch |err| handleError(err); _tmp.append(0) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
    return @as(i64, @intCast(node_data_var.len)) - 1;
}

fn build_tree() i64 {
    const root_var_1: i64 = new_node(1);
    const n2: i64 = new_node(2);
    const n5: i64 = new_node(5);
    const n3: i64 = new_node(3);
    const n4: i64 = new_node(4);
    const n6: i64 = new_node(6);
    left_child_var[@as(usize, @intCast(root_var_1))] = n2;
    right_child_var[@as(usize, @intCast(root_var_1))] = n5;
    left_child_var[@as(usize, @intCast(n2))] = n3;
    right_child_var[@as(usize, @intCast(n2))] = n4;
    right_child_var[@as(usize, @intCast(n5))] = n6;
    return root_var_1;
}

fn flatten(root_param: i64) []i64 {
    if (root_param == 0) {
        return @constCast((&([0]i64{}))[0..]);
    }
    var res: []i64 = @constCast((&([1]i64{node_data_var[@as(usize, @intCast(root_param))]}))[0..]);
    res = res;
    const left_vals: []const i64 = flatten(left_child_var[@as(usize, @intCast(root_param))]);
    const right_vals: []const i64 = flatten(right_child_var[@as(usize, @intCast(root_param))]);
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(left_vals.len))) {
        res = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, res)) catch |err| handleError(err); _tmp.append(left_vals[@as(usize, @intCast(i))]) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    i = 0;
    while (i < @as(i64, @intCast(right_vals.len))) {
        res = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, res)) catch |err| handleError(err); _tmp.append(right_vals[@as(usize, @intCast(i))]) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    return res;
}

fn display(values: []const i64) void {
    var s: []const u8 = "";
    s = s;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(values.len))) {
        if (i == 0) {
            s = _str(values[@as(usize, @intCast(i))]);
        } else {
            s = _concat_string(_concat_string(s, " "), _str(values[@as(usize, @intCast(i))]));
        }
        i = i + 1;
    }
    std.debug.print("{s}\n", .{s});
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        node_data_var = @constCast((&([1]i64{0}))[0..]);
        left_child_var = @constCast((&([1]i64{0}))[0..]);
        right_child_var = @constCast((&([1]i64{0}))[0..]);
        root_var = build_tree();
        vals_var = flatten(root_var);
        std.debug.print("{s}\n", .{"Flattened Linked List:"});
        display(vals_var[0..]);
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * std.mem.page_size;
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
