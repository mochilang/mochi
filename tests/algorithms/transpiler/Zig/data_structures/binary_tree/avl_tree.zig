// Generated by Mochi Zig transpiler on 2025-08-07 09:53 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

var NIL_var: i64 = 0;
var nodes_var: []std.StringHashMap(i64) = &[_]std.StringHashMap(i64){};

fn new_node(value: i64) i64 {
    const node: std.StringHashMap(i64) = blk: { var m = std.StringHashMap(i64).init(std.heap.page_allocator); m.put("data", value) catch unreachable; m.put("left", NIL_var) catch unreachable; m.put("right", NIL_var) catch unreachable; m.put("height", 1) catch unreachable; break :blk m; };
    nodes_var = blk: { var _tmp = std.ArrayList(std.StringHashMap(i64)).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const std.StringHashMap(i64), nodes_var)) catch |err| handleError(err); _tmp.append(node) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
    return @as(i64, @intCast(nodes_var.len)) - 1;
}

fn get_height(i: i64) i64 {
    if (i == NIL_var) {
        return 0;
    }
    return nodes_var[@as(usize, @intCast(i))].get("height").?;
}

fn my_max(a: i64, b: i64) i64 {
    if (a > b) {
        return a;
    }
    return b;
}

fn update_height(i: i64) void {
    nodes_var[@as(usize, @intCast(i))].put("height", my_max(get_height(nodes_var[@as(usize, @intCast(i))].get("left").?), get_height(nodes_var[@as(usize, @intCast(i))].get("right").?)) + 1) catch unreachable;
}

fn right_rotation(i: i64) i64 {
    const left: i64 = nodes_var[@as(usize, @intCast(i))].get("left").?;
    nodes_var[@as(usize, @intCast(i))].put("left", nodes_var[@as(usize, @intCast(left))].get("right").?) catch unreachable;
    nodes_var[@as(usize, @intCast(left))].put("right", i) catch unreachable;
    update_height(i);
    update_height(left);
    return left;
}

fn left_rotation(i: i64) i64 {
    const right: i64 = nodes_var[@as(usize, @intCast(i))].get("right").?;
    nodes_var[@as(usize, @intCast(i))].put("right", nodes_var[@as(usize, @intCast(right))].get("left").?) catch unreachable;
    nodes_var[@as(usize, @intCast(right))].put("left", i) catch unreachable;
    update_height(i);
    update_height(right);
    return right;
}

fn lr_rotation(i: i64) i64 {
    nodes_var[@as(usize, @intCast(i))].put("left", left_rotation(nodes_var[@as(usize, @intCast(i))].get("left").?)) catch unreachable;
    return right_rotation(i);
}

fn rl_rotation(i: i64) i64 {
    nodes_var[@as(usize, @intCast(i))].put("right", right_rotation(nodes_var[@as(usize, @intCast(i))].get("right").?)) catch unreachable;
    return left_rotation(i);
}

fn insert_node(i_param: i64, value: i64) i64 {
    var i_var: i64 = i_param;
    if (i_var == NIL_var) {
        return new_node(value);
    }
    if (value < nodes_var[@as(usize, @intCast(i_var))].get("data").?) {
        nodes_var[@as(usize, @intCast(i_var))].put("left", insert_node(nodes_var[@as(usize, @intCast(i_var))].get("left").?, value)) catch unreachable;
        if (get_height(nodes_var[@as(usize, @intCast(i_var))].get("left").?) - get_height(nodes_var[@as(usize, @intCast(i_var))].get("right").?) == 2) {
            if (value < nodes_var[@as(usize, @intCast(nodes_var[@as(usize, @intCast(i_var))].get("left").?))].get("data").?) {
                i_var = right_rotation(i_var);
            } else {
                i_var = lr_rotation(i_var);
            }
        }
    } else {
        nodes_var[@as(usize, @intCast(i_var))].put("right", insert_node(nodes_var[@as(usize, @intCast(i_var))].get("right").?, value)) catch unreachable;
        if (get_height(nodes_var[@as(usize, @intCast(i_var))].get("right").?) - get_height(nodes_var[@as(usize, @intCast(i_var))].get("left").?) == 2) {
            if (value < nodes_var[@as(usize, @intCast(nodes_var[@as(usize, @intCast(i_var))].get("right").?))].get("data").?) {
                i_var = rl_rotation(i_var);
            } else {
                i_var = left_rotation(i_var);
            }
        }
    }
    update_height(i_var);
    return i_var;
}

fn get_left_most(i: i64) i64 {
    var cur: i64 = i;
    while (nodes_var[@as(usize, @intCast(cur))].get("left").? != NIL_var) {
        cur = nodes_var[@as(usize, @intCast(cur))].get("left").?;
    }
    return nodes_var[@as(usize, @intCast(cur))].get("data").?;
}

fn del_node(i_param_1: i64, value: i64) i64 {
    var i_var: i64 = i_param_1;
    if (i_var == NIL_var) {
        return NIL_var;
    }
    if (value < nodes_var[@as(usize, @intCast(i_var))].get("data").?) {
        nodes_var[@as(usize, @intCast(i_var))].put("left", del_node(nodes_var[@as(usize, @intCast(i_var))].get("left").?, value)) catch unreachable;
    } else {
        if (value > nodes_var[@as(usize, @intCast(i_var))].get("data").?) {
            nodes_var[@as(usize, @intCast(i_var))].put("right", del_node(nodes_var[@as(usize, @intCast(i_var))].get("right").?, value)) catch unreachable;
        } else {
            if (nodes_var[@as(usize, @intCast(i_var))].get("left").? != NIL_var and nodes_var[@as(usize, @intCast(i_var))].get("right").? != NIL_var) {
                const temp: i64 = get_left_most(nodes_var[@as(usize, @intCast(i_var))].get("right").?);
                nodes_var[@as(usize, @intCast(i_var))].put("data", temp) catch unreachable;
                nodes_var[@as(usize, @intCast(i_var))].put("right", del_node(nodes_var[@as(usize, @intCast(i_var))].get("right").?, temp)) catch unreachable;
            } else {
                if (nodes_var[@as(usize, @intCast(i_var))].get("left").? != NIL_var) {
                    i_var = nodes_var[@as(usize, @intCast(i_var))].get("left").?;
                } else {
                    i_var = nodes_var[@as(usize, @intCast(i_var))].get("right").?;
                }
            }
        }
    }
    if (i_var == NIL_var) {
        return NIL_var;
    }
    const lh: i64 = get_height(nodes_var[@as(usize, @intCast(i_var))].get("left").?);
    const rh: i64 = get_height(nodes_var[@as(usize, @intCast(i_var))].get("right").?);
    if (rh - lh == 2) {
        if (get_height(nodes_var[@as(usize, @intCast(nodes_var[@as(usize, @intCast(i_var))].get("right").?))].get("right").?) > get_height(nodes_var[@as(usize, @intCast(nodes_var[@as(usize, @intCast(i_var))].get("right").?))].get("left").?)) {
            i_var = left_rotation(i_var);
        } else {
            i_var = rl_rotation(i_var);
        }
    } else {
        if (lh - rh == 2) {
            if (get_height(nodes_var[@as(usize, @intCast(nodes_var[@as(usize, @intCast(i_var))].get("left").?))].get("left").?) > get_height(nodes_var[@as(usize, @intCast(nodes_var[@as(usize, @intCast(i_var))].get("left").?))].get("right").?)) {
                i_var = right_rotation(i_var);
            } else {
                i_var = lr_rotation(i_var);
            }
        }
    }
    update_height(i_var);
    return i_var;
}

fn inorder(i: i64) []const u8 {
    if (i == NIL_var) {
        return "";
    }
    const left: []const u8 = inorder(nodes_var[@as(usize, @intCast(i))].get("left").?);
    const right: []const u8 = inorder(nodes_var[@as(usize, @intCast(i))].get("right").?);
    var res: []const u8 = _str(nodes_var[@as(usize, @intCast(i))].get("data").?);
    if (left.len != 0) {
        res = _concat_string(_concat_string(left, " "), res);
    }
    if (right.len != 0) {
        res = _concat_string(_concat_string(res, " "), right);
    }
    return res;
}

fn mochi_main() void {
    nodes_var = &[_]std.StringHashMap(i64){};
    var root: i64 = NIL_var;
    root = insert_node(root, 4);
    root = insert_node(root, 2);
    root = insert_node(root, 3);
    std.debug.print("{s}\n", .{inorder(root)});
    std.debug.print("{s}\n", .{_str(get_height(root))});
    root = del_node(root, 3);
    std.debug.print("{s}\n", .{inorder(root)});
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        NIL_var = 0 - 1;
        nodes_var = &[_]std.StringHashMap(i64){};
        mochi_main();
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * std.mem.page_size;
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
