// Generated by Mochi Zig transpiler on 2025-08-09 23:14 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

var NEG_INF_var: i64 = 0;
var A_var: []i64 = &[_]i64{};
var n_var: i64 = 15;
var segment_tree_var: []i64 = &[_]i64{};
var lazy_var: []i64 = &[_]i64{};
var flag_var: []bool = &[_]bool{};

fn init_int_array(n_param: i64) []i64 {
    var arr: []i64 = @constCast(&[_]i64{})[0..];
    arr = arr;
    var i: i64 = 0;
    i = i;
    while (i < 4 * n_param + 5) {
        arr = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, arr)) catch |err| handleError(err); _tmp.append(0) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    return arr;
}

fn init_bool_array(n_param: i64) []bool {
    var arr: []bool = @constCast(&[_]bool{})[0..];
    arr = arr;
    var i: i64 = 0;
    i = i;
    while (i < 4 * n_param + 5) {
        arr = blk: { var _tmp = std.ArrayList(bool).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const bool, arr)) catch |err| handleError(err); _tmp.append(false) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    return arr;
}

fn left(idx: i64) i64 {
    return idx * 2;
}

fn right(idx: i64) i64 {
    return idx * 2 + 1;
}

fn build(segment_tree_param: []i64, idx: i64, l: i64, r: i64, a: []i64) void {
    var segment_tree_var_1: []i64 = segment_tree_param;
    segment_tree_var_1 = segment_tree_var_1;
    if (l == r) {
        segment_tree_var_1[@as(usize, @intCast(idx))] = a[@as(usize, @intCast(l - 1))];
    } else {
        var mid: i64 = @divTrunc(l + r, 2);
        mid = mid;
        build(segment_tree_var_1, left(idx), l, mid, a);
        build(segment_tree_var_1, right(idx), mid + 1, r, a);
        const lv: i64 = segment_tree_var_1[@as(usize, @intCast(left(idx)))];
        const rv: i64 = segment_tree_var_1[@as(usize, @intCast(right(idx)))];
        if (lv > rv) {
            segment_tree_var_1[@as(usize, @intCast(idx))] = lv;
        } else {
            segment_tree_var_1[@as(usize, @intCast(idx))] = rv;
        }
    }
}

fn update(segment_tree_param_1: []i64, lazy_param: []i64, flag_param: []bool, idx: i64, l: i64, r: i64, a: i64, b: i64, val: i64) void {
    var segment_tree_var_2: []i64 = segment_tree_param_1;
    segment_tree_var_2 = segment_tree_var_2;
    var lazy_var_1: []i64 = lazy_param;
    lazy_var_1 = lazy_var_1;
    var flag_var_1: []bool = flag_param;
    flag_var_1 = flag_var_1;
    if (flag_var_1[@as(usize, @intCast(idx))]) {
        segment_tree_var_2[@as(usize, @intCast(idx))] = lazy_var_1[@as(usize, @intCast(idx))];
        flag_var_1[@as(usize, @intCast(idx))] = false;
        if (l != r) {
            lazy_var_1[@as(usize, @intCast(left(idx)))] = lazy_var_1[@as(usize, @intCast(idx))];
            lazy_var_1[@as(usize, @intCast(right(idx)))] = lazy_var_1[@as(usize, @intCast(idx))];
            flag_var_1[@as(usize, @intCast(left(idx)))] = true;
            flag_var_1[@as(usize, @intCast(right(idx)))] = true;
        }
    }
    if (r < a or l > b) {
        return;
    }
    if (l >= a and r <= b) {
        segment_tree_var_2[@as(usize, @intCast(idx))] = val;
        if (l != r) {
            lazy_var_1[@as(usize, @intCast(left(idx)))] = val;
            lazy_var_1[@as(usize, @intCast(right(idx)))] = val;
            flag_var_1[@as(usize, @intCast(left(idx)))] = true;
            flag_var_1[@as(usize, @intCast(right(idx)))] = true;
        }
        return;
    }
    var mid: i64 = @divTrunc(l + r, 2);
    mid = mid;
    update(segment_tree_var_2, lazy_var_1, flag_var_1, left(idx), l, mid, a, b, val);
    update(segment_tree_var_2, lazy_var_1, flag_var_1, right(idx), mid + 1, r, a, b, val);
    const lv: i64 = segment_tree_var_2[@as(usize, @intCast(left(idx)))];
    const rv: i64 = segment_tree_var_2[@as(usize, @intCast(right(idx)))];
    if (lv > rv) {
        segment_tree_var_2[@as(usize, @intCast(idx))] = lv;
    } else {
        segment_tree_var_2[@as(usize, @intCast(idx))] = rv;
    }
}

fn query(segment_tree_param_2: []i64, lazy_param_1: []i64, flag_param_1: []bool, idx: i64, l: i64, r: i64, a: i64, b: i64) i64 {
    var segment_tree_var_3: []i64 = segment_tree_param_2;
    segment_tree_var_3 = segment_tree_var_3;
    var lazy_var_2: []i64 = lazy_param_1;
    lazy_var_2 = lazy_var_2;
    var flag_var_2: []bool = flag_param_1;
    flag_var_2 = flag_var_2;
    if (flag_var_2[@as(usize, @intCast(idx))]) {
        segment_tree_var_3[@as(usize, @intCast(idx))] = lazy_var_2[@as(usize, @intCast(idx))];
        flag_var_2[@as(usize, @intCast(idx))] = false;
        if (l != r) {
            lazy_var_2[@as(usize, @intCast(left(idx)))] = lazy_var_2[@as(usize, @intCast(idx))];
            lazy_var_2[@as(usize, @intCast(right(idx)))] = lazy_var_2[@as(usize, @intCast(idx))];
            flag_var_2[@as(usize, @intCast(left(idx)))] = true;
            flag_var_2[@as(usize, @intCast(right(idx)))] = true;
        }
    }
    if (r < a or l > b) {
        return NEG_INF_var;
    }
    if (l >= a and r <= b) {
        return segment_tree_var_3[@as(usize, @intCast(idx))];
    }
    var mid: i64 = @divTrunc(l + r, 2);
    mid = mid;
    const q1: i64 = query(segment_tree_var_3, lazy_var_2, flag_var_2, left(idx), l, mid, a, b);
    const q2: i64 = query(segment_tree_var_3, lazy_var_2, flag_var_2, right(idx), mid + 1, r, a, b);
    if (q1 > q2) {
        return q1;
    } else {
        return q2;
    }
    return 0;
}

fn segtree_to_string(segment_tree_param: []i64, lazy_param: []i64, flag_param: []bool, n_param: i64) []const u8 {
    var res: []const u8 = "[";
    res = res;
    var i: i64 = 1;
    i = i;
    while (i <= n_param) {
        var v: i64 = query(segment_tree_param, lazy_param, flag_param, 1, 1, n_param, i, i);
        v = v;
        res = _concat_string(res, _str(v));
        if (i < n_param) {
            res = _concat_string(res, ", ");
        }
        i = i + 1;
    }
    res = _concat_string(res, "]");
    return res;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        NEG_INF_var = 0 - 1000000000;
        A_var = @constCast(&([15]i64{1, 2, 0 - 4, 7, 3, 0 - 5, 6, 11, 0 - 20, 9, 14, 15, 5, 2, 0 - 8}))[0..];
        segment_tree_var = init_int_array(n_var);
        lazy_var = init_int_array(n_var);
        flag_var = init_bool_array(n_var);
        build(segment_tree_var, 1, 1, n_var, A_var);
        std.debug.print("{s}\n", .{_str(query(segment_tree_var, lazy_var, flag_var, 1, 1, n_var, 4, 6))});
        std.debug.print("{s}\n", .{_str(query(segment_tree_var, lazy_var, flag_var, 1, 1, n_var, 7, 11))});
        std.debug.print("{s}\n", .{_str(query(segment_tree_var, lazy_var, flag_var, 1, 1, n_var, 7, 12))});
        update(segment_tree_var, lazy_var, flag_var, 1, 1, n_var, 1, 3, 111);
        std.debug.print("{s}\n", .{_str(query(segment_tree_var, lazy_var, flag_var, 1, 1, n_var, 1, 15))});
        update(segment_tree_var, lazy_var, flag_var, 1, 1, n_var, 7, 8, 235);
        std.debug.print("{s}\n", .{segtree_to_string(segment_tree_var, lazy_var, flag_var, n_var)});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * std.mem.page_size;
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
