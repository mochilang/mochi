// Generated by Mochi Zig transpiler on 2025-08-09 11:16 +0700
const std = @import("std");
const Value = union(enum) { Null: void, Int: i64, Float: f64, Str: []const u8, Bool: bool, List: []Value, StrList: [][]const u8, };

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const Node = struct {
    key: i64,
    left: i64,
    right: i64,
};

var tree_var: [7]Node = undefined;

fn inorder(nodes: []const Node, idx: i64) []i64 {
    if (idx == 0 - 1) {
        return &[_]i64{};
    }
    const node: Node = nodes[@as(usize, @intCast(idx))];
    var result: []i64 = inorder(nodes, node.left);
    result = result;
    result = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, result)) catch |err| handleError(err); _tmp.append(node.key) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
    result = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, result)) catch |err| handleError(err); _tmp.appendSlice(@as([]const i64, inorder(nodes, node.right))) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
    return result;
}

fn floor_ceiling(nodes: []const Node, idx: i64, key: i64) []Value {
    var floor_val: Value = Value{.Null = {}};
    floor_val = floor_val;
    var ceiling_val: Value = Value{.Null = {}};
    ceiling_val = ceiling_val;
    var current: i64 = idx;
    current = current;
    while (current != 0 - 1) {
        const node: Node = nodes[@as(usize, @intCast(current))];
        if (node.key == key) {
            floor_val = Value{.Int = node.key};
            ceiling_val = Value{.Int = node.key};
            break;
        }
        if (key < node.key) {
            ceiling_val = Value{.Int = node.key};
            current = node.left;
        } else {
            floor_val = Value{.Int = node.key};
            current = node.right;
        }
    }
    return @constCast(&([2]Value{floor_val, ceiling_val}))[0..];
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        tree_var = [7]Node{.{ .key = 10, .left = 1, .right = 2 }, .{ .key = 5, .left = 3, .right = 4 }, .{ .key = 20, .left = 5, .right = 6 }, .{ .key = 3, .left = 0 - 1, .right = 0 - 1 }, .{ .key = 7, .left = 0 - 1, .right = 0 - 1 }, .{ .key = 15, .left = 0 - 1, .right = 0 - 1 }, .{ .key = 25, .left = 0 - 1, .right = 0 - 1 }};
        std.debug.print("{s}\n", .{_str(inorder(tree_var[0..], 0))});
        std.debug.print("{s}\n", .{_str(floor_ceiling(tree_var[0..], 0, 8))});
        std.debug.print("{s}\n", .{_str(floor_ceiling(tree_var[0..], 0, 14))});
        std.debug.print("{s}\n", .{_str(floor_ceiling(tree_var[0..], 0, 0 - 1))});
        std.debug.print("{s}\n", .{_str(floor_ceiling(tree_var[0..], 0, 30))});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    if (@TypeOf(v) == Value) {
        return switch (v) {
            .Int => std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v.Int}) catch unreachable,
            .Float => std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v.Float}) catch unreachable,
            .Str => std.fmt.allocPrint(std.heap.page_allocator, "'{s}'", .{v.Str}) catch unreachable,
            .Bool => if (v.Bool) "true" else "false",
            .List => _str(v.List),
            .StrList => _str(v.StrList),
            else => "null",
        };
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * std.mem.page_size;
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
