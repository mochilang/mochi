// Generated by Mochi Zig transpiler on 2025-08-25 16:29 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const SplitResult = struct {
    left: i64,
    right: i64,
};

const NIL_var: i64 = -1;
var node_values_var_1: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
var node_priors_var_1: []f64 = std.heap.page_allocator.alloc(f64, 0) catch unreachable;
var node_lefts_var_1: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
var node_rights_var_1: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
var seed_var_1: i64 = 1;

fn random() f64 {
    seed_var_1 = @mod(seed_var_1 *% 13 +% 7, 100);
    return @as(f64, @floatFromInt(seed_var_1)) / 100.0;
}

fn new_node(value: i64) i64 {
    node_values_var_1 = blk0: { var _tmp = std.ArrayList(i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp.appendSlice(@as([]const i64, node_values_var_1)) catch |err| handleError(err); _tmp.append(value) catch |err| handleError(err); break :blk0 (_tmp.toOwnedSlice() catch |err| handleError(err)); };
    node_priors_var_1 = blk1: { var _tmp_1 = std.ArrayList(f64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_1.appendSlice(@as([]const f64, node_priors_var_1)) catch |err| handleError(err); _tmp_1.append(random()) catch |err| handleError(err); break :blk1 (_tmp_1.toOwnedSlice() catch |err| handleError(err)); };
    node_lefts_var_1 = blk2: { var _tmp_2 = std.ArrayList(i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_2.appendSlice(@as([]const i64, node_lefts_var_1)) catch |err| handleError(err); _tmp_2.append(NIL_var) catch |err| handleError(err); break :blk2 (_tmp_2.toOwnedSlice() catch |err| handleError(err)); };
    node_rights_var_1 = blk3: { var _tmp_3 = std.ArrayList(i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_3.appendSlice(@as([]const i64, node_rights_var_1)) catch |err| handleError(err); _tmp_3.append(NIL_var) catch |err| handleError(err); break :blk3 (_tmp_3.toOwnedSlice() catch |err| handleError(err)); };
    return @as(i64, @intCast(node_values_var_1.len)) -% 1;
}

fn split(root: i64, value_1: i64) SplitResult {
    if (root == NIL_var) {
        return .{ .left = NIL_var, .right = NIL_var };
    }
    if (value_1 < node_values_var_1[_idx(node_values_var_1.len, root)]) {
        const res: SplitResult = split(node_lefts_var_1[_idx(node_lefts_var_1.len, root)], value_1);
        node_lefts_var_1[_idx(node_lefts_var_1.len, root)] = res.right;
        return .{ .left = res.left, .right = root };
    }
    const res_1: SplitResult = split(node_rights_var_1[_idx(node_rights_var_1.len, root)], value_1);
    node_rights_var_1[_idx(node_rights_var_1.len, root)] = res_1.left;
    return .{ .left = root, .right = res_1.right };
}

fn merge(left: i64, right: i64) i64 {
    if (left == NIL_var) {
        return right;
    }
    if (right == NIL_var) {
        return left;
    }
    if (node_priors_var_1[_idx(node_priors_var_1.len, left)] < node_priors_var_1[_idx(node_priors_var_1.len, right)]) {
        node_rights_var_1[_idx(node_rights_var_1.len, left)] = merge(node_rights_var_1[_idx(node_rights_var_1.len, left)], right);
        return left;
    }
    node_lefts_var_1[_idx(node_lefts_var_1.len, right)] = merge(left, node_lefts_var_1[_idx(node_lefts_var_1.len, right)]);
    return right;
}

fn insert(root_1: i64, value_2: i64) i64 {
    const node: i64 = new_node(value_2);
    const res_2: SplitResult = split(root_1, value_2);
    return merge(merge(res_2.left, node), res_2.right);
}

fn erase(root_2: i64, value_3: i64) i64 {
    const res1: SplitResult = split(root_2, value_3 -% 1);
    const res2: SplitResult = split(res1.right, value_3);
    return merge(res1.left, res2.right);
}

fn inorder(i: i64, acc: []i64) []i64 {
    if (i == NIL_var) {
        return acc;
    }
    const left_acc: []i64 = inorder(node_lefts_var_1[_idx(node_lefts_var_1.len, i)], acc);
    const with_node: []i64 = blk4: { var _tmp_4 = std.ArrayList(i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_4.appendSlice(@as([]const i64, left_acc)) catch |err| handleError(err); _tmp_4.append(node_values_var_1[_idx(node_values_var_1.len, i)]) catch |err| handleError(err); break :blk4 (_tmp_4.toOwnedSlice() catch |err| handleError(err)); };
    return inorder(node_rights_var_1[_idx(node_rights_var_1.len, i)], with_node);
}

fn mochi_main() void {
    var root_3: i64 = NIL_var;
    root_3 = root_3;
    root_3 = insert(root_3, 1);
    std.debug.print("{s}\n", .{_str(inorder(root_3, @constCast((&[_]i64{})[0..0])))});
    root_3 = insert(root_3, 3);
    root_3 = insert(root_3, 5);
    root_3 = insert(root_3, 17);
    root_3 = insert(root_3, 19);
    root_3 = insert(root_3, 2);
    root_3 = insert(root_3, 16);
    root_3 = insert(root_3, 4);
    root_3 = insert(root_3, 0);
    std.debug.print("{s}\n", .{_str(inorder(root_3, @constCast((&[_]i64{})[0..0])))});
    root_3 = insert(root_3, 4);
    root_3 = insert(root_3, 4);
    root_3 = insert(root_3, 4);
    std.debug.print("{s}\n", .{_str(inorder(root_3, @constCast((&[_]i64{})[0..0])))});
    root_3 = erase(root_3, 0);
    std.debug.print("{s}\n", .{_str(inorder(root_3, @constCast((&[_]i64{})[0..0])))});
    root_3 = erase(root_3, 4);
    std.debug.print("{s}\n", .{_str(inorder(root_3, @constCast((&[_]i64{})[0..0])))});
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        mochi_main();
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
