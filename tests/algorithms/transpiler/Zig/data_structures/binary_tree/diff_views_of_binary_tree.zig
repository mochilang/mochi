// Generated by Mochi Zig transpiler on 2025-08-08 17:56 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const Pair = struct {
    idx: i64,
    hd: i64,
};

const Tree = struct {
    values: []i64,
    lefts: []i64,
    rights: []i64,
    root: i64,
};

const NIL_var: i64 = -1;
var tree_var: Tree = undefined;

fn make_tree() Tree {
    return .{ .values = @constCast((&([5]i64{3, 9, 20, 15, 7}))[0..]), .lefts = @constCast((&([5]i64{1, NIL_var, 3, NIL_var, NIL_var}))[0..]), .rights = @constCast((&([5]i64{2, NIL_var, 4, NIL_var, NIL_var}))[0..]), .root = 0 };
}

fn index_of(xs: []const i64, x: i64) i64 {
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(xs.len))) {
        if (xs[@as(usize, @intCast(i))] == x) {
            return i;
        }
        i = i + 1;
    }
    return NIL_var;
}

fn sort_pairs(hds: []i64, vals: []i64) void {
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(hds.len))) {
        var j: i64 = i;
        j = j;
        while (j > 0 and hds[@as(usize, @intCast(j - 1))] > hds[@as(usize, @intCast(j))]) {
            const hd_tmp: i64 = hds[@as(usize, @intCast(j - 1))];
            hds[@as(usize, @intCast(j - 1))] = hds[@as(usize, @intCast(j))];
            hds[@as(usize, @intCast(j))] = hd_tmp;
            const val_tmp: i64 = vals[@as(usize, @intCast(j - 1))];
            vals[@as(usize, @intCast(j - 1))] = vals[@as(usize, @intCast(j))];
            vals[@as(usize, @intCast(j))] = val_tmp;
            j = j - 1;
        }
        i = i + 1;
    }
}

fn right_view(t: Tree) []i64 {
    var res: []i64 = @constCast((&([0]i64{}))[0..]);
    res = res;
    var queue: []i64 = @constCast((&([1]i64{t.root}))[0..]);
    queue = queue;
    while (@as(i64, @intCast(queue.len)) > 0) {
        const size: i64 = @as(i64, @intCast(queue.len));
        var i: i64 = 0;
        i = i;
        while (i < size) {
            const idx: i64 = queue[@as(usize, @intCast(i))];
            if (t.lefts[@as(usize, @intCast(idx))] != NIL_var) {
                queue = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, queue)) catch |err| handleError(err); _tmp.append(t.lefts[@as(usize, @intCast(idx))]) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            }
            if (t.rights[@as(usize, @intCast(idx))] != NIL_var) {
                queue = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, queue)) catch |err| handleError(err); _tmp.append(t.rights[@as(usize, @intCast(idx))]) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            }
            i = i + 1;
        }
        res = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, res)) catch |err| handleError(err); _tmp.append(t.values[@as(usize, @intCast(queue[@as(usize, @intCast(size - 1))]))]) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        queue = queue[@as(usize, @intCast(size))..@min(@as(usize, @intCast(@as(i64, @intCast(queue.len)))), @as(usize, @intCast(queue.len)))];
    }
    return res;
}

fn left_view(t: Tree) []i64 {
    var res: []i64 = @constCast((&([0]i64{}))[0..]);
    res = res;
    var queue: []i64 = @constCast((&([1]i64{t.root}))[0..]);
    queue = queue;
    while (@as(i64, @intCast(queue.len)) > 0) {
        const size: i64 = @as(i64, @intCast(queue.len));
        var i: i64 = 0;
        i = i;
        while (i < size) {
            const idx: i64 = queue[@as(usize, @intCast(i))];
            if (t.lefts[@as(usize, @intCast(idx))] != NIL_var) {
                queue = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, queue)) catch |err| handleError(err); _tmp.append(t.lefts[@as(usize, @intCast(idx))]) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            }
            if (t.rights[@as(usize, @intCast(idx))] != NIL_var) {
                queue = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, queue)) catch |err| handleError(err); _tmp.append(t.rights[@as(usize, @intCast(idx))]) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            }
            i = i + 1;
        }
        res = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, res)) catch |err| handleError(err); _tmp.append(t.values[@as(usize, @intCast(queue[@as(usize, @intCast(0))]))]) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        queue = queue[@as(usize, @intCast(size))..@min(@as(usize, @intCast(@as(i64, @intCast(queue.len)))), @as(usize, @intCast(queue.len)))];
    }
    return res;
}

fn top_view(t: Tree) []i64 {
    var hds: []i64 = @constCast((&([0]i64{}))[0..]);
    hds = hds;
    var vals: []i64 = @constCast((&([0]i64{}))[0..]);
    vals = vals;
    var queue_idx: []i64 = @constCast((&([1]i64{t.root}))[0..]);
    queue_idx = queue_idx;
    var queue_hd: []i64 = @constCast((&([1]i64{0}))[0..]);
    queue_hd = queue_hd;
    while (@as(i64, @intCast(queue_idx.len)) > 0) {
        const idx: i64 = queue_idx[@as(usize, @intCast(0))];
        queue_idx = queue_idx[@as(usize, @intCast(1))..@min(@as(usize, @intCast(@as(i64, @intCast(queue_idx.len)))), @as(usize, @intCast(queue_idx.len)))];
        const hd: i64 = queue_hd[@as(usize, @intCast(0))];
        queue_hd = queue_hd[@as(usize, @intCast(1))..@min(@as(usize, @intCast(@as(i64, @intCast(queue_hd.len)))), @as(usize, @intCast(queue_hd.len)))];
        if (index_of(hds[0..], hd) == NIL_var) {
            hds = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, hds)) catch |err| handleError(err); _tmp.append(hd) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            vals = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, vals)) catch |err| handleError(err); _tmp.append(t.values[@as(usize, @intCast(idx))]) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        }
        if (t.lefts[@as(usize, @intCast(idx))] != NIL_var) {
            queue_idx = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, queue_idx)) catch |err| handleError(err); _tmp.append(t.lefts[@as(usize, @intCast(idx))]) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            queue_hd = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, queue_hd)) catch |err| handleError(err); _tmp.append(hd - 1) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        }
        if (t.rights[@as(usize, @intCast(idx))] != NIL_var) {
            queue_idx = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, queue_idx)) catch |err| handleError(err); _tmp.append(t.rights[@as(usize, @intCast(idx))]) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            queue_hd = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, queue_hd)) catch |err| handleError(err); _tmp.append(hd + 1) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        }
    }
    sort_pairs(hds, vals);
    return vals;
}

fn bottom_view(t: Tree) []i64 {
    var hds: []i64 = @constCast((&([0]i64{}))[0..]);
    hds = hds;
    var vals: []i64 = @constCast((&([0]i64{}))[0..]);
    vals = vals;
    var queue_idx: []i64 = @constCast((&([1]i64{t.root}))[0..]);
    queue_idx = queue_idx;
    var queue_hd: []i64 = @constCast((&([1]i64{0}))[0..]);
    queue_hd = queue_hd;
    while (@as(i64, @intCast(queue_idx.len)) > 0) {
        const idx: i64 = queue_idx[@as(usize, @intCast(0))];
        queue_idx = queue_idx[@as(usize, @intCast(1))..@min(@as(usize, @intCast(@as(i64, @intCast(queue_idx.len)))), @as(usize, @intCast(queue_idx.len)))];
        const hd: i64 = queue_hd[@as(usize, @intCast(0))];
        queue_hd = queue_hd[@as(usize, @intCast(1))..@min(@as(usize, @intCast(@as(i64, @intCast(queue_hd.len)))), @as(usize, @intCast(queue_hd.len)))];
        const pos: i64 = index_of(hds[0..], hd);
        if (pos == NIL_var) {
            hds = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, hds)) catch |err| handleError(err); _tmp.append(hd) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            vals = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, vals)) catch |err| handleError(err); _tmp.append(t.values[@as(usize, @intCast(idx))]) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        } else {
            vals[@as(usize, @intCast(pos))] = t.values[@as(usize, @intCast(idx))];
        }
        if (t.lefts[@as(usize, @intCast(idx))] != NIL_var) {
            queue_idx = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, queue_idx)) catch |err| handleError(err); _tmp.append(t.lefts[@as(usize, @intCast(idx))]) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            queue_hd = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, queue_hd)) catch |err| handleError(err); _tmp.append(hd - 1) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        }
        if (t.rights[@as(usize, @intCast(idx))] != NIL_var) {
            queue_idx = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, queue_idx)) catch |err| handleError(err); _tmp.append(t.rights[@as(usize, @intCast(idx))]) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            queue_hd = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, queue_hd)) catch |err| handleError(err); _tmp.append(hd + 1) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        }
    }
    sort_pairs(hds, vals);
    return vals;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        tree_var = make_tree();
        std.debug.print("{s}\n", .{_str(right_view(tree_var))});
        std.debug.print("{s}\n", .{_str(left_view(tree_var))});
        std.debug.print("{s}\n", .{_str(top_view(tree_var))});
        std.debug.print("{s}\n", .{_str(bottom_view(tree_var))});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * std.mem.page_size;
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
