// Generated by Mochi Zig transpiler on 2025-08-24 16:59 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const Pair = struct {
    idx: i64,
    hd: i64,
};

const Tree = struct {
    values: []i64,
    lefts: []i64,
    rights: []i64,
    root: i64,
};

const NIL_var: i64 = -1;
var tree_var: Tree = undefined;

fn make_tree() Tree {
    return .{ .values = @constCast(([5]i64{3, 9, 20, 15, 7})[0..5]), .lefts = @constCast(blk0: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.append(1) catch unreachable; _tmp.append(NIL_var) catch unreachable; _tmp.append(3) catch unreachable; _tmp.append(NIL_var) catch unreachable; _tmp.append(NIL_var) catch unreachable; break :blk0 (_tmp.toOwnedSlice() catch unreachable); }), .rights = @constCast(blk1: { var _tmp_1 = std.ArrayList(i64).init(std.heap.page_allocator); _tmp_1.append(2) catch unreachable; _tmp_1.append(NIL_var) catch unreachable; _tmp_1.append(4) catch unreachable; _tmp_1.append(NIL_var) catch unreachable; _tmp_1.append(NIL_var) catch unreachable; break :blk1 (_tmp_1.toOwnedSlice() catch unreachable); }), .root = 0 };
}

fn index_of(xs: []i64, x: i64) i64 {
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(xs.len))) {
        if (xs[_idx(xs.len, i)] == x) {
            return i;
        }
        i = i +% 1;
    }
    return NIL_var;
}

fn sort_pairs(hds_param: []i64, vals_param: []i64) void {
    var hds_var: []i64 = hds_param;
    hds_var = hds_var;
    var vals_var: []i64 = vals_param;
    vals_var = vals_var;
    var i_1: i64 = 0;
    i_1 = i_1;
    while (i_1 < @as(i64, @intCast(hds_var.len))) {
        var j: i64 = i_1;
        j = j;
        while (j > 0 and hds_var[_idx(hds_var.len, j -% 1)] > hds_var[_idx(hds_var.len, j)]) {
            const hd_tmp: i64 = hds_var[_idx(hds_var.len, j -% 1)];
            hds_var[_idx(hds_var.len, j -% 1)] = hds_var[_idx(hds_var.len, j)];
            hds_var[_idx(hds_var.len, j)] = hd_tmp;
            const val_tmp: i64 = vals_var[_idx(vals_var.len, j -% 1)];
            vals_var[_idx(vals_var.len, j -% 1)] = vals_var[_idx(vals_var.len, j)];
            vals_var[_idx(vals_var.len, j)] = val_tmp;
            j = j -% 1;
        }
        i_1 = i_1 +% 1;
    }
}

fn right_view(t: Tree) []i64 {
    var res: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    res = res;
    var queue: []i64 = blk2: { var _tmp_2 = std.ArrayList(i64).init(std.heap.page_allocator); _tmp_2.append(t.root) catch unreachable; break :blk2 (_tmp_2.toOwnedSlice() catch unreachable); };
    queue = queue;
    while (@as(i64, @intCast(queue.len)) > 0) {
        const size: i64 = @as(i64, @intCast(queue.len));
        var i_2: i64 = 0;
        i_2 = i_2;
        while (i_2 < size) {
            const idx: i64 = queue[_idx(queue.len, i_2)];
            if (t.lefts[_idx(t.lefts.len, idx)] != NIL_var) {
                queue = blk3: { var _tmp_3 = std.ArrayList(i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_3.appendSlice(@as([]const i64, queue)) catch |err| handleError(err); _tmp_3.append(t.lefts[_idx(t.lefts.len, idx)]) catch |err| handleError(err); break :blk3 (_tmp_3.toOwnedSlice() catch |err| handleError(err)); };
            }
            if (t.rights[_idx(t.rights.len, idx)] != NIL_var) {
                queue = blk4: { var _tmp_4 = std.ArrayList(i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_4.appendSlice(@as([]const i64, queue)) catch |err| handleError(err); _tmp_4.append(t.rights[_idx(t.rights.len, idx)]) catch |err| handleError(err); break :blk4 (_tmp_4.toOwnedSlice() catch |err| handleError(err)); };
            }
            i_2 = i_2 +% 1;
        }
        res = blk5: { var _tmp_5 = std.ArrayList(i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_5.appendSlice(@as([]const i64, res)) catch |err| handleError(err); _tmp_5.append(t.values[_idx(t.values.len, queue[_idx(queue.len, size -% 1)])]) catch |err| handleError(err); break :blk5 (_tmp_5.toOwnedSlice() catch |err| handleError(err)); };
        queue = queue[@as(usize, @intCast(size))..@min(@as(usize, @intCast(@as(i64, @intCast(queue.len)))), @as(usize, @intCast(queue.len)))];
    }
    return res;
}

fn left_view(t_1: Tree) []i64 {
    var res_1: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    res_1 = res_1;
    var queue_1: []i64 = blk6: { var _tmp_6 = std.ArrayList(i64).init(std.heap.page_allocator); _tmp_6.append(t_1.root) catch unreachable; break :blk6 (_tmp_6.toOwnedSlice() catch unreachable); };
    queue_1 = queue_1;
    while (@as(i64, @intCast(queue_1.len)) > 0) {
        const size_1: i64 = @as(i64, @intCast(queue_1.len));
        var i_3: i64 = 0;
        i_3 = i_3;
        while (i_3 < size_1) {
            const idx_1: i64 = queue_1[_idx(queue_1.len, i_3)];
            if (t_1.lefts[_idx(t_1.lefts.len, idx_1)] != NIL_var) {
                queue_1 = blk7: { var _tmp_7 = std.ArrayList(i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_7.appendSlice(@as([]const i64, queue_1)) catch |err| handleError(err); _tmp_7.append(t_1.lefts[_idx(t_1.lefts.len, idx_1)]) catch |err| handleError(err); break :blk7 (_tmp_7.toOwnedSlice() catch |err| handleError(err)); };
            }
            if (t_1.rights[_idx(t_1.rights.len, idx_1)] != NIL_var) {
                queue_1 = blk8: { var _tmp_8 = std.ArrayList(i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_8.appendSlice(@as([]const i64, queue_1)) catch |err| handleError(err); _tmp_8.append(t_1.rights[_idx(t_1.rights.len, idx_1)]) catch |err| handleError(err); break :blk8 (_tmp_8.toOwnedSlice() catch |err| handleError(err)); };
            }
            i_3 = i_3 +% 1;
        }
        res_1 = blk9: { var _tmp_9 = std.ArrayList(i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_9.appendSlice(@as([]const i64, res_1)) catch |err| handleError(err); _tmp_9.append(t_1.values[_idx(t_1.values.len, queue_1[_idx(queue_1.len, 0)])]) catch |err| handleError(err); break :blk9 (_tmp_9.toOwnedSlice() catch |err| handleError(err)); };
        queue_1 = queue_1[@as(usize, @intCast(size_1))..@min(@as(usize, @intCast(@as(i64, @intCast(queue_1.len)))), @as(usize, @intCast(queue_1.len)))];
    }
    return res_1;
}

fn top_view(t_2: Tree) []i64 {
    var hds: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    hds = hds;
    var vals: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    vals = vals;
    var queue_idx: []i64 = blk10: { var _tmp_10 = std.ArrayList(i64).init(std.heap.page_allocator); _tmp_10.append(t_2.root) catch unreachable; break :blk10 (_tmp_10.toOwnedSlice() catch unreachable); };
    queue_idx = queue_idx;
    var queue_hd: []i64 = blk11: { var _tmp_11 = [1]i64{0}; break :blk11 _tmp_11[0..]; };
    queue_hd = queue_hd;
    while (@as(i64, @intCast(queue_idx.len)) > 0) {
        const idx_2: i64 = queue_idx[_idx(queue_idx.len, 0)];
        queue_idx = queue_idx[@as(usize, @intCast(1))..@min(@as(usize, @intCast(@as(i64, @intCast(queue_idx.len)))), @as(usize, @intCast(queue_idx.len)))];
        const hd: i64 = queue_hd[_idx(queue_hd.len, 0)];
        queue_hd = queue_hd[@as(usize, @intCast(1))..@min(@as(usize, @intCast(@as(i64, @intCast(queue_hd.len)))), @as(usize, @intCast(queue_hd.len)))];
        if (index_of(hds, hd) == NIL_var) {
            hds = blk12: { var _tmp_12 = std.ArrayList(i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_12.appendSlice(@as([]const i64, hds)) catch |err| handleError(err); _tmp_12.append(hd) catch |err| handleError(err); break :blk12 (_tmp_12.toOwnedSlice() catch |err| handleError(err)); };
            vals = blk13: { var _tmp_13 = std.ArrayList(i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_13.appendSlice(@as([]const i64, vals)) catch |err| handleError(err); _tmp_13.append(t_2.values[_idx(t_2.values.len, idx_2)]) catch |err| handleError(err); break :blk13 (_tmp_13.toOwnedSlice() catch |err| handleError(err)); };
        }
        if (t_2.lefts[_idx(t_2.lefts.len, idx_2)] != NIL_var) {
            queue_idx = blk14: { var _tmp_14 = std.ArrayList(i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_14.appendSlice(@as([]const i64, queue_idx)) catch |err| handleError(err); _tmp_14.append(t_2.lefts[_idx(t_2.lefts.len, idx_2)]) catch |err| handleError(err); break :blk14 (_tmp_14.toOwnedSlice() catch |err| handleError(err)); };
            queue_hd = blk15: { var _tmp_15 = std.ArrayList(i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_15.appendSlice(@as([]const i64, queue_hd)) catch |err| handleError(err); _tmp_15.append(hd -% 1) catch |err| handleError(err); break :blk15 (_tmp_15.toOwnedSlice() catch |err| handleError(err)); };
        }
        if (t_2.rights[_idx(t_2.rights.len, idx_2)] != NIL_var) {
            queue_idx = blk16: { var _tmp_16 = std.ArrayList(i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_16.appendSlice(@as([]const i64, queue_idx)) catch |err| handleError(err); _tmp_16.append(t_2.rights[_idx(t_2.rights.len, idx_2)]) catch |err| handleError(err); break :blk16 (_tmp_16.toOwnedSlice() catch |err| handleError(err)); };
            queue_hd = blk17: { var _tmp_17 = std.ArrayList(i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_17.appendSlice(@as([]const i64, queue_hd)) catch |err| handleError(err); _tmp_17.append(hd +% 1) catch |err| handleError(err); break :blk17 (_tmp_17.toOwnedSlice() catch |err| handleError(err)); };
        }
    }
    sort_pairs(hds, vals);
    return vals;
}

fn bottom_view(t_3: Tree) []i64 {
    var hds_1: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    hds_1 = hds_1;
    var vals_1: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    vals_1 = vals_1;
    var queue_idx_1: []i64 = blk18: { var _tmp_18 = std.ArrayList(i64).init(std.heap.page_allocator); _tmp_18.append(t_3.root) catch unreachable; break :blk18 (_tmp_18.toOwnedSlice() catch unreachable); };
    queue_idx_1 = queue_idx_1;
    var queue_hd_1: []i64 = blk19: { var _tmp_19 = [1]i64{0}; break :blk19 _tmp_19[0..]; };
    queue_hd_1 = queue_hd_1;
    while (@as(i64, @intCast(queue_idx_1.len)) > 0) {
        const idx_3: i64 = queue_idx_1[_idx(queue_idx_1.len, 0)];
        queue_idx_1 = queue_idx_1[@as(usize, @intCast(1))..@min(@as(usize, @intCast(@as(i64, @intCast(queue_idx_1.len)))), @as(usize, @intCast(queue_idx_1.len)))];
        const hd_1: i64 = queue_hd_1[_idx(queue_hd_1.len, 0)];
        queue_hd_1 = queue_hd_1[@as(usize, @intCast(1))..@min(@as(usize, @intCast(@as(i64, @intCast(queue_hd_1.len)))), @as(usize, @intCast(queue_hd_1.len)))];
        const pos: i64 = index_of(hds_1, hd_1);
        if (pos == NIL_var) {
            hds_1 = blk20: { var _tmp_20 = std.ArrayList(i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_20.appendSlice(@as([]const i64, hds_1)) catch |err| handleError(err); _tmp_20.append(hd_1) catch |err| handleError(err); break :blk20 (_tmp_20.toOwnedSlice() catch |err| handleError(err)); };
            vals_1 = blk21: { var _tmp_21 = std.ArrayList(i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_21.appendSlice(@as([]const i64, vals_1)) catch |err| handleError(err); _tmp_21.append(t_3.values[_idx(t_3.values.len, idx_3)]) catch |err| handleError(err); break :blk21 (_tmp_21.toOwnedSlice() catch |err| handleError(err)); };
        } else {
            vals_1[_idx(vals_1.len, pos)] = t_3.values[_idx(t_3.values.len, idx_3)];
        }
        if (t_3.lefts[_idx(t_3.lefts.len, idx_3)] != NIL_var) {
            queue_idx_1 = blk22: { var _tmp_22 = std.ArrayList(i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_22.appendSlice(@as([]const i64, queue_idx_1)) catch |err| handleError(err); _tmp_22.append(t_3.lefts[_idx(t_3.lefts.len, idx_3)]) catch |err| handleError(err); break :blk22 (_tmp_22.toOwnedSlice() catch |err| handleError(err)); };
            queue_hd_1 = blk23: { var _tmp_23 = std.ArrayList(i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_23.appendSlice(@as([]const i64, queue_hd_1)) catch |err| handleError(err); _tmp_23.append(hd_1 -% 1) catch |err| handleError(err); break :blk23 (_tmp_23.toOwnedSlice() catch |err| handleError(err)); };
        }
        if (t_3.rights[_idx(t_3.rights.len, idx_3)] != NIL_var) {
            queue_idx_1 = blk24: { var _tmp_24 = std.ArrayList(i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_24.appendSlice(@as([]const i64, queue_idx_1)) catch |err| handleError(err); _tmp_24.append(t_3.rights[_idx(t_3.rights.len, idx_3)]) catch |err| handleError(err); break :blk24 (_tmp_24.toOwnedSlice() catch |err| handleError(err)); };
            queue_hd_1 = blk25: { var _tmp_25 = std.ArrayList(i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_25.appendSlice(@as([]const i64, queue_hd_1)) catch |err| handleError(err); _tmp_25.append(hd_1 +% 1) catch |err| handleError(err); break :blk25 (_tmp_25.toOwnedSlice() catch |err| handleError(err)); };
        }
    }
    sort_pairs(hds_1, vals_1);
    return vals_1;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        tree_var = make_tree();
        std.debug.print("{s}\n", .{_str(right_view(tree_var))});
        std.debug.print("{s}\n", .{_str(left_view(tree_var))});
        std.debug.print("{s}\n", .{_str(top_view(tree_var))});
        std.debug.print("{s}\n", .{_str(bottom_view(tree_var))});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
