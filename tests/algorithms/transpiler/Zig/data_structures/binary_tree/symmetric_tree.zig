// Generated by Mochi Zig transpiler on 2025-08-25 16:29 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

var symmetric_tree_var: [][]i64 = &[_][]i64{};
var asymmetric_tree_var: [][]i64 = &[_][]i64{};

fn make_symmetric_tree() [][]i64 {
    return blk0: { var _tmp = std.ArrayList([]i64).init(std.heap.page_allocator); _tmp.append(@constCast(([3]i64{1, 1, 2})[0..3])) catch |err| handleError(err); _tmp.append(@constCast(([3]i64{2, 3, 4})[0..3])) catch |err| handleError(err); _tmp.append(@constCast(([3]i64{2, 5, 6})[0..3])) catch |err| handleError(err); _tmp.append(@constCast(blk1: { var _tmp_1 = std.ArrayList(i64).init(std.heap.page_allocator); _tmp_1.append(3) catch unreachable; _tmp_1.append(0 -% 1) catch unreachable; _tmp_1.append(0 -% 1) catch unreachable; break :blk1 (_tmp_1.toOwnedSlice() catch unreachable); })) catch |err| handleError(err); _tmp.append(@constCast(blk2: { var _tmp_2 = std.ArrayList(i64).init(std.heap.page_allocator); _tmp_2.append(4) catch unreachable; _tmp_2.append(0 -% 1) catch unreachable; _tmp_2.append(0 -% 1) catch unreachable; break :blk2 (_tmp_2.toOwnedSlice() catch unreachable); })) catch |err| handleError(err); _tmp.append(@constCast(blk3: { var _tmp_3 = std.ArrayList(i64).init(std.heap.page_allocator); _tmp_3.append(4) catch unreachable; _tmp_3.append(0 -% 1) catch unreachable; _tmp_3.append(0 -% 1) catch unreachable; break :blk3 (_tmp_3.toOwnedSlice() catch unreachable); })) catch |err| handleError(err); _tmp.append(@constCast(blk4: { var _tmp_4 = std.ArrayList(i64).init(std.heap.page_allocator); _tmp_4.append(3) catch unreachable; _tmp_4.append(0 -% 1) catch unreachable; _tmp_4.append(0 -% 1) catch unreachable; break :blk4 (_tmp_4.toOwnedSlice() catch unreachable); })) catch |err| handleError(err); break :blk0 (_tmp.toOwnedSlice() catch |err| handleError(err)); };
}

fn make_asymmetric_tree() [][]i64 {
    return blk5: { var _tmp_5 = std.ArrayList([]i64).init(std.heap.page_allocator); _tmp_5.append(@constCast(([3]i64{1, 1, 2})[0..3])) catch |err| handleError(err); _tmp_5.append(@constCast(([3]i64{2, 3, 4})[0..3])) catch |err| handleError(err); _tmp_5.append(@constCast(([3]i64{2, 5, 6})[0..3])) catch |err| handleError(err); _tmp_5.append(@constCast(blk6: { var _tmp_6 = std.ArrayList(i64).init(std.heap.page_allocator); _tmp_6.append(3) catch unreachable; _tmp_6.append(0 -% 1) catch unreachable; _tmp_6.append(0 -% 1) catch unreachable; break :blk6 (_tmp_6.toOwnedSlice() catch unreachable); })) catch |err| handleError(err); _tmp_5.append(@constCast(blk7: { var _tmp_7 = std.ArrayList(i64).init(std.heap.page_allocator); _tmp_7.append(4) catch unreachable; _tmp_7.append(0 -% 1) catch unreachable; _tmp_7.append(0 -% 1) catch unreachable; break :blk7 (_tmp_7.toOwnedSlice() catch unreachable); })) catch |err| handleError(err); _tmp_5.append(@constCast(blk8: { var _tmp_8 = std.ArrayList(i64).init(std.heap.page_allocator); _tmp_8.append(3) catch unreachable; _tmp_8.append(0 -% 1) catch unreachable; _tmp_8.append(0 -% 1) catch unreachable; break :blk8 (_tmp_8.toOwnedSlice() catch unreachable); })) catch |err| handleError(err); _tmp_5.append(@constCast(blk9: { var _tmp_9 = std.ArrayList(i64).init(std.heap.page_allocator); _tmp_9.append(4) catch unreachable; _tmp_9.append(0 -% 1) catch unreachable; _tmp_9.append(0 -% 1) catch unreachable; break :blk9 (_tmp_9.toOwnedSlice() catch unreachable); })) catch |err| handleError(err); break :blk5 (_tmp_5.toOwnedSlice() catch |err| handleError(err)); };
}

fn is_symmetric_tree(tree: [][]i64) bool {
    var stack: []i64 = blk10: { var _tmp_10 = std.ArrayList(i64).init(std.heap.page_allocator); _tmp_10.append(tree[_idx(tree.len, 0)][_idx(tree[_idx(tree.len, 0)].len, 1)]) catch unreachable; _tmp_10.append(tree[_idx(tree.len, 0)][_idx(tree[_idx(tree.len, 0)].len, 2)]) catch unreachable; break :blk10 (_tmp_10.toOwnedSlice() catch unreachable); };
    stack = stack;
    while (@as(i64, @intCast(stack.len)) >= 2) {
        const left: i64 = stack[_idx(stack.len, @as(i64, @intCast(stack.len)) -% 2)];
        const right: i64 = stack[_idx(stack.len, @as(i64, @intCast(stack.len)) -% 1)];
        stack = stack[@as(usize, @intCast(0))..@min(@as(usize, @intCast(@as(i64, @intCast(stack.len)) -% 2)), @as(usize, @intCast(stack.len)))];
        if (left == 0 -% 1 and right == 0 -% 1) {
            continue;
        }
        if (left == 0 -% 1 or right == 0 -% 1) {
            return false;
        }
        const lnode: []i64 = tree[_idx(tree.len, left)];
        const rnode: []i64 = tree[_idx(tree.len, right)];
        if (lnode[_idx(lnode.len, 0)] != rnode[_idx(rnode.len, 0)]) {
            return false;
        }
        stack = blk11: { var _tmp_11 = std.ArrayList(i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_11.appendSlice(@as([]const i64, stack)) catch |err| handleError(err); _tmp_11.append(lnode[_idx(lnode.len, 1)]) catch |err| handleError(err); break :blk11 (_tmp_11.toOwnedSlice() catch |err| handleError(err)); };
        stack = blk12: { var _tmp_12 = std.ArrayList(i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_12.appendSlice(@as([]const i64, stack)) catch |err| handleError(err); _tmp_12.append(rnode[_idx(rnode.len, 2)]) catch |err| handleError(err); break :blk12 (_tmp_12.toOwnedSlice() catch |err| handleError(err)); };
        stack = blk13: { var _tmp_13 = std.ArrayList(i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_13.appendSlice(@as([]const i64, stack)) catch |err| handleError(err); _tmp_13.append(lnode[_idx(lnode.len, 2)]) catch |err| handleError(err); break :blk13 (_tmp_13.toOwnedSlice() catch |err| handleError(err)); };
        stack = blk14: { var _tmp_14 = std.ArrayList(i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_14.appendSlice(@as([]const i64, stack)) catch |err| handleError(err); _tmp_14.append(rnode[_idx(rnode.len, 1)]) catch |err| handleError(err); break :blk14 (_tmp_14.toOwnedSlice() catch |err| handleError(err)); };
    }
    return true;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        symmetric_tree_var = make_symmetric_tree();
        asymmetric_tree_var = make_asymmetric_tree();
        std.debug.print("{s}\n", .{_str(is_symmetric_tree(symmetric_tree_var))});
        std.debug.print("{s}\n", .{_str(is_symmetric_tree(asymmetric_tree_var))});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
