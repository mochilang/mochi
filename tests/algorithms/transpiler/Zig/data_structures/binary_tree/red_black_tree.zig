// Generated by Mochi Zig transpiler on 2025-08-25 16:29 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const RBTree = struct {
    nodes: [][]i64,
    root: i64,
};

const LABEL_var: i64 = 0;
const COLOR_var: i64 = 1;
const PARENT_var: i64 = 2;
const LEFT_var: i64 = 3;
const RIGHT_var: i64 = 4;
var NEG_ONE_var: i64 = 0;

fn make_tree() RBTree {
    return .{ .nodes = (&[_][]i64{})[0..0], .root = 0 -% 1 };
}

fn rotate_left(t_param: *RBTree, x: i64) RBTree {
    var nodes: [][]i64 = t_param.nodes;
    nodes = nodes;
    const y: i64 = nodes[_idx(nodes.len, x)][_idx(nodes[_idx(nodes.len, x)].len, RIGHT_var)];
    const yLeft: i64 = nodes[_idx(nodes.len, y)][_idx(nodes[_idx(nodes.len, y)].len, LEFT_var)];
    nodes[_idx(nodes.len, x)][_idx(nodes[_idx(nodes.len, x)].len, RIGHT_var)] = yLeft;
    if (yLeft != NEG_ONE_var) {
        nodes[_idx(nodes.len, yLeft)][_idx(nodes[_idx(nodes.len, yLeft)].len, PARENT_var)] = x;
    }
    const xParent: i64 = nodes[_idx(nodes.len, x)][_idx(nodes[_idx(nodes.len, x)].len, PARENT_var)];
    nodes[_idx(nodes.len, y)][_idx(nodes[_idx(nodes.len, y)].len, PARENT_var)] = xParent;
    if (xParent == NEG_ONE_var) {
        t_param.root = y;
    } else {
        if (x == nodes[_idx(nodes.len, xParent)][_idx(nodes[_idx(nodes.len, xParent)].len, LEFT_var)]) {
            nodes[_idx(nodes.len, xParent)][_idx(nodes[_idx(nodes.len, xParent)].len, LEFT_var)] = y;
        } else {
            nodes[_idx(nodes.len, xParent)][_idx(nodes[_idx(nodes.len, xParent)].len, RIGHT_var)] = y;
        }
    }
    nodes[_idx(nodes.len, y)][_idx(nodes[_idx(nodes.len, y)].len, LEFT_var)] = x;
    nodes[_idx(nodes.len, x)][_idx(nodes[_idx(nodes.len, x)].len, PARENT_var)] = y;
    t_param.nodes = nodes;
    return t_param.*;
}

fn rotate_right(t_param_1: *RBTree, x_1: i64) RBTree {
    var nodes_1: [][]i64 = t_param_1.nodes;
    nodes_1 = nodes_1;
    const y_1: i64 = nodes_1[_idx(nodes_1.len, x_1)][_idx(nodes_1[_idx(nodes_1.len, x_1)].len, LEFT_var)];
    const yRight: i64 = nodes_1[_idx(nodes_1.len, y_1)][_idx(nodes_1[_idx(nodes_1.len, y_1)].len, RIGHT_var)];
    nodes_1[_idx(nodes_1.len, x_1)][_idx(nodes_1[_idx(nodes_1.len, x_1)].len, LEFT_var)] = yRight;
    if (yRight != NEG_ONE_var) {
        nodes_1[_idx(nodes_1.len, yRight)][_idx(nodes_1[_idx(nodes_1.len, yRight)].len, PARENT_var)] = x_1;
    }
    const xParent_1: i64 = nodes_1[_idx(nodes_1.len, x_1)][_idx(nodes_1[_idx(nodes_1.len, x_1)].len, PARENT_var)];
    nodes_1[_idx(nodes_1.len, y_1)][_idx(nodes_1[_idx(nodes_1.len, y_1)].len, PARENT_var)] = xParent_1;
    if (xParent_1 == NEG_ONE_var) {
        t_param_1.root = y_1;
    } else {
        if (x_1 == nodes_1[_idx(nodes_1.len, xParent_1)][_idx(nodes_1[_idx(nodes_1.len, xParent_1)].len, RIGHT_var)]) {
            nodes_1[_idx(nodes_1.len, xParent_1)][_idx(nodes_1[_idx(nodes_1.len, xParent_1)].len, RIGHT_var)] = y_1;
        } else {
            nodes_1[_idx(nodes_1.len, xParent_1)][_idx(nodes_1[_idx(nodes_1.len, xParent_1)].len, LEFT_var)] = y_1;
        }
    }
    nodes_1[_idx(nodes_1.len, y_1)][_idx(nodes_1[_idx(nodes_1.len, y_1)].len, RIGHT_var)] = x_1;
    nodes_1[_idx(nodes_1.len, x_1)][_idx(nodes_1[_idx(nodes_1.len, x_1)].len, PARENT_var)] = y_1;
    t_param_1.nodes = nodes_1;
    return t_param_1.*;
}

fn insert_fix(t_param_2: *RBTree, z_param: i64) RBTree {
    var z_var: i64 = z_param;
    z_var = z_var;
    var nodes_2: [][]i64 = t_param_2.nodes;
    nodes_2 = nodes_2;
    while (z_var != t_param_2.root and nodes_2[_idx(nodes_2.len, nodes_2[_idx(nodes_2.len, z_var)][_idx(nodes_2[_idx(nodes_2.len, z_var)].len, PARENT_var)])][_idx(nodes_2[_idx(nodes_2.len, nodes_2[_idx(nodes_2.len, z_var)][_idx(nodes_2[_idx(nodes_2.len, z_var)].len, PARENT_var)])].len, COLOR_var)] == 1) {
        if (nodes_2[_idx(nodes_2.len, z_var)][_idx(nodes_2[_idx(nodes_2.len, z_var)].len, PARENT_var)] == nodes_2[_idx(nodes_2.len, nodes_2[_idx(nodes_2.len, nodes_2[_idx(nodes_2.len, z_var)][_idx(nodes_2[_idx(nodes_2.len, z_var)].len, PARENT_var)])][_idx(nodes_2[_idx(nodes_2.len, nodes_2[_idx(nodes_2.len, z_var)][_idx(nodes_2[_idx(nodes_2.len, z_var)].len, PARENT_var)])].len, PARENT_var)])][_idx(nodes_2[_idx(nodes_2.len, nodes_2[_idx(nodes_2.len, nodes_2[_idx(nodes_2.len, z_var)][_idx(nodes_2[_idx(nodes_2.len, z_var)].len, PARENT_var)])][_idx(nodes_2[_idx(nodes_2.len, nodes_2[_idx(nodes_2.len, z_var)][_idx(nodes_2[_idx(nodes_2.len, z_var)].len, PARENT_var)])].len, PARENT_var)])].len, LEFT_var)]) {
            const y_2: i64 = nodes_2[_idx(nodes_2.len, nodes_2[_idx(nodes_2.len, nodes_2[_idx(nodes_2.len, z_var)][_idx(nodes_2[_idx(nodes_2.len, z_var)].len, PARENT_var)])][_idx(nodes_2[_idx(nodes_2.len, nodes_2[_idx(nodes_2.len, z_var)][_idx(nodes_2[_idx(nodes_2.len, z_var)].len, PARENT_var)])].len, PARENT_var)])][_idx(nodes_2[_idx(nodes_2.len, nodes_2[_idx(nodes_2.len, nodes_2[_idx(nodes_2.len, z_var)][_idx(nodes_2[_idx(nodes_2.len, z_var)].len, PARENT_var)])][_idx(nodes_2[_idx(nodes_2.len, nodes_2[_idx(nodes_2.len, z_var)][_idx(nodes_2[_idx(nodes_2.len, z_var)].len, PARENT_var)])].len, PARENT_var)])].len, RIGHT_var)];
            if (y_2 != NEG_ONE_var and nodes_2[_idx(nodes_2.len, y_2)][_idx(nodes_2[_idx(nodes_2.len, y_2)].len, COLOR_var)] == 1) {
                nodes_2[_idx(nodes_2.len, nodes_2[_idx(nodes_2.len, z_var)][_idx(nodes_2[_idx(nodes_2.len, z_var)].len, PARENT_var)])][_idx(nodes_2[_idx(nodes_2.len, nodes_2[_idx(nodes_2.len, z_var)][_idx(nodes_2[_idx(nodes_2.len, z_var)].len, PARENT_var)])].len, COLOR_var)] = 0;
                nodes_2[_idx(nodes_2.len, y_2)][_idx(nodes_2[_idx(nodes_2.len, y_2)].len, COLOR_var)] = 0;
                const gp: i64 = nodes_2[_idx(nodes_2.len, nodes_2[_idx(nodes_2.len, z_var)][_idx(nodes_2[_idx(nodes_2.len, z_var)].len, PARENT_var)])][_idx(nodes_2[_idx(nodes_2.len, nodes_2[_idx(nodes_2.len, z_var)][_idx(nodes_2[_idx(nodes_2.len, z_var)].len, PARENT_var)])].len, PARENT_var)];
                nodes_2[_idx(nodes_2.len, gp)][_idx(nodes_2[_idx(nodes_2.len, gp)].len, COLOR_var)] = 1;
                z_var = gp;
            } else {
                if (z_var == nodes_2[_idx(nodes_2.len, nodes_2[_idx(nodes_2.len, z_var)][_idx(nodes_2[_idx(nodes_2.len, z_var)].len, PARENT_var)])][_idx(nodes_2[_idx(nodes_2.len, nodes_2[_idx(nodes_2.len, z_var)][_idx(nodes_2[_idx(nodes_2.len, z_var)].len, PARENT_var)])].len, RIGHT_var)]) {
                    z_var = nodes_2[_idx(nodes_2.len, z_var)][_idx(nodes_2[_idx(nodes_2.len, z_var)].len, PARENT_var)];
                    t_param_2.nodes = nodes_2;
                    t_param_2.* = rotate_left(t_param_2, z_var);
                    nodes_2 = t_param_2.nodes;
                }
                nodes_2[_idx(nodes_2.len, nodes_2[_idx(nodes_2.len, z_var)][_idx(nodes_2[_idx(nodes_2.len, z_var)].len, PARENT_var)])][_idx(nodes_2[_idx(nodes_2.len, nodes_2[_idx(nodes_2.len, z_var)][_idx(nodes_2[_idx(nodes_2.len, z_var)].len, PARENT_var)])].len, COLOR_var)] = 0;
                const gp_1: i64 = nodes_2[_idx(nodes_2.len, nodes_2[_idx(nodes_2.len, z_var)][_idx(nodes_2[_idx(nodes_2.len, z_var)].len, PARENT_var)])][_idx(nodes_2[_idx(nodes_2.len, nodes_2[_idx(nodes_2.len, z_var)][_idx(nodes_2[_idx(nodes_2.len, z_var)].len, PARENT_var)])].len, PARENT_var)];
                nodes_2[_idx(nodes_2.len, gp_1)][_idx(nodes_2[_idx(nodes_2.len, gp_1)].len, COLOR_var)] = 1;
                t_param_2.nodes = nodes_2;
                t_param_2.* = rotate_right(t_param_2, gp_1);
                nodes_2 = t_param_2.nodes;
            }
        } else {
            const y_3: i64 = nodes_2[_idx(nodes_2.len, nodes_2[_idx(nodes_2.len, nodes_2[_idx(nodes_2.len, z_var)][_idx(nodes_2[_idx(nodes_2.len, z_var)].len, PARENT_var)])][_idx(nodes_2[_idx(nodes_2.len, nodes_2[_idx(nodes_2.len, z_var)][_idx(nodes_2[_idx(nodes_2.len, z_var)].len, PARENT_var)])].len, PARENT_var)])][_idx(nodes_2[_idx(nodes_2.len, nodes_2[_idx(nodes_2.len, nodes_2[_idx(nodes_2.len, z_var)][_idx(nodes_2[_idx(nodes_2.len, z_var)].len, PARENT_var)])][_idx(nodes_2[_idx(nodes_2.len, nodes_2[_idx(nodes_2.len, z_var)][_idx(nodes_2[_idx(nodes_2.len, z_var)].len, PARENT_var)])].len, PARENT_var)])].len, LEFT_var)];
            if (y_3 != NEG_ONE_var and nodes_2[_idx(nodes_2.len, y_3)][_idx(nodes_2[_idx(nodes_2.len, y_3)].len, COLOR_var)] == 1) {
                nodes_2[_idx(nodes_2.len, nodes_2[_idx(nodes_2.len, z_var)][_idx(nodes_2[_idx(nodes_2.len, z_var)].len, PARENT_var)])][_idx(nodes_2[_idx(nodes_2.len, nodes_2[_idx(nodes_2.len, z_var)][_idx(nodes_2[_idx(nodes_2.len, z_var)].len, PARENT_var)])].len, COLOR_var)] = 0;
                nodes_2[_idx(nodes_2.len, y_3)][_idx(nodes_2[_idx(nodes_2.len, y_3)].len, COLOR_var)] = 0;
                const gp_2: i64 = nodes_2[_idx(nodes_2.len, nodes_2[_idx(nodes_2.len, z_var)][_idx(nodes_2[_idx(nodes_2.len, z_var)].len, PARENT_var)])][_idx(nodes_2[_idx(nodes_2.len, nodes_2[_idx(nodes_2.len, z_var)][_idx(nodes_2[_idx(nodes_2.len, z_var)].len, PARENT_var)])].len, PARENT_var)];
                nodes_2[_idx(nodes_2.len, gp_2)][_idx(nodes_2[_idx(nodes_2.len, gp_2)].len, COLOR_var)] = 1;
                z_var = gp_2;
            } else {
                if (z_var == nodes_2[_idx(nodes_2.len, nodes_2[_idx(nodes_2.len, z_var)][_idx(nodes_2[_idx(nodes_2.len, z_var)].len, PARENT_var)])][_idx(nodes_2[_idx(nodes_2.len, nodes_2[_idx(nodes_2.len, z_var)][_idx(nodes_2[_idx(nodes_2.len, z_var)].len, PARENT_var)])].len, LEFT_var)]) {
                    z_var = nodes_2[_idx(nodes_2.len, z_var)][_idx(nodes_2[_idx(nodes_2.len, z_var)].len, PARENT_var)];
                    t_param_2.nodes = nodes_2;
                    t_param_2.* = rotate_right(t_param_2, z_var);
                    nodes_2 = t_param_2.nodes;
                }
                nodes_2[_idx(nodes_2.len, nodes_2[_idx(nodes_2.len, z_var)][_idx(nodes_2[_idx(nodes_2.len, z_var)].len, PARENT_var)])][_idx(nodes_2[_idx(nodes_2.len, nodes_2[_idx(nodes_2.len, z_var)][_idx(nodes_2[_idx(nodes_2.len, z_var)].len, PARENT_var)])].len, COLOR_var)] = 0;
                const gp_3: i64 = nodes_2[_idx(nodes_2.len, nodes_2[_idx(nodes_2.len, z_var)][_idx(nodes_2[_idx(nodes_2.len, z_var)].len, PARENT_var)])][_idx(nodes_2[_idx(nodes_2.len, nodes_2[_idx(nodes_2.len, z_var)][_idx(nodes_2[_idx(nodes_2.len, z_var)].len, PARENT_var)])].len, PARENT_var)];
                nodes_2[_idx(nodes_2.len, gp_3)][_idx(nodes_2[_idx(nodes_2.len, gp_3)].len, COLOR_var)] = 1;
                t_param_2.nodes = nodes_2;
                t_param_2.* = rotate_left(t_param_2, gp_3);
                nodes_2 = t_param_2.nodes;
            }
        }
    }
    nodes_2 = t_param_2.nodes;
    nodes_2[_idx(nodes_2.len, t_param_2.root)][_idx(nodes_2[_idx(nodes_2.len, t_param_2.root)].len, COLOR_var)] = 0;
    t_param_2.nodes = nodes_2;
    return t_param_2.*;
}

fn tree_insert(t_param_3: *RBTree, v: i64) RBTree {
    var nodes_3: [][]i64 = t_param_3.nodes;
    nodes_3 = nodes_3;
    const node: []i64 = blk0: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.append(v) catch unreachable; _tmp.append(1) catch unreachable; _tmp.append(0 -% 1) catch unreachable; _tmp.append(0 -% 1) catch unreachable; _tmp.append(0 -% 1) catch unreachable; break :blk0 (_tmp.toOwnedSlice() catch unreachable); };
    nodes_3 = blk1: { var _tmp_1 = std.ArrayList([]i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_1.appendSlice(@as([]const []i64, nodes_3)) catch |err| handleError(err); _tmp_1.append(node) catch |err| handleError(err); break :blk1 (_tmp_1.toOwnedSlice() catch |err| handleError(err)); };
    const idx: i64 = @as(i64, @intCast(nodes_3.len)) -% 1;
    var y_4: i64 = NEG_ONE_var;
    y_4 = y_4;
    var x_2: i64 = t_param_3.root;
    x_2 = x_2;
    while (x_2 != NEG_ONE_var) {
        y_4 = x_2;
        if (v < nodes_3[_idx(nodes_3.len, x_2)][_idx(nodes_3[_idx(nodes_3.len, x_2)].len, LABEL_var)]) {
            x_2 = nodes_3[_idx(nodes_3.len, x_2)][_idx(nodes_3[_idx(nodes_3.len, x_2)].len, LEFT_var)];
        } else {
            x_2 = nodes_3[_idx(nodes_3.len, x_2)][_idx(nodes_3[_idx(nodes_3.len, x_2)].len, RIGHT_var)];
        }
    }
    nodes_3[_idx(nodes_3.len, idx)][_idx(nodes_3[_idx(nodes_3.len, idx)].len, PARENT_var)] = y_4;
    if (y_4 == NEG_ONE_var) {
        t_param_3.root = idx;
    } else {
        if (v < nodes_3[_idx(nodes_3.len, y_4)][_idx(nodes_3[_idx(nodes_3.len, y_4)].len, LABEL_var)]) {
            nodes_3[_idx(nodes_3.len, y_4)][_idx(nodes_3[_idx(nodes_3.len, y_4)].len, LEFT_var)] = idx;
        } else {
            nodes_3[_idx(nodes_3.len, y_4)][_idx(nodes_3[_idx(nodes_3.len, y_4)].len, RIGHT_var)] = idx;
        }
    }
    t_param_3.nodes = nodes_3;
    t_param_3.* = insert_fix(t_param_3, idx);
    return t_param_3.*;
}

fn inorder(t: *const RBTree, x_3: i64, acc_param: []i64) []i64 {
    var acc_var: []i64 = acc_param;
    acc_var = acc_var;
    if (x_3 == NEG_ONE_var) {
        return acc_var;
    }
    acc_var = inorder(t, t.nodes[_idx(t.nodes.len, x_3)][_idx(t.nodes[_idx(t.nodes.len, x_3)].len, LEFT_var)], acc_var);
    acc_var = blk2: { var _tmp_2 = std.ArrayList(i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_2.appendSlice(@as([]const i64, acc_var)) catch |err| handleError(err); _tmp_2.append(t.nodes[_idx(t.nodes.len, x_3)][_idx(t.nodes[_idx(t.nodes.len, x_3)].len, LABEL_var)]) catch |err| handleError(err); break :blk2 (_tmp_2.toOwnedSlice() catch |err| handleError(err)); };
    acc_var = inorder(t, t.nodes[_idx(t.nodes.len, x_3)][_idx(t.nodes[_idx(t.nodes.len, x_3)].len, RIGHT_var)], acc_var);
    return acc_var;
}

fn mochi_main() void {
    var t_1: RBTree = make_tree();
    t_1 = t_1;
    const values: []i64 = blk3: { var _tmp_3 = [7]i64{10, 20, 30, 15, 25, 5, 1}; break :blk3 _tmp_3[0..]; };
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(values.len))) {
        t_1 = tree_insert(&t_1, values[_idx(values.len, i)]);
        i = i +% 1;
    }
    var res: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    res = res;
    res = inorder(&t_1, t_1.root, res);
    std.debug.print("{s}\n", .{_str(res)});
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        NEG_ONE_var = 0 -% 1;
        mochi_main();
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
