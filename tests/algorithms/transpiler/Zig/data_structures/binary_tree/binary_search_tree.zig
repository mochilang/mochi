// Generated by Mochi Zig transpiler on 2025-08-07 16:16 +0700
const std = @import("std");
const Value = union(enum) { Null: void, Int: i64, Float: f64, Str: []const u8, Bool: bool, List: []Value, StrList: [][]const u8, };

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn create_node(value: i64) []Value {
    return blk0: { var _tmp0 = std.heap.page_allocator.alloc(Value, 3) catch unreachable; _tmp0[0] = Value{.Int = value}; _tmp0[1] = Value{.Null = {}}; _tmp0[2] = Value{.Null = {}}; break :blk0 _tmp0; };
}

fn insert(node: []Value, value: i64) []Value {
    if (node.len == 0) {
        return create_node(value);
    }
    if (value < node[@as(usize, @intCast(0))].Int) {
        node[@as(usize, @intCast(1))] = Value{.List = insert(node[@as(usize, @intCast(1))].List, value)};
    } else {
        if (value > node[@as(usize, @intCast(0))].Int) {
            node[@as(usize, @intCast(2))] = Value{.List = insert(node[@as(usize, @intCast(2))].List, value)};
        }
    }
    return node;
}

fn search(node: []Value, value: i64) bool {
    if (node.len == 0) {
        return false;
    }
    if (value == node[@as(usize, @intCast(0))].Int) {
        return true;
    }
    if (value < node[@as(usize, @intCast(0))].Int) {
        return search(node[@as(usize, @intCast(1))].List, value);
    }
    return search(node[@as(usize, @intCast(2))].List, value);
}

fn inorder(node: []Value, acc: []i64) []i64 {
    if (node.len == 0) {
        return acc;
    }
    var left_acc: []i64 = inorder(node[@as(usize, @intCast(1))].List, acc);
    left_acc = left_acc;
    var with_node: []i64 = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, left_acc)) catch |err| handleError(err); _tmp.append(node[@as(usize, @intCast(0))].Int) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
    with_node = with_node;
    return inorder(node[@as(usize, @intCast(2))].List, with_node);
}

fn find_min(node: []Value) i64 {
    var current: []Value = blk: { const tmp = std.heap.page_allocator.alloc(Value, node.len) catch unreachable; @memcpy(tmp, node); break :blk tmp; };
    current = current;
    while (current[@as(usize, @intCast(1))] != .Null) {
        current = current[@as(usize, @intCast(1))].List;
    }
    return current[@as(usize, @intCast(0))].Int;
}

fn find_max(node: []Value) i64 {
    var current: []Value = blk: { const tmp = std.heap.page_allocator.alloc(Value, node.len) catch unreachable; @memcpy(tmp, node); break :blk tmp; };
    current = current;
    while (current[@as(usize, @intCast(2))] != .Null) {
        current = current[@as(usize, @intCast(2))].List;
    }
    return current[@as(usize, @intCast(0))].Int;
}

fn delete(node: []Value, value: i64) []Value {
    if (node.len == 0) {
        return &[_]Value{};
    }
    if (value < node[@as(usize, @intCast(0))].Int) {
        node[@as(usize, @intCast(1))] = Value{.List = delete(node[@as(usize, @intCast(1))].List, value)};
    } else {
        if (value > node[@as(usize, @intCast(0))].Int) {
            node[@as(usize, @intCast(2))] = Value{.List = delete(node[@as(usize, @intCast(2))].List, value)};
        } else {
            if (node[@as(usize, @intCast(1))] == .Null) {
                return node[@as(usize, @intCast(2))].List;
            }
            if (node[@as(usize, @intCast(2))] == .Null) {
                return node[@as(usize, @intCast(1))].List;
            }
            var min_val: i64 = find_min(node[@as(usize, @intCast(2))].List);
            min_val = min_val;
            node[@as(usize, @intCast(0))] = Value{.Int = min_val};
            node[@as(usize, @intCast(2))] = Value{.List = delete(node[@as(usize, @intCast(2))].List, min_val)};
        }
    }
    return node;
}

fn mochi_main() void {
    var root: []Value = &[_]Value{};
    root = root;
    var nums: []i64 = blk1: { var _tmp1 = std.heap.page_allocator.alloc(i64, 9) catch unreachable; _tmp1[0] = 8; _tmp1[1] = 3; _tmp1[2] = 6; _tmp1[3] = 1; _tmp1[4] = 10; _tmp1[5] = 14; _tmp1[6] = 13; _tmp1[7] = 4; _tmp1[8] = 7; break :blk1 _tmp1; };
    nums = nums;
    for (nums) |__it0| {
        const v = __it0;
        root = insert(root, v);
    }
    std.debug.print("{s}\n", .{_str(inorder(root, &[_]i64{}))});
    std.debug.print("{s}\n", .{_str(search(root, 6))});
    std.debug.print("{s}\n", .{_str(search(root, 20))});
    std.debug.print("{s}\n", .{_str(find_min(root))});
    std.debug.print("{s}\n", .{_str(find_max(root))});
    root = delete(root, 6);
    std.debug.print("{s}\n", .{_str(inorder(root, &[_]i64{}))});
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        mochi_main();
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    if (@TypeOf(v) == Value) {
        return switch (v) {
            .Int => std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v.Int}) catch unreachable,
            .Float => std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v.Float}) catch unreachable,
            .Str => std.fmt.allocPrint(std.heap.page_allocator, "'{s}'", .{v.Str}) catch unreachable,
            .Bool => if (v.Bool) "true" else "false",
            .List => _str(v.List),
            .StrList => _str(v.StrList),
            else => "null",
        };
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * std.mem.page_size;
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
