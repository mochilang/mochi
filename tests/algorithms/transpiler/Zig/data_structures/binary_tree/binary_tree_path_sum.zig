// Generated by Mochi Zig transpiler on 2025-08-08 15:49 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const Node = struct {
    left: i64,
    value: i64,
    right: i64,
};

fn dfs(node: ?*Node, target: i64, current: i64) i64 {
    return if (node == Empty) 0 else if (node == Node(l, v, r)) if (current + v == target) 1 else 0 + dfs(l, target, current + v) + dfs(r, target, current + v) else "";
}

fn path_sum(node: ?*Node, target: i64) i64 {
    return if (node == Empty) 0 else if (node == Node(l, v, r)) dfs(node, target, 0) + path_sum(l, target) + path_sum(r, target) else "";
}

fn sample_tree_one() ?*Node {
    return .{ .value = 10, .left = .{ .value = 5, .left = .{ .value = 3, .left = .{ .value = 3, .left = Empty, .right = Empty }, .right = .{ .value = 0 - 2, .left = Empty, .right = Empty } }, .right = .{ .value = 2, .left = Empty, .right = .{ .value = 1, .left = Empty, .right = Empty } } }, .right = .{ .value = 0 - 3, .left = Empty, .right = .{ .value = 11, .left = Empty, .right = Empty } } };
}

fn sample_tree_two() ?*Node {
    return .{ .value = 10, .left = .{ .value = 5, .left = .{ .value = 3, .left = .{ .value = 3, .left = Empty, .right = Empty }, .right = .{ .value = 0 - 2, .left = Empty, .right = Empty } }, .right = .{ .value = 2, .left = Empty, .right = .{ .value = 1, .left = Empty, .right = Empty } } }, .right = .{ .value = 0 - 3, .left = Empty, .right = .{ .value = 10, .left = Empty, .right = Empty } } };
}

fn mochi_main() void {
    var tree1: ?*Node = sample_tree_one();
    tree1 = tree1;
    std.debug.print("{s}\n", .{_str(path_sum(tree1, 8))});
    std.debug.print("{s}\n", .{_str(path_sum(tree1, 7))});
    var tree2: ?*Node = sample_tree_two();
    tree2 = tree2;
    std.debug.print("{s}\n", .{_str(path_sum(tree2, 8))});
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        mochi_main();
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const Pair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(Pair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(Pair, pairs.items, {}, struct {
                pub fn less(_: void, a: Pair, b: Pair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * std.mem.page_size;
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
