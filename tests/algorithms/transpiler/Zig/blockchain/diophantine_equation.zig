// Generated by Mochi Zig transpiler on 2025-08-06 21:31 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

var s1_var: []i64 = &[_]i64{};
var sols_var: [][]i64 = &[_][]i64{};
var j_var: i64 = 0;

fn gcd(a: i64, b: i64) i64 {
    var x: i64 = if (a < 0) 0 - a else a;
    var y: i64 = if (b < 0) 0 - b else b;
    while (y != 0) {
        const t: i64 = @mod(x, y);
        x = y;
        y = t;
    }
    return x;
}

fn extended_gcd(a_1: i64, b_1: i64) []i64 {
    if (b_1 == 0) {
        return blk0: { var _tmp0 = std.heap.page_allocator.alloc(i64, 3) catch unreachable; _tmp0[0] = a_1; _tmp0[1] = 1; _tmp0[2] = 0; break :blk0 _tmp0; };
    }
    const res: []i64 = extended_gcd(b_1, @mod(a_1, b_1));
    const d: i64 = res[@as(usize, @intCast(0))];
    const p: i64 = res[@as(usize, @intCast(1))];
    const q: i64 = res[@as(usize, @intCast(2))];
    const x: i64 = q;
    const y: i64 = p - q * (@divTrunc(a_1, b_1));
    return blk1: { var _tmp1 = std.heap.page_allocator.alloc(i64, 3) catch unreachable; _tmp1[0] = d; _tmp1[1] = x; _tmp1[2] = y; break :blk1 _tmp1; };
}

fn diophantine(a_2: i64, b_2: i64, c: i64) []i64 {
    const d: i64 = gcd(a_2, b_2);
    if (@mod(c, d) != 0) {
        @panic("No solution");
    }
    const eg: []i64 = extended_gcd(a_2, b_2);
    const r: i64 = @divTrunc(c, d);
    const x: i64 = eg[@as(usize, @intCast(1))] * r;
    const y: i64 = eg[@as(usize, @intCast(2))] * r;
    return blk2: { var _tmp2 = std.heap.page_allocator.alloc(i64, 2) catch unreachable; _tmp2[0] = x; _tmp2[1] = y; break :blk2 _tmp2; };
}

fn diophantine_all_soln(a_3: i64, b_3: i64, c_1: i64, n: i64) [][]i64 {
    const base: []i64 = diophantine(a_3, b_3, c_1);
    const x0: i64 = base[@as(usize, @intCast(0))];
    const y0: i64 = base[@as(usize, @intCast(1))];
    const d: i64 = gcd(a_3, b_3);
    const p: i64 = @divTrunc(a_3, d);
    const q: i64 = @divTrunc(b_3, d);
    var sols_var_1: [][]i64 = &[_][]i64{};
    var i: i64 = 0;
    while (i < n) {
        const x: i64 = x0 + i * q;
        const y: i64 = y0 - i * p;
        sols_var_1 = blk: { var _tmp = std.ArrayList([]i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []i64, sols_var_1)) catch |err| handleError(err); _tmp.append(blk3: { var _tmp3 = std.heap.page_allocator.alloc(i64, 2) catch unreachable; _tmp3[0] = x; _tmp3[1] = y; break :blk3 _tmp3; }) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    return sols_var_1;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        s1_var = diophantine(10, 6, 14);
        sols_var = diophantine_all_soln(10, 6, 14, 4);
        std.debug.print("{s}\n", .{_str(s1_var)});
        while (j_var < @as(i64, @intCast(sols_var.len))) {
            std.debug.print("{s}\n", .{_str(sols_var[@as(usize, @intCast(j_var))])});
            j_var = j_var + 1;
        }
        std.debug.print("{s}\n", .{_str(diophantine(391, 299, 0 - 69))});
        std.debug.print("{s}\n", .{_str(extended_gcd(10, 6))});
        std.debug.print("{s}\n", .{_str(extended_gcd(7, 5))});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    if (info == .Pointer and info.Pointer.size == .Slice) {
        var out = std.ArrayList(u8).init(std.heap.page_allocator);
        defer out.deinit();
        out.append('[') catch unreachable;
        for (v, 0..) |e, i| {
            if (i != 0) { out.append(' ') catch unreachable; }
            const s = _str(e);
            out.appendSlice(s) catch unreachable;
        }
        out.append(']') catch unreachable;
        return out.toOwnedSlice() catch unreachable;
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * std.mem.page_size;
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
