// Generated by Mochi Zig transpiler on 2025-08-07 14:57 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

var initial_var: []i64 = &[_]i64{};
var cells_var: [][]i64 = &[_][]i64{};
var rules_var: []i64 = &[_]i64{};
var time_var: i64 = 0;
var t_var: i64 = 0;

fn format_ruleset(ruleset: i64) []i64 {
    var rs: i64 = ruleset;
    rs = rs;
    var bits_rev: []i64 = &[_]i64{};
    bits_rev = bits_rev;
    var i: i64 = 0;
    i = i;
    while (i < 8) {
        bits_rev = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, bits_rev)) catch |err| handleError(err); _tmp.append(@mod(rs, 2)) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        rs = @divTrunc(rs, 2);
        i = i + 1;
    }
    var bits: []i64 = &[_]i64{};
    bits = bits;
    var j: i64 = @as(i64, @intCast(bits_rev.len)) - 1;
    j = j;
    while (j >= 0) {
        bits = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, bits)) catch |err| handleError(err); _tmp.append(bits_rev[@as(usize, @intCast(j))]) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        j = j - 1;
    }
    return bits;
}

fn new_generation(cells_param: [][]i64, rules_param: []i64, time_param: i64) []i64 {
    var population: i64 = @as(i64, @intCast(cells_param[@as(usize, @intCast(0))].len));
    population = population;
    var next_generation: []i64 = &[_]i64{};
    next_generation = next_generation;
    var i: i64 = 0;
    i = i;
    while (i < population) {
        var left_neighbor: i64 = if (i == 0) 0 else cells_param[@as(usize, @intCast(time_param))][@as(usize, @intCast(i - 1))];
        left_neighbor = left_neighbor;
        var right_neighbor: i64 = if (i == population - 1) 0 else cells_param[@as(usize, @intCast(time_param))][@as(usize, @intCast(i + 1))];
        right_neighbor = right_neighbor;
        var center: i64 = cells_param[@as(usize, @intCast(time_param))][@as(usize, @intCast(i))];
        center = center;
        var idx: i64 = 7 - (left_neighbor * 4 + center * 2 + right_neighbor);
        idx = idx;
        next_generation = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, next_generation)) catch |err| handleError(err); _tmp.append(rules_param[@as(usize, @intCast(idx))]) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    return next_generation;
}

fn cells_to_string(row: []i64) []const u8 {
    var result: []const u8 = "";
    result = result;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(row.len))) {
        if (row[@as(usize, @intCast(i))] == 1) {
            result = _concat_string(result, "#");
        } else {
            result = _concat_string(result, ".");
        }
        i = i + 1;
    }
    return result;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        initial_var = blk0: { var _tmp0 = std.heap.page_allocator.alloc(i64, 31) catch unreachable; _tmp0[0] = 0; _tmp0[1] = 0; _tmp0[2] = 0; _tmp0[3] = 0; _tmp0[4] = 0; _tmp0[5] = 0; _tmp0[6] = 0; _tmp0[7] = 0; _tmp0[8] = 0; _tmp0[9] = 0; _tmp0[10] = 0; _tmp0[11] = 0; _tmp0[12] = 0; _tmp0[13] = 0; _tmp0[14] = 0; _tmp0[15] = 1; _tmp0[16] = 0; _tmp0[17] = 0; _tmp0[18] = 0; _tmp0[19] = 0; _tmp0[20] = 0; _tmp0[21] = 0; _tmp0[22] = 0; _tmp0[23] = 0; _tmp0[24] = 0; _tmp0[25] = 0; _tmp0[26] = 0; _tmp0[27] = 0; _tmp0[28] = 0; _tmp0[29] = 0; _tmp0[30] = 0; break :blk0 _tmp0; };
        cells_var = blk1: { var _tmp1 = std.heap.page_allocator.alloc([]i64, 1) catch unreachable; _tmp1[0] = initial_var; break :blk1 _tmp1; };
        rules_var = format_ruleset(30);
        while (time_var < 16) {
            var next: []i64 = new_generation(cells_var, rules_var, time_var);
            next = next;
            cells_var = blk: { var _tmp = std.ArrayList([]i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []i64, cells_var)) catch |err| handleError(err); _tmp.append(next) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            time_var = time_var + 1;
        }
        while (t_var < @as(i64, @intCast(cells_var.len))) {
            std.debug.print("{s}\n", .{cells_to_string(cells_var[@as(usize, @intCast(t_var))])});
            t_var = t_var + 1;
        }
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * std.mem.page_size;
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
