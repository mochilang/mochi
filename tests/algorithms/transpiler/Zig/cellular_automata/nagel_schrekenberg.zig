// Generated by Mochi Zig transpiler on 2025-08-07 14:57 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

var seed_var: i64 = 1;
var NEG_ONE_var: i64 = 0;

fn rand() i64 {
    seed_var = @mod(seed_var * 1103515245 + 12345, 2147483648);
    return seed_var;
}

fn randint(a: i64, b: i64) i64 {
    var r: i64 = rand();
    r = r;
    return a + @mod(r, b - a + 1);
}

fn random() f64 {
    return 1.0 * @as(f64, @floatFromInt(rand())) / 2147483648.0;
}

fn construct_highway(number_of_cells: i64, frequency: i64, initial_speed_param: i64, random_frequency: bool, random_speed: bool, max_speed: i64) [][]i64 {
    var initial_speed_var: i64 = initial_speed_param;
    initial_speed_var = initial_speed_var;
    var row: []i64 = &[_]i64{};
    row = row;
    var i: i64 = 0;
    i = i;
    while (i < number_of_cells) {
        row = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, row)) catch |err| handleError(err); _tmp.append(0 - 1) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    var highway: [][]i64 = &[_][]i64{};
    highway = highway;
    highway = blk: { var _tmp = std.ArrayList([]i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []i64, highway)) catch |err| handleError(err); _tmp.append(row) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
    i = 0;
    if (initial_speed_var < 0) {
        initial_speed_var = 0;
    }
    while (i < number_of_cells) {
        var speed: i64 = initial_speed_var;
        speed = speed;
        if (random_speed) {
            speed = randint(0, max_speed);
        }
        highway[@as(usize, @intCast(0))][@as(usize, @intCast(i))] = speed;
        var step: i64 = frequency;
        step = step;
        if (random_frequency) {
            step = randint(1, max_speed * 2);
        }
        i = i + step;
    }
    return highway;
}

fn get_distance(highway_now: []i64, car_index: i64) i64 {
    var distance: i64 = 0;
    distance = distance;
    var i: i64 = car_index + 1;
    i = i;
    while (i < @as(i64, @intCast(highway_now.len))) {
        if (highway_now[@as(usize, @intCast(i))] > NEG_ONE_var) {
            return distance;
        }
        distance = distance + 1;
        i = i + 1;
    }
    return distance + get_distance(highway_now, 0 - 1);
}

fn update(highway_now: []i64, probability: f64, max_speed: i64) []i64 {
    var number_of_cells: i64 = @as(i64, @intCast(highway_now.len));
    number_of_cells = number_of_cells;
    var next_highway: []i64 = &[_]i64{};
    next_highway = next_highway;
    var i: i64 = 0;
    i = i;
    while (i < number_of_cells) {
        next_highway = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, next_highway)) catch |err| handleError(err); _tmp.append(0 - 1) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    var car_index: i64 = 0;
    car_index = car_index;
    while (car_index < number_of_cells) {
        var speed: i64 = highway_now[@as(usize, @intCast(car_index))];
        speed = speed;
        if (speed > NEG_ONE_var) {
            var new_speed: i64 = speed + 1;
            new_speed = new_speed;
            if (new_speed > max_speed) {
                new_speed = max_speed;
            }
            var dn: i64 = get_distance(highway_now, car_index) - 1;
            dn = dn;
            if (new_speed > dn) {
                new_speed = dn;
            }
            if (random() < probability) {
                new_speed = new_speed - 1;
                if (new_speed < 0) {
                    new_speed = 0;
                }
            }
            next_highway[@as(usize, @intCast(car_index))] = new_speed;
        }
        car_index = car_index + 1;
    }
    return next_highway;
}

fn simulate(highway_param: [][]i64, number_of_update: i64, probability: f64, max_speed: i64) [][]i64 {
    var highway_var: [][]i64 = highway_param;
    highway_var = highway_var;
    var number_of_cells: i64 = @as(i64, @intCast(highway_var[@as(usize, @intCast(0))].len));
    number_of_cells = number_of_cells;
    var i: i64 = 0;
    i = i;
    while (i < number_of_update) {
        var next_speeds: []i64 = update(highway_var[@as(usize, @intCast(i))], probability, max_speed);
        next_speeds = next_speeds;
        var real_next: []i64 = &[_]i64{};
        real_next = real_next;
        var j: i64 = 0;
        j = j;
        while (j < number_of_cells) {
            real_next = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, real_next)) catch |err| handleError(err); _tmp.append(0 - 1) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            j = j + 1;
        }
        var k: i64 = 0;
        k = k;
        while (k < number_of_cells) {
            var speed: i64 = next_speeds[@as(usize, @intCast(k))];
            speed = speed;
            if (speed > NEG_ONE_var) {
                var index: i64 = @mod(k + speed, number_of_cells);
                index = index;
                real_next[@as(usize, @intCast(index))] = speed;
            }
            k = k + 1;
        }
        highway_var = blk: { var _tmp = std.ArrayList([]i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []i64, highway_var)) catch |err| handleError(err); _tmp.append(real_next) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    return highway_var;
}

fn mochi_main() void {
    var ex1: [][]i64 = simulate(construct_highway(6, 3, 0, false, false, 2), 2, 0.0, 2);
    ex1 = ex1;
    std.debug.print("{s}\n", .{_str(ex1)});
    var ex2: [][]i64 = simulate(construct_highway(5, 2, 0 - 2, false, false, 2), 3, 0.0, 2);
    ex2 = ex2;
    std.debug.print("{s}\n", .{_str(ex2)});
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        NEG_ONE_var = 0 - 1;
        mochi_main();
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * std.mem.page_size;
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
