// Generated by Mochi Zig transpiler on 2025-08-07 14:57 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn create_board(width: i64, height: i64) [][]bool {
    var board: [][]bool = &[_][]bool{};
    board = board;
    var i: i64 = 0;
    i = i;
    while (i < height) {
        var row: []bool = &[_]bool{};
        row = row;
        var j: i64 = 0;
        j = j;
        while (j < width) {
            row = blk: { var _tmp = std.ArrayList(bool).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const bool, row)) catch |err| handleError(err); _tmp.append(true) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            j = j + 1;
        }
        board = blk: { var _tmp = std.ArrayList([]bool).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []bool, board)) catch |err| handleError(err); _tmp.append(row) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    return board;
}

fn move_ant(board: [][]bool, x_param: i64, y_param: i64, direction_param: i64) []i64 {
    var x_var: i64 = x_param;
    x_var = x_var;
    var y_var: i64 = y_param;
    y_var = y_var;
    var direction_var: i64 = direction_param;
    direction_var = direction_var;
    if (board[@as(usize, @intCast(x_var))][@as(usize, @intCast(y_var))]) {
        direction_var = @mod(direction_var + 1, 4);
    } else {
        direction_var = @mod(direction_var + 3, 4);
    }
    var old_x: i64 = x_var;
    old_x = old_x;
    var old_y: i64 = y_var;
    old_y = old_y;
    if (direction_var == 0) {
        x_var = x_var - 1;
    } else {
        if (direction_var == 1) {
            y_var = y_var + 1;
        } else {
            if (direction_var == 2) {
                x_var = x_var + 1;
            } else {
                y_var = y_var - 1;
            }
        }
    }
    board[@as(usize, @intCast(old_x))][@as(usize, @intCast(old_y))] = !(board[@as(usize, @intCast(old_x))][@as(usize, @intCast(old_y))]);
    return blk0: { var _tmp0 = std.heap.page_allocator.alloc(i64, 3) catch unreachable; _tmp0[0] = x_var; _tmp0[1] = y_var; _tmp0[2] = direction_var; break :blk0 _tmp0; };
}

fn langtons_ant(width: i64, height: i64, steps: i64) [][]bool {
    var board: [][]bool = create_board(width, height);
    board = board;
    var x: i64 = @divTrunc(width, 2);
    x = x;
    var y: i64 = @divTrunc(height, 2);
    y = y;
    var dir: i64 = 3;
    dir = dir;
    var s: i64 = 0;
    s = s;
    while (s < steps) {
        var state: []i64 = move_ant(board, x, y, dir);
        state = state;
        x = state[@as(usize, @intCast(0))];
        y = state[@as(usize, @intCast(1))];
        dir = state[@as(usize, @intCast(2))];
        s = s + 1;
    }
    return board;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * std.mem.page_size;
    }
    return 0;
}
