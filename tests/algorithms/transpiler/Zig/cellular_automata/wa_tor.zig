// Generated by Mochi Zig transpiler on 2025-08-07 14:57 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const WIDTH_var: i64 = 10;
const HEIGHT_var: i64 = 10;
const PREY_INITIAL_COUNT_var: i64 = 20;
const PREY_REPRODUCTION_TIME_var: i64 = 5;
const PREDATOR_INITIAL_COUNT_var: i64 = 5;
const PREDATOR_REPRODUCTION_TIME_var: i64 = 20;
const PREDATOR_INITIAL_ENERGY_var: i64 = 15;
const PREDATOR_FOOD_VALUE_var: i64 = 5;
const TYPE_PREY_var: i64 = 0;
const TYPE_PREDATOR_var: i64 = 1;
var seed_var: i64 = 123456789;
var board_var: [][]i64 = &[_][]i64{};
var entities_var: [][]i64 = &[_][]i64{};
var dr_var: []i64 = &[_]i64{};
var dc_var: []i64 = &[_]i64{};
var t_var: i64 = 0;

fn rand() i64 {
    seed_var = @mod(seed_var * 1103515245 + 12345, 2147483648);
    return seed_var;
}

fn rand_range(max: i64) i64 {
    return @mod(rand(), max);
}

fn shuffle(list_int: []i64) []i64 {
    var i: i64 = @as(i64, @intCast(list_int.len)) - 1;
    i = i;
    while (i > 0) {
        var j: i64 = rand_range(i + 1);
        j = j;
        var tmp: i64 = list_int[@as(usize, @intCast(i))];
        tmp = tmp;
        list_int[@as(usize, @intCast(i))] = list_int[@as(usize, @intCast(j))];
        list_int[@as(usize, @intCast(j))] = tmp;
        i = i - 1;
    }
    return list_int;
}

fn create_board() [][]i64 {
    var board_var_1: [][]i64 = &[_][]i64{};
    board_var_1 = board_var_1;
    var r: i64 = 0;
    r = r;
    while (r < HEIGHT_var) {
        var row: []i64 = &[_]i64{};
        row = row;
        var c: i64 = 0;
        c = c;
        while (c < WIDTH_var) {
            row = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, row)) catch |err| handleError(err); _tmp.append(0) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            c = c + 1;
        }
        board_var_1 = blk: { var _tmp = std.ArrayList([]i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []i64, board_var_1)) catch |err| handleError(err); _tmp.append(row) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        r = r + 1;
    }
    return board_var_1;
}

fn create_prey(r: i64, c: i64) []i64 {
    return blk0: { var _tmp0 = std.heap.page_allocator.alloc(i64, 6) catch unreachable; _tmp0[0] = TYPE_PREY_var; _tmp0[1] = r; _tmp0[2] = c; _tmp0[3] = PREY_REPRODUCTION_TIME_var; _tmp0[4] = 0; _tmp0[5] = 1; break :blk0 _tmp0; };
}

fn create_predator(r: i64, c: i64) []i64 {
    return blk1: { var _tmp1 = std.heap.page_allocator.alloc(i64, 6) catch unreachable; _tmp1[0] = TYPE_PREDATOR_var; _tmp1[1] = r; _tmp1[2] = c; _tmp1[3] = PREDATOR_REPRODUCTION_TIME_var; _tmp1[4] = PREDATOR_INITIAL_ENERGY_var; _tmp1[5] = 1; break :blk1 _tmp1; };
}

fn empty_cell(r: i64, c: i64) bool {
    return board_var[@as(usize, @intCast(r))][@as(usize, @intCast(c))] == 0;
}

fn add_entity(typ: i64) void {
    while (true) {
        var r: i64 = rand_range(HEIGHT_var);
        r = r;
        var c: i64 = rand_range(WIDTH_var);
        c = c;
        if (empty_cell(r, c)) {
            if (typ == TYPE_PREY_var) {
                board_var[@as(usize, @intCast(r))][@as(usize, @intCast(c))] = 1;
                entities_var = blk: { var _tmp = std.ArrayList([]i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []i64, entities_var)) catch |err| handleError(err); _tmp.append(create_prey(r, c)) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            } else {
                board_var[@as(usize, @intCast(r))][@as(usize, @intCast(c))] = 2;
                entities_var = blk: { var _tmp = std.ArrayList([]i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []i64, entities_var)) catch |err| handleError(err); _tmp.append(create_predator(r, c)) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            }
            return;
        }
    }
}

fn setup() void {
    var i: i64 = 0;
    i = i;
    while (i < PREY_INITIAL_COUNT_var) {
        add_entity(TYPE_PREY_var);
        i = i + 1;
    }
    i = 0;
    while (i < PREDATOR_INITIAL_COUNT_var) {
        add_entity(TYPE_PREDATOR_var);
        i = i + 1;
    }
}

fn inside(r: i64, c: i64) bool {
    return r >= 0 and r < HEIGHT_var and c >= 0 and c < WIDTH_var;
}

fn find_prey(r: i64, c: i64) i64 {
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(entities_var.len))) {
        var e: []i64 = entities_var[@as(usize, @intCast(i))];
        e = e;
        if (e[@as(usize, @intCast(5))] == 1 and e[@as(usize, @intCast(0))] == TYPE_PREY_var and e[@as(usize, @intCast(1))] == r and e[@as(usize, @intCast(2))] == c) {
            return i;
        }
        i = i + 1;
    }
    return 0 - 1;
}

fn step_world() void {
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(entities_var.len))) {
        var e: []i64 = entities_var[@as(usize, @intCast(i))];
        e = e;
        if (e[@as(usize, @intCast(5))] == 0) {
            i = i + 1;
            continue;
        }
        var typ: i64 = e[@as(usize, @intCast(0))];
        typ = typ;
        var row: i64 = e[@as(usize, @intCast(1))];
        row = row;
        var col: i64 = e[@as(usize, @intCast(2))];
        col = col;
        var repro: i64 = e[@as(usize, @intCast(3))];
        repro = repro;
        var energy: i64 = e[@as(usize, @intCast(4))];
        energy = energy;
        var dirs: []i64 = blk2: { var _tmp2 = std.heap.page_allocator.alloc(i64, 4) catch unreachable; _tmp2[0] = 0; _tmp2[1] = 1; _tmp2[2] = 2; _tmp2[3] = 3; break :blk2 _tmp2; };
        dirs = dirs;
        dirs = shuffle(dirs);
        var moved: bool = false;
        moved = moved;
        var old_r: i64 = row;
        old_r = old_r;
        var old_c: i64 = col;
        old_c = old_c;
        if (typ == TYPE_PREDATOR_var) {
            var j: i64 = 0;
            j = j;
            var ate: bool = false;
            ate = ate;
            while (j < 4) {
                var d: i64 = dirs[@as(usize, @intCast(j))];
                d = d;
                var nr: i64 = row + dr_var[@as(usize, @intCast(d))];
                nr = nr;
                var nc: i64 = col + dc_var[@as(usize, @intCast(d))];
                nc = nc;
                if (inside(nr, nc) and board_var[@as(usize, @intCast(nr))][@as(usize, @intCast(nc))] == 1) {
                    var prey_index: i64 = find_prey(nr, nc);
                    prey_index = prey_index;
                    if (prey_index >= 0) {
                        entities_var[@as(usize, @intCast(prey_index))][@as(usize, @intCast(5))] = 0;
                    }
                    board_var[@as(usize, @intCast(nr))][@as(usize, @intCast(nc))] = 2;
                    board_var[@as(usize, @intCast(row))][@as(usize, @intCast(col))] = 0;
                    e[@as(usize, @intCast(1))] = nr;
                    e[@as(usize, @intCast(2))] = nc;
                    e[@as(usize, @intCast(4))] = energy + PREDATOR_FOOD_VALUE_var - 1;
                    moved = true;
                    ate = true;
                    break;
                }
                j = j + 1;
            }
            if (!(ate)) {
                j = 0;
                while (j < 4) {
                    var d: i64 = dirs[@as(usize, @intCast(j))];
                    d = d;
                    var nr: i64 = row + dr_var[@as(usize, @intCast(d))];
                    nr = nr;
                    var nc: i64 = col + dc_var[@as(usize, @intCast(d))];
                    nc = nc;
                    if (inside(nr, nc) and board_var[@as(usize, @intCast(nr))][@as(usize, @intCast(nc))] == 0) {
                        board_var[@as(usize, @intCast(nr))][@as(usize, @intCast(nc))] = 2;
                        board_var[@as(usize, @intCast(row))][@as(usize, @intCast(col))] = 0;
                        e[@as(usize, @intCast(1))] = nr;
                        e[@as(usize, @intCast(2))] = nc;
                        moved = true;
                        break;
                    }
                    j = j + 1;
                }
                e[@as(usize, @intCast(4))] = energy - 1;
            }
            if (e[@as(usize, @intCast(4))] <= 0) {
                e[@as(usize, @intCast(5))] = 0;
                board_var[@as(usize, @intCast(e[@as(usize, @intCast(1))]))][@as(usize, @intCast(e[@as(usize, @intCast(2))]))] = 0;
            }
        } else {
            var j: i64 = 0;
            j = j;
            while (j < 4) {
                var d: i64 = dirs[@as(usize, @intCast(j))];
                d = d;
                var nr: i64 = row + dr_var[@as(usize, @intCast(d))];
                nr = nr;
                var nc: i64 = col + dc_var[@as(usize, @intCast(d))];
                nc = nc;
                if (inside(nr, nc) and board_var[@as(usize, @intCast(nr))][@as(usize, @intCast(nc))] == 0) {
                    board_var[@as(usize, @intCast(nr))][@as(usize, @intCast(nc))] = 1;
                    board_var[@as(usize, @intCast(row))][@as(usize, @intCast(col))] = 0;
                    e[@as(usize, @intCast(1))] = nr;
                    e[@as(usize, @intCast(2))] = nc;
                    moved = true;
                    break;
                }
                j = j + 1;
            }
        }
        if (e[@as(usize, @intCast(5))] == 1) {
            if (moved and repro <= 0) {
                if (typ == TYPE_PREY_var) {
                    board_var[@as(usize, @intCast(old_r))][@as(usize, @intCast(old_c))] = 1;
                    entities_var = blk: { var _tmp = std.ArrayList([]i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []i64, entities_var)) catch |err| handleError(err); _tmp.append(create_prey(old_r, old_c)) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
                    e[@as(usize, @intCast(3))] = PREY_REPRODUCTION_TIME_var;
                } else {
                    board_var[@as(usize, @intCast(old_r))][@as(usize, @intCast(old_c))] = 2;
                    entities_var = blk: { var _tmp = std.ArrayList([]i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []i64, entities_var)) catch |err| handleError(err); _tmp.append(create_predator(old_r, old_c)) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
                    e[@as(usize, @intCast(3))] = PREDATOR_REPRODUCTION_TIME_var;
                }
            } else {
                e[@as(usize, @intCast(3))] = repro - 1;
            }
        }
        i = i + 1;
    }
    var alive: [][]i64 = &[_][]i64{};
    alive = alive;
    var k: i64 = 0;
    k = k;
    while (k < @as(i64, @intCast(entities_var.len))) {
        var e2: []i64 = entities_var[@as(usize, @intCast(k))];
        e2 = e2;
        if (e2[@as(usize, @intCast(5))] == 1) {
            alive = blk: { var _tmp = std.ArrayList([]i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []i64, alive)) catch |err| handleError(err); _tmp.append(e2) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        }
        k = k + 1;
    }
    entities_var = alive;
}

fn count_entities(typ: i64) i64 {
    var cnt: i64 = 0;
    cnt = cnt;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(entities_var.len))) {
        if (entities_var[@as(usize, @intCast(i))][@as(usize, @intCast(0))] == typ and entities_var[@as(usize, @intCast(i))][@as(usize, @intCast(5))] == 1) {
            cnt = cnt + 1;
        }
        i = i + 1;
    }
    return cnt;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        board_var = create_board();
        entities_var = &[_][]i64{};
        dr_var = blk3: { var _tmp3 = std.heap.page_allocator.alloc(i64, 4) catch unreachable; _tmp3[0] = 0 - 1; _tmp3[1] = 0; _tmp3[2] = 1; _tmp3[3] = 0; break :blk3 _tmp3; };
        dc_var = blk4: { var _tmp4 = std.heap.page_allocator.alloc(i64, 4) catch unreachable; _tmp4[0] = 0; _tmp4[1] = 1; _tmp4[2] = 0; _tmp4[3] = 0 - 1; break :blk4 _tmp4; };
        setup();
        while (t_var < 10) {
            step_world();
            t_var = t_var + 1;
        }
        std.debug.print("{s}\n", .{_concat_string("Prey: ", _str(count_entities(TYPE_PREY_var)))});
        std.debug.print("{s}\n", .{_concat_string("Predators: ", _str(count_entities(TYPE_PREDATOR_var)))});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * std.mem.page_size;
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
