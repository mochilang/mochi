// Generated by Mochi Zig transpiler on 2025-08-07 14:57 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

var glider_var: [][]bool = &[_][]bool{};
var board_var: [][]bool = &[_][]bool{};
var i_var: i64 = 0;

fn count_alive_neighbours(board_param: [][]bool, row: i64, col: i64) i64 {
    var size: i64 = @as(i64, @intCast(board_param.len));
    size = size;
    var alive: i64 = 0;
    alive = alive;
    var dr: i64 = 0 - 1;
    dr = dr;
    while (dr < 2) {
        var dc: i64 = 0 - 1;
        dc = dc;
        while (dc < 2) {
            var nr: i64 = row + dr;
            nr = nr;
            var nc: i64 = col + dc;
            nc = nc;
            if (!(dr == 0 and dc == 0) and nr >= 0 and nr < size and nc >= 0 and nc < size) {
                if (board_param[@as(usize, @intCast(nr))][@as(usize, @intCast(nc))]) {
                    alive = alive + 1;
                }
            }
            dc = dc + 1;
        }
        dr = dr + 1;
    }
    return alive;
}

fn next_state(current: bool, alive: i64) bool {
    var state: bool = current;
    state = state;
    if (current) {
        if (alive < 2) {
            state = false;
        } else {
            if (alive == 2 or alive == 3) {
                state = true;
            } else {
                state = false;
            }
        }
    } else {
        if (alive == 3) {
            state = true;
        }
    }
    return state;
}

fn step(board_param: [][]bool) [][]bool {
    var size: i64 = @as(i64, @intCast(board_param.len));
    size = size;
    var new_board: [][]bool = &[_][]bool{};
    new_board = new_board;
    var r: i64 = 0;
    r = r;
    while (r < size) {
        var new_row: []bool = &[_]bool{};
        new_row = new_row;
        var c: i64 = 0;
        c = c;
        while (c < size) {
            var alive: i64 = count_alive_neighbours(board_param, r, c);
            alive = alive;
            var cell: bool = board_param[@as(usize, @intCast(r))][@as(usize, @intCast(c))];
            cell = cell;
            var updated: bool = next_state(cell, alive);
            updated = updated;
            new_row = blk: { var _tmp = std.ArrayList(bool).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const bool, new_row)) catch |err| handleError(err); _tmp.append(updated) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            c = c + 1;
        }
        new_board = blk: { var _tmp = std.ArrayList([]bool).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []bool, new_board)) catch |err| handleError(err); _tmp.append(new_row) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        r = r + 1;
    }
    return new_board;
}

fn show(board_param: [][]bool) void {
    var r: i64 = 0;
    r = r;
    while (r < @as(i64, @intCast(board_param.len))) {
        var line: []const u8 = "";
        line = line;
        var c: i64 = 0;
        c = c;
        while (c < @as(i64, @intCast(board_param[@as(usize, @intCast(r))].len))) {
            if (board_param[@as(usize, @intCast(r))][@as(usize, @intCast(c))]) {
                line = _concat_string(line, "#");
            } else {
                line = _concat_string(line, ".");
            }
            c = c + 1;
        }
        std.debug.print("{s}\n", .{line});
        r = r + 1;
    }
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        glider_var = blk0: { var _tmp0 = std.heap.page_allocator.alloc([]bool, 5) catch unreachable; _tmp0[0] = blk1: { var _tmp1 = std.heap.page_allocator.alloc(bool, 5) catch unreachable; _tmp1[0] = false; _tmp1[1] = true; _tmp1[2] = false; _tmp1[3] = false; _tmp1[4] = false; break :blk1 _tmp1; }; _tmp0[1] = blk2: { var _tmp2 = std.heap.page_allocator.alloc(bool, 5) catch unreachable; _tmp2[0] = false; _tmp2[1] = false; _tmp2[2] = true; _tmp2[3] = false; _tmp2[4] = false; break :blk2 _tmp2; }; _tmp0[2] = blk3: { var _tmp3 = std.heap.page_allocator.alloc(bool, 5) catch unreachable; _tmp3[0] = true; _tmp3[1] = true; _tmp3[2] = true; _tmp3[3] = false; _tmp3[4] = false; break :blk3 _tmp3; }; _tmp0[3] = blk4: { var _tmp4 = std.heap.page_allocator.alloc(bool, 5) catch unreachable; _tmp4[0] = false; _tmp4[1] = false; _tmp4[2] = false; _tmp4[3] = false; _tmp4[4] = false; break :blk4 _tmp4; }; _tmp0[4] = blk5: { var _tmp5 = std.heap.page_allocator.alloc(bool, 5) catch unreachable; _tmp5[0] = false; _tmp5[1] = false; _tmp5[2] = false; _tmp5[3] = false; _tmp5[4] = false; break :blk5 _tmp5; }; break :blk0 _tmp0; };
        board_var = glider_var;
        std.debug.print("{s}\n", .{"Initial"});
        show(board_var);
        while (i_var < 4) {
            board_var = step(board_var);
            std.debug.print("{s}\n", .{_concat_string("\nStep ", _str(i_var + 1))});
            show(board_var);
            i_var = i_var + 1;
        }
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * std.mem.page_size;
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
