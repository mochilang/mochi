// Generated by Mochi Zig transpiler on 2025-08-19 09:22 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn pow(base: f64, exp: i64) f64 {
    var result: f64 = 1.0;
    result = result;
    var i: i64 = 0;
    i = i;
    while (i < exp) {
        result = result * base;
        i = i +% 1;
    }
    return result;
}

fn sqrt_approx(x: f64) f64 {
    if (x == 0.0) {
        return 0.0;
    }
    var guess: f64 = x / 2.0;
    guess = guess;
    var i_1: i64 = 0;
    i_1 = i_1;
    while (i_1 < 20) {
        guess = (guess + x / guess) / 2.0;
        i_1 = i_1 +% 1;
    }
    return guess;
}

fn hubble_parameter(hubble_constant: f64, radiation_density: f64, matter_density: f64, dark_energy: f64, redshift: f64) f64 {
    const parameters: []f64 = blk0: { var _tmp = std.ArrayList(f64).init(std.heap.page_allocator); _tmp.append(redshift) catch unreachable; _tmp.append(radiation_density) catch unreachable; _tmp.append(matter_density) catch unreachable; _tmp.append(dark_energy) catch unreachable; break :blk0 (_tmp.toOwnedSlice() catch unreachable); };
    var i_2: i64 = 0;
    i_2 = i_2;
    while (i_2 < @as(i64, @intCast(parameters.len))) {
        if (parameters[_idx(parameters.len, i_2)] < 0.0) {
            @panic("All input parameters must be positive");
        }
        i_2 = i_2 +% 1;
    }
    i_2 = 1;
    while (i_2 < 4) {
        if (parameters[_idx(parameters.len, i_2)] > 1.0) {
            @panic("Relative densities cannot be greater than one");
        }
        i_2 = i_2 +% 1;
    }
    const curvature: f64 = 1.0 - (matter_density + radiation_density + dark_energy);
    const zp1: f64 = redshift + 1.0;
    const e2: f64 = radiation_density * pow(zp1, 4) + matter_density * pow(zp1, 3) + curvature * pow(zp1, 2) + dark_energy;
    return hubble_constant * sqrt_approx(e2);
}

fn test_hubble_parameter() void {
    const h: f64 = hubble_parameter(68.2999999999999972, 0.000100000000000000005, 0.299999999999999989, 0.699999999999999956, 0.0);
    if (h < 68.2998999999999938 or h > 68.3001000000000005) {
        @panic("hubble_parameter test failed");
    }
}

fn mochi_main() void {
    test_hubble_parameter();
    std.debug.print("{d}\n", .{hubble_parameter(68.2999999999999972, 0.000100000000000000005, 0.299999999999999989, 0.699999999999999956, 0.0)});
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        mochi_main();
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
