// Generated by Mochi Zig transpiler on 2025-08-19 09:22 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const PI_var: f64 = 3.14159265358979312;
const REDUCED_PLANCK_CONSTANT_var: f64 = 1.05457181699999999e-34;
const SPEED_OF_LIGHT_var: f64 = 300000000.0;

fn sqrtApprox(x: f64) f64 {
    if (x <= 0.0) {
        return 0.0;
    }
    var guess: f64 = x;
    guess = guess;
    var i: i64 = 0;
    i = i;
    while (i < 100) {
        guess = (guess + x / guess) / 2.0;
        i = i +% 1;
    }
    return guess;
}

fn casimir_force(force: f64, area: f64, distance: f64) std.StringHashMap(f64) {
    var zero_count: i64 = 0;
    zero_count = zero_count;
    if (force == 0.0) {
        zero_count = zero_count +% 1;
    }
    if (area == 0.0) {
        zero_count = zero_count +% 1;
    }
    if (distance == 0.0) {
        zero_count = zero_count +% 1;
    }
    if (zero_count != 1) {
        @panic("One and only one argument must be 0");
    }
    if (force < 0.0) {
        @panic("Magnitude of force can not be negative");
    }
    if (distance < 0.0) {
        @panic("Distance can not be negative");
    }
    if (area < 0.0) {
        @panic("Area can not be negative");
    }
    if (force == 0.0) {
        const num: f64 = REDUCED_PLANCK_CONSTANT_var * SPEED_OF_LIGHT_var * PI_var * PI_var * area;
        const den: f64 = 240.0 * distance * distance * distance * distance;
        const f: f64 = num / den;
        return blk0: { var m = std.StringHashMap(f64).init(std.heap.page_allocator); m.put("force", f) catch unreachable; break :blk0 m; };
    }
    if (area == 0.0) {
        const num_1: f64 = 240.0 * force * distance * distance * distance * distance;
        const den_1: f64 = REDUCED_PLANCK_CONSTANT_var * SPEED_OF_LIGHT_var * PI_var * PI_var;
        const a: f64 = num_1 / den_1;
        return blk1: { var m_1 = std.StringHashMap(f64).init(std.heap.page_allocator); m_1.put("area", a) catch unreachable; break :blk1 m_1; };
    }
    const num_2: f64 = REDUCED_PLANCK_CONSTANT_var * SPEED_OF_LIGHT_var * PI_var * PI_var * area;
    const den_2: f64 = 240.0 * force;
    const inner: f64 = num_2 / den_2;
    const d: f64 = sqrtApprox(sqrtApprox(inner));
    return blk2: { var m_2 = std.StringHashMap(f64).init(std.heap.page_allocator); m_2.put("distance", d) catch unreachable; break :blk2 m_2; };
}

fn mochi_main() void {
    std.debug.print("{s}\n", .{_str(casimir_force(0.0, 4.0, 0.0299999999999999989))});
    std.debug.print("{s}\n", .{_str(casimir_force(2.63500000000000021e-10, 0.00229999999999999996, 0.0))});
    std.debug.print("{s}\n", .{_str(casimir_force(2.73700000000000015e-18, 0.0, 0.00237460000000000015))});
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        mochi_main();
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
