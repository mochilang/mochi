// Generated by Mochi Zig transpiler on 2025-08-19 09:22 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const c_var_: f64 = 299792458.0;
var v_var: []f64 = &[_]f64{};

fn sqrtApprox(x: f64) f64 {
    if (x <= 0.0) {
        return 0.0;
    }
    var guess: f64 = x / 2.0;
    guess = guess;
    var i: i64 = 0;
    i = i;
    while (i < 20) {
        guess = (guess + x / guess) / 2.0;
        i = i +% 1;
    }
    return guess;
}

fn beta(velocity: f64) f64 {
    if (velocity > c_var_) {
        @panic("Speed must not exceed light speed 299,792,458 [m/s]!");
    }
    if (velocity < 1.0) {
        @panic("Speed must be greater than or equal to 1!");
    }
    return velocity / c_var_;
}

fn gamma(velocity_1: f64) f64 {
    const b: f64 = beta(velocity_1);
    return 1.0 / sqrtApprox(1.0 - b * b);
}

fn transformation_matrix(velocity_2: f64) [][]f64 {
    const g: f64 = gamma(velocity_2);
    const b_1: f64 = beta(velocity_2);
    return blk0: { var _tmp = std.ArrayList([]f64).init(std.heap.page_allocator); _tmp.append(@constCast(blk1: { var _tmp_1 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_1.append(g) catch unreachable; _tmp_1.append((@as(f64, @floatFromInt(0)) - g) * b_1) catch unreachable; _tmp_1.append(0.0) catch unreachable; _tmp_1.append(0.0) catch unreachable; break :blk1 (_tmp_1.toOwnedSlice() catch unreachable); })) catch |err| handleError(err); _tmp.append(@constCast(blk2: { var _tmp_2 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_2.append((@as(f64, @floatFromInt(0)) - g) * b_1) catch unreachable; _tmp_2.append(g) catch unreachable; _tmp_2.append(0.0) catch unreachable; _tmp_2.append(0.0) catch unreachable; break :blk2 (_tmp_2.toOwnedSlice() catch unreachable); })) catch |err| handleError(err); _tmp.append(@constCast(([4]f64{0.0, 0.0, 1.0, 0.0})[0..4])) catch |err| handleError(err); _tmp.append(@constCast(([4]f64{0.0, 0.0, 0.0, 1.0})[0..4])) catch |err| handleError(err); break :blk0 (_tmp.toOwnedSlice() catch |err| handleError(err)); };
}

fn mat_vec_mul(mat: [][]f64, vec: []f64) []f64 {
    var res: []f64 = std.heap.page_allocator.alloc(f64, 0) catch unreachable;
    res = res;
    var i_1: i64 = 0;
    i_1 = i_1;
    while (i_1 < 4) {
        const row: []f64 = mat[_idx(mat.len, i_1)];
        const value: f64 = row[_idx(row.len, 0)] * vec[_idx(vec.len, 0)] + row[_idx(row.len, 1)] * vec[_idx(vec.len, 1)] + row[_idx(row.len, 2)] * vec[_idx(vec.len, 2)] + row[_idx(row.len, 3)] * vec[_idx(vec.len, 3)];
        res = res + blk3: { var _tmp_3 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_3.append(value) catch unreachable; break :blk3 (_tmp_3.toOwnedSlice() catch unreachable); };
        i_1 = i_1 +% 1;
    }
    return res;
}

fn transform(velocity_3: f64, event: []f64) []f64 {
    const g_1: f64 = gamma(velocity_3);
    const b_2: f64 = beta(velocity_3);
    const ct: f64 = event[_idx(event.len, 0)] * c_var_;
    const x_1: f64 = event[_idx(event.len, 1)];
    return blk4: { var _tmp_4 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_4.append(g_1 * ct - g_1 * b_2 * x_1) catch |err| handleError(err); _tmp_4.append((@as(f64, @floatFromInt(0)) - g_1) * b_2 * ct + g_1 * x_1) catch |err| handleError(err); _tmp_4.append(event[_idx(event.len, 2)]) catch |err| handleError(err); _tmp_4.append(event[_idx(event.len, 3)]) catch |err| handleError(err); break :blk4 (_tmp_4.toOwnedSlice() catch |err| handleError(err)); };
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        v_var = transform(29979245.0, @constCast(([4]f64{1.0, 2.0, 3.0, 4.0})[0..4]));
        std.debug.print("{s}\n", .{_str(beta(c_var_))});
        std.debug.print("{s}\n", .{_str(beta(199792458.0))});
        std.debug.print("{s}\n", .{_str(beta(100000.0))});
        std.debug.print("{s}\n", .{_str(gamma(4.0))});
        std.debug.print("{s}\n", .{_str(gamma(100000.0))});
        std.debug.print("{s}\n", .{_str(gamma(30000000.0))});
        std.debug.print("{s}\n", .{_str(transformation_matrix(29979245.0))});
        std.debug.print("{s}\n", .{_str(v_var)});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
