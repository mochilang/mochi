// Generated by Mochi Zig transpiler on 2025-08-19 09:22 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn to_float(x: i64) f64 {
    return @as(f64, @floatFromInt(x)) * 1.0;
}

fn round6(x_1: f64) f64 {
    const factor: f64 = 1000000.0;
    return @as(f64, @floatFromInt(@as(i64, @intFromFloat(x_1 * factor + 0.5)))) / factor;
}

fn sqrtApprox(x_2: f64) f64 {
    var guess: f64 = x_2 / 2.0;
    guess = guess;
    var i: i64 = 0;
    i = i;
    while (i < 20) {
        guess = (guess + x_2 / guess) / 2.0;
        i = i +% 1;
    }
    return guess;
}

fn validate(values: []f64) bool {
    if (@as(i64, @intCast(values.len)) == 0) {
        return false;
    }
    var i_1: i64 = 0;
    i_1 = i_1;
    while (i_1 < @as(i64, @intCast(values.len))) {
        if (values[_idx(values.len, i_1)] <= 0.0) {
            return false;
        }
        i_1 = i_1 +% 1;
    }
    return true;
}

fn effusion_ratio(m1: f64, m2: f64) f64 {
    if (!(validate(@constCast(blk0: { var _tmp = std.ArrayList(f64).init(std.heap.page_allocator); _tmp.append(m1) catch unreachable; _tmp.append(m2) catch unreachable; break :blk0 (_tmp.toOwnedSlice() catch unreachable); })))) {
        std.debug.print("{s}\n", .{"ValueError: Molar mass values must greater than 0."});
        return 0.0;
    }
    return round6(sqrtApprox(m2 / m1));
}

fn first_effusion_rate(rate: f64, m1_1: f64, m2_1: f64) f64 {
    if (!(validate(@constCast(blk1: { var _tmp_1 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_1.append(rate) catch unreachable; _tmp_1.append(m1_1) catch unreachable; _tmp_1.append(m2_1) catch unreachable; break :blk1 (_tmp_1.toOwnedSlice() catch unreachable); })))) {
        std.debug.print("{s}\n", .{"ValueError: Molar mass and effusion rate values must greater than 0."});
        return 0.0;
    }
    return round6(rate * sqrtApprox(m2_1 / m1_1));
}

fn second_effusion_rate(rate_1: f64, m1_2: f64, m2_2: f64) f64 {
    if (!(validate(@constCast(blk2: { var _tmp_2 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_2.append(rate_1) catch unreachable; _tmp_2.append(m1_2) catch unreachable; _tmp_2.append(m2_2) catch unreachable; break :blk2 (_tmp_2.toOwnedSlice() catch unreachable); })))) {
        std.debug.print("{s}\n", .{"ValueError: Molar mass and effusion rate values must greater than 0."});
        return 0.0;
    }
    return round6(rate_1 / sqrtApprox(m2_2 / m1_2));
}

fn first_molar_mass(mass: f64, r1: f64, r2: f64) f64 {
    if (!(validate(@constCast(blk3: { var _tmp_3 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_3.append(mass) catch unreachable; _tmp_3.append(r1) catch unreachable; _tmp_3.append(r2) catch unreachable; break :blk3 (_tmp_3.toOwnedSlice() catch unreachable); })))) {
        std.debug.print("{s}\n", .{"ValueError: Molar mass and effusion rate values must greater than 0."});
        return 0.0;
    }
    const ratio: f64 = r1 / r2;
    return round6(mass / (ratio * ratio));
}

fn second_molar_mass(mass_1: f64, r1_1: f64, r2_1: f64) f64 {
    if (!(validate(@constCast(blk4: { var _tmp_4 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_4.append(mass_1) catch unreachable; _tmp_4.append(r1_1) catch unreachable; _tmp_4.append(r2_1) catch unreachable; break :blk4 (_tmp_4.toOwnedSlice() catch unreachable); })))) {
        std.debug.print("{s}\n", .{"ValueError: Molar mass and effusion rate values must greater than 0."});
        return 0.0;
    }
    const ratio_1: f64 = r1_1 / r2_1;
    return round6(ratio_1 * ratio_1 / mass_1);
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        std.debug.print("{d}\n", .{effusion_ratio(2.01600000000000001, 4.00199999999999978)});
        std.debug.print("{d}\n", .{first_effusion_rate(1.0, 2.01600000000000001, 4.00199999999999978)});
        std.debug.print("{d}\n", .{second_effusion_rate(1.0, 2.01600000000000001, 4.00199999999999978)});
        std.debug.print("{d}\n", .{first_molar_mass(2.0, 1.40894300000000006, 0.70975200000000005)});
        std.debug.print("{d}\n", .{second_molar_mass(2.0, 1.40894300000000006, 0.70975200000000005)});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
