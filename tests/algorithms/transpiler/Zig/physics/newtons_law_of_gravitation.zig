// Generated by Mochi Zig transpiler on 2025-08-19 09:22 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const Result = struct {
    kind: []const u8,
    value: f64,
};

const GRAVITATIONAL_CONSTANT_var: f64 = 6.67429999999999938e-11;
var r1_var: Result = undefined;
var r2_var: Result = undefined;
var r3_var: Result = undefined;
var r4_var: Result = undefined;

fn sqrtApprox(x: f64) f64 {
    var guess: f64 = x / 2.0;
    guess = guess;
    var i: i64 = 0;
    i = i;
    while (i < 20) {
        guess = (guess + x / guess) / 2.0;
        i = i +% 1;
    }
    return guess;
}

fn gravitational_law(force: f64, mass_1: f64, mass_2: f64, distance: f64) Result {
    var zero_count: i64 = 0;
    zero_count = zero_count;
    if (force == 0.0) {
        zero_count = zero_count +% 1;
    }
    if (mass_1 == 0.0) {
        zero_count = zero_count +% 1;
    }
    if (mass_2 == 0.0) {
        zero_count = zero_count +% 1;
    }
    if (distance == 0.0) {
        zero_count = zero_count +% 1;
    }
    if (zero_count != 1) {
        @panic("One and only one argument must be 0");
    }
    if (force < 0.0) {
        @panic("Gravitational force can not be negative");
    }
    if (distance < 0.0) {
        @panic("Distance can not be negative");
    }
    if (mass_1 < 0.0) {
        @panic("Mass can not be negative");
    }
    if (mass_2 < 0.0) {
        @panic("Mass can not be negative");
    }
    const product_of_mass: f64 = mass_1 * mass_2;
    if (force == 0.0) {
        const f: f64 = GRAVITATIONAL_CONSTANT_var * product_of_mass / (distance * distance);
        return .{ .kind = "force", .value = f };
    }
    if (mass_1 == 0.0) {
        const m1: f64 = force * (distance * distance) / (GRAVITATIONAL_CONSTANT_var * mass_2);
        return .{ .kind = "mass_1", .value = m1 };
    }
    if (mass_2 == 0.0) {
        const m2: f64 = force * (distance * distance) / (GRAVITATIONAL_CONSTANT_var * mass_1);
        return .{ .kind = "mass_2", .value = m2 };
    }
    const d: f64 = sqrtApprox(GRAVITATIONAL_CONSTANT_var * product_of_mass / force);
    return .{ .kind = "distance", .value = d };
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        r1_var = gravitational_law(0.0, 5.0, 10.0, 20.0);
        r2_var = gravitational_law(7367.38199999999961, 0.0, 74.0, 3048.0);
        r3_var = gravitational_law(100.0, 5.0, 0.0, 3.0);
        r4_var = gravitational_law(100.0, 5.0, 10.0, 0.0);
        std.debug.print("{s}\n", .{_concat_string(_concat_string(r1_var.kind, " "), _str(r1_var.value))});
        std.debug.print("{s}\n", .{_concat_string(_concat_string(r2_var.kind, " "), _str(r2_var.value))});
        std.debug.print("{s}\n", .{_concat_string(_concat_string(r3_var.kind, " "), _str(r3_var.value))});
        std.debug.print("{s}\n", .{_concat_string(_concat_string(r4_var.kind, " "), _str(r4_var.value))});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
