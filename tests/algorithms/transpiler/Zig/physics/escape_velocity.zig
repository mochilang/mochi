// Generated by Mochi Zig transpiler on 2025-08-19 09:22 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn pow10(n: i64) f64 {
    var p: f64 = 1.0;
    p = p;
    var k: i64 = 0;
    k = k;
    if (n >= 0) {
        while (k < n) {
            p = p * 10.0;
            k = k +% 1;
        }
    } else {
        const m: i64 = 0 -% n;
        while (k < m) {
            p = p / 10.0;
            k = k +% 1;
        }
    }
    return p;
}

fn sqrt_newton(n_1: f64) f64 {
    if (n_1 == 0.0) {
        return 0.0;
    }
    var x: f64 = n_1;
    x = x;
    var j: i64 = 0;
    j = j;
    while (j < 20) {
        x = (x + n_1 / x) / 2.0;
        j = j +% 1;
    }
    return x;
}

fn round3(x_1: f64) f64 {
    const y: f64 = x_1 * 1000.0 + 0.5;
    var yi: i64 = @as(i64, @intFromFloat(y));
    yi = yi;
    if (@as(f64, @floatFromInt(yi)) > y) {
        yi = yi -% 1;
    }
    return @as(f64, @floatFromInt(yi)) / 1000.0;
}

fn escape_velocity(mass: f64, radius: f64) f64 {
    if (radius == 0.0) {
        @panic("Radius cannot be zero.");
    }
    const G: f64 = 6.67429999999999968 * pow10(0 -% 11);
    const velocity: f64 = sqrt_newton(2.0 * G * mass / radius);
    return round3(velocity);
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        std.debug.print("{d}\n", .{escape_velocity(5.97200000000000042 * pow10(24), 6.37100000000000044 * pow10(6))});
        std.debug.print("{d}\n", .{escape_velocity(7.34799999999999986 * pow10(22), 1.7370000000000001 * pow10(6))});
        std.debug.print("{d}\n", .{escape_velocity(1.89799999999999991 * pow10(27), 6.99110000000000031 * pow10(7))});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
