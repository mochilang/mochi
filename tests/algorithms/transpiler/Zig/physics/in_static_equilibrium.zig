// Generated by Mochi Zig transpiler on 2025-08-19 09:22 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const PI_var: f64 = 3.14159265358979312;
const TWO_PI_var: f64 = 6.28318530717958623;
var forces1_var: [][]f64 = &[_][]f64{};
const location1_var: [][]f64 = @constCast(([2][]f64{@constCast(([2]f64{1.0, 0.0})[0..2]), @constCast(([2]f64{10.0, 0.0})[0..2])})[0..2]);
var forces2_var: [][]f64 = &[_][]f64{};
const location2_var: [][]f64 = @constCast(([3][]f64{@constCast(([2]f64{0.0, 0.0})[0..2]), @constCast(([2]f64{0.0, 0.0})[0..2]), @constCast(([2]f64{0.0, 0.0})[0..2])})[0..3]);
var forces3_var: [][]f64 = &[_][]f64{};
const location3_var: [][]f64 = @constCast(([3][]f64{@constCast(([2]f64{0.0, 0.0})[0..2]), @constCast(([2]f64{0.0, 0.0})[0..2]), @constCast(([2]f64{0.0, 0.0})[0..2])})[0..3]);
var forces4_var: [][]f64 = &[_][]f64{};
const location4_var: [][]f64 = @constCast(([4][]f64{@constCast(([2]f64{0.0, 0.0})[0..2]), @constCast(([2]f64{6.0, 0.0})[0..2]), @constCast(([2]f64{10.0, 0.0})[0..2]), @constCast(([2]f64{12.0, 0.0})[0..2])})[0..4]);

fn _mod(x: f64, m: f64) f64 {
    return x - @as(f64, @floatFromInt(@as(i64, @intFromFloat(x / m)))) * m;
}

fn sin_approx(x_1: f64) f64 {
    const y: f64 = _mod(x_1 + PI_var, TWO_PI_var) - PI_var;
    const y2: f64 = y * y;
    const y3: f64 = y2 * y;
    const y5: f64 = y3 * y2;
    const y7: f64 = y5 * y2;
    return y - y3 / 6.0 + y5 / 120.0 - y7 / 5040.0;
}

fn cos_approx(x_2: f64) f64 {
    const y_1: f64 = _mod(x_2 + PI_var, TWO_PI_var) - PI_var;
    const y2_1: f64 = y_1 * y_1;
    const y4: f64 = y2_1 * y2_1;
    const y6: f64 = y4 * y2_1;
    return 1.0 - y2_1 / 2.0 + y4 / 24.0 - y6 / 720.0;
}

fn polar_force(magnitude: f64, angle: f64, radian_mode: bool) []f64 {
    const theta: f64 = if (radian_mode) angle else angle * PI_var / 180.0;
    return blk0: { var _tmp = std.ArrayList(f64).init(std.heap.page_allocator); _tmp.append(magnitude * cos_approx(theta)) catch |err| handleError(err); _tmp.append(magnitude * sin_approx(theta)) catch |err| handleError(err); break :blk0 (_tmp.toOwnedSlice() catch |err| handleError(err)); };
}

fn abs_float(x_3: f64) f64 {
    if (x_3 < 0.0) {
        return @as(f64, @floatFromInt(0)) - x_3;
    } else {
        return x_3;
    }
    return 0;
}

fn in_static_equilibrium(forces: [][]f64, location: [][]f64, eps: f64) bool {
    var sum_moments: f64 = 0.0;
    sum_moments = sum_moments;
    var i: i64 = 0;
    i = i;
    const n: i64 = @as(i64, @intCast(forces.len));
    while (i < n) {
        const r: []f64 = location[_idx(location.len, i)];
        const f: []f64 = forces[_idx(forces.len, i)];
        const moment: f64 = r[_idx(r.len, 0)] * f[_idx(f.len, 1)] - r[_idx(r.len, 1)] * f[_idx(f.len, 0)];
        sum_moments = sum_moments + moment;
        i = i +% 1;
    }
    return abs_float(sum_moments) < eps;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        forces1_var = std.heap.page_allocator.dupe([]f64, blk1: { var _tmp = std.ArrayList([]f64).init(std.heap.page_allocator); _tmp.append(@constCast(([2]f64{1.0, 1.0})[0..2])) catch unreachable; _tmp.append(@constCast(blk2: { var _tmp_1 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_1.append(@as(f64, @floatFromInt(0)) - 1.0) catch unreachable; _tmp_1.append(2.0) catch unreachable; break :blk2 (_tmp_1.toOwnedSlice() catch unreachable); })) catch unreachable; break :blk1 (_tmp.toOwnedSlice() catch unreachable); }) catch unreachable;
        forces2_var = std.heap.page_allocator.dupe([]f64, blk3: { var _tmp_2 = std.ArrayList([]f64).init(std.heap.page_allocator); _tmp_2.append(polar_force(718.399999999999977, 150.0, false)) catch unreachable; _tmp_2.append(polar_force(879.539999999999964, 45.0, false)) catch unreachable; _tmp_2.append(polar_force(100.0, @as(f64, @floatFromInt(0)) - 90.0, false)) catch unreachable; break :blk3 (_tmp_2.toOwnedSlice() catch unreachable); }) catch unreachable;
        forces3_var = std.heap.page_allocator.dupe([]f64, blk4: { var _tmp_3 = std.ArrayList([]f64).init(std.heap.page_allocator); _tmp_3.append(polar_force(30.0 * 9.8100000000000005, 15.0, false)) catch unreachable; _tmp_3.append(polar_force(215.0, 135.0, false)) catch unreachable; _tmp_3.append(polar_force(264.0, 60.0, false)) catch unreachable; break :blk4 (_tmp_3.toOwnedSlice() catch unreachable); }) catch unreachable;
        forces4_var = std.heap.page_allocator.dupe([]f64, blk5: { var _tmp_4 = std.ArrayList([]f64).init(std.heap.page_allocator); _tmp_4.append(@constCast(blk6: { var _tmp_5 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_5.append(0.0) catch unreachable; _tmp_5.append(@as(f64, @floatFromInt(0)) - 2000.0) catch unreachable; break :blk6 (_tmp_5.toOwnedSlice() catch unreachable); })) catch unreachable; _tmp_4.append(@constCast(blk7: { var _tmp_6 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_6.append(0.0) catch unreachable; _tmp_6.append(@as(f64, @floatFromInt(0)) - 1200.0) catch unreachable; break :blk7 (_tmp_6.toOwnedSlice() catch unreachable); })) catch unreachable; _tmp_4.append(@constCast(([2]f64{0.0, 15600.0})[0..2])) catch unreachable; _tmp_4.append(@constCast(blk8: { var _tmp_7 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_7.append(0.0) catch unreachable; _tmp_7.append(@as(f64, @floatFromInt(0)) - 12400.0) catch unreachable; break :blk8 (_tmp_7.toOwnedSlice() catch unreachable); })) catch unreachable; break :blk5 (_tmp_4.toOwnedSlice() catch unreachable); }) catch unreachable;
        std.debug.print("{s}\n", .{_str(in_static_equilibrium(forces1_var, location1_var, 0.100000000000000006))});
        std.debug.print("{s}\n", .{_str(in_static_equilibrium(forces2_var, location2_var, 0.100000000000000006))});
        std.debug.print("{s}\n", .{_str(in_static_equilibrium(forces3_var, location3_var, 0.100000000000000006))});
        std.debug.print("{s}\n", .{_str(in_static_equilibrium(forces4_var, location4_var, 0.100000000000000006))});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
