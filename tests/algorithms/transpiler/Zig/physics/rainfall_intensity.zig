// Generated by Mochi Zig transpiler on 2025-08-19 09:22 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

var r1_var: f64 = 0;
var r2_var: f64 = 0;
var r3_var: f64 = 0;

fn exp_approx(x: f64) f64 {
    var y: f64 = x;
    y = y;
    var is_neg: bool = false;
    is_neg = is_neg;
    if (x < 0.0) {
        is_neg = true;
        y = @as(f64, @floatFromInt(0)) - x;
    }
    var term: f64 = 1.0;
    term = term;
    var sum: f64 = 1.0;
    sum = sum;
    var n: i64 = 1;
    n = n;
    while (n < 30) {
        term = term * y / @as(f64, @floatFromInt(n));
        sum = sum + term;
        n = n +% 1;
    }
    if (is_neg) {
        return 1.0 / sum;
    }
    return sum;
}

fn ln_series(x_1: f64) f64 {
    const t: f64 = (x_1 - 1.0) / (x_1 + 1.0);
    var term_1: f64 = t;
    term_1 = term_1;
    var sum_1: f64 = 0.0;
    sum_1 = sum_1;
    var n_1: i64 = 1;
    n_1 = n_1;
    while (n_1 <= 19) {
        sum_1 = sum_1 + term_1 / @as(f64, @floatFromInt(n_1));
        term_1 = term_1 * t * t;
        n_1 = n_1 +% 2;
    }
    return 2.0 * sum_1;
}

fn ln(x_2: f64) f64 {
    var y_1: f64 = x_2;
    y_1 = y_1;
    var k: i64 = 0;
    k = k;
    while (y_1 >= 10.0) {
        y_1 = y_1 / 10.0;
        k = k +% 1;
    }
    while (y_1 < 1.0) {
        y_1 = y_1 * 10.0;
        k = k -% 1;
    }
    return ln_series(y_1) + @as(f64, @floatFromInt(k)) * ln_series(10.0);
}

fn powf(base: f64, exponent: f64) f64 {
    return exp_approx(exponent * ln(base));
}

fn rainfall_intensity(coefficient_k: f64, coefficient_a: f64, coefficient_b: f64, coefficient_c: f64, return_period: f64, duration: f64) f64 {
    if (coefficient_k <= 0.0) {
        @panic("All parameters must be positive.");
    }
    if (coefficient_a <= 0.0) {
        @panic("All parameters must be positive.");
    }
    if (coefficient_b <= 0.0) {
        @panic("All parameters must be positive.");
    }
    if (coefficient_c <= 0.0) {
        @panic("All parameters must be positive.");
    }
    if (return_period <= 0.0) {
        @panic("All parameters must be positive.");
    }
    if (duration <= 0.0) {
        @panic("All parameters must be positive.");
    }
    const numerator: f64 = coefficient_k * powf(return_period, coefficient_a);
    const denominator: f64 = powf(duration + coefficient_b, coefficient_c);
    return numerator / denominator;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        r1_var = rainfall_intensity(1000.0, 0.200000000000000011, 11.5999999999999996, 0.810000000000000053, 10.0, 60.0);
        r2_var = rainfall_intensity(1000.0, 0.200000000000000011, 11.5999999999999996, 0.810000000000000053, 10.0, 30.0);
        r3_var = rainfall_intensity(1000.0, 0.200000000000000011, 11.5999999999999996, 0.810000000000000053, 5.0, 60.0);
        std.debug.print("{s}\n", .{_str(r1_var)});
        std.debug.print("{s}\n", .{_str(r2_var)});
        std.debug.print("{s}\n", .{_str(r3_var)});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
