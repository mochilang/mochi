// Generated by Mochi Zig transpiler on 2025-08-19 09:22 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const PI_var: f64 = 3.14159265358979312;
const TWO_PI_var: f64 = 6.28318530717958623;
const g_var: f64 = 9.80664999999999942;
const v0_var: f64 = 25.0;
const angle_var: f64 = 20.0;

fn _mod(x: f64, m: f64) f64 {
    return x - @as(f64, @floatFromInt(@as(i64, @intFromFloat(x / m)))) * m;
}

fn sin(x_1: f64) f64 {
    const y: f64 = _mod(x_1 + PI_var, TWO_PI_var) - PI_var;
    const y2: f64 = y * y;
    const y3: f64 = y2 * y;
    const y5: f64 = y3 * y2;
    const y7: f64 = y5 * y2;
    return y - y3 / 6.0 + y5 / 120.0 - y7 / 5040.0;
}

fn deg_to_rad(deg: f64) f64 {
    return deg * PI_var / 180.0;
}

fn floor(x_2: f64) f64 {
    var i: i64 = @as(i64, @intFromFloat(x_2));
    i = i;
    if (@as(f64, @floatFromInt(i)) > x_2) {
        i = i -% 1;
    }
    return @as(f64, @floatFromInt(i));
}

fn pow10(n: i64) f64 {
    var result: f64 = 1.0;
    result = result;
    var i_1: i64 = 0;
    i_1 = i_1;
    while (i_1 < n) {
        result = result * 10.0;
        i_1 = i_1 +% 1;
    }
    return result;
}

fn round(x_3: f64, n_1: i64) f64 {
    const m_1: f64 = pow10(n_1);
    const y_1: f64 = floor(x_3 * m_1 + 0.5);
    return y_1 / m_1;
}

fn check_args(init_velocity: f64, angle_param: f64) void {
    if (angle_param > 90.0 or angle_param < 1.0) {
        @panic("Invalid angle. Range is 1-90 degrees.");
    }
    if (init_velocity < 0.0) {
        @panic("Invalid velocity. Should be a positive number.");
    }
}

fn horizontal_distance(init_velocity_1: f64, angle_param_1: f64) f64 {
    check_args(init_velocity_1, angle_param_1);
    const radians: f64 = deg_to_rad(2.0 * angle_param_1);
    return round(init_velocity_1 * init_velocity_1 * sin(radians) / g_var, 2);
}

fn max_height(init_velocity_2: f64, angle_param_2: f64) f64 {
    check_args(init_velocity_2, angle_param_2);
    const radians_1: f64 = deg_to_rad(angle_param_2);
    const s: f64 = sin(radians_1);
    return round(init_velocity_2 * init_velocity_2 * s * s / (2.0 * g_var), 2);
}

fn total_time(init_velocity_3: f64, angle_param_3: f64) f64 {
    check_args(init_velocity_3, angle_param_3);
    const radians_2: f64 = deg_to_rad(angle_param_3);
    return round(2.0 * init_velocity_3 * sin(radians_2) / g_var, 2);
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        std.debug.print("{d}\n", .{horizontal_distance(v0_var, angle_var)});
        std.debug.print("{d}\n", .{max_height(v0_var, angle_var)});
        std.debug.print("{d}\n", .{total_time(v0_var, angle_var)});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
