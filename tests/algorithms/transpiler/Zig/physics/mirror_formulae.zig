// Generated by Mochi Zig transpiler on 2025-08-12 12:29 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn abs_float(x_param: f64) f64 {
    var x_var: f64 = x_param;
    x_var = x_var;
    if (x_var < 0.0) {
        return @as(f64, @floatFromInt(0)) - x_var;
    }
    return x_var;
}

fn isclose(a_param: f64, b_param: f64, tolerance_param: f64) bool {
    var a_var: f64 = a_param;
    a_var = a_var;
    var b_var: f64 = b_param;
    b_var = b_var;
    var tolerance_var: f64 = tolerance_param;
    tolerance_var = tolerance_var;
    return abs_float(a_var - b_var) < tolerance_var;
}

fn focal_length(distance_of_object_param: f64, distance_of_image_param: f64) f64 {
    var distance_of_object_var: f64 = distance_of_object_param;
    distance_of_object_var = distance_of_object_var;
    var distance_of_image_var: f64 = distance_of_image_param;
    distance_of_image_var = distance_of_image_var;
    if (distance_of_object_var == 0.0 or distance_of_image_var == 0.0) {
        @panic("Invalid inputs. Enter non zero values with respect to the sign convention.");
    }
    return 1.0 / (1.0 / distance_of_object_var + 1.0 / distance_of_image_var);
}

fn object_distance(focal_length_param: f64, distance_of_image_param_1: f64) f64 {
    var focal_length_var: f64 = focal_length_param;
    focal_length_var = focal_length_var;
    var distance_of_image_var: f64 = distance_of_image_param_1;
    distance_of_image_var = distance_of_image_var;
    if (distance_of_image_var == 0.0 or focal_length_var == 0.0) {
        @panic("Invalid inputs. Enter non zero values with respect to the sign convention.");
    }
    return 1.0 / (1.0 / focal_length_var - 1.0 / distance_of_image_var);
}

fn image_distance(focal_length_param_1: f64, distance_of_object_param_1: f64) f64 {
    var focal_length_var: f64 = focal_length_param_1;
    focal_length_var = focal_length_var;
    var distance_of_object_var: f64 = distance_of_object_param_1;
    distance_of_object_var = distance_of_object_var;
    if (distance_of_object_var == 0.0 or focal_length_var == 0.0) {
        @panic("Invalid inputs. Enter non zero values with respect to the sign convention.");
    }
    return 1.0 / (1.0 / focal_length_var - 1.0 / distance_of_object_var);
}

fn test_focal_length() void {
    const f1: f64 = focal_length(10.0, 20.0);
    if (!(isclose(f1, 6.66666666666666, 0.00000001))) {
        @panic("focal_length test1 failed");
    }
    const f2: f64 = focal_length(9.5, 6.7);
    if (!(isclose(f2, 3.929012346, 0.00000001))) {
        @panic("focal_length test2 failed");
    }
}

fn test_object_distance() void {
    const _u1: f64 = object_distance(30.0, 20.0);
    if (!(isclose(_u1, @as(f64, @floatFromInt(0)) - 60.0, 0.00000001))) {
        @panic("object_distance test1 failed");
    }
    const _u2: f64 = object_distance(10.5, 11.7);
    if (!(isclose(_u2, 102.375, 0.00000001))) {
        @panic("object_distance test2 failed");
    }
}

fn test_image_distance() void {
    const v1: f64 = image_distance(10.0, 40.0);
    if (!(isclose(v1, 13.33333333, 0.00000001))) {
        @panic("image_distance test1 failed");
    }
    const v2: f64 = image_distance(1.5, 6.7);
    if (!(isclose(v2, 1.932692308, 0.00000001))) {
        @panic("image_distance test2 failed");
    }
}

fn mochi_main() void {
    test_focal_length();
    test_object_distance();
    test_image_distance();
    std.debug.print("{s}\n", .{_str(focal_length(10.0, 20.0))});
    std.debug.print("{s}\n", .{_str(object_distance(30.0, 20.0))});
    std.debug.print("{s}\n", .{_str(image_distance(10.0, 40.0))});
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        mochi_main();
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.heap.pageSize()));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
