// Generated by Mochi Zig transpiler on 2025-08-19 09:22 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn pow10(n: i64) f64 {
    var p: f64 = 1.0;
    p = p;
    if (n >= 0) {
        var i: i64 = 0;
        i = i;
        while (i < n) {
            p = p * 10.0;
            i = i +% 1;
        }
    } else {
        var i_1: i64 = 0;
        i_1 = i_1;
        while (i_1 > n) {
            p = p / 10.0;
            i_1 = i_1 -% 1;
        }
    }
    return p;
}

fn floor(x: f64) f64 {
    const i_2: i64 = @as(i64, @intFromFloat(x));
    const f: f64 = @as(f64, @floatFromInt(i_2));
    if (f > x) {
        return @as(f64, @floatFromInt(i_2 -% 1));
    }
    return f;
}

fn format_scientific_3(x_1: f64) []const u8 {
    if (x_1 == 0.0) {
        return "0.000e+00";
    }
    var sign: []const u8 = "";
    sign = sign;
    var num: f64 = x_1;
    num = num;
    if (num < 0.0) {
        sign = "-";
        num = @as(f64, @floatFromInt(0)) - num;
    }
    var exp: i64 = 0;
    exp = exp;
    while (num >= 10.0) {
        num = num / 10.0;
        exp = exp +% 1;
    }
    while (num < 1.0) {
        num = num * 10.0;
        exp = exp -% 1;
    }
    const temp: f64 = floor(num * 1000.0 + 0.5);
    var scaled: i64 = @as(i64, @intFromFloat(temp));
    scaled = scaled;
    if (scaled == 10000) {
        scaled = 1000;
        exp = exp +% 1;
    }
    const int_part: i64 = @divTrunc(scaled, 1000);
    const frac_part: i64 = @mod(scaled, 1000);
    var frac_str: []const u8 = _str(frac_part);
    frac_str = frac_str;
    while (@as(i64, @intCast(frac_str.len)) < 3) {
        frac_str = _concat_string("0", frac_str);
    }
    const mantissa: []const u8 = _concat_string(_concat_string(_str(int_part), "."), frac_str);
    var exp_sign: []const u8 = "+";
    exp_sign = exp_sign;
    var exp_abs: i64 = exp;
    exp_abs = exp_abs;
    if (exp < 0) {
        exp_sign = "-";
        exp_abs = 0 -% exp;
    }
    var exp_str: []const u8 = _str(exp_abs);
    exp_str = exp_str;
    if (exp_abs < 10) {
        exp_str = _concat_string("0", exp_str);
    }
    return _concat_string(_concat_string(_concat_string(_concat_string(sign, mantissa), "e"), exp_sign), exp_str);
}

fn orbital_transfer_work(mass_central: f64, mass_object: f64, r_initial: f64, r_final: f64) []const u8 {
    const G: f64 = 6.67429999999999968 * pow10(0 -% 11);
    if (r_initial <= 0.0 or r_final <= 0.0) {
        @panic("Orbital radii must be greater than zero.");
    }
    const work: f64 = G * mass_central * mass_object / 2.0 * (1.0 / r_initial - 1.0 / r_final);
    return format_scientific_3(work);
}

fn test_orbital_transfer_work() void {
    if (!std.mem.eql(u8, orbital_transfer_work(5.97200000000000042 * pow10(24), 1000.0, 6.37100000000000044 * pow10(6), 7.0 * pow10(6)), "2.811e+09")) {
        @panic("case1 failed");
    }
    if (!std.mem.eql(u8, orbital_transfer_work(5.97200000000000042 * pow10(24), 500.0, 7.0 * pow10(6), 6.37100000000000044 * pow10(6)), "-1.405e+09")) {
        @panic("case2 failed");
    }
    if (!std.mem.eql(u8, orbital_transfer_work(1.9890000000000001 * pow10(30), 1000.0, 1.5 * pow10(11), 2.2799999999999998 * pow10(11)), "1.514e+11")) {
        @panic("case3 failed");
    }
}

fn mochi_main() void {
    test_orbital_transfer_work();
    std.debug.print("{s}\n", .{orbital_transfer_work(5.97200000000000042 * pow10(24), 1000.0, 6.37100000000000044 * pow10(6), 7.0 * pow10(6))});
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        mochi_main();
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
