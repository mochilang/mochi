// Generated by Mochi Zig transpiler on 2025-08-14 10:00 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const RGB = struct {
    r: i64,
    g: i64,
    b: i64,
};

var img1_var: [][]RGB = &[_][]RGB{};
var img2_var: [][]RGB = &[_][]RGB{};

fn round_int(x: f64) i64 {
    return @as(i64, @intFromFloat(x + 0.5));
}

fn hsv_to_rgb(h: f64, s: f64, v: f64) RGB {
    const i: i64 = @as(i64, @intFromFloat(h * 6.0));
    const f: f64 = h * 6.0 - @as(f64, @floatFromInt(i));
    const p: f64 = v * (1.0 - s);
    const q: f64 = v * (1.0 - f * s);
    const t: f64 = v * (1.0 - (1.0 - f) * s);
    const mod: i64 = @mod(i, 6);
    var r: f64 = 0.0;
    r = r;
    var g: f64 = 0.0;
    g = g;
    var b: f64 = 0.0;
    b = b;
    if (mod == 0) {
        r = v;
        g = t;
        b = p;
    } else {
        if (mod == 1) {
            r = q;
            g = v;
            b = p;
        } else {
            if (mod == 2) {
                r = p;
                g = v;
                b = t;
            } else {
                if (mod == 3) {
                    r = p;
                    g = q;
                    b = v;
                } else {
                    if (mod == 4) {
                        r = t;
                        g = p;
                        b = v;
                    } else {
                        r = v;
                        g = p;
                        b = q;
                    }
                }
            }
        }
    }
    return .{ .r = round_int(r * 255.0), .g = round_int(g * 255.0), .b = round_int(b * 255.0) };
}

fn get_distance(x: f64, y: f64, max_step: i64) f64 {
    var a: f64 = x;
    a = a;
    var b: f64 = y;
    b = b;
    var step: i64 = 0 - 1;
    step = step;
    while (step < max_step - 1) {
        step = step + 1;
        const a_new: f64 = a * a - b * b + x;
        b = 2.0 * a * b + y;
        a = a_new;
        if (a * a + b * b > 4.0) {
            break;
        }
    }
    return @as(f64, @floatFromInt(step)) / @as(f64, @floatFromInt(max_step - 1));
}

fn get_black_and_white_rgb(distance: f64) RGB {
    if (distance == 1.0) {
        return .{ .r = 0, .g = 0, .b = 0 };
    } else {
        return .{ .r = 255, .g = 255, .b = 255 };
    }
    return undefined;
}

fn get_color_coded_rgb(distance: f64) RGB {
    if (distance == 1.0) {
        return .{ .r = 0, .g = 0, .b = 0 };
    } else {
        return hsv_to_rgb(distance, 1.0, 1.0);
    }
    return undefined;
}

fn get_image(image_width: i64, image_height: i64, figure_center_x: f64, figure_center_y: f64, figure_width: f64, max_step: i64, use_distance_color_coding: bool) [][]RGB {
    var img: [][]RGB = std.heap.page_allocator.alloc([]RGB, 0) catch unreachable;
    img = img;
    const figure_height: f64 = figure_width / @as(f64, @floatFromInt(image_width)) * @as(f64, @floatFromInt(image_height));
    var image_y: i64 = 0;
    image_y = image_y;
    while (image_y < image_height) {
        var row: []RGB = std.heap.page_allocator.alloc(RGB, 0) catch unreachable;
        row = row;
        var image_x: i64 = 0;
        image_x = image_x;
        while (image_x < image_width) {
            const fx: f64 = figure_center_x + (@as(f64, @floatFromInt(image_x)) / @as(f64, @floatFromInt(image_width)) - 0.5) * figure_width;
            const fy: f64 = figure_center_y + (@as(f64, @floatFromInt(image_y)) / @as(f64, @floatFromInt(image_height)) - 0.5) * figure_height;
            const distance: f64 = get_distance(fx, fy, max_step);
            var rgb: RGB = undefined;
            rgb = rgb;
            if (use_distance_color_coding) {
                rgb = get_color_coded_rgb(distance);
            } else {
                rgb = get_black_and_white_rgb(distance);
            }
            row = blk: { var _tmp = std.ArrayList(RGB).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const RGB, row)) catch |err| handleError(err); _tmp.append(rgb) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            image_x = image_x + 1;
        }
        img = blk: { var _tmp = std.ArrayList([]RGB).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []RGB, img)) catch |err| handleError(err); _tmp.append(row) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        image_y = image_y + 1;
    }
    return img;
}

fn rgb_to_string(c: RGB) []const u8 {
    return _concat_string(_concat_string(_concat_string(_concat_string(_concat_string(_concat_string("(", _str(c.r)), ", "), _str(c.g)), ", "), _str(c.b)), ")");
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        img1_var = get_image(10, 10, @as(f64, @floatFromInt(0)) - 0.6, 0.0, 3.2, 50, true);
        img2_var = get_image(10, 10, @as(f64, @floatFromInt(0)) - 0.6, 0.0, 3.2, 50, false);
        std.debug.print("{s}\n", .{rgb_to_string(img1_var[_idx(img1_var.len, 0)][_idx(img1_var[_idx(img1_var.len, 0)].len, 0)])});
        std.debug.print("{s}\n", .{rgb_to_string(img2_var[_idx(img2_var.len, 0)][_idx(img2_var[_idx(img2_var.len, 0)].len, 0)])});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
