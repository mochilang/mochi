// Generated by Mochi Zig transpiler on 2025-08-14 16:41 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn repeat_char(c: []const u8, count: i64) []const u8 {
    var s: []const u8 = "";
    s = s;
    var i: i64 = 0;
    i = i;
    while (i < count) {
        s = _concat_string(s, c);
        i = i + 1;
    }
    return s;
}

fn vicsek(order: i64) [][]const u8 {
    if (order == 0) {
        return blk: { var _tmp = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp.append("#") catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
    }
    const prev: [][]const u8 = vicsek(order - 1);
    const size: i64 = @as(i64, @intCast(prev.len));
    const blank: []const u8 = repeat_char(" ", size);
    var result: [][]const u8 = std.heap.page_allocator.alloc([]const u8, 0) catch unreachable;
    result = result;
    var i: i64 = 0;
    i = i;
    while (i < size) {
        result = blk: { var _tmp = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []const u8, result)) catch |err| handleError(err); _tmp.append(@constCast(_concat_string(_concat_string(blank, prev[_idx(prev.len, i)]), blank))) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    i = 0;
    while (i < size) {
        result = blk: { var _tmp = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []const u8, result)) catch |err| handleError(err); _tmp.append(@constCast(_concat_string(_concat_string(prev[_idx(prev.len, i)], prev[_idx(prev.len, i)]), prev[_idx(prev.len, i)]))) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    i = 0;
    while (i < size) {
        result = blk: { var _tmp = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []const u8, result)) catch |err| handleError(err); _tmp.append(@constCast(_concat_string(_concat_string(blank, prev[_idx(prev.len, i)]), blank))) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    return result;
}

fn print_pattern(pattern: [][]const u8) void {
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(pattern.len))) {
        std.debug.print("{d}\n", .{pattern[_idx(pattern.len, i)]});
        i = i + 1;
    }
}

fn mochi_main() void {
    const depth: i64 = 3;
    const pattern: [][]const u8 = vicsek(depth);
    print_pattern(pattern);
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        mochi_main();
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
