// Generated by Mochi Zig transpiler on 2025-08-13 16:55 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const Complex = struct {
    re: f64,
    im: f64,
};

fn complex_add(a_param: *Complex, b_param: *Complex) Complex {
    return .{ .re = a_param.re + b_param.re, .im = a_param.im + b_param.im };
}

fn complex_mul(a_param: *Complex, b_param: *Complex) Complex {
    const real: f64 = a_param.re * b_param.re - a_param.im * b_param.im;
    const imag: f64 = a_param.re * b_param.im + a_param.im * b_param.re;
    return .{ .re = real, .im = imag };
}

fn sqrtApprox(x_param: f64) f64 {
    var x_var: f64 = x_param;
    x_var = x_var;
    var guess: f64 = x_var / 2.0;
    guess = guess;
    var i: i64 = 0;
    i = i;
    while (i < 20) {
        guess = (guess + x_var / guess) / 2.0;
        i = i + 1;
    }
    return guess;
}

fn complex_abs(a_param: *Complex) f64 {
    return sqrtApprox(a_param.re * a_param.re + a_param.im * a_param.im);
}

fn sin_taylor(x_param_1: f64) f64 {
    var x_var: f64 = x_param_1;
    x_var = x_var;
    var term: f64 = x_var;
    term = term;
    var sum: f64 = x_var;
    sum = sum;
    var i: i64 = 1;
    i = i;
    while (i < 10) {
        const k1: f64 = 2.0 * @as(f64, @floatFromInt(i));
        const k2: f64 = 2.0 * @as(f64, @floatFromInt(i)) + 1.0;
        term = (@as(f64, @floatFromInt(0)) - term) * x_var * x_var / (k1 * k2);
        sum = sum + term;
        i = i + 1;
    }
    return sum;
}

fn cos_taylor(x_param_2: f64) f64 {
    var x_var: f64 = x_param_2;
    x_var = x_var;
    var term: f64 = 1.0;
    term = term;
    var sum: f64 = 1.0;
    sum = sum;
    var i: i64 = 1;
    i = i;
    while (i < 10) {
        const k1: f64 = 2.0 * @as(f64, @floatFromInt(i)) - 1.0;
        const k2: f64 = 2.0 * @as(f64, @floatFromInt(i));
        term = (@as(f64, @floatFromInt(0)) - term) * x_var * x_var / (k1 * k2);
        sum = sum + term;
        i = i + 1;
    }
    return sum;
}

fn exp_taylor(x_param_3: f64) f64 {
    var x_var: f64 = x_param_3;
    x_var = x_var;
    var term: f64 = 1.0;
    term = term;
    var sum: f64 = 1.0;
    sum = sum;
    var i: f64 = 1.0;
    i = i;
    while (i < 20.0) {
        term = term * x_var / i;
        sum = sum + term;
        i = i + 1.0;
    }
    return sum;
}

fn complex_exp(z_param: *Complex) Complex {
    const e: f64 = exp_taylor(z_param.re);
    return .{ .re = e * cos_taylor(z_param.im), .im = e * sin_taylor(z_param.im) };
}

fn eval_quadratic(c_param_: *Complex, z_param: *Complex) Complex {
    return complex_add(@constCast(&complex_mul(z_param, z_param)), c_param_);
}

fn eval_exponential(c_param__1: *Complex, z_param: *Complex) Complex {
    return complex_add(@constCast(&complex_exp(z_param)), c_param__1);
}

fn iterate_function(eval_function_param: *const fn(*Complex, *Complex) Complex, c_param__2: *Complex, nb_iterations_param: i64, z0_param: *Complex, infinity_param: f64) Complex {
    var nb_iterations_var: i64 = nb_iterations_param;
    nb_iterations_var = nb_iterations_var;
    var infinity_var: f64 = infinity_param;
    infinity_var = infinity_var;
    var z_n: *Complex = z0_param;
    z_n = z_n;
    var i: i64 = 0;
    i = i;
    while (i < nb_iterations_var) {
        z_n = eval_function_param(c_param__2, z_n);
        if (complex_abs(z_n) > infinity_var) {
            return z_n;
        }
        i = i + 1;
    }
    return z_n;
}

fn prepare_grid(window_size_param: f64, nb_pixels_param: i64) [][]Complex {
    var window_size_var: f64 = window_size_param;
    window_size_var = window_size_var;
    var nb_pixels_var: i64 = nb_pixels_param;
    nb_pixels_var = nb_pixels_var;
    var grid: [][]Complex = std.heap.page_allocator.alloc([]Complex, 0) catch unreachable;
    grid = grid;
    var i: i64 = 0;
    i = i;
    while (i < nb_pixels_var) {
        var row: []Complex = std.heap.page_allocator.alloc(Complex, 0) catch unreachable;
        row = row;
        var j: i64 = 0;
        j = j;
        while (j < nb_pixels_var) {
            const real: f64 = @as(f64, @floatFromInt(0)) - window_size_var + 2.0 * window_size_var * @as(f64, @floatFromInt(i)) / @as(f64, @floatFromInt(nb_pixels_var - 1));
            const imag: f64 = @as(f64, @floatFromInt(0)) - window_size_var + 2.0 * window_size_var * @as(f64, @floatFromInt(j)) / @as(f64, @floatFromInt(nb_pixels_var - 1));
            row = blk: { var _tmp = std.ArrayList(Complex).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const Complex, row)) catch |err| handleError(err); _tmp.append(.{ .re = real, .im = imag }) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            j = j + 1;
        }
        grid = blk: { var _tmp = std.ArrayList([]Complex).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []Complex, grid)) catch |err| handleError(err); _tmp.append(row) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    return grid;
}

fn julia_demo() void {
    const grid: [][]Complex = prepare_grid(1.0, 5);
    const c_poly_: Complex = .{ .re = @as(f64, @floatFromInt(0)) - 0.4, .im = 0.6 };
    const c_exp_: Complex = .{ .re = @as(f64, @floatFromInt(0)) - 2.0, .im = 0.0 };
    var poly_result: [][]i64 = std.heap.page_allocator.alloc([]i64, 0) catch unreachable;
    poly_result = poly_result;
    var exp_result: [][]i64 = std.heap.page_allocator.alloc([]i64, 0) catch unreachable;
    exp_result = exp_result;
    var y: i64 = 0;
    y = y;
    while (y < @as(i64, @intCast(grid.len))) {
        var row_poly: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
        row_poly = row_poly;
        var row_exp: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
        row_exp = row_exp;
        var x: i64 = 0;
        x = x;
        while (x < @as(i64, @intCast(grid[_idx(grid.len, y)].len))) {
            const z0: Complex = grid[_idx(grid.len, y)][_idx(grid[_idx(grid.len, y)].len, x)];
            const z_poly: Complex = iterate_function(@constCast(&eval_quadratic), @constCast(&c_poly_), 20, @constCast(&z0), 4.0);
            const z_exp: Complex = iterate_function(@constCast(&eval_exponential), @constCast(&c_exp_), 10, @constCast(&z0), 10000000000.0);
            row_poly = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, row_poly)) catch |err| handleError(err); _tmp.append(if (complex_abs(@constCast(&z_poly)) < 2.0) 1 else 0) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            row_exp = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, row_exp)) catch |err| handleError(err); _tmp.append(if (complex_abs(@constCast(&z_exp)) < 10000.0) 1 else 0) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            x = x + 1;
        }
        poly_result = blk: { var _tmp = std.ArrayList([]i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []i64, poly_result)) catch |err| handleError(err); _tmp.append(row_poly) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        exp_result = blk: { var _tmp = std.ArrayList([]i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []i64, exp_result)) catch |err| handleError(err); _tmp.append(row_exp) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        y = y + 1;
    }
    std.debug.print("{s}\n", .{_str(poly_result)});
    std.debug.print("{s}\n", .{_str(exp_result)});
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        julia_demo();
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
