// Generated by Mochi Zig transpiler on 2025-08-14 16:41 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const Vec = struct {
    x: f64,
    y: f64,
};

const PI_var: f64 = 3.141592653589793;
const TWO_PI_var: f64 = 6.283185307179586;
var VECTOR_1_var: Vec = undefined;
var VECTOR_2_var: Vec = undefined;
var VECTOR_3_var: Vec = undefined;
var INITIAL_VECTORS_var: []Vec = &[_]Vec{};
var example_var: []Vec = &[_]Vec{};

fn _mod(x: f64, m: f64) f64 {
    return x - @as(f64, @floatFromInt(@as(i64, @intFromFloat(x / m)))) * m;
}

fn sin(x: f64) f64 {
    const y: f64 = _mod(x + PI_var, TWO_PI_var) - PI_var;
    const y2: f64 = y * y;
    const y3: f64 = y2 * y;
    const y5: f64 = y3 * y2;
    const y7: f64 = y5 * y2;
    return y - y3 / 6.0 + y5 / 120.0 - y7 / 5040.0;
}

fn cos(x: f64) f64 {
    const y: f64 = _mod(x + PI_var, TWO_PI_var) - PI_var;
    const y2: f64 = y * y;
    const y4: f64 = y2 * y2;
    const y6: f64 = y4 * y2;
    return 1.0 - y2 / 2.0 + y4 / 24.0 - y6 / 720.0;
}

fn rotate(v: Vec, angle_deg: f64) Vec {
    const theta: f64 = angle_deg * PI_var / 180.0;
    const c: f64 = cos(theta);
    const s: f64 = sin(theta);
    return .{ .x = v.x * c - v.y * s, .y = v.x * s + v.y * c };
}

fn iteration_step(vectors: []Vec) []Vec {
    var new_vectors: []Vec = std.heap.page_allocator.alloc(Vec, 0) catch unreachable;
    new_vectors = new_vectors;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(vectors.len)) - 1) {
        const start: Vec = vectors[_idx(vectors.len, i)];
        const end: Vec = vectors[_idx(vectors.len, i + 1)];
        new_vectors = blk: { var _tmp = std.ArrayList(Vec).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const Vec, new_vectors)) catch |err| handleError(err); _tmp.append(start) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        const dx: f64 = end.x - start.x;
        const dy: f64 = end.y - start.y;
        const one_third: Vec = .{ .x = start.x + dx / 3.0, .y = start.y + dy / 3.0 };
        const mid: Vec = rotate(.{ .x = dx / 3.0, .y = dy / 3.0 }, 60.0);
        const peak: Vec = .{ .x = one_third.x + mid.x, .y = one_third.y + mid.y };
        const two_third: Vec = .{ .x = start.x + dx * 2.0 / 3.0, .y = start.y + dy * 2.0 / 3.0 };
        new_vectors = blk: { var _tmp = std.ArrayList(Vec).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const Vec, new_vectors)) catch |err| handleError(err); _tmp.append(one_third) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        new_vectors = blk: { var _tmp = std.ArrayList(Vec).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const Vec, new_vectors)) catch |err| handleError(err); _tmp.append(peak) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        new_vectors = blk: { var _tmp = std.ArrayList(Vec).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const Vec, new_vectors)) catch |err| handleError(err); _tmp.append(two_third) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    new_vectors = blk: { var _tmp = std.ArrayList(Vec).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const Vec, new_vectors)) catch |err| handleError(err); _tmp.append(vectors[_idx(vectors.len, @as(i64, @intCast(vectors.len)) - 1)]) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
    return new_vectors;
}

fn iterate(initial: []Vec, steps: i64) []Vec {
    var vectors: []Vec = blk: { const tmp = std.heap.page_allocator.alloc(Vec, initial.len) catch unreachable; @memcpy(tmp, initial); break :blk tmp; };
    vectors = vectors;
    var i: i64 = 0;
    i = i;
    while (i < steps) {
        vectors = iteration_step(vectors);
        i = i + 1;
    }
    return vectors;
}

fn vec_to_string(v: Vec) []const u8 {
    return _concat_string(_concat_string(_concat_string(_concat_string("(", _str(v.x)), ", "), _str(v.y)), ")");
}

fn vec_list_to_string(lst: []Vec) []const u8 {
    var res: []const u8 = "[";
    res = res;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(lst.len))) {
        res = _concat_string(res, vec_to_string(lst[_idx(lst.len, i)]));
        if (i < @as(i64, @intCast(lst.len)) - 1) {
            res = _concat_string(res, ", ");
        }
        i = i + 1;
    }
    res = _concat_string(res, "]");
    return res;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        VECTOR_1_var = .{ .x = 0.0, .y = 0.0 };
        VECTOR_2_var = .{ .x = 0.5, .y = 0.8660254 };
        VECTOR_3_var = .{ .x = 1.0, .y = 0.0 };
        INITIAL_VECTORS_var = std.heap.page_allocator.dupe(Vec, (&([4]Vec{VECTOR_1_var, VECTOR_2_var, VECTOR_3_var, VECTOR_1_var}))[0..]) catch unreachable;
        example_var = iterate(@constCast(&([2]Vec{VECTOR_1_var, VECTOR_3_var}))[0..], 1);
        std.debug.print("{s}\n", .{vec_list_to_string(example_var)});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
