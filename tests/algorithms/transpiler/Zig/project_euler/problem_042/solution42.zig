// Generated by Mochi Zig transpiler on 2025-08-22 15:25 +0700
const std = @import("std");
const _dataDir = "/workspace/mochi/tests/github/TheAlgorithms/Mochi/project_euler/problem_042";

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn triangular_numbers(limit: i64) []i64 {
    var res: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    res = res;
    var n: i64 = 1;
    n = n;
    while (n <= limit) {
        res = blk0: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, res)) catch |err| handleError(err); _tmp.append(@divTrunc(n *% (n +% 1), 2)) catch |err| handleError(err); break :blk0 (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        n = n +% 1;
    }
    return res;
}

fn parse_words(text: []const u8) [][]const u8 {
    var words: [][]const u8 = std.heap.page_allocator.alloc([]const u8, 0) catch unreachable;
    words = words;
    var current: []const u8 = "";
    current = current;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(text.len))) {
        const c: []const u8 = text[@as(usize, @intCast(i))..@min(@as(usize, @intCast(i +% 1)), @as(usize, @intCast(text.len)))];
        if (std.mem.eql(u8, c, ",")) {
            words = blk1: { var _tmp_1 = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp_1.appendSlice(@as([]const []const u8, words)) catch |err| handleError(err); _tmp_1.append(@constCast(current)) catch |err| handleError(err); break :blk1 (_tmp_1.toOwnedSlice() catch |err| handleError(err)); };
            current = "";
        } else {
            if (std.mem.eql(u8, c, "\"")) {
            } else {
                if (std.mem.eql(u8, c, "\r") or std.mem.eql(u8, c, "\n")) {
                } else {
                    current = _concat_string(current, c);
                }
            }
        }
        i = i +% 1;
    }
    if (@as(i64, @intCast(current.len)) > 0) {
        words = blk2: { var _tmp_2 = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp_2.appendSlice(@as([]const []const u8, words)) catch |err| handleError(err); _tmp_2.append(@constCast(current)) catch |err| handleError(err); break :blk2 (_tmp_2.toOwnedSlice() catch |err| handleError(err)); };
    }
    return words;
}

fn word_value(word: []const u8) i64 {
    var total: i64 = 0;
    total = total;
    var i_1: i64 = 0;
    i_1 = i_1;
    while (i_1 < @as(i64, @intCast(word.len))) {
        total = total +% _ord(word[@as(usize, @intCast(i_1))..@min(@as(usize, @intCast(i_1 +% 1)), @as(usize, @intCast(word.len)))]) -% 64;
        i_1 = i_1 +% 1;
    }
    return total;
}

fn contains(xs: []i64, target: i64) bool {
    for (xs) |__it0| {
        const x = __it0;
        if (x == target) {
            return true;
        }
    }
    return false;
}

fn solution() i64 {
    const text_1: []const u8 = _read_file("words.txt");
    const words_1: [][]const u8 = parse_words(text_1);
    const tri: []i64 = triangular_numbers(100);
    var count: i64 = 0;
    count = count;
    for (words_1) |__it1| {
        const w = __it1;
        const v: i64 = word_value(w);
        if (contains(tri, v)) {
            count = count +% 1;
        }
    }
    return count;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        std.debug.print("{s}\n", .{_str(solution())});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _read_file(path: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    if (std.fs.cwd().readFileAlloc(alloc, path, 1 << 20) catch null) |d| { return d; }
    const joined = std.fs.path.join(alloc, &[_][]const u8{_dataDir, path}) catch return "";
    defer alloc.free(joined);
    return std.fs.cwd().readFileAlloc(alloc, joined, 1 << 20) catch "";
}

fn _ord(s: []const u8) i64 {
    if (s.len == 0) return 0;
    return @as(i64, s[0]);
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
