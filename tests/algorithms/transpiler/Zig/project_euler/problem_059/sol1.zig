// Generated by Mochi Zig transpiler on 2025-08-22 23:09 +0700
const std = @import("std");
const Value = union(enum) { Null: void, Int: i64, Float: f64, Str: []const u8, Bool: bool, List: []Value, StrList: [][]const u8, };

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const ascii_chars_var: []const u8 = " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~";
var LOWERCASE_INTS_var_1: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
var i_var_2: i64 = 97;
const COMMON_WORDS_var_1: [][]const u8 = @constCast(([8][]const u8{"the", "be", "to", "of", "and", "in", "that", "have"})[0..8]);
const ciphertext_var: []i64 = @constCast(([29]i64{17, 6, 1, 69, 12, 1, 69, 26, 11, 69, 1, 2, 69, 15, 10, 1, 78, 13, 11, 78, 16, 13, 15, 16, 69, 6, 5, 19, 11})[0..29]);

fn xor(a: i64, b: i64) i64 {
    var res: i64 = 0;
    res = res;
    var bit: i64 = 1;
    bit = bit;
    var x: i64 = a;
    x = x;
    var y: i64 = b;
    y = y;
    while (x > 0 or y > 0) {
        const abit: i64 = @mod(x, 2);
        const bbit: i64 = @mod(y, 2);
        if (abit != bbit) {
            res = res +% bit;
        }
        x = @divTrunc(x, 2);
        y = @divTrunc(y, 2);
        bit = bit *% 2;
    }
    return res;
}

fn chr(code: i64) []const u8 {
    if (code == 10) {
        return "\n";
    }
    if (code == 13) {
        return "\r";
    }
    if (code == 9) {
        return "\t";
    }
    if (code >= 32 and code < 127) {
        return ascii_chars_var[@as(usize, @intCast(code -% 32))..@min(@as(usize, @intCast(code -% 31)), @as(usize, @intCast(ascii_chars_var.len)))];
    }
    return "";
}

fn ord(ch: []const u8) i64 {
    if (std.mem.eql(u8, ch, "\n")) {
        return 10;
    }
    if (std.mem.eql(u8, ch, "\r")) {
        return 13;
    }
    if (std.mem.eql(u8, ch, "\t")) {
        return 9;
    }
    var i_var_1: i64 = 0;
    i_var_1 = i_var_1;
    while (i_var_1 < @as(i64, @intCast(ascii_chars_var.len))) {
        if (std.mem.eql(u8, ascii_chars_var[@as(usize, @intCast(i_var_1))..@min(@as(usize, @intCast(i_var_1 +% 1)), @as(usize, @intCast(ascii_chars_var.len)))], ch)) {
            return 32 +% i_var_1;
        }
        i_var_1 = i_var_1 +% 1;
    }
    return 0;
}

fn is_valid_ascii(code_1: i64) bool {
    if (code_1 >= 32 and code_1 <= 126) {
        return true;
    }
    if (code_1 == 9 or code_1 == 10 or code_1 == 13) {
        return true;
    }
    return false;
}

fn try_key(ciphertext_param: []i64, key: []i64) []const u8 {
    var decoded: []const u8 = "";
    decoded = decoded;
    var i_var_3: i64 = 0;
    i_var_3 = i_var_3;
    const klen: i64 = @as(i64, @intCast(key.len));
    while (i_var_3 < @as(i64, @intCast(ciphertext_param.len))) {
        const decodedchar: i64 = xor(ciphertext_param[_idx(ciphertext_param.len, i_var_3)], key[_idx(key.len, @mod(i_var_3, klen))]);
        if (!(is_valid_ascii(decodedchar))) {
            return "";
        }
        decoded = _concat_string(decoded, chr(decodedchar));
        i_var_3 = i_var_3 +% 1;
    }
    return decoded;
}

fn filter_valid_chars(ciphertext_param_1: []i64) [][]const u8 {
    var possibles: [][]const u8 = std.heap.page_allocator.alloc([]const u8, 0) catch unreachable;
    possibles = possibles;
    var i_var_4: i64 = 0;
    i_var_4 = i_var_4;
    while (i_var_4 < @as(i64, @intCast(LOWERCASE_INTS_var_1.len))) {
        var j: i64 = 0;
        j = j;
        while (j < @as(i64, @intCast(LOWERCASE_INTS_var_1.len))) {
            var k: i64 = 0;
            k = k;
            while (k < @as(i64, @intCast(LOWERCASE_INTS_var_1.len))) {
                const key_1: []i64 = blk0: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.append(LOWERCASE_INTS_var_1[_idx(LOWERCASE_INTS_var_1.len, i_var_4)]) catch unreachable; _tmp.append(LOWERCASE_INTS_var_1[_idx(LOWERCASE_INTS_var_1.len, j)]) catch unreachable; _tmp.append(LOWERCASE_INTS_var_1[_idx(LOWERCASE_INTS_var_1.len, k)]) catch unreachable; break :blk0 (_tmp.toOwnedSlice() catch unreachable); };
                const decoded_1: []const u8 = try_key(ciphertext_param_1, key_1);
                if (decoded_1.len != 0) {
                    possibles = blk1: { var _tmp_1 = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp_1.appendSlice(@as([]const []const u8, possibles)) catch |err| handleError(err); _tmp_1.append(@constCast(decoded_1)) catch |err| handleError(err); break :blk1 (_tmp_1.toOwnedSlice() catch |err| handleError(err)); };
                }
                k = k +% 1;
            }
            j = j +% 1;
        }
        i_var_4 = i_var_4 +% 1;
    }
    return possibles;
}

fn contains(s: []const u8, sub: []const u8) bool {
    const n: i64 = @as(i64, @intCast(s.len));
    const m: i64 = @as(i64, @intCast(sub.len));
    if (m == 0) {
        return true;
    }
    var i_var_5: i64 = 0;
    i_var_5 = i_var_5;
    while (i_var_5 <= n -% m) {
        var j_1: i64 = 0;
        j_1 = j_1;
        var is_match: bool = true;
        is_match = is_match;
        while (j_1 < m) {
            if (!std.mem.eql(u8, s[_idx(s.len, i_var_5 +% j_1).._idx(s.len, i_var_5 +% j_1) + 1], sub[_idx(sub.len, j_1).._idx(sub.len, j_1) + 1])) {
                is_match = false;
                break;
            }
            j_1 = j_1 +% 1;
        }
        if (is_match) {
            return true;
        }
        i_var_5 = i_var_5 +% 1;
    }
    return false;
}

fn filter_common_word(possibles_1: [][]const u8, common_word: []const u8) [][]const u8 {
    var res_1: [][]const u8 = std.heap.page_allocator.alloc([]const u8, 0) catch unreachable;
    res_1 = res_1;
    var i_var_6: i64 = 0;
    i_var_6 = i_var_6;
    while (i_var_6 < @as(i64, @intCast(possibles_1.len))) {
        const p: []const u8 = possibles_1[_idx(possibles_1.len, i_var_6)];
        if (contains(_lower(p), common_word)) {
            res_1 = blk2: { var _tmp_2 = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp_2.appendSlice(@as([]const []const u8, res_1)) catch |err| handleError(err); _tmp_2.append(@constCast(p)) catch |err| handleError(err); break :blk2 (_tmp_2.toOwnedSlice() catch |err| handleError(err)); };
        }
        i_var_6 = i_var_6 +% 1;
    }
    return res_1;
}

fn solution(ciphertext_param_2: []i64) i64 {
    var possibles_2: [][]const u8 = filter_valid_chars(ciphertext_param_2);
    possibles_2 = possibles_2;
    var i_var_7: i64 = 0;
    i_var_7 = i_var_7;
    while (i_var_7 < @as(i64, @intCast(COMMON_WORDS_var_1.len))) {
        const word: []const u8 = COMMON_WORDS_var_1[_idx(COMMON_WORDS_var_1.len, i_var_7)];
        possibles_2 = filter_common_word(possibles_2, word);
        if (@as(i64, @intCast(possibles_2.len)) == 1) {
            break;
        }
        i_var_7 = i_var_7 +% 1;
    }
    const decoded_text: []const u8 = possibles_2[_idx(possibles_2.len, 0)];
    var sum: i64 = 0;
    sum = sum;
    var j_2: i64 = 0;
    j_2 = j_2;
    while (j_2 < @as(i64, @intCast(decoded_text.len))) {
        sum = sum +% ord(decoded_text[@as(usize, @intCast(j_2))..@min(@as(usize, @intCast(j_2 +% 1)), @as(usize, @intCast(decoded_text.len)))]);
        j_2 = j_2 +% 1;
    }
    return sum;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        while (i_var_2 <= 122) {
            LOWERCASE_INTS_var_1 = blk3: { var _tmp_3 = std.ArrayList(i64).init(std.heap.page_allocator); _tmp_3.appendSlice(@as([]const i64, LOWERCASE_INTS_var_1)) catch |err| handleError(err); _tmp_3.append(i_var_2) catch |err| handleError(err); break :blk3 (_tmp_3.toOwnedSlice() catch |err| handleError(err)); };
            i_var_2 = i_var_2 +% 1;
        }
        std.debug.print("{s}\n", .{_str(solution(ciphertext_var))});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    if (@TypeOf(v) == Value) {
        return switch (v) {
            .Int => std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v.Int}) catch unreachable,
            .Float => std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v.Float}) catch unreachable,
            .Str => std.fmt.allocPrint(std.heap.page_allocator, "'{s}'", .{v.Str}) catch unreachable,
            .Bool => if (v.Bool) "true" else "false",
            .List => _str(v.List),
            .StrList => _str(v.StrList),
            else => "null",
        };
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _upper(s: []const u8) []const u8 {
    var out = std.heap.page_allocator.alloc(u8, s.len + 1) catch unreachable;
    _ = std.ascii.upperString(out[0..s.len], s);
    out[s.len] = 0;
    return out[0..s.len];
}

fn _lower(s: []const u8) []const u8 {
    var out = std.heap.page_allocator.alloc(u8, s.len + 1) catch unreachable;
    _ = std.ascii.lowerString(out[0..s.len], s);
    out[s.len] = 0;
    return out[0..s.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
