// Generated by Mochi Zig transpiler on 2025-08-11 16:20 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

var logins1_var: [][]const u8 = &[_][]const u8{};
var logins2_var: [][]const u8 = &[_][]const u8{};

fn parse_int(s: []const u8) i64 {
    var value: i64 = 0;
    value = value;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(s.len))) {
        const c: []const u8 = s[@as(usize, @intCast(i))..@as(usize, @intCast(i)) + 1];
        value = value * 10 + (std.fmt.parseInt(i64, c, 10) catch 0);
        i = i + 1;
    }
    return value;
}

fn join(xs: []const []const u8) []const u8 {
    var s: []const u8 = "";
    s = s;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(xs.len))) {
        s = _concat_string(s, xs[@as(usize, @intCast(i))]);
        i = i + 1;
    }
    return s;
}

fn contains(xs: []const []const u8, c: []const u8) bool {
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(xs.len))) {
        if (std.mem.eql(u8, xs[@as(usize, @intCast(i))], c)) {
            return true;
        }
        i = i + 1;
    }
    return false;
}

fn index_of(xs: []const []const u8, c: []const u8) i64 {
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(xs.len))) {
        if (std.mem.eql(u8, xs[@as(usize, @intCast(i))], c)) {
            return i;
        }
        i = i + 1;
    }
    return 0 - 1;
}

fn remove_at(xs: []const []const u8, idx: i64) [][]const u8 {
    var res: [][]const u8 = @constCast(&[_][]const u8{})[0..];
    res = res;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(xs.len))) {
        if (i != idx) {
            res = blk: { var _tmp = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []const u8, res)) catch |err| handleError(err); _tmp.append(xs[@as(usize, @intCast(i))]) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        }
        i = i + 1;
    }
    return res;
}

fn unique_chars(logins: []const []const u8) [][]const u8 {
    var chars: [][]const u8 = @constCast(&[_][]const u8{})[0..];
    chars = chars;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(logins.len))) {
        const login: []const u8 = logins[@as(usize, @intCast(i))];
        var j: i64 = 0;
        j = j;
        while (j < @as(i64, @intCast(login.len))) {
            const c: []const u8 = login[@as(usize, @intCast(j))..@as(usize, @intCast(j)) + 1];
            if (!(contains(chars, c))) {
                chars = blk: { var _tmp = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []const u8, chars)) catch |err| handleError(err); _tmp.append(@constCast(c)) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            }
            j = j + 1;
        }
        i = i + 1;
    }
    return chars;
}

fn satisfies(permutation: []const []const u8, logins: []const []const u8) bool {
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(logins.len))) {
        const login: []const u8 = logins[@as(usize, @intCast(i))];
        const _i0: i64 = index_of(permutation, login[@as(usize, @intCast(0))..@as(usize, @intCast(0)) + 1]);
        const _i1: i64 = index_of(permutation, login[@as(usize, @intCast(1))..@as(usize, @intCast(1)) + 1]);
        const _i2: i64 = index_of(permutation, login[@as(usize, @intCast(2))..@as(usize, @intCast(2)) + 1]);
        if (!(_i0 < _i1 and _i1 < _i2)) {
            return false;
        }
        i = i + 1;
    }
    return true;
}

fn search(chars: []const []const u8, current: []const []const u8, logins: []const []const u8) []const u8 {
    if (@as(i64, @intCast(chars.len)) == 0) {
        if (satisfies(current, logins)) {
            return join(current);
        }
        return "";
    }
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(chars.len))) {
        const c: []const u8 = chars[@as(usize, @intCast(i))];
        const rest: []const []const u8 = remove_at(chars[0..], i);
        const next: []const []const u8 = blk: { var _tmp = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []const u8, current)) catch |err| handleError(err); _tmp.append(@constCast(c)) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        const res: []const u8 = search(rest[0..], next, logins);
        if (res.len != 0) {
            return res;
        }
        i = i + 1;
    }
    return "";
}

fn find_secret_passcode(logins: []const []const u8) i64 {
    const chars: []const []const u8 = unique_chars(logins);
    const s: []const u8 = search(chars[0..], &[_][]const u8{}, logins);
    if (s.len == 0) {
        return 0 - 1;
    }
    return parse_int(s);
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        logins1_var = @constCast(&([16][]const u8{"135", "259", "235", "189", "690", "168", "120", "136", "289", "589", "160", "165", "580", "369", "250", "280"}))[0..];
        logins2_var = @constCast(&([16][]const u8{"426", "281", "061", "819", "268", "406", "420", "428", "209", "689", "019", "421", "469", "261", "681", "201"}))[0..];
        std.debug.print("{s}\n", .{_str(find_secret_passcode(logins1_var[0..]))});
        std.debug.print("{s}\n", .{_str(find_secret_passcode(logins2_var[0..]))});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * std.mem.page_size;
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
