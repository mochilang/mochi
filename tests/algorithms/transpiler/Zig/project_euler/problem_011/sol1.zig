// Generated by Mochi Zig transpiler on 2025-08-23 14:49 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn largest_product(grid: [][]i64) i64 {
    const n_rows: i64 = @as(i64, @intCast(grid.len));
    const n_cols: i64 = @as(i64, @intCast(grid[_idx(grid.len, 0)].len));
    var largest: i64 = 0;
    largest = largest;
    var i: i64 = 0;
    i = i;
    while (i < n_rows) {
        var j: i64 = 0;
        j = j;
        while (j < n_cols) {
            if (j <= n_cols -% 4) {
                const horz: i64 = grid[_idx(grid.len, i)][_idx(grid[_idx(grid.len, i)].len, j)] *% grid[_idx(grid.len, i)][_idx(grid[_idx(grid.len, i)].len, j +% 1)] *% grid[_idx(grid.len, i)][_idx(grid[_idx(grid.len, i)].len, j +% 2)] *% grid[_idx(grid.len, i)][_idx(grid[_idx(grid.len, i)].len, j +% 3)];
                if (horz > largest) {
                    largest = horz;
                }
            }
            if (i <= n_rows -% 4) {
                const vert: i64 = grid[_idx(grid.len, i)][_idx(grid[_idx(grid.len, i)].len, j)] *% grid[_idx(grid.len, i +% 1)][_idx(grid[_idx(grid.len, i +% 1)].len, j)] *% grid[_idx(grid.len, i +% 2)][_idx(grid[_idx(grid.len, i +% 2)].len, j)] *% grid[_idx(grid.len, i +% 3)][_idx(grid[_idx(grid.len, i +% 3)].len, j)];
                if (vert > largest) {
                    largest = vert;
                }
                if (j <= n_cols -% 4) {
                    const lr: i64 = grid[_idx(grid.len, i)][_idx(grid[_idx(grid.len, i)].len, j)] *% grid[_idx(grid.len, i +% 1)][_idx(grid[_idx(grid.len, i +% 1)].len, j +% 1)] *% grid[_idx(grid.len, i +% 2)][_idx(grid[_idx(grid.len, i +% 2)].len, j +% 2)] *% grid[_idx(grid.len, i +% 3)][_idx(grid[_idx(grid.len, i +% 3)].len, j +% 3)];
                    if (lr > largest) {
                        largest = lr;
                    }
                }
                if (j >= 3) {
                    const rl: i64 = grid[_idx(grid.len, i)][_idx(grid[_idx(grid.len, i)].len, j)] *% grid[_idx(grid.len, i +% 1)][_idx(grid[_idx(grid.len, i +% 1)].len, j -% 1)] *% grid[_idx(grid.len, i +% 2)][_idx(grid[_idx(grid.len, i +% 2)].len, j -% 2)] *% grid[_idx(grid.len, i +% 3)][_idx(grid[_idx(grid.len, i +% 3)].len, j -% 3)];
                    if (rl > largest) {
                        largest = rl;
                    }
                }
            }
            j = j +% 1;
        }
        i = i +% 1;
    }
    return largest;
}

fn mochi_main() void {
    const grid_1: [][]i64 = @constCast(([20][]i64{@constCast(([20]i64{8, 2, 22, 97, 38, 15, 0, 40, 0, 75, 4, 5, 7, 78, 52, 12, 50, 77, 91, 8})[0..20]), @constCast(([20]i64{49, 49, 99, 40, 17, 81, 18, 57, 60, 87, 17, 40, 98, 43, 69, 48, 4, 56, 62, 0})[0..20]), @constCast(([20]i64{81, 49, 31, 73, 55, 79, 14, 29, 93, 71, 40, 67, 53, 88, 30, 3, 49, 13, 36, 65})[0..20]), @constCast(([20]i64{52, 70, 95, 23, 4, 60, 11, 42, 69, 24, 68, 56, 1, 32, 56, 71, 37, 2, 36, 91})[0..20]), @constCast(([20]i64{22, 31, 16, 71, 51, 67, 63, 89, 41, 92, 36, 54, 22, 40, 40, 28, 66, 33, 13, 80})[0..20]), @constCast(([20]i64{24, 47, 32, 60, 99, 3, 45, 2, 44, 75, 33, 53, 78, 36, 84, 20, 35, 17, 12, 50})[0..20]), @constCast(([20]i64{32, 98, 81, 28, 64, 23, 67, 10, 26, 38, 40, 67, 59, 54, 70, 66, 18, 38, 64, 70})[0..20]), @constCast(([20]i64{67, 26, 20, 68, 2, 62, 12, 20, 95, 63, 94, 39, 63, 8, 40, 91, 66, 49, 94, 21})[0..20]), @constCast(([20]i64{24, 55, 58, 5, 66, 73, 99, 26, 97, 17, 78, 78, 96, 83, 14, 88, 34, 89, 63, 72})[0..20]), @constCast(([20]i64{21, 36, 23, 9, 75, 0, 76, 44, 20, 45, 35, 14, 0, 61, 33, 97, 34, 31, 33, 95})[0..20]), @constCast(([20]i64{78, 17, 53, 28, 22, 75, 31, 67, 15, 94, 3, 80, 4, 62, 16, 14, 9, 53, 56, 92})[0..20]), @constCast(([20]i64{16, 39, 5, 42, 96, 35, 31, 47, 55, 58, 88, 24, 0, 17, 54, 24, 36, 29, 85, 57})[0..20]), @constCast(([20]i64{86, 56, 0, 48, 35, 71, 89, 7, 5, 44, 44, 37, 44, 60, 21, 58, 51, 54, 17, 58})[0..20]), @constCast(([20]i64{19, 80, 81, 68, 5, 94, 47, 69, 28, 73, 92, 13, 86, 52, 17, 77, 4, 89, 55, 40})[0..20]), @constCast(([20]i64{4, 52, 8, 83, 97, 35, 99, 16, 7, 97, 57, 32, 16, 26, 26, 79, 33, 27, 98, 66})[0..20]), @constCast(([20]i64{88, 36, 68, 87, 57, 62, 20, 72, 3, 46, 33, 67, 46, 55, 12, 32, 63, 93, 53, 69})[0..20]), @constCast(([20]i64{4, 42, 16, 73, 38, 25, 39, 11, 24, 94, 72, 18, 8, 46, 29, 32, 40, 62, 76, 36})[0..20]), @constCast(([20]i64{20, 69, 36, 41, 72, 30, 23, 88, 34, 62, 99, 69, 82, 67, 59, 85, 74, 4, 36, 16})[0..20]), @constCast(([20]i64{20, 73, 35, 29, 78, 31, 90, 1, 74, 31, 49, 71, 48, 86, 81, 16, 23, 57, 5, 54})[0..20]), @constCast(([20]i64{1, 70, 54, 71, 83, 51, 54, 69, 16, 92, 33, 48, 61, 43, 52, 1, 89, 19, 67, 48})[0..20])})[0..20]);
    const ans: i64 = largest_product(grid_1);
    std.debug.print("{s}\n", .{_str(ans)});
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        mochi_main();
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
