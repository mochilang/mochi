// Generated by Mochi Zig transpiler on 2025-08-23 14:49 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn int_sqrt(n: i64) i64 {
    var x: i64 = 1;
    x = x;
    while ((x +% 1) *% (x +% 1) <= n) {
        x = x +% 1;
    }
    return x;
}

fn solution(limit: i64) i64 {
    var sum_divs: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    sum_divs = sum_divs;
    var i: i64 = 0;
    i = i;
    while (i <= limit) {
        sum_divs = blk0: { var _tmp = std.ArrayList(i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp.appendSlice(@as([]const i64, sum_divs)) catch |err| handleError(err); _tmp.append(1) catch |err| handleError(err); break :blk0 (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i +% 1;
    }
    const sqrt_limit: i64 = int_sqrt(limit);
    i = 2;
    while (i <= sqrt_limit) {
        sum_divs[_idx(sum_divs.len, i *% i)] = sum_divs[_idx(sum_divs.len, i *% i)] +% i;
        var k: i64 = i +% 1;
        k = k;
        while (k <= @divTrunc(limit, i)) {
            sum_divs[_idx(sum_divs.len, k *% i)] = sum_divs[_idx(sum_divs.len, k *% i)] +% k +% i;
            k = k +% 1;
        }
        i = i +% 1;
    }
    var is_abundant: []bool = std.heap.page_allocator.alloc(bool, 0) catch unreachable;
    is_abundant = is_abundant;
    i = 0;
    while (i <= limit) {
        is_abundant = blk1: { var _tmp_1 = std.ArrayList(bool).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_1.appendSlice(@as([]const bool, is_abundant)) catch |err| handleError(err); _tmp_1.append(false) catch |err| handleError(err); break :blk1 (_tmp_1.toOwnedSlice() catch |err| handleError(err)); };
        i = i +% 1;
    }
    var abundants: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    abundants = abundants;
    var res: i64 = 0;
    res = res;
    var n_1: i64 = 1;
    n_1 = n_1;
    while (n_1 <= limit) {
        if (sum_divs[_idx(sum_divs.len, n_1)] > n_1) {
            abundants = blk2: { var _tmp_2 = std.ArrayList(i64).initCapacity(std.heap.page_allocator, 0) catch |err| handleError(err); _tmp_2.appendSlice(@as([]const i64, abundants)) catch |err| handleError(err); _tmp_2.append(n_1) catch |err| handleError(err); break :blk2 (_tmp_2.toOwnedSlice() catch |err| handleError(err)); };
            is_abundant[_idx(is_abundant.len, n_1)] = true;
        }
        var has_pair: bool = false;
        has_pair = has_pair;
        var j: i64 = 0;
        j = j;
        while (j < @as(i64, @intCast(abundants.len))) {
            const a: i64 = abundants[_idx(abundants.len, j)];
            if (a > n_1) {
                break;
            }
            const b: i64 = n_1 -% a;
            if (b <= limit and is_abundant[_idx(is_abundant.len, b)]) {
                has_pair = true;
                break;
            }
            j = j +% 1;
        }
        if (!(has_pair)) {
            res = res +% n_1;
        }
        n_1 = n_1 +% 1;
    }
    return res;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        std.debug.print("{s}\n", .{_str(solution(28123))});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
