// Generated by Mochi Zig transpiler on 2025-08-23 14:49 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

var N_var: []const u8 = &[_]u8{};

fn str_eval(s: []const u8) i64 {
    var product: i64 = 1;
    product = product;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(s.len))) {
        product = product *% (std.fmt.parseInt(i64, s[@as(usize, @intCast(i))..@min(@as(usize, @intCast(i +% 1)), @as(usize, @intCast(s.len)))], 10) catch 0);
        i = i +% 1;
    }
    return product;
}

fn solution(n: []const u8) i64 {
    var largest_product: i64 = 0 -% 1;
    largest_product = largest_product;
    var substr: []const u8 = n[@as(usize, @intCast(0))..@min(@as(usize, @intCast(13)), @as(usize, @intCast(n.len)))];
    substr = substr;
    var cur_index: i64 = 13;
    cur_index = cur_index;
    while (cur_index < @as(i64, @intCast(n.len)) -% 13) {
        if ((std.fmt.parseInt(i64, n[@as(usize, @intCast(cur_index))..@min(@as(usize, @intCast(cur_index +% 1)), @as(usize, @intCast(n.len)))], 10) catch 0) >= (std.fmt.parseInt(i64, substr[@as(usize, @intCast(0))..@min(@as(usize, @intCast(1)), @as(usize, @intCast(substr.len)))], 10) catch 0)) {
            substr = _concat_string(substr[@as(usize, @intCast(1))..@min(@as(usize, @intCast(@as(i64, @intCast(substr.len)))), @as(usize, @intCast(substr.len)))], n[@as(usize, @intCast(cur_index))..@min(@as(usize, @intCast(cur_index +% 1)), @as(usize, @intCast(n.len)))]);
            cur_index = cur_index +% 1;
        } else {
            const prod: i64 = str_eval(substr);
            if (prod > largest_product) {
                largest_product = prod;
            }
            substr = n[@as(usize, @intCast(cur_index))..@min(@as(usize, @intCast(cur_index +% 13)), @as(usize, @intCast(n.len)))];
            cur_index = cur_index +% 13;
        }
    }
    return largest_product;
}

fn mochi_main() void {
    const res: i64 = solution(N_var);
    std.debug.print("{s}\n", .{_concat_string("solution() = ", _str(res))});
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        N_var = _concat_string(_concat_string(_concat_string(_concat_string(_concat_string(_concat_string(_concat_string(_concat_string(_concat_string(_concat_string(_concat_string(_concat_string(_concat_string(_concat_string(_concat_string(_concat_string(_concat_string(_concat_string(_concat_string("73167176531330624919225119674426574742355349194934", "96983520312774506326239578318016984801869478851843"), "85861560789112949495459501737958331952853208805511"), "12540698747158523863050715693290963295227443043557"), "66896648950445244523161731856403098711121722383113"), "62229893423380308135336276614282806444486645238749"), "30358907296290491560440772390713810515859307960866"), "70172427121883998797908792274921901699720888093776"), "65727333001053367881220235421809751254540594752243"), "52584907711670556013604839586446706324415722155397"), "53697817977846174064955149290862569321978468622482"), "83972241375657056057490261407972968652414535100474"), "82166370484403199890008895243450658541227588666881"), "16427171479924442928230863465674813919123162824586"), "17866458359124566529476545682848912883142607690042"), "24219022671055626321111109370544217506941658960408"), "07198403850962455444362981230987879927244284909188"), "84580156166097919133875499200524063689912560717606"), "05886116467109405077541002256983155200055935729725"), "71636269561882670428252483600823257530420752963450");
        mochi_main();
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
