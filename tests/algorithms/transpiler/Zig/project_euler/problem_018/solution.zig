// Generated by Mochi Zig transpiler on 2025-08-23 14:49 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn solution() i64 {
    const triangle: [][]i64 = @constCast(([15][]i64{@constCast(([1]i64{75})[0..1]), @constCast(([2]i64{95, 64})[0..2]), @constCast(([3]i64{17, 47, 82})[0..3]), @constCast(([4]i64{18, 35, 87, 10})[0..4]), @constCast(([5]i64{20, 4, 82, 47, 65})[0..5]), @constCast(([6]i64{19, 1, 23, 75, 3, 34})[0..6]), @constCast(([7]i64{88, 2, 77, 73, 7, 63, 67})[0..7]), @constCast(([8]i64{99, 65, 4, 28, 6, 16, 70, 92})[0..8]), @constCast(([9]i64{41, 41, 26, 56, 83, 40, 80, 70, 33})[0..9]), @constCast(([10]i64{41, 48, 72, 33, 47, 32, 37, 16, 94, 29})[0..10]), @constCast(([11]i64{53, 71, 44, 65, 25, 43, 91, 52, 97, 51, 14})[0..11]), @constCast(([12]i64{70, 11, 33, 28, 77, 73, 17, 78, 39, 68, 17, 57})[0..12]), @constCast(([13]i64{91, 71, 52, 38, 17, 14, 91, 43, 58, 50, 27, 29, 48})[0..13]), @constCast(([14]i64{63, 66, 4, 68, 89, 53, 67, 30, 73, 16, 69, 87, 40, 31})[0..14]), @constCast(([15]i64{4, 62, 98, 27, 23, 9, 70, 98, 73, 93, 38, 53, 60, 4, 23})[0..15])})[0..15]);
    var i: i64 = 1;
    i = i;
    while (i < @as(i64, @intCast(triangle.len))) {
        var j: i64 = 0;
        j = j;
        while (j < @as(i64, @intCast(triangle[_idx(triangle.len, i)].len))) {
            const prev_row: []i64 = triangle[_idx(triangle.len, i -% 1)];
            const number1: i64 = if (j != @as(i64, @intCast(prev_row.len))) prev_row[_idx(prev_row.len, j)] else 0;
            const number2: i64 = if (j > 0) prev_row[_idx(prev_row.len, j -% 1)] else 0;
            const max_val: i64 = if (number1 > number2) number1 else number2;
            triangle[_idx(triangle.len, i)][_idx(triangle[_idx(triangle.len, i)].len, j)] = triangle[_idx(triangle.len, i)][_idx(triangle[_idx(triangle.len, i)].len, j)] +% max_val;
            j = j +% 1;
        }
        i = i +% 1;
    }
    const last: []i64 = triangle[_idx(triangle.len, @as(i64, @intCast(triangle.len)) -% 1)];
    var k: i64 = 0;
    k = k;
    var best: i64 = 0;
    best = best;
    while (k < @as(i64, @intCast(last.len))) {
        if (last[_idx(last.len, k)] > best) {
            best = last[_idx(last.len, k)];
        }
        k = k +% 1;
    }
    return best;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        std.debug.print("{s}\n", .{_str(solution())});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
