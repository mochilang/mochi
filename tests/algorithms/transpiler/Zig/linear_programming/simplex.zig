// Generated by Mochi Zig transpiler on 2025-08-16 11:48 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

var tableau_var_1: [][]f64 = &[_][]f64{};
var finalTab_var_1: [][]f64 = &[_][]f64{};
var res_var: std.StringHashMap(f64) = std.StringHashMap(f64).init(std.heap.page_allocator);

fn pivot(t_param: [][]f64, row: i64, col: i64) [][]f64 {
    var t_var: [][]f64 = t_param;
    t_var = t_var;
    var pivotRow: []f64 = std.heap.page_allocator.alloc(f64, 0) catch unreachable;
    pivotRow = pivotRow;
    const pivotVal: f64 = t_var[_idx(t_var.len, row)][_idx(t_var[_idx(t_var.len, row)].len, col)];
    for (@as(usize, @intCast(0))..@as(usize, @intCast(@as(i64, @intCast(t_var[_idx(t_var.len, row)].len))))) |__it0| {
        const j: i64 = @as(i64, @intCast(__it0));
        pivotRow = blk0: { var _tmp = std.ArrayList(f64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const f64, pivotRow)) catch |err| handleError(err); _tmp.append(t_var[_idx(t_var.len, row)][_idx(t_var[_idx(t_var.len, row)].len, j)] / pivotVal) catch |err| handleError(err); break :blk0 (_tmp.toOwnedSlice() catch |err| handleError(err)); };
    }
    t_var[_idx(t_var.len, row)] = pivotRow;
    for (@as(usize, @intCast(0))..@as(usize, @intCast(@as(i64, @intCast(t_var.len))))) |__it1| {
        const i: i64 = @as(i64, @intCast(__it1));
        if (i != row) {
            const factor: f64 = t_var[_idx(t_var.len, i)][_idx(t_var[_idx(t_var.len, i)].len, col)];
            var newRow: []f64 = std.heap.page_allocator.alloc(f64, 0) catch unreachable;
            newRow = newRow;
            for (@as(usize, @intCast(0))..@as(usize, @intCast(@as(i64, @intCast(t_var[_idx(t_var.len, i)].len))))) |__it2| {
                const j_1: i64 = @as(i64, @intCast(__it2));
                const value: f64 = t_var[_idx(t_var.len, i)][_idx(t_var[_idx(t_var.len, i)].len, j_1)] - factor * pivotRow[_idx(pivotRow.len, j_1)];
                newRow = blk1: { var _tmp_1 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_1.appendSlice(@as([]const f64, newRow)) catch |err| handleError(err); _tmp_1.append(value) catch |err| handleError(err); break :blk1 (_tmp_1.toOwnedSlice() catch |err| handleError(err)); };
            }
            t_var[_idx(t_var.len, i)] = newRow;
        }
    }
    return t_var;
}

fn findPivot(t: [][]f64) []i64 {
    var col_1: i64 = 0;
    col_1 = col_1;
    var minVal: f64 = 0.0;
    minVal = minVal;
    for (@as(usize, @intCast(0))..@as(usize, @intCast(@as(i64, @intCast(t[_idx(t.len, 0)].len)) -% 1))) |__it3| {
        const j_2: i64 = @as(i64, @intCast(__it3));
        const v: f64 = t[_idx(t.len, 0)][_idx(t[_idx(t.len, 0)].len, j_2)];
        if (v < minVal) {
            minVal = v;
            col_1 = j_2;
        }
    }
    if (minVal >= 0.0) {
        return blk2: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.append(0 -% 1) catch |err| handleError(err); _tmp.append(0 -% 1) catch |err| handleError(err); break :blk2 (_tmp.toOwnedSlice() catch |err| handleError(err)); };
    }
    var row_1: i64 = 0 -% 1;
    row_1 = row_1;
    var minRatio: f64 = 0.0;
    minRatio = minRatio;
    var first: bool = true;
    first = first;
    for (@as(usize, @intCast(1))..@as(usize, @intCast(@as(i64, @intCast(t.len))))) |__it4| {
        const i_1: i64 = @as(i64, @intCast(__it4));
        const coeff: f64 = t[_idx(t.len, i_1)][_idx(t[_idx(t.len, i_1)].len, col_1)];
        if (coeff > 0.0) {
            const rhs: f64 = t[_idx(t.len, i_1)][_idx(t[_idx(t.len, i_1)].len, @as(i64, @intCast(t[_idx(t.len, i_1)].len)) -% 1)];
            const ratio: f64 = rhs / coeff;
            if (first or ratio < minRatio) {
                minRatio = ratio;
                row_1 = i_1;
                first = false;
            }
        }
    }
    return blk3: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.append(row_1) catch |err| handleError(err); _tmp.append(col_1) catch |err| handleError(err); break :blk3 (_tmp.toOwnedSlice() catch |err| handleError(err)); };
}

fn interpret(t_1: [][]f64, nVars: i64) std.StringHashMap(f64) {
    const lastCol: i64 = @as(i64, @intCast(t_1[_idx(t_1.len, 0)].len)) -% 1;
    var p: f64 = t_1[_idx(t_1.len, 0)][_idx(t_1[_idx(t_1.len, 0)].len, lastCol)];
    p = p;
    if (p < 0.0) {
        p = @as(f64, @floatFromInt(0)) - p;
    }
    var result: std.StringHashMap(f64) = std.StringHashMap(f64).init(std.heap.page_allocator);
    result = result;
    result.put("P", p) catch unreachable;
    for (@as(usize, @intCast(0))..@as(usize, @intCast(nVars))) |__it5| {
        const i_2: i64 = @as(i64, @intCast(__it5));
        var nzRow: i64 = 0 -% 1;
        nzRow = nzRow;
        var nzCount: i64 = 0;
        nzCount = nzCount;
        for (@as(usize, @intCast(0))..@as(usize, @intCast(@as(i64, @intCast(t_1.len))))) |__it6| {
            const r: i64 = @as(i64, @intCast(__it6));
            const val: f64 = t_1[_idx(t_1.len, r)][_idx(t_1[_idx(t_1.len, r)].len, i_2)];
            if (val != 0.0) {
                nzCount = nzCount +% 1;
                nzRow = r;
            }
        }
        if (nzCount == 1 and t_1[_idx(t_1.len, nzRow)][_idx(t_1[_idx(t_1.len, nzRow)].len, i_2)] == 1.0) {
            result.put(_concat_string("x", _str(i_2 +% 1)), t_1[_idx(t_1.len, nzRow)][_idx(t_1[_idx(t_1.len, nzRow)].len, lastCol)]) catch unreachable;
        }
    }
    return result;
}

fn simplex(tab: [][]f64) [][]f64 {
    var t_2: [][]f64 = blk4: { const tmp = std.heap.page_allocator.alloc([]f64, tab.len) catch unreachable; @memcpy(tmp, tab); break :blk4 tmp; };
    t_2 = t_2;
    while (true) {
        const p_1: []i64 = findPivot(t_2);
        const row_2: i64 = p_1[_idx(p_1.len, 0)];
        const col_2: i64 = p_1[_idx(p_1.len, 1)];
        if (row_2 < 0) {
            break;
        }
        t_2 = pivot(t_2, row_2, col_2);
    }
    return t_2;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        tableau_var_1 = std.heap.page_allocator.dupe([]f64, blk5: { var _tmp_2 = std.ArrayList([]f64).init(std.heap.page_allocator); _tmp_2.append(@constCast(blk6: { var _tmp_3 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_3.append(@as(f64, @floatFromInt(0)) - 1.0) catch unreachable; _tmp_3.append(@as(f64, @floatFromInt(0)) - 1.0) catch unreachable; _tmp_3.append(0.0) catch unreachable; _tmp_3.append(0.0) catch unreachable; _tmp_3.append(0.0) catch unreachable; break :blk6 (_tmp_3.toOwnedSlice() catch unreachable); })) catch unreachable; _tmp_2.append(@constCast(([5]f64{1.0, 3.0, 1.0, 0.0, 4.0})[0..5])) catch unreachable; _tmp_2.append(@constCast(([5]f64{3.0, 1.0, 0.0, 1.0, 4.0})[0..5])) catch unreachable; break :blk5 (_tmp_2.toOwnedSlice() catch unreachable); }) catch unreachable;
        finalTab_var_1 = simplex(tableau_var_1);
        res_var = interpret(finalTab_var_1, 2);
        std.debug.print("{s}\n", .{_concat_string("P: ", _str(res_var.get("P").?))});
        for (@as(usize, @intCast(0))..@as(usize, @intCast(2))) |__it7| {
            const i_3: i64 = @as(i64, @intCast(__it7));
            const key: []const u8 = _concat_string("x", _str(i_3 +% 1));
            if (res_var.contains(key)) {
                std.debug.print("{s}\n", .{_concat_string(_concat_string(key, ": "), _str(res_var.get(key).?))});
            }
        }
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
