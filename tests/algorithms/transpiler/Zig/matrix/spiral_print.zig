// Generated by Mochi Zig transpiler on 2025-08-16 09:25 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn is_valid_matrix(matrix: [][]i64) bool {
    if (@as(i64, @intCast(matrix.len)) == 0) {
        return false;
    }
    const cols: i64 = @as(i64, @intCast(matrix[_idx(matrix.len, 0)].len));
    for (matrix) |__it0| {
        const row = __it0;
        if (@as(i64, @intCast(row.len)) != cols) {
            return false;
        }
    }
    return true;
}

fn spiral_traversal(matrix_1: [][]i64) []i64 {
    if (!(is_valid_matrix(matrix_1))) {
        return (&[_]i64{})[0..0];
    }
    const rows: i64 = @as(i64, @intCast(matrix_1.len));
    const cols_1: i64 = @as(i64, @intCast(matrix_1[_idx(matrix_1.len, 0)].len));
    var top: i64 = 0;
    top = top;
    var bottom: i64 = rows -% 1;
    bottom = bottom;
    var left: i64 = 0;
    left = left;
    var right: i64 = cols_1 -% 1;
    right = right;
    var result: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    result = result;
    while (left <= right and top <= bottom) {
        var i: i64 = left;
        i = i;
        while (i <= right) {
            result = blk0: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, result)) catch |err| handleError(err); _tmp.append(matrix_1[_idx(matrix_1.len, top)][_idx(matrix_1[_idx(matrix_1.len, top)].len, i)]) catch |err| handleError(err); break :blk0 (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            i = i +% 1;
        }
        top = top +% 1;
        i = top;
        while (i <= bottom) {
            result = blk1: { var _tmp_1 = std.ArrayList(i64).init(std.heap.page_allocator); _tmp_1.appendSlice(@as([]const i64, result)) catch |err| handleError(err); _tmp_1.append(matrix_1[_idx(matrix_1.len, i)][_idx(matrix_1[_idx(matrix_1.len, i)].len, right)]) catch |err| handleError(err); break :blk1 (_tmp_1.toOwnedSlice() catch |err| handleError(err)); };
            i = i +% 1;
        }
        right = right -% 1;
        if (top <= bottom) {
            i = right;
            while (i >= left) {
                result = blk2: { var _tmp_2 = std.ArrayList(i64).init(std.heap.page_allocator); _tmp_2.appendSlice(@as([]const i64, result)) catch |err| handleError(err); _tmp_2.append(matrix_1[_idx(matrix_1.len, bottom)][_idx(matrix_1[_idx(matrix_1.len, bottom)].len, i)]) catch |err| handleError(err); break :blk2 (_tmp_2.toOwnedSlice() catch |err| handleError(err)); };
                i = i -% 1;
            }
            bottom = bottom -% 1;
        }
        if (left <= right) {
            i = bottom;
            while (i >= top) {
                result = blk3: { var _tmp_3 = std.ArrayList(i64).init(std.heap.page_allocator); _tmp_3.appendSlice(@as([]const i64, result)) catch |err| handleError(err); _tmp_3.append(matrix_1[_idx(matrix_1.len, i)][_idx(matrix_1[_idx(matrix_1.len, i)].len, left)]) catch |err| handleError(err); break :blk3 (_tmp_3.toOwnedSlice() catch |err| handleError(err)); };
                i = i -% 1;
            }
            left = left +% 1;
        }
    }
    return result;
}

fn spiral_print_clockwise(matrix_2: [][]i64) void {
    for (spiral_traversal(matrix_2)) |__it1| {
        const value = __it1;
        std.debug.print("{s}\n", .{_str(value)});
    }
}

fn mochi_main() void {
    const a: [][]i64 = @constCast(([3][]i64{@constCast(([4]i64{1, 2, 3, 4})[0..4]), @constCast(([4]i64{5, 6, 7, 8})[0..4]), @constCast(([4]i64{9, 10, 11, 12})[0..4])})[0..3]);
    spiral_print_clockwise(a);
    std.debug.print("{s}\n", .{_str(spiral_traversal(a))});
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        mochi_main();
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
