// Generated by Mochi Zig transpiler on 2025-08-16 09:25 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

var mat_var_2: [][]i64 = &[_][]i64{};
var r90_var: [][]i64 = &[_][]i64{};
var r180_var: [][]i64 = &[_][]i64{};
var r270_var: [][]i64 = &[_][]i64{};

fn abs_int(n: i64) i64 {
    if (n < 0) {
        return 0 -% n;
    }
    return n;
}

fn make_matrix(row_size: i64) [][]i64 {
    var size: i64 = abs_int(row_size);
    size = size;
    if (size == 0) {
        size = 4;
    }
    var mat_var_1: [][]i64 = std.heap.page_allocator.alloc([]i64, 0) catch unreachable;
    mat_var_1 = mat_var_1;
    var y: i64 = 0;
    y = y;
    while (y < size) {
        var row: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
        row = row;
        var x: i64 = 0;
        x = x;
        while (x < size) {
            row = blk0: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, row)) catch |err| handleError(err); _tmp.append(1 +% x +% y *% size) catch |err| handleError(err); break :blk0 (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            x = x +% 1;
        }
        mat_var_1 = blk1: { var _tmp_1 = std.ArrayList([]i64).init(std.heap.page_allocator); _tmp_1.appendSlice(@as([]const []i64, mat_var_1)) catch |err| handleError(err); _tmp_1.append(row) catch |err| handleError(err); break :blk1 (_tmp_1.toOwnedSlice() catch |err| handleError(err)); };
        y = y +% 1;
    }
    return mat_var_1;
}

fn transpose(mat_param: [][]i64) [][]i64 {
    const n_1: i64 = @as(i64, @intCast(mat_param.len));
    var result: [][]i64 = std.heap.page_allocator.alloc([]i64, 0) catch unreachable;
    result = result;
    var i: i64 = 0;
    i = i;
    while (i < n_1) {
        var row_1: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
        row_1 = row_1;
        var j: i64 = 0;
        j = j;
        while (j < n_1) {
            row_1 = blk2: { var _tmp_2 = std.ArrayList(i64).init(std.heap.page_allocator); _tmp_2.appendSlice(@as([]const i64, row_1)) catch |err| handleError(err); _tmp_2.append(mat_param[_idx(mat_param.len, j)][_idx(mat_param[_idx(mat_param.len, j)].len, i)]) catch |err| handleError(err); break :blk2 (_tmp_2.toOwnedSlice() catch |err| handleError(err)); };
            j = j +% 1;
        }
        result = blk3: { var _tmp_3 = std.ArrayList([]i64).init(std.heap.page_allocator); _tmp_3.appendSlice(@as([]const []i64, result)) catch |err| handleError(err); _tmp_3.append(row_1) catch |err| handleError(err); break :blk3 (_tmp_3.toOwnedSlice() catch |err| handleError(err)); };
        i = i +% 1;
    }
    return result;
}

fn reverse_row(mat_param_1: [][]i64) [][]i64 {
    var result_1: [][]i64 = std.heap.page_allocator.alloc([]i64, 0) catch unreachable;
    result_1 = result_1;
    var i_1: i64 = @as(i64, @intCast(mat_param_1.len)) -% 1;
    i_1 = i_1;
    while (i_1 >= 0) {
        result_1 = blk4: { var _tmp_4 = std.ArrayList([]i64).init(std.heap.page_allocator); _tmp_4.appendSlice(@as([]const []i64, result_1)) catch |err| handleError(err); _tmp_4.append(mat_param_1[_idx(mat_param_1.len, i_1)]) catch |err| handleError(err); break :blk4 (_tmp_4.toOwnedSlice() catch |err| handleError(err)); };
        i_1 = i_1 -% 1;
    }
    return result_1;
}

fn reverse_column(mat_param_2: [][]i64) [][]i64 {
    var result_2: [][]i64 = std.heap.page_allocator.alloc([]i64, 0) catch unreachable;
    result_2 = result_2;
    var i_2: i64 = 0;
    i_2 = i_2;
    while (i_2 < @as(i64, @intCast(mat_param_2.len))) {
        var row_2: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
        row_2 = row_2;
        var j_1: i64 = @as(i64, @intCast(mat_param_2[_idx(mat_param_2.len, i_2)].len)) -% 1;
        j_1 = j_1;
        while (j_1 >= 0) {
            row_2 = blk5: { var _tmp_5 = std.ArrayList(i64).init(std.heap.page_allocator); _tmp_5.appendSlice(@as([]const i64, row_2)) catch |err| handleError(err); _tmp_5.append(mat_param_2[_idx(mat_param_2.len, i_2)][_idx(mat_param_2[_idx(mat_param_2.len, i_2)].len, j_1)]) catch |err| handleError(err); break :blk5 (_tmp_5.toOwnedSlice() catch |err| handleError(err)); };
            j_1 = j_1 -% 1;
        }
        result_2 = blk6: { var _tmp_6 = std.ArrayList([]i64).init(std.heap.page_allocator); _tmp_6.appendSlice(@as([]const []i64, result_2)) catch |err| handleError(err); _tmp_6.append(row_2) catch |err| handleError(err); break :blk6 (_tmp_6.toOwnedSlice() catch |err| handleError(err)); };
        i_2 = i_2 +% 1;
    }
    return result_2;
}

fn rotate_90(mat_param_3: [][]i64) [][]i64 {
    const t: [][]i64 = transpose(mat_param_3);
    const rr: [][]i64 = reverse_row(t);
    return rr;
}

fn rotate_180(mat_param_4: [][]i64) [][]i64 {
    const rc: [][]i64 = reverse_column(mat_param_4);
    const rr_1: [][]i64 = reverse_row(rc);
    return rr_1;
}

fn rotate_270(mat_param_5: [][]i64) [][]i64 {
    const t_1: [][]i64 = transpose(mat_param_5);
    const rc_1: [][]i64 = reverse_column(t_1);
    return rc_1;
}

fn row_to_string(row_3: []i64) []const u8 {
    var line: []const u8 = "";
    line = line;
    var i_3: i64 = 0;
    i_3 = i_3;
    while (i_3 < @as(i64, @intCast(row_3.len))) {
        if (i_3 == 0) {
            line = _str(row_3[_idx(row_3.len, i_3)]);
        } else {
            line = _concat_string(_concat_string(line, " "), _str(row_3[_idx(row_3.len, i_3)]));
        }
        i_3 = i_3 +% 1;
    }
    return line;
}

fn print_matrix(mat_param_6: [][]i64) void {
    var i_4: i64 = 0;
    i_4 = i_4;
    while (i_4 < @as(i64, @intCast(mat_param_6.len))) {
        std.debug.print("{s}\n", .{row_to_string(mat_param_6[_idx(mat_param_6.len, i_4)])});
        i_4 = i_4 +% 1;
    }
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        mat_var_2 = make_matrix(4);
        r90_var = rotate_90(mat_var_2);
        r180_var = rotate_180(mat_var_2);
        r270_var = rotate_270(mat_var_2);
        std.debug.print("{s}\n", .{"\norigin:\n"});
        print_matrix(mat_var_2);
        std.debug.print("{s}\n", .{"\nrotate 90 counterclockwise:\n"});
        print_matrix(r90_var);
        mat_var_2 = make_matrix(4);
        std.debug.print("{s}\n", .{"\norigin:\n"});
        print_matrix(mat_var_2);
        std.debug.print("{s}\n", .{"\nrotate 180:\n"});
        print_matrix(r180_var);
        mat_var_2 = make_matrix(4);
        std.debug.print("{s}\n", .{"\norigin:\n"});
        print_matrix(mat_var_2);
        std.debug.print("{s}\n", .{"\nrotate 270 counterclockwise:\n"});
        print_matrix(r270_var);
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
