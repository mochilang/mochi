// Generated by Mochi Zig transpiler on 2025-08-16 09:25 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const matrix_var: [][]i64 = @constCast(([8][]i64{@constCast(([13]i64{0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0})[0..13]), @constCast(([13]i64{0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0})[0..13]), @constCast(([13]i64{0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0})[0..13]), @constCast(([13]i64{0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0})[0..13]), @constCast(([13]i64{0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0})[0..13]), @constCast(([13]i64{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0})[0..13]), @constCast(([13]i64{0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0})[0..13]), @constCast(([13]i64{0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0})[0..13])})[0..8]);

fn encode(row: i64, col: i64) []const u8 {
    return _concat_string(_concat_string(_str(row), ","), _str(col));
}

fn is_safe(row_1: i64, col_1: i64, rows: i64, cols: i64) bool {
    return row_1 >= 0 and row_1 < rows and col_1 >= 0 and col_1 < cols;
}

fn has(seen: *const std.StringHashMap(bool), key: []const u8) bool {
    return seen.contains(key);
}

fn depth_first_search(row_2: i64, col_2: i64, seen_param: *std.StringHashMap(bool), mat: [][]i64) i64 {
    const rows_1: i64 = @as(i64, @intCast(mat.len));
    const cols_1: i64 = @as(i64, @intCast(mat[_idx(mat.len, 0)].len));
    const key_1: []const u8 = encode(row_2, col_2);
    if (is_safe(row_2, col_2, rows_1, cols_1) and !(has(seen_param, key_1)) and mat[_idx(mat.len, row_2)][_idx(mat[_idx(mat.len, row_2)].len, col_2)] == 1) {
        seen_param.put(key_1, true) catch unreachable;
        return 1 + depth_first_search(row_2 + 1, col_2, seen_param, mat) + depth_first_search(row_2 - 1, col_2, seen_param, mat) + depth_first_search(row_2, col_2 + 1, seen_param, mat) + depth_first_search(row_2, col_2 - 1, seen_param, mat);
    } else {
        return 0;
    }
    return 0;
}

fn find_max_area(mat_1: [][]i64) i64 {
    const seen_1: std.StringHashMap(bool) = std.StringHashMap(bool).init(std.heap.page_allocator);
    const rows_2: i64 = @as(i64, @intCast(mat_1.len));
    var max_area: i64 = 0;
    max_area = max_area;
    var r: i64 = 0;
    r = r;
    while (r < rows_2) {
        const line: []i64 = mat_1[_idx(mat_1.len, r)];
        const cols_2: i64 = @as(i64, @intCast(line.len));
        var c: i64 = 0;
        c = c;
        while (c < cols_2) {
            if (line[_idx(line.len, c)] == 1) {
                const key_2: []const u8 = encode(r, c);
                if (!(seen_1.contains(key_2))) {
                    const area: i64 = depth_first_search(r, c, @constCast(&seen_1), mat_1);
                    if (area > max_area) {
                        max_area = area;
                    }
                }
            }
            c = c + 1;
        }
        r = r + 1;
    }
    return max_area;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        std.debug.print("{s}\n", .{_str(find_max_area(matrix_var))});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
