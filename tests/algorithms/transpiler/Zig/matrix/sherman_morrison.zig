// Generated by Mochi Zig transpiler on 2025-08-16 09:25 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const Matrix = struct {
    data: [][]f64,
    rows: i64,
    cols: i64,
};

fn make_matrix(rows: i64, cols: i64, value: f64) Matrix {
    var arr: [][]f64 = std.heap.page_allocator.alloc([]f64, 0) catch unreachable;
    arr = arr;
    var r: i64 = 0;
    r = r;
    while (r < rows) {
        var row: []f64 = std.heap.page_allocator.alloc(f64, 0) catch unreachable;
        row = row;
        var c: i64 = 0;
        c = c;
        while (c < cols) {
            row = blk0: { var _tmp = std.ArrayList(f64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const f64, row)) catch |err| handleError(err); _tmp.append(value) catch |err| handleError(err); break :blk0 (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            c = c +% 1;
        }
        arr = blk1: { var _tmp_1 = std.ArrayList([]f64).init(std.heap.page_allocator); _tmp_1.appendSlice(@as([]const []f64, arr)) catch |err| handleError(err); _tmp_1.append(row) catch |err| handleError(err); break :blk1 (_tmp_1.toOwnedSlice() catch |err| handleError(err)); };
        r = r +% 1;
    }
    return .{ .data = arr, .rows = rows, .cols = cols };
}

fn matrix_from_lists(vals: [][]f64) Matrix {
    const r_1: i64 = @as(i64, @intCast(vals.len));
    const c_1: i64 = if (r_1 == 0) 0 else @as(i64, @intCast(vals[_idx(vals.len, 0)].len));
    return .{ .data = vals, .rows = r_1, .cols = c_1 };
}

fn matrix_to_string(m: Matrix) []const u8 {
    var s: []const u8 = "";
    s = s;
    var i: i64 = 0;
    i = i;
    while (i < m.rows) {
        s = _concat_string(s, "[");
        var j: i64 = 0;
        j = j;
        while (j < m.cols) {
            s = _concat_string(s, _str(m.data[_idx(m.data.len, i)][_idx(m.data[_idx(m.data.len, i)].len, j)]));
            if (j < m.cols -% 1) {
                s = _concat_string(s, ", ");
            }
            j = j +% 1;
        }
        s = _concat_string(s, "]");
        if (i < m.rows -% 1) {
            s = _concat_string(s, "\n");
        }
        i = i +% 1;
    }
    return s;
}

fn matrix_add(a: Matrix, b: Matrix) Matrix {
    if (a.rows != b.rows or a.cols != b.cols) {
        return .{ .data = (&[_][]f64{})[0..0], .rows = 0, .cols = 0 };
    }
    var res: [][]f64 = std.heap.page_allocator.alloc([]f64, 0) catch unreachable;
    res = res;
    var i_1: i64 = 0;
    i_1 = i_1;
    while (i_1 < a.rows) {
        var row_1: []f64 = std.heap.page_allocator.alloc(f64, 0) catch unreachable;
        row_1 = row_1;
        var j_1: i64 = 0;
        j_1 = j_1;
        while (j_1 < a.cols) {
            row_1 = blk2: { var _tmp_2 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_2.appendSlice(@as([]const f64, row_1)) catch |err| handleError(err); _tmp_2.append(a.data[_idx(a.data.len, i_1)][_idx(a.data[_idx(a.data.len, i_1)].len, j_1)] + b.data[_idx(b.data.len, i_1)][_idx(b.data[_idx(b.data.len, i_1)].len, j_1)]) catch |err| handleError(err); break :blk2 (_tmp_2.toOwnedSlice() catch |err| handleError(err)); };
            j_1 = j_1 +% 1;
        }
        res = blk3: { var _tmp_3 = std.ArrayList([]f64).init(std.heap.page_allocator); _tmp_3.appendSlice(@as([]const []f64, res)) catch |err| handleError(err); _tmp_3.append(row_1) catch |err| handleError(err); break :blk3 (_tmp_3.toOwnedSlice() catch |err| handleError(err)); };
        i_1 = i_1 +% 1;
    }
    return .{ .data = res, .rows = a.rows, .cols = a.cols };
}

fn matrix_sub(a_1: Matrix, b_1: Matrix) Matrix {
    if (a_1.rows != b_1.rows or a_1.cols != b_1.cols) {
        return .{ .data = (&[_][]f64{})[0..0], .rows = 0, .cols = 0 };
    }
    var res_1: [][]f64 = std.heap.page_allocator.alloc([]f64, 0) catch unreachable;
    res_1 = res_1;
    var i_2: i64 = 0;
    i_2 = i_2;
    while (i_2 < a_1.rows) {
        var row_2: []f64 = std.heap.page_allocator.alloc(f64, 0) catch unreachable;
        row_2 = row_2;
        var j_2: i64 = 0;
        j_2 = j_2;
        while (j_2 < a_1.cols) {
            row_2 = blk4: { var _tmp_4 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_4.appendSlice(@as([]const f64, row_2)) catch |err| handleError(err); _tmp_4.append(a_1.data[_idx(a_1.data.len, i_2)][_idx(a_1.data[_idx(a_1.data.len, i_2)].len, j_2)] - b_1.data[_idx(b_1.data.len, i_2)][_idx(b_1.data[_idx(b_1.data.len, i_2)].len, j_2)]) catch |err| handleError(err); break :blk4 (_tmp_4.toOwnedSlice() catch |err| handleError(err)); };
            j_2 = j_2 +% 1;
        }
        res_1 = blk5: { var _tmp_5 = std.ArrayList([]f64).init(std.heap.page_allocator); _tmp_5.appendSlice(@as([]const []f64, res_1)) catch |err| handleError(err); _tmp_5.append(row_2) catch |err| handleError(err); break :blk5 (_tmp_5.toOwnedSlice() catch |err| handleError(err)); };
        i_2 = i_2 +% 1;
    }
    return .{ .data = res_1, .rows = a_1.rows, .cols = a_1.cols };
}

fn matrix_mul_scalar(m_1: Matrix, k: f64) Matrix {
    var res_2: [][]f64 = std.heap.page_allocator.alloc([]f64, 0) catch unreachable;
    res_2 = res_2;
    var i_3: i64 = 0;
    i_3 = i_3;
    while (i_3 < m_1.rows) {
        var row_3: []f64 = std.heap.page_allocator.alloc(f64, 0) catch unreachable;
        row_3 = row_3;
        var j_3: i64 = 0;
        j_3 = j_3;
        while (j_3 < m_1.cols) {
            row_3 = blk6: { var _tmp_6 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_6.appendSlice(@as([]const f64, row_3)) catch |err| handleError(err); _tmp_6.append(m_1.data[_idx(m_1.data.len, i_3)][_idx(m_1.data[_idx(m_1.data.len, i_3)].len, j_3)] * k) catch |err| handleError(err); break :blk6 (_tmp_6.toOwnedSlice() catch |err| handleError(err)); };
            j_3 = j_3 +% 1;
        }
        res_2 = blk7: { var _tmp_7 = std.ArrayList([]f64).init(std.heap.page_allocator); _tmp_7.appendSlice(@as([]const []f64, res_2)) catch |err| handleError(err); _tmp_7.append(row_3) catch |err| handleError(err); break :blk7 (_tmp_7.toOwnedSlice() catch |err| handleError(err)); };
        i_3 = i_3 +% 1;
    }
    return .{ .data = res_2, .rows = m_1.rows, .cols = m_1.cols };
}

fn matrix_mul(a_2: Matrix, b_2: Matrix) Matrix {
    if (a_2.cols != b_2.rows) {
        return .{ .data = (&[_][]f64{})[0..0], .rows = 0, .cols = 0 };
    }
    var res_3: [][]f64 = std.heap.page_allocator.alloc([]f64, 0) catch unreachable;
    res_3 = res_3;
    var i_4: i64 = 0;
    i_4 = i_4;
    while (i_4 < a_2.rows) {
        var row_4: []f64 = std.heap.page_allocator.alloc(f64, 0) catch unreachable;
        row_4 = row_4;
        var j_4: i64 = 0;
        j_4 = j_4;
        while (j_4 < b_2.cols) {
            var sum: f64 = 0.0;
            sum = sum;
            var k_1: i64 = 0;
            k_1 = k_1;
            while (k_1 < a_2.cols) {
                sum = sum + a_2.data[_idx(a_2.data.len, i_4)][_idx(a_2.data[_idx(a_2.data.len, i_4)].len, k_1)] * b_2.data[_idx(b_2.data.len, k_1)][_idx(b_2.data[_idx(b_2.data.len, k_1)].len, j_4)];
                k_1 = k_1 +% 1;
            }
            row_4 = blk8: { var _tmp_8 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_8.appendSlice(@as([]const f64, row_4)) catch |err| handleError(err); _tmp_8.append(sum) catch |err| handleError(err); break :blk8 (_tmp_8.toOwnedSlice() catch |err| handleError(err)); };
            j_4 = j_4 +% 1;
        }
        res_3 = blk9: { var _tmp_9 = std.ArrayList([]f64).init(std.heap.page_allocator); _tmp_9.appendSlice(@as([]const []f64, res_3)) catch |err| handleError(err); _tmp_9.append(row_4) catch |err| handleError(err); break :blk9 (_tmp_9.toOwnedSlice() catch |err| handleError(err)); };
        i_4 = i_4 +% 1;
    }
    return .{ .data = res_3, .rows = a_2.rows, .cols = b_2.cols };
}

fn matrix_transpose(m_2: Matrix) Matrix {
    var res_4: [][]f64 = std.heap.page_allocator.alloc([]f64, 0) catch unreachable;
    res_4 = res_4;
    var c_2: i64 = 0;
    c_2 = c_2;
    while (c_2 < m_2.cols) {
        var row_5: []f64 = std.heap.page_allocator.alloc(f64, 0) catch unreachable;
        row_5 = row_5;
        var r_2: i64 = 0;
        r_2 = r_2;
        while (r_2 < m_2.rows) {
            row_5 = blk10: { var _tmp_10 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_10.appendSlice(@as([]const f64, row_5)) catch |err| handleError(err); _tmp_10.append(m_2.data[_idx(m_2.data.len, r_2)][_idx(m_2.data[_idx(m_2.data.len, r_2)].len, c_2)]) catch |err| handleError(err); break :blk10 (_tmp_10.toOwnedSlice() catch |err| handleError(err)); };
            r_2 = r_2 +% 1;
        }
        res_4 = blk11: { var _tmp_11 = std.ArrayList([]f64).init(std.heap.page_allocator); _tmp_11.appendSlice(@as([]const []f64, res_4)) catch |err| handleError(err); _tmp_11.append(row_5) catch |err| handleError(err); break :blk11 (_tmp_11.toOwnedSlice() catch |err| handleError(err)); };
        c_2 = c_2 +% 1;
    }
    return .{ .data = res_4, .rows = m_2.cols, .cols = m_2.rows };
}

fn sherman_morrison(ainv: Matrix, u: Matrix, v: Matrix) Matrix {
    const vt: Matrix = matrix_transpose(v);
    const vu: Matrix = matrix_mul(matrix_mul(vt, ainv), u);
    const factor: f64 = vu.data[_idx(vu.data.len, 0)][_idx(vu.data[_idx(vu.data.len, 0)].len, 0)] + 1.0;
    if (factor == 0.0) {
        return .{ .data = (&[_][]f64{})[0..0], .rows = 0, .cols = 0 };
    }
    const term1: Matrix = matrix_mul(ainv, u);
    const term2: Matrix = matrix_mul(vt, ainv);
    const numerator: Matrix = matrix_mul(term1, term2);
    const scaled: Matrix = matrix_mul_scalar(numerator, 1.0 / factor);
    return matrix_sub(ainv, scaled);
}

fn mochi_main() void {
    const ainv_1: Matrix = matrix_from_lists(@constCast(([3][]f64{@constCast(([3]f64{1.0, 0.0, 0.0})[0..3]), @constCast(([3]f64{0.0, 1.0, 0.0})[0..3]), @constCast(([3]f64{0.0, 0.0, 1.0})[0..3])})[0..3]));
    const u_1: Matrix = matrix_from_lists(@constCast(blk12: { var _tmp_12 = std.ArrayList([]f64).init(std.heap.page_allocator); _tmp_12.append(@constCast(([1]f64{1.0})[0..1])) catch unreachable; _tmp_12.append(@constCast(([1]f64{2.0})[0..1])) catch unreachable; _tmp_12.append(@constCast(blk13: { var _tmp_13 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_13.append(@as(f64, @floatFromInt(0)) - 3.0) catch unreachable; break :blk13 (_tmp_13.toOwnedSlice() catch unreachable); })) catch unreachable; break :blk12 (_tmp_12.toOwnedSlice() catch unreachable); }));
    const v_1: Matrix = matrix_from_lists(@constCast(blk14: { var _tmp_14 = std.ArrayList([]f64).init(std.heap.page_allocator); _tmp_14.append(@constCast(([1]f64{4.0})[0..1])) catch unreachable; _tmp_14.append(@constCast(blk15: { var _tmp_15 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_15.append(@as(f64, @floatFromInt(0)) - 2.0) catch unreachable; break :blk15 (_tmp_15.toOwnedSlice() catch unreachable); })) catch unreachable; _tmp_14.append(@constCast(([1]f64{5.0})[0..1])) catch unreachable; break :blk14 (_tmp_14.toOwnedSlice() catch unreachable); }));
    const result: Matrix = sherman_morrison(ainv_1, u_1, v_1);
    std.debug.print("{s}\n", .{matrix_to_string(result)});
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        mochi_main();
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
