// Generated by Mochi Zig transpiler on 2025-08-16 09:25 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn add(matrices: [][][]f64) [][]f64 {
    const rows: i64 = @as(i64, @intCast(matrices[_idx(matrices.len, 0)].len));
    const cols: i64 = @as(i64, @intCast(matrices[_idx(matrices.len, 0)][_idx(matrices[_idx(matrices.len, 0)].len, 0)].len));
    var r: i64 = 0;
    r = r;
    var result: [][]f64 = std.heap.page_allocator.alloc([]f64, 0) catch unreachable;
    result = result;
    while (r < rows) {
        var row: []f64 = std.heap.page_allocator.alloc(f64, 0) catch unreachable;
        row = row;
        var c: i64 = 0;
        c = c;
        while (c < cols) {
            var sum: f64 = 0.0;
            sum = sum;
            var m: i64 = 0;
            m = m;
            while (m < @as(i64, @intCast(matrices.len))) {
                sum = sum + matrices[_idx(matrices.len, m)][_idx(matrices[_idx(matrices.len, m)].len, r)][_idx(matrices[_idx(matrices.len, m)][_idx(matrices[_idx(matrices.len, m)].len, r)].len, c)];
                m = m + 1;
            }
            row = blk0: { var _tmp = std.ArrayList(f64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const f64, row)) catch |err| handleError(err); _tmp.append(sum) catch |err| handleError(err); break :blk0 (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            c = c + 1;
        }
        result = blk1: { var _tmp_1 = std.ArrayList([]f64).init(std.heap.page_allocator); _tmp_1.appendSlice(@as([]const []f64, result)) catch |err| handleError(err); _tmp_1.append(row) catch |err| handleError(err); break :blk1 (_tmp_1.toOwnedSlice() catch |err| handleError(err)); };
        r = r + 1;
    }
    return result;
}

fn subtract(a: [][]f64, b: [][]f64) [][]f64 {
    const rows_1: i64 = @as(i64, @intCast(a.len));
    const cols_1: i64 = @as(i64, @intCast(a[_idx(a.len, 0)].len));
    var r_1: i64 = 0;
    r_1 = r_1;
    var result_1: [][]f64 = std.heap.page_allocator.alloc([]f64, 0) catch unreachable;
    result_1 = result_1;
    while (r_1 < rows_1) {
        var row_1: []f64 = std.heap.page_allocator.alloc(f64, 0) catch unreachable;
        row_1 = row_1;
        var c_1: i64 = 0;
        c_1 = c_1;
        while (c_1 < cols_1) {
            row_1 = blk2: { var _tmp_2 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_2.appendSlice(@as([]const f64, row_1)) catch |err| handleError(err); _tmp_2.append(a[_idx(a.len, r_1)][_idx(a[_idx(a.len, r_1)].len, c_1)] - b[_idx(b.len, r_1)][_idx(b[_idx(b.len, r_1)].len, c_1)]) catch |err| handleError(err); break :blk2 (_tmp_2.toOwnedSlice() catch |err| handleError(err)); };
            c_1 = c_1 + 1;
        }
        result_1 = blk3: { var _tmp_3 = std.ArrayList([]f64).init(std.heap.page_allocator); _tmp_3.appendSlice(@as([]const []f64, result_1)) catch |err| handleError(err); _tmp_3.append(row_1) catch |err| handleError(err); break :blk3 (_tmp_3.toOwnedSlice() catch |err| handleError(err)); };
        r_1 = r_1 + 1;
    }
    return result_1;
}

fn scalar_multiply(matrix: [][]f64, n: f64) [][]f64 {
    var result_2: [][]f64 = std.heap.page_allocator.alloc([]f64, 0) catch unreachable;
    result_2 = result_2;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(matrix.len))) {
        var row_2: []f64 = std.heap.page_allocator.alloc(f64, 0) catch unreachable;
        row_2 = row_2;
        var j: i64 = 0;
        j = j;
        while (j < @as(i64, @intCast(matrix[_idx(matrix.len, i)].len))) {
            row_2 = blk4: { var _tmp_4 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_4.appendSlice(@as([]const f64, row_2)) catch |err| handleError(err); _tmp_4.append(matrix[_idx(matrix.len, i)][_idx(matrix[_idx(matrix.len, i)].len, j)] * n) catch |err| handleError(err); break :blk4 (_tmp_4.toOwnedSlice() catch |err| handleError(err)); };
            j = j + 1;
        }
        result_2 = blk5: { var _tmp_5 = std.ArrayList([]f64).init(std.heap.page_allocator); _tmp_5.appendSlice(@as([]const []f64, result_2)) catch |err| handleError(err); _tmp_5.append(row_2) catch |err| handleError(err); break :blk5 (_tmp_5.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    return result_2;
}

fn multiply(a_1: [][]f64, b_1: [][]f64) [][]f64 {
    const rowsA: i64 = @as(i64, @intCast(a_1.len));
    const colsA: i64 = @as(i64, @intCast(a_1[_idx(a_1.len, 0)].len));
    _ = @as(i64, @intCast(b_1.len));
    const colsB: i64 = @as(i64, @intCast(b_1[_idx(b_1.len, 0)].len));
    var result_3: [][]f64 = std.heap.page_allocator.alloc([]f64, 0) catch unreachable;
    result_3 = result_3;
    var i_1: i64 = 0;
    i_1 = i_1;
    while (i_1 < rowsA) {
        var row_3: []f64 = std.heap.page_allocator.alloc(f64, 0) catch unreachable;
        row_3 = row_3;
        var j_1: i64 = 0;
        j_1 = j_1;
        while (j_1 < colsB) {
            var sum_1: f64 = 0.0;
            sum_1 = sum_1;
            var k: i64 = 0;
            k = k;
            while (k < colsA) {
                sum_1 = sum_1 + a_1[_idx(a_1.len, i_1)][_idx(a_1[_idx(a_1.len, i_1)].len, k)] * b_1[_idx(b_1.len, k)][_idx(b_1[_idx(b_1.len, k)].len, j_1)];
                k = k + 1;
            }
            row_3 = blk6: { var _tmp_6 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_6.appendSlice(@as([]const f64, row_3)) catch |err| handleError(err); _tmp_6.append(sum_1) catch |err| handleError(err); break :blk6 (_tmp_6.toOwnedSlice() catch |err| handleError(err)); };
            j_1 = j_1 + 1;
        }
        result_3 = blk7: { var _tmp_7 = std.ArrayList([]f64).init(std.heap.page_allocator); _tmp_7.appendSlice(@as([]const []f64, result_3)) catch |err| handleError(err); _tmp_7.append(row_3) catch |err| handleError(err); break :blk7 (_tmp_7.toOwnedSlice() catch |err| handleError(err)); };
        i_1 = i_1 + 1;
    }
    return result_3;
}

fn identity(n_1: i64) [][]f64 {
    var result_4: [][]f64 = std.heap.page_allocator.alloc([]f64, 0) catch unreachable;
    result_4 = result_4;
    var i_2: i64 = 0;
    i_2 = i_2;
    while (i_2 < n_1) {
        var row_4: []f64 = std.heap.page_allocator.alloc(f64, 0) catch unreachable;
        row_4 = row_4;
        var j_2: i64 = 0;
        j_2 = j_2;
        while (j_2 < n_1) {
            if (i_2 == j_2) {
                row_4 = blk8: { var _tmp_8 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_8.appendSlice(@as([]const f64, row_4)) catch |err| handleError(err); _tmp_8.append(1.0) catch |err| handleError(err); break :blk8 (_tmp_8.toOwnedSlice() catch |err| handleError(err)); };
            } else {
                row_4 = blk9: { var _tmp_9 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_9.appendSlice(@as([]const f64, row_4)) catch |err| handleError(err); _tmp_9.append(0.0) catch |err| handleError(err); break :blk9 (_tmp_9.toOwnedSlice() catch |err| handleError(err)); };
            }
            j_2 = j_2 + 1;
        }
        result_4 = blk10: { var _tmp_10 = std.ArrayList([]f64).init(std.heap.page_allocator); _tmp_10.appendSlice(@as([]const []f64, result_4)) catch |err| handleError(err); _tmp_10.append(row_4) catch |err| handleError(err); break :blk10 (_tmp_10.toOwnedSlice() catch |err| handleError(err)); };
        i_2 = i_2 + 1;
    }
    return result_4;
}

fn transpose(matrix_1: [][]f64) [][]f64 {
    const rows_2: i64 = @as(i64, @intCast(matrix_1.len));
    const cols_2: i64 = @as(i64, @intCast(matrix_1[_idx(matrix_1.len, 0)].len));
    var result_5: [][]f64 = std.heap.page_allocator.alloc([]f64, 0) catch unreachable;
    result_5 = result_5;
    var c_2: i64 = 0;
    c_2 = c_2;
    while (c_2 < cols_2) {
        var row_5: []f64 = std.heap.page_allocator.alloc(f64, 0) catch unreachable;
        row_5 = row_5;
        var r_2: i64 = 0;
        r_2 = r_2;
        while (r_2 < rows_2) {
            row_5 = blk11: { var _tmp_11 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_11.appendSlice(@as([]const f64, row_5)) catch |err| handleError(err); _tmp_11.append(matrix_1[_idx(matrix_1.len, r_2)][_idx(matrix_1[_idx(matrix_1.len, r_2)].len, c_2)]) catch |err| handleError(err); break :blk11 (_tmp_11.toOwnedSlice() catch |err| handleError(err)); };
            r_2 = r_2 + 1;
        }
        result_5 = blk12: { var _tmp_12 = std.ArrayList([]f64).init(std.heap.page_allocator); _tmp_12.appendSlice(@as([]const []f64, result_5)) catch |err| handleError(err); _tmp_12.append(row_5) catch |err| handleError(err); break :blk12 (_tmp_12.toOwnedSlice() catch |err| handleError(err)); };
        c_2 = c_2 + 1;
    }
    return result_5;
}

fn minor(matrix_2: [][]f64, row_6: i64, column: i64) [][]f64 {
    var result_6: [][]f64 = std.heap.page_allocator.alloc([]f64, 0) catch unreachable;
    result_6 = result_6;
    var i_3: i64 = 0;
    i_3 = i_3;
    while (i_3 < @as(i64, @intCast(matrix_2.len))) {
        if (i_3 != row_6) {
            var new_row: []f64 = std.heap.page_allocator.alloc(f64, 0) catch unreachable;
            new_row = new_row;
            var j_3: i64 = 0;
            j_3 = j_3;
            while (j_3 < @as(i64, @intCast(matrix_2[_idx(matrix_2.len, i_3)].len))) {
                if (j_3 != column) {
                    new_row = blk13: { var _tmp_13 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_13.appendSlice(@as([]const f64, new_row)) catch |err| handleError(err); _tmp_13.append(matrix_2[_idx(matrix_2.len, i_3)][_idx(matrix_2[_idx(matrix_2.len, i_3)].len, j_3)]) catch |err| handleError(err); break :blk13 (_tmp_13.toOwnedSlice() catch |err| handleError(err)); };
                }
                j_3 = j_3 + 1;
            }
            result_6 = blk14: { var _tmp_14 = std.ArrayList([]f64).init(std.heap.page_allocator); _tmp_14.appendSlice(@as([]const []f64, result_6)) catch |err| handleError(err); _tmp_14.append(new_row) catch |err| handleError(err); break :blk14 (_tmp_14.toOwnedSlice() catch |err| handleError(err)); };
        }
        i_3 = i_3 + 1;
    }
    return result_6;
}

fn determinant(matrix_3: [][]f64) f64 {
    if (@as(i64, @intCast(matrix_3.len)) == 1) {
        return matrix_3[_idx(matrix_3.len, 0)][_idx(matrix_3[_idx(matrix_3.len, 0)].len, 0)];
    }
    var det: f64 = 0.0;
    det = det;
    var c_3: i64 = 0;
    c_3 = c_3;
    while (c_3 < @as(i64, @intCast(matrix_3[_idx(matrix_3.len, 0)].len))) {
        const sub: [][]f64 = minor(matrix_3, 0, c_3);
        const sign: f64 = if (@mod(c_3, 2) == 0) 1.0 else @as(f64, @floatFromInt(0)) - 1.0;
        det = det + matrix_3[_idx(matrix_3.len, 0)][_idx(matrix_3[_idx(matrix_3.len, 0)].len, c_3)] * determinant(sub) * sign;
        c_3 = c_3 + 1;
    }
    return det;
}

fn inverse(matrix_4: [][]f64) [][]f64 {
    const det_1: f64 = determinant(matrix_4);
    if (det_1 == 0.0) {
        return (&[_][]f64{})[0..0];
    }
    const size: i64 = @as(i64, @intCast(matrix_4.len));
    var matrix_minor: [][]f64 = std.heap.page_allocator.alloc([]f64, 0) catch unreachable;
    matrix_minor = matrix_minor;
    var i_4: i64 = 0;
    i_4 = i_4;
    while (i_4 < size) {
        var row_7: []f64 = std.heap.page_allocator.alloc(f64, 0) catch unreachable;
        row_7 = row_7;
        var j_4: i64 = 0;
        j_4 = j_4;
        while (j_4 < size) {
            const m_1: [][]f64 = minor(matrix_4, i_4, j_4);
            row_7 = blk15: { var _tmp_15 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_15.appendSlice(@as([]const f64, row_7)) catch |err| handleError(err); _tmp_15.append(determinant(m_1)) catch |err| handleError(err); break :blk15 (_tmp_15.toOwnedSlice() catch |err| handleError(err)); };
            j_4 = j_4 + 1;
        }
        matrix_minor = blk16: { var _tmp_16 = std.ArrayList([]f64).init(std.heap.page_allocator); _tmp_16.appendSlice(@as([]const []f64, matrix_minor)) catch |err| handleError(err); _tmp_16.append(row_7) catch |err| handleError(err); break :blk16 (_tmp_16.toOwnedSlice() catch |err| handleError(err)); };
        i_4 = i_4 + 1;
    }
    var cofactors: [][]f64 = std.heap.page_allocator.alloc([]f64, 0) catch unreachable;
    cofactors = cofactors;
    i_4 = 0;
    while (i_4 < size) {
        var row_8: []f64 = std.heap.page_allocator.alloc(f64, 0) catch unreachable;
        row_8 = row_8;
        var j_5: i64 = 0;
        j_5 = j_5;
        while (j_5 < size) {
            const sign_1: f64 = if (@mod(i_4 + j_5, 2) == 0) 1.0 else @as(f64, @floatFromInt(0)) - 1.0;
            row_8 = blk17: { var _tmp_17 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_17.appendSlice(@as([]const f64, row_8)) catch |err| handleError(err); _tmp_17.append(matrix_minor[_idx(matrix_minor.len, i_4)][_idx(matrix_minor[_idx(matrix_minor.len, i_4)].len, j_5)] * sign_1) catch |err| handleError(err); break :blk17 (_tmp_17.toOwnedSlice() catch |err| handleError(err)); };
            j_5 = j_5 + 1;
        }
        cofactors = blk18: { var _tmp_18 = std.ArrayList([]f64).init(std.heap.page_allocator); _tmp_18.appendSlice(@as([]const []f64, cofactors)) catch |err| handleError(err); _tmp_18.append(row_8) catch |err| handleError(err); break :blk18 (_tmp_18.toOwnedSlice() catch |err| handleError(err)); };
        i_4 = i_4 + 1;
    }
    const adjugate: [][]f64 = transpose(cofactors);
    return scalar_multiply(adjugate, 1.0 / det_1);
}

fn mochi_main() void {
    const matrix_a: [][]f64 = @constCast(([2][]f64{@constCast(([2]f64{12.0, 10.0})[0..2]), @constCast(([2]f64{3.0, 9.0})[0..2])})[0..2]);
    const matrix_b: [][]f64 = @constCast(([2][]f64{@constCast(([2]f64{3.0, 4.0})[0..2]), @constCast(([2]f64{7.0, 4.0})[0..2])})[0..2]);
    const matrix_c: [][]f64 = @constCast(([4][]f64{@constCast(([4]f64{11.0, 12.0, 13.0, 14.0})[0..4]), @constCast(([4]f64{21.0, 22.0, 23.0, 24.0})[0..4]), @constCast(([4]f64{31.0, 32.0, 33.0, 34.0})[0..4]), @constCast(([4]f64{41.0, 42.0, 43.0, 44.0})[0..4])})[0..4]);
    const matrix_d: [][]f64 = blk19: { var _tmp_19 = std.ArrayList([]f64).init(std.heap.page_allocator); _tmp_19.append(@constCast(([3]f64{3.0, 0.0, 2.0})[0..3])) catch unreachable; _tmp_19.append(@constCast(blk20: { var _tmp_20 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_20.append(2.0) catch unreachable; _tmp_20.append(0.0) catch unreachable; _tmp_20.append(@as(f64, @floatFromInt(0)) - 2.0) catch unreachable; break :blk20 (_tmp_20.toOwnedSlice() catch unreachable); })) catch unreachable; _tmp_19.append(@constCast(([3]f64{0.0, 1.0, 1.0})[0..3])) catch unreachable; break :blk19 (_tmp_19.toOwnedSlice() catch unreachable); };
    std.debug.print("{s}\n", .{_concat_string(_concat_string("Add Operation, add(matrix_a, matrix_b) = ", _str(add(@constCast(blk21: { var _tmp_21 = std.ArrayList([][]f64).init(std.heap.page_allocator); _tmp_21.append(matrix_a) catch unreachable; _tmp_21.append(matrix_b) catch unreachable; break :blk21 (_tmp_21.toOwnedSlice() catch unreachable); })))), " \n")});
    std.debug.print("{s}\n", .{_concat_string(_concat_string("Multiply Operation, multiply(matrix_a, matrix_b) = ", _str(multiply(matrix_a, matrix_b))), " \n")});
    std.debug.print("{s}\n", .{_concat_string(_concat_string("Identity: ", _str(identity(5))), "\n")});
    std.debug.print("{s}\n", .{_concat_string(_concat_string(_concat_string(_concat_string("Minor of ", _str(matrix_c)), " = "), _str(minor(matrix_c, 1, 2))), " \n")});
    std.debug.print("{s}\n", .{_concat_string(_concat_string(_concat_string(_concat_string("Determinant of ", _str(matrix_b)), " = "), _str(determinant(matrix_b))), " \n")});
    std.debug.print("{s}\n", .{_concat_string(_concat_string(_concat_string(_concat_string("Inverse of ", _str(matrix_d)), " = "), _str(inverse(matrix_d))), "\n")});
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        mochi_main();
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
