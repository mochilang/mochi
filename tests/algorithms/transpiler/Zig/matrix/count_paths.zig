// Generated by Mochi Zig transpiler on 2025-08-12 09:14 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn depth_first_search(grid_param: [][]i64, row_param: i64, col_param: i64, visit_param: [][]bool) i64 {
    var grid_var: [][]i64 = grid_param;
    grid_var = grid_var;
    var row_var: i64 = row_param;
    row_var = row_var;
    var col_var: i64 = col_param;
    col_var = col_var;
    var visit_var: [][]bool = visit_param;
    visit_var = visit_var;
    const row_length: i64 = @as(i64, @intCast(grid_var.len));
    const col_length: i64 = @as(i64, @intCast(grid_var[@as(usize, @intCast(0))].len));
    if (row_var < 0 or col_var < 0 or row_var == row_length or col_var == col_length) {
        return 0;
    }
    if (visit_var[@as(usize, @intCast(row_var))][@as(usize, @intCast(col_var))]) {
        return 0;
    }
    if (grid_var[@as(usize, @intCast(row_var))][@as(usize, @intCast(col_var))] == 1) {
        return 0;
    }
    if (row_var == row_length - 1 and col_var == col_length - 1) {
        return 1;
    }
    visit_var[@as(usize, @intCast(row_var))][@as(usize, @intCast(col_var))] = true;
    var count: i64 = 0;
    count = count;
    count = count + depth_first_search(grid_var, row_var + 1, col_var, visit_var);
    count = count + depth_first_search(grid_var, row_var - 1, col_var, visit_var);
    count = count + depth_first_search(grid_var, row_var, col_var + 1, visit_var);
    count = count + depth_first_search(grid_var, row_var, col_var - 1, visit_var);
    visit_var[@as(usize, @intCast(row_var))][@as(usize, @intCast(col_var))] = false;
    return count;
}

fn count_paths(grid_param_1: [][]i64) i64 {
    var grid_var: [][]i64 = grid_param_1;
    grid_var = grid_var;
    const rows: i64 = @as(i64, @intCast(grid_var.len));
    const cols: i64 = @as(i64, @intCast(grid_var[@as(usize, @intCast(0))].len));
    var visit: [][]bool = @constCast(&[_][]bool{})[0..];
    visit = visit;
    var i: i64 = 0;
    i = i;
    while (i < rows) {
        var row_visit: []bool = @constCast(&[_]bool{})[0..];
        row_visit = row_visit;
        var j: i64 = 0;
        j = j;
        while (j < cols) {
            row_visit = blk: { var _tmp = std.ArrayList(bool).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const bool, row_visit)) catch |err| handleError(err); _tmp.append(false) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            j = j + 1;
        }
        visit = blk: { var _tmp = std.ArrayList([]bool).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []bool, visit)) catch |err| handleError(err); _tmp.append(row_visit) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    return depth_first_search(grid_var, 0, 0, visit);
}

fn mochi_main() void {
    const grid1: [][]i64 = @constCast(&([4][]i64{@constCast(&([4]i64{0, 0, 0, 0}))[0..], @constCast(&([4]i64{1, 1, 0, 0}))[0..], @constCast(&([4]i64{0, 0, 0, 1}))[0..], @constCast(&([4]i64{0, 1, 0, 0}))[0..]}))[0..];
    std.debug.print("{s}\n", .{_str(count_paths(grid1))});
    const grid2: [][]i64 = @constCast(&([4][]i64{@constCast(&([5]i64{0, 0, 0, 0, 0}))[0..], @constCast(&([5]i64{0, 1, 1, 1, 0}))[0..], @constCast(&([5]i64{0, 1, 1, 1, 0}))[0..], @constCast(&([5]i64{0, 0, 0, 0, 0}))[0..]}))[0..];
    std.debug.print("{s}\n", .{_str(count_paths(grid2))});
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        mochi_main();
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * std.mem.page_size;
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
