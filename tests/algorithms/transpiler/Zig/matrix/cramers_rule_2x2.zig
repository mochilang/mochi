// Generated by Mochi Zig transpiler on 2025-08-12 13:41 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn cramers_rule_2x2(eq1_param: []f64, eq2_param: []f64) []f64 {
    var eq1_var: []f64 = eq1_param;
    eq1_var = eq1_var;
    var eq2_var: []f64 = eq2_param;
    eq2_var = eq2_var;
    if (@as(i64, @intCast(eq1_var.len)) != 3 or @as(i64, @intCast(eq2_var.len)) != 3) {
        @panic("Please enter a valid equation.");
    }
    if (eq1_var[_idx(eq1_var.len, 0)] == 0.0 and eq1_var[_idx(eq1_var.len, 1)] == 0.0 and eq2_var[_idx(eq2_var.len, 0)] == 0.0 and eq2_var[_idx(eq2_var.len, 1)] == 0.0) {
        @panic("Both a & b of two equations can't be zero.");
    }
    const a1: f64 = eq1_var[_idx(eq1_var.len, 0)];
    const b1: f64 = eq1_var[_idx(eq1_var.len, 1)];
    const c1: f64 = eq1_var[_idx(eq1_var.len, 2)];
    const a2: f64 = eq2_var[_idx(eq2_var.len, 0)];
    const b2: f64 = eq2_var[_idx(eq2_var.len, 1)];
    const c2: f64 = eq2_var[_idx(eq2_var.len, 2)];
    const determinant: f64 = a1 * b2 - a2 * b1;
    const determinant_x: f64 = c1 * b2 - c2 * b1;
    const determinant_y: f64 = a1 * c2 - a2 * c1;
    if (determinant == 0.0) {
        if (determinant_x == 0.0 and determinant_y == 0.0) {
            @panic("Infinite solutions. (Consistent system)");
        }
        @panic("No solution. (Inconsistent system)");
    }
    if (determinant_x == 0.0 and determinant_y == 0.0) {
        return blk: { var _tmp = std.ArrayList(f64).init(std.heap.page_allocator); _tmp.append(0.0) catch |err| handleError(err); _tmp.append(0.0) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
    }
    const x: f64 = determinant_x / determinant;
    const y: f64 = determinant_y / determinant;
    return blk: { var _tmp = std.ArrayList(f64).init(std.heap.page_allocator); _tmp.append(x) catch |err| handleError(err); _tmp.append(y) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
}

fn test_cramers_rule_2x2() void {
    const r1: []f64 = cramers_rule_2x2(@constCast(&([3]f64{2.0, 3.0, 0.0}))[0..], @constCast(&([3]f64{5.0, 1.0, 0.0}))[0..]);
    if (r1[_idx(r1.len, 0)] != 0.0 or r1[_idx(r1.len, 1)] != 0.0) {
        @panic("Test1 failed");
    }
    const r2: []f64 = cramers_rule_2x2(@constCast(&([3]f64{0.0, 4.0, 50.0}))[0..], @constCast(&([3]f64{2.0, 0.0, 26.0}))[0..]);
    if (r2[_idx(r2.len, 0)] != 13.0 or r2[_idx(r2.len, 1)] != 12.5) {
        @panic("Test2 failed");
    }
}

fn mochi_main() void {
    test_cramers_rule_2x2();
    std.debug.print("{s}\n", .{_str(cramers_rule_2x2(@constCast(&([3]f64{11.0, 2.0, 30.0}))[0..], @constCast(&([3]f64{1.0, 0.0, 4.0}))[0..]))});
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        mochi_main();
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .pointer => |p| {
        if (p.size == .slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .@"struct" => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.heap.pageSize()));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
