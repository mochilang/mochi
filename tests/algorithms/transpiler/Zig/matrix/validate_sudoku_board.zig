// Generated by Mochi Zig transpiler on 2025-08-16 09:25 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const NUM_SQUARES_var: i64 = 9;
const EMPTY_CELL_var: []const u8 = ".";
const valid_board_var: [][][]const u8 = @constCast(([9][][]const u8{@constCast(([9][]const u8{"5", "3", ".", ".", "7", ".", ".", ".", "."})[0..9]), @constCast(([9][]const u8{"6", ".", ".", "1", "9", "5", ".", ".", "."})[0..9]), @constCast(([9][]const u8{".", "9", "8", ".", ".", ".", ".", "6", "."})[0..9]), @constCast(([9][]const u8{"8", ".", ".", ".", "6", ".", ".", ".", "3"})[0..9]), @constCast(([9][]const u8{"4", ".", ".", "8", ".", "3", ".", ".", "1"})[0..9]), @constCast(([9][]const u8{"7", ".", ".", ".", "2", ".", ".", ".", "6"})[0..9]), @constCast(([9][]const u8{".", "6", ".", ".", ".", ".", "2", "8", "."})[0..9]), @constCast(([9][]const u8{".", ".", ".", "4", "1", "9", ".", ".", "5"})[0..9]), @constCast(([9][]const u8{".", ".", ".", ".", "8", ".", ".", "7", "9"})[0..9])})[0..9]);
const invalid_board_var: [][][]const u8 = @constCast(([9][][]const u8{@constCast(([9][]const u8{"8", "3", ".", ".", "7", ".", ".", ".", "."})[0..9]), @constCast(([9][]const u8{"6", ".", ".", "1", "9", "5", ".", ".", "."})[0..9]), @constCast(([9][]const u8{".", "9", "8", ".", ".", ".", ".", "6", "."})[0..9]), @constCast(([9][]const u8{"8", ".", ".", ".", "6", ".", ".", ".", "3"})[0..9]), @constCast(([9][]const u8{"4", ".", ".", "8", ".", "3", ".", ".", "1"})[0..9]), @constCast(([9][]const u8{"7", ".", ".", ".", "2", ".", ".", ".", "6"})[0..9]), @constCast(([9][]const u8{".", "6", ".", ".", ".", ".", "2", "8", "."})[0..9]), @constCast(([9][]const u8{".", ".", ".", "4", "1", "9", ".", ".", "5"})[0..9]), @constCast(([9][]const u8{".", ".", ".", ".", "8", ".", ".", "7", "9"})[0..9])})[0..9]);

fn is_valid_sudoku_board(board: [][][]const u8) bool {
    if (@as(i64, @intCast(board.len)) != NUM_SQUARES_var) {
        return false;
    }
    var i: i64 = 0;
    i = i;
    while (i < NUM_SQUARES_var) {
        if (@as(i64, @intCast(board[_idx(board.len, i)].len)) != NUM_SQUARES_var) {
            return false;
        }
        i = i +% 1;
    }
    var rows: [][][]const u8 = std.heap.page_allocator.alloc([][]const u8, 0) catch unreachable;
    rows = rows;
    var cols: [][][]const u8 = std.heap.page_allocator.alloc([][]const u8, 0) catch unreachable;
    cols = cols;
    var boxes: [][][]const u8 = std.heap.page_allocator.alloc([][]const u8, 0) catch unreachable;
    boxes = boxes;
    i = 0;
    while (i < NUM_SQUARES_var) {
        rows = blk0: { var _tmp = std.ArrayList([][]const u8).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const [][]const u8, rows)) catch |err| handleError(err); _tmp.append(@constCast((&[_][]const u8{})[0..0])) catch |err| handleError(err); break :blk0 (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        cols = blk1: { var _tmp_1 = std.ArrayList([][]const u8).init(std.heap.page_allocator); _tmp_1.appendSlice(@as([]const [][]const u8, cols)) catch |err| handleError(err); _tmp_1.append(@constCast((&[_][]const u8{})[0..0])) catch |err| handleError(err); break :blk1 (_tmp_1.toOwnedSlice() catch |err| handleError(err)); };
        boxes = blk2: { var _tmp_2 = std.ArrayList([][]const u8).init(std.heap.page_allocator); _tmp_2.appendSlice(@as([]const [][]const u8, boxes)) catch |err| handleError(err); _tmp_2.append(@constCast((&[_][]const u8{})[0..0])) catch |err| handleError(err); break :blk2 (_tmp_2.toOwnedSlice() catch |err| handleError(err)); };
        i = i +% 1;
    }
    for (@as(usize, @intCast(0))..@as(usize, @intCast(NUM_SQUARES_var))) |__it0| {
        const r: i64 = @as(i64, @intCast(__it0));
        for (@as(usize, @intCast(0))..@as(usize, @intCast(NUM_SQUARES_var))) |__it1| {
            const c: i64 = @as(i64, @intCast(__it1));
            const value: []const u8 = board[_idx(board.len, r)][_idx(board[_idx(board.len, r)].len, c)];
            if (std.mem.eql(u8, value, EMPTY_CELL_var)) {
                continue;
            }
            const box: i64 = @as(i64, @divTrunc(r, 3)) *% 3 +% @as(i64, @divTrunc(c, 3));
            if (blk3: { var _found = false; for (rows[_idx(rows.len, r)]) |v| { if (std.mem.eql(u8, v, value)) { _found = true; break; } } break :blk3 _found; } or blk4: { var _found = false; for (cols[_idx(cols.len, c)]) |v_1| { if (std.mem.eql(u8, v_1, value)) { _found = true; break; } } break :blk4 _found; } or blk5: { var _found = false; for (boxes[_idx(boxes.len, box)]) |v_2| { if (std.mem.eql(u8, v_2, value)) { _found = true; break; } } break :blk5 _found; }) {
                return false;
            }
            rows[_idx(rows.len, r)] = blk6: { var _tmp_3 = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp_3.appendSlice(@as([]const []const u8, rows[_idx(rows.len, r)])) catch |err| handleError(err); _tmp_3.append(@constCast(value)) catch |err| handleError(err); break :blk6 (_tmp_3.toOwnedSlice() catch |err| handleError(err)); };
            cols[_idx(cols.len, c)] = blk7: { var _tmp_4 = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp_4.appendSlice(@as([]const []const u8, cols[_idx(cols.len, c)])) catch |err| handleError(err); _tmp_4.append(@constCast(value)) catch |err| handleError(err); break :blk7 (_tmp_4.toOwnedSlice() catch |err| handleError(err)); };
            boxes[_idx(boxes.len, box)] = blk8: { var _tmp_5 = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp_5.appendSlice(@as([]const []const u8, boxes[_idx(boxes.len, box)])) catch |err| handleError(err); _tmp_5.append(@constCast(value)) catch |err| handleError(err); break :blk8 (_tmp_5.toOwnedSlice() catch |err| handleError(err)); };
        }
    }
    return true;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        std.debug.print("{s}\n", .{_str(is_valid_sudoku_board(valid_board_var))});
        std.debug.print("{s}\n", .{_str(is_valid_sudoku_board(invalid_board_var))});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
