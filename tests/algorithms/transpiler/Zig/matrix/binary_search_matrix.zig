// Generated by Mochi Zig transpiler on 2025-08-12 13:41 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn binary_search(arr_param: []i64, lower_bound_param: i64, upper_bound_param: i64, value_param: i64) i64 {
    var arr_var: []i64 = arr_param;
    arr_var = arr_var;
    var lower_bound_var: i64 = lower_bound_param;
    lower_bound_var = lower_bound_var;
    var upper_bound_var: i64 = upper_bound_param;
    upper_bound_var = upper_bound_var;
    var value_var: i64 = value_param;
    value_var = value_var;
    const r: i64 = @divTrunc(lower_bound_var + upper_bound_var, 2);
    if (arr_var[@as(usize, @intCast(r))] == value_var) {
        return r;
    }
    if (lower_bound_var >= upper_bound_var) {
        return 0 - 1;
    }
    if (arr_var[@as(usize, @intCast(r))] < value_var) {
        return binary_search(arr_var, r + 1, upper_bound_var, value_var);
    }
    return binary_search(arr_var, lower_bound_var, r - 1, value_var);
}

fn mat_bin_search(value_param_1: i64, matrix_param: [][]i64) []i64 {
    var value_var: i64 = value_param_1;
    value_var = value_var;
    var matrix_var: [][]i64 = matrix_param;
    matrix_var = matrix_var;
    var index: i64 = 0;
    index = index;
    if (matrix_var[@as(usize, @intCast(index))][@as(usize, @intCast(0))] == value_var) {
        return blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.append(index) catch |err| handleError(err); _tmp.append(0) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
    }
    while (index < @as(i64, @intCast(matrix_var.len)) and matrix_var[@as(usize, @intCast(index))][@as(usize, @intCast(0))] < value_var) {
        const r: i64 = binary_search(matrix_var[@as(usize, @intCast(index))], 0, @as(i64, @intCast(matrix_var[@as(usize, @intCast(index))].len)) - 1, value_var);
        if (r != 0 - 1) {
            return blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.append(index) catch |err| handleError(err); _tmp.append(r) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        }
        index = index + 1;
    }
    return blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.append(0 - 1) catch |err| handleError(err); _tmp.append(0 - 1) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
}

fn mochi_main() void {
    const row: []i64 = @constCast(&([5]i64{1, 4, 7, 11, 15}))[0..];
    std.debug.print("{s}\n", .{_str(binary_search(row, 0, @as(i64, @intCast(row.len)) - 1, 1))});
    std.debug.print("{s}\n", .{_str(binary_search(row, 0, @as(i64, @intCast(row.len)) - 1, 23))});
    const matrix: [][]i64 = @constCast(&([5][]i64{@constCast(&([5]i64{1, 4, 7, 11, 15}))[0..], @constCast(&([5]i64{2, 5, 8, 12, 19}))[0..], @constCast(&([5]i64{3, 6, 9, 16, 22}))[0..], @constCast(&([5]i64{10, 13, 14, 17, 24}))[0..], @constCast(&([5]i64{18, 21, 23, 26, 30}))[0..]}))[0..];
    std.debug.print("{s}\n", .{_str(mat_bin_search(1, matrix))});
    std.debug.print("{s}\n", .{_str(mat_bin_search(34, matrix))});
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        mochi_main();
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .pointer => |p| {
        if (p.size == .slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .@"struct" => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.heap.pageSize()));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
