// Generated by Mochi Zig transpiler on 2025-08-16 09:25 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const matrix_1_to_4_var: [][]i64 = @constCast(([2][]i64{@constCast(([2]i64{1, 2})[0..2]), @constCast(([2]i64{3, 4})[0..2])})[0..2]);
const matrix_5_to_8_var: [][]i64 = @constCast(([2][]i64{@constCast(([2]i64{5, 6})[0..2]), @constCast(([2]i64{7, 8})[0..2])})[0..2]);
const matrix_count_up_var: [][]i64 = @constCast(([4][]i64{@constCast(([4]i64{1, 2, 3, 4})[0..4]), @constCast(([4]i64{5, 6, 7, 8})[0..4]), @constCast(([4]i64{9, 10, 11, 12})[0..4]), @constCast(([4]i64{13, 14, 15, 16})[0..4])})[0..4]);
const matrix_unordered_var: [][]i64 = @constCast(([4][]i64{@constCast(([4]i64{5, 8, 1, 2})[0..4]), @constCast(([4]i64{6, 7, 3, 0})[0..4]), @constCast(([4]i64{4, 5, 9, 1})[0..4]), @constCast(([4]i64{2, 6, 10, 14})[0..4])})[0..4]);

fn is_square(matrix: [][]i64) bool {
    const n: i64 = @as(i64, @intCast(matrix.len));
    var i: i64 = 0;
    i = i;
    while (i < n) {
        if (@as(i64, @intCast(matrix[_idx(matrix.len, i)].len)) != n) {
            return false;
        }
        i = i + 1;
    }
    return true;
}

fn matrix_multiply(a: [][]i64, b: [][]i64) [][]i64 {
    const rows: i64 = @as(i64, @intCast(a.len));
    const cols: i64 = @as(i64, @intCast(b[_idx(b.len, 0)].len));
    const inner: i64 = @as(i64, @intCast(b.len));
    var result: [][]i64 = std.heap.page_allocator.alloc([]i64, 0) catch unreachable;
    result = result;
    var i_1: i64 = 0;
    i_1 = i_1;
    while (i_1 < rows) {
        var row: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
        row = row;
        var j: i64 = 0;
        j = j;
        while (j < cols) {
            var sum: i64 = 0;
            sum = sum;
            var k: i64 = 0;
            k = k;
            while (k < inner) {
                sum = sum + a[_idx(a.len, i_1)][_idx(a[_idx(a.len, i_1)].len, k)] * b[_idx(b.len, k)][_idx(b[_idx(b.len, k)].len, j)];
                k = k + 1;
            }
            row = blk0: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, row)) catch |err| handleError(err); _tmp.append(sum) catch |err| handleError(err); break :blk0 (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            j = j + 1;
        }
        result = blk1: { var _tmp_1 = std.ArrayList([]i64).init(std.heap.page_allocator); _tmp_1.appendSlice(@as([]const []i64, result)) catch |err| handleError(err); _tmp_1.append(row) catch |err| handleError(err); break :blk1 (_tmp_1.toOwnedSlice() catch |err| handleError(err)); };
        i_1 = i_1 + 1;
    }
    return result;
}

fn multiply(i_2: i64, j_1: i64, k_1: i64, a_1: [][]i64, b_1: [][]i64, result_param: [][]i64, n_1: i64, m: i64) void {
    var result_var: [][]i64 = result_param;
    result_var = result_var;
    if (i_2 >= n_1) {
        return;
    }
    if (j_1 >= m) {
        multiply(i_2 + 1, 0, 0, a_1, b_1, result_var, n_1, m);
        return;
    }
    if (k_1 >= @as(i64, @intCast(b_1.len))) {
        multiply(i_2, j_1 + 1, 0, a_1, b_1, result_var, n_1, m);
        return;
    }
    result_var[_idx(result_var.len, i_2)][_idx(result_var[_idx(result_var.len, i_2)].len, j_1)] = result_var[_idx(result_var.len, i_2)][_idx(result_var[_idx(result_var.len, i_2)].len, j_1)] + a_1[_idx(a_1.len, i_2)][_idx(a_1[_idx(a_1.len, i_2)].len, k_1)] * b_1[_idx(b_1.len, k_1)][_idx(b_1[_idx(b_1.len, k_1)].len, j_1)];
    multiply(i_2, j_1, k_1 + 1, a_1, b_1, result_var, n_1, m);
}

fn matrix_multiply_recursive(a_2: [][]i64, b_2: [][]i64) [][]i64 {
    if (@as(i64, @intCast(a_2.len)) == 0 or @as(i64, @intCast(b_2.len)) == 0) {
        return (&[_][]i64{})[0..0];
    }
    if (@as(i64, @intCast(a_2.len)) != @as(i64, @intCast(b_2.len)) or !(is_square(a_2)) or !(is_square(b_2))) {
        @panic("Invalid matrix dimensions");
    }
    const n_2: i64 = @as(i64, @intCast(a_2.len));
    const m_1: i64 = @as(i64, @intCast(b_2[_idx(b_2.len, 0)].len));
    var result_1: [][]i64 = std.heap.page_allocator.alloc([]i64, 0) catch unreachable;
    result_1 = result_1;
    var i_3: i64 = 0;
    i_3 = i_3;
    while (i_3 < n_2) {
        var row_1: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
        row_1 = row_1;
        var j_2: i64 = 0;
        j_2 = j_2;
        while (j_2 < m_1) {
            row_1 = blk2: { var _tmp_2 = std.ArrayList(i64).init(std.heap.page_allocator); _tmp_2.appendSlice(@as([]const i64, row_1)) catch |err| handleError(err); _tmp_2.append(0) catch |err| handleError(err); break :blk2 (_tmp_2.toOwnedSlice() catch |err| handleError(err)); };
            j_2 = j_2 + 1;
        }
        result_1 = blk3: { var _tmp_3 = std.ArrayList([]i64).init(std.heap.page_allocator); _tmp_3.appendSlice(@as([]const []i64, result_1)) catch |err| handleError(err); _tmp_3.append(row_1) catch |err| handleError(err); break :blk3 (_tmp_3.toOwnedSlice() catch |err| handleError(err)); };
        i_3 = i_3 + 1;
    }
    multiply(0, 0, 0, a_2, b_2, result_1, n_2, m_1);
    return result_1;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        std.debug.print("{s}\n", .{_str(matrix_multiply_recursive(matrix_1_to_4_var, matrix_5_to_8_var))});
        std.debug.print("{s}\n", .{_str(matrix_multiply_recursive(matrix_count_up_var, matrix_unordered_var))});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
