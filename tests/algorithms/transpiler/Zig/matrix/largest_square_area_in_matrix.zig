// Generated by Mochi Zig transpiler on 2025-08-12 16:13 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

var sample_var: [][]i64 = &[_][]i64{};

fn update_area_of_max_square(row_param: i64, col_param: i64, rows_param: i64, cols_param: i64, mat_param: [][]i64, largest_square_area_param: []i64) i64 {
    var row_var: i64 = row_param;
    row_var = row_var;
    var col_var: i64 = col_param;
    col_var = col_var;
    var rows_var: i64 = rows_param;
    rows_var = rows_var;
    var cols_var: i64 = cols_param;
    cols_var = cols_var;
    var mat_var: [][]i64 = mat_param;
    mat_var = mat_var;
    var largest_square_area_var: []i64 = largest_square_area_param;
    largest_square_area_var = largest_square_area_var;
    if (row_var >= rows_var or col_var >= cols_var) {
        return 0;
    }
    const right: i64 = update_area_of_max_square(row_var, col_var + 1, rows_var, cols_var, mat_var, largest_square_area_var);
    const diagonal: i64 = update_area_of_max_square(row_var + 1, col_var + 1, rows_var, cols_var, mat_var, largest_square_area_var);
    const down: i64 = update_area_of_max_square(row_var + 1, col_var, rows_var, cols_var, mat_var, largest_square_area_var);
    if (mat_var[_idx(mat_var.len, row_var)][_idx(mat_var[_idx(mat_var.len, row_var)].len, col_var)] == 1) {
        const sub: i64 = 1 + blk: { var arr = [3]i64{right, diagonal, down}; var m = arr[0]; for (arr[1..]) |v| { if (v < m) m = v; } break :blk m; };
        if (sub > largest_square_area_var[_idx(largest_square_area_var.len, 0)]) {
            largest_square_area_var[_idx(largest_square_area_var.len, 0)] = sub;
        }
        return sub;
    } else {
        return 0;
    }
    return 0;
}

fn largest_square_area_in_matrix_top_down(rows_param_1: i64, cols_param_1: i64, mat_param_1: [][]i64) i64 {
    var rows_var: i64 = rows_param_1;
    rows_var = rows_var;
    var cols_var: i64 = cols_param_1;
    cols_var = cols_var;
    var mat_var: [][]i64 = mat_param_1;
    mat_var = mat_var;
    const largest: []i64 = std.heap.page_allocator.dupe(i64, (&([1]i64{0}))[0..]) catch unreachable;
    _ = update_area_of_max_square(0, 0, rows_var, cols_var, mat_var, largest);
    return largest[_idx(largest.len, 0)];
}

fn update_area_of_max_square_with_dp(row_param_1: i64, col_param_1: i64, rows_param_2: i64, cols_param_2: i64, mat_param_2: [][]i64, dp_array_param: [][]i64, largest_square_area_param_1: []i64) i64 {
    var row_var: i64 = row_param_1;
    row_var = row_var;
    var col_var: i64 = col_param_1;
    col_var = col_var;
    var rows_var: i64 = rows_param_2;
    rows_var = rows_var;
    var cols_var: i64 = cols_param_2;
    cols_var = cols_var;
    var mat_var: [][]i64 = mat_param_2;
    mat_var = mat_var;
    var dp_array_var: [][]i64 = dp_array_param;
    dp_array_var = dp_array_var;
    var largest_square_area_var: []i64 = largest_square_area_param_1;
    largest_square_area_var = largest_square_area_var;
    if (row_var >= rows_var or col_var >= cols_var) {
        return 0;
    }
    if (dp_array_var[_idx(dp_array_var.len, row_var)][_idx(dp_array_var[_idx(dp_array_var.len, row_var)].len, col_var)] != 0 - 1) {
        return dp_array_var[_idx(dp_array_var.len, row_var)][_idx(dp_array_var[_idx(dp_array_var.len, row_var)].len, col_var)];
    }
    const right: i64 = update_area_of_max_square_with_dp(row_var, col_var + 1, rows_var, cols_var, mat_var, dp_array_var, largest_square_area_var);
    const diagonal: i64 = update_area_of_max_square_with_dp(row_var + 1, col_var + 1, rows_var, cols_var, mat_var, dp_array_var, largest_square_area_var);
    const down: i64 = update_area_of_max_square_with_dp(row_var + 1, col_var, rows_var, cols_var, mat_var, dp_array_var, largest_square_area_var);
    if (mat_var[_idx(mat_var.len, row_var)][_idx(mat_var[_idx(mat_var.len, row_var)].len, col_var)] == 1) {
        const sub: i64 = 1 + blk: { var arr = [3]i64{right, diagonal, down}; var m = arr[0]; for (arr[1..]) |v| { if (v < m) m = v; } break :blk m; };
        if (sub > largest_square_area_var[_idx(largest_square_area_var.len, 0)]) {
            largest_square_area_var[_idx(largest_square_area_var.len, 0)] = sub;
        }
        dp_array_var[_idx(dp_array_var.len, row_var)][_idx(dp_array_var[_idx(dp_array_var.len, row_var)].len, col_var)] = sub;
        return sub;
    } else {
        dp_array_var[_idx(dp_array_var.len, row_var)][_idx(dp_array_var[_idx(dp_array_var.len, row_var)].len, col_var)] = 0;
        return 0;
    }
    return 0;
}

fn largest_square_area_in_matrix_top_down_with_dp(rows_param_3: i64, cols_param_3: i64, mat_param_3: [][]i64) i64 {
    var rows_var: i64 = rows_param_3;
    rows_var = rows_var;
    var cols_var: i64 = cols_param_3;
    cols_var = cols_var;
    var mat_var: [][]i64 = mat_param_3;
    mat_var = mat_var;
    const largest: []i64 = std.heap.page_allocator.dupe(i64, (&([1]i64{0}))[0..]) catch unreachable;
    var dp_array: [][]i64 = std.heap.page_allocator.alloc([]i64, 0) catch unreachable;
    dp_array = dp_array;
    var r: i64 = 0;
    r = r;
    while (r < rows_var) {
        var row_list: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
        row_list = row_list;
        var c: i64 = 0;
        c = c;
        while (c < cols_var) {
            row_list = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, row_list)) catch |err| handleError(err); _tmp.append(0 - 1) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            c = c + 1;
        }
        dp_array = blk: { var _tmp = std.ArrayList([]i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []i64, dp_array)) catch |err| handleError(err); _tmp.append(row_list) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        r = r + 1;
    }
    _ = update_area_of_max_square_with_dp(0, 0, rows_var, cols_var, mat_var, dp_array, largest);
    return largest[_idx(largest.len, 0)];
}

fn largest_square_area_in_matrix_bottom_up(rows_param_4: i64, cols_param_4: i64, mat_param_4: [][]i64) i64 {
    var rows_var: i64 = rows_param_4;
    rows_var = rows_var;
    var cols_var: i64 = cols_param_4;
    cols_var = cols_var;
    var mat_var: [][]i64 = mat_param_4;
    mat_var = mat_var;
    var dp_array: [][]i64 = std.heap.page_allocator.alloc([]i64, 0) catch unreachable;
    dp_array = dp_array;
    var r: i64 = 0;
    r = r;
    while (r <= rows_var) {
        var row_list: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
        row_list = row_list;
        var c: i64 = 0;
        c = c;
        while (c <= cols_var) {
            row_list = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, row_list)) catch |err| handleError(err); _tmp.append(0) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            c = c + 1;
        }
        dp_array = blk: { var _tmp = std.ArrayList([]i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []i64, dp_array)) catch |err| handleError(err); _tmp.append(row_list) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        r = r + 1;
    }
    var largest: i64 = 0;
    largest = largest;
    var row: i64 = rows_var - 1;
    row = row;
    while (row >= 0) {
        var col: i64 = cols_var - 1;
        col = col;
        while (col >= 0) {
            const right: i64 = dp_array[_idx(dp_array.len, row)][_idx(dp_array[_idx(dp_array.len, row)].len, col + 1)];
            const diagonal: i64 = dp_array[_idx(dp_array.len, row + 1)][_idx(dp_array[_idx(dp_array.len, row + 1)].len, col + 1)];
            const bottom: i64 = dp_array[_idx(dp_array.len, row + 1)][_idx(dp_array[_idx(dp_array.len, row + 1)].len, col)];
            if (mat_var[_idx(mat_var.len, row)][_idx(mat_var[_idx(mat_var.len, row)].len, col)] == 1) {
                const value: i64 = 1 + blk: { var arr = [3]i64{right, diagonal, bottom}; var m = arr[0]; for (arr[1..]) |v| { if (v < m) m = v; } break :blk m; };
                dp_array[_idx(dp_array.len, row)][_idx(dp_array[_idx(dp_array.len, row)].len, col)] = value;
                if (value > largest) {
                    largest = value;
                }
            } else {
                dp_array[_idx(dp_array.len, row)][_idx(dp_array[_idx(dp_array.len, row)].len, col)] = 0;
            }
            col = col - 1;
        }
        row = row - 1;
    }
    return largest;
}

fn largest_square_area_in_matrix_bottom_up_space_optimization(rows_param_5: i64, cols_param_5: i64, mat_param_5: [][]i64) i64 {
    var rows_var: i64 = rows_param_5;
    rows_var = rows_var;
    var cols_var: i64 = cols_param_5;
    cols_var = cols_var;
    var mat_var: [][]i64 = mat_param_5;
    mat_var = mat_var;
    var current_row: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    current_row = current_row;
    var i: i64 = 0;
    i = i;
    while (i <= cols_var) {
        current_row = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, current_row)) catch |err| handleError(err); _tmp.append(0) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    var next_row: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    next_row = next_row;
    var j: i64 = 0;
    j = j;
    while (j <= cols_var) {
        next_row = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, next_row)) catch |err| handleError(err); _tmp.append(0) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        j = j + 1;
    }
    var largest: i64 = 0;
    largest = largest;
    var row: i64 = rows_var - 1;
    row = row;
    while (row >= 0) {
        var col: i64 = cols_var - 1;
        col = col;
        while (col >= 0) {
            const right: i64 = current_row[_idx(current_row.len, col + 1)];
            const diagonal: i64 = next_row[_idx(next_row.len, col + 1)];
            const bottom: i64 = next_row[_idx(next_row.len, col)];
            if (mat_var[_idx(mat_var.len, row)][_idx(mat_var[_idx(mat_var.len, row)].len, col)] == 1) {
                const value: i64 = 1 + blk: { var arr = [3]i64{right, diagonal, bottom}; var m = arr[0]; for (arr[1..]) |v| { if (v < m) m = v; } break :blk m; };
                current_row[_idx(current_row.len, col)] = value;
                if (value > largest) {
                    largest = value;
                }
            } else {
                current_row[_idx(current_row.len, col)] = 0;
            }
            col = col - 1;
        }
        next_row = current_row;
        current_row = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
        var t: i64 = 0;
        t = t;
        while (t <= cols_var) {
            current_row = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, current_row)) catch |err| handleError(err); _tmp.append(0) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            t = t + 1;
        }
        row = row - 1;
    }
    return largest;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        sample_var = std.heap.page_allocator.dupe([]i64, (&([2][]i64{std.heap.page_allocator.dupe(i64, (&([2]i64{1, 1}))[0..]) catch unreachable, std.heap.page_allocator.dupe(i64, (&([2]i64{1, 1}))[0..]) catch unreachable}))[0..]) catch unreachable;
        std.debug.print("{s}\n", .{_str(largest_square_area_in_matrix_top_down(2, 2, sample_var))});
        std.debug.print("{s}\n", .{_str(largest_square_area_in_matrix_top_down_with_dp(2, 2, sample_var))});
        std.debug.print("{s}\n", .{_str(largest_square_area_in_matrix_bottom_up(2, 2, sample_var))});
        std.debug.print("{s}\n", .{_str(largest_square_area_in_matrix_bottom_up_space_optimization(2, 2, sample_var))});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
