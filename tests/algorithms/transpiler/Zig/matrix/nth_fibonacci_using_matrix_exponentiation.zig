// Generated by Mochi Zig transpiler on 2025-08-16 09:25 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn multiply(matrix_a: [][]i64, matrix_b: [][]i64) [][]i64 {
    const n: i64 = @as(i64, @intCast(matrix_a.len));
    var matrix_c: [][]i64 = std.heap.page_allocator.alloc([]i64, 0) catch unreachable;
    matrix_c = matrix_c;
    var i: i64 = 0;
    i = i;
    while (i < n) {
        var row: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
        row = row;
        var j: i64 = 0;
        j = j;
        while (j < n) {
            var val: i64 = 0;
            val = val;
            var k: i64 = 0;
            k = k;
            while (k < n) {
                val = val +% matrix_a[_idx(matrix_a.len, i)][_idx(matrix_a[_idx(matrix_a.len, i)].len, k)] *% matrix_b[_idx(matrix_b.len, k)][_idx(matrix_b[_idx(matrix_b.len, k)].len, j)];
                k = k +% 1;
            }
            row = blk0: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, row)) catch |err| handleError(err); _tmp.append(val) catch |err| handleError(err); break :blk0 (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            j = j +% 1;
        }
        matrix_c = blk1: { var _tmp_1 = std.ArrayList([]i64).init(std.heap.page_allocator); _tmp_1.appendSlice(@as([]const []i64, matrix_c)) catch |err| handleError(err); _tmp_1.append(row) catch |err| handleError(err); break :blk1 (_tmp_1.toOwnedSlice() catch |err| handleError(err)); };
        i = i +% 1;
    }
    return matrix_c;
}

fn identity(n_1: i64) [][]i64 {
    var res: [][]i64 = std.heap.page_allocator.alloc([]i64, 0) catch unreachable;
    res = res;
    var i_1: i64 = 0;
    i_1 = i_1;
    while (i_1 < n_1) {
        var row_1: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
        row_1 = row_1;
        var j_1: i64 = 0;
        j_1 = j_1;
        while (j_1 < n_1) {
            if (i_1 == j_1) {
                row_1 = blk2: { var _tmp_2 = std.ArrayList(i64).init(std.heap.page_allocator); _tmp_2.appendSlice(@as([]const i64, row_1)) catch |err| handleError(err); _tmp_2.append(1) catch |err| handleError(err); break :blk2 (_tmp_2.toOwnedSlice() catch |err| handleError(err)); };
            } else {
                row_1 = blk3: { var _tmp_3 = std.ArrayList(i64).init(std.heap.page_allocator); _tmp_3.appendSlice(@as([]const i64, row_1)) catch |err| handleError(err); _tmp_3.append(0) catch |err| handleError(err); break :blk3 (_tmp_3.toOwnedSlice() catch |err| handleError(err)); };
            }
            j_1 = j_1 +% 1;
        }
        res = blk4: { var _tmp_4 = std.ArrayList([]i64).init(std.heap.page_allocator); _tmp_4.appendSlice(@as([]const []i64, res)) catch |err| handleError(err); _tmp_4.append(row_1) catch |err| handleError(err); break :blk4 (_tmp_4.toOwnedSlice() catch |err| handleError(err)); };
        i_1 = i_1 +% 1;
    }
    return res;
}

fn nth_fibonacci_matrix(n_2: i64) i64 {
    if (n_2 <= 1) {
        return n_2;
    }
    var res_matrix: [][]i64 = identity(2);
    res_matrix = res_matrix;
    var fib_matrix: [][]i64 = std.heap.page_allocator.dupe([]i64, ([2][]i64{@constCast(([2]i64{1, 1})[0..2]), @constCast(([2]i64{1, 0})[0..2])})[0..2]) catch unreachable;
    fib_matrix = fib_matrix;
    var m: i64 = n_2 -% 1;
    m = m;
    while (m > 0) {
        if (@mod(m, 2) == 1) {
            res_matrix = multiply(res_matrix, fib_matrix);
        }
        fib_matrix = multiply(fib_matrix, fib_matrix);
        m = @divTrunc(m, 2);
    }
    return res_matrix[_idx(res_matrix.len, 0)][_idx(res_matrix[_idx(res_matrix.len, 0)].len, 0)];
}

fn nth_fibonacci_bruteforce(n_3: i64) i64 {
    if (n_3 <= 1) {
        return n_3;
    }
    var fib0: i64 = 0;
    fib0 = fib0;
    var fib1: i64 = 1;
    fib1 = fib1;
    var i_2: i64 = 2;
    i_2 = i_2;
    while (i_2 <= n_3) {
        const next: i64 = fib0 +% fib1;
        fib0 = fib1;
        fib1 = next;
        i_2 = i_2 +% 1;
    }
    return fib1;
}

fn parse_number(s: []const u8) i64 {
    var result: i64 = 0;
    result = result;
    var i_3: i64 = 0;
    i_3 = i_3;
    while (i_3 < @as(i64, @intCast(s.len))) {
        const ch: []const u8 = s[@as(usize, @intCast(i_3))..@min(@as(usize, @intCast(i_3 +% 1)), @as(usize, @intCast(s.len)))];
        if (std.mem.order(u8, ch, "0") != .lt and std.mem.order(u8, ch, "9") != .gt) {
            result = result *% 10 +% (std.fmt.parseInt(i64, ch, 10) catch 0);
        }
        i_3 = i_3 +% 1;
    }
    return result;
}

fn mochi_main() void {
    const ordinals: [][]const u8 = @constCast(([7][]const u8{"0th", "1st", "2nd", "3rd", "10th", "100th", "1000th"})[0..7]);
    var i_4: i64 = 0;
    i_4 = i_4;
    while (i_4 < @as(i64, @intCast(ordinals.len))) {
        const ordinal: []const u8 = ordinals[_idx(ordinals.len, i_4)];
        const n_4: i64 = parse_number(ordinal);
        const msg: []const u8 = _concat_string(_concat_string(_concat_string(_concat_string(ordinal, " fibonacci number using matrix exponentiation is "), _str(nth_fibonacci_matrix(n_4))), " and using bruteforce is "), _str(nth_fibonacci_bruteforce(n_4)));
        std.debug.print("{s}\n", .{msg});
        i_4 = i_4 +% 1;
    }
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        mochi_main();
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
