// Generated by Mochi Zig transpiler on 2025-08-16 09:25 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const Matrix = struct {
    data: [][]f64,
    rows: i64,
    cols: i64,
};

fn make_matrix(values: [][]f64) Matrix {
    const r: i64 = @as(i64, @intCast(values.len));
    if (r == 0) {
        return .{ .data = (&[_][]f64{})[0..0], .rows = 0, .cols = 0 };
    }
    const c: i64 = @as(i64, @intCast(values[_idx(values.len, 0)].len));
    var i: i64 = 0;
    i = i;
    while (i < r) {
        if (@as(i64, @intCast(values[_idx(values.len, i)].len)) != c) {
            return .{ .data = (&[_][]f64{})[0..0], .rows = 0, .cols = 0 };
        }
        i = i + 1;
    }
    return .{ .data = values, .rows = r, .cols = c };
}

fn matrix_columns(m: Matrix) [][]f64 {
    var cols: [][]f64 = std.heap.page_allocator.alloc([]f64, 0) catch unreachable;
    cols = cols;
    var j: i64 = 0;
    j = j;
    while (j < m.cols) {
        var col: []f64 = std.heap.page_allocator.alloc(f64, 0) catch unreachable;
        col = col;
        var i_1: i64 = 0;
        i_1 = i_1;
        while (i_1 < m.rows) {
            col = blk0: { var _tmp = std.ArrayList(f64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const f64, col)) catch |err| handleError(err); _tmp.append(m.data[_idx(m.data.len, i_1)][_idx(m.data[_idx(m.data.len, i_1)].len, j)]) catch |err| handleError(err); break :blk0 (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            i_1 = i_1 + 1;
        }
        cols = blk1: { var _tmp_1 = std.ArrayList([]f64).init(std.heap.page_allocator); _tmp_1.appendSlice(@as([]const []f64, cols)) catch |err| handleError(err); _tmp_1.append(col) catch |err| handleError(err); break :blk1 (_tmp_1.toOwnedSlice() catch |err| handleError(err)); };
        j = j + 1;
    }
    return cols;
}

fn matrix_identity(m_1: Matrix) Matrix {
    var vals: [][]f64 = std.heap.page_allocator.alloc([]f64, 0) catch unreachable;
    vals = vals;
    var i_2: i64 = 0;
    i_2 = i_2;
    while (i_2 < m_1.rows) {
        var row: []f64 = std.heap.page_allocator.alloc(f64, 0) catch unreachable;
        row = row;
        var j_1: i64 = 0;
        j_1 = j_1;
        while (j_1 < m_1.cols) {
            const v: f64 = if (i_2 == j_1) 1.0 else 0.0;
            row = blk2: { var _tmp_2 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_2.appendSlice(@as([]const f64, row)) catch |err| handleError(err); _tmp_2.append(v) catch |err| handleError(err); break :blk2 (_tmp_2.toOwnedSlice() catch |err| handleError(err)); };
            j_1 = j_1 + 1;
        }
        vals = blk3: { var _tmp_3 = std.ArrayList([]f64).init(std.heap.page_allocator); _tmp_3.appendSlice(@as([]const []f64, vals)) catch |err| handleError(err); _tmp_3.append(row) catch |err| handleError(err); break :blk3 (_tmp_3.toOwnedSlice() catch |err| handleError(err)); };
        i_2 = i_2 + 1;
    }
    return .{ .data = vals, .rows = m_1.rows, .cols = m_1.cols };
}

fn matrix_minor(m_2: Matrix, r_1: i64, c_1: i64) f64 {
    var vals_1: [][]f64 = std.heap.page_allocator.alloc([]f64, 0) catch unreachable;
    vals_1 = vals_1;
    var i_3: i64 = 0;
    i_3 = i_3;
    while (i_3 < m_2.rows) {
        if (i_3 != r_1) {
            var row_1: []f64 = std.heap.page_allocator.alloc(f64, 0) catch unreachable;
            row_1 = row_1;
            var j_2: i64 = 0;
            j_2 = j_2;
            while (j_2 < m_2.cols) {
                if (j_2 != c_1) {
                    row_1 = blk4: { var _tmp_4 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_4.appendSlice(@as([]const f64, row_1)) catch |err| handleError(err); _tmp_4.append(m_2.data[_idx(m_2.data.len, i_3)][_idx(m_2.data[_idx(m_2.data.len, i_3)].len, j_2)]) catch |err| handleError(err); break :blk4 (_tmp_4.toOwnedSlice() catch |err| handleError(err)); };
                }
                j_2 = j_2 + 1;
            }
            vals_1 = blk5: { var _tmp_5 = std.ArrayList([]f64).init(std.heap.page_allocator); _tmp_5.appendSlice(@as([]const []f64, vals_1)) catch |err| handleError(err); _tmp_5.append(row_1) catch |err| handleError(err); break :blk5 (_tmp_5.toOwnedSlice() catch |err| handleError(err)); };
        }
        i_3 = i_3 + 1;
    }
    const sub: Matrix = .{ .data = vals_1, .rows = m_2.rows - 1, .cols = m_2.cols - 1 };
    return matrix_determinant(sub);
}

fn matrix_cofactor(m_3: Matrix, r_2: i64, c_2: i64) f64 {
    const minor: f64 = matrix_minor(m_3, r_2, c_2);
    if (@mod(r_2 + c_2, 2) == 0) {
        return minor;
    }
    return (@as(f64, @floatFromInt(0)) - 1.0) * minor;
}

fn matrix_minors(m_4: Matrix) Matrix {
    var vals_2: [][]f64 = std.heap.page_allocator.alloc([]f64, 0) catch unreachable;
    vals_2 = vals_2;
    var i_4: i64 = 0;
    i_4 = i_4;
    while (i_4 < m_4.rows) {
        var row_2: []f64 = std.heap.page_allocator.alloc(f64, 0) catch unreachable;
        row_2 = row_2;
        var j_3: i64 = 0;
        j_3 = j_3;
        while (j_3 < m_4.cols) {
            row_2 = blk6: { var _tmp_6 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_6.appendSlice(@as([]const f64, row_2)) catch |err| handleError(err); _tmp_6.append(matrix_minor(m_4, i_4, j_3)) catch |err| handleError(err); break :blk6 (_tmp_6.toOwnedSlice() catch |err| handleError(err)); };
            j_3 = j_3 + 1;
        }
        vals_2 = blk7: { var _tmp_7 = std.ArrayList([]f64).init(std.heap.page_allocator); _tmp_7.appendSlice(@as([]const []f64, vals_2)) catch |err| handleError(err); _tmp_7.append(row_2) catch |err| handleError(err); break :blk7 (_tmp_7.toOwnedSlice() catch |err| handleError(err)); };
        i_4 = i_4 + 1;
    }
    return .{ .data = vals_2, .rows = m_4.rows, .cols = m_4.cols };
}

fn matrix_cofactors(m_5: Matrix) Matrix {
    var vals_3: [][]f64 = std.heap.page_allocator.alloc([]f64, 0) catch unreachable;
    vals_3 = vals_3;
    var i_5: i64 = 0;
    i_5 = i_5;
    while (i_5 < m_5.rows) {
        var row_3: []f64 = std.heap.page_allocator.alloc(f64, 0) catch unreachable;
        row_3 = row_3;
        var j_4: i64 = 0;
        j_4 = j_4;
        while (j_4 < m_5.cols) {
            row_3 = blk8: { var _tmp_8 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_8.appendSlice(@as([]const f64, row_3)) catch |err| handleError(err); _tmp_8.append(matrix_cofactor(m_5, i_5, j_4)) catch |err| handleError(err); break :blk8 (_tmp_8.toOwnedSlice() catch |err| handleError(err)); };
            j_4 = j_4 + 1;
        }
        vals_3 = blk9: { var _tmp_9 = std.ArrayList([]f64).init(std.heap.page_allocator); _tmp_9.appendSlice(@as([]const []f64, vals_3)) catch |err| handleError(err); _tmp_9.append(row_3) catch |err| handleError(err); break :blk9 (_tmp_9.toOwnedSlice() catch |err| handleError(err)); };
        i_5 = i_5 + 1;
    }
    return .{ .data = vals_3, .rows = m_5.rows, .cols = m_5.cols };
}

fn matrix_determinant(m_6: Matrix) f64 {
    if (m_6.rows != m_6.cols) {
        return 0.0;
    }
    if (m_6.rows == 0) {
        return 0.0;
    }
    if (m_6.rows == 1) {
        return m_6.data[_idx(m_6.data.len, 0)][_idx(m_6.data[_idx(m_6.data.len, 0)].len, 0)];
    }
    if (m_6.rows == 2) {
        return m_6.data[_idx(m_6.data.len, 0)][_idx(m_6.data[_idx(m_6.data.len, 0)].len, 0)] * m_6.data[_idx(m_6.data.len, 1)][_idx(m_6.data[_idx(m_6.data.len, 1)].len, 1)] - m_6.data[_idx(m_6.data.len, 0)][_idx(m_6.data[_idx(m_6.data.len, 0)].len, 1)] * m_6.data[_idx(m_6.data.len, 1)][_idx(m_6.data[_idx(m_6.data.len, 1)].len, 0)];
    }
    var sum: f64 = 0.0;
    sum = sum;
    var j_5: i64 = 0;
    j_5 = j_5;
    while (j_5 < m_6.cols) {
        sum = sum + m_6.data[_idx(m_6.data.len, 0)][_idx(m_6.data[_idx(m_6.data.len, 0)].len, j_5)] * matrix_cofactor(m_6, 0, j_5);
        j_5 = j_5 + 1;
    }
    return sum;
}

fn matrix_is_invertible(m_7: Matrix) bool {
    return matrix_determinant(m_7) != 0.0;
}

fn matrix_adjugate(m_8: Matrix) Matrix {
    const cof: Matrix = matrix_cofactors(m_8);
    var vals_4: [][]f64 = std.heap.page_allocator.alloc([]f64, 0) catch unreachable;
    vals_4 = vals_4;
    var i_6: i64 = 0;
    i_6 = i_6;
    while (i_6 < m_8.rows) {
        var row_4: []f64 = std.heap.page_allocator.alloc(f64, 0) catch unreachable;
        row_4 = row_4;
        var j_6: i64 = 0;
        j_6 = j_6;
        while (j_6 < m_8.cols) {
            row_4 = blk10: { var _tmp_10 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_10.appendSlice(@as([]const f64, row_4)) catch |err| handleError(err); _tmp_10.append(cof.data[_idx(cof.data.len, j_6)][_idx(cof.data[_idx(cof.data.len, j_6)].len, i_6)]) catch |err| handleError(err); break :blk10 (_tmp_10.toOwnedSlice() catch |err| handleError(err)); };
            j_6 = j_6 + 1;
        }
        vals_4 = blk11: { var _tmp_11 = std.ArrayList([]f64).init(std.heap.page_allocator); _tmp_11.appendSlice(@as([]const []f64, vals_4)) catch |err| handleError(err); _tmp_11.append(row_4) catch |err| handleError(err); break :blk11 (_tmp_11.toOwnedSlice() catch |err| handleError(err)); };
        i_6 = i_6 + 1;
    }
    return .{ .data = vals_4, .rows = m_8.rows, .cols = m_8.cols };
}

fn matrix_inverse(m_9: Matrix) Matrix {
    const det: f64 = matrix_determinant(m_9);
    if (det == 0.0) {
        return .{ .data = (&[_][]f64{})[0..0], .rows = 0, .cols = 0 };
    }
    const adj: Matrix = matrix_adjugate(m_9);
    return matrix_mul_scalar(adj, 1.0 / det);
}

fn matrix_add_row(m_10: Matrix, row_5: []f64) Matrix {
    var newData: [][]f64 = m_10.data;
    newData = newData;
    newData = blk12: { var _tmp_12 = std.ArrayList([]f64).init(std.heap.page_allocator); _tmp_12.appendSlice(@as([]const []f64, newData)) catch |err| handleError(err); _tmp_12.append(row_5) catch |err| handleError(err); break :blk12 (_tmp_12.toOwnedSlice() catch |err| handleError(err)); };
    return .{ .data = newData, .rows = m_10.rows + 1, .cols = m_10.cols };
}

fn matrix_add_column(m_11: Matrix, col_1: []f64) Matrix {
    var newData_1: [][]f64 = std.heap.page_allocator.alloc([]f64, 0) catch unreachable;
    newData_1 = newData_1;
    var i_7: i64 = 0;
    i_7 = i_7;
    while (i_7 < m_11.rows) {
        newData_1 = blk13: { var _tmp_13 = std.ArrayList([]f64).init(std.heap.page_allocator); _tmp_13.appendSlice(@as([]const []f64, newData_1)) catch |err| handleError(err); _tmp_13.append(blk14: { var _tmp_14 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_14.appendSlice(@as([]const f64, m_11.data[_idx(m_11.data.len, i_7)])) catch |err| handleError(err); _tmp_14.append(col_1[_idx(col_1.len, i_7)]) catch |err| handleError(err); break :blk14 (_tmp_14.toOwnedSlice() catch |err| handleError(err)); }) catch |err| handleError(err); break :blk13 (_tmp_13.toOwnedSlice() catch |err| handleError(err)); };
        i_7 = i_7 + 1;
    }
    return .{ .data = newData_1, .rows = m_11.rows, .cols = m_11.cols + 1 };
}

fn matrix_mul_scalar(m_12: Matrix, s: f64) Matrix {
    var vals_5: [][]f64 = std.heap.page_allocator.alloc([]f64, 0) catch unreachable;
    vals_5 = vals_5;
    var i_8: i64 = 0;
    i_8 = i_8;
    while (i_8 < m_12.rows) {
        var row_6: []f64 = std.heap.page_allocator.alloc(f64, 0) catch unreachable;
        row_6 = row_6;
        var j_7: i64 = 0;
        j_7 = j_7;
        while (j_7 < m_12.cols) {
            row_6 = blk15: { var _tmp_15 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_15.appendSlice(@as([]const f64, row_6)) catch |err| handleError(err); _tmp_15.append(m_12.data[_idx(m_12.data.len, i_8)][_idx(m_12.data[_idx(m_12.data.len, i_8)].len, j_7)] * s) catch |err| handleError(err); break :blk15 (_tmp_15.toOwnedSlice() catch |err| handleError(err)); };
            j_7 = j_7 + 1;
        }
        vals_5 = blk16: { var _tmp_16 = std.ArrayList([]f64).init(std.heap.page_allocator); _tmp_16.appendSlice(@as([]const []f64, vals_5)) catch |err| handleError(err); _tmp_16.append(row_6) catch |err| handleError(err); break :blk16 (_tmp_16.toOwnedSlice() catch |err| handleError(err)); };
        i_8 = i_8 + 1;
    }
    return .{ .data = vals_5, .rows = m_12.rows, .cols = m_12.cols };
}

fn matrix_neg(m_13: Matrix) Matrix {
    return matrix_mul_scalar(m_13, @as(f64, @floatFromInt(0)) - 1.0);
}

fn matrix_add(a: Matrix, b: Matrix) Matrix {
    if (a.rows != b.rows or a.cols != b.cols) {
        return .{ .data = (&[_][]f64{})[0..0], .rows = 0, .cols = 0 };
    }
    var vals_6: [][]f64 = std.heap.page_allocator.alloc([]f64, 0) catch unreachable;
    vals_6 = vals_6;
    var i_9: i64 = 0;
    i_9 = i_9;
    while (i_9 < a.rows) {
        var row_7: []f64 = std.heap.page_allocator.alloc(f64, 0) catch unreachable;
        row_7 = row_7;
        var j_8: i64 = 0;
        j_8 = j_8;
        while (j_8 < a.cols) {
            row_7 = blk17: { var _tmp_17 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_17.appendSlice(@as([]const f64, row_7)) catch |err| handleError(err); _tmp_17.append(a.data[_idx(a.data.len, i_9)][_idx(a.data[_idx(a.data.len, i_9)].len, j_8)] + b.data[_idx(b.data.len, i_9)][_idx(b.data[_idx(b.data.len, i_9)].len, j_8)]) catch |err| handleError(err); break :blk17 (_tmp_17.toOwnedSlice() catch |err| handleError(err)); };
            j_8 = j_8 + 1;
        }
        vals_6 = blk18: { var _tmp_18 = std.ArrayList([]f64).init(std.heap.page_allocator); _tmp_18.appendSlice(@as([]const []f64, vals_6)) catch |err| handleError(err); _tmp_18.append(row_7) catch |err| handleError(err); break :blk18 (_tmp_18.toOwnedSlice() catch |err| handleError(err)); };
        i_9 = i_9 + 1;
    }
    return .{ .data = vals_6, .rows = a.rows, .cols = a.cols };
}

fn matrix_sub(a_1: Matrix, b_1: Matrix) Matrix {
    if (a_1.rows != b_1.rows or a_1.cols != b_1.cols) {
        return .{ .data = (&[_][]f64{})[0..0], .rows = 0, .cols = 0 };
    }
    var vals_7: [][]f64 = std.heap.page_allocator.alloc([]f64, 0) catch unreachable;
    vals_7 = vals_7;
    var i_10: i64 = 0;
    i_10 = i_10;
    while (i_10 < a_1.rows) {
        var row_8: []f64 = std.heap.page_allocator.alloc(f64, 0) catch unreachable;
        row_8 = row_8;
        var j_9: i64 = 0;
        j_9 = j_9;
        while (j_9 < a_1.cols) {
            row_8 = blk19: { var _tmp_19 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_19.appendSlice(@as([]const f64, row_8)) catch |err| handleError(err); _tmp_19.append(a_1.data[_idx(a_1.data.len, i_10)][_idx(a_1.data[_idx(a_1.data.len, i_10)].len, j_9)] - b_1.data[_idx(b_1.data.len, i_10)][_idx(b_1.data[_idx(b_1.data.len, i_10)].len, j_9)]) catch |err| handleError(err); break :blk19 (_tmp_19.toOwnedSlice() catch |err| handleError(err)); };
            j_9 = j_9 + 1;
        }
        vals_7 = blk20: { var _tmp_20 = std.ArrayList([]f64).init(std.heap.page_allocator); _tmp_20.appendSlice(@as([]const []f64, vals_7)) catch |err| handleError(err); _tmp_20.append(row_8) catch |err| handleError(err); break :blk20 (_tmp_20.toOwnedSlice() catch |err| handleError(err)); };
        i_10 = i_10 + 1;
    }
    return .{ .data = vals_7, .rows = a_1.rows, .cols = a_1.cols };
}

fn matrix_dot(row_9: []f64, col_2: []f64) f64 {
    var sum_1: f64 = 0.0;
    sum_1 = sum_1;
    var i_11: i64 = 0;
    i_11 = i_11;
    while (i_11 < @as(i64, @intCast(row_9.len))) {
        sum_1 = sum_1 + row_9[_idx(row_9.len, i_11)] * col_2[_idx(col_2.len, i_11)];
        i_11 = i_11 + 1;
    }
    return sum_1;
}

fn matrix_mul(a_2: Matrix, b_2: Matrix) Matrix {
    if (a_2.cols != b_2.rows) {
        return .{ .data = (&[_][]f64{})[0..0], .rows = 0, .cols = 0 };
    }
    const bcols: [][]f64 = matrix_columns(b_2);
    var vals_8: [][]f64 = std.heap.page_allocator.alloc([]f64, 0) catch unreachable;
    vals_8 = vals_8;
    var i_12: i64 = 0;
    i_12 = i_12;
    while (i_12 < a_2.rows) {
        var row_10: []f64 = std.heap.page_allocator.alloc(f64, 0) catch unreachable;
        row_10 = row_10;
        var j_10: i64 = 0;
        j_10 = j_10;
        while (j_10 < b_2.cols) {
            row_10 = blk21: { var _tmp_21 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_21.appendSlice(@as([]const f64, row_10)) catch |err| handleError(err); _tmp_21.append(matrix_dot(a_2.data[_idx(a_2.data.len, i_12)], bcols[_idx(bcols.len, j_10)])) catch |err| handleError(err); break :blk21 (_tmp_21.toOwnedSlice() catch |err| handleError(err)); };
            j_10 = j_10 + 1;
        }
        vals_8 = blk22: { var _tmp_22 = std.ArrayList([]f64).init(std.heap.page_allocator); _tmp_22.appendSlice(@as([]const []f64, vals_8)) catch |err| handleError(err); _tmp_22.append(row_10) catch |err| handleError(err); break :blk22 (_tmp_22.toOwnedSlice() catch |err| handleError(err)); };
        i_12 = i_12 + 1;
    }
    return .{ .data = vals_8, .rows = a_2.rows, .cols = b_2.cols };
}

fn matrix_pow(m_14: Matrix, p: i64) Matrix {
    if (p == 0) {
        return matrix_identity(m_14);
    }
    if (p < 0) {
        if (matrix_is_invertible(m_14)) {
            return matrix_pow(matrix_inverse(m_14), 0 - p);
        }
        return .{ .data = (&[_][]f64{})[0..0], .rows = 0, .cols = 0 };
    }
    var result: Matrix = m_14;
    result = result;
    var i_13: i64 = 1;
    i_13 = i_13;
    while (i_13 < p) {
        result = matrix_mul(result, m_14);
        i_13 = i_13 + 1;
    }
    return result;
}

fn matrix_to_string(m_15: Matrix) []const u8 {
    if (m_15.rows == 0) {
        return "[]";
    }
    var s_1: []const u8 = "[";
    s_1 = s_1;
    var i_14: i64 = 0;
    i_14 = i_14;
    while (i_14 < m_15.rows) {
        s_1 = _concat_string(s_1, "[");
        var j_11: i64 = 0;
        j_11 = j_11;
        while (j_11 < m_15.cols) {
            s_1 = _concat_string(s_1, _str(m_15.data[_idx(m_15.data.len, i_14)][_idx(m_15.data[_idx(m_15.data.len, i_14)].len, j_11)]));
            if (j_11 < m_15.cols - 1) {
                s_1 = _concat_string(s_1, " ");
            }
            j_11 = j_11 + 1;
        }
        s_1 = _concat_string(s_1, "]");
        if (i_14 < m_15.rows - 1) {
            s_1 = _concat_string(s_1, "\n ");
        }
        i_14 = i_14 + 1;
    }
    s_1 = _concat_string(s_1, "]");
    return s_1;
}

fn mochi_main() void {
    const m_16: Matrix = make_matrix(@constCast(([3][]f64{@constCast(([3]f64{1.0, 2.0, 3.0})[0..3]), @constCast(([3]f64{4.0, 5.0, 6.0})[0..3]), @constCast(([3]f64{7.0, 8.0, 9.0})[0..3])})[0..3]));
    std.debug.print("{s}\n", .{matrix_to_string(m_16)});
    std.debug.print("{s}\n", .{_str(matrix_columns(m_16))});
    std.debug.print("{s}\n", .{_concat_string(_concat_string(_str(m_16.rows), ","), _str(m_16.cols))});
    std.debug.print("{s}\n", .{_str(matrix_is_invertible(m_16))});
    std.debug.print("{s}\n", .{matrix_to_string(matrix_identity(m_16))});
    std.debug.print("{s}\n", .{_str(matrix_determinant(m_16))});
    std.debug.print("{s}\n", .{matrix_to_string(matrix_minors(m_16))});
    std.debug.print("{s}\n", .{matrix_to_string(matrix_cofactors(m_16))});
    std.debug.print("{s}\n", .{matrix_to_string(matrix_adjugate(m_16))});
    const m2: Matrix = matrix_mul_scalar(m_16, 3.0);
    std.debug.print("{s}\n", .{matrix_to_string(m2)});
    std.debug.print("{s}\n", .{matrix_to_string(matrix_add(m_16, m2))});
    std.debug.print("{s}\n", .{matrix_to_string(matrix_sub(m_16, m2))});
    std.debug.print("{s}\n", .{matrix_to_string(matrix_pow(m_16, 3))});
    const m3: Matrix = matrix_add_row(m_16, @constCast(([3]f64{10.0, 11.0, 12.0})[0..3]));
    std.debug.print("{s}\n", .{matrix_to_string(m3)});
    const m4: Matrix = matrix_add_column(m2, @constCast(([3]f64{8.0, 16.0, 32.0})[0..3]));
    std.debug.print("{s}\n", .{matrix_to_string(matrix_mul(m3, m4))});
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        mochi_main();
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
