// Generated by Mochi Zig transpiler on 2025-08-12 16:13 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const Coord = struct {
    x: i64,
    y: i64,
};

const PlayResult = struct {
    matrix: [][][]const u8,
    score: i64,
};

fn is_alnum(ch_param: []const u8) bool {
    var ch_var: []const u8 = ch_param;
    ch_var = ch_var;
    return std.mem.order(u8, ch_var, "0") != .lt and std.mem.order(u8, ch_var, "9") != .gt or std.mem.order(u8, ch_var, "A") != .lt and std.mem.order(u8, ch_var, "Z") != .gt or std.mem.order(u8, ch_var, "a") != .lt and std.mem.order(u8, ch_var, "z") != .gt;
}

fn to_int(token_param: []const u8) i64 {
    var token_var: []const u8 = token_param;
    token_var = token_var;
    var res: i64 = 0;
    res = res;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(token_var.len))) {
        res = res * 10 + (std.fmt.parseInt(i64, token_var[@as(usize, @intCast(i))..@min(@as(usize, @intCast(i + 1)), @as(usize, @intCast(token_var.len)))], 10) catch 0);
        i = i + 1;
    }
    return res;
}

fn split(s_param: []const u8, sep_param: []const u8) [][]const u8 {
    var s_var: []const u8 = s_param;
    s_var = s_var;
    var sep_var: []const u8 = sep_param;
    sep_var = sep_var;
    var res: [][]const u8 = std.heap.page_allocator.alloc([]const u8, 0) catch unreachable;
    res = res;
    var current: []const u8 = "";
    current = current;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(s_var.len))) {
        const ch: []const u8 = s_var[@as(usize, @intCast(i))..@min(@as(usize, @intCast(i + 1)), @as(usize, @intCast(s_var.len)))];
        if (std.mem.eql(u8, ch, sep_var)) {
            res = blk: { var _tmp = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []const u8, res)) catch |err| handleError(err); _tmp.append(@constCast(current)) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            current = "";
        } else {
            current = _concat_string(current, ch);
        }
        i = i + 1;
    }
    res = blk: { var _tmp = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []const u8, res)) catch |err| handleError(err); _tmp.append(@constCast(current)) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
    return res;
}

fn parse_moves(input_str_param: []const u8) []Coord {
    var input_str_var: []const u8 = input_str_param;
    input_str_var = input_str_var;
    const pairs: [][]const u8 = split(input_str_var, ",");
    var moves: []Coord = std.heap.page_allocator.alloc(Coord, 0) catch unreachable;
    moves = moves;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(pairs.len))) {
        const pair: []const u8 = pairs[_idx(pairs.len, i)];
        var numbers: [][]const u8 = std.heap.page_allocator.alloc([]const u8, 0) catch unreachable;
        numbers = numbers;
        var num: []const u8 = "";
        num = num;
        var j: i64 = 0;
        j = j;
        while (j < @as(i64, @intCast(pair.len))) {
            const ch: []const u8 = pair[@as(usize, @intCast(j))..@min(@as(usize, @intCast(j + 1)), @as(usize, @intCast(pair.len)))];
            if (std.mem.eql(u8, ch, " ")) {
                if (num.len != 0) {
                    numbers = blk: { var _tmp = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []const u8, numbers)) catch |err| handleError(err); _tmp.append(@constCast(num)) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
                    num = "";
                }
            } else {
                num = _concat_string(num, ch);
            }
            j = j + 1;
        }
        if (num.len != 0) {
            numbers = blk: { var _tmp = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []const u8, numbers)) catch |err| handleError(err); _tmp.append(@constCast(num)) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        }
        if (@as(i64, @intCast(numbers.len)) != 2) {
            @panic("Each move must have exactly two numbers.");
        }
        const x: i64 = to_int(numbers[_idx(numbers.len, 0)]);
        const y: i64 = to_int(numbers[_idx(numbers.len, 1)]);
        moves = blk: { var _tmp = std.ArrayList(Coord).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const Coord, moves)) catch |err| handleError(err); _tmp.append(.{ .x = x, .y = y }) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    return moves;
}

fn validate_matrix_size(size_param: i64) void {
    var size_var: i64 = size_param;
    size_var = size_var;
    if (size_var <= 0) {
        @panic("Matrix size must be a positive integer.");
    }
}

fn validate_matrix_content(matrix_param: [][]const u8, size_param_1: i64) void {
    var matrix_var: [][]const u8 = matrix_param;
    matrix_var = matrix_var;
    var size_var: i64 = size_param_1;
    size_var = size_var;
    if (@as(i64, @intCast(matrix_var.len)) != size_var) {
        @panic("The matrix dont match with size.");
    }
    var i: i64 = 0;
    i = i;
    while (i < size_var) {
        const row: []const u8 = matrix_var[_idx(matrix_var.len, i)];
        if (@as(i64, @intCast(row.len)) != size_var) {
            @panic(_concat_string(_concat_string("Each row in the matrix must have exactly ", _str(size_var)), " characters."));
        }
        var j: i64 = 0;
        j = j;
        while (j < size_var) {
            const ch: []const u8 = row[@as(usize, @intCast(j))..@min(@as(usize, @intCast(j + 1)), @as(usize, @intCast(row.len)))];
            if (!(is_alnum(ch))) {
                @panic("Matrix rows can only contain letters and numbers.");
            }
            j = j + 1;
        }
        i = i + 1;
    }
}

fn validate_moves(moves_param: []Coord, size_param_2: i64) void {
    var moves_var: []Coord = moves_param;
    moves_var = moves_var;
    var size_var: i64 = size_param_2;
    size_var = size_var;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(moves_var.len))) {
        const mv: Coord = moves_var[_idx(moves_var.len, i)];
        if (mv.x < 0 or mv.x >= size_var or mv.y < 0 or mv.y >= size_var) {
            @panic("Move is out of bounds for a matrix.");
        }
        i = i + 1;
    }
}

fn contains(pos_param: []Coord, r_param: i64, c_param_: i64) bool {
    var pos_var: []Coord = pos_param;
    pos_var = pos_var;
    var r_var: i64 = r_param;
    r_var = r_var;
    const c_var_: i64 = c_param_;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(pos_var.len))) {
        const p: Coord = pos_var[_idx(pos_var.len, i)];
        if (p.x == r_var and p.y == c_var_) {
            return true;
        }
        i = i + 1;
    }
    return false;
}

fn find_repeat(matrix_g_param: [][][]const u8, row_param: i64, column_param: i64, size_param_3: i64) []Coord {
    var matrix_g_var: [][][]const u8 = matrix_g_param;
    matrix_g_var = matrix_g_var;
    var row_var: i64 = row_param;
    row_var = row_var;
    var column_var: i64 = column_param;
    column_var = column_var;
    var size_var: i64 = size_param_3;
    size_var = size_var;
    column_var = size_var - 1 - column_var;
    var visited: []Coord = std.heap.page_allocator.alloc(Coord, 0) catch unreachable;
    visited = visited;
    var repeated: []Coord = std.heap.page_allocator.alloc(Coord, 0) catch unreachable;
    repeated = repeated;
    const color: []const u8 = matrix_g_var[_idx(matrix_g_var.len, column_var)][_idx(matrix_g_var[_idx(matrix_g_var.len, column_var)].len, row_var)];
    if (std.mem.eql(u8, color, "-")) {
        return repeated;
    }
    var stack: []Coord = std.heap.page_allocator.dupe(Coord, (&([1]Coord{.{ .x = column_var, .y = row_var }}))[0..]) catch unreachable;
    stack = stack;
    while (@as(i64, @intCast(stack.len)) > 0) {
        const idx: i64 = @as(i64, @intCast(stack.len)) - 1;
        const pos: Coord = stack[_idx(stack.len, idx)];
        stack = stack[@as(usize, @intCast(0))..@min(@as(usize, @intCast(idx)), @as(usize, @intCast(stack.len)))];
        if (pos.x < 0 or pos.x >= size_var or pos.y < 0 or pos.y >= size_var) {
            continue;
        }
        if (contains(visited, pos.x, pos.y)) {
            continue;
        }
        visited = blk: { var _tmp = std.ArrayList(Coord).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const Coord, visited)) catch |err| handleError(err); _tmp.append(pos) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        if (std.mem.eql(u8, matrix_g_var[_idx(matrix_g_var.len, pos.x)][_idx(matrix_g_var[_idx(matrix_g_var.len, pos.x)].len, pos.y)], color)) {
            repeated = blk: { var _tmp = std.ArrayList(Coord).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const Coord, repeated)) catch |err| handleError(err); _tmp.append(pos) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            stack = blk: { var _tmp = std.ArrayList(Coord).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const Coord, stack)) catch |err| handleError(err); _tmp.append(.{ .x = pos.x - 1, .y = pos.y }) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            stack = blk: { var _tmp = std.ArrayList(Coord).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const Coord, stack)) catch |err| handleError(err); _tmp.append(.{ .x = pos.x + 1, .y = pos.y }) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            stack = blk: { var _tmp = std.ArrayList(Coord).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const Coord, stack)) catch |err| handleError(err); _tmp.append(.{ .x = pos.x, .y = pos.y - 1 }) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            stack = blk: { var _tmp = std.ArrayList(Coord).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const Coord, stack)) catch |err| handleError(err); _tmp.append(.{ .x = pos.x, .y = pos.y + 1 }) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        }
    }
    return repeated;
}

fn increment_score(count_param: i64) i64 {
    var count_var: i64 = count_param;
    count_var = count_var;
    return @divTrunc(count_var * (count_var + 1), 2);
}

fn move_x(matrix_g_param_1: [][][]const u8, column_param_1: i64, size_param_4: i64) [][][]const u8 {
    var matrix_g_var: [][][]const u8 = matrix_g_param_1;
    matrix_g_var = matrix_g_var;
    var column_var: i64 = column_param_1;
    column_var = column_var;
    var size_var: i64 = size_param_4;
    size_var = size_var;
    var new_list: [][]const u8 = std.heap.page_allocator.alloc([]const u8, 0) catch unreachable;
    new_list = new_list;
    var row: i64 = 0;
    row = row;
    while (row < size_var) {
        const val: []const u8 = matrix_g_var[_idx(matrix_g_var.len, row)][_idx(matrix_g_var[_idx(matrix_g_var.len, row)].len, column_var)];
        if (!std.mem.eql(u8, val, "-")) {
            new_list = blk: { var _tmp = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []const u8, new_list)) catch |err| handleError(err); _tmp.append(@constCast(val)) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        } else {
            new_list = blk: { var _tmp = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []const u8, (&([1][]const u8{val}))[0..])) catch |err| handleError(err); _tmp.appendSlice(@as([]const []const u8, new_list)) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        }
        row = row + 1;
    }
    row = 0;
    while (row < size_var) {
        matrix_g_var[_idx(matrix_g_var.len, row)][_idx(matrix_g_var[_idx(matrix_g_var.len, row)].len, column_var)] = new_list[_idx(new_list.len, row)];
        row = row + 1;
    }
    return matrix_g_var;
}

fn move_y(matrix_g_param_2: [][][]const u8, size_param_5: i64) [][][]const u8 {
    var matrix_g_var: [][][]const u8 = matrix_g_param_2;
    matrix_g_var = matrix_g_var;
    var size_var: i64 = size_param_5;
    size_var = size_var;
    var empty_cols: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    empty_cols = empty_cols;
    var column: i64 = size_var - 1;
    column = column;
    while (column >= 0) {
        var row: i64 = 0;
        row = row;
        var all_empty: bool = true;
        all_empty = all_empty;
        while (row < size_var) {
            if (!std.mem.eql(u8, matrix_g_var[_idx(matrix_g_var.len, row)][_idx(matrix_g_var[_idx(matrix_g_var.len, row)].len, column)], "-")) {
                all_empty = false;
                break;
            }
            row = row + 1;
        }
        if (all_empty) {
            empty_cols = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, empty_cols)) catch |err| handleError(err); _tmp.append(column) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        }
        column = column - 1;
    }
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(empty_cols.len))) {
        const col: i64 = empty_cols[_idx(empty_cols.len, i)];
        var c: i64 = col + 1;
        c = c;
        while (c < size_var) {
            var r: i64 = 0;
            r = r;
            while (r < size_var) {
                matrix_g_var[_idx(matrix_g_var.len, r)][_idx(matrix_g_var[_idx(matrix_g_var.len, r)].len, c - 1)] = matrix_g_var[_idx(matrix_g_var.len, r)][_idx(matrix_g_var[_idx(matrix_g_var.len, r)].len, c)];
                r = r + 1;
            }
            c = c + 1;
        }
        var r: i64 = 0;
        r = r;
        while (r < size_var) {
            matrix_g_var[_idx(matrix_g_var.len, r)][_idx(matrix_g_var[_idx(matrix_g_var.len, r)].len, size_var - 1)] = "-";
            r = r + 1;
        }
        i = i + 1;
    }
    return matrix_g_var;
}

fn play(matrix_g_param_3: [][][]const u8, pos_x_param: i64, pos_y_param: i64, size_param_6: i64) PlayResult {
    var matrix_g_var: [][][]const u8 = matrix_g_param_3;
    matrix_g_var = matrix_g_var;
    var pos_x_var: i64 = pos_x_param;
    pos_x_var = pos_x_var;
    var pos_y_var: i64 = pos_y_param;
    pos_y_var = pos_y_var;
    var size_var: i64 = size_param_6;
    size_var = size_var;
    const same_colors: []Coord = find_repeat(matrix_g_var, pos_x_var, pos_y_var, size_var);
    if (@as(i64, @intCast(same_colors.len)) != 0) {
        var i: i64 = 0;
        i = i;
        while (i < @as(i64, @intCast(same_colors.len))) {
            const p: Coord = same_colors[_idx(same_colors.len, i)];
            matrix_g_var[_idx(matrix_g_var.len, p.x)][_idx(matrix_g_var[_idx(matrix_g_var.len, p.x)].len, p.y)] = "-";
            i = i + 1;
        }
        var column: i64 = 0;
        column = column;
        while (column < size_var) {
            matrix_g_var = move_x(matrix_g_var, column, size_var);
            column = column + 1;
        }
        matrix_g_var = move_y(matrix_g_var, size_var);
    }
    const sc: i64 = increment_score(@as(i64, @intCast(same_colors.len)));
    return .{ .matrix = matrix_g_var, .score = sc };
}

fn build_matrix(matrix_param_1: [][]const u8) [][][]const u8 {
    var matrix_var: [][]const u8 = matrix_param_1;
    matrix_var = matrix_var;
    var res: [][][]const u8 = std.heap.page_allocator.alloc([][]const u8, 0) catch unreachable;
    res = res;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(matrix_var.len))) {
        const row: []const u8 = matrix_var[_idx(matrix_var.len, i)];
        var row_list: [][]const u8 = std.heap.page_allocator.alloc([]const u8, 0) catch unreachable;
        row_list = row_list;
        var j: i64 = 0;
        j = j;
        while (j < @as(i64, @intCast(row.len))) {
            row_list = blk: { var _tmp = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []const u8, row_list)) catch |err| handleError(err); _tmp.append(@constCast(row[@as(usize, @intCast(j))..@min(@as(usize, @intCast(j + 1)), @as(usize, @intCast(row.len)))])) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            j = j + 1;
        }
        res = blk: { var _tmp = std.ArrayList([][]const u8).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const [][]const u8, res)) catch |err| handleError(err); _tmp.append(row_list) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    return res;
}

fn process_game(size_param_7: i64, matrix_param_2: [][]const u8, moves_param_1: []Coord) i64 {
    var size_var: i64 = size_param_7;
    size_var = size_var;
    var matrix_var: [][]const u8 = matrix_param_2;
    matrix_var = matrix_var;
    var moves_var: []Coord = moves_param_1;
    moves_var = moves_var;
    var game_matrix: [][][]const u8 = build_matrix(matrix_var);
    game_matrix = game_matrix;
    var total: i64 = 0;
    total = total;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(moves_var.len))) {
        const mv: Coord = moves_var[_idx(moves_var.len, i)];
        const res: PlayResult = play(game_matrix, mv.x, mv.y, size_var);
        game_matrix = res.matrix;
        total = total + res.score;
        i = i + 1;
    }
    return total;
}

fn mochi_main() void {
    const size: i64 = 4;
    const matrix: [][]const u8 = std.heap.page_allocator.dupe([]const u8, (&([4][]const u8{"RRBG", "RBBG", "YYGG", "XYGG"}))[0..]) catch unreachable;
    const moves: []Coord = parse_moves("0 1,1 1");
    validate_matrix_size(size);
    validate_matrix_content(matrix, size);
    validate_moves(moves, size);
    const score: i64 = process_game(size, matrix, moves);
    std.debug.print("{s}\n", .{_str(score)});
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        mochi_main();
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
