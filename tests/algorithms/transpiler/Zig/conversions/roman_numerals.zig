// Generated by Mochi Zig transpiler on 2025-08-07 00:08 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

var roman_values_var: []i64 = &[_]i64{};
var roman_symbols_var: [][]const u8 = &[_][]const u8{};

fn char_value(c: []const u8) i64 {
    if (std.mem.eql(u8, c, "I")) {
        return 1;
    }
    if (std.mem.eql(u8, c, "V")) {
        return 5;
    }
    if (std.mem.eql(u8, c, "X")) {
        return 10;
    }
    if (std.mem.eql(u8, c, "L")) {
        return 50;
    }
    if (std.mem.eql(u8, c, "C")) {
        return 100;
    }
    if (std.mem.eql(u8, c, "D")) {
        return 500;
    }
    if (std.mem.eql(u8, c, "M")) {
        return 1000;
    }
    return 0;
}

fn roman_to_int(roman: []const u8) i64 {
    var total: i64 = 0;
    var i: i64 = 0;
    while (i < @as(i64, @intCast(roman.len))) {
        if (i + 1 < @as(i64, @intCast(roman.len)) and char_value(roman[@as(usize, @intCast(i))..@as(usize, @intCast(i)) + 1]) < char_value(roman[@as(usize, @intCast(i + 1))..@as(usize, @intCast(i + 1)) + 1])) {
            total = total + char_value(roman[@as(usize, @intCast(i + 1))..@as(usize, @intCast(i + 1)) + 1]) - char_value(roman[@as(usize, @intCast(i))..@as(usize, @intCast(i)) + 1]);
            i = i + 2;
        } else {
            total = total + char_value(roman[@as(usize, @intCast(i))..@as(usize, @intCast(i)) + 1]);
            i = i + 1;
        }
    }
    return total;
}

fn int_to_roman(number: i64) []const u8 {
    var num: i64 = number;
    var res: []const u8 = "";
    var i: i64 = 0;
    while (i < @as(i64, @intCast(roman_values_var.len))) {
        const value: i64 = roman_values_var[@as(usize, @intCast(i))];
        const symbol: []const u8 = roman_symbols_var[@as(usize, @intCast(i))];
        const factor: i64 = @divTrunc(num, value);
        num = @mod(num, value);
        var j: i64 = 0;
        while (j < factor) {
            res = _concat_string(res, symbol);
            j = j + 1;
        }
        if (num == 0) {
            break;
        }
        i = i + 1;
    }
    return res;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        roman_values_var = blk0: { var _tmp0 = std.heap.page_allocator.alloc(i64, 13) catch unreachable; _tmp0[0] = 1000; _tmp0[1] = 900; _tmp0[2] = 500; _tmp0[3] = 400; _tmp0[4] = 100; _tmp0[5] = 90; _tmp0[6] = 50; _tmp0[7] = 40; _tmp0[8] = 10; _tmp0[9] = 9; _tmp0[10] = 5; _tmp0[11] = 4; _tmp0[12] = 1; break :blk0 _tmp0; };
        roman_symbols_var = blk1: { var _tmp1 = std.heap.page_allocator.alloc([]const u8, 13) catch unreachable; _tmp1[0] = "M"; _tmp1[1] = "CM"; _tmp1[2] = "D"; _tmp1[3] = "CD"; _tmp1[4] = "C"; _tmp1[5] = "XC"; _tmp1[6] = "L"; _tmp1[7] = "XL"; _tmp1[8] = "X"; _tmp1[9] = "IX"; _tmp1[10] = "V"; _tmp1[11] = "IV"; _tmp1[12] = "I"; break :blk1 _tmp1; };
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * std.mem.page_size;
    }
    return 0;
}
