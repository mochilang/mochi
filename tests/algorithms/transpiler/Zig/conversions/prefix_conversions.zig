// Generated by Mochi Zig transpiler on 2025-08-07 14:57 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

var SI_UNITS_var: std.StringHashMap(i64) = std.StringHashMap(i64).init(std.heap.page_allocator);
var BINARY_UNITS_var: std.StringHashMap(i64) = std.StringHashMap(i64).init(std.heap.page_allocator);

fn pow(base: f64, exp: i64) f64 {
    if (exp == 0) {
        return 1.0;
    }
    var e: i64 = exp;
    e = e;
    if (e < 0) {
        e = 0 - e;
    }
    var result: f64 = 1.0;
    result = result;
    var i: i64 = 0;
    i = i;
    while (i < e) {
        result = result * base;
        i = i + 1;
    }
    if (exp < 0) {
        return 1.0 / result;
    }
    return result;
}

fn convert_si_prefix(known_amount: f64, known_prefix: []const u8, unknown_prefix: []const u8) f64 {
    var kp: []const u8 = _lower(known_prefix);
    kp = kp;
    var up: []const u8 = _lower(unknown_prefix);
    up = up;
    if (!(SI_UNITS_var.contains(kp))) {
        @panic(_concat_string("unknown prefix: ", known_prefix));
    }
    if (!(SI_UNITS_var.contains(up))) {
        @panic(_concat_string("unknown prefix: ", unknown_prefix));
    }
    var diff: i64 = SI_UNITS_var.get(kp).? - SI_UNITS_var.get(up).?;
    diff = diff;
    return known_amount * pow(10.0, diff);
}

fn convert_binary_prefix(known_amount: f64, known_prefix: []const u8, unknown_prefix: []const u8) f64 {
    var kp: []const u8 = _lower(known_prefix);
    kp = kp;
    var up: []const u8 = _lower(unknown_prefix);
    up = up;
    if (!(BINARY_UNITS_var.contains(kp))) {
        @panic(_concat_string("unknown prefix: ", known_prefix));
    }
    if (!(BINARY_UNITS_var.contains(up))) {
        @panic(_concat_string("unknown prefix: ", unknown_prefix));
    }
    var diff: i64 = (BINARY_UNITS_var.get(kp).? - BINARY_UNITS_var.get(up).?) * 10;
    diff = diff;
    return known_amount * pow(2.0, diff);
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        SI_UNITS_var = blk: { var m = std.StringHashMap(i64).init(std.heap.page_allocator); m.put("yotta", 24) catch unreachable; m.put("zetta", 21) catch unreachable; m.put("exa", 18) catch unreachable; m.put("peta", 15) catch unreachable; m.put("tera", 12) catch unreachable; m.put("giga", 9) catch unreachable; m.put("mega", 6) catch unreachable; m.put("kilo", 3) catch unreachable; m.put("hecto", 2) catch unreachable; m.put("deca", 1) catch unreachable; m.put("deci", 0 - 1) catch unreachable; m.put("centi", 0 - 2) catch unreachable; m.put("milli", 0 - 3) catch unreachable; m.put("micro", 0 - 6) catch unreachable; m.put("nano", 0 - 9) catch unreachable; m.put("pico", 0 - 12) catch unreachable; m.put("femto", 0 - 15) catch unreachable; m.put("atto", 0 - 18) catch unreachable; m.put("zepto", 0 - 21) catch unreachable; m.put("yocto", 0 - 24) catch unreachable; break :blk m; };
        BINARY_UNITS_var = blk: { var m = std.StringHashMap(i64).init(std.heap.page_allocator); m.put("yotta", 8) catch unreachable; m.put("zetta", 7) catch unreachable; m.put("exa", 6) catch unreachable; m.put("peta", 5) catch unreachable; m.put("tera", 4) catch unreachable; m.put("giga", 3) catch unreachable; m.put("mega", 2) catch unreachable; m.put("kilo", 1) catch unreachable; break :blk m; };
        std.debug.print("{s}\n", .{_str(convert_si_prefix(1.0, "giga", "mega"))});
        std.debug.print("{s}\n", .{_str(convert_si_prefix(1.0, "mega", "giga"))});
        std.debug.print("{s}\n", .{_str(convert_si_prefix(1.0, "kilo", "kilo"))});
        std.debug.print("{s}\n", .{_str(convert_binary_prefix(1.0, "giga", "mega"))});
        std.debug.print("{s}\n", .{_str(convert_binary_prefix(1.0, "mega", "giga"))});
        std.debug.print("{s}\n", .{_str(convert_binary_prefix(1.0, "kilo", "kilo"))});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _upper(s: []const u8) []const u8 {
    var out = std.heap.page_allocator.alloc(u8, s.len + 1) catch unreachable;
    _ = std.ascii.upperString(out[0..s.len], s);
    out[s.len] = 0;
    return out[0..s.len];
}

fn _lower(s: []const u8) []const u8 {
    var out = std.heap.page_allocator.alloc(u8, s.len + 1) catch unreachable;
    _ = std.ascii.lowerString(out[0..s.len], s);
    out[s.len] = 0;
    return out[0..s.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * std.mem.page_size;
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
