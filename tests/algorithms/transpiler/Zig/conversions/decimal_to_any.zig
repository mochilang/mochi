// Generated by Mochi Zig transpiler on 2025-08-07 00:08 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn decimal_to_any(num: i64, base: i64) []const u8 {
    if (num < 0) {
        @panic("parameter must be positive int");
    }
    if (base < 2) {
        @panic("base must be >= 2");
    }
    if (base > 36) {
        @panic("base must be <= 36");
    }
    if (num == 0) {
        return "0";
    }
    const symbols: []const u8 = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    var n: i64 = num;
    var result: []const u8 = "";
    while (n > 0) {
        const mod: i64 = @mod(n, base);
        const digit: []const u8 = symbols[@as(usize, @intCast(mod))..@min(@as(usize, @intCast(mod + 1)), @as(usize, @intCast(symbols.len)))];
        result = _concat_string(digit, result);
        n = @divTrunc(n, base);
    }
    return result;
}

fn mochi_main() void {
    std.debug.print("{s}\n", .{decimal_to_any(0, 2)});
    std.debug.print("{s}\n", .{decimal_to_any(5, 4)});
    std.debug.print("{s}\n", .{decimal_to_any(20, 3)});
    std.debug.print("{s}\n", .{decimal_to_any(58, 16)});
    std.debug.print("{s}\n", .{decimal_to_any(243, 17)});
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        mochi_main();
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * std.mem.page_size;
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
