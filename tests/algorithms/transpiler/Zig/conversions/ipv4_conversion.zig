// Generated by Mochi Zig transpiler on 2025-08-07 00:08 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const hex_digits_var: []const u8 = "0123456789abcdef";

fn split_by_dot(s: []const u8) [][]const u8 {
    var res: [][]const u8 = &[_][]const u8{};
    var current: []const u8 = "";
    var i: i64 = 0;
    while (i < @as(i64, @intCast(s.len))) {
        const c: []const u8 = s[@as(usize, @intCast(i))..@as(usize, @intCast(i)) + 1];
        if (std.mem.eql(u8, c, ".")) {
            res = blk: { var _tmp = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []const u8, res)) catch |err| handleError(err); _tmp.append(current) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            current = "";
        } else {
            current = _concat_string(current, c);
        }
        i = i + 1;
    }
    res = blk: { var _tmp = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []const u8, res)) catch |err| handleError(err); _tmp.append(current) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
    return res;
}

fn parse_decimal(s: []const u8) i64 {
    if (@as(i64, @intCast(s.len)) == 0) {
        @panic("Invalid IPv4 address format");
    }
    var value: i64 = 0;
    var i: i64 = 0;
    while (i < @as(i64, @intCast(s.len))) {
        const c: []const u8 = s[@as(usize, @intCast(i))..@as(usize, @intCast(i)) + 1];
        if (std.mem.order(u8, c, "0") == .lt or std.mem.order(u8, c, "9") == .gt) {
            @panic("Invalid IPv4 address format");
        }
        value = value * 10 + std.fmt.parseInt(i64, c, 10) catch 0;
        i = i + 1;
    }
    return value;
}

fn to_hex2(n: i64) []const u8 {
    var x: i64 = n;
    var res: []const u8 = "";
    while (x > 0) {
        const d: i64 = @mod(x, 16);
        res = _concat_string(hex_digits_var[@as(usize, @intCast(d))..@as(usize, @intCast(d)) + 1], res);
        x = @divTrunc(x, 16);
    }
    while (@as(i64, @intCast(res.len)) < 2) {
        res = _concat_string("0", res);
    }
    return res;
}

fn ipv4_to_decimal(ipv4_address: []const u8) i64 {
    var parts: [][]const u8 = split_by_dot(ipv4_address);
    if (@as(i64, @intCast(parts.len)) != 4) {
        @panic("Invalid IPv4 address format");
    }
    var result: i64 = 0;
    var i: i64 = 0;
    while (i < 4) {
        const oct: i64 = parse_decimal(parts[@as(usize, @intCast(i))]);
        if (oct < 0 or oct > 255) {
            @panic(_concat_string("Invalid IPv4 octet ", _str(oct)));
        }
        result = result * 256 + oct;
        i = i + 1;
    }
    return result;
}

fn alt_ipv4_to_decimal(ipv4_address: []const u8) i64 {
    var parts: [][]const u8 = split_by_dot(ipv4_address);
    if (@as(i64, @intCast(parts.len)) != 4) {
        @panic("Invalid IPv4 address format");
    }
    var hex_str: []const u8 = "";
    var i: i64 = 0;
    while (i < 4) {
        const oct: i64 = parse_decimal(parts[@as(usize, @intCast(i))]);
        if (oct < 0 or oct > 255) {
            @panic(_concat_string("Invalid IPv4 octet ", _str(oct)));
        }
        hex_str = _concat_string(hex_str, to_hex2(oct));
        i = i + 1;
    }
    var value: i64 = 0;
    var k: i64 = 0;
    while (k < @as(i64, @intCast(hex_str.len))) {
        const c: []const u8 = hex_str[@as(usize, @intCast(k))..@as(usize, @intCast(k)) + 1];
        var digit: i64 = 0 - 1;
        var j: i64 = 0;
        while (j < @as(i64, @intCast(hex_digits_var.len))) {
            if (std.mem.eql(u8, hex_digits_var[@as(usize, @intCast(j))..@as(usize, @intCast(j)) + 1], c)) {
                digit = j;
            }
            j = j + 1;
        }
        if (digit < 0) {
            @panic("Invalid hex digit");
        }
        value = value * 16 + digit;
        k = k + 1;
    }
    return value;
}

fn decimal_to_ipv4(decimal_ipv4: i64) []const u8 {
    if (decimal_ipv4 < 0 or decimal_ipv4 > 4294967295) {
        @panic("Invalid decimal IPv4 address");
    }
    var n: i64 = decimal_ipv4;
    var parts: [][]const u8 = &[_][]const u8{};
    var i: i64 = 0;
    while (i < 4) {
        const octet: i64 = @mod(n, 256);
        parts = blk: { var _tmp = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []const u8, parts)) catch |err| handleError(err); _tmp.append(_str(octet)) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        n = @divTrunc(n, 256);
        i = i + 1;
    }
    var res: []const u8 = "";
    var j: i64 = @as(i64, @intCast(parts.len)) - 1;
    while (j >= 0) {
        res = _concat_string(res, parts[@as(usize, @intCast(j))]);
        if (j > 0) {
            res = _concat_string(res, ".");
        }
        j = j - 1;
    }
    return res;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        std.debug.print("{s}\n", .{_str(ipv4_to_decimal("192.168.0.1"))});
        std.debug.print("{s}\n", .{_str(ipv4_to_decimal("10.0.0.255"))});
        std.debug.print("{s}\n", .{_str(alt_ipv4_to_decimal("192.168.0.1"))});
        std.debug.print("{s}\n", .{_str(alt_ipv4_to_decimal("10.0.0.255"))});
        std.debug.print("{s}\n", .{decimal_to_ipv4(3232235521)});
        std.debug.print("{s}\n", .{decimal_to_ipv4(167772415)});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    if (info == .Pointer and info.Pointer.size == .Slice) {
        var out = std.ArrayList(u8).init(std.heap.page_allocator);
        defer out.deinit();
        out.append('[') catch unreachable;
        for (v, 0..) |e, i| {
            if (i != 0) { out.append(' ') catch unreachable; }
            const s = _str(e);
            out.appendSlice(s) catch unreachable;
        }
        out.append(']') catch unreachable;
        return out.toOwnedSlice() catch unreachable;
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * std.mem.page_size;
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
