// Generated by Mochi Zig transpiler on 2025-08-07 14:57 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn trim(s: []const u8) []const u8 {
    var start: i64 = 0;
    start = start;
    while (start < @as(i64, @intCast(s.len))) {
        var ch: []const u8 = s[@as(usize, @intCast(start))..@min(@as(usize, @intCast(start + 1)), @as(usize, @intCast(s.len)))];
        ch = ch;
        if (!std.mem.eql(u8, ch, " ") and !std.mem.eql(u8, ch, "\n") and !std.mem.eql(u8, ch, "\t") and !std.mem.eql(u8, ch, "\r")) {
            break;
        }
        start = start + 1;
    }
    var end: i64 = @as(i64, @intCast(s.len));
    end = end;
    while (end > start) {
        var ch: []const u8 = s[@as(usize, @intCast(end - 1))..@min(@as(usize, @intCast(end)), @as(usize, @intCast(s.len)))];
        ch = ch;
        if (!std.mem.eql(u8, ch, " ") and !std.mem.eql(u8, ch, "\n") and !std.mem.eql(u8, ch, "\t") and !std.mem.eql(u8, ch, "\r")) {
            break;
        }
        end = end - 1;
    }
    return s[@as(usize, @intCast(start))..@min(@as(usize, @intCast(end)), @as(usize, @intCast(s.len)))];
}

fn bin_to_decimal(bin_string: []const u8) i64 {
    var trimmed: []const u8 = trim(bin_string);
    trimmed = trimmed;
    if (trimmed.len == 0) {
        @panic("Empty string was passed to the function");
    }
    var is_negative: bool = false;
    is_negative = is_negative;
    var s: []const u8 = blk: { const tmp = std.heap.page_allocator.alloc(u8, trimmed.len) catch unreachable; @memcpy(tmp, trimmed); break :blk tmp; };
    s = s;
    if (std.mem.eql(u8, s[@as(usize, @intCast(0))..@min(@as(usize, @intCast(1)), @as(usize, @intCast(s.len)))], "-")) {
        is_negative = true;
        s = s[@as(usize, @intCast(1))..@min(@as(usize, @intCast(@as(i64, @intCast(s.len)))), @as(usize, @intCast(s.len)))];
    }
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(s.len))) {
        var c: []const u8 = s[@as(usize, @intCast(i))..@min(@as(usize, @intCast(i + 1)), @as(usize, @intCast(s.len)))];
        c = c;
        if (!std.mem.eql(u8, c, "0") and !std.mem.eql(u8, c, "1")) {
            @panic("Non-binary value was passed to the function");
        }
        i = i + 1;
    }
    var decimal_number: i64 = 0;
    decimal_number = decimal_number;
    i = 0;
    while (i < @as(i64, @intCast(s.len))) {
        var c: []const u8 = s[@as(usize, @intCast(i))..@min(@as(usize, @intCast(i + 1)), @as(usize, @intCast(s.len)))];
        c = c;
        var digit: i64 = std.fmt.parseInt(i64, c, 10) catch 0;
        digit = digit;
        decimal_number = 2 * decimal_number + digit;
        i = i + 1;
    }
    if (is_negative) {
        return 0 - decimal_number;
    }
    return decimal_number;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        std.debug.print("{s}\n", .{_str(bin_to_decimal("101"))});
        std.debug.print("{s}\n", .{_str(bin_to_decimal(" 1010   "))});
        std.debug.print("{s}\n", .{_str(bin_to_decimal("-11101"))});
        std.debug.print("{s}\n", .{_str(bin_to_decimal("0"))});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * std.mem.page_size;
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
