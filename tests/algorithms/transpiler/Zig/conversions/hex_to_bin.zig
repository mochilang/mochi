// Generated by Mochi Zig transpiler on 2025-08-07 00:08 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn panic(msg: []const u8) void {
    std.debug.print("{s}\n", .{msg});
}

fn trim_spaces(s: []const u8) []const u8 {
    var start: i64 = 0;
    var end: i64 = @as(i64, @intCast(s.len));
    while (start < end and std.mem.eql(u8, s[@as(usize, @intCast(start))..@min(@as(usize, @intCast(start + 1)), @as(usize, @intCast(s.len)))], " ")) {
        start = start + 1;
    }
    while (end > start and std.mem.eql(u8, s[@as(usize, @intCast(end - 1))..@min(@as(usize, @intCast(end)), @as(usize, @intCast(s.len)))], " ")) {
        end = end - 1;
    }
    return s[@as(usize, @intCast(start))..@min(@as(usize, @intCast(end)), @as(usize, @intCast(s.len)))];
}

fn hex_digit_value(ch: []const u8) i64 {
    if (std.mem.eql(u8, ch, "0")) {
        return 0;
    }
    if (std.mem.eql(u8, ch, "1")) {
        return 1;
    }
    if (std.mem.eql(u8, ch, "2")) {
        return 2;
    }
    if (std.mem.eql(u8, ch, "3")) {
        return 3;
    }
    if (std.mem.eql(u8, ch, "4")) {
        return 4;
    }
    if (std.mem.eql(u8, ch, "5")) {
        return 5;
    }
    if (std.mem.eql(u8, ch, "6")) {
        return 6;
    }
    if (std.mem.eql(u8, ch, "7")) {
        return 7;
    }
    if (std.mem.eql(u8, ch, "8")) {
        return 8;
    }
    if (std.mem.eql(u8, ch, "9")) {
        return 9;
    }
    if (std.mem.eql(u8, ch, "a") or std.mem.eql(u8, ch, "A")) {
        return 10;
    }
    if (std.mem.eql(u8, ch, "b") or std.mem.eql(u8, ch, "B")) {
        return 11;
    }
    if (std.mem.eql(u8, ch, "c") or std.mem.eql(u8, ch, "C")) {
        return 12;
    }
    if (std.mem.eql(u8, ch, "d") or std.mem.eql(u8, ch, "D")) {
        return 13;
    }
    if (std.mem.eql(u8, ch, "e") or std.mem.eql(u8, ch, "E")) {
        return 14;
    }
    if (std.mem.eql(u8, ch, "f") or std.mem.eql(u8, ch, "F")) {
        return 15;
    }
    panic("Invalid value was passed to the function");
}

fn hex_to_bin(hex_num: []const u8) i64 {
    const trimmed: []const u8 = trim_spaces(hex_num);
    if (@as(i64, @intCast(trimmed.len)) == 0) {
        panic("No value was passed to the function");
    }
    var s: []const u8 = blk: { const tmp = std.heap.page_allocator.alloc(u8, trimmed.len) catch unreachable; @memcpy(tmp, trimmed); break :blk tmp; };
    var is_negative: bool = false;
    if (std.mem.eql(u8, s[@as(usize, @intCast(0))..@min(@as(usize, @intCast(1)), @as(usize, @intCast(s.len)))], "-")) {
        is_negative = true;
        s = s[@as(usize, @intCast(1))..@min(@as(usize, @intCast(@as(i64, @intCast(s.len)))), @as(usize, @intCast(s.len)))];
    }
    var int_num: i64 = 0;
    var i: i64 = 0;
    while (i < @as(i64, @intCast(s.len))) {
        const ch: []const u8 = s[@as(usize, @intCast(i))..@min(@as(usize, @intCast(i + 1)), @as(usize, @intCast(s.len)))];
        const val: i64 = hex_digit_value(ch);
        int_num = int_num * 16 + val;
        i = i + 1;
    }
    var bin_str: []const u8 = "";
    var n: i64 = int_num;
    if (n == 0) {
        bin_str = "0";
    }
    while (n > 0) {
        bin_str = _concat_string(_str(@mod(n, 2)), bin_str);
        n = @divTrunc(n, 2);
    }
    var result: i64 = std.fmt.parseInt(i64, bin_str, 10) catch 0;
    if (is_negative) {
        result = 0 - result;
    }
    return result;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        std.debug.print("{s}\n", .{_str(hex_to_bin("AC"))});
        std.debug.print("{s}\n", .{_str(hex_to_bin("9A4"))});
        std.debug.print("{s}\n", .{_str(hex_to_bin("   12f   "))});
        std.debug.print("{s}\n", .{_str(hex_to_bin("FfFf"))});
        std.debug.print("{s}\n", .{_str(hex_to_bin("-fFfF"))});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    if (info == .Pointer and info.Pointer.size == .Slice) {
        var out = std.ArrayList(u8).init(std.heap.page_allocator);
        defer out.deinit();
        out.append('[') catch unreachable;
        for (v, 0..) |e, i| {
            if (i != 0) { out.append(' ') catch unreachable; }
            const s = _str(e);
            out.appendSlice(s) catch unreachable;
        }
        out.append(']') catch unreachable;
        return out.toOwnedSlice() catch unreachable;
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * std.mem.page_size;
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
