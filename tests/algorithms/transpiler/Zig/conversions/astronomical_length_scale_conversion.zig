// Generated by Mochi Zig transpiler on 2025-08-07 00:08 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

var UNIT_SYMBOL_var: std.StringHashMap([]const u8) = std.StringHashMap([]const u8).init(std.heap.page_allocator);
var METRIC_CONVERSION_var: std.StringHashMap(i64) = std.StringHashMap(i64).init(std.heap.page_allocator);
const ABBREVIATIONS_var: []const u8 = "m, km, Mm, Gm, Tm, Pm, Em, Zm, Ym";

fn sanitize(unit: []const u8) []const u8 {
    var res: []const u8 = _lower(unit);
    if (@as(i64, @intCast(res.len)) > 0) {
        const last: []const u8 = res[@as(usize, @intCast(@as(i64, @intCast(res.len)) - 1))..@min(@as(usize, @intCast(@as(i64, @intCast(res.len)))), @as(usize, @intCast(res.len)))];
        if (std.mem.eql(u8, last, "s")) {
            res = res[@as(usize, @intCast(0))..@min(@as(usize, @intCast(@as(i64, @intCast(res.len)) - 1)), @as(usize, @intCast(res.len)))];
        }
    }
    if (UNIT_SYMBOL_var.contains(res)) {
        return UNIT_SYMBOL_var.get(res).?;
    }
    return res;
}

fn pow10(exp: i64) f64 {
    if (exp == 0) {
        return 1.0;
    }
    var e: i64 = exp;
    var res: f64 = 1.0;
    if (e < 0) {
        e = 0 - e;
    }
    var i: i64 = 0;
    while (i < e) {
        res = res * 10.0;
        i = i + 1;
    }
    if (exp < 0) {
        return 1.0 / res;
    }
    return res;
}

fn length_conversion(value: f64, from_type: []const u8, to_type: []const u8) f64 {
    const from_sanitized: []const u8 = sanitize(from_type);
    const to_sanitized: []const u8 = sanitize(to_type);
    if (!(METRIC_CONVERSION_var.contains(from_sanitized))) {
        @panic(_concat_string(_concat_string(_concat_string("Invalid 'from_type' value: '", from_type), "'.\nConversion abbreviations are: "), ABBREVIATIONS_var));
    }
    if (!(METRIC_CONVERSION_var.contains(to_sanitized))) {
        @panic(_concat_string(_concat_string(_concat_string("Invalid 'to_type' value: '", to_type), "'.\nConversion abbreviations are: "), ABBREVIATIONS_var));
    }
    const from_exp: i64 = METRIC_CONVERSION_var.get(from_sanitized).?;
    const to_exp: i64 = METRIC_CONVERSION_var.get(to_sanitized).?;
    var exponent: i64 = 0;
    if (from_exp > to_exp) {
        exponent = from_exp - to_exp;
    } else {
        exponent = 0 - (to_exp - from_exp);
    }
    return value * pow10(exponent);
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        UNIT_SYMBOL_var = blk: { var m = std.StringHashMap([]const u8).init(std.heap.page_allocator); m.put("meter", "m") catch unreachable; m.put("kilometer", "km") catch unreachable; m.put("megametre", "Mm") catch unreachable; m.put("gigametre", "Gm") catch unreachable; m.put("terametre", "Tm") catch unreachable; m.put("petametre", "Pm") catch unreachable; m.put("exametre", "Em") catch unreachable; m.put("zettametre", "Zm") catch unreachable; m.put("yottametre", "Ym") catch unreachable; break :blk m; };
        METRIC_CONVERSION_var = blk: { var m = std.StringHashMap(i64).init(std.heap.page_allocator); m.put("m", 0) catch unreachable; m.put("km", 3) catch unreachable; m.put("Mm", 6) catch unreachable; m.put("Gm", 9) catch unreachable; m.put("Tm", 12) catch unreachable; m.put("Pm", 15) catch unreachable; m.put("Em", 18) catch unreachable; m.put("Zm", 21) catch unreachable; m.put("Ym", 24) catch unreachable; break :blk m; };
        std.debug.print("{s}\n", .{_str(length_conversion(1.0, "meter", "kilometer"))});
        std.debug.print("{s}\n", .{_str(length_conversion(1.0, "meter", "megametre"))});
        std.debug.print("{s}\n", .{_str(length_conversion(1.0, "gigametre", "meter"))});
        std.debug.print("{s}\n", .{_str(length_conversion(1.0, "terametre", "zettametre"))});
        std.debug.print("{s}\n", .{_str(length_conversion(1.0, "yottametre", "zettametre"))});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    if (info == .Pointer and info.Pointer.size == .Slice) {
        var out = std.ArrayList(u8).init(std.heap.page_allocator);
        defer out.deinit();
        out.append('[') catch unreachable;
        for (v, 0..) |e, i| {
            if (i != 0) { out.append(' ') catch unreachable; }
            const s = _str(e);
            out.appendSlice(s) catch unreachable;
        }
        out.append(']') catch unreachable;
        return out.toOwnedSlice() catch unreachable;
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _upper(s: []const u8) []const u8 {
    var out = std.heap.page_allocator.alloc(u8, s.len + 1) catch unreachable;
    _ = std.ascii.upperString(out[0..s.len], s);
    out[s.len] = 0;
    return out[0..s.len];
}

fn _lower(s: []const u8) []const u8 {
    var out = std.heap.page_allocator.alloc(u8, s.len + 1) catch unreachable;
    _ = std.ascii.lowerString(out[0..s.len], s);
    out[s.len] = 0;
    return out[0..s.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * std.mem.page_size;
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
