// Generated by Mochi Zig transpiler on 2025-08-24 15:35 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

var KILOGRAM_CHART_var: std.StringHashMap(f64) = std.StringHashMap(f64).init(std.heap.page_allocator);
var WEIGHT_TYPE_CHART_var: std.StringHashMap(f64) = std.StringHashMap(f64).init(std.heap.page_allocator);

fn pow10(exp: i64) f64 {
    var result: f64 = 1.0;
    result = result;
    if (exp >= 0) {
        var i: i64 = 0;
        i = i;
        while (i < exp) {
            result = result * 10.0;
            i = i +% 1;
        }
    } else {
        var i_1: i64 = 0;
        i_1 = i_1;
        while (i_1 < 0 -% exp) {
            result = result / 10.0;
            i_1 = i_1 +% 1;
        }
    }
    return result;
}

fn weight_conversion(from_type: []const u8, to_type: []const u8, value: f64) f64 {
    const has_to: bool = KILOGRAM_CHART_var.contains(to_type);
    const has_from: bool = WEIGHT_TYPE_CHART_var.contains(from_type);
    if (has_to and has_from) {
        return value * (blk0: { if (KILOGRAM_CHART_var.get(to_type)) |v| { break :blk0 v; } break :blk0 0; }) * (blk1: { if (WEIGHT_TYPE_CHART_var.get(from_type)) |v| { break :blk1 v; } break :blk1 0; });
    }
    std.debug.print("{s}\n", .{"Invalid 'from_type' or 'to_type'"});
    return 0.0;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        KILOGRAM_CHART_var = blk2: { var m = std.StringHashMap(f64).init(std.heap.page_allocator); m.put("kilogram", 1.0) catch unreachable; m.put("gram", 1000.0) catch unreachable; m.put("milligram", 1000000.0) catch unreachable; m.put("metric-ton", 0.00100000000000000002) catch unreachable; m.put("long-ton", 0.000984207300000000066) catch unreachable; m.put("short-ton", 0.00110231220000000011) catch unreachable; m.put("pound", 2.20462442020000005) catch unreachable; m.put("stone", 0.157473172800000005) catch unreachable; m.put("ounce", 35.2739907229999972) catch unreachable; m.put("carrat", 5000.0) catch unreachable; m.put("atomic-mass-unit", 6.02213665200000037 * pow10(26)) catch unreachable; break :blk2 m; };
        WEIGHT_TYPE_CHART_var = blk3: { var m_1 = std.StringHashMap(f64).init(std.heap.page_allocator); m_1.put("kilogram", 1.0) catch unreachable; m_1.put("gram", 0.00100000000000000002) catch unreachable; m_1.put("milligram", 9.99999999999999955e-07) catch unreachable; m_1.put("metric-ton", 1000.0) catch unreachable; m_1.put("long-ton", 1016.04607999999996) catch unreachable; m_1.put("short-ton", 907.183999999999969) catch unreachable; m_1.put("pound", 0.453591999999999995) catch unreachable; m_1.put("stone", 6.35029000000000021) catch unreachable; m_1.put("ounce", 0.0283494999999999997) catch unreachable; m_1.put("carrat", 0.00020000000000000001) catch unreachable; m_1.put("atomic-mass-unit", 1.66054019899999994 * pow10(0 -% 27)) catch unreachable; break :blk3 m_1; };
        std.debug.print("{d}\n", .{weight_conversion("kilogram", "gram", 1.0)});
        std.debug.print("{d}\n", .{weight_conversion("gram", "pound", 3.0)});
        std.debug.print("{d}\n", .{weight_conversion("ounce", "kilogram", 3.0)});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
