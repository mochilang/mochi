// Generated by Mochi Zig transpiler on 2025-08-07 00:08 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

var ones_var: [][]const u8 = &[_][]const u8{};
var teens_var: [][]const u8 = &[_][]const u8{};
var tens_var: [][]const u8 = &[_][]const u8{};
var short_powers_var: []i64 = &[_]i64{};
var short_units_var: [][]const u8 = &[_][]const u8{};
var long_powers_var: []i64 = &[_]i64{};
var long_units_var: [][]const u8 = &[_][]const u8{};
var indian_powers_var: []i64 = &[_]i64{};
var indian_units_var: [][]const u8 = &[_][]const u8{};

fn pow10(exp: i64) i64 {
    var res: i64 = 1;
    var i: i64 = 0;
    while (i < exp) {
        res = res * 10;
        i = i + 1;
    }
    return res;
}

fn max_value(system: []const u8) i64 {
    if (std.mem.eql(u8, system, "short")) {
        return pow10(18) - 1;
    }
    if (std.mem.eql(u8, system, "long")) {
        return pow10(21) - 1;
    }
    if (std.mem.eql(u8, system, "indian")) {
        return pow10(19) - 1;
    }
    return 0;
}

fn join_words(words: [][]const u8) []const u8 {
    var res: []const u8 = "";
    var i: i64 = 0;
    while (i < @as(i64, @intCast(words.len))) {
        if (i > 0) {
            res = _concat_string(res, " ");
        }
        res = _concat_string(res, words[@as(usize, @intCast(i))]);
        i = i + 1;
    }
    return res;
}

fn convert_small_number(num: i64) []const u8 {
    if (num < 0) {
        return "";
    }
    if (num >= 100) {
        return "";
    }
    const tens_digit: i64 = @divTrunc(num, 10);
    const ones_digit: i64 = @mod(num, 10);
    if (tens_digit == 0) {
        return ones_var[@as(usize, @intCast(ones_digit))];
    }
    if (tens_digit == 1) {
        return teens_var[@as(usize, @intCast(ones_digit))];
    }
    const hyphen: []const u8 = if (ones_digit > 0) "-" else "";
    const tail: []const u8 = if (ones_digit > 0) ones_var[@as(usize, @intCast(ones_digit))] else "";
    return _concat_string(_concat_string(tens_var[@as(usize, @intCast(tens_digit))], hyphen), tail);
}

fn convert_number(num: i64, system: []const u8) []const u8 {
    var word_groups: [][]const u8 = &[_][]const u8{};
    var n: i64 = num;
    if (n < 0) {
        word_groups = blk: { var _tmp = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []const u8, word_groups)) catch |err| handleError(err); _tmp.append("negative") catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        n = 0 - n;
    }
    if (n > max_value(system)) {
        return "";
    }
    var powers: []i64 = &[_]i64{};
    var units: [][]const u8 = &[_][]const u8{};
    if (std.mem.eql(u8, system, "short")) {
        powers = short_powers_var;
        units = short_units_var;
    } else {
        if (std.mem.eql(u8, system, "long")) {
            powers = long_powers_var;
            units = long_units_var;
        } else {
            if (std.mem.eql(u8, system, "indian")) {
                powers = indian_powers_var;
                units = indian_units_var;
            } else {
                return "";
            }
        }
    }
    var i: i64 = 0;
    while (i < @as(i64, @intCast(powers.len))) {
        const power: i64 = powers[@as(usize, @intCast(i))];
        const unit: []const u8 = units[@as(usize, @intCast(i))];
        const divisor: i64 = pow10(power);
        const digit_group: i64 = @divTrunc(n, divisor);
        n = @mod(n, divisor);
        if (digit_group > 0) {
            const word_group: []const u8 = if (digit_group >= 100) convert_number(digit_group, system) else convert_small_number(digit_group);
            word_groups = blk: { var _tmp = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []const u8, word_groups)) catch |err| handleError(err); _tmp.append(_concat_string(_concat_string(word_group, " "), unit)) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        }
        i = i + 1;
    }
    if (n > 0 or @as(i64, @intCast(word_groups.len)) == 0) {
        word_groups = blk: { var _tmp = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const []const u8, word_groups)) catch |err| handleError(err); _tmp.append(convert_small_number(n)) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
    }
    const joined: []const u8 = join_words(word_groups);
    return joined;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        ones_var = blk0: { var _tmp0 = std.heap.page_allocator.alloc([]const u8, 10) catch unreachable; _tmp0[0] = "zero"; _tmp0[1] = "one"; _tmp0[2] = "two"; _tmp0[3] = "three"; _tmp0[4] = "four"; _tmp0[5] = "five"; _tmp0[6] = "six"; _tmp0[7] = "seven"; _tmp0[8] = "eight"; _tmp0[9] = "nine"; break :blk0 _tmp0; };
        teens_var = blk1: { var _tmp1 = std.heap.page_allocator.alloc([]const u8, 10) catch unreachable; _tmp1[0] = "ten"; _tmp1[1] = "eleven"; _tmp1[2] = "twelve"; _tmp1[3] = "thirteen"; _tmp1[4] = "fourteen"; _tmp1[5] = "fifteen"; _tmp1[6] = "sixteen"; _tmp1[7] = "seventeen"; _tmp1[8] = "eighteen"; _tmp1[9] = "nineteen"; break :blk1 _tmp1; };
        tens_var = blk2: { var _tmp2 = std.heap.page_allocator.alloc([]const u8, 10) catch unreachable; _tmp2[0] = ""; _tmp2[1] = ""; _tmp2[2] = "twenty"; _tmp2[3] = "thirty"; _tmp2[4] = "forty"; _tmp2[5] = "fifty"; _tmp2[6] = "sixty"; _tmp2[7] = "seventy"; _tmp2[8] = "eighty"; _tmp2[9] = "ninety"; break :blk2 _tmp2; };
        short_powers_var = blk3: { var _tmp3 = std.heap.page_allocator.alloc(i64, 6) catch unreachable; _tmp3[0] = 15; _tmp3[1] = 12; _tmp3[2] = 9; _tmp3[3] = 6; _tmp3[4] = 3; _tmp3[5] = 2; break :blk3 _tmp3; };
        short_units_var = blk4: { var _tmp4 = std.heap.page_allocator.alloc([]const u8, 6) catch unreachable; _tmp4[0] = "quadrillion"; _tmp4[1] = "trillion"; _tmp4[2] = "billion"; _tmp4[3] = "million"; _tmp4[4] = "thousand"; _tmp4[5] = "hundred"; break :blk4 _tmp4; };
        long_powers_var = blk5: { var _tmp5 = std.heap.page_allocator.alloc(i64, 5) catch unreachable; _tmp5[0] = 15; _tmp5[1] = 9; _tmp5[2] = 6; _tmp5[3] = 3; _tmp5[4] = 2; break :blk5 _tmp5; };
        long_units_var = blk6: { var _tmp6 = std.heap.page_allocator.alloc([]const u8, 5) catch unreachable; _tmp6[0] = "billiard"; _tmp6[1] = "milliard"; _tmp6[2] = "million"; _tmp6[3] = "thousand"; _tmp6[4] = "hundred"; break :blk6 _tmp6; };
        indian_powers_var = blk7: { var _tmp7 = std.heap.page_allocator.alloc(i64, 6) catch unreachable; _tmp7[0] = 14; _tmp7[1] = 12; _tmp7[2] = 7; _tmp7[3] = 5; _tmp7[4] = 3; _tmp7[5] = 2; break :blk7 _tmp7; };
        indian_units_var = blk8: { var _tmp8 = std.heap.page_allocator.alloc([]const u8, 6) catch unreachable; _tmp8[0] = "crore crore"; _tmp8[1] = "lakh crore"; _tmp8[2] = "crore"; _tmp8[3] = "lakh"; _tmp8[4] = "thousand"; _tmp8[5] = "hundred"; break :blk8 _tmp8; };
        std.debug.print("{s}\n", .{convert_number(123456789012345, "short")});
        std.debug.print("{s}\n", .{convert_number(123456789012345, "long")});
        std.debug.print("{s}\n", .{convert_number(123456789012345, "indian")});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * std.mem.page_size;
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
