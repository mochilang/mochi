// Generated by Mochi Zig transpiler on 2025-08-07 00:08 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn floor(x: f64) f64 {
    var i: i64 = @as(i64, @intFromFloat(x));
    if (@as(f64, @floatFromInt(i)) > x) {
        i = i - 1;
    }
    return @as(f64, @floatFromInt(i));
}

fn pow10(n: i64) f64 {
    var p: f64 = 1.0;
    var i: i64 = 0;
    while (i < n) {
        p = p * 10.0;
        i = i + 1;
    }
    return p;
}

fn round_to(x: f64, ndigits: i64) f64 {
    const m: f64 = pow10(ndigits);
    return floor(x * m + 0.5) / m;
}

fn celsius_to_fahrenheit(c: f64, ndigits: i64) f64 {
    return round_to(c * 9.0 / 5.0 + 32.0, ndigits);
}

fn celsius_to_kelvin(c: f64, ndigits: i64) f64 {
    return round_to(c + 273.15, ndigits);
}

fn celsius_to_rankine(c: f64, ndigits: i64) f64 {
    return round_to(c * 9.0 / 5.0 + 491.67, ndigits);
}

fn fahrenheit_to_celsius(f: f64, ndigits: i64) f64 {
    return round_to((f - 32.0) * 5.0 / 9.0, ndigits);
}

fn fahrenheit_to_kelvin(f: f64, ndigits: i64) f64 {
    return round_to((f - 32.0) * 5.0 / 9.0 + 273.15, ndigits);
}

fn fahrenheit_to_rankine(f: f64, ndigits: i64) f64 {
    return round_to(f + 459.67, ndigits);
}

fn kelvin_to_celsius(k: f64, ndigits: i64) f64 {
    return round_to(k - 273.15, ndigits);
}

fn kelvin_to_fahrenheit(k: f64, ndigits: i64) f64 {
    return round_to((k - 273.15) * 9.0 / 5.0 + 32.0, ndigits);
}

fn kelvin_to_rankine(k: f64, ndigits: i64) f64 {
    return round_to(k * 9.0 / 5.0, ndigits);
}

fn rankine_to_celsius(r: f64, ndigits: i64) f64 {
    return round_to((r - 491.67) * 5.0 / 9.0, ndigits);
}

fn rankine_to_fahrenheit(r: f64, ndigits: i64) f64 {
    return round_to(r - 459.67, ndigits);
}

fn rankine_to_kelvin(r: f64, ndigits: i64) f64 {
    return round_to(r * 5.0 / 9.0, ndigits);
}

fn reaumur_to_kelvin(r: f64, ndigits: i64) f64 {
    return round_to(r * 1.25 + 273.15, ndigits);
}

fn reaumur_to_fahrenheit(r: f64, ndigits: i64) f64 {
    return round_to(r * 2.25 + 32.0, ndigits);
}

fn reaumur_to_celsius(r: f64, ndigits: i64) f64 {
    return round_to(r * 1.25, ndigits);
}

fn reaumur_to_rankine(r: f64, ndigits: i64) f64 {
    return round_to(r * 2.25 + 32.0 + 459.67, ndigits);
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        std.debug.print("{d}\n", .{celsius_to_fahrenheit(0.0, 2)});
        std.debug.print("{d}\n", .{celsius_to_kelvin(0.0, 2)});
        std.debug.print("{d}\n", .{celsius_to_rankine(0.0, 2)});
        std.debug.print("{d}\n", .{fahrenheit_to_celsius(32.0, 2)});
        std.debug.print("{d}\n", .{fahrenheit_to_kelvin(32.0, 2)});
        std.debug.print("{d}\n", .{fahrenheit_to_rankine(32.0, 2)});
        std.debug.print("{d}\n", .{kelvin_to_celsius(273.15, 2)});
        std.debug.print("{d}\n", .{kelvin_to_fahrenheit(273.15, 2)});
        std.debug.print("{d}\n", .{kelvin_to_rankine(273.15, 2)});
        std.debug.print("{d}\n", .{rankine_to_celsius(491.67, 2)});
        std.debug.print("{d}\n", .{rankine_to_fahrenheit(491.67, 2)});
        std.debug.print("{d}\n", .{rankine_to_kelvin(491.67, 2)});
        std.debug.print("{d}\n", .{reaumur_to_kelvin(80.0, 2)});
        std.debug.print("{d}\n", .{reaumur_to_fahrenheit(80.0, 2)});
        std.debug.print("{d}\n", .{reaumur_to_celsius(80.0, 2)});
        std.debug.print("{d}\n", .{reaumur_to_rankine(80.0, 2)});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * std.mem.page_size;
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
