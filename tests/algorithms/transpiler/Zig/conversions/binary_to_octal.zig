// Generated by Mochi Zig transpiler on 2025-08-07 14:57 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn bin_to_octal(bin_string: []const u8) []const u8 {
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(bin_string.len))) {
        var c: []const u8 = bin_string[@as(usize, @intCast(i))..@as(usize, @intCast(i)) + 1];
        c = c;
        if (!(std.mem.eql(u8, c, "0") or std.mem.eql(u8, c, "1"))) {
            @panic("Non-binary value was passed to the function");
        }
        i = i + 1;
    }
    if (@as(i64, @intCast(bin_string.len)) == 0) {
        @panic("Empty string was passed to the function");
    }
    var padded: []const u8 = blk: { const tmp = std.heap.page_allocator.alloc(u8, bin_string.len) catch unreachable; @memcpy(tmp, bin_string); break :blk tmp; };
    padded = padded;
    while (@mod(@as(i64, @intCast(padded.len)), 3) != 0) {
        padded = _concat_string("0", padded);
    }
    var oct_string: []const u8 = "";
    oct_string = oct_string;
    var index: i64 = 0;
    index = index;
    while (index < @as(i64, @intCast(padded.len))) {
        var group: []const u8 = padded[@as(usize, @intCast(index))..@min(@as(usize, @intCast(index + 3)), @as(usize, @intCast(padded.len)))];
        group = group;
        var b0: i64 = if (std.mem.eql(u8, group[@as(usize, @intCast(0))..@as(usize, @intCast(0)) + 1], "1")) 1 else 0;
        b0 = b0;
        var b1: i64 = if (std.mem.eql(u8, group[@as(usize, @intCast(1))..@as(usize, @intCast(1)) + 1], "1")) 1 else 0;
        b1 = b1;
        var b2: i64 = if (std.mem.eql(u8, group[@as(usize, @intCast(2))..@as(usize, @intCast(2)) + 1], "1")) 1 else 0;
        b2 = b2;
        var oct_val: i64 = b0 * 4 + b1 * 2 + b2;
        oct_val = oct_val;
        oct_string = _concat_string(oct_string, _str(oct_val));
        index = index + 3;
    }
    return oct_string;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        std.debug.print("{s}\n", .{bin_to_octal("1111")});
        std.debug.print("{s}\n", .{bin_to_octal("101010101010011")});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * std.mem.page_size;
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
