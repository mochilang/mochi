// Generated by Mochi Zig transpiler on 2025-08-07 14:57 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn round_int(x: f64) i64 {
    return @as(i64, @intFromFloat(x + 0.5));
}

fn rgb_to_cmyk(r_input: i64, g_input: i64, b_input: i64) []i64 {
    if (r_input < 0 or r_input >= 256 or g_input < 0 or g_input >= 256 or b_input < 0 or b_input >= 256) {
        @panic("Expected int of the range 0..255");
    }
    var r: f64 = @as(f64, @floatFromInt(r_input)) / 255.0;
    r = r;
    var g: f64 = @as(f64, @floatFromInt(g_input)) / 255.0;
    g = g;
    var b: f64 = @as(f64, @floatFromInt(b_input)) / 255.0;
    b = b;
    var max_val: f64 = r;
    max_val = max_val;
    if (g > max_val) {
        max_val = g;
    }
    if (b > max_val) {
        max_val = b;
    }
    var k_float: f64 = 1.0 - max_val;
    k_float = k_float;
    if (k_float == 1.0) {
        return blk0: { var _tmp0 = std.heap.page_allocator.alloc(i64, 4) catch unreachable; _tmp0[0] = 0; _tmp0[1] = 0; _tmp0[2] = 0; _tmp0[3] = 100; break :blk0 _tmp0; };
    }
    var c_float: f64 = 100.0 * (1.0 - r - k_float) / (1.0 - k_float);
    c_float = c_float;
    var m_float: f64 = 100.0 * (1.0 - g - k_float) / (1.0 - k_float);
    m_float = m_float;
    var y_float: f64 = 100.0 * (1.0 - b - k_float) / (1.0 - k_float);
    y_float = y_float;
    var k_percent: f64 = 100.0 * k_float;
    k_percent = k_percent;
    var c: i64 = round_int(c_float);
    c = c;
    var m: i64 = round_int(m_float);
    m = m;
    var y: i64 = round_int(y_float);
    y = y;
    var k: i64 = round_int(k_percent);
    k = k;
    return blk1: { var _tmp1 = std.heap.page_allocator.alloc(i64, 4) catch unreachable; _tmp1[0] = c; _tmp1[1] = m; _tmp1[2] = y; _tmp1[3] = k; break :blk1 _tmp1; };
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        std.debug.print("{s}\n", .{_str(rgb_to_cmyk(255, 255, 255))});
        std.debug.print("{s}\n", .{_str(rgb_to_cmyk(128, 128, 128))});
        std.debug.print("{s}\n", .{_str(rgb_to_cmyk(0, 0, 0))});
        std.debug.print("{s}\n", .{_str(rgb_to_cmyk(255, 0, 0))});
        std.debug.print("{s}\n", .{_str(rgb_to_cmyk(0, 255, 0))});
        std.debug.print("{s}\n", .{_str(rgb_to_cmyk(0, 0, 255))});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * std.mem.page_size;
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
