// Generated by Mochi Zig transpiler on 2025-08-07 00:08 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const Si_positive = struct {
    name: []const u8,
    exp: i64,
};

const Si_negative = struct {
    name: []const u8,
    exp: i64,
};

const Binary_prefixe = struct {
    name: []const u8,
    exp: i64,
};

const Prefix = struct {
    name: []const u8,
    exp: i64,
};

var si_positive_var: [10]Si_positive = undefined;
var si_negative_var: [10]Si_negative = undefined;
var binary_prefixes_var: [8]Binary_prefixe = undefined;

fn pow(base: f64, exp: i64) f64 {
    var result: f64 = 1.0;
    var e: i64 = exp;
    if (e < 0) {
        e = 0 - e;
        var i: i64 = 0;
        while (i < e) {
            result = result * base;
            i = i + 1;
        }
        return 1.0 / result;
    }
    var i: i64 = 0;
    while (i < e) {
        result = result * base;
        i = i + 1;
    }
    return result;
}

fn add_si_prefix(value: f64) []const u8 {
    var prefixes: []Prefix = &[_]Prefix{};
    if (value > 0.0) {
        prefixes = si_positive_var;
    } else {
        prefixes = si_negative_var;
    }
    var i: i64 = 0;
    while (i < @as(i64, @intCast(prefixes.len))) {
        const p: Prefix = prefixes[@as(usize, @intCast(i))];
        const num: f64 = value / pow(10.0, p.exp);
        if (num > 1.0) {
            return _concat_string(_concat_string(_str(num), " "), p.name);
        }
        i = i + 1;
    }
    return _str(value);
}

fn add_binary_prefix(value: f64) []const u8 {
    var i: i64 = 0;
    while (i < @as(i64, @intCast(binary_prefixes_var.len))) {
        const p: Binary_prefixe = binary_prefixes_var[@as(usize, @intCast(i))];
        const num: f64 = value / pow(2.0, p.exp);
        if (num > 1.0) {
            return _concat_string(_concat_string(_str(num), " "), p.name);
        }
        i = i + 1;
    }
    return _str(value);
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        si_positive_var = blk0: { var _tmp0 = std.heap.page_allocator.alloc(Si_positive, 10) catch unreachable; _tmp0[0] = .{ .name = "yotta", .exp = 24 }; _tmp0[1] = .{ .name = "zetta", .exp = 21 }; _tmp0[2] = .{ .name = "exa", .exp = 18 }; _tmp0[3] = .{ .name = "peta", .exp = 15 }; _tmp0[4] = .{ .name = "tera", .exp = 12 }; _tmp0[5] = .{ .name = "giga", .exp = 9 }; _tmp0[6] = .{ .name = "mega", .exp = 6 }; _tmp0[7] = .{ .name = "kilo", .exp = 3 }; _tmp0[8] = .{ .name = "hecto", .exp = 2 }; _tmp0[9] = .{ .name = "deca", .exp = 1 }; break :blk0 _tmp0; };
        si_negative_var = blk1: { var _tmp1 = std.heap.page_allocator.alloc(Si_negative, 10) catch unreachable; _tmp1[0] = .{ .name = "deci", .exp = 0 - 1 }; _tmp1[1] = .{ .name = "centi", .exp = 0 - 2 }; _tmp1[2] = .{ .name = "milli", .exp = 0 - 3 }; _tmp1[3] = .{ .name = "micro", .exp = 0 - 6 }; _tmp1[4] = .{ .name = "nano", .exp = 0 - 9 }; _tmp1[5] = .{ .name = "pico", .exp = 0 - 12 }; _tmp1[6] = .{ .name = "femto", .exp = 0 - 15 }; _tmp1[7] = .{ .name = "atto", .exp = 0 - 18 }; _tmp1[8] = .{ .name = "zepto", .exp = 0 - 21 }; _tmp1[9] = .{ .name = "yocto", .exp = 0 - 24 }; break :blk1 _tmp1; };
        binary_prefixes_var = blk2: { var _tmp2 = std.heap.page_allocator.alloc(Binary_prefixe, 8) catch unreachable; _tmp2[0] = .{ .name = "yotta", .exp = 80 }; _tmp2[1] = .{ .name = "zetta", .exp = 70 }; _tmp2[2] = .{ .name = "exa", .exp = 60 }; _tmp2[3] = .{ .name = "peta", .exp = 50 }; _tmp2[4] = .{ .name = "tera", .exp = 40 }; _tmp2[5] = .{ .name = "giga", .exp = 30 }; _tmp2[6] = .{ .name = "mega", .exp = 20 }; _tmp2[7] = .{ .name = "kilo", .exp = 10 }; break :blk2 _tmp2; };
        std.debug.print("{s}\n", .{add_si_prefix(10000.0)});
        std.debug.print("{s}\n", .{add_si_prefix(0.005)});
        std.debug.print("{s}\n", .{add_binary_prefix(65536.0)});
        std.debug.print("{s}\n", .{add_binary_prefix(512.0)});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    if (info == .Pointer and info.Pointer.size == .Slice) {
        var out = std.ArrayList(u8).init(std.heap.page_allocator);
        defer out.deinit();
        out.append('[') catch unreachable;
        for (v, 0..) |e, i| {
            if (i != 0) { out.append(' ') catch unreachable; }
            const s = _str(e);
            out.appendSlice(s) catch unreachable;
        }
        out.append(']') catch unreachable;
        return out.toOwnedSlice() catch unreachable;
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * std.mem.page_size;
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
