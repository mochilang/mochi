// Generated by Mochi Zig transpiler on 2025-08-07 14:57 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const FromTo = struct {
    from_factor: f64,
    to_factor: f64,
};

var PRESSURE_CONVERSION_var: std.StringHashMap(FromTo) = std.StringHashMap(FromTo).init(std.heap.page_allocator);

fn pressure_conversion(value: f64, from_type: []const u8, to_type: []const u8) f64 {
    if (!(PRESSURE_CONVERSION_var.contains(from_type))) {
        var keys: i64 = join([]i64{}, ", ");
        keys = keys;
        @panic(_concat_string(_concat_string(_concat_string("Invalid 'from_type' value: '", from_type), "'  Supported values are:\n"), keys));
    }
    if (!(PRESSURE_CONVERSION_var.contains(to_type))) {
        var keys: i64 = join([]i64{}, ", ");
        keys = keys;
        @panic(_concat_string(_concat_string(_concat_string("Invalid 'to_type' value: '", to_type), ".  Supported values are:\n"), keys));
    }
    var from: FromTo = PRESSURE_CONVERSION_var.get(from_type).?;
    from = from;
    var to: FromTo = PRESSURE_CONVERSION_var.get(to_type).?;
    to = to;
    return value * @as(f64, @floatFromInt(from.from_factor)) * @as(f64, @floatFromInt(to.to_factor));
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        PRESSURE_CONVERSION_var = blk: { var m = std.StringHashMap(FromTo).init(std.heap.page_allocator); m.put("atm", .{ .from_factor = 1.0, .to_factor = 1.0 }) catch unreachable; m.put("pascal", .{ .from_factor = 0.0000098, .to_factor = 101325.0 }) catch unreachable; m.put("bar", .{ .from_factor = 0.986923, .to_factor = 1.01325 }) catch unreachable; m.put("kilopascal", .{ .from_factor = 0.00986923, .to_factor = 101.325 }) catch unreachable; m.put("megapascal", .{ .from_factor = 9.86923, .to_factor = 0.101325 }) catch unreachable; m.put("psi", .{ .from_factor = 0.068046, .to_factor = 14.6959 }) catch unreachable; m.put("inHg", .{ .from_factor = 0.0334211, .to_factor = 29.9213 }) catch unreachable; m.put("torr", .{ .from_factor = 0.00131579, .to_factor = 760.0 }) catch unreachable; break :blk m; };
        std.debug.print("{d}\n", .{pressure_conversion(4.0, "atm", "pascal")});
        std.debug.print("{d}\n", .{pressure_conversion(1.0, "pascal", "psi")});
        std.debug.print("{d}\n", .{pressure_conversion(1.0, "bar", "atm")});
        std.debug.print("{d}\n", .{pressure_conversion(3.0, "kilopascal", "bar")});
        std.debug.print("{d}\n", .{pressure_conversion(2.0, "megapascal", "psi")});
        std.debug.print("{d}\n", .{pressure_conversion(4.0, "psi", "torr")});
        std.debug.print("{d}\n", .{pressure_conversion(1.0, "inHg", "atm")});
        std.debug.print("{d}\n", .{pressure_conversion(1.0, "torr", "psi")});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * std.mem.page_size;
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
