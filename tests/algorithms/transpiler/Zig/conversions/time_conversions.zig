// Generated by Mochi Zig transpiler on 2025-08-07 14:57 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

var time_chart_var: std.StringHashMap(f64) = std.StringHashMap(f64).init(std.heap.page_allocator);
var time_chart_inverse_var: std.StringHashMap(f64) = std.StringHashMap(f64).init(std.heap.page_allocator);
var units_var: [][]const u8 = &[_][]const u8{};
const units_str_var: []const u8 = "seconds, minutes, hours, days, weeks, months, years";

fn contains(arr: [][]const u8, t: []const u8) bool {
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(arr.len))) {
        if (std.mem.eql(u8, arr[@as(usize, @intCast(i))], t)) {
            return true;
        }
        i = i + 1;
    }
    return false;
}

fn convert_time(time_value: f64, unit_from: []const u8, unit_to: []const u8) f64 {
    if (time_value < 0.0) {
        @panic("'time_value' must be a non-negative number.");
    }
    var from: []const u8 = _lower(unit_from);
    from = from;
    var to: []const u8 = _lower(unit_to);
    to = to;
    if (!(contains(units_var, from)) or !(contains(units_var, to))) {
        var invalid_unit: []const u8 = from;
        invalid_unit = invalid_unit;
        if (contains(units_var, from)) {
            invalid_unit = to;
        }
        @panic(_concat_string(_concat_string(_concat_string(_concat_string("Invalid unit ", invalid_unit), " is not in "), units_str_var), "."));
    }
    var seconds: f64 = time_value * time_chart_var.get(from).?;
    seconds = seconds;
    var converted: f64 = seconds * time_chart_inverse_var.get(to).?;
    converted = converted;
    var scaled: f64 = converted * 1000.0;
    scaled = scaled;
    var int_part: i64 = @as(i64, @intFromFloat(scaled + 0.5));
    int_part = int_part;
    return (@as(f64, @floatFromInt(int_part) + 0.0) / 1000.0;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        time_chart_var = blk: { var m = std.StringHashMap(f64).init(std.heap.page_allocator); m.put("seconds", 1.0) catch unreachable; m.put("minutes", 60.0) catch unreachable; m.put("hours", 3600.0) catch unreachable; m.put("days", 86400.0) catch unreachable; m.put("weeks", 604800.0) catch unreachable; m.put("months", 2629800.0) catch unreachable; m.put("years", 31557600.0) catch unreachable; break :blk m; };
        time_chart_inverse_var = blk: { var m = std.StringHashMap(f64).init(std.heap.page_allocator); m.put("seconds", 1.0) catch unreachable; m.put("minutes", 1.0 / 60.0) catch unreachable; m.put("hours", 1.0 / 3600.0) catch unreachable; m.put("days", 1.0 / 86400.0) catch unreachable; m.put("weeks", 1.0 / 604800.0) catch unreachable; m.put("months", 1.0 / 2629800.0) catch unreachable; m.put("years", 1.0 / 31557600.0) catch unreachable; break :blk m; };
        units_var = blk0: { var _tmp0 = std.heap.page_allocator.alloc([]const u8, 7) catch unreachable; _tmp0[0] = "seconds"; _tmp0[1] = "minutes"; _tmp0[2] = "hours"; _tmp0[3] = "days"; _tmp0[4] = "weeks"; _tmp0[5] = "months"; _tmp0[6] = "years"; break :blk0 _tmp0; };
        std.debug.print("{d}\n", .{convert_time(3600.0, "seconds", "hours")});
        std.debug.print("{d}\n", .{convert_time(360.0, "days", "months")});
        std.debug.print("{d}\n", .{convert_time(360.0, "months", "years")});
        std.debug.print("{d}\n", .{convert_time(1.0, "years", "seconds")});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _upper(s: []const u8) []const u8 {
    var out = std.heap.page_allocator.alloc(u8, s.len + 1) catch unreachable;
    _ = std.ascii.upperString(out[0..s.len], s);
    out[s.len] = 0;
    return out[0..s.len];
}

fn _lower(s: []const u8) []const u8 {
    var out = std.heap.page_allocator.alloc(u8, s.len + 1) catch unreachable;
    _ = std.ascii.lowerString(out[0..s.len], s);
    out[s.len] = 0;
    return out[0..s.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * std.mem.page_size;
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
