// Generated by Mochi Zig transpiler on 2025-08-07 14:57 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const PI_var: f64 = 3.141592653589793;

fn sqrtApprox(x: f64) f64 {
    var guess: f64 = x / 2.0;
    guess = guess;
    var i: i64 = 0;
    i = i;
    while (i < 20) {
        guess = (guess + x / guess) / 2.0;
        i = i + 1;
    }
    return guess;
}

fn atanApprox(x: f64) f64 {
    if (x > 1.0) {
        return PI_var / 2.0 - x / (x * x + 0.28);
    }
    if (x < @as(f64, @floatFromInt(0)) - 1.0) {
        return (@as(f64, @floatFromInt(0)) - PI_var) / 2.0 - x / (x * x + 0.28);
    }
    return x / (1.0 + 0.28 * x * x);
}

fn atan2Approx(y: f64, x: f64) f64 {
    if (x > 0.0) {
        var r: f64 = atanApprox(y / x);
        r = r;
        return r;
    }
    if (x < 0.0) {
        if (y >= 0.0) {
            return atanApprox(y / x) + PI_var;
        }
        return atanApprox(y / x) - PI_var;
    }
    if (y > 0.0) {
        return PI_var / 2.0;
    }
    if (y < 0.0) {
        return (@as(f64, @floatFromInt(0)) - PI_var) / 2.0;
    }
    return 0.0;
}

fn deg(rad: f64) f64 {
    return rad * 180.0 / PI_var;
}

fn floor(x: f64) f64 {
    var i: i64 = @as(i64, @intFromFloat(x));
    i = i;
    if (@as(f64, @floatFromInt(i)) > x) {
        i = i - 1;
    }
    return @as(f64, @floatFromInt(i));
}

fn pow10(n: i64) f64 {
    var p: f64 = 1.0;
    p = p;
    var i: i64 = 0;
    i = i;
    while (i < n) {
        p = p * 10.0;
        i = i + 1;
    }
    return p;
}

fn round(x: f64, n: i64) f64 {
    var m: f64 = pow10(n);
    m = m;
    return floor(x * m + 0.5) / m;
}

fn rectangular_to_polar(real: f64, img: f64) []f64 {
    var mod: f64 = round(sqrtApprox(real * real + img * img), 2);
    mod = mod;
    var ang: f64 = round(deg(atan2Approx(img, real)), 2);
    ang = ang;
    return blk0: { var _tmp0 = std.heap.page_allocator.alloc(f64, 2) catch unreachable; _tmp0[0] = mod; _tmp0[1] = ang; break :blk0 _tmp0; };
}

fn show(real: f64, img: f64) void {
    var r: []f64 = rectangular_to_polar(real, img);
    r = r;
    std.debug.print("{s}\n", .{_str(r)});
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        show(5.0, @as(f64, @floatFromInt(0)) - 5.0);
        show(@as(f64, @floatFromInt(0)) - 1.0, 1.0);
        show(@as(f64, @floatFromInt(0)) - 1.0, @as(f64, @floatFromInt(0)) - 1.0);
        show(0.0000000001, 0.0000000001);
        show(@as(f64, @floatFromInt(0)) - 0.0000000001, 0.0000000001);
        show(9.75, 5.93);
        show(10000.0, 99999.0);
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * std.mem.page_size;
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
