// Generated by Mochi Zig transpiler on 2025-08-07 00:08 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

var units_var: [][]const u8 = &[_][]const u8{};
var speed_chart_var: []f64 = &[_]f64{};
var speed_chart_inverse_var: []f64 = &[_]f64{};

fn index_of(arr: [][]const u8, value: []const u8) i64 {
    var i: i64 = 0;
    while (i < @as(i64, @intCast(arr.len))) {
        if (std.mem.eql(u8, arr[@as(usize, @intCast(i))], value)) {
            return i;
        }
        i = i + 1;
    }
    return 0 - 1;
}

fn units_string(arr: [][]const u8) []const u8 {
    var s: []const u8 = "";
    var i: i64 = 0;
    while (i < @as(i64, @intCast(arr.len))) {
        if (i > 0) {
            s = _concat_string(s, ", ");
        }
        s = _concat_string(s, arr[@as(usize, @intCast(i))]);
        i = i + 1;
    }
    return s;
}

fn round3(x: f64) f64 {
    const y: f64 = x * 1000.0 + 0.5;
    const z: i64 = @as(i64, @intFromFloat(y));
    const zf: f64 = @as(f64, @floatFromInt(z));
    return zf / 1000.0;
}

fn convert_speed(speed: f64, unit_from: []const u8, unit_to: []const u8) f64 {
    const from_index: i64 = index_of(units_var, unit_from);
    const to_index: i64 = index_of(units_var, unit_to);
    if (from_index < 0 or to_index < 0) {
        const msg: []const u8 = _concat_string(_concat_string(_concat_string(_concat_string(_concat_string("Incorrect 'from_type' or 'to_type' value: ", unit_from), ", "), unit_to), "\nValid values are: "), units_string(units_var));
        @panic(msg);
    }
    const result: f64 = speed * speed_chart_var[@as(usize, @intCast(from_index))] * speed_chart_inverse_var[@as(usize, @intCast(to_index))];
    const r: f64 = round3(result);
    return r;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        units_var = blk0: { var _tmp0 = std.heap.page_allocator.alloc([]const u8, 4) catch unreachable; _tmp0[0] = "km/h"; _tmp0[1] = "m/s"; _tmp0[2] = "mph"; _tmp0[3] = "knot"; break :blk0 _tmp0; };
        speed_chart_var = blk1: { var _tmp1 = std.heap.page_allocator.alloc(f64, 4) catch unreachable; _tmp1[0] = 1.0; _tmp1[1] = 3.6; _tmp1[2] = 1.609344; _tmp1[3] = 1.852; break :blk1 _tmp1; };
        speed_chart_inverse_var = blk2: { var _tmp2 = std.heap.page_allocator.alloc(f64, 4) catch unreachable; _tmp2[0] = 1.0; _tmp2[1] = 0.277777778; _tmp2[2] = 0.621371192; _tmp2[3] = 0.539956803; break :blk2 _tmp2; };
        std.debug.print("{s}\n", .{_str(convert_speed(100.0, "km/h", "m/s"))});
        std.debug.print("{s}\n", .{_str(convert_speed(100.0, "km/h", "mph"))});
        std.debug.print("{s}\n", .{_str(convert_speed(100.0, "km/h", "knot"))});
        std.debug.print("{s}\n", .{_str(convert_speed(100.0, "m/s", "km/h"))});
        std.debug.print("{s}\n", .{_str(convert_speed(100.0, "m/s", "mph"))});
        std.debug.print("{s}\n", .{_str(convert_speed(100.0, "m/s", "knot"))});
        std.debug.print("{s}\n", .{_str(convert_speed(100.0, "mph", "km/h"))});
        std.debug.print("{s}\n", .{_str(convert_speed(100.0, "mph", "m/s"))});
        std.debug.print("{s}\n", .{_str(convert_speed(100.0, "mph", "knot"))});
        std.debug.print("{s}\n", .{_str(convert_speed(100.0, "knot", "km/h"))});
        std.debug.print("{s}\n", .{_str(convert_speed(100.0, "knot", "m/s"))});
        std.debug.print("{s}\n", .{_str(convert_speed(100.0, "knot", "mph"))});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    if (info == .Pointer and info.Pointer.size == .Slice) {
        var out = std.ArrayList(u8).init(std.heap.page_allocator);
        defer out.deinit();
        out.append('[') catch unreachable;
        for (v, 0..) |e, i| {
            if (i != 0) { out.append(' ') catch unreachable; }
            const s = _str(e);
            out.appendSlice(s) catch unreachable;
        }
        out.append(']') catch unreachable;
        return out.toOwnedSlice() catch unreachable;
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * std.mem.page_size;
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
