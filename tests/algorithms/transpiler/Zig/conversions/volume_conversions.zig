// Generated by Mochi Zig transpiler on 2025-08-07 14:57 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

var units_var: [][]const u8 = &[_][]const u8{};
var from_factors_var: []f64 = &[_]f64{};
var to_factors_var: []f64 = &[_]f64{};

fn supported_values() []const u8 {
    var result: []const u8 = units_var[@as(usize, @intCast(0))];
    result = result;
    var i: i64 = 1;
    i = i;
    while (i < @as(i64, @intCast(units_var.len))) {
        result = _concat_string(_concat_string(result, ", "), units_var[@as(usize, @intCast(i))]);
        i = i + 1;
    }
    return result;
}

fn find_index(name: []const u8) i64 {
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(units_var.len))) {
        if (std.mem.eql(u8, units_var[@as(usize, @intCast(i))], name)) {
            return i;
        }
        i = i + 1;
    }
    return 0 - 1;
}

fn get_from_factor(name: []const u8) f64 {
    var idx: i64 = find_index(name);
    idx = idx;
    if (idx < 0) {
        @panic(_concat_string(_concat_string(_concat_string("Invalid 'from_type' value: '", name), "' Supported values are: "), supported_values()));
    }
    return from_factors_var[@as(usize, @intCast(idx))];
}

fn get_to_factor(name: []const u8) f64 {
    var idx: i64 = find_index(name);
    idx = idx;
    if (idx < 0) {
        @panic(_concat_string(_concat_string(_concat_string("Invalid 'to_type' value: '", name), "' Supported values are: "), supported_values()));
    }
    return to_factors_var[@as(usize, @intCast(idx))];
}

fn volume_conversion(value: f64, from_type: []const u8, to_type: []const u8) f64 {
    var from_factor: f64 = get_from_factor(from_type);
    from_factor = from_factor;
    var to_factor: f64 = get_to_factor(to_type);
    to_factor = to_factor;
    return value * from_factor * to_factor;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        units_var = blk0: { var _tmp0 = std.heap.page_allocator.alloc([]const u8, 7) catch unreachable; _tmp0[0] = "cubic meter"; _tmp0[1] = "litre"; _tmp0[2] = "kilolitre"; _tmp0[3] = "gallon"; _tmp0[4] = "cubic yard"; _tmp0[5] = "cubic foot"; _tmp0[6] = "cup"; break :blk0 _tmp0; };
        from_factors_var = blk1: { var _tmp1 = std.heap.page_allocator.alloc(f64, 7) catch unreachable; _tmp1[0] = 1.0; _tmp1[1] = 0.001; _tmp1[2] = 1.0; _tmp1[3] = 0.00454; _tmp1[4] = 0.76455; _tmp1[5] = 0.028; _tmp1[6] = 0.000236588; break :blk1 _tmp1; };
        to_factors_var = blk2: { var _tmp2 = std.heap.page_allocator.alloc(f64, 7) catch unreachable; _tmp2[0] = 1.0; _tmp2[1] = 1000.0; _tmp2[2] = 1.0; _tmp2[3] = 264.172; _tmp2[4] = 1.30795; _tmp2[5] = 35.3147; _tmp2[6] = 4226.75; break :blk2 _tmp2; };
        std.debug.print("{s}\n", .{_str(volume_conversion(4.0, "cubic meter", "litre"))});
        std.debug.print("{s}\n", .{_str(volume_conversion(1.0, "litre", "gallon"))});
        std.debug.print("{s}\n", .{_str(volume_conversion(1.0, "kilolitre", "cubic meter"))});
        std.debug.print("{s}\n", .{_str(volume_conversion(3.0, "gallon", "cubic yard"))});
        std.debug.print("{s}\n", .{_str(volume_conversion(2.0, "cubic yard", "litre"))});
        std.debug.print("{s}\n", .{_str(volume_conversion(4.0, "cubic foot", "cup"))});
        std.debug.print("{s}\n", .{_str(volume_conversion(1.0, "cup", "kilolitre"))});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * std.mem.page_size;
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
