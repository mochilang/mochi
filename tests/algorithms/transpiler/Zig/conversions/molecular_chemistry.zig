// Generated by Mochi Zig transpiler on 2025-08-07 14:57 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn round_to_int(x: f64) i64 {
    if (x >= 0.0) {
        return @as(i64, @intFromFloat(x + 0.5));
    }
    return @as(i64, @intFromFloat(x - 0.5));
}

fn molarity_to_normality(nfactor: f64, moles: f64, volume: f64) i64 {
    return round_to_int(moles / volume * nfactor);
}

fn moles_to_pressure(volume: f64, moles: f64, temperature: f64) i64 {
    return round_to_int(moles * 0.0821 * temperature / volume);
}

fn moles_to_volume(pressure: f64, moles: f64, temperature: f64) i64 {
    return round_to_int(moles * 0.0821 * temperature / pressure);
}

fn pressure_and_volume_to_temperature(pressure: f64, moles: f64, volume: f64) i64 {
    return round_to_int(pressure * volume / (0.0821 * moles));
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        std.debug.print("{s}\n", .{_str(molarity_to_normality(2.0, 3.1, 0.31))});
        std.debug.print("{s}\n", .{_str(molarity_to_normality(4.0, 11.4, 5.7))});
        std.debug.print("{s}\n", .{_str(moles_to_pressure(0.82, 3.0, 300.0))});
        std.debug.print("{s}\n", .{_str(moles_to_pressure(8.2, 5.0, 200.0))});
        std.debug.print("{s}\n", .{_str(moles_to_volume(0.82, 3.0, 300.0))});
        std.debug.print("{s}\n", .{_str(moles_to_volume(8.2, 5.0, 200.0))});
        std.debug.print("{s}\n", .{_str(pressure_and_volume_to_temperature(0.82, 1.0, 2.0))});
        std.debug.print("{s}\n", .{_str(pressure_and_volume_to_temperature(8.2, 5.0, 3.0))});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * std.mem.page_size;
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
