// Generated by Mochi Zig transpiler on 2025-08-07 14:57 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn strip_spaces(s: []const u8) []const u8 {
    var start: i64 = 0;
    start = start;
    var end: i64 = @as(i64, @intCast(s.len)) - 1;
    end = end;
    while (start < @as(i64, @intCast(s.len)) and std.mem.eql(u8, s[@as(usize, @intCast(start))..@as(usize, @intCast(start)) + 1], " ")) {
        start = start + 1;
    }
    while (end >= start and std.mem.eql(u8, s[@as(usize, @intCast(end))..@as(usize, @intCast(end)) + 1], " ")) {
        end = end - 1;
    }
    var res: []const u8 = "";
    res = res;
    var i: i64 = start;
    i = i;
    while (i <= end) {
        res = _concat_string(res, s[@as(usize, @intCast(i))..@as(usize, @intCast(i)) + 1]);
        i = i + 1;
    }
    return res;
}

fn repeat_char(ch: []const u8, count: i64) []const u8 {
    var res: []const u8 = "";
    res = res;
    var i: i64 = 0;
    i = i;
    while (i < count) {
        res = _concat_string(res, ch);
        i = i + 1;
    }
    return res;
}

fn slice(s: []const u8, start: i64, end: i64) []const u8 {
    var res: []const u8 = "";
    res = res;
    var i: i64 = start;
    i = i;
    while (i < end) {
        res = _concat_string(res, s[@as(usize, @intCast(i))..@as(usize, @intCast(i)) + 1]);
        i = i + 1;
    }
    return res;
}

fn bits_to_int(bits: []const u8) i64 {
    var value: i64 = 0;
    value = value;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(bits.len))) {
        value = value * 2;
        if (std.mem.eql(u8, bits[@as(usize, @intCast(i))..@as(usize, @intCast(i)) + 1], "1")) {
            value = value + 1;
        }
        i = i + 1;
    }
    return value;
}

fn bin_to_hexadecimal(binary_str: []const u8) []const u8 {
    var s: []const u8 = strip_spaces(binary_str);
    s = s;
    if (@as(i64, @intCast(s.len)) == 0) {
        @panic("Empty string was passed to the function");
    }
    var is_negative: bool = false;
    is_negative = is_negative;
    if (std.mem.eql(u8, s[@as(usize, @intCast(0))..@as(usize, @intCast(0)) + 1], "-")) {
        is_negative = true;
        s = slice(s, 1, @as(i64, @intCast(s.len)));
    }
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(s.len))) {
        var c: []const u8 = s[@as(usize, @intCast(i))..@as(usize, @intCast(i)) + 1];
        c = c;
        if (!std.mem.eql(u8, c, "0") and !std.mem.eql(u8, c, "1")) {
            @panic("Non-binary value was passed to the function");
        }
        i = i + 1;
    }
    var groups: i64 = @divTrunc(@as(i64, @intCast(s.len)), 4) + 1;
    groups = groups;
    var pad_len: i64 = groups * 4 - @as(i64, @intCast(s.len));
    pad_len = pad_len;
    s = _concat_string(repeat_char("0", pad_len), s);
    var digits: []const u8 = "0123456789abcdef";
    digits = digits;
    var res: []const u8 = "0x";
    res = res;
    var j: i64 = 0;
    j = j;
    while (j < @as(i64, @intCast(s.len))) {
        var chunk: []const u8 = slice(s, j, j + 4);
        chunk = chunk;
        var val: i64 = bits_to_int(chunk);
        val = val;
        res = _concat_string(res, digits[@as(usize, @intCast(val))..@as(usize, @intCast(val)) + 1]);
        j = j + 4;
    }
    if (is_negative) {
        return _concat_string("-", res);
    }
    return res;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        std.debug.print("{s}\n", .{bin_to_hexadecimal("101011111")});
        std.debug.print("{s}\n", .{bin_to_hexadecimal(" 1010   ")});
        std.debug.print("{s}\n", .{bin_to_hexadecimal("-11101")});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * std.mem.page_size;
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
