// Generated by Mochi Zig transpiler on 2025-08-07 14:57 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

var nums_var: [][]const u8 = &[_][]const u8{};
var t_var: i64 = 0;

fn octal_to_hex(octal: []const u8) []const u8 {
    var s: []const u8 = blk: { const tmp = std.heap.page_allocator.alloc(u8, octal.len) catch unreachable; @memcpy(tmp, octal); break :blk tmp; };
    s = s;
    if (@as(i64, @intCast(s.len)) >= 2 and std.mem.eql(u8, s[@as(usize, @intCast(0))..@as(usize, @intCast(0)) + 1], "0") and std.mem.eql(u8, s[@as(usize, @intCast(1))..@as(usize, @intCast(1)) + 1], "o")) {
        s = s[@as(usize, @intCast(2))..@min(@as(usize, @intCast(@as(i64, @intCast(s.len)))), @as(usize, @intCast(s.len)))];
    }
    if (@as(i64, @intCast(s.len)) == 0) {
        @panic("Empty string was passed to the function");
    }
    var j: i64 = 0;
    j = j;
    while (j < @as(i64, @intCast(s.len))) {
        var c: []const u8 = s[@as(usize, @intCast(j))..@as(usize, @intCast(j)) + 1];
        c = c;
        if (!std.mem.eql(u8, c, "0") and !std.mem.eql(u8, c, "1") and !std.mem.eql(u8, c, "2") and !std.mem.eql(u8, c, "3") and !std.mem.eql(u8, c, "4") and !std.mem.eql(u8, c, "5") and !std.mem.eql(u8, c, "6") and !std.mem.eql(u8, c, "7")) {
            @panic("Not a Valid Octal Number");
        }
        j = j + 1;
    }
    var decimal: i64 = 0;
    decimal = decimal;
    var k: i64 = 0;
    k = k;
    while (k < @as(i64, @intCast(s.len))) {
        var d: i64 = std.fmt.parseInt(i64, s[@as(usize, @intCast(k))..@as(usize, @intCast(k)) + 1], 10) catch 0;
        d = d;
        decimal = decimal * 8 + d;
        k = k + 1;
    }
    var hex_chars: []const u8 = "0123456789ABCDEF";
    hex_chars = hex_chars;
    if (decimal == 0) {
        return "0x";
    }
    var hex: []const u8 = "";
    hex = hex;
    while (decimal > 0) {
        var idx: i64 = @mod(decimal, 16);
        idx = idx;
        hex = _concat_string(hex_chars[@as(usize, @intCast(idx))..@as(usize, @intCast(idx)) + 1], hex);
        decimal = @divTrunc(decimal, 16);
    }
    return _concat_string("0x", hex);
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        nums_var = blk0: { var _tmp0 = std.heap.page_allocator.alloc([]const u8, 5) catch unreachable; _tmp0[0] = "030"; _tmp0[1] = "100"; _tmp0[2] = "247"; _tmp0[3] = "235"; _tmp0[4] = "007"; break :blk0 _tmp0; };
        while (t_var < @as(i64, @intCast(nums_var.len))) {
            var num: []const u8 = nums_var[@as(usize, @intCast(t_var))];
            num = num;
            std.debug.print("{s}\n", .{octal_to_hex(num)});
            t_var = t_var + 1;
        }
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * std.mem.page_size;
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
