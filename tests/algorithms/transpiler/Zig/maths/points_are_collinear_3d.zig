// Generated by Mochi Zig transpiler on 2025-08-17 12:10 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const Point3d = struct {
    x: f64,
    y: f64,
    z: f64,
};

const Vector3d = struct {
    x: f64,
    y: f64,
    z: f64,
};

fn create_vector(p1: Point3d, p2: Point3d) Vector3d {
    const vx: f64 = p2.x - p1.x;
    const vy: f64 = p2.y - p1.y;
    const vz: f64 = p2.z - p1.z;
    return .{ .x = vx, .y = vy, .z = vz };
}

fn get_3d_vectors_cross(ab: Vector3d, ac: Vector3d) Vector3d {
    const cx: f64 = ab.y * ac.z - ab.z * ac.y;
    const cy: f64 = ab.z * ac.x - ab.x * ac.z;
    const cz: f64 = ab.x * ac.y - ab.y * ac.x;
    return .{ .x = cx, .y = cy, .z = cz };
}

fn pow10(exp: i64) f64 {
    var result: f64 = 1.0;
    result = result;
    var i: i64 = 0;
    i = i;
    while (i < exp) {
        result = result * 10.0;
        i = i +% 1;
    }
    return result;
}

fn round_float(x: f64, digits: i64) f64 {
    const factor: f64 = pow10(digits);
    var v: f64 = x * factor;
    v = v;
    if (v >= 0.0) {
        v = v + 0.5;
    } else {
        v = v - 0.5;
    }
    const t: i64 = @as(i64, @intFromFloat(v));
    return @as(f64, @floatFromInt(t)) / factor;
}

fn is_zero_vector(v_1: Vector3d, accuracy: i64) bool {
    return round_float(v_1.x, accuracy) == 0.0 and round_float(v_1.y, accuracy) == 0.0 and round_float(v_1.z, accuracy) == 0.0;
}

fn are_collinear(a: Point3d, b: Point3d, c: Point3d, accuracy_1: i64) bool {
    const ab_1: Vector3d = create_vector(a, b);
    const ac_1: Vector3d = create_vector(a, c);
    const cross: Vector3d = get_3d_vectors_cross(ab_1, ac_1);
    return is_zero_vector(cross, accuracy_1);
}

fn test_are_collinear() void {
    const p1_1: Point3d = .{ .x = 0.0, .y = 0.0, .z = 0.0 };
    const p2_1: Point3d = .{ .x = 1.0, .y = 1.0, .z = 1.0 };
    const p3: Point3d = .{ .x = 2.0, .y = 2.0, .z = 2.0 };
    if (!(are_collinear(p1_1, p2_1, p3, 10))) {
        @panic("collinear test failed");
    }
    const q3: Point3d = .{ .x = 1.0, .y = 2.0, .z = 3.0 };
    if (are_collinear(p1_1, p2_1, q3, 10)) {
        @panic("non-collinear test failed");
    }
}

fn mochi_main() void {
    test_are_collinear();
    const a_1: Point3d = .{ .x = 4.802293498137402, .y = 3.536233125455244, .z = 0.0 };
    const b_1: Point3d = .{ .x = @as(f64, @floatFromInt(0)) - 2.186788107953106, .y = @as(f64, @floatFromInt(0)) - 9.24561398001649, .z = 7.141509524846482 };
    const c_1: Point3d = .{ .x = 1.530169574640268, .y = @as(f64, @floatFromInt(0)) - 2.447927606600034, .z = 3.343487096469054 };
    std.debug.print("{s}\n", .{_str(are_collinear(a_1, b_1, c_1, 10))});
    const d: Point3d = .{ .x = 2.399001826862445, .y = @as(f64, @floatFromInt(0)) - 2.452009976680793, .z = 4.464656666157666 };
    const e: Point3d = .{ .x = @as(f64, @floatFromInt(0)) - 3.682816335934376, .y = 5.753788986533145, .z = 9.490993909044244 };
    const f: Point3d = .{ .x = 1.962903518985307, .y = 3.741415730125627, .z = 7.0 };
    std.debug.print("{s}\n", .{_str(are_collinear(d, e, f, 10))});
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        mochi_main();
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
