// Generated by Mochi Zig transpiler on 2025-08-12 13:41 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const a_var: f64 = 0.0;
const b_var: f64 = 1.0;
const steps_var: f64 = 10.0;
var boundary_var: []f64 = &[_]f64{};
var y_var: f64 = 0;

fn f(x_param: f64) f64 {
    var x_var: f64 = x_param;
    x_var = x_var;
    return x_var * x_var;
}

fn make_points(a_param: f64, b_param: f64, h_param: f64) []f64 {
    const a_var_1: f64 = a_param;
    const b_var_1: f64 = b_param;
    var h_var: f64 = h_param;
    h_var = h_var;
    var xs: []f64 = @constCast(&[_]f64{})[0..];
    xs = xs;
    var x: f64 = a_var_1 + h_var;
    x = x;
    while (x <= b_var_1 - h_var) {
        xs = blk: { var _tmp = std.ArrayList(f64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const f64, xs)) catch |err| handleError(err); _tmp.append(x) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        x = x + h_var;
    }
    return xs;
}

fn trapezoidal_rule(boundary_param: []f64, steps_param: f64) f64 {
    const boundary_var_1: []f64 = boundary_param;
    const steps_var_1: f64 = steps_param;
    const h: f64 = (boundary_var_1[@as(usize, @intCast(1))] - boundary_var_1[@as(usize, @intCast(0))]) / steps_var_1;
    const a_var_2: f64 = boundary_var_1[@as(usize, @intCast(0))];
    const b_var_2: f64 = boundary_var_1[@as(usize, @intCast(1))];
    const xs: []f64 = make_points(a_var_2, b_var_2, h);
    var y_var_1: f64 = h / 2.0 * f(a_var_2);
    y_var_1 = y_var_1;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(xs.len))) {
        y_var_1 = y_var_1 + h * f(xs[@as(usize, @intCast(i))]);
        i = i + 1;
    }
    y_var_1 = y_var_1 + h / 2.0 * f(b_var_2);
    return y_var_1;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        boundary_var = std.heap.page_allocator.dupe(f64, (&([2]f64{a_var, b_var}))[0..]) catch unreachable;
        y_var = trapezoidal_rule(boundary_var, steps_var);
        std.debug.print("{s}\n", .{_concat_string("y = ", _str(y_var))});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.heap.pageSize()));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
