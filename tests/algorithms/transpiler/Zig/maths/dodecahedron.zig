// Generated by Mochi Zig transpiler on 2025-08-12 07:47 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn sqrtApprox(x: f64) f64 {
    var guess: f64 = x / 2.0;
    guess = guess;
    var i: i64 = 0;
    i = i;
    while (i < 20) {
        guess = (guess + x / guess) / 2.0;
        i = i + 1;
    }
    return guess;
}

fn abs_val(num: f64) f64 {
    if (num < 0.0) {
        return @as(f64, @floatFromInt(0)) - num;
    }
    return num;
}

fn approx_equal(a: f64, b: f64, eps: f64) bool {
    return abs_val(a - b) < eps;
}

fn dodecahedron_surface_area(edge: i64) f64 {
    if (edge <= 0) {
        @panic("Length must be a positive.");
    }
    const term: f64 = sqrtApprox(25.0 + 10.0 * sqrtApprox(5.0));
    const e: f64 = @as(f64, @floatFromInt(edge));
    return 3.0 * term * e * e;
}

fn dodecahedron_volume(edge: i64) f64 {
    if (edge <= 0) {
        @panic("Length must be a positive.");
    }
    const term: f64 = (15.0 + 7.0 * sqrtApprox(5.0)) / 4.0;
    const e: f64 = @as(f64, @floatFromInt(edge));
    return term * e * e * e;
}

fn test_dodecahedron() void {
    if (!(approx_equal(dodecahedron_surface_area(5), 516.1432201766901, 0.0001))) {
        @panic("surface area 5 failed");
    }
    if (!(approx_equal(dodecahedron_surface_area(10), 2064.5728807067603, 0.0001))) {
        @panic("surface area 10 failed");
    }
    if (!(approx_equal(dodecahedron_volume(5), 957.8898700780791, 0.0001))) {
        @panic("volume 5 failed");
    }
    if (!(approx_equal(dodecahedron_volume(10), 7663.118960624633, 0.0001))) {
        @panic("volume 10 failed");
    }
}

fn mochi_main() void {
    test_dodecahedron();
    std.debug.print("{d}\n", .{dodecahedron_surface_area(5)});
    std.debug.print("{d}\n", .{dodecahedron_volume(5)});
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        mochi_main();
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * std.heap.pageSize();
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
