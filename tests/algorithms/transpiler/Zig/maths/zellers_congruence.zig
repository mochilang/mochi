// Generated by Mochi Zig transpiler on 2025-08-12 13:41 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn parse_decimal(s_param: []const u8) i64 {
    var s_var: []const u8 = s_param;
    s_var = s_var;
    var value: i64 = 0;
    value = value;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(s_var.len))) {
        const c: []const u8 = s_var[@as(usize, @intCast(i))..@as(usize, @intCast(i)) + 1];
        if (std.mem.order(u8, c, "0") == .lt or std.mem.order(u8, c, "9") == .gt) {
            @panic("invalid literal");
        }
        value = value * 10 + (std.fmt.parseInt(i64, c, 10) catch 0);
        i = i + 1;
    }
    return value;
}

fn zeller_day(date_input_param: []const u8) []const u8 {
    var date_input_var: []const u8 = date_input_param;
    date_input_var = date_input_var;
    const days: std.AutoHashMap(i64,[]const u8) = blk: { var m = std.AutoHashMap(i64, []const u8).init(std.heap.page_allocator); m.put(0, "Sunday") catch unreachable; m.put(1, "Monday") catch unreachable; m.put(2, "Tuesday") catch unreachable; m.put(3, "Wednesday") catch unreachable; m.put(4, "Thursday") catch unreachable; m.put(5, "Friday") catch unreachable; m.put(6, "Saturday") catch unreachable; break :blk m; };
    if (@as(i64, @intCast(date_input_var.len)) != 10) {
        @panic("Must be 10 characters long");
    }
    const m: i64 = parse_decimal(date_input_var[@as(usize, @intCast(0))..@min(@as(usize, @intCast(2)), @as(usize, @intCast(date_input_var.len)))]);
    if (m <= 0 or m >= 13) {
        @panic("Month must be between 1 - 12");
    }
    const sep1: []const u8 = date_input_var[@as(usize, @intCast(2))..@as(usize, @intCast(2)) + 1];
    if (!std.mem.eql(u8, sep1, "-") and !std.mem.eql(u8, sep1, "/")) {
        @panic("Date separator must be '-' or '/'");
    }
    const d: i64 = parse_decimal(date_input_var[@as(usize, @intCast(3))..@min(@as(usize, @intCast(5)), @as(usize, @intCast(date_input_var.len)))]);
    if (d <= 0 or d >= 32) {
        @panic("Date must be between 1 - 31");
    }
    const sep2: []const u8 = date_input_var[@as(usize, @intCast(5))..@as(usize, @intCast(5)) + 1];
    if (!std.mem.eql(u8, sep2, "-") and !std.mem.eql(u8, sep2, "/")) {
        @panic("Date separator must be '-' or '/'");
    }
    const y: i64 = parse_decimal(date_input_var[@as(usize, @intCast(6))..@min(@as(usize, @intCast(10)), @as(usize, @intCast(date_input_var.len)))]);
    if (y <= 45 or y >= 8500) {
        @panic("Year out of range. There has to be some sort of limit...right?");
    }
    var year: i64 = y;
    year = year;
    var month: i64 = m;
    month = month;
    if (month <= 2) {
        year = year - 1;
        month = month + 12;
    }
    const c: i64 = @divTrunc(year, 100);
    const k: i64 = @mod(year, 100);
    const t: i64 = @as(i64, @intFromFloat(2.6 * @as(f64, @floatFromInt(month)) - 5.39));
    const u: i64 = @divTrunc(c, 4);
    const v: i64 = @divTrunc(k, 4);
    const x: i64 = d + k;
    const z: i64 = t + u + v + x;
    const w: i64 = z - 2 * c;
    var f: i64 = @mod(w, 7);
    f = f;
    if (f < 0) {
        f = f + 7;
    }
    return days.get(f).?;
}

fn zeller(date_input_param_1: []const u8) []const u8 {
    var date_input_var: []const u8 = date_input_param_1;
    date_input_var = date_input_var;
    const day: []const u8 = zeller_day(date_input_var);
    return _concat_string(_concat_string(_concat_string(_concat_string("Your date ", date_input_var), ", is a "), day), "!");
}

fn test_zeller() void {
    const inputs: [][]const u8 = @constCast(&([4][]const u8{"01-31-2010", "02-01-2010", "11-26-2024", "07-04-1776"}))[0..];
    const expected: [][]const u8 = @constCast(&([4][]const u8{"Sunday", "Monday", "Tuesday", "Thursday"}))[0..];
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(inputs.len))) {
        const res: []const u8 = zeller_day(inputs[@as(usize, @intCast(i))]);
        if (!std.mem.eql(u8, res, expected[@as(usize, @intCast(i))])) {
            @panic("zeller test failed");
        }
        i = i + 1;
    }
}

fn mochi_main() void {
    test_zeller();
    std.debug.print("{s}\n", .{zeller("01-31-2010")});
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        mochi_main();
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.heap.pageSize()));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
