// Generated by Mochi Zig transpiler on 2025-08-16 14:44 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn find_min_iterative(nums: []f64) f64 {
    if (@as(i64, @intCast(nums.len)) == 0) {
        @panic("find_min_iterative() arg is an empty sequence");
    }
    var min_num: f64 = nums[_idx(nums.len, 0)];
    min_num = min_num;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(nums.len))) {
        const num: f64 = nums[_idx(nums.len, i)];
        if (num < min_num) {
            min_num = num;
        }
        i = i +% 1;
    }
    return min_num;
}

fn find_min_recursive(nums_1: []f64, left: i64, right: i64) f64 {
    const n: i64 = @as(i64, @intCast(nums_1.len));
    if (n == 0) {
        @panic("find_min_recursive() arg is an empty sequence");
    }
    if (left >= n or left < 0 -% n or right >= n or right < 0 -% n) {
        @panic("list index out of range");
    }
    var l: i64 = left;
    l = l;
    var r: i64 = right;
    r = r;
    if (l < 0) {
        l = n +% l;
    }
    if (r < 0) {
        r = n +% r;
    }
    if (l == r) {
        return nums_1[_idx(nums_1.len, l)];
    }
    const mid: i64 = @divTrunc(l +% r, 2);
    const left_min: f64 = find_min_recursive(nums_1, l, mid);
    const right_min: f64 = find_min_recursive(nums_1, mid +% 1, r);
    if (left_min <= right_min) {
        return left_min;
    }
    return right_min;
}

fn test_find_min() void {
    const a: []f64 = @constCast(([3]f64{3.0, 2.0, 1.0})[0..3]);
    if (find_min_iterative(a) != 1.0) {
        @panic("iterative test1 failed");
    }
    if (find_min_recursive(a, 0, @as(i64, @intCast(a.len)) -% 1) != 1.0) {
        @panic("recursive test1 failed");
    }
    const b: []f64 = blk0: { var _tmp = std.ArrayList(f64).init(std.heap.page_allocator); _tmp.append(@as(f64, @floatFromInt(0)) - 3.0) catch unreachable; _tmp.append(@as(f64, @floatFromInt(0)) - 2.0) catch unreachable; _tmp.append(@as(f64, @floatFromInt(0)) - 1.0) catch unreachable; break :blk0 (_tmp.toOwnedSlice() catch unreachable); };
    if (find_min_iterative(b) != @as(f64, @floatFromInt(0)) - 3.0) {
        @panic("iterative test2 failed");
    }
    if (find_min_recursive(b, 0, @as(i64, @intCast(b.len)) -% 1) != @as(f64, @floatFromInt(0)) - 3.0) {
        @panic("recursive test2 failed");
    }
    const c: []f64 = blk1: { var _tmp_1 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_1.append(3.0) catch unreachable; _tmp_1.append(@as(f64, @floatFromInt(0)) - 3.0) catch unreachable; _tmp_1.append(0.0) catch unreachable; break :blk1 (_tmp_1.toOwnedSlice() catch unreachable); };
    if (find_min_iterative(c) != @as(f64, @floatFromInt(0)) - 3.0) {
        @panic("iterative test3 failed");
    }
    if (find_min_recursive(c, 0, @as(i64, @intCast(c.len)) -% 1) != @as(f64, @floatFromInt(0)) - 3.0) {
        @panic("recursive test3 failed");
    }
    const d: []f64 = @constCast(([10]f64{1.0, 3.0, 5.0, 7.0, 9.0, 2.0, 4.0, 6.0, 8.0, 10.0})[0..10]);
    if (find_min_recursive(d, 0 -% @as(i64, @intCast(d.len)), -1) != 1.0) {
        @panic("negative index test failed");
    }
}

fn mochi_main() void {
    test_find_min();
    const sample: []f64 = blk2: { var _tmp_2 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_2.append(0.0) catch unreachable; _tmp_2.append(1.0) catch unreachable; _tmp_2.append(2.0) catch unreachable; _tmp_2.append(3.0) catch unreachable; _tmp_2.append(4.0) catch unreachable; _tmp_2.append(5.0) catch unreachable; _tmp_2.append(@as(f64, @floatFromInt(0)) - 3.0) catch unreachable; _tmp_2.append(24.0) catch unreachable; _tmp_2.append(@as(f64, @floatFromInt(0)) - 56.0) catch unreachable; break :blk2 (_tmp_2.toOwnedSlice() catch unreachable); };
    std.debug.print("{s}\n", .{_str(find_min_iterative(sample))});
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        mochi_main();
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
