// Generated by Mochi Zig transpiler on 2025-08-16 14:44 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn contains_int(xs: []i64, x: i64) bool {
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(xs.len))) {
        if (xs[_idx(xs.len, i)] == x) {
            return true;
        }
        i = i +% 1;
    }
    return false;
}

fn contains_string(xs_1: [][]const u8, x_1: []const u8) bool {
    var i_1: i64 = 0;
    i_1 = i_1;
    while (i_1 < @as(i64, @intCast(xs_1.len))) {
        if (std.mem.eql(u8, xs_1[_idx(xs_1.len, i_1)], x_1)) {
            return true;
        }
        i_1 = i_1 +% 1;
    }
    return false;
}

fn count_int(xs_2: []i64, x_2: i64) i64 {
    var cnt: i64 = 0;
    cnt = cnt;
    var i_2: i64 = 0;
    i_2 = i_2;
    while (i_2 < @as(i64, @intCast(xs_2.len))) {
        if (xs_2[_idx(xs_2.len, i_2)] == x_2) {
            cnt = cnt +% 1;
        }
        i_2 = i_2 +% 1;
    }
    return cnt;
}

fn count_string(xs_3: [][]const u8, x_3: []const u8) i64 {
    var cnt_1: i64 = 0;
    cnt_1 = cnt_1;
    var i_3: i64 = 0;
    i_3 = i_3;
    while (i_3 < @as(i64, @intCast(xs_3.len))) {
        if (std.mem.eql(u8, xs_3[_idx(xs_3.len, i_3)], x_3)) {
            cnt_1 = cnt_1 +% 1;
        }
        i_3 = i_3 +% 1;
    }
    return cnt_1;
}

fn sort_int(xs_4: []i64) []i64 {
    var arr: []i64 = blk0: { const tmp = std.heap.page_allocator.alloc(i64, xs_4.len) catch unreachable; @memcpy(tmp, xs_4); break :blk0 tmp; };
    arr = arr;
    var i_4: i64 = 0;
    i_4 = i_4;
    while (i_4 < @as(i64, @intCast(arr.len))) {
        var j: i64 = i_4 +% 1;
        j = j;
        while (j < @as(i64, @intCast(arr.len))) {
            if (arr[_idx(arr.len, j)] < arr[_idx(arr.len, i_4)]) {
                const tmp: i64 = arr[_idx(arr.len, i_4)];
                arr[_idx(arr.len, i_4)] = arr[_idx(arr.len, j)];
                arr[_idx(arr.len, j)] = tmp;
            }
            j = j +% 1;
        }
        i_4 = i_4 +% 1;
    }
    return arr;
}

fn sort_string(xs_5: [][]const u8) [][]const u8 {
    var arr_1: [][]const u8 = blk1: { const tmp = std.heap.page_allocator.alloc([]const u8, xs_5.len) catch unreachable; @memcpy(tmp, xs_5); break :blk1 tmp; };
    arr_1 = arr_1;
    var i_5: i64 = 0;
    i_5 = i_5;
    while (i_5 < @as(i64, @intCast(arr_1.len))) {
        var j_1: i64 = i_5 +% 1;
        j_1 = j_1;
        while (j_1 < @as(i64, @intCast(arr_1.len))) {
            if (std.mem.order(u8, arr_1[_idx(arr_1.len, j_1)], arr_1[_idx(arr_1.len, i_5)]) == .lt) {
                const tmp_1: []const u8 = arr_1[_idx(arr_1.len, i_5)];
                arr_1[_idx(arr_1.len, i_5)] = arr_1[_idx(arr_1.len, j_1)];
                arr_1[_idx(arr_1.len, j_1)] = tmp_1;
            }
            j_1 = j_1 +% 1;
        }
        i_5 = i_5 +% 1;
    }
    return arr_1;
}

fn mode_int(lst: []i64) []i64 {
    if (@as(i64, @intCast(lst.len)) == 0) {
        return (&[_]i64{})[0..0];
    }
    var counts: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    counts = counts;
    var i_6: i64 = 0;
    i_6 = i_6;
    while (i_6 < @as(i64, @intCast(lst.len))) {
        counts = blk2: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, counts)) catch |err| handleError(err); _tmp.append(count_int(lst, lst[_idx(lst.len, i_6)])) catch |err| handleError(err); break :blk2 (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i_6 = i_6 +% 1;
    }
    var max_count: i64 = 0;
    max_count = max_count;
    i_6 = 0;
    while (i_6 < @as(i64, @intCast(counts.len))) {
        if (counts[_idx(counts.len, i_6)] > max_count) {
            max_count = counts[_idx(counts.len, i_6)];
        }
        i_6 = i_6 +% 1;
    }
    var modes: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    modes = modes;
    i_6 = 0;
    while (i_6 < @as(i64, @intCast(lst.len))) {
        if (counts[_idx(counts.len, i_6)] == max_count) {
            const v: i64 = lst[_idx(lst.len, i_6)];
            if (!(contains_int(modes[0..], v))) {
                modes = blk3: { var _tmp_1 = std.ArrayList(i64).init(std.heap.page_allocator); _tmp_1.appendSlice(@as([]const i64, modes)) catch |err| handleError(err); _tmp_1.append(v) catch |err| handleError(err); break :blk3 (_tmp_1.toOwnedSlice() catch |err| handleError(err)); };
            }
        }
        i_6 = i_6 +% 1;
    }
    return sort_int(modes[0..]);
}

fn mode_string(lst_1: [][]const u8) [][]const u8 {
    if (@as(i64, @intCast(lst_1.len)) == 0) {
        return (&[_][]const u8{})[0..0];
    }
    var counts_1: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    counts_1 = counts_1;
    var i_7: i64 = 0;
    i_7 = i_7;
    while (i_7 < @as(i64, @intCast(lst_1.len))) {
        counts_1 = blk4: { var _tmp_2 = std.ArrayList(i64).init(std.heap.page_allocator); _tmp_2.appendSlice(@as([]const i64, counts_1)) catch |err| handleError(err); _tmp_2.append(count_string(lst_1, lst_1[_idx(lst_1.len, i_7)])) catch |err| handleError(err); break :blk4 (_tmp_2.toOwnedSlice() catch |err| handleError(err)); };
        i_7 = i_7 +% 1;
    }
    var max_count_1: i64 = 0;
    max_count_1 = max_count_1;
    i_7 = 0;
    while (i_7 < @as(i64, @intCast(counts_1.len))) {
        if (counts_1[_idx(counts_1.len, i_7)] > max_count_1) {
            max_count_1 = counts_1[_idx(counts_1.len, i_7)];
        }
        i_7 = i_7 +% 1;
    }
    var modes_1: [][]const u8 = std.heap.page_allocator.alloc([]const u8, 0) catch unreachable;
    modes_1 = modes_1;
    i_7 = 0;
    while (i_7 < @as(i64, @intCast(lst_1.len))) {
        if (counts_1[_idx(counts_1.len, i_7)] == max_count_1) {
            const v_1: []const u8 = lst_1[_idx(lst_1.len, i_7)];
            if (!(contains_string(modes_1, v_1))) {
                modes_1 = blk5: { var _tmp_3 = std.ArrayList([]const u8).init(std.heap.page_allocator); _tmp_3.appendSlice(@as([]const []const u8, modes_1)) catch |err| handleError(err); _tmp_3.append(@constCast(v_1)) catch |err| handleError(err); break :blk5 (_tmp_3.toOwnedSlice() catch |err| handleError(err)); };
            }
        }
        i_7 = i_7 +% 1;
    }
    return sort_string(modes_1);
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        std.debug.print("{s}\n", .{_str(mode_int(@constCast(([14]i64{2, 3, 4, 5, 3, 4, 2, 5, 2, 2, 4, 2, 2, 2})[0..14])))});
        std.debug.print("{s}\n", .{_str(mode_int(@constCast(([14]i64{3, 4, 5, 3, 4, 2, 5, 2, 2, 4, 4, 2, 2, 2})[0..14])))});
        std.debug.print("{s}\n", .{_str(mode_int(@constCast(([16]i64{3, 4, 5, 3, 4, 2, 5, 2, 2, 4, 4, 4, 2, 2, 4, 2})[0..16])))});
        std.debug.print("{s}\n", .{_str(mode_string(@constCast(([4][]const u8{"x", "y", "y", "z"})[0..4])))});
        std.debug.print("{s}\n", .{_str(mode_string(@constCast(([5][]const u8{"x", "x", "y", "y", "z"})[0..5])))});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
