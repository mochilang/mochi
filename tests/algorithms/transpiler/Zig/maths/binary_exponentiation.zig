// Generated by Mochi Zig transpiler on 2025-08-16 14:44 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn binary_exp_recursive(base: f64, exponent: i64) f64 {
    if (exponent < 0) {
        @panic("exponent must be non-negative");
    }
    if (exponent == 0) {
        return 1.0;
    }
    if (@mod(exponent, 2) == 1) {
        return binary_exp_recursive(base, exponent -% 1) * base;
    }
    const half: f64 = binary_exp_recursive(base, @divTrunc(exponent, 2));
    return half * half;
}

fn binary_exp_iterative(base_1: f64, exponent_1: i64) f64 {
    if (exponent_1 < 0) {
        @panic("exponent must be non-negative");
    }
    var result: f64 = 1.0;
    result = result;
    var b: f64 = base_1;
    b = b;
    var e: i64 = exponent_1;
    e = e;
    while (e > 0) {
        if (@mod(e, 2) == 1) {
            result = result * b;
        }
        b = b * b;
        e = @divTrunc(e, 2);
    }
    return result;
}

fn binary_exp_mod_recursive(base_2: i64, exponent_2: i64, modulus: i64) i64 {
    if (exponent_2 < 0) {
        @panic("exponent must be non-negative");
    }
    if (modulus <= 0) {
        @panic("modulus must be positive");
    }
    if (exponent_2 == 0) {
        return @mod(1, modulus);
    }
    if (@mod(exponent_2, 2) == 1) {
        return @mod(binary_exp_mod_recursive(base_2, exponent_2 -% 1, modulus) *% (@mod(base_2, modulus)), modulus);
    }
    const r: i64 = binary_exp_mod_recursive(base_2, @divTrunc(exponent_2, 2), modulus);
    return @mod(r *% r, modulus);
}

fn binary_exp_mod_iterative(base_3: i64, exponent_3: i64, modulus_1: i64) i64 {
    if (exponent_3 < 0) {
        @panic("exponent must be non-negative");
    }
    if (modulus_1 <= 0) {
        @panic("modulus must be positive");
    }
    var result_1: i64 = @mod(1, modulus_1);
    result_1 = result_1;
    var b_1: i64 = @mod(base_3, modulus_1);
    b_1 = b_1;
    var e_1: i64 = exponent_3;
    e_1 = e_1;
    while (e_1 > 0) {
        if (@mod(e_1, 2) == 1) {
            result_1 = @mod(result_1 *% b_1, modulus_1);
        }
        b_1 = @mod(b_1 *% b_1, modulus_1);
        e_1 = @divTrunc(e_1, 2);
    }
    return result_1;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        std.debug.print("{d}\n", .{binary_exp_recursive(3.0, 5)});
        std.debug.print("{d}\n", .{binary_exp_iterative(1.5, 4)});
        std.debug.print("{s}\n", .{_str(binary_exp_mod_recursive(3, 4, 5))});
        std.debug.print("{s}\n", .{_str(binary_exp_mod_iterative(11, 13, 7))});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
