// Generated by Mochi Zig transpiler on 2025-08-16 14:44 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn ceil_int(x: f64) i64 {
    var n: i64 = @as(i64, @intFromFloat(x));
    n = n;
    if (@as(f64, @floatFromInt(n)) < x) {
        n = n +% 1;
    }
    return n;
}

fn explicit_euler(ode_func: *const fn(f64, f64) f64, y0: f64, x0: f64, step_size: f64, x_end: f64) []f64 {
    const n_1: i64 = ceil_int((x_end - x0) / step_size);
    var y: []f64 = std.heap.page_allocator.alloc(f64, 0) catch unreachable;
    y = y;
    var i: i64 = 0;
    i = i;
    while (i <= n_1) {
        y = blk0: { var _tmp = std.ArrayList(f64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const f64, y)) catch |err| handleError(err); _tmp.append(0.0) catch |err| handleError(err); break :blk0 (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i +% 1;
    }
    y[_idx(y.len, 0)] = y0;
    var x_1: f64 = x0;
    x_1 = x_1;
    var k: i64 = 0;
    k = k;
    while (k < n_1) {
        y[_idx(y.len, k +% 1)] = y[_idx(y.len, k)] + step_size * ode_func(x_1, y[_idx(y.len, k)]);
        x_1 = x_1 + step_size;
        k = k +% 1;
    }
    return y;
}

fn abs_float(a: f64) f64 {
    if (a < 0.0) {
        return @as(f64, @floatFromInt(0)) - a;
    }
    return a;
}

fn test_explicit_euler() void {
    const f: *const fn(f64, f64) f64 = fn_0;
    const ys: []f64 = explicit_euler(f, 1.0, 0.0, 0.01, 5.0);
    const last: f64 = ys[_idx(ys.len, @as(i64, @intCast(ys.len)) -% 1)];
    if (abs_float(last - 144.77277243257308) > 0.001) {
        @panic("explicit_euler failed");
    }
}

fn mochi_main() void {
    test_explicit_euler();
    const f_1: *const fn(f64, f64) f64 = fn_1;
    const ys_1: []f64 = explicit_euler(f_1, 1.0, 0.0, 0.01, 5.0);
    std.debug.print("{d}\n", .{ys_1[_idx(ys_1.len, @as(i64, @intCast(ys_1.len)) -% 1)]});
}

fn fn_0(_: f64, y: f64) f64 {
    return y;
}

fn fn_1(_: f64, y: f64) f64 {
    return y;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        mochi_main();
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
