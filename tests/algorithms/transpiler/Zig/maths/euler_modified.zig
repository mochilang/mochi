// Generated by Mochi Zig transpiler on 2025-08-16 14:44 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn ceil_float(x: f64) i64 {
    const i: i64 = @as(i64, @intFromFloat(x));
    if (x > @as(f64, @floatFromInt(i))) {
        return i +% 1;
    }
    return i;
}

fn exp_approx(x_1: f64) f64 {
    var term: f64 = 1.0;
    term = term;
    var sum: f64 = 1.0;
    sum = sum;
    var n: i64 = 1;
    n = n;
    while (n < 20) {
        term = term * x_1 / @as(f64, @floatFromInt(n));
        sum = sum + term;
        n = n +% 1;
    }
    return sum;
}

fn euler_modified(ode_func: *const fn(f64, f64) f64, y0: f64, x0: f64, step: f64, x_end: f64) []f64 {
    const n_1: i64 = ceil_float((x_end - x0) / step);
    var y: []f64 = blk0: { var _tmp = std.ArrayList(f64).init(std.heap.page_allocator); _tmp.append(y0) catch unreachable; break :blk0 (_tmp.toOwnedSlice() catch unreachable); };
    y = y;
    var x_2: f64 = x0;
    x_2 = x_2;
    var k: i64 = 0;
    k = k;
    while (k < n_1) {
        const y_predict: f64 = y[_idx(y.len, k)] + step * ode_func(x_2, y[_idx(y.len, k)]);
        const slope1: f64 = ode_func(x_2, y[_idx(y.len, k)]);
        const slope2: f64 = ode_func(x_2 + step, y_predict);
        const y_next: f64 = y[_idx(y.len, k)] + step / 2.0 * (slope1 + slope2);
        y = blk1: { var _tmp_1 = std.ArrayList(f64).init(std.heap.page_allocator); _tmp_1.appendSlice(@as([]const f64, y)) catch |err| handleError(err); _tmp_1.append(y_next) catch |err| handleError(err); break :blk1 (_tmp_1.toOwnedSlice() catch |err| handleError(err)); };
        x_2 = x_2 + step;
        k = k +% 1;
    }
    return y;
}

fn f1(x_3: f64, y_1: f64) f64 {
    return (@as(f64, @floatFromInt(0)) - 2.0) * x_3 * y_1 * y_1;
}

fn f2(x_4: f64, y_2: f64) f64 {
    return (@as(f64, @floatFromInt(0)) - 2.0) * y_2 + x_4 * x_4 * x_4 * exp_approx((@as(f64, @floatFromInt(0)) - 2.0) * x_4);
}

fn mochi_main() void {
    const y1: []f64 = euler_modified(&f1, 1.0, 0.0, 0.2, 1.0);
    std.debug.print("{d}\n", .{y1[_idx(y1.len, @as(i64, @intCast(y1.len)) -% 1)]});
    const y2: []f64 = euler_modified(&f2, 1.0, 0.0, 0.1, 0.3);
    std.debug.print("{d}\n", .{y2[_idx(y2.len, @as(i64, @intCast(y2.len)) -% 1)]});
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        mochi_main();
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
