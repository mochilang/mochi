// Generated by Mochi Zig transpiler on 2025-08-12 13:41 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn bubble_sort(nums_param: []i64) []i64 {
    var nums_var: []i64 = nums_param;
    nums_var = nums_var;
    var arr: []i64 = @constCast(&[_]i64{})[0..];
    arr = arr;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(nums_var.len))) {
        arr = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, arr)) catch |err| handleError(err); _tmp.append(nums_var[@as(usize, @intCast(i))]) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    const n: i64 = @as(i64, @intCast(arr.len));
    var a: i64 = 0;
    a = a;
    while (a < n) {
        var b: i64 = 0;
        b = b;
        while (b < n - a - 1) {
            if (arr[@as(usize, @intCast(b))] > arr[@as(usize, @intCast(b + 1))]) {
                const tmp: i64 = arr[@as(usize, @intCast(b))];
                arr[@as(usize, @intCast(b))] = arr[@as(usize, @intCast(b + 1))];
                arr[@as(usize, @intCast(b + 1))] = tmp;
            }
            b = b + 1;
        }
        a = a + 1;
    }
    return arr;
}

fn sort3(xs_param: []i64) []i64 {
    var xs_var: []i64 = xs_param;
    xs_var = xs_var;
    var arr: []i64 = @constCast(&[_]i64{})[0..];
    arr = arr;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(xs_var.len))) {
        arr = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, arr)) catch |err| handleError(err); _tmp.append(xs_var[@as(usize, @intCast(i))]) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    const n: i64 = @as(i64, @intCast(arr.len));
    var a: i64 = 0;
    a = a;
    while (a < n) {
        var b: i64 = 0;
        b = b;
        while (b < n - a - 1) {
            if (arr[@as(usize, @intCast(b))] > arr[@as(usize, @intCast(b + 1))]) {
                const tmp: i64 = arr[@as(usize, @intCast(b))];
                arr[@as(usize, @intCast(b))] = arr[@as(usize, @intCast(b + 1))];
                arr[@as(usize, @intCast(b + 1))] = tmp;
            }
            b = b + 1;
        }
        a = a + 1;
    }
    return arr;
}

fn triplet_sum1(arr_param: []i64, target_param: i64) []i64 {
    var arr_var: []i64 = arr_param;
    arr_var = arr_var;
    var target_var: i64 = target_param;
    target_var = target_var;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(arr_var.len)) - 2) {
        var j: i64 = i + 1;
        j = j;
        while (j < @as(i64, @intCast(arr_var.len)) - 1) {
            var k: i64 = j + 1;
            k = k;
            while (k < @as(i64, @intCast(arr_var.len))) {
                if (arr_var[@as(usize, @intCast(i))] + arr_var[@as(usize, @intCast(j))] + arr_var[@as(usize, @intCast(k))] == target_var) {
                    return sort3(@constCast(&([3]i64{arr_var[@as(usize, @intCast(i))], arr_var[@as(usize, @intCast(j))], arr_var[@as(usize, @intCast(k))]}))[0..]);
                }
                k = k + 1;
            }
            j = j + 1;
        }
        i = i + 1;
    }
    return blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.append(0) catch |err| handleError(err); _tmp.append(0) catch |err| handleError(err); _tmp.append(0) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
}

fn triplet_sum2(arr_param_1: []i64, target_param_1: i64) []i64 {
    var arr_var: []i64 = arr_param_1;
    arr_var = arr_var;
    var target_var: i64 = target_param_1;
    target_var = target_var;
    const sorted: []i64 = bubble_sort(arr_var);
    const n: i64 = @as(i64, @intCast(sorted.len));
    var i: i64 = 0;
    i = i;
    while (i < n - 2) {
        var left: i64 = i + 1;
        left = left;
        var right: i64 = n - 1;
        right = right;
        while (left < right) {
            const s: i64 = sorted[@as(usize, @intCast(i))] + sorted[@as(usize, @intCast(left))] + sorted[@as(usize, @intCast(right))];
            if (s == target_var) {
                return blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.append(sorted[@as(usize, @intCast(i))]) catch |err| handleError(err); _tmp.append(sorted[@as(usize, @intCast(left))]) catch |err| handleError(err); _tmp.append(sorted[@as(usize, @intCast(right))]) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            }
            if (s < target_var) {
                left = left + 1;
            } else {
                right = right - 1;
            }
        }
        i = i + 1;
    }
    return blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.append(0) catch |err| handleError(err); _tmp.append(0) catch |err| handleError(err); _tmp.append(0) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
}

fn list_equal(a_param: []i64, b_param: []i64) bool {
    var a_var: []i64 = a_param;
    a_var = a_var;
    var b_var: []i64 = b_param;
    b_var = b_var;
    if (@as(i64, @intCast(a_var.len)) != @as(i64, @intCast(b_var.len))) {
        return false;
    }
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(a_var.len))) {
        if (a_var[@as(usize, @intCast(i))] != b_var[@as(usize, @intCast(i))]) {
            return false;
        }
        i = i + 1;
    }
    return true;
}

fn test_triplet_sum() void {
    const arr1: []i64 = @constCast(&([5]i64{13, 29, 7, 23, 5}))[0..];
    if (!(list_equal(triplet_sum1(arr1, 35), @constCast(&([3]i64{5, 7, 23}))[0..]))) {
        @panic("ts1 case1 failed");
    }
    if (!(list_equal(triplet_sum2(arr1, 35), @constCast(&([3]i64{5, 7, 23}))[0..]))) {
        @panic("ts2 case1 failed");
    }
    const arr2: []i64 = @constCast(&([5]i64{37, 9, 19, 50, 44}))[0..];
    if (!(list_equal(triplet_sum1(arr2, 65), @constCast(&([3]i64{9, 19, 37}))[0..]))) {
        @panic("ts1 case2 failed");
    }
    if (!(list_equal(triplet_sum2(arr2, 65), @constCast(&([3]i64{9, 19, 37}))[0..]))) {
        @panic("ts2 case2 failed");
    }
    const arr3: []i64 = @constCast(&([5]i64{6, 47, 27, 1, 15}))[0..];
    if (!(list_equal(triplet_sum1(arr3, 11), @constCast(&([3]i64{0, 0, 0}))[0..]))) {
        @panic("ts1 case3 failed");
    }
    if (!(list_equal(triplet_sum2(arr3, 11), @constCast(&([3]i64{0, 0, 0}))[0..]))) {
        @panic("ts2 case3 failed");
    }
}

fn mochi_main() void {
    test_triplet_sum();
    const sample: []i64 = @constCast(&([5]i64{13, 29, 7, 23, 5}))[0..];
    const res: []i64 = triplet_sum2(sample, 35);
    std.debug.print("{s}\n", .{_concat_string(_concat_string(_concat_string(_concat_string(_str(res[@as(usize, @intCast(0))]), " "), _str(res[@as(usize, @intCast(1))])), " "), _str(res[@as(usize, @intCast(2))]))});
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        mochi_main();
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .pointer => |p| {
        if (p.size == .slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .@"struct" => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.heap.pageSize()));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
