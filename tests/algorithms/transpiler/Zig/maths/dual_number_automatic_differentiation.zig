// Generated by Mochi Zig transpiler on 2025-08-12 07:47 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const Dual = struct {
    real: f64,
    duals: []f64,
};

fn make_dual(real: f64, rank: i64) Dual {
    var ds: []f64 = @constCast(&[_]f64{})[0..];
    ds = ds;
    var i: i64 = 0;
    i = i;
    while (i < rank) {
        ds = blk: { var _tmp = std.ArrayList(f64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const f64, ds)) catch |err| handleError(err); _tmp.append(1.0) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    return .{ .real = real, .duals = ds };
}

fn dual_from_list(real: f64, ds: []f64) Dual {
    return .{ .real = real, .duals = ds };
}

fn dual_add(a: Dual, b: Dual) Dual {
    var s_dual: []f64 = @constCast(&[_]f64{})[0..];
    s_dual = s_dual;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(a.duals.len))) {
        s_dual = blk: { var _tmp = std.ArrayList(f64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const f64, s_dual)) catch |err| handleError(err); _tmp.append(a.duals[@as(usize, @intCast(i))]) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    var o_dual: []f64 = @constCast(&[_]f64{})[0..];
    o_dual = o_dual;
    var j: i64 = 0;
    j = j;
    while (j < @as(i64, @intCast(b.duals.len))) {
        o_dual = blk: { var _tmp = std.ArrayList(f64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const f64, o_dual)) catch |err| handleError(err); _tmp.append(b.duals[@as(usize, @intCast(j))]) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        j = j + 1;
    }
    if (@as(i64, @intCast(s_dual.len)) > @as(i64, @intCast(o_dual.len))) {
        const diff: i64 = @as(i64, @intCast(s_dual.len)) - @as(i64, @intCast(o_dual.len));
        var k: i64 = 0;
        k = k;
        while (k < diff) {
            o_dual = blk: { var _tmp = std.ArrayList(f64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const f64, o_dual)) catch |err| handleError(err); _tmp.append(1.0) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
            k = k + 1;
        }
    } else {
        if (@as(i64, @intCast(s_dual.len)) < @as(i64, @intCast(o_dual.len))) {
            const diff2: i64 = @as(i64, @intCast(o_dual.len)) - @as(i64, @intCast(s_dual.len));
            var k2: i64 = 0;
            k2 = k2;
            while (k2 < diff2) {
                s_dual = blk: { var _tmp = std.ArrayList(f64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const f64, s_dual)) catch |err| handleError(err); _tmp.append(1.0) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
                k2 = k2 + 1;
            }
        }
    }
    var new_duals: []f64 = @constCast(&[_]f64{})[0..];
    new_duals = new_duals;
    var idx: i64 = 0;
    idx = idx;
    while (idx < @as(i64, @intCast(s_dual.len))) {
        new_duals = blk: { var _tmp = std.ArrayList(f64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const f64, new_duals)) catch |err| handleError(err); _tmp.append(s_dual[@as(usize, @intCast(idx))] + o_dual[@as(usize, @intCast(idx))]) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        idx = idx + 1;
    }
    return .{ .real = a.real + b.real, .duals = new_duals };
}

fn dual_add_real(a: Dual, b: f64) Dual {
    var ds: []f64 = @constCast(&[_]f64{})[0..];
    ds = ds;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(a.duals.len))) {
        ds = blk: { var _tmp = std.ArrayList(f64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const f64, ds)) catch |err| handleError(err); _tmp.append(a.duals[@as(usize, @intCast(i))]) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    return .{ .real = a.real + b, .duals = ds };
}

fn dual_mul(a: Dual, b: Dual) Dual {
    const new_len: i64 = @as(i64, @intCast(a.duals.len)) + @as(i64, @intCast(b.duals.len)) + 1;
    var new_duals: []f64 = @constCast(&[_]f64{})[0..];
    new_duals = new_duals;
    var idx: i64 = 0;
    idx = idx;
    while (idx < new_len) {
        new_duals = blk: { var _tmp = std.ArrayList(f64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const f64, new_duals)) catch |err| handleError(err); _tmp.append(0.0) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        idx = idx + 1;
    }
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(a.duals.len))) {
        var j: i64 = 0;
        j = j;
        while (j < @as(i64, @intCast(b.duals.len))) {
            const pos: i64 = i + j + 1;
            const val: f64 = new_duals[@as(usize, @intCast(pos))] + a.duals[@as(usize, @intCast(i))] * b.duals[@as(usize, @intCast(j))];
            new_duals[@as(usize, @intCast(pos))] = val;
            j = j + 1;
        }
        i = i + 1;
    }
    var k: i64 = 0;
    k = k;
    while (k < @as(i64, @intCast(a.duals.len))) {
        const val: f64 = new_duals[@as(usize, @intCast(k))] + a.duals[@as(usize, @intCast(k))] * b.real;
        new_duals[@as(usize, @intCast(k))] = val;
        k = k + 1;
    }
    var l: i64 = 0;
    l = l;
    while (l < @as(i64, @intCast(b.duals.len))) {
        const val: f64 = new_duals[@as(usize, @intCast(l))] + b.duals[@as(usize, @intCast(l))] * a.real;
        new_duals[@as(usize, @intCast(l))] = val;
        l = l + 1;
    }
    return .{ .real = a.real * b.real, .duals = new_duals };
}

fn dual_mul_real(a: Dual, b: f64) Dual {
    var ds: []f64 = @constCast(&[_]f64{})[0..];
    ds = ds;
    var i: i64 = 0;
    i = i;
    while (i < @as(i64, @intCast(a.duals.len))) {
        ds = blk: { var _tmp = std.ArrayList(f64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const f64, ds)) catch |err| handleError(err); _tmp.append(a.duals[@as(usize, @intCast(i))] * b) catch |err| handleError(err); break :blk (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        i = i + 1;
    }
    return .{ .real = a.real * b, .duals = ds };
}

fn dual_pow(x: Dual, n: i64) Dual {
    if (n < 0) {
        @panic("power must be a positive integer");
    }
    if (n == 0) {
        return .{ .real = 1.0, .duals = &[_]f64{} };
    }
    var res: Dual = x;
    res = res;
    var i: i64 = 1;
    i = i;
    while (i < n) {
        res = dual_mul(res, x);
        i = i + 1;
    }
    return res;
}

fn factorial(n: i64) f64 {
    var res: f64 = 1.0;
    res = res;
    var i: i64 = 2;
    i = i;
    while (i <= n) {
        res = res * @as(f64, @floatFromInt(i));
        i = i + 1;
    }
    return res;
}

fn differentiate(func: *const fn(Dual) Dual, position: f64, order: i64) f64 {
    const d: Dual = make_dual(position, 1);
    const result: Dual = func(d);
    if (order == 0) {
        return result.real;
    }
    return result.duals[@as(usize, @intCast(order - 1))] * factorial(order);
}

fn test_differentiate() void {
    if (differentiate(&f1, 2.0, 2) != 2.0) {
        @panic("f1 failed");
    }
    if (differentiate(&f2, 9.0, 2) != 196830.0) {
        @panic("f2 failed");
    }
    if (differentiate(&f3, 3.5, 4) != 7605.0) {
        @panic("f3 failed");
    }
    if (differentiate(&f4, 4.0, 3) != 0.0) {
        @panic("f4 failed");
    }
}

fn mochi_main() void {
    test_differentiate();
    const res: f64 = differentiate(&f, 9.0, 2);
    std.debug.print("{d}\n", .{res});
}

fn f1(x: Dual) Dual {
    return dual_pow(x, 2);
}

fn f2(x: Dual) Dual {
    return dual_mul(dual_pow(x, 2), dual_pow(x, 4));
}

fn f3(y: Dual) Dual {
    return dual_mul_real(dual_pow(dual_add_real(y, 3.0), 6), 0.5);
}

fn f4(y: Dual) Dual {
    return dual_pow(y, 2);
}

fn f(y: Dual) Dual {
    return dual_mul(dual_pow(y, 2), dual_pow(y, 4));
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        mochi_main();
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * std.heap.pageSize();
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
