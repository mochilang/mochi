// Generated by Mochi Zig transpiler on 2025-08-16 14:44 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn pow_int(base: i64, exp: i64) i64 {
    var result: i64 = 1;
    result = result;
    var i: i64 = 0;
    i = i;
    while (i < exp) {
        result = result *% base;
        i = i +% 1;
    }
    return result;
}

fn prime_factors(n: i64) []i64 {
    if (n <= 0) {
        @panic("Only positive integers have prime factors");
    }
    var num: i64 = n;
    num = num;
    var pf: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    pf = pf;
    while (@mod(num, 2) == 0) {
        pf = blk0: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); _tmp.appendSlice(@as([]const i64, pf)) catch |err| handleError(err); _tmp.append(2) catch |err| handleError(err); break :blk0 (_tmp.toOwnedSlice() catch |err| handleError(err)); };
        num = @divTrunc(num, 2);
    }
    var i_1: i64 = 3;
    i_1 = i_1;
    while (i_1 *% i_1 <= num) {
        while (@mod(num, i_1) == 0) {
            pf = blk1: { var _tmp_1 = std.ArrayList(i64).init(std.heap.page_allocator); _tmp_1.appendSlice(@as([]const i64, pf)) catch |err| handleError(err); _tmp_1.append(i_1) catch |err| handleError(err); break :blk1 (_tmp_1.toOwnedSlice() catch |err| handleError(err)); };
            num = @divTrunc(num, i_1);
        }
        i_1 = i_1 +% 2;
    }
    if (num > 2) {
        pf = blk2: { var _tmp_2 = std.ArrayList(i64).init(std.heap.page_allocator); _tmp_2.appendSlice(@as([]const i64, pf)) catch |err| handleError(err); _tmp_2.append(num) catch |err| handleError(err); break :blk2 (_tmp_2.toOwnedSlice() catch |err| handleError(err)); };
    }
    return pf;
}

fn number_of_divisors(n_1: i64) i64 {
    if (n_1 <= 0) {
        @panic("Only positive numbers are accepted");
    }
    var num_1: i64 = n_1;
    num_1 = num_1;
    var div: i64 = 1;
    div = div;
    var temp: i64 = 1;
    temp = temp;
    while (@mod(num_1, 2) == 0) {
        temp = temp +% 1;
        num_1 = @divTrunc(num_1, 2);
    }
    div = div *% temp;
    var i_2: i64 = 3;
    i_2 = i_2;
    while (i_2 *% i_2 <= num_1) {
        temp = 1;
        while (@mod(num_1, i_2) == 0) {
            temp = temp +% 1;
            num_1 = @divTrunc(num_1, i_2);
        }
        div = div *% temp;
        i_2 = i_2 +% 2;
    }
    if (num_1 > 1) {
        div = div *% 2;
    }
    return div;
}

fn sum_of_divisors(n_2: i64) i64 {
    if (n_2 <= 0) {
        @panic("Only positive numbers are accepted");
    }
    var num_2: i64 = n_2;
    num_2 = num_2;
    var s: i64 = 1;
    s = s;
    var temp_1: i64 = 1;
    temp_1 = temp_1;
    while (@mod(num_2, 2) == 0) {
        temp_1 = temp_1 +% 1;
        num_2 = @divTrunc(num_2, 2);
    }
    if (temp_1 > 1) {
        s = s *% (@divTrunc(pow_int(2, temp_1) -% 1, 1));
    }
    var i_3: i64 = 3;
    i_3 = i_3;
    while (i_3 *% i_3 <= num_2) {
        temp_1 = 1;
        while (@mod(num_2, i_3) == 0) {
            temp_1 = temp_1 +% 1;
            num_2 = @divTrunc(num_2, i_3);
        }
        if (temp_1 > 1) {
            s = s *% (@divTrunc(pow_int(i_3, temp_1) -% 1, i_3 -% 1));
        }
        i_3 = i_3 +% 2;
    }
    return s;
}

fn contains(arr: []i64, x: i64) bool {
    var idx: i64 = 0;
    idx = idx;
    while (idx < @as(i64, @intCast(arr.len))) {
        if (arr[_idx(arr.len, idx)] == x) {
            return true;
        }
        idx = idx +% 1;
    }
    return false;
}

fn unique(arr_1: []i64) []i64 {
    var result_1: []i64 = std.heap.page_allocator.alloc(i64, 0) catch unreachable;
    result_1 = result_1;
    var idx_1: i64 = 0;
    idx_1 = idx_1;
    while (idx_1 < @as(i64, @intCast(arr_1.len))) {
        const v: i64 = arr_1[_idx(arr_1.len, idx_1)];
        if (!(contains(result_1, v))) {
            result_1 = blk3: { var _tmp_3 = std.ArrayList(i64).init(std.heap.page_allocator); _tmp_3.appendSlice(@as([]const i64, result_1)) catch |err| handleError(err); _tmp_3.append(v) catch |err| handleError(err); break :blk3 (_tmp_3.toOwnedSlice() catch |err| handleError(err)); };
        }
        idx_1 = idx_1 +% 1;
    }
    return result_1;
}

fn euler_phi(n_3: i64) i64 {
    if (n_3 <= 0) {
        @panic("Only positive numbers are accepted");
    }
    var s_1: i64 = n_3;
    s_1 = s_1;
    const factors: []i64 = unique(prime_factors(n_3));
    var idx_2: i64 = 0;
    idx_2 = idx_2;
    while (idx_2 < @as(i64, @intCast(factors.len))) {
        const x_1: i64 = factors[_idx(factors.len, idx_2)];
        s_1 = @divTrunc(s_1, x_1) *% (x_1 -% 1);
        idx_2 = idx_2 +% 1;
    }
    return s_1;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        std.debug.print("{s}\n", .{_str(prime_factors(100))});
        std.debug.print("{s}\n", .{_str(number_of_divisors(100))});
        std.debug.print("{s}\n", .{_str(sum_of_divisors(100))});
        std.debug.print("{s}\n", .{_str(euler_phi(100))});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
