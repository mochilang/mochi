// Generated by Mochi Zig transpiler on 2025-08-12 13:41 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const PI_var: f64 = 3.141592653589793;
const SQRT5_var: f64 = 2.23606797749979;

fn minf(a_param: f64, b_param: f64) f64 {
    var a_var: f64 = a_param;
    a_var = a_var;
    var b_var: f64 = b_param;
    b_var = b_var;
    if (a_var < b_var) {
        return a_var;
    }
    return b_var;
}

fn maxf(a_param_1: f64, b_param_1: f64) f64 {
    var a_var: f64 = a_param_1;
    a_var = a_var;
    var b_var: f64 = b_param_1;
    b_var = b_var;
    if (a_var > b_var) {
        return a_var;
    }
    return b_var;
}

fn vol_cube(side_length_param: f64) f64 {
    var side_length_var: f64 = side_length_param;
    side_length_var = side_length_var;
    if (side_length_var < 0.0) {
        @panic("vol_cube() only accepts non-negative values");
    }
    return side_length_var * side_length_var * side_length_var;
}

fn vol_spherical_cap(height_param: f64, radius_param: f64) f64 {
    var height_var: f64 = height_param;
    height_var = height_var;
    var radius_var: f64 = radius_param;
    radius_var = radius_var;
    if (height_var < 0.0 or radius_var < 0.0) {
        @panic("vol_spherical_cap() only accepts non-negative values");
    }
    return 1.0 / 3.0 * PI_var * height_var * height_var * (3.0 * radius_var - height_var);
}

fn vol_sphere(radius_param_1: f64) f64 {
    var radius_var: f64 = radius_param_1;
    radius_var = radius_var;
    if (radius_var < 0.0) {
        @panic("vol_sphere() only accepts non-negative values");
    }
    return 4.0 / 3.0 * PI_var * radius_var * radius_var * radius_var;
}

fn vol_spheres_intersect(radius_1_param: f64, radius_2_param: f64, centers_distance_param: f64) f64 {
    var radius_1_var: f64 = radius_1_param;
    radius_1_var = radius_1_var;
    var radius_2_var: f64 = radius_2_param;
    radius_2_var = radius_2_var;
    var centers_distance_var: f64 = centers_distance_param;
    centers_distance_var = centers_distance_var;
    if (radius_1_var < 0.0 or radius_2_var < 0.0 or centers_distance_var < 0.0) {
        @panic("vol_spheres_intersect() only accepts non-negative values");
    }
    if (centers_distance_var == 0.0) {
        return vol_sphere(minf(radius_1_var, radius_2_var));
    }
    const h1: f64 = (radius_1_var - radius_2_var + centers_distance_var) * (radius_1_var + radius_2_var - centers_distance_var) / (2.0 * centers_distance_var);
    const h2: f64 = (radius_2_var - radius_1_var + centers_distance_var) * (radius_2_var + radius_1_var - centers_distance_var) / (2.0 * centers_distance_var);
    return vol_spherical_cap(h1, radius_2_var) + vol_spherical_cap(h2, radius_1_var);
}

fn vol_spheres_union(radius_1_param_1: f64, radius_2_param_1: f64, centers_distance_param_1: f64) f64 {
    var radius_1_var: f64 = radius_1_param_1;
    radius_1_var = radius_1_var;
    var radius_2_var: f64 = radius_2_param_1;
    radius_2_var = radius_2_var;
    var centers_distance_var: f64 = centers_distance_param_1;
    centers_distance_var = centers_distance_var;
    if (radius_1_var <= 0.0 or radius_2_var <= 0.0 or centers_distance_var < 0.0) {
        @panic("vol_spheres_union() only accepts non-negative values, non-zero radius");
    }
    if (centers_distance_var == 0.0) {
        return vol_sphere(maxf(radius_1_var, radius_2_var));
    }
    return vol_sphere(radius_1_var) + vol_sphere(radius_2_var) - vol_spheres_intersect(radius_1_var, radius_2_var, centers_distance_var);
}

fn vol_cuboid(width_param: f64, height_param_1: f64, length_param: f64) f64 {
    var width_var: f64 = width_param;
    width_var = width_var;
    var height_var: f64 = height_param_1;
    height_var = height_var;
    var length_var: f64 = length_param;
    length_var = length_var;
    if (width_var < 0.0 or height_var < 0.0 or length_var < 0.0) {
        @panic("vol_cuboid() only accepts non-negative values");
    }
    return width_var * height_var * length_var;
}

fn vol_cone(area_of_base_param: f64, height_param_2: f64) f64 {
    var area_of_base_var: f64 = area_of_base_param;
    area_of_base_var = area_of_base_var;
    var height_var: f64 = height_param_2;
    height_var = height_var;
    if (height_var < 0.0 or area_of_base_var < 0.0) {
        @panic("vol_cone() only accepts non-negative values");
    }
    return area_of_base_var * height_var / 3.0;
}

fn vol_right_circ_cone(radius_param_2: f64, height_param_3: f64) f64 {
    var radius_var: f64 = radius_param_2;
    radius_var = radius_var;
    var height_var: f64 = height_param_3;
    height_var = height_var;
    if (height_var < 0.0 or radius_var < 0.0) {
        @panic("vol_right_circ_cone() only accepts non-negative values");
    }
    return PI_var * radius_var * radius_var * height_var / 3.0;
}

fn vol_prism(area_of_base_param_1: f64, height_param_4: f64) f64 {
    var area_of_base_var: f64 = area_of_base_param_1;
    area_of_base_var = area_of_base_var;
    var height_var: f64 = height_param_4;
    height_var = height_var;
    if (height_var < 0.0 or area_of_base_var < 0.0) {
        @panic("vol_prism() only accepts non-negative values");
    }
    return area_of_base_var * height_var;
}

fn vol_pyramid(area_of_base_param_2: f64, height_param_5: f64) f64 {
    var area_of_base_var: f64 = area_of_base_param_2;
    area_of_base_var = area_of_base_var;
    var height_var: f64 = height_param_5;
    height_var = height_var;
    if (height_var < 0.0 or area_of_base_var < 0.0) {
        @panic("vol_pyramid() only accepts non-negative values");
    }
    return area_of_base_var * height_var / 3.0;
}

fn vol_hemisphere(radius_param_3: f64) f64 {
    var radius_var: f64 = radius_param_3;
    radius_var = radius_var;
    if (radius_var < 0.0) {
        @panic("vol_hemisphere() only accepts non-negative values");
    }
    return radius_var * radius_var * radius_var * PI_var * 2.0 / 3.0;
}

fn vol_circular_cylinder(radius_param_4: f64, height_param_6: f64) f64 {
    var radius_var: f64 = radius_param_4;
    radius_var = radius_var;
    var height_var: f64 = height_param_6;
    height_var = height_var;
    if (height_var < 0.0 or radius_var < 0.0) {
        @panic("vol_circular_cylinder() only accepts non-negative values");
    }
    return radius_var * radius_var * height_var * PI_var;
}

fn vol_hollow_circular_cylinder(inner_radius_param: f64, outer_radius_param: f64, height_param_7: f64) f64 {
    var inner_radius_var: f64 = inner_radius_param;
    inner_radius_var = inner_radius_var;
    var outer_radius_var: f64 = outer_radius_param;
    outer_radius_var = outer_radius_var;
    var height_var: f64 = height_param_7;
    height_var = height_var;
    if (inner_radius_var < 0.0 or outer_radius_var < 0.0 or height_var < 0.0) {
        @panic("vol_hollow_circular_cylinder() only accepts non-negative values");
    }
    if (outer_radius_var <= inner_radius_var) {
        @panic("outer_radius must be greater than inner_radius");
    }
    return PI_var * (outer_radius_var * outer_radius_var - inner_radius_var * inner_radius_var) * height_var;
}

fn vol_conical_frustum(height_param_8: f64, radius_1_param_2: f64, radius_2_param_2: f64) f64 {
    var height_var: f64 = height_param_8;
    height_var = height_var;
    var radius_1_var: f64 = radius_1_param_2;
    radius_1_var = radius_1_var;
    var radius_2_var: f64 = radius_2_param_2;
    radius_2_var = radius_2_var;
    if (radius_1_var < 0.0 or radius_2_var < 0.0 or height_var < 0.0) {
        @panic("vol_conical_frustum() only accepts non-negative values");
    }
    return 1.0 / 3.0 * PI_var * height_var * (radius_1_var * radius_1_var + radius_2_var * radius_2_var + radius_1_var * radius_2_var);
}

fn vol_torus(torus_radius_param: f64, tube_radius_param: f64) f64 {
    var torus_radius_var: f64 = torus_radius_param;
    torus_radius_var = torus_radius_var;
    var tube_radius_var: f64 = tube_radius_param;
    tube_radius_var = tube_radius_var;
    if (torus_radius_var < 0.0 or tube_radius_var < 0.0) {
        @panic("vol_torus() only accepts non-negative values");
    }
    return 2.0 * PI_var * PI_var * torus_radius_var * tube_radius_var * tube_radius_var;
}

fn vol_icosahedron(tri_side_param: f64) f64 {
    var tri_side_var: f64 = tri_side_param;
    tri_side_var = tri_side_var;
    if (tri_side_var < 0.0) {
        @panic("vol_icosahedron() only accepts non-negative values");
    }
    return tri_side_var * tri_side_var * tri_side_var * (3.0 + SQRT5_var) * 5.0 / 12.0;
}

fn mochi_main() void {
    std.debug.print("{s}\n", .{"Volumes:"});
    std.debug.print("{s}\n", .{_concat_string("Cube: ", _str(vol_cube(2.0)))});
    std.debug.print("{s}\n", .{_concat_string("Cuboid: ", _str(vol_cuboid(2.0, 2.0, 2.0)))});
    std.debug.print("{s}\n", .{_concat_string("Cone: ", _str(vol_cone(2.0, 2.0)))});
    std.debug.print("{s}\n", .{_concat_string("Right Circular Cone: ", _str(vol_right_circ_cone(2.0, 2.0)))});
    std.debug.print("{s}\n", .{_concat_string("Prism: ", _str(vol_prism(2.0, 2.0)))});
    std.debug.print("{s}\n", .{_concat_string("Pyramid: ", _str(vol_pyramid(2.0, 2.0)))});
    std.debug.print("{s}\n", .{_concat_string("Sphere: ", _str(vol_sphere(2.0)))});
    std.debug.print("{s}\n", .{_concat_string("Hemisphere: ", _str(vol_hemisphere(2.0)))});
    std.debug.print("{s}\n", .{_concat_string("Circular Cylinder: ", _str(vol_circular_cylinder(2.0, 2.0)))});
    std.debug.print("{s}\n", .{_concat_string("Torus: ", _str(vol_torus(2.0, 2.0)))});
    std.debug.print("{s}\n", .{_concat_string("Conical Frustum: ", _str(vol_conical_frustum(2.0, 2.0, 4.0)))});
    std.debug.print("{s}\n", .{_concat_string("Spherical cap: ", _str(vol_spherical_cap(1.0, 2.0)))});
    std.debug.print("{s}\n", .{_concat_string("Spheres intersection: ", _str(vol_spheres_intersect(2.0, 2.0, 1.0)))});
    std.debug.print("{s}\n", .{_concat_string("Spheres union: ", _str(vol_spheres_union(2.0, 2.0, 1.0)))});
    std.debug.print("{s}\n", .{_concat_string("Hollow Circular Cylinder: ", _str(vol_hollow_circular_cylinder(1.0, 2.0, 3.0)))});
    std.debug.print("{s}\n", .{_concat_string("Icosahedron: ", _str(vol_icosahedron(2.5)))});
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        mochi_main();
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .pointer => |p| {
        if (p.size == .slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .@"struct" => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.heap.pageSize()));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
