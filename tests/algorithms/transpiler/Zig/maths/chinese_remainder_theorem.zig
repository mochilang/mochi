// Generated by Mochi Zig transpiler on 2025-08-16 14:44 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const EuclidResult = struct {
    x: i64,
    y: i64,
};

var e1_var: EuclidResult = undefined;
var e2_var: EuclidResult = undefined;

fn extended_euclid(a: i64, b: i64) EuclidResult {
    if (b == 0) {
        return .{ .x = 1, .y = 0 };
    }
    const res: EuclidResult = extended_euclid(b, @mod(a, b));
    const k: i64 = @divTrunc(a, b);
    return .{ .x = res.y, .y = res.x -% k *% res.y };
}

fn chinese_remainder_theorem(n1: i64, r1: i64, n2: i64, r2: i64) i64 {
    const res_1: EuclidResult = extended_euclid(n1, n2);
    const x: i64 = res_1.x;
    const y: i64 = res_1.y;
    const m: i64 = n1 *% n2;
    const n: i64 = r2 *% x *% n1 +% r1 *% y *% n2;
    return @mod(@mod(n, m) +% m, m);
}

fn invert_modulo(a_1: i64, n_1: i64) i64 {
    const res_2: EuclidResult = extended_euclid(a_1, n_1);
    var b_1: i64 = res_2.x;
    b_1 = b_1;
    if (b_1 < 0) {
        b_1 = @mod(@mod(b_1, n_1) +% n_1, n_1);
    }
    return b_1;
}

fn chinese_remainder_theorem2(n1_1: i64, r1_1: i64, n2_1: i64, r2_1: i64) i64 {
    const x_1: i64 = invert_modulo(n1_1, n2_1);
    const y_1: i64 = invert_modulo(n2_1, n1_1);
    const m_1: i64 = n1_1 *% n2_1;
    const n_2: i64 = r2_1 *% x_1 *% n1_1 +% r1_1 *% y_1 *% n2_1;
    return @mod(@mod(n_2, m_1) +% m_1, m_1);
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        e1_var = extended_euclid(10, 6);
        e2_var = extended_euclid(7, 5);
        std.debug.print("{s}\n", .{_concat_string(_concat_string(_str(e1_var.x), ","), _str(e1_var.y))});
        std.debug.print("{s}\n", .{_concat_string(_concat_string(_str(e2_var.x), ","), _str(e2_var.y))});
        std.debug.print("{s}\n", .{_str(chinese_remainder_theorem(5, 1, 7, 3))});
        std.debug.print("{s}\n", .{_str(chinese_remainder_theorem(6, 1, 4, 3))});
        std.debug.print("{s}\n", .{_str(invert_modulo(2, 5))});
        std.debug.print("{s}\n", .{_str(invert_modulo(8, 7))});
        std.debug.print("{s}\n", .{_str(chinese_remainder_theorem2(5, 1, 7, 3))});
        std.debug.print("{s}\n", .{_str(chinese_remainder_theorem2(6, 1, 4, 3))});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
