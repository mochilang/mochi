// Generated by Mochi Zig transpiler on 2025-08-16 14:44 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

var digits_var_1: []const u8 = "";
var i_var_3: i64 = 1;

fn mod_pow(base: i64, exponent: i64, modulus: i64) i64 {
    var result: i64 = 1;
    result = result;
    var b: i64 = @mod(base, modulus);
    b = b;
    var e: i64 = exponent;
    e = e;
    while (e > 0) {
        if (@mod(e, 2) == 1) {
            result = @mod(result *% b, modulus);
        }
        b = @mod(b *% b, modulus);
        e = @divTrunc(e, 2);
    }
    return result;
}

fn pow_float(base_1: f64, exponent_1: i64) f64 {
    var exp: i64 = exponent_1;
    exp = exp;
    var result_1: f64 = 1.0;
    result_1 = result_1;
    if (exp < 0) {
        exp = 0 -% exp;
    }
    var i_var_1: i64 = 0;
    i_var_1 = i_var_1;
    while (i_var_1 < exp) {
        result_1 = result_1 * base_1;
        i_var_1 = i_var_1 +% 1;
    }
    if (exponent_1 < 0) {
        result_1 = 1.0 / result_1;
    }
    return result_1;
}

fn hex_digit(n: i64) []const u8 {
    if (n < 10) {
        return _str(n);
    }
    const letters: [][]const u8 = @constCast(([6][]const u8{"a", "b", "c", "d", "e", "f"})[0..6]);
    return letters[_idx(letters.len, n -% 10)];
}

fn floor_float(x: f64) f64 {
    var i_var_2: i64 = @as(i64, @intFromFloat(x));
    i_var_2 = i_var_2;
    if (@as(f64, @floatFromInt(i_var_2)) > x) {
        i_var_2 = i_var_2 -% 1;
    }
    return @as(f64, @floatFromInt(i_var_2));
}

fn subsum(digit_pos_to_extract: i64, denominator_addend: i64, precision: i64) f64 {
    var total: f64 = 0.0;
    total = total;
    var sum_index: i64 = 0;
    sum_index = sum_index;
    while (sum_index < digit_pos_to_extract +% precision) {
        const denominator: i64 = 8 *% sum_index +% denominator_addend;
        if (sum_index < digit_pos_to_extract) {
            const exponent_2: i64 = digit_pos_to_extract -% 1 -% sum_index;
            const exponential_term: i64 = mod_pow(16, exponent_2, denominator);
            total = total + @as(f64, @floatFromInt(exponential_term)) / @as(f64, @floatFromInt(denominator));
        } else {
            const exponent_3: i64 = digit_pos_to_extract -% 1 -% sum_index;
            const exponential_term_1: f64 = pow_float(16.0, exponent_3);
            total = total + exponential_term_1 / @as(f64, @floatFromInt(denominator));
        }
        sum_index = sum_index +% 1;
    }
    return total;
}

fn bailey_borwein_plouffe(digit_position: i64, precision_1: i64) []const u8 {
    if (digit_position <= 0) {
        @panic("Digit position must be a positive integer");
    }
    if (precision_1 < 0) {
        @panic("Precision must be a nonnegative integer");
    }
    const sum_result: f64 = 4.0 * subsum(digit_position, 1, precision_1) - 2.0 * subsum(digit_position, 4, precision_1) - 1.0 * subsum(digit_position, 5, precision_1) - 1.0 * subsum(digit_position, 6, precision_1);
    const fraction: f64 = sum_result - floor_float(sum_result);
    const digit: i64 = @as(i64, @intFromFloat(fraction * 16.0));
    const hd: []const u8 = hex_digit(digit);
    return hd;
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        while (i_var_3 <= 10) {
            digits_var_1 = _concat_string(digits_var_1, bailey_borwein_plouffe(i_var_3, 1000));
            i_var_3 = i_var_3 +% 1;
        }
        std.debug.print("{s}\n", .{digits_var_1});
        std.debug.print("{s}\n", .{bailey_borwein_plouffe(5, 10000)});
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
