// Generated by Mochi Zig transpiler on 2025-08-16 14:44 +0700
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn pow2_int(n: i64) i64 {
    var result: i64 = 1;
    result = result;
    var i: i64 = 0;
    i = i;
    while (i < n) {
        result = result *% 2;
        i = i +% 1;
    }
    return result;
}

fn pow2_float(n_1: i64) f64 {
    var result_1: f64 = 1.0;
    result_1 = result_1;
    if (n_1 >= 0) {
        var i_1: i64 = 0;
        i_1 = i_1;
        while (i_1 < n_1) {
            result_1 = result_1 * 2.0;
            i_1 = i_1 +% 1;
        }
    } else {
        var i_2: i64 = 0;
        i_2 = i_2;
        const m: i64 = 0 -% n_1;
        while (i_2 < m) {
            result_1 = result_1 / 2.0;
            i_2 = i_2 +% 1;
        }
    }
    return result_1;
}

fn lshift(num: i64, k: i64) i64 {
    var result_2: i64 = num;
    result_2 = result_2;
    var i_3: i64 = 0;
    i_3 = i_3;
    while (i_3 < k) {
        result_2 = result_2 *% 2;
        i_3 = i_3 +% 1;
    }
    return result_2;
}

fn rshift(num_1: i64, k_1: i64) i64 {
    var result_3: i64 = num_1;
    result_3 = result_3;
    var i_4: i64 = 0;
    i_4 = i_4;
    while (i_4 < k_1) {
        result_3 = @divTrunc(result_3 -% @mod(result_3, 2), 2);
        i_4 = i_4 +% 1;
    }
    return result_3;
}

fn log2_floor(x: f64) i64 {
    var n_2: f64 = x;
    n_2 = n_2;
    var e: i64 = 0;
    e = e;
    while (n_2 >= 2.0) {
        n_2 = n_2 / 2.0;
        e = e +% 1;
    }
    while (n_2 < 1.0) {
        n_2 = n_2 * 2.0;
        e = e -% 1;
    }
    return e;
}

fn float_to_bits(x_1: f64) i64 {
    var num_2: f64 = x_1;
    num_2 = num_2;
    var sign: i64 = 0;
    sign = sign;
    if (num_2 < 0.0) {
        sign = 1;
        num_2 = @as(f64, @floatFromInt(0)) - num_2;
    }
    const exp: i64 = log2_floor(num_2);
    const pow: f64 = pow2_float(exp);
    const normalized: f64 = num_2 / pow;
    const frac: f64 = normalized - 1.0;
    const mantissa: i64 = @as(i64, @intFromFloat(frac * pow2_float(23)));
    const exp_bits: i64 = exp +% 127;
    return lshift(sign, 31) +% lshift(exp_bits, 23) +% mantissa;
}

fn bits_to_float(bits: i64) f64 {
    const sign_bit: i64 = @mod(rshift(bits, 31), 2);
    var sign_1: f64 = 1.0;
    sign_1 = sign_1;
    if (sign_bit == 1) {
        sign_1 = @as(f64, @floatFromInt(0)) - 1.0;
    }
    const exp_bits_1: i64 = @mod(rshift(bits, 23), 256);
    const exp_1: i64 = exp_bits_1 -% 127;
    const mantissa_bits: i64 = @mod(bits, pow2_int(23));
    const mantissa_1: f64 = 1.0 + @as(f64, @floatFromInt(mantissa_bits)) / pow2_float(23);
    return sign_1 * mantissa_1 * pow2_float(exp_1);
}

fn absf(x_2: f64) f64 {
    if (x_2 < 0.0) {
        return @as(f64, @floatFromInt(0)) - x_2;
    }
    return x_2;
}

fn sqrtApprox(x_3: f64) f64 {
    if (x_3 <= 0.0) {
        return 0.0;
    }
    var guess: f64 = x_3 / 2.0;
    guess = guess;
    var i_5: i64 = 0;
    i_5 = i_5;
    while (i_5 < 20) {
        guess = (guess + x_3 / guess) / 2.0;
        i_5 = i_5 +% 1;
    }
    return guess;
}

fn is_close(a: f64, b: f64, rel_tol: f64) bool {
    return absf(a - b) <= rel_tol * absf(b);
}

fn fast_inverse_sqrt(number: f64) f64 {
    if (number <= 0.0) {
        @panic("Input must be a positive number.");
    }
    const i_6: i64 = float_to_bits(number);
    const magic: i64 = 1597463007;
    const y_bits: i64 = magic -% rshift(i_6, 1);
    var y: f64 = bits_to_float(y_bits);
    y = y;
    y = y * (1.5 - 0.5 * number * y * y);
    return y;
}

fn test_fast_inverse_sqrt() void {
    if (absf(fast_inverse_sqrt(10.0) - 0.3156857923527257) > 0.0001) {
        @panic("fast_inverse_sqrt(10) failed");
    }
    if (absf(fast_inverse_sqrt(4.0) - 0.49915357479239103) > 0.0001) {
        @panic("fast_inverse_sqrt(4) failed");
    }
    if (absf(fast_inverse_sqrt(4.1) - 0.4932849504615651) > 0.0001) {
        @panic("fast_inverse_sqrt(4.1) failed");
    }
    var i_7: i64 = 50;
    i_7 = i_7;
    while (i_7 < 60) {
        const y_1: f64 = fast_inverse_sqrt(@as(f64, @floatFromInt(i_7)));
        const actual: f64 = 1.0 / sqrtApprox(@as(f64, @floatFromInt(i_7)));
        if (!(is_close(y_1, actual, 0.00132))) {
            @panic("relative error too high");
        }
        i_7 = i_7 +% 1;
    }
}

fn mochi_main() void {
    test_fast_inverse_sqrt();
    var i_8: i64 = 5;
    i_8 = i_8;
    while (i_8 <= 100) {
        const diff: f64 = 1.0 / sqrtApprox(@as(f64, @floatFromInt(i_8))) - fast_inverse_sqrt(@as(f64, @floatFromInt(i_8)));
        std.debug.print("{s}\n", .{_concat_string(_concat_string(_str(i_8), ": "), _str(diff))});
        i_8 = i_8 +% 5;
    }
}

pub fn main() void {
    {
        const __start = _now();
        const __start_mem: i64 = _mem();
        mochi_main();
        const __end = _now();
        const __end_mem: i64 = _mem();
        const __duration_us: i64 = @divTrunc(@as(i64, @intCast(__end - __start)), 1000);
        const __mem_diff: i64 = __end_mem - __start_mem;
        const __memory_bytes: i64 = if (__mem_diff < 0) -__mem_diff else __mem_diff;
        std.debug.print("{{\"duration_us\":{d},\"memory_bytes\":{d},\"name\":\"main\"}}\n", .{__duration_us, __memory_bytes});
    }
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |env_seed| {
            defer std.heap.page_allocator.free(env_seed);
            if (std.fmt.parseInt(i64, env_seed, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _idx(len: usize, i: i64) usize {
    return if (i < 0 or i >= @as(i64, @intCast(len))) 0 else @as(usize, @intCast(i));
}

fn _str(v: anytype) []const u8 {
    if (@TypeOf(v) == f64 or @TypeOf(v) == f32) {
        return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{v}) catch unreachable;
    }
    const info = @typeInfo(@TypeOf(v));
    switch (info) {
    .Pointer => |p| {
        if (p.size == .Slice) {
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.append('[') catch unreachable;
            for (v, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                const s = _str(e);
                out.appendSlice(s) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    .Struct => |_| {
        if (@hasDecl(@TypeOf(v), "iterator")) {
            const KVPair = struct{ ks: []const u8, vs: []const u8 };
            var pairs = std.ArrayList(KVPair).init(std.heap.page_allocator);
            defer pairs.deinit();
            var it = v.iterator();
            while (it.next()) |e| {
                const ks = _str(e.key_ptr.*);
                const vs = _str(e.value_ptr.*);
                pairs.append(.{ .ks = ks, .vs = vs }) catch unreachable;
            }
            std.sort.heap(KVPair, pairs.items, {}, struct {
                pub fn less(_: void, a: KVPair, b: KVPair) bool {
                    return std.mem.lessThan(u8, a.ks, b.ks);
                }
            }.less);
            var out = std.ArrayList(u8).init(std.heap.page_allocator);
            defer out.deinit();
            out.appendSlice("map[") catch unreachable;
            for (pairs.items, 0..) |e, i| {
                if (i != 0) { out.append(' ') catch unreachable; }
                out.appendSlice(e.ks) catch unreachable;
                out.append(':') catch unreachable;
                out.appendSlice(e.vs) catch unreachable;
            }
            out.append(']') catch unreachable;
            return out.toOwnedSlice() catch unreachable;
        }
    },
    else => {},
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(lhs: []const u8, rhs: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    var out = alloc.alloc(u8, lhs.len + rhs.len + 1) catch unreachable;
    std.mem.copyForwards(u8, out[0..lhs.len], lhs);
    std.mem.copyForwards(u8, out[lhs.len..lhs.len + rhs.len], rhs);
    out[lhs.len + rhs.len] = 0;
    return out[0..lhs.len + rhs.len];
}

fn _mem() i64 {
    const path = "/proc/self/statm";
    var file = std.fs.openFileAbsolute(path, .{}) catch return 0;
    defer file.close();
    var buf: [64]u8 = undefined;
    const n = file.readAll(&buf) catch return 0;
    var it = std.mem.tokenizeScalar(u8, buf[0..n], ' ');
    _ = it.next(); // total program size
    if (it.next()) |tok| {
        const pages = std.fmt.parseInt(i64, tok, 10) catch return 0;
        return pages * @as(i64, @intCast(std.mem.page_size));
    }
    return 0;
}

fn _print(v: []const u8) void {
    std.debug.print("{s}\n", .{v});
}
